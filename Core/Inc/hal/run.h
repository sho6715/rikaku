/*
 * run.h
 *
 *  Created on: 2021/01/30
 *      Author: shohe
 */

#ifndef INC_RUN_H_
#define INC_RUN_H_

#ifdef _VSCODE
#include "Inc/glob.h"
#include "Inc/parameter.h"
#include "Inc/hal/CTRL.h"
#include "Inc/hal/gyro.h"
#include "Inc/search/search.h"
#include "Inc/hal/DCM.h"
#include "Inc/hal/sen_dist.h"
#include "Inc/search/map_cmd.h"
#else
#include "glob.h"
#include "parameter.h"
#include "hal/CTRL.h"
#include "hal/gyro.h"
#include "search/search.h"
#include "hal/DCM.h"
#include "hal/sen_dist.h"
#include "search/map_cmd.h"
#endif

/* ????^?C?v */
typedef enum{
	MOT_ST_NC    =  0,
	MOT_ACC_CONST_DEC,			// [01] ??`????
	MOT_ACC_CONST_DEC_CUSTOM,	// [02] ??`?????i?????l??X?j
	MOT_ACC_CONST,				// [03] ?????{????
	MOT_ACC_CONST_CUSTOM,		// [04] ?????{?????i?????l??X?j
	MOT_CONST_DEC,				// [05] ?????{????
	MOT_CONST_DEC_CUSTOM,		// [06] ?????{?????i?????l??X?j
	MOT_ST_MAX,
}enMOT_ST_TYPE;

/* ???i?^?C?v */
typedef enum{
	MOT_GO_ST_NORMAL    =  0,	// ??????i
	MOT_GO_ST_SKEW,				// ??????i
	MOT_GO_ST_MAX,
}enMOT_GO_ST_TYPE;

/* ????R?}???h???X?g */
typedef enum{
	MOT_R90 =0,					// ?E 90?x???M?n????
	MOT_L90,					// ?? 90?x???M?n????
	MOT_R180,					// ?E180?x???M?n????
	MOT_L180,					// ??180?x???M?n????
	MOT_R360,					// ?E360?x???M?n????
	MOT_L360,					// ??360?x???M?n????
	MOT_TURN_CMD_MAX
}enMOT_TURN_CMD;

/* ?X?????[???R?}???h???X?g */
typedef enum{
	MOT_R90S =0,				// ?E 90?x???X?????[??
	MOT_L90S,					// ?? 90?x???X?????[??
	MOT_R45S_S2N,				// [???p] ?E 45?x???X?????[???A?X?g???[?g ?? ???
	MOT_L45S_S2N,				// [???p] ?? 45?x???X?????[???A?X?g???[?g ?? ???
	MOT_R45S_N2S,				// [???p] ?E 45?x???X?????[???A??? ?? ?X?g???[?g
	MOT_L45S_N2S,				// [???p] ?? 45?x???X?????[???A??? ?? ?X?g???[?g
	MOT_R90S_N,					// [???p] ?E 90?x???X?????[???A??? ?? ???
	MOT_L90S_N,					// [???p] ?? 90?x???X?????[???A??? ?? ???
	MOT_R135S_S2N,				// [???p] ?E135?x???X?????[???A?X?g???[?g ?? ???
	MOT_L135S_S2N,				// [???p] ??135?x???X?????[???A?X?g???[?g ?? ???
	MOT_R135S_N2S,				// [???p] ?E135?x???X?????[???A??? ?? ?X?g???[?g
	MOT_L135S_N2S,				// [???p] ??135?x???X?????[???A??? ?? ?X?g???[?g
	MOT_SLA_CMD_MAX,
}enMOT_SLA_CMD;

/* ????? */
typedef enum{
	MOT_WALL_EDGE_NONE =0,		// ???G?b?W???o???????
	MOT_WALL_EDGE_RIGHT,		// ?E???G?b?W???o????
	MOT_WALL_EDGE_LEFT,			// ?????G?b?W???o????
	MOT_WALL_EDGE_MAX,
}enMOT_WALL_EDGE_TYPE;

typedef enum{
	Right,
	Left,
	MAX,
}en_TURNTYPE;

extern en_TURNTYPE		en_TurnType;

float MOT_getAcc1( void );
float MOT_getAcc3( void );
void MOT_goBlock_AccConstDec( float f_fin, enMOT_ST_TYPE en_type, enMOT_GO_ST_TYPE en_goType );
void MOT_setData_ACC_CONST_DEC( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type );
void MOT_setData_MOT_ACC_CONST_DEC_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type );
void MOT_setData_MOT_ACC_CONST( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type );
void MOT_setData_MOT_ACC_CONST_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type );
void MOT_setData_MOT_CONST_DEC( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type );
void MOT_setData_MOT_CONST_DEC_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type );
enMOT_ST_TYPE MOT_getStType( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type );
void MOT_go_FinSpeed( float f_num, float f_fin, enMOT_GO_ST_TYPE en_goStType );
void MOT_goBlock_FinSpeed( float f_num, float f_fin );
void MOT_goSkewBlock_FinSpeed( float f_num, float f_fin );
void MOT_goBlock_Const(float f_num);
void testrun(void);
float MOT_getAccAngle1( void );
float MOT_getAccAngle3( void );
void MOT_turn( enMOT_TURN_CMD en_type );
void MOT_setSlaStaSpeed( float f_speed , uint8_t sla_cmd);
float MOT_getSlaStaSpeed( uint8_t sla_cmd );
float MOT_setTrgtSpeed(float f_speed);
void MOT_setNowSpeed(float f_speed);
void MOT_goHitBackWall(void);
void MOT_goSla( enMOT_SLA_CMD en_type, stSLA* p_sla );
void turntable(void);
void MOT_setWallEdgeType( enMOT_WALL_EDGE_TYPE en_type );
enMOT_WALL_EDGE_TYPE MOT_getWallEdgeType( void );
void MOT_setWallEdge( bool bl_val );
bool MOT_setWallEdgeDist( void );
bool MOT_setWallEdgeDist_LoopWait( void );
void DIST_Front_Wall_correction(void);


#endif /* INC_RUN_H_ */
