
BF01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000215d4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001318  080217b8  080217b8  000227b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022ad0  08022ad0  000241f8  2**0
                  CONTENTS
  4 .ARM          00000008  08022ad0  08022ad0  00023ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022ad8  08022ad8  000241f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022ad8  08022ad8  00023ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08022adc  08022adc  00023adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  08022ae0  00024000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001bcf8  200001f8  08022cd8  000241f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001bef0  08022cd8  00024ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000241f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d48  00000000  00000000  00024228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000408a  00000000  00000000  00038f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0003d000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010e0  00000000  00000000  0003e6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002859a  00000000  00000000  0003f780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d042  00000000  00000000  00067d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6c50  00000000  00000000  00084d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0015b9ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007410  00000000  00000000  0015ba34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00162e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0802179c 	.word	0x0802179c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	0802179c 	.word	0x0802179c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8000d54:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000d58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	d002      	beq.n	8000d7a <LL_ADC_SetGainCompensation+0x36>
 8000d74:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d78:	e000      	b.n	8000d7c <LL_ADC_SetGainCompensation+0x38>
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	611a      	str	r2, [r3, #16]
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b087      	sub	sp, #28
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3330      	adds	r3, #48	@ 0x30
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	0a1b      	lsrs	r3, r3, #8
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	f003 030c 	and.w	r3, r3, #12
 8000daa:	4413      	add	r3, r2
 8000dac:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	f003 031f 	and.w	r3, r3, #31
 8000db8:	211f      	movs	r1, #31
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	0e9b      	lsrs	r3, r3, #26
 8000dc6:	f003 011f 	and.w	r1, r3, #31
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	f003 031f 	and.w	r3, r3, #31
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000dda:	bf00      	nop
 8000ddc:	371c      	adds	r7, #28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b087      	sub	sp, #28
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3314      	adds	r3, #20
 8000df6:	461a      	mov	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	0e5b      	lsrs	r3, r3, #25
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	4413      	add	r3, r2
 8000e04:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	0d1b      	lsrs	r3, r3, #20
 8000e0e:	f003 031f 	and.w	r3, r3, #31
 8000e12:	2107      	movs	r1, #7
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	0d1b      	lsrs	r3, r3, #20
 8000e20:	f003 031f 	and.w	r3, r3, #31
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e30:	bf00      	nop
 8000e32:	371c      	adds	r7, #28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e54:	43db      	mvns	r3, r3
 8000e56:	401a      	ands	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0318 	and.w	r3, r3, #24
 8000e5e:	4908      	ldr	r1, [pc, #32]	@ (8000e80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e60:	40d9      	lsrs	r1, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	400b      	ands	r3, r1
 8000e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	0007ffff 	.word	0x0007ffff

08000e84 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000e96:	f023 0303 	bic.w	r3, r3, #3
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	611a      	str	r2, [r3, #16]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000ebe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	6093      	str	r3, [r2, #8]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ee2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ee6:	d101      	bne.n	8000eec <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000f0a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f0e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f36:	d101      	bne.n	8000f3c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f5a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f5e:	f043 0201 	orr.w	r2, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f82:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f86:	f043 0202 	orr.w	r2, r3, #2
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d101      	bne.n	8000fb2 <LL_ADC_IsEnabled+0x18>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <LL_ADC_IsEnabled+0x1a>
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000fd2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(const ADC_TypeDef *ADCx)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001002:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001006:	d101      	bne.n	800100c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800102a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800102e:	f043 0204 	orr.w	r2, r3, #4
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(const ADC_TypeDef *ADCx)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	b29b      	uxth	r3, r3
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(const ADC_TypeDef *ADCx)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b04      	cmp	r3, #4
 800106e:	d101      	bne.n	8001074 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2204      	movs	r2, #4
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_ADC_ClearFlag_EOS>:
  * @rmtoll ISR      EOS            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2208      	movs	r2, #8
 80010a8:	601a      	str	r2, [r3, #0]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 80010c0:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <LL_RCC_SetADCClockSource+0x44>)
 80010c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	0c1b      	lsrs	r3, r3, #16
 80010ca:	f003 031f 	and.w	r3, r3, #31
 80010ce:	2103      	movs	r1, #3
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	401a      	ands	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	b2d9      	uxtb	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	0c1b      	lsrs	r3, r3, #16
 80010e0:	f003 031f 	and.w	r3, r3, #31
 80010e4:	fa01 f303 	lsl.w	r3, r1, r3
 80010e8:	4904      	ldr	r1, [pc, #16]	@ (80010fc <LL_RCC_SetADCClockSource+0x44>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40021000 	.word	0x40021000

08001100 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800110a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800110c:	4907      	ldr	r1, [pc, #28]	@ (800112c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4313      	orrs	r3, r2
 8001112:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001116:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4013      	ands	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	40021000 	.word	0x40021000

08001130 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	@ 0x50
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001136:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001142:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]
 8001152:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001154:	f107 0318 	add.w	r3, r7, #24
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	463b      	mov	r3, r7
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_PLL);
 8001172:	4840      	ldr	r0, [pc, #256]	@ (8001274 <MX_ADC1_Init+0x144>)
 8001174:	f7ff ffa0 	bl	80010b8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 8001178:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800117c:	f7ff ffc0 	bl	8001100 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001180:	2002      	movs	r0, #2
 8001182:	f7ff ffbd 	bl	8001100 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PB12   ------> ADC1_IN11
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8001186:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800118a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800118c:	2303      	movs	r3, #3
 800118e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	463b      	mov	r3, r7
 8001196:	4619      	mov	r1, r3
 8001198:	4837      	ldr	r0, [pc, #220]	@ (8001278 <MX_ADC1_Init+0x148>)
 800119a:	f019 fa68 	bl	801a66e <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800119e:	2300      	movs	r3, #0
 80011a0:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80011a2:	2300      	movs	r3, #0
 80011a4:	647b      	str	r3, [r7, #68]	@ 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80011aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80011b4:	f019 f8a0 	bl	801a2f8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80011cc:	2300      	movs	r3, #0
 80011ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80011d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011d4:	4619      	mov	r1, r3
 80011d6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80011da:	f019 f8b3 	bl	801a344 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC1, 0);
 80011de:	2100      	movs	r1, #0
 80011e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80011e4:	f7ff fdae 	bl	8000d44 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80011e8:	2100      	movs	r1, #0
 80011ea:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80011ee:	f7ff fe49 	bl	8000e84 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV4;
 80011f2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80011f6:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80011fc:	f107 0318 	add.w	r3, r7, #24
 8001200:	4619      	mov	r1, r3
 8001202:	481e      	ldr	r0, [pc, #120]	@ (800127c <MX_ADC1_Init+0x14c>)
 8001204:	f019 f814 	bl	801a230 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8001208:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800120c:	f7ff fe4f 	bl	8000eae <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8001210:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001214:	f7ff fe71 	bl	8000efa <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001218:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <MX_ADC1_Init+0x150>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	099b      	lsrs	r3, r3, #6
 800121e:	4a19      	ldr	r2, [pc, #100]	@ (8001284 <MX_ADC1_Init+0x154>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	099a      	lsrs	r2, r3, #6
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	461a      	mov	r2, r3
 8001230:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <MX_ADC1_Init+0x158>)
 8001232:	fba3 2302 	umull	r2, r3, r3, r2
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 800123a:	e002      	b.n	8001242 <MX_ADC1_Init+0x112>
  {
    wait_loop_index--;
 800123c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800123e:	3b01      	subs	r3, #1
 8001240:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 8001242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f9      	bne.n	800123c <MX_ADC1_Init+0x10c>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_11);
 8001248:	4a10      	ldr	r2, [pc, #64]	@ (800128c <MX_ADC1_Init+0x15c>)
 800124a:	2106      	movs	r1, #6
 800124c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001250:	f7ff fd9d 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_24CYCLES_5);
 8001254:	2203      	movs	r2, #3
 8001256:	490d      	ldr	r1, [pc, #52]	@ (800128c <MX_ADC1_Init+0x15c>)
 8001258:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800125c:	f7ff fdc3 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SINGLE_ENDED);
 8001260:	227f      	movs	r2, #127	@ 0x7f
 8001262:	490a      	ldr	r1, [pc, #40]	@ (800128c <MX_ADC1_Init+0x15c>)
 8001264:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001268:	f7ff fde8 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	3750      	adds	r7, #80	@ 0x50
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	001c0001 	.word	0x001c0001
 8001278:	48000400 	.word	0x48000400
 800127c:	50000300 	.word	0x50000300
 8001280:	20000004 	.word	0x20000004
 8001284:	053e2d63 	.word	0x053e2d63
 8001288:	cccccccd 	.word	0xcccccccd
 800128c:	2e300800 	.word	0x2e300800

08001290 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b090      	sub	sp, #64	@ 0x40
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001296:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80012a2:	f107 0318 	add.w	r3, r7, #24
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	463b      	mov	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
 80012c2:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_PLL);
 80012c4:	486a      	ldr	r0, [pc, #424]	@ (8001470 <MX_ADC2_Init+0x1e0>)
 80012c6:	f7ff fef7 	bl	80010b8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 80012ca:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012ce:	f7ff ff17 	bl	8001100 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80012d2:	2001      	movs	r0, #1
 80012d4:	f7ff ff14 	bl	8001100 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80012d8:	2004      	movs	r0, #4
 80012da:	f7ff ff11 	bl	8001100 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PA6   ------> ADC2_IN3
  PA7   ------> ADC2_IN4
  PC4   ------> ADC2_IN5
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80012de:	2340      	movs	r3, #64	@ 0x40
 80012e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f2:	f019 f9bc 	bl	801a66e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80012f6:	2380      	movs	r3, #128	@ 0x80
 80012f8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80012fa:	2303      	movs	r3, #3
 80012fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	463b      	mov	r3, r7
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130a:	f019 f9b0 	bl	801a66e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800130e:	2310      	movs	r3, #16
 8001310:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131a:	463b      	mov	r3, r7
 800131c:	4619      	mov	r1, r3
 800131e:	4855      	ldr	r0, [pc, #340]	@ (8001474 <MX_ADC2_Init+0x1e4>)
 8001320:	f019 f9a5 	bl	801a66e <LL_GPIO_Init>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001324:	2300      	movs	r3, #0
 8001326:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001328:	2300      	movs	r3, #0
 800132a:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800132c:	2300      	movs	r3, #0
 800132e:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8001330:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001334:	4619      	mov	r1, r3
 8001336:	4850      	ldr	r0, [pc, #320]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001338:	f018 ffde 	bl	801a2f8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS;
 8001340:	2305      	movs	r3, #5
 8001342:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 8001344:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001348:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800134e:	2300      	movs	r3, #0
 8001350:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	4619      	mov	r1, r3
 800135c:	4846      	ldr	r0, [pc, #280]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 800135e:	f018 fff1 	bl	801a344 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC2, 0);
 8001362:	2100      	movs	r1, #0
 8001364:	4844      	ldr	r0, [pc, #272]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001366:	f7ff fced 	bl	8000d44 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC2, LL_ADC_OVS_DISABLE);
 800136a:	2100      	movs	r1, #0
 800136c:	4842      	ldr	r0, [pc, #264]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 800136e:	f7ff fd89 	bl	8000e84 <LL_ADC_SetOverSamplingScope>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8001372:	4841      	ldr	r0, [pc, #260]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001374:	f7ff fd9b 	bl	8000eae <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8001378:	483f      	ldr	r0, [pc, #252]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 800137a:	f7ff fdbe 	bl	8000efa <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800137e:	4b3f      	ldr	r3, [pc, #252]	@ (800147c <MX_ADC2_Init+0x1ec>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	099b      	lsrs	r3, r3, #6
 8001384:	4a3e      	ldr	r2, [pc, #248]	@ (8001480 <MX_ADC2_Init+0x1f0>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	099a      	lsrs	r2, r3, #6
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	461a      	mov	r2, r3
 8001396:	4b3b      	ldr	r3, [pc, #236]	@ (8001484 <MX_ADC2_Init+0x1f4>)
 8001398:	fba3 2302 	umull	r2, r3, r3, r2
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while(wait_loop_index != 0)
 80013a0:	e002      	b.n	80013a8 <MX_ADC2_Init+0x118>
  {
    wait_loop_index--;
 80013a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013a4:	3b01      	subs	r3, #1
 80013a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while(wait_loop_index != 0)
 80013a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f9      	bne.n	80013a2 <MX_ADC2_Init+0x112>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 80013ae:	4a36      	ldr	r2, [pc, #216]	@ (8001488 <MX_ADC2_Init+0x1f8>)
 80013b0:	2106      	movs	r1, #6
 80013b2:	4831      	ldr	r0, [pc, #196]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 80013b4:	f7ff fceb 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80013b8:	2202      	movs	r2, #2
 80013ba:	4933      	ldr	r1, [pc, #204]	@ (8001488 <MX_ADC2_Init+0x1f8>)
 80013bc:	482e      	ldr	r0, [pc, #184]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 80013be:	f7ff fd12 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 80013c2:	227f      	movs	r2, #127	@ 0x7f
 80013c4:	4930      	ldr	r1, [pc, #192]	@ (8001488 <MX_ADC2_Init+0x1f8>)
 80013c6:	482c      	ldr	r0, [pc, #176]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 80013c8:	f7ff fd38 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_4);
 80013cc:	4a2e      	ldr	r2, [pc, #184]	@ (8001488 <MX_ADC2_Init+0x1f8>)
 80013ce:	210c      	movs	r1, #12
 80013d0:	4829      	ldr	r0, [pc, #164]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 80013d2:	f7ff fcdc 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80013d6:	2202      	movs	r2, #2
 80013d8:	492b      	ldr	r1, [pc, #172]	@ (8001488 <MX_ADC2_Init+0x1f8>)
 80013da:	4827      	ldr	r0, [pc, #156]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 80013dc:	f7ff fd03 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 80013e0:	227f      	movs	r2, #127	@ 0x7f
 80013e2:	4929      	ldr	r1, [pc, #164]	@ (8001488 <MX_ADC2_Init+0x1f8>)
 80013e4:	4824      	ldr	r0, [pc, #144]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 80013e6:	f7ff fd29 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_5);
 80013ea:	4a28      	ldr	r2, [pc, #160]	@ (800148c <MX_ADC2_Init+0x1fc>)
 80013ec:	2112      	movs	r1, #18
 80013ee:	4822      	ldr	r0, [pc, #136]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 80013f0:	f7ff fccd 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80013f4:	2202      	movs	r2, #2
 80013f6:	4925      	ldr	r1, [pc, #148]	@ (800148c <MX_ADC2_Init+0x1fc>)
 80013f8:	481f      	ldr	r0, [pc, #124]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 80013fa:	f7ff fcf4 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_5, LL_ADC_SINGLE_ENDED);
 80013fe:	227f      	movs	r2, #127	@ 0x7f
 8001400:	4922      	ldr	r1, [pc, #136]	@ (800148c <MX_ADC2_Init+0x1fc>)
 8001402:	481d      	ldr	r0, [pc, #116]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001404:	f7ff fd1a 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_5);
 8001408:	4a20      	ldr	r2, [pc, #128]	@ (800148c <MX_ADC2_Init+0x1fc>)
 800140a:	2118      	movs	r1, #24
 800140c:	481a      	ldr	r0, [pc, #104]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 800140e:	f7ff fcbe 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 8001412:	2202      	movs	r2, #2
 8001414:	491d      	ldr	r1, [pc, #116]	@ (800148c <MX_ADC2_Init+0x1fc>)
 8001416:	4818      	ldr	r0, [pc, #96]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001418:	f7ff fce5 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_5, LL_ADC_SINGLE_ENDED);
 800141c:	227f      	movs	r2, #127	@ 0x7f
 800141e:	491b      	ldr	r1, [pc, #108]	@ (800148c <MX_ADC2_Init+0x1fc>)
 8001420:	4815      	ldr	r0, [pc, #84]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001422:	f7ff fd0b 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_3);
 8001426:	4a1a      	ldr	r2, [pc, #104]	@ (8001490 <MX_ADC2_Init+0x200>)
 8001428:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800142c:	4812      	ldr	r0, [pc, #72]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 800142e:	f7ff fcae 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 8001432:	2202      	movs	r2, #2
 8001434:	4916      	ldr	r1, [pc, #88]	@ (8001490 <MX_ADC2_Init+0x200>)
 8001436:	4810      	ldr	r0, [pc, #64]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001438:	f7ff fcd5 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 800143c:	227f      	movs	r2, #127	@ 0x7f
 800143e:	4914      	ldr	r1, [pc, #80]	@ (8001490 <MX_ADC2_Init+0x200>)
 8001440:	480d      	ldr	r0, [pc, #52]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001442:	f7ff fcfb 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_3);
 8001446:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <MX_ADC2_Init+0x200>)
 8001448:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800144c:	480a      	ldr	r0, [pc, #40]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 800144e:	f7ff fc9e 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 8001452:	2202      	movs	r2, #2
 8001454:	490e      	ldr	r1, [pc, #56]	@ (8001490 <MX_ADC2_Init+0x200>)
 8001456:	4808      	ldr	r0, [pc, #32]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001458:	f7ff fcc5 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 800145c:	227f      	movs	r2, #127	@ 0x7f
 800145e:	490c      	ldr	r1, [pc, #48]	@ (8001490 <MX_ADC2_Init+0x200>)
 8001460:	4805      	ldr	r0, [pc, #20]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001462:	f7ff fceb 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	3740      	adds	r7, #64	@ 0x40
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	001c0001 	.word	0x001c0001
 8001474:	48000800 	.word	0x48000800
 8001478:	50000100 	.word	0x50000100
 800147c:	20000004 	.word	0x20000004
 8001480:	053e2d63 	.word	0x053e2d63
 8001484:	cccccccd 	.word	0xcccccccd
 8001488:	10c00010 	.word	0x10c00010
 800148c:	14f00020 	.word	0x14f00020
 8001490:	0c900008 	.word	0x0c900008

08001494 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b094      	sub	sp, #80	@ 0x50
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800149a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80014a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80014b8:	f107 0318 	add.w	r3, r7, #24
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c6:	463b      	mov	r3, r7
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
 80014d4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC345_CLKSOURCE_PLL);
 80014d6:	4843      	ldr	r0, [pc, #268]	@ (80015e4 <MX_ADC3_Init+0x150>)
 80014d8:	f7ff fdee 	bl	80010b8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC345);
 80014dc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80014e0:	f7ff fe0e 	bl	8001100 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80014e4:	2002      	movs	r0, #2
 80014e6:	f7ff fe0b 	bl	8001100 <LL_AHB2_GRP1_EnableClock>
  /**ADC3 GPIO Configuration
  PB1   ------> ADC3_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80014ea:	2302      	movs	r3, #2
 80014ec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80014ee:	2303      	movs	r3, #3
 80014f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	463b      	mov	r3, r7
 80014f8:	4619      	mov	r1, r3
 80014fa:	483b      	ldr	r0, [pc, #236]	@ (80015e8 <MX_ADC3_Init+0x154>)
 80014fc:	f019 f8b7 	bl	801a66e <LL_GPIO_Init>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001500:	2300      	movs	r3, #0
 8001502:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001504:	2300      	movs	r3, #0
 8001506:	647b      	str	r3, [r7, #68]	@ 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001508:	2300      	movs	r3, #0
 800150a:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_ADC_Init(ADC3, &ADC_InitStruct);
 800150c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001510:	4619      	mov	r1, r3
 8001512:	4836      	ldr	r0, [pc, #216]	@ (80015ec <MX_ADC3_Init+0x158>)
 8001514:	f018 fef0 	bl	801a2f8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 800151c:	2301      	movs	r3, #1
 800151e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 8001520:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001524:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001526:	2300      	movs	r3, #0
 8001528:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800152a:	2300      	movs	r3, #0
 800152c:	63bb      	str	r3, [r7, #56]	@ 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800152e:	2300      	movs	r3, #0
 8001530:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_ADC_REG_Init(ADC3, &ADC_REG_InitStruct);
 8001532:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001536:	4619      	mov	r1, r3
 8001538:	482c      	ldr	r0, [pc, #176]	@ (80015ec <MX_ADC3_Init+0x158>)
 800153a:	f018 ff03 	bl	801a344 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC3, 0);
 800153e:	2100      	movs	r1, #0
 8001540:	482a      	ldr	r0, [pc, #168]	@ (80015ec <MX_ADC3_Init+0x158>)
 8001542:	f7ff fbff 	bl	8000d44 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC3, LL_ADC_OVS_DISABLE);
 8001546:	2100      	movs	r1, #0
 8001548:	4828      	ldr	r0, [pc, #160]	@ (80015ec <MX_ADC3_Init+0x158>)
 800154a:	f7ff fc9b 	bl	8000e84 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV4;
 800154e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001552:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 8001558:	f107 0318 	add.w	r3, r7, #24
 800155c:	4619      	mov	r1, r3
 800155e:	4824      	ldr	r0, [pc, #144]	@ (80015f0 <MX_ADC3_Init+0x15c>)
 8001560:	f018 fe66 	bl	801a230 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC3);
 8001564:	4821      	ldr	r0, [pc, #132]	@ (80015ec <MX_ADC3_Init+0x158>)
 8001566:	f7ff fca2 	bl	8000eae <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC3);
 800156a:	4820      	ldr	r0, [pc, #128]	@ (80015ec <MX_ADC3_Init+0x158>)
 800156c:	f7ff fcc5 	bl	8000efa <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001570:	4b20      	ldr	r3, [pc, #128]	@ (80015f4 <MX_ADC3_Init+0x160>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	099b      	lsrs	r3, r3, #6
 8001576:	4a20      	ldr	r2, [pc, #128]	@ (80015f8 <MX_ADC3_Init+0x164>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	099a      	lsrs	r2, r3, #6
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	461a      	mov	r2, r3
 8001588:	4b1c      	ldr	r3, [pc, #112]	@ (80015fc <MX_ADC3_Init+0x168>)
 800158a:	fba3 2302 	umull	r2, r3, r3, r2
 800158e:	08db      	lsrs	r3, r3, #3
 8001590:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 8001592:	e002      	b.n	800159a <MX_ADC3_Init+0x106>
  {
    wait_loop_index--;
 8001594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001596:	3b01      	subs	r3, #1
 8001598:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 800159a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f9      	bne.n	8001594 <MX_ADC3_Init+0x100>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80015a0:	4a17      	ldr	r2, [pc, #92]	@ (8001600 <MX_ADC3_Init+0x16c>)
 80015a2:	2106      	movs	r1, #6
 80015a4:	4811      	ldr	r0, [pc, #68]	@ (80015ec <MX_ADC3_Init+0x158>)
 80015a6:	f7ff fbf2 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80015aa:	2202      	movs	r2, #2
 80015ac:	4914      	ldr	r1, [pc, #80]	@ (8001600 <MX_ADC3_Init+0x16c>)
 80015ae:	480f      	ldr	r0, [pc, #60]	@ (80015ec <MX_ADC3_Init+0x158>)
 80015b0:	f7ff fc19 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80015b4:	227f      	movs	r2, #127	@ 0x7f
 80015b6:	4912      	ldr	r1, [pc, #72]	@ (8001600 <MX_ADC3_Init+0x16c>)
 80015b8:	480c      	ldr	r0, [pc, #48]	@ (80015ec <MX_ADC3_Init+0x158>)
 80015ba:	f7ff fc3f 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 80015be:	4a10      	ldr	r2, [pc, #64]	@ (8001600 <MX_ADC3_Init+0x16c>)
 80015c0:	210c      	movs	r1, #12
 80015c2:	480a      	ldr	r0, [pc, #40]	@ (80015ec <MX_ADC3_Init+0x158>)
 80015c4:	f7ff fbe3 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80015c8:	2202      	movs	r2, #2
 80015ca:	490d      	ldr	r1, [pc, #52]	@ (8001600 <MX_ADC3_Init+0x16c>)
 80015cc:	4807      	ldr	r0, [pc, #28]	@ (80015ec <MX_ADC3_Init+0x158>)
 80015ce:	f7ff fc0a 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80015d2:	227f      	movs	r2, #127	@ 0x7f
 80015d4:	490a      	ldr	r1, [pc, #40]	@ (8001600 <MX_ADC3_Init+0x16c>)
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <MX_ADC3_Init+0x158>)
 80015d8:	f7ff fc30 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3750      	adds	r7, #80	@ 0x50
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	001e0001 	.word	0x001e0001
 80015e8:	48000400 	.word	0x48000400
 80015ec:	50000400 	.word	0x50000400
 80015f0:	50000700 	.word	0x50000700
 80015f4:	20000004 	.word	0x20000004
 80015f8:	053e2d63 	.word	0x053e2d63
 80015fc:	cccccccd 	.word	0xcccccccd
 8001600:	04300002 	.word	0x04300002

08001604 <ADC1_Calibration>:
#define ADC_CONVERT_DATA_BUFFR_SIZE	((uint32_t)3)

uint16_t adcConvertData[ADC_CONVERT_DATA_BUFFR_SIZE];

void ADC1_Calibration(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC1) != 0) return;
 8001608:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800160c:	f7ff fc61 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d11f      	bne.n	8001656 <ADC1_Calibration+0x52>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC1) != 1) return;
 8001616:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800161a:	f7ff fc82 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 800161e:	4603      	mov	r3, r0
 8001620:	2b01      	cmp	r3, #1
 8001622:	d11a      	bne.n	800165a <ADC1_Calibration+0x56>
	if(LL_ADC_IsEnabled(ADC1) != 0){
 8001624:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001628:	f7ff fcb7 	bl	8000f9a <LL_ADC_IsEnabled>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <ADC1_Calibration+0x36>
		LL_ADC_Disable(ADC1);
 8001632:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001636:	f7ff fc9c 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC1,LL_ADC_SINGLE_ENDED);
 800163a:	217f      	movs	r1, #127	@ 0x7f
 800163c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001640:	f7ff fcbe 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC1)==1);
 8001644:	bf00      	nop
 8001646:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800164a:	f7ff fcd2 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 800164e:	4603      	mov	r3, r0
 8001650:	2b01      	cmp	r3, #1
 8001652:	d0f8      	beq.n	8001646 <ADC1_Calibration+0x42>
 8001654:	e002      	b.n	800165c <ADC1_Calibration+0x58>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC1) != 0) return;
 8001656:	bf00      	nop
 8001658:	e000      	b.n	800165c <ADC1_Calibration+0x58>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC1) != 1) return;
 800165a:	bf00      	nop
}
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <ADC2_Calibration>:

void ADC2_Calibration(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC2) != 0) return;
 8001664:	4812      	ldr	r0, [pc, #72]	@ (80016b0 <ADC2_Calibration+0x50>)
 8001666:	f7ff fc34 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d11a      	bne.n	80016a6 <ADC2_Calibration+0x46>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC2) != 1) return;
 8001670:	480f      	ldr	r0, [pc, #60]	@ (80016b0 <ADC2_Calibration+0x50>)
 8001672:	f7ff fc56 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 8001676:	4603      	mov	r3, r0
 8001678:	2b01      	cmp	r3, #1
 800167a:	d116      	bne.n	80016aa <ADC2_Calibration+0x4a>
	if(LL_ADC_IsEnabled(ADC2) != 0){
 800167c:	480c      	ldr	r0, [pc, #48]	@ (80016b0 <ADC2_Calibration+0x50>)
 800167e:	f7ff fc8c 	bl	8000f9a <LL_ADC_IsEnabled>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <ADC2_Calibration+0x2e>
		LL_ADC_Disable(ADC2);
 8001688:	4809      	ldr	r0, [pc, #36]	@ (80016b0 <ADC2_Calibration+0x50>)
 800168a:	f7ff fc72 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC2,LL_ADC_SINGLE_ENDED);
 800168e:	217f      	movs	r1, #127	@ 0x7f
 8001690:	4807      	ldr	r0, [pc, #28]	@ (80016b0 <ADC2_Calibration+0x50>)
 8001692:	f7ff fc95 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC2)==1);
 8001696:	bf00      	nop
 8001698:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <ADC2_Calibration+0x50>)
 800169a:	f7ff fcaa 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d0f9      	beq.n	8001698 <ADC2_Calibration+0x38>
 80016a4:	e002      	b.n	80016ac <ADC2_Calibration+0x4c>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC2) != 0) return;
 80016a6:	bf00      	nop
 80016a8:	e000      	b.n	80016ac <ADC2_Calibration+0x4c>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC2) != 1) return;
 80016aa:	bf00      	nop
}
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	50000100 	.word	0x50000100

080016b4 <ADC3_Calibration>:

void ADC3_Calibration(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC3) != 0) return;
 80016b8:	4812      	ldr	r0, [pc, #72]	@ (8001704 <ADC3_Calibration+0x50>)
 80016ba:	f7ff fc0a 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d11a      	bne.n	80016fa <ADC3_Calibration+0x46>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC3) != 1) return;
 80016c4:	480f      	ldr	r0, [pc, #60]	@ (8001704 <ADC3_Calibration+0x50>)
 80016c6:	f7ff fc2c 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d116      	bne.n	80016fe <ADC3_Calibration+0x4a>
	if(LL_ADC_IsEnabled(ADC3) != 0){
 80016d0:	480c      	ldr	r0, [pc, #48]	@ (8001704 <ADC3_Calibration+0x50>)
 80016d2:	f7ff fc62 	bl	8000f9a <LL_ADC_IsEnabled>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <ADC3_Calibration+0x2e>
		LL_ADC_Disable(ADC3);
 80016dc:	4809      	ldr	r0, [pc, #36]	@ (8001704 <ADC3_Calibration+0x50>)
 80016de:	f7ff fc48 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC3,LL_ADC_SINGLE_ENDED);
 80016e2:	217f      	movs	r1, #127	@ 0x7f
 80016e4:	4807      	ldr	r0, [pc, #28]	@ (8001704 <ADC3_Calibration+0x50>)
 80016e6:	f7ff fc6b 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC3)==1);
 80016ea:	bf00      	nop
 80016ec:	4805      	ldr	r0, [pc, #20]	@ (8001704 <ADC3_Calibration+0x50>)
 80016ee:	f7ff fc80 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d0f9      	beq.n	80016ec <ADC3_Calibration+0x38>
 80016f8:	e002      	b.n	8001700 <ADC3_Calibration+0x4c>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC3) != 0) return;
 80016fa:	bf00      	nop
 80016fc:	e000      	b.n	8001700 <ADC3_Calibration+0x4c>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC3) != 1) return;
 80016fe:	bf00      	nop
}
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	50000400 	.word	0x50000400

08001708 <ADC3_Start>:

void ADC3_Start(void){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  ADC3_Calibration();
 800170c:	f7ff ffd2 	bl	80016b4 <ADC3_Calibration>
	LL_ADC_Enable(ADC3);
 8001710:	4802      	ldr	r0, [pc, #8]	@ (800171c <ADC3_Start+0x14>)
 8001712:	f7ff fc1a 	bl	8000f4a <LL_ADC_Enable>
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	50000400 	.word	0x50000400

08001720 <ADC2_Start>:

void ADC2_Start(void){
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  ADC2_Calibration();
 8001724:	f7ff ff9c 	bl	8001660 <ADC2_Calibration>
	LL_ADC_Enable(ADC2);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <ADC2_Start+0x14>)
 800172a:	f7ff fc0e 	bl	8000f4a <LL_ADC_Enable>
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	50000100 	.word	0x50000100

08001738 <ADC1_Start>:

void ADC1_Start(void){
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  ADC1_Calibration();
 800173c:	f7ff ff62 	bl	8001604 <ADC1_Calibration>
	LL_ADC_Enable(ADC1);
 8001740:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001744:	f7ff fc01 	bl	8000f4a <LL_ADC_Enable>
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <GetSensor_FL>:

uint16_t GetSensor_FL(void){
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC3);
 8001750:	4809      	ldr	r0, [pc, #36]	@ (8001778 <GetSensor_FL+0x2c>)
 8001752:	f7ff fc62 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC3)==0);
 8001756:	bf00      	nop
 8001758:	4807      	ldr	r0, [pc, #28]	@ (8001778 <GetSensor_FL+0x2c>)
 800175a:	f7ff fc7f 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f9      	beq.n	8001758 <GetSensor_FL+0xc>
	LL_ADC_ClearFlag_EOC(ADC3);
 8001764:	4804      	ldr	r0, [pc, #16]	@ (8001778 <GetSensor_FL+0x2c>)
 8001766:	f7ff fc8c 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC3);
 800176a:	4803      	ldr	r0, [pc, #12]	@ (8001778 <GetSensor_FL+0x2c>)
 800176c:	f7ff fc69 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	50000400 	.word	0x50000400

0800177c <ADC3_clearEOS>:

void ADC3_clearEOS(void){
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	LL_ADC_ClearFlag_EOS(ADC3);
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <ADC3_clearEOS+0x10>)
 8001782:	f7ff fc8b 	bl	800109c <LL_ADC_ClearFlag_EOS>
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	50000400 	.word	0x50000400

08001790 <ADC2_clearEOS>:

void ADC2_clearEOS(void){
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	LL_ADC_ClearFlag_EOS(ADC2);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <ADC2_clearEOS+0x10>)
 8001796:	f7ff fc81 	bl	800109c <LL_ADC_ClearFlag_EOS>
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	50000100 	.word	0x50000100

080017a4 <ADC1_clearEOS>:

void ADC1_clearEOS(void){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	LL_ADC_ClearFlag_EOS(ADC1);
 80017a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80017ac:	f7ff fc76 	bl	800109c <LL_ADC_ClearFlag_EOS>
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <GetSensor_SL>:


uint16_t GetSensor_SL(void){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC2);
 80017b8:	4809      	ldr	r0, [pc, #36]	@ (80017e0 <GetSensor_SL+0x2c>)
 80017ba:	f7ff fc2e 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC2)==0);
 80017be:	bf00      	nop
 80017c0:	4807      	ldr	r0, [pc, #28]	@ (80017e0 <GetSensor_SL+0x2c>)
 80017c2:	f7ff fc4b 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f9      	beq.n	80017c0 <GetSensor_SL+0xc>
	LL_ADC_ClearFlag_EOC(ADC2);
 80017cc:	4804      	ldr	r0, [pc, #16]	@ (80017e0 <GetSensor_SL+0x2c>)
 80017ce:	f7ff fc58 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC2);
 80017d2:	4803      	ldr	r0, [pc, #12]	@ (80017e0 <GetSensor_SL+0x2c>)
 80017d4:	f7ff fc35 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	50000100 	.word	0x50000100

080017e4 <GetSensor_SR>:

uint16_t GetSensor_SR(void){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC2);
 80017e8:	4809      	ldr	r0, [pc, #36]	@ (8001810 <GetSensor_SR+0x2c>)
 80017ea:	f7ff fc16 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC2)==0);
 80017ee:	bf00      	nop
 80017f0:	4807      	ldr	r0, [pc, #28]	@ (8001810 <GetSensor_SR+0x2c>)
 80017f2:	f7ff fc33 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f9      	beq.n	80017f0 <GetSensor_SR+0xc>
	LL_ADC_ClearFlag_EOC(ADC2);
 80017fc:	4804      	ldr	r0, [pc, #16]	@ (8001810 <GetSensor_SR+0x2c>)
 80017fe:	f7ff fc40 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC2);
 8001802:	4803      	ldr	r0, [pc, #12]	@ (8001810 <GetSensor_SR+0x2c>)
 8001804:	f7ff fc1d 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	50000100 	.word	0x50000100

08001814 <GetSensor_FR>:

uint16_t GetSensor_FR(void){
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC2);
 8001818:	4809      	ldr	r0, [pc, #36]	@ (8001840 <GetSensor_FR+0x2c>)
 800181a:	f7ff fbfe 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC2)==0);
 800181e:	bf00      	nop
 8001820:	4807      	ldr	r0, [pc, #28]	@ (8001840 <GetSensor_FR+0x2c>)
 8001822:	f7ff fc1b 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f9      	beq.n	8001820 <GetSensor_FR+0xc>
	LL_ADC_ClearFlag_EOC(ADC2);
 800182c:	4804      	ldr	r0, [pc, #16]	@ (8001840 <GetSensor_FR+0x2c>)
 800182e:	f7ff fc28 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC2);
 8001832:	4803      	ldr	r0, [pc, #12]	@ (8001840 <GetSensor_FR+0x2c>)
 8001834:	f7ff fc05 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	50000100 	.word	0x50000100

08001844 <GetBatVal>:

uint16_t GetBatVal(void){
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 8001848:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800184c:	f7ff fbe5 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC1)==0);
 8001850:	bf00      	nop
 8001852:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001856:	f7ff fc01 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f8      	beq.n	8001852 <GetBatVal+0xe>
	LL_ADC_ClearFlag_EOC(ADC1);
 8001860:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001864:	f7ff fc0d 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC1);
 8001868:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800186c:	f7ff fbe9 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187c:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <__NVIC_GetPriorityGrouping+0x18>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 0307 	and.w	r3, r3, #7
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	db0b      	blt.n	80018be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	f003 021f 	and.w	r2, r3, #31
 80018ac:	4907      	ldr	r1, [pc, #28]	@ (80018cc <__NVIC_EnableIRQ+0x38>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	2001      	movs	r0, #1
 80018b6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e100 	.word	0xe000e100

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	@ (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	@ (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	@ 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
         );
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	@ 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <LL_AHB1_GRP1_EnableClock>:
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001994:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001996:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001998:	4907      	ldr	r1, [pc, #28]	@ (80019b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4313      	orrs	r3, r2
 800199e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80019a0:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4013      	ands	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019aa:	68fb      	ldr	r3, [r7, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	40021000 	.word	0x40021000

080019bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 80019c0:	2004      	movs	r0, #4
 80019c2:	f7ff ffe3 	bl	800198c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f7ff ffe0 	bl	800198c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019cc:	f7ff ff54 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ffa4 	bl	8001924 <NVIC_EncodePriority>
 80019dc:	4603      	mov	r3, r0
 80019de:	4619      	mov	r1, r3
 80019e0:	200d      	movs	r0, #13
 80019e2:	f7ff ff75 	bl	80018d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80019e6:	200d      	movs	r0, #13
 80019e8:	f7ff ff54 	bl	8001894 <__NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019ec:	f7ff ff44 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ff94 	bl	8001924 <NVIC_EncodePriority>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4619      	mov	r1, r3
 8001a00:	200e      	movs	r0, #14
 8001a02:	f7ff ff65 	bl	80018d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a06:	200e      	movs	r0, #14
 8001a08:	f7ff ff44 	bl	8001894 <__NVIC_EnableIRQ>

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <FLASH_Lock>:

#define sta_add_127 0x0807F800
#define end_add_127 0x0807FFFF

__STATIC_INLINE void FLASH_Lock(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8001a14:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <FLASH_Lock+0x1c>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	4a04      	ldr	r2, [pc, #16]	@ (8001a2c <FLASH_Lock+0x1c>)
 8001a1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a1e:	6153      	str	r3, [r2, #20]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40022000 	.word	0x40022000

08001a30 <FLASH_Unlock>:

__STATIC_INLINE void FLASH_Unlock(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
	FLASH->KEYR = FLASH_KEY1;
 8001a34:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <FLASH_Unlock+0x1c>)
 8001a36:	4a06      	ldr	r2, [pc, #24]	@ (8001a50 <FLASH_Unlock+0x20>)
 8001a38:	609a      	str	r2, [r3, #8]
	FLASH->KEYR = FLASH_KEY2;
 8001a3a:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <FLASH_Unlock+0x1c>)
 8001a3c:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <FLASH_Unlock+0x24>)
 8001a3e:	609a      	str	r2, [r3, #8]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	45670123 	.word	0x45670123
 8001a54:	cdef89ab 	.word	0xcdef89ab

08001a58 <FLASH_WaitBusy>:
#define FLASH_TYPEPROGRAM_BYTE	0x00000000U

//#define FLASH

void FLASH_WaitBusy(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
	while(((FLASH->SR & FLASH_SR_BSY)== FLASH_SR_BSY)==1);
 8001a5c:	bf00      	nop
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <FLASH_WaitBusy+0x20>)
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a6a:	d0f8      	beq.n	8001a5e <FLASH_WaitBusy+0x6>
//	while((FLASH->SR & FLASH_SR_BSY)== FLASH_SR_BSY);
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	40022000 	.word	0x40022000

08001a7c <FLASH_Erase>:

void FLASH_Erase(uint8_t page)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
	FLASH_WaitBusy();
 8001a86:	f7ff ffe7 	bl	8001a58 <FLASH_WaitBusy>

	FLASH->SR &= 0x00000000;	//error clear?
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
	FLASH->CR &= FLASH_TYPEPROGRAM_BYTE;
 8001a94:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	615a      	str	r2, [r3, #20]
	FLASH->CR |= (FLASH_CR_BKER);	//set bank2
 8001a9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001aa4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001aa8:	6153      	str	r3, [r2, #20]
	FLASH->CR |= FLASH_CR_PER;
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6153      	str	r3, [r2, #20]
	FLASH->CR |= (FLASH_CR_PNB & (page<<3));
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	f403 737e 	and.w	r3, r3, #1016	@ 0x3f8
 8001ac2:	4907      	ldr	r1, [pc, #28]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	614b      	str	r3, [r1, #20]
	FLASH->CR |= FLASH_CR_STRT;
 8001ac8:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	4a04      	ldr	r2, [pc, #16]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad2:	6153      	str	r3, [r2, #20]
	FLASH_WaitBusy();
 8001ad4:	f7ff ffc0 	bl	8001a58 <FLASH_WaitBusy>
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40022000 	.word	0x40022000

08001ae4 <FLASH_WriteByte>:

void FLASH_WriteByte(uint32_t address, uint64_t data)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	e9c7 2300 	strd	r2, r3, [r7]
	uint32_t data2 = (uint32_t)(data >> 32);
 8001af0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	000a      	movs	r2, r1
 8001afe:	2300      	movs	r3, #0
 8001b00:	4613      	mov	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]
	FLASH_WaitBusy();
 8001b04:	f7ff ffa8 	bl	8001a58 <FLASH_WaitBusy>
	FLASH->SR &= 0x00000000;	//error clear
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <FLASH_WriteByte+0x6c>)
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <FLASH_WriteByte+0x6c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
	FLASH->CR &= FLASH_TYPEPROGRAM_BYTE;
 8001b12:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <FLASH_WriteByte+0x6c>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <FLASH_WriteByte+0x6c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	615a      	str	r2, [r3, #20]
	FLASH->CR |= FLASH_CR_PG;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <FLASH_WriteByte+0x6c>)
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	4a0b      	ldr	r2, [pc, #44]	@ (8001b50 <FLASH_WriteByte+0x6c>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6153      	str	r3, [r2, #20]

	*(__IO uint32_t*)address = (uint32_t)data;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	601a      	str	r2, [r3, #0]
	*(__IO uint32_t*)(address+4) = data2;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3304      	adds	r3, #4
 8001b32:	461a      	mov	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	6013      	str	r3, [r2, #0]
	FLASH_WaitBusy();
 8001b38:	f7ff ff8e 	bl	8001a58 <FLASH_WaitBusy>

	FLASH->CR &= ~(FLASH_CR_PG);
 8001b3c:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <FLASH_WriteByte+0x6c>)
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	4a03      	ldr	r2, [pc, #12]	@ (8001b50 <FLASH_WriteByte+0x6c>)
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	6153      	str	r3, [r2, #20]
}
 8001b48:	bf00      	nop
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40022000 	.word	0x40022000

08001b54 <FLASH_WriteData>:

void FLASH_WriteData(uint8_t page,uint32_t address, uint64_t* data, uint32_t size)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	4603      	mov	r3, r0
 8001b62:	73fb      	strb	r3, [r7, #15]
	FLASH_Unlock();
 8001b64:	f7ff ff64 	bl	8001a30 <FLASH_Unlock>

	FLASH_Erase(page);
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff86 	bl	8001a7c <FLASH_Erase>

	do {
		FLASH_WriteByte(address, *data);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	68b8      	ldr	r0, [r7, #8]
 8001b78:	f7ff ffb4 	bl	8001ae4 <FLASH_WriteByte>
		address+=8;
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	3308      	adds	r3, #8
 8001b80:	60bb      	str	r3, [r7, #8]
		data++;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3308      	adds	r3, #8
 8001b86:	607b      	str	r3, [r7, #4]
		size -=8;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	3b08      	subs	r3, #8
 8001b8c:	603b      	str	r3, [r7, #0]
	}while(size > 0);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1ed      	bne.n	8001b70 <FLASH_WriteData+0x1c>

	FLASH_Lock();
 8001b94:	f7ff ff3c 	bl	8001a10 <FLASH_Lock>
}
 8001b98:	bf00      	nop
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <FLASH_ReadData>:

void FLASH_ReadData(uint32_t address, uint64_t* data, uint32_t size)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint8_t*)address,size);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	68b8      	ldr	r0, [r7, #8]
 8001bb4:	f01c faf9 	bl	801e1aa <memcpy>
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <LL_AHB2_GRP1_EnableClock>:
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bc8:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001bca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bcc:	4907      	ldr	r1, [pc, #28]	@ (8001bec <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001bd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40021000 	.word	0x40021000

08001bf0 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	4013      	ands	r3, r2
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d101      	bne.n	8001c0c <LL_GPIO_IsInputPinSet+0x1c>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <LL_GPIO_IsInputPinSet+0x1e>
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	619a      	str	r2, [r3, #24]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
 8001c68:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001c6a:	2004      	movs	r0, #4
 8001c6c:	f7ff ffa8 	bl	8001bc0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f7ff ffa5 	bl	8001bc0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001c76:	2002      	movs	r0, #2
 8001c78:	f7ff ffa2 	bl	8001bc0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(BATT_LED_GPIO_Port, BATT_LED_Pin);
 8001c7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c80:	4893      	ldr	r0, [pc, #588]	@ (8001ed0 <MX_GPIO_Init+0x27c>)
 8001c82:	f7ff ffd8 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 8001c86:	2104      	movs	r1, #4
 8001c88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c8c:	f7ff ffd3 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SEN_RF_GPIO_Port, SEN_RF_Pin);
 8001c90:	2108      	movs	r1, #8
 8001c92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c96:	f7ff ffce 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SEN_R_GPIO_Port, SEN_R_Pin);
 8001c9a:	2110      	movs	r1, #16
 8001c9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca0:	f7ff ffc9 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED3_GPIO_Port, LED3_Pin);
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	488b      	ldr	r0, [pc, #556]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001ca8:	f7ff ffc5 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8001cac:	2104      	movs	r1, #4
 8001cae:	4889      	ldr	r0, [pc, #548]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001cb0:	f7ff ffc1 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8001cb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cb8:	4886      	ldr	r0, [pc, #536]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001cba:	f7ff ffbc 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SEN_L_GPIO_Port, SEN_L_Pin);
 8001cbe:	2140      	movs	r1, #64	@ 0x40
 8001cc0:	4883      	ldr	r0, [pc, #524]	@ (8001ed0 <MX_GPIO_Init+0x27c>)
 8001cc2:	f7ff ffb8 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SEN_LF_GPIO_Port, SEN_LF_Pin);
 8001cc6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cce:	f7ff ffb2 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED0_GPIO_Port, LED0_Pin);
 8001cd2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cda:	f7ff ffac 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MOT0_GPIO_Port, MOT0_Pin);
 8001cde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ce2:	487b      	ldr	r0, [pc, #492]	@ (8001ed0 <MX_GPIO_Init+0x27c>)
 8001ce4:	f7ff ffa7 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MOT1_GPIO_Port, MOT1_Pin);
 8001ce8:	2110      	movs	r1, #16
 8001cea:	487a      	ldr	r0, [pc, #488]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001cec:	f7ff ffa3 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(CS_gyro_GPIO_Port, CS_gyro_Pin);
 8001cf0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cf4:	4877      	ldr	r0, [pc, #476]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001cf6:	f7ff ff90 	bl	8001c1a <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SW0_Pin;
 8001cfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cfe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001d00:	2300      	movs	r3, #0
 8001d02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001d04:	2302      	movs	r3, #2
 8001d06:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 8001d08:	463b      	mov	r3, r7
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4870      	ldr	r0, [pc, #448]	@ (8001ed0 <MX_GPIO_Init+0x27c>)
 8001d0e:	f018 fcae 	bl	801a66e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW1_Pin;
 8001d12:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d16:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001d20:	463b      	mov	r3, r7
 8001d22:	4619      	mov	r1, r3
 8001d24:	486a      	ldr	r0, [pc, #424]	@ (8001ed0 <MX_GPIO_Init+0x27c>)
 8001d26:	f018 fca2 	bl	801a66e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BATT_LED_Pin;
 8001d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d30:	2301      	movs	r3, #1
 8001d32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BATT_LED_GPIO_Port, &GPIO_InitStruct);
 8001d40:	463b      	mov	r3, r7
 8001d42:	4619      	mov	r1, r3
 8001d44:	4862      	ldr	r0, [pc, #392]	@ (8001ed0 <MX_GPIO_Init+0x27c>)
 8001d46:	f018 fc92 	bl	801a66e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001d5e:	463b      	mov	r3, r7
 8001d60:	4619      	mov	r1, r3
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d66:	f018 fc82 	bl	801a66e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SEN_RF_Pin;
 8001d6a:	2308      	movs	r3, #8
 8001d6c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN_RF_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	463b      	mov	r3, r7
 8001d80:	4619      	mov	r1, r3
 8001d82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d86:	f018 fc72 	bl	801a66e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SEN_R_Pin;
 8001d8a:	2310      	movs	r3, #16
 8001d8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN_R_GPIO_Port, &GPIO_InitStruct);
 8001d9e:	463b      	mov	r3, r7
 8001da0:	4619      	mov	r1, r3
 8001da2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da6:	f018 fc62 	bl	801a66e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED3_Pin;
 8001daa:	2301      	movs	r3, #1
 8001dac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dae:	2301      	movs	r3, #1
 8001db0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4844      	ldr	r0, [pc, #272]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001dc4:	f018 fc53 	bl	801a66e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 8001dc8:	2304      	movs	r3, #4
 8001dca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001ddc:	463b      	mov	r3, r7
 8001dde:	4619      	mov	r1, r3
 8001de0:	483c      	ldr	r0, [pc, #240]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001de2:	f018 fc44 	bl	801a66e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 8001de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dec:	2301      	movs	r3, #1
 8001dee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4834      	ldr	r0, [pc, #208]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001e02:	f018 fc34 	bl	801a66e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_gyro_Pin;
 8001e06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_gyro_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	4619      	mov	r1, r3
 8001e20:	482c      	ldr	r0, [pc, #176]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001e22:	f018 fc24 	bl	801a66e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SEN_L_Pin;
 8001e26:	2340      	movs	r3, #64	@ 0x40
 8001e28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN_L_GPIO_Port, &GPIO_InitStruct);
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4824      	ldr	r0, [pc, #144]	@ (8001ed0 <MX_GPIO_Init+0x27c>)
 8001e40:	f018 fc15 	bl	801a66e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SEN_LF_Pin;
 8001e44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e48:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN_LF_GPIO_Port, &GPIO_InitStruct);
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e62:	f018 fc04 	bl	801a66e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED0_Pin;
 8001e66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e6a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e84:	f018 fbf3 	bl	801a66e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOT0_Pin;
 8001e88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MOT0_GPIO_Port, &GPIO_InitStruct);
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480b      	ldr	r0, [pc, #44]	@ (8001ed0 <MX_GPIO_Init+0x27c>)
 8001ea4:	f018 fbe3 	bl	801a66e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOT1_Pin;
 8001ea8:	2310      	movs	r3, #16
 8001eaa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001eac:	2301      	movs	r3, #1
 8001eae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MOT1_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4804      	ldr	r0, [pc, #16]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001ec2:	f018 fbd4 	bl	801a66e <LL_GPIO_Init>

}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	48000800 	.word	0x48000800
 8001ed4:	48000400 	.word	0x48000400

08001ed8 <SetLED>:

/* USER CODE BEGIN 2 */
void SetLED(uint8_t data){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
	if((data&0x01)==0x01){ 	LL_GPIO_SetOutputPin(LED0_GPIO_Port,LED0_Pin);
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d006      	beq.n	8001efa <SetLED+0x22>
 8001eec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef4:	f7ff fe91 	bl	8001c1a <LL_GPIO_SetOutputPin>
 8001ef8:	e005      	b.n	8001f06 <SetLED+0x2e>
	}else{					LL_GPIO_ResetOutputPin(LED0_GPIO_Port,LED0_Pin);
 8001efa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001efe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f02:	f7ff fe98 	bl	8001c36 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x02)==0x02){ 	LL_GPIO_SetOutputPin(LED1_GPIO_Port,LED1_Pin);
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <SetLED+0x44>
 8001f10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f14:	481c      	ldr	r0, [pc, #112]	@ (8001f88 <SetLED+0xb0>)
 8001f16:	f7ff fe80 	bl	8001c1a <LL_GPIO_SetOutputPin>
 8001f1a:	e004      	b.n	8001f26 <SetLED+0x4e>
	}else{					LL_GPIO_ResetOutputPin(LED1_GPIO_Port,LED1_Pin);
 8001f1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f20:	4819      	ldr	r0, [pc, #100]	@ (8001f88 <SetLED+0xb0>)
 8001f22:	f7ff fe88 	bl	8001c36 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x04)==0x04){ 	LL_GPIO_SetOutputPin(LED2_GPIO_Port,LED2_Pin);
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <SetLED+0x62>
 8001f30:	2104      	movs	r1, #4
 8001f32:	4815      	ldr	r0, [pc, #84]	@ (8001f88 <SetLED+0xb0>)
 8001f34:	f7ff fe71 	bl	8001c1a <LL_GPIO_SetOutputPin>
 8001f38:	e003      	b.n	8001f42 <SetLED+0x6a>
	}else{					LL_GPIO_ResetOutputPin(LED2_GPIO_Port,LED2_Pin);
 8001f3a:	2104      	movs	r1, #4
 8001f3c:	4812      	ldr	r0, [pc, #72]	@ (8001f88 <SetLED+0xb0>)
 8001f3e:	f7ff fe7a 	bl	8001c36 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x08)==0x08){ 	LL_GPIO_SetOutputPin(LED3_GPIO_Port,LED3_Pin);
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d004      	beq.n	8001f56 <SetLED+0x7e>
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	480e      	ldr	r0, [pc, #56]	@ (8001f88 <SetLED+0xb0>)
 8001f50:	f7ff fe63 	bl	8001c1a <LL_GPIO_SetOutputPin>
 8001f54:	e003      	b.n	8001f5e <SetLED+0x86>
	}else{					LL_GPIO_ResetOutputPin(LED3_GPIO_Port,LED3_Pin);
 8001f56:	2101      	movs	r1, #1
 8001f58:	480b      	ldr	r0, [pc, #44]	@ (8001f88 <SetLED+0xb0>)
 8001f5a:	f7ff fe6c 	bl	8001c36 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x10)==0x10){ 	LL_GPIO_SetOutputPin(LED4_GPIO_Port,LED4_Pin);
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <SetLED+0x9c>
 8001f68:	2104      	movs	r1, #4
 8001f6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f6e:	f7ff fe54 	bl	8001c1a <LL_GPIO_SetOutputPin>
	}else{					LL_GPIO_ResetOutputPin(LED4_GPIO_Port,LED4_Pin);
	}
}
 8001f72:	e004      	b.n	8001f7e <SetLED+0xa6>
	}else{					LL_GPIO_ResetOutputPin(LED4_GPIO_Port,LED4_Pin);
 8001f74:	2104      	movs	r1, #4
 8001f76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f7a:	f7ff fe5c 	bl	8001c36 <LL_GPIO_ResetOutputPin>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	48000400 	.word	0x48000400

08001f8c <SetBatLED>:

void SetBatLED(uint8_t data){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(BATT_LED_GPIO_Port,BATT_LED_Pin);
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d105      	bne.n	8001fa8 <SetBatLED+0x1c>
 8001f9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fa0:	4806      	ldr	r0, [pc, #24]	@ (8001fbc <SetBatLED+0x30>)
 8001fa2:	f7ff fe3a 	bl	8001c1a <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(BATT_LED_GPIO_Port,BATT_LED_Pin);
}
 8001fa6:	e004      	b.n	8001fb2 <SetBatLED+0x26>
	else			LL_GPIO_ResetOutputPin(BATT_LED_GPIO_Port,BATT_LED_Pin);
 8001fa8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fac:	4803      	ldr	r0, [pc, #12]	@ (8001fbc <SetBatLED+0x30>)
 8001fae:	f7ff fe42 	bl	8001c36 <LL_GPIO_ResetOutputPin>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	48000800 	.word	0x48000800

08001fc0 <SW_IsOn_0>:

int8_t SW_IsOn_0(void){//virtical
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(SW0_GPIO_Port,SW0_Pin);
 8001fc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fc8:	4803      	ldr	r0, [pc, #12]	@ (8001fd8 <SW_IsOn_0+0x18>)
 8001fca:	f7ff fe11 	bl	8001bf0 <LL_GPIO_IsInputPinSet>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	b25b      	sxtb	r3, r3
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	48000800 	.word	0x48000800

08001fdc <SW_IsOn_1>:

int8_t SW_IsOn_1(void){//horizontal
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(SW1_GPIO_Port,SW1_Pin);
 8001fe0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fe4:	4803      	ldr	r0, [pc, #12]	@ (8001ff4 <SW_IsOn_1+0x18>)
 8001fe6:	f7ff fe03 	bl	8001bf0 <LL_GPIO_IsInputPinSet>
 8001fea:	4603      	mov	r3, r0
 8001fec:	b25b      	sxtb	r3, r3
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	48000800 	.word	0x48000800

08001ff8 <Set_SenFL>:

void Set_SenFL(uint8_t data){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN_LF_GPIO_Port,SEN_LF_Pin);
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d106      	bne.n	8002016 <Set_SenFL+0x1e>
 8002008:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800200c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002010:	f7ff fe03 	bl	8001c1a <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN_LF_GPIO_Port,SEN_LF_Pin);
}
 8002014:	e005      	b.n	8002022 <Set_SenFL+0x2a>
	else			LL_GPIO_ResetOutputPin(SEN_LF_GPIO_Port,SEN_LF_Pin);
 8002016:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800201a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800201e:	f7ff fe0a 	bl	8001c36 <LL_GPIO_ResetOutputPin>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <Set_SenSL>:

void Set_SenSL(uint8_t data){
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN_L_GPIO_Port,SEN_L_Pin);
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d104      	bne.n	8002046 <Set_SenSL+0x1a>
 800203c:	2140      	movs	r1, #64	@ 0x40
 800203e:	4806      	ldr	r0, [pc, #24]	@ (8002058 <Set_SenSL+0x2c>)
 8002040:	f7ff fdeb 	bl	8001c1a <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN_L_GPIO_Port,SEN_L_Pin);
}
 8002044:	e003      	b.n	800204e <Set_SenSL+0x22>
	else			LL_GPIO_ResetOutputPin(SEN_L_GPIO_Port,SEN_L_Pin);
 8002046:	2140      	movs	r1, #64	@ 0x40
 8002048:	4803      	ldr	r0, [pc, #12]	@ (8002058 <Set_SenSL+0x2c>)
 800204a:	f7ff fdf4 	bl	8001c36 <LL_GPIO_ResetOutputPin>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	48000800 	.word	0x48000800

0800205c <Set_SenSR>:

void Set_SenSR(uint8_t data){
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN_R_GPIO_Port,SEN_R_Pin);
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d105      	bne.n	8002078 <Set_SenSR+0x1c>
 800206c:	2110      	movs	r1, #16
 800206e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002072:	f7ff fdd2 	bl	8001c1a <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN_R_GPIO_Port,SEN_R_Pin);
}
 8002076:	e004      	b.n	8002082 <Set_SenSR+0x26>
	else			LL_GPIO_ResetOutputPin(SEN_R_GPIO_Port,SEN_R_Pin);
 8002078:	2110      	movs	r1, #16
 800207a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800207e:	f7ff fdda 	bl	8001c36 <LL_GPIO_ResetOutputPin>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <Set_SenFR>:

void Set_SenFR(uint8_t data){
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN_RF_GPIO_Port,SEN_RF_Pin);
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d105      	bne.n	80020a6 <Set_SenFR+0x1c>
 800209a:	2108      	movs	r1, #8
 800209c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a0:	f7ff fdbb 	bl	8001c1a <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN_RF_GPIO_Port,SEN_RF_Pin);
}
 80020a4:	e004      	b.n	80020b0 <Set_SenFR+0x26>
	else			LL_GPIO_ResetOutputPin(SEN_RF_GPIO_Port,SEN_RF_Pin);
 80020a6:	2108      	movs	r1, #8
 80020a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ac:	f7ff fdc3 	bl	8001c36 <LL_GPIO_ResetOutputPin>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <Set_MOT0>:

void Set_MOT0(uint8_t data){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(MOT0_GPIO_Port,MOT0_Pin);
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d105      	bne.n	80020d4 <Set_MOT0+0x1c>
 80020c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020cc:	4806      	ldr	r0, [pc, #24]	@ (80020e8 <Set_MOT0+0x30>)
 80020ce:	f7ff fda4 	bl	8001c1a <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(MOT0_GPIO_Port,MOT0_Pin);
}
 80020d2:	e004      	b.n	80020de <Set_MOT0+0x26>
	else			LL_GPIO_ResetOutputPin(MOT0_GPIO_Port,MOT0_Pin);
 80020d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020d8:	4803      	ldr	r0, [pc, #12]	@ (80020e8 <Set_MOT0+0x30>)
 80020da:	f7ff fdac 	bl	8001c36 <LL_GPIO_ResetOutputPin>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	48000800 	.word	0x48000800

080020ec <Set_MOT1>:

void Set_MOT1(uint8_t data){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(MOT1_GPIO_Port,MOT1_Pin);
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d104      	bne.n	8002106 <Set_MOT1+0x1a>
 80020fc:	2110      	movs	r1, #16
 80020fe:	4806      	ldr	r0, [pc, #24]	@ (8002118 <Set_MOT1+0x2c>)
 8002100:	f7ff fd8b 	bl	8001c1a <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(MOT1_GPIO_Port,MOT1_Pin);
}
 8002104:	e003      	b.n	800210e <Set_MOT1+0x22>
	else			LL_GPIO_ResetOutputPin(MOT1_GPIO_Port,MOT1_Pin);
 8002106:	2110      	movs	r1, #16
 8002108:	4803      	ldr	r0, [pc, #12]	@ (8002118 <Set_MOT1+0x2c>)
 800210a:	f7ff fd94 	bl	8001c36 <LL_GPIO_ResetOutputPin>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	48000400 	.word	0x48000400

0800211c <__NVIC_SetPriorityGrouping>:
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800212c:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002138:	4013      	ands	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800214c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214e:	4a04      	ldr	r2, [pc, #16]	@ (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	60d3      	str	r3, [r2, #12]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <LL_RCC_HSI_Enable>:
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <LL_RCC_HSI_Enable+0x1c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a04      	ldr	r2, [pc, #16]	@ (8002180 <LL_RCC_HSI_Enable+0x1c>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002172:	6013      	str	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000

08002184 <LL_RCC_HSI_IsReady>:
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002188:	4b07      	ldr	r3, [pc, #28]	@ (80021a8 <LL_RCC_HSI_IsReady+0x24>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002194:	d101      	bne.n	800219a <LL_RCC_HSI_IsReady+0x16>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_RCC_HSI_IsReady+0x18>
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000

080021ac <LL_RCC_HSI_SetCalibTrimming>:
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80021b4:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	061b      	lsls	r3, r3, #24
 80021c0:	4904      	ldr	r1, [pc, #16]	@ (80021d4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000

080021d8 <LL_RCC_SetSysClkSource>:
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <LL_RCC_SetSysClkSource+0x24>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f023 0203 	bic.w	r2, r3, #3
 80021e8:	4904      	ldr	r1, [pc, #16]	@ (80021fc <LL_RCC_SetSysClkSource+0x24>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	608b      	str	r3, [r1, #8]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	40021000 	.word	0x40021000

08002200 <LL_RCC_GetSysClkSource>:
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002204:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <LL_RCC_GetSysClkSource+0x18>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 030c 	and.w	r3, r3, #12
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000

0800221c <LL_RCC_SetAHBPrescaler>:
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002224:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <LL_RCC_SetAHBPrescaler+0x24>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800222c:	4904      	ldr	r1, [pc, #16]	@ (8002240 <LL_RCC_SetAHBPrescaler+0x24>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	40021000 	.word	0x40021000

08002244 <LL_RCC_SetAPB1Prescaler>:
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <LL_RCC_SetAPB1Prescaler+0x24>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002254:	4904      	ldr	r1, [pc, #16]	@ (8002268 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4313      	orrs	r3, r2
 800225a:	608b      	str	r3, [r1, #8]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	40021000 	.word	0x40021000

0800226c <LL_RCC_SetAPB2Prescaler>:
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002274:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800227c:	4904      	ldr	r1, [pc, #16]	@ (8002290 <LL_RCC_SetAPB2Prescaler+0x24>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4313      	orrs	r3, r2
 8002282:	608b      	str	r3, [r1, #8]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40021000 	.word	0x40021000

08002294 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <LL_RCC_PLL_Enable+0x1c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a04      	ldr	r2, [pc, #16]	@ (80022b0 <LL_RCC_PLL_Enable+0x1c>)
 800229e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000

080022b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80022b8:	4b07      	ldr	r3, [pc, #28]	@ (80022d8 <LL_RCC_PLL_IsReady+0x24>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022c4:	d101      	bne.n	80022ca <LL_RCC_PLL_IsReady+0x16>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <LL_RCC_PLL_IsReady+0x18>
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000

080022dc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80022ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	68f9      	ldr	r1, [r7, #12]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	4311      	orrs	r1, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	0212      	lsls	r2, r2, #8
 80022fc:	4311      	orrs	r1, r2
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	4904      	ldr	r1, [pc, #16]	@ (8002314 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8002304:	4313      	orrs	r3, r2
 8002306:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	40021000 	.word	0x40021000
 8002318:	f9ff800c 	.word	0xf9ff800c

0800231c <LL_RCC_PLL_ConfigDomain_ADC>:
  *         @arg @ref LL_RCC_PLLP_DIV_30
  *         @arg @ref LL_RCC_PLLP_DIV_31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_ADC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLPDIV,
 800232a:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <LL_RCC_PLL_ConfigDomain_ADC+0x38>)
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <LL_RCC_PLL_ConfigDomain_ADC+0x3c>)
 8002330:	4013      	ands	r3, r2
 8002332:	68f9      	ldr	r1, [r7, #12]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	4311      	orrs	r1, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	0212      	lsls	r2, r2, #8
 800233c:	4311      	orrs	r1, r2
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	4904      	ldr	r1, [pc, #16]	@ (8002354 <LL_RCC_PLL_ConfigDomain_ADC+0x38>)
 8002344:	4313      	orrs	r3, r2
 8002346:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLP);
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40021000 	.word	0x40021000
 8002358:	07ff800c 	.word	0x07ff800c

0800235c <LL_RCC_PLL_EnableDomain_ADC>:
  * @brief  Enable PLL output mapped on ADC domain clock
  * @rmtoll PLLCFGR      PLLPEN        LL_RCC_PLL_EnableDomain_ADC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_ADC(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN);
 8002360:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <LL_RCC_PLL_EnableDomain_ADC+0x1c>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a04      	ldr	r2, [pc, #16]	@ (8002378 <LL_RCC_PLL_EnableDomain_ADC+0x1c>)
 8002366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800236a:	60d3      	str	r3, [r2, #12]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000

0800237c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8002380:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a04      	ldr	r2, [pc, #16]	@ (8002398 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800238a:	60d3      	str	r3, [r2, #12]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000

0800239c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80023a4:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80023a8:	4907      	ldr	r1, [pc, #28]	@ (80023c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80023b0:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023b2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4013      	ands	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ba:	68fb      	ldr	r3, [r7, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	40021000 	.word	0x40021000

080023cc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80023d4:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023d8:	4907      	ldr	r1, [pc, #28]	@ (80023f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4313      	orrs	r3, r2
 80023de:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023e0:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4013      	ands	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ea:	68fb      	ldr	r3, [r7, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	40021000 	.word	0x40021000

080023fc <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <LL_FLASH_SetLatency+0x24>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 020f 	bic.w	r2, r3, #15
 800240c:	4904      	ldr	r1, [pc, #16]	@ (8002420 <LL_FLASH_SetLatency+0x24>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40022000 	.word	0x40022000

08002424 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002428:	4b04      	ldr	r3, [pc, #16]	@ (800243c <LL_FLASH_GetLatency+0x18>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 030f 	and.w	r3, r3, #15
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40022000 	.word	0x40022000

08002440 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <LL_PWR_EnableRange1BoostMode+0x20>)
 8002446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800244a:	4a05      	ldr	r2, [pc, #20]	@ (8002460 <LL_PWR_EnableRange1BoostMode+0x20>)
 800244c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002450:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40007000 	.word	0x40007000

08002464 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002468:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4a04      	ldr	r2, [pc, #16]	@ (8002480 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800246e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002472:	6093      	str	r3, [r2, #8]
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40007000 	.word	0x40007000

08002484 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void __io_putchar(uint8_t ch){
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
	USART_TransmitByte(ch);
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	4618      	mov	r0, r3
 8002492:	f003 fef1 	bl	8006278 <USART_TransmitByte>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80024a4:	2001      	movs	r0, #1
 80024a6:	f7ff ff91 	bl	80023cc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80024aa:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80024ae:	f7ff ff75 	bl	800239c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b2:	2003      	movs	r0, #3
 80024b4:	f7ff fe32 	bl	800211c <__NVIC_SetPriorityGrouping>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_PWR_DisableUCPDDeadBattery();
 80024b8:	f7ff ffd4 	bl	8002464 <LL_PWR_DisableUCPDDeadBattery>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024bc:	f000 f868 	bl	8002590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024c0:	f7ff fbc8 	bl	8001c54 <MX_GPIO_Init>
  MX_DMA_Init();
 80024c4:	f7ff fa7a 	bl	80019bc <MX_DMA_Init>
  MX_ADC1_Init();
 80024c8:	f7fe fe32 	bl	8001130 <MX_ADC1_Init>
  MX_ADC2_Init();
 80024cc:	f7fe fee0 	bl	8001290 <MX_ADC2_Init>
  MX_ADC3_Init();
 80024d0:	f7fe ffe0 	bl	8001494 <MX_ADC3_Init>
  MX_SPI2_Init();
 80024d4:	f002 f884 	bl	80045e0 <MX_SPI2_Init>
  MX_TIM1_Init();
 80024d8:	f003 f83a 	bl	8005550 <MX_TIM1_Init>
  MX_TIM2_Init();
 80024dc:	f003 f8dc 	bl	8005698 <MX_TIM2_Init>
  MX_TIM3_Init();
 80024e0:	f003 f94a 	bl	8005778 <MX_TIM3_Init>
  MX_TIM5_Init();
 80024e4:	f003 f9f4 	bl	80058d0 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80024e8:	f003 fe3a 	bl	8006160 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80024ec:	f003 f9b0 	bl	8005850 <MX_TIM4_Init>
  MX_TIM6_Init();
 80024f0:	f003 fa78 	bl	80059e4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80024f4:	f003 faae 	bl	8005a54 <MX_TIM7_Init>
  MX_TIM8_Init();
 80024f8:	f003 fae4 	bl	8005ac4 <MX_TIM8_Init>
  MX_TIM15_Init();
 80024fc:	f003 fb86 	bl	8005c0c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  SetLED(0x0E);
 8002500:	200e      	movs	r0, #14
 8002502:	f7ff fce9 	bl	8001ed8 <SetLED>
  LL_mDelay(200);
 8002506:	20c8      	movs	r0, #200	@ 0xc8
 8002508:	f019 fab0 	bl	801ba6c <LL_mDelay>
  SetLED(0x00);
 800250c:	2000      	movs	r0, #0
 800250e:	f7ff fce3 	bl	8001ed8 <SetLED>
  LL_mDelay(200);
 8002512:	20c8      	movs	r0, #200	@ 0xc8
 8002514:	f019 faaa 	bl	801ba6c <LL_mDelay>
  SetLED(0x0E);
 8002518:	200e      	movs	r0, #14
 800251a:	f7ff fcdd 	bl	8001ed8 <SetLED>
  LL_mDelay(200);
 800251e:	20c8      	movs	r0, #200	@ 0xc8
 8002520:	f019 faa4 	bl	801ba6c <LL_mDelay>
  SetLED(0x00);
 8002524:	2000      	movs	r0, #0
 8002526:	f7ff fcd7 	bl	8001ed8 <SetLED>

  Communication_Initialize();
 800252a:	f003 fe97 	bl	800625c <Communication_Initialize>
  HAL_init();
 800252e:	f007 fb0d 	bl	8009b4c <HAL_init>
  ICM_42688_whoami();
 8002532:	f007 f941 	bl	80097b8 <ICM_42688_whoami>
  CTRL_clrNowData();
 8002536:	f003 fff5 	bl	8006524 <CTRL_clrNowData>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800253a:	f7ff fd4f 	bl	8001fdc <SW_IsOn_1>
 800253e:	4603      	mov	r3, r0
 8002540:	2b01      	cmp	r3, #1
 8002542:	d004      	beq.n	800254e <main+0xae>
 8002544:	f007 fe2c 	bl	800a1a0 <CountUP_mode>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <main+0xc0>
		MODE_inc();								// モードを1つ進める
 800254e:	f007 fdb3 	bl	800a0b8 <MODE_inc>
		LL_mDelay(200);			// SWが離されるまで
 8002552:	20c8      	movs	r0, #200	@ 0xc8
 8002554:	f019 fa8a 	bl	801ba6c <LL_mDelay>
		printf("mode selecting\r\n");
 8002558:	480c      	ldr	r0, [pc, #48]	@ (800258c <main+0xec>)
 800255a:	f01b fbeb 	bl	801dd34 <puts>
 800255e:	e00e      	b.n	800257e <main+0xde>
	}
	else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 8002560:	f7ff fd2e 	bl	8001fc0 <SW_IsOn_0>
 8002564:	4603      	mov	r3, r0
 8002566:	2b01      	cmp	r3, #1
 8002568:	d004      	beq.n	8002574 <main+0xd4>
 800256a:	f009 fd34 	bl	800bfd6 <MODE_CheckExe>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <main+0xde>
//		else if ( SW_ON == SW_EXE_PIN ){
		MODE_exe();								// モード�?
 8002574:	f009 fb1c 	bl	800bbb0 <MODE_exe>
		LL_mDelay(200);			// SWが離されるまで
 8002578:	20c8      	movs	r0, #200	@ 0xc8
 800257a:	f019 fa77 	bl	801ba6c <LL_mDelay>
	}
    LL_mDelay(100);
 800257e:	2064      	movs	r0, #100	@ 0x64
 8002580:	f019 fa74 	bl	801ba6c <LL_mDelay>
  Get_Sen_Nowdata();
 8002584:	f010 fdc8 	bl	8013118 <Get_Sen_Nowdata>
      if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 8002588:	e7d7      	b.n	800253a <main+0x9a>
 800258a:	bf00      	nop
 800258c:	080217b8 	.word	0x080217b8

08002590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8002596:	2004      	movs	r0, #4
 8002598:	f7ff ff30 	bl	80023fc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 800259c:	bf00      	nop
 800259e:	f7ff ff41 	bl	8002424 <LL_FLASH_GetLatency>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d1fa      	bne.n	800259e <SystemClock_Config+0xe>
  {
  }
  LL_PWR_EnableRange1BoostMode();
 80025a8:	f7ff ff4a 	bl	8002440 <LL_PWR_EnableRange1BoostMode>
  LL_RCC_HSI_Enable();
 80025ac:	f7ff fdda 	bl	8002164 <LL_RCC_HSI_Enable>
   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80025b0:	bf00      	nop
 80025b2:	f7ff fde7 	bl	8002184 <LL_RCC_HSI_IsReady>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d1fa      	bne.n	80025b2 <SystemClock_Config+0x22>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 80025bc:	2040      	movs	r0, #64	@ 0x40
 80025be:	f7ff fdf5 	bl	80021ac <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 85, LL_RCC_PLLR_DIV_2);
 80025c2:	2300      	movs	r3, #0
 80025c4:	2255      	movs	r2, #85	@ 0x55
 80025c6:	2130      	movs	r1, #48	@ 0x30
 80025c8:	2002      	movs	r0, #2
 80025ca:	f7ff fe87 	bl	80022dc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_ADC(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 85, LL_RCC_PLLP_DIV_4);
 80025ce:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80025d2:	2255      	movs	r2, #85	@ 0x55
 80025d4:	2130      	movs	r1, #48	@ 0x30
 80025d6:	2002      	movs	r0, #2
 80025d8:	f7ff fea0 	bl	800231c <LL_RCC_PLL_ConfigDomain_ADC>
  LL_RCC_PLL_EnableDomain_SYS();
 80025dc:	f7ff fece 	bl	800237c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_EnableDomain_ADC();
 80025e0:	f7ff febc 	bl	800235c <LL_RCC_PLL_EnableDomain_ADC>
  LL_RCC_PLL_Enable();
 80025e4:	f7ff fe56 	bl	8002294 <LL_RCC_PLL_Enable>
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80025e8:	bf00      	nop
 80025ea:	f7ff fe63 	bl	80022b4 <LL_RCC_PLL_IsReady>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d1fa      	bne.n	80025ea <SystemClock_Config+0x5a>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80025f4:	2003      	movs	r0, #3
 80025f6:	f7ff fdef 	bl	80021d8 <LL_RCC_SetSysClkSource>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 80025fa:	2080      	movs	r0, #128	@ 0x80
 80025fc:	f7ff fe0e 	bl	800221c <LL_RCC_SetAHBPrescaler>
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002600:	bf00      	nop
 8002602:	f7ff fdfd 	bl	8002200 <LL_RCC_GetSysClkSource>
 8002606:	4603      	mov	r3, r0
 8002608:	2b0c      	cmp	r3, #12
 800260a:	d1fa      	bne.n	8002602 <SystemClock_Config+0x72>
  {
  }

  /* Insure 1us transition state at intermediate medium speed clock*/
  for (__IO uint32_t i = (170 >> 1); i !=0; i--);
 800260c:	2355      	movs	r3, #85	@ 0x55
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	e002      	b.n	8002618 <SystemClock_Config+0x88>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3b01      	subs	r3, #1
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f9      	bne.n	8002612 <SystemClock_Config+0x82>

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800261e:	2000      	movs	r0, #0
 8002620:	f7ff fdfc 	bl	800221c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002624:	2000      	movs	r0, #0
 8002626:	f7ff fe0d 	bl	8002244 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800262a:	2000      	movs	r0, #0
 800262c:	f7ff fe1e 	bl	800226c <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(170000000);
 8002630:	4804      	ldr	r0, [pc, #16]	@ (8002644 <SystemClock_Config+0xb4>)
 8002632:	f019 fa0d 	bl	801ba50 <LL_Init1msTick>

  LL_SetSystemCoreClock(170000000);
 8002636:	4803      	ldr	r0, [pc, #12]	@ (8002644 <SystemClock_Config+0xb4>)
 8002638:	f019 fa40 	bl	801babc <LL_SetSystemCoreClock>
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	0a21fe80 	.word	0x0a21fe80

08002648 <PARAM_getGain>:
			//速度kp,速度ki,速度kd,	角速度kp,角速度ki,角速度kd,	角度kp,角度ki,	壁kp,壁kd
			{ 30.0,4.0,0.1,	240.0,8.0,0.5,	0.0,0.0,	0.6,0.1,}
	};

const stGAIN* PARAM_getGain( enPARAM_MODE en_mode )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
	const stGAIN* p_adr;
	
	switch( en_mode ){
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	2b13      	cmp	r3, #19
 8002656:	dc2b      	bgt.n	80026b0 <PARAM_getGain+0x68>
 8002658:	2b0f      	cmp	r3, #15
 800265a:	da1e      	bge.n	800269a <PARAM_getGain+0x52>
 800265c:	2b07      	cmp	r3, #7
 800265e:	dc02      	bgt.n	8002666 <PARAM_getGain+0x1e>
 8002660:	2b00      	cmp	r3, #0
 8002662:	dc04      	bgt.n	800266e <PARAM_getGain+0x26>
 8002664:	e024      	b.n	80026b0 <PARAM_getGain+0x68>
 8002666:	3b0a      	subs	r3, #10
 8002668:	2b02      	cmp	r3, #2
 800266a:	d821      	bhi.n	80026b0 <PARAM_getGain+0x68>
 800266c:	e00a      	b.n	8002684 <PARAM_getGain+0x3c>
//		case PARAM_BACK_DEC:											// 減速中(後進)
		case PARAM_SKEW_ACC:											// 加速中(斜め)
		case PARAM_SKEW_CONST:											// 等速中(斜め)
		case PARAM_SKEW_DEC:											// 減速中(斜め)
		case PARAM_HIT_WALL:											// 壁あて制御
			p_adr = &f_StGainData[en_Speed_st];
 800266e:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <PARAM_getGain+0x90>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4a17      	ldr	r2, [pc, #92]	@ (80026dc <PARAM_getGain+0x94>)
 800267e:	4413      	add	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
			break;
 8002682:	e023      	b.n	80026cc <PARAM_getGain+0x84>
			
		case PARAM_ACC_TRUN:											// 加速中(超地信旋回)
		case PARAM_CONST_TRUN:											// 等速中(超地信旋回)
		case PARAM_DEC_TRUN:											// 減速中(超地信旋回)
			p_adr = &f_TurnGainData[en_Speed_trun];
 8002684:	4b16      	ldr	r3, [pc, #88]	@ (80026e0 <PARAM_getGain+0x98>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4a14      	ldr	r2, [pc, #80]	@ (80026e4 <PARAM_getGain+0x9c>)
 8002694:	4413      	add	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
			break;
 8002698:	e018      	b.n	80026cc <PARAM_getGain+0x84>
		case PARAM_ENTRY_SLA:											// スラローム前の前進動作(スラローム)
		case PARAM_ACC_SLA:											// 加速中(スラローム)
		case PARAM_CONST_SLA:											// 等速中(スラローム)
		case PARAM_DEC_SLA:											// 減速中(スラローム)
		case PARAM_EXIT_SLA:											// スラローム後の前進動作(スラローム)
			p_adr = &f_SlaGainData[en_Speed_sla];
 800269a:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <PARAM_getGain+0xa0>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4a10      	ldr	r2, [pc, #64]	@ (80026ec <PARAM_getGain+0xa4>)
 80026aa:	4413      	add	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
			break;
 80026ae:	e00d      	b.n	80026cc <PARAM_getGain+0x84>
		
		default:														// Err、とりあえず・・・（メモリ破壊を防ぐため）
			printf("設定したゲインタイプがありません \n\r");
 80026b0:	480f      	ldr	r0, [pc, #60]	@ (80026f0 <PARAM_getGain+0xa8>)
 80026b2:	f01b facf 	bl	801dc54 <iprintf>
			p_adr = &f_SlaGainData[en_Speed_sla];
 80026b6:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <PARAM_getGain+0xa0>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4a09      	ldr	r2, [pc, #36]	@ (80026ec <PARAM_getGain+0xa4>)
 80026c6:	4413      	add	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
			break;
 80026ca:	bf00      	nop
	}
	
	return p_adr;
 80026cc:	68fb      	ldr	r3, [r7, #12]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000000 	.word	0x20000000
 80026dc:	08021f44 	.word	0x08021f44
 80026e0:	20000001 	.word	0x20000001
 80026e4:	0802200c 	.word	0x0802200c
 80026e8:	20000002 	.word	0x20000002
 80026ec:	080220d4 	.word	0x080220d4
 80026f0:	080217c8 	.word	0x080217c8

080026f4 <PARAM_setSpeedType>:
			break;
	}
}

void PARAM_setSpeedType( enPARAM_MODE en_mode, enPARAM_MOVE_SPEED en_speed )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	460a      	mov	r2, r1
 80026fe:	71fb      	strb	r3, [r7, #7]
 8002700:	4613      	mov	r3, r2
 8002702:	71bb      	strb	r3, [r7, #6]
	switch( en_mode ){
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	2b17      	cmp	r3, #23
 8002708:	d00e      	beq.n	8002728 <PARAM_setSpeedType+0x34>
 800270a:	2b17      	cmp	r3, #23
 800270c:	dc10      	bgt.n	8002730 <PARAM_setSpeedType+0x3c>
 800270e:	2b15      	cmp	r3, #21
 8002710:	d002      	beq.n	8002718 <PARAM_setSpeedType+0x24>
 8002712:	2b16      	cmp	r3, #22
 8002714:	d004      	beq.n	8002720 <PARAM_setSpeedType+0x2c>
 8002716:	e00b      	b.n	8002730 <PARAM_setSpeedType+0x3c>
		
		case PARAM_ST:
			en_Speed_st = en_speed;
 8002718:	4a09      	ldr	r2, [pc, #36]	@ (8002740 <PARAM_setSpeedType+0x4c>)
 800271a:	79bb      	ldrb	r3, [r7, #6]
 800271c:	7013      	strb	r3, [r2, #0]
			break;
 800271e:	e00b      	b.n	8002738 <PARAM_setSpeedType+0x44>
		
		case PARAM_TRUN:
			en_Speed_trun = en_speed;
 8002720:	4a08      	ldr	r2, [pc, #32]	@ (8002744 <PARAM_setSpeedType+0x50>)
 8002722:	79bb      	ldrb	r3, [r7, #6]
 8002724:	7013      	strb	r3, [r2, #0]
			break;
 8002726:	e007      	b.n	8002738 <PARAM_setSpeedType+0x44>
		
		case PARAM_SLA:
			en_Speed_sla = en_speed;
 8002728:	4a07      	ldr	r2, [pc, #28]	@ (8002748 <PARAM_setSpeedType+0x54>)
 800272a:	79bb      	ldrb	r3, [r7, #6]
 800272c:	7013      	strb	r3, [r2, #0]
			break;
 800272e:	e003      	b.n	8002738 <PARAM_setSpeedType+0x44>
			
		default:
			printf("Can't find parameter type \n\r");
 8002730:	4806      	ldr	r0, [pc, #24]	@ (800274c <PARAM_setSpeedType+0x58>)
 8002732:	f01b fa8f 	bl	801dc54 <iprintf>
			break;
 8002736:	bf00      	nop
	}
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000000 	.word	0x20000000
 8002744:	20000001 	.word	0x20000001
 8002748:	20000002 	.word	0x20000002
 800274c:	080217fc 	.word	0x080217fc

08002750 <PARAM_getSpeed>:

const stSPEED* PARAM_getSpeed( enPARAM_MODE en_mode )
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
	const stSPEED* p_adr;
	
	switch( en_mode ){
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	2b17      	cmp	r3, #23
 800275e:	bf8c      	ite	hi
 8002760:	2201      	movhi	r2, #1
 8002762:	2200      	movls	r2, #0
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	2a00      	cmp	r2, #0
 8002768:	d13f      	bne.n	80027ea <PARAM_getSpeed+0x9a>
 800276a:	2201      	movs	r2, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	4a27      	ldr	r2, [pc, #156]	@ (8002810 <PARAM_getSpeed+0xc0>)
 8002772:	401a      	ands	r2, r3
 8002774:	2a00      	cmp	r2, #0
 8002776:	bf14      	ite	ne
 8002778:	2201      	movne	r2, #1
 800277a:	2200      	moveq	r2, #0
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	2a00      	cmp	r2, #0
 8002780:	d112      	bne.n	80027a8 <PARAM_getSpeed+0x58>
 8002782:	4a24      	ldr	r2, [pc, #144]	@ (8002814 <PARAM_getSpeed+0xc4>)
 8002784:	401a      	ands	r2, r3
 8002786:	2a00      	cmp	r2, #0
 8002788:	bf14      	ite	ne
 800278a:	2201      	movne	r2, #1
 800278c:	2200      	moveq	r2, #0
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	2a00      	cmp	r2, #0
 8002792:	d11f      	bne.n	80027d4 <PARAM_getSpeed+0x84>
 8002794:	4a20      	ldr	r2, [pc, #128]	@ (8002818 <PARAM_getSpeed+0xc8>)
 8002796:	401a      	ands	r2, r3
 8002798:	2a00      	cmp	r2, #0
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10b      	bne.n	80027be <PARAM_getSpeed+0x6e>
 80027a6:	e020      	b.n	80027ea <PARAM_getSpeed+0x9a>
//		case PARAM_BACK_DEC:											// 減速中(後進)
		case PARAM_SKEW_ACC:											// 加速中(斜め)
		case PARAM_SKEW_CONST:											// 等速中(斜め)
		case PARAM_SKEW_DEC:											// 減速中(斜め)
		case PARAM_HIT_WALL:											// 壁あて制御
			p_adr = &f_StSpeedData[en_Speed_st];
 80027a8:	4b1c      	ldr	r3, [pc, #112]	@ (800281c <PARAM_getSpeed+0xcc>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002820 <PARAM_getSpeed+0xd0>)
 80027b8:	4413      	add	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
			break;
 80027bc:	e023      	b.n	8002806 <PARAM_getSpeed+0xb6>
			
		case PARAM_TRUN:												// 旋回
		case PARAM_ACC_TRUN:											// 加速中(超地信旋回)
		case PARAM_CONST_TRUN:											// 等速中(超地信旋回)
		case PARAM_DEC_TRUN:											// 減速中(超地信旋回)
			p_adr = &f_TurnSpeedData[en_Speed_trun];
 80027be:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <PARAM_getSpeed+0xd4>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4a16      	ldr	r2, [pc, #88]	@ (8002828 <PARAM_getSpeed+0xd8>)
 80027ce:	4413      	add	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
			break;
 80027d2:	e018      	b.n	8002806 <PARAM_getSpeed+0xb6>
		case PARAM_ENTRY_SLA:											// スラローム前の前進動作(スラローム)
		case PARAM_ACC_SLA:											// 加速中(スラローム)
		case PARAM_CONST_SLA:											// 等速中(スラローム)
		case PARAM_DEC_SLA:											// 減速中(スラローム)
		case PARAM_EXIT_SLA:											// スラローム後の前進動作(スラローム)
			p_adr = &f_SlaSpeedData[en_Speed_sla];
 80027d4:	4b15      	ldr	r3, [pc, #84]	@ (800282c <PARAM_getSpeed+0xdc>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	4613      	mov	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4413      	add	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4a13      	ldr	r2, [pc, #76]	@ (8002830 <PARAM_getSpeed+0xe0>)
 80027e4:	4413      	add	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
			break;
 80027e8:	e00d      	b.n	8002806 <PARAM_getSpeed+0xb6>

		default:														// Err、とりあえず・・・（メモリ破壊を防ぐため）
			printf("Can't find speed type \n\r");
 80027ea:	4812      	ldr	r0, [pc, #72]	@ (8002834 <PARAM_getSpeed+0xe4>)
 80027ec:	f01b fa32 	bl	801dc54 <iprintf>
			p_adr = &f_SlaSpeedData[en_Speed_sla];
 80027f0:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <PARAM_getSpeed+0xdc>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	461a      	mov	r2, r3
 80027f6:	4613      	mov	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002830 <PARAM_getSpeed+0xe0>)
 8002800:	4413      	add	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
			break;
 8002804:	bf00      	nop
	}
	
	return p_adr;
 8002806:	68fb      	ldr	r3, [r7, #12]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	002000fe 	.word	0x002000fe
 8002814:	008f8000 	.word	0x008f8000
 8002818:	00401c00 	.word	0x00401c00
 800281c:	20000000 	.word	0x20000000
 8002820:	08021ddc 	.word	0x08021ddc
 8002824:	20000001 	.word	0x20000001
 8002828:	08021e54 	.word	0x08021e54
 800282c:	20000002 	.word	0x20000002
 8002830:	08021ecc 	.word	0x08021ecc
 8002834:	0802181c 	.word	0x0802181c

08002838 <PARAM_makeSra>:
	return p_adr;
}
*/

void PARAM_makeSra( float f_speed, float f_angAcc, float f_g , float f_jerkAngle, enSLA_TYPE en_mode)
{
 8002838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800283c:	b0a6      	sub	sp, #152	@ 0x98
 800283e:	af00      	add	r7, sp, #0
 8002840:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
 8002844:	edc7 0a0c 	vstr	s1, [r7, #48]	@ 0x30
 8002848:	ed87 1a0b 	vstr	s2, [r7, #44]	@ 0x2c
 800284c:	edc7 1a0a 	vstr	s3, [r7, #40]	@ 0x28
 8002850:	4603      	mov	r3, r0
 8002852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	float	f_start_x;					// 開始x位置 [mm]
	float	f_start_y;					// 開始y位置 [mm]
	float	f_final_x;					// 最終x位置 [mm]
	float	f_final_y;					// 最終y位置 [mm]
	float	f_final_ang;				// 角減速時の最終角度 [rad]	
	float	f_maxAngleV		= 0;		// 最大角速度[rad/s]
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	677b      	str	r3, [r7, #116]	@ 0x74
	float	f_timeAcc		= 0;		// 加速時間[s]
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	673b      	str	r3, [r7, #112]	@ 0x70
	float	f_accAngle		= 0;		// 加速角度[rad]
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float	f_timeConst		= 0;		// 等速時間[s]
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	66bb      	str	r3, [r7, #104]	@ 0x68
	float	f_constAngle	= 0;		// 等速角度[rad]
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	667b      	str	r3, [r7, #100]	@ 0x64
	float	f_ang			= 0;		// 演算用、角度 [rad]
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	663b      	str	r3, [r7, #96]	@ 0x60
	float	f_time			= 0;		// 演算用、時間 [s]
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float	f_x;						// 演算用x位置 [mm]
	float	f_y;						// 演算用y位置 [mm]
	uint16_t	i = 0;						// ループ用
 8002880:	2300      	movs	r3, #0
 8002882:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
	stSLA* 	p_adr = &st_Sla[en_mode];		// 記録する走行データ
 8002886:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4a35      	ldr	r2, [pc, #212]	@ (8002968 <PARAM_makeSra+0x130>)
 8002894:	4413      	add	r3, r2
 8002896:	65bb      	str	r3, [r7, #88]	@ 0x58

	float	f_jerkAngleTime		= 0;
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	657b      	str	r3, [r7, #84]	@ 0x54
	float	f_jerkAngleSpeed	= 0;
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	653b      	str	r3, [r7, #80]	@ 0x50
	float	f_jerkAccAccAngle	= 0;
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float	f_jerkAccDecAngle	= 0;
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	64bb      	str	r3, [r7, #72]	@ 0x48
	float	f_jerkDecDecAngle	= 0;
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	647b      	str	r3, [r7, #68]	@ 0x44
	float	f_DecConstAngle	= 0;
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	643b      	str	r3, [r7, #64]	@ 0x40
	float	f_jerkDecAccAngle	= 0;
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// スラロームに応じた設定値からスラロームに必要なパラメータを演算する 
	switch(en_mode){
 80028c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d864      	bhi.n	8002994 <PARAM_makeSra+0x15c>
 80028ca:	a201      	add	r2, pc, #4	@ (adr r2, 80028d0 <PARAM_makeSra+0x98>)
 80028cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d0:	080028e1 	.word	0x080028e1
 80028d4:	08002903 	.word	0x08002903
 80028d8:	08002947 	.word	0x08002947
 80028dc:	08002925 	.word	0x08002925

		case SLA_90:
			f_start_x   = HALF_BLOCK;
 80028e0:	4b22      	ldr	r3, [pc, #136]	@ (800296c <PARAM_makeSra+0x134>)
 80028e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			f_start_y   = 0.0f;
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			f_final_x   = BLOCK;
 80028ee:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <PARAM_makeSra+0x138>)
 80028f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			f_final_y   = HALF_BLOCK;
 80028f4:	4b1d      	ldr	r3, [pc, #116]	@ (800296c <PARAM_makeSra+0x134>)
 80028f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			f_final_ang = 90.0f * DEG_TO_RAD;
 80028fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002974 <PARAM_makeSra+0x13c>)
 80028fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			break;
 8002900:	e049      	b.n	8002996 <PARAM_makeSra+0x15e>

		case SLA_45:
			f_start_x   = HALF_BLOCK;
 8002902:	4b1a      	ldr	r3, [pc, #104]	@ (800296c <PARAM_makeSra+0x134>)
 8002904:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			f_start_y   = 0.0f;
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			f_final_x   = BLOCK * 0.75f;
 8002910:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <PARAM_makeSra+0x140>)
 8002912:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			f_final_y   = BLOCK * 0.75f;
 8002916:	4b18      	ldr	r3, [pc, #96]	@ (8002978 <PARAM_makeSra+0x140>)
 8002918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			f_final_ang = 45.0f * DEG_TO_RAD;
 800291c:	4b17      	ldr	r3, [pc, #92]	@ (800297c <PARAM_makeSra+0x144>)
 800291e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			break;
 8002922:	e038      	b.n	8002996 <PARAM_makeSra+0x15e>
			
		case SLA_N90:
			f_start_x   = HALF_BLOCK * 0.5f * 1.4142f;
 8002924:	4b16      	ldr	r3, [pc, #88]	@ (8002980 <PARAM_makeSra+0x148>)
 8002926:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			f_start_y   = 0.0f;
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			f_final_x   = HALF_BLOCK * 1.4142f;
 8002932:	4b14      	ldr	r3, [pc, #80]	@ (8002984 <PARAM_makeSra+0x14c>)
 8002934:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			f_final_y   = HALF_BLOCK * 0.5f * 1.4142f;
 8002938:	4b11      	ldr	r3, [pc, #68]	@ (8002980 <PARAM_makeSra+0x148>)
 800293a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			f_final_ang = 90.0f * DEG_TO_RAD;
 800293e:	4b0d      	ldr	r3, [pc, #52]	@ (8002974 <PARAM_makeSra+0x13c>)
 8002940:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			break;
 8002944:	e027      	b.n	8002996 <PARAM_makeSra+0x15e>
			
		case SLA_135:
			f_start_x   = HALF_BLOCK;
 8002946:	4b09      	ldr	r3, [pc, #36]	@ (800296c <PARAM_makeSra+0x134>)
 8002948:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			f_start_y   = 0.0f;
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			f_final_x   = BLOCK * 1.25f;
 8002954:	4b0c      	ldr	r3, [pc, #48]	@ (8002988 <PARAM_makeSra+0x150>)
 8002956:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			f_final_y   = BLOCK * 0.25;
 800295a:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <PARAM_makeSra+0x154>)
 800295c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			f_final_ang = 135.0f * DEG_TO_RAD;
 8002960:	4b0b      	ldr	r3, [pc, #44]	@ (8002990 <PARAM_makeSra+0x158>)
 8002962:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			break;
 8002966:	e016      	b.n	8002996 <PARAM_makeSra+0x15e>
 8002968:	20000218 	.word	0x20000218
 800296c:	3d3851ec 	.word	0x3d3851ec
 8002970:	3db851ec 	.word	0x3db851ec
 8002974:	3fc90ff9 	.word	0x3fc90ff9
 8002978:	3d8a3d71 	.word	0x3d8a3d71
 800297c:	3f490ff9 	.word	0x3f490ff9
 8002980:	3d02552a 	.word	0x3d02552a
 8002984:	3d82552a 	.word	0x3d82552a
 8002988:	3de66667 	.word	0x3de66667
 800298c:	3cb851ec 	.word	0x3cb851ec
 8002990:	4016cbfb 	.word	0x4016cbfb

		default:
			break;
 8002994:	bf00      	nop
	}

	// caluculate acc and dec angle speed 
	f_maxAngleV			= f_g / f_speed;							// max angle speed[rad/s] (omega[rad/s] = g[m/s^2] / v[m/s] )
 8002996:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800299a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800299e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029a2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	f_jerkAngleTime		= f_angAcc/ f_jerkAngle;
 80029a6:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80029aa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80029ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029b2:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	f_jerkAngleSpeed	= 0.5 * f_jerkAngle * f_jerkAngleTime * f_jerkAngleTime;
 80029b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029b8:	f7fd fdee 	bl	8000598 <__aeabi_f2d>
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	4be5      	ldr	r3, [pc, #916]	@ (8002d58 <PARAM_makeSra+0x520>)
 80029c2:	f7fd fe41 	bl	8000648 <__aeabi_dmul>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4614      	mov	r4, r2
 80029cc:	461d      	mov	r5, r3
 80029ce:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80029d0:	f7fd fde2 	bl	8000598 <__aeabi_f2d>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4620      	mov	r0, r4
 80029da:	4629      	mov	r1, r5
 80029dc:	f7fd fe34 	bl	8000648 <__aeabi_dmul>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4614      	mov	r4, r2
 80029e6:	461d      	mov	r5, r3
 80029e8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80029ea:	f7fd fdd5 	bl	8000598 <__aeabi_f2d>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4620      	mov	r0, r4
 80029f4:	4629      	mov	r1, r5
 80029f6:	f7fd fe27 	bl	8000648 <__aeabi_dmul>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	f7fe f919 	bl	8000c38 <__aeabi_d2f>
 8002a06:	4603      	mov	r3, r0
 8002a08:	653b      	str	r3, [r7, #80]	@ 0x50
	f_timeAcc			= (f_maxAngleV- f_jerkAngleSpeed * 2.0) / f_angAcc;					// acc time[s]
 8002a0a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002a0c:	f7fd fdc4 	bl	8000598 <__aeabi_f2d>
 8002a10:	4604      	mov	r4, r0
 8002a12:	460d      	mov	r5, r1
 8002a14:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002a16:	f7fd fdbf 	bl	8000598 <__aeabi_f2d>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	f7fd fc5d 	bl	80002dc <__adddf3>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4620      	mov	r0, r4
 8002a28:	4629      	mov	r1, r5
 8002a2a:	f7fd fc55 	bl	80002d8 <__aeabi_dsub>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4614      	mov	r4, r2
 8002a34:	461d      	mov	r5, r3
 8002a36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a38:	f7fd fdae 	bl	8000598 <__aeabi_f2d>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4620      	mov	r0, r4
 8002a42:	4629      	mov	r1, r5
 8002a44:	f7fd ff2a 	bl	800089c <__aeabi_ddiv>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f7fe f8f2 	bl	8000c38 <__aeabi_d2f>
 8002a54:	4603      	mov	r3, r0
 8002a56:	673b      	str	r3, [r7, #112]	@ 0x70
	f_jerkAccAccAngle	= 1.0 / 6.0 * f_jerkAngle * f_jerkAngleTime * f_jerkAngleTime * f_jerkAngleTime + 0.0 * f_jerkAngleTime;
 8002a58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a5a:	f7fd fd9d 	bl	8000598 <__aeabi_f2d>
 8002a5e:	a3bc      	add	r3, pc, #752	@ (adr r3, 8002d50 <PARAM_makeSra+0x518>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f7fd fdf0 	bl	8000648 <__aeabi_dmul>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4614      	mov	r4, r2
 8002a6e:	461d      	mov	r5, r3
 8002a70:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002a72:	f7fd fd91 	bl	8000598 <__aeabi_f2d>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	f7fd fde3 	bl	8000648 <__aeabi_dmul>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4614      	mov	r4, r2
 8002a88:	461d      	mov	r5, r3
 8002a8a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002a8c:	f7fd fd84 	bl	8000598 <__aeabi_f2d>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4620      	mov	r0, r4
 8002a96:	4629      	mov	r1, r5
 8002a98:	f7fd fdd6 	bl	8000648 <__aeabi_dmul>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4614      	mov	r4, r2
 8002aa2:	461d      	mov	r5, r3
 8002aa4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002aa6:	f7fd fd77 	bl	8000598 <__aeabi_f2d>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4620      	mov	r0, r4
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	f7fd fdc9 	bl	8000648 <__aeabi_dmul>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4614      	mov	r4, r2
 8002abc:	461d      	mov	r5, r3
 8002abe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002ac0:	f7fd fd6a 	bl	8000598 <__aeabi_f2d>
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	f7fd fdbc 	bl	8000648 <__aeabi_dmul>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	f7fd fc00 	bl	80002dc <__adddf3>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7fe f8a8 	bl	8000c38 <__aeabi_d2f>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
	f_accAngle			= 0.5 * f_angAcc * f_timeAcc * f_timeAcc + f_jerkAngleSpeed * f_timeAcc;	// acc angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
 8002aec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002aee:	f7fd fd53 	bl	8000598 <__aeabi_f2d>
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	4b98      	ldr	r3, [pc, #608]	@ (8002d58 <PARAM_makeSra+0x520>)
 8002af8:	f7fd fda6 	bl	8000648 <__aeabi_dmul>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4614      	mov	r4, r2
 8002b02:	461d      	mov	r5, r3
 8002b04:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002b06:	f7fd fd47 	bl	8000598 <__aeabi_f2d>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4620      	mov	r0, r4
 8002b10:	4629      	mov	r1, r5
 8002b12:	f7fd fd99 	bl	8000648 <__aeabi_dmul>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4614      	mov	r4, r2
 8002b1c:	461d      	mov	r5, r3
 8002b1e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002b20:	f7fd fd3a 	bl	8000598 <__aeabi_f2d>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4620      	mov	r0, r4
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	f7fd fd8c 	bl	8000648 <__aeabi_dmul>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4614      	mov	r4, r2
 8002b36:	461d      	mov	r5, r3
 8002b38:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002b3c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b44:	ee17 0a90 	vmov	r0, s15
 8002b48:	f7fd fd26 	bl	8000598 <__aeabi_f2d>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4620      	mov	r0, r4
 8002b52:	4629      	mov	r1, r5
 8002b54:	f7fd fbc2 	bl	80002dc <__adddf3>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f7fe f86a 	bl	8000c38 <__aeabi_d2f>
 8002b64:	4603      	mov	r3, r0
 8002b66:	66fb      	str	r3, [r7, #108]	@ 0x6c
	f_jerkAccDecAngle	= 1.0 / 6.0 * f_jerkAngle* (-1.0) * f_jerkAngleTime * f_jerkAngleTime * f_jerkAngleTime 
 8002b68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b6a:	f7fd fd15 	bl	8000598 <__aeabi_f2d>
 8002b6e:	a378      	add	r3, pc, #480	@ (adr r3, 8002d50 <PARAM_makeSra+0x518>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f7fd fd68 	bl	8000648 <__aeabi_dmul>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4690      	mov	r8, r2
 8002b7e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8002b82:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002b84:	f7fd fd08 	bl	8000598 <__aeabi_f2d>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4640      	mov	r0, r8
 8002b8e:	4649      	mov	r1, r9
 8002b90:	f7fd fd5a 	bl	8000648 <__aeabi_dmul>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4614      	mov	r4, r2
 8002b9a:	461d      	mov	r5, r3
 8002b9c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002b9e:	f7fd fcfb 	bl	8000598 <__aeabi_f2d>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	4629      	mov	r1, r5
 8002baa:	f7fd fd4d 	bl	8000648 <__aeabi_dmul>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4614      	mov	r4, r2
 8002bb4:	461d      	mov	r5, r3
 8002bb6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002bb8:	f7fd fcee 	bl	8000598 <__aeabi_f2d>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	f7fd fd40 	bl	8000648 <__aeabi_dmul>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4614      	mov	r4, r2
 8002bce:	461d      	mov	r5, r3
							+ (f_maxAngleV-f_jerkAngleSpeed) * f_jerkAngleTime + 1.0/2.0*f_angAcc*f_jerkAngleTime*f_jerkAngleTime;
 8002bd0:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002bd4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002bd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bdc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be4:	ee17 0a90 	vmov	r0, s15
 8002be8:	f7fd fcd6 	bl	8000598 <__aeabi_f2d>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	f7fd fb72 	bl	80002dc <__adddf3>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4690      	mov	r8, r2
 8002bfe:	4699      	mov	r9, r3
 8002c00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c02:	f7fd fcc9 	bl	8000598 <__aeabi_f2d>
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	4b53      	ldr	r3, [pc, #332]	@ (8002d58 <PARAM_makeSra+0x520>)
 8002c0c:	f7fd fd1c 	bl	8000648 <__aeabi_dmul>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4614      	mov	r4, r2
 8002c16:	461d      	mov	r5, r3
 8002c18:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002c1a:	f7fd fcbd 	bl	8000598 <__aeabi_f2d>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4620      	mov	r0, r4
 8002c24:	4629      	mov	r1, r5
 8002c26:	f7fd fd0f 	bl	8000648 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4614      	mov	r4, r2
 8002c30:	461d      	mov	r5, r3
 8002c32:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002c34:	f7fd fcb0 	bl	8000598 <__aeabi_f2d>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	4629      	mov	r1, r5
 8002c40:	f7fd fd02 	bl	8000648 <__aeabi_dmul>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4640      	mov	r0, r8
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	f7fd fb46 	bl	80002dc <__adddf3>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
	f_jerkAccDecAngle	= 1.0 / 6.0 * f_jerkAngle* (-1.0) * f_jerkAngleTime * f_jerkAngleTime * f_jerkAngleTime 
 8002c54:	4610      	mov	r0, r2
 8002c56:	4619      	mov	r1, r3
 8002c58:	f7fd ffee 	bl	8000c38 <__aeabi_d2f>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
//	f_constAngle		= f_final_ang - (f_jerkAccAccAngle+f_accAngle+f_jerkAccDecAngle)* 2.0;				// const angle[rad] (theta[rad] = Totalangle - (acc angle + dec angle) )
//	f_timeConst			= f_constAngle / f_maxAngleV;				// max angle speed time[s]( t[s] = theta[rad] / omega[rad/s] )
	f_jerkDecDecAngle	= 1.0 / 6.0 * f_jerkAngle* (-1.0) * f_jerkAngleTime * f_jerkAngleTime * f_jerkAngleTime + f_maxAngleV * f_jerkAngleTime ;
 8002c60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c62:	f7fd fc99 	bl	8000598 <__aeabi_f2d>
 8002c66:	a33a      	add	r3, pc, #232	@ (adr r3, 8002d50 <PARAM_makeSra+0x518>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f7fd fcec 	bl	8000648 <__aeabi_dmul>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4692      	mov	sl, r2
 8002c76:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8002c7a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002c7c:	f7fd fc8c 	bl	8000598 <__aeabi_f2d>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4650      	mov	r0, sl
 8002c86:	4659      	mov	r1, fp
 8002c88:	f7fd fcde 	bl	8000648 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4614      	mov	r4, r2
 8002c92:	461d      	mov	r5, r3
 8002c94:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002c96:	f7fd fc7f 	bl	8000598 <__aeabi_f2d>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	f7fd fcd1 	bl	8000648 <__aeabi_dmul>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4614      	mov	r4, r2
 8002cac:	461d      	mov	r5, r3
 8002cae:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002cb0:	f7fd fc72 	bl	8000598 <__aeabi_f2d>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4620      	mov	r0, r4
 8002cba:	4629      	mov	r1, r5
 8002cbc:	f7fd fcc4 	bl	8000648 <__aeabi_dmul>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4614      	mov	r4, r2
 8002cc6:	461d      	mov	r5, r3
 8002cc8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002ccc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd4:	ee17 0a90 	vmov	r0, s15
 8002cd8:	f7fd fc5e 	bl	8000598 <__aeabi_f2d>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	f7fd fafa 	bl	80002dc <__adddf3>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4610      	mov	r0, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	f7fd ffa2 	bl	8000c38 <__aeabi_d2f>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	647b      	str	r3, [r7, #68]	@ 0x44
	f_DecConstAngle		= 0.5 * f_angAcc*(-1.0) * f_timeAcc * f_timeAcc + (f_maxAngleV-f_jerkAngleSpeed) * f_timeAcc;
 8002cf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cfa:	f7fd fc4d 	bl	8000598 <__aeabi_f2d>
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	4b15      	ldr	r3, [pc, #84]	@ (8002d58 <PARAM_makeSra+0x520>)
 8002d04:	f7fd fca0 	bl	8000648 <__aeabi_dmul>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	61ba      	str	r2, [r7, #24]
 8002d0e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002d16:	f7fd fc3f 	bl	8000598 <__aeabi_f2d>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d22:	f7fd fc91 	bl	8000648 <__aeabi_dmul>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4614      	mov	r4, r2
 8002d2c:	461d      	mov	r5, r3
 8002d2e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002d30:	f7fd fc32 	bl	8000598 <__aeabi_f2d>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4620      	mov	r0, r4
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	f7fd fc84 	bl	8000648 <__aeabi_dmul>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4614      	mov	r4, r2
 8002d46:	461d      	mov	r5, r3
 8002d48:	e008      	b.n	8002d5c <PARAM_makeSra+0x524>
 8002d4a:	bf00      	nop
 8002d4c:	f3af 8000 	nop.w
 8002d50:	55555555 	.word	0x55555555
 8002d54:	3fc55555 	.word	0x3fc55555
 8002d58:	3fe00000 	.word	0x3fe00000
 8002d5c:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002d60:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002d64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d68:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d70:	ee17 0a90 	vmov	r0, s15
 8002d74:	f7fd fc10 	bl	8000598 <__aeabi_f2d>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	4629      	mov	r1, r5
 8002d80:	f7fd faac 	bl	80002dc <__adddf3>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f7fd ff54 	bl	8000c38 <__aeabi_d2f>
 8002d90:	4603      	mov	r3, r0
 8002d92:	643b      	str	r3, [r7, #64]	@ 0x40
	f_jerkDecAccAngle	= 1.0 / 6.0 * f_jerkAngle * f_jerkAngleTime * f_jerkAngleTime * f_jerkAngleTime + f_jerkAngleSpeed * f_jerkAngleTime 
 8002d94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d96:	f7fd fbff 	bl	8000598 <__aeabi_f2d>
 8002d9a:	a3df      	add	r3, pc, #892	@ (adr r3, 8003118 <PARAM_makeSra+0x8e0>)
 8002d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da0:	f7fd fc52 	bl	8000648 <__aeabi_dmul>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4614      	mov	r4, r2
 8002daa:	461d      	mov	r5, r3
 8002dac:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002dae:	f7fd fbf3 	bl	8000598 <__aeabi_f2d>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4620      	mov	r0, r4
 8002db8:	4629      	mov	r1, r5
 8002dba:	f7fd fc45 	bl	8000648 <__aeabi_dmul>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4614      	mov	r4, r2
 8002dc4:	461d      	mov	r5, r3
 8002dc6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002dc8:	f7fd fbe6 	bl	8000598 <__aeabi_f2d>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	f7fd fc38 	bl	8000648 <__aeabi_dmul>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4614      	mov	r4, r2
 8002dde:	461d      	mov	r5, r3
 8002de0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002de2:	f7fd fbd9 	bl	8000598 <__aeabi_f2d>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4620      	mov	r0, r4
 8002dec:	4629      	mov	r1, r5
 8002dee:	f7fd fc2b 	bl	8000648 <__aeabi_dmul>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4614      	mov	r4, r2
 8002df8:	461d      	mov	r5, r3
 8002dfa:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002dfe:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e06:	ee17 0a90 	vmov	r0, s15
 8002e0a:	f7fd fbc5 	bl	8000598 <__aeabi_f2d>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4620      	mov	r0, r4
 8002e14:	4629      	mov	r1, r5
 8002e16:	f7fd fa61 	bl	80002dc <__adddf3>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4614      	mov	r4, r2
 8002e20:	461d      	mov	r5, r3
							+ 1.0/2.0*f_angAcc*(-1.0)*f_jerkAngleTime*f_jerkAngleTime;
 8002e22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e24:	f7fd fbb8 	bl	8000598 <__aeabi_f2d>
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	4bbc      	ldr	r3, [pc, #752]	@ (8003120 <PARAM_makeSra+0x8e8>)
 8002e2e:	f7fd fc0b 	bl	8000648 <__aeabi_dmul>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	613a      	str	r2, [r7, #16]
 8002e38:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002e40:	f7fd fbaa 	bl	8000598 <__aeabi_f2d>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e4c:	f7fd fbfc 	bl	8000648 <__aeabi_dmul>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4690      	mov	r8, r2
 8002e56:	4699      	mov	r9, r3
 8002e58:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002e5a:	f7fd fb9d 	bl	8000598 <__aeabi_f2d>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4640      	mov	r0, r8
 8002e64:	4649      	mov	r1, r9
 8002e66:	f7fd fbef 	bl	8000648 <__aeabi_dmul>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4620      	mov	r0, r4
 8002e70:	4629      	mov	r1, r5
 8002e72:	f7fd fa33 	bl	80002dc <__adddf3>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
	f_jerkDecAccAngle	= 1.0 / 6.0 * f_jerkAngle * f_jerkAngleTime * f_jerkAngleTime * f_jerkAngleTime + f_jerkAngleSpeed * f_jerkAngleTime 
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f7fd fedb 	bl	8000c38 <__aeabi_d2f>
 8002e82:	4603      	mov	r3, r0
 8002e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
	f_constAngle		= f_final_ang - (f_jerkAccAccAngle+f_accAngle+f_jerkAccDecAngle +f_jerkDecDecAngle+f_DecConstAngle+f_jerkDecAccAngle) ;				// const angle[rad] (theta[rad] = Totalangle - (acc angle + dec angle) )
 8002e86:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002e8a:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002e8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e92:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002e96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e9a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ea2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002ea6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eaa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb2:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8002eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eba:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	f_timeConst			= f_constAngle / f_maxAngleV;
 8002ebe:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8002ec2:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eca:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

	// -------------------------------- 
	// sla end position 
	// -------------------------------- 
	// start position 
	f_x		= f_start_x;
 8002ece:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ed2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	f_y		= f_start_y;
 8002ed6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002eda:	67fb      	str	r3, [r7, #124]	@ 0x7c

	// jerk ACC acc
	for( i=0; i<(uint16_t)(f_jerkAngleTime*1000); i++ ){
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8002ee2:	e085      	b.n	8002ff0 <PARAM_makeSra+0x7b8>
		f_time	=  0.001f * (float)i;								// time[s]
 8002ee4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002ee8:	ee07 3a90 	vmov	s15, r3
 8002eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef0:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8003128 <PARAM_makeSra+0x8f0>
 8002ef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ef8:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
//		f_ang	=  0.5f * f_angAcc * f_time * f_time;				// angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
		f_ang	= 1.0 / 6.0 * f_jerkAngle * f_time * f_time * f_time;
 8002efc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002efe:	f7fd fb4b 	bl	8000598 <__aeabi_f2d>
 8002f02:	a385      	add	r3, pc, #532	@ (adr r3, 8003118 <PARAM_makeSra+0x8e0>)
 8002f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f08:	f7fd fb9e 	bl	8000648 <__aeabi_dmul>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4614      	mov	r4, r2
 8002f12:	461d      	mov	r5, r3
 8002f14:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002f16:	f7fd fb3f 	bl	8000598 <__aeabi_f2d>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4620      	mov	r0, r4
 8002f20:	4629      	mov	r1, r5
 8002f22:	f7fd fb91 	bl	8000648 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4614      	mov	r4, r2
 8002f2c:	461d      	mov	r5, r3
 8002f2e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002f30:	f7fd fb32 	bl	8000598 <__aeabi_f2d>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4620      	mov	r0, r4
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	f7fd fb84 	bl	8000648 <__aeabi_dmul>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4614      	mov	r4, r2
 8002f46:	461d      	mov	r5, r3
 8002f48:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002f4a:	f7fd fb25 	bl	8000598 <__aeabi_f2d>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4620      	mov	r0, r4
 8002f54:	4629      	mov	r1, r5
 8002f56:	f7fd fb77 	bl	8000648 <__aeabi_dmul>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4610      	mov	r0, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	f7fd fe69 	bl	8000c38 <__aeabi_d2f>
 8002f66:	4603      	mov	r3, r0
 8002f68:	663b      	str	r3, [r7, #96]	@ 0x60
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;			// Xposition[m]
 8002f6a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002f6c:	f7fd fb14 	bl	8000598 <__aeabi_f2d>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	ec43 2b10 	vmov	d0, r2, r3
 8002f78:	f018 fe32 	bl	801bbe0 <sin>
 8002f7c:	ec53 2b10 	vmov	r2, r3, d0
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	f7fd fe58 	bl	8000c38 <__aeabi_d2f>
 8002f88:	ee07 0a10 	vmov	s14, r0
 8002f8c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f94:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8003128 <PARAM_makeSra+0x8f0>
 8002f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f9c:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa4:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;			// Yposition[m]
 8002fa8:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002faa:	f7fd faf5 	bl	8000598 <__aeabi_f2d>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	ec43 2b10 	vmov	d0, r2, r3
 8002fb6:	f018 fdbf 	bl	801bb38 <cos>
 8002fba:	ec53 2b10 	vmov	r2, r3, d0
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f7fd fe39 	bl	8000c38 <__aeabi_d2f>
 8002fc6:	ee07 0a10 	vmov	s14, r0
 8002fca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003128 <PARAM_makeSra+0x8f0>
 8002fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fda:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8002fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe2:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	for( i=0; i<(uint16_t)(f_jerkAngleTime*1000); i++ ){
 8002fe6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002fea:	3301      	adds	r3, #1
 8002fec:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8002ff0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002ff4:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003124 <PARAM_makeSra+0x8ec>
 8002ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003000:	ee17 3a90 	vmov	r3, s15
 8003004:	b29b      	uxth	r3, r3
 8003006:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 800300a:	429a      	cmp	r2, r3
 800300c:	f4ff af6a 	bcc.w	8002ee4 <PARAM_makeSra+0x6ac>
	}
	// ACC 
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 8003010:	2300      	movs	r3, #0
 8003012:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8003016:	e06a      	b.n	80030ee <PARAM_makeSra+0x8b6>
	
		f_time	=  0.001f * (float)i;								// time[s]
 8003018:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800301c:	ee07 3a90 	vmov	s15, r3
 8003020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003024:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8003128 <PARAM_makeSra+0x8f0>
 8003028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800302c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		f_ang	= f_jerkAccAccAngle + 0.5f * f_angAcc * f_time * f_time+ f_jerkAngleSpeed*f_time;				// angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
 8003030:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003034:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003038:	ee27 7a87 	vmul.f32	s14, s15, s14
 800303c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003044:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800304c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003054:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8003058:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800305c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003064:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;			// Xposition[m]
 8003068:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800306a:	f7fd fa95 	bl	8000598 <__aeabi_f2d>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	ec43 2b10 	vmov	d0, r2, r3
 8003076:	f018 fdb3 	bl	801bbe0 <sin>
 800307a:	ec53 2b10 	vmov	r2, r3, d0
 800307e:	4610      	mov	r0, r2
 8003080:	4619      	mov	r1, r3
 8003082:	f7fd fdd9 	bl	8000c38 <__aeabi_d2f>
 8003086:	ee07 0a10 	vmov	s14, r0
 800308a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800308e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003092:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8003128 <PARAM_makeSra+0x8f0>
 8003096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800309a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800309e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a2:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;			// Yposition[m]
 80030a6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80030a8:	f7fd fa76 	bl	8000598 <__aeabi_f2d>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	ec43 2b10 	vmov	d0, r2, r3
 80030b4:	f018 fd40 	bl	801bb38 <cos>
 80030b8:	ec53 2b10 	vmov	r2, r3, d0
 80030bc:	4610      	mov	r0, r2
 80030be:	4619      	mov	r1, r3
 80030c0:	f7fd fdba 	bl	8000c38 <__aeabi_d2f>
 80030c4:	ee07 0a10 	vmov	s14, r0
 80030c8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80030cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d0:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003128 <PARAM_makeSra+0x8f0>
 80030d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d8:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80030dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e0:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 80030e4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80030e8:	3301      	adds	r3, #1
 80030ea:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80030ee:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80030f2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003124 <PARAM_makeSra+0x8ec>
 80030f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030fe:	ee17 3a90 	vmov	r3, s15
 8003102:	b29b      	uxth	r3, r3
 8003104:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8003108:	429a      	cmp	r2, r3
 800310a:	d385      	bcc.n	8003018 <PARAM_makeSra+0x7e0>
	}
	//jerk ACC dec
	for( i=0; i<(uint16_t)(f_jerkAngleTime*1000); i++ ){
 800310c:	2300      	movs	r3, #0
 800310e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8003112:	e0ea      	b.n	80032ea <PARAM_makeSra+0xab2>
 8003114:	f3af 8000 	nop.w
 8003118:	55555555 	.word	0x55555555
 800311c:	3fc55555 	.word	0x3fc55555
 8003120:	3fe00000 	.word	0x3fe00000
 8003124:	447a0000 	.word	0x447a0000
 8003128:	3a83126f 	.word	0x3a83126f
		f_time	=  0.001f * (float)i;								// time[s]
 800312c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8003130:	ee07 3a90 	vmov	s15, r3
 8003134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003138:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8003128 <PARAM_makeSra+0x8f0>
 800313c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003140:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
//		f_ang	=  0.5f * f_angAcc * f_time * f_time;				// angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
		f_ang	= f_jerkAccAccAngle + f_accAngle + 1.0 / 6.0 * f_jerkAngle * (-1.0) * f_time * f_time * f_time + (f_maxAngleV-f_jerkAngleSpeed) * f_time + 1.0/2.0*f_angAcc*f_time*f_time;
 8003144:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003148:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800314c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003150:	ee17 0a90 	vmov	r0, s15
 8003154:	f7fd fa20 	bl	8000598 <__aeabi_f2d>
 8003158:	4604      	mov	r4, r0
 800315a:	460d      	mov	r5, r1
 800315c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800315e:	f7fd fa1b 	bl	8000598 <__aeabi_f2d>
 8003162:	f20f 4334 	addw	r3, pc, #1076	@ 0x434
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	f7fd fa6d 	bl	8000648 <__aeabi_dmul>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	60ba      	str	r2, [r7, #8]
 8003174:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800317c:	f7fd fa0c 	bl	8000598 <__aeabi_f2d>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003188:	f7fd fa5e 	bl	8000648 <__aeabi_dmul>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4690      	mov	r8, r2
 8003192:	4699      	mov	r9, r3
 8003194:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003196:	f7fd f9ff 	bl	8000598 <__aeabi_f2d>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4640      	mov	r0, r8
 80031a0:	4649      	mov	r1, r9
 80031a2:	f7fd fa51 	bl	8000648 <__aeabi_dmul>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4690      	mov	r8, r2
 80031ac:	4699      	mov	r9, r3
 80031ae:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80031b0:	f7fd f9f2 	bl	8000598 <__aeabi_f2d>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4640      	mov	r0, r8
 80031ba:	4649      	mov	r1, r9
 80031bc:	f7fd fa44 	bl	8000648 <__aeabi_dmul>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4620      	mov	r0, r4
 80031c6:	4629      	mov	r1, r5
 80031c8:	f7fd f888 	bl	80002dc <__adddf3>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4614      	mov	r4, r2
 80031d2:	461d      	mov	r5, r3
 80031d4:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80031d8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80031dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031e0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80031e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e8:	ee17 0a90 	vmov	r0, s15
 80031ec:	f7fd f9d4 	bl	8000598 <__aeabi_f2d>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4620      	mov	r0, r4
 80031f6:	4629      	mov	r1, r5
 80031f8:	f7fd f870 	bl	80002dc <__adddf3>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4614      	mov	r4, r2
 8003202:	461d      	mov	r5, r3
 8003204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003206:	f7fd f9c7 	bl	8000598 <__aeabi_f2d>
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	4be4      	ldr	r3, [pc, #912]	@ (80035a0 <PARAM_makeSra+0xd68>)
 8003210:	f7fd fa1a 	bl	8000648 <__aeabi_dmul>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4690      	mov	r8, r2
 800321a:	4699      	mov	r9, r3
 800321c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800321e:	f7fd f9bb 	bl	8000598 <__aeabi_f2d>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4640      	mov	r0, r8
 8003228:	4649      	mov	r1, r9
 800322a:	f7fd fa0d 	bl	8000648 <__aeabi_dmul>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4690      	mov	r8, r2
 8003234:	4699      	mov	r9, r3
 8003236:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003238:	f7fd f9ae 	bl	8000598 <__aeabi_f2d>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4640      	mov	r0, r8
 8003242:	4649      	mov	r1, r9
 8003244:	f7fd fa00 	bl	8000648 <__aeabi_dmul>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4620      	mov	r0, r4
 800324e:	4629      	mov	r1, r5
 8003250:	f7fd f844 	bl	80002dc <__adddf3>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4610      	mov	r0, r2
 800325a:	4619      	mov	r1, r3
 800325c:	f7fd fcec 	bl	8000c38 <__aeabi_d2f>
 8003260:	4603      	mov	r3, r0
 8003262:	663b      	str	r3, [r7, #96]	@ 0x60
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;			// Xposition[m]
 8003264:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003266:	f7fd f997 	bl	8000598 <__aeabi_f2d>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	ec43 2b10 	vmov	d0, r2, r3
 8003272:	f018 fcb5 	bl	801bbe0 <sin>
 8003276:	ec53 2b10 	vmov	r2, r3, d0
 800327a:	4610      	mov	r0, r2
 800327c:	4619      	mov	r1, r3
 800327e:	f7fd fcdb 	bl	8000c38 <__aeabi_d2f>
 8003282:	ee07 0a10 	vmov	s14, r0
 8003286:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800328a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328e:	ed9f 7ac6 	vldr	s14, [pc, #792]	@ 80035a8 <PARAM_makeSra+0xd70>
 8003292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003296:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800329a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800329e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;			// Yposition[m]
 80032a2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80032a4:	f7fd f978 	bl	8000598 <__aeabi_f2d>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	ec43 2b10 	vmov	d0, r2, r3
 80032b0:	f018 fc42 	bl	801bb38 <cos>
 80032b4:	ec53 2b10 	vmov	r2, r3, d0
 80032b8:	4610      	mov	r0, r2
 80032ba:	4619      	mov	r1, r3
 80032bc:	f7fd fcbc 	bl	8000c38 <__aeabi_d2f>
 80032c0:	ee07 0a10 	vmov	s14, r0
 80032c4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80032c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032cc:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 80035a8 <PARAM_makeSra+0xd70>
 80032d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032d4:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80032d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032dc:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	for( i=0; i<(uint16_t)(f_jerkAngleTime*1000); i++ ){
 80032e0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80032e4:	3301      	adds	r3, #1
 80032e6:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80032ea:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80032ee:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80035a4 <PARAM_makeSra+0xd6c>
 80032f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032fa:	ee17 3a90 	vmov	r3, s15
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8003304:	429a      	cmp	r2, r3
 8003306:	f4ff af11 	bcc.w	800312c <PARAM_makeSra+0x8f4>
	}
	// CONST 
	for( i=0; i<(uint16_t)(f_timeConst*1000); i++ ){				// [msec]
 800330a:	2300      	movs	r3, #0
 800330c:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8003310:	e062      	b.n	80033d8 <PARAM_makeSra+0xba0>
	
		f_time	 = 0.001f * (float)i;							// time[s]
 8003312:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331e:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 80035a8 <PARAM_makeSra+0xd70>
 8003322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003326:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		f_ang	 = f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle + f_maxAngleV * f_time;			// angle[rad] (theta[rad] = omega[rad/s] * t[s] )
 800332a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800332e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003332:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003336:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800333a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800333e:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8003342:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003346:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800334a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;		// Xposition[m]
 8003352:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003354:	f7fd f920 	bl	8000598 <__aeabi_f2d>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	ec43 2b10 	vmov	d0, r2, r3
 8003360:	f018 fc3e 	bl	801bbe0 <sin>
 8003364:	ec53 2b10 	vmov	r2, r3, d0
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	f7fd fc64 	bl	8000c38 <__aeabi_d2f>
 8003370:	ee07 0a10 	vmov	s14, r0
 8003374:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337c:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80035a8 <PARAM_makeSra+0xd70>
 8003380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003384:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800338c:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;		// Yposition[m]
 8003390:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003392:	f7fd f901 	bl	8000598 <__aeabi_f2d>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	ec43 2b10 	vmov	d0, r2, r3
 800339e:	f018 fbcb 	bl	801bb38 <cos>
 80033a2:	ec53 2b10 	vmov	r2, r3, d0
 80033a6:	4610      	mov	r0, r2
 80033a8:	4619      	mov	r1, r3
 80033aa:	f7fd fc45 	bl	8000c38 <__aeabi_d2f>
 80033ae:	ee07 0a10 	vmov	s14, r0
 80033b2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80033b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ba:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 80035a8 <PARAM_makeSra+0xd70>
 80033be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c2:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80033c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ca:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	for( i=0; i<(uint16_t)(f_timeConst*1000); i++ ){				// [msec]
 80033ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80033d2:	3301      	adds	r3, #1
 80033d4:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80033d8:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80033dc:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 80035a4 <PARAM_makeSra+0xd6c>
 80033e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033e8:	ee17 3a90 	vmov	r3, s15
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d38d      	bcc.n	8003312 <PARAM_makeSra+0xada>
	}
	//jerk DEC dec
	for( i=0; i<(uint16_t)(f_jerkAngleTime*1000); i++ ){				// [msec]
 80033f6:	2300      	movs	r3, #0
 80033f8:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80033fc:	e0b5      	b.n	800356a <PARAM_makeSra+0xd32>
	
		f_time	 = 0.001f * (float)i;							// time[s]
 80033fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340a:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80035a8 <PARAM_makeSra+0xd70>
 800340e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003412:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		f_ang	 = f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle  + f_constAngle + 1.0 / 6.0 * f_jerkAngle*(-1.0) * f_time * f_time * f_time + f_maxAngleV * f_time;			// angle[rad] (theta[rad] = omega[rad/s] * t[s] )
 8003416:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800341a:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800341e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003422:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003426:	ee37 7a27 	vadd.f32	s14, s14, s15
 800342a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800342e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003432:	ee17 0a90 	vmov	r0, s15
 8003436:	f7fd f8af 	bl	8000598 <__aeabi_f2d>
 800343a:	4604      	mov	r4, r0
 800343c:	460d      	mov	r5, r1
 800343e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003440:	f7fd f8aa 	bl	8000598 <__aeabi_f2d>
 8003444:	a354      	add	r3, pc, #336	@ (adr r3, 8003598 <PARAM_makeSra+0xd60>)
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	f7fd f8fd 	bl	8000648 <__aeabi_dmul>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	603a      	str	r2, [r7, #0]
 8003454:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800345c:	f7fd f89c 	bl	8000598 <__aeabi_f2d>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003468:	f7fd f8ee 	bl	8000648 <__aeabi_dmul>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4690      	mov	r8, r2
 8003472:	4699      	mov	r9, r3
 8003474:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003476:	f7fd f88f 	bl	8000598 <__aeabi_f2d>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4640      	mov	r0, r8
 8003480:	4649      	mov	r1, r9
 8003482:	f7fd f8e1 	bl	8000648 <__aeabi_dmul>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4690      	mov	r8, r2
 800348c:	4699      	mov	r9, r3
 800348e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003490:	f7fd f882 	bl	8000598 <__aeabi_f2d>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4640      	mov	r0, r8
 800349a:	4649      	mov	r1, r9
 800349c:	f7fd f8d4 	bl	8000648 <__aeabi_dmul>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4620      	mov	r0, r4
 80034a6:	4629      	mov	r1, r5
 80034a8:	f7fc ff18 	bl	80002dc <__adddf3>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4614      	mov	r4, r2
 80034b2:	461d      	mov	r5, r3
 80034b4:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80034b8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80034bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c0:	ee17 0a90 	vmov	r0, s15
 80034c4:	f7fd f868 	bl	8000598 <__aeabi_f2d>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4620      	mov	r0, r4
 80034ce:	4629      	mov	r1, r5
 80034d0:	f7fc ff04 	bl	80002dc <__adddf3>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	f7fd fbac 	bl	8000c38 <__aeabi_d2f>
 80034e0:	4603      	mov	r3, r0
 80034e2:	663b      	str	r3, [r7, #96]	@ 0x60
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;		// Xposition[m]
 80034e4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80034e6:	f7fd f857 	bl	8000598 <__aeabi_f2d>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	ec43 2b10 	vmov	d0, r2, r3
 80034f2:	f018 fb75 	bl	801bbe0 <sin>
 80034f6:	ec53 2b10 	vmov	r2, r3, d0
 80034fa:	4610      	mov	r0, r2
 80034fc:	4619      	mov	r1, r3
 80034fe:	f7fd fb9b 	bl	8000c38 <__aeabi_d2f>
 8003502:	ee07 0a10 	vmov	s14, r0
 8003506:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800350a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80035a8 <PARAM_makeSra+0xd70>
 8003512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003516:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800351a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800351e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;		// Yposition[m]
 8003522:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003524:	f7fd f838 	bl	8000598 <__aeabi_f2d>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	ec43 2b10 	vmov	d0, r2, r3
 8003530:	f018 fb02 	bl	801bb38 <cos>
 8003534:	ec53 2b10 	vmov	r2, r3, d0
 8003538:	4610      	mov	r0, r2
 800353a:	4619      	mov	r1, r3
 800353c:	f7fd fb7c 	bl	8000c38 <__aeabi_d2f>
 8003540:	ee07 0a10 	vmov	s14, r0
 8003544:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80035a8 <PARAM_makeSra+0xd70>
 8003550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003554:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8003558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800355c:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	for( i=0; i<(uint16_t)(f_jerkAngleTime*1000); i++ ){				// [msec]
 8003560:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8003564:	3301      	adds	r3, #1
 8003566:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 800356a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800356e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80035a4 <PARAM_makeSra+0xd6c>
 8003572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800357a:	ee17 3a90 	vmov	r3, s15
 800357e:	b29b      	uxth	r3, r3
 8003580:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8003584:	429a      	cmp	r2, r3
 8003586:	f4ff af3a 	bcc.w	80033fe <PARAM_makeSra+0xbc6>
	}
	// DEC
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 800358a:	2300      	movs	r3, #0
 800358c:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8003590:	e08b      	b.n	80036aa <PARAM_makeSra+0xe72>
 8003592:	bf00      	nop
 8003594:	f3af 8000 	nop.w
 8003598:	55555555 	.word	0x55555555
 800359c:	3fc55555 	.word	0x3fc55555
 80035a0:	3fe00000 	.word	0x3fe00000
 80035a4:	447a0000 	.word	0x447a0000
 80035a8:	3a83126f 	.word	0x3a83126f
	
		f_time	 = 0.001f * (float)i;							// time[s]
 80035ac:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80035b0:	ee07 3a90 	vmov	s15, r3
 80035b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b8:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 80035a8 <PARAM_makeSra+0xd70>
 80035bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035c0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		f_ang	 = f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle + f_constAngle + f_jerkDecDecAngle + 0.5f * f_angAcc * f_time * f_time + (f_maxAngleV-f_jerkAngleSpeed) * f_time;	// angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
 80035c4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80035c8:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80035cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035d0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80035d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035d8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80035dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035e0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80035e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035e8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80035ec:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80035f0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80035f4:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80035f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035fc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003604:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003608:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 800360c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003610:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003614:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800361c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003620:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;		// Xposition[m]
 8003624:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003626:	f7fc ffb7 	bl	8000598 <__aeabi_f2d>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	ec43 2b10 	vmov	d0, r2, r3
 8003632:	f018 fad5 	bl	801bbe0 <sin>
 8003636:	ec53 2b10 	vmov	r2, r3, d0
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	f7fd fafb 	bl	8000c38 <__aeabi_d2f>
 8003642:	ee07 0a10 	vmov	s14, r0
 8003646:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800364a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364e:	ed1f 7a2a 	vldr	s14, [pc, #-168]	@ 80035a8 <PARAM_makeSra+0xd70>
 8003652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003656:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800365a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800365e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;		// Yposition[m]
 8003662:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003664:	f7fc ff98 	bl	8000598 <__aeabi_f2d>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	ec43 2b10 	vmov	d0, r2, r3
 8003670:	f018 fa62 	bl	801bb38 <cos>
 8003674:	ec53 2b10 	vmov	r2, r3, d0
 8003678:	4610      	mov	r0, r2
 800367a:	4619      	mov	r1, r3
 800367c:	f7fd fadc 	bl	8000c38 <__aeabi_d2f>
 8003680:	ee07 0a10 	vmov	s14, r0
 8003684:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368c:	ed1f 7a3a 	vldr	s14, [pc, #-232]	@ 80035a8 <PARAM_makeSra+0xd70>
 8003690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003694:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8003698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800369c:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 80036a0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80036a4:	3301      	adds	r3, #1
 80036a6:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80036aa:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80036ae:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80035a4 <PARAM_makeSra+0xd6c>
 80036b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ba:	ee17 3a90 	vmov	r3, s15
 80036be:	b29b      	uxth	r3, r3
 80036c0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80036c4:	429a      	cmp	r2, r3
 80036c6:	f4ff af71 	bcc.w	80035ac <PARAM_makeSra+0xd74>
	}
	//jerk DEC acc
	for( i=0; i<(uint16_t)(f_jerkAngleTime*1000); i++ ){				// [msec]
 80036ca:	2300      	movs	r3, #0
 80036cc:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80036d0:	e109      	b.n	80038e6 <PARAM_makeSra+0x10ae>
	
		f_time	 = 0.001f * (float)i;							// time[s]
 80036d2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036de:	ed1f 7a4e 	vldr	s14, [pc, #-312]	@ 80035a8 <PARAM_makeSra+0xd70>
 80036e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036e6:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		f_ang	 = f_jerkAccAccAngle + f_accAngle*2.0 + f_jerkAccDecAngle + f_constAngle + f_jerkDecDecAngle + 1.0 / 6.0 * f_jerkAngle * f_time * f_time * f_time + f_jerkAngleSpeed * f_time + 1.0/2.0*(-1.0)*f_angAcc*f_time*f_time;			// angle[rad] (theta[rad] = omega[rad/s] * t[s] )
 80036ea:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80036ec:	f7fc ff54 	bl	8000598 <__aeabi_f2d>
 80036f0:	4604      	mov	r4, r0
 80036f2:	460d      	mov	r5, r1
 80036f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80036f6:	f7fc ff4f 	bl	8000598 <__aeabi_f2d>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	f7fc fded 	bl	80002dc <__adddf3>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4620      	mov	r0, r4
 8003708:	4629      	mov	r1, r5
 800370a:	f7fc fde7 	bl	80002dc <__adddf3>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4614      	mov	r4, r2
 8003714:	461d      	mov	r5, r3
 8003716:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003718:	f7fc ff3e 	bl	8000598 <__aeabi_f2d>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4620      	mov	r0, r4
 8003722:	4629      	mov	r1, r5
 8003724:	f7fc fdda 	bl	80002dc <__adddf3>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4614      	mov	r4, r2
 800372e:	461d      	mov	r5, r3
 8003730:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003732:	f7fc ff31 	bl	8000598 <__aeabi_f2d>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4620      	mov	r0, r4
 800373c:	4629      	mov	r1, r5
 800373e:	f7fc fdcd 	bl	80002dc <__adddf3>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4614      	mov	r4, r2
 8003748:	461d      	mov	r5, r3
 800374a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800374c:	f7fc ff24 	bl	8000598 <__aeabi_f2d>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4620      	mov	r0, r4
 8003756:	4629      	mov	r1, r5
 8003758:	f7fc fdc0 	bl	80002dc <__adddf3>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4614      	mov	r4, r2
 8003762:	461d      	mov	r5, r3
 8003764:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003766:	f7fc ff17 	bl	8000598 <__aeabi_f2d>
 800376a:	f20f 4348 	addw	r3, pc, #1096	@ 0x448
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f7fc ff69 	bl	8000648 <__aeabi_dmul>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4690      	mov	r8, r2
 800377c:	4699      	mov	r9, r3
 800377e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003780:	f7fc ff0a 	bl	8000598 <__aeabi_f2d>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4640      	mov	r0, r8
 800378a:	4649      	mov	r1, r9
 800378c:	f7fc ff5c 	bl	8000648 <__aeabi_dmul>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4690      	mov	r8, r2
 8003796:	4699      	mov	r9, r3
 8003798:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800379a:	f7fc fefd 	bl	8000598 <__aeabi_f2d>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4640      	mov	r0, r8
 80037a4:	4649      	mov	r1, r9
 80037a6:	f7fc ff4f 	bl	8000648 <__aeabi_dmul>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4690      	mov	r8, r2
 80037b0:	4699      	mov	r9, r3
 80037b2:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80037b4:	f7fc fef0 	bl	8000598 <__aeabi_f2d>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4640      	mov	r0, r8
 80037be:	4649      	mov	r1, r9
 80037c0:	f7fc ff42 	bl	8000648 <__aeabi_dmul>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4620      	mov	r0, r4
 80037ca:	4629      	mov	r1, r5
 80037cc:	f7fc fd86 	bl	80002dc <__adddf3>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4614      	mov	r4, r2
 80037d6:	461d      	mov	r5, r3
 80037d8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80037dc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80037e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e4:	ee17 0a90 	vmov	r0, s15
 80037e8:	f7fc fed6 	bl	8000598 <__aeabi_f2d>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4620      	mov	r0, r4
 80037f2:	4629      	mov	r1, r5
 80037f4:	f7fc fd72 	bl	80002dc <__adddf3>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4614      	mov	r4, r2
 80037fe:	461d      	mov	r5, r3
 8003800:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003802:	f7fc fec9 	bl	8000598 <__aeabi_f2d>
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	4bd1      	ldr	r3, [pc, #836]	@ (8003b50 <PARAM_makeSra+0x1318>)
 800380c:	f7fc ff1c 	bl	8000648 <__aeabi_dmul>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4690      	mov	r8, r2
 8003816:	4699      	mov	r9, r3
 8003818:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800381a:	f7fc febd 	bl	8000598 <__aeabi_f2d>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4640      	mov	r0, r8
 8003824:	4649      	mov	r1, r9
 8003826:	f7fc ff0f 	bl	8000648 <__aeabi_dmul>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4690      	mov	r8, r2
 8003830:	4699      	mov	r9, r3
 8003832:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003834:	f7fc feb0 	bl	8000598 <__aeabi_f2d>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4640      	mov	r0, r8
 800383e:	4649      	mov	r1, r9
 8003840:	f7fc ff02 	bl	8000648 <__aeabi_dmul>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4620      	mov	r0, r4
 800384a:	4629      	mov	r1, r5
 800384c:	f7fc fd46 	bl	80002dc <__adddf3>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4610      	mov	r0, r2
 8003856:	4619      	mov	r1, r3
 8003858:	f7fd f9ee 	bl	8000c38 <__aeabi_d2f>
 800385c:	4603      	mov	r3, r0
 800385e:	663b      	str	r3, [r7, #96]	@ 0x60
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;		// Xposition[m]
 8003860:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003862:	f7fc fe99 	bl	8000598 <__aeabi_f2d>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	ec43 2b10 	vmov	d0, r2, r3
 800386e:	f018 f9b7 	bl	801bbe0 <sin>
 8003872:	ec53 2b10 	vmov	r2, r3, d0
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	f7fd f9dd 	bl	8000c38 <__aeabi_d2f>
 800387e:	ee07 0a10 	vmov	s14, r0
 8003882:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388a:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8003b54 <PARAM_makeSra+0x131c>
 800388e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003892:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800389a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;		// Yposition[m]
 800389e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80038a0:	f7fc fe7a 	bl	8000598 <__aeabi_f2d>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	ec43 2b10 	vmov	d0, r2, r3
 80038ac:	f018 f944 	bl	801bb38 <cos>
 80038b0:	ec53 2b10 	vmov	r2, r3, d0
 80038b4:	4610      	mov	r0, r2
 80038b6:	4619      	mov	r1, r3
 80038b8:	f7fd f9be 	bl	8000c38 <__aeabi_d2f>
 80038bc:	ee07 0a10 	vmov	s14, r0
 80038c0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80038c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c8:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8003b54 <PARAM_makeSra+0x131c>
 80038cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038d0:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80038d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038d8:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	for( i=0; i<(uint16_t)(f_jerkAngleTime*1000); i++ ){				// [msec]
 80038dc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80038e0:	3301      	adds	r3, #1
 80038e2:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80038e6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80038ea:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8003b58 <PARAM_makeSra+0x1320>
 80038ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038f6:	ee17 3a90 	vmov	r3, s15
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8003900:	429a      	cmp	r2, r3
 8003902:	f4ff aee6 	bcc.w	80036d2 <PARAM_makeSra+0xe9a>
	}

	// ---------------------------- 
	//  sla parameter  
	// ---------------------------- 
	p_adr->f_sla_speed				= f_speed;
 8003906:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003908:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800390a:	601a      	str	r2, [r3, #0]
	printf("enter speed %5.2f\n\r",f_speed);
 800390c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800390e:	f7fc fe43 	bl	8000598 <__aeabi_f2d>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4891      	ldr	r0, [pc, #580]	@ (8003b5c <PARAM_makeSra+0x1324>)
 8003918:	f01a f99c 	bl	801dc54 <iprintf>
	p_adr->f_sla_angJerk			= f_jerkAngle;
 800391c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800391e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003920:	605a      	str	r2, [r3, #4]
	printf("f_jerkAngle %5.2f\n\r",f_jerkAngle);
 8003922:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003924:	f7fc fe38 	bl	8000598 <__aeabi_f2d>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	488c      	ldr	r0, [pc, #560]	@ (8003b60 <PARAM_makeSra+0x1328>)
 800392e:	f01a f991 	bl	801dc54 <iprintf>
	p_adr->f_sla_angAcc				= f_angAcc;// * RAD_TO_DEG ;
 8003932:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003936:	609a      	str	r2, [r3, #8]
	printf("f_angAcc %5.2f\n\r", f_angAcc);
 8003938:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800393a:	f7fc fe2d 	bl	8000598 <__aeabi_f2d>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4888      	ldr	r0, [pc, #544]	@ (8003b64 <PARAM_makeSra+0x132c>)
 8003944:	f01a f986 	bl	801dc54 <iprintf>
	p_adr->f_sla_angvel				= f_maxAngleV;// * RAD_TO_DEG;
 8003948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800394a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800394c:	60da      	str	r2, [r3, #12]
	printf("f_maxAngleV %5.2f\n\r",f_maxAngleV);
 800394e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8003950:	f7fc fe22 	bl	8000598 <__aeabi_f2d>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4883      	ldr	r0, [pc, #524]	@ (8003b68 <PARAM_makeSra+0x1330>)
 800395a:	f01a f97b 	bl	801dc54 <iprintf>
	p_adr->f_sla_ang_Total			= f_final_ang;// * RAD_TO_DEG;
 800395e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003960:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44
	printf("f_final_ang %5.2f\n\r",f_final_ang);
 8003966:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800396a:	f7fc fe15 	bl	8000598 <__aeabi_f2d>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	487e      	ldr	r0, [pc, #504]	@ (8003b6c <PARAM_makeSra+0x1334>)
 8003974:	f01a f96e 	bl	801dc54 <iprintf>

	p_adr->f_sla_angS_Jerk			= f_jerkAngleSpeed;
 8003978:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800397a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800397c:	621a      	str	r2, [r3, #32]
	printf("f_jerkAngleSpeed %5.2f\n\r",f_jerkAngleSpeed);
 800397e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003980:	f7fc fe0a 	bl	8000598 <__aeabi_f2d>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4879      	ldr	r0, [pc, #484]	@ (8003b70 <PARAM_makeSra+0x1338>)
 800398a:	f01a f963 	bl	801dc54 <iprintf>

	printf("time\n\r");
 800398e:	4879      	ldr	r0, [pc, #484]	@ (8003b74 <PARAM_makeSra+0x133c>)
 8003990:	f01a f960 	bl	801dc54 <iprintf>
	p_adr->us_sla_jerkAngaccTime	= (uint16_t)( f_jerkAngleTime * 1000.0f );
 8003994:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003998:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8003b58 <PARAM_makeSra+0x1320>
 800399c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039a4:	ee17 3a90 	vmov	r3, s15
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039ac:	831a      	strh	r2, [r3, #24]
	printf("f_jerkAngleTime %7.5f\n\r",(f_jerkAngleTime * 1000.0f));
 80039ae:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80039b2:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8003b58 <PARAM_makeSra+0x1320>
 80039b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039ba:	ee17 0a90 	vmov	r0, s15
 80039be:	f7fc fdeb 	bl	8000598 <__aeabi_f2d>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	486c      	ldr	r0, [pc, #432]	@ (8003b78 <PARAM_makeSra+0x1340>)
 80039c8:	f01a f944 	bl	801dc54 <iprintf>
	p_adr->us_sla_accAngvelTime		= (uint16_t)( f_timeAcc * 1000.0f );
 80039cc:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80039d0:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8003b58 <PARAM_makeSra+0x1320>
 80039d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039dc:	ee17 3a90 	vmov	r3, s15
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039e4:	835a      	strh	r2, [r3, #26]
	printf("f_timeAcc %7.5f\n\r",(f_timeAcc * 1000.0f));
 80039e6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80039ea:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8003b58 <PARAM_makeSra+0x1320>
 80039ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039f2:	ee17 0a90 	vmov	r0, s15
 80039f6:	f7fc fdcf 	bl	8000598 <__aeabi_f2d>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	485f      	ldr	r0, [pc, #380]	@ (8003b7c <PARAM_makeSra+0x1344>)
 8003a00:	f01a f928 	bl	801dc54 <iprintf>
	p_adr->us_sla_constAngvelTime	= (uint16_t)( f_timeConst * 1000.0f );
 8003a04:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003a08:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8003b58 <PARAM_makeSra+0x1320>
 8003a0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a14:	ee17 3a90 	vmov	r3, s15
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a1c:	839a      	strh	r2, [r3, #28]
	printf("f_timeConst %7.5f\n\r",(f_timeConst * 1000.0f));
 8003a1e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003a22:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003b58 <PARAM_makeSra+0x1320>
 8003a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a2a:	ee17 0a90 	vmov	r0, s15
 8003a2e:	f7fc fdb3 	bl	8000598 <__aeabi_f2d>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4852      	ldr	r0, [pc, #328]	@ (8003b80 <PARAM_makeSra+0x1348>)
 8003a38:	f01a f90c 	bl	801dc54 <iprintf>

	printf("angle\n\r");
 8003a3c:	4851      	ldr	r0, [pc, #324]	@ (8003b84 <PARAM_makeSra+0x134c>)
 8003a3e:	f01a f909 	bl	801dc54 <iprintf>
	p_adr->f_sla_ang_AccAccJerk	= f_jerkAccAccAngle;
 8003a42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a46:	625a      	str	r2, [r3, #36]	@ 0x24
	printf("f_jerkAccAccAngle %5.2f\n\r",f_jerkAccAccAngle);
 8003a48:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003a4a:	f7fc fda5 	bl	8000598 <__aeabi_f2d>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	484d      	ldr	r0, [pc, #308]	@ (8003b88 <PARAM_makeSra+0x1350>)
 8003a54:	f01a f8fe 	bl	801dc54 <iprintf>
	p_adr->f_sla_ang_AccConst	= f_accAngle;
 8003a58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a5a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a5c:	629a      	str	r2, [r3, #40]	@ 0x28
	printf("f_accAngle %5.2f\n\r",f_accAngle);
 8003a5e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003a60:	f7fc fd9a 	bl	8000598 <__aeabi_f2d>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4848      	ldr	r0, [pc, #288]	@ (8003b8c <PARAM_makeSra+0x1354>)
 8003a6a:	f01a f8f3 	bl	801dc54 <iprintf>
	p_adr->f_sla_ang_AccDecJerk	= f_jerkAccDecAngle;
 8003a6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a72:	62da      	str	r2, [r3, #44]	@ 0x2c
	printf("f_jerkAccDecAngle %5.2f\n\r",f_jerkAccDecAngle);
 8003a74:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003a76:	f7fc fd8f 	bl	8000598 <__aeabi_f2d>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4844      	ldr	r0, [pc, #272]	@ (8003b90 <PARAM_makeSra+0x1358>)
 8003a80:	f01a f8e8 	bl	801dc54 <iprintf>
	printf("f_constAngle %5.2f\n\r",f_constAngle);
 8003a84:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003a86:	f7fc fd87 	bl	8000598 <__aeabi_f2d>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4841      	ldr	r0, [pc, #260]	@ (8003b94 <PARAM_makeSra+0x135c>)
 8003a90:	f01a f8e0 	bl	801dc54 <iprintf>
	p_adr->f_sla_ang_DecDecJerk	= f_jerkDecDecAngle;
 8003a94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a98:	631a      	str	r2, [r3, #48]	@ 0x30
	printf("f_jerkDecDecAngle %5.2f\n\r",f_jerkDecDecAngle);
 8003a9a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003a9c:	f7fc fd7c 	bl	8000598 <__aeabi_f2d>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	483c      	ldr	r0, [pc, #240]	@ (8003b98 <PARAM_makeSra+0x1360>)
 8003aa6:	f01a f8d5 	bl	801dc54 <iprintf>
	p_adr->f_sla_ang_DecConst	= f_accAngle;
 8003aaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003aae:	635a      	str	r2, [r3, #52]	@ 0x34
	printf("f_accAngle(dec) %5.2f\n\r",f_accAngle);
 8003ab0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003ab2:	f7fc fd71 	bl	8000598 <__aeabi_f2d>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4838      	ldr	r0, [pc, #224]	@ (8003b9c <PARAM_makeSra+0x1364>)
 8003abc:	f01a f8ca 	bl	801dc54 <iprintf>
	p_adr->f_sla_ang_DecAccJerk	= f_jerkDecAccAngle;
 8003ac0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ac2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ac4:	639a      	str	r2, [r3, #56]	@ 0x38
	printf("f_jerkDecAccAngle %5.2f\n\r",f_jerkDecAccAngle);
 8003ac6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003ac8:	f7fc fd66 	bl	8000598 <__aeabi_f2d>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4833      	ldr	r0, [pc, #204]	@ (8003ba0 <PARAM_makeSra+0x1368>)
 8003ad2:	f01a f8bf 	bl	801dc54 <iprintf>

	printf("angleend\n\r");
 8003ad6:	4833      	ldr	r0, [pc, #204]	@ (8003ba4 <PARAM_makeSra+0x136c>)
 8003ad8:	f01a f8bc 	bl	801dc54 <iprintf>
	printf("f_ang_AccJerkEnd %5.2f\n\r",f_jerkAccAccAngle);
 8003adc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003ade:	f7fc fd5b 	bl	8000598 <__aeabi_f2d>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4830      	ldr	r0, [pc, #192]	@ (8003ba8 <PARAM_makeSra+0x1370>)
 8003ae8:	f01a f8b4 	bl	801dc54 <iprintf>
	printf("f_ang_AccConstEnd %5.2f\n\r",f_jerkAccAccAngle + f_accAngle);
 8003aec:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003af0:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af8:	ee17 0a90 	vmov	r0, s15
 8003afc:	f7fc fd4c 	bl	8000598 <__aeabi_f2d>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4829      	ldr	r0, [pc, #164]	@ (8003bac <PARAM_makeSra+0x1374>)
 8003b06:	f01a f8a5 	bl	801dc54 <iprintf>
	p_adr->f_sla_ang_AccEnd	= f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle;
 8003b0a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003b0e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003b12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b16:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b20:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	printf("f_ang_AccEnd %5.2f\n\r",f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle);
 8003b24:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003b28:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b30:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b38:	ee17 0a90 	vmov	r0, s15
 8003b3c:	f7fc fd2c 	bl	8000598 <__aeabi_f2d>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	481a      	ldr	r0, [pc, #104]	@ (8003bb0 <PARAM_makeSra+0x1378>)
 8003b46:	f01a f885 	bl	801dc54 <iprintf>
 8003b4a:	e037      	b.n	8003bbc <PARAM_makeSra+0x1384>
 8003b4c:	f3af 8000 	nop.w
 8003b50:	bfe00000 	.word	0xbfe00000
 8003b54:	3a83126f 	.word	0x3a83126f
 8003b58:	447a0000 	.word	0x447a0000
 8003b5c:	08021838 	.word	0x08021838
 8003b60:	0802184c 	.word	0x0802184c
 8003b64:	08021860 	.word	0x08021860
 8003b68:	08021874 	.word	0x08021874
 8003b6c:	08021888 	.word	0x08021888
 8003b70:	0802189c 	.word	0x0802189c
 8003b74:	080218b8 	.word	0x080218b8
 8003b78:	080218c0 	.word	0x080218c0
 8003b7c:	080218d8 	.word	0x080218d8
 8003b80:	080218ec 	.word	0x080218ec
 8003b84:	08021900 	.word	0x08021900
 8003b88:	08021908 	.word	0x08021908
 8003b8c:	08021924 	.word	0x08021924
 8003b90:	08021938 	.word	0x08021938
 8003b94:	08021954 	.word	0x08021954
 8003b98:	0802196c 	.word	0x0802196c
 8003b9c:	08021988 	.word	0x08021988
 8003ba0:	080219a0 	.word	0x080219a0
 8003ba4:	080219bc 	.word	0x080219bc
 8003ba8:	080219c8 	.word	0x080219c8
 8003bac:	080219e4 	.word	0x080219e4
 8003bb0:	08021a00 	.word	0x08021a00
 8003bb4:	55555555 	.word	0x55555555
 8003bb8:	3fc55555 	.word	0x3fc55555
	p_adr->f_sla_ang_ConstEnd = f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle + f_constAngle;
 8003bbc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003bc0:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bc8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bd0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bda:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	printf("f_ang_ConstEnd %5.2f\n\r",f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle + f_constAngle);
 8003bde:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003be2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003be6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bea:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bf2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bfa:	ee17 0a90 	vmov	r0, s15
 8003bfe:	f7fc fccb 	bl	8000598 <__aeabi_f2d>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4873      	ldr	r0, [pc, #460]	@ (8003dd4 <PARAM_makeSra+0x159c>)
 8003c08:	f01a f824 	bl	801dc54 <iprintf>
	printf("f_ang_DecJerkEnd %5.2f\n\r",f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle + f_constAngle + f_jerkDecDecAngle);
 8003c0c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003c10:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003c14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c18:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003c1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c20:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003c24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c28:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c30:	ee17 0a90 	vmov	r0, s15
 8003c34:	f7fc fcb0 	bl	8000598 <__aeabi_f2d>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4866      	ldr	r0, [pc, #408]	@ (8003dd8 <PARAM_makeSra+0x15a0>)
 8003c3e:	f01a f809 	bl	801dc54 <iprintf>
	printf("f_ang_DecConstEnd %5.2f\n\r",f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle + f_constAngle + f_jerkDecDecAngle + f_accAngle);
 8003c42:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003c46:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003c4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c4e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003c52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c56:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c5e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003c62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c66:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c6e:	ee17 0a90 	vmov	r0, s15
 8003c72:	f7fc fc91 	bl	8000598 <__aeabi_f2d>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4858      	ldr	r0, [pc, #352]	@ (8003ddc <PARAM_makeSra+0x15a4>)
 8003c7c:	f019 ffea 	bl	801dc54 <iprintf>
	printf("total %5.2f\n\r",f_jerkDecDecAngle+f_accAngle+f_jerkDecAccAngle);
 8003c80:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003c84:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c8c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c94:	ee17 0a90 	vmov	r0, s15
 8003c98:	f7fc fc7e 	bl	8000598 <__aeabi_f2d>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	484f      	ldr	r0, [pc, #316]	@ (8003de0 <PARAM_makeSra+0x15a8>)
 8003ca2:	f019 ffd7 	bl	801dc54 <iprintf>

	
	// calaculate enter and exit length 
	switch(en_mode){
 8003ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d86e      	bhi.n	8003d8c <PARAM_makeSra+0x1554>
 8003cae:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb4 <PARAM_makeSra+0x147c>)
 8003cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb4:	08003cc5 	.word	0x08003cc5
 8003cb8:	08003ceb 	.word	0x08003ceb
 8003cbc:	08003d4f 	.word	0x08003d4f
 8003cc0:	08003d29 	.word	0x08003d29
		case SLA_90:
			p_adr->f_sla_escapeLen = f_final_x - f_x ;
 8003cc4:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8003cc8:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cd2:	edc3 7a05 	vstr	s15, [r3, #20]
			p_adr->f_sla_entryLen  = f_final_y - f_y ;
 8003cd6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003cda:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ce2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ce4:	edc3 7a04 	vstr	s15, [r3, #16]
			break;
 8003ce8:	e051      	b.n	8003d8e <PARAM_makeSra+0x1556>

		case SLA_45:
			p_adr->f_sla_escapeLen = 1.4142f * ( f_final_x - f_x );
 8003cea:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8003cee:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cf6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8003de4 <PARAM_makeSra+0x15ac>
 8003cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d00:	edc3 7a05 	vstr	s15, [r3, #20]
			p_adr->f_sla_entryLen  = f_final_y - f_y - ( f_final_x - f_x );
 8003d04:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003d08:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003d0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d10:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8003d14:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003d18:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d22:	edc3 7a04 	vstr	s15, [r3, #16]
			break;
 8003d26:	e032      	b.n	8003d8e <PARAM_makeSra+0x1556>

		case SLA_N90:
			p_adr->f_sla_escapeLen = f_final_x - f_x;
 8003d28:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8003d2c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003d30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d36:	edc3 7a05 	vstr	s15, [r3, #20]
			p_adr->f_sla_entryLen  = f_final_y - f_y;
 8003d3a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003d3e:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d48:	edc3 7a04 	vstr	s15, [r3, #16]
			break;
 8003d4c:	e01f      	b.n	8003d8e <PARAM_makeSra+0x1556>

		case SLA_135:
			p_adr->f_sla_escapeLen = 1.4142f * ( f_final_x - f_x );
 8003d4e:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8003d52:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d5a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003de4 <PARAM_makeSra+0x15ac>
 8003d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d64:	edc3 7a05 	vstr	s15, [r3, #20]
			p_adr->f_sla_entryLen  = f_final_y - f_y + ( f_final_x - f_x );
 8003d68:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003d6c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003d70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d74:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8003d78:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003d7c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d86:	edc3 7a04 	vstr	s15, [r3, #16]
			break;
 8003d8a:	e000      	b.n	8003d8e <PARAM_makeSra+0x1556>

		default:
			break;
 8003d8c:	bf00      	nop
	}
	printf("entry %6.4f\n\r",f_final_x - f_x);
 8003d8e:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8003d92:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d9a:	ee17 0a90 	vmov	r0, s15
 8003d9e:	f7fc fbfb 	bl	8000598 <__aeabi_f2d>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4810      	ldr	r0, [pc, #64]	@ (8003de8 <PARAM_makeSra+0x15b0>)
 8003da8:	f019 ff54 	bl	801dc54 <iprintf>
	printf("escape %6.4f\n\r",f_final_y - f_y);
 8003dac:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003db0:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003db8:	ee17 0a90 	vmov	r0, s15
 8003dbc:	f7fc fbec 	bl	8000598 <__aeabi_f2d>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4809      	ldr	r0, [pc, #36]	@ (8003dec <PARAM_makeSra+0x15b4>)
 8003dc6:	f019 ff45 	bl	801dc54 <iprintf>
}
 8003dca:	bf00      	nop
 8003dcc:	3798      	adds	r7, #152	@ 0x98
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dd4:	08021a18 	.word	0x08021a18
 8003dd8:	08021a30 	.word	0x08021a30
 8003ddc:	08021a4c 	.word	0x08021a4c
 8003de0:	08021a68 	.word	0x08021a68
 8003de4:	3fb50481 	.word	0x3fb50481
 8003de8:	08021a78 	.word	0x08021a78
 8003dec:	08021a88 	.word	0x08021a88

08003df0 <PARAM_getSra>:

stSLA* PARAM_getSra( enSLA_TYPE en_mode )
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	71fb      	strb	r3, [r7, #7]
	return &st_Sla[en_mode];
 8003dfa:	79fa      	ldrb	r2, [r7, #7]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4a03      	ldr	r2, [pc, #12]	@ (8003e14 <PARAM_getSra+0x24>)
 8003e06:	4413      	add	r3, r2
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	20000218 	.word	0x20000218

08003e18 <InitQueue>:
	}
	printf("\n");
}

//キューの初期化
void InitQueue(queue_t* pQueue) {
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
	int i;
	//キューの中身を0埋め
	for (i = 0; i <= SIZE - 1; i++) {
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	e013      	b.n	8003e4e <InitQueue+0x36>
		pQueue->data[i].x =  0 ;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
		pQueue->data[i].y =  0 ;
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	2200      	movs	r2, #0
 8003e3a:	705a      	strb	r2, [r3, #1]
		pQueue->data[i].step =  0 ;
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	2200      	movs	r2, #0
 8003e46:	805a      	strh	r2, [r3, #2]
	for (i = 0; i <= SIZE - 1; i++) {
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e52:	dde8      	ble.n	8003e26 <InitQueue+0xe>
	}
	//初期化
	pQueue->head = 0;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	pQueue->tail = 0;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	pQueue->flag = EMPTY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
//	PrintQueue(pQueue);
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <EnQueue>:


//enqueue関数
void EnQueue(queue_t* pQueue, stPOSITION value) {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
//	Printf("enQ(%d)\n", value);
	//キューがFullの処理
	if (pQueue->flag == FULL) {
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d103      	bne.n	8003e94 <EnQueue+0x1c>
		printf("Full\n");
 8003e8c:	4817      	ldr	r0, [pc, #92]	@ (8003eec <EnQueue+0x74>)
 8003e8e:	f019 ff51 	bl	801dd34 <puts>
		return;
 8003e92:	e028      	b.n	8003ee6 <EnQueue+0x6e>
	}
	//キューがFullでないので、enqueue操作
	pQueue->data[pQueue->tail] = value;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6839      	ldr	r1, [r7, #0]
 8003e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	//リングバッファのため、tailが配列の終端だったら0にする
	if (pQueue->tail == SIZE - 1) {
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003ea8:	2b3f      	cmp	r3, #63	@ 0x3f
 8003eaa:	d104      	bne.n	8003eb6 <EnQueue+0x3e>
		pQueue->tail = 0;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 8003eb4:	e006      	b.n	8003ec4 <EnQueue+0x4c>
		//終端でなければ、tailをインクリメント
	}
	else {
		pQueue->tail++;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	}
	//フラグの更新
	if (pQueue->tail == pQueue->head) {
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d104      	bne.n	8003ede <EnQueue+0x66>
		pQueue->flag = FULL;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8003edc:	e003      	b.n	8003ee6 <EnQueue+0x6e>
	}
	else {
		pQueue->flag = AVAILABLE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	}
//	PrintQueue(pQueue);
}
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	08021a9c 	.word	0x08021a9c

08003ef0 <DeQueue>:

//dequeue関数
stPOSITION DeQueue(queue_t* pQueue) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
//	printf("deQ\n");
	stPOSITION dequeue;
	//キューがEmptyの処理
	if (pQueue->flag == EMPTY) {
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10b      	bne.n	8003f1a <DeQueue+0x2a>
		printf("Empty\n");
 8003f02:	482c      	ldr	r0, [pc, #176]	@ (8003fb4 <DeQueue+0xc4>)
 8003f04:	f019 ff16 	bl	801dd34 <puts>
		dequeue.x = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	723b      	strb	r3, [r7, #8]
		dequeue.y = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	727b      	strb	r3, [r7, #9]
		dequeue.step = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	817b      	strh	r3, [r7, #10]
		return  dequeue ;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e041      	b.n	8003f9e <DeQueue+0xae>
	}
	dequeue = pQueue->data[pQueue->head];
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f26:	60bb      	str	r3, [r7, #8]
	//キューがEmptyでなければ、dequeue操作
	pQueue->data[pQueue->head].x =  0 ;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2100      	movs	r1, #0
 8003f32:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	pQueue->data[pQueue->head].y =  0 ;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	2200      	movs	r2, #0
 8003f44:	705a      	strb	r2, [r3, #1]
	pQueue->data[pQueue->head].step =  0 ;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	2200      	movs	r2, #0
 8003f54:	805a      	strh	r2, [r3, #2]
	//リングバッファのため、headが配列の終端だったら0にする
	if (pQueue->head == SIZE - 1) {
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f5e:	d104      	bne.n	8003f6a <DeQueue+0x7a>
		pQueue->head = 0;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003f68:	e006      	b.n	8003f78 <DeQueue+0x88>
		//終端でなければ、headをインクリメント
	}
	else {
		pQueue->head++;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	}
	//フラグの更新
	if (pQueue->tail == pQueue->head) {
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d104      	bne.n	8003f92 <DeQueue+0xa2>
		pQueue->flag = EMPTY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8003f90:	e003      	b.n	8003f9a <DeQueue+0xaa>
	}
	else {
		pQueue->flag = AVAILABLE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	}
//	PrintQueue(pQueue);

	return dequeue;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	60fb      	str	r3, [r7, #12]
}
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	89ba      	ldrh	r2, [r7, #12]
 8003fa2:	f362 030f 	bfi	r3, r2, #0, #16
 8003fa6:	89fa      	ldrh	r2, [r7, #14]
 8003fa8:	f362 431f 	bfi	r3, r2, #16, #16
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	08021aa4 	.word	0x08021aa4

08003fb8 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ff8 <LL_DMA_EnableChannel+0x40>)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	4413      	add	r3, r2
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4908      	ldr	r1, [pc, #32]	@ (8003ff8 <LL_DMA_EnableChannel+0x40>)
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	440a      	add	r2, r1
 8003fdc:	7812      	ldrb	r2, [r2, #0]
 8003fde:	4611      	mov	r1, r2
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	6013      	str	r3, [r2, #0]
}
 8003fea:	bf00      	nop
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	0802219c 	.word	0x0802219c

08003ffc <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800400a:	4a0c      	ldr	r2, [pc, #48]	@ (800403c <LL_DMA_DisableChannel+0x40>)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	4413      	add	r3, r2
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4908      	ldr	r1, [pc, #32]	@ (800403c <LL_DMA_DisableChannel+0x40>)
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	440a      	add	r2, r1
 8004020:	7812      	ldrb	r2, [r2, #0]
 8004022:	4611      	mov	r1, r2
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	440a      	add	r2, r1
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	6013      	str	r3, [r2, #0]
}
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	0802219c 	.word	0x0802219c

08004040 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004050:	4a0e      	ldr	r2, [pc, #56]	@ (800408c <LL_DMA_SetDataTransferDirection+0x4c>)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4413      	add	r3, r2
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	4413      	add	r3, r2
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004064:	f023 0310 	bic.w	r3, r3, #16
 8004068:	4908      	ldr	r1, [pc, #32]	@ (800408c <LL_DMA_SetDataTransferDirection+0x4c>)
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	440a      	add	r2, r1
 800406e:	7812      	ldrb	r2, [r2, #0]
 8004070:	4611      	mov	r1, r2
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	440a      	add	r2, r1
 8004076:	4611      	mov	r1, r2
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	0802219c 	.word	0x0802219c

08004090 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 80040a0:	4a0d      	ldr	r2, [pc, #52]	@ (80040d8 <LL_DMA_SetMode+0x48>)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4413      	add	r3, r2
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	4413      	add	r3, r2
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f023 0220 	bic.w	r2, r3, #32
 80040b4:	4908      	ldr	r1, [pc, #32]	@ (80040d8 <LL_DMA_SetMode+0x48>)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	440b      	add	r3, r1
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	4619      	mov	r1, r3
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	440b      	add	r3, r1
 80040c2:	4619      	mov	r1, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]
             Mode);
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	0802219c 	.word	0x0802219c

080040dc <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 80040ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004124 <LL_DMA_SetPeriphIncMode+0x48>)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4413      	add	r3, r2
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	4413      	add	r3, r2
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004100:	4908      	ldr	r1, [pc, #32]	@ (8004124 <LL_DMA_SetPeriphIncMode+0x48>)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	440b      	add	r3, r1
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	4619      	mov	r1, r3
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	440b      	add	r3, r1
 800410e:	4619      	mov	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8004116:	bf00      	nop
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	0802219c 	.word	0x0802219c

08004128 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8004138:	4a0d      	ldr	r2, [pc, #52]	@ (8004170 <LL_DMA_SetMemoryIncMode+0x48>)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4413      	add	r3, r2
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	4413      	add	r3, r2
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800414c:	4908      	ldr	r1, [pc, #32]	@ (8004170 <LL_DMA_SetMemoryIncMode+0x48>)
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	440b      	add	r3, r1
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	4619      	mov	r1, r3
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	440b      	add	r3, r1
 800415a:	4619      	mov	r1, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	0802219c 	.word	0x0802219c

08004174 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8004184:	4a0d      	ldr	r2, [pc, #52]	@ (80041bc <LL_DMA_SetPeriphSize+0x48>)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	4413      	add	r3, r2
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	4413      	add	r3, r2
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004198:	4908      	ldr	r1, [pc, #32]	@ (80041bc <LL_DMA_SetPeriphSize+0x48>)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	440b      	add	r3, r1
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	4619      	mov	r1, r3
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	440b      	add	r3, r1
 80041a6:	4619      	mov	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	0802219c 	.word	0x0802219c

080041c0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 80041d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004208 <LL_DMA_SetMemorySize+0x48>)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	4413      	add	r3, r2
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	4413      	add	r3, r2
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041e4:	4908      	ldr	r1, [pc, #32]	@ (8004208 <LL_DMA_SetMemorySize+0x48>)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	440b      	add	r3, r1
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	4619      	mov	r1, r3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	440b      	add	r3, r1
 80041f2:	4619      	mov	r1, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	0802219c 	.word	0x0802219c

0800420c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 800421c:	4a0d      	ldr	r2, [pc, #52]	@ (8004254 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4413      	add	r3, r2
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	4413      	add	r3, r2
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004230:	4908      	ldr	r1, [pc, #32]	@ (8004254 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	440b      	add	r3, r1
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	4619      	mov	r1, r3
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	440b      	add	r3, r1
 800423e:	4619      	mov	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4313      	orrs	r3, r2
 8004244:	600b      	str	r3, [r1, #0]
             Priority);
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	0802219c 	.word	0x0802219c

08004258 <LL_DMA_SetDataLength>:
  *         (*) Not on all G4 devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8004268:	4a0d      	ldr	r2, [pc, #52]	@ (80042a0 <LL_DMA_SetDataLength+0x48>)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4413      	add	r3, r2
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	4413      	add	r3, r2
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	0c1b      	lsrs	r3, r3, #16
 800427a:	041b      	lsls	r3, r3, #16
 800427c:	4908      	ldr	r1, [pc, #32]	@ (80042a0 <LL_DMA_SetDataLength+0x48>)
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	440a      	add	r2, r1
 8004282:	7812      	ldrb	r2, [r2, #0]
 8004284:	4611      	mov	r1, r2
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	440a      	add	r2, r1
 800428a:	4611      	mov	r1, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	4313      	orrs	r3, r2
 8004290:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	0802219c 	.word	0x0802219c

080042a4 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	617b      	str	r3, [r7, #20]

  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	2b10      	cmp	r3, #16
 80042ba:	d114      	bne.n	80042e6 <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, SrcAddress);
 80042bc:	4a17      	ldr	r2, [pc, #92]	@ (800431c <LL_DMA_ConfigAddresses+0x78>)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	4413      	add	r3, r2
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	4413      	add	r3, r2
 80042ca:	461a      	mov	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, DstAddress);
 80042d0:	4a12      	ldr	r2, [pc, #72]	@ (800431c <LL_DMA_ConfigAddresses+0x78>)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4413      	add	r3, r2
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	4413      	add	r3, r2
 80042de:	461a      	mov	r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
  }
}
 80042e4:	e013      	b.n	800430e <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
 80042e6:	4a0d      	ldr	r2, [pc, #52]	@ (800431c <LL_DMA_ConfigAddresses+0x78>)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4413      	add	r3, r2
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	4413      	add	r3, r2
 80042f4:	461a      	mov	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
 80042fa:	4a08      	ldr	r2, [pc, #32]	@ (800431c <LL_DMA_ConfigAddresses+0x78>)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4413      	add	r3, r2
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	4413      	add	r3, r2
 8004308:	461a      	mov	r2, r3
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	60d3      	str	r3, [r2, #12]
}
 800430e:	bf00      	nop
 8004310:	371c      	adds	r7, #28
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	0802219c 	.word	0x0802219c

08004320 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	0a9b      	lsrs	r3, r3, #10
 8004330:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8004334:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004348:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800435e:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	430a      	orrs	r2, r1
 8004366:	601a      	str	r2, [r3, #0]
}
 8004368:	bf00      	nop
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8004382:	4a0c      	ldr	r2, [pc, #48]	@ (80043b4 <LL_DMA_EnableIT_TC+0x40>)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	4413      	add	r3, r2
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4413      	add	r3, r2
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4908      	ldr	r1, [pc, #32]	@ (80043b4 <LL_DMA_EnableIT_TC+0x40>)
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	440a      	add	r2, r1
 8004398:	7812      	ldrb	r2, [r2, #0]
 800439a:	4611      	mov	r1, r2
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	440a      	add	r2, r1
 80043a0:	f043 0302 	orr.w	r3, r3, #2
 80043a4:	6013      	str	r3, [r2, #0]
}
 80043a6:	bf00      	nop
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	0802219c 	.word	0x0802219c

080043b8 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TEIE);
 80043c6:	4a0c      	ldr	r2, [pc, #48]	@ (80043f8 <LL_DMA_EnableIT_TE+0x40>)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	4413      	add	r3, r2
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4908      	ldr	r1, [pc, #32]	@ (80043f8 <LL_DMA_EnableIT_TE+0x40>)
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	440a      	add	r2, r1
 80043dc:	7812      	ldrb	r2, [r2, #0]
 80043de:	4611      	mov	r1, r2
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	440a      	add	r2, r1
 80043e4:	f043 0308 	orr.w	r3, r3, #8
 80043e8:	6013      	str	r3, [r2, #0]
}
 80043ea:	bf00      	nop
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	0802219c 	.word	0x0802219c

080043fc <LL_AHB2_GRP1_EnableClock>:
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004404:	4b08      	ldr	r3, [pc, #32]	@ (8004428 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004408:	4907      	ldr	r1, [pc, #28]	@ (8004428 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4313      	orrs	r3, r2
 800440e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004410:	4b05      	ldr	r3, [pc, #20]	@ (8004428 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004412:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4013      	ands	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800441a:	68fb      	ldr	r3, [r7, #12]
}
 800441c:	bf00      	nop
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	40021000 	.word	0x40021000

0800442c <LL_APB1_GRP1_EnableClock>:
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004434:	4b08      	ldr	r3, [pc, #32]	@ (8004458 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004436:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004438:	4907      	ldr	r1, [pc, #28]	@ (8004458 <LL_APB1_GRP1_EnableClock+0x2c>)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4313      	orrs	r3, r2
 800443e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004440:	4b05      	ldr	r3, [pc, #20]	@ (8004458 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004442:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4013      	ands	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800444a:	68fb      	ldr	r3, [r7, #12]
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	40021000 	.word	0x40021000

0800445c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	601a      	str	r2, [r3, #0]
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448c:	2b40      	cmp	r3, #64	@ 0x40
 800448e:	d101      	bne.n	8004494 <LL_SPI_IsEnabled+0x18>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <LL_SPI_IsEnabled+0x1a>
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f023 0210 	bic.w	r2, r3, #16
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	605a      	str	r2, [r3, #4]
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <LL_SPI_SetRxFIFOThreshold>:
  *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
  *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	605a      	str	r2, [r3, #4]
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f023 0208 	bic.w	r2, r3, #8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	605a      	str	r2, [r3, #4]
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <LL_SPI_EnableDMAReq_RX>:
  * @rmtoll CR2          RXDMAEN       LL_SPI_EnableDMAReq_RX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_RX(SPI_TypeDef *SPIx)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f043 0201 	orr.w	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	605a      	str	r2, [r3, #4]
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <LL_SPI_EnableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_EnableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f043 0202 	orr.w	r2, r3, #2
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	605a      	str	r2, [r3, #4]
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	330c      	adds	r3, #12
}
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	330c      	adds	r3, #12
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	b2db      	uxtb	r3, r3
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <LL_GPIO_SetOutputPin>:
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	619a      	str	r2, [r3, #24]
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <LL_GPIO_ResetOutputPin>:
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b090      	sub	sp, #64	@ 0x40
 80045e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80045e6:	f107 0318 	add.w	r3, r7, #24
 80045ea:	2228      	movs	r2, #40	@ 0x28
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f019 fd5c 	bl	801e0ac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f4:	463b      	mov	r3, r7
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	605a      	str	r2, [r3, #4]
 80045fc:	609a      	str	r2, [r3, #8]
 80045fe:	60da      	str	r2, [r3, #12]
 8004600:	611a      	str	r2, [r3, #16]
 8004602:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8004604:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004608:	f7ff ff10 	bl	800442c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800460c:	2002      	movs	r0, #2
 800460e:	f7ff fef5 	bl	80043fc <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8004612:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004616:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004618:	2302      	movs	r3, #2
 800461a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800461c:	2300      	movs	r3, #0
 800461e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004624:	2300      	movs	r3, #0
 8004626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004628:	2305      	movs	r3, #5
 800462a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800462c:	463b      	mov	r3, r7
 800462e:	4619      	mov	r1, r3
 8004630:	484f      	ldr	r0, [pc, #316]	@ (8004770 <MX_SPI2_Init+0x190>)
 8004632:	f016 f81c 	bl	801a66e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8004636:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800463a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800463c:	2302      	movs	r3, #2
 800463e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004640:	2300      	movs	r3, #0
 8004642:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800464c:	2305      	movs	r3, #5
 800464e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004650:	463b      	mov	r3, r7
 8004652:	4619      	mov	r1, r3
 8004654:	4846      	ldr	r0, [pc, #280]	@ (8004770 <MX_SPI2_Init+0x190>)
 8004656:	f016 f80a 	bl	801a66e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800465a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800465e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004660:	2302      	movs	r3, #2
 8004662:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004664:	2300      	movs	r3, #0
 8004666:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800466c:	2300      	movs	r3, #0
 800466e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004670:	2305      	movs	r3, #5
 8004672:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004674:	463b      	mov	r3, r7
 8004676:	4619      	mov	r1, r3
 8004678:	483d      	ldr	r0, [pc, #244]	@ (8004770 <MX_SPI2_Init+0x190>)
 800467a:	f015 fff8 	bl	801a66e <LL_GPIO_Init>

  /* SPI2 DMA Init */

  /* SPI2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_SPI2_RX);
 800467e:	220c      	movs	r2, #12
 8004680:	2102      	movs	r1, #2
 8004682:	483c      	ldr	r0, [pc, #240]	@ (8004774 <MX_SPI2_Init+0x194>)
 8004684:	f7ff fe4c 	bl	8004320 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8004688:	2200      	movs	r2, #0
 800468a:	2102      	movs	r1, #2
 800468c:	4839      	ldr	r0, [pc, #228]	@ (8004774 <MX_SPI2_Init+0x194>)
 800468e:	f7ff fcd7 	bl	8004040 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8004692:	2200      	movs	r2, #0
 8004694:	2102      	movs	r1, #2
 8004696:	4837      	ldr	r0, [pc, #220]	@ (8004774 <MX_SPI2_Init+0x194>)
 8004698:	f7ff fdb8 	bl	800420c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 800469c:	2200      	movs	r2, #0
 800469e:	2102      	movs	r1, #2
 80046a0:	4834      	ldr	r0, [pc, #208]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046a2:	f7ff fcf5 	bl	8004090 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 80046a6:	2200      	movs	r2, #0
 80046a8:	2102      	movs	r1, #2
 80046aa:	4832      	ldr	r0, [pc, #200]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046ac:	f7ff fd16 	bl	80040dc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 80046b0:	2280      	movs	r2, #128	@ 0x80
 80046b2:	2102      	movs	r1, #2
 80046b4:	482f      	ldr	r0, [pc, #188]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046b6:	f7ff fd37 	bl	8004128 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 80046ba:	2200      	movs	r2, #0
 80046bc:	2102      	movs	r1, #2
 80046be:	482d      	ldr	r0, [pc, #180]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046c0:	f7ff fd58 	bl	8004174 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 80046c4:	2200      	movs	r2, #0
 80046c6:	2102      	movs	r1, #2
 80046c8:	482a      	ldr	r0, [pc, #168]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046ca:	f7ff fd79 	bl	80041c0 <LL_DMA_SetMemorySize>

  /* SPI2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMAMUX_REQ_SPI2_TX);
 80046ce:	220d      	movs	r2, #13
 80046d0:	2103      	movs	r1, #3
 80046d2:	4828      	ldr	r0, [pc, #160]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046d4:	f7ff fe24 	bl	8004320 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80046d8:	2210      	movs	r2, #16
 80046da:	2103      	movs	r1, #3
 80046dc:	4825      	ldr	r0, [pc, #148]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046de:	f7ff fcaf 	bl	8004040 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 80046e2:	2200      	movs	r2, #0
 80046e4:	2103      	movs	r1, #3
 80046e6:	4823      	ldr	r0, [pc, #140]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046e8:	f7ff fd90 	bl	800420c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 80046ec:	2200      	movs	r2, #0
 80046ee:	2103      	movs	r1, #3
 80046f0:	4820      	ldr	r0, [pc, #128]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046f2:	f7ff fccd 	bl	8004090 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 80046f6:	2200      	movs	r2, #0
 80046f8:	2103      	movs	r1, #3
 80046fa:	481e      	ldr	r0, [pc, #120]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046fc:	f7ff fcee 	bl	80040dc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 8004700:	2280      	movs	r2, #128	@ 0x80
 8004702:	2103      	movs	r1, #3
 8004704:	481b      	ldr	r0, [pc, #108]	@ (8004774 <MX_SPI2_Init+0x194>)
 8004706:	f7ff fd0f 	bl	8004128 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 800470a:	2200      	movs	r2, #0
 800470c:	2103      	movs	r1, #3
 800470e:	4819      	ldr	r0, [pc, #100]	@ (8004774 <MX_SPI2_Init+0x194>)
 8004710:	f7ff fd30 	bl	8004174 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 8004714:	2200      	movs	r2, #0
 8004716:	2103      	movs	r1, #3
 8004718:	4816      	ldr	r0, [pc, #88]	@ (8004774 <MX_SPI2_Init+0x194>)
 800471a:	f7ff fd51 	bl	80041c0 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800471e:	2300      	movs	r3, #0
 8004720:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004722:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8004726:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004728:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800472c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800472e:	2302      	movs	r3, #2
 8004730:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004732:	2301      	movs	r3, #1
 8004734:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004736:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800473a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 800473c:	2320      	movs	r3, #32
 800473e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004740:	2300      	movs	r3, #0
 8004742:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004744:	2300      	movs	r3, #0
 8004746:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8004748:	2307      	movs	r3, #7
 800474a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800474c:	f107 0318 	add.w	r3, r7, #24
 8004750:	4619      	mov	r1, r3
 8004752:	4809      	ldr	r0, [pc, #36]	@ (8004778 <MX_SPI2_Init+0x198>)
 8004754:	f016 fad8 	bl	801ad08 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8004758:	2100      	movs	r1, #0
 800475a:	4807      	ldr	r0, [pc, #28]	@ (8004778 <MX_SPI2_Init+0x198>)
 800475c:	f7ff fea1 	bl	80044a2 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8004760:	4805      	ldr	r0, [pc, #20]	@ (8004778 <MX_SPI2_Init+0x198>)
 8004762:	f7ff fec4 	bl	80044ee <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004766:	bf00      	nop
 8004768:	3740      	adds	r7, #64	@ 0x40
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	48000400 	.word	0x48000400
 8004774:	40020000 	.word	0x40020000
 8004778:	40003800 	.word	0x40003800

0800477c <DMA1_Channel3_Init>:
/* USER CODE BEGIN 1 */
//uint8_t rx_flag = 0;
//uint8_t tx_flag = 0;

void DMA1_Channel3_Init(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_3);
 8004780:	2102      	movs	r1, #2
 8004782:	4806      	ldr	r0, [pc, #24]	@ (800479c <DMA1_Channel3_Init+0x20>)
 8004784:	f7ff fdf6 	bl	8004374 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1,LL_DMA_CHANNEL_3);
 8004788:	2102      	movs	r1, #2
 800478a:	4804      	ldr	r0, [pc, #16]	@ (800479c <DMA1_Channel3_Init+0x20>)
 800478c:	f7ff fe14 	bl	80043b8 <LL_DMA_EnableIT_TE>
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_3);
 8004790:	2102      	movs	r1, #2
 8004792:	4802      	ldr	r0, [pc, #8]	@ (800479c <DMA1_Channel3_Init+0x20>)
 8004794:	f7ff fc32 	bl	8003ffc <LL_DMA_DisableChannel>
}
 8004798:	bf00      	nop
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40020000 	.word	0x40020000

080047a0 <DMA1_Channel4_Init>:

void DMA1_Channel4_Init(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_4);
 80047a4:	2103      	movs	r1, #3
 80047a6:	4806      	ldr	r0, [pc, #24]	@ (80047c0 <DMA1_Channel4_Init+0x20>)
 80047a8:	f7ff fde4 	bl	8004374 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1,LL_DMA_CHANNEL_4);
 80047ac:	2103      	movs	r1, #3
 80047ae:	4804      	ldr	r0, [pc, #16]	@ (80047c0 <DMA1_Channel4_Init+0x20>)
 80047b0:	f7ff fe02 	bl	80043b8 <LL_DMA_EnableIT_TE>
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_4);
 80047b4:	2103      	movs	r1, #3
 80047b6:	4802      	ldr	r0, [pc, #8]	@ (80047c0 <DMA1_Channel4_Init+0x20>)
 80047b8:	f7ff fc20 	bl	8003ffc <LL_DMA_DisableChannel>
}
 80047bc:	bf00      	nop
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40020000 	.word	0x40020000

080047c4 <SPI2_Start>:

uint8_t SPI2ReciveData[SPI2_DATA_BUFFR_SIZE];
uint8_t SPI2TransmitData[SPI2_DATA_BUFFR_SIZE];

void SPI2_Start(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
	LL_SPI_SetRxFIFOThreshold(SPI2, LL_SPI_RX_FIFO_TH_QUARTER);
 80047c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80047cc:	4808      	ldr	r0, [pc, #32]	@ (80047f0 <SPI2_Start+0x2c>)
 80047ce:	f7ff fe7b 	bl	80044c8 <LL_SPI_SetRxFIFOThreshold>
	DMA1_Channel3_Init();
 80047d2:	f7ff ffd3 	bl	800477c <DMA1_Channel3_Init>
	DMA1_Channel4_Init();
 80047d6:	f7ff ffe3 	bl	80047a0 <DMA1_Channel4_Init>
	LL_SPI_EnableDMAReq_RX(SPI2);
 80047da:	4805      	ldr	r0, [pc, #20]	@ (80047f0 <SPI2_Start+0x2c>)
 80047dc:	f7ff feaa 	bl	8004534 <LL_SPI_EnableDMAReq_RX>
	LL_SPI_EnableDMAReq_TX(SPI2);
 80047e0:	4803      	ldr	r0, [pc, #12]	@ (80047f0 <SPI2_Start+0x2c>)
 80047e2:	f7ff feb7 	bl	8004554 <LL_SPI_EnableDMAReq_TX>

	LL_SPI_Enable(SPI2);
 80047e6:	4802      	ldr	r0, [pc, #8]	@ (80047f0 <SPI2_Start+0x2c>)
 80047e8:	f7ff fe38 	bl	800445c <LL_SPI_Enable>
}
 80047ec:	bf00      	nop
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40003800 	.word	0x40003800

080047f4 <SPI2_DMA_Communication>:

void SPI2_DMA_Communication(uint8_t length)
{
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	4603      	mov	r3, r0
 80047fc:	71fb      	strb	r3, [r7, #7]
  LL_GPIO_ResetOutputPin(CS_gyro_GPIO_Port, CS_gyro_Pin);
 80047fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004802:	4822      	ldr	r0, [pc, #136]	@ (800488c <SPI2_DMA_Communication+0x98>)
 8004804:	f7ff fede 	bl	80045c4 <LL_GPIO_ResetOutputPin>

	if( LL_SPI_IsActiveFlag_RXNE(SPI2) == SET)LL_SPI_ReceiveData8(SPI2);
 8004808:	4821      	ldr	r0, [pc, #132]	@ (8004890 <SPI2_DMA_Communication+0x9c>)
 800480a:	f7ff fe80 	bl	800450e <LL_SPI_IsActiveFlag_RXNE>
 800480e:	4603      	mov	r3, r0
 8004810:	2b01      	cmp	r3, #1
 8004812:	d102      	bne.n	800481a <SPI2_DMA_Communication+0x26>
 8004814:	481e      	ldr	r0, [pc, #120]	@ (8004890 <SPI2_DMA_Communication+0x9c>)
 8004816:	f7ff feb9 	bl	800458c <LL_SPI_ReceiveData8>
	if( LL_SPI_IsEnabled(SPI2) == RESET) LL_SPI_Enable(SPI2);
 800481a:	481d      	ldr	r0, [pc, #116]	@ (8004890 <SPI2_DMA_Communication+0x9c>)
 800481c:	f7ff fe2e 	bl	800447c <LL_SPI_IsEnabled>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d102      	bne.n	800482c <SPI2_DMA_Communication+0x38>
 8004826:	481a      	ldr	r0, [pc, #104]	@ (8004890 <SPI2_DMA_Communication+0x9c>)
 8004828:	f7ff fe18 	bl	800445c <LL_SPI_Enable>

	LL_DMA_ConfigAddresses(DMA1,LL_DMA_CHANNEL_4,(uint32_t)SPI2TransmitData,
 800482c:	4c19      	ldr	r4, [pc, #100]	@ (8004894 <SPI2_DMA_Communication+0xa0>)
 800482e:	4818      	ldr	r0, [pc, #96]	@ (8004890 <SPI2_DMA_Communication+0x9c>)
 8004830:	f7ff fea0 	bl	8004574 <LL_SPI_DMA_GetRegAddr>
 8004834:	4603      	mov	r3, r0
 8004836:	2210      	movs	r2, #16
 8004838:	9200      	str	r2, [sp, #0]
 800483a:	4622      	mov	r2, r4
 800483c:	2103      	movs	r1, #3
 800483e:	4816      	ldr	r0, [pc, #88]	@ (8004898 <SPI2_DMA_Communication+0xa4>)
 8004840:	f7ff fd30 	bl	80042a4 <LL_DMA_ConfigAddresses>
							LL_SPI_DMA_GetRegAddr(SPI2),LL_DMA_DIRECTION_MEMORY_TO_PERIPH);

	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_4,length);
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	461a      	mov	r2, r3
 8004848:	2103      	movs	r1, #3
 800484a:	4813      	ldr	r0, [pc, #76]	@ (8004898 <SPI2_DMA_Communication+0xa4>)
 800484c:	f7ff fd04 	bl	8004258 <LL_DMA_SetDataLength>

	LL_DMA_ConfigAddresses(DMA1,LL_DMA_CHANNEL_3,LL_SPI_DMA_GetRegAddr(SPI2),
 8004850:	480f      	ldr	r0, [pc, #60]	@ (8004890 <SPI2_DMA_Communication+0x9c>)
 8004852:	f7ff fe8f 	bl	8004574 <LL_SPI_DMA_GetRegAddr>
 8004856:	4602      	mov	r2, r0
 8004858:	4910      	ldr	r1, [pc, #64]	@ (800489c <SPI2_DMA_Communication+0xa8>)
 800485a:	2300      	movs	r3, #0
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	460b      	mov	r3, r1
 8004860:	2102      	movs	r1, #2
 8004862:	480d      	ldr	r0, [pc, #52]	@ (8004898 <SPI2_DMA_Communication+0xa4>)
 8004864:	f7ff fd1e 	bl	80042a4 <LL_DMA_ConfigAddresses>
							(uint32_t)SPI2ReciveData,LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_3,length);
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	461a      	mov	r2, r3
 800486c:	2102      	movs	r1, #2
 800486e:	480a      	ldr	r0, [pc, #40]	@ (8004898 <SPI2_DMA_Communication+0xa4>)
 8004870:	f7ff fcf2 	bl	8004258 <LL_DMA_SetDataLength>

	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_4);
 8004874:	2103      	movs	r1, #3
 8004876:	4808      	ldr	r0, [pc, #32]	@ (8004898 <SPI2_DMA_Communication+0xa4>)
 8004878:	f7ff fb9e 	bl	8003fb8 <LL_DMA_EnableChannel>
	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_3);
 800487c:	2102      	movs	r1, #2
 800487e:	4806      	ldr	r0, [pc, #24]	@ (8004898 <SPI2_DMA_Communication+0xa4>)
 8004880:	f7ff fb9a 	bl	8003fb8 <LL_DMA_EnableChannel>
	while(rx_flag != 1);
	rx_flag = 0;
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);
	LL_GPIO_SetOutputPin(GPIOx,CS_Pin);
*/
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	bd90      	pop	{r4, r7, pc}
 800488c:	48000400 	.word	0x48000400
 8004890:	40003800 	.word	0x40003800
 8004894:	2000033c 	.word	0x2000033c
 8004898:	40020000 	.word	0x40020000
 800489c:	20000338 	.word	0x20000338

080048a0 <SPI2_DMA1_ReceiveComplete_Callback>:

void SPI2_DMA1_ReceiveComplete_Callback(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_3);
 80048a4:	2102      	movs	r1, #2
 80048a6:	4805      	ldr	r0, [pc, #20]	@ (80048bc <SPI2_DMA1_ReceiveComplete_Callback+0x1c>)
 80048a8:	f7ff fba8 	bl	8003ffc <LL_DMA_DisableChannel>
	LL_GPIO_SetOutputPin(CS_gyro_GPIO_Port, CS_gyro_Pin);
 80048ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80048b0:	4803      	ldr	r0, [pc, #12]	@ (80048c0 <SPI2_DMA1_ReceiveComplete_Callback+0x20>)
 80048b2:	f7ff fe79 	bl	80045a8 <LL_GPIO_SetOutputPin>
//	rx_flag = 1;
}
 80048b6:	bf00      	nop
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40020000 	.word	0x40020000
 80048c0:	48000400 	.word	0x48000400

080048c4 <SPI2_DMA1_TransmitComplete_Callback>:

void SPI2_DMA1_TransmitComplete_Callback(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_4);
 80048c8:	2103      	movs	r1, #3
 80048ca:	4802      	ldr	r0, [pc, #8]	@ (80048d4 <SPI2_DMA1_TransmitComplete_Callback+0x10>)
 80048cc:	f7ff fb96 	bl	8003ffc <LL_DMA_DisableChannel>
//	tx_flag = 1;
}
 80048d0:	bf00      	nop
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40020000 	.word	0x40020000

080048d8 <Get_SPI2ReciveData>:

uint8_t Get_SPI2ReciveData(uint8_t num){
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	71fb      	strb	r3, [r7, #7]
	return SPI2ReciveData[num];
 80048e2:	79fb      	ldrb	r3, [r7, #7]
 80048e4:	4a03      	ldr	r2, [pc, #12]	@ (80048f4 <Get_SPI2ReciveData+0x1c>)
 80048e6:	5cd3      	ldrb	r3, [r2, r3]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	20000338 	.word	0x20000338

080048f8 <SetSPI2TransmitData>:

void SetSPI2TransmitData(uint8_t num, uint8_t data){
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	460a      	mov	r2, r1
 8004902:	71fb      	strb	r3, [r7, #7]
 8004904:	4613      	mov	r3, r2
 8004906:	71bb      	strb	r3, [r7, #6]
	SPI2TransmitData[num] = data;
 8004908:	79fb      	ldrb	r3, [r7, #7]
 800490a:	4904      	ldr	r1, [pc, #16]	@ (800491c <SetSPI2TransmitData+0x24>)
 800490c:	79ba      	ldrb	r2, [r7, #6]
 800490e:	54ca      	strb	r2, [r1, r3]
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	2000033c 	.word	0x2000033c

08004920 <LL_DMA_IsActiveFlag_TC3>:
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004934:	d101      	bne.n	800493a <LL_DMA_IsActiveFlag_TC3+0x1a>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <LL_DMA_IsActiveFlag_TC3+0x1c>
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <LL_DMA_IsActiveFlag_TC4>:
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800495c:	d101      	bne.n	8004962 <LL_DMA_IsActiveFlag_TC4+0x1a>
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <LL_DMA_IsActiveFlag_TC4+0x1c>
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <LL_DMA_ClearFlag_GI3>:
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800497e:	605a      	str	r2, [r3, #4]
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <LL_DMA_ClearFlag_GI4>:
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800499a:	605a      	str	r2, [r3, #4]
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f06f 0201 	mvn.w	r2, #1
 80049b6:	611a      	str	r2, [r3, #16]
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049ea:	b480      	push	{r7}
 80049ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80049ee:	bf00      	nop
 80049f0:	e7fd      	b.n	80049ee <NMI_Handler+0x4>

080049f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049f2:	b480      	push	{r7}
 80049f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049f6:	bf00      	nop
 80049f8:	e7fd      	b.n	80049f6 <HardFault_Handler+0x4>

080049fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049fa:	b480      	push	{r7}
 80049fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049fe:	bf00      	nop
 8004a00:	e7fd      	b.n	80049fe <MemManage_Handler+0x4>

08004a02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a02:	b480      	push	{r7}
 8004a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a06:	bf00      	nop
 8004a08:	e7fd      	b.n	8004a06 <BusFault_Handler+0x4>

08004a0a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a0e:	bf00      	nop
 8004a10:	e7fd      	b.n	8004a0e <UsageFault_Handler+0x4>

08004a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a12:	b480      	push	{r7}
 8004a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a16:	bf00      	nop
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a32:	bf00      	nop
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a40:	bf00      	nop
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
	...

08004a4c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
  if(LL_DMA_IsActiveFlag_TC3(DMA1) == 1){
 8004a50:	4806      	ldr	r0, [pc, #24]	@ (8004a6c <DMA1_Channel3_IRQHandler+0x20>)
 8004a52:	f7ff ff65 	bl	8004920 <LL_DMA_IsActiveFlag_TC3>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d104      	bne.n	8004a66 <DMA1_Channel3_IRQHandler+0x1a>
		LL_DMA_ClearFlag_GI3(DMA1);
 8004a5c:	4803      	ldr	r0, [pc, #12]	@ (8004a6c <DMA1_Channel3_IRQHandler+0x20>)
 8004a5e:	f7ff ff87 	bl	8004970 <LL_DMA_ClearFlag_GI3>
//    LL_DMA_ClearFlag_TC3(DMA1);
		SPI2_DMA1_ReceiveComplete_Callback();
 8004a62:	f7ff ff1d 	bl	80048a0 <SPI2_DMA1_ReceiveComplete_Callback>
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40020000 	.word	0x40020000

08004a70 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
  if(LL_DMA_IsActiveFlag_TC4(DMA1) == 1){
 8004a74:	4806      	ldr	r0, [pc, #24]	@ (8004a90 <DMA1_Channel4_IRQHandler+0x20>)
 8004a76:	f7ff ff67 	bl	8004948 <LL_DMA_IsActiveFlag_TC4>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d104      	bne.n	8004a8a <DMA1_Channel4_IRQHandler+0x1a>
		LL_DMA_ClearFlag_GI4(DMA1);
 8004a80:	4803      	ldr	r0, [pc, #12]	@ (8004a90 <DMA1_Channel4_IRQHandler+0x20>)
 8004a82:	f7ff ff83 	bl	800498c <LL_DMA_ClearFlag_GI4>
//    LL_DMA_ClearFlag_TC4(DMA1);
	  SPI2_DMA1_TransmitComplete_Callback();
 8004a86:	f7ff ff1d 	bl	80048c4 <SPI2_DMA1_TransmitComplete_Callback>
  /* USER CODE END DMA1_Channel4_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004a8a:	bf00      	nop
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40020000 	.word	0x40020000

08004a94 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
  if ( LL_TIM_IsActiveFlag_UPDATE(TIM15)==1){
 8004a98:	4807      	ldr	r0, [pc, #28]	@ (8004ab8 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8004a9a:	f7ff ff93 	bl	80049c4 <LL_TIM_IsActiveFlag_UPDATE>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d106      	bne.n	8004ab2 <TIM1_BRK_TIM15_IRQHandler+0x1e>
		LL_TIM_ClearFlag_UPDATE(TIM15);
 8004aa4:	4804      	ldr	r0, [pc, #16]	@ (8004ab8 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8004aa6:	f7ff ff7f 	bl	80049a8 <LL_TIM_ClearFlag_UPDATE>
    BAT_Pol();
 8004aaa:	f00d ff65 	bl	8012978 <BAT_Pol>
	  log_interrupt ();
 8004aae:	f005 f947 	bl	8009d40 <log_interrupt>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40014000 	.word	0x40014000

08004abc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  if ( LL_TIM_IsActiveFlag_UPDATE(TIM4)==1){
 8004ac0:	4806      	ldr	r0, [pc, #24]	@ (8004adc <TIM4_IRQHandler+0x20>)
 8004ac2:	f7ff ff7f 	bl	80049c4 <LL_TIM_IsActiveFlag_UPDATE>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d104      	bne.n	8004ad6 <TIM4_IRQHandler+0x1a>
		LL_TIM_ClearFlag_UPDATE(TIM4);
 8004acc:	4803      	ldr	r0, [pc, #12]	@ (8004adc <TIM4_IRQHandler+0x20>)
 8004ace:	f7ff ff6b 	bl	80049a8 <LL_TIM_ClearFlag_UPDATE>
    INTC_sys();
 8004ad2:	f001 fc69 	bl	80063a8 <INTC_sys>
  }
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004ad6:	bf00      	nop
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	40000800 	.word	0x40000800

08004ae0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  static uint8_t i = 0;
	if ( LL_TIM_IsActiveFlag_UPDATE(TIM6)==1){
 8004ae4:	4817      	ldr	r0, [pc, #92]	@ (8004b44 <TIM6_DAC_IRQHandler+0x64>)
 8004ae6:	f7ff ff6d 	bl	80049c4 <LL_TIM_IsActiveFlag_UPDATE>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d127      	bne.n	8004b40 <TIM6_DAC_IRQHandler+0x60>
		LL_TIM_ClearFlag_UPDATE(TIM6);
 8004af0:	4814      	ldr	r0, [pc, #80]	@ (8004b44 <TIM6_DAC_IRQHandler+0x64>)
 8004af2:	f7ff ff59 	bl	80049a8 <LL_TIM_ClearFlag_UPDATE>
	
    switch(i){
 8004af6:	4b14      	ldr	r3, [pc, #80]	@ (8004b48 <TIM6_DAC_IRQHandler+0x68>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d813      	bhi.n	8004b26 <TIM6_DAC_IRQHandler+0x46>
 8004afe:	a201      	add	r2, pc, #4	@ (adr r2, 8004b04 <TIM6_DAC_IRQHandler+0x24>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b27 	.word	0x08004b27
 8004b08:	08004b27 	.word	0x08004b27
 8004b0c:	08004b15 	.word	0x08004b15
 8004b10:	08004b1d 	.word	0x08004b1d
      case 0:
        break;
      case 1:
        break;
      case 2:
        ICM_42688_GyroRead_DMA(0x26);
 8004b14:	2026      	movs	r0, #38	@ 0x26
 8004b16:	f004 fee7 	bl	80098e8 <ICM_42688_GyroRead_DMA>
        break;
 8004b1a:	e004      	b.n	8004b26 <TIM6_DAC_IRQHandler+0x46>
      case 3:
        ICM_42688_GyroData();
 8004b1c:	f004 fef2 	bl	8009904 <ICM_42688_GyroData>
        GYRO_Pol();
 8004b20:	f004 ff9c 	bl	8009a5c <GYRO_Pol>
        break;
 8004b24:	bf00      	nop
    }
    i = (i+1)%4;
 8004b26:	4b08      	ldr	r3, [pc, #32]	@ (8004b48 <TIM6_DAC_IRQHandler+0x68>)
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	425a      	negs	r2, r3
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	f002 0203 	and.w	r2, r2, #3
 8004b36:	bf58      	it	pl
 8004b38:	4253      	negpl	r3, r2
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	4b02      	ldr	r3, [pc, #8]	@ (8004b48 <TIM6_DAC_IRQHandler+0x68>)
 8004b3e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004b40:	bf00      	nop
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40001000 	.word	0x40001000
 8004b48:	2000033f 	.word	0x2000033f

08004b4c <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */
  static uint8_t i = 0;

	if ( LL_TIM_IsActiveFlag_UPDATE(TIM7)==1){
 8004b50:	4819      	ldr	r0, [pc, #100]	@ (8004bb8 <TIM7_DAC_IRQHandler+0x6c>)
 8004b52:	f7ff ff37 	bl	80049c4 <LL_TIM_IsActiveFlag_UPDATE>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d12a      	bne.n	8004bb2 <TIM7_DAC_IRQHandler+0x66>
		LL_TIM_ClearFlag_UPDATE(TIM7);
 8004b5c:	4816      	ldr	r0, [pc, #88]	@ (8004bb8 <TIM7_DAC_IRQHandler+0x6c>)
 8004b5e:	f7ff ff23 	bl	80049a8 <LL_TIM_ClearFlag_UPDATE>
	
    switch(i){
 8004b62:	4b16      	ldr	r3, [pc, #88]	@ (8004bbc <TIM7_DAC_IRQHandler+0x70>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d816      	bhi.n	8004b98 <TIM7_DAC_IRQHandler+0x4c>
 8004b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b70 <TIM7_DAC_IRQHandler+0x24>)
 8004b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b70:	08004b81 	.word	0x08004b81
 8004b74:	08004b87 	.word	0x08004b87
 8004b78:	08004b8d 	.word	0x08004b8d
 8004b7c:	08004b93 	.word	0x08004b93
      case 0:
        DIST_Pol_FL();
 8004b80:	f00e f9ec 	bl	8012f5c <DIST_Pol_FL>
        break;
 8004b84:	e008      	b.n	8004b98 <TIM7_DAC_IRQHandler+0x4c>
      case 1:
        DIST_Pol_SR();
 8004b86:	f00e fa91 	bl	80130ac <DIST_Pol_SR>
        break;
 8004b8a:	e005      	b.n	8004b98 <TIM7_DAC_IRQHandler+0x4c>
      case 2:
        DIST_Pol_SL();
 8004b8c:	f00e fa56 	bl	801303c <DIST_Pol_SL>
        break;
 8004b90:	e002      	b.n	8004b98 <TIM7_DAC_IRQHandler+0x4c>
      case 3:
        DIST_Pol_FR();
 8004b92:	f00e fa1b 	bl	8012fcc <DIST_Pol_FR>
        break;
 8004b96:	bf00      	nop
    }
    i = (i+1)%4;
 8004b98:	4b08      	ldr	r3, [pc, #32]	@ (8004bbc <TIM7_DAC_IRQHandler+0x70>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	425a      	negs	r2, r3
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	f002 0203 	and.w	r2, r2, #3
 8004ba8:	bf58      	it	pl
 8004baa:	4253      	negpl	r3, r2
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	4b03      	ldr	r3, [pc, #12]	@ (8004bbc <TIM7_DAC_IRQHandler+0x70>)
 8004bb0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM7_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8004bb2:	bf00      	nop
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40001400 	.word	0x40001400
 8004bbc:	20000340 	.word	0x20000340

08004bc0 <_getpid>:
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <_kill>:
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
 8004bda:	f019 fab9 	bl	801e150 <__errno>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2216      	movs	r2, #22
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <_exit>:
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7ff ffe7 	bl	8004bd0 <_kill>
 8004c02:	bf00      	nop
 8004c04:	e7fd      	b.n	8004c02 <_exit+0x12>

08004c06 <_read>:
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b086      	sub	sp, #24
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	e00a      	b.n	8004c2e <_read+0x28>
 8004c18:	f3af 8000 	nop.w
 8004c1c:	4601      	mov	r1, r0
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	60ba      	str	r2, [r7, #8]
 8004c24:	b2ca      	uxtb	r2, r1
 8004c26:	701a      	strb	r2, [r3, #0]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	dbf0      	blt.n	8004c18 <_read+0x12>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <_write>:
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	e009      	b.n	8004c66 <_write+0x26>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	60ba      	str	r2, [r7, #8]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fd fc12 	bl	8002484 <__io_putchar>
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	3301      	adds	r3, #1
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	dbf1      	blt.n	8004c52 <_write+0x12>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <_close>:
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	f04f 33ff 	mov.w	r3, #4294967295
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <_fstat>:
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ca0:	605a      	str	r2, [r3, #4]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <_isatty>:
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	2301      	movs	r3, #1
 8004cba:	4618      	mov	r0, r3
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <_lseek>:
 8004cc6:	b480      	push	{r7}
 8004cc8:	b085      	sub	sp, #20
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <_sbrk>:
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	4a14      	ldr	r2, [pc, #80]	@ (8004d3c <_sbrk+0x5c>)
 8004cea:	4b15      	ldr	r3, [pc, #84]	@ (8004d40 <_sbrk+0x60>)
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	617b      	str	r3, [r7, #20]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	4b13      	ldr	r3, [pc, #76]	@ (8004d44 <_sbrk+0x64>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <_sbrk+0x22>
 8004cfc:	4b11      	ldr	r3, [pc, #68]	@ (8004d44 <_sbrk+0x64>)
 8004cfe:	4a12      	ldr	r2, [pc, #72]	@ (8004d48 <_sbrk+0x68>)
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	4b10      	ldr	r3, [pc, #64]	@ (8004d44 <_sbrk+0x64>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d207      	bcs.n	8004d20 <_sbrk+0x40>
 8004d10:	f019 fa1e 	bl	801e150 <__errno>
 8004d14:	4603      	mov	r3, r0
 8004d16:	220c      	movs	r2, #12
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1e:	e009      	b.n	8004d34 <_sbrk+0x54>
 8004d20:	4b08      	ldr	r3, [pc, #32]	@ (8004d44 <_sbrk+0x64>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	4b07      	ldr	r3, [pc, #28]	@ (8004d44 <_sbrk+0x64>)
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	4a05      	ldr	r2, [pc, #20]	@ (8004d44 <_sbrk+0x64>)
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20020000 	.word	0x20020000
 8004d40:	00000400 	.word	0x00000400
 8004d44:	20000344 	.word	0x20000344
 8004d48:	2001bef0 	.word	0x2001bef0

08004d4c <SystemInit>:
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	4b06      	ldr	r3, [pc, #24]	@ (8004d6c <SystemInit+0x20>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d56:	4a05      	ldr	r2, [pc, #20]	@ (8004d6c <SystemInit+0x20>)
 8004d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8004d60:	bf00      	nop
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	e000ed00 	.word	0xe000ed00

08004d70 <__NVIC_GetPriorityGrouping>:
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d74:	4b04      	ldr	r3, [pc, #16]	@ (8004d88 <__NVIC_GetPriorityGrouping+0x18>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	0a1b      	lsrs	r3, r3, #8
 8004d7a:	f003 0307 	and.w	r3, r3, #7
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	e000ed00 	.word	0xe000ed00

08004d8c <__NVIC_EnableIRQ>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	db0b      	blt.n	8004db6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	f003 021f 	and.w	r2, r3, #31
 8004da4:	4907      	ldr	r1, [pc, #28]	@ (8004dc4 <__NVIC_EnableIRQ+0x38>)
 8004da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	2001      	movs	r0, #1
 8004dae:	fa00 f202 	lsl.w	r2, r0, r2
 8004db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	e000e100 	.word	0xe000e100

08004dc8 <__NVIC_SetPriority>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	6039      	str	r1, [r7, #0]
 8004dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	db0a      	blt.n	8004df2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	490c      	ldr	r1, [pc, #48]	@ (8004e14 <__NVIC_SetPriority+0x4c>)
 8004de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de6:	0112      	lsls	r2, r2, #4
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	440b      	add	r3, r1
 8004dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004df0:	e00a      	b.n	8004e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	4908      	ldr	r1, [pc, #32]	@ (8004e18 <__NVIC_SetPriority+0x50>)
 8004df8:	79fb      	ldrb	r3, [r7, #7]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	3b04      	subs	r3, #4
 8004e00:	0112      	lsls	r2, r2, #4
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	440b      	add	r3, r1
 8004e06:	761a      	strb	r2, [r3, #24]
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	e000e100 	.word	0xe000e100
 8004e18:	e000ed00 	.word	0xe000ed00

08004e1c <NVIC_EncodePriority>:
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b089      	sub	sp, #36	@ 0x24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f1c3 0307 	rsb	r3, r3, #7
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	bf28      	it	cs
 8004e3a:	2304      	movcs	r3, #4
 8004e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	3304      	adds	r3, #4
 8004e42:	2b06      	cmp	r3, #6
 8004e44:	d902      	bls.n	8004e4c <NVIC_EncodePriority+0x30>
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	3b03      	subs	r3, #3
 8004e4a:	e000      	b.n	8004e4e <NVIC_EncodePriority+0x32>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e50:	f04f 32ff 	mov.w	r2, #4294967295
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43da      	mvns	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	401a      	ands	r2, r3
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e64:	f04f 31ff 	mov.w	r1, #4294967295
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6e:	43d9      	mvns	r1, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e74:	4313      	orrs	r3, r2
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3724      	adds	r7, #36	@ 0x24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <LL_AHB2_GRP1_EnableClock>:
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004e8c:	4b08      	ldr	r3, [pc, #32]	@ (8004eb0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004e8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e90:	4907      	ldr	r1, [pc, #28]	@ (8004eb0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004e98:	4b05      	ldr	r3, [pc, #20]	@ (8004eb0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004e9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
}
 8004ea4:	bf00      	nop
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	40021000 	.word	0x40021000

08004eb4 <LL_APB1_GRP1_EnableClock>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004ebc:	4b08      	ldr	r3, [pc, #32]	@ (8004ee0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004ebe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004ec0:	4907      	ldr	r1, [pc, #28]	@ (8004ee0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004ec8:	4b05      	ldr	r3, [pc, #20]	@ (8004ee0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004eca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
}
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	40021000 	.word	0x40021000

08004ee4 <LL_APB2_GRP1_EnableClock>:
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004eec:	4b08      	ldr	r3, [pc, #32]	@ (8004f10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004eee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004ef0:	4907      	ldr	r1, [pc, #28]	@ (8004f10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004ef8:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004efa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4013      	ands	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004f02:	68fb      	ldr	r3, [r7, #12]
}
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	40021000 	.word	0x40021000

08004f14 <LL_TIM_EnableCounter>:
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f043 0201 	orr.w	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	601a      	str	r2, [r3, #0]
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <LL_TIM_EnableARRPreload>:
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	601a      	str	r2, [r3, #0]
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <LL_TIM_DisableARRPreload>:
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	601a      	str	r2, [r3, #0]
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <LL_TIM_SetCounter>:
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <LL_TIM_GetCounter>:
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <LL_TIM_CC_EnableChannel>:
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1a      	ldr	r2, [r3, #32]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <LL_TIM_OC_DisableFast>:
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d02e      	beq.n	800503a <LL_TIM_OC_DisableFast+0x6e>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d029      	beq.n	8005036 <LL_TIM_OC_DisableFast+0x6a>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b10      	cmp	r3, #16
 8004fe6:	d024      	beq.n	8005032 <LL_TIM_OC_DisableFast+0x66>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b40      	cmp	r3, #64	@ 0x40
 8004fec:	d01f      	beq.n	800502e <LL_TIM_OC_DisableFast+0x62>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ff4:	d019      	beq.n	800502a <LL_TIM_OC_DisableFast+0x5e>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ffc:	d013      	beq.n	8005026 <LL_TIM_OC_DisableFast+0x5a>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005004:	d00d      	beq.n	8005022 <LL_TIM_OC_DisableFast+0x56>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800500c:	d007      	beq.n	800501e <LL_TIM_OC_DisableFast+0x52>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005014:	d101      	bne.n	800501a <LL_TIM_OC_DisableFast+0x4e>
 8005016:	2308      	movs	r3, #8
 8005018:	e010      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 800501a:	2309      	movs	r3, #9
 800501c:	e00e      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 800501e:	2307      	movs	r3, #7
 8005020:	e00c      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 8005022:	2306      	movs	r3, #6
 8005024:	e00a      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 8005026:	2305      	movs	r3, #5
 8005028:	e008      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 800502a:	2304      	movs	r3, #4
 800502c:	e006      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 800502e:	2303      	movs	r3, #3
 8005030:	e004      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 8005032:	2302      	movs	r3, #2
 8005034:	e002      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 800503a:	2300      	movs	r3, #0
 800503c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3318      	adds	r3, #24
 8005042:	4619      	mov	r1, r3
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	4a0b      	ldr	r2, [pc, #44]	@ (8005074 <LL_TIM_OC_DisableFast+0xa8>)
 8005048:	5cd3      	ldrb	r3, [r2, r3]
 800504a:	440b      	add	r3, r1
 800504c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	4908      	ldr	r1, [pc, #32]	@ (8005078 <LL_TIM_OC_DisableFast+0xac>)
 8005056:	5ccb      	ldrb	r3, [r1, r3]
 8005058:	4619      	mov	r1, r3
 800505a:	2304      	movs	r3, #4
 800505c:	408b      	lsls	r3, r1
 800505e:	43db      	mvns	r3, r3
 8005060:	401a      	ands	r2, r3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	601a      	str	r2, [r3, #0]
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	080221bc 	.word	0x080221bc
 8005078:	080221c8 	.word	0x080221c8

0800507c <LL_TIM_OC_EnablePreload>:
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d02e      	beq.n	80050ea <LL_TIM_OC_EnablePreload+0x6e>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b04      	cmp	r3, #4
 8005090:	d029      	beq.n	80050e6 <LL_TIM_OC_EnablePreload+0x6a>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b10      	cmp	r3, #16
 8005096:	d024      	beq.n	80050e2 <LL_TIM_OC_EnablePreload+0x66>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b40      	cmp	r3, #64	@ 0x40
 800509c:	d01f      	beq.n	80050de <LL_TIM_OC_EnablePreload+0x62>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050a4:	d019      	beq.n	80050da <LL_TIM_OC_EnablePreload+0x5e>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ac:	d013      	beq.n	80050d6 <LL_TIM_OC_EnablePreload+0x5a>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b4:	d00d      	beq.n	80050d2 <LL_TIM_OC_EnablePreload+0x56>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050bc:	d007      	beq.n	80050ce <LL_TIM_OC_EnablePreload+0x52>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050c4:	d101      	bne.n	80050ca <LL_TIM_OC_EnablePreload+0x4e>
 80050c6:	2308      	movs	r3, #8
 80050c8:	e010      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050ca:	2309      	movs	r3, #9
 80050cc:	e00e      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050ce:	2307      	movs	r3, #7
 80050d0:	e00c      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050d2:	2306      	movs	r3, #6
 80050d4:	e00a      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050d6:	2305      	movs	r3, #5
 80050d8:	e008      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050da:	2304      	movs	r3, #4
 80050dc:	e006      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050de:	2303      	movs	r3, #3
 80050e0:	e004      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e002      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050ea:	2300      	movs	r3, #0
 80050ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3318      	adds	r3, #24
 80050f2:	4619      	mov	r1, r3
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
 80050f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005120 <LL_TIM_OC_EnablePreload+0xa4>)
 80050f8:	5cd3      	ldrb	r3, [r2, r3]
 80050fa:	440b      	add	r3, r1
 80050fc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	4907      	ldr	r1, [pc, #28]	@ (8005124 <LL_TIM_OC_EnablePreload+0xa8>)
 8005106:	5ccb      	ldrb	r3, [r1, r3]
 8005108:	4619      	mov	r1, r3
 800510a:	2308      	movs	r3, #8
 800510c:	408b      	lsls	r3, r1
 800510e:	431a      	orrs	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	601a      	str	r2, [r3, #0]
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	080221bc 	.word	0x080221bc
 8005124:	080221c8 	.word	0x080221c8

08005128 <LL_TIM_OC_SetCompareCH2>:
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <LL_TIM_OC_SetCompareCH3>:
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <LL_TIM_IC_SetActiveInput>:
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d02e      	beq.n	80051d0 <LL_TIM_IC_SetActiveInput+0x70>
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b04      	cmp	r3, #4
 8005176:	d029      	beq.n	80051cc <LL_TIM_IC_SetActiveInput+0x6c>
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b10      	cmp	r3, #16
 800517c:	d024      	beq.n	80051c8 <LL_TIM_IC_SetActiveInput+0x68>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b40      	cmp	r3, #64	@ 0x40
 8005182:	d01f      	beq.n	80051c4 <LL_TIM_IC_SetActiveInput+0x64>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800518a:	d019      	beq.n	80051c0 <LL_TIM_IC_SetActiveInput+0x60>
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005192:	d013      	beq.n	80051bc <LL_TIM_IC_SetActiveInput+0x5c>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800519a:	d00d      	beq.n	80051b8 <LL_TIM_IC_SetActiveInput+0x58>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051a2:	d007      	beq.n	80051b4 <LL_TIM_IC_SetActiveInput+0x54>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051aa:	d101      	bne.n	80051b0 <LL_TIM_IC_SetActiveInput+0x50>
 80051ac:	2308      	movs	r3, #8
 80051ae:	e010      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051b0:	2309      	movs	r3, #9
 80051b2:	e00e      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051b4:	2307      	movs	r3, #7
 80051b6:	e00c      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051b8:	2306      	movs	r3, #6
 80051ba:	e00a      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051bc:	2305      	movs	r3, #5
 80051be:	e008      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051c0:	2304      	movs	r3, #4
 80051c2:	e006      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051c4:	2303      	movs	r3, #3
 80051c6:	e004      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e002      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e000      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051d0:	2300      	movs	r3, #0
 80051d2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3318      	adds	r3, #24
 80051d8:	4619      	mov	r1, r3
 80051da:	7dfb      	ldrb	r3, [r7, #23]
 80051dc:	4a0e      	ldr	r2, [pc, #56]	@ (8005218 <LL_TIM_IC_SetActiveInput+0xb8>)
 80051de:	5cd3      	ldrb	r3, [r2, r3]
 80051e0:	440b      	add	r3, r1
 80051e2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
 80051ea:	490c      	ldr	r1, [pc, #48]	@ (800521c <LL_TIM_IC_SetActiveInput+0xbc>)
 80051ec:	5ccb      	ldrb	r3, [r1, r3]
 80051ee:	4619      	mov	r1, r3
 80051f0:	2303      	movs	r3, #3
 80051f2:	408b      	lsls	r3, r1
 80051f4:	43db      	mvns	r3, r3
 80051f6:	401a      	ands	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	0c1b      	lsrs	r3, r3, #16
 80051fc:	7df9      	ldrb	r1, [r7, #23]
 80051fe:	4807      	ldr	r0, [pc, #28]	@ (800521c <LL_TIM_IC_SetActiveInput+0xbc>)
 8005200:	5c41      	ldrb	r1, [r0, r1]
 8005202:	408b      	lsls	r3, r1
 8005204:	431a      	orrs	r2, r3
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	601a      	str	r2, [r3, #0]
}
 800520a:	bf00      	nop
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	080221bc 	.word	0x080221bc
 800521c:	080221d4 	.word	0x080221d4

08005220 <LL_TIM_IC_SetPrescaler>:
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d02e      	beq.n	8005290 <LL_TIM_IC_SetPrescaler+0x70>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b04      	cmp	r3, #4
 8005236:	d029      	beq.n	800528c <LL_TIM_IC_SetPrescaler+0x6c>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b10      	cmp	r3, #16
 800523c:	d024      	beq.n	8005288 <LL_TIM_IC_SetPrescaler+0x68>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b40      	cmp	r3, #64	@ 0x40
 8005242:	d01f      	beq.n	8005284 <LL_TIM_IC_SetPrescaler+0x64>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800524a:	d019      	beq.n	8005280 <LL_TIM_IC_SetPrescaler+0x60>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005252:	d013      	beq.n	800527c <LL_TIM_IC_SetPrescaler+0x5c>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800525a:	d00d      	beq.n	8005278 <LL_TIM_IC_SetPrescaler+0x58>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005262:	d007      	beq.n	8005274 <LL_TIM_IC_SetPrescaler+0x54>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526a:	d101      	bne.n	8005270 <LL_TIM_IC_SetPrescaler+0x50>
 800526c:	2308      	movs	r3, #8
 800526e:	e010      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 8005270:	2309      	movs	r3, #9
 8005272:	e00e      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 8005274:	2307      	movs	r3, #7
 8005276:	e00c      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 8005278:	2306      	movs	r3, #6
 800527a:	e00a      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 800527c:	2305      	movs	r3, #5
 800527e:	e008      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 8005280:	2304      	movs	r3, #4
 8005282:	e006      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 8005284:	2303      	movs	r3, #3
 8005286:	e004      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 8005288:	2302      	movs	r3, #2
 800528a:	e002      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 800528c:	2301      	movs	r3, #1
 800528e:	e000      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 8005290:	2300      	movs	r3, #0
 8005292:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3318      	adds	r3, #24
 8005298:	4619      	mov	r1, r3
 800529a:	7dfb      	ldrb	r3, [r7, #23]
 800529c:	4a0e      	ldr	r2, [pc, #56]	@ (80052d8 <LL_TIM_IC_SetPrescaler+0xb8>)
 800529e:	5cd3      	ldrb	r3, [r2, r3]
 80052a0:	440b      	add	r3, r1
 80052a2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
 80052aa:	490c      	ldr	r1, [pc, #48]	@ (80052dc <LL_TIM_IC_SetPrescaler+0xbc>)
 80052ac:	5ccb      	ldrb	r3, [r1, r3]
 80052ae:	4619      	mov	r1, r3
 80052b0:	230c      	movs	r3, #12
 80052b2:	408b      	lsls	r3, r1
 80052b4:	43db      	mvns	r3, r3
 80052b6:	401a      	ands	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	0c1b      	lsrs	r3, r3, #16
 80052bc:	7df9      	ldrb	r1, [r7, #23]
 80052be:	4807      	ldr	r0, [pc, #28]	@ (80052dc <LL_TIM_IC_SetPrescaler+0xbc>)
 80052c0:	5c41      	ldrb	r1, [r0, r1]
 80052c2:	408b      	lsls	r3, r1
 80052c4:	431a      	orrs	r2, r3
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	601a      	str	r2, [r3, #0]
}
 80052ca:	bf00      	nop
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	080221bc 	.word	0x080221bc
 80052dc:	080221d4 	.word	0x080221d4

080052e0 <LL_TIM_IC_SetFilter>:
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d02e      	beq.n	8005350 <LL_TIM_IC_SetFilter+0x70>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d029      	beq.n	800534c <LL_TIM_IC_SetFilter+0x6c>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b10      	cmp	r3, #16
 80052fc:	d024      	beq.n	8005348 <LL_TIM_IC_SetFilter+0x68>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b40      	cmp	r3, #64	@ 0x40
 8005302:	d01f      	beq.n	8005344 <LL_TIM_IC_SetFilter+0x64>
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800530a:	d019      	beq.n	8005340 <LL_TIM_IC_SetFilter+0x60>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005312:	d013      	beq.n	800533c <LL_TIM_IC_SetFilter+0x5c>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800531a:	d00d      	beq.n	8005338 <LL_TIM_IC_SetFilter+0x58>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005322:	d007      	beq.n	8005334 <LL_TIM_IC_SetFilter+0x54>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800532a:	d101      	bne.n	8005330 <LL_TIM_IC_SetFilter+0x50>
 800532c:	2308      	movs	r3, #8
 800532e:	e010      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 8005330:	2309      	movs	r3, #9
 8005332:	e00e      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 8005334:	2307      	movs	r3, #7
 8005336:	e00c      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 8005338:	2306      	movs	r3, #6
 800533a:	e00a      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 800533c:	2305      	movs	r3, #5
 800533e:	e008      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 8005340:	2304      	movs	r3, #4
 8005342:	e006      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 8005344:	2303      	movs	r3, #3
 8005346:	e004      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 8005348:	2302      	movs	r3, #2
 800534a:	e002      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 8005350:	2300      	movs	r3, #0
 8005352:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3318      	adds	r3, #24
 8005358:	4619      	mov	r1, r3
 800535a:	7dfb      	ldrb	r3, [r7, #23]
 800535c:	4a0e      	ldr	r2, [pc, #56]	@ (8005398 <LL_TIM_IC_SetFilter+0xb8>)
 800535e:	5cd3      	ldrb	r3, [r2, r3]
 8005360:	440b      	add	r3, r1
 8005362:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	7dfb      	ldrb	r3, [r7, #23]
 800536a:	490c      	ldr	r1, [pc, #48]	@ (800539c <LL_TIM_IC_SetFilter+0xbc>)
 800536c:	5ccb      	ldrb	r3, [r1, r3]
 800536e:	4619      	mov	r1, r3
 8005370:	23f0      	movs	r3, #240	@ 0xf0
 8005372:	408b      	lsls	r3, r1
 8005374:	43db      	mvns	r3, r3
 8005376:	401a      	ands	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	0c1b      	lsrs	r3, r3, #16
 800537c:	7df9      	ldrb	r1, [r7, #23]
 800537e:	4807      	ldr	r0, [pc, #28]	@ (800539c <LL_TIM_IC_SetFilter+0xbc>)
 8005380:	5c41      	ldrb	r1, [r0, r1]
 8005382:	408b      	lsls	r3, r1
 8005384:	431a      	orrs	r2, r3
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	601a      	str	r2, [r3, #0]
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	080221bc 	.word	0x080221bc
 800539c:	080221d4 	.word	0x080221d4

080053a0 <LL_TIM_IC_SetPolarity>:
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d02e      	beq.n	8005410 <LL_TIM_IC_SetPolarity+0x70>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d029      	beq.n	800540c <LL_TIM_IC_SetPolarity+0x6c>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b10      	cmp	r3, #16
 80053bc:	d024      	beq.n	8005408 <LL_TIM_IC_SetPolarity+0x68>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b40      	cmp	r3, #64	@ 0x40
 80053c2:	d01f      	beq.n	8005404 <LL_TIM_IC_SetPolarity+0x64>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ca:	d019      	beq.n	8005400 <LL_TIM_IC_SetPolarity+0x60>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053d2:	d013      	beq.n	80053fc <LL_TIM_IC_SetPolarity+0x5c>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053da:	d00d      	beq.n	80053f8 <LL_TIM_IC_SetPolarity+0x58>
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053e2:	d007      	beq.n	80053f4 <LL_TIM_IC_SetPolarity+0x54>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ea:	d101      	bne.n	80053f0 <LL_TIM_IC_SetPolarity+0x50>
 80053ec:	2308      	movs	r3, #8
 80053ee:	e010      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 80053f0:	2309      	movs	r3, #9
 80053f2:	e00e      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 80053f4:	2307      	movs	r3, #7
 80053f6:	e00c      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 80053f8:	2306      	movs	r3, #6
 80053fa:	e00a      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 80053fc:	2305      	movs	r3, #5
 80053fe:	e008      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 8005400:	2304      	movs	r3, #4
 8005402:	e006      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 8005404:	2303      	movs	r3, #3
 8005406:	e004      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 8005408:	2302      	movs	r3, #2
 800540a:	e002      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 8005410:	2300      	movs	r3, #0
 8005412:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a1a      	ldr	r2, [r3, #32]
 8005418:	7dfb      	ldrb	r3, [r7, #23]
 800541a:	490b      	ldr	r1, [pc, #44]	@ (8005448 <LL_TIM_IC_SetPolarity+0xa8>)
 800541c:	5ccb      	ldrb	r3, [r1, r3]
 800541e:	4619      	mov	r1, r3
 8005420:	230a      	movs	r3, #10
 8005422:	408b      	lsls	r3, r1
 8005424:	43db      	mvns	r3, r3
 8005426:	401a      	ands	r2, r3
 8005428:	7dfb      	ldrb	r3, [r7, #23]
 800542a:	4907      	ldr	r1, [pc, #28]	@ (8005448 <LL_TIM_IC_SetPolarity+0xa8>)
 800542c:	5ccb      	ldrb	r3, [r1, r3]
 800542e:	4619      	mov	r1, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	408b      	lsls	r3, r1
 8005434:	431a      	orrs	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	080221e0 	.word	0x080221e0

0800544c <LL_TIM_SetClockSource>:
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800545e:	f023 0307 	bic.w	r3, r3, #7
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	609a      	str	r2, [r3, #8]
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <LL_TIM_SetEncoderMode>:
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005488:	f023 0307 	bic.w	r3, r3, #7
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	609a      	str	r2, [r3, #8]
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <LL_TIM_SetTriggerOutput>:
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80054b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	605a      	str	r2, [r3, #4]
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <LL_TIM_SetTriggerOutput2>:
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	605a      	str	r2, [r3, #4]
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <LL_TIM_DisableMasterSlaveMode>:
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	609a      	str	r2, [r3, #8]
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <LL_TIM_EnableAllOutputs>:
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551c:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f043 0201 	orr.w	r2, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	60da      	str	r2, [r3, #12]
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08c      	sub	sp, #48	@ 0x30
 8005554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005556:	f107 031c 	add.w	r3, r7, #28
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	605a      	str	r2, [r3, #4]
 8005560:	609a      	str	r2, [r3, #8]
 8005562:	60da      	str	r2, [r3, #12]
 8005564:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	605a      	str	r2, [r3, #4]
 800556e:	609a      	str	r2, [r3, #8]
 8005570:	60da      	str	r2, [r3, #12]
 8005572:	611a      	str	r2, [r3, #16]
 8005574:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8005576:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800557a:	f7ff fcb3 	bl	8004ee4 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800557e:	2001      	movs	r0, #1
 8005580:	f7ff fc80 	bl	8004e84 <LL_AHB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA9   ------> TIM1_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8005584:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005588:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800558a:	2302      	movs	r3, #2
 800558c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005592:	2300      	movs	r3, #0
 8005594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800559a:	2306      	movs	r3, #6
 800559c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800559e:	1d3b      	adds	r3, r7, #4
 80055a0:	4619      	mov	r1, r3
 80055a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80055a6:	f015 f862 	bl	801a66e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80055aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80055b0:	2302      	movs	r3, #2
 80055b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80055c0:	2306      	movs	r3, #6
 80055c2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055c4:	1d3b      	adds	r3, r7, #4
 80055c6:	4619      	mov	r1, r3
 80055c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80055cc:	f015 f84f 	bl	801a66e <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80055d0:	f7ff fbce 	bl	8004d70 <__NVIC_GetPriorityGrouping>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2200      	movs	r2, #0
 80055d8:	2100      	movs	r1, #0
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff fc1e 	bl	8004e1c <NVIC_EncodePriority>
 80055e0:	4603      	mov	r3, r0
 80055e2:	4619      	mov	r1, r3
 80055e4:	2018      	movs	r0, #24
 80055e6:	f7ff fbef 	bl	8004dc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80055ea:	2018      	movs	r0, #24
 80055ec:	f7ff fbce 	bl	8004d8c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80055f4:	2300      	movs	r3, #0
 80055f6:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 80055f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80055fc:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80055fe:	2300      	movs	r3, #0
 8005600:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.RepetitionCounter = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8005606:	f107 031c 	add.w	r3, r7, #28
 800560a:	4619      	mov	r1, r3
 800560c:	4821      	ldr	r0, [pc, #132]	@ (8005694 <MX_TIM1_Init+0x144>)
 800560e:	f015 fc69 	bl	801aee4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8005612:	4820      	ldr	r0, [pc, #128]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005614:	f7ff fc9e 	bl	8004f54 <LL_TIM_DisableARRPreload>
  LL_TIM_SetEncoderMode(TIM1, LL_TIM_ENCODERMODE_X4_TI12);
 8005618:	2103      	movs	r1, #3
 800561a:	481e      	ldr	r0, [pc, #120]	@ (8005694 <MX_TIM1_Init+0x144>)
 800561c:	f7ff ff2b 	bl	8005476 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8005620:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005624:	2101      	movs	r1, #1
 8005626:	481b      	ldr	r0, [pc, #108]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005628:	f7ff fd9a 	bl	8005160 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 800562c:	2200      	movs	r2, #0
 800562e:	2101      	movs	r1, #1
 8005630:	4818      	ldr	r0, [pc, #96]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005632:	f7ff fdf5 	bl	8005220 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8005636:	2200      	movs	r2, #0
 8005638:	2101      	movs	r1, #1
 800563a:	4816      	ldr	r0, [pc, #88]	@ (8005694 <MX_TIM1_Init+0x144>)
 800563c:	f7ff fe50 	bl	80052e0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8005640:	2200      	movs	r2, #0
 8005642:	2101      	movs	r1, #1
 8005644:	4813      	ldr	r0, [pc, #76]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005646:	f7ff feab 	bl	80053a0 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800564a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800564e:	2110      	movs	r1, #16
 8005650:	4810      	ldr	r0, [pc, #64]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005652:	f7ff fd85 	bl	8005160 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8005656:	2200      	movs	r2, #0
 8005658:	2110      	movs	r1, #16
 800565a:	480e      	ldr	r0, [pc, #56]	@ (8005694 <MX_TIM1_Init+0x144>)
 800565c:	f7ff fde0 	bl	8005220 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8005660:	2200      	movs	r2, #0
 8005662:	2110      	movs	r1, #16
 8005664:	480b      	ldr	r0, [pc, #44]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005666:	f7ff fe3b 	bl	80052e0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800566a:	2200      	movs	r2, #0
 800566c:	2110      	movs	r1, #16
 800566e:	4809      	ldr	r0, [pc, #36]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005670:	f7ff fe96 	bl	80053a0 <LL_TIM_IC_SetPolarity>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8005674:	2100      	movs	r1, #0
 8005676:	4807      	ldr	r0, [pc, #28]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005678:	f7ff ff12 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 800567c:	2100      	movs	r1, #0
 800567e:	4805      	ldr	r0, [pc, #20]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005680:	f7ff ff23 	bl	80054ca <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8005684:	4803      	ldr	r0, [pc, #12]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005686:	f7ff ff33 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800568a:	bf00      	nop
 800568c:	3730      	adds	r7, #48	@ 0x30
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40012c00 	.word	0x40012c00

08005698 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b094      	sub	sp, #80	@ 0x50
 800569c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800569e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	605a      	str	r2, [r3, #4]
 80056a8:	609a      	str	r2, [r3, #8]
 80056aa:	60da      	str	r2, [r3, #12]
 80056ac:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80056ae:	f107 031c 	add.w	r3, r7, #28
 80056b2:	2220      	movs	r2, #32
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f018 fcf8 	bl	801e0ac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056bc:	1d3b      	adds	r3, r7, #4
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	605a      	str	r2, [r3, #4]
 80056c4:	609a      	str	r2, [r3, #8]
 80056c6:	60da      	str	r2, [r3, #12]
 80056c8:	611a      	str	r2, [r3, #16]
 80056ca:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80056cc:	2001      	movs	r0, #1
 80056ce:	f7ff fbf1 	bl	8004eb4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80056d6:	2300      	movs	r3, #0
 80056d8:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 1699;
 80056da:	f240 63a3 	movw	r3, #1699	@ 0x6a3
 80056de:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80056e0:	2300      	movs	r3, #0
 80056e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80056e4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80056e8:	4619      	mov	r1, r3
 80056ea:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80056ee:	f015 fbf9 	bl	801aee4 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 80056f2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80056f6:	f7ff fc1d 	bl	8004f34 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 80056fa:	2110      	movs	r1, #16
 80056fc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005700:	f7ff fcbc 	bl	800507c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005704:	2360      	movs	r3, #96	@ 0x60
 8005706:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005708:	2300      	movs	r3, #0
 800570a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800570c:	2300      	movs	r3, #0
 800570e:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005714:	2300      	movs	r3, #0
 8005716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8005718:	f107 031c 	add.w	r3, r7, #28
 800571c:	461a      	mov	r2, r3
 800571e:	2110      	movs	r1, #16
 8005720:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005724:	f015 fc80 	bl	801b028 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8005728:	2110      	movs	r1, #16
 800572a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800572e:	f7ff fc4d 	bl	8004fcc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8005732:	2100      	movs	r1, #0
 8005734:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005738:	f7ff feb2 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800573c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005740:	f7ff fed6 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8005744:	2002      	movs	r0, #2
 8005746:	f7ff fb9d 	bl	8004e84 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800574a:	2308      	movs	r3, #8
 800574c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800574e:	2302      	movs	r3, #2
 8005750:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005756:	2300      	movs	r3, #0
 8005758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800575a:	2300      	movs	r3, #0
 800575c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800575e:	2301      	movs	r3, #1
 8005760:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005762:	1d3b      	adds	r3, r7, #4
 8005764:	4619      	mov	r1, r3
 8005766:	4803      	ldr	r0, [pc, #12]	@ (8005774 <MX_TIM2_Init+0xdc>)
 8005768:	f014 ff81 	bl	801a66e <LL_GPIO_Init>

}
 800576c:	bf00      	nop
 800576e:	3750      	adds	r7, #80	@ 0x50
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	48000400 	.word	0x48000400

08005778 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b094      	sub	sp, #80	@ 0x50
 800577c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800577e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	605a      	str	r2, [r3, #4]
 8005788:	609a      	str	r2, [r3, #8]
 800578a:	60da      	str	r2, [r3, #12]
 800578c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800578e:	f107 031c 	add.w	r3, r7, #28
 8005792:	2220      	movs	r2, #32
 8005794:	2100      	movs	r1, #0
 8005796:	4618      	mov	r0, r3
 8005798:	f018 fc88 	bl	801e0ac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800579c:	1d3b      	adds	r3, r7, #4
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	605a      	str	r2, [r3, #4]
 80057a4:	609a      	str	r2, [r3, #8]
 80057a6:	60da      	str	r2, [r3, #12]
 80057a8:	611a      	str	r2, [r3, #16]
 80057aa:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80057ac:	2002      	movs	r0, #2
 80057ae:	f7ff fb81 	bl	8004eb4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80057b6:	2300      	movs	r3, #0
 80057b8:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 1699;
 80057ba:	f240 63a3 	movw	r3, #1699	@ 0x6a3
 80057be:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80057c0:	2300      	movs	r3, #0
 80057c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80057c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80057c8:	4619      	mov	r1, r3
 80057ca:	481f      	ldr	r0, [pc, #124]	@ (8005848 <MX_TIM3_Init+0xd0>)
 80057cc:	f015 fb8a 	bl	801aee4 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 80057d0:	481d      	ldr	r0, [pc, #116]	@ (8005848 <MX_TIM3_Init+0xd0>)
 80057d2:	f7ff fbaf 	bl	8004f34 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 80057d6:	2110      	movs	r1, #16
 80057d8:	481b      	ldr	r0, [pc, #108]	@ (8005848 <MX_TIM3_Init+0xd0>)
 80057da:	f7ff fc4f 	bl	800507c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80057de:	2360      	movs	r3, #96	@ 0x60
 80057e0:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80057e2:	2300      	movs	r3, #0
 80057e4:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80057ee:	2300      	movs	r3, #0
 80057f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80057f2:	f107 031c 	add.w	r3, r7, #28
 80057f6:	461a      	mov	r2, r3
 80057f8:	2110      	movs	r1, #16
 80057fa:	4813      	ldr	r0, [pc, #76]	@ (8005848 <MX_TIM3_Init+0xd0>)
 80057fc:	f015 fc14 	bl	801b028 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8005800:	2110      	movs	r1, #16
 8005802:	4811      	ldr	r0, [pc, #68]	@ (8005848 <MX_TIM3_Init+0xd0>)
 8005804:	f7ff fbe2 	bl	8004fcc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8005808:	2100      	movs	r1, #0
 800580a:	480f      	ldr	r0, [pc, #60]	@ (8005848 <MX_TIM3_Init+0xd0>)
 800580c:	f7ff fe48 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8005810:	480d      	ldr	r0, [pc, #52]	@ (8005848 <MX_TIM3_Init+0xd0>)
 8005812:	f7ff fe6d 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8005816:	2002      	movs	r0, #2
 8005818:	f7ff fb34 	bl	8004e84 <LL_AHB2_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800581c:	2320      	movs	r3, #32
 800581e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005820:	2302      	movs	r3, #2
 8005822:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005828:	2300      	movs	r3, #0
 800582a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8005830:	2302      	movs	r3, #2
 8005832:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005834:	1d3b      	adds	r3, r7, #4
 8005836:	4619      	mov	r1, r3
 8005838:	4804      	ldr	r0, [pc, #16]	@ (800584c <MX_TIM3_Init+0xd4>)
 800583a:	f014 ff18 	bl	801a66e <LL_GPIO_Init>

}
 800583e:	bf00      	nop
 8005840:	3750      	adds	r7, #80	@ 0x50
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	40000400 	.word	0x40000400
 800584c:	48000400 	.word	0x48000400

08005850 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005856:	1d3b      	adds	r3, r7, #4
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	605a      	str	r2, [r3, #4]
 800585e:	609a      	str	r2, [r3, #8]
 8005860:	60da      	str	r2, [r3, #12]
 8005862:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8005864:	2004      	movs	r0, #4
 8005866:	f7ff fb25 	bl	8004eb4 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800586a:	f7ff fa81 	bl	8004d70 <__NVIC_GetPriorityGrouping>
 800586e:	4603      	mov	r3, r0
 8005870:	2200      	movs	r2, #0
 8005872:	2100      	movs	r1, #0
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fad1 	bl	8004e1c <NVIC_EncodePriority>
 800587a:	4603      	mov	r3, r0
 800587c:	4619      	mov	r1, r3
 800587e:	201e      	movs	r0, #30
 8005880:	f7ff faa2 	bl	8004dc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8005884:	201e      	movs	r0, #30
 8005886:	f7ff fa81 	bl	8004d8c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 169;
 800588a:	23a9      	movs	r3, #169	@ 0xa9
 800588c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800588e:	2300      	movs	r3, #0
 8005890:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8005892:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8005896:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005898:	2300      	movs	r3, #0
 800589a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 800589c:	1d3b      	adds	r3, r7, #4
 800589e:	4619      	mov	r1, r3
 80058a0:	480a      	ldr	r0, [pc, #40]	@ (80058cc <MX_TIM4_Init+0x7c>)
 80058a2:	f015 fb1f 	bl	801aee4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80058a6:	4809      	ldr	r0, [pc, #36]	@ (80058cc <MX_TIM4_Init+0x7c>)
 80058a8:	f7ff fb54 	bl	8004f54 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 80058ac:	2100      	movs	r1, #0
 80058ae:	4807      	ldr	r0, [pc, #28]	@ (80058cc <MX_TIM4_Init+0x7c>)
 80058b0:	f7ff fdcc 	bl	800544c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 80058b4:	2100      	movs	r1, #0
 80058b6:	4805      	ldr	r0, [pc, #20]	@ (80058cc <MX_TIM4_Init+0x7c>)
 80058b8:	f7ff fdf2 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80058bc:	4803      	ldr	r0, [pc, #12]	@ (80058cc <MX_TIM4_Init+0x7c>)
 80058be:	f7ff fe17 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80058c2:	bf00      	nop
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40000800 	.word	0x40000800

080058d0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08c      	sub	sp, #48	@ 0x30
 80058d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80058d6:	f107 031c 	add.w	r3, r7, #28
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	605a      	str	r2, [r3, #4]
 80058e0:	609a      	str	r2, [r3, #8]
 80058e2:	60da      	str	r2, [r3, #12]
 80058e4:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058e6:	1d3b      	adds	r3, r7, #4
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	605a      	str	r2, [r3, #4]
 80058ee:	609a      	str	r2, [r3, #8]
 80058f0:	60da      	str	r2, [r3, #12]
 80058f2:	611a      	str	r2, [r3, #16]
 80058f4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80058f6:	2008      	movs	r0, #8
 80058f8:	f7ff fadc 	bl	8004eb4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80058fc:	2001      	movs	r0, #1
 80058fe:	f7ff fac1 	bl	8004e84 <LL_AHB2_GRP1_EnableClock>
  /**TIM5 GPIO Configuration
  PA0   ------> TIM5_CH1
  PA1   ------> TIM5_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8005902:	2301      	movs	r3, #1
 8005904:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005906:	2302      	movs	r3, #2
 8005908:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800590e:	2300      	movs	r3, #0
 8005910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8005916:	2302      	movs	r3, #2
 8005918:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800591a:	1d3b      	adds	r3, r7, #4
 800591c:	4619      	mov	r1, r3
 800591e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005922:	f014 fea4 	bl	801a66e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8005926:	2302      	movs	r3, #2
 8005928:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800592a:	2302      	movs	r3, #2
 800592c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005932:	2300      	movs	r3, #0
 8005934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005936:	2300      	movs	r3, #0
 8005938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800593a:	2302      	movs	r3, #2
 800593c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800593e:	1d3b      	adds	r3, r7, #4
 8005940:	4619      	mov	r1, r3
 8005942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005946:	f014 fe92 	bl	801a66e <LL_GPIO_Init>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800594e:	2300      	movs	r3, #0
 8005950:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8005952:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005956:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005958:	2300      	movs	r3, #0
 800595a:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 800595c:	f107 031c 	add.w	r3, r7, #28
 8005960:	4619      	mov	r1, r3
 8005962:	481f      	ldr	r0, [pc, #124]	@ (80059e0 <MX_TIM5_Init+0x110>)
 8005964:	f015 fabe 	bl	801aee4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8005968:	481d      	ldr	r0, [pc, #116]	@ (80059e0 <MX_TIM5_Init+0x110>)
 800596a:	f7ff faf3 	bl	8004f54 <LL_TIM_DisableARRPreload>
  LL_TIM_SetEncoderMode(TIM5, LL_TIM_ENCODERMODE_X4_TI12);
 800596e:	2103      	movs	r1, #3
 8005970:	481b      	ldr	r0, [pc, #108]	@ (80059e0 <MX_TIM5_Init+0x110>)
 8005972:	f7ff fd80 	bl	8005476 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM5, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8005976:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800597a:	2101      	movs	r1, #1
 800597c:	4818      	ldr	r0, [pc, #96]	@ (80059e0 <MX_TIM5_Init+0x110>)
 800597e:	f7ff fbef 	bl	8005160 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM5, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8005982:	2200      	movs	r2, #0
 8005984:	2101      	movs	r1, #1
 8005986:	4816      	ldr	r0, [pc, #88]	@ (80059e0 <MX_TIM5_Init+0x110>)
 8005988:	f7ff fc4a 	bl	8005220 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM5, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 800598c:	2200      	movs	r2, #0
 800598e:	2101      	movs	r1, #1
 8005990:	4813      	ldr	r0, [pc, #76]	@ (80059e0 <MX_TIM5_Init+0x110>)
 8005992:	f7ff fca5 	bl	80052e0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM5, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8005996:	2200      	movs	r2, #0
 8005998:	2101      	movs	r1, #1
 800599a:	4811      	ldr	r0, [pc, #68]	@ (80059e0 <MX_TIM5_Init+0x110>)
 800599c:	f7ff fd00 	bl	80053a0 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM5, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80059a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80059a4:	2110      	movs	r1, #16
 80059a6:	480e      	ldr	r0, [pc, #56]	@ (80059e0 <MX_TIM5_Init+0x110>)
 80059a8:	f7ff fbda 	bl	8005160 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM5, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 80059ac:	2200      	movs	r2, #0
 80059ae:	2110      	movs	r1, #16
 80059b0:	480b      	ldr	r0, [pc, #44]	@ (80059e0 <MX_TIM5_Init+0x110>)
 80059b2:	f7ff fc35 	bl	8005220 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM5, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 80059b6:	2200      	movs	r2, #0
 80059b8:	2110      	movs	r1, #16
 80059ba:	4809      	ldr	r0, [pc, #36]	@ (80059e0 <MX_TIM5_Init+0x110>)
 80059bc:	f7ff fc90 	bl	80052e0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM5, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 80059c0:	2200      	movs	r2, #0
 80059c2:	2110      	movs	r1, #16
 80059c4:	4806      	ldr	r0, [pc, #24]	@ (80059e0 <MX_TIM5_Init+0x110>)
 80059c6:	f7ff fceb 	bl	80053a0 <LL_TIM_IC_SetPolarity>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 80059ca:	2100      	movs	r1, #0
 80059cc:	4804      	ldr	r0, [pc, #16]	@ (80059e0 <MX_TIM5_Init+0x110>)
 80059ce:	f7ff fd67 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 80059d2:	4803      	ldr	r0, [pc, #12]	@ (80059e0 <MX_TIM5_Init+0x110>)
 80059d4:	f7ff fd8c 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80059d8:	bf00      	nop
 80059da:	3730      	adds	r7, #48	@ 0x30
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40000c00 	.word	0x40000c00

080059e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80059ea:	1d3b      	adds	r3, r7, #4
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	609a      	str	r2, [r3, #8]
 80059f4:	60da      	str	r2, [r3, #12]
 80059f6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 80059f8:	2010      	movs	r0, #16
 80059fa:	f7ff fa5b 	bl	8004eb4 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80059fe:	f7ff f9b7 	bl	8004d70 <__NVIC_GetPriorityGrouping>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2200      	movs	r2, #0
 8005a06:	2100      	movs	r1, #0
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7ff fa07 	bl	8004e1c <NVIC_EncodePriority>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	4619      	mov	r1, r3
 8005a12:	2036      	movs	r0, #54	@ 0x36
 8005a14:	f7ff f9d8 	bl	8004dc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005a18:	2036      	movs	r0, #54	@ 0x36
 8005a1a:	f7ff f9b7 	bl	8004d8c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 169;
 8005a1e:	23a9      	movs	r3, #169	@ 0xa9
 8005a20:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 249;
 8005a26:	23f9      	movs	r3, #249	@ 0xf9
 8005a28:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8005a2a:	1d3b      	adds	r3, r7, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4808      	ldr	r0, [pc, #32]	@ (8005a50 <MX_TIM6_Init+0x6c>)
 8005a30:	f015 fa58 	bl	801aee4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8005a34:	4806      	ldr	r0, [pc, #24]	@ (8005a50 <MX_TIM6_Init+0x6c>)
 8005a36:	f7ff fa8d 	bl	8004f54 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	4804      	ldr	r0, [pc, #16]	@ (8005a50 <MX_TIM6_Init+0x6c>)
 8005a3e:	f7ff fd2f 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8005a42:	4803      	ldr	r0, [pc, #12]	@ (8005a50 <MX_TIM6_Init+0x6c>)
 8005a44:	f7ff fd54 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005a48:	bf00      	nop
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	40001000 	.word	0x40001000

08005a54 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005a5a:	1d3b      	adds	r3, r7, #4
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	605a      	str	r2, [r3, #4]
 8005a62:	609a      	str	r2, [r3, #8]
 8005a64:	60da      	str	r2, [r3, #12]
 8005a66:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8005a68:	2020      	movs	r0, #32
 8005a6a:	f7ff fa23 	bl	8004eb4 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005a6e:	f7ff f97f 	bl	8004d70 <__NVIC_GetPriorityGrouping>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2200      	movs	r2, #0
 8005a76:	2100      	movs	r1, #0
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff f9cf 	bl	8004e1c <NVIC_EncodePriority>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	4619      	mov	r1, r3
 8005a82:	2037      	movs	r0, #55	@ 0x37
 8005a84:	f7ff f9a0 	bl	8004dc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8005a88:	2037      	movs	r0, #55	@ 0x37
 8005a8a:	f7ff f97f 	bl	8004d8c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 169;
 8005a8e:	23a9      	movs	r3, #169	@ 0xa9
 8005a90:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 249;
 8005a96:	23f9      	movs	r3, #249	@ 0xf9
 8005a98:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8005a9a:	1d3b      	adds	r3, r7, #4
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4808      	ldr	r0, [pc, #32]	@ (8005ac0 <MX_TIM7_Init+0x6c>)
 8005aa0:	f015 fa20 	bl	801aee4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 8005aa4:	4806      	ldr	r0, [pc, #24]	@ (8005ac0 <MX_TIM7_Init+0x6c>)
 8005aa6:	f7ff fa55 	bl	8004f54 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8005aaa:	2100      	movs	r1, #0
 8005aac:	4804      	ldr	r0, [pc, #16]	@ (8005ac0 <MX_TIM7_Init+0x6c>)
 8005aae:	f7ff fcf7 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8005ab2:	4803      	ldr	r0, [pc, #12]	@ (8005ac0 <MX_TIM7_Init+0x6c>)
 8005ab4:	f7ff fd1c 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005ab8:	bf00      	nop
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40001400 	.word	0x40001400

08005ac4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b0a0      	sub	sp, #128	@ 0x80
 8005ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005aca:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	605a      	str	r2, [r3, #4]
 8005ad4:	609a      	str	r2, [r3, #8]
 8005ad6:	60da      	str	r2, [r3, #12]
 8005ad8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005ada:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005ade:	2220      	movs	r2, #32
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f018 fae2 	bl	801e0ac <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8005ae8:	f107 031c 	add.w	r3, r7, #28
 8005aec:	2230      	movs	r2, #48	@ 0x30
 8005aee:	2100      	movs	r1, #0
 8005af0:	4618      	mov	r0, r3
 8005af2:	f018 fadb 	bl	801e0ac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005af6:	1d3b      	adds	r3, r7, #4
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	605a      	str	r2, [r3, #4]
 8005afe:	609a      	str	r2, [r3, #8]
 8005b00:	60da      	str	r2, [r3, #12]
 8005b02:	611a      	str	r2, [r3, #16]
 8005b04:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8005b06:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005b0a:	f7ff f9eb 	bl	8004ee4 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005b14:	2300      	movs	r3, #0
 8005b16:	673b      	str	r3, [r7, #112]	@ 0x70
  TIM_InitStruct.Autoreload = 1699;
 8005b18:	f240 63a3 	movw	r3, #1699	@ 0x6a3
 8005b1c:	677b      	str	r3, [r7, #116]	@ 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	67bb      	str	r3, [r7, #120]	@ 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	67fb      	str	r3, [r7, #124]	@ 0x7c
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8005b26:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4836      	ldr	r0, [pc, #216]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005b2e:	f015 f9d9 	bl	801aee4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 8005b32:	4835      	ldr	r0, [pc, #212]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005b34:	f7ff fa0e 	bl	8004f54 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH1);
 8005b38:	2101      	movs	r1, #1
 8005b3a:	4833      	ldr	r0, [pc, #204]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005b3c:	f7ff fa9e 	bl	800507c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005b40:	2360      	movs	r3, #96	@ 0x60
 8005b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005b44:	2300      	movs	r3, #0
 8005b46:	653b      	str	r3, [r7, #80]	@ 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	657b      	str	r3, [r7, #84]	@ 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005b50:	2300      	movs	r3, #0
 8005b52:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005b54:	2300      	movs	r3, #0
 8005b56:	663b      	str	r3, [r7, #96]	@ 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	667b      	str	r3, [r7, #100]	@ 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	66bb      	str	r3, [r7, #104]	@ 0x68
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005b60:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005b64:	461a      	mov	r2, r3
 8005b66:	2101      	movs	r1, #1
 8005b68:	4827      	ldr	r0, [pc, #156]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005b6a:	f015 fa5d 	bl	801b028 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH1);
 8005b6e:	2101      	movs	r1, #1
 8005b70:	4825      	ldr	r0, [pc, #148]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005b72:	f7ff fa2b 	bl	8004fcc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 8005b76:	2100      	movs	r1, #0
 8005b78:	4823      	ldr	r0, [pc, #140]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005b7a:	f7ff fc91 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM8, LL_TIM_TRGO2_RESET);
 8005b7e:	2100      	movs	r1, #0
 8005b80:	4821      	ldr	r0, [pc, #132]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005b82:	f7ff fca2 	bl	80054ca <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8005b86:	4820      	ldr	r0, [pc, #128]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005b88:	f7ff fcb2 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8005b90:	2300      	movs	r3, #0
 8005b92:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8005b94:	2300      	movs	r3, #0
 8005b96:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8005ba2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	633b      	str	r3, [r7, #48]	@ 0x30
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8005bac:	2300      	movs	r3, #0
 8005bae:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8005bb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8005bc6:	f107 031c 	add.w	r3, r7, #28
 8005bca:	4619      	mov	r1, r3
 8005bcc:	480e      	ldr	r0, [pc, #56]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005bce:	f015 fa8b 	bl	801b0e8 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8005bd2:	2001      	movs	r0, #1
 8005bd4:	f7ff f956 	bl	8004e84 <LL_AHB2_GRP1_EnableClock>
    /**TIM8 GPIO Configuration
    PA15     ------> TIM8_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8005bd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005bde:	2302      	movs	r3, #2
 8005be0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8005bee:	2302      	movs	r3, #2
 8005bf0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bf2:	1d3b      	adds	r3, r7, #4
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005bfa:	f014 fd38 	bl	801a66e <LL_GPIO_Init>

}
 8005bfe:	bf00      	nop
 8005c00:	3780      	adds	r7, #128	@ 0x80
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	40013400 	.word	0x40013400

08005c0c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005c12:	1d3b      	adds	r3, r7, #4
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	605a      	str	r2, [r3, #4]
 8005c1a:	609a      	str	r2, [r3, #8]
 8005c1c:	60da      	str	r2, [r3, #12]
 8005c1e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM15);
 8005c20:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005c24:	f7ff f95e 	bl	8004ee4 <LL_APB2_GRP1_EnableClock>

  /* TIM15 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005c28:	f7ff f8a2 	bl	8004d70 <__NVIC_GetPriorityGrouping>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2100      	movs	r1, #0
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff f8f2 	bl	8004e1c <NVIC_EncodePriority>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	2018      	movs	r0, #24
 8005c3e:	f7ff f8c3 	bl	8004dc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005c42:	2018      	movs	r0, #24
 8005c44:	f7ff f8a2 	bl	8004d8c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  TIM_InitStruct.Prescaler = 169;
 8005c48:	23a9      	movs	r3, #169	@ 0xa9
 8005c4a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 9999;
 8005c50:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c54:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005c56:	2300      	movs	r3, #0
 8005c58:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM15, &TIM_InitStruct);
 8005c5e:	1d3b      	adds	r3, r7, #4
 8005c60:	4619      	mov	r1, r3
 8005c62:	480a      	ldr	r0, [pc, #40]	@ (8005c8c <MX_TIM15_Init+0x80>)
 8005c64:	f015 f93e 	bl	801aee4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM15);
 8005c68:	4808      	ldr	r0, [pc, #32]	@ (8005c8c <MX_TIM15_Init+0x80>)
 8005c6a:	f7ff f973 	bl	8004f54 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM15, LL_TIM_CLOCKSOURCE_INTERNAL);
 8005c6e:	2100      	movs	r1, #0
 8005c70:	4806      	ldr	r0, [pc, #24]	@ (8005c8c <MX_TIM15_Init+0x80>)
 8005c72:	f7ff fbeb 	bl	800544c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM15, LL_TIM_TRGO_RESET);
 8005c76:	2100      	movs	r1, #0
 8005c78:	4804      	ldr	r0, [pc, #16]	@ (8005c8c <MX_TIM15_Init+0x80>)
 8005c7a:	f7ff fc11 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM15);
 8005c7e:	4803      	ldr	r0, [pc, #12]	@ (8005c8c <MX_TIM15_Init+0x80>)
 8005c80:	f7ff fc36 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8005c84:	bf00      	nop
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40014000 	.word	0x40014000

08005c90 <TIMER_init>:

/* USER CODE BEGIN 1 */
void TIMER_init(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
  //sensor gyro
  LL_TIM_EnableIT_UPDATE(TIM6);
 8005c94:	481d      	ldr	r0, [pc, #116]	@ (8005d0c <TIMER_init+0x7c>)
 8005c96:	f7ff fc4b 	bl	8005530 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 8005c9a:	481c      	ldr	r0, [pc, #112]	@ (8005d0c <TIMER_init+0x7c>)
 8005c9c:	f7ff f93a 	bl	8004f14 <LL_TIM_EnableCounter>
  //wall sensor
  LL_TIM_EnableIT_UPDATE(TIM7);
 8005ca0:	481b      	ldr	r0, [pc, #108]	@ (8005d10 <TIMER_init+0x80>)
 8005ca2:	f7ff fc45 	bl	8005530 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM7);
 8005ca6:	481a      	ldr	r0, [pc, #104]	@ (8005d10 <TIMER_init+0x80>)
 8005ca8:	f7ff f934 	bl	8004f14 <LL_TIM_EnableCounter>
  //batt_LV
  LL_TIM_EnableIT_UPDATE(TIM15);
 8005cac:	4819      	ldr	r0, [pc, #100]	@ (8005d14 <TIMER_init+0x84>)
 8005cae:	f7ff fc3f 	bl	8005530 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM15);
 8005cb2:	4818      	ldr	r0, [pc, #96]	@ (8005d14 <TIMER_init+0x84>)
 8005cb4:	f7ff f92e 	bl	8004f14 <LL_TIM_EnableCounter>

  //encoder
  LL_TIM_EnableCounter(TIM1);
 8005cb8:	4817      	ldr	r0, [pc, #92]	@ (8005d18 <TIMER_init+0x88>)
 8005cba:	f7ff f92b 	bl	8004f14 <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM5);
 8005cbe:	4817      	ldr	r0, [pc, #92]	@ (8005d1c <TIMER_init+0x8c>)
 8005cc0:	f7ff f928 	bl	8004f14 <LL_TIM_EnableCounter>
  //motor
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8005cc4:	2110      	movs	r1, #16
 8005cc6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005cca:	f7ff f96d 	bl	8004fa8 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM2);
 8005cce:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005cd2:	f7ff f91f 	bl	8004f14 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH2);
 8005cd6:	2110      	movs	r1, #16
 8005cd8:	4811      	ldr	r0, [pc, #68]	@ (8005d20 <TIMER_init+0x90>)
 8005cda:	f7ff f965 	bl	8004fa8 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM3);
 8005cde:	4810      	ldr	r0, [pc, #64]	@ (8005d20 <TIMER_init+0x90>)
 8005ce0:	f7ff f918 	bl	8004f14 <LL_TIM_EnableCounter>
  //fan
  LL_TIM_EnableAllOutputs(TIM8);
 8005ce4:	480f      	ldr	r0, [pc, #60]	@ (8005d24 <TIMER_init+0x94>)
 8005ce6:	f7ff fc13 	bl	8005510 <LL_TIM_EnableAllOutputs>
  LL_TIM_CC_EnableChannel(TIM8, LL_TIM_CHANNEL_CH3);
 8005cea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005cee:	480d      	ldr	r0, [pc, #52]	@ (8005d24 <TIMER_init+0x94>)
 8005cf0:	f7ff f95a 	bl	8004fa8 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM8);
 8005cf4:	480b      	ldr	r0, [pc, #44]	@ (8005d24 <TIMER_init+0x94>)
 8005cf6:	f7ff f90d 	bl	8004f14 <LL_TIM_EnableCounter>
  //ctrl
  LL_TIM_EnableIT_UPDATE(TIM4);
 8005cfa:	480b      	ldr	r0, [pc, #44]	@ (8005d28 <TIMER_init+0x98>)
 8005cfc:	f7ff fc18 	bl	8005530 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM4);
 8005d00:	4809      	ldr	r0, [pc, #36]	@ (8005d28 <TIMER_init+0x98>)
 8005d02:	f7ff f907 	bl	8004f14 <LL_TIM_EnableCounter>
}
 8005d06:	bf00      	nop
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	40001000 	.word	0x40001000
 8005d10:	40001400 	.word	0x40001400
 8005d14:	40014000 	.word	0x40014000
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40000c00 	.word	0x40000c00
 8005d20:	40000400 	.word	0x40000400
 8005d24:	40013400 	.word	0x40013400
 8005d28:	40000800 	.word	0x40000800

08005d2c <Enable_TIM2>:

void Enable_TIM2(void){
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
  LL_TIM_EnableCounter(TIM2);
 8005d30:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005d34:	f7ff f8ee 	bl	8004f14 <LL_TIM_EnableCounter>
}
 8005d38:	bf00      	nop
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <Enable_TIM3>:

void Disable_TIM2(void){
  LL_TIM_DisableCounter(TIM2);
}

void Enable_TIM3(void){
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
  LL_TIM_EnableCounter(TIM3);
 8005d40:	4802      	ldr	r0, [pc, #8]	@ (8005d4c <Enable_TIM3+0x10>)
 8005d42:	f7ff f8e7 	bl	8004f14 <LL_TIM_EnableCounter>
}
 8005d46:	bf00      	nop
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40000400 	.word	0x40000400

08005d50 <Set_DutyTIM2>:

void Disable_TIM5(void){
  LL_TIM_DisableCounter(TIM5);
}

void Set_DutyTIM2(uint16_t duty){
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	4603      	mov	r3, r0
 8005d58:	80fb      	strh	r3, [r7, #6]
  uint16_t compare = (float)duty/1000.0*1699.0;
 8005d5a:	88fb      	ldrh	r3, [r7, #6]
 8005d5c:	ee07 3a90 	vmov	s15, r3
 8005d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d64:	ee17 0a90 	vmov	r0, s15
 8005d68:	f7fa fc16 	bl	8000598 <__aeabi_f2d>
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	4b15      	ldr	r3, [pc, #84]	@ (8005dc8 <Set_DutyTIM2+0x78>)
 8005d72:	f7fa fd93 	bl	800089c <__aeabi_ddiv>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	a310      	add	r3, pc, #64	@ (adr r3, 8005dc0 <Set_DutyTIM2+0x70>)
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	f7fa fc60 	bl	8000648 <__aeabi_dmul>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	4619      	mov	r1, r3
 8005d90:	f7fa ff32 	bl	8000bf8 <__aeabi_d2uiz>
 8005d94:	4603      	mov	r3, r0
 8005d96:	81fb      	strh	r3, [r7, #14]
  if(compare>1699){
 8005d98:	89fb      	ldrh	r3, [r7, #14]
 8005d9a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d902      	bls.n	8005da8 <Set_DutyTIM2+0x58>
    compare = 1699;
 8005da2:	f240 63a3 	movw	r3, #1699	@ 0x6a3
 8005da6:	81fb      	strh	r3, [r7, #14]
  }
  LL_TIM_OC_SetCompareCH2(TIM2,compare);
 8005da8:	89fb      	ldrh	r3, [r7, #14]
 8005daa:	4619      	mov	r1, r3
 8005dac:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005db0:	f7ff f9ba 	bl	8005128 <LL_TIM_OC_SetCompareCH2>
}
 8005db4:	bf00      	nop
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	f3af 8000 	nop.w
 8005dc0:	00000000 	.word	0x00000000
 8005dc4:	409a8c00 	.word	0x409a8c00
 8005dc8:	408f4000 	.word	0x408f4000
 8005dcc:	00000000 	.word	0x00000000

08005dd0 <Set_DutyTIM3>:

void Set_DutyTIM3(uint16_t duty){
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	80fb      	strh	r3, [r7, #6]
  uint16_t compare = (float)duty/1000.0*1699.0;
 8005dda:	88fb      	ldrh	r3, [r7, #6]
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de4:	ee17 0a90 	vmov	r0, s15
 8005de8:	f7fa fbd6 	bl	8000598 <__aeabi_f2d>
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	4b15      	ldr	r3, [pc, #84]	@ (8005e48 <Set_DutyTIM3+0x78>)
 8005df2:	f7fa fd53 	bl	800089c <__aeabi_ddiv>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	a310      	add	r3, pc, #64	@ (adr r3, 8005e40 <Set_DutyTIM3+0x70>)
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f7fa fc20 	bl	8000648 <__aeabi_dmul>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	4619      	mov	r1, r3
 8005e10:	f7fa fef2 	bl	8000bf8 <__aeabi_d2uiz>
 8005e14:	4603      	mov	r3, r0
 8005e16:	81fb      	strh	r3, [r7, #14]
  if(compare>1699){
 8005e18:	89fb      	ldrh	r3, [r7, #14]
 8005e1a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d902      	bls.n	8005e28 <Set_DutyTIM3+0x58>
    compare = 1699;
 8005e22:	f240 63a3 	movw	r3, #1699	@ 0x6a3
 8005e26:	81fb      	strh	r3, [r7, #14]
  }
  LL_TIM_OC_SetCompareCH2(TIM3,compare);
 8005e28:	89fb      	ldrh	r3, [r7, #14]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4807      	ldr	r0, [pc, #28]	@ (8005e4c <Set_DutyTIM3+0x7c>)
 8005e2e:	f7ff f97b 	bl	8005128 <LL_TIM_OC_SetCompareCH2>
}
 8005e32:	bf00      	nop
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	f3af 8000 	nop.w
 8005e40:	00000000 	.word	0x00000000
 8005e44:	409a8c00 	.word	0x409a8c00
 8005e48:	408f4000 	.word	0x408f4000
 8005e4c:	40000400 	.word	0x40000400

08005e50 <Clear_CounterTIM1>:
{
  LL_TIM_SetCounter(TIM3,0);
}

void Clear_CounterTIM1(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  LL_TIM_SetCounter(TIM1,ENC_RESET_VAL);
 8005e54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e58:	4802      	ldr	r0, [pc, #8]	@ (8005e64 <Clear_CounterTIM1+0x14>)
 8005e5a:	f7ff f88b 	bl	8004f74 <LL_TIM_SetCounter>
}
 8005e5e:	bf00      	nop
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40012c00 	.word	0x40012c00

08005e68 <Clear_CounterTIM5>:

void Clear_CounterTIM5(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
  LL_TIM_SetCounter(TIM5,ENC_RESET_VAL);
 8005e6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e70:	4802      	ldr	r0, [pc, #8]	@ (8005e7c <Clear_CounterTIM5+0x14>)
 8005e72:	f7ff f87f 	bl	8004f74 <LL_TIM_SetCounter>
}
 8005e76:	bf00      	nop
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40000c00 	.word	0x40000c00

08005e80 <Set_DutyTIM8>:

void Disable_TIM8(void){
  LL_TIM_DisableCounter(TIM8);
}

void Set_DutyTIM8(uint16_t duty){
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	4603      	mov	r3, r0
 8005e88:	80fb      	strh	r3, [r7, #6]
  uint16_t compare = (float)duty/1000.0*1699.0;
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	ee07 3a90 	vmov	s15, r3
 8005e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e94:	ee17 0a90 	vmov	r0, s15
 8005e98:	f7fa fb7e 	bl	8000598 <__aeabi_f2d>
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	4b15      	ldr	r3, [pc, #84]	@ (8005ef8 <Set_DutyTIM8+0x78>)
 8005ea2:	f7fa fcfb 	bl	800089c <__aeabi_ddiv>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4610      	mov	r0, r2
 8005eac:	4619      	mov	r1, r3
 8005eae:	a310      	add	r3, pc, #64	@ (adr r3, 8005ef0 <Set_DutyTIM8+0x70>)
 8005eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb4:	f7fa fbc8 	bl	8000648 <__aeabi_dmul>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	f7fa fe9a 	bl	8000bf8 <__aeabi_d2uiz>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	81fb      	strh	r3, [r7, #14]
  if(compare>1699){
 8005ec8:	89fb      	ldrh	r3, [r7, #14]
 8005eca:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d902      	bls.n	8005ed8 <Set_DutyTIM8+0x58>
    compare = 1699;
 8005ed2:	f240 63a3 	movw	r3, #1699	@ 0x6a3
 8005ed6:	81fb      	strh	r3, [r7, #14]
  }
  LL_TIM_OC_SetCompareCH3(TIM8,compare);
 8005ed8:	89fb      	ldrh	r3, [r7, #14]
 8005eda:	4619      	mov	r1, r3
 8005edc:	4807      	ldr	r0, [pc, #28]	@ (8005efc <Set_DutyTIM8+0x7c>)
 8005ede:	f7ff f931 	bl	8005144 <LL_TIM_OC_SetCompareCH3>
}
 8005ee2:	bf00      	nop
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	f3af 8000 	nop.w
 8005ef0:	00000000 	.word	0x00000000
 8005ef4:	409a8c00 	.word	0x409a8c00
 8005ef8:	408f4000 	.word	0x408f4000
 8005efc:	40013400 	.word	0x40013400

08005f00 <Get_CounterTIM1>:

uint16_t Get_CounterTIM1(void){
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  return LL_TIM_GetCounter(TIM1);
 8005f04:	4803      	ldr	r0, [pc, #12]	@ (8005f14 <Get_CounterTIM1+0x14>)
 8005f06:	f7ff f843 	bl	8004f90 <LL_TIM_GetCounter>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	b29b      	uxth	r3, r3
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	40012c00 	.word	0x40012c00

08005f18 <Get_CounterTIM5>:

uint16_t Get_CounterTIM5(void){
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
  return LL_TIM_GetCounter(TIM5);
 8005f1c:	4803      	ldr	r0, [pc, #12]	@ (8005f2c <Get_CounterTIM5+0x14>)
 8005f1e:	f7ff f837 	bl	8004f90 <LL_TIM_GetCounter>
 8005f22:	4603      	mov	r3, r0
 8005f24:	b29b      	uxth	r3, r3
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	40000c00 	.word	0x40000c00

08005f30 <LL_RCC_SetUSARTClockSource>:
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8005f38:	4b09      	ldr	r3, [pc, #36]	@ (8005f60 <LL_RCC_SetUSARTClockSource+0x30>)
 8005f3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	0c1b      	lsrs	r3, r3, #16
 8005f42:	43db      	mvns	r3, r3
 8005f44:	401a      	ands	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	4905      	ldr	r1, [pc, #20]	@ (8005f60 <LL_RCC_SetUSARTClockSource+0x30>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	40021000 	.word	0x40021000

08005f64 <LL_AHB2_GRP1_EnableClock>:
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005f6c:	4b08      	ldr	r3, [pc, #32]	@ (8005f90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005f6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f70:	4907      	ldr	r1, [pc, #28]	@ (8005f90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005f78:	4b05      	ldr	r3, [pc, #20]	@ (8005f90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005f7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005f82:	68fb      	ldr	r3, [r7, #12]
}
 8005f84:	bf00      	nop
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	40021000 	.word	0x40021000

08005f94 <LL_APB2_GRP1_EnableClock>:
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005f9c:	4b08      	ldr	r3, [pc, #32]	@ (8005fc0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005f9e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005fa0:	4907      	ldr	r1, [pc, #28]	@ (8005fc0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005fa8:	4b05      	ldr	r3, [pc, #20]	@ (8005fc0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005faa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4013      	ands	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	40021000 	.word	0x40021000

08005fc4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f043 0201 	orr.w	r2, r3, #1
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	601a      	str	r2, [r3, #0]
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8006004:	b480      	push	{r7}
 8006006:	b089      	sub	sp, #36	@ 0x24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3308      	adds	r3, #8
 8006012:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	60bb      	str	r3, [r7, #8]
   return(result);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	075b      	lsls	r3, r3, #29
 8006026:	4313      	orrs	r3, r2
 8006028:	61fb      	str	r3, [r7, #28]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3308      	adds	r3, #8
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	61ba      	str	r2, [r7, #24]
 8006032:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006034:	6979      	ldr	r1, [r7, #20]
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	e841 2300 	strex	r3, r2, [r1]
 800603c:	613b      	str	r3, [r7, #16]
   return(result);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1e4      	bne.n	800600e <LL_USART_SetTXFIFOThreshold+0xa>
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	3724      	adds	r7, #36	@ 0x24
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8006052:	b480      	push	{r7}
 8006054:	b089      	sub	sp, #36	@ 0x24
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3308      	adds	r3, #8
 8006060:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	60bb      	str	r3, [r7, #8]
   return(result);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	065b      	lsls	r3, r3, #25
 8006074:	4313      	orrs	r3, r2
 8006076:	61fb      	str	r3, [r7, #28]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3308      	adds	r3, #8
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	61ba      	str	r2, [r7, #24]
 8006080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006082:	6979      	ldr	r1, [r7, #20]
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	613b      	str	r3, [r7, #16]
   return(result);
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1e4      	bne.n	800605c <LL_USART_SetRXFIFOThreshold+0xa>
}
 8006092:	bf00      	nop
 8006094:	bf00      	nop
 8006096:	3724      	adds	r7, #36	@ 0x24
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	609a      	str	r2, [r3, #8]
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060dc:	2b80      	cmp	r3, #128	@ 0x80
 80060de:	d101      	bne.n	80060e4 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80060e0:	2301      	movs	r3, #1
 80060e2:	e000      	b.n	80060e6 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006102:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006106:	d101      	bne.n	800610c <LL_USART_IsActiveFlag_TEACK+0x1a>
 8006108:	2301      	movs	r3, #1
 800610a:	e000      	b.n	800610e <LL_USART_IsActiveFlag_TEACK+0x1c>
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800612a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800612e:	d101      	bne.n	8006134 <LL_USART_IsActiveFlag_REACK+0x1a>
 8006130:	2301      	movs	r3, #1
 8006132:	e000      	b.n	8006136 <LL_USART_IsActiveFlag_REACK+0x1c>
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	460b      	mov	r3, r1
 800614c:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800614e:	78fa      	ldrb	r2, [r7, #3]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08e      	sub	sp, #56	@ 0x38
 8006164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8006166:	f107 0318 	add.w	r3, r7, #24
 800616a:	2220      	movs	r2, #32
 800616c:	2100      	movs	r1, #0
 800616e:	4618      	mov	r0, r3
 8006170:	f017 ff9c 	bl	801e0ac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006174:	463b      	mov	r3, r7
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	605a      	str	r2, [r3, #4]
 800617c:	609a      	str	r2, [r3, #8]
 800617e:	60da      	str	r2, [r3, #12]
 8006180:	611a      	str	r2, [r3, #16]
 8006182:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 8006184:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8006188:	f7ff fed2 	bl	8005f30 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800618c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006190:	f7ff ff00 	bl	8005f94 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006194:	2002      	movs	r0, #2
 8006196:	f7ff fee5 	bl	8005f64 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800619a:	2340      	movs	r3, #64	@ 0x40
 800619c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800619e:	2302      	movs	r3, #2
 80061a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80061aa:	2300      	movs	r3, #0
 80061ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80061ae:	2307      	movs	r3, #7
 80061b0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061b2:	463b      	mov	r3, r7
 80061b4:	4619      	mov	r1, r3
 80061b6:	4827      	ldr	r0, [pc, #156]	@ (8006254 <MX_USART1_UART_Init+0xf4>)
 80061b8:	f014 fa59 	bl	801a66e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80061bc:	2380      	movs	r3, #128	@ 0x80
 80061be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80061c0:	2302      	movs	r3, #2
 80061c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80061c4:	2300      	movs	r3, #0
 80061c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80061cc:	2300      	movs	r3, #0
 80061ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80061d0:	2307      	movs	r3, #7
 80061d2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061d4:	463b      	mov	r3, r7
 80061d6:	4619      	mov	r1, r3
 80061d8:	481e      	ldr	r0, [pc, #120]	@ (8006254 <MX_USART1_UART_Init+0xf4>)
 80061da:	f014 fa48 	bl	801a66e <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80061de:	2300      	movs	r3, #0
 80061e0:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.BaudRate = 921600;
 80061e2:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 80061e6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80061e8:	2300      	movs	r3, #0
 80061ea:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80061ec:	2300      	movs	r3, #0
 80061ee:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80061f0:	2300      	movs	r3, #0
 80061f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80061f4:	230c      	movs	r3, #12
 80061f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80061f8:	2300      	movs	r3, #0
 80061fa:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80061fc:	2300      	movs	r3, #0
 80061fe:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8006200:	f107 0318 	add.w	r3, r7, #24
 8006204:	4619      	mov	r1, r3
 8006206:	4814      	ldr	r0, [pc, #80]	@ (8006258 <MX_USART1_UART_Init+0xf8>)
 8006208:	f015 fb82 	bl	801b910 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 800620c:	2100      	movs	r1, #0
 800620e:	4812      	ldr	r0, [pc, #72]	@ (8006258 <MX_USART1_UART_Init+0xf8>)
 8006210:	f7ff fef8 	bl	8006004 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8006214:	2100      	movs	r1, #0
 8006216:	4810      	ldr	r0, [pc, #64]	@ (8006258 <MX_USART1_UART_Init+0xf8>)
 8006218:	f7ff ff1b 	bl	8006052 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 800621c:	480e      	ldr	r0, [pc, #56]	@ (8006258 <MX_USART1_UART_Init+0xf8>)
 800621e:	f7ff fee1 	bl	8005fe4 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 8006222:	480d      	ldr	r0, [pc, #52]	@ (8006258 <MX_USART1_UART_Init+0xf8>)
 8006224:	f7ff ff3c 	bl	80060a0 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 8006228:	480b      	ldr	r0, [pc, #44]	@ (8006258 <MX_USART1_UART_Init+0xf8>)
 800622a:	f7ff fecb 	bl	8005fc4 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 800622e:	bf00      	nop
 8006230:	4809      	ldr	r0, [pc, #36]	@ (8006258 <MX_USART1_UART_Init+0xf8>)
 8006232:	f7ff ff5e 	bl	80060f2 <LL_USART_IsActiveFlag_TEACK>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0f9      	beq.n	8006230 <MX_USART1_UART_Init+0xd0>
 800623c:	4806      	ldr	r0, [pc, #24]	@ (8006258 <MX_USART1_UART_Init+0xf8>)
 800623e:	f7ff ff6c 	bl	800611a <LL_USART_IsActiveFlag_REACK>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0f3      	beq.n	8006230 <MX_USART1_UART_Init+0xd0>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006248:	bf00      	nop
 800624a:	bf00      	nop
 800624c:	3738      	adds	r7, #56	@ 0x38
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	48000400 	.word	0x48000400
 8006258:	40013800 	.word	0x40013800

0800625c <Communication_Initialize>:

/* USER CODE BEGIN 1 */
void Communication_Initialize(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
    setbuf(stdout,NULL);
 8006260:	4b04      	ldr	r3, [pc, #16]	@ (8006274 <Communication_Initialize+0x18>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	2100      	movs	r1, #0
 8006268:	4618      	mov	r0, r3
 800626a:	f017 fd6b 	bl	801dd44 <setbuf>
}
 800626e:	bf00      	nop
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	2000003c 	.word	0x2000003c

08006278 <USART_TransmitByte>:

void USART_TransmitByte(uint8_t ch){
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	4603      	mov	r3, r0
 8006280:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART1,ch);
 8006282:	79fb      	ldrb	r3, [r7, #7]
 8006284:	4619      	mov	r1, r3
 8006286:	4807      	ldr	r0, [pc, #28]	@ (80062a4 <USART_TransmitByte+0x2c>)
 8006288:	f7ff ff5b 	bl	8006142 <LL_USART_TransmitData8>
	while(LL_USART_IsActiveFlag_TXE(USART1)==0);
 800628c:	bf00      	nop
 800628e:	4805      	ldr	r0, [pc, #20]	@ (80062a4 <USART_TransmitByte+0x2c>)
 8006290:	f7ff ff1c 	bl	80060cc <LL_USART_IsActiveFlag_TXE_TXFNF>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f9      	beq.n	800628e <USART_TransmitByte+0x16>
}
 800629a:	bf00      	nop
 800629c:	bf00      	nop
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	40013800 	.word	0x40013800

080062a8 <Get_NowSpeed>:
float	EscapeWait;

uint8_t	uc_DistControl;	//スラロームの前距離を伸ばして処理している箇所　意外と効いてる可能性あり


float Get_NowSpeed(void){
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
	return f_NowSpeed;
 80062ac:	4b04      	ldr	r3, [pc, #16]	@ (80062c0 <Get_NowSpeed+0x18>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	ee07 3a90 	vmov	s15, r3
}
 80062b4:	eeb0 0a67 	vmov.f32	s0, s15
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	20000370 	.word	0x20000370

080062c4 <Get_NowDist>:

float Get_NowDist(void){
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
	return f_NowDist;
 80062c8:	4b04      	ldr	r3, [pc, #16]	@ (80062dc <Get_NowDist+0x18>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	ee07 3a90 	vmov	s15, r3
}
 80062d0:	eeb0 0a67 	vmov.f32	s0, s15
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	20000394 	.word	0x20000394

080062e0 <Get_TrgtDist>:

float Get_TrgtDist(void){
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
	return f_TrgtDist;
 80062e4:	4b04      	ldr	r3, [pc, #16]	@ (80062f8 <Get_TrgtDist+0x18>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	ee07 3a90 	vmov	s15, r3
}
 80062ec:	eeb0 0a67 	vmov.f32	s0, s15
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	20000390 	.word	0x20000390

080062fc <Get_TrgtSpeed>:

float Get_TrgtSpeed(void){
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
	return f_TrgtSpeed;
 8006300:	4b04      	ldr	r3, [pc, #16]	@ (8006314 <Get_TrgtSpeed+0x18>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	ee07 3a90 	vmov	s15, r3
}
 8006308:	eeb0 0a67 	vmov.f32	s0, s15
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	20000374 	.word	0x20000374

08006318 <Set_TrgtSpeed>:

void Set_TrgtSpeed(float speed){
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	ed87 0a01 	vstr	s0, [r7, #4]
	f_TrgtSpeed = speed;
 8006322:	4a04      	ldr	r2, [pc, #16]	@ (8006334 <Set_TrgtSpeed+0x1c>)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6013      	str	r3, [r2, #0]
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	20000374 	.word	0x20000374

08006338 <Get_NowDistR>:

float Get_NowDistR(void){
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
	return f_NowDistR;
 800633c:	4b04      	ldr	r3, [pc, #16]	@ (8006350 <Get_NowDistR+0x18>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	ee07 3a90 	vmov	s15, r3
}
 8006344:	eeb0 0a67 	vmov.f32	s0, s15
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	20000398 	.word	0x20000398

08006354 <Get_NowAngle>:

float Get_NowAngle(void){
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
	return f_NowAngle;
 8006358:	4b04      	ldr	r3, [pc, #16]	@ (800636c <Get_NowAngle+0x18>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	ee07 3a90 	vmov	s15, r3
}
 8006360:	eeb0 0a67 	vmov.f32	s0, s15
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	200003d0 	.word	0x200003d0

08006370 <Get_TrgtAngle>:

float Get_TrgtAngle(void){
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
	return f_TrgtAngle;
 8006374:	4b04      	ldr	r3, [pc, #16]	@ (8006388 <Get_TrgtAngle+0x18>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	ee07 3a90 	vmov	s15, r3
}
 800637c:	eeb0 0a67 	vmov.f32	s0, s15
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	200003d4 	.word	0x200003d4

0800638c <Get_TrgtAngleS>:

float Get_TrgtAngleS(void){
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
	return f_TrgtAngleS;
 8006390:	4b04      	ldr	r3, [pc, #16]	@ (80063a4 <Get_TrgtAngleS+0x18>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	ee07 3a90 	vmov	s15, r3
}
 8006398:	eeb0 0a67 	vmov.f32	s0, s15
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	200003bc 	.word	0x200003bc

080063a8 <INTC_sys>:

void INTC_sys(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
	Msec_in++;					// msec
 80063ac:	4b14      	ldr	r3, [pc, #80]	@ (8006400 <INTC_sys+0x58>)
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3301      	adds	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	4b12      	ldr	r3, [pc, #72]	@ (8006400 <INTC_sys+0x58>)
 80063b8:	801a      	strh	r2, [r3, #0]
	if( Msec_in > 999 ){		// msec → sec
 80063ba:	4b11      	ldr	r3, [pc, #68]	@ (8006400 <INTC_sys+0x58>)
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063c4:	d309      	bcc.n	80063da <INTC_sys+0x32>
		Msec_in  = 0;
 80063c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006400 <INTC_sys+0x58>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	801a      	strh	r2, [r3, #0]
		Sec_in++;
 80063cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006404 <INTC_sys+0x5c>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	3301      	adds	r3, #1
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006404 <INTC_sys+0x5c>)
 80063d8:	701a      	strb	r2, [r3, #0]
	}
	if( Sec_in > 59 ){			// sec → min
 80063da:	4b0a      	ldr	r3, [pc, #40]	@ (8006404 <INTC_sys+0x5c>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b3b      	cmp	r3, #59	@ 0x3b
 80063e2:	d909      	bls.n	80063f8 <INTC_sys+0x50>
		Sec_in = 0;
 80063e4:	4b07      	ldr	r3, [pc, #28]	@ (8006404 <INTC_sys+0x5c>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	701a      	strb	r2, [r3, #0]
		Min_in++;
 80063ea:	4b07      	ldr	r3, [pc, #28]	@ (8006408 <INTC_sys+0x60>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	3301      	adds	r3, #1
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	4b04      	ldr	r3, [pc, #16]	@ (8006408 <INTC_sys+0x60>)
 80063f6:	701a      	strb	r2, [r3, #0]
	}

	CTRL_pol();
 80063f8:	f002 f8ee 	bl	80085d8 <CTRL_pol>
}
 80063fc:	bf00      	nop
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20000214 	.word	0x20000214
 8006404:	20000216 	.word	0x20000216
 8006408:	20000217 	.word	0x20000217

0800640c <CTRL_sta>:

void CTRL_sta( void )
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
	uc_CtrlFlag = TRUE;
 8006410:	4b03      	ldr	r3, [pc, #12]	@ (8006420 <CTRL_sta+0x14>)
 8006412:	2201      	movs	r2, #1
 8006414:	701a      	strb	r2, [r3, #0]
}
 8006416:	bf00      	nop
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	20000348 	.word	0x20000348

08006424 <CTRL_stop>:

void CTRL_stop( void )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
	uc_CtrlFlag = FALSE;
 8006428:	4b05      	ldr	r3, [pc, #20]	@ (8006440 <CTRL_stop+0x1c>)
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
	DCM_brakeMot( DCM_R );		// ブレーキ
 800642e:	2000      	movs	r0, #0
 8006430:	f003 f910 	bl	8009654 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 8006434:	2001      	movs	r0, #1
 8006436:	f003 f90d 	bl	8009654 <DCM_brakeMot>
}
 800643a:	bf00      	nop
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000348 	.word	0x20000348

08006444 <CTRL_clrData>:

void CTRL_clrData( void )
{
 8006444:	b480      	push	{r7}
 8006446:	af00      	add	r7, sp, #0
	f_NowAngle		= 0;						// [角度制御]   現在角度					（1[msec]毎に更新される）
	s_GyroVal		= 0;						// ジャイロ値クリア
	f_GyroNowAngle	= 0;							// ジャイロ値クリア
*/
	/* 目標値 */
	f_TrgtSpeed		= 0;						// [速度制御]   目標移動速度 [mm/s]			（1[msec]毎に更新される）
 8006448:	4b17      	ldr	r3, [pc, #92]	@ (80064a8 <CTRL_clrData+0x64>)
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	601a      	str	r2, [r3, #0]
	f_TrgtDist 		= 0;						// [距離制御]   目標移動距離				（1[msec]毎に更新される）
 8006450:	4b16      	ldr	r3, [pc, #88]	@ (80064ac <CTRL_clrData+0x68>)
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	601a      	str	r2, [r3, #0]
	f_TrgtAngleS	= 0;							// [角速度制御] 目標角速度 [rad/s]			（1[msec]毎に更新される）
 8006458:	4b15      	ldr	r3, [pc, #84]	@ (80064b0 <CTRL_clrData+0x6c>)
 800645a:	f04f 0200 	mov.w	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
	f_TrgtAngle		= 0;						// [角度制御]   目標角度					（1[msec]毎に更新される）
 8006460:	4b14      	ldr	r3, [pc, #80]	@ (80064b4 <CTRL_clrData+0x70>)
 8006462:	f04f 0200 	mov.w	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
	/* 制御データ */
//	f_SpeedErrSum	= 0;
//	f_DistErrSum 	= 0;						// [距離制御]   距離積分制御のサム値			（1[msec]毎に更新される）
//	f_AngleSErrSum	= 0;
//	f_AngleErrSum 	= 0;						// [角度制御]   角度積分制御のサム値			（1[msec]毎に更新される）
	f_ErrSpeedBuf	= 0;
 8006468:	4b13      	ldr	r3, [pc, #76]	@ (80064b8 <CTRL_clrData+0x74>)
 800646a:	f04f 0200 	mov.w	r2, #0
 800646e:	601a      	str	r2, [r3, #0]
	f_ErrDistBuf	= 0;						// [壁制御]     距離センサーエラー値のバッファ		（1[msec]毎に更新される）
 8006470:	4b12      	ldr	r3, [pc, #72]	@ (80064bc <CTRL_clrData+0x78>)
 8006472:	f04f 0200 	mov.w	r2, #0
 8006476:	601a      	str	r2, [r3, #0]
	f_ErrAngleSBuf  = 0;
 8006478:	4b11      	ldr	r3, [pc, #68]	@ (80064c0 <CTRL_clrData+0x7c>)
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	601a      	str	r2, [r3, #0]
	l_FrontSen_vErr		=0;
 8006480:	4b10      	ldr	r3, [pc, #64]	@ (80064c4 <CTRL_clrData+0x80>)
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
	l_FrontSen_OmegaErr		=0;
 8006486:	4b10      	ldr	r3, [pc, #64]	@ (80064c8 <CTRL_clrData+0x84>)
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
	f_ErrFrontSen_vBuf	= 0;
 800648c:	4b0f      	ldr	r3, [pc, #60]	@ (80064cc <CTRL_clrData+0x88>)
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
	f_ErrFrontSen_OmegaBuf	= 0;
 8006494:	4b0e      	ldr	r3, [pc, #56]	@ (80064d0 <CTRL_clrData+0x8c>)
 8006496:	f04f 0200 	mov.w	r2, #0
 800649a:	601a      	str	r2, [r3, #0]
}
 800649c:	bf00      	nop
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	20000374 	.word	0x20000374
 80064ac:	20000390 	.word	0x20000390
 80064b0:	200003bc 	.word	0x200003bc
 80064b4:	200003d4 	.word	0x200003d4
 80064b8:	20000378 	.word	0x20000378
 80064bc:	200003e0 	.word	0x200003e0
 80064c0:	200003c0 	.word	0x200003c0
 80064c4:	200003e4 	.word	0x200003e4
 80064c8:	200003e8 	.word	0x200003e8
 80064cc:	200003ec 	.word	0x200003ec
 80064d0:	200003f0 	.word	0x200003f0

080064d4 <CTRL_clrAngleErrSum>:

void CTRL_clrAngleErrSum(void){
 80064d4:	b480      	push	{r7}
 80064d6:	af00      	add	r7, sp, #0
	f_AngleErrSum = 0.0;
 80064d8:	4b06      	ldr	r3, [pc, #24]	@ (80064f4 <CTRL_clrAngleErrSum+0x20>)
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	601a      	str	r2, [r3, #0]
	f_AngleSErrSum = 0.0;
 80064e0:	4b05      	ldr	r3, [pc, #20]	@ (80064f8 <CTRL_clrAngleErrSum+0x24>)
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]
}
 80064e8:	bf00      	nop
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	200003d8 	.word	0x200003d8
 80064f8:	200003c4 	.word	0x200003c4

080064fc <CTRL_clrSpeedErrSum>:

void CTRL_clrSpeedErrSum(void){
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
	f_SpeedErrSum	= 0;
 8006500:	4b06      	ldr	r3, [pc, #24]	@ (800651c <CTRL_clrSpeedErrSum+0x20>)
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	601a      	str	r2, [r3, #0]
	f_DistErrSum 	= 0;
 8006508:	4b05      	ldr	r3, [pc, #20]	@ (8006520 <CTRL_clrSpeedErrSum+0x24>)
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	601a      	str	r2, [r3, #0]
}
 8006510:	bf00      	nop
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	2000037c 	.word	0x2000037c
 8006520:	200003a0 	.word	0x200003a0

08006524 <CTRL_clrNowData>:

void CTRL_clrNowData(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
	ENC_clr();
 8006528:	f003 f8f2 	bl	8009710 <ENC_clr>
	l_CntR			= 0;						// カウンタクリア
 800652c:	4b11      	ldr	r3, [pc, #68]	@ (8006574 <CTRL_clrNowData+0x50>)
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
	l_CntL			= 0;						// カウンタクリア
 8006532:	4b11      	ldr	r3, [pc, #68]	@ (8006578 <CTRL_clrNowData+0x54>)
 8006534:	2200      	movs	r2, #0
 8006536:	601a      	str	r2, [r3, #0]

	/* 現在値 */
	f_NowDist 		= 0;						// 移動距離リセット
 8006538:	4b10      	ldr	r3, [pc, #64]	@ (800657c <CTRL_clrNowData+0x58>)
 800653a:	f04f 0200 	mov.w	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
	f_NowDistR 		= 0;
 8006540:	4b0f      	ldr	r3, [pc, #60]	@ (8006580 <CTRL_clrNowData+0x5c>)
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	601a      	str	r2, [r3, #0]
	f_NowDistL 		= 0;
 8006548:	4b0e      	ldr	r3, [pc, #56]	@ (8006584 <CTRL_clrNowData+0x60>)
 800654a:	f04f 0200 	mov.w	r2, #0
 800654e:	601a      	str	r2, [r3, #0]
	f_NowSpeed		= 0;						// [速度制御]   現在の速度 [mm/s]			（1[msec]毎に更新される）
 8006550:	4b0d      	ldr	r3, [pc, #52]	@ (8006588 <CTRL_clrNowData+0x64>)
 8006552:	f04f 0200 	mov.w	r2, #0
 8006556:	601a      	str	r2, [r3, #0]
	f_NowAngle		= 0;						// [角度制御]   現在角度					（1[msec]毎に更新される）
 8006558:	4b0c      	ldr	r3, [pc, #48]	@ (800658c <CTRL_clrNowData+0x68>)
 800655a:	f04f 0200 	mov.w	r2, #0
 800655e:	601a      	str	r2, [r3, #0]
	s_GyroVal		= 0;						// ジャイロ値クリア
 8006560:	4b0b      	ldr	r3, [pc, #44]	@ (8006590 <CTRL_clrNowData+0x6c>)
 8006562:	2200      	movs	r2, #0
 8006564:	801a      	strh	r2, [r3, #0]
	f_GyroNowAngle	= 0;							// ジャイロ値クリア
 8006566:	4b0b      	ldr	r3, [pc, #44]	@ (8006594 <CTRL_clrNowData+0x70>)
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	601a      	str	r2, [r3, #0]
}
 800656e:	bf00      	nop
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	2000034c 	.word	0x2000034c
 8006578:	20000350 	.word	0x20000350
 800657c:	20000394 	.word	0x20000394
 8006580:	20000398 	.word	0x20000398
 8006584:	2000039c 	.word	0x2000039c
 8006588:	20000370 	.word	0x20000370
 800658c:	200003d0 	.word	0x200003d0
 8006590:	20000402 	.word	0x20000402
 8006594:	20000404 	.word	0x20000404

08006598 <CTRL_setNowData_Err>:

void CTRL_setNowData_Err(/*float trgtDist, */float trgtAngle)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	ed87 0a01 	vstr	s0, [r7, #4]
	ENC_clr();
 80065a2:	f003 f8b5 	bl	8009710 <ENC_clr>
	l_CntR			= 0;						// カウンタクリア
 80065a6:	4b15      	ldr	r3, [pc, #84]	@ (80065fc <CTRL_setNowData_Err+0x64>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]
	l_CntL			= 0;						// カウンタクリア
 80065ac:	4b14      	ldr	r3, [pc, #80]	@ (8006600 <CTRL_setNowData_Err+0x68>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]

	/* 現在値 */
	f_NowDist 		= 0;//f_NowDist - trgtDist;//本来こっちにしたいが妥協						// 移動距離リセット
 80065b2:	4b14      	ldr	r3, [pc, #80]	@ (8006604 <CTRL_setNowData_Err+0x6c>)
 80065b4:	f04f 0200 	mov.w	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
	f_NowDistR 		= 0;
 80065ba:	4b13      	ldr	r3, [pc, #76]	@ (8006608 <CTRL_setNowData_Err+0x70>)
 80065bc:	f04f 0200 	mov.w	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]
	f_NowDistL 		= 0;
 80065c2:	4b12      	ldr	r3, [pc, #72]	@ (800660c <CTRL_setNowData_Err+0x74>)
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	601a      	str	r2, [r3, #0]
	f_NowSpeed		= 0;						// [速度制御]   現在の速度 [mm/s]			（1[msec]毎に更新される）
 80065ca:	4b11      	ldr	r3, [pc, #68]	@ (8006610 <CTRL_setNowData_Err+0x78>)
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]
	f_NowAngle		= f_NowAngle - trgtAngle;						// [角度制御]   現在角度					（1[msec]毎に更新される）
 80065d2:	4b10      	ldr	r3, [pc, #64]	@ (8006614 <CTRL_setNowData_Err+0x7c>)
 80065d4:	ed93 7a00 	vldr	s14, [r3]
 80065d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80065dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006614 <CTRL_setNowData_Err+0x7c>)
 80065e2:	edc3 7a00 	vstr	s15, [r3]
	s_GyroVal		= 0;						// ジャイロ値クリア
 80065e6:	4b0c      	ldr	r3, [pc, #48]	@ (8006618 <CTRL_setNowData_Err+0x80>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	801a      	strh	r2, [r3, #0]
	f_GyroNowAngle	= 0;							// ジャイロ値クリア
 80065ec:	4b0b      	ldr	r3, [pc, #44]	@ (800661c <CTRL_setNowData_Err+0x84>)
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
}
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	2000034c 	.word	0x2000034c
 8006600:	20000350 	.word	0x20000350
 8006604:	20000394 	.word	0x20000394
 8006608:	20000398 	.word	0x20000398
 800660c:	2000039c 	.word	0x2000039c
 8006610:	20000370 	.word	0x20000370
 8006614:	200003d0 	.word	0x200003d0
 8006618:	20000402 	.word	0x20000402
 800661c:	20000404 	.word	0x20000404

08006620 <CTRL_setData>:

void CTRL_setData( stCTRL_DATA* p_data )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
	/* 制御方法 */
	en_Type					= p_data->en_ctrl_type;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	781a      	ldrb	r2, [r3, #0]
 800662c:	4b31      	ldr	r3, [pc, #196]	@ (80066f4 <CTRL_setData+0xd4>)
 800662e:	701a      	strb	r2, [r3, #0]

	f_Jerk					= p_data->f_ctrl_jerk;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	4a30      	ldr	r2, [pc, #192]	@ (80066f8 <CTRL_setData+0xd8>)
 8006636:	6013      	str	r3, [r2, #0]

	f_TrgtAcc				= p_data->f_ctrl_nowAcc;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	4a2f      	ldr	r2, [pc, #188]	@ (80066fc <CTRL_setData+0xdc>)
 800663e:	6013      	str	r3, [r2, #0]
	f_BaseAcc				= p_data->f_ctrl_nowAcc;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	4a2e      	ldr	r2, [pc, #184]	@ (8006700 <CTRL_setData+0xe0>)
 8006646:	6013      	str	r3, [r2, #0]
	f_LastAcc				= p_data->f_ctrl_trgtAcc;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	4a2d      	ldr	r2, [pc, #180]	@ (8006704 <CTRL_setData+0xe4>)
 800664e:	6013      	str	r3, [r2, #0]

	/* 速度制御 */
//	f_TrgtAcc 				= p_data->f_ctrl_acc;
	f_TrgtSpeed				= p_data->f_ctrl_now;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	4a2c      	ldr	r2, [pc, #176]	@ (8006708 <CTRL_setData+0xe8>)
 8006656:	6013      	str	r3, [r2, #0]
	f_BaseSpeed				= p_data->f_ctrl_now;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	4a2b      	ldr	r2, [pc, #172]	@ (800670c <CTRL_setData+0xec>)
 800665e:	6013      	str	r3, [r2, #0]
	f_LastSpeed				= p_data->f_ctrl_trgt;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	4a2a      	ldr	r2, [pc, #168]	@ (8006710 <CTRL_setData+0xf0>)
 8006666:	6013      	str	r3, [r2, #0]

	/* 距離制御 */
	f_TrgtDist				= p_data->f_ctrl_nowDist;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	4a29      	ldr	r2, [pc, #164]	@ (8006714 <CTRL_setData+0xf4>)
 800666e:	6013      	str	r3, [r2, #0]
	f_BaseDist 				= p_data->f_ctrl_nowDist;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	4a28      	ldr	r2, [pc, #160]	@ (8006718 <CTRL_setData+0xf8>)
 8006676:	6013      	str	r3, [r2, #0]
	f_LastDist 				= p_data->f_ctrl_dist;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	4a27      	ldr	r2, [pc, #156]	@ (800671c <CTRL_setData+0xfc>)
 800667e:	6013      	str	r3, [r2, #0]

	//角加速度
	f_JerkAngle				= p_data->f_ctrl_jerkAngle;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006684:	4a26      	ldr	r2, [pc, #152]	@ (8006720 <CTRL_setData+0x100>)
 8006686:	6013      	str	r3, [r2, #0]
	f_TrgtAccAngle			= p_data->f_ctrl_nowAccAngle;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668c:	4a25      	ldr	r2, [pc, #148]	@ (8006724 <CTRL_setData+0x104>)
 800668e:	6013      	str	r3, [r2, #0]
	f_BaseAccAngle			= p_data->f_ctrl_nowAccAngle;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006694:	4a24      	ldr	r2, [pc, #144]	@ (8006728 <CTRL_setData+0x108>)
 8006696:	6013      	str	r3, [r2, #0]
	f_LastAccAngle			= p_data->f_ctrl_trgtAccAngle;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669c:	4a23      	ldr	r2, [pc, #140]	@ (800672c <CTRL_setData+0x10c>)
 800669e:	6013      	str	r3, [r2, #0]

	/* 角速度制御 */
//	f_AccAngleS 			= p_data->f_ctrl_accAngleS;
	f_TrgtAngleS			= p_data->f_ctrl_nowAngleS;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a4:	4a22      	ldr	r2, [pc, #136]	@ (8006730 <CTRL_setData+0x110>)
 80066a6:	6013      	str	r3, [r2, #0]
	f_BaseAngleS			= p_data->f_ctrl_nowAngleS;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ac:	4a21      	ldr	r2, [pc, #132]	@ (8006734 <CTRL_setData+0x114>)
 80066ae:	6013      	str	r3, [r2, #0]
	f_LastAngleS			= p_data->f_ctrl_trgtAngleS;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b4:	4a20      	ldr	r2, [pc, #128]	@ (8006738 <CTRL_setData+0x118>)
 80066b6:	6013      	str	r3, [r2, #0]

	/* 角度制御 */
	f_TrgtAngle				= p_data->f_ctrl_nowAngle;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066bc:	4a1f      	ldr	r2, [pc, #124]	@ (800673c <CTRL_setData+0x11c>)
 80066be:	6013      	str	r3, [r2, #0]
	f_BaseAngle 			= p_data->f_ctrl_nowAngle;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c4:	4a1e      	ldr	r2, [pc, #120]	@ (8006740 <CTRL_setData+0x120>)
 80066c6:	6013      	str	r3, [r2, #0]
	f_LastAngle 			= p_data->f_ctrl_angle;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006744 <CTRL_setData+0x124>)
 80066ce:	6013      	str	r3, [r2, #0]

	f_Time 					= 0;
 80066d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006748 <CTRL_setData+0x128>)
 80066d2:	f04f 0200 	mov.w	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]
	f_TrgtTime				= p_data->f_ctrl_time;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	4a1b      	ldr	r2, [pc, #108]	@ (800674c <CTRL_setData+0x12c>)
 80066de:	6013      	str	r3, [r2, #0]

	EscapeWait			= 0;
 80066e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006750 <CTRL_setData+0x130>)
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]

	CTRL_sta();				// 制御開始
 80066e8:	f7ff fe90 	bl	800640c <CTRL_sta>

}
 80066ec:	bf00      	nop
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	200003fa 	.word	0x200003fa
 80066f8:	20000358 	.word	0x20000358
 80066fc:	20000360 	.word	0x20000360
 8006700:	2000035c 	.word	0x2000035c
 8006704:	20000364 	.word	0x20000364
 8006708:	20000374 	.word	0x20000374
 800670c:	20000368 	.word	0x20000368
 8006710:	2000036c 	.word	0x2000036c
 8006714:	20000390 	.word	0x20000390
 8006718:	20000388 	.word	0x20000388
 800671c:	2000038c 	.word	0x2000038c
 8006720:	200003a4 	.word	0x200003a4
 8006724:	200003ac 	.word	0x200003ac
 8006728:	200003a8 	.word	0x200003a8
 800672c:	200003b0 	.word	0x200003b0
 8006730:	200003bc 	.word	0x200003bc
 8006734:	200003b4 	.word	0x200003b4
 8006738:	200003b8 	.word	0x200003b8
 800673c:	200003d4 	.word	0x200003d4
 8006740:	200003c8 	.word	0x200003c8
 8006744:	200003cc 	.word	0x200003cc
 8006748:	20000354 	.word	0x20000354
 800674c:	20000008 	.word	0x20000008
 8006750:	200003fc 	.word	0x200003fc

08006754 <CTRL_refNow>:

void CTRL_refNow( void )
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
	float f_speedR		= 0;							// 右モータ現在速度 [mm/s]
 800675a:	f04f 0300 	mov.w	r3, #0
 800675e:	60fb      	str	r3, [r7, #12]
	float f_speedL		= 0;							// 左モータ現在速度 [mm/s]
 8006760:	f04f 0300 	mov.w	r3, #0
 8006764:	60bb      	str	r3, [r7, #8]
	float f_r 			= F_CNT2MM(l_CntR);				// 右モータの進んだ距離 [mm]
 8006766:	4b3c      	ldr	r3, [pc, #240]	@ (8006858 <CTRL_refNow+0x104>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006772:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800685c <CTRL_refNow+0x108>
 8006776:	ee67 7a87 	vmul.f32	s15, s15, s14
 800677a:	edc7 7a01 	vstr	s15, [r7, #4]
	float f_l 			= F_CNT2MM(l_CntL);				// 左モータの進んだ距離 [mm]
 800677e:	4b38      	ldr	r3, [pc, #224]	@ (8006860 <CTRL_refNow+0x10c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	ee07 3a90 	vmov	s15, r3
 8006786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800678a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800685c <CTRL_refNow+0x108>
 800678e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006792:	edc7 7a00 	vstr	s15, [r7]

	/* 速度更新 */
	f_speedR = f_r * 1000.0;								// 右モータ速度 [mm/s] ( 移動距離[カウント] * 1パルスの移動量(0.0509[mm]) * 1000(msec→sec) 
 8006796:	edd7 7a01 	vldr	s15, [r7, #4]
 800679a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8006864 <CTRL_refNow+0x110>
 800679e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067a2:	edc7 7a03 	vstr	s15, [r7, #12]
	f_speedL = f_l * 1000.0;								// 左モータ速度 [mm/s] ( 移動距離[カウント] * 1パルスの移動量(0.0509[mm]) * 1000(msec→sec) 
 80067a6:	edd7 7a00 	vldr	s15, [r7]
 80067aa:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8006864 <CTRL_refNow+0x110>
 80067ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067b2:	edc7 7a02 	vstr	s15, [r7, #8]
	f_NowSpeed  = ( f_speedR + f_speedL ) / 2;			// マウス（進行方向中心軸） [1mm/s] 
 80067b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80067ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80067be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80067c2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80067c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067ca:	4b27      	ldr	r3, [pc, #156]	@ (8006868 <CTRL_refNow+0x114>)
 80067cc:	edc3 7a00 	vstr	s15, [r3]
	
	/*motor AngleS*/
	f_MotorR_AngleS	= f_speedR /(PI*TIRE_D)*GEAR_RATIO;
 80067d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80067d4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800686c <CTRL_refNow+0x118>
 80067d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067dc:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8006870 <CTRL_refNow+0x11c>
 80067e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067e4:	4b23      	ldr	r3, [pc, #140]	@ (8006874 <CTRL_refNow+0x120>)
 80067e6:	edc3 7a00 	vstr	s15, [r3]
	f_MotorL_AngleS = f_speedL /(PI*TIRE_D)*GEAR_RATIO;
 80067ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80067ee:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800686c <CTRL_refNow+0x118>
 80067f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067f6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006870 <CTRL_refNow+0x11c>
 80067fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006878 <CTRL_refNow+0x124>)
 8006800:	edc3 7a00 	vstr	s15, [r3]

	/* 距離更新 */
	f_NowDistR += f_r;									// カウント更新
 8006804:	4b1d      	ldr	r3, [pc, #116]	@ (800687c <CTRL_refNow+0x128>)
 8006806:	ed93 7a00 	vldr	s14, [r3]
 800680a:	edd7 7a01 	vldr	s15, [r7, #4]
 800680e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006812:	4b1a      	ldr	r3, [pc, #104]	@ (800687c <CTRL_refNow+0x128>)
 8006814:	edc3 7a00 	vstr	s15, [r3]
	f_NowDistL += f_l;									// カウント更新
 8006818:	4b19      	ldr	r3, [pc, #100]	@ (8006880 <CTRL_refNow+0x12c>)
 800681a:	ed93 7a00 	vldr	s14, [r3]
 800681e:	edd7 7a00 	vldr	s15, [r7]
 8006822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006826:	4b16      	ldr	r3, [pc, #88]	@ (8006880 <CTRL_refNow+0x12c>)
 8006828:	edc3 7a00 	vstr	s15, [r3]
	f_NowDist  = ( f_NowDistR + f_NowDistL ) / 2.0;		// 平均値更新
 800682c:	4b13      	ldr	r3, [pc, #76]	@ (800687c <CTRL_refNow+0x128>)
 800682e:	ed93 7a00 	vldr	s14, [r3]
 8006832:	4b13      	ldr	r3, [pc, #76]	@ (8006880 <CTRL_refNow+0x12c>)
 8006834:	edd3 7a00 	vldr	s15, [r3]
 8006838:	ee37 7a27 	vadd.f32	s14, s14, s15
 800683c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006840:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006844:	4b0f      	ldr	r3, [pc, #60]	@ (8006884 <CTRL_refNow+0x130>)
 8006846:	edc3 7a00 	vstr	s15, [r3]
//	f_NowDist  += (f_r + f_l) / 2.0; 	//setNowdataの残り　うまく行かないため上に戻し
}
 800684a:	bf00      	nop
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	2000034c 	.word	0x2000034c
 800685c:	3721c00b 	.word	0x3721c00b
 8006860:	20000350 	.word	0x20000350
 8006864:	447a0000 	.word	0x447a0000
 8006868:	20000370 	.word	0x20000370
 800686c:	3d21c00b 	.word	0x3d21c00b
 8006870:	40940000 	.word	0x40940000
 8006874:	20000380 	.word	0x20000380
 8006878:	20000384 	.word	0x20000384
 800687c:	20000398 	.word	0x20000398
 8006880:	2000039c 	.word	0x2000039c
 8006884:	20000394 	.word	0x20000394

08006888 <CTRL_refTarget>:

void CTRL_refTarget( void )
{
 8006888:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800688c:	af00      	add	r7, sp, #0
	/* mode */
	switch( en_Type ){
 800688e:	4bb8      	ldr	r3, [pc, #736]	@ (8006b70 <CTRL_refTarget+0x2e8>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b0e      	cmp	r3, #14
 8006894:	f201 814e 	bhi.w	8007b34 <CTRL_refTarget+0x12ac>
 8006898:	a201      	add	r2, pc, #4	@ (adr r2, 80068a0 <CTRL_refTarget+0x18>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	080068dd 	.word	0x080068dd
 80068a4:	08006a03 	.word	0x08006a03
 80068a8:	08006a0f 	.word	0x08006a0f
 80068ac:	080068dd 	.word	0x080068dd
 80068b0:	08006a03 	.word	0x08006a03
 80068b4:	08006a0f 	.word	0x08006a0f
 80068b8:	08007b35 	.word	0x08007b35
 80068bc:	08006ba9 	.word	0x08006ba9
 80068c0:	08006dc5 	.word	0x08006dc5
 80068c4:	08006dd1 	.word	0x08006dd1
 80068c8:	080070bb 	.word	0x080070bb
 80068cc:	0800718d 	.word	0x0800718d
 80068d0:	080074f3 	.word	0x080074f3
 80068d4:	08007711 	.word	0x08007711
 80068d8:	08007a8b 	.word	0x08007a8b

		/* acc(straight) */
		case CTRL_ACC:
		case CTRL_SKEW_ACC:
			f_TrgtAcc += f_Jerk*0.001;
 80068dc:	4ba5      	ldr	r3, [pc, #660]	@ (8006b74 <CTRL_refTarget+0x2ec>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7f9 fe59 	bl	8000598 <__aeabi_f2d>
 80068e6:	4604      	mov	r4, r0
 80068e8:	460d      	mov	r5, r1
 80068ea:	4ba3      	ldr	r3, [pc, #652]	@ (8006b78 <CTRL_refTarget+0x2f0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7f9 fe52 	bl	8000598 <__aeabi_f2d>
 80068f4:	a39c      	add	r3, pc, #624	@ (adr r3, 8006b68 <CTRL_refTarget+0x2e0>)
 80068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fa:	f7f9 fea5 	bl	8000648 <__aeabi_dmul>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4620      	mov	r0, r4
 8006904:	4629      	mov	r1, r5
 8006906:	f7f9 fce9 	bl	80002dc <__adddf3>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	4610      	mov	r0, r2
 8006910:	4619      	mov	r1, r3
 8006912:	f7fa f991 	bl	8000c38 <__aeabi_d2f>
 8006916:	4603      	mov	r3, r0
 8006918:	4a96      	ldr	r2, [pc, #600]	@ (8006b74 <CTRL_refTarget+0x2ec>)
 800691a:	6013      	str	r3, [r2, #0]

			if(f_BaseAcc > 0){
 800691c:	4b97      	ldr	r3, [pc, #604]	@ (8006b7c <CTRL_refTarget+0x2f4>)
 800691e:	edd3 7a00 	vldr	s15, [r3]
 8006922:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800692a:	dd0c      	ble.n	8006946 <CTRL_refTarget+0xbe>
				if(f_TrgtAcc < 0.0){
 800692c:	4b91      	ldr	r3, [pc, #580]	@ (8006b74 <CTRL_refTarget+0x2ec>)
 800692e:	edd3 7a00 	vldr	s15, [r3]
 8006932:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693a:	d513      	bpl.n	8006964 <CTRL_refTarget+0xdc>
					f_TrgtAcc = 0.0;
 800693c:	4b8d      	ldr	r3, [pc, #564]	@ (8006b74 <CTRL_refTarget+0x2ec>)
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	e00e      	b.n	8006964 <CTRL_refTarget+0xdc>
				}
			}else{
				if(f_TrgtAcc > f_LastAcc){
 8006946:	4b8b      	ldr	r3, [pc, #556]	@ (8006b74 <CTRL_refTarget+0x2ec>)
 8006948:	ed93 7a00 	vldr	s14, [r3]
 800694c:	4b8c      	ldr	r3, [pc, #560]	@ (8006b80 <CTRL_refTarget+0x2f8>)
 800694e:	edd3 7a00 	vldr	s15, [r3]
 8006952:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800695a:	dd03      	ble.n	8006964 <CTRL_refTarget+0xdc>
					f_TrgtAcc = f_LastAcc;
 800695c:	4b88      	ldr	r3, [pc, #544]	@ (8006b80 <CTRL_refTarget+0x2f8>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a84      	ldr	r2, [pc, #528]	@ (8006b74 <CTRL_refTarget+0x2ec>)
 8006962:	6013      	str	r3, [r2, #0]
				}
			}

			if( f_TrgtSpeed < (f_LastSpeed -(f_TrgtAcc * 0.001)) ){								// 加速目標更新区間
 8006964:	4b87      	ldr	r3, [pc, #540]	@ (8006b84 <CTRL_refTarget+0x2fc>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4618      	mov	r0, r3
 800696a:	f7f9 fe15 	bl	8000598 <__aeabi_f2d>
 800696e:	4604      	mov	r4, r0
 8006970:	460d      	mov	r5, r1
 8006972:	4b85      	ldr	r3, [pc, #532]	@ (8006b88 <CTRL_refTarget+0x300>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4618      	mov	r0, r3
 8006978:	f7f9 fe0e 	bl	8000598 <__aeabi_f2d>
 800697c:	4680      	mov	r8, r0
 800697e:	4689      	mov	r9, r1
 8006980:	4b7c      	ldr	r3, [pc, #496]	@ (8006b74 <CTRL_refTarget+0x2ec>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f7f9 fe07 	bl	8000598 <__aeabi_f2d>
 800698a:	a377      	add	r3, pc, #476	@ (adr r3, 8006b68 <CTRL_refTarget+0x2e0>)
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	f7f9 fe5a 	bl	8000648 <__aeabi_dmul>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4640      	mov	r0, r8
 800699a:	4649      	mov	r1, r9
 800699c:	f7f9 fc9c 	bl	80002d8 <__aeabi_dsub>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4620      	mov	r0, r4
 80069a6:	4629      	mov	r1, r5
 80069a8:	f7fa f8c0 	bl	8000b2c <__aeabi_dcmplt>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d021      	beq.n	80069f6 <CTRL_refTarget+0x16e>
//			if( f_TrgtSpeed < f_LastSpeed ){
				f_TrgtSpeed += f_TrgtAcc * 0.001;									// 目標速度
 80069b2:	4b74      	ldr	r3, [pc, #464]	@ (8006b84 <CTRL_refTarget+0x2fc>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7f9 fdee 	bl	8000598 <__aeabi_f2d>
 80069bc:	4604      	mov	r4, r0
 80069be:	460d      	mov	r5, r1
 80069c0:	4b6c      	ldr	r3, [pc, #432]	@ (8006b74 <CTRL_refTarget+0x2ec>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7f9 fde7 	bl	8000598 <__aeabi_f2d>
 80069ca:	a367      	add	r3, pc, #412	@ (adr r3, 8006b68 <CTRL_refTarget+0x2e0>)
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	f7f9 fe3a 	bl	8000648 <__aeabi_dmul>
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	4620      	mov	r0, r4
 80069da:	4629      	mov	r1, r5
 80069dc:	f7f9 fc7e 	bl	80002dc <__adddf3>
 80069e0:	4602      	mov	r2, r0
 80069e2:	460b      	mov	r3, r1
 80069e4:	4610      	mov	r0, r2
 80069e6:	4619      	mov	r1, r3
 80069e8:	f7fa f926 	bl	8000c38 <__aeabi_d2f>
 80069ec:	4603      	mov	r3, r0
 80069ee:	4a65      	ldr	r2, [pc, #404]	@ (8006b84 <CTRL_refTarget+0x2fc>)
 80069f0:	6013      	str	r3, [r2, #0]
			}
			else{
				f_TrgtSpeed = f_LastSpeed;
			}

			break;
 80069f2:	f001 b8a0 	b.w	8007b36 <CTRL_refTarget+0x12ae>
				f_TrgtSpeed = f_LastSpeed;
 80069f6:	4b64      	ldr	r3, [pc, #400]	@ (8006b88 <CTRL_refTarget+0x300>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a62      	ldr	r2, [pc, #392]	@ (8006b84 <CTRL_refTarget+0x2fc>)
 80069fc:	6013      	str	r3, [r2, #0]
			break;
 80069fe:	f001 b89a 	b.w	8007b36 <CTRL_refTarget+0x12ae>

		/* const(straight) */
		case CTRL_CONST:
		case CTRL_SKEW_CONST:
			f_TrgtSpeed = f_BaseSpeed;														// 目標速度
 8006a02:	4b62      	ldr	r3, [pc, #392]	@ (8006b8c <CTRL_refTarget+0x304>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a5f      	ldr	r2, [pc, #380]	@ (8006b84 <CTRL_refTarget+0x2fc>)
 8006a08:	6013      	str	r3, [r2, #0]
			break;
 8006a0a:	f001 b894 	b.w	8007b36 <CTRL_refTarget+0x12ae>

		/* dec(straight) */
		case CTRL_DEC:
		case CTRL_SKEW_DEC:
			f_TrgtAcc += f_Jerk*0.001;
 8006a0e:	4b59      	ldr	r3, [pc, #356]	@ (8006b74 <CTRL_refTarget+0x2ec>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7f9 fdc0 	bl	8000598 <__aeabi_f2d>
 8006a18:	4604      	mov	r4, r0
 8006a1a:	460d      	mov	r5, r1
 8006a1c:	4b56      	ldr	r3, [pc, #344]	@ (8006b78 <CTRL_refTarget+0x2f0>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7f9 fdb9 	bl	8000598 <__aeabi_f2d>
 8006a26:	a350      	add	r3, pc, #320	@ (adr r3, 8006b68 <CTRL_refTarget+0x2e0>)
 8006a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2c:	f7f9 fe0c 	bl	8000648 <__aeabi_dmul>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4620      	mov	r0, r4
 8006a36:	4629      	mov	r1, r5
 8006a38:	f7f9 fc50 	bl	80002dc <__adddf3>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4610      	mov	r0, r2
 8006a42:	4619      	mov	r1, r3
 8006a44:	f7fa f8f8 	bl	8000c38 <__aeabi_d2f>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	4a4a      	ldr	r2, [pc, #296]	@ (8006b74 <CTRL_refTarget+0x2ec>)
 8006a4c:	6013      	str	r3, [r2, #0]

			if(f_BaseAcc < 0){
 8006a4e:	4b4b      	ldr	r3, [pc, #300]	@ (8006b7c <CTRL_refTarget+0x2f4>)
 8006a50:	edd3 7a00 	vldr	s15, [r3]
 8006a54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a5c:	d50c      	bpl.n	8006a78 <CTRL_refTarget+0x1f0>
				if(f_TrgtAcc > 0.0){
 8006a5e:	4b45      	ldr	r3, [pc, #276]	@ (8006b74 <CTRL_refTarget+0x2ec>)
 8006a60:	edd3 7a00 	vldr	s15, [r3]
 8006a64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6c:	dd13      	ble.n	8006a96 <CTRL_refTarget+0x20e>
					f_TrgtAcc = 0.0;
 8006a6e:	4b41      	ldr	r3, [pc, #260]	@ (8006b74 <CTRL_refTarget+0x2ec>)
 8006a70:	f04f 0200 	mov.w	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	e00e      	b.n	8006a96 <CTRL_refTarget+0x20e>
				}
			}else{
				if(f_TrgtAcc < f_LastAcc){
 8006a78:	4b3e      	ldr	r3, [pc, #248]	@ (8006b74 <CTRL_refTarget+0x2ec>)
 8006a7a:	ed93 7a00 	vldr	s14, [r3]
 8006a7e:	4b40      	ldr	r3, [pc, #256]	@ (8006b80 <CTRL_refTarget+0x2f8>)
 8006a80:	edd3 7a00 	vldr	s15, [r3]
 8006a84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a8c:	d503      	bpl.n	8006a96 <CTRL_refTarget+0x20e>
					f_TrgtAcc = f_LastAcc;
 8006a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8006b80 <CTRL_refTarget+0x2f8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a38      	ldr	r2, [pc, #224]	@ (8006b74 <CTRL_refTarget+0x2ec>)
 8006a94:	6013      	str	r3, [r2, #0]
				}
			}

			/* speed CTRL + position CTRL */
			if( f_TrgtSpeed > (f_LastSpeed +(f_TrgtAcc * 0.001))){								// 減速目標更新区間
 8006a96:	4b3b      	ldr	r3, [pc, #236]	@ (8006b84 <CTRL_refTarget+0x2fc>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7f9 fd7c 	bl	8000598 <__aeabi_f2d>
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	460d      	mov	r5, r1
 8006aa4:	4b38      	ldr	r3, [pc, #224]	@ (8006b88 <CTRL_refTarget+0x300>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7f9 fd75 	bl	8000598 <__aeabi_f2d>
 8006aae:	4680      	mov	r8, r0
 8006ab0:	4689      	mov	r9, r1
 8006ab2:	4b30      	ldr	r3, [pc, #192]	@ (8006b74 <CTRL_refTarget+0x2ec>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7f9 fd6e 	bl	8000598 <__aeabi_f2d>
 8006abc:	a32a      	add	r3, pc, #168	@ (adr r3, 8006b68 <CTRL_refTarget+0x2e0>)
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	f7f9 fdc1 	bl	8000648 <__aeabi_dmul>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4640      	mov	r0, r8
 8006acc:	4649      	mov	r1, r9
 8006ace:	f7f9 fc05 	bl	80002dc <__adddf3>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	4629      	mov	r1, r5
 8006ada:	f7fa f845 	bl	8000b68 <__aeabi_dcmpgt>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d057      	beq.n	8006b94 <CTRL_refTarget+0x30c>
//			if( f_TrgtSpeed > f_LastSpeed){								// 減速目標更新区間
				f_TrgtSpeed += f_TrgtAcc * 0.001;									// 目標速度
 8006ae4:	4b27      	ldr	r3, [pc, #156]	@ (8006b84 <CTRL_refTarget+0x2fc>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7f9 fd55 	bl	8000598 <__aeabi_f2d>
 8006aee:	4604      	mov	r4, r0
 8006af0:	460d      	mov	r5, r1
 8006af2:	4b20      	ldr	r3, [pc, #128]	@ (8006b74 <CTRL_refTarget+0x2ec>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7f9 fd4e 	bl	8000598 <__aeabi_f2d>
 8006afc:	a31a      	add	r3, pc, #104	@ (adr r3, 8006b68 <CTRL_refTarget+0x2e0>)
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	f7f9 fda1 	bl	8000648 <__aeabi_dmul>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	f7f9 fbe5 	bl	80002dc <__adddf3>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4610      	mov	r0, r2
 8006b18:	4619      	mov	r1, r3
 8006b1a:	f7fa f88d 	bl	8000c38 <__aeabi_d2f>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	4a18      	ldr	r2, [pc, #96]	@ (8006b84 <CTRL_refTarget+0x2fc>)
 8006b22:	6013      	str	r3, [r2, #0]
				f_TrgtDist  += f_TrgtSpeed * 0.001;		// 目標距離
 8006b24:	4b1a      	ldr	r3, [pc, #104]	@ (8006b90 <CTRL_refTarget+0x308>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7f9 fd35 	bl	8000598 <__aeabi_f2d>
 8006b2e:	4604      	mov	r4, r0
 8006b30:	460d      	mov	r5, r1
 8006b32:	4b14      	ldr	r3, [pc, #80]	@ (8006b84 <CTRL_refTarget+0x2fc>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7f9 fd2e 	bl	8000598 <__aeabi_f2d>
 8006b3c:	a30a      	add	r3, pc, #40	@ (adr r3, 8006b68 <CTRL_refTarget+0x2e0>)
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	f7f9 fd81 	bl	8000648 <__aeabi_dmul>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	f7f9 fbc5 	bl	80002dc <__adddf3>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4610      	mov	r0, r2
 8006b58:	4619      	mov	r1, r3
 8006b5a:	f7fa f86d 	bl	8000c38 <__aeabi_d2f>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	4a0b      	ldr	r2, [pc, #44]	@ (8006b90 <CTRL_refTarget+0x308>)
 8006b62:	6013      	str	r3, [r2, #0]
			/* position CTRL */
			else{
				f_TrgtSpeed = f_LastSpeed;
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 8006b64:	f000 bfe7 	b.w	8007b36 <CTRL_refTarget+0x12ae>
 8006b68:	d2f1a9fc 	.word	0xd2f1a9fc
 8006b6c:	3f50624d 	.word	0x3f50624d
 8006b70:	200003fa 	.word	0x200003fa
 8006b74:	20000360 	.word	0x20000360
 8006b78:	20000358 	.word	0x20000358
 8006b7c:	2000035c 	.word	0x2000035c
 8006b80:	20000364 	.word	0x20000364
 8006b84:	20000374 	.word	0x20000374
 8006b88:	2000036c 	.word	0x2000036c
 8006b8c:	20000368 	.word	0x20000368
 8006b90:	20000390 	.word	0x20000390
				f_TrgtSpeed = f_LastSpeed;
 8006b94:	4bb0      	ldr	r3, [pc, #704]	@ (8006e58 <CTRL_refTarget+0x5d0>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4ab0      	ldr	r2, [pc, #704]	@ (8006e5c <CTRL_refTarget+0x5d4>)
 8006b9a:	6013      	str	r3, [r2, #0]
				f_TrgtDist  = f_LastDist;													// 目標距離
 8006b9c:	4bb0      	ldr	r3, [pc, #704]	@ (8006e60 <CTRL_refTarget+0x5d8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4ab0      	ldr	r2, [pc, #704]	@ (8006e64 <CTRL_refTarget+0x5dc>)
 8006ba2:	6013      	str	r3, [r2, #0]
			break;
 8006ba4:	f000 bfc7 	b.w	8007b36 <CTRL_refTarget+0x12ae>

		/* acc(Turn) */
		case CTRL_ACC_TRUN:
			f_TrgtAccAngle += f_JerkAngle*0.001;
 8006ba8:	4baf      	ldr	r3, [pc, #700]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7f9 fcf3 	bl	8000598 <__aeabi_f2d>
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	460d      	mov	r5, r1
 8006bb6:	4bad      	ldr	r3, [pc, #692]	@ (8006e6c <CTRL_refTarget+0x5e4>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7f9 fcec 	bl	8000598 <__aeabi_f2d>
 8006bc0:	a3a3      	add	r3, pc, #652	@ (adr r3, 8006e50 <CTRL_refTarget+0x5c8>)
 8006bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc6:	f7f9 fd3f 	bl	8000648 <__aeabi_dmul>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4620      	mov	r0, r4
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	f7f9 fb83 	bl	80002dc <__adddf3>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4610      	mov	r0, r2
 8006bdc:	4619      	mov	r1, r3
 8006bde:	f7fa f82b 	bl	8000c38 <__aeabi_d2f>
 8006be2:	4603      	mov	r3, r0
 8006be4:	4aa0      	ldr	r2, [pc, #640]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006be6:	6013      	str	r3, [r2, #0]

			/* CCW  hidari*/
			if( f_LastAngle > 0 ){
 8006be8:	4ba1      	ldr	r3, [pc, #644]	@ (8006e70 <CTRL_refTarget+0x5e8>)
 8006bea:	edd3 7a00 	vldr	s15, [r3]
 8006bee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf6:	dd72      	ble.n	8006cde <CTRL_refTarget+0x456>
				if(f_BaseAccAngle > 0){
 8006bf8:	4b9e      	ldr	r3, [pc, #632]	@ (8006e74 <CTRL_refTarget+0x5ec>)
 8006bfa:	edd3 7a00 	vldr	s15, [r3]
 8006bfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c06:	dd0c      	ble.n	8006c22 <CTRL_refTarget+0x39a>
					if(f_TrgtAccAngle < 0.0){
 8006c08:	4b97      	ldr	r3, [pc, #604]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006c0a:	edd3 7a00 	vldr	s15, [r3]
 8006c0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c16:	d513      	bpl.n	8006c40 <CTRL_refTarget+0x3b8>
						f_TrgtAccAngle = 0.0;
 8006c18:	4b93      	ldr	r3, [pc, #588]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006c1a:	f04f 0200 	mov.w	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	e00e      	b.n	8006c40 <CTRL_refTarget+0x3b8>
					}
				}else{
					if(f_TrgtAccAngle > f_LastAccAngle){
 8006c22:	4b91      	ldr	r3, [pc, #580]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006c24:	ed93 7a00 	vldr	s14, [r3]
 8006c28:	4b93      	ldr	r3, [pc, #588]	@ (8006e78 <CTRL_refTarget+0x5f0>)
 8006c2a:	edd3 7a00 	vldr	s15, [r3]
 8006c2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c36:	dd03      	ble.n	8006c40 <CTRL_refTarget+0x3b8>
						f_TrgtAccAngle = f_LastAccAngle;
 8006c38:	4b8f      	ldr	r3, [pc, #572]	@ (8006e78 <CTRL_refTarget+0x5f0>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a8a      	ldr	r2, [pc, #552]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006c3e:	6013      	str	r3, [r2, #0]
					}
				}

				if ( f_TrgtAngleS < (f_LastAngleS -(f_TrgtAccAngle * 0.001)) ){
 8006c40:	4b8e      	ldr	r3, [pc, #568]	@ (8006e7c <CTRL_refTarget+0x5f4>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7f9 fca7 	bl	8000598 <__aeabi_f2d>
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	460d      	mov	r5, r1
 8006c4e:	4b8c      	ldr	r3, [pc, #560]	@ (8006e80 <CTRL_refTarget+0x5f8>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7f9 fca0 	bl	8000598 <__aeabi_f2d>
 8006c58:	4680      	mov	r8, r0
 8006c5a:	4689      	mov	r9, r1
 8006c5c:	4b82      	ldr	r3, [pc, #520]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7f9 fc99 	bl	8000598 <__aeabi_f2d>
 8006c66:	a37a      	add	r3, pc, #488	@ (adr r3, 8006e50 <CTRL_refTarget+0x5c8>)
 8006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6c:	f7f9 fcec 	bl	8000648 <__aeabi_dmul>
 8006c70:	4602      	mov	r2, r0
 8006c72:	460b      	mov	r3, r1
 8006c74:	4640      	mov	r0, r8
 8006c76:	4649      	mov	r1, r9
 8006c78:	f7f9 fb2e 	bl	80002d8 <__aeabi_dsub>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4620      	mov	r0, r4
 8006c82:	4629      	mov	r1, r5
 8006c84:	f7f9 ff52 	bl	8000b2c <__aeabi_dcmplt>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d021      	beq.n	8006cd2 <CTRL_refTarget+0x44a>
					f_TrgtAngleS += f_TrgtAccAngle * 0.001;									// 目標角速度
 8006c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8006e7c <CTRL_refTarget+0x5f4>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7f9 fc80 	bl	8000598 <__aeabi_f2d>
 8006c98:	4604      	mov	r4, r0
 8006c9a:	460d      	mov	r5, r1
 8006c9c:	4b72      	ldr	r3, [pc, #456]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7f9 fc79 	bl	8000598 <__aeabi_f2d>
 8006ca6:	a36a      	add	r3, pc, #424	@ (adr r3, 8006e50 <CTRL_refTarget+0x5c8>)
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f7f9 fccc 	bl	8000648 <__aeabi_dmul>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	f7f9 fb10 	bl	80002dc <__adddf3>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	f7f9 ffb8 	bl	8000c38 <__aeabi_d2f>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	4a6c      	ldr	r2, [pc, #432]	@ (8006e7c <CTRL_refTarget+0x5f4>)
 8006ccc:	6013      	str	r3, [r2, #0]
				}
				else{
					f_TrgtAngleS = f_LastAngleS;
				}
			}
			break;
 8006cce:	f000 bf32 	b.w	8007b36 <CTRL_refTarget+0x12ae>
					f_TrgtAngleS = f_LastAngleS;
 8006cd2:	4b6b      	ldr	r3, [pc, #428]	@ (8006e80 <CTRL_refTarget+0x5f8>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a69      	ldr	r2, [pc, #420]	@ (8006e7c <CTRL_refTarget+0x5f4>)
 8006cd8:	6013      	str	r3, [r2, #0]
			break;
 8006cda:	f000 bf2c 	b.w	8007b36 <CTRL_refTarget+0x12ae>
				if(f_BaseAccAngle < 0){
 8006cde:	4b65      	ldr	r3, [pc, #404]	@ (8006e74 <CTRL_refTarget+0x5ec>)
 8006ce0:	edd3 7a00 	vldr	s15, [r3]
 8006ce4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cec:	d50c      	bpl.n	8006d08 <CTRL_refTarget+0x480>
					if(f_TrgtAccAngle > 0.0){
 8006cee:	4b5e      	ldr	r3, [pc, #376]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006cf0:	edd3 7a00 	vldr	s15, [r3]
 8006cf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cfc:	dd13      	ble.n	8006d26 <CTRL_refTarget+0x49e>
						f_TrgtAccAngle = 0.0;
 8006cfe:	4b5a      	ldr	r3, [pc, #360]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	e00e      	b.n	8006d26 <CTRL_refTarget+0x49e>
					if(f_TrgtAccAngle < f_LastAccAngle){
 8006d08:	4b57      	ldr	r3, [pc, #348]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006d0a:	ed93 7a00 	vldr	s14, [r3]
 8006d0e:	4b5a      	ldr	r3, [pc, #360]	@ (8006e78 <CTRL_refTarget+0x5f0>)
 8006d10:	edd3 7a00 	vldr	s15, [r3]
 8006d14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d1c:	d503      	bpl.n	8006d26 <CTRL_refTarget+0x49e>
						f_TrgtAccAngle = f_LastAccAngle;
 8006d1e:	4b56      	ldr	r3, [pc, #344]	@ (8006e78 <CTRL_refTarget+0x5f0>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a51      	ldr	r2, [pc, #324]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006d24:	6013      	str	r3, [r2, #0]
				if( f_TrgtAngleS > (f_LastAngleS +(f_TrgtAccAngle * 0.001)) ){
 8006d26:	4b55      	ldr	r3, [pc, #340]	@ (8006e7c <CTRL_refTarget+0x5f4>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7f9 fc34 	bl	8000598 <__aeabi_f2d>
 8006d30:	4604      	mov	r4, r0
 8006d32:	460d      	mov	r5, r1
 8006d34:	4b52      	ldr	r3, [pc, #328]	@ (8006e80 <CTRL_refTarget+0x5f8>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7f9 fc2d 	bl	8000598 <__aeabi_f2d>
 8006d3e:	4680      	mov	r8, r0
 8006d40:	4689      	mov	r9, r1
 8006d42:	4b49      	ldr	r3, [pc, #292]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7f9 fc26 	bl	8000598 <__aeabi_f2d>
 8006d4c:	a340      	add	r3, pc, #256	@ (adr r3, 8006e50 <CTRL_refTarget+0x5c8>)
 8006d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d52:	f7f9 fc79 	bl	8000648 <__aeabi_dmul>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	f7f9 fabd 	bl	80002dc <__adddf3>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4620      	mov	r0, r4
 8006d68:	4629      	mov	r1, r5
 8006d6a:	f7f9 fefd 	bl	8000b68 <__aeabi_dcmpgt>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d021      	beq.n	8006db8 <CTRL_refTarget+0x530>
					f_TrgtAngleS += f_TrgtAccAngle * 0.001;									// 目標角速度
 8006d74:	4b41      	ldr	r3, [pc, #260]	@ (8006e7c <CTRL_refTarget+0x5f4>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7f9 fc0d 	bl	8000598 <__aeabi_f2d>
 8006d7e:	4604      	mov	r4, r0
 8006d80:	460d      	mov	r5, r1
 8006d82:	4b39      	ldr	r3, [pc, #228]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7f9 fc06 	bl	8000598 <__aeabi_f2d>
 8006d8c:	a330      	add	r3, pc, #192	@ (adr r3, 8006e50 <CTRL_refTarget+0x5c8>)
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f7f9 fc59 	bl	8000648 <__aeabi_dmul>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	f7f9 fa9d 	bl	80002dc <__adddf3>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	4610      	mov	r0, r2
 8006da8:	4619      	mov	r1, r3
 8006daa:	f7f9 ff45 	bl	8000c38 <__aeabi_d2f>
 8006dae:	4603      	mov	r3, r0
 8006db0:	4a32      	ldr	r2, [pc, #200]	@ (8006e7c <CTRL_refTarget+0x5f4>)
 8006db2:	6013      	str	r3, [r2, #0]
			break;
 8006db4:	f000 bebf 	b.w	8007b36 <CTRL_refTarget+0x12ae>
					f_TrgtAngleS = f_LastAngleS;
 8006db8:	4b31      	ldr	r3, [pc, #196]	@ (8006e80 <CTRL_refTarget+0x5f8>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a2f      	ldr	r2, [pc, #188]	@ (8006e7c <CTRL_refTarget+0x5f4>)
 8006dbe:	6013      	str	r3, [r2, #0]
			break;
 8006dc0:	f000 beb9 	b.w	8007b36 <CTRL_refTarget+0x12ae>

		/* const(Turn) */
		case CTRL_CONST_TRUN:
			f_TrgtAngleS =f_BaseAngleS;
 8006dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8006e84 <CTRL_refTarget+0x5fc>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8006e7c <CTRL_refTarget+0x5f4>)
 8006dca:	6013      	str	r3, [r2, #0]
			break;
 8006dcc:	f000 beb3 	b.w	8007b36 <CTRL_refTarget+0x12ae>

		/* dec(Turn) */
		case CTRL_DEC_TRUN:
			f_TrgtAccAngle += f_JerkAngle*0.001;
 8006dd0:	4b25      	ldr	r3, [pc, #148]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7f9 fbdf 	bl	8000598 <__aeabi_f2d>
 8006dda:	4604      	mov	r4, r0
 8006ddc:	460d      	mov	r5, r1
 8006dde:	4b23      	ldr	r3, [pc, #140]	@ (8006e6c <CTRL_refTarget+0x5e4>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7f9 fbd8 	bl	8000598 <__aeabi_f2d>
 8006de8:	a319      	add	r3, pc, #100	@ (adr r3, 8006e50 <CTRL_refTarget+0x5c8>)
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	f7f9 fc2b 	bl	8000648 <__aeabi_dmul>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4620      	mov	r0, r4
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f7f9 fa6f 	bl	80002dc <__adddf3>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	4610      	mov	r0, r2
 8006e04:	4619      	mov	r1, r3
 8006e06:	f7f9 ff17 	bl	8000c38 <__aeabi_d2f>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	4a16      	ldr	r2, [pc, #88]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006e0e:	6013      	str	r3, [r2, #0]

			/* CCW */
			if( f_LastAngle > 0 ){
 8006e10:	4b17      	ldr	r3, [pc, #92]	@ (8006e70 <CTRL_refTarget+0x5e8>)
 8006e12:	edd3 7a00 	vldr	s15, [r3]
 8006e16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e1e:	f340 80b5 	ble.w	8006f8c <CTRL_refTarget+0x704>
				if(f_BaseAccAngle < 0){
 8006e22:	4b14      	ldr	r3, [pc, #80]	@ (8006e74 <CTRL_refTarget+0x5ec>)
 8006e24:	edd3 7a00 	vldr	s15, [r3]
 8006e28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e30:	d52a      	bpl.n	8006e88 <CTRL_refTarget+0x600>
					if(f_TrgtAccAngle > 0.0){
 8006e32:	4b0d      	ldr	r3, [pc, #52]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006e34:	edd3 7a00 	vldr	s15, [r3]
 8006e38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e40:	dd31      	ble.n	8006ea6 <CTRL_refTarget+0x61e>
						f_TrgtAccAngle = 0.0;
 8006e42:	4b09      	ldr	r3, [pc, #36]	@ (8006e68 <CTRL_refTarget+0x5e0>)
 8006e44:	f04f 0200 	mov.w	r2, #0
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	e02c      	b.n	8006ea6 <CTRL_refTarget+0x61e>
 8006e4c:	f3af 8000 	nop.w
 8006e50:	d2f1a9fc 	.word	0xd2f1a9fc
 8006e54:	3f50624d 	.word	0x3f50624d
 8006e58:	2000036c 	.word	0x2000036c
 8006e5c:	20000374 	.word	0x20000374
 8006e60:	2000038c 	.word	0x2000038c
 8006e64:	20000390 	.word	0x20000390
 8006e68:	200003ac 	.word	0x200003ac
 8006e6c:	200003a4 	.word	0x200003a4
 8006e70:	200003cc 	.word	0x200003cc
 8006e74:	200003a8 	.word	0x200003a8
 8006e78:	200003b0 	.word	0x200003b0
 8006e7c:	200003bc 	.word	0x200003bc
 8006e80:	200003b8 	.word	0x200003b8
 8006e84:	200003b4 	.word	0x200003b4
					}
				}else{
					if(f_TrgtAccAngle < f_LastAccAngle){
 8006e88:	4bb5      	ldr	r3, [pc, #724]	@ (8007160 <CTRL_refTarget+0x8d8>)
 8006e8a:	ed93 7a00 	vldr	s14, [r3]
 8006e8e:	4bb5      	ldr	r3, [pc, #724]	@ (8007164 <CTRL_refTarget+0x8dc>)
 8006e90:	edd3 7a00 	vldr	s15, [r3]
 8006e94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e9c:	d503      	bpl.n	8006ea6 <CTRL_refTarget+0x61e>
						f_TrgtAccAngle = f_LastAccAngle;
 8006e9e:	4bb1      	ldr	r3, [pc, #708]	@ (8007164 <CTRL_refTarget+0x8dc>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4aaf      	ldr	r2, [pc, #700]	@ (8007160 <CTRL_refTarget+0x8d8>)
 8006ea4:	6013      	str	r3, [r2, #0]
					}
				}

				/* Angle speed CTRL + Angle CTRL */
				if( f_TrgtAngleS > (f_LastAngleS +(f_TrgtAccAngle * 0.001)) ){						// 減速目標更新区間
 8006ea6:	4bb0      	ldr	r3, [pc, #704]	@ (8007168 <CTRL_refTarget+0x8e0>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7f9 fb74 	bl	8000598 <__aeabi_f2d>
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	460d      	mov	r5, r1
 8006eb4:	4bad      	ldr	r3, [pc, #692]	@ (800716c <CTRL_refTarget+0x8e4>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7f9 fb6d 	bl	8000598 <__aeabi_f2d>
 8006ebe:	4680      	mov	r8, r0
 8006ec0:	4689      	mov	r9, r1
 8006ec2:	4ba7      	ldr	r3, [pc, #668]	@ (8007160 <CTRL_refTarget+0x8d8>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7f9 fb66 	bl	8000598 <__aeabi_f2d>
 8006ecc:	a3a2      	add	r3, pc, #648	@ (adr r3, 8007158 <CTRL_refTarget+0x8d0>)
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	f7f9 fbb9 	bl	8000648 <__aeabi_dmul>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	4640      	mov	r0, r8
 8006edc:	4649      	mov	r1, r9
 8006ede:	f7f9 f9fd 	bl	80002dc <__adddf3>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	4629      	mov	r1, r5
 8006eea:	f7f9 fe3d 	bl	8000b68 <__aeabi_dcmpgt>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d041      	beq.n	8006f78 <CTRL_refTarget+0x6f0>
					f_TrgtAngleS += f_TrgtAccAngle * 0.001;							// 目標角速度
 8006ef4:	4b9c      	ldr	r3, [pc, #624]	@ (8007168 <CTRL_refTarget+0x8e0>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7f9 fb4d 	bl	8000598 <__aeabi_f2d>
 8006efe:	4604      	mov	r4, r0
 8006f00:	460d      	mov	r5, r1
 8006f02:	4b97      	ldr	r3, [pc, #604]	@ (8007160 <CTRL_refTarget+0x8d8>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7f9 fb46 	bl	8000598 <__aeabi_f2d>
 8006f0c:	a392      	add	r3, pc, #584	@ (adr r3, 8007158 <CTRL_refTarget+0x8d0>)
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	f7f9 fb99 	bl	8000648 <__aeabi_dmul>
 8006f16:	4602      	mov	r2, r0
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	f7f9 f9dd 	bl	80002dc <__adddf3>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4610      	mov	r0, r2
 8006f28:	4619      	mov	r1, r3
 8006f2a:	f7f9 fe85 	bl	8000c38 <__aeabi_d2f>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	4a8d      	ldr	r2, [pc, #564]	@ (8007168 <CTRL_refTarget+0x8e0>)
 8006f32:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  += f_TrgtAngleS * 0.001;	// 目標角度
 8006f34:	4b8e      	ldr	r3, [pc, #568]	@ (8007170 <CTRL_refTarget+0x8e8>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7f9 fb2d 	bl	8000598 <__aeabi_f2d>
 8006f3e:	4604      	mov	r4, r0
 8006f40:	460d      	mov	r5, r1
 8006f42:	4b89      	ldr	r3, [pc, #548]	@ (8007168 <CTRL_refTarget+0x8e0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7f9 fb26 	bl	8000598 <__aeabi_f2d>
 8006f4c:	a382      	add	r3, pc, #520	@ (adr r3, 8007158 <CTRL_refTarget+0x8d0>)
 8006f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f52:	f7f9 fb79 	bl	8000648 <__aeabi_dmul>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	f7f9 f9bd 	bl	80002dc <__adddf3>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4610      	mov	r0, r2
 8006f68:	4619      	mov	r1, r3
 8006f6a:	f7f9 fe65 	bl	8000c38 <__aeabi_d2f>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	4a7f      	ldr	r2, [pc, #508]	@ (8007170 <CTRL_refTarget+0x8e8>)
 8006f72:	6013      	str	r3, [r2, #0]
				else{
					f_TrgtAngleS = f_LastAngleS;
					f_TrgtAngle  = f_LastAngle;													// 目標距離
				}
			}
			break;
 8006f74:	f000 bddf 	b.w	8007b36 <CTRL_refTarget+0x12ae>
					f_TrgtAngleS = f_LastAngleS;
 8006f78:	4b7c      	ldr	r3, [pc, #496]	@ (800716c <CTRL_refTarget+0x8e4>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a7a      	ldr	r2, [pc, #488]	@ (8007168 <CTRL_refTarget+0x8e0>)
 8006f7e:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 8006f80:	4b7c      	ldr	r3, [pc, #496]	@ (8007174 <CTRL_refTarget+0x8ec>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a7a      	ldr	r2, [pc, #488]	@ (8007170 <CTRL_refTarget+0x8e8>)
 8006f86:	6013      	str	r3, [r2, #0]
			break;
 8006f88:	f000 bdd5 	b.w	8007b36 <CTRL_refTarget+0x12ae>
				if(f_BaseAccAngle > 0){
 8006f8c:	4b7a      	ldr	r3, [pc, #488]	@ (8007178 <CTRL_refTarget+0x8f0>)
 8006f8e:	edd3 7a00 	vldr	s15, [r3]
 8006f92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f9a:	dd0c      	ble.n	8006fb6 <CTRL_refTarget+0x72e>
					if(f_TrgtAccAngle < 0.0){
 8006f9c:	4b70      	ldr	r3, [pc, #448]	@ (8007160 <CTRL_refTarget+0x8d8>)
 8006f9e:	edd3 7a00 	vldr	s15, [r3]
 8006fa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006faa:	d513      	bpl.n	8006fd4 <CTRL_refTarget+0x74c>
						f_TrgtAccAngle = 0.0;
 8006fac:	4b6c      	ldr	r3, [pc, #432]	@ (8007160 <CTRL_refTarget+0x8d8>)
 8006fae:	f04f 0200 	mov.w	r2, #0
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	e00e      	b.n	8006fd4 <CTRL_refTarget+0x74c>
					if(f_TrgtAccAngle > f_LastAccAngle){
 8006fb6:	4b6a      	ldr	r3, [pc, #424]	@ (8007160 <CTRL_refTarget+0x8d8>)
 8006fb8:	ed93 7a00 	vldr	s14, [r3]
 8006fbc:	4b69      	ldr	r3, [pc, #420]	@ (8007164 <CTRL_refTarget+0x8dc>)
 8006fbe:	edd3 7a00 	vldr	s15, [r3]
 8006fc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fca:	dd03      	ble.n	8006fd4 <CTRL_refTarget+0x74c>
						f_TrgtAccAngle = f_LastAccAngle;
 8006fcc:	4b65      	ldr	r3, [pc, #404]	@ (8007164 <CTRL_refTarget+0x8dc>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a63      	ldr	r2, [pc, #396]	@ (8007160 <CTRL_refTarget+0x8d8>)
 8006fd2:	6013      	str	r3, [r2, #0]
				if( f_TrgtAngleS < (f_LastAngleS +(f_TrgtAccAngle * 0.001))){						// 減速目標更新区間
 8006fd4:	4b64      	ldr	r3, [pc, #400]	@ (8007168 <CTRL_refTarget+0x8e0>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7f9 fadd 	bl	8000598 <__aeabi_f2d>
 8006fde:	4604      	mov	r4, r0
 8006fe0:	460d      	mov	r5, r1
 8006fe2:	4b62      	ldr	r3, [pc, #392]	@ (800716c <CTRL_refTarget+0x8e4>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7f9 fad6 	bl	8000598 <__aeabi_f2d>
 8006fec:	4680      	mov	r8, r0
 8006fee:	4689      	mov	r9, r1
 8006ff0:	4b5b      	ldr	r3, [pc, #364]	@ (8007160 <CTRL_refTarget+0x8d8>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7f9 facf 	bl	8000598 <__aeabi_f2d>
 8006ffa:	a357      	add	r3, pc, #348	@ (adr r3, 8007158 <CTRL_refTarget+0x8d0>)
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	f7f9 fb22 	bl	8000648 <__aeabi_dmul>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4640      	mov	r0, r8
 800700a:	4649      	mov	r1, r9
 800700c:	f7f9 f966 	bl	80002dc <__adddf3>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4620      	mov	r0, r4
 8007016:	4629      	mov	r1, r5
 8007018:	f7f9 fd88 	bl	8000b2c <__aeabi_dcmplt>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d041      	beq.n	80070a6 <CTRL_refTarget+0x81e>
					f_TrgtAngleS += f_TrgtAccAngle * 0.001;							// 目標角速度
 8007022:	4b51      	ldr	r3, [pc, #324]	@ (8007168 <CTRL_refTarget+0x8e0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4618      	mov	r0, r3
 8007028:	f7f9 fab6 	bl	8000598 <__aeabi_f2d>
 800702c:	4604      	mov	r4, r0
 800702e:	460d      	mov	r5, r1
 8007030:	4b4b      	ldr	r3, [pc, #300]	@ (8007160 <CTRL_refTarget+0x8d8>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4618      	mov	r0, r3
 8007036:	f7f9 faaf 	bl	8000598 <__aeabi_f2d>
 800703a:	a347      	add	r3, pc, #284	@ (adr r3, 8007158 <CTRL_refTarget+0x8d0>)
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	f7f9 fb02 	bl	8000648 <__aeabi_dmul>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4620      	mov	r0, r4
 800704a:	4629      	mov	r1, r5
 800704c:	f7f9 f946 	bl	80002dc <__adddf3>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	4610      	mov	r0, r2
 8007056:	4619      	mov	r1, r3
 8007058:	f7f9 fdee 	bl	8000c38 <__aeabi_d2f>
 800705c:	4603      	mov	r3, r0
 800705e:	4a42      	ldr	r2, [pc, #264]	@ (8007168 <CTRL_refTarget+0x8e0>)
 8007060:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  += f_TrgtAngleS * 0.001;	// 目標角度
 8007062:	4b43      	ldr	r3, [pc, #268]	@ (8007170 <CTRL_refTarget+0x8e8>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4618      	mov	r0, r3
 8007068:	f7f9 fa96 	bl	8000598 <__aeabi_f2d>
 800706c:	4604      	mov	r4, r0
 800706e:	460d      	mov	r5, r1
 8007070:	4b3d      	ldr	r3, [pc, #244]	@ (8007168 <CTRL_refTarget+0x8e0>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4618      	mov	r0, r3
 8007076:	f7f9 fa8f 	bl	8000598 <__aeabi_f2d>
 800707a:	a337      	add	r3, pc, #220	@ (adr r3, 8007158 <CTRL_refTarget+0x8d0>)
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	f7f9 fae2 	bl	8000648 <__aeabi_dmul>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4620      	mov	r0, r4
 800708a:	4629      	mov	r1, r5
 800708c:	f7f9 f926 	bl	80002dc <__adddf3>
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	4610      	mov	r0, r2
 8007096:	4619      	mov	r1, r3
 8007098:	f7f9 fdce 	bl	8000c38 <__aeabi_d2f>
 800709c:	4603      	mov	r3, r0
 800709e:	4a34      	ldr	r2, [pc, #208]	@ (8007170 <CTRL_refTarget+0x8e8>)
 80070a0:	6013      	str	r3, [r2, #0]
			break;
 80070a2:	f000 bd48 	b.w	8007b36 <CTRL_refTarget+0x12ae>
					f_TrgtAngleS = f_LastAngleS;
 80070a6:	4b31      	ldr	r3, [pc, #196]	@ (800716c <CTRL_refTarget+0x8e4>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a2f      	ldr	r2, [pc, #188]	@ (8007168 <CTRL_refTarget+0x8e0>)
 80070ac:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 80070ae:	4b31      	ldr	r3, [pc, #196]	@ (8007174 <CTRL_refTarget+0x8ec>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a2f      	ldr	r2, [pc, #188]	@ (8007170 <CTRL_refTarget+0x8e8>)
 80070b4:	6013      	str	r3, [r2, #0]
			break;
 80070b6:	f000 bd3e 	b.w	8007b36 <CTRL_refTarget+0x12ae>

		/* entry(sla) */
		case CTRL_ENTRY_SLA:
			f_TrgtSpeed = f_BaseSpeed;
 80070ba:	4b30      	ldr	r3, [pc, #192]	@ (800717c <CTRL_refTarget+0x8f4>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a30      	ldr	r2, [pc, #192]	@ (8007180 <CTRL_refTarget+0x8f8>)
 80070c0:	6013      	str	r3, [r2, #0]
			if( f_TrgtDist <= f_LastDist - (f_TrgtSpeed * 0.001) ){
 80070c2:	4b30      	ldr	r3, [pc, #192]	@ (8007184 <CTRL_refTarget+0x8fc>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7f9 fa66 	bl	8000598 <__aeabi_f2d>
 80070cc:	4604      	mov	r4, r0
 80070ce:	460d      	mov	r5, r1
 80070d0:	4b2d      	ldr	r3, [pc, #180]	@ (8007188 <CTRL_refTarget+0x900>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7f9 fa5f 	bl	8000598 <__aeabi_f2d>
 80070da:	4680      	mov	r8, r0
 80070dc:	4689      	mov	r9, r1
 80070de:	4b28      	ldr	r3, [pc, #160]	@ (8007180 <CTRL_refTarget+0x8f8>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7f9 fa58 	bl	8000598 <__aeabi_f2d>
 80070e8:	a31b      	add	r3, pc, #108	@ (adr r3, 8007158 <CTRL_refTarget+0x8d0>)
 80070ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ee:	f7f9 faab 	bl	8000648 <__aeabi_dmul>
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	4640      	mov	r0, r8
 80070f8:	4649      	mov	r1, r9
 80070fa:	f7f9 f8ed 	bl	80002d8 <__aeabi_dsub>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4620      	mov	r0, r4
 8007104:	4629      	mov	r1, r5
 8007106:	f7f9 fd1b 	bl	8000b40 <__aeabi_dcmple>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <CTRL_refTarget+0x88c>
				f_TrgtDist  += f_TrgtSpeed * 0.001;								// 目標距離
			}
			break;
 8007110:	f000 bd11 	b.w	8007b36 <CTRL_refTarget+0x12ae>
				f_TrgtDist  += f_TrgtSpeed * 0.001;								// 目標距離
 8007114:	4b1b      	ldr	r3, [pc, #108]	@ (8007184 <CTRL_refTarget+0x8fc>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4618      	mov	r0, r3
 800711a:	f7f9 fa3d 	bl	8000598 <__aeabi_f2d>
 800711e:	4604      	mov	r4, r0
 8007120:	460d      	mov	r5, r1
 8007122:	4b17      	ldr	r3, [pc, #92]	@ (8007180 <CTRL_refTarget+0x8f8>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4618      	mov	r0, r3
 8007128:	f7f9 fa36 	bl	8000598 <__aeabi_f2d>
 800712c:	a30a      	add	r3, pc, #40	@ (adr r3, 8007158 <CTRL_refTarget+0x8d0>)
 800712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007132:	f7f9 fa89 	bl	8000648 <__aeabi_dmul>
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	4620      	mov	r0, r4
 800713c:	4629      	mov	r1, r5
 800713e:	f7f9 f8cd 	bl	80002dc <__adddf3>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	4610      	mov	r0, r2
 8007148:	4619      	mov	r1, r3
 800714a:	f7f9 fd75 	bl	8000c38 <__aeabi_d2f>
 800714e:	4603      	mov	r3, r0
 8007150:	4a0c      	ldr	r2, [pc, #48]	@ (8007184 <CTRL_refTarget+0x8fc>)
 8007152:	6013      	str	r3, [r2, #0]
			break;
 8007154:	f000 bcef 	b.w	8007b36 <CTRL_refTarget+0x12ae>
 8007158:	d2f1a9fc 	.word	0xd2f1a9fc
 800715c:	3f50624d 	.word	0x3f50624d
 8007160:	200003ac 	.word	0x200003ac
 8007164:	200003b0 	.word	0x200003b0
 8007168:	200003bc 	.word	0x200003bc
 800716c:	200003b8 	.word	0x200003b8
 8007170:	200003d4 	.word	0x200003d4
 8007174:	200003cc 	.word	0x200003cc
 8007178:	200003a8 	.word	0x200003a8
 800717c:	20000368 	.word	0x20000368
 8007180:	20000374 	.word	0x20000374
 8007184:	20000390 	.word	0x20000390
 8007188:	2000038c 	.word	0x2000038c

		/* acc(スラローム) */
		case CTRL_ACC_SLA:
			f_TrgtSpeed = f_BaseSpeed;
 800718c:	4ba6      	ldr	r3, [pc, #664]	@ (8007428 <CTRL_refTarget+0xba0>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4aa6      	ldr	r2, [pc, #664]	@ (800742c <CTRL_refTarget+0xba4>)
 8007192:	6013      	str	r3, [r2, #0]
			f_TrgtAccAngle += f_JerkAngle*0.001;
 8007194:	4ba6      	ldr	r3, [pc, #664]	@ (8007430 <CTRL_refTarget+0xba8>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4618      	mov	r0, r3
 800719a:	f7f9 f9fd 	bl	8000598 <__aeabi_f2d>
 800719e:	4604      	mov	r4, r0
 80071a0:	460d      	mov	r5, r1
 80071a2:	4ba4      	ldr	r3, [pc, #656]	@ (8007434 <CTRL_refTarget+0xbac>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7f9 f9f6 	bl	8000598 <__aeabi_f2d>
 80071ac:	a39c      	add	r3, pc, #624	@ (adr r3, 8007420 <CTRL_refTarget+0xb98>)
 80071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b2:	f7f9 fa49 	bl	8000648 <__aeabi_dmul>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4620      	mov	r0, r4
 80071bc:	4629      	mov	r1, r5
 80071be:	f7f9 f88d 	bl	80002dc <__adddf3>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4610      	mov	r0, r2
 80071c8:	4619      	mov	r1, r3
 80071ca:	f7f9 fd35 	bl	8000c38 <__aeabi_d2f>
 80071ce:	4603      	mov	r3, r0
 80071d0:	4a97      	ldr	r2, [pc, #604]	@ (8007430 <CTRL_refTarget+0xba8>)
 80071d2:	6013      	str	r3, [r2, #0]

			/* CCW */
			if( f_LastAngle > 0 ){
 80071d4:	4b98      	ldr	r3, [pc, #608]	@ (8007438 <CTRL_refTarget+0xbb0>)
 80071d6:	edd3 7a00 	vldr	s15, [r3]
 80071da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e2:	f340 8091 	ble.w	8007308 <CTRL_refTarget+0xa80>
				if(f_BaseAccAngle > 0){
 80071e6:	4b95      	ldr	r3, [pc, #596]	@ (800743c <CTRL_refTarget+0xbb4>)
 80071e8:	edd3 7a00 	vldr	s15, [r3]
 80071ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f4:	dd0c      	ble.n	8007210 <CTRL_refTarget+0x988>
					if(f_TrgtAccAngle < 0.0){
 80071f6:	4b8e      	ldr	r3, [pc, #568]	@ (8007430 <CTRL_refTarget+0xba8>)
 80071f8:	edd3 7a00 	vldr	s15, [r3]
 80071fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007204:	d513      	bpl.n	800722e <CTRL_refTarget+0x9a6>
						f_TrgtAccAngle = 0.0;
 8007206:	4b8a      	ldr	r3, [pc, #552]	@ (8007430 <CTRL_refTarget+0xba8>)
 8007208:	f04f 0200 	mov.w	r2, #0
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	e00e      	b.n	800722e <CTRL_refTarget+0x9a6>
					}
				}else{
					if(f_TrgtAccAngle > f_LastAccAngle){
 8007210:	4b87      	ldr	r3, [pc, #540]	@ (8007430 <CTRL_refTarget+0xba8>)
 8007212:	ed93 7a00 	vldr	s14, [r3]
 8007216:	4b8a      	ldr	r3, [pc, #552]	@ (8007440 <CTRL_refTarget+0xbb8>)
 8007218:	edd3 7a00 	vldr	s15, [r3]
 800721c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007224:	dd03      	ble.n	800722e <CTRL_refTarget+0x9a6>
						f_TrgtAccAngle = f_LastAccAngle;
 8007226:	4b86      	ldr	r3, [pc, #536]	@ (8007440 <CTRL_refTarget+0xbb8>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a81      	ldr	r2, [pc, #516]	@ (8007430 <CTRL_refTarget+0xba8>)
 800722c:	6013      	str	r3, [r2, #0]
					}
				}

				if( f_TrgtAngleS < (f_LastAngleS +(f_TrgtAccAngle * 0.001))){
 800722e:	4b85      	ldr	r3, [pc, #532]	@ (8007444 <CTRL_refTarget+0xbbc>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4618      	mov	r0, r3
 8007234:	f7f9 f9b0 	bl	8000598 <__aeabi_f2d>
 8007238:	4604      	mov	r4, r0
 800723a:	460d      	mov	r5, r1
 800723c:	4b82      	ldr	r3, [pc, #520]	@ (8007448 <CTRL_refTarget+0xbc0>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4618      	mov	r0, r3
 8007242:	f7f9 f9a9 	bl	8000598 <__aeabi_f2d>
 8007246:	4680      	mov	r8, r0
 8007248:	4689      	mov	r9, r1
 800724a:	4b79      	ldr	r3, [pc, #484]	@ (8007430 <CTRL_refTarget+0xba8>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4618      	mov	r0, r3
 8007250:	f7f9 f9a2 	bl	8000598 <__aeabi_f2d>
 8007254:	a372      	add	r3, pc, #456	@ (adr r3, 8007420 <CTRL_refTarget+0xb98>)
 8007256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725a:	f7f9 f9f5 	bl	8000648 <__aeabi_dmul>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	4640      	mov	r0, r8
 8007264:	4649      	mov	r1, r9
 8007266:	f7f9 f839 	bl	80002dc <__adddf3>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4620      	mov	r0, r4
 8007270:	4629      	mov	r1, r5
 8007272:	f7f9 fc5b 	bl	8000b2c <__aeabi_dcmplt>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d040      	beq.n	80072fe <CTRL_refTarget+0xa76>
					f_TrgtAngleS += f_TrgtAccAngle * 0.001;							// 目標角速度
 800727c:	4b71      	ldr	r3, [pc, #452]	@ (8007444 <CTRL_refTarget+0xbbc>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4618      	mov	r0, r3
 8007282:	f7f9 f989 	bl	8000598 <__aeabi_f2d>
 8007286:	4604      	mov	r4, r0
 8007288:	460d      	mov	r5, r1
 800728a:	4b69      	ldr	r3, [pc, #420]	@ (8007430 <CTRL_refTarget+0xba8>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f7f9 f982 	bl	8000598 <__aeabi_f2d>
 8007294:	a362      	add	r3, pc, #392	@ (adr r3, 8007420 <CTRL_refTarget+0xb98>)
 8007296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729a:	f7f9 f9d5 	bl	8000648 <__aeabi_dmul>
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	4620      	mov	r0, r4
 80072a4:	4629      	mov	r1, r5
 80072a6:	f7f9 f819 	bl	80002dc <__adddf3>
 80072aa:	4602      	mov	r2, r0
 80072ac:	460b      	mov	r3, r1
 80072ae:	4610      	mov	r0, r2
 80072b0:	4619      	mov	r1, r3
 80072b2:	f7f9 fcc1 	bl	8000c38 <__aeabi_d2f>
 80072b6:	4603      	mov	r3, r0
 80072b8:	4a62      	ldr	r2, [pc, #392]	@ (8007444 <CTRL_refTarget+0xbbc>)
 80072ba:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  += f_TrgtAngleS * 0.001;	// 目標角度
 80072bc:	4b63      	ldr	r3, [pc, #396]	@ (800744c <CTRL_refTarget+0xbc4>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7f9 f969 	bl	8000598 <__aeabi_f2d>
 80072c6:	4604      	mov	r4, r0
 80072c8:	460d      	mov	r5, r1
 80072ca:	4b5e      	ldr	r3, [pc, #376]	@ (8007444 <CTRL_refTarget+0xbbc>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7f9 f962 	bl	8000598 <__aeabi_f2d>
 80072d4:	a352      	add	r3, pc, #328	@ (adr r3, 8007420 <CTRL_refTarget+0xb98>)
 80072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072da:	f7f9 f9b5 	bl	8000648 <__aeabi_dmul>
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	4620      	mov	r0, r4
 80072e4:	4629      	mov	r1, r5
 80072e6:	f7f8 fff9 	bl	80002dc <__adddf3>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4610      	mov	r0, r2
 80072f0:	4619      	mov	r1, r3
 80072f2:	f7f9 fca1 	bl	8000c38 <__aeabi_d2f>
 80072f6:	4603      	mov	r3, r0
 80072f8:	4a54      	ldr	r2, [pc, #336]	@ (800744c <CTRL_refTarget+0xbc4>)
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	e0ac      	b.n	8007458 <CTRL_refTarget+0xbd0>
//					printf("%5.2f %5.2f %5.4f %5.2f %5.2f\n\r",f_TrgtAngleS,f_AccAngleS,f_Time,f_TrgtAngle,f_LastAngleS);
				}
				else{
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 80072fe:	4b4e      	ldr	r3, [pc, #312]	@ (8007438 <CTRL_refTarget+0xbb0>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a52      	ldr	r2, [pc, #328]	@ (800744c <CTRL_refTarget+0xbc4>)
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	e0a7      	b.n	8007458 <CTRL_refTarget+0xbd0>
				}
			}
			/* CW */
			else{
				if(f_BaseAccAngle < 0){
 8007308:	4b4c      	ldr	r3, [pc, #304]	@ (800743c <CTRL_refTarget+0xbb4>)
 800730a:	edd3 7a00 	vldr	s15, [r3]
 800730e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007316:	d50c      	bpl.n	8007332 <CTRL_refTarget+0xaaa>
					if(f_TrgtAccAngle > 0.0){
 8007318:	4b45      	ldr	r3, [pc, #276]	@ (8007430 <CTRL_refTarget+0xba8>)
 800731a:	edd3 7a00 	vldr	s15, [r3]
 800731e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007326:	dd13      	ble.n	8007350 <CTRL_refTarget+0xac8>
						f_TrgtAccAngle = 0.0;
 8007328:	4b41      	ldr	r3, [pc, #260]	@ (8007430 <CTRL_refTarget+0xba8>)
 800732a:	f04f 0200 	mov.w	r2, #0
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	e00e      	b.n	8007350 <CTRL_refTarget+0xac8>
					}
				}else{
					if(f_TrgtAccAngle < f_LastAccAngle){
 8007332:	4b3f      	ldr	r3, [pc, #252]	@ (8007430 <CTRL_refTarget+0xba8>)
 8007334:	ed93 7a00 	vldr	s14, [r3]
 8007338:	4b41      	ldr	r3, [pc, #260]	@ (8007440 <CTRL_refTarget+0xbb8>)
 800733a:	edd3 7a00 	vldr	s15, [r3]
 800733e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007346:	d503      	bpl.n	8007350 <CTRL_refTarget+0xac8>
						f_TrgtAccAngle = f_LastAccAngle;
 8007348:	4b3d      	ldr	r3, [pc, #244]	@ (8007440 <CTRL_refTarget+0xbb8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a38      	ldr	r2, [pc, #224]	@ (8007430 <CTRL_refTarget+0xba8>)
 800734e:	6013      	str	r3, [r2, #0]
					}
				}

				if( f_TrgtAngleS > (f_LastAngleS -(f_TrgtAccAngle * 0.001)) ){
 8007350:	4b3c      	ldr	r3, [pc, #240]	@ (8007444 <CTRL_refTarget+0xbbc>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4618      	mov	r0, r3
 8007356:	f7f9 f91f 	bl	8000598 <__aeabi_f2d>
 800735a:	4604      	mov	r4, r0
 800735c:	460d      	mov	r5, r1
 800735e:	4b3a      	ldr	r3, [pc, #232]	@ (8007448 <CTRL_refTarget+0xbc0>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4618      	mov	r0, r3
 8007364:	f7f9 f918 	bl	8000598 <__aeabi_f2d>
 8007368:	4680      	mov	r8, r0
 800736a:	4689      	mov	r9, r1
 800736c:	4b30      	ldr	r3, [pc, #192]	@ (8007430 <CTRL_refTarget+0xba8>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4618      	mov	r0, r3
 8007372:	f7f9 f911 	bl	8000598 <__aeabi_f2d>
 8007376:	a32a      	add	r3, pc, #168	@ (adr r3, 8007420 <CTRL_refTarget+0xb98>)
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	f7f9 f964 	bl	8000648 <__aeabi_dmul>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4640      	mov	r0, r8
 8007386:	4649      	mov	r1, r9
 8007388:	f7f8 ffa6 	bl	80002d8 <__aeabi_dsub>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	4620      	mov	r0, r4
 8007392:	4629      	mov	r1, r5
 8007394:	f7f9 fbe8 	bl	8000b68 <__aeabi_dcmpgt>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d058      	beq.n	8007450 <CTRL_refTarget+0xbc8>
					f_TrgtAngleS += f_TrgtAccAngle * 0.001;							// 目標角速度
 800739e:	4b29      	ldr	r3, [pc, #164]	@ (8007444 <CTRL_refTarget+0xbbc>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7f9 f8f8 	bl	8000598 <__aeabi_f2d>
 80073a8:	4604      	mov	r4, r0
 80073aa:	460d      	mov	r5, r1
 80073ac:	4b20      	ldr	r3, [pc, #128]	@ (8007430 <CTRL_refTarget+0xba8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7f9 f8f1 	bl	8000598 <__aeabi_f2d>
 80073b6:	a31a      	add	r3, pc, #104	@ (adr r3, 8007420 <CTRL_refTarget+0xb98>)
 80073b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073bc:	f7f9 f944 	bl	8000648 <__aeabi_dmul>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4620      	mov	r0, r4
 80073c6:	4629      	mov	r1, r5
 80073c8:	f7f8 ff88 	bl	80002dc <__adddf3>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4610      	mov	r0, r2
 80073d2:	4619      	mov	r1, r3
 80073d4:	f7f9 fc30 	bl	8000c38 <__aeabi_d2f>
 80073d8:	4603      	mov	r3, r0
 80073da:	4a1a      	ldr	r2, [pc, #104]	@ (8007444 <CTRL_refTarget+0xbbc>)
 80073dc:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  += f_TrgtAngleS * 0.001;	// 目標角度
 80073de:	4b1b      	ldr	r3, [pc, #108]	@ (800744c <CTRL_refTarget+0xbc4>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7f9 f8d8 	bl	8000598 <__aeabi_f2d>
 80073e8:	4604      	mov	r4, r0
 80073ea:	460d      	mov	r5, r1
 80073ec:	4b15      	ldr	r3, [pc, #84]	@ (8007444 <CTRL_refTarget+0xbbc>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7f9 f8d1 	bl	8000598 <__aeabi_f2d>
 80073f6:	a30a      	add	r3, pc, #40	@ (adr r3, 8007420 <CTRL_refTarget+0xb98>)
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	f7f9 f924 	bl	8000648 <__aeabi_dmul>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4620      	mov	r0, r4
 8007406:	4629      	mov	r1, r5
 8007408:	f7f8 ff68 	bl	80002dc <__adddf3>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	4610      	mov	r0, r2
 8007412:	4619      	mov	r1, r3
 8007414:	f7f9 fc10 	bl	8000c38 <__aeabi_d2f>
 8007418:	4603      	mov	r3, r0
 800741a:	4a0c      	ldr	r2, [pc, #48]	@ (800744c <CTRL_refTarget+0xbc4>)
 800741c:	6013      	str	r3, [r2, #0]
 800741e:	e01b      	b.n	8007458 <CTRL_refTarget+0xbd0>
 8007420:	d2f1a9fc 	.word	0xd2f1a9fc
 8007424:	3f50624d 	.word	0x3f50624d
 8007428:	20000368 	.word	0x20000368
 800742c:	20000374 	.word	0x20000374
 8007430:	200003ac 	.word	0x200003ac
 8007434:	200003a4 	.word	0x200003a4
 8007438:	200003cc 	.word	0x200003cc
 800743c:	200003a8 	.word	0x200003a8
 8007440:	200003b0 	.word	0x200003b0
 8007444:	200003bc 	.word	0x200003bc
 8007448:	200003b8 	.word	0x200003b8
 800744c:	200003d4 	.word	0x200003d4
//					printf("%5.2f %5.2f %5.4f %5.2f %5.2f\n\r",f_TrgtAngleS,f_AccAngleS,f_Time,f_TrgtAngle,f_LastAngleS);
				}
				else{
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 8007450:	4ba5      	ldr	r3, [pc, #660]	@ (80076e8 <CTRL_refTarget+0xe60>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4aa5      	ldr	r2, [pc, #660]	@ (80076ec <CTRL_refTarget+0xe64>)
 8007456:	6013      	str	r3, [r2, #0]
				}
			}

			/* Position CTRL */
			if( f_LastDist > (f_TrgtDist - (f_TrgtSpeed * 0.001)) ){						// 目標更新区間
 8007458:	4ba5      	ldr	r3, [pc, #660]	@ (80076f0 <CTRL_refTarget+0xe68>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4618      	mov	r0, r3
 800745e:	f7f9 f89b 	bl	8000598 <__aeabi_f2d>
 8007462:	4604      	mov	r4, r0
 8007464:	460d      	mov	r5, r1
 8007466:	4ba3      	ldr	r3, [pc, #652]	@ (80076f4 <CTRL_refTarget+0xe6c>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4618      	mov	r0, r3
 800746c:	f7f9 f894 	bl	8000598 <__aeabi_f2d>
 8007470:	4680      	mov	r8, r0
 8007472:	4689      	mov	r9, r1
 8007474:	4ba0      	ldr	r3, [pc, #640]	@ (80076f8 <CTRL_refTarget+0xe70>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4618      	mov	r0, r3
 800747a:	f7f9 f88d 	bl	8000598 <__aeabi_f2d>
 800747e:	a398      	add	r3, pc, #608	@ (adr r3, 80076e0 <CTRL_refTarget+0xe58>)
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	f7f9 f8e0 	bl	8000648 <__aeabi_dmul>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	4640      	mov	r0, r8
 800748e:	4649      	mov	r1, r9
 8007490:	f7f8 ff22 	bl	80002d8 <__aeabi_dsub>
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	4620      	mov	r0, r4
 800749a:	4629      	mov	r1, r5
 800749c:	f7f9 fb64 	bl	8000b68 <__aeabi_dcmpgt>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d020      	beq.n	80074e8 <CTRL_refTarget+0xc60>
				f_TrgtDist  += f_TrgtSpeed * 0.001;							// 目標位置
 80074a6:	4b93      	ldr	r3, [pc, #588]	@ (80076f4 <CTRL_refTarget+0xe6c>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7f9 f874 	bl	8000598 <__aeabi_f2d>
 80074b0:	4604      	mov	r4, r0
 80074b2:	460d      	mov	r5, r1
 80074b4:	4b90      	ldr	r3, [pc, #576]	@ (80076f8 <CTRL_refTarget+0xe70>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7f9 f86d 	bl	8000598 <__aeabi_f2d>
 80074be:	a388      	add	r3, pc, #544	@ (adr r3, 80076e0 <CTRL_refTarget+0xe58>)
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	f7f9 f8c0 	bl	8000648 <__aeabi_dmul>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4620      	mov	r0, r4
 80074ce:	4629      	mov	r1, r5
 80074d0:	f7f8 ff04 	bl	80002dc <__adddf3>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4610      	mov	r0, r2
 80074da:	4619      	mov	r1, r3
 80074dc:	f7f9 fbac 	bl	8000c38 <__aeabi_d2f>
 80074e0:	4603      	mov	r3, r0
 80074e2:	4a84      	ldr	r2, [pc, #528]	@ (80076f4 <CTRL_refTarget+0xe6c>)
 80074e4:	6013      	str	r3, [r2, #0]
			}
			else{
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 80074e6:	e326      	b.n	8007b36 <CTRL_refTarget+0x12ae>
				f_TrgtDist  = f_LastDist;													// 目標距離
 80074e8:	4b81      	ldr	r3, [pc, #516]	@ (80076f0 <CTRL_refTarget+0xe68>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a81      	ldr	r2, [pc, #516]	@ (80076f4 <CTRL_refTarget+0xe6c>)
 80074ee:	6013      	str	r3, [r2, #0]
			break;
 80074f0:	e321      	b.n	8007b36 <CTRL_refTarget+0x12ae>

		/* const(sla) */
		case CTRL_CONST_SLA:
			f_TrgtSpeed = f_BaseSpeed;
 80074f2:	4b82      	ldr	r3, [pc, #520]	@ (80076fc <CTRL_refTarget+0xe74>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a80      	ldr	r2, [pc, #512]	@ (80076f8 <CTRL_refTarget+0xe70>)
 80074f8:	6013      	str	r3, [r2, #0]
			f_TrgtAngleS = f_BaseAngleS;							// 目標角速度
 80074fa:	4b81      	ldr	r3, [pc, #516]	@ (8007700 <CTRL_refTarget+0xe78>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a81      	ldr	r2, [pc, #516]	@ (8007704 <CTRL_refTarget+0xe7c>)
 8007500:	6013      	str	r3, [r2, #0]

			/* CCW */
			if( f_LastAngle > 0 ){
 8007502:	4b79      	ldr	r3, [pc, #484]	@ (80076e8 <CTRL_refTarget+0xe60>)
 8007504:	edd3 7a00 	vldr	s15, [r3]
 8007508:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800750c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007510:	dd4c      	ble.n	80075ac <CTRL_refTarget+0xd24>
				if( f_TrgtAngle < (f_LastAngleS +(f_TrgtAccAngle * 0.001)) ){
 8007512:	4b76      	ldr	r3, [pc, #472]	@ (80076ec <CTRL_refTarget+0xe64>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4618      	mov	r0, r3
 8007518:	f7f9 f83e 	bl	8000598 <__aeabi_f2d>
 800751c:	4604      	mov	r4, r0
 800751e:	460d      	mov	r5, r1
 8007520:	4b79      	ldr	r3, [pc, #484]	@ (8007708 <CTRL_refTarget+0xe80>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4618      	mov	r0, r3
 8007526:	f7f9 f837 	bl	8000598 <__aeabi_f2d>
 800752a:	4680      	mov	r8, r0
 800752c:	4689      	mov	r9, r1
 800752e:	4b77      	ldr	r3, [pc, #476]	@ (800770c <CTRL_refTarget+0xe84>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4618      	mov	r0, r3
 8007534:	f7f9 f830 	bl	8000598 <__aeabi_f2d>
 8007538:	a369      	add	r3, pc, #420	@ (adr r3, 80076e0 <CTRL_refTarget+0xe58>)
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	f7f9 f883 	bl	8000648 <__aeabi_dmul>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4640      	mov	r0, r8
 8007548:	4649      	mov	r1, r9
 800754a:	f7f8 fec7 	bl	80002dc <__adddf3>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4620      	mov	r0, r4
 8007554:	4629      	mov	r1, r5
 8007556:	f7f9 fae9 	bl	8000b2c <__aeabi_dcmplt>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d020      	beq.n	80075a2 <CTRL_refTarget+0xd1a>
					f_TrgtAngle	+= f_TrgtAngleS * 0.001;			// 目標角度
 8007560:	4b62      	ldr	r3, [pc, #392]	@ (80076ec <CTRL_refTarget+0xe64>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4618      	mov	r0, r3
 8007566:	f7f9 f817 	bl	8000598 <__aeabi_f2d>
 800756a:	4604      	mov	r4, r0
 800756c:	460d      	mov	r5, r1
 800756e:	4b65      	ldr	r3, [pc, #404]	@ (8007704 <CTRL_refTarget+0xe7c>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4618      	mov	r0, r3
 8007574:	f7f9 f810 	bl	8000598 <__aeabi_f2d>
 8007578:	a359      	add	r3, pc, #356	@ (adr r3, 80076e0 <CTRL_refTarget+0xe58>)
 800757a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757e:	f7f9 f863 	bl	8000648 <__aeabi_dmul>
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	4620      	mov	r0, r4
 8007588:	4629      	mov	r1, r5
 800758a:	f7f8 fea7 	bl	80002dc <__adddf3>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	4610      	mov	r0, r2
 8007594:	4619      	mov	r1, r3
 8007596:	f7f9 fb4f 	bl	8000c38 <__aeabi_d2f>
 800759a:	4603      	mov	r3, r0
 800759c:	4a53      	ldr	r2, [pc, #332]	@ (80076ec <CTRL_refTarget+0xe64>)
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	e050      	b.n	8007644 <CTRL_refTarget+0xdbc>
				}
				else{
					f_TrgtAngle  = f_LastAngle;									// 目標角度
 80075a2:	4b51      	ldr	r3, [pc, #324]	@ (80076e8 <CTRL_refTarget+0xe60>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a51      	ldr	r2, [pc, #324]	@ (80076ec <CTRL_refTarget+0xe64>)
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	e04b      	b.n	8007644 <CTRL_refTarget+0xdbc>
				}
			}
			/* CW */
			else{
				if( f_TrgtAngle > (f_LastAngleS -(f_TrgtAccAngle * 0.001)) ){
 80075ac:	4b4f      	ldr	r3, [pc, #316]	@ (80076ec <CTRL_refTarget+0xe64>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7f8 fff1 	bl	8000598 <__aeabi_f2d>
 80075b6:	4604      	mov	r4, r0
 80075b8:	460d      	mov	r5, r1
 80075ba:	4b53      	ldr	r3, [pc, #332]	@ (8007708 <CTRL_refTarget+0xe80>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4618      	mov	r0, r3
 80075c0:	f7f8 ffea 	bl	8000598 <__aeabi_f2d>
 80075c4:	4680      	mov	r8, r0
 80075c6:	4689      	mov	r9, r1
 80075c8:	4b50      	ldr	r3, [pc, #320]	@ (800770c <CTRL_refTarget+0xe84>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7f8 ffe3 	bl	8000598 <__aeabi_f2d>
 80075d2:	a343      	add	r3, pc, #268	@ (adr r3, 80076e0 <CTRL_refTarget+0xe58>)
 80075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d8:	f7f9 f836 	bl	8000648 <__aeabi_dmul>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4640      	mov	r0, r8
 80075e2:	4649      	mov	r1, r9
 80075e4:	f7f8 fe78 	bl	80002d8 <__aeabi_dsub>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4620      	mov	r0, r4
 80075ee:	4629      	mov	r1, r5
 80075f0:	f7f9 faba 	bl	8000b68 <__aeabi_dcmpgt>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d020      	beq.n	800763c <CTRL_refTarget+0xdb4>
					f_TrgtAngle	+=f_TrgtAngleS * 0.001;			// 目標角度
 80075fa:	4b3c      	ldr	r3, [pc, #240]	@ (80076ec <CTRL_refTarget+0xe64>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4618      	mov	r0, r3
 8007600:	f7f8 ffca 	bl	8000598 <__aeabi_f2d>
 8007604:	4604      	mov	r4, r0
 8007606:	460d      	mov	r5, r1
 8007608:	4b3e      	ldr	r3, [pc, #248]	@ (8007704 <CTRL_refTarget+0xe7c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4618      	mov	r0, r3
 800760e:	f7f8 ffc3 	bl	8000598 <__aeabi_f2d>
 8007612:	a333      	add	r3, pc, #204	@ (adr r3, 80076e0 <CTRL_refTarget+0xe58>)
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	f7f9 f816 	bl	8000648 <__aeabi_dmul>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	4620      	mov	r0, r4
 8007622:	4629      	mov	r1, r5
 8007624:	f7f8 fe5a 	bl	80002dc <__adddf3>
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	4610      	mov	r0, r2
 800762e:	4619      	mov	r1, r3
 8007630:	f7f9 fb02 	bl	8000c38 <__aeabi_d2f>
 8007634:	4603      	mov	r3, r0
 8007636:	4a2d      	ldr	r2, [pc, #180]	@ (80076ec <CTRL_refTarget+0xe64>)
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	e003      	b.n	8007644 <CTRL_refTarget+0xdbc>
				}
				else{
					f_TrgtAngle  = f_LastAngle;									// 目標角度
 800763c:	4b2a      	ldr	r3, [pc, #168]	@ (80076e8 <CTRL_refTarget+0xe60>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a2a      	ldr	r2, [pc, #168]	@ (80076ec <CTRL_refTarget+0xe64>)
 8007642:	6013      	str	r3, [r2, #0]
				}
			}

			/* Position CTRL */
			if( f_LastDist > (f_TrgtDist - (f_TrgtSpeed * 0.001)) ){						// 目標更新区間
 8007644:	4b2a      	ldr	r3, [pc, #168]	@ (80076f0 <CTRL_refTarget+0xe68>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4618      	mov	r0, r3
 800764a:	f7f8 ffa5 	bl	8000598 <__aeabi_f2d>
 800764e:	4604      	mov	r4, r0
 8007650:	460d      	mov	r5, r1
 8007652:	4b28      	ldr	r3, [pc, #160]	@ (80076f4 <CTRL_refTarget+0xe6c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4618      	mov	r0, r3
 8007658:	f7f8 ff9e 	bl	8000598 <__aeabi_f2d>
 800765c:	4680      	mov	r8, r0
 800765e:	4689      	mov	r9, r1
 8007660:	4b25      	ldr	r3, [pc, #148]	@ (80076f8 <CTRL_refTarget+0xe70>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4618      	mov	r0, r3
 8007666:	f7f8 ff97 	bl	8000598 <__aeabi_f2d>
 800766a:	a31d      	add	r3, pc, #116	@ (adr r3, 80076e0 <CTRL_refTarget+0xe58>)
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	f7f8 ffea 	bl	8000648 <__aeabi_dmul>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	4640      	mov	r0, r8
 800767a:	4649      	mov	r1, r9
 800767c:	f7f8 fe2c 	bl	80002d8 <__aeabi_dsub>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4620      	mov	r0, r4
 8007686:	4629      	mov	r1, r5
 8007688:	f7f9 fa6e 	bl	8000b68 <__aeabi_dcmpgt>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d020      	beq.n	80076d4 <CTRL_refTarget+0xe4c>
				f_TrgtDist  += f_TrgtSpeed * 0.001;							// 目標位置
 8007692:	4b18      	ldr	r3, [pc, #96]	@ (80076f4 <CTRL_refTarget+0xe6c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4618      	mov	r0, r3
 8007698:	f7f8 ff7e 	bl	8000598 <__aeabi_f2d>
 800769c:	4604      	mov	r4, r0
 800769e:	460d      	mov	r5, r1
 80076a0:	4b15      	ldr	r3, [pc, #84]	@ (80076f8 <CTRL_refTarget+0xe70>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7f8 ff77 	bl	8000598 <__aeabi_f2d>
 80076aa:	a30d      	add	r3, pc, #52	@ (adr r3, 80076e0 <CTRL_refTarget+0xe58>)
 80076ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b0:	f7f8 ffca 	bl	8000648 <__aeabi_dmul>
 80076b4:	4602      	mov	r2, r0
 80076b6:	460b      	mov	r3, r1
 80076b8:	4620      	mov	r0, r4
 80076ba:	4629      	mov	r1, r5
 80076bc:	f7f8 fe0e 	bl	80002dc <__adddf3>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4610      	mov	r0, r2
 80076c6:	4619      	mov	r1, r3
 80076c8:	f7f9 fab6 	bl	8000c38 <__aeabi_d2f>
 80076cc:	4603      	mov	r3, r0
 80076ce:	4a09      	ldr	r2, [pc, #36]	@ (80076f4 <CTRL_refTarget+0xe6c>)
 80076d0:	6013      	str	r3, [r2, #0]
			}
			else{
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 80076d2:	e230      	b.n	8007b36 <CTRL_refTarget+0x12ae>
				f_TrgtDist  = f_LastDist;													// 目標距離
 80076d4:	4b06      	ldr	r3, [pc, #24]	@ (80076f0 <CTRL_refTarget+0xe68>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a06      	ldr	r2, [pc, #24]	@ (80076f4 <CTRL_refTarget+0xe6c>)
 80076da:	6013      	str	r3, [r2, #0]
			break;
 80076dc:	e22b      	b.n	8007b36 <CTRL_refTarget+0x12ae>
 80076de:	bf00      	nop
 80076e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80076e4:	3f50624d 	.word	0x3f50624d
 80076e8:	200003cc 	.word	0x200003cc
 80076ec:	200003d4 	.word	0x200003d4
 80076f0:	2000038c 	.word	0x2000038c
 80076f4:	20000390 	.word	0x20000390
 80076f8:	20000374 	.word	0x20000374
 80076fc:	20000368 	.word	0x20000368
 8007700:	200003b4 	.word	0x200003b4
 8007704:	200003bc 	.word	0x200003bc
 8007708:	200003b8 	.word	0x200003b8
 800770c:	200003ac 	.word	0x200003ac

		/* dec(sla) */
		case CTRL_DEC_SLA:
			f_TrgtSpeed = f_BaseSpeed;
 8007710:	4ba9      	ldr	r3, [pc, #676]	@ (80079b8 <CTRL_refTarget+0x1130>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4aa9      	ldr	r2, [pc, #676]	@ (80079bc <CTRL_refTarget+0x1134>)
 8007716:	6013      	str	r3, [r2, #0]
			f_TrgtAccAngle += f_JerkAngle*0.001;
 8007718:	4ba9      	ldr	r3, [pc, #676]	@ (80079c0 <CTRL_refTarget+0x1138>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4618      	mov	r0, r3
 800771e:	f7f8 ff3b 	bl	8000598 <__aeabi_f2d>
 8007722:	4604      	mov	r4, r0
 8007724:	460d      	mov	r5, r1
 8007726:	4ba7      	ldr	r3, [pc, #668]	@ (80079c4 <CTRL_refTarget+0x113c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4618      	mov	r0, r3
 800772c:	f7f8 ff34 	bl	8000598 <__aeabi_f2d>
 8007730:	a39f      	add	r3, pc, #636	@ (adr r3, 80079b0 <CTRL_refTarget+0x1128>)
 8007732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007736:	f7f8 ff87 	bl	8000648 <__aeabi_dmul>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4620      	mov	r0, r4
 8007740:	4629      	mov	r1, r5
 8007742:	f7f8 fdcb 	bl	80002dc <__adddf3>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	4610      	mov	r0, r2
 800774c:	4619      	mov	r1, r3
 800774e:	f7f9 fa73 	bl	8000c38 <__aeabi_d2f>
 8007752:	4603      	mov	r3, r0
 8007754:	4a9a      	ldr	r2, [pc, #616]	@ (80079c0 <CTRL_refTarget+0x1138>)
 8007756:	6013      	str	r3, [r2, #0]

			/* CCW */
			if( f_LastAngle > 0 ){
 8007758:	4b9b      	ldr	r3, [pc, #620]	@ (80079c8 <CTRL_refTarget+0x1140>)
 800775a:	edd3 7a00 	vldr	s15, [r3]
 800775e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007766:	f340 8095 	ble.w	8007894 <CTRL_refTarget+0x100c>
				if(f_BaseAccAngle < 0){
 800776a:	4b98      	ldr	r3, [pc, #608]	@ (80079cc <CTRL_refTarget+0x1144>)
 800776c:	edd3 7a00 	vldr	s15, [r3]
 8007770:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007778:	d50c      	bpl.n	8007794 <CTRL_refTarget+0xf0c>
					if(f_TrgtAccAngle > 0.0){
 800777a:	4b91      	ldr	r3, [pc, #580]	@ (80079c0 <CTRL_refTarget+0x1138>)
 800777c:	edd3 7a00 	vldr	s15, [r3]
 8007780:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007788:	dd13      	ble.n	80077b2 <CTRL_refTarget+0xf2a>
						f_TrgtAccAngle = 0.0;
 800778a:	4b8d      	ldr	r3, [pc, #564]	@ (80079c0 <CTRL_refTarget+0x1138>)
 800778c:	f04f 0200 	mov.w	r2, #0
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	e00e      	b.n	80077b2 <CTRL_refTarget+0xf2a>
					}
				}else{
					if(f_TrgtAccAngle < f_LastAccAngle){
 8007794:	4b8a      	ldr	r3, [pc, #552]	@ (80079c0 <CTRL_refTarget+0x1138>)
 8007796:	ed93 7a00 	vldr	s14, [r3]
 800779a:	4b8d      	ldr	r3, [pc, #564]	@ (80079d0 <CTRL_refTarget+0x1148>)
 800779c:	edd3 7a00 	vldr	s15, [r3]
 80077a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a8:	d503      	bpl.n	80077b2 <CTRL_refTarget+0xf2a>
						f_TrgtAccAngle = f_LastAccAngle;
 80077aa:	4b89      	ldr	r3, [pc, #548]	@ (80079d0 <CTRL_refTarget+0x1148>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a84      	ldr	r2, [pc, #528]	@ (80079c0 <CTRL_refTarget+0x1138>)
 80077b0:	6013      	str	r3, [r2, #0]
					}
				}

				if( f_TrgtAngleS > (f_LastAngleS -(f_TrgtAccAngle * 0.001)) ){
 80077b2:	4b88      	ldr	r3, [pc, #544]	@ (80079d4 <CTRL_refTarget+0x114c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7f8 feee 	bl	8000598 <__aeabi_f2d>
 80077bc:	4604      	mov	r4, r0
 80077be:	460d      	mov	r5, r1
 80077c0:	4b85      	ldr	r3, [pc, #532]	@ (80079d8 <CTRL_refTarget+0x1150>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7f8 fee7 	bl	8000598 <__aeabi_f2d>
 80077ca:	4680      	mov	r8, r0
 80077cc:	4689      	mov	r9, r1
 80077ce:	4b7c      	ldr	r3, [pc, #496]	@ (80079c0 <CTRL_refTarget+0x1138>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7f8 fee0 	bl	8000598 <__aeabi_f2d>
 80077d8:	a375      	add	r3, pc, #468	@ (adr r3, 80079b0 <CTRL_refTarget+0x1128>)
 80077da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077de:	f7f8 ff33 	bl	8000648 <__aeabi_dmul>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	4640      	mov	r0, r8
 80077e8:	4649      	mov	r1, r9
 80077ea:	f7f8 fd75 	bl	80002d8 <__aeabi_dsub>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4620      	mov	r0, r4
 80077f4:	4629      	mov	r1, r5
 80077f6:	f7f9 f9b7 	bl	8000b68 <__aeabi_dcmpgt>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d040      	beq.n	8007882 <CTRL_refTarget+0xffa>
					f_TrgtAngleS += f_TrgtAccAngle * 0.001;							// 目標角速度
 8007800:	4b74      	ldr	r3, [pc, #464]	@ (80079d4 <CTRL_refTarget+0x114c>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4618      	mov	r0, r3
 8007806:	f7f8 fec7 	bl	8000598 <__aeabi_f2d>
 800780a:	4604      	mov	r4, r0
 800780c:	460d      	mov	r5, r1
 800780e:	4b6c      	ldr	r3, [pc, #432]	@ (80079c0 <CTRL_refTarget+0x1138>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4618      	mov	r0, r3
 8007814:	f7f8 fec0 	bl	8000598 <__aeabi_f2d>
 8007818:	a365      	add	r3, pc, #404	@ (adr r3, 80079b0 <CTRL_refTarget+0x1128>)
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	f7f8 ff13 	bl	8000648 <__aeabi_dmul>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	4620      	mov	r0, r4
 8007828:	4629      	mov	r1, r5
 800782a:	f7f8 fd57 	bl	80002dc <__adddf3>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	4610      	mov	r0, r2
 8007834:	4619      	mov	r1, r3
 8007836:	f7f9 f9ff 	bl	8000c38 <__aeabi_d2f>
 800783a:	4603      	mov	r3, r0
 800783c:	4a65      	ldr	r2, [pc, #404]	@ (80079d4 <CTRL_refTarget+0x114c>)
 800783e:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  += f_TrgtAngleS * 0.001;	// 目標角度
 8007840:	4b66      	ldr	r3, [pc, #408]	@ (80079dc <CTRL_refTarget+0x1154>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4618      	mov	r0, r3
 8007846:	f7f8 fea7 	bl	8000598 <__aeabi_f2d>
 800784a:	4604      	mov	r4, r0
 800784c:	460d      	mov	r5, r1
 800784e:	4b61      	ldr	r3, [pc, #388]	@ (80079d4 <CTRL_refTarget+0x114c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4618      	mov	r0, r3
 8007854:	f7f8 fea0 	bl	8000598 <__aeabi_f2d>
 8007858:	a355      	add	r3, pc, #340	@ (adr r3, 80079b0 <CTRL_refTarget+0x1128>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f7f8 fef3 	bl	8000648 <__aeabi_dmul>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	4620      	mov	r0, r4
 8007868:	4629      	mov	r1, r5
 800786a:	f7f8 fd37 	bl	80002dc <__adddf3>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	4610      	mov	r0, r2
 8007874:	4619      	mov	r1, r3
 8007876:	f7f9 f9df 	bl	8000c38 <__aeabi_d2f>
 800787a:	4603      	mov	r3, r0
 800787c:	4a57      	ldr	r2, [pc, #348]	@ (80079dc <CTRL_refTarget+0x1154>)
 800787e:	6013      	str	r3, [r2, #0]
 8007880:	e0b6      	b.n	80079f0 <CTRL_refTarget+0x1168>
				}
				else{
					f_TrgtAngleS = 0.0;
 8007882:	4b54      	ldr	r3, [pc, #336]	@ (80079d4 <CTRL_refTarget+0x114c>)
 8007884:	f04f 0200 	mov.w	r2, #0
 8007888:	601a      	str	r2, [r3, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 800788a:	4b4f      	ldr	r3, [pc, #316]	@ (80079c8 <CTRL_refTarget+0x1140>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a53      	ldr	r2, [pc, #332]	@ (80079dc <CTRL_refTarget+0x1154>)
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	e0ad      	b.n	80079f0 <CTRL_refTarget+0x1168>
				}
			}
			/*CW*/
			else{
				if(f_BaseAccAngle > 0){
 8007894:	4b4d      	ldr	r3, [pc, #308]	@ (80079cc <CTRL_refTarget+0x1144>)
 8007896:	edd3 7a00 	vldr	s15, [r3]
 800789a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800789e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a2:	dd0c      	ble.n	80078be <CTRL_refTarget+0x1036>
					if(f_TrgtAccAngle < 0.0){
 80078a4:	4b46      	ldr	r3, [pc, #280]	@ (80079c0 <CTRL_refTarget+0x1138>)
 80078a6:	edd3 7a00 	vldr	s15, [r3]
 80078aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80078ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b2:	d513      	bpl.n	80078dc <CTRL_refTarget+0x1054>
						f_TrgtAccAngle = 0.0;
 80078b4:	4b42      	ldr	r3, [pc, #264]	@ (80079c0 <CTRL_refTarget+0x1138>)
 80078b6:	f04f 0200 	mov.w	r2, #0
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	e00e      	b.n	80078dc <CTRL_refTarget+0x1054>
					}
				}else{
					if(f_TrgtAccAngle > f_LastAccAngle){
 80078be:	4b40      	ldr	r3, [pc, #256]	@ (80079c0 <CTRL_refTarget+0x1138>)
 80078c0:	ed93 7a00 	vldr	s14, [r3]
 80078c4:	4b42      	ldr	r3, [pc, #264]	@ (80079d0 <CTRL_refTarget+0x1148>)
 80078c6:	edd3 7a00 	vldr	s15, [r3]
 80078ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80078ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d2:	dd03      	ble.n	80078dc <CTRL_refTarget+0x1054>
						f_TrgtAccAngle = f_LastAccAngle;
 80078d4:	4b3e      	ldr	r3, [pc, #248]	@ (80079d0 <CTRL_refTarget+0x1148>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a39      	ldr	r2, [pc, #228]	@ (80079c0 <CTRL_refTarget+0x1138>)
 80078da:	6013      	str	r3, [r2, #0]
					}
				}

				if( f_TrgtAngleS < (f_LastAngleS +(f_TrgtAccAngle * 0.001)) ){
 80078dc:	4b3d      	ldr	r3, [pc, #244]	@ (80079d4 <CTRL_refTarget+0x114c>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7f8 fe59 	bl	8000598 <__aeabi_f2d>
 80078e6:	4604      	mov	r4, r0
 80078e8:	460d      	mov	r5, r1
 80078ea:	4b3b      	ldr	r3, [pc, #236]	@ (80079d8 <CTRL_refTarget+0x1150>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7f8 fe52 	bl	8000598 <__aeabi_f2d>
 80078f4:	4680      	mov	r8, r0
 80078f6:	4689      	mov	r9, r1
 80078f8:	4b31      	ldr	r3, [pc, #196]	@ (80079c0 <CTRL_refTarget+0x1138>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7f8 fe4b 	bl	8000598 <__aeabi_f2d>
 8007902:	a32b      	add	r3, pc, #172	@ (adr r3, 80079b0 <CTRL_refTarget+0x1128>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f7f8 fe9e 	bl	8000648 <__aeabi_dmul>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	4640      	mov	r0, r8
 8007912:	4649      	mov	r1, r9
 8007914:	f7f8 fce2 	bl	80002dc <__adddf3>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	4620      	mov	r0, r4
 800791e:	4629      	mov	r1, r5
 8007920:	f7f9 f904 	bl	8000b2c <__aeabi_dcmplt>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d05a      	beq.n	80079e0 <CTRL_refTarget+0x1158>
					f_TrgtAngleS += f_TrgtAccAngle * 0.001;							// 目標角速度
 800792a:	4b2a      	ldr	r3, [pc, #168]	@ (80079d4 <CTRL_refTarget+0x114c>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4618      	mov	r0, r3
 8007930:	f7f8 fe32 	bl	8000598 <__aeabi_f2d>
 8007934:	4604      	mov	r4, r0
 8007936:	460d      	mov	r5, r1
 8007938:	4b21      	ldr	r3, [pc, #132]	@ (80079c0 <CTRL_refTarget+0x1138>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4618      	mov	r0, r3
 800793e:	f7f8 fe2b 	bl	8000598 <__aeabi_f2d>
 8007942:	a31b      	add	r3, pc, #108	@ (adr r3, 80079b0 <CTRL_refTarget+0x1128>)
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	f7f8 fe7e 	bl	8000648 <__aeabi_dmul>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	4620      	mov	r0, r4
 8007952:	4629      	mov	r1, r5
 8007954:	f7f8 fcc2 	bl	80002dc <__adddf3>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4610      	mov	r0, r2
 800795e:	4619      	mov	r1, r3
 8007960:	f7f9 f96a 	bl	8000c38 <__aeabi_d2f>
 8007964:	4603      	mov	r3, r0
 8007966:	4a1b      	ldr	r2, [pc, #108]	@ (80079d4 <CTRL_refTarget+0x114c>)
 8007968:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  += f_TrgtAngleS * 0.001;	// 目標角度
 800796a:	4b1c      	ldr	r3, [pc, #112]	@ (80079dc <CTRL_refTarget+0x1154>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4618      	mov	r0, r3
 8007970:	f7f8 fe12 	bl	8000598 <__aeabi_f2d>
 8007974:	4604      	mov	r4, r0
 8007976:	460d      	mov	r5, r1
 8007978:	4b16      	ldr	r3, [pc, #88]	@ (80079d4 <CTRL_refTarget+0x114c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4618      	mov	r0, r3
 800797e:	f7f8 fe0b 	bl	8000598 <__aeabi_f2d>
 8007982:	a30b      	add	r3, pc, #44	@ (adr r3, 80079b0 <CTRL_refTarget+0x1128>)
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	f7f8 fe5e 	bl	8000648 <__aeabi_dmul>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	4620      	mov	r0, r4
 8007992:	4629      	mov	r1, r5
 8007994:	f7f8 fca2 	bl	80002dc <__adddf3>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4610      	mov	r0, r2
 800799e:	4619      	mov	r1, r3
 80079a0:	f7f9 f94a 	bl	8000c38 <__aeabi_d2f>
 80079a4:	4603      	mov	r3, r0
 80079a6:	4a0d      	ldr	r2, [pc, #52]	@ (80079dc <CTRL_refTarget+0x1154>)
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	e021      	b.n	80079f0 <CTRL_refTarget+0x1168>
 80079ac:	f3af 8000 	nop.w
 80079b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80079b4:	3f50624d 	.word	0x3f50624d
 80079b8:	20000368 	.word	0x20000368
 80079bc:	20000374 	.word	0x20000374
 80079c0:	200003ac 	.word	0x200003ac
 80079c4:	200003a4 	.word	0x200003a4
 80079c8:	200003cc 	.word	0x200003cc
 80079cc:	200003a8 	.word	0x200003a8
 80079d0:	200003b0 	.word	0x200003b0
 80079d4:	200003bc 	.word	0x200003bc
 80079d8:	200003b8 	.word	0x200003b8
 80079dc:	200003d4 	.word	0x200003d4
				}
				else{
					f_TrgtAngleS = 0.0;
 80079e0:	4b59      	ldr	r3, [pc, #356]	@ (8007b48 <CTRL_refTarget+0x12c0>)
 80079e2:	f04f 0200 	mov.w	r2, #0
 80079e6:	601a      	str	r2, [r3, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 80079e8:	4b58      	ldr	r3, [pc, #352]	@ (8007b4c <CTRL_refTarget+0x12c4>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a58      	ldr	r2, [pc, #352]	@ (8007b50 <CTRL_refTarget+0x12c8>)
 80079ee:	6013      	str	r3, [r2, #0]
				}
			}

			/* Position CTRL */
			if( f_LastDist > (f_TrgtDist - (f_TrgtSpeed * 0.001)) ){						// 目標更新区間
 80079f0:	4b58      	ldr	r3, [pc, #352]	@ (8007b54 <CTRL_refTarget+0x12cc>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7f8 fdcf 	bl	8000598 <__aeabi_f2d>
 80079fa:	4604      	mov	r4, r0
 80079fc:	460d      	mov	r5, r1
 80079fe:	4b56      	ldr	r3, [pc, #344]	@ (8007b58 <CTRL_refTarget+0x12d0>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7f8 fdc8 	bl	8000598 <__aeabi_f2d>
 8007a08:	4680      	mov	r8, r0
 8007a0a:	4689      	mov	r9, r1
 8007a0c:	4b53      	ldr	r3, [pc, #332]	@ (8007b5c <CTRL_refTarget+0x12d4>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7f8 fdc1 	bl	8000598 <__aeabi_f2d>
 8007a16:	a34a      	add	r3, pc, #296	@ (adr r3, 8007b40 <CTRL_refTarget+0x12b8>)
 8007a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1c:	f7f8 fe14 	bl	8000648 <__aeabi_dmul>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4640      	mov	r0, r8
 8007a26:	4649      	mov	r1, r9
 8007a28:	f7f8 fc56 	bl	80002d8 <__aeabi_dsub>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4620      	mov	r0, r4
 8007a32:	4629      	mov	r1, r5
 8007a34:	f7f9 f898 	bl	8000b68 <__aeabi_dcmpgt>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d020      	beq.n	8007a80 <CTRL_refTarget+0x11f8>
				f_TrgtDist  += f_TrgtSpeed * 0.001;							// 目標位置
 8007a3e:	4b46      	ldr	r3, [pc, #280]	@ (8007b58 <CTRL_refTarget+0x12d0>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7f8 fda8 	bl	8000598 <__aeabi_f2d>
 8007a48:	4604      	mov	r4, r0
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	4b43      	ldr	r3, [pc, #268]	@ (8007b5c <CTRL_refTarget+0x12d4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7f8 fda1 	bl	8000598 <__aeabi_f2d>
 8007a56:	a33a      	add	r3, pc, #232	@ (adr r3, 8007b40 <CTRL_refTarget+0x12b8>)
 8007a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5c:	f7f8 fdf4 	bl	8000648 <__aeabi_dmul>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4620      	mov	r0, r4
 8007a66:	4629      	mov	r1, r5
 8007a68:	f7f8 fc38 	bl	80002dc <__adddf3>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4610      	mov	r0, r2
 8007a72:	4619      	mov	r1, r3
 8007a74:	f7f9 f8e0 	bl	8000c38 <__aeabi_d2f>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	4a37      	ldr	r2, [pc, #220]	@ (8007b58 <CTRL_refTarget+0x12d0>)
 8007a7c:	6013      	str	r3, [r2, #0]
			}
			else{
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 8007a7e:	e05a      	b.n	8007b36 <CTRL_refTarget+0x12ae>
				f_TrgtDist  = f_LastDist;													// 目標距離
 8007a80:	4b34      	ldr	r3, [pc, #208]	@ (8007b54 <CTRL_refTarget+0x12cc>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a34      	ldr	r2, [pc, #208]	@ (8007b58 <CTRL_refTarget+0x12d0>)
 8007a86:	6013      	str	r3, [r2, #0]
			break;
 8007a88:	e055      	b.n	8007b36 <CTRL_refTarget+0x12ae>

		/* escape(sla) */
		case CTRL_EXIT_SLA:
			f_TrgtSpeed = f_BaseSpeed;
 8007a8a:	4b35      	ldr	r3, [pc, #212]	@ (8007b60 <CTRL_refTarget+0x12d8>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a33      	ldr	r2, [pc, #204]	@ (8007b5c <CTRL_refTarget+0x12d4>)
 8007a90:	6013      	str	r3, [r2, #0]
			f_TrgtAngleS = 0;
 8007a92:	4b2d      	ldr	r3, [pc, #180]	@ (8007b48 <CTRL_refTarget+0x12c0>)
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]
			if( f_TrgtDist <= (f_LastDist -f_TrgtSpeed * 0.001)){
 8007a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8007b58 <CTRL_refTarget+0x12d0>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7f8 fd7a 	bl	8000598 <__aeabi_f2d>
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	460d      	mov	r5, r1
 8007aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8007b54 <CTRL_refTarget+0x12cc>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7f8 fd73 	bl	8000598 <__aeabi_f2d>
 8007ab2:	4680      	mov	r8, r0
 8007ab4:	4689      	mov	r9, r1
 8007ab6:	4b29      	ldr	r3, [pc, #164]	@ (8007b5c <CTRL_refTarget+0x12d4>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7f8 fd6c 	bl	8000598 <__aeabi_f2d>
 8007ac0:	a31f      	add	r3, pc, #124	@ (adr r3, 8007b40 <CTRL_refTarget+0x12b8>)
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	f7f8 fdbf 	bl	8000648 <__aeabi_dmul>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	4640      	mov	r0, r8
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	f7f8 fc01 	bl	80002d8 <__aeabi_dsub>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4620      	mov	r0, r4
 8007adc:	4629      	mov	r1, r5
 8007ade:	f7f9 f82f 	bl	8000b40 <__aeabi_dcmple>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d020      	beq.n	8007b2a <CTRL_refTarget+0x12a2>
				f_TrgtDist  += f_TrgtSpeed * 0.001;								// 目標距離
 8007ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8007b58 <CTRL_refTarget+0x12d0>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7f8 fd53 	bl	8000598 <__aeabi_f2d>
 8007af2:	4604      	mov	r4, r0
 8007af4:	460d      	mov	r5, r1
 8007af6:	4b19      	ldr	r3, [pc, #100]	@ (8007b5c <CTRL_refTarget+0x12d4>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7f8 fd4c 	bl	8000598 <__aeabi_f2d>
 8007b00:	a30f      	add	r3, pc, #60	@ (adr r3, 8007b40 <CTRL_refTarget+0x12b8>)
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	f7f8 fd9f 	bl	8000648 <__aeabi_dmul>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	4620      	mov	r0, r4
 8007b10:	4629      	mov	r1, r5
 8007b12:	f7f8 fbe3 	bl	80002dc <__adddf3>
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	f7f9 f88b 	bl	8000c38 <__aeabi_d2f>
 8007b22:	4603      	mov	r3, r0
 8007b24:	4a0c      	ldr	r2, [pc, #48]	@ (8007b58 <CTRL_refTarget+0x12d0>)
 8007b26:	6013      	str	r3, [r2, #0]
			}
			else{
				f_TrgtDist  = f_LastDist;														// 目標距離
			}
			break;
 8007b28:	e005      	b.n	8007b36 <CTRL_refTarget+0x12ae>
				f_TrgtDist  = f_LastDist;														// 目標距離
 8007b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8007b54 <CTRL_refTarget+0x12cc>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8007b58 <CTRL_refTarget+0x12d0>)
 8007b30:	6013      	str	r3, [r2, #0]
			break;
 8007b32:	e000      	b.n	8007b36 <CTRL_refTarget+0x12ae>

		/* etc */
		default:
			break;
 8007b34:	bf00      	nop
	}
}
 8007b36:	bf00      	nop
 8007b38:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007b3c:	f3af 8000 	nop.w
 8007b40:	d2f1a9fc 	.word	0xd2f1a9fc
 8007b44:	3f50624d 	.word	0x3f50624d
 8007b48:	200003bc 	.word	0x200003bc
 8007b4c:	200003cc 	.word	0x200003cc
 8007b50:	200003d4 	.word	0x200003d4
 8007b54:	2000038c 	.word	0x2000038c
 8007b58:	20000390 	.word	0x20000390
 8007b5c:	20000374 	.word	0x20000374
 8007b60:	20000368 	.word	0x20000368

08007b64 <Chg_ParamID>:

enPARAM_MODE Chg_ParamID( enCTRL_TYPE en_type )
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	71fb      	strb	r3, [r7, #7]
	switch( en_type ){
 8007b6e:	79fb      	ldrb	r3, [r7, #7]
 8007b70:	2b0e      	cmp	r3, #14
 8007b72:	d83f      	bhi.n	8007bf4 <Chg_ParamID+0x90>
 8007b74:	a201      	add	r2, pc, #4	@ (adr r2, 8007b7c <Chg_ParamID+0x18>)
 8007b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7a:	bf00      	nop
 8007b7c:	08007bb9 	.word	0x08007bb9
 8007b80:	08007bbd 	.word	0x08007bbd
 8007b84:	08007bc1 	.word	0x08007bc1
 8007b88:	08007bc9 	.word	0x08007bc9
 8007b8c:	08007bcd 	.word	0x08007bcd
 8007b90:	08007bd1 	.word	0x08007bd1
 8007b94:	08007bc5 	.word	0x08007bc5
 8007b98:	08007bd5 	.word	0x08007bd5
 8007b9c:	08007bd9 	.word	0x08007bd9
 8007ba0:	08007bdd 	.word	0x08007bdd
 8007ba4:	08007be1 	.word	0x08007be1
 8007ba8:	08007be5 	.word	0x08007be5
 8007bac:	08007be9 	.word	0x08007be9
 8007bb0:	08007bed 	.word	0x08007bed
 8007bb4:	08007bf1 	.word	0x08007bf1
		case CTRL_ACC:			return PARAM_ACC;				// 加速中(直進)
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e01c      	b.n	8007bf6 <Chg_ParamID+0x92>
		case CTRL_CONST:		return PARAM_CONST;				// 等速中(直進)
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e01a      	b.n	8007bf6 <Chg_ParamID+0x92>
		case CTRL_DEC:			return PARAM_DEC;				// 減速中(直進)
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e018      	b.n	8007bf6 <Chg_ParamID+0x92>
		case CTRL_HIT_WALL:		return PARAM_HIT_WALL;			// 壁あて制御
 8007bc4:	2307      	movs	r3, #7
 8007bc6:	e016      	b.n	8007bf6 <Chg_ParamID+0x92>
//		case DCMC_BACK_ACC:		return PARAM_BACK_ACC;			// 加速中(後進)
//		case DCMC_BACK_CONST:		return PARAM_BACK_CONST;		// 等速中(後進)
//		case DCMC_BACK_DEC:		return PARAM_BACK_DEC;			// 減速中(後進)
		case CTRL_SKEW_ACC:		return PARAM_SKEW_ACC;			// 加速中(直進)
 8007bc8:	2304      	movs	r3, #4
 8007bca:	e014      	b.n	8007bf6 <Chg_ParamID+0x92>
		case CTRL_SKEW_CONST:		return PARAM_SKEW_CONST;		// 等速中(直進)
 8007bcc:	2305      	movs	r3, #5
 8007bce:	e012      	b.n	8007bf6 <Chg_ParamID+0x92>
		case CTRL_SKEW_DEC:		return PARAM_SKEW_DEC;			// 減速中(直進)
 8007bd0:	2306      	movs	r3, #6
 8007bd2:	e010      	b.n	8007bf6 <Chg_ParamID+0x92>
		case CTRL_ACC_TRUN:		return PARAM_ACC_TRUN;			// 加速中(超地信旋回)
 8007bd4:	230a      	movs	r3, #10
 8007bd6:	e00e      	b.n	8007bf6 <Chg_ParamID+0x92>
		case CTRL_CONST_TRUN:		return PARAM_CONST_TRUN;		// 等速中(超地信旋回)
 8007bd8:	230b      	movs	r3, #11
 8007bda:	e00c      	b.n	8007bf6 <Chg_ParamID+0x92>
		case CTRL_DEC_TRUN:		return PARAM_DEC_TRUN;			// 減速中(超地信旋回)
 8007bdc:	230c      	movs	r3, #12
 8007bde:	e00a      	b.n	8007bf6 <Chg_ParamID+0x92>
		case CTRL_ENTRY_SLA:		return PARAM_ENTRY_SLA;		// スラローム前の前進動作(スラローム)
 8007be0:	230f      	movs	r3, #15
 8007be2:	e008      	b.n	8007bf6 <Chg_ParamID+0x92>
		case CTRL_ACC_SLA:		return PARAM_ACC_SLA;			// 加速中(スラローム)
 8007be4:	2310      	movs	r3, #16
 8007be6:	e006      	b.n	8007bf6 <Chg_ParamID+0x92>
		case CTRL_CONST_SLA:		return PARAM_CONST_SLA;		// 等速中(スラローム)
 8007be8:	2311      	movs	r3, #17
 8007bea:	e004      	b.n	8007bf6 <Chg_ParamID+0x92>
		case CTRL_DEC_SLA:		return PARAM_DEC_SLA;			// 減速中(スラローム)
 8007bec:	2312      	movs	r3, #18
 8007bee:	e002      	b.n	8007bf6 <Chg_ParamID+0x92>
		case CTRL_EXIT_SLA:		return PARAM_EXIT_SLA;			// スラローム後の前進動作(スラローム)
 8007bf0:	2313      	movs	r3, #19
 8007bf2:	e000      	b.n	8007bf6 <Chg_ParamID+0x92>
		default:			return PARAM_NC;
 8007bf4:	23ff      	movs	r3, #255	@ 0xff
	}
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop

08007c04 <CTRL_getFF_speed>:

void CTRL_getFF_speed( float* p_err )
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
	/* 動作モードに応じる */
	switch( en_Type ){
 8007c0c:	4b21      	ldr	r3, [pc, #132]	@ (8007c94 <CTRL_getFF_speed+0x90>)
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b0e      	cmp	r3, #14
 8007c12:	bf8c      	ite	hi
 8007c14:	2201      	movhi	r2, #1
 8007c16:	2200      	movls	r2, #0
 8007c18:	b2d2      	uxtb	r2, r2
 8007c1a:	2a00      	cmp	r2, #0
 8007c1c:	d12f      	bne.n	8007c7e <CTRL_getFF_speed+0x7a>
 8007c1e:	2201      	movs	r2, #1
 8007c20:	fa02 f303 	lsl.w	r3, r2, r3
 8007c24:	f245 5212 	movw	r2, #21778	@ 0x5512
 8007c28:	401a      	ands	r2, r3
 8007c2a:	2a00      	cmp	r2, #0
 8007c2c:	bf14      	ite	ne
 8007c2e:	2201      	movne	r2, #1
 8007c30:	2200      	moveq	r2, #0
 8007c32:	b2d2      	uxtb	r2, r2
 8007c34:	2a00      	cmp	r2, #0
 8007c36:	d118      	bne.n	8007c6a <CTRL_getFF_speed+0x66>
 8007c38:	f242 2264 	movw	r2, #8804	@ 0x2264
 8007c3c:	401a      	ands	r2, r3
 8007c3e:	2a00      	cmp	r2, #0
 8007c40:	bf14      	ite	ne
 8007c42:	2201      	movne	r2, #1
 8007c44:	2200      	moveq	r2, #0
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	2a00      	cmp	r2, #0
 8007c4a:	d113      	bne.n	8007c74 <CTRL_getFF_speed+0x70>
 8007c4c:	f640 0289 	movw	r2, #2185	@ 0x889
 8007c50:	401a      	ands	r2, r3
 8007c52:	2a00      	cmp	r2, #0
 8007c54:	bf14      	ite	ne
 8007c56:	2301      	movne	r3, #1
 8007c58:	2300      	moveq	r3, #0
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00e      	beq.n	8007c7e <CTRL_getFF_speed+0x7a>
		// 加速 
		case CTRL_ACC:
		case CTRL_SKEW_ACC:
		case CTRL_ACC_TRUN:
		case CTRL_ACC_SLA:
			*p_err = f_TrgtAcc;
 8007c60:	4b0d      	ldr	r3, [pc, #52]	@ (8007c98 <CTRL_getFF_speed+0x94>)
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	601a      	str	r2, [r3, #0]
			break;
 8007c68:	e00e      	b.n	8007c88 <CTRL_getFF_speed+0x84>
		case CTRL_SKEW_CONST:
		case CTRL_CONST_TRUN:
		case CTRL_ENTRY_SLA:
		case CTRL_EXIT_SLA:
		case CTRL_CONST_SLA:
			*p_err = 0;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f04f 0200 	mov.w	r2, #0
 8007c70:	601a      	str	r2, [r3, #0]
			break;
 8007c72:	e009      	b.n	8007c88 <CTRL_getFF_speed+0x84>
		case CTRL_DEC:
		case CTRL_SKEW_DEC:
		case CTRL_DEC_TRUN:
		case CTRL_DEC_SLA:
		case CTRL_HIT_WALL:
			*p_err = f_TrgtAcc;
 8007c74:	4b08      	ldr	r3, [pc, #32]	@ (8007c98 <CTRL_getFF_speed+0x94>)
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	601a      	str	r2, [r3, #0]
			break;
 8007c7c:	e004      	b.n	8007c88 <CTRL_getFF_speed+0x84>

		// 加速以外 
		default:
			*p_err = 0;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
			break;										// 何もしない
 8007c86:	bf00      	nop
	}

}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	200003fa 	.word	0x200003fa
 8007c98:	20000360 	.word	0x20000360

08007c9c <CTRL_getFF_angle>:

void CTRL_getFF_angle( float* p_err )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
	/* 動作モードに応じる */
	switch( en_Type ){
 8007ca4:	4b38      	ldr	r3, [pc, #224]	@ (8007d88 <CTRL_getFF_angle+0xec>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b0e      	cmp	r3, #14
 8007caa:	bf8c      	ite	hi
 8007cac:	2201      	movhi	r2, #1
 8007cae:	2200      	movls	r2, #0
 8007cb0:	b2d2      	uxtb	r2, r2
 8007cb2:	2a00      	cmp	r2, #0
 8007cb4:	d15e      	bne.n	8007d74 <CTRL_getFF_angle+0xd8>
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cbc:	f245 5212 	movw	r2, #21778	@ 0x5512
 8007cc0:	401a      	ands	r2, r3
 8007cc2:	2a00      	cmp	r2, #0
 8007cc4:	bf14      	ite	ne
 8007cc6:	2201      	movne	r2, #1
 8007cc8:	2200      	moveq	r2, #0
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	2a00      	cmp	r2, #0
 8007cce:	d128      	bne.n	8007d22 <CTRL_getFF_angle+0x86>
 8007cd0:	f242 2224 	movw	r2, #8740	@ 0x2224
 8007cd4:	401a      	ands	r2, r3
 8007cd6:	2a00      	cmp	r2, #0
 8007cd8:	bf14      	ite	ne
 8007cda:	2201      	movne	r2, #1
 8007cdc:	2200      	moveq	r2, #0
 8007cde:	b2d2      	uxtb	r2, r2
 8007ce0:	2a00      	cmp	r2, #0
 8007ce2:	d123      	bne.n	8007d2c <CTRL_getFF_angle+0x90>
 8007ce4:	f640 0289 	movw	r2, #2185	@ 0x889
 8007ce8:	401a      	ands	r2, r3
 8007cea:	2a00      	cmp	r2, #0
 8007cec:	bf14      	ite	ne
 8007cee:	2301      	movne	r3, #1
 8007cf0:	2300      	moveq	r3, #0
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d03d      	beq.n	8007d74 <CTRL_getFF_angle+0xd8>
		// 加速 
		case CTRL_ACC:
		case CTRL_SKEW_ACC:
		case CTRL_ACC_TRUN:
		case CTRL_ACC_SLA:
			*p_err =FABS(f_TrgtAccAngle);
 8007cf8:	4b24      	ldr	r3, [pc, #144]	@ (8007d8c <CTRL_getFF_angle+0xf0>)
 8007cfa:	edd3 7a00 	vldr	s15, [r3]
 8007cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d06:	db03      	blt.n	8007d10 <CTRL_getFF_angle+0x74>
 8007d08:	4b20      	ldr	r3, [pc, #128]	@ (8007d8c <CTRL_getFF_angle+0xf0>)
 8007d0a:	edd3 7a00 	vldr	s15, [r3]
 8007d0e:	e004      	b.n	8007d1a <CTRL_getFF_angle+0x7e>
 8007d10:	4b1e      	ldr	r3, [pc, #120]	@ (8007d8c <CTRL_getFF_angle+0xf0>)
 8007d12:	edd3 7a00 	vldr	s15, [r3]
 8007d16:	eef1 7a67 	vneg.f32	s15, s15
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	edc3 7a00 	vstr	s15, [r3]
			break;
 8007d20:	e02d      	b.n	8007d7e <CTRL_getFF_angle+0xe2>
		case CTRL_SKEW_CONST:
		case CTRL_CONST_TRUN:
		case CTRL_ENTRY_SLA:
		case CTRL_EXIT_SLA:
		case CTRL_CONST_SLA:
			*p_err = 0;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f04f 0200 	mov.w	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
			break;
 8007d2a:	e028      	b.n	8007d7e <CTRL_getFF_angle+0xe2>

		case CTRL_DEC:
		case CTRL_SKEW_DEC:
		case CTRL_DEC_TRUN:
		case CTRL_DEC_SLA:
			*p_err = FABS(f_TrgtAccAngle) *(-1.0);
 8007d2c:	4b17      	ldr	r3, [pc, #92]	@ (8007d8c <CTRL_getFF_angle+0xf0>)
 8007d2e:	edd3 7a00 	vldr	s15, [r3]
 8007d32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d3a:	db02      	blt.n	8007d42 <CTRL_getFF_angle+0xa6>
 8007d3c:	4b13      	ldr	r3, [pc, #76]	@ (8007d8c <CTRL_getFF_angle+0xf0>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	e006      	b.n	8007d50 <CTRL_getFF_angle+0xb4>
 8007d42:	4b12      	ldr	r3, [pc, #72]	@ (8007d8c <CTRL_getFF_angle+0xf0>)
 8007d44:	edd3 7a00 	vldr	s15, [r3]
 8007d48:	eef1 7a67 	vneg.f32	s15, s15
 8007d4c:	ee17 3a90 	vmov	r3, s15
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7f8 fc21 	bl	8000598 <__aeabi_f2d>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	f7f8 ff6b 	bl	8000c38 <__aeabi_d2f>
 8007d62:	4603      	mov	r3, r0
 8007d64:	ee07 3a90 	vmov	s15, r3
 8007d68:	eef1 7a67 	vneg.f32	s15, s15
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8007d72:	e004      	b.n	8007d7e <CTRL_getFF_angle+0xe2>

		// 加速以外 
		default:
			*p_err = 0;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f04f 0200 	mov.w	r2, #0
 8007d7a:	601a      	str	r2, [r3, #0]
			break;										// 何もしない
 8007d7c:	bf00      	nop
	}

}
 8007d7e:	bf00      	nop
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	200003fa 	.word	0x200003fa
 8007d8c:	200003ac 	.word	0x200003ac

08007d90 <CTRL_getSpeedFB>:

void CTRL_getSpeedFB( float* p_err )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
	float		f_speedErr;					// [速度制御] 速度偏差
	float		f_kp = 0.0f;
 8007d98:	f04f 0300 	mov.w	r3, #0
 8007d9c:	617b      	str	r3, [r7, #20]
	float		f_ki = 0.0f;
 8007d9e:	f04f 0300 	mov.w	r3, #0
 8007da2:	613b      	str	r3, [r7, #16]
	float		f_kd = 0.0f;
 8007da4:	f04f 0300 	mov.w	r3, #0
 8007da8:	60fb      	str	r3, [r7, #12]
	/* 速度制御 */
	f_speedErr  = f_TrgtSpeed - f_NowSpeed;					// 速度偏差[mm/s]
 8007daa:	4b35      	ldr	r3, [pc, #212]	@ (8007e80 <CTRL_getSpeedFB+0xf0>)
 8007dac:	ed93 7a00 	vldr	s14, [r3]
 8007db0:	4b34      	ldr	r3, [pc, #208]	@ (8007e84 <CTRL_getSpeedFB+0xf4>)
 8007db2:	edd3 7a00 	vldr	s15, [r3]
 8007db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dba:	edc7 7a02 	vstr	s15, [r7, #8]
/*	f_kp = f_FB_speed_kp;
	f_ki = f_FB_speed_ki;
	f_kd = f_FB_speed_kd;
*/
	f_kp = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_speed_kp;
 8007dbe:	4b32      	ldr	r3, [pc, #200]	@ (8007e88 <CTRL_getSpeedFB+0xf8>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7ff fece 	bl	8007b64 <Chg_ParamID>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fa fc3c 	bl	8002648 <PARAM_getGain>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	617b      	str	r3, [r7, #20]
	f_ki = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_speed_ki;
 8007dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8007e88 <CTRL_getSpeedFB+0xf8>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff fec2 	bl	8007b64 <Chg_ParamID>
 8007de0:	4603      	mov	r3, r0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fa fc30 	bl	8002648 <PARAM_getGain>
 8007de8:	4603      	mov	r3, r0
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	613b      	str	r3, [r7, #16]
	f_kd = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_speed_kd;
 8007dee:	4b26      	ldr	r3, [pc, #152]	@ (8007e88 <CTRL_getSpeedFB+0xf8>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff feb6 	bl	8007b64 <Chg_ParamID>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fa fc24 	bl	8002648 <PARAM_getGain>
 8007e00:	4603      	mov	r3, r0
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	60fb      	str	r3, [r7, #12]
	/* I成分演算 */
	f_SpeedErrSum += f_speedErr;// * f_ki;			// I成分更新
 8007e06:	4b21      	ldr	r3, [pc, #132]	@ (8007e8c <CTRL_getSpeedFB+0xfc>)
 8007e08:	ed93 7a00 	vldr	s14, [r3]
 8007e0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e14:	4b1d      	ldr	r3, [pc, #116]	@ (8007e8c <CTRL_getSpeedFB+0xfc>)
 8007e16:	edc3 7a00 	vstr	s15, [r3]
	if( f_SpeedErrSum > 1000.0 ){
 8007e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8007e8c <CTRL_getSpeedFB+0xfc>)
 8007e1c:	edd3 7a00 	vldr	s15, [r3]
 8007e20:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8007e90 <CTRL_getSpeedFB+0x100>
 8007e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e2c:	dd02      	ble.n	8007e34 <CTRL_getSpeedFB+0xa4>
		f_SpeedErrSum = 1000.0;			// 上限リミッター
 8007e2e:	4b17      	ldr	r3, [pc, #92]	@ (8007e8c <CTRL_getSpeedFB+0xfc>)
 8007e30:	4a18      	ldr	r2, [pc, #96]	@ (8007e94 <CTRL_getSpeedFB+0x104>)
 8007e32:	601a      	str	r2, [r3, #0]
	}

	*p_err = f_speedErr * f_kp + f_SpeedErrSum* f_ki + ( f_speedErr - f_ErrSpeedBuf ) * f_kd;				// PI制御量算出
 8007e34:	ed97 7a02 	vldr	s14, [r7, #8]
 8007e38:	edd7 7a05 	vldr	s15, [r7, #20]
 8007e3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e40:	4b12      	ldr	r3, [pc, #72]	@ (8007e8c <CTRL_getSpeedFB+0xfc>)
 8007e42:	edd3 6a00 	vldr	s13, [r3]
 8007e46:	edd7 7a04 	vldr	s15, [r7, #16]
 8007e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e52:	4b11      	ldr	r3, [pc, #68]	@ (8007e98 <CTRL_getSpeedFB+0x108>)
 8007e54:	edd3 7a00 	vldr	s15, [r3]
 8007e58:	edd7 6a02 	vldr	s13, [r7, #8]
 8007e5c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007e60:	edd7 7a03 	vldr	s15, [r7, #12]
 8007e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	edc3 7a00 	vstr	s15, [r3]

	f_ErrSpeedBuf = f_speedErr;		// 偏差をバッファリング	
 8007e72:	4a09      	ldr	r2, [pc, #36]	@ (8007e98 <CTRL_getSpeedFB+0x108>)
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	6013      	str	r3, [r2, #0]
/*	if((f_speedErr>1.5)||(f_speedErr<-1.5)){
		Failsafe_flag();
	}
*/
}
 8007e78:	bf00      	nop
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	20000374 	.word	0x20000374
 8007e84:	20000370 	.word	0x20000370
 8007e88:	200003fa 	.word	0x200003fa
 8007e8c:	2000037c 	.word	0x2000037c
 8007e90:	447a0000 	.word	0x447a0000
 8007e94:	447a0000 	.word	0x447a0000
 8007e98:	20000378 	.word	0x20000378

08007e9c <CTRL_getAngleSpeedFB>:

void CTRL_getAngleSpeedFB( float* p_err )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	ed2d 8b02 	vpush	{d8}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
	float f_err;					// [入力] ジャイロセンサーエラー値､
	float f_kp = 0.0f;				// 比例ゲイン
 8007ea8:	f04f 0300 	mov.w	r3, #0
 8007eac:	617b      	str	r3, [r7, #20]
	float f_ki = 0.0f;
 8007eae:	f04f 0300 	mov.w	r3, #0
 8007eb2:	613b      	str	r3, [r7, #16]
	float f_kd = 0.0f;
 8007eb4:	f04f 0300 	mov.w	r3, #0
 8007eb8:	60fb      	str	r3, [r7, #12]


	f_err = f_TrgtAngleS - GYRO_getSpeedErr();			// 目標角度 - ジャイロセンサ[deg/s]
 8007eba:	4b4a      	ldr	r3, [pc, #296]	@ (8007fe4 <CTRL_getAngleSpeedFB+0x148>)
 8007ebc:	ed93 8a00 	vldr	s16, [r3]
 8007ec0:	f001 fd62 	bl	8009988 <GYRO_getSpeedErr>
 8007ec4:	eef0 7a40 	vmov.f32	s15, s0
 8007ec8:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007ecc:	edc7 7a02 	vstr	s15, [r7, #8]
/*	f_kp = f_FB_angleS_kp;
	f_ki = f_FB_angleS_ki;
	f_kd = f_FB_angleS_kd;
*/
	f_kp = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_angleS_kp;
 8007ed0:	4b45      	ldr	r3, [pc, #276]	@ (8007fe8 <CTRL_getAngleSpeedFB+0x14c>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7ff fe45 	bl	8007b64 <Chg_ParamID>
 8007eda:	4603      	mov	r3, r0
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fa fbb3 	bl	8002648 <PARAM_getGain>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	617b      	str	r3, [r7, #20]
	f_ki = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_angleS_ki;
 8007ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8007fe8 <CTRL_getAngleSpeedFB+0x14c>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7ff fe39 	bl	8007b64 <Chg_ParamID>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fa fba7 	bl	8002648 <PARAM_getGain>
 8007efa:	4603      	mov	r3, r0
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	613b      	str	r3, [r7, #16]
	f_kd = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_angleS_kd;
 8007f00:	4b39      	ldr	r3, [pc, #228]	@ (8007fe8 <CTRL_getAngleSpeedFB+0x14c>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7ff fe2d 	bl	8007b64 <Chg_ParamID>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fa fb9b 	bl	8002648 <PARAM_getGain>
 8007f12:	4603      	mov	r3, r0
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	60fb      	str	r3, [r7, #12]

	f_AngleSErrSum += f_err;//*f_ki;
 8007f18:	4b34      	ldr	r3, [pc, #208]	@ (8007fec <CTRL_getAngleSpeedFB+0x150>)
 8007f1a:	ed93 7a00 	vldr	s14, [r3]
 8007f1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f26:	4b31      	ldr	r3, [pc, #196]	@ (8007fec <CTRL_getAngleSpeedFB+0x150>)
 8007f28:	edc3 7a00 	vstr	s15, [r3]

	if(f_AngleSErrSum > 200.0){
 8007f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8007fec <CTRL_getAngleSpeedFB+0x150>)
 8007f2e:	edd3 7a00 	vldr	s15, [r3]
 8007f32:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8007ff0 <CTRL_getAngleSpeedFB+0x154>
 8007f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f3e:	dd03      	ble.n	8007f48 <CTRL_getAngleSpeedFB+0xac>
		f_AngleSErrSum = 200.0;			//上限リミッター
 8007f40:	4b2a      	ldr	r3, [pc, #168]	@ (8007fec <CTRL_getAngleSpeedFB+0x150>)
 8007f42:	4a2c      	ldr	r2, [pc, #176]	@ (8007ff4 <CTRL_getAngleSpeedFB+0x158>)
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	e00c      	b.n	8007f62 <CTRL_getAngleSpeedFB+0xc6>
	}
	else if(f_AngleSErrSum <-200.0){
 8007f48:	4b28      	ldr	r3, [pc, #160]	@ (8007fec <CTRL_getAngleSpeedFB+0x150>)
 8007f4a:	edd3 7a00 	vldr	s15, [r3]
 8007f4e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8007ff8 <CTRL_getAngleSpeedFB+0x15c>
 8007f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f5a:	d502      	bpl.n	8007f62 <CTRL_getAngleSpeedFB+0xc6>
		f_AngleSErrSum = -200.0;
 8007f5c:	4b23      	ldr	r3, [pc, #140]	@ (8007fec <CTRL_getAngleSpeedFB+0x150>)
 8007f5e:	4a27      	ldr	r2, [pc, #156]	@ (8007ffc <CTRL_getAngleSpeedFB+0x160>)
 8007f60:	601a      	str	r2, [r3, #0]
	}

	*p_err = f_err * f_kp + f_AngleSErrSum*f_ki + ( f_err - f_ErrAngleSBuf ) * f_kd;		// PID制御
 8007f62:	ed97 7a02 	vldr	s14, [r7, #8]
 8007f66:	edd7 7a05 	vldr	s15, [r7, #20]
 8007f6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8007fec <CTRL_getAngleSpeedFB+0x150>)
 8007f70:	edd3 6a00 	vldr	s13, [r3]
 8007f74:	edd7 7a04 	vldr	s15, [r7, #16]
 8007f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f80:	4b1f      	ldr	r3, [pc, #124]	@ (8008000 <CTRL_getAngleSpeedFB+0x164>)
 8007f82:	edd3 7a00 	vldr	s15, [r3]
 8007f86:	edd7 6a02 	vldr	s13, [r7, #8]
 8007f8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007f8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	edc3 7a00 	vstr	s15, [r3]

	f_ErrAngleSBuf = f_err;		// 偏差をバッファリング	
 8007fa0:	4a17      	ldr	r2, [pc, #92]	@ (8008000 <CTRL_getAngleSpeedFB+0x164>)
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	6013      	str	r3, [r2, #0]
	if((f_err>30.0)||(f_err<-30.0)){
 8007fa6:	edd7 7a02 	vldr	s15, [r7, #8]
 8007faa:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8007fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb6:	dc09      	bgt.n	8007fcc <CTRL_getAngleSpeedFB+0x130>
 8007fb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8007fbc:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8007fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc8:	d400      	bmi.n	8007fcc <CTRL_getAngleSpeedFB+0x130>
		if(!(en_Type == CTRL_HIT_WALL)){
			Failsafe_flag();
		}
	}
}
 8007fca:	e005      	b.n	8007fd8 <CTRL_getAngleSpeedFB+0x13c>
		if(!(en_Type == CTRL_HIT_WALL)){
 8007fcc:	4b06      	ldr	r3, [pc, #24]	@ (8007fe8 <CTRL_getAngleSpeedFB+0x14c>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	2b06      	cmp	r3, #6
 8007fd2:	d001      	beq.n	8007fd8 <CTRL_getAngleSpeedFB+0x13c>
			Failsafe_flag();
 8007fd4:	f001 faf4 	bl	80095c0 <Failsafe_flag>
}
 8007fd8:	bf00      	nop
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	ecbd 8b02 	vpop	{d8}
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	200003bc 	.word	0x200003bc
 8007fe8:	200003fa 	.word	0x200003fa
 8007fec:	200003c4 	.word	0x200003c4
 8007ff0:	43480000 	.word	0x43480000
 8007ff4:	43480000 	.word	0x43480000
 8007ff8:	c3480000 	.word	0xc3480000
 8007ffc:	c3480000 	.word	0xc3480000
 8008000:	200003c0 	.word	0x200003c0

08008004 <CTRL_getAngleFB>:

void CTRL_getAngleFB( float* p_err )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	ed2d 8b02 	vpush	{d8}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
    float f_err;                    // [入力] 角度偏差[deg]
    float f_kp = 0.0f;              // 比例ゲイン
 8008010:	f04f 0300 	mov.w	r3, #0
 8008014:	617b      	str	r3, [r7, #20]
    float f_ki = 0.0f;
 8008016:	f04f 0300 	mov.w	r3, #0
 800801a:	613b      	str	r3, [r7, #16]

    f_err = f_TrgtAngle - GYRO_getNowAngle();          // 現在角度[deg]
 800801c:	4b2f      	ldr	r3, [pc, #188]	@ (80080dc <CTRL_getAngleFB+0xd8>)
 800801e:	ed93 8a00 	vldr	s16, [r3]
 8008022:	f001 fcfd 	bl	8009a20 <GYRO_getNowAngle>
 8008026:	eef0 7a40 	vmov.f32	s15, s0
 800802a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800802e:	edc7 7a03 	vstr	s15, [r7, #12]
/*    f_kp = f_FB_angle_kp;
    f_ki = f_FB_angle_ki;
*/
	f_kp = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_angle_kp;
 8008032:	4b2b      	ldr	r3, [pc, #172]	@ (80080e0 <CTRL_getAngleFB+0xdc>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	4618      	mov	r0, r3
 8008038:	f7ff fd94 	bl	8007b64 <Chg_ParamID>
 800803c:	4603      	mov	r3, r0
 800803e:	4618      	mov	r0, r3
 8008040:	f7fa fb02 	bl	8002648 <PARAM_getGain>
 8008044:	4603      	mov	r3, r0
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	617b      	str	r3, [r7, #20]
	f_ki = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_angle_ki;
 800804a:	4b25      	ldr	r3, [pc, #148]	@ (80080e0 <CTRL_getAngleFB+0xdc>)
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	4618      	mov	r0, r3
 8008050:	f7ff fd88 	bl	8007b64 <Chg_ParamID>
 8008054:	4603      	mov	r3, r0
 8008056:	4618      	mov	r0, r3
 8008058:	f7fa faf6 	bl	8002648 <PARAM_getGain>
 800805c:	4603      	mov	r3, r0
 800805e:	69db      	ldr	r3, [r3, #28]
 8008060:	613b      	str	r3, [r7, #16]

    f_AngleErrSum += f_err;//*f_ki;
 8008062:	4b20      	ldr	r3, [pc, #128]	@ (80080e4 <CTRL_getAngleFB+0xe0>)
 8008064:	ed93 7a00 	vldr	s14, [r3]
 8008068:	edd7 7a03 	vldr	s15, [r7, #12]
 800806c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008070:	4b1c      	ldr	r3, [pc, #112]	@ (80080e4 <CTRL_getAngleFB+0xe0>)
 8008072:	edc3 7a00 	vstr	s15, [r3]
    if(f_AngleErrSum > 100.0){
 8008076:	4b1b      	ldr	r3, [pc, #108]	@ (80080e4 <CTRL_getAngleFB+0xe0>)
 8008078:	edd3 7a00 	vldr	s15, [r3]
 800807c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80080e8 <CTRL_getAngleFB+0xe4>
 8008080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008088:	dd03      	ble.n	8008092 <CTRL_getAngleFB+0x8e>
        f_AngleErrSum = 100.0;           //上限リミッター
 800808a:	4b16      	ldr	r3, [pc, #88]	@ (80080e4 <CTRL_getAngleFB+0xe0>)
 800808c:	4a17      	ldr	r2, [pc, #92]	@ (80080ec <CTRL_getAngleFB+0xe8>)
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	e00c      	b.n	80080ac <CTRL_getAngleFB+0xa8>
    }
    else if(f_AngleErrSum <-100.0){
 8008092:	4b14      	ldr	r3, [pc, #80]	@ (80080e4 <CTRL_getAngleFB+0xe0>)
 8008094:	edd3 7a00 	vldr	s15, [r3]
 8008098:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80080f0 <CTRL_getAngleFB+0xec>
 800809c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a4:	d502      	bpl.n	80080ac <CTRL_getAngleFB+0xa8>
        f_AngleErrSum = -100.0;
 80080a6:	4b0f      	ldr	r3, [pc, #60]	@ (80080e4 <CTRL_getAngleFB+0xe0>)
 80080a8:	4a12      	ldr	r2, [pc, #72]	@ (80080f4 <CTRL_getAngleFB+0xf0>)
 80080aa:	601a      	str	r2, [r3, #0]
    }
    *p_err = f_err * f_kp + f_AngleErrSum*f_ki;        // PID制御｡
 80080ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80080b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80080b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80080b8:	4b0a      	ldr	r3, [pc, #40]	@ (80080e4 <CTRL_getAngleFB+0xe0>)
 80080ba:	edd3 6a00 	vldr	s13, [r3]
 80080be:	edd7 7a04 	vldr	s15, [r7, #16]
 80080c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80080c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	edc3 7a00 	vstr	s15, [r3]

}
 80080d0:	bf00      	nop
 80080d2:	3718      	adds	r7, #24
 80080d4:	46bd      	mov	sp, r7
 80080d6:	ecbd 8b02 	vpop	{d8}
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	200003d4 	.word	0x200003d4
 80080e0:	200003fa 	.word	0x200003fa
 80080e4:	200003d8 	.word	0x200003d8
 80080e8:	42c80000 	.word	0x42c80000
 80080ec:	42c80000 	.word	0x42c80000
 80080f0:	c2c80000 	.word	0xc2c80000
 80080f4:	c2c80000 	.word	0xc2c80000

080080f8 <CTRL_getSenFB>:


void CTRL_getSenFB( float* p_err )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
	float f_err 	= 0;
 8008100:	f04f 0300 	mov.w	r3, #0
 8008104:	617b      	str	r3, [r7, #20]
	float f_kp 		= 0.0f;				// 比例ゲイン
 8008106:	f04f 0300 	mov.w	r3, #0
 800810a:	613b      	str	r3, [r7, #16]
	float f_kd 		= 0.0f;				// 微分ゲイン
 800810c:	f04f 0300 	mov.w	r3, #0
 8008110:	60fb      	str	r3, [r7, #12]
	float gyro		= 0.0f;
 8008112:	f04f 0300 	mov.w	r3, #0
 8008116:	60bb      	str	r3, [r7, #8]

	/* 直進時 */
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC )||
 8008118:	4b3a      	ldr	r3, [pc, #232]	@ (8008204 <CTRL_getSenFB+0x10c>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00f      	beq.n	8008140 <CTRL_getSenFB+0x48>
 8008120:	4b38      	ldr	r3, [pc, #224]	@ (8008204 <CTRL_getSenFB+0x10c>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d00b      	beq.n	8008140 <CTRL_getSenFB+0x48>
 8008128:	4b36      	ldr	r3, [pc, #216]	@ (8008204 <CTRL_getSenFB+0x10c>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b02      	cmp	r3, #2
 800812e:	d007      	beq.n	8008140 <CTRL_getSenFB+0x48>
			 ( en_Type == CTRL_ENTRY_SLA ) || ( en_Type == CTRL_EXIT_SLA ) ){
 8008130:	4b34      	ldr	r3, [pc, #208]	@ (8008204 <CTRL_getSenFB+0x10c>)
 8008132:	781b      	ldrb	r3, [r3, #0]
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC )||
 8008134:	2b0a      	cmp	r3, #10
 8008136:	d003      	beq.n	8008140 <CTRL_getSenFB+0x48>
			 ( en_Type == CTRL_ENTRY_SLA ) || ( en_Type == CTRL_EXIT_SLA ) ){
 8008138:	4b32      	ldr	r3, [pc, #200]	@ (8008204 <CTRL_getSenFB+0x10c>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b0e      	cmp	r3, #14
 800813e:	d13c      	bne.n	80081ba <CTRL_getSenFB+0xc2>
/*
		f_kp = f_FB_wall_kp;
		f_kd = f_FB_wall_kd;
*/
		f_kp = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_wall_kp;
 8008140:	4b30      	ldr	r3, [pc, #192]	@ (8008204 <CTRL_getSenFB+0x10c>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	4618      	mov	r0, r3
 8008146:	f7ff fd0d 	bl	8007b64 <Chg_ParamID>
 800814a:	4603      	mov	r3, r0
 800814c:	4618      	mov	r0, r3
 800814e:	f7fa fa7b 	bl	8002648 <PARAM_getGain>
 8008152:	4603      	mov	r3, r0
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	613b      	str	r3, [r7, #16]
		f_kd = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_wall_kd;
 8008158:	4b2a      	ldr	r3, [pc, #168]	@ (8008204 <CTRL_getSenFB+0x10c>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff fd01 	bl	8007b64 <Chg_ParamID>
 8008162:	4603      	mov	r3, r0
 8008164:	4618      	mov	r0, r3
 8008166:	f7fa fa6f 	bl	8002648 <PARAM_getGain>
 800816a:	4603      	mov	r3, r0
 800816c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800816e:	60fb      	str	r3, [r7, #12]

		/* 偏差取得 */
		DIST_getErr( &l_WallErr );
 8008170:	4825      	ldr	r0, [pc, #148]	@ (8008208 <CTRL_getSenFB+0x110>)
 8008172:	f00a fd11 	bl	8012b98 <DIST_getErr>
		f_err = (float)l_WallErr;
 8008176:	4b24      	ldr	r3, [pc, #144]	@ (8008208 <CTRL_getSenFB+0x110>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	ee07 3a90 	vmov	s15, r3
 800817e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008182:	edc7 7a05 	vstr	s15, [r7, #20]

		/* PD制御 */

		f_ErrDistBuf = f_err;		// 偏差をバッファリング
 8008186:	4a21      	ldr	r2, [pc, #132]	@ (800820c <CTRL_getSenFB+0x114>)
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	6013      	str	r3, [r2, #0]

//		*p_err = (f_err * f_kp + ( f_err - f_ErrDistBuf ) * f_kd)*f_NowSpeed*0.001;		// PD制御
		*p_err = f_err * f_kp + ( f_err - f_ErrDistBuf ) * f_kd;
 800818c:	ed97 7a05 	vldr	s14, [r7, #20]
 8008190:	edd7 7a04 	vldr	s15, [r7, #16]
 8008194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008198:	4b1c      	ldr	r3, [pc, #112]	@ (800820c <CTRL_getSenFB+0x114>)
 800819a:	edd3 7a00 	vldr	s15, [r3]
 800819e:	edd7 6a05 	vldr	s13, [r7, #20]
 80081a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80081a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80081aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80081ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	edc3 7a00 	vstr	s15, [r3]
 80081b8:	e01f      	b.n	80081fa <CTRL_getSenFB+0x102>
	}
	else if( ( en_Type == CTRL_SKEW_ACC ) || ( en_Type == CTRL_SKEW_CONST ) || ( en_Type == CTRL_SKEW_DEC ) ){
 80081ba:	4b12      	ldr	r3, [pc, #72]	@ (8008204 <CTRL_getSenFB+0x10c>)
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d007      	beq.n	80081d2 <CTRL_getSenFB+0xda>
 80081c2:	4b10      	ldr	r3, [pc, #64]	@ (8008204 <CTRL_getSenFB+0x10c>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d003      	beq.n	80081d2 <CTRL_getSenFB+0xda>
 80081ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008204 <CTRL_getSenFB+0x10c>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	2b05      	cmp	r3, #5
 80081d0:	d10e      	bne.n	80081f0 <CTRL_getSenFB+0xf8>

		DIST_getErrSkew( &l_WallErr );
 80081d2:	480d      	ldr	r0, [pc, #52]	@ (8008208 <CTRL_getSenFB+0x110>)
 80081d4:	f00a fe76 	bl	8012ec4 <DIST_getErrSkew>
		f_err = (float)l_WallErr;
 80081d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008208 <CTRL_getSenFB+0x110>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	ee07 3a90 	vmov	s15, r3
 80081e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081e4:	edc7 7a05 	vstr	s15, [r7, #20]

//		*p_err = f_err * f_kp + ( f_err - f_ErrDistBuf ) * f_kd;		// PD制御
//		*p_err = f_err*f_NowSpeed*0.001;
		*p_err = f_err;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	e004      	b.n	80081fa <CTRL_getSenFB+0x102>
	}
	else {
		*p_err = 0;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f04f 0200 	mov.w	r2, #0
 80081f6:	601a      	str	r2, [r3, #0]
	}

}
 80081f8:	bf00      	nop
 80081fa:	bf00      	nop
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	200003fa 	.word	0x200003fa
 8008208:	200003dc 	.word	0x200003dc
 800820c:	200003e0 	.word	0x200003e0

08008210 <CTRL_get_frontwall_v_FB>:

void CTRL_get_frontwall_v_FB( float* p_err)
{
 8008210:	b590      	push	{r4, r7, lr}
 8008212:	b089      	sub	sp, #36	@ 0x24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
	float f_v_err 	= 0;
 8008218:	f04f 0300 	mov.w	r3, #0
 800821c:	61fb      	str	r3, [r7, #28]
	float f_omega_err 	= 0;
 800821e:	f04f 0300 	mov.w	r3, #0
 8008222:	61bb      	str	r3, [r7, #24]
	float f_v_kp 		= 0.0f;				// 比例ゲイン
 8008224:	f04f 0300 	mov.w	r3, #0
 8008228:	617b      	str	r3, [r7, #20]
	float f_v_ki 		= 0.0f;				// 比例ゲイン
 800822a:	f04f 0300 	mov.w	r3, #0
 800822e:	613b      	str	r3, [r7, #16]
	float f_v_kd 		= 0.0f;				// 微分ゲイン
 8008230:	f04f 0300 	mov.w	r3, #0
 8008234:	60fb      	str	r3, [r7, #12]
	float gyro		= 0.0f;
 8008236:	f04f 0300 	mov.w	r3, #0
 800823a:	60bb      	str	r3, [r7, #8]

	/* 前壁制御 */
	if( en_Type == CTRL_FRONT_WALL ){
 800823c:	4b31      	ldr	r3, [pc, #196]	@ (8008304 <CTRL_get_frontwall_v_FB+0xf4>)
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	2b0f      	cmp	r3, #15
 8008242:	d15a      	bne.n	80082fa <CTRL_get_frontwall_v_FB+0xea>

		f_v_kp = FB_FRONT_WALL_V_KP;
 8008244:	4b30      	ldr	r3, [pc, #192]	@ (8008308 <CTRL_get_frontwall_v_FB+0xf8>)
 8008246:	617b      	str	r3, [r7, #20]
		f_v_ki = FB_FRONT_WALL_V_KI;
 8008248:	f04f 0300 	mov.w	r3, #0
 800824c:	613b      	str	r3, [r7, #16]
		f_v_kd = FB_FRONT_WALL_V_KD;
 800824e:	4b2f      	ldr	r3, [pc, #188]	@ (800830c <CTRL_get_frontwall_v_FB+0xfc>)
 8008250:	60fb      	str	r3, [r7, #12]

		if( en_Type == CTRL_FRONT_WALL){
 8008252:	4b2c      	ldr	r3, [pc, #176]	@ (8008304 <CTRL_get_frontwall_v_FB+0xf4>)
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	2b0f      	cmp	r3, #15
 8008258:	d14f      	bne.n	80082fa <CTRL_get_frontwall_v_FB+0xea>
			l_FrontSen_vErr = ((L_FRONT_REF+FRONT_WALL_MINUS) - DIST_getNowVal( DIST_SEN_L_FRONT )) + ((R_FRONT_REF+FRONT_WALL_MINUS) - DIST_getNowVal( DIST_SEN_R_FRONT ));
 800825a:	2001      	movs	r0, #1
 800825c:	f00a fc84 	bl	8012b68 <DIST_getNowVal>
 8008260:	4603      	mov	r3, r0
 8008262:	f5c3 7446 	rsb	r4, r3, #792	@ 0x318
 8008266:	3403      	adds	r4, #3
 8008268:	2000      	movs	r0, #0
 800826a:	f00a fc7d 	bl	8012b68 <DIST_getNowVal>
 800826e:	4603      	mov	r3, r0
 8008270:	f5c3 733f 	rsb	r3, r3, #764	@ 0x2fc
 8008274:	3301      	adds	r3, #1
 8008276:	4423      	add	r3, r4
 8008278:	4a25      	ldr	r2, [pc, #148]	@ (8008310 <CTRL_get_frontwall_v_FB+0x100>)
 800827a:	6013      	str	r3, [r2, #0]
			f_v_err = (float)l_FrontSen_vErr;
 800827c:	4b24      	ldr	r3, [pc, #144]	@ (8008310 <CTRL_get_frontwall_v_FB+0x100>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	ee07 3a90 	vmov	s15, r3
 8008284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008288:	edc7 7a07 	vstr	s15, [r7, #28]
	
			/* PD制御 */
			f_ErrFrontSen_vBuf = f_v_err;		// 偏差をバッファリング
 800828c:	4a21      	ldr	r2, [pc, #132]	@ (8008314 <CTRL_get_frontwall_v_FB+0x104>)
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	6013      	str	r3, [r2, #0]

			*p_err = f_v_err * f_v_kp + ( f_v_err - f_ErrFrontSen_vBuf ) * f_v_kd;		// PD制御
 8008292:	ed97 7a07 	vldr	s14, [r7, #28]
 8008296:	edd7 7a05 	vldr	s15, [r7, #20]
 800829a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800829e:	4b1d      	ldr	r3, [pc, #116]	@ (8008314 <CTRL_get_frontwall_v_FB+0x104>)
 80082a0:	edd3 7a00 	vldr	s15, [r3]
 80082a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80082a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80082ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80082b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80082b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	edc3 7a00 	vstr	s15, [r3]
			if(*p_err < - 0.5)*p_err = -0.5;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	edd3 7a00 	vldr	s15, [r3]
 80082c4:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80082c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d0:	d504      	bpl.n	80082dc <CTRL_get_frontwall_v_FB+0xcc>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 80082d8:	601a      	str	r2, [r3, #0]
			else if(*p_err > 0.5)*p_err = 0.5;
		}
	}

}
 80082da:	e00e      	b.n	80082fa <CTRL_get_frontwall_v_FB+0xea>
			else if(*p_err > 0.5)*p_err = 0.5;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	edd3 7a00 	vldr	s15, [r3]
 80082e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80082e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ee:	dc00      	bgt.n	80082f2 <CTRL_get_frontwall_v_FB+0xe2>
}
 80082f0:	e003      	b.n	80082fa <CTRL_get_frontwall_v_FB+0xea>
			else if(*p_err > 0.5)*p_err = 0.5;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80082f8:	601a      	str	r2, [r3, #0]
}
 80082fa:	bf00      	nop
 80082fc:	3724      	adds	r7, #36	@ 0x24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd90      	pop	{r4, r7, pc}
 8008302:	bf00      	nop
 8008304:	200003fa 	.word	0x200003fa
 8008308:	3a83126f 	.word	0x3a83126f
 800830c:	38d1b717 	.word	0x38d1b717
 8008310:	200003e4 	.word	0x200003e4
 8008314:	200003ec 	.word	0x200003ec

08008318 <CTRL_get_frontwall_omega_FB>:

void CTRL_get_frontwall_omega_FB( float* p_err)
{
 8008318:	b590      	push	{r4, r7, lr}
 800831a:	b089      	sub	sp, #36	@ 0x24
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
	float f_omega_err 	= 0;
 8008320:	f04f 0300 	mov.w	r3, #0
 8008324:	61fb      	str	r3, [r7, #28]
	
	float f_omega_kp 		= 0.0f;				// 比例ゲイン
 8008326:	f04f 0300 	mov.w	r3, #0
 800832a:	61bb      	str	r3, [r7, #24]
	float f_omega_ki 		= 0.0f;				// 比例ゲイン
 800832c:	f04f 0300 	mov.w	r3, #0
 8008330:	617b      	str	r3, [r7, #20]
	float f_omega_kd 		= 0.0f;				// 微分ゲイン
 8008332:	f04f 0300 	mov.w	r3, #0
 8008336:	613b      	str	r3, [r7, #16]
	float gyro		= 0.0f;
 8008338:	f04f 0300 	mov.w	r3, #0
 800833c:	60fb      	str	r3, [r7, #12]

	/* 前壁制御 */
	if( en_Type == CTRL_FRONT_WALL ){
 800833e:	4b2a      	ldr	r3, [pc, #168]	@ (80083e8 <CTRL_get_frontwall_omega_FB+0xd0>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	2b0f      	cmp	r3, #15
 8008344:	d14c      	bne.n	80083e0 <CTRL_get_frontwall_omega_FB+0xc8>
		f_omega_kp = FB_FRONT_WALL_OMEGA_KP;
 8008346:	4b29      	ldr	r3, [pc, #164]	@ (80083ec <CTRL_get_frontwall_omega_FB+0xd4>)
 8008348:	61bb      	str	r3, [r7, #24]
		f_omega_ki = FB_FRONT_WALL_OMEGA_KI;
 800834a:	f04f 0300 	mov.w	r3, #0
 800834e:	617b      	str	r3, [r7, #20]
		f_omega_kd = FB_FRONT_WALL_OMEGA_KD;
 8008350:	4b27      	ldr	r3, [pc, #156]	@ (80083f0 <CTRL_get_frontwall_omega_FB+0xd8>)
 8008352:	613b      	str	r3, [r7, #16]

		if( en_Type == CTRL_FRONT_WALL){	
 8008354:	4b24      	ldr	r3, [pc, #144]	@ (80083e8 <CTRL_get_frontwall_omega_FB+0xd0>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2b0f      	cmp	r3, #15
 800835a:	d141      	bne.n	80083e0 <CTRL_get_frontwall_omega_FB+0xc8>
			l_FrontSen_OmegaErr = (DIST_getNowVal( DIST_SEN_L_FRONT )- (L_FRONT_REF+FRONT_WALL_MINUS)) + 
 800835c:	2001      	movs	r0, #1
 800835e:	f00a fc03 	bl	8012b68 <DIST_getNowVal>
 8008362:	4603      	mov	r3, r0
 8008364:	f2a3 341b 	subw	r4, r3, #795	@ 0x31b
									((R_FRONT_REF+FRONT_WALL_MINUS) - DIST_getNowVal( DIST_SEN_R_FRONT ));
 8008368:	2000      	movs	r0, #0
 800836a:	f00a fbfd 	bl	8012b68 <DIST_getNowVal>
 800836e:	4603      	mov	r3, r0
 8008370:	f5c3 733f 	rsb	r3, r3, #764	@ 0x2fc
 8008374:	3301      	adds	r3, #1
			l_FrontSen_OmegaErr = (DIST_getNowVal( DIST_SEN_L_FRONT )- (L_FRONT_REF+FRONT_WALL_MINUS)) + 
 8008376:	4423      	add	r3, r4
 8008378:	4a1e      	ldr	r2, [pc, #120]	@ (80083f4 <CTRL_get_frontwall_omega_FB+0xdc>)
 800837a:	6013      	str	r3, [r2, #0]
			if(l_FrontSen_OmegaErr > 500)l_FrontSen_OmegaErr = 500;
 800837c:	4b1d      	ldr	r3, [pc, #116]	@ (80083f4 <CTRL_get_frontwall_omega_FB+0xdc>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008384:	dd03      	ble.n	800838e <CTRL_get_frontwall_omega_FB+0x76>
 8008386:	4b1b      	ldr	r3, [pc, #108]	@ (80083f4 <CTRL_get_frontwall_omega_FB+0xdc>)
 8008388:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800838c:	601a      	str	r2, [r3, #0]
			if(l_FrontSen_OmegaErr < -500)l_FrontSen_OmegaErr = -500;
 800838e:	4b19      	ldr	r3, [pc, #100]	@ (80083f4 <CTRL_get_frontwall_omega_FB+0xdc>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 8008396:	da02      	bge.n	800839e <CTRL_get_frontwall_omega_FB+0x86>
 8008398:	4b16      	ldr	r3, [pc, #88]	@ (80083f4 <CTRL_get_frontwall_omega_FB+0xdc>)
 800839a:	4a17      	ldr	r2, [pc, #92]	@ (80083f8 <CTRL_get_frontwall_omega_FB+0xe0>)
 800839c:	601a      	str	r2, [r3, #0]
			f_omega_err = (float)l_FrontSen_OmegaErr;
 800839e:	4b15      	ldr	r3, [pc, #84]	@ (80083f4 <CTRL_get_frontwall_omega_FB+0xdc>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	ee07 3a90 	vmov	s15, r3
 80083a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083aa:	edc7 7a07 	vstr	s15, [r7, #28]
	
			/* PD制御 */
			f_ErrFrontSen_OmegaBuf = f_omega_err;		// 偏差をバッファリング
 80083ae:	4a13      	ldr	r2, [pc, #76]	@ (80083fc <CTRL_get_frontwall_omega_FB+0xe4>)
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	6013      	str	r3, [r2, #0]

			*p_err =f_omega_err * f_omega_kp + ( f_omega_err - f_ErrFrontSen_OmegaBuf ) * f_omega_kd;		// PD制御
 80083b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80083b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80083bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80083c0:	4b0e      	ldr	r3, [pc, #56]	@ (80083fc <CTRL_get_frontwall_omega_FB+0xe4>)
 80083c2:	edd3 7a00 	vldr	s15, [r3]
 80083c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80083ca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80083ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80083d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	edc3 7a00 	vstr	s15, [r3]
		}
	}

}
 80083e0:	bf00      	nop
 80083e2:	3724      	adds	r7, #36	@ 0x24
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd90      	pop	{r4, r7, pc}
 80083e8:	200003fa 	.word	0x200003fa
 80083ec:	3f666666 	.word	0x3f666666
 80083f0:	3e99999a 	.word	0x3e99999a
 80083f4:	200003e8 	.word	0x200003e8
 80083f8:	fffffe0c 	.word	0xfffffe0c
 80083fc:	200003f0 	.word	0x200003f0

08008400 <CTRL_getFloorFriction>:

void CTRL_getFloorFriction(float* p_err){
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
	float tread;
	if(( en_Type == CTRL_ACC_TRUN) || (en_Type == CTRL_CONST_TRUN)||( en_Type == CTRL_DEC_TRUN )){
 8008408:	4b19      	ldr	r3, [pc, #100]	@ (8008470 <CTRL_getFloorFriction+0x70>)
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	2b07      	cmp	r3, #7
 800840e:	d007      	beq.n	8008420 <CTRL_getFloorFriction+0x20>
 8008410:	4b17      	ldr	r3, [pc, #92]	@ (8008470 <CTRL_getFloorFriction+0x70>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	2b08      	cmp	r3, #8
 8008416:	d003      	beq.n	8008420 <CTRL_getFloorFriction+0x20>
 8008418:	4b15      	ldr	r3, [pc, #84]	@ (8008470 <CTRL_getFloorFriction+0x70>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	2b09      	cmp	r3, #9
 800841e:	d102      	bne.n	8008426 <CTRL_getFloorFriction+0x26>
		tread = TREAD_IMAGIN;
 8008420:	4b14      	ldr	r3, [pc, #80]	@ (8008474 <CTRL_getFloorFriction+0x74>)
 8008422:	60fb      	str	r3, [r7, #12]
 8008424:	e001      	b.n	800842a <CTRL_getFloorFriction+0x2a>
	}else{
		tread = TREAD;
 8008426:	4b14      	ldr	r3, [pc, #80]	@ (8008478 <CTRL_getFloorFriction+0x78>)
 8008428:	60fb      	str	r3, [r7, #12]
			*p_err = 0;
		}
	}
*/
//	else{
		if(f_TrgtAngleS<0){
 800842a:	4b14      	ldr	r3, [pc, #80]	@ (800847c <CTRL_getFloorFriction+0x7c>)
 800842c:	edd3 7a00 	vldr	s15, [r3]
 8008430:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008438:	d503      	bpl.n	8008442 <CTRL_getFloorFriction+0x42>
	//			*p_err = (-1)*0.35/1000.0 + (-1)*0.45/1000.0+f_TrgtAngleS*tread/2/PI/109.0;
			else
				*p_err = (-1.0)*0.37/1000.0;
			}
*/
			*p_err = (-1.0)*0.2/1000.0;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a10      	ldr	r2, [pc, #64]	@ (8008480 <CTRL_getFloorFriction+0x80>)
 800843e:	601a      	str	r2, [r3, #0]
/*	if(*p_err>0.0014)
		*p_err = 0.0014;
	if(*p_err<-0.0014)
		*p_err = -0.0014;
*/
}
 8008440:	e00f      	b.n	8008462 <CTRL_getFloorFriction+0x62>
		else if(f_TrgtAngleS>0){
 8008442:	4b0e      	ldr	r3, [pc, #56]	@ (800847c <CTRL_getFloorFriction+0x7c>)
 8008444:	edd3 7a00 	vldr	s15, [r3]
 8008448:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800844c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008450:	dd03      	ble.n	800845a <CTRL_getFloorFriction+0x5a>
			*p_err = 0.2/1000.0;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a0b      	ldr	r2, [pc, #44]	@ (8008484 <CTRL_getFloorFriction+0x84>)
 8008456:	601a      	str	r2, [r3, #0]
}
 8008458:	e003      	b.n	8008462 <CTRL_getFloorFriction+0x62>
			*p_err = 0;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f04f 0200 	mov.w	r2, #0
 8008460:	601a      	str	r2, [r3, #0]
}
 8008462:	bf00      	nop
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	200003fa 	.word	0x200003fa
 8008474:	3d1e1b09 	.word	0x3d1e1b09
 8008478:	3d09374c 	.word	0x3d09374c
 800847c:	200003bc 	.word	0x200003bc
 8008480:	b951b717 	.word	0xb951b717
 8008484:	3951b717 	.word	0x3951b717

08008488 <CTRL_outMot>:

void CTRL_outMot( float f_duty10_R, float f_duty10_L )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	ed87 0a01 	vstr	s0, [r7, #4]
 8008492:	edc7 0a00 	vstr	s1, [r7]
	float	f_temp;			// 計算用

	/* 電圧に応じてPWM出力を変更する */
	f_duty10_R = f_duty10_R*1000.0;
 8008496:	edd7 7a01 	vldr	s15, [r7, #4]
 800849a:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80085cc <CTRL_outMot+0x144>
 800849e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80084a2:	edc7 7a01 	vstr	s15, [r7, #4]
	f_duty10_L = f_duty10_L*1000.0;
 80084a6:	edd7 7a00 	vldr	s15, [r7]
 80084aa:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80085cc <CTRL_outMot+0x144>
 80084ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80084b2:	edc7 7a00 	vstr	s15, [r7]

	/* 右モータ */
	if( 60 < f_duty10_R ){									// 前進
 80084b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80084ba:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80085d0 <CTRL_outMot+0x148>
 80084be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c6:	dd0e      	ble.n	80084e6 <CTRL_outMot+0x5e>
		DCM_setDirCcw( DCM_R );
 80084c8:	2000      	movs	r0, #0
 80084ca:	f001 f8b0 	bl	800962e <DCM_setDirCcw>
		DCM_setPwmDuty( DCM_R, (uint16_t)f_duty10_R );
 80084ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80084d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084d6:	ee17 3a90 	vmov	r3, s15
 80084da:	b29b      	uxth	r3, r3
 80084dc:	4619      	mov	r1, r3
 80084de:	2000      	movs	r0, #0
 80084e0:	f001 f8e6 	bl	80096b0 <DCM_setPwmDuty>
 80084e4:	e02a      	b.n	800853c <CTRL_outMot+0xb4>
	}
	else if( f_duty10_R < -20 ){							// 後退
 80084e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80084ea:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 80084ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f6:	d51e      	bpl.n	8008536 <CTRL_outMot+0xae>
		f_temp = f_duty10_R * -1.0;
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7f8 f84d 	bl	8000598 <__aeabi_f2d>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4610      	mov	r0, r2
 8008504:	4619      	mov	r1, r3
 8008506:	f7f8 fb97 	bl	8000c38 <__aeabi_d2f>
 800850a:	4603      	mov	r3, r0
 800850c:	ee07 3a90 	vmov	s15, r3
 8008510:	eef1 7a67 	vneg.f32	s15, s15
 8008514:	edc7 7a03 	vstr	s15, [r7, #12]
		DCM_setDirCw( DCM_R );
 8008518:	2000      	movs	r0, #0
 800851a:	f001 f875 	bl	8009608 <DCM_setDirCw>
		DCM_setPwmDuty( DCM_R, (uint16_t)f_temp );
 800851e:	edd7 7a03 	vldr	s15, [r7, #12]
 8008522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008526:	ee17 3a90 	vmov	r3, s15
 800852a:	b29b      	uxth	r3, r3
 800852c:	4619      	mov	r1, r3
 800852e:	2000      	movs	r0, #0
 8008530:	f001 f8be 	bl	80096b0 <DCM_setPwmDuty>
 8008534:	e002      	b.n	800853c <CTRL_outMot+0xb4>
	}
	else{
		DCM_brakeMot( DCM_R );								// ブレーキ
 8008536:	2000      	movs	r0, #0
 8008538:	f001 f88c 	bl	8009654 <DCM_brakeMot>
	}

	/* 左モータ */
	if( 60 < f_duty10_L ){									// 前進
 800853c:	edd7 7a00 	vldr	s15, [r7]
 8008540:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80085d0 <CTRL_outMot+0x148>
 8008544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800854c:	dd0e      	ble.n	800856c <CTRL_outMot+0xe4>
		DCM_setDirCw( DCM_L );
 800854e:	2001      	movs	r0, #1
 8008550:	f001 f85a 	bl	8009608 <DCM_setDirCw>
		DCM_setPwmDuty( DCM_L, (uint16_t)f_duty10_L );
 8008554:	edd7 7a00 	vldr	s15, [r7]
 8008558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800855c:	ee17 3a90 	vmov	r3, s15
 8008560:	b29b      	uxth	r3, r3
 8008562:	4619      	mov	r1, r3
 8008564:	2001      	movs	r0, #1
 8008566:	f001 f8a3 	bl	80096b0 <DCM_setPwmDuty>
		DCM_setPwmDuty( DCM_L, (uint16_t)f_temp );
	}
	else{
		DCM_brakeMot( DCM_L );								// ブレーキ
	}
}
 800856a:	e02a      	b.n	80085c2 <CTRL_outMot+0x13a>
	else if( f_duty10_L < -20 ){							// 後退
 800856c:	edd7 7a00 	vldr	s15, [r7]
 8008570:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8008574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800857c:	d51e      	bpl.n	80085bc <CTRL_outMot+0x134>
		f_temp = f_duty10_L * -1.0;
 800857e:	6838      	ldr	r0, [r7, #0]
 8008580:	f7f8 f80a 	bl	8000598 <__aeabi_f2d>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	4610      	mov	r0, r2
 800858a:	4619      	mov	r1, r3
 800858c:	f7f8 fb54 	bl	8000c38 <__aeabi_d2f>
 8008590:	4603      	mov	r3, r0
 8008592:	ee07 3a90 	vmov	s15, r3
 8008596:	eef1 7a67 	vneg.f32	s15, s15
 800859a:	edc7 7a03 	vstr	s15, [r7, #12]
		DCM_setDirCcw( DCM_L );
 800859e:	2001      	movs	r0, #1
 80085a0:	f001 f845 	bl	800962e <DCM_setDirCcw>
		DCM_setPwmDuty( DCM_L, (uint16_t)f_temp );
 80085a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80085a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ac:	ee17 3a90 	vmov	r3, s15
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	4619      	mov	r1, r3
 80085b4:	2001      	movs	r0, #1
 80085b6:	f001 f87b 	bl	80096b0 <DCM_setPwmDuty>
}
 80085ba:	e002      	b.n	80085c2 <CTRL_outMot+0x13a>
		DCM_brakeMot( DCM_L );								// ブレーキ
 80085bc:	2001      	movs	r0, #1
 80085be:	f001 f849 	bl	8009654 <DCM_brakeMot>
}
 80085c2:	bf00      	nop
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	447a0000 	.word	0x447a0000
 80085d0:	42700000 	.word	0x42700000
 80085d4:	00000000 	.word	0x00000000

080085d8 <CTRL_pol>:

void CTRL_pol( void )
{
 80085d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80085dc:	b090      	sub	sp, #64	@ 0x40
 80085de:	af00      	add	r7, sp, #0
	float f_feedFoard_speed		= 0;		// [制御] フィードフォワード速度制御
 80085e0:	f04f 0300 	mov.w	r3, #0
 80085e4:	627b      	str	r3, [r7, #36]	@ 0x24
	float f_feedFoard_angle		= 0;		// [制御] フィードフォワード角度制御
 80085e6:	f04f 0300 	mov.w	r3, #0
 80085ea:	623b      	str	r3, [r7, #32]
	float f_speedCtrl			= 0;		// [制御] 速度制御量
 80085ec:	f04f 0300 	mov.w	r3, #0
 80085f0:	61fb      	str	r3, [r7, #28]
	float f_angleSpeedCtrl			= 0;	// [制御] 角速度制御量
 80085f2:	f04f 0300 	mov.w	r3, #0
 80085f6:	61bb      	str	r3, [r7, #24]
	float f_angleCtrl			= 0;		// [制御] 角度制御量
 80085f8:	f04f 0300 	mov.w	r3, #0
 80085fc:	617b      	str	r3, [r7, #20]
	float f_distSenCtrl			= 0;		// [制御] 距離センサー制御量
 80085fe:	f04f 0300 	mov.w	r3, #0
 8008602:	613b      	str	r3, [r7, #16]
	float f_frontwall_v_Ctrl		= 0;
 8008604:	f04f 0300 	mov.w	r3, #0
 8008608:	60fb      	str	r3, [r7, #12]
	float f_frontwall_omega_Ctrl	= 0;
 800860a:	f04f 0300 	mov.w	r3, #0
 800860e:	60bb      	str	r3, [r7, #8]
	float f_floorfriction		= 0;
 8008610:	f04f 0300 	mov.w	r3, #0
 8008614:	607b      	str	r3, [r7, #4]
	float f_duty10_R;						// [出力] 右モータPWM-DUTY比[0.1%]
	float f_duty10_L;						// [出力] 左モータPWM-DUTY比[0.1%]

	float TR = 0.0;
 8008616:	f04f 0300 	mov.w	r3, #0
 800861a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float TL = 0.0;
 800861c:	f04f 0300 	mov.w	r3, #0
 8008620:	62bb      	str	r3, [r7, #40]	@ 0x28
	float Ir = 0.0;
 8008622:	f04f 0300 	mov.w	r3, #0
 8008626:	637b      	str	r3, [r7, #52]	@ 0x34
	float Il = 0.0;
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	633b      	str	r3, [r7, #48]	@ 0x30

	ENC_GetDiv( &l_CntR, &l_CntL );					// 移動量[カウント値]を取得
 800862e:	49b6      	ldr	r1, [pc, #728]	@ (8008908 <CTRL_pol+0x330>)
 8008630:	48b6      	ldr	r0, [pc, #728]	@ (800890c <CTRL_pol+0x334>)
 8008632:	f001 f888 	bl	8009746 <ENC_GetDiv>
	//add get_motor_omega(l_CntR,l_CntL);
	CTRL_refNow();									// 制御に使用する値を現在の状態に更新
 8008636:	f7fe f88d 	bl	8006754 <CTRL_refNow>
	CTRL_refTarget();								// 制御に使用する値を目標値に更新
 800863a:	f7fe f925 	bl	8006888 <CTRL_refTarget>

	/* 制御を行うかのチェック */
	if( uc_CtrlFlag != TRUE ){
 800863e:	4bb4      	ldr	r3, [pc, #720]	@ (8008910 <CTRL_pol+0x338>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b01      	cmp	r3, #1
 8008644:	f040 87af 	bne.w	80095a6 <CTRL_pol+0xfce>
		 return;		// 制御無効状態
	}
	if(SW_ON == SW_IsOn_0()){
 8008648:	f7f9 fcba 	bl	8001fc0 <SW_IsOn_0>
 800864c:	4603      	mov	r3, r0
 800864e:	2b01      	cmp	r3, #1
 8008650:	d101      	bne.n	8008656 <CTRL_pol+0x7e>
		Failsafe_flag();
 8008652:	f000 ffb5 	bl	80095c0 <Failsafe_flag>
	}

	/* 制御不能 */
	if (SYS_isOutOfCtrl() == TRUE ){
 8008656:	f000 ffcb 	bl	80095f0 <SYS_isOutOfCtrl>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d019      	beq.n	8008694 <CTRL_pol+0xbc>

		f_DistErrSum = 0;				// 累積偏差クリア
 8008660:	4bac      	ldr	r3, [pc, #688]	@ (8008914 <CTRL_pol+0x33c>)
 8008662:	f04f 0200 	mov.w	r2, #0
 8008666:	601a      	str	r2, [r3, #0]
		f_NowDist = f_LastDist;			// 強制的に最終目標位置に変更
 8008668:	4bab      	ldr	r3, [pc, #684]	@ (8008918 <CTRL_pol+0x340>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4aab      	ldr	r2, [pc, #684]	@ (800891c <CTRL_pol+0x344>)
 800866e:	6013      	str	r3, [r2, #0]
		f_NowAngle = f_LastAngle;		// 強制的に最終目標時間に変更
 8008670:	4bab      	ldr	r3, [pc, #684]	@ (8008920 <CTRL_pol+0x348>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4aab      	ldr	r2, [pc, #684]	@ (8008924 <CTRL_pol+0x34c>)
 8008676:	6013      	str	r3, [r2, #0]
		f_Time = f_TrgtTime;			// 強制的に最終目標時間に変更
 8008678:	4bab      	ldr	r3, [pc, #684]	@ (8008928 <CTRL_pol+0x350>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4aab      	ldr	r2, [pc, #684]	@ (800892c <CTRL_pol+0x354>)
 800867e:	6013      	str	r3, [r2, #0]

	 	CTRL_stop();				// 制御停止
 8008680:	f7fd fed0 	bl	8006424 <CTRL_stop>
		CTRL_clrData();					// データクリア
 8008684:	f7fd fede 	bl	8006444 <CTRL_clrData>
		DCM_brakeMot( DCM_R );			// ブレーキ
 8008688:	2000      	movs	r0, #0
 800868a:	f000 ffe3 	bl	8009654 <DCM_brakeMot>
		DCM_brakeMot( DCM_L );			// ブレーキ
 800868e:	2001      	movs	r0, #1
 8008690:	f000 ffe0 	bl	8009654 <DCM_brakeMot>
/*	ENC_GetDiv( &l_CntR, &l_CntL );					// 移動量[カウント値]を取得
	//add get_motor_omega(l_CntR,l_CntL);
	CTRL_refNow();									// 制御に使用する値を現在の状態に更新
	CTRL_refTarget();								// 制御に使用する値を目標値に更新
*/
	f_NowAngle = GYRO_getNowAngle();					// 現在角度[deg]
 8008694:	f001 f9c4 	bl	8009a20 <GYRO_getNowAngle>
 8008698:	eef0 7a40 	vmov.f32	s15, s0
 800869c:	4ba1      	ldr	r3, [pc, #644]	@ (8008924 <CTRL_pol+0x34c>)
 800869e:	edc3 7a00 	vstr	s15, [r3]

	/* 制御値取得 */
	CTRL_getFF_speed( &f_feedFoard_speed );					// [制御] フィードフォワード
 80086a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7ff faac 	bl	8007c04 <CTRL_getFF_speed>
	CTRL_getFF_angle( &f_feedFoard_angle );					// [制御] フィードフォワード
 80086ac:	f107 0320 	add.w	r3, r7, #32
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7ff faf3 	bl	8007c9c <CTRL_getFF_angle>
	CTRL_getSpeedFB( &f_speedCtrl );				// [制御] 速度
 80086b6:	f107 031c 	add.w	r3, r7, #28
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7ff fb68 	bl	8007d90 <CTRL_getSpeedFB>
	CTRL_getAngleSpeedFB( &f_angleSpeedCtrl );		// [制御] 角速度
 80086c0:	f107 0318 	add.w	r3, r7, #24
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7ff fbe9 	bl	8007e9c <CTRL_getAngleSpeedFB>
	CTRL_getAngleFB( &f_angleCtrl );		//angle ctrl
 80086ca:	f107 0314 	add.w	r3, r7, #20
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7ff fc98 	bl	8008004 <CTRL_getAngleFB>
	CTRL_getSenFB( &f_distSenCtrl );				// [制御] 壁
 80086d4:	f107 0310 	add.w	r3, r7, #16
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff fd0d 	bl	80080f8 <CTRL_getSenFB>
	CTRL_getFloorFriction( &f_floorfriction );
 80086de:	1d3b      	adds	r3, r7, #4
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff fe8d 	bl	8008400 <CTRL_getFloorFriction>
	CTRL_get_frontwall_v_FB( &f_frontwall_v_Ctrl);
 80086e6:	f107 030c 	add.w	r3, r7, #12
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff fd90 	bl	8008210 <CTRL_get_frontwall_v_FB>
	CTRL_get_frontwall_omega_FB( &f_frontwall_omega_Ctrl);
 80086f0:	f107 0308 	add.w	r3, r7, #8
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff fe0f 	bl	8008318 <CTRL_get_frontwall_omega_FB>

	/* 直進制御 */
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC ) ||( en_Type == CTRL_ENTRY_SLA ) || ( en_Type == CTRL_EXIT_SLA ) ||
 80086fa:	4b8d      	ldr	r3, [pc, #564]	@ (8008930 <CTRL_pol+0x358>)
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d01c      	beq.n	800873c <CTRL_pol+0x164>
 8008702:	4b8b      	ldr	r3, [pc, #556]	@ (8008930 <CTRL_pol+0x358>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d018      	beq.n	800873c <CTRL_pol+0x164>
 800870a:	4b89      	ldr	r3, [pc, #548]	@ (8008930 <CTRL_pol+0x358>)
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	2b02      	cmp	r3, #2
 8008710:	d014      	beq.n	800873c <CTRL_pol+0x164>
 8008712:	4b87      	ldr	r3, [pc, #540]	@ (8008930 <CTRL_pol+0x358>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	2b0a      	cmp	r3, #10
 8008718:	d010      	beq.n	800873c <CTRL_pol+0x164>
 800871a:	4b85      	ldr	r3, [pc, #532]	@ (8008930 <CTRL_pol+0x358>)
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	2b0e      	cmp	r3, #14
 8008720:	d00c      	beq.n	800873c <CTRL_pol+0x164>
		( en_Type == CTRL_SKEW_ACC ) || ( en_Type == CTRL_SKEW_CONST ) || ( en_Type == CTRL_SKEW_DEC )
 8008722:	4b83      	ldr	r3, [pc, #524]	@ (8008930 <CTRL_pol+0x358>)
 8008724:	781b      	ldrb	r3, [r3, #0]
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC ) ||( en_Type == CTRL_ENTRY_SLA ) || ( en_Type == CTRL_EXIT_SLA ) ||
 8008726:	2b03      	cmp	r3, #3
 8008728:	d008      	beq.n	800873c <CTRL_pol+0x164>
		( en_Type == CTRL_SKEW_ACC ) || ( en_Type == CTRL_SKEW_CONST ) || ( en_Type == CTRL_SKEW_DEC )
 800872a:	4b81      	ldr	r3, [pc, #516]	@ (8008930 <CTRL_pol+0x358>)
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	2b04      	cmp	r3, #4
 8008730:	d004      	beq.n	800873c <CTRL_pol+0x164>
 8008732:	4b7f      	ldr	r3, [pc, #508]	@ (8008930 <CTRL_pol+0x358>)
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2b05      	cmp	r3, #5
 8008738:	f040 8102 	bne.w	8008940 <CTRL_pol+0x368>
	){
		TR = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.01)+(TIRE_D/2.0/TREAD)*(INERTIA*(f_feedFoard_angle + f_angleSpeedCtrl+ f_distSenCtrl)))/GEAR_RATIO;
 800873c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8008740:	edd7 7a07 	vldr	s15, [r7, #28]
 8008744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008748:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8008934 <CTRL_pol+0x35c>
 800874c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008750:	ee17 0a90 	vmov	r0, s15
 8008754:	f7f7 ff20 	bl	8000598 <__aeabi_f2d>
 8008758:	a361      	add	r3, pc, #388	@ (adr r3, 80088e0 <CTRL_pol+0x308>)
 800875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875e:	f7f7 fdbd 	bl	80002dc <__adddf3>
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	4610      	mov	r0, r2
 8008768:	4619      	mov	r1, r3
 800876a:	a35f      	add	r3, pc, #380	@ (adr r3, 80088e8 <CTRL_pol+0x310>)
 800876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008770:	f7f7 ff6a 	bl	8000648 <__aeabi_dmul>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4614      	mov	r4, r2
 800877a:	461d      	mov	r5, r3
 800877c:	ed97 7a08 	vldr	s14, [r7, #32]
 8008780:	edd7 7a06 	vldr	s15, [r7, #24]
 8008784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008788:	edd7 7a04 	vldr	s15, [r7, #16]
 800878c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008790:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8008938 <CTRL_pol+0x360>
 8008794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008798:	ee17 0a90 	vmov	r0, s15
 800879c:	f7f7 fefc 	bl	8000598 <__aeabi_f2d>
 80087a0:	a353      	add	r3, pc, #332	@ (adr r3, 80088f0 <CTRL_pol+0x318>)
 80087a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a6:	f7f7 ff4f 	bl	8000648 <__aeabi_dmul>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	4620      	mov	r0, r4
 80087b0:	4629      	mov	r1, r5
 80087b2:	f7f7 fd93 	bl	80002dc <__adddf3>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4610      	mov	r0, r2
 80087bc:	4619      	mov	r1, r3
 80087be:	f04f 0200 	mov.w	r2, #0
 80087c2:	4b5e      	ldr	r3, [pc, #376]	@ (800893c <CTRL_pol+0x364>)
 80087c4:	f7f8 f86a 	bl	800089c <__aeabi_ddiv>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4610      	mov	r0, r2
 80087ce:	4619      	mov	r1, r3
 80087d0:	f7f8 fa32 	bl	8000c38 <__aeabi_d2f>
 80087d4:	4603      	mov	r3, r0
 80087d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		TL = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.01)-(TIRE_D/2.0/TREAD)*(INERTIA*(f_feedFoard_angle + f_angleSpeedCtrl+ f_distSenCtrl)))/GEAR_RATIO;
 80087d8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80087dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80087e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087e4:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8008934 <CTRL_pol+0x35c>
 80087e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087ec:	ee17 0a90 	vmov	r0, s15
 80087f0:	f7f7 fed2 	bl	8000598 <__aeabi_f2d>
 80087f4:	a33a      	add	r3, pc, #232	@ (adr r3, 80088e0 <CTRL_pol+0x308>)
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f7f7 fd6f 	bl	80002dc <__adddf3>
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	4610      	mov	r0, r2
 8008804:	4619      	mov	r1, r3
 8008806:	a338      	add	r3, pc, #224	@ (adr r3, 80088e8 <CTRL_pol+0x310>)
 8008808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880c:	f7f7 ff1c 	bl	8000648 <__aeabi_dmul>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4614      	mov	r4, r2
 8008816:	461d      	mov	r5, r3
 8008818:	ed97 7a08 	vldr	s14, [r7, #32]
 800881c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008820:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008824:	edd7 7a04 	vldr	s15, [r7, #16]
 8008828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800882c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8008938 <CTRL_pol+0x360>
 8008830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008834:	ee17 0a90 	vmov	r0, s15
 8008838:	f7f7 feae 	bl	8000598 <__aeabi_f2d>
 800883c:	a32c      	add	r3, pc, #176	@ (adr r3, 80088f0 <CTRL_pol+0x318>)
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	f7f7 ff01 	bl	8000648 <__aeabi_dmul>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4620      	mov	r0, r4
 800884c:	4629      	mov	r1, r5
 800884e:	f7f7 fd43 	bl	80002d8 <__aeabi_dsub>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4610      	mov	r0, r2
 8008858:	4619      	mov	r1, r3
 800885a:	f04f 0200 	mov.w	r2, #0
 800885e:	4b37      	ldr	r3, [pc, #220]	@ (800893c <CTRL_pol+0x364>)
 8008860:	f7f8 f81c 	bl	800089c <__aeabi_ddiv>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	4610      	mov	r0, r2
 800886a:	4619      	mov	r1, r3
 800886c:	f7f8 f9e4 	bl	8000c38 <__aeabi_d2f>
 8008870:	4603      	mov	r3, r0
 8008872:	62bb      	str	r3, [r7, #40]	@ 0x28
		Ir = (TR+0.0255/1000.0)/TORQUE_CONSTANT;
 8008874:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008876:	f7f7 fe8f 	bl	8000598 <__aeabi_f2d>
 800887a:	a31f      	add	r3, pc, #124	@ (adr r3, 80088f8 <CTRL_pol+0x320>)
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	f7f7 fd2c 	bl	80002dc <__adddf3>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4610      	mov	r0, r2
 800888a:	4619      	mov	r1, r3
 800888c:	a31c      	add	r3, pc, #112	@ (adr r3, 8008900 <CTRL_pol+0x328>)
 800888e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008892:	f7f8 f803 	bl	800089c <__aeabi_ddiv>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	4610      	mov	r0, r2
 800889c:	4619      	mov	r1, r3
 800889e:	f7f8 f9cb 	bl	8000c38 <__aeabi_d2f>
 80088a2:	4603      	mov	r3, r0
 80088a4:	637b      	str	r3, [r7, #52]	@ 0x34
		Il = (TL+0.0255/1000.0)/TORQUE_CONSTANT;
 80088a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088a8:	f7f7 fe76 	bl	8000598 <__aeabi_f2d>
 80088ac:	a312      	add	r3, pc, #72	@ (adr r3, 80088f8 <CTRL_pol+0x320>)
 80088ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b2:	f7f7 fd13 	bl	80002dc <__adddf3>
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4610      	mov	r0, r2
 80088bc:	4619      	mov	r1, r3
 80088be:	a310      	add	r3, pc, #64	@ (adr r3, 8008900 <CTRL_pol+0x328>)
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	f7f7 ffea 	bl	800089c <__aeabi_ddiv>
 80088c8:	4602      	mov	r2, r0
 80088ca:	460b      	mov	r3, r1
 80088cc:	4610      	mov	r0, r2
 80088ce:	4619      	mov	r1, r3
 80088d0:	f7f8 f9b2 	bl	8000c38 <__aeabi_d2f>
 80088d4:	4603      	mov	r3, r0
 80088d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80088d8:	f000 bcfe 	b.w	80092d8 <CTRL_pol+0xd00>
 80088dc:	f3af 8000 	nop.w
 80088e0:	47ae147b 	.word	0x47ae147b
 80088e4:	3f847ae1 	.word	0x3f847ae1
 80088e8:	e0000000 	.word	0xe0000000
 80088ec:	3f69be4c 	.word	0x3f69be4c
 80088f0:	040dc02c 	.word	0x040dc02c
 80088f4:	3fc803ab 	.word	0x3fc803ab
 80088f8:	a821f299 	.word	0xa821f299
 80088fc:	3efabd1a 	.word	0x3efabd1a
 8008900:	40000000 	.word	0x40000000
 8008904:	3f4376d5 	.word	0x3f4376d5
 8008908:	20000350 	.word	0x20000350
 800890c:	2000034c 	.word	0x2000034c
 8008910:	20000348 	.word	0x20000348
 8008914:	200003a0 	.word	0x200003a0
 8008918:	2000038c 	.word	0x2000038c
 800891c:	20000394 	.word	0x20000394
 8008920:	200003cc 	.word	0x200003cc
 8008924:	200003d0 	.word	0x200003d0
 8008928:	20000008 	.word	0x20000008
 800892c:	20000354 	.word	0x20000354
 8008930:	200003fa 	.word	0x200003fa
 8008934:	3c9374bc 	.word	0x3c9374bc
 8008938:	3840f01f 	.word	0x3840f01f
 800893c:	40128000 	.word	0x40128000
	}

	/* 壁あて制御 */
	else if( en_Type == CTRL_HIT_WALL ){
 8008940:	4b91      	ldr	r3, [pc, #580]	@ (8008b88 <CTRL_pol+0x5b0>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b06      	cmp	r3, #6
 8008946:	d137      	bne.n	80089b8 <CTRL_pol+0x3e0>
		TR = (TIRE_D/2.0/2.0)*(WEIGHT*(-1.0)*(700.0 * FF_HIT_BALANCE_R/1000.0 ));		
 8008948:	4b90      	ldr	r3, [pc, #576]	@ (8008b8c <CTRL_pol+0x5b4>)
 800894a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		TL = (TIRE_D/2.0/2.0)*(WEIGHT*(-1.0)*(700.0 * FF_HIT_BALANCE_R/1000.0 ));
 800894c:	4b8f      	ldr	r3, [pc, #572]	@ (8008b8c <CTRL_pol+0x5b4>)
 800894e:	62bb      	str	r3, [r7, #40]	@ 0x28
		Ir = (TR-0.0255/1000.0)/TORQUE_CONSTANT;
 8008950:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008952:	f7f7 fe21 	bl	8000598 <__aeabi_f2d>
 8008956:	a380      	add	r3, pc, #512	@ (adr r3, 8008b58 <CTRL_pol+0x580>)
 8008958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895c:	f7f7 fcbc 	bl	80002d8 <__aeabi_dsub>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	4610      	mov	r0, r2
 8008966:	4619      	mov	r1, r3
 8008968:	a37d      	add	r3, pc, #500	@ (adr r3, 8008b60 <CTRL_pol+0x588>)
 800896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896e:	f7f7 ff95 	bl	800089c <__aeabi_ddiv>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	4610      	mov	r0, r2
 8008978:	4619      	mov	r1, r3
 800897a:	f7f8 f95d 	bl	8000c38 <__aeabi_d2f>
 800897e:	4603      	mov	r3, r0
 8008980:	637b      	str	r3, [r7, #52]	@ 0x34
		Il = (TL-0.0255/1000.0)/TORQUE_CONSTANT;
 8008982:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008984:	f7f7 fe08 	bl	8000598 <__aeabi_f2d>
 8008988:	a373      	add	r3, pc, #460	@ (adr r3, 8008b58 <CTRL_pol+0x580>)
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	f7f7 fca3 	bl	80002d8 <__aeabi_dsub>
 8008992:	4602      	mov	r2, r0
 8008994:	460b      	mov	r3, r1
 8008996:	4610      	mov	r0, r2
 8008998:	4619      	mov	r1, r3
 800899a:	a371      	add	r3, pc, #452	@ (adr r3, 8008b60 <CTRL_pol+0x588>)
 800899c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a0:	f7f7 ff7c 	bl	800089c <__aeabi_ddiv>
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	4610      	mov	r0, r2
 80089aa:	4619      	mov	r1, r3
 80089ac:	f7f8 f944 	bl	8000c38 <__aeabi_d2f>
 80089b0:	4603      	mov	r3, r0
 80089b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80089b4:	f000 bc90 	b.w	80092d8 <CTRL_pol+0xd00>
	}

	/* スラローム制御 */
	else if( ( en_Type == CTRL_ACC_SLA ) || (en_Type == CTRL_CONST_SLA)||( en_Type == CTRL_DEC_SLA ) ){
 80089b8:	4b73      	ldr	r3, [pc, #460]	@ (8008b88 <CTRL_pol+0x5b0>)
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	2b0b      	cmp	r3, #11
 80089be:	d008      	beq.n	80089d2 <CTRL_pol+0x3fa>
 80089c0:	4b71      	ldr	r3, [pc, #452]	@ (8008b88 <CTRL_pol+0x5b0>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	2b0c      	cmp	r3, #12
 80089c6:	d004      	beq.n	80089d2 <CTRL_pol+0x3fa>
 80089c8:	4b6f      	ldr	r3, [pc, #444]	@ (8008b88 <CTRL_pol+0x5b0>)
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2b0d      	cmp	r3, #13
 80089ce:	f040 81c6 	bne.w	8008d5e <CTRL_pol+0x786>
		/* 左旋回 */
		if( f_LastAngle > 0 ){
 80089d2:	4b6f      	ldr	r3, [pc, #444]	@ (8008b90 <CTRL_pol+0x5b8>)
 80089d4:	edd3 7a00 	vldr	s15, [r3]
 80089d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80089dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e0:	f340 80de 	ble.w	8008ba0 <CTRL_pol+0x5c8>
			TR = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.01)+(TIRE_D/2.0/TREAD)*(4.6/1000000.0*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)/*+f_floorfriction*/))/GEAR_RATIO;
 80089e4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80089e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80089ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089f0:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8008b9c <CTRL_pol+0x5c4>
 80089f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089f8:	ee17 0a90 	vmov	r0, s15
 80089fc:	f7f7 fdcc 	bl	8000598 <__aeabi_f2d>
 8008a00:	a359      	add	r3, pc, #356	@ (adr r3, 8008b68 <CTRL_pol+0x590>)
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	f7f7 fc69 	bl	80002dc <__adddf3>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4610      	mov	r0, r2
 8008a10:	4619      	mov	r1, r3
 8008a12:	a357      	add	r3, pc, #348	@ (adr r3, 8008b70 <CTRL_pol+0x598>)
 8008a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a18:	f7f7 fe16 	bl	8000648 <__aeabi_dmul>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4614      	mov	r4, r2
 8008a22:	461d      	mov	r5, r3
 8008a24:	ed97 7a08 	vldr	s14, [r7, #32]
 8008a28:	edd7 7a06 	vldr	s15, [r7, #24]
 8008a2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a30:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a38:	ee17 0a90 	vmov	r0, s15
 8008a3c:	f7f7 fdac 	bl	8000598 <__aeabi_f2d>
 8008a40:	a34d      	add	r3, pc, #308	@ (adr r3, 8008b78 <CTRL_pol+0x5a0>)
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	f7f7 fdff 	bl	8000648 <__aeabi_dmul>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	4610      	mov	r0, r2
 8008a50:	4619      	mov	r1, r3
 8008a52:	a34b      	add	r3, pc, #300	@ (adr r3, 8008b80 <CTRL_pol+0x5a8>)
 8008a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a58:	f7f7 fdf6 	bl	8000648 <__aeabi_dmul>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4620      	mov	r0, r4
 8008a62:	4629      	mov	r1, r5
 8008a64:	f7f7 fc3a 	bl	80002dc <__adddf3>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	4619      	mov	r1, r3
 8008a70:	f04f 0200 	mov.w	r2, #0
 8008a74:	4b47      	ldr	r3, [pc, #284]	@ (8008b94 <CTRL_pol+0x5bc>)
 8008a76:	f7f7 ff11 	bl	800089c <__aeabi_ddiv>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	4610      	mov	r0, r2
 8008a80:	4619      	mov	r1, r3
 8008a82:	f7f8 f8d9 	bl	8000c38 <__aeabi_d2f>
 8008a86:	4603      	mov	r3, r0
 8008a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
			TL = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.01)-(TIRE_D/2.0/TREAD)*(4.6/1000000.0*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)/*+f_floorfriction*/))/GEAR_RATIO;
 8008a8a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8008a8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8008a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a96:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8008b9c <CTRL_pol+0x5c4>
 8008a9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a9e:	ee17 0a90 	vmov	r0, s15
 8008aa2:	f7f7 fd79 	bl	8000598 <__aeabi_f2d>
 8008aa6:	a330      	add	r3, pc, #192	@ (adr r3, 8008b68 <CTRL_pol+0x590>)
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	f7f7 fc16 	bl	80002dc <__adddf3>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	a32d      	add	r3, pc, #180	@ (adr r3, 8008b70 <CTRL_pol+0x598>)
 8008aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abe:	f7f7 fdc3 	bl	8000648 <__aeabi_dmul>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4614      	mov	r4, r2
 8008ac8:	461d      	mov	r5, r3
 8008aca:	ed97 7a08 	vldr	s14, [r7, #32]
 8008ace:	edd7 7a06 	vldr	s15, [r7, #24]
 8008ad2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ad6:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ade:	ee17 0a90 	vmov	r0, s15
 8008ae2:	f7f7 fd59 	bl	8000598 <__aeabi_f2d>
 8008ae6:	a324      	add	r3, pc, #144	@ (adr r3, 8008b78 <CTRL_pol+0x5a0>)
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	f7f7 fdac 	bl	8000648 <__aeabi_dmul>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	4610      	mov	r0, r2
 8008af6:	4619      	mov	r1, r3
 8008af8:	a321      	add	r3, pc, #132	@ (adr r3, 8008b80 <CTRL_pol+0x5a8>)
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	f7f7 fda3 	bl	8000648 <__aeabi_dmul>
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	4620      	mov	r0, r4
 8008b08:	4629      	mov	r1, r5
 8008b0a:	f7f7 fbe5 	bl	80002d8 <__aeabi_dsub>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4610      	mov	r0, r2
 8008b14:	4619      	mov	r1, r3
 8008b16:	f04f 0200 	mov.w	r2, #0
 8008b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8008b94 <CTRL_pol+0x5bc>)
 8008b1c:	f7f7 febe 	bl	800089c <__aeabi_ddiv>
 8008b20:	4602      	mov	r2, r0
 8008b22:	460b      	mov	r3, r1
 8008b24:	4610      	mov	r0, r2
 8008b26:	4619      	mov	r1, r3
 8008b28:	f7f8 f886 	bl	8000c38 <__aeabi_d2f>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
			Ir = (TR/*+0.0255/1000.0*/)/TORQUE_CONSTANT;
 8008b30:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8008b34:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8008b98 <CTRL_pol+0x5c0>
 8008b38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008b3c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
			Il = (TL/*+0.0255/1000.0*/)/TORQUE_CONSTANT;
 8008b40:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8008b44:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8008b98 <CTRL_pol+0x5c0>
 8008b48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008b4c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		if( f_LastAngle > 0 ){
 8008b50:	e3c2      	b.n	80092d8 <CTRL_pol+0xd00>
 8008b52:	bf00      	nop
 8008b54:	f3af 8000 	nop.w
 8008b58:	a821f299 	.word	0xa821f299
 8008b5c:	3efabd1a 	.word	0x3efabd1a
 8008b60:	40000000 	.word	0x40000000
 8008b64:	3f4376d5 	.word	0x3f4376d5
 8008b68:	47ae147b 	.word	0x47ae147b
 8008b6c:	3f847ae1 	.word	0x3f847ae1
 8008b70:	e0000000 	.word	0xe0000000
 8008b74:	3f69be4c 	.word	0x3f69be4c
 8008b78:	5f379dfc 	.word	0x5f379dfc
 8008b7c:	3ed34b36 	.word	0x3ed34b36
 8008b80:	040dc02c 	.word	0x040dc02c
 8008b84:	3fc803ab 	.word	0x3fc803ab
 8008b88:	200003fa 	.word	0x200003fa
 8008b8c:	b8261358 	.word	0xb8261358
 8008b90:	200003cc 	.word	0x200003cc
 8008b94:	40128000 	.word	0x40128000
 8008b98:	3a1bb6aa 	.word	0x3a1bb6aa
 8008b9c:	3c9374bc 	.word	0x3c9374bc
		}
		/*右旋回 */
		else{			
			TR = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.01)+(TIRE_D/2.0/TREAD)*(4.6/1000000.0*(f_feedFoard_angle*(-1.0) + f_angleSpeedCtrl+f_angleCtrl)/*+f_floorfriction*/))/GEAR_RATIO;
 8008ba0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8008ba4:	edd7 7a07 	vldr	s15, [r7, #28]
 8008ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bac:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8008b9c <CTRL_pol+0x5c4>
 8008bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bb4:	ee17 0a90 	vmov	r0, s15
 8008bb8:	f7f7 fcee 	bl	8000598 <__aeabi_f2d>
 8008bbc:	a3ac      	add	r3, pc, #688	@ (adr r3, 8008e70 <CTRL_pol+0x898>)
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	f7f7 fb8b 	bl	80002dc <__adddf3>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4610      	mov	r0, r2
 8008bcc:	4619      	mov	r1, r3
 8008bce:	a3aa      	add	r3, pc, #680	@ (adr r3, 8008e78 <CTRL_pol+0x8a0>)
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	f7f7 fd38 	bl	8000648 <__aeabi_dmul>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	460b      	mov	r3, r1
 8008bdc:	4690      	mov	r8, r2
 8008bde:	4699      	mov	r9, r3
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7f7 fcd8 	bl	8000598 <__aeabi_f2d>
 8008be8:	4604      	mov	r4, r0
 8008bea:	460d      	mov	r5, r1
 8008bec:	6a3b      	ldr	r3, [r7, #32]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7f7 fcd2 	bl	8000598 <__aeabi_f2d>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	f7f7 fb6c 	bl	80002d8 <__aeabi_dsub>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	4614      	mov	r4, r2
 8008c06:	461d      	mov	r5, r3
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7f7 fcc4 	bl	8000598 <__aeabi_f2d>
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	4620      	mov	r0, r4
 8008c16:	4629      	mov	r1, r5
 8008c18:	f7f7 fb60 	bl	80002dc <__adddf3>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4610      	mov	r0, r2
 8008c22:	4619      	mov	r1, r3
 8008c24:	a396      	add	r3, pc, #600	@ (adr r3, 8008e80 <CTRL_pol+0x8a8>)
 8008c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2a:	f7f7 fd0d 	bl	8000648 <__aeabi_dmul>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4610      	mov	r0, r2
 8008c34:	4619      	mov	r1, r3
 8008c36:	a394      	add	r3, pc, #592	@ (adr r3, 8008e88 <CTRL_pol+0x8b0>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f7f7 fd04 	bl	8000648 <__aeabi_dmul>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	4640      	mov	r0, r8
 8008c46:	4649      	mov	r1, r9
 8008c48:	f7f7 fb48 	bl	80002dc <__adddf3>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4610      	mov	r0, r2
 8008c52:	4619      	mov	r1, r3
 8008c54:	f04f 0200 	mov.w	r2, #0
 8008c58:	4b8d      	ldr	r3, [pc, #564]	@ (8008e90 <CTRL_pol+0x8b8>)
 8008c5a:	f7f7 fe1f 	bl	800089c <__aeabi_ddiv>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4610      	mov	r0, r2
 8008c64:	4619      	mov	r1, r3
 8008c66:	f7f7 ffe7 	bl	8000c38 <__aeabi_d2f>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			TL = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.01)-(TIRE_D/2.0/TREAD)*(4.6/1000000.0*(f_feedFoard_angle*(-1.0) + f_angleSpeedCtrl+f_angleCtrl)/*+f_floorfriction*/))/GEAR_RATIO;
 8008c6e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8008c72:	edd7 7a07 	vldr	s15, [r7, #28]
 8008c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c7a:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8008e94 <CTRL_pol+0x8bc>
 8008c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c82:	ee17 0a90 	vmov	r0, s15
 8008c86:	f7f7 fc87 	bl	8000598 <__aeabi_f2d>
 8008c8a:	a379      	add	r3, pc, #484	@ (adr r3, 8008e70 <CTRL_pol+0x898>)
 8008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c90:	f7f7 fb24 	bl	80002dc <__adddf3>
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4610      	mov	r0, r2
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	a376      	add	r3, pc, #472	@ (adr r3, 8008e78 <CTRL_pol+0x8a0>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 fcd1 	bl	8000648 <__aeabi_dmul>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4690      	mov	r8, r2
 8008cac:	4699      	mov	r9, r3
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7f7 fc71 	bl	8000598 <__aeabi_f2d>
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	460d      	mov	r5, r1
 8008cba:	6a3b      	ldr	r3, [r7, #32]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7f7 fc6b 	bl	8000598 <__aeabi_f2d>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	4629      	mov	r1, r5
 8008cca:	f7f7 fb05 	bl	80002d8 <__aeabi_dsub>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4614      	mov	r4, r2
 8008cd4:	461d      	mov	r5, r3
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7f7 fc5d 	bl	8000598 <__aeabi_f2d>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	f7f7 faf9 	bl	80002dc <__adddf3>
 8008cea:	4602      	mov	r2, r0
 8008cec:	460b      	mov	r3, r1
 8008cee:	4610      	mov	r0, r2
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	a363      	add	r3, pc, #396	@ (adr r3, 8008e80 <CTRL_pol+0x8a8>)
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	f7f7 fca6 	bl	8000648 <__aeabi_dmul>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4610      	mov	r0, r2
 8008d02:	4619      	mov	r1, r3
 8008d04:	a360      	add	r3, pc, #384	@ (adr r3, 8008e88 <CTRL_pol+0x8b0>)
 8008d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0a:	f7f7 fc9d 	bl	8000648 <__aeabi_dmul>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4640      	mov	r0, r8
 8008d14:	4649      	mov	r1, r9
 8008d16:	f7f7 fadf 	bl	80002d8 <__aeabi_dsub>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4610      	mov	r0, r2
 8008d20:	4619      	mov	r1, r3
 8008d22:	f04f 0200 	mov.w	r2, #0
 8008d26:	4b5a      	ldr	r3, [pc, #360]	@ (8008e90 <CTRL_pol+0x8b8>)
 8008d28:	f7f7 fdb8 	bl	800089c <__aeabi_ddiv>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	4610      	mov	r0, r2
 8008d32:	4619      	mov	r1, r3
 8008d34:	f7f7 ff80 	bl	8000c38 <__aeabi_d2f>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
			Ir = (TR/*+0.0255/1000.0*/)/TORQUE_CONSTANT;
 8008d3c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8008d40:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8008e98 <CTRL_pol+0x8c0>
 8008d44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d48:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
			Il = (TL/*+0.0255/1000.0*/)/TORQUE_CONSTANT;
 8008d4c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8008d50:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8008e98 <CTRL_pol+0x8c0>
 8008d54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d58:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		if( f_LastAngle > 0 ){
 8008d5c:	e2bc      	b.n	80092d8 <CTRL_pol+0xd00>
		}
	}

	else if( en_Type == CTRL_FRONT_WALL){
 8008d5e:	4b4f      	ldr	r3, [pc, #316]	@ (8008e9c <CTRL_pol+0x8c4>)
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	2b0f      	cmp	r3, #15
 8008d64:	f040 809e 	bne.w	8008ea4 <CTRL_pol+0x8cc>
		TR = ((TIRE_D/2.0/2.0)*(WEIGHT*f_frontwall_v_Ctrl)+(TIRE_D/2.0/TREAD)*(INERTIA*f_frontwall_omega_Ctrl))/GEAR_RATIO;
 8008d68:	edd7 7a03 	vldr	s15, [r7, #12]
 8008d6c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8008e94 <CTRL_pol+0x8bc>
 8008d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d74:	ee17 0a90 	vmov	r0, s15
 8008d78:	f7f7 fc0e 	bl	8000598 <__aeabi_f2d>
 8008d7c:	a33e      	add	r3, pc, #248	@ (adr r3, 8008e78 <CTRL_pol+0x8a0>)
 8008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d82:	f7f7 fc61 	bl	8000648 <__aeabi_dmul>
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	4614      	mov	r4, r2
 8008d8c:	461d      	mov	r5, r3
 8008d8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8008d92:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8008ea0 <CTRL_pol+0x8c8>
 8008d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d9a:	ee17 0a90 	vmov	r0, s15
 8008d9e:	f7f7 fbfb 	bl	8000598 <__aeabi_f2d>
 8008da2:	a339      	add	r3, pc, #228	@ (adr r3, 8008e88 <CTRL_pol+0x8b0>)
 8008da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da8:	f7f7 fc4e 	bl	8000648 <__aeabi_dmul>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4620      	mov	r0, r4
 8008db2:	4629      	mov	r1, r5
 8008db4:	f7f7 fa92 	bl	80002dc <__adddf3>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	f04f 0200 	mov.w	r2, #0
 8008dc4:	4b32      	ldr	r3, [pc, #200]	@ (8008e90 <CTRL_pol+0x8b8>)
 8008dc6:	f7f7 fd69 	bl	800089c <__aeabi_ddiv>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	4610      	mov	r0, r2
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	f7f7 ff31 	bl	8000c38 <__aeabi_d2f>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		TL = ((TIRE_D/2.0/2.0)*(WEIGHT*f_frontwall_v_Ctrl)-(TIRE_D/2.0/TREAD)*(INERTIA*f_frontwall_omega_Ctrl))/GEAR_RATIO;
 8008dda:	edd7 7a03 	vldr	s15, [r7, #12]
 8008dde:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8008e94 <CTRL_pol+0x8bc>
 8008de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008de6:	ee17 0a90 	vmov	r0, s15
 8008dea:	f7f7 fbd5 	bl	8000598 <__aeabi_f2d>
 8008dee:	a322      	add	r3, pc, #136	@ (adr r3, 8008e78 <CTRL_pol+0x8a0>)
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	f7f7 fc28 	bl	8000648 <__aeabi_dmul>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	4614      	mov	r4, r2
 8008dfe:	461d      	mov	r5, r3
 8008e00:	edd7 7a02 	vldr	s15, [r7, #8]
 8008e04:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008ea0 <CTRL_pol+0x8c8>
 8008e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e0c:	ee17 0a90 	vmov	r0, s15
 8008e10:	f7f7 fbc2 	bl	8000598 <__aeabi_f2d>
 8008e14:	a31c      	add	r3, pc, #112	@ (adr r3, 8008e88 <CTRL_pol+0x8b0>)
 8008e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1a:	f7f7 fc15 	bl	8000648 <__aeabi_dmul>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	4620      	mov	r0, r4
 8008e24:	4629      	mov	r1, r5
 8008e26:	f7f7 fa57 	bl	80002d8 <__aeabi_dsub>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4610      	mov	r0, r2
 8008e30:	4619      	mov	r1, r3
 8008e32:	f04f 0200 	mov.w	r2, #0
 8008e36:	4b16      	ldr	r3, [pc, #88]	@ (8008e90 <CTRL_pol+0x8b8>)
 8008e38:	f7f7 fd30 	bl	800089c <__aeabi_ddiv>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4610      	mov	r0, r2
 8008e42:	4619      	mov	r1, r3
 8008e44:	f7f7 fef8 	bl	8000c38 <__aeabi_d2f>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
		Ir = (TR)/TORQUE_CONSTANT;
 8008e4c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8008e50:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8008e98 <CTRL_pol+0x8c0>
 8008e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e58:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Il = (TL)/TORQUE_CONSTANT;
 8008e5c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8008e60:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8008e98 <CTRL_pol+0x8c0>
 8008e64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e68:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8008e6c:	e234      	b.n	80092d8 <CTRL_pol+0xd00>
 8008e6e:	bf00      	nop
 8008e70:	47ae147b 	.word	0x47ae147b
 8008e74:	3f847ae1 	.word	0x3f847ae1
 8008e78:	e0000000 	.word	0xe0000000
 8008e7c:	3f69be4c 	.word	0x3f69be4c
 8008e80:	5f379dfc 	.word	0x5f379dfc
 8008e84:	3ed34b36 	.word	0x3ed34b36
 8008e88:	040dc02c 	.word	0x040dc02c
 8008e8c:	3fc803ab 	.word	0x3fc803ab
 8008e90:	40128000 	.word	0x40128000
 8008e94:	3c9374bc 	.word	0x3c9374bc
 8008e98:	3a1bb6aa 	.word	0x3a1bb6aa
 8008e9c:	200003fa 	.word	0x200003fa
 8008ea0:	3840f01f 	.word	0x3840f01f
	}

	/* 超信地旋回 */
	else{
		/* 左旋回 */
		if( f_LastAngle > 0 ){			
 8008ea4:	4b7a      	ldr	r3, [pc, #488]	@ (8009090 <CTRL_pol+0xab8>)
 8008ea6:	edd3 7a00 	vldr	s15, [r3]
 8008eaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb2:	f340 80f5 	ble.w	80090a0 <CTRL_pol+0xac8>
			TR = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.01)+(TIRE_D/2.0/TREAD_IMAGIN)*(INERTIA*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8008eb6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8008eba:	edd7 7a07 	vldr	s15, [r7, #28]
 8008ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ec2:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 800909c <CTRL_pol+0xac4>
 8008ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008eca:	ee17 0a90 	vmov	r0, s15
 8008ece:	f7f7 fb63 	bl	8000598 <__aeabi_f2d>
 8008ed2:	a365      	add	r3, pc, #404	@ (adr r3, 8009068 <CTRL_pol+0xa90>)
 8008ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed8:	f7f7 fa00 	bl	80002dc <__adddf3>
 8008edc:	4602      	mov	r2, r0
 8008ede:	460b      	mov	r3, r1
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	a362      	add	r3, pc, #392	@ (adr r3, 8009070 <CTRL_pol+0xa98>)
 8008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eea:	f7f7 fbad 	bl	8000648 <__aeabi_dmul>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4614      	mov	r4, r2
 8008ef4:	461d      	mov	r5, r3
 8008ef6:	ed97 7a08 	vldr	s14, [r7, #32]
 8008efa:	edd7 7a06 	vldr	s15, [r7, #24]
 8008efe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008f02:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f0a:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8009094 <CTRL_pol+0xabc>
 8008f0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008f12:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f1a:	ee17 0a90 	vmov	r0, s15
 8008f1e:	f7f7 fb3b 	bl	8000598 <__aeabi_f2d>
 8008f22:	a355      	add	r3, pc, #340	@ (adr r3, 8009078 <CTRL_pol+0xaa0>)
 8008f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f28:	f7f7 fb8e 	bl	8000648 <__aeabi_dmul>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4620      	mov	r0, r4
 8008f32:	4629      	mov	r1, r5
 8008f34:	f7f7 f9d2 	bl	80002dc <__adddf3>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4619      	mov	r1, r3
 8008f40:	f04f 0200 	mov.w	r2, #0
 8008f44:	4b54      	ldr	r3, [pc, #336]	@ (8009098 <CTRL_pol+0xac0>)
 8008f46:	f7f7 fca9 	bl	800089c <__aeabi_ddiv>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4610      	mov	r0, r2
 8008f50:	4619      	mov	r1, r3
 8008f52:	f7f7 fe71 	bl	8000c38 <__aeabi_d2f>
 8008f56:	4603      	mov	r3, r0
 8008f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
			TL = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.01)-(TIRE_D/2.0/TREAD_IMAGIN)*(INERTIA*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8008f5a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8008f5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8008f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f66:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800909c <CTRL_pol+0xac4>
 8008f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f6e:	ee17 0a90 	vmov	r0, s15
 8008f72:	f7f7 fb11 	bl	8000598 <__aeabi_f2d>
 8008f76:	a33c      	add	r3, pc, #240	@ (adr r3, 8009068 <CTRL_pol+0xa90>)
 8008f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7c:	f7f7 f9ae 	bl	80002dc <__adddf3>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4610      	mov	r0, r2
 8008f86:	4619      	mov	r1, r3
 8008f88:	a339      	add	r3, pc, #228	@ (adr r3, 8009070 <CTRL_pol+0xa98>)
 8008f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8e:	f7f7 fb5b 	bl	8000648 <__aeabi_dmul>
 8008f92:	4602      	mov	r2, r0
 8008f94:	460b      	mov	r3, r1
 8008f96:	4614      	mov	r4, r2
 8008f98:	461d      	mov	r5, r3
 8008f9a:	ed97 7a08 	vldr	s14, [r7, #32]
 8008f9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8008fa2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008fa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8008faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fae:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8009094 <CTRL_pol+0xabc>
 8008fb2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008fb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8008fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fbe:	ee17 0a90 	vmov	r0, s15
 8008fc2:	f7f7 fae9 	bl	8000598 <__aeabi_f2d>
 8008fc6:	a32c      	add	r3, pc, #176	@ (adr r3, 8009078 <CTRL_pol+0xaa0>)
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	f7f7 fb3c 	bl	8000648 <__aeabi_dmul>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	f7f7 f97e 	bl	80002d8 <__aeabi_dsub>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	f04f 0200 	mov.w	r2, #0
 8008fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8009098 <CTRL_pol+0xac0>)
 8008fea:	f7f7 fc57 	bl	800089c <__aeabi_ddiv>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	f7f7 fe1f 	bl	8000c38 <__aeabi_d2f>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
			Ir = (TR+0.0255/1000.0)/TORQUE_CONSTANT;
 8008ffe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009000:	f7f7 faca 	bl	8000598 <__aeabi_f2d>
 8009004:	a31e      	add	r3, pc, #120	@ (adr r3, 8009080 <CTRL_pol+0xaa8>)
 8009006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900a:	f7f7 f967 	bl	80002dc <__adddf3>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	4610      	mov	r0, r2
 8009014:	4619      	mov	r1, r3
 8009016:	a31c      	add	r3, pc, #112	@ (adr r3, 8009088 <CTRL_pol+0xab0>)
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f7f7 fc3e 	bl	800089c <__aeabi_ddiv>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	4610      	mov	r0, r2
 8009026:	4619      	mov	r1, r3
 8009028:	f7f7 fe06 	bl	8000c38 <__aeabi_d2f>
 800902c:	4603      	mov	r3, r0
 800902e:	637b      	str	r3, [r7, #52]	@ 0x34
			Il = (TL-0.0255/1000.0)/TORQUE_CONSTANT;
 8009030:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009032:	f7f7 fab1 	bl	8000598 <__aeabi_f2d>
 8009036:	a312      	add	r3, pc, #72	@ (adr r3, 8009080 <CTRL_pol+0xaa8>)
 8009038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903c:	f7f7 f94c 	bl	80002d8 <__aeabi_dsub>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4610      	mov	r0, r2
 8009046:	4619      	mov	r1, r3
 8009048:	a30f      	add	r3, pc, #60	@ (adr r3, 8009088 <CTRL_pol+0xab0>)
 800904a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904e:	f7f7 fc25 	bl	800089c <__aeabi_ddiv>
 8009052:	4602      	mov	r2, r0
 8009054:	460b      	mov	r3, r1
 8009056:	4610      	mov	r0, r2
 8009058:	4619      	mov	r1, r3
 800905a:	f7f7 fded 	bl	8000c38 <__aeabi_d2f>
 800905e:	4603      	mov	r3, r0
 8009060:	633b      	str	r3, [r7, #48]	@ 0x30
 8009062:	e139      	b.n	80092d8 <CTRL_pol+0xd00>
 8009064:	f3af 8000 	nop.w
 8009068:	47ae147b 	.word	0x47ae147b
 800906c:	3f847ae1 	.word	0x3f847ae1
 8009070:	e0000000 	.word	0xe0000000
 8009074:	3f69be4c 	.word	0x3f69be4c
 8009078:	4b0d94f3 	.word	0x4b0d94f3
 800907c:	3fc4d769 	.word	0x3fc4d769
 8009080:	a821f299 	.word	0xa821f299
 8009084:	3efabd1a 	.word	0x3efabd1a
 8009088:	40000000 	.word	0x40000000
 800908c:	3f4376d5 	.word	0x3f4376d5
 8009090:	200003cc 	.word	0x200003cc
 8009094:	3840f01f 	.word	0x3840f01f
 8009098:	40128000 	.word	0x40128000
 800909c:	3c9374bc 	.word	0x3c9374bc
		}
		/* 右旋回 */
		else{			
			TR = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.01)+(TIRE_D/2.0/TREAD_IMAGIN)*(INERTIA*(f_feedFoard_angle*(-1.0) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 80090a0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80090a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80090a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090ac:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 800909c <CTRL_pol+0xac4>
 80090b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090b4:	ee17 0a90 	vmov	r0, s15
 80090b8:	f7f7 fa6e 	bl	8000598 <__aeabi_f2d>
 80090bc:	a3f2      	add	r3, pc, #968	@ (adr r3, 8009488 <CTRL_pol+0xeb0>)
 80090be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c2:	f7f7 f90b 	bl	80002dc <__adddf3>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4610      	mov	r0, r2
 80090cc:	4619      	mov	r1, r3
 80090ce:	a3f0      	add	r3, pc, #960	@ (adr r3, 8009490 <CTRL_pol+0xeb8>)
 80090d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d4:	f7f7 fab8 	bl	8000648 <__aeabi_dmul>
 80090d8:	4602      	mov	r2, r0
 80090da:	460b      	mov	r3, r1
 80090dc:	4690      	mov	r8, r2
 80090de:	4699      	mov	r9, r3
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7f7 fa58 	bl	8000598 <__aeabi_f2d>
 80090e8:	4604      	mov	r4, r0
 80090ea:	460d      	mov	r5, r1
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7f7 fa52 	bl	8000598 <__aeabi_f2d>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4620      	mov	r0, r4
 80090fa:	4629      	mov	r1, r5
 80090fc:	f7f7 f8ec 	bl	80002d8 <__aeabi_dsub>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	4614      	mov	r4, r2
 8009106:	461d      	mov	r5, r3
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	4618      	mov	r0, r3
 800910c:	f7f7 fa44 	bl	8000598 <__aeabi_f2d>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	4620      	mov	r0, r4
 8009116:	4629      	mov	r1, r5
 8009118:	f7f7 f8e0 	bl	80002dc <__adddf3>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	4610      	mov	r0, r2
 8009122:	4619      	mov	r1, r3
 8009124:	a3dc      	add	r3, pc, #880	@ (adr r3, 8009498 <CTRL_pol+0xec0>)
 8009126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912a:	f7f7 fa8d 	bl	8000648 <__aeabi_dmul>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4614      	mov	r4, r2
 8009134:	461d      	mov	r5, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4618      	mov	r0, r3
 800913a:	f7f7 fa2d 	bl	8000598 <__aeabi_f2d>
 800913e:	4602      	mov	r2, r0
 8009140:	460b      	mov	r3, r1
 8009142:	4620      	mov	r0, r4
 8009144:	4629      	mov	r1, r5
 8009146:	f7f7 f8c9 	bl	80002dc <__adddf3>
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	4610      	mov	r0, r2
 8009150:	4619      	mov	r1, r3
 8009152:	a3d3      	add	r3, pc, #844	@ (adr r3, 80094a0 <CTRL_pol+0xec8>)
 8009154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009158:	f7f7 fa76 	bl	8000648 <__aeabi_dmul>
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4640      	mov	r0, r8
 8009162:	4649      	mov	r1, r9
 8009164:	f7f7 f8ba 	bl	80002dc <__adddf3>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4610      	mov	r0, r2
 800916e:	4619      	mov	r1, r3
 8009170:	f04f 0200 	mov.w	r2, #0
 8009174:	4bd2      	ldr	r3, [pc, #840]	@ (80094c0 <CTRL_pol+0xee8>)
 8009176:	f7f7 fb91 	bl	800089c <__aeabi_ddiv>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4610      	mov	r0, r2
 8009180:	4619      	mov	r1, r3
 8009182:	f7f7 fd59 	bl	8000c38 <__aeabi_d2f>
 8009186:	4603      	mov	r3, r0
 8009188:	62fb      	str	r3, [r7, #44]	@ 0x2c
			TL = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.01)-(TIRE_D/2.0/TREAD_IMAGIN)*(INERTIA*(f_feedFoard_angle*(-1.0) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 800918a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800918e:	edd7 7a07 	vldr	s15, [r7, #28]
 8009192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009196:	ed9f 7acb 	vldr	s14, [pc, #812]	@ 80094c4 <CTRL_pol+0xeec>
 800919a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800919e:	ee17 0a90 	vmov	r0, s15
 80091a2:	f7f7 f9f9 	bl	8000598 <__aeabi_f2d>
 80091a6:	a3b8      	add	r3, pc, #736	@ (adr r3, 8009488 <CTRL_pol+0xeb0>)
 80091a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ac:	f7f7 f896 	bl	80002dc <__adddf3>
 80091b0:	4602      	mov	r2, r0
 80091b2:	460b      	mov	r3, r1
 80091b4:	4610      	mov	r0, r2
 80091b6:	4619      	mov	r1, r3
 80091b8:	a3b5      	add	r3, pc, #724	@ (adr r3, 8009490 <CTRL_pol+0xeb8>)
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	f7f7 fa43 	bl	8000648 <__aeabi_dmul>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	4690      	mov	r8, r2
 80091c8:	4699      	mov	r9, r3
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7f7 f9e3 	bl	8000598 <__aeabi_f2d>
 80091d2:	4604      	mov	r4, r0
 80091d4:	460d      	mov	r5, r1
 80091d6:	6a3b      	ldr	r3, [r7, #32]
 80091d8:	4618      	mov	r0, r3
 80091da:	f7f7 f9dd 	bl	8000598 <__aeabi_f2d>
 80091de:	4602      	mov	r2, r0
 80091e0:	460b      	mov	r3, r1
 80091e2:	4620      	mov	r0, r4
 80091e4:	4629      	mov	r1, r5
 80091e6:	f7f7 f877 	bl	80002d8 <__aeabi_dsub>
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	4614      	mov	r4, r2
 80091f0:	461d      	mov	r5, r3
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7f7 f9cf 	bl	8000598 <__aeabi_f2d>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4620      	mov	r0, r4
 8009200:	4629      	mov	r1, r5
 8009202:	f7f7 f86b 	bl	80002dc <__adddf3>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	4610      	mov	r0, r2
 800920c:	4619      	mov	r1, r3
 800920e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009498 <CTRL_pol+0xec0>)
 8009210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009214:	f7f7 fa18 	bl	8000648 <__aeabi_dmul>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4614      	mov	r4, r2
 800921e:	461d      	mov	r5, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4618      	mov	r0, r3
 8009224:	f7f7 f9b8 	bl	8000598 <__aeabi_f2d>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	4620      	mov	r0, r4
 800922e:	4629      	mov	r1, r5
 8009230:	f7f7 f854 	bl	80002dc <__adddf3>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	4610      	mov	r0, r2
 800923a:	4619      	mov	r1, r3
 800923c:	a398      	add	r3, pc, #608	@ (adr r3, 80094a0 <CTRL_pol+0xec8>)
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	f7f7 fa01 	bl	8000648 <__aeabi_dmul>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4640      	mov	r0, r8
 800924c:	4649      	mov	r1, r9
 800924e:	f7f7 f843 	bl	80002d8 <__aeabi_dsub>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	4610      	mov	r0, r2
 8009258:	4619      	mov	r1, r3
 800925a:	f04f 0200 	mov.w	r2, #0
 800925e:	4b98      	ldr	r3, [pc, #608]	@ (80094c0 <CTRL_pol+0xee8>)
 8009260:	f7f7 fb1c 	bl	800089c <__aeabi_ddiv>
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	4610      	mov	r0, r2
 800926a:	4619      	mov	r1, r3
 800926c:	f7f7 fce4 	bl	8000c38 <__aeabi_d2f>
 8009270:	4603      	mov	r3, r0
 8009272:	62bb      	str	r3, [r7, #40]	@ 0x28
			Ir = (TR-0.0255/1000.0)/TORQUE_CONSTANT;
 8009274:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009276:	f7f7 f98f 	bl	8000598 <__aeabi_f2d>
 800927a:	a38b      	add	r3, pc, #556	@ (adr r3, 80094a8 <CTRL_pol+0xed0>)
 800927c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009280:	f7f7 f82a 	bl	80002d8 <__aeabi_dsub>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	4610      	mov	r0, r2
 800928a:	4619      	mov	r1, r3
 800928c:	a388      	add	r3, pc, #544	@ (adr r3, 80094b0 <CTRL_pol+0xed8>)
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	f7f7 fb03 	bl	800089c <__aeabi_ddiv>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4610      	mov	r0, r2
 800929c:	4619      	mov	r1, r3
 800929e:	f7f7 fccb 	bl	8000c38 <__aeabi_d2f>
 80092a2:	4603      	mov	r3, r0
 80092a4:	637b      	str	r3, [r7, #52]	@ 0x34
			Il = (TL+0.0255/1000.0)/TORQUE_CONSTANT;
 80092a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092a8:	f7f7 f976 	bl	8000598 <__aeabi_f2d>
 80092ac:	a37e      	add	r3, pc, #504	@ (adr r3, 80094a8 <CTRL_pol+0xed0>)
 80092ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b2:	f7f7 f813 	bl	80002dc <__adddf3>
 80092b6:	4602      	mov	r2, r0
 80092b8:	460b      	mov	r3, r1
 80092ba:	4610      	mov	r0, r2
 80092bc:	4619      	mov	r1, r3
 80092be:	a37c      	add	r3, pc, #496	@ (adr r3, 80094b0 <CTRL_pol+0xed8>)
 80092c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c4:	f7f7 faea 	bl	800089c <__aeabi_ddiv>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4610      	mov	r0, r2
 80092ce:	4619      	mov	r1, r3
 80092d0:	f7f7 fcb2 	bl	8000c38 <__aeabi_d2f>
 80092d4:	4603      	mov	r3, r0
 80092d6:	633b      	str	r3, [r7, #48]	@ 0x30
		}
	}
	f_duty10_R = FF_BALANCE_R*(MOTOR_REGISTER*Ir+f_MotorR_AngleS*0.062/1000.0/60.0)/get_battLv();	
 80092d8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80092dc:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80094c8 <CTRL_pol+0xef0>
 80092e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092e4:	ee17 0a90 	vmov	r0, s15
 80092e8:	f7f7 f956 	bl	8000598 <__aeabi_f2d>
 80092ec:	4604      	mov	r4, r0
 80092ee:	460d      	mov	r5, r1
 80092f0:	4b76      	ldr	r3, [pc, #472]	@ (80094cc <CTRL_pol+0xef4>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7f7 f94f 	bl	8000598 <__aeabi_f2d>
 80092fa:	a36f      	add	r3, pc, #444	@ (adr r3, 80094b8 <CTRL_pol+0xee0>)
 80092fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009300:	f7f7 f9a2 	bl	8000648 <__aeabi_dmul>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4610      	mov	r0, r2
 800930a:	4619      	mov	r1, r3
 800930c:	f04f 0200 	mov.w	r2, #0
 8009310:	4b6f      	ldr	r3, [pc, #444]	@ (80094d0 <CTRL_pol+0xef8>)
 8009312:	f7f7 fac3 	bl	800089c <__aeabi_ddiv>
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	4610      	mov	r0, r2
 800931c:	4619      	mov	r1, r3
 800931e:	f04f 0200 	mov.w	r2, #0
 8009322:	4b6c      	ldr	r3, [pc, #432]	@ (80094d4 <CTRL_pol+0xefc>)
 8009324:	f7f7 faba 	bl	800089c <__aeabi_ddiv>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	4620      	mov	r0, r4
 800932e:	4629      	mov	r1, r5
 8009330:	f7f6 ffd4 	bl	80002dc <__adddf3>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	4614      	mov	r4, r2
 800933a:	461d      	mov	r5, r3
 800933c:	f009 fb84 	bl	8012a48 <get_battLv>
 8009340:	ee10 3a10 	vmov	r3, s0
 8009344:	4618      	mov	r0, r3
 8009346:	f7f7 f927 	bl	8000598 <__aeabi_f2d>
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	4620      	mov	r0, r4
 8009350:	4629      	mov	r1, r5
 8009352:	f7f7 faa3 	bl	800089c <__aeabi_ddiv>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	4610      	mov	r0, r2
 800935c:	4619      	mov	r1, r3
 800935e:	f7f7 fc6b 	bl	8000c38 <__aeabi_d2f>
 8009362:	4603      	mov	r3, r0
 8009364:	63fb      	str	r3, [r7, #60]	@ 0x3c
	f_duty10_L = FF_BALANCE_L*(MOTOR_REGISTER*Il+f_MotorL_AngleS*0.062/1000.0/60.0)/get_battLv();	
 8009366:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800936a:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 80094c8 <CTRL_pol+0xef0>
 800936e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009372:	ee17 0a90 	vmov	r0, s15
 8009376:	f7f7 f90f 	bl	8000598 <__aeabi_f2d>
 800937a:	4604      	mov	r4, r0
 800937c:	460d      	mov	r5, r1
 800937e:	4b56      	ldr	r3, [pc, #344]	@ (80094d8 <CTRL_pol+0xf00>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4618      	mov	r0, r3
 8009384:	f7f7 f908 	bl	8000598 <__aeabi_f2d>
 8009388:	a34b      	add	r3, pc, #300	@ (adr r3, 80094b8 <CTRL_pol+0xee0>)
 800938a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938e:	f7f7 f95b 	bl	8000648 <__aeabi_dmul>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	4610      	mov	r0, r2
 8009398:	4619      	mov	r1, r3
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	4b4c      	ldr	r3, [pc, #304]	@ (80094d0 <CTRL_pol+0xef8>)
 80093a0:	f7f7 fa7c 	bl	800089c <__aeabi_ddiv>
 80093a4:	4602      	mov	r2, r0
 80093a6:	460b      	mov	r3, r1
 80093a8:	4610      	mov	r0, r2
 80093aa:	4619      	mov	r1, r3
 80093ac:	f04f 0200 	mov.w	r2, #0
 80093b0:	4b48      	ldr	r3, [pc, #288]	@ (80094d4 <CTRL_pol+0xefc>)
 80093b2:	f7f7 fa73 	bl	800089c <__aeabi_ddiv>
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	4620      	mov	r0, r4
 80093bc:	4629      	mov	r1, r5
 80093be:	f7f6 ff8d 	bl	80002dc <__adddf3>
 80093c2:	4602      	mov	r2, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	4614      	mov	r4, r2
 80093c8:	461d      	mov	r5, r3
 80093ca:	f009 fb3d 	bl	8012a48 <get_battLv>
 80093ce:	ee10 3a10 	vmov	r3, s0
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7f7 f8e0 	bl	8000598 <__aeabi_f2d>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	4620      	mov	r0, r4
 80093de:	4629      	mov	r1, r5
 80093e0:	f7f7 fa5c 	bl	800089c <__aeabi_ddiv>
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	4610      	mov	r0, r2
 80093ea:	4619      	mov	r1, r3
 80093ec:	f7f7 fc24 	bl	8000c38 <__aeabi_d2f>
 80093f0:	4603      	mov	r3, r0
 80093f2:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(f_duty10_R>1){
 80093f4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80093f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009404:	dd02      	ble.n	800940c <CTRL_pol+0xe34>
		f_duty10_R = 1.0;
 8009406:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800940a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}
	if(f_duty10_R<-1){
 800940c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8009410:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800941c:	d501      	bpl.n	8009422 <CTRL_pol+0xe4a>
		f_duty10_R = -1.0;
 800941e:	4b2f      	ldr	r3, [pc, #188]	@ (80094dc <CTRL_pol+0xf04>)
 8009420:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}
	if(f_duty10_L>1){
 8009422:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8009426:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800942a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800942e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009432:	dd02      	ble.n	800943a <CTRL_pol+0xe62>
		f_duty10_L = 1.0;
 8009434:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009438:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
	if(f_duty10_L<-1){
 800943a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800943e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800944a:	d501      	bpl.n	8009450 <CTRL_pol+0xe78>
		f_duty10_L = -1.0;
 800944c:	4b23      	ldr	r3, [pc, #140]	@ (80094dc <CTRL_pol+0xf04>)
 800944e:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	Duty_L = f_duty10_L;
 8009450:	4a23      	ldr	r2, [pc, #140]	@ (80094e0 <CTRL_pol+0xf08>)
 8009452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009454:	6013      	str	r3, [r2, #0]
	Duty_R = f_duty10_R;
 8009456:	4a23      	ldr	r2, [pc, #140]	@ (80094e4 <CTRL_pol+0xf0c>)
 8009458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800945a:	6013      	str	r3, [r2, #0]

	TempLog1 = f_TrgtSpeed;//f_AngleSErrSum;//TR;//f_floorfriction;//f_duty10_R;
 800945c:	4b22      	ldr	r3, [pc, #136]	@ (80094e8 <CTRL_pol+0xf10>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a22      	ldr	r2, [pc, #136]	@ (80094ec <CTRL_pol+0xf14>)
 8009462:	6013      	str	r3, [r2, #0]
	TempLog2 = f_TrgtAcc;//f_angleSpeedCtrl;//TL;//f_duty10_L;
 8009464:	4b22      	ldr	r3, [pc, #136]	@ (80094f0 <CTRL_pol+0xf18>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a22      	ldr	r2, [pc, #136]	@ (80094f4 <CTRL_pol+0xf1c>)
 800946a:	6013      	str	r3, [r2, #0]
	TempLog3 = f_Jerk;//f_floorfriction;//f_feedFoard_angle*(-1.0);
 800946c:	4b22      	ldr	r3, [pc, #136]	@ (80094f8 <CTRL_pol+0xf20>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a22      	ldr	r2, [pc, #136]	@ (80094fc <CTRL_pol+0xf24>)
 8009472:	6013      	str	r3, [r2, #0]
	TempLog4 = f_duty10_L;//f_floorfriction;//INERTIA*(f_feedFoard_angle*(-1.0) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction * 1000000.0;
 8009474:	4a22      	ldr	r2, [pc, #136]	@ (8009500 <CTRL_pol+0xf28>)
 8009476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009478:	6013      	str	r3, [r2, #0]

	EscapeWait = EscapeWait+0.001;
 800947a:	4b22      	ldr	r3, [pc, #136]	@ (8009504 <CTRL_pol+0xf2c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4618      	mov	r0, r3
 8009480:	f7f7 f88a 	bl	8000598 <__aeabi_f2d>
 8009484:	e040      	b.n	8009508 <CTRL_pol+0xf30>
 8009486:	bf00      	nop
 8009488:	47ae147b 	.word	0x47ae147b
 800948c:	3f847ae1 	.word	0x3f847ae1
 8009490:	e0000000 	.word	0xe0000000
 8009494:	3f69be4c 	.word	0x3f69be4c
 8009498:	e0000000 	.word	0xe0000000
 800949c:	3f081e03 	.word	0x3f081e03
 80094a0:	4b0d94f3 	.word	0x4b0d94f3
 80094a4:	3fc4d769 	.word	0x3fc4d769
 80094a8:	a821f299 	.word	0xa821f299
 80094ac:	3efabd1a 	.word	0x3efabd1a
 80094b0:	40000000 	.word	0x40000000
 80094b4:	3f4376d5 	.word	0x3f4376d5
 80094b8:	c8b43958 	.word	0xc8b43958
 80094bc:	3fafbe76 	.word	0x3fafbe76
 80094c0:	40128000 	.word	0x40128000
 80094c4:	3c9374bc 	.word	0x3c9374bc
 80094c8:	4099999a 	.word	0x4099999a
 80094cc:	20000380 	.word	0x20000380
 80094d0:	408f4000 	.word	0x408f4000
 80094d4:	404e0000 	.word	0x404e0000
 80094d8:	20000384 	.word	0x20000384
 80094dc:	bf800000 	.word	0xbf800000
 80094e0:	20017b20 	.word	0x20017b20
 80094e4:	20017b24 	.word	0x20017b24
 80094e8:	20000374 	.word	0x20000374
 80094ec:	20017b10 	.word	0x20017b10
 80094f0:	20000360 	.word	0x20000360
 80094f4:	20017b14 	.word	0x20017b14
 80094f8:	20000358 	.word	0x20000358
 80094fc:	20017b18 	.word	0x20017b18
 8009500:	20017b1c 	.word	0x20017b1c
 8009504:	200003fc 	.word	0x200003fc
 8009508:	a329      	add	r3, pc, #164	@ (adr r3, 80095b0 <CTRL_pol+0xfd8>)
 800950a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950e:	f7f6 fee5 	bl	80002dc <__adddf3>
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	4610      	mov	r0, r2
 8009518:	4619      	mov	r1, r3
 800951a:	f7f7 fb8d 	bl	8000c38 <__aeabi_d2f>
 800951e:	4603      	mov	r3, r0
 8009520:	4a25      	ldr	r2, [pc, #148]	@ (80095b8 <CTRL_pol+0xfe0>)
 8009522:	6013      	str	r3, [r2, #0]
	CTRL_outMot( f_duty10_R, f_duty10_L );				// モータへ出力
 8009524:	edd7 0a0e 	vldr	s1, [r7, #56]	@ 0x38
 8009528:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 800952c:	f7fe ffac 	bl	8008488 <CTRL_outMot>

	f_Time += 0.001;
 8009530:	4b22      	ldr	r3, [pc, #136]	@ (80095bc <CTRL_pol+0xfe4>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4618      	mov	r0, r3
 8009536:	f7f7 f82f 	bl	8000598 <__aeabi_f2d>
 800953a:	a31d      	add	r3, pc, #116	@ (adr r3, 80095b0 <CTRL_pol+0xfd8>)
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	f7f6 fecc 	bl	80002dc <__adddf3>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	4610      	mov	r0, r2
 800954a:	4619      	mov	r1, r3
 800954c:	f7f7 fb74 	bl	8000c38 <__aeabi_d2f>
 8009550:	4603      	mov	r3, r0
 8009552:	4a1a      	ldr	r2, [pc, #104]	@ (80095bc <CTRL_pol+0xfe4>)
 8009554:	6013      	str	r3, [r2, #0]

	/* 壁切れチェック */
	if( MOT_getWallEdgeType() == MOT_WALL_EDGE_RIGHT ){
 8009556:	f009 f901 	bl	801275c <MOT_getWallEdgeType>
 800955a:	4603      	mov	r3, r0
 800955c:	2b01      	cmp	r3, #1
 800955e:	d10e      	bne.n	800957e <CTRL_pol+0xfa6>

		/* 壁抜け */
		if( DIST_isWall_R_SIDE() == FALSE ){
 8009560:	f009 fe10 	bl	8013184 <DIST_isWall_R_SIDE>
 8009564:	4603      	mov	r3, r0
 8009566:	f083 0301 	eor.w	r3, r3, #1
 800956a:	b2db      	uxtb	r3, r3
 800956c:	2b00      	cmp	r3, #0
 800956e:	d01b      	beq.n	80095a8 <CTRL_pol+0xfd0>
			SetLED(0x10);
 8009570:	2010      	movs	r0, #16
 8009572:	f7f8 fcb1 	bl	8001ed8 <SetLED>
			MOT_setWallEdge( TRUE );		// 壁の切れ目を検知
 8009576:	2001      	movs	r0, #1
 8009578:	f009 f8fc 	bl	8012774 <MOT_setWallEdge>
 800957c:	e014      	b.n	80095a8 <CTRL_pol+0xfd0>
		}
	}
	else if( MOT_getWallEdgeType() == MOT_WALL_EDGE_LEFT ){
 800957e:	f009 f8ed 	bl	801275c <MOT_getWallEdgeType>
 8009582:	4603      	mov	r3, r0
 8009584:	2b02      	cmp	r3, #2
 8009586:	d10f      	bne.n	80095a8 <CTRL_pol+0xfd0>

		/* 壁抜け */
		if( DIST_isWall_L_SIDE() == FALSE ){
 8009588:	f009 fe12 	bl	80131b0 <DIST_isWall_L_SIDE>
 800958c:	4603      	mov	r3, r0
 800958e:	f083 0301 	eor.w	r3, r3, #1
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b00      	cmp	r3, #0
 8009596:	d007      	beq.n	80095a8 <CTRL_pol+0xfd0>
			SetLED(0x01);
 8009598:	2001      	movs	r0, #1
 800959a:	f7f8 fc9d 	bl	8001ed8 <SetLED>
			MOT_setWallEdge( TRUE );		// 壁の切れ目を検知
 800959e:	2001      	movs	r0, #1
 80095a0:	f009 f8e8 	bl	8012774 <MOT_setWallEdge>
 80095a4:	e000      	b.n	80095a8 <CTRL_pol+0xfd0>
		 return;		// 制御無効状態
 80095a6:	bf00      	nop
		}
	}
}
 80095a8:	3740      	adds	r7, #64	@ 0x40
 80095aa:	46bd      	mov	sp, r7
 80095ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80095b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80095b4:	3f50624d 	.word	0x3f50624d
 80095b8:	200003fc 	.word	0x200003fc
 80095bc:	20000354 	.word	0x20000354

080095c0 <Failsafe_flag>:

void Failsafe_flag(void)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	af00      	add	r7, sp, #0
	bl_Failsafe = TRUE;
 80095c4:	4b03      	ldr	r3, [pc, #12]	@ (80095d4 <Failsafe_flag+0x14>)
 80095c6:	2201      	movs	r2, #1
 80095c8:	701a      	strb	r2, [r3, #0]
	SetLED(0x1F);
 80095ca:	201f      	movs	r0, #31
 80095cc:	f7f8 fc84 	bl	8001ed8 <SetLED>
}
 80095d0:	bf00      	nop
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	200003f9 	.word	0x200003f9

080095d8 <Failsafe_flag_off>:

void Failsafe_flag_off(void)
{
 80095d8:	b480      	push	{r7}
 80095da:	af00      	add	r7, sp, #0
	bl_Failsafe = FALSE;
 80095dc:	4b03      	ldr	r3, [pc, #12]	@ (80095ec <Failsafe_flag_off+0x14>)
 80095de:	2200      	movs	r2, #0
 80095e0:	701a      	strb	r2, [r3, #0]
}
 80095e2:	bf00      	nop
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	200003f9 	.word	0x200003f9

080095f0 <SYS_isOutOfCtrl>:

bool SYS_isOutOfCtrl( void )
{
 80095f0:	b480      	push	{r7}
 80095f2:	af00      	add	r7, sp, #0
	return bl_Failsafe;
 80095f4:	4b03      	ldr	r3, [pc, #12]	@ (8009604 <SYS_isOutOfCtrl+0x14>)
 80095f6:	781b      	ldrb	r3, [r3, #0]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	200003f9 	.word	0x200003f9

08009608 <DCM_setDirCw>:
 */

#include "hal/DCM.h"

void DCM_setDirCw( enDCM_ID en_id )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	4603      	mov	r3, r0
 8009610:	71fb      	strb	r3, [r7, #7]
	/* 回転方向設定 */
	if( en_id == DCM_R ){			// 右
 8009612:	79fb      	ldrb	r3, [r7, #7]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d103      	bne.n	8009620 <DCM_setDirCw+0x18>
		Set_MOT1(1);	//tmp
 8009618:	2001      	movs	r0, #1
 800961a:	f7f8 fd67 	bl	80020ec <Set_MOT1>
	}
	else{							// 左
		Set_MOT0(0);	//tmp

	}
}
 800961e:	e002      	b.n	8009626 <DCM_setDirCw+0x1e>
		Set_MOT0(0);	//tmp
 8009620:	2000      	movs	r0, #0
 8009622:	f7f8 fd49 	bl	80020b8 <Set_MOT0>
}
 8009626:	bf00      	nop
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <DCM_setDirCcw>:

void DCM_setDirCcw( enDCM_ID en_id )
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b082      	sub	sp, #8
 8009632:	af00      	add	r7, sp, #0
 8009634:	4603      	mov	r3, r0
 8009636:	71fb      	strb	r3, [r7, #7]
	/* 回転方向設定 */
	if( en_id == DCM_R ){			// 右
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d103      	bne.n	8009646 <DCM_setDirCcw+0x18>
		Set_MOT1(0);	//tmp
 800963e:	2000      	movs	r0, #0
 8009640:	f7f8 fd54 	bl	80020ec <Set_MOT1>
	}
	else{							// 左
		Set_MOT0(1);	//tmp
	}
}
 8009644:	e002      	b.n	800964c <DCM_setDirCcw+0x1e>
		Set_MOT0(1);	//tmp
 8009646:	2001      	movs	r0, #1
 8009648:	f7f8 fd36 	bl	80020b8 <Set_MOT0>
}
 800964c:	bf00      	nop
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <DCM_brakeMot>:

void DCM_brakeMot( enDCM_ID en_id )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	4603      	mov	r3, r0
 800965c:	71fb      	strb	r3, [r7, #7]
	/* 停止設定 */
	if( en_id == DCM_R ){			// 右
 800965e:	79fb      	ldrb	r3, [r7, #7]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d103      	bne.n	800966c <DCM_brakeMot+0x18>
		Set_DutyTIM3(0);
 8009664:	2000      	movs	r0, #0
 8009666:	f7fc fbb3 	bl	8005dd0 <Set_DutyTIM3>
	}
	else{							// 左
		Set_DutyTIM2(0);
	}
}
 800966a:	e002      	b.n	8009672 <DCM_brakeMot+0x1e>
		Set_DutyTIM2(0);
 800966c:	2000      	movs	r0, #0
 800966e:	f7fc fb6f 	bl	8005d50 <Set_DutyTIM2>
}
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <DCM_staMot>:

void DCM_staMot( enDCM_ID en_id )
{	
 800967a:	b580      	push	{r7, lr}
 800967c:	b082      	sub	sp, #8
 800967e:	af00      	add	r7, sp, #0
 8009680:	4603      	mov	r3, r0
 8009682:	71fb      	strb	r3, [r7, #7]
	/* タイマスタート */
	if( en_id == DCM_R ){			// 右
 8009684:	79fb      	ldrb	r3, [r7, #7]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d102      	bne.n	8009690 <DCM_staMot+0x16>
		Enable_TIM3();
 800968a:	f7fc fb57 	bl	8005d3c <Enable_TIM3>
	}
	else{							// 左
	   Enable_TIM2();
	}
}
 800968e:	e001      	b.n	8009694 <DCM_staMot+0x1a>
	   Enable_TIM2();
 8009690:	f7fc fb4c 	bl	8005d2c <Enable_TIM2>
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <DCM_staMotAll>:

void DCM_staMotAll( void )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	af00      	add	r7, sp, #0
	DCM_staMot(DCM_R);									// 右モータON
 80096a0:	2000      	movs	r0, #0
 80096a2:	f7ff ffea 	bl	800967a <DCM_staMot>
	DCM_staMot(DCM_L);									// 左モータON
 80096a6:	2001      	movs	r0, #1
 80096a8:	f7ff ffe7 	bl	800967a <DCM_staMot>
}
 80096ac:	bf00      	nop
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <DCM_setPwmDuty>:

void DCM_setPwmDuty( enDCM_ID en_id, uint16_t us_duty10 )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	4603      	mov	r3, r0
 80096b8:	460a      	mov	r2, r1
 80096ba:	71fb      	strb	r3, [r7, #7]
 80096bc:	4613      	mov	r3, r2
 80096be:	80bb      	strh	r3, [r7, #4]
	/* PWM設定 */
	if( en_id == DCM_R ){				// 右
 80096c0:	79fb      	ldrb	r3, [r7, #7]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d110      	bne.n	80096e8 <DCM_setPwmDuty+0x38>

		if( 0 == us_duty10 ){			// Duty0%設定
 80096c6:	88bb      	ldrh	r3, [r7, #4]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d104      	bne.n	80096d6 <DCM_setPwmDuty+0x26>
			DCM_brakeMot( en_id );
 80096cc:	79fb      	ldrb	r3, [r7, #7]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7ff ffc0 	bl	8009654 <DCM_brakeMot>
		else{
			Set_DutyTIM2(us_duty10);
			DCM_staMot( en_id );		// 回転開始
		}
	}
}
 80096d4:	e018      	b.n	8009708 <DCM_setPwmDuty+0x58>
			Set_DutyTIM3(us_duty10);
 80096d6:	88bb      	ldrh	r3, [r7, #4]
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fc fb79 	bl	8005dd0 <Set_DutyTIM3>
			DCM_staMot( en_id );		// 回転開始
 80096de:	79fb      	ldrb	r3, [r7, #7]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7ff ffca 	bl	800967a <DCM_staMot>
}
 80096e6:	e00f      	b.n	8009708 <DCM_setPwmDuty+0x58>
		if( 0 == us_duty10 ){			// Duty0%
 80096e8:	88bb      	ldrh	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d104      	bne.n	80096f8 <DCM_setPwmDuty+0x48>
			DCM_brakeMot( en_id );
 80096ee:	79fb      	ldrb	r3, [r7, #7]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7ff ffaf 	bl	8009654 <DCM_brakeMot>
}
 80096f6:	e007      	b.n	8009708 <DCM_setPwmDuty+0x58>
			Set_DutyTIM2(us_duty10);
 80096f8:	88bb      	ldrh	r3, [r7, #4]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fc fb28 	bl	8005d50 <Set_DutyTIM2>
			DCM_staMot( en_id );		// 回転開始
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	4618      	mov	r0, r3
 8009704:	f7ff ffb9 	bl	800967a <DCM_staMot>
}
 8009708:	bf00      	nop
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <ENC_clr>:


#include "hal/encoder.h"

void ENC_clr( void )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	af00      	add	r7, sp, #0
	Clear_CounterTIM5();
 8009714:	f7fc fba8 	bl	8005e68 <Clear_CounterTIM5>
	Clear_CounterTIM1();
 8009718:	f7fc fb9a 	bl	8005e50 <Clear_CounterTIM1>
}
 800971c:	bf00      	nop
 800971e:	bd80      	pop	{r7, pc}

08009720 <Get_encoder_value>:

uint16_t Get_encoder_value(en_ENDIR dir)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	71fb      	strb	r3, [r7, #7]
	if(dir == EN_L) return Get_CounterTIM1();
 800972a:	79fb      	ldrb	r3, [r7, #7]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d103      	bne.n	8009738 <Get_encoder_value+0x18>
 8009730:	f7fc fbe6 	bl	8005f00 <Get_CounterTIM1>
 8009734:	4603      	mov	r3, r0
 8009736:	e002      	b.n	800973e <Get_encoder_value+0x1e>
	else return Get_CounterTIM5();
 8009738:	f7fc fbee 	bl	8005f18 <Get_CounterTIM5>
 800973c:	4603      	mov	r3, r0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <ENC_GetDiv>:

void ENC_GetDiv( int32_t* p_r, int32_t* p_l )
{
 8009746:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
	int64_t l_cntR = (int64_t) Get_CounterTIM5();
 8009752:	f7fc fbe1 	bl	8005f18 <Get_CounterTIM5>
 8009756:	4603      	mov	r3, r0
 8009758:	b29b      	uxth	r3, r3
 800975a:	2200      	movs	r2, #0
 800975c:	4698      	mov	r8, r3
 800975e:	4691      	mov	r9, r2
 8009760:	e9c7 8904 	strd	r8, r9, [r7, #16]
	int64_t l_cntL = (int64_t) Get_CounterTIM1();
 8009764:	f7fc fbcc 	bl	8005f00 <Get_CounterTIM1>
 8009768:	4603      	mov	r3, r0
 800976a:	b29b      	uxth	r3, r3
 800976c:	2200      	movs	r2, #0
 800976e:	461c      	mov	r4, r3
 8009770:	4615      	mov	r5, r2
 8009772:	e9c7 4502 	strd	r4, r5, [r7, #8]

	ENC_clr();
 8009776:	f7ff ffcb 	bl	8009710 <ENC_clr>

	*p_r = ENC_RESET_VAL - l_cntR;		// 右モータ
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 8009780:	461a      	mov	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	601a      	str	r2, [r3, #0]
	*p_l = l_cntL - ENC_RESET_VAL;		// 左モータ
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800978c:	461a      	mov	r2, r3
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	601a      	str	r2, [r3, #0]
}
 8009792:	bf00      	nop
 8009794:	3718      	adds	r7, #24
 8009796:	46bd      	mov	sp, r7
 8009798:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800979c <Get_s_gyro>:
int16_t s_GyroValBuf[8];								// ジャイロセンサのバッファ値
float  f_GyroNowAngle;		 						// ジャイロセンサの現在角度
int32_t  l_GyroRef; 									// ジャイロセンサの基準値

uint16_t Get_s_gyro(void)
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
	return s_GyroVal;
 80097a0:	4b04      	ldr	r3, [pc, #16]	@ (80097b4 <Get_s_gyro+0x18>)
 80097a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097a6:	b29b      	uxth	r3, r3
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	20000402 	.word	0x20000402

080097b8 <ICM_42688_whoami>:
void ICM_42688_whoami(void)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	af00      	add	r7, sp, #0
	SetSPI2TransmitData(0,(0x0F | 0x80));
 80097bc:	218f      	movs	r1, #143	@ 0x8f
 80097be:	2000      	movs	r0, #0
 80097c0:	f7fb f89a 	bl	80048f8 <SetSPI2TransmitData>
	SetSPI2TransmitData(1, 0x00);
 80097c4:	2100      	movs	r1, #0
 80097c6:	2001      	movs	r0, #1
 80097c8:	f7fb f896 	bl	80048f8 <SetSPI2TransmitData>
	SPI2_DMA_Communication(2);
 80097cc:	2002      	movs	r0, #2
 80097ce:	f7fb f811 	bl	80047f4 <SPI2_DMA_Communication>
	printf("who am i = %x\r\n",Get_SPI2ReciveData(1));
 80097d2:	2001      	movs	r0, #1
 80097d4:	f7fb f880 	bl	80048d8 <Get_SPI2ReciveData>
 80097d8:	4603      	mov	r3, r0
 80097da:	4619      	mov	r1, r3
 80097dc:	4802      	ldr	r0, [pc, #8]	@ (80097e8 <ICM_42688_whoami+0x30>)
 80097de:	f014 fa39 	bl	801dc54 <iprintf>

}
 80097e2:	bf00      	nop
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	08021aac 	.word	0x08021aac

080097ec <ICM_42688_WriteByte>:

void ICM_42688_WriteByte(uint8_t reg,uint8_t data)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	4603      	mov	r3, r0
 80097f4:	460a      	mov	r2, r1
 80097f6:	71fb      	strb	r3, [r7, #7]
 80097f8:	4613      	mov	r3, r2
 80097fa:	71bb      	strb	r3, [r7, #6]
	SetSPI2TransmitData(0, reg);
 80097fc:	79fb      	ldrb	r3, [r7, #7]
 80097fe:	4619      	mov	r1, r3
 8009800:	2000      	movs	r0, #0
 8009802:	f7fb f879 	bl	80048f8 <SetSPI2TransmitData>
	SetSPI2TransmitData(1, data);
 8009806:	79bb      	ldrb	r3, [r7, #6]
 8009808:	4619      	mov	r1, r3
 800980a:	2001      	movs	r0, #1
 800980c:	f7fb f874 	bl	80048f8 <SetSPI2TransmitData>

	SPI2_DMA_Communication(2);
 8009810:	2002      	movs	r0, #2
 8009812:	f7fa ffef 	bl	80047f4 <SPI2_DMA_Communication>
}
 8009816:	bf00      	nop
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <ICM_42688_ReadByte>:

void ICM_42688_ReadByte(uint8_t reg,uint8_t length)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b082      	sub	sp, #8
 8009822:	af00      	add	r7, sp, #0
 8009824:	4603      	mov	r3, r0
 8009826:	460a      	mov	r2, r1
 8009828:	71fb      	strb	r3, [r7, #7]
 800982a:	4613      	mov	r3, r2
 800982c:	71bb      	strb	r3, [r7, #6]
	SetSPI2TransmitData(0,(reg | 0x80));
 800982e:	79fb      	ldrb	r3, [r7, #7]
 8009830:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009834:	b2db      	uxtb	r3, r3
 8009836:	4619      	mov	r1, r3
 8009838:	2000      	movs	r0, #0
 800983a:	f7fb f85d 	bl	80048f8 <SetSPI2TransmitData>
	SetSPI2TransmitData(1,0x00);
 800983e:	2100      	movs	r1, #0
 8009840:	2001      	movs	r0, #1
 8009842:	f7fb f859 	bl	80048f8 <SetSPI2TransmitData>
	SetSPI2TransmitData(2,0x00);
 8009846:	2100      	movs	r1, #0
 8009848:	2002      	movs	r0, #2
 800984a:	f7fb f855 	bl	80048f8 <SetSPI2TransmitData>

	SPI2_DMA_Communication(3);
 800984e:	2003      	movs	r0, #3
 8009850:	f7fa ffd0 	bl	80047f4 <SPI2_DMA_Communication>
}
 8009854:	bf00      	nop
 8009856:	3708      	adds	r7, #8
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <ICM_42688_init>:


void ICM_42688_init(void)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
	ICM_42688_WriteByte(reg27,0x18);
	LL_mDelay(1);
	ICM_42688_WriteByte(reg28,0x18);
	LL_mDelay(1);
*/
	uint8_t reg16 = 0x10;	//CTRL1_XL
 8009862:	2310      	movs	r3, #16
 8009864:	71fb      	strb	r3, [r7, #7]
	uint8_t reg17 = 0x11;	//CTRL2_G
 8009866:	2311      	movs	r3, #17
 8009868:	71bb      	strb	r3, [r7, #6]
	uint8_t reg18 = 0x12;	//CTRL3_C
 800986a:	2312      	movs	r3, #18
 800986c:	717b      	strb	r3, [r7, #5]
	uint8_t reg24 = 0x18;	//CTRL9_XL
 800986e:	2318      	movs	r3, #24
 8009870:	713b      	strb	r3, [r7, #4]
	uint8_t reg19 = 0x13;	//CTRL4_C
 8009872:	2313      	movs	r3, #19
 8009874:	70fb      	strb	r3, [r7, #3]
	uint8_t reg23 = 0x17;	//CTRL8_XL
 8009876:	2317      	movs	r3, #23
 8009878:	70bb      	strb	r3, [r7, #2]
	uint8_t reg112 = 0x70;	//CTRL1_OIS
 800987a:	2370      	movs	r3, #112	@ 0x70
 800987c:	707b      	strb	r3, [r7, #1]


	ICM_42688_WriteByte(reg18,0x81);
 800987e:	797b      	ldrb	r3, [r7, #5]
 8009880:	2181      	movs	r1, #129	@ 0x81
 8009882:	4618      	mov	r0, r3
 8009884:	f7ff ffb2 	bl	80097ec <ICM_42688_WriteByte>
	LL_mDelay(400);
 8009888:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800988c:	f012 f8ee 	bl	801ba6c <LL_mDelay>
	ICM_42688_WriteByte(reg24,0xE2);
 8009890:	793b      	ldrb	r3, [r7, #4]
 8009892:	21e2      	movs	r1, #226	@ 0xe2
 8009894:	4618      	mov	r0, r3
 8009896:	f7ff ffa9 	bl	80097ec <ICM_42688_WriteByte>
	LL_mDelay(50);
 800989a:	2032      	movs	r0, #50	@ 0x32
 800989c:	f012 f8e6 	bl	801ba6c <LL_mDelay>
	ICM_42688_WriteByte(reg19,0x06);
 80098a0:	78fb      	ldrb	r3, [r7, #3]
 80098a2:	2106      	movs	r1, #6
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7ff ffa1 	bl	80097ec <ICM_42688_WriteByte>
	LL_mDelay(50);
 80098aa:	2032      	movs	r0, #50	@ 0x32
 80098ac:	f012 f8de 	bl	801ba6c <LL_mDelay>
	ICM_42688_WriteByte(reg23,0x06);
 80098b0:	78bb      	ldrb	r3, [r7, #2]
 80098b2:	2106      	movs	r1, #6
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7ff ff99 	bl	80097ec <ICM_42688_WriteByte>
	LL_mDelay(50);
 80098ba:	2032      	movs	r0, #50	@ 0x32
 80098bc:	f012 f8d6 	bl	801ba6c <LL_mDelay>
	ICM_42688_WriteByte(reg112,0xA9);
 80098c0:	787b      	ldrb	r3, [r7, #1]
 80098c2:	21a9      	movs	r1, #169	@ 0xa9
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7ff ff91 	bl	80097ec <ICM_42688_WriteByte>
	LL_mDelay(50);
 80098ca:	2032      	movs	r0, #50	@ 0x32
 80098cc:	f012 f8ce 	bl	801ba6c <LL_mDelay>
	ICM_42688_WriteByte(reg17,0xA1);
 80098d0:	79bb      	ldrb	r3, [r7, #6]
 80098d2:	21a1      	movs	r1, #161	@ 0xa1
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff ff89 	bl	80097ec <ICM_42688_WriteByte>
	LL_mDelay(1);
 80098da:	2001      	movs	r0, #1
 80098dc:	f012 f8c6 	bl	801ba6c <LL_mDelay>
	ICM_42688_WriteByte(reg17,0x81);
	LL_mDelay(1);
	ICM_42688_WriteByte(reg18,0x04);
	LL_mDelay(1);
*/
}
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <ICM_42688_GyroRead_DMA>:

void ICM_42688_GyroRead_DMA(uint8_t reg) //reg 29 2A
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	4603      	mov	r3, r0
 80098f0:	71fb      	strb	r3, [r7, #7]
	ICM_42688_ReadByte(reg,3);
 80098f2:	79fb      	ldrb	r3, [r7, #7]
 80098f4:	2103      	movs	r1, #3
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7ff ff91 	bl	800981e <ICM_42688_ReadByte>
}
 80098fc:	bf00      	nop
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <ICM_42688_GyroData>:

void ICM_42688_GyroData(void)
{
 8009904:	b598      	push	{r3, r4, r7, lr}
 8009906:	af00      	add	r7, sp, #0
	s_GyroVal=((uint16_t)Get_SPI2ReciveData(2)<<8|Get_SPI2ReciveData(1));
 8009908:	2002      	movs	r0, #2
 800990a:	f7fa ffe5 	bl	80048d8 <Get_SPI2ReciveData>
 800990e:	4603      	mov	r3, r0
 8009910:	021b      	lsls	r3, r3, #8
 8009912:	b21c      	sxth	r4, r3
 8009914:	2001      	movs	r0, #1
 8009916:	f7fa ffdf 	bl	80048d8 <Get_SPI2ReciveData>
 800991a:	4603      	mov	r3, r0
 800991c:	b21b      	sxth	r3, r3
 800991e:	4323      	orrs	r3, r4
 8009920:	b21a      	sxth	r2, r3
 8009922:	4b02      	ldr	r3, [pc, #8]	@ (800992c <ICM_42688_GyroData+0x28>)
 8009924:	801a      	strh	r2, [r3, #0]
}
 8009926:	bf00      	nop
 8009928:	bd98      	pop	{r3, r4, r7, pc}
 800992a:	bf00      	nop
 800992c:	20000402 	.word	0x20000402

08009930 <GYRO_SetRef>:

void GYRO_SetRef( void )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
	uint16_t i;
	int32_t ul_ref = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	603b      	str	r3, [r7, #0]

	/* データサンプリング */
	for( i=0; i<GYRO_REF_NUM; i++){			// 100回サンプリングした平均値を基準の値とする。
 800993a:	2300      	movs	r3, #0
 800993c:	80fb      	strh	r3, [r7, #6]
 800993e:	e00c      	b.n	800995a <GYRO_SetRef+0x2a>
		ul_ref += (int32_t)s_GyroVal;
 8009940:	4b0e      	ldr	r3, [pc, #56]	@ (800997c <GYRO_SetRef+0x4c>)
 8009942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009946:	461a      	mov	r2, r3
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	4413      	add	r3, r2
 800994c:	603b      	str	r3, [r7, #0]
		LL_mDelay(1);
 800994e:	2001      	movs	r0, #1
 8009950:	f012 f88c 	bl	801ba6c <LL_mDelay>
	for( i=0; i<GYRO_REF_NUM; i++){			// 100回サンプリングした平均値を基準の値とする。
 8009954:	88fb      	ldrh	r3, [r7, #6]
 8009956:	3301      	adds	r3, #1
 8009958:	80fb      	strh	r3, [r7, #6]
 800995a:	88fb      	ldrh	r3, [r7, #6]
 800995c:	2bc7      	cmp	r3, #199	@ 0xc7
 800995e:	d9ef      	bls.n	8009940 <GYRO_SetRef+0x10>
	}

	/* 基準値算出（平均値） */
	l_GyroRef = (int32_t)((ul_ref) / GYRO_REF_NUM) ;		
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	4a07      	ldr	r2, [pc, #28]	@ (8009980 <GYRO_SetRef+0x50>)
 8009964:	fb82 1203 	smull	r1, r2, r2, r3
 8009968:	1192      	asrs	r2, r2, #6
 800996a:	17db      	asrs	r3, r3, #31
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	4a05      	ldr	r2, [pc, #20]	@ (8009984 <GYRO_SetRef+0x54>)
 8009970:	6013      	str	r3, [r2, #0]
}
 8009972:	bf00      	nop
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	20000402 	.word	0x20000402
 8009980:	51eb851f 	.word	0x51eb851f
 8009984:	20000408 	.word	0x20000408

08009988 <GYRO_getSpeedErr>:

float GYRO_getSpeedErr( void )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
	int32_t  l_val = (int32_t)s_GyroVal;				
 800998e:	4b20      	ldr	r3, [pc, #128]	@ (8009a10 <GYRO_getSpeedErr+0x88>)
 8009990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009994:	60fb      	str	r3, [r7, #12]
	int32_t  l_err = l_val - l_GyroRef;
 8009996:	4b1f      	ldr	r3, [pc, #124]	@ (8009a14 <GYRO_getSpeedErr+0x8c>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	60bb      	str	r3, [r7, #8]
	float f_res;

	/* 角速度の偏差算出 */
//	if( ( l_err < -0.01 * 100 ) || ( 0.01 * 100 < l_err ) ){
//		f_res = (float)l_err *140.0  * DEG_TO_RAD;// / 1000.0;
	f_res = (float)s_GyroVal/1000.0 *140.0 * DEG_TO_RAD;// / 1000.0;
 80099a0:	4b1b      	ldr	r3, [pc, #108]	@ (8009a10 <GYRO_getSpeedErr+0x88>)
 80099a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099a6:	ee07 3a90 	vmov	s15, r3
 80099aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099ae:	ee17 0a90 	vmov	r0, s15
 80099b2:	f7f6 fdf1 	bl	8000598 <__aeabi_f2d>
 80099b6:	f04f 0200 	mov.w	r2, #0
 80099ba:	4b17      	ldr	r3, [pc, #92]	@ (8009a18 <GYRO_getSpeedErr+0x90>)
 80099bc:	f7f6 ff6e 	bl	800089c <__aeabi_ddiv>
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	4610      	mov	r0, r2
 80099c6:	4619      	mov	r1, r3
 80099c8:	f04f 0200 	mov.w	r2, #0
 80099cc:	4b13      	ldr	r3, [pc, #76]	@ (8009a1c <GYRO_getSpeedErr+0x94>)
 80099ce:	f7f6 fe3b 	bl	8000648 <__aeabi_dmul>
 80099d2:	4602      	mov	r2, r0
 80099d4:	460b      	mov	r3, r1
 80099d6:	4610      	mov	r0, r2
 80099d8:	4619      	mov	r1, r3
 80099da:	a30b      	add	r3, pc, #44	@ (adr r3, 8009a08 <GYRO_getSpeedErr+0x80>)
 80099dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e0:	f7f6 fe32 	bl	8000648 <__aeabi_dmul>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	4610      	mov	r0, r2
 80099ea:	4619      	mov	r1, r3
 80099ec:	f7f7 f924 	bl	8000c38 <__aeabi_d2f>
 80099f0:	4603      	mov	r3, r0
 80099f2:	607b      	str	r3, [r7, #4]
//	}
/*	else{
		f_res = 0;									// [deg/s]
	}
*/
	return f_res;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	ee07 3a90 	vmov	s15, r3
}
 80099fa:	eeb0 0a67 	vmov.f32	s0, s15
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	f3af 8000 	nop.w
 8009a08:	60000000 	.word	0x60000000
 8009a0c:	3f91df49 	.word	0x3f91df49
 8009a10:	20000402 	.word	0x20000402
 8009a14:	20000408 	.word	0x20000408
 8009a18:	408f4000 	.word	0x408f4000
 8009a1c:	40618000 	.word	0x40618000

08009a20 <GYRO_getNowAngle>:

float GYRO_getNowAngle( void )
{
 8009a20:	b480      	push	{r7}
 8009a22:	af00      	add	r7, sp, #0
	return f_GyroNowAngle;
 8009a24:	4b04      	ldr	r3, [pc, #16]	@ (8009a38 <GYRO_getNowAngle+0x18>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	ee07 3a90 	vmov	s15, r3
}
 8009a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr
 8009a38:	20000404 	.word	0x20000404

08009a3c <GYRO_getRef>:

float GYRO_getRef( void )
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	af00      	add	r7, sp, #0
	return l_GyroRef;
 8009a40:	4b05      	ldr	r3, [pc, #20]	@ (8009a58 <GYRO_getRef+0x1c>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	ee07 3a90 	vmov	s15, r3
 8009a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8009a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	20000408 	.word	0x20000408

08009a5c <GYRO_Pol>:

void GYRO_Pol( void )
{
 8009a5c:	b5b0      	push	{r4, r5, r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
	float f_speed;

	/* 現在の角度を更新する */
	f_speed = GYRO_getSpeedErr();			// 角速度取得 (0.001sec毎の角速度)
 8009a62:	f7ff ff91 	bl	8009988 <GYRO_getSpeedErr>
 8009a66:	ed87 0a01 	vstr	s0, [r7, #4]
	f_GyroNowAngle += f_speed / 1000.0;		// 角度設定   (0.001sec毎に加算するため)
 8009a6a:	4b22      	ldr	r3, [pc, #136]	@ (8009af4 <GYRO_Pol+0x98>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7f6 fd92 	bl	8000598 <__aeabi_f2d>
 8009a74:	4604      	mov	r4, r0
 8009a76:	460d      	mov	r5, r1
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7f6 fd8d 	bl	8000598 <__aeabi_f2d>
 8009a7e:	f04f 0200 	mov.w	r2, #0
 8009a82:	4b1d      	ldr	r3, [pc, #116]	@ (8009af8 <GYRO_Pol+0x9c>)
 8009a84:	f7f6 ff0a 	bl	800089c <__aeabi_ddiv>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	4629      	mov	r1, r5
 8009a90:	f7f6 fc24 	bl	80002dc <__adddf3>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	4610      	mov	r0, r2
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	f7f7 f8cc 	bl	8000c38 <__aeabi_d2f>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	4a14      	ldr	r2, [pc, #80]	@ (8009af4 <GYRO_Pol+0x98>)
 8009aa4:	6013      	str	r3, [r2, #0]

	/* エラーチェック */
	if( bl_ErrChk == TRUE ){
 8009aa6:	4b15      	ldr	r3, [pc, #84]	@ (8009afc <GYRO_Pol+0xa0>)
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d01d      	beq.n	8009aea <GYRO_Pol+0x8e>

		f_ErrChkAngle += f_speed/1000.0;		// 角度設定   (0.001sec毎に加算するため)
 8009aae:	4b14      	ldr	r3, [pc, #80]	@ (8009b00 <GYRO_Pol+0xa4>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7f6 fd70 	bl	8000598 <__aeabi_f2d>
 8009ab8:	4604      	mov	r4, r0
 8009aba:	460d      	mov	r5, r1
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7f6 fd6b 	bl	8000598 <__aeabi_f2d>
 8009ac2:	f04f 0200 	mov.w	r2, #0
 8009ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8009af8 <GYRO_Pol+0x9c>)
 8009ac8:	f7f6 fee8 	bl	800089c <__aeabi_ddiv>
 8009acc:	4602      	mov	r2, r0
 8009ace:	460b      	mov	r3, r1
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	4629      	mov	r1, r5
 8009ad4:	f7f6 fc02 	bl	80002dc <__adddf3>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4610      	mov	r0, r2
 8009ade:	4619      	mov	r1, r3
 8009ae0:	f7f7 f8aa 	bl	8000c38 <__aeabi_d2f>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	4a06      	ldr	r2, [pc, #24]	@ (8009b00 <GYRO_Pol+0xa4>)
 8009ae8:	6013      	str	r3, [r2, #0]

			Failsafe_flag();
		}
*/
	}
}
 8009aea:	bf00      	nop
 8009aec:	3708      	adds	r7, #8
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bdb0      	pop	{r4, r5, r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20000404 	.word	0x20000404
 8009af8:	408f4000 	.word	0x408f4000
 8009afc:	200003f8 	.word	0x200003f8
 8009b00:	200003f4 	.word	0x200003f4

08009b04 <GYRO_staErrChkAngle>:
//	f_NowAccel = Accel_getSpeedErr();			// 加速度取得 (0.001sec毎の加速度)

}

void GYRO_staErrChkAngle( void )
{
 8009b04:	b480      	push	{r7}
 8009b06:	af00      	add	r7, sp, #0
	f_ErrChkAngle = 0;
 8009b08:	4b05      	ldr	r3, [pc, #20]	@ (8009b20 <GYRO_staErrChkAngle+0x1c>)
 8009b0a:	f04f 0200 	mov.w	r2, #0
 8009b0e:	601a      	str	r2, [r3, #0]
	bl_ErrChk = TRUE;
 8009b10:	4b04      	ldr	r3, [pc, #16]	@ (8009b24 <GYRO_staErrChkAngle+0x20>)
 8009b12:	2201      	movs	r2, #1
 8009b14:	701a      	strb	r2, [r3, #0]

}
 8009b16:	bf00      	nop
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	200003f4 	.word	0x200003f4
 8009b24:	200003f8 	.word	0x200003f8

08009b28 <GYRO_endErrChkAngle>:

void GYRO_endErrChkAngle( void )
{
 8009b28:	b480      	push	{r7}
 8009b2a:	af00      	add	r7, sp, #0
	f_ErrChkAngle = 0;
 8009b2c:	4b05      	ldr	r3, [pc, #20]	@ (8009b44 <GYRO_endErrChkAngle+0x1c>)
 8009b2e:	f04f 0200 	mov.w	r2, #0
 8009b32:	601a      	str	r2, [r3, #0]
	bl_ErrChk = FALSE;
 8009b34:	4b04      	ldr	r3, [pc, #16]	@ (8009b48 <GYRO_endErrChkAngle+0x20>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	701a      	strb	r2, [r3, #0]

}
 8009b3a:	bf00      	nop
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	200003f4 	.word	0x200003f4
 8009b48:	200003f8 	.word	0x200003f8

08009b4c <HAL_init>:
#include "hal/init.h"



void HAL_init( void )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	af00      	add	r7, sp, #0
	TIME_init();
 8009b50:	f000 f840 	bl	8009bd4 <TIME_init>
	/* ジャイロセンサ */
	f_GyroNowAngle = 0;			// ジャイロセンサの現在角度(0にしても探索他は動くが、宴会とかtestrunとかは動かない)修正済みと思われる
 8009b54:	4b1a      	ldr	r3, [pc, #104]	@ (8009bc0 <HAL_init+0x74>)
 8009b56:	f04f 0200 	mov.w	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]
	l_GyroRef  = 0;				// ジャイロセンサの基準値
 8009b5c:	4b19      	ldr	r3, [pc, #100]	@ (8009bc4 <HAL_init+0x78>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	601a      	str	r2, [r3, #0]

	f_ErrChkAngle = 0;
 8009b62:	4b19      	ldr	r3, [pc, #100]	@ (8009bc8 <HAL_init+0x7c>)
 8009b64:	f04f 0200 	mov.w	r2, #0
 8009b68:	601a      	str	r2, [r3, #0]
	bl_ErrChk = FALSE;
 8009b6a:	4b18      	ldr	r3, [pc, #96]	@ (8009bcc <HAL_init+0x80>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	701a      	strb	r2, [r3, #0]
	DIST_init();
 8009b70:	f008 ffb0 	bl	8012ad4 <DIST_init>
	MAP_Goal_init();
 8009b74:	f00c ffa6 	bl	8016ac4 <MAP_Goal_init>
  	ADC3_Start();
 8009b78:	f7f7 fdc6 	bl	8001708 <ADC3_Start>
  	ADC2_Start();
 8009b7c:	f7f7 fdd0 	bl	8001720 <ADC2_Start>
  	ADC1_Start();
 8009b80:	f7f7 fdda 	bl	8001738 <ADC1_Start>
	LL_mDelay(10);
 8009b84:	200a      	movs	r0, #10
 8009b86:	f011 ff71 	bl	801ba6c <LL_mDelay>

  	SPI2_Start();
 8009b8a:	f7fa fe1b 	bl	80047c4 <SPI2_Start>
  	ICM_42688_init();
 8009b8e:	f7ff fe65 	bl	800985c <ICM_42688_init>
  	ICM_42688_whoami();
 8009b92:	f7ff fe11 	bl	80097b8 <ICM_42688_whoami>
	ICM_42688_whoami();
 8009b96:	f7ff fe0f 	bl	80097b8 <ICM_42688_whoami>
	LL_mDelay(30);
 8009b9a:	201e      	movs	r0, #30
 8009b9c:	f011 ff66 	bl	801ba6c <LL_mDelay>
	TIMER_init();
 8009ba0:	f7fc f876 	bl	8005c90 <TIMER_init>
	SYS_start();
 8009ba4:	f000 fa1c 	bl	8009fe0 <SYS_start>
	MAP_init();
 8009ba8:	f00c ff66 	bl	8016a78 <MAP_init>
	GYRO_SetRef();
 8009bac:	f7ff fec0 	bl	8009930 <GYRO_SetRef>
	printf("Goal X %d Goal Y %d \r\n",GOAL_MAP_X_DEF,GOAL_MAP_Y_DEF);
 8009bb0:	2207      	movs	r2, #7
 8009bb2:	2108      	movs	r1, #8
 8009bb4:	4806      	ldr	r0, [pc, #24]	@ (8009bd0 <HAL_init+0x84>)
 8009bb6:	f014 f84d 	bl	801dc54 <iprintf>
}
 8009bba:	bf00      	nop
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20000404 	.word	0x20000404
 8009bc4:	20000408 	.word	0x20000408
 8009bc8:	200003f4 	.word	0x200003f4
 8009bcc:	200003f8 	.word	0x200003f8
 8009bd0:	08021abc 	.word	0x08021abc

08009bd4 <TIME_init>:

void TIME_init( void )
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	af00      	add	r7, sp, #0
	/* 初期化 */
	Msec_in = 0;		// 内部時計[msec]
 8009bd8:	4b06      	ldr	r3, [pc, #24]	@ (8009bf4 <TIME_init+0x20>)
 8009bda:	2200      	movs	r2, #0
 8009bdc:	801a      	strh	r2, [r3, #0]
	Sec_in  = 0;		// 内部時計[sec]
 8009bde:	4b06      	ldr	r3, [pc, #24]	@ (8009bf8 <TIME_init+0x24>)
 8009be0:	2200      	movs	r2, #0
 8009be2:	701a      	strb	r2, [r3, #0]
	Min_in  = 0;		// 内部時計[min]
 8009be4:	4b05      	ldr	r3, [pc, #20]	@ (8009bfc <TIME_init+0x28>)
 8009be6:	2200      	movs	r2, #0
 8009be8:	701a      	strb	r2, [r3, #0]
}
 8009bea:	bf00      	nop
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr
 8009bf4:	20000214 	.word	0x20000214
 8009bf8:	20000216 	.word	0x20000216
 8009bfc:	20000217 	.word	0x20000217

08009c00 <log_in2>:
			float log3,float log4,
			float log5,float log6,
			float log7,float log8,
			float log9,float log10,
			float log11,float log12)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b08d      	sub	sp, #52	@ 0x34
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 8009c0a:	edc7 0a0a 	vstr	s1, [r7, #40]	@ 0x28
 8009c0e:	ed87 1a09 	vstr	s2, [r7, #36]	@ 0x24
 8009c12:	edc7 1a08 	vstr	s3, [r7, #32]
 8009c16:	ed87 2a07 	vstr	s4, [r7, #28]
 8009c1a:	edc7 2a06 	vstr	s5, [r7, #24]
 8009c1e:	ed87 3a05 	vstr	s6, [r7, #20]
 8009c22:	edc7 3a04 	vstr	s7, [r7, #16]
 8009c26:	ed87 4a03 	vstr	s8, [r7, #12]
 8009c2a:	edc7 4a02 	vstr	s9, [r7, #8]
 8009c2e:	ed87 5a01 	vstr	s10, [r7, #4]
 8009c32:	edc7 5a00 	vstr	s11, [r7]
	if((b_logflag == TRUE)&&(log_count < log_num)){
 8009c36:	4b34      	ldr	r3, [pc, #208]	@ (8009d08 <log_in2+0x108>)
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d05e      	beq.n	8009cfc <log_in2+0xfc>
 8009c3e:	4b33      	ldr	r3, [pc, #204]	@ (8009d0c <log_in2+0x10c>)
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009c46:	d259      	bcs.n	8009cfc <log_in2+0xfc>
		Log_1[log_count] = log1;
 8009c48:	4b30      	ldr	r3, [pc, #192]	@ (8009d0c <log_in2+0x10c>)
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	4a30      	ldr	r2, [pc, #192]	@ (8009d10 <log_in2+0x110>)
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c54:	601a      	str	r2, [r3, #0]
		Log_2[log_count] = log2;
 8009c56:	4b2d      	ldr	r3, [pc, #180]	@ (8009d0c <log_in2+0x10c>)
 8009c58:	881b      	ldrh	r3, [r3, #0]
 8009c5a:	4a2e      	ldr	r2, [pc, #184]	@ (8009d14 <log_in2+0x114>)
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4413      	add	r3, r2
 8009c60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c62:	601a      	str	r2, [r3, #0]
		Log_3[log_count] = log3;
 8009c64:	4b29      	ldr	r3, [pc, #164]	@ (8009d0c <log_in2+0x10c>)
 8009c66:	881b      	ldrh	r3, [r3, #0]
 8009c68:	4a2b      	ldr	r2, [pc, #172]	@ (8009d18 <log_in2+0x118>)
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4413      	add	r3, r2
 8009c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c70:	601a      	str	r2, [r3, #0]
		Log_4[log_count] = log4;
 8009c72:	4b26      	ldr	r3, [pc, #152]	@ (8009d0c <log_in2+0x10c>)
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	4a29      	ldr	r2, [pc, #164]	@ (8009d1c <log_in2+0x11c>)
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	6a3a      	ldr	r2, [r7, #32]
 8009c7e:	601a      	str	r2, [r3, #0]
		Log_5[log_count] = log5;
 8009c80:	4b22      	ldr	r3, [pc, #136]	@ (8009d0c <log_in2+0x10c>)
 8009c82:	881b      	ldrh	r3, [r3, #0]
 8009c84:	4a26      	ldr	r2, [pc, #152]	@ (8009d20 <log_in2+0x120>)
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	69fa      	ldr	r2, [r7, #28]
 8009c8c:	601a      	str	r2, [r3, #0]
		Log_6[log_count] = log6;
 8009c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8009d0c <log_in2+0x10c>)
 8009c90:	881b      	ldrh	r3, [r3, #0]
 8009c92:	4a24      	ldr	r2, [pc, #144]	@ (8009d24 <log_in2+0x124>)
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	69ba      	ldr	r2, [r7, #24]
 8009c9a:	601a      	str	r2, [r3, #0]
		Log_7[log_count] = log7;
 8009c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8009d0c <log_in2+0x10c>)
 8009c9e:	881b      	ldrh	r3, [r3, #0]
 8009ca0:	4a21      	ldr	r2, [pc, #132]	@ (8009d28 <log_in2+0x128>)
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	697a      	ldr	r2, [r7, #20]
 8009ca8:	601a      	str	r2, [r3, #0]
		Log_8[log_count] = log8;
 8009caa:	4b18      	ldr	r3, [pc, #96]	@ (8009d0c <log_in2+0x10c>)
 8009cac:	881b      	ldrh	r3, [r3, #0]
 8009cae:	4a1f      	ldr	r2, [pc, #124]	@ (8009d2c <log_in2+0x12c>)
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	693a      	ldr	r2, [r7, #16]
 8009cb6:	601a      	str	r2, [r3, #0]
		Log_9[log_count] = log9;
 8009cb8:	4b14      	ldr	r3, [pc, #80]	@ (8009d0c <log_in2+0x10c>)
 8009cba:	881b      	ldrh	r3, [r3, #0]
 8009cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8009d30 <log_in2+0x130>)
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	601a      	str	r2, [r3, #0]
		Log_10[log_count] = log10;
 8009cc6:	4b11      	ldr	r3, [pc, #68]	@ (8009d0c <log_in2+0x10c>)
 8009cc8:	881b      	ldrh	r3, [r3, #0]
 8009cca:	4a1a      	ldr	r2, [pc, #104]	@ (8009d34 <log_in2+0x134>)
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	601a      	str	r2, [r3, #0]
		Log_11[log_count] = log11;
 8009cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8009d0c <log_in2+0x10c>)
 8009cd6:	881b      	ldrh	r3, [r3, #0]
 8009cd8:	4a17      	ldr	r2, [pc, #92]	@ (8009d38 <log_in2+0x138>)
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	601a      	str	r2, [r3, #0]
		Log_12[log_count] = log12;
 8009ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8009d0c <log_in2+0x10c>)
 8009ce4:	881b      	ldrh	r3, [r3, #0]
 8009ce6:	4a15      	ldr	r2, [pc, #84]	@ (8009d3c <log_in2+0x13c>)
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	683a      	ldr	r2, [r7, #0]
 8009cee:	601a      	str	r2, [r3, #0]
//		Log_13[log_count] = log13;
//		Log_14[log_count] = log14;

		log_count++;
 8009cf0:	4b06      	ldr	r3, [pc, #24]	@ (8009d0c <log_in2+0x10c>)
 8009cf2:	881b      	ldrh	r3, [r3, #0]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	b29a      	uxth	r2, r3
 8009cf8:	4b04      	ldr	r3, [pc, #16]	@ (8009d0c <log_in2+0x10c>)
 8009cfa:	801a      	strh	r2, [r3, #0]
	}
}
 8009cfc:	bf00      	nop
 8009cfe:	3734      	adds	r7, #52	@ 0x34
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr
 8009d08:	20017b0e 	.word	0x20017b0e
 8009d0c:	20017b0c 	.word	0x20017b0c
 8009d10:	2000040c 	.word	0x2000040c
 8009d14:	2000234c 	.word	0x2000234c
 8009d18:	2000428c 	.word	0x2000428c
 8009d1c:	200061cc 	.word	0x200061cc
 8009d20:	2000810c 	.word	0x2000810c
 8009d24:	2000a04c 	.word	0x2000a04c
 8009d28:	2000bf8c 	.word	0x2000bf8c
 8009d2c:	2000decc 	.word	0x2000decc
 8009d30:	2000fe0c 	.word	0x2000fe0c
 8009d34:	20011d4c 	.word	0x20011d4c
 8009d38:	20013c8c 	.word	0x20013c8c
 8009d3c:	20015bcc 	.word	0x20015bcc

08009d40 <log_interrupt>:

void log_interrupt ( void )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	ed2d 8b08 	vpush	{d8-d11}
 8009d46:	af00      	add	r7, sp, #0
	log_in2(GYRO_getSpeedErr(), Get_TrgtAngleS(),
 8009d48:	f7ff fe1e 	bl	8009988 <GYRO_getSpeedErr>
 8009d4c:	eeb0 8a40 	vmov.f32	s16, s0
 8009d50:	f7fc fb1c 	bl	800638c <Get_TrgtAngleS>
 8009d54:	eef0 8a40 	vmov.f32	s17, s0
 8009d58:	f7fc fafc 	bl	8006354 <Get_NowAngle>
 8009d5c:	eeb0 9a40 	vmov.f32	s18, s0
 8009d60:	f7fc fb06 	bl	8006370 <Get_TrgtAngle>
 8009d64:	eef0 9a40 	vmov.f32	s19, s0
 8009d68:	f7fc fa9e 	bl	80062a8 <Get_NowSpeed>
 8009d6c:	eeb0 aa40 	vmov.f32	s20, s0
 8009d70:	f7fc fac4 	bl	80062fc <Get_TrgtSpeed>
 8009d74:	eef0 aa40 	vmov.f32	s21, s0
 8009d78:	f7fc faa4 	bl	80062c4 <Get_NowDist>
 8009d7c:	eeb0 ba40 	vmov.f32	s22, s0
 8009d80:	f7fc faae 	bl	80062e0 <Get_TrgtDist>
 8009d84:	eef0 3a40 	vmov.f32	s7, s0
 8009d88:	4b14      	ldr	r3, [pc, #80]	@ (8009ddc <log_interrupt+0x9c>)
 8009d8a:	edd3 7a00 	vldr	s15, [r3]
 8009d8e:	4b14      	ldr	r3, [pc, #80]	@ (8009de0 <log_interrupt+0xa0>)
 8009d90:	ed93 7a00 	vldr	s14, [r3]
 8009d94:	4b13      	ldr	r3, [pc, #76]	@ (8009de4 <log_interrupt+0xa4>)
 8009d96:	edd3 6a00 	vldr	s13, [r3]
 8009d9a:	4b13      	ldr	r3, [pc, #76]	@ (8009de8 <log_interrupt+0xa8>)
 8009d9c:	ed93 6a00 	vldr	s12, [r3]
 8009da0:	eef0 5a46 	vmov.f32	s11, s12
 8009da4:	eeb0 5a66 	vmov.f32	s10, s13
 8009da8:	eef0 4a47 	vmov.f32	s9, s14
 8009dac:	eeb0 4a67 	vmov.f32	s8, s15
 8009db0:	eeb0 3a4b 	vmov.f32	s6, s22
 8009db4:	eef0 2a6a 	vmov.f32	s5, s21
 8009db8:	eeb0 2a4a 	vmov.f32	s4, s20
 8009dbc:	eef0 1a69 	vmov.f32	s3, s19
 8009dc0:	eeb0 1a49 	vmov.f32	s2, s18
 8009dc4:	eef0 0a68 	vmov.f32	s1, s17
 8009dc8:	eeb0 0a48 	vmov.f32	s0, s16
 8009dcc:	f7ff ff18 	bl	8009c00 <log_in2>
			Get_NowAngle(),Get_TrgtAngle(),
			Get_NowSpeed(), Get_TrgtSpeed(),
			Get_NowDist(), Get_TrgtDist(),TempLog1,TempLog2,TempLog3,TempLog4);

}
 8009dd0:	bf00      	nop
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	ecbd 8b08 	vpop	{d8-d11}
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	20017b10 	.word	0x20017b10
 8009de0:	20017b14 	.word	0x20017b14
 8009de4:	20017b18 	.word	0x20017b18
 8009de8:	20017b1c 	.word	0x20017b1c

08009dec <log_flag_on>:

void log_flag_on(void)
{
 8009dec:	b480      	push	{r7}
 8009dee:	af00      	add	r7, sp, #0
	b_logflag = TRUE;
 8009df0:	4b03      	ldr	r3, [pc, #12]	@ (8009e00 <log_flag_on+0x14>)
 8009df2:	2201      	movs	r2, #1
 8009df4:	701a      	strb	r2, [r3, #0]
}
 8009df6:	bf00      	nop
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	20017b0e 	.word	0x20017b0e

08009e04 <log_flag_off>:

void log_flag_off(void)
{
 8009e04:	b480      	push	{r7}
 8009e06:	af00      	add	r7, sp, #0
	b_logflag = FALSE;
 8009e08:	4b03      	ldr	r3, [pc, #12]	@ (8009e18 <log_flag_off+0x14>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	701a      	strb	r2, [r3, #0]
}
 8009e0e:	bf00      	nop
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	20017b0e 	.word	0x20017b0e

08009e1c <log_read2>:

void log_read2(void)
{
 8009e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e20:	b0a8      	sub	sp, #160	@ 0xa0
 8009e22:	af16      	add	r7, sp, #88	@ 0x58
	int16_t i=0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	while(i<log_num){
 8009e2a:	e0b3      	b.n	8009f94 <log_read2+0x178>
		(float)Log_1[i]/1000.0,(float)Log_2[i]/1000.0,(float)Log_3[i]/1000.0,(float)Log_4[i]/1000.0,(float)Log_5[i]/1000.0,
		(float)Log_6[i]/1000.0,(float)Log_7[i]/1000.0,(float)Log_8[i]/1000.0,(float)Log_9[i]/1000.0,(float)Log_10[i]/1000.0,
		(float)Log_11[i]/1000.0,(float)Log_12[i]/1000.0,(float)Log_13[i]/1000.0,(float)Log_14[i]/1000.0);
*/
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009e2c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009e30:	4a5e      	ldr	r2, [pc, #376]	@ (8009fac <log_read2+0x190>)
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	4413      	add	r3, r2
 8009e36:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7f6 fbad 	bl	8000598 <__aeabi_f2d>
 8009e3e:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009e42:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009e46:	4a5a      	ldr	r2, [pc, #360]	@ (8009fb0 <log_read2+0x194>)
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	4413      	add	r3, r2
 8009e4c:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7f6 fba2 	bl	8000598 <__aeabi_f2d>
 8009e54:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009e58:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009e5c:	4a55      	ldr	r2, [pc, #340]	@ (8009fb4 <log_read2+0x198>)
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4413      	add	r3, r2
 8009e62:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7f6 fb97 	bl	8000598 <__aeabi_f2d>
 8009e6a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009e6e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009e72:	4a51      	ldr	r2, [pc, #324]	@ (8009fb8 <log_read2+0x19c>)
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4413      	add	r3, r2
 8009e78:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7f6 fb8c 	bl	8000598 <__aeabi_f2d>
 8009e80:	e9c7 0108 	strd	r0, r1, [r7, #32]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009e84:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009e88:	4a4c      	ldr	r2, [pc, #304]	@ (8009fbc <log_read2+0x1a0>)
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7f6 fb81 	bl	8000598 <__aeabi_f2d>
 8009e96:	e9c7 0106 	strd	r0, r1, [r7, #24]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009e9a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009e9e:	4a48      	ldr	r2, [pc, #288]	@ (8009fc0 <log_read2+0x1a4>)
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7f6 fb76 	bl	8000598 <__aeabi_f2d>
 8009eac:	e9c7 0104 	strd	r0, r1, [r7, #16]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009eb0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009eb4:	4a43      	ldr	r2, [pc, #268]	@ (8009fc4 <log_read2+0x1a8>)
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	4413      	add	r3, r2
 8009eba:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7f6 fb6b 	bl	8000598 <__aeabi_f2d>
 8009ec2:	e9c7 0102 	strd	r0, r1, [r7, #8]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009ec6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009eca:	4a3f      	ldr	r2, [pc, #252]	@ (8009fc8 <log_read2+0x1ac>)
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	4413      	add	r3, r2
 8009ed0:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7f6 fb60 	bl	8000598 <__aeabi_f2d>
 8009ed8:	e9c7 0100 	strd	r0, r1, [r7]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009edc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009ee0:	4a3a      	ldr	r2, [pc, #232]	@ (8009fcc <log_read2+0x1b0>)
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4413      	add	r3, r2
 8009ee6:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7f6 fb55 	bl	8000598 <__aeabi_f2d>
 8009eee:	4682      	mov	sl, r0
 8009ef0:	468b      	mov	fp, r1
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009ef2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009ef6:	4a36      	ldr	r2, [pc, #216]	@ (8009fd0 <log_read2+0x1b4>)
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4413      	add	r3, r2
 8009efc:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7f6 fb4a 	bl	8000598 <__aeabi_f2d>
 8009f04:	4680      	mov	r8, r0
 8009f06:	4689      	mov	r9, r1
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009f08:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009f0c:	4a31      	ldr	r2, [pc, #196]	@ (8009fd4 <log_read2+0x1b8>)
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7f6 fb3f 	bl	8000598 <__aeabi_f2d>
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	460d      	mov	r5, r1
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009f1e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009f22:	4a2d      	ldr	r2, [pc, #180]	@ (8009fd8 <log_read2+0x1bc>)
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7f6 fb34 	bl	8000598 <__aeabi_f2d>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8009f38:	e9cd 4512 	strd	r4, r5, [sp, #72]	@ 0x48
 8009f3c:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
 8009f40:	e9cd ab0e 	strd	sl, fp, [sp, #56]	@ 0x38
 8009f44:	ed97 7b00 	vldr	d7, [r7]
 8009f48:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009f4c:	ed97 7b02 	vldr	d7, [r7, #8]
 8009f50:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009f54:	ed97 7b04 	vldr	d7, [r7, #16]
 8009f58:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009f5c:	ed97 7b06 	vldr	d7, [r7, #24]
 8009f60:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f64:	ed97 7b08 	vldr	d7, [r7, #32]
 8009f68:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009f6c:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8009f70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f74:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8009f78:	ed8d 7b00 	vstr	d7, [sp]
 8009f7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009f80:	4816      	ldr	r0, [pc, #88]	@ (8009fdc <log_read2+0x1c0>)
 8009f82:	f013 fe67 	bl	801dc54 <iprintf>
		
		i++;
 8009f86:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	while(i<log_num){
 8009f94:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009f98:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009f9c:	f6ff af46 	blt.w	8009e2c <log_read2+0x10>
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
		i++;
	}
*/
}
 8009fa0:	bf00      	nop
 8009fa2:	bf00      	nop
 8009fa4:	3748      	adds	r7, #72	@ 0x48
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fac:	2000040c 	.word	0x2000040c
 8009fb0:	2000234c 	.word	0x2000234c
 8009fb4:	2000428c 	.word	0x2000428c
 8009fb8:	200061cc 	.word	0x200061cc
 8009fbc:	2000810c 	.word	0x2000810c
 8009fc0:	2000a04c 	.word	0x2000a04c
 8009fc4:	2000bf8c 	.word	0x2000bf8c
 8009fc8:	2000decc 	.word	0x2000decc
 8009fcc:	2000fe0c 	.word	0x2000fe0c
 8009fd0:	20011d4c 	.word	0x20011d4c
 8009fd4:	20013c8c 	.word	0x20013c8c
 8009fd8:	20015bcc 	.word	0x20015bcc
 8009fdc:	08021ad4 	.word	0x08021ad4

08009fe0 <SYS_start>:
uint8_t		WallHitFlag = 0; //0 = not wall_hit

extern uint8_t			SLA_Count;

void SYS_start( void )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	af00      	add	r7, sp, #0
	/* タイトル表示 */
	printf(" ------------------------------\r\n");
 8009fe4:	4825      	ldr	r0, [pc, #148]	@ (800a07c <SYS_start+0x9c>)
 8009fe6:	f013 fea5 	bl	801dd34 <puts>
	printf(" | Robo Name  : hankyo2       |\r\n");
 8009fea:	4825      	ldr	r0, [pc, #148]	@ (800a080 <SYS_start+0xa0>)
 8009fec:	f013 fea2 	bl	801dd34 <puts>
	printf(" | Developer  : sho sato      |\r\n");
 8009ff0:	4824      	ldr	r0, [pc, #144]	@ (800a084 <SYS_start+0xa4>)
 8009ff2:	f013 fe9f 	bl	801dd34 <puts>
	printf(" | Version    : ver1          |\r\n");
 8009ff6:	4824      	ldr	r0, [pc, #144]	@ (800a088 <SYS_start+0xa8>)
 8009ff8:	f013 fe9c 	bl	801dd34 <puts>
	printf(" | Project By : RT Corporation|\r\n");
 8009ffc:	4823      	ldr	r0, [pc, #140]	@ (800a08c <SYS_start+0xac>)
 8009ffe:	f013 fe99 	bl	801dd34 <puts>
	printf(" ------------------------------\r\n");	
 800a002:	481e      	ldr	r0, [pc, #120]	@ (800a07c <SYS_start+0x9c>)
 800a004:	f013 fe96 	bl	801dd34 <puts>

	printf("\r\n turn 45 \r\r");
 800a008:	4821      	ldr	r0, [pc, #132]	@ (800a090 <SYS_start+0xb0>)
 800a00a:	f013 fe23 	bl	801dc54 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 2.00f,3000*PI, SLA_45 );
 800a00e:	2001      	movs	r0, #1
 800a010:	eddf 1a20 	vldr	s3, [pc, #128]	@ 800a094 <SYS_start+0xb4>
 800a014:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800a018:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 800a098 <SYS_start+0xb8>
 800a01c:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800a09c <SYS_start+0xbc>
 800a020:	f7f8 fc0a 	bl	8002838 <PARAM_makeSra>
	printf("\r\n turn 90 \r\r");		
 800a024:	481e      	ldr	r0, [pc, #120]	@ (800a0a0 <SYS_start+0xc0>)
 800a026:	f013 fe15 	bl	801dc54 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 3.50f,3000*PI,  SLA_90 );	
 800a02a:	2000      	movs	r0, #0
 800a02c:	eddf 1a19 	vldr	s3, [pc, #100]	@ 800a094 <SYS_start+0xb4>
 800a030:	eeb0 1a0c 	vmov.f32	s2, #12	@ 0x40600000  3.5
 800a034:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 800a0a4 <SYS_start+0xc4>
 800a038:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800a09c <SYS_start+0xbc>
 800a03c:	f7f8 fbfc 	bl	8002838 <PARAM_makeSra>
//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f, SLA_90 );
	printf("\r\n turn 135 \r\r");	
 800a040:	4819      	ldr	r0, [pc, #100]	@ (800a0a8 <SYS_start+0xc8>)
 800a042:	f013 fe07 	bl	801dc54 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 4.00f,3000*PI,  SLA_135 );	
 800a046:	2002      	movs	r0, #2
 800a048:	eddf 1a12 	vldr	s3, [pc, #72]	@ 800a094 <SYS_start+0xb4>
 800a04c:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 800a050:	eddf 0a14 	vldr	s1, [pc, #80]	@ 800a0a4 <SYS_start+0xc4>
 800a054:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 800a09c <SYS_start+0xbc>
 800a058:	f7f8 fbee 	bl	8002838 <PARAM_makeSra>
	printf("\r\n turn N90 \r\r");	
 800a05c:	4813      	ldr	r0, [pc, #76]	@ (800a0ac <SYS_start+0xcc>)
 800a05e:	f013 fdf9 	bl	801dc54 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 300.0f, 5.00f,3500*PI,  SLA_N90 );		
 800a062:	2003      	movs	r0, #3
 800a064:	eddf 1a12 	vldr	s3, [pc, #72]	@ 800a0b0 <SYS_start+0xd0>
 800a068:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 800a06c:	eddf 0a11 	vldr	s1, [pc, #68]	@ 800a0b4 <SYS_start+0xd4>
 800a070:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800a09c <SYS_start+0xbc>
 800a074:	f7f8 fbe0 	bl	8002838 <PARAM_makeSra>
	printf("\r\n turn 135 \r\r");	
	PARAM_makeSra( 0.5, 750.0f, 10.00f,3000*PI,  SLA_135 );	
	printf("\r\n turn N90 \r\r");	
	PARAM_makeSra( 0.5, 800.0f, 11.00f,3000*PI,  SLA_N90 );	
*/
}
 800a078:	bf00      	nop
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	08021b20 	.word	0x08021b20
 800a080:	08021b44 	.word	0x08021b44
 800a084:	08021b68 	.word	0x08021b68
 800a088:	08021b8c 	.word	0x08021b8c
 800a08c:	08021bb0 	.word	0x08021bb0
 800a090:	08021bd4 	.word	0x08021bd4
 800a094:	46134315 	.word	0x46134315
 800a098:	43160000 	.word	0x43160000
 800a09c:	3e99999a 	.word	0x3e99999a
 800a0a0:	08021be4 	.word	0x08021be4
 800a0a4:	43480000 	.word	0x43480000
 800a0a8:	08021bf4 	.word	0x08021bf4
 800a0ac:	08021c04 	.word	0x08021c04
 800a0b0:	462bce43 	.word	0x462bce43
 800a0b4:	43960000 	.word	0x43960000

0800a0b8 <MODE_inc>:

void MODE_inc( void )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	af00      	add	r7, sp, #0
	en_Mode++;		// モードを�?�?
 800a0bc:	4b35      	ldr	r3, [pc, #212]	@ (800a194 <MODE_inc+0xdc>)
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	b2da      	uxtb	r2, r3
 800a0c4:	4b33      	ldr	r3, [pc, #204]	@ (800a194 <MODE_inc+0xdc>)
 800a0c6:	701a      	strb	r2, [r3, #0]

	/* 最大値チェ�?ク */
	if( MODE_MAX == en_Mode ){
 800a0c8:	4b32      	ldr	r3, [pc, #200]	@ (800a194 <MODE_inc+0xdc>)
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	2b08      	cmp	r3, #8
 800a0ce:	d102      	bne.n	800a0d6 <MODE_inc+0x1e>
		en_Mode = MODE_0;
 800a0d0:	4b30      	ldr	r3, [pc, #192]	@ (800a194 <MODE_inc+0xdc>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	701a      	strb	r2, [r3, #0]
	}

	/* モード表示 */
	switch( en_Mode ){
 800a0d6:	4b2f      	ldr	r3, [pc, #188]	@ (800a194 <MODE_inc+0xdc>)
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	2b07      	cmp	r3, #7
 800a0dc:	d857      	bhi.n	800a18e <MODE_inc+0xd6>
 800a0de:	a201      	add	r2, pc, #4	@ (adr r2, 800a0e4 <MODE_inc+0x2c>)
 800a0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e4:	0800a105 	.word	0x0800a105
 800a0e8:	0800a111 	.word	0x0800a111
 800a0ec:	0800a123 	.word	0x0800a123
 800a0f0:	0800a135 	.word	0x0800a135
 800a0f4:	0800a147 	.word	0x0800a147
 800a0f8:	0800a159 	.word	0x0800a159
 800a0fc:	0800a16b 	.word	0x0800a16b
 800a100:	0800a17d 	.word	0x0800a17d

		case MODE_0:
			SetLED(0x00 | NowModeLed);
 800a104:	4b24      	ldr	r3, [pc, #144]	@ (800a198 <MODE_inc+0xe0>)
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	4618      	mov	r0, r3
 800a10a:	f7f7 fee5 	bl	8001ed8 <SetLED>
			break;
 800a10e:	e03f      	b.n	800a190 <MODE_inc+0xd8>

		case MODE_1:
			SetLED((0x01<<1) | NowModeLed);
 800a110:	4b21      	ldr	r3, [pc, #132]	@ (800a198 <MODE_inc+0xe0>)
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	f043 0302 	orr.w	r3, r3, #2
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7f7 fedc 	bl	8001ed8 <SetLED>
			break;
 800a120:	e036      	b.n	800a190 <MODE_inc+0xd8>

		case MODE_2:
			SetLED((0x02<<1) | NowModeLed);
 800a122:	4b1d      	ldr	r3, [pc, #116]	@ (800a198 <MODE_inc+0xe0>)
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	f043 0304 	orr.w	r3, r3, #4
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7f7 fed3 	bl	8001ed8 <SetLED>
			break;
 800a132:	e02d      	b.n	800a190 <MODE_inc+0xd8>

		case MODE_3:
			SetLED((0x03<<1) | NowModeLed);
 800a134:	4b18      	ldr	r3, [pc, #96]	@ (800a198 <MODE_inc+0xe0>)
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	f043 0306 	orr.w	r3, r3, #6
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	4618      	mov	r0, r3
 800a140:	f7f7 feca 	bl	8001ed8 <SetLED>
			break;
 800a144:	e024      	b.n	800a190 <MODE_inc+0xd8>

		case MODE_4:
			SetLED((0x04<<1) | NowModeLed);
 800a146:	4b14      	ldr	r3, [pc, #80]	@ (800a198 <MODE_inc+0xe0>)
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	f043 0308 	orr.w	r3, r3, #8
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	4618      	mov	r0, r3
 800a152:	f7f7 fec1 	bl	8001ed8 <SetLED>
			break;
 800a156:	e01b      	b.n	800a190 <MODE_inc+0xd8>

		case MODE_5:
			SetLED((0x05<<1) | NowModeLed);
 800a158:	4b0f      	ldr	r3, [pc, #60]	@ (800a198 <MODE_inc+0xe0>)
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	f043 030a 	orr.w	r3, r3, #10
 800a160:	b2db      	uxtb	r3, r3
 800a162:	4618      	mov	r0, r3
 800a164:	f7f7 feb8 	bl	8001ed8 <SetLED>
			break;
 800a168:	e012      	b.n	800a190 <MODE_inc+0xd8>

		case MODE_6:
			SetLED((0x06<<1) | NowModeLed);
 800a16a:	4b0b      	ldr	r3, [pc, #44]	@ (800a198 <MODE_inc+0xe0>)
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	f043 030c 	orr.w	r3, r3, #12
 800a172:	b2db      	uxtb	r3, r3
 800a174:	4618      	mov	r0, r3
 800a176:	f7f7 feaf 	bl	8001ed8 <SetLED>
			break;
 800a17a:	e009      	b.n	800a190 <MODE_inc+0xd8>

		case MODE_7:
			SetLED((0x07<<1) | NowModeLed);
 800a17c:	4b06      	ldr	r3, [pc, #24]	@ (800a198 <MODE_inc+0xe0>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	f043 030e 	orr.w	r3, r3, #14
 800a184:	b2db      	uxtb	r3, r3
 800a186:	4618      	mov	r0, r3
 800a188:	f7f7 fea6 	bl	8001ed8 <SetLED>
			break;
 800a18c:	e000      	b.n	800a190 <MODE_inc+0xd8>

		default:
			break;
 800a18e:	bf00      	nop
	}
}
 800a190:	bf00      	nop
 800a192:	bd80      	pop	{r7, pc}
 800a194:	20017b28 	.word	0x20017b28
 800a198:	2000000c 	.word	0x2000000c
 800a19c:	00000000 	.word	0x00000000

0800a1a0 <CountUP_mode>:

bool CountUP_mode(void){
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	af00      	add	r7, sp, #0
	if(Get_NowDistR()>0.01){
 800a1a4:	f7fc f8c8 	bl	8006338 <Get_NowDistR>
 800a1a8:	ee10 3a10 	vmov	r3, s0
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7f6 f9f3 	bl	8000598 <__aeabi_f2d>
 800a1b2:	a307      	add	r3, pc, #28	@ (adr r3, 800a1d0 <CountUP_mode+0x30>)
 800a1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b8:	f7f6 fcd6 	bl	8000b68 <__aeabi_dcmpgt>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d003      	beq.n	800a1ca <CountUP_mode+0x2a>
    CTRL_clrNowData();
 800a1c2:	f7fc f9af 	bl	8006524 <CTRL_clrNowData>
    return TRUE;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e000      	b.n	800a1cc <CountUP_mode+0x2c>
  }else{
    return FALSE;
 800a1ca:	2300      	movs	r3, #0
  }
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	47ae147b 	.word	0x47ae147b
 800a1d4:	3f847ae1 	.word	0x3f847ae1

0800a1d8 <MODE_speed_parameter>:
	float				trgt_speed,
	float				sla_sp_90,
	float				sla_sp_45,
	float				sla_sp_135,
	float				sla_sp_N90
){
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	ed87 0a04 	vstr	s0, [r7, #16]
 800a1e4:	edc7 0a03 	vstr	s1, [r7, #12]
 800a1e8:	ed87 1a02 	vstr	s2, [r7, #8]
 800a1ec:	edc7 1a01 	vstr	s3, [r7, #4]
 800a1f0:	ed87 2a00 	vstr	s4, [r7]
 800a1f4:	75fb      	strb	r3, [r7, #23]
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	75bb      	strb	r3, [r7, #22]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	757b      	strb	r3, [r7, #21]
	PARAM_setSpeedType( PARAM_ST,   speed_para );							// [直進] 速度普�?
 800a1fe:	7dfb      	ldrb	r3, [r7, #23]
 800a200:	4619      	mov	r1, r3
 800a202:	2015      	movs	r0, #21
 800a204:	f7f8 fa76 	bl	80026f4 <PARAM_setSpeedType>
	PARAM_setSpeedType( PARAM_TRUN, turn_para );							// [旋回] 速度普�?
 800a208:	7dbb      	ldrb	r3, [r7, #22]
 800a20a:	4619      	mov	r1, r3
 800a20c:	2016      	movs	r0, #22
 800a20e:	f7f8 fa71 	bl	80026f4 <PARAM_setSpeedType>
	PARAM_setSpeedType( PARAM_SLA,  sla_para );							// [スラ] 速度普�?
 800a212:	7d7b      	ldrb	r3, [r7, #21]
 800a214:	4619      	mov	r1, r3
 800a216:	2017      	movs	r0, #23
 800a218:	f7f8 fa6c 	bl	80026f4 <PARAM_setSpeedType>
	MOT_setTrgtSpeed(trgt_speed);
 800a21c:	ed97 0a04 	vldr	s0, [r7, #16]
 800a220:	f006 ff6e 	bl	8011100 <MOT_setTrgtSpeed>
	MOT_setSlaStaSpeed( sla_sp_90, SLA_90);							// スラロー�?開始速度設�?
 800a224:	2000      	movs	r0, #0
 800a226:	ed97 0a03 	vldr	s0, [r7, #12]
 800a22a:	f006 ff07 	bl	801103c <MOT_setSlaStaSpeed>
	MOT_setSlaStaSpeed( sla_sp_45, SLA_45);
 800a22e:	2001      	movs	r0, #1
 800a230:	ed97 0a02 	vldr	s0, [r7, #8]
 800a234:	f006 ff02 	bl	801103c <MOT_setSlaStaSpeed>
	MOT_setSlaStaSpeed( sla_sp_135, SLA_135);
 800a238:	2002      	movs	r0, #2
 800a23a:	ed97 0a01 	vldr	s0, [r7, #4]
 800a23e:	f006 fefd 	bl	801103c <MOT_setSlaStaSpeed>
	MOT_setSlaStaSpeed( sla_sp_N90, SLA_N90);
 800a242:	2003      	movs	r0, #3
 800a244:	ed97 0a00 	vldr	s0, [r7]
 800a248:	f006 fef8 	bl	801103c <MOT_setSlaStaSpeed>
		
}
 800a24c:	bf00      	nop
 800a24e:	3718      	adds	r7, #24
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <MODE_exe_m0>:

void MODE_exe_m0( void )
{
 800a254:	b5b0      	push	{r4, r5, r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;
	GYRO_SetRef();
 800a25a:	f7ff fb69 	bl	8009930 <GYRO_SetRef>

	CTRL_clrData();
 800a25e:	f7fc f8f1 	bl	8006444 <CTRL_clrData>
	CTRL_clrAngleErrSum();
 800a262:	f7fc f937 	bl	80064d4 <CTRL_clrAngleErrSum>
	CTRL_clrSpeedErrSum();
 800a266:	f7fc f949 	bl	80064fc <CTRL_clrSpeedErrSum>
	CTRL_clrNowData();
 800a26a:	f7fc f95b 	bl	8006524 <CTRL_clrNowData>
	/* モード表示 */
	switch( en_Mode ){
 800a26e:	4bec      	ldr	r3, [pc, #944]	@ (800a620 <MODE_exe_m0+0x3cc>)
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	2b07      	cmp	r3, #7
 800a274:	f200 81d0 	bhi.w	800a618 <MODE_exe_m0+0x3c4>
 800a278:	a201      	add	r2, pc, #4	@ (adr r2, 800a280 <MODE_exe_m0+0x2c>)
 800a27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27e:	bf00      	nop
 800a280:	0800a2a1 	.word	0x0800a2a1
 800a284:	0800a325 	.word	0x0800a325
 800a288:	0800a367 	.word	0x0800a367
 800a28c:	0800a373 	.word	0x0800a373
 800a290:	0800a3c1 	.word	0x0800a3c1
 800a294:	0800a427 	.word	0x0800a427
 800a298:	0800a5b1 	.word	0x0800a5b1
 800a29c:	0800a611 	.word	0x0800a611

		case MODE_0:
			SetLED(0x0e);
 800a2a0:	200e      	movs	r0, #14
 800a2a2:	f7f7 fe19 	bl	8001ed8 <SetLED>
			CTRL_clrNowData();
 800a2a6:	f7fc f93d 	bl	8006524 <CTRL_clrNowData>
			CTRL_clrData();
 800a2aa:	f7fc f8cb 	bl	8006444 <CTRL_clrData>
//			LL_TIM_EnableIT_UPDATE(TIM4);
//			LL_TIM_EnableCounter(TIM4);
			printf("\n");
 800a2ae:	200a      	movs	r0, #10
 800a2b0:	f013 fce2 	bl	801dc78 <putchar>
			LL_mDelay(1000);
 800a2b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a2b8:	f011 fbd8 	bl	801ba6c <LL_mDelay>
			GYRO_SetRef();
 800a2bc:	f7ff fb38 	bl	8009930 <GYRO_SetRef>
			while(1){
				printf("gyro%5.2f ref%5.2f ",
					GYRO_getNowAngle(),GYRO_getRef()
 800a2c0:	f7ff fbae 	bl	8009a20 <GYRO_getNowAngle>
 800a2c4:	ee10 3a10 	vmov	r3, s0
				printf("gyro%5.2f ref%5.2f ",
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7f6 f965 	bl	8000598 <__aeabi_f2d>
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	460d      	mov	r5, r1
					GYRO_getNowAngle(),GYRO_getRef()
 800a2d2:	f7ff fbb3 	bl	8009a3c <GYRO_getRef>
 800a2d6:	ee10 3a10 	vmov	r3, s0
				printf("gyro%5.2f ref%5.2f ",
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7f6 f95c 	bl	8000598 <__aeabi_f2d>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	e9cd 2300 	strd	r2, r3, [sp]
 800a2e8:	4622      	mov	r2, r4
 800a2ea:	462b      	mov	r3, r5
 800a2ec:	48cd      	ldr	r0, [pc, #820]	@ (800a624 <MODE_exe_m0+0x3d0>)
 800a2ee:	f013 fcb1 	bl	801dc54 <iprintf>
				);
				printf("err %5.2f ",GYRO_getSpeedErr());
 800a2f2:	f7ff fb49 	bl	8009988 <GYRO_getSpeedErr>
 800a2f6:	ee10 3a10 	vmov	r3, s0
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7f6 f94c 	bl	8000598 <__aeabi_f2d>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	48c8      	ldr	r0, [pc, #800]	@ (800a628 <MODE_exe_m0+0x3d4>)
 800a306:	f013 fca5 	bl	801dc54 <iprintf>
				printf("s_val%x\r",Get_s_gyro());
 800a30a:	f7ff fa47 	bl	800979c <Get_s_gyro>
 800a30e:	4603      	mov	r3, r0
 800a310:	4619      	mov	r1, r3
 800a312:	48c6      	ldr	r0, [pc, #792]	@ (800a62c <MODE_exe_m0+0x3d8>)
 800a314:	f013 fc9e 	bl	801dc54 <iprintf>
				LL_mDelay( 500 );
 800a318:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a31c:	f011 fba6 	bl	801ba6c <LL_mDelay>
				printf("gyro%5.2f ref%5.2f ",
 800a320:	bf00      	nop
 800a322:	e7cd      	b.n	800a2c0 <MODE_exe_m0+0x6c>
			}
			break;

		case MODE_1:
			SetLED(0x0e);
 800a324:	200e      	movs	r0, #14
 800a326:	f7f7 fdd7 	bl	8001ed8 <SetLED>
			printf("\n");
 800a32a:	200a      	movs	r0, #10
 800a32c:	f013 fca4 	bl	801dc78 <putchar>
			LL_mDelay(1000);
 800a330:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a334:	f011 fb9a 	bl	801ba6c <LL_mDelay>
			SetLED(0x00);
 800a338:	2000      	movs	r0, #0
 800a33a:	f7f7 fdcd 	bl	8001ed8 <SetLED>
			while(1){
				printf("  ENC_R%5d ENC_L%5d \r", 
					Get_encoder_value(EN_R),Get_encoder_value(EN_L)
 800a33e:	2001      	movs	r0, #1
 800a340:	f7ff f9ee 	bl	8009720 <Get_encoder_value>
 800a344:	4603      	mov	r3, r0
				printf("  ENC_R%5d ENC_L%5d \r", 
 800a346:	461c      	mov	r4, r3
					Get_encoder_value(EN_R),Get_encoder_value(EN_L)
 800a348:	2000      	movs	r0, #0
 800a34a:	f7ff f9e9 	bl	8009720 <Get_encoder_value>
 800a34e:	4603      	mov	r3, r0
				printf("  ENC_R%5d ENC_L%5d \r", 
 800a350:	461a      	mov	r2, r3
 800a352:	4621      	mov	r1, r4
 800a354:	48b6      	ldr	r0, [pc, #728]	@ (800a630 <MODE_exe_m0+0x3dc>)
 800a356:	f013 fc7d 	bl	801dc54 <iprintf>
				);
				LL_mDelay( 500 );
 800a35a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a35e:	f011 fb85 	bl	801ba6c <LL_mDelay>
				printf("  ENC_R%5d ENC_L%5d \r", 
 800a362:	bf00      	nop
 800a364:	e7eb      	b.n	800a33e <MODE_exe_m0+0xea>
			}
			break;

		case MODE_2:
			SetLED(0x0e);
 800a366:	200e      	movs	r0, #14
 800a368:	f7f7 fdb6 	bl	8001ed8 <SetLED>
			log_read2();
 800a36c:	f7ff fd56 	bl	8009e1c <log_read2>
			break;
 800a370:	e153      	b.n	800a61a <MODE_exe_m0+0x3c6>

		case MODE_3:
			SetLED(0x0e);
 800a372:	200e      	movs	r0, #14
 800a374:	f7f7 fdb0 	bl	8001ed8 <SetLED>
			log_flag_on();
 800a378:	f7ff fd38 	bl	8009dec <log_flag_on>

			DCM_setDirCcw( DCM_R );
 800a37c:	2000      	movs	r0, #0
 800a37e:	f7ff f956 	bl	800962e <DCM_setDirCcw>
			DCM_setPwmDuty( DCM_R, 280 );
 800a382:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800a386:	2000      	movs	r0, #0
 800a388:	f7ff f992 	bl	80096b0 <DCM_setPwmDuty>
			DCM_setDirCw( DCM_L );
 800a38c:	2001      	movs	r0, #1
 800a38e:	f7ff f93b 	bl	8009608 <DCM_setDirCw>
			DCM_setPwmDuty( DCM_L, 280 );
 800a392:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800a396:	2001      	movs	r0, #1
 800a398:	f7ff f98a 	bl	80096b0 <DCM_setPwmDuty>

			LL_mDelay(2000);
 800a39c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800a3a0:	f011 fb64 	bl	801ba6c <LL_mDelay>
			DCM_setPwmDuty( DCM_R, 0 );
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	f7ff f982 	bl	80096b0 <DCM_setPwmDuty>
			DCM_setPwmDuty( DCM_L, 0 );
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	2001      	movs	r0, #1
 800a3b0:	f7ff f97e 	bl	80096b0 <DCM_setPwmDuty>

			log_flag_off();
 800a3b4:	f7ff fd26 	bl	8009e04 <log_flag_off>
			SetLED(0x0e);
 800a3b8:	200e      	movs	r0, #14
 800a3ba:	f7f7 fd8d 	bl	8001ed8 <SetLED>
			break;
 800a3be:	e12c      	b.n	800a61a <MODE_exe_m0+0x3c6>

		case MODE_4:
			SetLED(0x0e);
 800a3c0:	200e      	movs	r0, #14
 800a3c2:	f7f7 fd89 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_SLOW,PARAM_VERY_SLOW,PARAM_VERY_SLOW,SEARCH_SPEED,
 800a3c6:	ed9f 2a9b 	vldr	s4, [pc, #620]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a3ca:	eddf 1a9a 	vldr	s3, [pc, #616]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a3ce:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a3d2:	eddf 0a98 	vldr	s1, [pc, #608]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a3d6:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2100      	movs	r1, #0
 800a3de:	2000      	movs	r0, #0
 800a3e0:	f7ff fefa 	bl	800a1d8 <MODE_speed_parameter>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );							// [スラ] 速度普�?
*/
//			printf("mode %d\n\r",MOT_getStType( 2.0, 0.0, MOT_GO_ST_NORMAL));
//			MOT_getStType( 2.0, 0.0, MOT_GO_ST_NORMAL );

			SetLED(0x00);
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	f7f7 fd77 	bl	8001ed8 <SetLED>
			LL_mDelay(500);
 800a3ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a3ee:	f011 fb3d 	bl	801ba6c <LL_mDelay>
			CTRL_clrData();
 800a3f2:	f7fc f827 	bl	8006444 <CTRL_clrData>
			CTRL_clrAngleErrSum();
 800a3f6:	f7fc f86d 	bl	80064d4 <CTRL_clrAngleErrSum>
			CTRL_clrSpeedErrSum();
 800a3fa:	f7fc f87f 	bl	80064fc <CTRL_clrSpeedErrSum>
			CTRL_clrNowData();
 800a3fe:	f7fc f891 	bl	8006524 <CTRL_clrNowData>
			log_flag_on();
 800a402:	f7ff fcf3 	bl	8009dec <log_flag_on>
			LL_mDelay(10);
 800a406:	200a      	movs	r0, #10
 800a408:	f011 fb30 	bl	801ba6c <LL_mDelay>
			MOT_turn(MOT_L90);
			LL_mDelay(500);
*/

//			MOT_setTrgtSpeed(SEARCH_SPEED/4.0);		// 目標速度
			MOT_goBlock_FinSpeed(2.0,0);
 800a40c:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 800a638 <MODE_exe_m0+0x3e4>
 800a410:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800a414:	f005 f946 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			MOT_setTrgtSpeed(SEARCH_SPEED);		// 目標速度
 800a418:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a41c:	f006 fe70 	bl	8011100 <MOT_setTrgtSpeed>

			log_flag_off();
 800a420:	f7ff fcf0 	bl	8009e04 <log_flag_off>
			break;
 800a424:	e0f9      	b.n	800a61a <MODE_exe_m0+0x3c6>

		case MODE_5:
			SetLED(0x0e);
 800a426:	200e      	movs	r0, #14
 800a428:	f7f7 fd56 	bl	8001ed8 <SetLED>

			printf("\r\n turn 45 \r\r");
 800a42c:	4883      	ldr	r0, [pc, #524]	@ (800a63c <MODE_exe_m0+0x3e8>)
 800a42e:	f013 fc11 	bl	801dc54 <iprintf>
			PARAM_makeSra( 0.5, 550.0f, 7.50f,3000*PI,  SLA_45 );
 800a432:	2001      	movs	r0, #1
 800a434:	eddf 1a82 	vldr	s3, [pc, #520]	@ 800a640 <MODE_exe_m0+0x3ec>
 800a438:	eeb1 1a0e 	vmov.f32	s2, #30	@ 0x40f00000  7.5
 800a43c:	eddf 0a81 	vldr	s1, [pc, #516]	@ 800a644 <MODE_exe_m0+0x3f0>
 800a440:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800a444:	f7f8 f9f8 	bl	8002838 <PARAM_makeSra>
			printf("\r\n turn 90 \r\r");		
 800a448:	487f      	ldr	r0, [pc, #508]	@ (800a648 <MODE_exe_m0+0x3f4>)
 800a44a:	f013 fc03 	bl	801dc54 <iprintf>
			PARAM_makeSra( 0.5, 700.0f, 10.00f,3000*PI,  SLA_90 );	
 800a44e:	2000      	movs	r0, #0
 800a450:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 800a640 <MODE_exe_m0+0x3ec>
 800a454:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800a458:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 800a64c <MODE_exe_m0+0x3f8>
 800a45c:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800a460:	f7f8 f9ea 	bl	8002838 <PARAM_makeSra>
		//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
			printf("\r\n turn 135 \r\r");	
 800a464:	487a      	ldr	r0, [pc, #488]	@ (800a650 <MODE_exe_m0+0x3fc>)
 800a466:	f013 fbf5 	bl	801dc54 <iprintf>
			PARAM_makeSra( 0.5, 750.0f, 10.00f,3000*PI,  SLA_135 );	
 800a46a:	2002      	movs	r0, #2
 800a46c:	eddf 1a74 	vldr	s3, [pc, #464]	@ 800a640 <MODE_exe_m0+0x3ec>
 800a470:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800a474:	eddf 0a77 	vldr	s1, [pc, #476]	@ 800a654 <MODE_exe_m0+0x400>
 800a478:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800a47c:	f7f8 f9dc 	bl	8002838 <PARAM_makeSra>
			printf("\r\n turn N90 \r\r");	
 800a480:	4875      	ldr	r0, [pc, #468]	@ (800a658 <MODE_exe_m0+0x404>)
 800a482:	f013 fbe7 	bl	801dc54 <iprintf>
			PARAM_makeSra( 0.5, 800.0f, 11.00f,3000*PI,  SLA_N90 );	
 800a486:	2003      	movs	r0, #3
 800a488:	eddf 1a6d 	vldr	s3, [pc, #436]	@ 800a640 <MODE_exe_m0+0x3ec>
 800a48c:	eeb2 1a06 	vmov.f32	s2, #38	@ 0x41300000  11.0
 800a490:	eddf 0a72 	vldr	s1, [pc, #456]	@ 800a65c <MODE_exe_m0+0x408>
 800a494:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800a498:	f7f8 f9ce 	bl	8002838 <PARAM_makeSra>
			MODE_speed_parameter(PARAM_VERY_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*4.0,
 800a49c:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800a4a0:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800a4a4:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800a4a8:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800a4ac:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 800a660 <MODE_exe_m0+0x40c>
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	2004      	movs	r0, #4
 800a4b6:	f7ff fe8f 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5, SLA_N90);
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							// [直進] 速度普�?
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							// [旋回] 速度普�?
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							// [スラ] 速度普�?
*/
			SetLED(0x00);
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	f7f7 fd0c 	bl	8001ed8 <SetLED>
			LL_mDelay(500);
 800a4c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a4c4:	f011 fad2 	bl	801ba6c <LL_mDelay>
			CTRL_clrData();
 800a4c8:	f7fb ffbc 	bl	8006444 <CTRL_clrData>
			CTRL_clrAngleErrSum();
 800a4cc:	f7fc f802 	bl	80064d4 <CTRL_clrAngleErrSum>
			CTRL_clrSpeedErrSum();
 800a4d0:	f7fc f814 	bl	80064fc <CTRL_clrSpeedErrSum>
			CTRL_clrNowData();
 800a4d4:	f7fc f826 	bl	8006524 <CTRL_clrNowData>
			Set_DutyTIM8(600);
 800a4d8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800a4dc:	f7fb fcd0 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);
 800a4e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800a4e4:	f011 fac2 	bl	801ba6c <LL_mDelay>
			log_flag_on();
 800a4e8:	f7ff fc80 	bl	8009dec <log_flag_on>
			MOT_goSkewBlock_FinSpeed(0.5, 0.5);
			MOT_goSla(MOT_R90S_N, PARAM_getSra( SLA_N90 ));
			MOT_goSkewBlock_FinSpeed(0.5, 0);
*/

			MOT_goBlock_FinSpeed(0.5, 0.5);
 800a4ec:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800a4f0:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800a4f4:	f005 f8d6 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			MOT_goSla(MOT_R135S_S2N, PARAM_getSra( SLA_135 ));
 800a4f8:	2002      	movs	r0, #2
 800a4fa:	f7f9 fc79 	bl	8003df0 <PARAM_getSra>
 800a4fe:	4603      	mov	r3, r0
 800a500:	4619      	mov	r1, r3
 800a502:	2008      	movs	r0, #8
 800a504:	f006 fe84 	bl	8011210 <MOT_goSla>
			MOT_goSkewBlock_FinSpeed(0.5, 0);
 800a508:	eddf 0a4b 	vldr	s1, [pc, #300]	@ 800a638 <MODE_exe_m0+0x3e4>
 800a50c:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800a510:	f005 f8da 	bl	800f6c8 <MOT_goSkewBlock_FinSpeed>

			log_flag_off();
 800a514:	f7ff fc76 	bl	8009e04 <log_flag_off>

			Set_DutyTIM8(0);
 800a518:	2000      	movs	r0, #0
 800a51a:	f7fb fcb1 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);
 800a51e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800a522:	f011 faa3 	bl	801ba6c <LL_mDelay>

			PARAM_makeSra( (float)SEARCH_SPEED, 100.0f, 2.50f,3000*PI,  SLA_45 );
 800a526:	2001      	movs	r0, #1
 800a528:	eddf 1a45 	vldr	s3, [pc, #276]	@ 800a640 <MODE_exe_m0+0x3ec>
 800a52c:	eeb0 1a04 	vmov.f32	s2, #4	@ 0x40200000  2.5
 800a530:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 800a664 <MODE_exe_m0+0x410>
 800a534:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a538:	f7f8 f97e 	bl	8002838 <PARAM_makeSra>
			printf("\r\n turn 90 \r\r");		
 800a53c:	4842      	ldr	r0, [pc, #264]	@ (800a648 <MODE_exe_m0+0x3f4>)
 800a53e:	f013 fb89 	bl	801dc54 <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 3.50f,3000*PI,  SLA_90 );	
 800a542:	2000      	movs	r0, #0
 800a544:	eddf 1a3e 	vldr	s3, [pc, #248]	@ 800a640 <MODE_exe_m0+0x3ec>
 800a548:	eeb0 1a0c 	vmov.f32	s2, #12	@ 0x40600000  3.5
 800a54c:	eddf 0a46 	vldr	s1, [pc, #280]	@ 800a668 <MODE_exe_m0+0x414>
 800a550:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a554:	f7f8 f970 	bl	8002838 <PARAM_makeSra>
		//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
			printf("\r\n turn 135 \r\r");	
 800a558:	483d      	ldr	r0, [pc, #244]	@ (800a650 <MODE_exe_m0+0x3fc>)
 800a55a:	f013 fb7b 	bl	801dc54 <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 4.00f,3000*PI,  SLA_135 );	
 800a55e:	2002      	movs	r0, #2
 800a560:	eddf 1a37 	vldr	s3, [pc, #220]	@ 800a640 <MODE_exe_m0+0x3ec>
 800a564:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 800a568:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 800a668 <MODE_exe_m0+0x414>
 800a56c:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a570:	f7f8 f962 	bl	8002838 <PARAM_makeSra>
			printf("\r\n turn N90 \r\r");	
 800a574:	4838      	ldr	r0, [pc, #224]	@ (800a658 <MODE_exe_m0+0x404>)
 800a576:	f013 fb6d 	bl	801dc54 <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 300.0f, 4.00f,3000*PI,  SLA_N90 );		
 800a57a:	2003      	movs	r0, #3
 800a57c:	eddf 1a30 	vldr	s3, [pc, #192]	@ 800a640 <MODE_exe_m0+0x3ec>
 800a580:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 800a584:	eddf 0a39 	vldr	s1, [pc, #228]	@ 800a66c <MODE_exe_m0+0x418>
 800a588:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a58c:	f7f8 f954 	bl	8002838 <PARAM_makeSra>
			MODE_speed_parameter(PARAM_VERY_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED,
 800a590:	ed9f 2a28 	vldr	s4, [pc, #160]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a594:	eddf 1a27 	vldr	s3, [pc, #156]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a598:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a59c:	eddf 0a25 	vldr	s1, [pc, #148]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a5a0:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a5a4:	2202      	movs	r2, #2
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	2004      	movs	r0, #4
 800a5aa:	f7ff fe15 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_45);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);
*/
			break;
 800a5ae:	e034      	b.n	800a61a <MODE_exe_m0+0x3c6>

		case MODE_6:
			SetLED(0x0e);
 800a5b0:	200e      	movs	r0, #14
 800a5b2:	f7f7 fc91 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_SLOW,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED,
 800a5b6:	ed9f 2a1f 	vldr	s4, [pc, #124]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a5ba:	eddf 1a1e 	vldr	s3, [pc, #120]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a5be:	ed9f 1a1d 	vldr	s2, [pc, #116]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a5c2:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a5c6:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	2001      	movs	r0, #1
 800a5d0:	f7ff fe02 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							// [直進] 速度普�?
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							// [旋回] 速度普�?
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							// [スラ] 速度普�?
*/
			SetLED(0x00);
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	f7f7 fc7f 	bl	8001ed8 <SetLED>
			LL_mDelay(500);
 800a5da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a5de:	f011 fa45 	bl	801ba6c <LL_mDelay>
			CTRL_clrData();
 800a5e2:	f7fb ff2f 	bl	8006444 <CTRL_clrData>
			CTRL_clrAngleErrSum();
 800a5e6:	f7fb ff75 	bl	80064d4 <CTRL_clrAngleErrSum>
			CTRL_clrSpeedErrSum();
 800a5ea:	f7fb ff87 	bl	80064fc <CTRL_clrSpeedErrSum>
			CTRL_clrNowData();
 800a5ee:	f7fb ff99 	bl	8006524 <CTRL_clrNowData>
			log_flag_on();
 800a5f2:	f7ff fbfb 	bl	8009dec <log_flag_on>

			MOT_setTrgtSpeed( SEARCH_SPEED );
 800a5f6:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800a634 <MODE_exe_m0+0x3e0>
 800a5fa:	f006 fd81 	bl	8011100 <MOT_setTrgtSpeed>
			MOT_goBlock_FinSpeed(15.0, 0);
 800a5fe:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 800a638 <MODE_exe_m0+0x3e4>
 800a602:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800a606:	f005 f84d 	bl	800f6a4 <MOT_goBlock_FinSpeed>
/*
			MOT_goBlock_FinSpeed(0.5, SEARCH_SPEED);
			MOT_goSla(MOT_R135S_S2N, PARAM_getSra( SLA_135 ));
			MOT_goSkewBlock_FinSpeed(0.5, 0);
*/
			log_flag_off();
 800a60a:	f7ff fbfb 	bl	8009e04 <log_flag_off>
			break;
 800a60e:	e004      	b.n	800a61a <MODE_exe_m0+0x3c6>

		case MODE_7:
			SetLED(0x0e);
 800a610:	200e      	movs	r0, #14
 800a612:	f7f7 fc61 	bl	8001ed8 <SetLED>
			//cant use
			break;
 800a616:	e000      	b.n	800a61a <MODE_exe_m0+0x3c6>

		default:
			break;
 800a618:	bf00      	nop
	}
}
 800a61a:	bf00      	nop
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bdb0      	pop	{r4, r5, r7, pc}
 800a620:	20017b28 	.word	0x20017b28
 800a624:	08021c14 	.word	0x08021c14
 800a628:	08021c28 	.word	0x08021c28
 800a62c:	08021c34 	.word	0x08021c34
 800a630:	08021c40 	.word	0x08021c40
 800a634:	3e99999a 	.word	0x3e99999a
 800a638:	00000000 	.word	0x00000000
 800a63c:	08021bd4 	.word	0x08021bd4
 800a640:	46134315 	.word	0x46134315
 800a644:	44098000 	.word	0x44098000
 800a648:	08021be4 	.word	0x08021be4
 800a64c:	442f0000 	.word	0x442f0000
 800a650:	08021bf4 	.word	0x08021bf4
 800a654:	443b8000 	.word	0x443b8000
 800a658:	08021c04 	.word	0x08021c04
 800a65c:	44480000 	.word	0x44480000
 800a660:	3f99999a 	.word	0x3f99999a
 800a664:	42c80000 	.word	0x42c80000
 800a668:	43480000 	.word	0x43480000
 800a66c:	43960000 	.word	0x43960000

0800a670 <MODE_exe_m1>:

void MODE_exe_m1( void )
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 800a676:	f04f 0200 	mov.w	r2, #0
 800a67a:	f04f 0300 	mov.w	r3, #0
 800a67e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	GYRO_SetRef();
 800a682:	f7ff f955 	bl	8009930 <GYRO_SetRef>
	CTRL_clrData();
 800a686:	f7fb fedd 	bl	8006444 <CTRL_clrData>
	CTRL_clrAngleErrSum();
 800a68a:	f7fb ff23 	bl	80064d4 <CTRL_clrAngleErrSum>
	CTRL_clrSpeedErrSum();
 800a68e:	f7fb ff35 	bl	80064fc <CTRL_clrSpeedErrSum>
	CTRL_clrNowData();
 800a692:	f7fb ff47 	bl	8006524 <CTRL_clrNowData>

	switch( en_Mode ){
 800a696:	4b30      	ldr	r3, [pc, #192]	@ (800a758 <MODE_exe_m1+0xe8>)
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	2b07      	cmp	r3, #7
 800a69c:	d857      	bhi.n	800a74e <MODE_exe_m1+0xde>
 800a69e:	a201      	add	r2, pc, #4	@ (adr r2, 800a6a4 <MODE_exe_m1+0x34>)
 800a6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a4:	0800a6c5 	.word	0x0800a6c5
 800a6a8:	0800a6cd 	.word	0x0800a6cd
 800a6ac:	0800a6d9 	.word	0x0800a6d9
 800a6b0:	0800a6e5 	.word	0x0800a6e5
 800a6b4:	0800a6f1 	.word	0x0800a6f1
 800a6b8:	0800a6fd 	.word	0x0800a6fd
 800a6bc:	0800a73f 	.word	0x0800a73f
 800a6c0:	0800a747 	.word	0x0800a747

		case MODE_0:
			SetLED(0x0e);
 800a6c4:	200e      	movs	r0, #14
 800a6c6:	f7f7 fc07 	bl	8001ed8 <SetLED>
			break;
 800a6ca:	e041      	b.n	800a750 <MODE_exe_m1+0xe0>

		case MODE_1:
			SetLED(0x0e);
 800a6cc:	200e      	movs	r0, #14
 800a6ce:	f7f7 fc03 	bl	8001ed8 <SetLED>
			Map_Erase();
 800a6d2:	f00c f9b9 	bl	8016a48 <Map_Erase>
			break;
 800a6d6:	e03b      	b.n	800a750 <MODE_exe_m1+0xe0>

		case MODE_2:
			SetLED(0x0e);
 800a6d8:	200e      	movs	r0, #14
 800a6da:	f7f7 fbfd 	bl	8001ed8 <SetLED>
			MAP_showLog();
 800a6de:	f00c fa25 	bl	8016b2c <MAP_showLog>
			break;
 800a6e2:	e035      	b.n	800a750 <MODE_exe_m1+0xe0>

		case MODE_3:
			SetLED(0x0e);
 800a6e4:	200e      	movs	r0, #14
 800a6e6:	f7f7 fbf7 	bl	8001ed8 <SetLED>
			Map_Copy();
 800a6ea:	f00c f987 	bl	80169fc <Map_Copy>
			break;
 800a6ee:	e02f      	b.n	800a750 <MODE_exe_m1+0xe0>

		case MODE_4:
			SetLED(0x0e);
 800a6f0:	200e      	movs	r0, #14
 800a6f2:	f7f7 fbf1 	bl	8001ed8 <SetLED>
			Map_Write();
 800a6f6:	f00c f96d 	bl	80169d4 <Map_Write>
			break;
 800a6fa:	e029      	b.n	800a750 <MODE_exe_m1+0xe0>

		case MODE_5:
			SetLED(0x0e);
 800a6fc:	200e      	movs	r0, #14
 800a6fe:	f7f7 fbeb 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800a702:	2200      	movs	r2, #0
 800a704:	2100      	movs	r1, #0
 800a706:	2000      	movs	r0, #0
 800a708:	f00c f9ee 	bl	8016ae8 <MAP_setPos>
			MAP_Goalsize(1);
 800a70c:	2001      	movs	r0, #1
 800a70e:	f00d febb 	bl	8018488 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800a712:	2201      	movs	r2, #1
 800a714:	2107      	movs	r1, #7
 800a716:	2008      	movs	r0, #8
 800a718:	f00c ffaa 	bl	8017670 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800a71c:	1dfb      	adds	r3, r7, #7
 800a71e:	9301      	str	r3, [sp, #4]
 800a720:	2307      	movs	r3, #7
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	2308      	movs	r3, #8
 800a726:	2200      	movs	r2, #0
 800a728:	2100      	movs	r1, #0
 800a72a:	2000      	movs	r0, #0
 800a72c:	f009 fd48 	bl	80141c0 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800a730:	f009 ff9e 	bl	8014670 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800a734:	f00a f918 	bl	8014968 <MAP_makeSkewCmdList>
			MAP_showCmdLog();
 800a738:	f009 fcf2 	bl	8014120 <MAP_showCmdLog>
			break;
 800a73c:	e008      	b.n	800a750 <MODE_exe_m1+0xe0>

		case MODE_6:
			SetLED(0x0e);
 800a73e:	200e      	movs	r0, #14
 800a740:	f7f7 fbca 	bl	8001ed8 <SetLED>
			break;
 800a744:	e004      	b.n	800a750 <MODE_exe_m1+0xe0>

		case MODE_7:
			SetLED(0x0e);
 800a746:	200e      	movs	r0, #14
 800a748:	f7f7 fbc6 	bl	8001ed8 <SetLED>
			//cant use
			break;
 800a74c:	e000      	b.n	800a750 <MODE_exe_m1+0xe0>

		default:
			break;
 800a74e:	bf00      	nop
	}
}
 800a750:	bf00      	nop
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	20017b28 	.word	0x20017b28

0800a75c <MODE_exe_m2>:

void MODE_exe_m2( void )
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b086      	sub	sp, #24
 800a760:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 800a762:	f04f 0200 	mov.w	r2, #0
 800a766:	f04f 0300 	mov.w	r3, #0
 800a76a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Min_in = 0;
 800a76e:	4bbc      	ldr	r3, [pc, #752]	@ (800aa60 <MODE_exe_m2+0x304>)
 800a770:	2200      	movs	r2, #0
 800a772:	701a      	strb	r2, [r3, #0]
	Sec_in = 0;
 800a774:	4bbb      	ldr	r3, [pc, #748]	@ (800aa64 <MODE_exe_m2+0x308>)
 800a776:	2200      	movs	r2, #0
 800a778:	701a      	strb	r2, [r3, #0]
	Msec_in = 0;
 800a77a:	4bbb      	ldr	r3, [pc, #748]	@ (800aa68 <MODE_exe_m2+0x30c>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	801a      	strh	r2, [r3, #0]

	GYRO_SetRef();
 800a780:	f7ff f8d6 	bl	8009930 <GYRO_SetRef>
	CTRL_clrData();
 800a784:	f7fb fe5e 	bl	8006444 <CTRL_clrData>
	CTRL_clrAngleErrSum();
 800a788:	f7fb fea4 	bl	80064d4 <CTRL_clrAngleErrSum>
	CTRL_clrSpeedErrSum();
 800a78c:	f7fb feb6 	bl	80064fc <CTRL_clrSpeedErrSum>
	CTRL_clrNowData();
 800a790:	f7fb fec8 	bl	8006524 <CTRL_clrNowData>

	switch( en_Mode ){
 800a794:	4bb5      	ldr	r3, [pc, #724]	@ (800aa6c <MODE_exe_m2+0x310>)
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	2b07      	cmp	r3, #7
 800a79a:	f200 82b7 	bhi.w	800ad0c <MODE_exe_m2+0x5b0>
 800a79e:	a201      	add	r2, pc, #4	@ (adr r2, 800a7a4 <MODE_exe_m2+0x48>)
 800a7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a4:	0800a7c5 	.word	0x0800a7c5
 800a7a8:	0800a89b 	.word	0x0800a89b
 800a7ac:	0800a979 	.word	0x0800a979
 800a7b0:	0800aa4f 	.word	0x0800aa4f
 800a7b4:	0800aa57 	.word	0x0800aa57
 800a7b8:	0800aa75 	.word	0x0800aa75
 800a7bc:	0800ab4b 	.word	0x0800ab4b
 800a7c0:	0800ad05 	.word	0x0800ad05

		case MODE_0://only adachi
			SetLED(0x0e);
 800a7c4:	200e      	movs	r0, #14
 800a7c6:	f7f7 fb87 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_SLOW,PARAM_VERY_SLOW,PARAM_VERY_SLOW,SEARCH_SPEED,
 800a7ca:	ed9f 2aa9 	vldr	s4, [pc, #676]	@ 800aa70 <MODE_exe_m2+0x314>
 800a7ce:	eddf 1aa8 	vldr	s3, [pc, #672]	@ 800aa70 <MODE_exe_m2+0x314>
 800a7d2:	ed9f 1aa7 	vldr	s2, [pc, #668]	@ 800aa70 <MODE_exe_m2+0x314>
 800a7d6:	eddf 0aa6 	vldr	s1, [pc, #664]	@ 800aa70 <MODE_exe_m2+0x314>
 800a7da:	ed9f 0aa5 	vldr	s0, [pc, #660]	@ 800aa70 <MODE_exe_m2+0x314>
 800a7de:	2200      	movs	r2, #0
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	f7ff fcf8 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);						
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );							
*/
			SetLED(0x00);
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	f7f7 fb75 	bl	8001ed8 <SetLED>
			LL_mDelay(100);
 800a7ee:	2064      	movs	r0, #100	@ 0x64
 800a7f0:	f011 f93c 	bl	801ba6c <LL_mDelay>
			MAP_Goalsize(1);
 800a7f4:	2001      	movs	r0, #1
 800a7f6:	f00d fe47 	bl	8018488 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );						
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	2000      	movs	r0, #0
 800a800:	f00c f972 	bl	8016ae8 <MAP_setPos>

			MAP_searchGoal(GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, SEARCH, SEARCH_SLA );			
 800a804:	2301      	movs	r3, #1
 800a806:	2200      	movs	r2, #0
 800a808:	2107      	movs	r1, #7
 800a80a:	2008      	movs	r0, #8
 800a80c:	f00e fe8a 	bl	8019524 <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800a810:	f7f7 fbe4 	bl	8001fdc <SW_IsOn_1>
 800a814:	4603      	mov	r3, r0
 800a816:	2b01      	cmp	r3, #1
 800a818:	d006      	beq.n	800a828 <MODE_exe_m2+0xcc>
 800a81a:	f7fe fee9 	bl	80095f0 <SYS_isOutOfCtrl>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d101      	bne.n	800a828 <MODE_exe_m2+0xcc>
			else{
				Map_Write();
 800a824:	f00c f8d6 	bl	80169d4 <Map_Write>
			}
			
			SetLED(0x0e);
 800a828:	200e      	movs	r0, #14
 800a82a:	f7f7 fb55 	bl	8001ed8 <SetLED>
			MAP_Goalsize(1);
 800a82e:	2001      	movs	r0, #1
 800a830:	f00d fe2a 	bl	8018488 <MAP_Goalsize>
			SetLED(0x00);
 800a834:	2000      	movs	r0, #0
 800a836:	f7f7 fb4f 	bl	8001ed8 <SetLED>

			MAP_searchGoal( 0, 0, SEARCH, SEARCH_SLA );
 800a83a:	2301      	movs	r3, #1
 800a83c:	2200      	movs	r2, #0
 800a83e:	2100      	movs	r1, #0
 800a840:	2000      	movs	r0, #0
 800a842:	f00e fe6f 	bl	8019524 <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800a846:	f7f7 fbc9 	bl	8001fdc <SW_IsOn_1>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	f000 825f 	beq.w	800ad10 <MODE_exe_m2+0x5b4>
 800a852:	f7fe fecd 	bl	80095f0 <SYS_isOutOfCtrl>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	f040 8259 	bne.w	800ad10 <MODE_exe_m2+0x5b4>
			else{
				Map_Write();
 800a85e:	f00c f8b9 	bl	80169d4 <Map_Write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800a862:	2200      	movs	r2, #0
 800a864:	2100      	movs	r1, #0
 800a866:	2000      	movs	r0, #0
 800a868:	f00c f93e 	bl	8016ae8 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800a86c:	2201      	movs	r2, #1
 800a86e:	2107      	movs	r1, #7
 800a870:	2008      	movs	r0, #8
 800a872:	f00c fefd 	bl	8017670 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800a876:	1dfb      	adds	r3, r7, #7
 800a878:	9301      	str	r3, [sp, #4]
 800a87a:	2307      	movs	r3, #7
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	2308      	movs	r3, #8
 800a880:	2200      	movs	r2, #0
 800a882:	2100      	movs	r1, #0
 800a884:	2000      	movs	r0, #0
 800a886:	f009 fc9b 	bl	80141c0 <MAP_makeCmdList>
				MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800a88a:	f009 fef1 	bl	8014670 <MAP_makeSlaCmdList>
				MAP_makeSkewCmdList();
 800a88e:	f00a f86b 	bl	8014968 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800a892:	2000      	movs	r0, #0
 800a894:	f7f7 fb20 	bl	8001ed8 <SetLED>
			}
			break;
 800a898:	e23a      	b.n	800ad10 <MODE_exe_m2+0x5b4>

		case MODE_1://adachi and known 
			SetLED(0x0e);
 800a89a:	200e      	movs	r0, #14
 800a89c:	f7f7 fb1c 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_SLOW,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED,
 800a8a0:	ed9f 2a73 	vldr	s4, [pc, #460]	@ 800aa70 <MODE_exe_m2+0x314>
 800a8a4:	eddf 1a72 	vldr	s3, [pc, #456]	@ 800aa70 <MODE_exe_m2+0x314>
 800a8a8:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 800aa70 <MODE_exe_m2+0x314>
 800a8ac:	eddf 0a70 	vldr	s1, [pc, #448]	@ 800aa70 <MODE_exe_m2+0x314>
 800a8b0:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 800aa70 <MODE_exe_m2+0x314>
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	2001      	movs	r0, #1
 800a8ba:	f7ff fc8d 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);						
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );	
*/					
			SetLED(0x00);
 800a8be:	2000      	movs	r0, #0
 800a8c0:	f7f7 fb0a 	bl	8001ed8 <SetLED>
			LL_mDelay(100);
 800a8c4:	2064      	movs	r0, #100	@ 0x64
 800a8c6:	f011 f8d1 	bl	801ba6c <LL_mDelay>
			MAP_Goalsize(1);
 800a8ca:	2001      	movs	r0, #1
 800a8cc:	f00d fddc 	bl	8018488 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	f00c f907 	bl	8016ae8 <MAP_setPos>

			MAP_searchGoalKnown(GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, SEARCH, SEARCH_SLA );			
 800a8da:	2301      	movs	r3, #1
 800a8dc:	2200      	movs	r2, #0
 800a8de:	2107      	movs	r1, #7
 800a8e0:	2008      	movs	r0, #8
 800a8e2:	f00e ff77 	bl	80197d4 <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800a8e6:	f7f7 fb79 	bl	8001fdc <SW_IsOn_1>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d006      	beq.n	800a8fe <MODE_exe_m2+0x1a2>
 800a8f0:	f7fe fe7e 	bl	80095f0 <SYS_isOutOfCtrl>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d101      	bne.n	800a8fe <MODE_exe_m2+0x1a2>
			else{
				Map_Write();
 800a8fa:	f00c f86b 	bl	80169d4 <Map_Write>
			}
			
			SetLED(0x0e);
 800a8fe:	200e      	movs	r0, #14
 800a900:	f7f7 faea 	bl	8001ed8 <SetLED>
			MAP_Goalsize(1);
 800a904:	2001      	movs	r0, #1
 800a906:	f00d fdbf 	bl	8018488 <MAP_Goalsize>
			SetLED(0x00);
 800a90a:	2000      	movs	r0, #0
 800a90c:	f7f7 fae4 	bl	8001ed8 <SetLED>
			log_flag_on();
 800a910:	f7ff fa6c 	bl	8009dec <log_flag_on>
			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SLA );
 800a914:	2301      	movs	r3, #1
 800a916:	2200      	movs	r2, #0
 800a918:	2100      	movs	r1, #0
 800a91a:	2000      	movs	r0, #0
 800a91c:	f00e ff5a 	bl	80197d4 <MAP_searchGoalKnown>
//			MAP_searchGoal( 0, 0, SEARCH, SEARCH_RETURN );
			log_flag_off();
 800a920:	f7ff fa70 	bl	8009e04 <log_flag_off>
			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800a924:	f7f7 fb5a 	bl	8001fdc <SW_IsOn_1>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	f000 81f2 	beq.w	800ad14 <MODE_exe_m2+0x5b8>
 800a930:	f7fe fe5e 	bl	80095f0 <SYS_isOutOfCtrl>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	f040 81ec 	bne.w	800ad14 <MODE_exe_m2+0x5b8>
			else{
				Map_Write();
 800a93c:	f00c f84a 	bl	80169d4 <Map_Write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800a940:	2200      	movs	r2, #0
 800a942:	2100      	movs	r1, #0
 800a944:	2000      	movs	r0, #0
 800a946:	f00c f8cf 	bl	8016ae8 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800a94a:	2201      	movs	r2, #1
 800a94c:	2107      	movs	r1, #7
 800a94e:	2008      	movs	r0, #8
 800a950:	f00c fe8e 	bl	8017670 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800a954:	1dfb      	adds	r3, r7, #7
 800a956:	9301      	str	r3, [sp, #4]
 800a958:	2307      	movs	r3, #7
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	2308      	movs	r3, #8
 800a95e:	2200      	movs	r2, #0
 800a960:	2100      	movs	r1, #0
 800a962:	2000      	movs	r0, #0
 800a964:	f009 fc2c 	bl	80141c0 <MAP_makeCmdList>
				MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800a968:	f009 fe82 	bl	8014670 <MAP_makeSlaCmdList>
				MAP_makeSkewCmdList();
 800a96c:	f009 fffc 	bl	8014968 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800a970:	2000      	movs	r0, #0
 800a972:	f7f7 fab1 	bl	8001ed8 <SetLED>
			}
			break;
 800a976:	e1cd      	b.n	800ad14 <MODE_exe_m2+0x5b8>

		case MODE_2://adachi and known and return (cancel return now) 
			SetLED(0x0e);
 800a978:	200e      	movs	r0, #14
 800a97a:	f7f7 faad 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_SLOW,PARAM_VERY_SLOW,PARAM_VERY_SLOW,SEARCH_SPEED,
 800a97e:	ed9f 2a3c 	vldr	s4, [pc, #240]	@ 800aa70 <MODE_exe_m2+0x314>
 800a982:	eddf 1a3b 	vldr	s3, [pc, #236]	@ 800aa70 <MODE_exe_m2+0x314>
 800a986:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 800aa70 <MODE_exe_m2+0x314>
 800a98a:	eddf 0a39 	vldr	s1, [pc, #228]	@ 800aa70 <MODE_exe_m2+0x314>
 800a98e:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800aa70 <MODE_exe_m2+0x314>
 800a992:	2200      	movs	r2, #0
 800a994:	2100      	movs	r1, #0
 800a996:	2001      	movs	r0, #1
 800a998:	f7ff fc1e 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );	
*/						
			SetLED(0x00);
 800a99c:	2000      	movs	r0, #0
 800a99e:	f7f7 fa9b 	bl	8001ed8 <SetLED>
			LL_mDelay(100);
 800a9a2:	2064      	movs	r0, #100	@ 0x64
 800a9a4:	f011 f862 	bl	801ba6c <LL_mDelay>
//			PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
			MAP_Goalsize(1);
 800a9a8:	2001      	movs	r0, #1
 800a9aa:	f00d fd6d 	bl	8018488 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	f00c f898 	bl	8016ae8 <MAP_setPos>

			MAP_searchGoalKnown(GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, SEARCH, SEARCH_SLA );			
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	2107      	movs	r1, #7
 800a9be:	2008      	movs	r0, #8
 800a9c0:	f00e ff08 	bl	80197d4 <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800a9c4:	f7f7 fb0a 	bl	8001fdc <SW_IsOn_1>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d006      	beq.n	800a9dc <MODE_exe_m2+0x280>
 800a9ce:	f7fe fe0f 	bl	80095f0 <SYS_isOutOfCtrl>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d101      	bne.n	800a9dc <MODE_exe_m2+0x280>
			else{
				Map_Write();
 800a9d8:	f00b fffc 	bl	80169d4 <Map_Write>
			}
			
			SetLED(0x0e);
 800a9dc:	200e      	movs	r0, #14
 800a9de:	f7f7 fa7b 	bl	8001ed8 <SetLED>
			MAP_Goalsize(1);
 800a9e2:	2001      	movs	r0, #1
 800a9e4:	f00d fd50 	bl	8018488 <MAP_Goalsize>
			SetLED(0x00);
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	f7f7 fa75 	bl	8001ed8 <SetLED>

			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SLA );
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	f00e feed 	bl	80197d4 <MAP_searchGoalKnown>
//			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_RETURN );

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800a9fa:	f7f7 faef 	bl	8001fdc <SW_IsOn_1>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	f000 8189 	beq.w	800ad18 <MODE_exe_m2+0x5bc>
 800aa06:	f7fe fdf3 	bl	80095f0 <SYS_isOutOfCtrl>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f040 8183 	bne.w	800ad18 <MODE_exe_m2+0x5bc>
			else{
				Map_Write();
 800aa12:	f00b ffdf 	bl	80169d4 <Map_Write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800aa16:	2200      	movs	r2, #0
 800aa18:	2100      	movs	r1, #0
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	f00c f864 	bl	8016ae8 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800aa20:	2201      	movs	r2, #1
 800aa22:	2107      	movs	r1, #7
 800aa24:	2008      	movs	r0, #8
 800aa26:	f00c fe23 	bl	8017670 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800aa2a:	1dfb      	adds	r3, r7, #7
 800aa2c:	9301      	str	r3, [sp, #4]
 800aa2e:	2307      	movs	r3, #7
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	2308      	movs	r3, #8
 800aa34:	2200      	movs	r2, #0
 800aa36:	2100      	movs	r1, #0
 800aa38:	2000      	movs	r0, #0
 800aa3a:	f009 fbc1 	bl	80141c0 <MAP_makeCmdList>
				MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800aa3e:	f009 fe17 	bl	8014670 <MAP_makeSlaCmdList>
				MAP_makeSkewCmdList();
 800aa42:	f009 ff91 	bl	8014968 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800aa46:	2000      	movs	r0, #0
 800aa48:	f7f7 fa46 	bl	8001ed8 <SetLED>
			}
			break;
 800aa4c:	e164      	b.n	800ad18 <MODE_exe_m2+0x5bc>

		case MODE_3:
			SetLED(0x0e);
 800aa4e:	200e      	movs	r0, #14
 800aa50:	f7f7 fa42 	bl	8001ed8 <SetLED>
			
			break;
 800aa54:	e163      	b.n	800ad1e <MODE_exe_m2+0x5c2>

		case MODE_4:
			SetLED(0x0e);
 800aa56:	200e      	movs	r0, #14
 800aa58:	f7f7 fa3e 	bl	8001ed8 <SetLED>

			break;
 800aa5c:	e15f      	b.n	800ad1e <MODE_exe_m2+0x5c2>
 800aa5e:	bf00      	nop
 800aa60:	20000217 	.word	0x20000217
 800aa64:	20000216 	.word	0x20000216
 800aa68:	20000214 	.word	0x20000214
 800aa6c:	20017b28 	.word	0x20017b28
 800aa70:	3e99999a 	.word	0x3e99999a

		case MODE_5://test search
			SetLED(0x0e);
 800aa74:	200e      	movs	r0, #14
 800aa76:	f7f7 fa2f 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_SLOW,PARAM_VERY_SLOW,PARAM_VERY_SLOW,SEARCH_SPEED,
 800aa7a:	ed1f 2a03 	vldr	s4, [pc, #-12]	@ 800aa70 <MODE_exe_m2+0x314>
 800aa7e:	ed5f 1a04 	vldr	s3, [pc, #-16]	@ 800aa70 <MODE_exe_m2+0x314>
 800aa82:	ed1f 1a05 	vldr	s2, [pc, #-20]	@ 800aa70 <MODE_exe_m2+0x314>
 800aa86:	ed5f 0a06 	vldr	s1, [pc, #-24]	@ 800aa70 <MODE_exe_m2+0x314>
 800aa8a:	ed1f 0a07 	vldr	s0, [pc, #-28]	@ 800aa70 <MODE_exe_m2+0x314>
 800aa8e:	2200      	movs	r2, #0
 800aa90:	2100      	movs	r1, #0
 800aa92:	2000      	movs	r0, #0
 800aa94:	f7ff fba0 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );							
*/			SetLED(0x00);
 800aa98:	2000      	movs	r0, #0
 800aa9a:	f7f7 fa1d 	bl	8001ed8 <SetLED>
			LL_mDelay(100);
 800aa9e:	2064      	movs	r0, #100	@ 0x64
 800aaa0:	f010 ffe4 	bl	801ba6c <LL_mDelay>
//			PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
			MAP_Goalsize(1);
 800aaa4:	2001      	movs	r0, #1
 800aaa6:	f00d fcef 	bl	8018488 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 800aaaa:	2200      	movs	r2, #0
 800aaac:	2100      	movs	r1, #0
 800aaae:	2000      	movs	r0, #0
 800aab0:	f00c f81a 	bl	8016ae8 <MAP_setPos>

			MAP_searchGoalKnown(2, 0, SEARCH, SEARCH_SLA );			
 800aab4:	2301      	movs	r3, #1
 800aab6:	2200      	movs	r2, #0
 800aab8:	2100      	movs	r1, #0
 800aaba:	2002      	movs	r0, #2
 800aabc:	f00e fe8a 	bl	80197d4 <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800aac0:	f7f7 fa8c 	bl	8001fdc <SW_IsOn_1>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d006      	beq.n	800aad8 <MODE_exe_m2+0x37c>
 800aaca:	f7fe fd91 	bl	80095f0 <SYS_isOutOfCtrl>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d101      	bne.n	800aad8 <MODE_exe_m2+0x37c>
			else{
				Map_Write();
 800aad4:	f00b ff7e 	bl	80169d4 <Map_Write>
			}
			
			SetLED(0x0e);
 800aad8:	200e      	movs	r0, #14
 800aada:	f7f7 f9fd 	bl	8001ed8 <SetLED>
			MAP_Goalsize(1);
 800aade:	2001      	movs	r0, #1
 800aae0:	f00d fcd2 	bl	8018488 <MAP_Goalsize>
			SetLED(0x00);
 800aae4:	2000      	movs	r0, #0
 800aae6:	f7f7 f9f7 	bl	8001ed8 <SetLED>

			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SLA );
 800aaea:	2301      	movs	r3, #1
 800aaec:	2200      	movs	r2, #0
 800aaee:	2100      	movs	r1, #0
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	f00e fe6f 	bl	80197d4 <MAP_searchGoalKnown>
//			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_RETURN );

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800aaf6:	f7f7 fa71 	bl	8001fdc <SW_IsOn_1>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	f000 810d 	beq.w	800ad1c <MODE_exe_m2+0x5c0>
 800ab02:	f7fe fd75 	bl	80095f0 <SYS_isOutOfCtrl>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f040 8107 	bne.w	800ad1c <MODE_exe_m2+0x5c0>
			else{
				Map_Write();
 800ab0e:	f00b ff61 	bl	80169d4 <Map_Write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800ab12:	2200      	movs	r2, #0
 800ab14:	2100      	movs	r1, #0
 800ab16:	2000      	movs	r0, #0
 800ab18:	f00b ffe6 	bl	8016ae8 <MAP_setPos>
				MAP_makeContourMap_run( 2, 0, BEST_WAY );					// 等高線�?�ップを作る
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	2100      	movs	r1, #0
 800ab20:	2002      	movs	r0, #2
 800ab22:	f00c fda5 	bl	8017670 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH,2, 0, &en_endDir2 );		// ドライブコマンド作�??
 800ab26:	1dfb      	adds	r3, r7, #7
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	2302      	movs	r3, #2
 800ab30:	2200      	movs	r2, #0
 800ab32:	2100      	movs	r1, #0
 800ab34:	2000      	movs	r0, #0
 800ab36:	f009 fb43 	bl	80141c0 <MAP_makeCmdList>
				MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800ab3a:	f009 fd99 	bl	8014670 <MAP_makeSlaCmdList>
				MAP_makeSkewCmdList();
 800ab3e:	f009 ff13 	bl	8014968 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800ab42:	2000      	movs	r0, #0
 800ab44:	f7f7 f9c8 	bl	8001ed8 <SetLED>
			}
			break;
 800ab48:	e0e8      	b.n	800ad1c <MODE_exe_m2+0x5c0>

		case MODE_6://test
			printf("\r\n turn 45 \r\r");
 800ab4a:	4877      	ldr	r0, [pc, #476]	@ (800ad28 <MODE_exe_m2+0x5cc>)
 800ab4c:	f013 f882 	bl	801dc54 <iprintf>
			PARAM_makeSra( 0.5, 550.0f, 7.50f,3000*PI,  SLA_45 );
 800ab50:	2001      	movs	r0, #1
 800ab52:	eddf 1a76 	vldr	s3, [pc, #472]	@ 800ad2c <MODE_exe_m2+0x5d0>
 800ab56:	eeb1 1a0e 	vmov.f32	s2, #30	@ 0x40f00000  7.5
 800ab5a:	eddf 0a75 	vldr	s1, [pc, #468]	@ 800ad30 <MODE_exe_m2+0x5d4>
 800ab5e:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800ab62:	f7f7 fe69 	bl	8002838 <PARAM_makeSra>
			printf("\r\n turn 90 \r\r");		
 800ab66:	4873      	ldr	r0, [pc, #460]	@ (800ad34 <MODE_exe_m2+0x5d8>)
 800ab68:	f013 f874 	bl	801dc54 <iprintf>
			PARAM_makeSra( 0.5, 700.0f, 10.00f,3000*PI,  SLA_90 );	
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	eddf 1a6f 	vldr	s3, [pc, #444]	@ 800ad2c <MODE_exe_m2+0x5d0>
 800ab72:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800ab76:	eddf 0a70 	vldr	s1, [pc, #448]	@ 800ad38 <MODE_exe_m2+0x5dc>
 800ab7a:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800ab7e:	f7f7 fe5b 	bl	8002838 <PARAM_makeSra>
		//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
			printf("\r\n turn 135 \r\r");	
 800ab82:	486e      	ldr	r0, [pc, #440]	@ (800ad3c <MODE_exe_m2+0x5e0>)
 800ab84:	f013 f866 	bl	801dc54 <iprintf>
			PARAM_makeSra( 0.5, 750.0f, 10.00f,3000*PI,  SLA_135 );	
 800ab88:	2002      	movs	r0, #2
 800ab8a:	eddf 1a68 	vldr	s3, [pc, #416]	@ 800ad2c <MODE_exe_m2+0x5d0>
 800ab8e:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800ab92:	eddf 0a6b 	vldr	s1, [pc, #428]	@ 800ad40 <MODE_exe_m2+0x5e4>
 800ab96:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800ab9a:	f7f7 fe4d 	bl	8002838 <PARAM_makeSra>
			printf("\r\n turn N90 \r\r");	
 800ab9e:	4869      	ldr	r0, [pc, #420]	@ (800ad44 <MODE_exe_m2+0x5e8>)
 800aba0:	f013 f858 	bl	801dc54 <iprintf>
			PARAM_makeSra( 0.5, 800.0f, 11.00f,3000*PI,  SLA_N90 );	
 800aba4:	2003      	movs	r0, #3
 800aba6:	eddf 1a61 	vldr	s3, [pc, #388]	@ 800ad2c <MODE_exe_m2+0x5d0>
 800abaa:	eeb2 1a06 	vmov.f32	s2, #38	@ 0x41300000  11.0
 800abae:	eddf 0a66 	vldr	s1, [pc, #408]	@ 800ad48 <MODE_exe_m2+0x5ec>
 800abb2:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800abb6:	f7f7 fe3f 	bl	8002838 <PARAM_makeSra>

			Map_Copy();
 800abba:	f00b ff1f 	bl	80169fc <Map_Copy>

			GYRO_SetRef();
 800abbe:	f7fe feb7 	bl	8009930 <GYRO_SetRef>
			CTRL_clrData();
 800abc2:	f7fb fc3f 	bl	8006444 <CTRL_clrData>
			CTRL_clrAngleErrSum();
 800abc6:	f7fb fc85 	bl	80064d4 <CTRL_clrAngleErrSum>
			CTRL_clrSpeedErrSum();
 800abca:	f7fb fc97 	bl	80064fc <CTRL_clrSpeedErrSum>
			CTRL_clrNowData();
 800abce:	f7fb fca9 	bl	8006524 <CTRL_clrNowData>
			SetLED(0x0e);
 800abd2:	200e      	movs	r0, #14
 800abd4:	f7f7 f980 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*4.0,
 800abd8:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800abdc:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800abe0:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800abe4:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800abe8:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 800ad4c <MODE_exe_m2+0x5f0>
 800abec:	2202      	movs	r2, #2
 800abee:	2100      	movs	r1, #0
 800abf0:	2003      	movs	r0, #3
 800abf2:	f7ff faf1 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5 , SLA_N90);								
			PARAM_setSpeedType( PARAM_ST,   PARAM_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );										
*/
			SetLED(0x00);
 800abf6:	2000      	movs	r0, #0
 800abf8:	f7f7 f96e 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800abfc:	2200      	movs	r2, #0
 800abfe:	2100      	movs	r1, #0
 800ac00:	2000      	movs	r0, #0
 800ac02:	f00b ff71 	bl	8016ae8 <MAP_setPos>
			MAP_Goalsize(1);
 800ac06:	2001      	movs	r0, #1
 800ac08:	f00d fc3e 	bl	8018488 <MAP_Goalsize>
			MAP_makeContourMap_run( 2, 0, BEST_WAY );					// 等高線�?�ップを作る
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	2100      	movs	r1, #0
 800ac10:	2002      	movs	r0, #2
 800ac12:	f00c fd2d 	bl	8017670 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH,  2, 0, &en_endDir2 );		// ドライブコマンド作�??
 800ac16:	1dfb      	adds	r3, r7, #7
 800ac18:	9301      	str	r3, [sp, #4]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	9300      	str	r3, [sp, #0]
 800ac1e:	2302      	movs	r3, #2
 800ac20:	2200      	movs	r2, #0
 800ac22:	2100      	movs	r1, #0
 800ac24:	2000      	movs	r0, #0
 800ac26:	f009 facb 	bl	80141c0 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800ac2a:	f009 fd21 	bl	8014670 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800ac2e:	f009 fe9b 	bl	8014968 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800ac32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ac36:	f010 ff19 	bl	801ba6c <LL_mDelay>
			Set_DutyTIM8(600);
 800ac3a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800ac3e:	f7fb f91f 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);			
 800ac42:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800ac46:	f010 ff11 	bl	801ba6c <LL_mDelay>

			log_flag_on();										
 800ac4a:	f7ff f8cf 	bl	8009dec <log_flag_on>
			MAP_drive( MAP_DRIVE_SKEW );
 800ac4e:	2002      	movs	r0, #2
 800ac50:	f00a fe40 	bl	80158d4 <MAP_drive>
			log_flag_off();
 800ac54:	f7ff f8d6 	bl	8009e04 <log_flag_off>
			Set_DutyTIM8(0);
 800ac58:	2000      	movs	r0, #0
 800ac5a:	f7fb f911 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800ac5e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ac62:	f010 ff03 	bl	801ba6c <LL_mDelay>
			MOT_turn(MOT_R180);
 800ac66:	2002      	movs	r0, #2
 800ac68:	f004 ff46 	bl	800faf8 <MOT_turn>
			MAP_actGoalLED();
 800ac6c:	f00d fbd6 	bl	801841c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800ac70:	2000      	movs	r0, #0
 800ac72:	f7fb f905 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800ac76:	f7fe fcaf 	bl	80095d8 <Failsafe_flag_off>

			PARAM_makeSra( (float)SEARCH_SPEED, 100.0f, 2.50f,3000*PI,  SLA_45 );
 800ac7a:	2001      	movs	r0, #1
 800ac7c:	eddf 1a2b 	vldr	s3, [pc, #172]	@ 800ad2c <MODE_exe_m2+0x5d0>
 800ac80:	eeb0 1a04 	vmov.f32	s2, #4	@ 0x40200000  2.5
 800ac84:	eddf 0a32 	vldr	s1, [pc, #200]	@ 800ad50 <MODE_exe_m2+0x5f4>
 800ac88:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 800ad54 <MODE_exe_m2+0x5f8>
 800ac8c:	f7f7 fdd4 	bl	8002838 <PARAM_makeSra>
			printf("\r\n turn 90 \r\r");		
 800ac90:	4828      	ldr	r0, [pc, #160]	@ (800ad34 <MODE_exe_m2+0x5d8>)
 800ac92:	f012 ffdf 	bl	801dc54 <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 3.50f,3000*PI,  SLA_90 );	
 800ac96:	2000      	movs	r0, #0
 800ac98:	eddf 1a24 	vldr	s3, [pc, #144]	@ 800ad2c <MODE_exe_m2+0x5d0>
 800ac9c:	eeb0 1a0c 	vmov.f32	s2, #12	@ 0x40600000  3.5
 800aca0:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 800ad58 <MODE_exe_m2+0x5fc>
 800aca4:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800ad54 <MODE_exe_m2+0x5f8>
 800aca8:	f7f7 fdc6 	bl	8002838 <PARAM_makeSra>
		//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
			printf("\r\n turn 135 \r\r");	
 800acac:	4823      	ldr	r0, [pc, #140]	@ (800ad3c <MODE_exe_m2+0x5e0>)
 800acae:	f012 ffd1 	bl	801dc54 <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 4.00f,3000*PI,  SLA_135 );	
 800acb2:	2002      	movs	r0, #2
 800acb4:	eddf 1a1d 	vldr	s3, [pc, #116]	@ 800ad2c <MODE_exe_m2+0x5d0>
 800acb8:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 800acbc:	eddf 0a26 	vldr	s1, [pc, #152]	@ 800ad58 <MODE_exe_m2+0x5fc>
 800acc0:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 800ad54 <MODE_exe_m2+0x5f8>
 800acc4:	f7f7 fdb8 	bl	8002838 <PARAM_makeSra>
			printf("\r\n turn N90 \r\r");	
 800acc8:	481e      	ldr	r0, [pc, #120]	@ (800ad44 <MODE_exe_m2+0x5e8>)
 800acca:	f012 ffc3 	bl	801dc54 <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 300.0f, 4.00f,3000*PI,  SLA_N90 );		
 800acce:	2003      	movs	r0, #3
 800acd0:	eddf 1a16 	vldr	s3, [pc, #88]	@ 800ad2c <MODE_exe_m2+0x5d0>
 800acd4:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 800acd8:	eddf 0a20 	vldr	s1, [pc, #128]	@ 800ad5c <MODE_exe_m2+0x600>
 800acdc:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800ad54 <MODE_exe_m2+0x5f8>
 800ace0:	f7f7 fdaa 	bl	8002838 <PARAM_makeSra>
			MODE_speed_parameter(PARAM_VERY_SLOW,PARAM_VERY_SLOW,PARAM_VERY_SLOW,SEARCH_SPEED,
 800ace4:	ed9f 2a1b 	vldr	s4, [pc, #108]	@ 800ad54 <MODE_exe_m2+0x5f8>
 800ace8:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 800ad54 <MODE_exe_m2+0x5f8>
 800acec:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 800ad54 <MODE_exe_m2+0x5f8>
 800acf0:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800ad54 <MODE_exe_m2+0x5f8>
 800acf4:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800ad54 <MODE_exe_m2+0x5f8>
 800acf8:	2200      	movs	r2, #0
 800acfa:	2100      	movs	r1, #0
 800acfc:	2000      	movs	r0, #0
 800acfe:	f7ff fa6b 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_45);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);
*/
			break;
 800ad02:	e00c      	b.n	800ad1e <MODE_exe_m2+0x5c2>

		case MODE_7:
			SetLED(0x0e);
 800ad04:	200e      	movs	r0, #14
 800ad06:	f7f7 f8e7 	bl	8001ed8 <SetLED>
			//cant use
			break;
 800ad0a:	e008      	b.n	800ad1e <MODE_exe_m2+0x5c2>

		default:
			break;
 800ad0c:	bf00      	nop
 800ad0e:	e006      	b.n	800ad1e <MODE_exe_m2+0x5c2>
			break;
 800ad10:	bf00      	nop
 800ad12:	e004      	b.n	800ad1e <MODE_exe_m2+0x5c2>
			break;
 800ad14:	bf00      	nop
 800ad16:	e002      	b.n	800ad1e <MODE_exe_m2+0x5c2>
			break;
 800ad18:	bf00      	nop
 800ad1a:	e000      	b.n	800ad1e <MODE_exe_m2+0x5c2>
			break;
 800ad1c:	bf00      	nop
	}
}
 800ad1e:	bf00      	nop
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	08021bd4 	.word	0x08021bd4
 800ad2c:	46134315 	.word	0x46134315
 800ad30:	44098000 	.word	0x44098000
 800ad34:	08021be4 	.word	0x08021be4
 800ad38:	442f0000 	.word	0x442f0000
 800ad3c:	08021bf4 	.word	0x08021bf4
 800ad40:	443b8000 	.word	0x443b8000
 800ad44:	08021c04 	.word	0x08021c04
 800ad48:	44480000 	.word	0x44480000
 800ad4c:	3f99999a 	.word	0x3f99999a
 800ad50:	42c80000 	.word	0x42c80000
 800ad54:	3e99999a 	.word	0x3e99999a
 800ad58:	43480000 	.word	0x43480000
 800ad5c:	43960000 	.word	0x43960000

0800ad60 <MODE_exe_m3>:

void MODE_exe_m3( void )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 800ad66:	f04f 0200 	mov.w	r2, #0
 800ad6a:	f04f 0300 	mov.w	r3, #0
 800ad6e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	Map_Copy();
 800ad72:	f00b fe43 	bl	80169fc <Map_Copy>

	GYRO_SetRef();
 800ad76:	f7fe fddb 	bl	8009930 <GYRO_SetRef>
	CTRL_clrData();
 800ad7a:	f7fb fb63 	bl	8006444 <CTRL_clrData>
	CTRL_clrAngleErrSum();
 800ad7e:	f7fb fba9 	bl	80064d4 <CTRL_clrAngleErrSum>
	CTRL_clrSpeedErrSum();
 800ad82:	f7fb fbbb 	bl	80064fc <CTRL_clrSpeedErrSum>
	CTRL_clrNowData();
 800ad86:	f7fb fbcd 	bl	8006524 <CTRL_clrNowData>

	switch( en_Mode ){
 800ad8a:	4bd9      	ldr	r3, [pc, #868]	@ (800b0f0 <MODE_exe_m3+0x390>)
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	2b07      	cmp	r3, #7
 800ad90:	f200 825e 	bhi.w	800b250 <MODE_exe_m3+0x4f0>
 800ad94:	a201      	add	r2, pc, #4	@ (adr r2, 800ad9c <MODE_exe_m3+0x3c>)
 800ad96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9a:	bf00      	nop
 800ad9c:	0800adbd 	.word	0x0800adbd
 800ada0:	0800ae5f 	.word	0x0800ae5f
 800ada4:	0800af01 	.word	0x0800af01
 800ada8:	0800afa3 	.word	0x0800afa3
 800adac:	0800b04d 	.word	0x0800b04d
 800adb0:	0800b101 	.word	0x0800b101
 800adb4:	0800b1a3 	.word	0x0800b1a3
 800adb8:	0800b249 	.word	0x0800b249

		case MODE_0:
			SetLED(0x0e);
 800adbc:	200e      	movs	r0, #14
 800adbe:	f7f7 f88b 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_SLOW,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED*4.0,
 800adc2:	ed9f 2ace 	vldr	s4, [pc, #824]	@ 800b0fc <MODE_exe_m3+0x39c>
 800adc6:	eddf 1acd 	vldr	s3, [pc, #820]	@ 800b0fc <MODE_exe_m3+0x39c>
 800adca:	ed9f 1acc 	vldr	s2, [pc, #816]	@ 800b0fc <MODE_exe_m3+0x39c>
 800adce:	eddf 0acb 	vldr	s1, [pc, #812]	@ 800b0fc <MODE_exe_m3+0x39c>
 800add2:	ed9f 0ac8 	vldr	s0, [pc, #800]	@ 800b0f4 <MODE_exe_m3+0x394>
 800add6:	2201      	movs	r2, #1
 800add8:	2100      	movs	r1, #0
 800adda:	2001      	movs	r0, #1
 800addc:	f7ff f9fc 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
*/			SetLED(0x00);
 800ade0:	2000      	movs	r0, #0
 800ade2:	f7f7 f879 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800ade6:	2200      	movs	r2, #0
 800ade8:	2100      	movs	r1, #0
 800adea:	2000      	movs	r0, #0
 800adec:	f00b fe7c 	bl	8016ae8 <MAP_setPos>
			MAP_Goalsize(1);
 800adf0:	2001      	movs	r0, #1
 800adf2:	f00d fb49 	bl	8018488 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800adf6:	2201      	movs	r2, #1
 800adf8:	2107      	movs	r1, #7
 800adfa:	2008      	movs	r0, #8
 800adfc:	f00c fc38 	bl	8017670 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800ae00:	1dfb      	adds	r3, r7, #7
 800ae02:	9301      	str	r3, [sp, #4]
 800ae04:	2307      	movs	r3, #7
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	2308      	movs	r3, #8
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	2000      	movs	r0, #0
 800ae10:	f009 f9d6 	bl	80141c0 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800ae14:	f009 fc2c 	bl	8014670 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800ae18:	f009 fda6 	bl	8014968 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800ae1c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ae20:	f010 fe24 	bl	801ba6c <LL_mDelay>
			Set_DutyTIM8(600);
 800ae24:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800ae28:	f7fb f82a 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);
 800ae2c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800ae30:	f010 fe1c 	bl	801ba6c <LL_mDelay>
			MAP_drive( MAP_DRIVE_SLA );													
 800ae34:	2001      	movs	r0, #1
 800ae36:	f00a fd4d 	bl	80158d4 <MAP_drive>
			Set_DutyTIM8(0);
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	f7fb f820 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800ae40:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ae44:	f010 fe12 	bl	801ba6c <LL_mDelay>
			MOT_turn(MOT_R180);
 800ae48:	2002      	movs	r0, #2
 800ae4a:	f004 fe55 	bl	800faf8 <MOT_turn>
			MAP_actGoalLED();
 800ae4e:	f00d fae5 	bl	801841c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800ae52:	2000      	movs	r0, #0
 800ae54:	f7fb f814 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800ae58:	f7fe fbbe 	bl	80095d8 <Failsafe_flag_off>
			break;
 800ae5c:	e1f9      	b.n	800b252 <MODE_exe_m3+0x4f2>

		case MODE_1:
			SetLED(0x0e);
 800ae5e:	200e      	movs	r0, #14
 800ae60:	f7f7 f83a 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_SLOW,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED*5.0,
 800ae64:	ed9f 2aa5 	vldr	s4, [pc, #660]	@ 800b0fc <MODE_exe_m3+0x39c>
 800ae68:	eddf 1aa4 	vldr	s3, [pc, #656]	@ 800b0fc <MODE_exe_m3+0x39c>
 800ae6c:	ed9f 1aa3 	vldr	s2, [pc, #652]	@ 800b0fc <MODE_exe_m3+0x39c>
 800ae70:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 800b0fc <MODE_exe_m3+0x39c>
 800ae74:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 800ae78:	2201      	movs	r2, #1
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	2001      	movs	r0, #1
 800ae7e:	f7ff f9ab 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );								
*/			SetLED(0x00);
 800ae82:	2000      	movs	r0, #0
 800ae84:	f7f7 f828 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800ae88:	2200      	movs	r2, #0
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	f00b fe2b 	bl	8016ae8 <MAP_setPos>
			MAP_Goalsize(1);
 800ae92:	2001      	movs	r0, #1
 800ae94:	f00d faf8 	bl	8018488 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800ae98:	2201      	movs	r2, #1
 800ae9a:	2107      	movs	r1, #7
 800ae9c:	2008      	movs	r0, #8
 800ae9e:	f00c fbe7 	bl	8017670 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800aea2:	1dfb      	adds	r3, r7, #7
 800aea4:	9301      	str	r3, [sp, #4]
 800aea6:	2307      	movs	r3, #7
 800aea8:	9300      	str	r3, [sp, #0]
 800aeaa:	2308      	movs	r3, #8
 800aeac:	2200      	movs	r2, #0
 800aeae:	2100      	movs	r1, #0
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	f009 f985 	bl	80141c0 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800aeb6:	f009 fbdb 	bl	8014670 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800aeba:	f009 fd55 	bl	8014968 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800aebe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800aec2:	f010 fdd3 	bl	801ba6c <LL_mDelay>
			Set_DutyTIM8(600);
 800aec6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800aeca:	f7fa ffd9 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800aece:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800aed2:	f010 fdcb 	bl	801ba6c <LL_mDelay>
			MAP_drive( MAP_DRIVE_SLA );
 800aed6:	2001      	movs	r0, #1
 800aed8:	f00a fcfc 	bl	80158d4 <MAP_drive>
			Set_DutyTIM8(0);
 800aedc:	2000      	movs	r0, #0
 800aede:	f7fa ffcf 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800aee2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800aee6:	f010 fdc1 	bl	801ba6c <LL_mDelay>
			MOT_turn(MOT_R180);
 800aeea:	2002      	movs	r0, #2
 800aeec:	f004 fe04 	bl	800faf8 <MOT_turn>
			MAP_actGoalLED();
 800aef0:	f00d fa94 	bl	801841c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800aef4:	2000      	movs	r0, #0
 800aef6:	f7fa ffc3 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800aefa:	f7fe fb6d 	bl	80095d8 <Failsafe_flag_off>
			break;
 800aefe:	e1a8      	b.n	800b252 <MODE_exe_m3+0x4f2>

		case MODE_2:
			SetLED(0x0e);
 800af00:	200e      	movs	r0, #14
 800af02:	f7f6 ffe9 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_NORMAL,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED*6.0,
 800af06:	ed9f 2a7d 	vldr	s4, [pc, #500]	@ 800b0fc <MODE_exe_m3+0x39c>
 800af0a:	eddf 1a7c 	vldr	s3, [pc, #496]	@ 800b0fc <MODE_exe_m3+0x39c>
 800af0e:	ed9f 1a7b 	vldr	s2, [pc, #492]	@ 800b0fc <MODE_exe_m3+0x39c>
 800af12:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 800b0fc <MODE_exe_m3+0x39c>
 800af16:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 800b0f8 <MODE_exe_m3+0x398>
 800af1a:	2201      	movs	r2, #1
 800af1c:	2100      	movs	r1, #0
 800af1e:	2002      	movs	r0, #2
 800af20:	f7ff f95a 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );								
*/			SetLED(0x00);
 800af24:	2000      	movs	r0, #0
 800af26:	f7f6 ffd7 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800af2a:	2200      	movs	r2, #0
 800af2c:	2100      	movs	r1, #0
 800af2e:	2000      	movs	r0, #0
 800af30:	f00b fdda 	bl	8016ae8 <MAP_setPos>
			MAP_Goalsize(1);
 800af34:	2001      	movs	r0, #1
 800af36:	f00d faa7 	bl	8018488 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800af3a:	2201      	movs	r2, #1
 800af3c:	2107      	movs	r1, #7
 800af3e:	2008      	movs	r0, #8
 800af40:	f00c fb96 	bl	8017670 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800af44:	1dfb      	adds	r3, r7, #7
 800af46:	9301      	str	r3, [sp, #4]
 800af48:	2307      	movs	r3, #7
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	2308      	movs	r3, #8
 800af4e:	2200      	movs	r2, #0
 800af50:	2100      	movs	r1, #0
 800af52:	2000      	movs	r0, #0
 800af54:	f009 f934 	bl	80141c0 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800af58:	f009 fb8a 	bl	8014670 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800af5c:	f009 fd04 	bl	8014968 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800af60:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800af64:	f010 fd82 	bl	801ba6c <LL_mDelay>
			Set_DutyTIM8(600);
 800af68:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800af6c:	f7fa ff88 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);												
 800af70:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800af74:	f010 fd7a 	bl	801ba6c <LL_mDelay>
			MAP_drive( MAP_DRIVE_SLA );
 800af78:	2001      	movs	r0, #1
 800af7a:	f00a fcab 	bl	80158d4 <MAP_drive>
			Set_DutyTIM8(0);
 800af7e:	2000      	movs	r0, #0
 800af80:	f7fa ff7e 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800af84:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800af88:	f010 fd70 	bl	801ba6c <LL_mDelay>
			MOT_turn(MOT_R180);
 800af8c:	2002      	movs	r0, #2
 800af8e:	f004 fdb3 	bl	800faf8 <MOT_turn>
			MAP_actGoalLED();
 800af92:	f00d fa43 	bl	801841c <MAP_actGoalLED>
			Set_DutyTIM8(0);			
 800af96:	2000      	movs	r0, #0
 800af98:	f7fa ff72 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800af9c:	f7fe fb1c 	bl	80095d8 <Failsafe_flag_off>
			break;
 800afa0:	e157      	b.n	800b252 <MODE_exe_m3+0x4f2>

		case MODE_3:
			SetLED(0x0e);
 800afa2:	200e      	movs	r0, #14
 800afa4:	f7f6 ff98 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_SLOW,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED*4.0,
 800afa8:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 800b0fc <MODE_exe_m3+0x39c>
 800afac:	eddf 1a53 	vldr	s3, [pc, #332]	@ 800b0fc <MODE_exe_m3+0x39c>
 800afb0:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 800b0fc <MODE_exe_m3+0x39c>
 800afb4:	eddf 0a51 	vldr	s1, [pc, #324]	@ 800b0fc <MODE_exe_m3+0x39c>
 800afb8:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 800b0f4 <MODE_exe_m3+0x394>
 800afbc:	2201      	movs	r2, #1
 800afbe:	2100      	movs	r1, #0
 800afc0:	2001      	movs	r0, #1
 800afc2:	f7ff f909 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);						
			PARAM_setSpeedType( PARAM_ST,   PARAM_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );								
*/			SetLED(0x00);
 800afc6:	2000      	movs	r0, #0
 800afc8:	f7f6 ff86 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800afcc:	2200      	movs	r2, #0
 800afce:	2100      	movs	r1, #0
 800afd0:	2000      	movs	r0, #0
 800afd2:	f00b fd89 	bl	8016ae8 <MAP_setPos>
			MAP_Goalsize(1);
 800afd6:	2001      	movs	r0, #1
 800afd8:	f00d fa56 	bl	8018488 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800afdc:	2201      	movs	r2, #1
 800afde:	2107      	movs	r1, #7
 800afe0:	2008      	movs	r0, #8
 800afe2:	f00c fb45 	bl	8017670 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800afe6:	1dfb      	adds	r3, r7, #7
 800afe8:	9301      	str	r3, [sp, #4]
 800afea:	2307      	movs	r3, #7
 800afec:	9300      	str	r3, [sp, #0]
 800afee:	2308      	movs	r3, #8
 800aff0:	2200      	movs	r2, #0
 800aff2:	2100      	movs	r1, #0
 800aff4:	2000      	movs	r0, #0
 800aff6:	f009 f8e3 	bl	80141c0 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800affa:	f009 fb39 	bl	8014670 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800affe:	f009 fcb3 	bl	8014968 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800b002:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b006:	f010 fd31 	bl	801ba6c <LL_mDelay>
			Set_DutyTIM8(600);
 800b00a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b00e:	f7fa ff37 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);		
 800b012:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b016:	f010 fd29 	bl	801ba6c <LL_mDelay>
			
			log_flag_on();
 800b01a:	f7fe fee7 	bl	8009dec <log_flag_on>
			MAP_drive( MAP_DRIVE_SKEW );
 800b01e:	2002      	movs	r0, #2
 800b020:	f00a fc58 	bl	80158d4 <MAP_drive>

			log_flag_off();
 800b024:	f7fe feee 	bl	8009e04 <log_flag_off>
			Set_DutyTIM8(0);
 800b028:	2000      	movs	r0, #0
 800b02a:	f7fa ff29 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b02e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b032:	f010 fd1b 	bl	801ba6c <LL_mDelay>
			MOT_turn(MOT_R180);
 800b036:	2002      	movs	r0, #2
 800b038:	f004 fd5e 	bl	800faf8 <MOT_turn>
			MAP_actGoalLED();
 800b03c:	f00d f9ee 	bl	801841c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800b040:	2000      	movs	r0, #0
 800b042:	f7fa ff1d 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b046:	f7fe fac7 	bl	80095d8 <Failsafe_flag_off>
			break;
 800b04a:	e102      	b.n	800b252 <MODE_exe_m3+0x4f2>

		case MODE_4:
			SetLED(0x0e);
 800b04c:	200e      	movs	r0, #14
 800b04e:	f7f6 ff43 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_SLOW,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED*5.0,
 800b052:	ed9f 2a2a 	vldr	s4, [pc, #168]	@ 800b0fc <MODE_exe_m3+0x39c>
 800b056:	eddf 1a29 	vldr	s3, [pc, #164]	@ 800b0fc <MODE_exe_m3+0x39c>
 800b05a:	ed9f 1a28 	vldr	s2, [pc, #160]	@ 800b0fc <MODE_exe_m3+0x39c>
 800b05e:	eddf 0a27 	vldr	s1, [pc, #156]	@ 800b0fc <MODE_exe_m3+0x39c>
 800b062:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 800b066:	2201      	movs	r2, #1
 800b068:	2100      	movs	r1, #0
 800b06a:	2001      	movs	r0, #1
 800b06c:	f7ff f8b4 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );										
*/			SetLED(0x00);
 800b070:	2000      	movs	r0, #0
 800b072:	f7f6 ff31 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b076:	2200      	movs	r2, #0
 800b078:	2100      	movs	r1, #0
 800b07a:	2000      	movs	r0, #0
 800b07c:	f00b fd34 	bl	8016ae8 <MAP_setPos>
			MAP_Goalsize(1);
 800b080:	2001      	movs	r0, #1
 800b082:	f00d fa01 	bl	8018488 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b086:	2201      	movs	r2, #1
 800b088:	2107      	movs	r1, #7
 800b08a:	2008      	movs	r0, #8
 800b08c:	f00c faf0 	bl	8017670 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b090:	1dfb      	adds	r3, r7, #7
 800b092:	9301      	str	r3, [sp, #4]
 800b094:	2307      	movs	r3, #7
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	2308      	movs	r3, #8
 800b09a:	2200      	movs	r2, #0
 800b09c:	2100      	movs	r1, #0
 800b09e:	2000      	movs	r0, #0
 800b0a0:	f009 f88e 	bl	80141c0 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b0a4:	f009 fae4 	bl	8014670 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800b0a8:	f009 fc5e 	bl	8014968 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800b0ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b0b0:	f010 fcdc 	bl	801ba6c <LL_mDelay>
			Set_DutyTIM8(600);
 800b0b4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b0b8:	f7fa fee2 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800b0bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b0c0:	f010 fcd4 	bl	801ba6c <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800b0c4:	2002      	movs	r0, #2
 800b0c6:	f00a fc05 	bl	80158d4 <MAP_drive>
			Set_DutyTIM8(0);
 800b0ca:	2000      	movs	r0, #0
 800b0cc:	f7fa fed8 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b0d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b0d4:	f010 fcca 	bl	801ba6c <LL_mDelay>
			MOT_turn(MOT_R180);
 800b0d8:	2002      	movs	r0, #2
 800b0da:	f004 fd0d 	bl	800faf8 <MOT_turn>
			MAP_actGoalLED();
 800b0de:	f00d f99d 	bl	801841c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	f7fa fecc 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b0e8:	f7fe fa76 	bl	80095d8 <Failsafe_flag_off>
			break;
 800b0ec:	e0b1      	b.n	800b252 <MODE_exe_m3+0x4f2>
 800b0ee:	bf00      	nop
 800b0f0:	20017b28 	.word	0x20017b28
 800b0f4:	3f99999a 	.word	0x3f99999a
 800b0f8:	3fe66666 	.word	0x3fe66666
 800b0fc:	3e99999a 	.word	0x3e99999a

		case MODE_5:
			SetLED(0x0e);
 800b100:	200e      	movs	r0, #14
 800b102:	f7f6 fee9 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_FAST,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED*6.0,
 800b106:	ed1f 2a03 	vldr	s4, [pc, #-12]	@ 800b0fc <MODE_exe_m3+0x39c>
 800b10a:	ed5f 1a04 	vldr	s3, [pc, #-16]	@ 800b0fc <MODE_exe_m3+0x39c>
 800b10e:	ed1f 1a05 	vldr	s2, [pc, #-20]	@ 800b0fc <MODE_exe_m3+0x39c>
 800b112:	ed5f 0a06 	vldr	s1, [pc, #-24]	@ 800b0fc <MODE_exe_m3+0x39c>
 800b116:	ed1f 0a08 	vldr	s0, [pc, #-32]	@ 800b0f8 <MODE_exe_m3+0x398>
 800b11a:	2201      	movs	r2, #1
 800b11c:	2100      	movs	r1, #0
 800b11e:	2003      	movs	r0, #3
 800b120:	f7ff f85a 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );									
*/			SetLED(0x00);
 800b124:	2000      	movs	r0, #0
 800b126:	f7f6 fed7 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b12a:	2200      	movs	r2, #0
 800b12c:	2100      	movs	r1, #0
 800b12e:	2000      	movs	r0, #0
 800b130:	f00b fcda 	bl	8016ae8 <MAP_setPos>
			MAP_Goalsize(1);
 800b134:	2001      	movs	r0, #1
 800b136:	f00d f9a7 	bl	8018488 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b13a:	2201      	movs	r2, #1
 800b13c:	2107      	movs	r1, #7
 800b13e:	2008      	movs	r0, #8
 800b140:	f00c fa96 	bl	8017670 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b144:	1dfb      	adds	r3, r7, #7
 800b146:	9301      	str	r3, [sp, #4]
 800b148:	2307      	movs	r3, #7
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	2308      	movs	r3, #8
 800b14e:	2200      	movs	r2, #0
 800b150:	2100      	movs	r1, #0
 800b152:	2000      	movs	r0, #0
 800b154:	f009 f834 	bl	80141c0 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b158:	f009 fa8a 	bl	8014670 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800b15c:	f009 fc04 	bl	8014968 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800b160:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b164:	f010 fc82 	bl	801ba6c <LL_mDelay>
			Set_DutyTIM8(600);
 800b168:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b16c:	f7fa fe88 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800b170:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b174:	f010 fc7a 	bl	801ba6c <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800b178:	2002      	movs	r0, #2
 800b17a:	f00a fbab 	bl	80158d4 <MAP_drive>
			Set_DutyTIM8(0);
 800b17e:	2000      	movs	r0, #0
 800b180:	f7fa fe7e 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b184:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b188:	f010 fc70 	bl	801ba6c <LL_mDelay>
			MOT_turn(MOT_R180);
 800b18c:	2002      	movs	r0, #2
 800b18e:	f004 fcb3 	bl	800faf8 <MOT_turn>
			MAP_actGoalLED();
 800b192:	f00d f943 	bl	801841c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800b196:	2000      	movs	r0, #0
 800b198:	f7fa fe72 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b19c:	f7fe fa1c 	bl	80095d8 <Failsafe_flag_off>
			break;
 800b1a0:	e057      	b.n	800b252 <MODE_exe_m3+0x4f2>

		case MODE_6:
			SetLED(0x0e);
 800b1a2:	200e      	movs	r0, #14
 800b1a4:	f7f6 fe98 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_SLOW,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED*5.0,
 800b1a8:	ed1f 2a2c 	vldr	s4, [pc, #-176]	@ 800b0fc <MODE_exe_m3+0x39c>
 800b1ac:	ed5f 1a2d 	vldr	s3, [pc, #-180]	@ 800b0fc <MODE_exe_m3+0x39c>
 800b1b0:	ed1f 1a2e 	vldr	s2, [pc, #-184]	@ 800b0fc <MODE_exe_m3+0x39c>
 800b1b4:	ed5f 0a2f 	vldr	s1, [pc, #-188]	@ 800b0fc <MODE_exe_m3+0x39c>
 800b1b8:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 800b1bc:	2201      	movs	r2, #1
 800b1be:	2100      	movs	r1, #0
 800b1c0:	2001      	movs	r0, #1
 800b1c2:	f7ff f809 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );									
*/			SetLED(0x00);
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	f7f6 fe86 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	f00b fc89 	bl	8016ae8 <MAP_setPos>

			MAP_Goal_init();
 800b1d6:	f00b fc75 	bl	8016ac4 <MAP_Goal_init>
			MAP_makeContourMap_dijkstra_modoki(GOAL_MAP_X_DEF,GOAL_MAP_Y_DEF, BEST_WAY);
 800b1da:	2201      	movs	r2, #1
 800b1dc:	2107      	movs	r1, #7
 800b1de:	2008      	movs	r0, #8
 800b1e0:	f00e fd0c 	bl	8019bfc <MAP_makeContourMap_dijkstra_modoki>
			MAP_Goalsize(1);
 800b1e4:	2001      	movs	r0, #1
 800b1e6:	f00d f94f 	bl	8018488 <MAP_Goalsize>
	
			MAP_makeCmdList_dijkstra_modoki(0, 0, NORTH, GOAL_MAP_X_DEF,GOAL_MAP_Y_DEF, &en_endDir2);		// ドライブコマンド作成
 800b1ea:	1dfb      	adds	r3, r7, #7
 800b1ec:	9301      	str	r3, [sp, #4]
 800b1ee:	2307      	movs	r3, #7
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	2308      	movs	r3, #8
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	2100      	movs	r1, #0
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	f00b f96f 	bl	80164dc <MAP_makeCmdList_dijkstra_modoki>
			MAP_makeSlaCmdList();													// スラロームコマンド作成
 800b1fe:	f009 fa37 	bl	8014670 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();
 800b202:	f009 fbb1 	bl	8014968 <MAP_makeSkewCmdList>

			LL_mDelay(500);
 800b206:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b20a:	f010 fc2f 	bl	801ba6c <LL_mDelay>
			Set_DutyTIM8(600);
 800b20e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b212:	f7fa fe35 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800b216:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b21a:	f010 fc27 	bl	801ba6c <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800b21e:	2002      	movs	r0, #2
 800b220:	f00a fb58 	bl	80158d4 <MAP_drive>
			Set_DutyTIM8(0);
 800b224:	2000      	movs	r0, #0
 800b226:	f7fa fe2b 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b22a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b22e:	f010 fc1d 	bl	801ba6c <LL_mDelay>
			MOT_turn(MOT_R180);
 800b232:	2002      	movs	r0, #2
 800b234:	f004 fc60 	bl	800faf8 <MOT_turn>
			MAP_actGoalLED();
 800b238:	f00d f8f0 	bl	801841c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800b23c:	2000      	movs	r0, #0
 800b23e:	f7fa fe1f 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b242:	f7fe f9c9 	bl	80095d8 <Failsafe_flag_off>

			break;
 800b246:	e004      	b.n	800b252 <MODE_exe_m3+0x4f2>

		case MODE_7:
			SetLED(0x0e);
 800b248:	200e      	movs	r0, #14
 800b24a:	f7f6 fe45 	bl	8001ed8 <SetLED>
			//cant use
			break;
 800b24e:	e000      	b.n	800b252 <MODE_exe_m3+0x4f2>

		default:
			break;
 800b250:	bf00      	nop
	}
}
 800b252:	bf00      	nop
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop

0800b25c <MODE_exe_m4>:

void MODE_exe_m4( void )
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b086      	sub	sp, #24
 800b260:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 800b262:	f04f 0200 	mov.w	r2, #0
 800b266:	f04f 0300 	mov.w	r3, #0
 800b26a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Min_in = 0;
 800b26e:	4bc4      	ldr	r3, [pc, #784]	@ (800b580 <MODE_exe_m4+0x324>)
 800b270:	2200      	movs	r2, #0
 800b272:	701a      	strb	r2, [r3, #0]
	Sec_in = 0;
 800b274:	4bc3      	ldr	r3, [pc, #780]	@ (800b584 <MODE_exe_m4+0x328>)
 800b276:	2200      	movs	r2, #0
 800b278:	701a      	strb	r2, [r3, #0]
	Msec_in = 0;
 800b27a:	4bc3      	ldr	r3, [pc, #780]	@ (800b588 <MODE_exe_m4+0x32c>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	801a      	strh	r2, [r3, #0]

	GYRO_SetRef();
 800b280:	f7fe fb56 	bl	8009930 <GYRO_SetRef>
	CTRL_clrData();
 800b284:	f7fb f8de 	bl	8006444 <CTRL_clrData>
	CTRL_clrAngleErrSum();
 800b288:	f7fb f924 	bl	80064d4 <CTRL_clrAngleErrSum>
	CTRL_clrSpeedErrSum();
 800b28c:	f7fb f936 	bl	80064fc <CTRL_clrSpeedErrSum>
	CTRL_clrNowData();
 800b290:	f7fb f948 	bl	8006524 <CTRL_clrNowData>

	switch( en_Mode ){
 800b294:	4bbd      	ldr	r3, [pc, #756]	@ (800b58c <MODE_exe_m4+0x330>)
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	2b07      	cmp	r3, #7
 800b29a:	f200 8166 	bhi.w	800b56a <MODE_exe_m4+0x30e>
 800b29e:	a201      	add	r2, pc, #4	@ (adr r2, 800b2a4 <MODE_exe_m4+0x48>)
 800b2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a4:	0800b2c5 	.word	0x0800b2c5
 800b2a8:	0800b39b 	.word	0x0800b39b
 800b2ac:	0800b471 	.word	0x0800b471
 800b2b0:	0800b543 	.word	0x0800b543
 800b2b4:	0800b54b 	.word	0x0800b54b
 800b2b8:	0800b553 	.word	0x0800b553
 800b2bc:	0800b55b 	.word	0x0800b55b
 800b2c0:	0800b563 	.word	0x0800b563

		case MODE_0:
			SetLED(0x0e);
 800b2c4:	200e      	movs	r0, #14
 800b2c6:	f7f6 fe07 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_SLOW,PARAM_VERY_SLOW,PARAM_VERY_SLOW,SEARCH_SPEED,
 800b2ca:	ed9f 2ab1 	vldr	s4, [pc, #708]	@ 800b590 <MODE_exe_m4+0x334>
 800b2ce:	eddf 1ab0 	vldr	s3, [pc, #704]	@ 800b590 <MODE_exe_m4+0x334>
 800b2d2:	ed9f 1aaf 	vldr	s2, [pc, #700]	@ 800b590 <MODE_exe_m4+0x334>
 800b2d6:	eddf 0aae 	vldr	s1, [pc, #696]	@ 800b590 <MODE_exe_m4+0x334>
 800b2da:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 800b590 <MODE_exe_m4+0x334>
 800b2de:	2200      	movs	r2, #0
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	f7fe ff78 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );								
*/			SetLED(0x00);
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	f7f6 fdf5 	bl	8001ed8 <SetLED>
			LL_mDelay(100);
 800b2ee:	2064      	movs	r0, #100	@ 0x64
 800b2f0:	f010 fbbc 	bl	801ba6c <LL_mDelay>
			MAP_Goalsize(1);
 800b2f4:	2001      	movs	r0, #1
 800b2f6:	f00d f8c7 	bl	8018488 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );						
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	2000      	movs	r0, #0
 800b300:	f00b fbf2 	bl	8016ae8 <MAP_setPos>

			MAP_searchGoal(GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, SEARCH, SEARCH_SLA );			
 800b304:	2301      	movs	r3, #1
 800b306:	2200      	movs	r2, #0
 800b308:	2107      	movs	r1, #7
 800b30a:	2008      	movs	r0, #8
 800b30c:	f00e f90a 	bl	8019524 <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800b310:	f7f6 fe64 	bl	8001fdc <SW_IsOn_1>
 800b314:	4603      	mov	r3, r0
 800b316:	2b01      	cmp	r3, #1
 800b318:	d006      	beq.n	800b328 <MODE_exe_m4+0xcc>
 800b31a:	f7fe f969 	bl	80095f0 <SYS_isOutOfCtrl>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <MODE_exe_m4+0xcc>
			else{
				Map_Write();
 800b324:	f00b fb56 	bl	80169d4 <Map_Write>
			}
			
			SetLED(0x0e);
 800b328:	200e      	movs	r0, #14
 800b32a:	f7f6 fdd5 	bl	8001ed8 <SetLED>
			MAP_Goalsize(1);
 800b32e:	2001      	movs	r0, #1
 800b330:	f00d f8aa 	bl	8018488 <MAP_Goalsize>
			SetLED(0x00);
 800b334:	2000      	movs	r0, #0
 800b336:	f7f6 fdcf 	bl	8001ed8 <SetLED>

			MAP_searchGoal( 0, 0, SEARCH, SEARCH_SLA );
 800b33a:	2301      	movs	r3, #1
 800b33c:	2200      	movs	r2, #0
 800b33e:	2100      	movs	r1, #0
 800b340:	2000      	movs	r0, #0
 800b342:	f00e f8ef 	bl	8019524 <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800b346:	f7f6 fe49 	bl	8001fdc <SW_IsOn_1>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	f000 810e 	beq.w	800b56e <MODE_exe_m4+0x312>
 800b352:	f7fe f94d 	bl	80095f0 <SYS_isOutOfCtrl>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	f040 8108 	bne.w	800b56e <MODE_exe_m4+0x312>
			else{
				Map_Write();
 800b35e:	f00b fb39 	bl	80169d4 <Map_Write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800b362:	2200      	movs	r2, #0
 800b364:	2100      	movs	r1, #0
 800b366:	2000      	movs	r0, #0
 800b368:	f00b fbbe 	bl	8016ae8 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b36c:	2201      	movs	r2, #1
 800b36e:	2107      	movs	r1, #7
 800b370:	2008      	movs	r0, #8
 800b372:	f00c f97d 	bl	8017670 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b376:	1dfb      	adds	r3, r7, #7
 800b378:	9301      	str	r3, [sp, #4]
 800b37a:	2307      	movs	r3, #7
 800b37c:	9300      	str	r3, [sp, #0]
 800b37e:	2308      	movs	r3, #8
 800b380:	2200      	movs	r2, #0
 800b382:	2100      	movs	r1, #0
 800b384:	2000      	movs	r0, #0
 800b386:	f008 ff1b 	bl	80141c0 <MAP_makeCmdList>
				MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b38a:	f009 f971 	bl	8014670 <MAP_makeSlaCmdList>
				MAP_makeSkewCmdList();
 800b38e:	f009 faeb 	bl	8014968 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800b392:	2000      	movs	r0, #0
 800b394:	f7f6 fda0 	bl	8001ed8 <SetLED>
			}
			break;
 800b398:	e0e9      	b.n	800b56e <MODE_exe_m4+0x312>

		case MODE_1:
			SetLED(0x0e);
 800b39a:	200e      	movs	r0, #14
 800b39c:	f7f6 fd9c 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_SLOW,PARAM_VERY_SLOW,PARAM_VERY_SLOW,SEARCH_SPEED,
 800b3a0:	ed9f 2a7b 	vldr	s4, [pc, #492]	@ 800b590 <MODE_exe_m4+0x334>
 800b3a4:	eddf 1a7a 	vldr	s3, [pc, #488]	@ 800b590 <MODE_exe_m4+0x334>
 800b3a8:	ed9f 1a79 	vldr	s2, [pc, #484]	@ 800b590 <MODE_exe_m4+0x334>
 800b3ac:	eddf 0a78 	vldr	s1, [pc, #480]	@ 800b590 <MODE_exe_m4+0x334>
 800b3b0:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 800b590 <MODE_exe_m4+0x334>
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	f7fe ff0d 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );							
*/			SetLED(0x00);
 800b3be:	2000      	movs	r0, #0
 800b3c0:	f7f6 fd8a 	bl	8001ed8 <SetLED>
			LL_mDelay(100);
 800b3c4:	2064      	movs	r0, #100	@ 0x64
 800b3c6:	f010 fb51 	bl	801ba6c <LL_mDelay>
			MAP_Goalsize(1);
 800b3ca:	2001      	movs	r0, #1
 800b3cc:	f00d f85c 	bl	8018488 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	f00b fb87 	bl	8016ae8 <MAP_setPos>

			MAP_searchGoalKnown(GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, SEARCH, SEARCH_SLA );			
 800b3da:	2301      	movs	r3, #1
 800b3dc:	2200      	movs	r2, #0
 800b3de:	2107      	movs	r1, #7
 800b3e0:	2008      	movs	r0, #8
 800b3e2:	f00e f9f7 	bl	80197d4 <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800b3e6:	f7f6 fdf9 	bl	8001fdc <SW_IsOn_1>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d006      	beq.n	800b3fe <MODE_exe_m4+0x1a2>
 800b3f0:	f7fe f8fe 	bl	80095f0 <SYS_isOutOfCtrl>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d101      	bne.n	800b3fe <MODE_exe_m4+0x1a2>
			else{
				Map_Write();
 800b3fa:	f00b faeb 	bl	80169d4 <Map_Write>
			}
			
			SetLED(0x0e);
 800b3fe:	200e      	movs	r0, #14
 800b400:	f7f6 fd6a 	bl	8001ed8 <SetLED>
			MAP_Goalsize(1);
 800b404:	2001      	movs	r0, #1
 800b406:	f00d f83f 	bl	8018488 <MAP_Goalsize>
			SetLED(0x00);
 800b40a:	2000      	movs	r0, #0
 800b40c:	f7f6 fd64 	bl	8001ed8 <SetLED>

			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SLA );
 800b410:	2301      	movs	r3, #1
 800b412:	2200      	movs	r2, #0
 800b414:	2100      	movs	r1, #0
 800b416:	2000      	movs	r0, #0
 800b418:	f00e f9dc 	bl	80197d4 <MAP_searchGoalKnown>
//			MAP_searchGoal( 0, 0, SEARCH, SEARCH_RETURN );

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800b41c:	f7f6 fdde 	bl	8001fdc <SW_IsOn_1>
 800b420:	4603      	mov	r3, r0
 800b422:	2b01      	cmp	r3, #1
 800b424:	f000 80a5 	beq.w	800b572 <MODE_exe_m4+0x316>
 800b428:	f7fe f8e2 	bl	80095f0 <SYS_isOutOfCtrl>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f040 809f 	bne.w	800b572 <MODE_exe_m4+0x316>
			else{
				Map_Write();
 800b434:	f00b face 	bl	80169d4 <Map_Write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800b438:	2200      	movs	r2, #0
 800b43a:	2100      	movs	r1, #0
 800b43c:	2000      	movs	r0, #0
 800b43e:	f00b fb53 	bl	8016ae8 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b442:	2201      	movs	r2, #1
 800b444:	2107      	movs	r1, #7
 800b446:	2008      	movs	r0, #8
 800b448:	f00c f912 	bl	8017670 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b44c:	1dfb      	adds	r3, r7, #7
 800b44e:	9301      	str	r3, [sp, #4]
 800b450:	2307      	movs	r3, #7
 800b452:	9300      	str	r3, [sp, #0]
 800b454:	2308      	movs	r3, #8
 800b456:	2200      	movs	r2, #0
 800b458:	2100      	movs	r1, #0
 800b45a:	2000      	movs	r0, #0
 800b45c:	f008 feb0 	bl	80141c0 <MAP_makeCmdList>
				MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b460:	f009 f906 	bl	8014670 <MAP_makeSlaCmdList>
				MAP_makeSkewCmdList();
 800b464:	f009 fa80 	bl	8014968 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800b468:	2000      	movs	r0, #0
 800b46a:	f7f6 fd35 	bl	8001ed8 <SetLED>
			}
			break;
 800b46e:	e080      	b.n	800b572 <MODE_exe_m4+0x316>

		case MODE_2:
			SetLED(0x0e);
 800b470:	200e      	movs	r0, #14
 800b472:	f7f6 fd31 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_SLOW,PARAM_VERY_SLOW,PARAM_VERY_SLOW,SEARCH_SPEED,
 800b476:	ed9f 2a46 	vldr	s4, [pc, #280]	@ 800b590 <MODE_exe_m4+0x334>
 800b47a:	eddf 1a45 	vldr	s3, [pc, #276]	@ 800b590 <MODE_exe_m4+0x334>
 800b47e:	ed9f 1a44 	vldr	s2, [pc, #272]	@ 800b590 <MODE_exe_m4+0x334>
 800b482:	eddf 0a43 	vldr	s1, [pc, #268]	@ 800b590 <MODE_exe_m4+0x334>
 800b486:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 800b590 <MODE_exe_m4+0x334>
 800b48a:	2200      	movs	r2, #0
 800b48c:	2100      	movs	r1, #0
 800b48e:	2000      	movs	r0, #0
 800b490:	f7fe fea2 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );							
*/			SetLED(0x00);
 800b494:	2000      	movs	r0, #0
 800b496:	f7f6 fd1f 	bl	8001ed8 <SetLED>
			LL_mDelay(100);
 800b49a:	2064      	movs	r0, #100	@ 0x64
 800b49c:	f010 fae6 	bl	801ba6c <LL_mDelay>
//			PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
			MAP_Goalsize(1);
 800b4a0:	2001      	movs	r0, #1
 800b4a2:	f00c fff1 	bl	8018488 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	f00b fb1c 	bl	8016ae8 <MAP_setPos>

			MAP_searchGoalKnown(GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, SEARCH, SEARCH_SLA );			
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	2107      	movs	r1, #7
 800b4b6:	2008      	movs	r0, #8
 800b4b8:	f00e f98c 	bl	80197d4 <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800b4bc:	f7f6 fd8e 	bl	8001fdc <SW_IsOn_1>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d006      	beq.n	800b4d4 <MODE_exe_m4+0x278>
 800b4c6:	f7fe f893 	bl	80095f0 <SYS_isOutOfCtrl>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d101      	bne.n	800b4d4 <MODE_exe_m4+0x278>
			else{
				Map_Write();
 800b4d0:	f00b fa80 	bl	80169d4 <Map_Write>
			}
			
			SetLED(0x0e);
 800b4d4:	200e      	movs	r0, #14
 800b4d6:	f7f6 fcff 	bl	8001ed8 <SetLED>
			MAP_Goalsize(1);
 800b4da:	2001      	movs	r0, #1
 800b4dc:	f00c ffd4 	bl	8018488 <MAP_Goalsize>
			SetLED(0x00);
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	f7f6 fcf9 	bl	8001ed8 <SetLED>

			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SLA );
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	f00e f971 	bl	80197d4 <MAP_searchGoalKnown>
//			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_RETURN );

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800b4f2:	f7f6 fd73 	bl	8001fdc <SW_IsOn_1>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d03c      	beq.n	800b576 <MODE_exe_m4+0x31a>
 800b4fc:	f7fe f878 	bl	80095f0 <SYS_isOutOfCtrl>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d137      	bne.n	800b576 <MODE_exe_m4+0x31a>
			else{
				Map_Write();
 800b506:	f00b fa65 	bl	80169d4 <Map_Write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800b50a:	2200      	movs	r2, #0
 800b50c:	2100      	movs	r1, #0
 800b50e:	2000      	movs	r0, #0
 800b510:	f00b faea 	bl	8016ae8 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b514:	2201      	movs	r2, #1
 800b516:	2107      	movs	r1, #7
 800b518:	2008      	movs	r0, #8
 800b51a:	f00c f8a9 	bl	8017670 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b51e:	1dfb      	adds	r3, r7, #7
 800b520:	9301      	str	r3, [sp, #4]
 800b522:	2307      	movs	r3, #7
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	2308      	movs	r3, #8
 800b528:	2200      	movs	r2, #0
 800b52a:	2100      	movs	r1, #0
 800b52c:	2000      	movs	r0, #0
 800b52e:	f008 fe47 	bl	80141c0 <MAP_makeCmdList>
				MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b532:	f009 f89d 	bl	8014670 <MAP_makeSlaCmdList>
				MAP_makeSkewCmdList();
 800b536:	f009 fa17 	bl	8014968 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800b53a:	2000      	movs	r0, #0
 800b53c:	f7f6 fccc 	bl	8001ed8 <SetLED>
			}
			break;
 800b540:	e019      	b.n	800b576 <MODE_exe_m4+0x31a>

		case MODE_3:
			SetLED(0x0e);
 800b542:	200e      	movs	r0, #14
 800b544:	f7f6 fcc8 	bl	8001ed8 <SetLED>
			
			break;
 800b548:	e016      	b.n	800b578 <MODE_exe_m4+0x31c>

		case MODE_4:
			SetLED(0x0e);
 800b54a:	200e      	movs	r0, #14
 800b54c:	f7f6 fcc4 	bl	8001ed8 <SetLED>
			break;
 800b550:	e012      	b.n	800b578 <MODE_exe_m4+0x31c>

		case MODE_5:
			SetLED(0x0e);
 800b552:	200e      	movs	r0, #14
 800b554:	f7f6 fcc0 	bl	8001ed8 <SetLED>
			break;
 800b558:	e00e      	b.n	800b578 <MODE_exe_m4+0x31c>

		case MODE_6:
			SetLED(0x0e);
 800b55a:	200e      	movs	r0, #14
 800b55c:	f7f6 fcbc 	bl	8001ed8 <SetLED>
			break;
 800b560:	e00a      	b.n	800b578 <MODE_exe_m4+0x31c>

		case MODE_7:
			SetLED(0x0e);
 800b562:	200e      	movs	r0, #14
 800b564:	f7f6 fcb8 	bl	8001ed8 <SetLED>
			//cant use
			break;
 800b568:	e006      	b.n	800b578 <MODE_exe_m4+0x31c>

		default:
			break;
 800b56a:	bf00      	nop
 800b56c:	e004      	b.n	800b578 <MODE_exe_m4+0x31c>
			break;
 800b56e:	bf00      	nop
 800b570:	e002      	b.n	800b578 <MODE_exe_m4+0x31c>
			break;
 800b572:	bf00      	nop
 800b574:	e000      	b.n	800b578 <MODE_exe_m4+0x31c>
			break;
 800b576:	bf00      	nop
	}
}
 800b578:	bf00      	nop
 800b57a:	3710      	adds	r7, #16
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	20000217 	.word	0x20000217
 800b584:	20000216 	.word	0x20000216
 800b588:	20000214 	.word	0x20000214
 800b58c:	20017b28 	.word	0x20017b28
 800b590:	3e99999a 	.word	0x3e99999a

0800b594 <MODE_exe_m5>:

void MODE_exe_m5( void )
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b086      	sub	sp, #24
 800b598:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 800b59a:	f04f 0200 	mov.w	r2, #0
 800b59e:	f04f 0300 	mov.w	r3, #0
 800b5a2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	printf("\r\n turn 45 \r\r");
 800b5a6:	48d2      	ldr	r0, [pc, #840]	@ (800b8f0 <MODE_exe_m5+0x35c>)
 800b5a8:	f012 fb54 	bl	801dc54 <iprintf>
	PARAM_makeSra( 0.5, 550.0f, 7.50f,3000*PI,  SLA_45 );
 800b5ac:	2001      	movs	r0, #1
 800b5ae:	eddf 1ad1 	vldr	s3, [pc, #836]	@ 800b8f4 <MODE_exe_m5+0x360>
 800b5b2:	eeb1 1a0e 	vmov.f32	s2, #30	@ 0x40f00000  7.5
 800b5b6:	eddf 0ad0 	vldr	s1, [pc, #832]	@ 800b8f8 <MODE_exe_m5+0x364>
 800b5ba:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800b5be:	f7f7 f93b 	bl	8002838 <PARAM_makeSra>
	printf("\r\n turn 90 \r\r");		
 800b5c2:	48ce      	ldr	r0, [pc, #824]	@ (800b8fc <MODE_exe_m5+0x368>)
 800b5c4:	f012 fb46 	bl	801dc54 <iprintf>
	PARAM_makeSra( 0.5, 700.0f, 10.00f,3000*PI,  SLA_90 );	
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	eddf 1aca 	vldr	s3, [pc, #808]	@ 800b8f4 <MODE_exe_m5+0x360>
 800b5ce:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800b5d2:	eddf 0acb 	vldr	s1, [pc, #812]	@ 800b900 <MODE_exe_m5+0x36c>
 800b5d6:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800b5da:	f7f7 f92d 	bl	8002838 <PARAM_makeSra>
//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
	printf("\r\n turn 135 \r\r");	
 800b5de:	48c9      	ldr	r0, [pc, #804]	@ (800b904 <MODE_exe_m5+0x370>)
 800b5e0:	f012 fb38 	bl	801dc54 <iprintf>
	PARAM_makeSra( 0.5, 750.0f, 10.00f,3000*PI,  SLA_135 );	
 800b5e4:	2002      	movs	r0, #2
 800b5e6:	eddf 1ac3 	vldr	s3, [pc, #780]	@ 800b8f4 <MODE_exe_m5+0x360>
 800b5ea:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800b5ee:	eddf 0ac6 	vldr	s1, [pc, #792]	@ 800b908 <MODE_exe_m5+0x374>
 800b5f2:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800b5f6:	f7f7 f91f 	bl	8002838 <PARAM_makeSra>
	printf("\r\n turn N90 \r\r");	
 800b5fa:	48c4      	ldr	r0, [pc, #784]	@ (800b90c <MODE_exe_m5+0x378>)
 800b5fc:	f012 fb2a 	bl	801dc54 <iprintf>
	PARAM_makeSra( 0.5, 800.0f, 11.00f,3000*PI,  SLA_N90 );	
 800b600:	2003      	movs	r0, #3
 800b602:	eddf 1abc 	vldr	s3, [pc, #752]	@ 800b8f4 <MODE_exe_m5+0x360>
 800b606:	eeb2 1a06 	vmov.f32	s2, #38	@ 0x41300000  11.0
 800b60a:	eddf 0ac1 	vldr	s1, [pc, #772]	@ 800b910 <MODE_exe_m5+0x37c>
 800b60e:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800b612:	f7f7 f911 	bl	8002838 <PARAM_makeSra>

	Map_Copy();
 800b616:	f00b f9f1 	bl	80169fc <Map_Copy>

	GYRO_SetRef();
 800b61a:	f7fe f989 	bl	8009930 <GYRO_SetRef>
	CTRL_clrData();
 800b61e:	f7fa ff11 	bl	8006444 <CTRL_clrData>
	CTRL_clrAngleErrSum();
 800b622:	f7fa ff57 	bl	80064d4 <CTRL_clrAngleErrSum>
	CTRL_clrSpeedErrSum();
 800b626:	f7fa ff69 	bl	80064fc <CTRL_clrSpeedErrSum>
	CTRL_clrNowData();
 800b62a:	f7fa ff7b 	bl	8006524 <CTRL_clrNowData>

	switch( en_Mode ){
 800b62e:	4bb9      	ldr	r3, [pc, #740]	@ (800b914 <MODE_exe_m5+0x380>)
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	2b07      	cmp	r3, #7
 800b634:	f200 826d 	bhi.w	800bb12 <MODE_exe_m5+0x57e>
 800b638:	a201      	add	r2, pc, #4	@ (adr r2, 800b640 <MODE_exe_m5+0xac>)
 800b63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b63e:	bf00      	nop
 800b640:	0800b661 	.word	0x0800b661
 800b644:	0800b703 	.word	0x0800b703
 800b648:	0800b7a5 	.word	0x0800b7a5
 800b64c:	0800b847 	.word	0x0800b847
 800b650:	0800b921 	.word	0x0800b921
 800b654:	0800b9c3 	.word	0x0800b9c3
 800b658:	0800ba65 	.word	0x0800ba65
 800b65c:	0800bb0b 	.word	0x0800bb0b

		case MODE_0:
			SetLED(0x0e);
 800b660:	200e      	movs	r0, #14
 800b662:	f7f6 fc39 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*4.0,
 800b666:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800b66a:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800b66e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800b672:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800b676:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 800b918 <MODE_exe_m5+0x384>
 800b67a:	2202      	movs	r2, #2
 800b67c:	2100      	movs	r1, #0
 800b67e:	2003      	movs	r0, #3
 800b680:	f7fe fdaa 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5 , SLA_135);
			MOT_setSlaStaSpeed( 0.5 , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
*/			SetLED(0x00);	
 800b684:	2000      	movs	r0, #0
 800b686:	f7f6 fc27 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b68a:	2200      	movs	r2, #0
 800b68c:	2100      	movs	r1, #0
 800b68e:	2000      	movs	r0, #0
 800b690:	f00b fa2a 	bl	8016ae8 <MAP_setPos>
			MAP_Goalsize(1);
 800b694:	2001      	movs	r0, #1
 800b696:	f00c fef7 	bl	8018488 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b69a:	2201      	movs	r2, #1
 800b69c:	2107      	movs	r1, #7
 800b69e:	2008      	movs	r0, #8
 800b6a0:	f00b ffe6 	bl	8017670 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b6a4:	1dfb      	adds	r3, r7, #7
 800b6a6:	9301      	str	r3, [sp, #4]
 800b6a8:	2307      	movs	r3, #7
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	2308      	movs	r3, #8
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	2000      	movs	r0, #0
 800b6b4:	f008 fd84 	bl	80141c0 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b6b8:	f008 ffda 	bl	8014670 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800b6bc:	f009 f954 	bl	8014968 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800b6c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b6c4:	f010 f9d2 	bl	801ba6c <LL_mDelay>
			Set_DutyTIM8(600);
 800b6c8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b6cc:	f7fa fbd8 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);	
 800b6d0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b6d4:	f010 f9ca 	bl	801ba6c <LL_mDelay>
			MAP_drive( MAP_DRIVE_SLA );												
 800b6d8:	2001      	movs	r0, #1
 800b6da:	f00a f8fb 	bl	80158d4 <MAP_drive>
			Set_DutyTIM8(0);
 800b6de:	2000      	movs	r0, #0
 800b6e0:	f7fa fbce 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b6e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b6e8:	f010 f9c0 	bl	801ba6c <LL_mDelay>
			MOT_turn(MOT_R180);
 800b6ec:	2002      	movs	r0, #2
 800b6ee:	f004 fa03 	bl	800faf8 <MOT_turn>
			MAP_actGoalLED();
 800b6f2:	f00c fe93 	bl	801841c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	f7fa fbc2 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b6fc:	f7fd ff6c 	bl	80095d8 <Failsafe_flag_off>
			break;
 800b700:	e208      	b.n	800bb14 <MODE_exe_m5+0x580>

		case MODE_1:
			SetLED(0x0e);
 800b702:	200e      	movs	r0, #14
 800b704:	f7f6 fbe8 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*5.0,
 800b708:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800b70c:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800b710:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800b714:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800b718:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 800b71c:	2202      	movs	r2, #2
 800b71e:	2100      	movs	r1, #0
 800b720:	2003      	movs	r0, #3
 800b722:	f7fe fd59 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5 , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
*/								
			SetLED(0x00);
 800b726:	2000      	movs	r0, #0
 800b728:	f7f6 fbd6 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b72c:	2200      	movs	r2, #0
 800b72e:	2100      	movs	r1, #0
 800b730:	2000      	movs	r0, #0
 800b732:	f00b f9d9 	bl	8016ae8 <MAP_setPos>
			MAP_Goalsize(1);
 800b736:	2001      	movs	r0, #1
 800b738:	f00c fea6 	bl	8018488 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b73c:	2201      	movs	r2, #1
 800b73e:	2107      	movs	r1, #7
 800b740:	2008      	movs	r0, #8
 800b742:	f00b ff95 	bl	8017670 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b746:	1dfb      	adds	r3, r7, #7
 800b748:	9301      	str	r3, [sp, #4]
 800b74a:	2307      	movs	r3, #7
 800b74c:	9300      	str	r3, [sp, #0]
 800b74e:	2308      	movs	r3, #8
 800b750:	2200      	movs	r2, #0
 800b752:	2100      	movs	r1, #0
 800b754:	2000      	movs	r0, #0
 800b756:	f008 fd33 	bl	80141c0 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b75a:	f008 ff89 	bl	8014670 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800b75e:	f009 f903 	bl	8014968 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800b762:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b766:	f010 f981 	bl	801ba6c <LL_mDelay>
			Set_DutyTIM8(600);
 800b76a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b76e:	f7fa fb87 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800b772:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b776:	f010 f979 	bl	801ba6c <LL_mDelay>
			MAP_drive( MAP_DRIVE_SLA );
 800b77a:	2001      	movs	r0, #1
 800b77c:	f00a f8aa 	bl	80158d4 <MAP_drive>
			Set_DutyTIM8(0);
 800b780:	2000      	movs	r0, #0
 800b782:	f7fa fb7d 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b786:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b78a:	f010 f96f 	bl	801ba6c <LL_mDelay>
			MOT_turn(MOT_R180);
 800b78e:	2002      	movs	r0, #2
 800b790:	f004 f9b2 	bl	800faf8 <MOT_turn>
			MAP_actGoalLED();
 800b794:	f00c fe42 	bl	801841c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800b798:	2000      	movs	r0, #0
 800b79a:	f7fa fb71 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b79e:	f7fd ff1b 	bl	80095d8 <Failsafe_flag_off>
			break;
 800b7a2:	e1b7      	b.n	800bb14 <MODE_exe_m5+0x580>

		case MODE_2:
			SetLED(0x0e);
 800b7a4:	200e      	movs	r0, #14
 800b7a6:	f7f6 fb97 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*6.0,
 800b7aa:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800b7ae:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800b7b2:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800b7b6:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800b7ba:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 800b91c <MODE_exe_m5+0x388>
 800b7be:	2202      	movs	r2, #2
 800b7c0:	2100      	movs	r1, #0
 800b7c2:	2003      	movs	r0, #3
 800b7c4:	f7fe fd08 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5 , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
*/								
			SetLED(0x00);
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	f7f6 fb85 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	2000      	movs	r0, #0
 800b7d4:	f00b f988 	bl	8016ae8 <MAP_setPos>
			MAP_Goalsize(1);
 800b7d8:	2001      	movs	r0, #1
 800b7da:	f00c fe55 	bl	8018488 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b7de:	2201      	movs	r2, #1
 800b7e0:	2107      	movs	r1, #7
 800b7e2:	2008      	movs	r0, #8
 800b7e4:	f00b ff44 	bl	8017670 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b7e8:	1dfb      	adds	r3, r7, #7
 800b7ea:	9301      	str	r3, [sp, #4]
 800b7ec:	2307      	movs	r3, #7
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	2308      	movs	r3, #8
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	f008 fce2 	bl	80141c0 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b7fc:	f008 ff38 	bl	8014670 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800b800:	f009 f8b2 	bl	8014968 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800b804:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b808:	f010 f930 	bl	801ba6c <LL_mDelay>
			Set_DutyTIM8(600);
 800b80c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b810:	f7fa fb36 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);												
 800b814:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b818:	f010 f928 	bl	801ba6c <LL_mDelay>
			MAP_drive( MAP_DRIVE_SLA );
 800b81c:	2001      	movs	r0, #1
 800b81e:	f00a f859 	bl	80158d4 <MAP_drive>
			Set_DutyTIM8(0);
 800b822:	2000      	movs	r0, #0
 800b824:	f7fa fb2c 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b828:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b82c:	f010 f91e 	bl	801ba6c <LL_mDelay>
			MOT_turn(MOT_R180);
 800b830:	2002      	movs	r0, #2
 800b832:	f004 f961 	bl	800faf8 <MOT_turn>
			MAP_actGoalLED();
 800b836:	f00c fdf1 	bl	801841c <MAP_actGoalLED>
			Set_DutyTIM8(0);			
 800b83a:	2000      	movs	r0, #0
 800b83c:	f7fa fb20 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b840:	f7fd feca 	bl	80095d8 <Failsafe_flag_off>
			break;
 800b844:	e166      	b.n	800bb14 <MODE_exe_m5+0x580>

		case MODE_3:
			SetLED(0x0e);
 800b846:	200e      	movs	r0, #14
 800b848:	f7f6 fb46 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*4.0,
 800b84c:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800b850:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800b854:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800b858:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800b85c:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 800b918 <MODE_exe_m5+0x384>
 800b860:	2202      	movs	r2, #2
 800b862:	2100      	movs	r1, #0
 800b864:	2003      	movs	r0, #3
 800b866:	f7fe fcb7 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5 , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
*/								
			SetLED(0x00);
 800b86a:	2000      	movs	r0, #0
 800b86c:	f7f6 fb34 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b870:	2200      	movs	r2, #0
 800b872:	2100      	movs	r1, #0
 800b874:	2000      	movs	r0, #0
 800b876:	f00b f937 	bl	8016ae8 <MAP_setPos>
			MAP_Goalsize(1);
 800b87a:	2001      	movs	r0, #1
 800b87c:	f00c fe04 	bl	8018488 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b880:	2201      	movs	r2, #1
 800b882:	2107      	movs	r1, #7
 800b884:	2008      	movs	r0, #8
 800b886:	f00b fef3 	bl	8017670 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b88a:	1dfb      	adds	r3, r7, #7
 800b88c:	9301      	str	r3, [sp, #4]
 800b88e:	2307      	movs	r3, #7
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	2308      	movs	r3, #8
 800b894:	2200      	movs	r2, #0
 800b896:	2100      	movs	r1, #0
 800b898:	2000      	movs	r0, #0
 800b89a:	f008 fc91 	bl	80141c0 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b89e:	f008 fee7 	bl	8014670 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800b8a2:	f009 f861 	bl	8014968 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800b8a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b8aa:	f010 f8df 	bl	801ba6c <LL_mDelay>
			Set_DutyTIM8(600);
 800b8ae:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b8b2:	f7fa fae5 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);			
 800b8b6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b8ba:	f010 f8d7 	bl	801ba6c <LL_mDelay>

			log_flag_on();										
 800b8be:	f7fe fa95 	bl	8009dec <log_flag_on>
			MAP_drive( MAP_DRIVE_SKEW );
 800b8c2:	2002      	movs	r0, #2
 800b8c4:	f00a f806 	bl	80158d4 <MAP_drive>
			log_flag_off();
 800b8c8:	f7fe fa9c 	bl	8009e04 <log_flag_off>
			Set_DutyTIM8(0);
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	f7fa fad7 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b8d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b8d6:	f010 f8c9 	bl	801ba6c <LL_mDelay>
			MOT_turn(MOT_R180);
 800b8da:	2002      	movs	r0, #2
 800b8dc:	f004 f90c 	bl	800faf8 <MOT_turn>
			MAP_actGoalLED();
 800b8e0:	f00c fd9c 	bl	801841c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	f7fa facb 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b8ea:	f7fd fe75 	bl	80095d8 <Failsafe_flag_off>
			break;
 800b8ee:	e111      	b.n	800bb14 <MODE_exe_m5+0x580>
 800b8f0:	08021bd4 	.word	0x08021bd4
 800b8f4:	46134315 	.word	0x46134315
 800b8f8:	44098000 	.word	0x44098000
 800b8fc:	08021be4 	.word	0x08021be4
 800b900:	442f0000 	.word	0x442f0000
 800b904:	08021bf4 	.word	0x08021bf4
 800b908:	443b8000 	.word	0x443b8000
 800b90c:	08021c04 	.word	0x08021c04
 800b910:	44480000 	.word	0x44480000
 800b914:	20017b28 	.word	0x20017b28
 800b918:	3f99999a 	.word	0x3f99999a
 800b91c:	3fe66666 	.word	0x3fe66666

		case MODE_4:
			SetLED(0x0e);
 800b920:	200e      	movs	r0, #14
 800b922:	f7f6 fad9 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*5.0,
 800b926:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800b92a:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800b92e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800b932:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800b936:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 800b93a:	2202      	movs	r2, #2
 800b93c:	2100      	movs	r1, #0
 800b93e:	2004      	movs	r0, #4
 800b940:	f7fe fc4a 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5 , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
*/							
			SetLED(0x00);
 800b944:	2000      	movs	r0, #0
 800b946:	f7f6 fac7 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b94a:	2200      	movs	r2, #0
 800b94c:	2100      	movs	r1, #0
 800b94e:	2000      	movs	r0, #0
 800b950:	f00b f8ca 	bl	8016ae8 <MAP_setPos>
			MAP_Goalsize(1);
 800b954:	2001      	movs	r0, #1
 800b956:	f00c fd97 	bl	8018488 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b95a:	2201      	movs	r2, #1
 800b95c:	2107      	movs	r1, #7
 800b95e:	2008      	movs	r0, #8
 800b960:	f00b fe86 	bl	8017670 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b964:	1dfb      	adds	r3, r7, #7
 800b966:	9301      	str	r3, [sp, #4]
 800b968:	2307      	movs	r3, #7
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	2308      	movs	r3, #8
 800b96e:	2200      	movs	r2, #0
 800b970:	2100      	movs	r1, #0
 800b972:	2000      	movs	r0, #0
 800b974:	f008 fc24 	bl	80141c0 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b978:	f008 fe7a 	bl	8014670 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800b97c:	f008 fff4 	bl	8014968 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800b980:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b984:	f010 f872 	bl	801ba6c <LL_mDelay>
			Set_DutyTIM8(600);
 800b988:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b98c:	f7fa fa78 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800b990:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b994:	f010 f86a 	bl	801ba6c <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800b998:	2002      	movs	r0, #2
 800b99a:	f009 ff9b 	bl	80158d4 <MAP_drive>
			Set_DutyTIM8(0);
 800b99e:	2000      	movs	r0, #0
 800b9a0:	f7fa fa6e 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b9a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b9a8:	f010 f860 	bl	801ba6c <LL_mDelay>
			MOT_turn(MOT_R180);
 800b9ac:	2002      	movs	r0, #2
 800b9ae:	f004 f8a3 	bl	800faf8 <MOT_turn>
			MAP_actGoalLED();
 800b9b2:	f00c fd33 	bl	801841c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	f7fa fa62 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b9bc:	f7fd fe0c 	bl	80095d8 <Failsafe_flag_off>
			break;
 800b9c0:	e0a8      	b.n	800bb14 <MODE_exe_m5+0x580>

		case MODE_5:
			SetLED(0x0e);
 800b9c2:	200e      	movs	r0, #14
 800b9c4:	f7f6 fa88 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*6.0,
 800b9c8:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800b9cc:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800b9d0:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800b9d4:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800b9d8:	ed1f 0a30 	vldr	s0, [pc, #-192]	@ 800b91c <MODE_exe_m5+0x388>
 800b9dc:	2202      	movs	r2, #2
 800b9de:	2100      	movs	r1, #0
 800b9e0:	2004      	movs	r0, #4
 800b9e2:	f7fe fbf9 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5 , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
*/										
			SetLED(0x00);
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	f7f6 fa76 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	f00b f879 	bl	8016ae8 <MAP_setPos>
			MAP_Goalsize(1);
 800b9f6:	2001      	movs	r0, #1
 800b9f8:	f00c fd46 	bl	8018488 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	2107      	movs	r1, #7
 800ba00:	2008      	movs	r0, #8
 800ba02:	f00b fe35 	bl	8017670 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800ba06:	1dfb      	adds	r3, r7, #7
 800ba08:	9301      	str	r3, [sp, #4]
 800ba0a:	2307      	movs	r3, #7
 800ba0c:	9300      	str	r3, [sp, #0]
 800ba0e:	2308      	movs	r3, #8
 800ba10:	2200      	movs	r2, #0
 800ba12:	2100      	movs	r1, #0
 800ba14:	2000      	movs	r0, #0
 800ba16:	f008 fbd3 	bl	80141c0 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800ba1a:	f008 fe29 	bl	8014670 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800ba1e:	f008 ffa3 	bl	8014968 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800ba22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ba26:	f010 f821 	bl	801ba6c <LL_mDelay>
			Set_DutyTIM8(600);
 800ba2a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800ba2e:	f7fa fa27 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800ba32:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800ba36:	f010 f819 	bl	801ba6c <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800ba3a:	2002      	movs	r0, #2
 800ba3c:	f009 ff4a 	bl	80158d4 <MAP_drive>
			Set_DutyTIM8(0);
 800ba40:	2000      	movs	r0, #0
 800ba42:	f7fa fa1d 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800ba46:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ba4a:	f010 f80f 	bl	801ba6c <LL_mDelay>
			MOT_turn(MOT_R180);
 800ba4e:	2002      	movs	r0, #2
 800ba50:	f004 f852 	bl	800faf8 <MOT_turn>
			MAP_actGoalLED();
 800ba54:	f00c fce2 	bl	801841c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800ba58:	2000      	movs	r0, #0
 800ba5a:	f7fa fa11 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800ba5e:	f7fd fdbb 	bl	80095d8 <Failsafe_flag_off>
			break;
 800ba62:	e057      	b.n	800bb14 <MODE_exe_m5+0x580>

		case MODE_6:
			SetLED(0x0e);
 800ba64:	200e      	movs	r0, #14
 800ba66:	f7f6 fa37 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*6.0,
 800ba6a:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800ba6e:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800ba72:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800ba76:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800ba7a:	ed1f 0a58 	vldr	s0, [pc, #-352]	@ 800b91c <MODE_exe_m5+0x388>
 800ba7e:	2202      	movs	r2, #2
 800ba80:	2100      	movs	r1, #0
 800ba82:	2004      	movs	r0, #4
 800ba84:	f7fe fba8 	bl	800a1d8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5 , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
*/									
			SetLED(0x00);
 800ba88:	2000      	movs	r0, #0
 800ba8a:	f7f6 fa25 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800ba8e:	2200      	movs	r2, #0
 800ba90:	2100      	movs	r1, #0
 800ba92:	2000      	movs	r0, #0
 800ba94:	f00b f828 	bl	8016ae8 <MAP_setPos>

			MAP_Goal_init();
 800ba98:	f00b f814 	bl	8016ac4 <MAP_Goal_init>
			MAP_makeContourMap_dijkstra_modoki(GOAL_MAP_X_DEF,GOAL_MAP_Y_DEF, BEST_WAY);
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	2107      	movs	r1, #7
 800baa0:	2008      	movs	r0, #8
 800baa2:	f00e f8ab 	bl	8019bfc <MAP_makeContourMap_dijkstra_modoki>
			MAP_Goalsize(1);
 800baa6:	2001      	movs	r0, #1
 800baa8:	f00c fcee 	bl	8018488 <MAP_Goalsize>
	
			MAP_makeCmdList_dijkstra_modoki(0, 0, NORTH, GOAL_MAP_X_DEF,GOAL_MAP_Y_DEF, &en_endDir2);		// ドライブコマンド作成
 800baac:	1dfb      	adds	r3, r7, #7
 800baae:	9301      	str	r3, [sp, #4]
 800bab0:	2307      	movs	r3, #7
 800bab2:	9300      	str	r3, [sp, #0]
 800bab4:	2308      	movs	r3, #8
 800bab6:	2200      	movs	r2, #0
 800bab8:	2100      	movs	r1, #0
 800baba:	2000      	movs	r0, #0
 800babc:	f00a fd0e 	bl	80164dc <MAP_makeCmdList_dijkstra_modoki>
			MAP_makeSlaCmdList();													// スラロームコマンド作成
 800bac0:	f008 fdd6 	bl	8014670 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();
 800bac4:	f008 ff50 	bl	8014968 <MAP_makeSkewCmdList>

			LL_mDelay(500);
 800bac8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bacc:	f00f ffce 	bl	801ba6c <LL_mDelay>
			Set_DutyTIM8(600);
 800bad0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800bad4:	f7fa f9d4 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800bad8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800badc:	f00f ffc6 	bl	801ba6c <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800bae0:	2002      	movs	r0, #2
 800bae2:	f009 fef7 	bl	80158d4 <MAP_drive>
			Set_DutyTIM8(0);
 800bae6:	2000      	movs	r0, #0
 800bae8:	f7fa f9ca 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800baec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800baf0:	f00f ffbc 	bl	801ba6c <LL_mDelay>
			MOT_turn(MOT_R180);
 800baf4:	2002      	movs	r0, #2
 800baf6:	f003 ffff 	bl	800faf8 <MOT_turn>
			MAP_actGoalLED();
 800bafa:	f00c fc8f 	bl	801841c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800bafe:	2000      	movs	r0, #0
 800bb00:	f7fa f9be 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800bb04:	f7fd fd68 	bl	80095d8 <Failsafe_flag_off>
			break;
 800bb08:	e004      	b.n	800bb14 <MODE_exe_m5+0x580>

		case MODE_7:
			SetLED(0x0e);
 800bb0a:	200e      	movs	r0, #14
 800bb0c:	f7f6 f9e4 	bl	8001ed8 <SetLED>
			//cant use
			break;
 800bb10:	e000      	b.n	800bb14 <MODE_exe_m5+0x580>

		default:
			break;
 800bb12:	bf00      	nop
	}
	printf("\r\n turn 45 \r\r");
 800bb14:	481d      	ldr	r0, [pc, #116]	@ (800bb8c <MODE_exe_m5+0x5f8>)
 800bb16:	f012 f89d 	bl	801dc54 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 100.0f, 2.50f,3000*PI,  SLA_45 );
 800bb1a:	2001      	movs	r0, #1
 800bb1c:	eddf 1a1c 	vldr	s3, [pc, #112]	@ 800bb90 <MODE_exe_m5+0x5fc>
 800bb20:	eeb0 1a04 	vmov.f32	s2, #4	@ 0x40200000  2.5
 800bb24:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 800bb94 <MODE_exe_m5+0x600>
 800bb28:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800bb98 <MODE_exe_m5+0x604>
 800bb2c:	f7f6 fe84 	bl	8002838 <PARAM_makeSra>
	printf("\r\n turn 90 \r\r");		
 800bb30:	481a      	ldr	r0, [pc, #104]	@ (800bb9c <MODE_exe_m5+0x608>)
 800bb32:	f012 f88f 	bl	801dc54 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 3.50f,3000*PI,  SLA_90 );	
 800bb36:	2000      	movs	r0, #0
 800bb38:	eddf 1a15 	vldr	s3, [pc, #84]	@ 800bb90 <MODE_exe_m5+0x5fc>
 800bb3c:	eeb0 1a0c 	vmov.f32	s2, #12	@ 0x40600000  3.5
 800bb40:	eddf 0a17 	vldr	s1, [pc, #92]	@ 800bba0 <MODE_exe_m5+0x60c>
 800bb44:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 800bb98 <MODE_exe_m5+0x604>
 800bb48:	f7f6 fe76 	bl	8002838 <PARAM_makeSra>
//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
	printf("\r\n turn 135 \r\r");	
 800bb4c:	4815      	ldr	r0, [pc, #84]	@ (800bba4 <MODE_exe_m5+0x610>)
 800bb4e:	f012 f881 	bl	801dc54 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 4.00f,3000*PI,  SLA_135 );	
 800bb52:	2002      	movs	r0, #2
 800bb54:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 800bb90 <MODE_exe_m5+0x5fc>
 800bb58:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 800bb5c:	eddf 0a10 	vldr	s1, [pc, #64]	@ 800bba0 <MODE_exe_m5+0x60c>
 800bb60:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800bb98 <MODE_exe_m5+0x604>
 800bb64:	f7f6 fe68 	bl	8002838 <PARAM_makeSra>
	printf("\r\n turn N90 \r\r");	
 800bb68:	480f      	ldr	r0, [pc, #60]	@ (800bba8 <MODE_exe_m5+0x614>)
 800bb6a:	f012 f873 	bl	801dc54 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 300.0f, 4.00f,3000*PI,  SLA_N90 );	
 800bb6e:	2003      	movs	r0, #3
 800bb70:	eddf 1a07 	vldr	s3, [pc, #28]	@ 800bb90 <MODE_exe_m5+0x5fc>
 800bb74:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 800bb78:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 800bbac <MODE_exe_m5+0x618>
 800bb7c:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800bb98 <MODE_exe_m5+0x604>
 800bb80:	f7f6 fe5a 	bl	8002838 <PARAM_makeSra>
}
 800bb84:	bf00      	nop
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	08021bd4 	.word	0x08021bd4
 800bb90:	46134315 	.word	0x46134315
 800bb94:	42c80000 	.word	0x42c80000
 800bb98:	3e99999a 	.word	0x3e99999a
 800bb9c:	08021be4 	.word	0x08021be4
 800bba0:	43480000 	.word	0x43480000
 800bba4:	08021bf4 	.word	0x08021bf4
 800bba8:	08021c04 	.word	0x08021c04
 800bbac:	43960000 	.word	0x43960000

0800bbb0 <MODE_exe>:


void MODE_exe( void )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	af00      	add	r7, sp, #0
//	uint16_t *read;
	enMAP_HEAD_DIR		en_endDir;

	NowModeLed = MODELED_1;
 800bbb4:	4bc1      	ldr	r3, [pc, #772]	@ (800bebc <MODE_exe+0x30c>)
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	LL_mDelay(300);
 800bbba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bbbe:	f00f ff55 	bl	801ba6c <LL_mDelay>
	GYRO_SetRef();
 800bbc2:	f7fd feb5 	bl	8009930 <GYRO_SetRef>
	ENC_clr();
 800bbc6:	f7fd fda3 	bl	8009710 <ENC_clr>
	Failsafe_flag_off();
 800bbca:	f7fd fd05 	bl	80095d8 <Failsafe_flag_off>
//	log_flag_on();	

	switch( en_Mode ){
 800bbce:	4bbc      	ldr	r3, [pc, #752]	@ (800bec0 <MODE_exe+0x310>)
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	2b07      	cmp	r3, #7
 800bbd4:	f200 81a0 	bhi.w	800bf18 <MODE_exe+0x368>
 800bbd8:	a201      	add	r2, pc, #4	@ (adr r2, 800bbe0 <MODE_exe+0x30>)
 800bbda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbde:	bf00      	nop
 800bbe0:	0800bc01 	.word	0x0800bc01
 800bbe4:	0800bc7d 	.word	0x0800bc7d
 800bbe8:	0800bcf9 	.word	0x0800bcf9
 800bbec:	0800bd75 	.word	0x0800bd75
 800bbf0:	0800bdf1 	.word	0x0800bdf1
 800bbf4:	0800be79 	.word	0x0800be79
 800bbf8:	0800bf09 	.word	0x0800bf09
 800bbfc:	0800bf11 	.word	0x0800bf11

		case MODE_0://tune	
			SetLED(0x0e);
 800bc00:	200e      	movs	r0, #14
 800bc02:	f7f6 f969 	bl	8001ed8 <SetLED>
			en_Mode = MODE_0;	
 800bc06:	4bae      	ldr	r3, [pc, #696]	@ (800bec0 <MODE_exe+0x310>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800bc0c:	2064      	movs	r0, #100	@ 0x64
 800bc0e:	f00f ff2d 	bl	801ba6c <LL_mDelay>
			SetLED(0x00);
 800bc12:	2000      	movs	r0, #0
 800bc14:	f7f6 f960 	bl	8001ed8 <SetLED>
			NowModeLed = MODELED_2;
 800bc18:	4ba8      	ldr	r3, [pc, #672]	@ (800bebc <MODE_exe+0x30c>)
 800bc1a:	2210      	movs	r2, #16
 800bc1c:	701a      	strb	r2, [r3, #0]
			while(1){
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bc1e:	f7f6 f9dd 	bl	8001fdc <SW_IsOn_1>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d004      	beq.n	800bc32 <MODE_exe+0x82>
 800bc28:	f7fe faba 	bl	800a1a0 <CountUP_mode>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d008      	beq.n	800bc44 <MODE_exe+0x94>
					MODE_inc();								
 800bc32:	f7fe fa41 	bl	800a0b8 <MODE_inc>
					LL_mDelay(200);			
 800bc36:	20c8      	movs	r0, #200	@ 0xc8
 800bc38:	f00f ff18 	bl	801ba6c <LL_mDelay>
					printf("mode selecting_0\r\n");
 800bc3c:	48a1      	ldr	r0, [pc, #644]	@ (800bec4 <MODE_exe+0x314>)
 800bc3e:	f012 f879 	bl	801dd34 <puts>
 800bc42:	e01a      	b.n	800bc7a <MODE_exe+0xca>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800bc44:	f7f6 f9bc 	bl	8001fc0 <SW_IsOn_0>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d004      	beq.n	800bc58 <MODE_exe+0xa8>
 800bc4e:	f000 f9c2 	bl	800bfd6 <MODE_CheckExe>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d0e2      	beq.n	800bc1e <MODE_exe+0x6e>
					MODE_exe_m0();								
 800bc58:	f7fe fafc 	bl	800a254 <MODE_exe_m0>
					LL_mDelay(200);				
 800bc5c:	20c8      	movs	r0, #200	@ 0xc8
 800bc5e:	f00f ff05 	bl	801ba6c <LL_mDelay>
					if (en_Mode == MODE_7){
 800bc62:	4b97      	ldr	r3, [pc, #604]	@ (800bec0 <MODE_exe+0x310>)
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	2b07      	cmp	r3, #7
 800bc68:	d1d9      	bne.n	800bc1e <MODE_exe+0x6e>
						NowModeLed = MODELED_1;
 800bc6a:	4b94      	ldr	r3, [pc, #592]	@ (800bebc <MODE_exe+0x30c>)
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	701a      	strb	r2, [r3, #0]
						break;
 800bc70:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_0;
 800bc72:	4b93      	ldr	r3, [pc, #588]	@ (800bec0 <MODE_exe+0x310>)
 800bc74:	2200      	movs	r2, #0
 800bc76:	701a      	strb	r2, [r3, #0]
			break;
 800bc78:	e14f      	b.n	800bf1a <MODE_exe+0x36a>
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bc7a:	e7d0      	b.n	800bc1e <MODE_exe+0x6e>

		case MODE_1://flash
			SetLED(0x0e);
 800bc7c:	200e      	movs	r0, #14
 800bc7e:	f7f6 f92b 	bl	8001ed8 <SetLED>
			en_Mode = MODE_0;	
 800bc82:	4b8f      	ldr	r3, [pc, #572]	@ (800bec0 <MODE_exe+0x310>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800bc88:	2064      	movs	r0, #100	@ 0x64
 800bc8a:	f00f feef 	bl	801ba6c <LL_mDelay>
			SetLED(0x00);
 800bc8e:	2000      	movs	r0, #0
 800bc90:	f7f6 f922 	bl	8001ed8 <SetLED>
			NowModeLed = MODELED_2;
 800bc94:	4b89      	ldr	r3, [pc, #548]	@ (800bebc <MODE_exe+0x30c>)
 800bc96:	2210      	movs	r2, #16
 800bc98:	701a      	strb	r2, [r3, #0]
			while(1){
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bc9a:	f7f6 f99f 	bl	8001fdc <SW_IsOn_1>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d004      	beq.n	800bcae <MODE_exe+0xfe>
 800bca4:	f7fe fa7c 	bl	800a1a0 <CountUP_mode>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d008      	beq.n	800bcc0 <MODE_exe+0x110>
					MODE_inc();								
 800bcae:	f7fe fa03 	bl	800a0b8 <MODE_inc>
					LL_mDelay(200);			
 800bcb2:	20c8      	movs	r0, #200	@ 0xc8
 800bcb4:	f00f feda 	bl	801ba6c <LL_mDelay>
					printf("mode selecting_1\r\n");
 800bcb8:	4883      	ldr	r0, [pc, #524]	@ (800bec8 <MODE_exe+0x318>)
 800bcba:	f012 f83b 	bl	801dd34 <puts>
 800bcbe:	e01a      	b.n	800bcf6 <MODE_exe+0x146>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800bcc0:	f7f6 f97e 	bl	8001fc0 <SW_IsOn_0>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d004      	beq.n	800bcd4 <MODE_exe+0x124>
 800bcca:	f000 f984 	bl	800bfd6 <MODE_CheckExe>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d0e2      	beq.n	800bc9a <MODE_exe+0xea>
					MODE_exe_m1();								
 800bcd4:	f7fe fccc 	bl	800a670 <MODE_exe_m1>
					LL_mDelay(200);				
 800bcd8:	20c8      	movs	r0, #200	@ 0xc8
 800bcda:	f00f fec7 	bl	801ba6c <LL_mDelay>
					if (en_Mode == MODE_7){
 800bcde:	4b78      	ldr	r3, [pc, #480]	@ (800bec0 <MODE_exe+0x310>)
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	2b07      	cmp	r3, #7
 800bce4:	d1d9      	bne.n	800bc9a <MODE_exe+0xea>
						NowModeLed = MODELED_1;
 800bce6:	4b75      	ldr	r3, [pc, #468]	@ (800bebc <MODE_exe+0x30c>)
 800bce8:	2201      	movs	r2, #1
 800bcea:	701a      	strb	r2, [r3, #0]
						break;
 800bcec:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_1;
 800bcee:	4b74      	ldr	r3, [pc, #464]	@ (800bec0 <MODE_exe+0x310>)
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	701a      	strb	r2, [r3, #0]
			break;
 800bcf4:	e111      	b.n	800bf1a <MODE_exe+0x36a>
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bcf6:	e7d0      	b.n	800bc9a <MODE_exe+0xea>

		case MODE_2://search wall hit
			SetLED(0x0e);
 800bcf8:	200e      	movs	r0, #14
 800bcfa:	f7f6 f8ed 	bl	8001ed8 <SetLED>
			en_Mode = MODE_0;	
 800bcfe:	4b70      	ldr	r3, [pc, #448]	@ (800bec0 <MODE_exe+0x310>)
 800bd00:	2200      	movs	r2, #0
 800bd02:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800bd04:	2064      	movs	r0, #100	@ 0x64
 800bd06:	f00f feb1 	bl	801ba6c <LL_mDelay>
			SetLED(0x00);
 800bd0a:	2000      	movs	r0, #0
 800bd0c:	f7f6 f8e4 	bl	8001ed8 <SetLED>
			NowModeLed = MODELED_2;
 800bd10:	4b6a      	ldr	r3, [pc, #424]	@ (800bebc <MODE_exe+0x30c>)
 800bd12:	2210      	movs	r2, #16
 800bd14:	701a      	strb	r2, [r3, #0]
			while(1){
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bd16:	f7f6 f961 	bl	8001fdc <SW_IsOn_1>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d004      	beq.n	800bd2a <MODE_exe+0x17a>
 800bd20:	f7fe fa3e 	bl	800a1a0 <CountUP_mode>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d008      	beq.n	800bd3c <MODE_exe+0x18c>
					MODE_inc();								
 800bd2a:	f7fe f9c5 	bl	800a0b8 <MODE_inc>
					LL_mDelay(200);			
 800bd2e:	20c8      	movs	r0, #200	@ 0xc8
 800bd30:	f00f fe9c 	bl	801ba6c <LL_mDelay>
					printf("mode selecting_1\r\n");
 800bd34:	4864      	ldr	r0, [pc, #400]	@ (800bec8 <MODE_exe+0x318>)
 800bd36:	f011 fffd 	bl	801dd34 <puts>
 800bd3a:	e01a      	b.n	800bd72 <MODE_exe+0x1c2>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800bd3c:	f7f6 f940 	bl	8001fc0 <SW_IsOn_0>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d004      	beq.n	800bd50 <MODE_exe+0x1a0>
 800bd46:	f000 f946 	bl	800bfd6 <MODE_CheckExe>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d0e2      	beq.n	800bd16 <MODE_exe+0x166>
					MODE_exe_m2();								
 800bd50:	f7fe fd04 	bl	800a75c <MODE_exe_m2>
					LL_mDelay(200);				
 800bd54:	20c8      	movs	r0, #200	@ 0xc8
 800bd56:	f00f fe89 	bl	801ba6c <LL_mDelay>
					if (en_Mode == MODE_7){
 800bd5a:	4b59      	ldr	r3, [pc, #356]	@ (800bec0 <MODE_exe+0x310>)
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	2b07      	cmp	r3, #7
 800bd60:	d1d9      	bne.n	800bd16 <MODE_exe+0x166>
						NowModeLed = MODELED_1;
 800bd62:	4b56      	ldr	r3, [pc, #344]	@ (800bebc <MODE_exe+0x30c>)
 800bd64:	2201      	movs	r2, #1
 800bd66:	701a      	strb	r2, [r3, #0]
						break;
 800bd68:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_2;
 800bd6a:	4b55      	ldr	r3, [pc, #340]	@ (800bec0 <MODE_exe+0x310>)
 800bd6c:	2202      	movs	r2, #2
 800bd6e:	701a      	strb	r2, [r3, #0]
			break;
 800bd70:	e0d3      	b.n	800bf1a <MODE_exe+0x36a>
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bd72:	e7d0      	b.n	800bd16 <MODE_exe+0x166>

		case MODE_3://drive
			SetLED(0x0e);
 800bd74:	200e      	movs	r0, #14
 800bd76:	f7f6 f8af 	bl	8001ed8 <SetLED>
			en_Mode = MODE_0;	
 800bd7a:	4b51      	ldr	r3, [pc, #324]	@ (800bec0 <MODE_exe+0x310>)
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800bd80:	2064      	movs	r0, #100	@ 0x64
 800bd82:	f00f fe73 	bl	801ba6c <LL_mDelay>
			SetLED(0x00);
 800bd86:	2000      	movs	r0, #0
 800bd88:	f7f6 f8a6 	bl	8001ed8 <SetLED>
			NowModeLed = MODELED_2;
 800bd8c:	4b4b      	ldr	r3, [pc, #300]	@ (800bebc <MODE_exe+0x30c>)
 800bd8e:	2210      	movs	r2, #16
 800bd90:	701a      	strb	r2, [r3, #0]
			while(1){
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bd92:	f7f6 f923 	bl	8001fdc <SW_IsOn_1>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d004      	beq.n	800bda6 <MODE_exe+0x1f6>
 800bd9c:	f7fe fa00 	bl	800a1a0 <CountUP_mode>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d008      	beq.n	800bdb8 <MODE_exe+0x208>
					MODE_inc();								
 800bda6:	f7fe f987 	bl	800a0b8 <MODE_inc>
					LL_mDelay(200);			
 800bdaa:	20c8      	movs	r0, #200	@ 0xc8
 800bdac:	f00f fe5e 	bl	801ba6c <LL_mDelay>
					printf("mode selecting_1\r\n");
 800bdb0:	4845      	ldr	r0, [pc, #276]	@ (800bec8 <MODE_exe+0x318>)
 800bdb2:	f011 ffbf 	bl	801dd34 <puts>
 800bdb6:	e01a      	b.n	800bdee <MODE_exe+0x23e>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800bdb8:	f7f6 f902 	bl	8001fc0 <SW_IsOn_0>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d004      	beq.n	800bdcc <MODE_exe+0x21c>
 800bdc2:	f000 f908 	bl	800bfd6 <MODE_CheckExe>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d0e2      	beq.n	800bd92 <MODE_exe+0x1e2>
					MODE_exe_m3();								
 800bdcc:	f7fe ffc8 	bl	800ad60 <MODE_exe_m3>
					LL_mDelay(200);				
 800bdd0:	20c8      	movs	r0, #200	@ 0xc8
 800bdd2:	f00f fe4b 	bl	801ba6c <LL_mDelay>
					if (en_Mode == MODE_7){
 800bdd6:	4b3a      	ldr	r3, [pc, #232]	@ (800bec0 <MODE_exe+0x310>)
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	2b07      	cmp	r3, #7
 800bddc:	d1d9      	bne.n	800bd92 <MODE_exe+0x1e2>
						NowModeLed = MODELED_1;
 800bdde:	4b37      	ldr	r3, [pc, #220]	@ (800bebc <MODE_exe+0x30c>)
 800bde0:	2201      	movs	r2, #1
 800bde2:	701a      	strb	r2, [r3, #0]
						break;
 800bde4:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_3;
 800bde6:	4b36      	ldr	r3, [pc, #216]	@ (800bec0 <MODE_exe+0x310>)
 800bde8:	2203      	movs	r2, #3
 800bdea:	701a      	strb	r2, [r3, #0]
			break;
 800bdec:	e095      	b.n	800bf1a <MODE_exe+0x36a>
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bdee:	e7d0      	b.n	800bd92 <MODE_exe+0x1e2>

		case MODE_4: // wall hit search
			SetLED(0x0e);
 800bdf0:	200e      	movs	r0, #14
 800bdf2:	f7f6 f871 	bl	8001ed8 <SetLED>
			en_Mode = MODE_0;	
 800bdf6:	4b32      	ldr	r3, [pc, #200]	@ (800bec0 <MODE_exe+0x310>)
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800bdfc:	2064      	movs	r0, #100	@ 0x64
 800bdfe:	f00f fe35 	bl	801ba6c <LL_mDelay>
			SetLED(0x00);
 800be02:	2000      	movs	r0, #0
 800be04:	f7f6 f868 	bl	8001ed8 <SetLED>
			NowModeLed = MODELED_2;
 800be08:	4b2c      	ldr	r3, [pc, #176]	@ (800bebc <MODE_exe+0x30c>)
 800be0a:	2210      	movs	r2, #16
 800be0c:	701a      	strb	r2, [r3, #0]
			WallHitFlag = 1;
 800be0e:	4b2f      	ldr	r3, [pc, #188]	@ (800becc <MODE_exe+0x31c>)
 800be10:	2201      	movs	r2, #1
 800be12:	701a      	strb	r2, [r3, #0]
			while(1){
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800be14:	f7f6 f8e2 	bl	8001fdc <SW_IsOn_1>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d004      	beq.n	800be28 <MODE_exe+0x278>
 800be1e:	f7fe f9bf 	bl	800a1a0 <CountUP_mode>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d008      	beq.n	800be3a <MODE_exe+0x28a>
					MODE_inc();								
 800be28:	f7fe f946 	bl	800a0b8 <MODE_inc>
					LL_mDelay(200);			
 800be2c:	20c8      	movs	r0, #200	@ 0xc8
 800be2e:	f00f fe1d 	bl	801ba6c <LL_mDelay>
					printf("mode selecting_1\r\n");
 800be32:	4825      	ldr	r0, [pc, #148]	@ (800bec8 <MODE_exe+0x318>)
 800be34:	f011 ff7e 	bl	801dd34 <puts>
 800be38:	e01d      	b.n	800be76 <MODE_exe+0x2c6>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800be3a:	f7f6 f8c1 	bl	8001fc0 <SW_IsOn_0>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b01      	cmp	r3, #1
 800be42:	d004      	beq.n	800be4e <MODE_exe+0x29e>
 800be44:	f000 f8c7 	bl	800bfd6 <MODE_CheckExe>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d0e2      	beq.n	800be14 <MODE_exe+0x264>
					MODE_exe_m4();								
 800be4e:	f7ff fa05 	bl	800b25c <MODE_exe_m4>
					LL_mDelay(200);				
 800be52:	20c8      	movs	r0, #200	@ 0xc8
 800be54:	f00f fe0a 	bl	801ba6c <LL_mDelay>
					if (en_Mode == MODE_7){
 800be58:	4b19      	ldr	r3, [pc, #100]	@ (800bec0 <MODE_exe+0x310>)
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	2b07      	cmp	r3, #7
 800be5e:	d1d9      	bne.n	800be14 <MODE_exe+0x264>
						NowModeLed = MODELED_1;
 800be60:	4b16      	ldr	r3, [pc, #88]	@ (800bebc <MODE_exe+0x30c>)
 800be62:	2201      	movs	r2, #1
 800be64:	701a      	strb	r2, [r3, #0]
						WallHitFlag = 0;
 800be66:	4b19      	ldr	r3, [pc, #100]	@ (800becc <MODE_exe+0x31c>)
 800be68:	2200      	movs	r2, #0
 800be6a:	701a      	strb	r2, [r3, #0]
						break;
 800be6c:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_4;
 800be6e:	4b14      	ldr	r3, [pc, #80]	@ (800bec0 <MODE_exe+0x310>)
 800be70:	2204      	movs	r2, #4
 800be72:	701a      	strb	r2, [r3, #0]
			break;
 800be74:	e051      	b.n	800bf1a <MODE_exe+0x36a>
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800be76:	e7cd      	b.n	800be14 <MODE_exe+0x264>

		case MODE_5:
			SetLED(0x0e);
 800be78:	200e      	movs	r0, #14
 800be7a:	f7f6 f82d 	bl	8001ed8 <SetLED>
			en_Mode = MODE_0;	
 800be7e:	4b10      	ldr	r3, [pc, #64]	@ (800bec0 <MODE_exe+0x310>)
 800be80:	2200      	movs	r2, #0
 800be82:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800be84:	2064      	movs	r0, #100	@ 0x64
 800be86:	f00f fdf1 	bl	801ba6c <LL_mDelay>
			SetLED(0x00);
 800be8a:	2000      	movs	r0, #0
 800be8c:	f7f6 f824 	bl	8001ed8 <SetLED>
			NowModeLed = MODELED_2;
 800be90:	4b0a      	ldr	r3, [pc, #40]	@ (800bebc <MODE_exe+0x30c>)
 800be92:	2210      	movs	r2, #16
 800be94:	701a      	strb	r2, [r3, #0]
			while(1){
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800be96:	f7f6 f8a1 	bl	8001fdc <SW_IsOn_1>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d004      	beq.n	800beaa <MODE_exe+0x2fa>
 800bea0:	f7fe f97e 	bl	800a1a0 <CountUP_mode>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d012      	beq.n	800bed0 <MODE_exe+0x320>
					MODE_inc();								
 800beaa:	f7fe f905 	bl	800a0b8 <MODE_inc>
					LL_mDelay(200);			
 800beae:	20c8      	movs	r0, #200	@ 0xc8
 800beb0:	f00f fddc 	bl	801ba6c <LL_mDelay>
					printf("mode selecting_1\r\n");
 800beb4:	4804      	ldr	r0, [pc, #16]	@ (800bec8 <MODE_exe+0x318>)
 800beb6:	f011 ff3d 	bl	801dd34 <puts>
 800beba:	e024      	b.n	800bf06 <MODE_exe+0x356>
 800bebc:	2000000c 	.word	0x2000000c
 800bec0:	20017b28 	.word	0x20017b28
 800bec4:	08021c58 	.word	0x08021c58
 800bec8:	08021c6c 	.word	0x08021c6c
 800becc:	20017b29 	.word	0x20017b29
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800bed0:	f7f6 f876 	bl	8001fc0 <SW_IsOn_0>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d004      	beq.n	800bee4 <MODE_exe+0x334>
 800beda:	f000 f87c 	bl	800bfd6 <MODE_CheckExe>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d0d8      	beq.n	800be96 <MODE_exe+0x2e6>
					MODE_exe_m5();								
 800bee4:	f7ff fb56 	bl	800b594 <MODE_exe_m5>
					LL_mDelay(200);				
 800bee8:	20c8      	movs	r0, #200	@ 0xc8
 800beea:	f00f fdbf 	bl	801ba6c <LL_mDelay>
					if (en_Mode == MODE_7){
 800beee:	4b0c      	ldr	r3, [pc, #48]	@ (800bf20 <MODE_exe+0x370>)
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	2b07      	cmp	r3, #7
 800bef4:	d1cf      	bne.n	800be96 <MODE_exe+0x2e6>
						NowModeLed = MODELED_1;
 800bef6:	4b0b      	ldr	r3, [pc, #44]	@ (800bf24 <MODE_exe+0x374>)
 800bef8:	2201      	movs	r2, #1
 800befa:	701a      	strb	r2, [r3, #0]
						break;
 800befc:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_5;
 800befe:	4b08      	ldr	r3, [pc, #32]	@ (800bf20 <MODE_exe+0x370>)
 800bf00:	2205      	movs	r2, #5
 800bf02:	701a      	strb	r2, [r3, #0]
			break;
 800bf04:	e009      	b.n	800bf1a <MODE_exe+0x36a>
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bf06:	e7c6      	b.n	800be96 <MODE_exe+0x2e6>

		case MODE_6:
			SetLED(0x0e);
 800bf08:	200e      	movs	r0, #14
 800bf0a:	f7f5 ffe5 	bl	8001ed8 <SetLED>

			break;
 800bf0e:	e004      	b.n	800bf1a <MODE_exe+0x36a>

		case MODE_7:
			SetLED(0x0e);
 800bf10:	200e      	movs	r0, #14
 800bf12:	f7f5 ffe1 	bl	8001ed8 <SetLED>
			
			break;
 800bf16:	e000      	b.n	800bf1a <MODE_exe+0x36a>


		default:
			break;
 800bf18:	bf00      	nop
	}
}
 800bf1a:	bf00      	nop
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	20017b28 	.word	0x20017b28
 800bf24:	2000000c 	.word	0x2000000c

0800bf28 <MODE_DistRightCheck>:

bool MODE_DistRightCheck(void)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
	int16_t s_rightval;
	bool bl_check;

	s_rightval = DIST_getNowVal(DIST_SEN_R_FRONT);
 800bf2e:	2000      	movs	r0, #0
 800bf30:	f006 fe1a 	bl	8012b68 <DIST_getNowVal>
 800bf34:	4603      	mov	r3, r0
 800bf36:	80bb      	strh	r3, [r7, #4]

	if( s_rightval >= 300 ){
 800bf38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800bf3c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800bf40:	db02      	blt.n	800bf48 <MODE_DistRightCheck+0x20>
		bl_check=TRUE;
 800bf42:	2301      	movs	r3, #1
 800bf44:	71fb      	strb	r3, [r7, #7]
 800bf46:	e001      	b.n	800bf4c <MODE_DistRightCheck+0x24>
	}
	else{
		bl_check=FALSE;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	71fb      	strb	r3, [r7, #7]
	}

	return bl_check;
 800bf4c:	79fb      	ldrb	r3, [r7, #7]
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}

0800bf56 <MODE_DistLeftCheck>:

bool MODE_DistLeftCheck(void){
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b082      	sub	sp, #8
 800bf5a:	af00      	add	r7, sp, #0

	int16_t 	s_leftval;
	bool	bl_check;

	s_leftval 	= DIST_getNowVal(DIST_SEN_L_FRONT);
 800bf5c:	2001      	movs	r0, #1
 800bf5e:	f006 fe03 	bl	8012b68 <DIST_getNowVal>
 800bf62:	4603      	mov	r3, r0
 800bf64:	80bb      	strh	r3, [r7, #4]

	if( s_leftval >= 200 ){
 800bf66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800bf6a:	2bc7      	cmp	r3, #199	@ 0xc7
 800bf6c:	dd02      	ble.n	800bf74 <MODE_DistLeftCheck+0x1e>
		bl_check = TRUE;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	71fb      	strb	r3, [r7, #7]
 800bf72:	e001      	b.n	800bf78 <MODE_DistLeftCheck+0x22>

	}else{
		bl_check = FALSE;
 800bf74:	2300      	movs	r3, #0
 800bf76:	71fb      	strb	r3, [r7, #7]

	}

	return bl_check;
 800bf78:	79fb      	ldrb	r3, [r7, #7]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <MODE_setWaitCheck>:

bool MODE_setWaitCheck(void){
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b082      	sub	sp, #8
 800bf86:	af00      	add	r7, sp, #0

	bool bl_check;

	if( TRUE == MODE_DistRightCheck() ){	// 右�?け検知
 800bf88:	f7ff ffce 	bl	800bf28 <MODE_DistRightCheck>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d002      	beq.n	800bf98 <MODE_setWaitCheck+0x16>
		SetLED(0x08);
 800bf92:	2008      	movs	r0, #8
 800bf94:	f7f5 ffa0 	bl	8001ed8 <SetLED>
	}
	if( TRUE == MODE_DistLeftCheck() ){		// 左�?け検知
 800bf98:	f7ff ffdd 	bl	800bf56 <MODE_DistLeftCheck>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d002      	beq.n	800bfa8 <MODE_setWaitCheck+0x26>
		SetLED(0x02);
 800bfa2:	2002      	movs	r0, #2
 800bfa4:	f7f5 ff98 	bl	8001ed8 <SetLED>
	}

	if( ( TRUE == MODE_DistRightCheck() ) && ( TRUE == MODE_DistLeftCheck() ) ){
 800bfa8:	f7ff ffbe 	bl	800bf28 <MODE_DistRightCheck>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00a      	beq.n	800bfc8 <MODE_setWaitCheck+0x46>
 800bfb2:	f7ff ffd0 	bl	800bf56 <MODE_DistLeftCheck>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d005      	beq.n	800bfc8 <MODE_setWaitCheck+0x46>
		SetLED(0x0e);
 800bfbc:	200e      	movs	r0, #14
 800bfbe:	f7f5 ff8b 	bl	8001ed8 <SetLED>
		bl_check = TRUE;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	71fb      	strb	r3, [r7, #7]
 800bfc6:	e001      	b.n	800bfcc <MODE_setWaitCheck+0x4a>

	}else{
		bl_check = FALSE;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	71fb      	strb	r3, [r7, #7]
	}
	return bl_check;
 800bfcc:	79fb      	ldrb	r3, [r7, #7]
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3708      	adds	r7, #8
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <MODE_CheckExe>:

bool MODE_CheckExe(void){
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b082      	sub	sp, #8
 800bfda:	af00      	add	r7, sp, #0

	bool bl_check;

	if( TRUE == MODE_setWaitCheck() ){
 800bfdc:	f7ff ffd1 	bl	800bf82 <MODE_setWaitCheck>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d018      	beq.n	800c018 <MODE_CheckExe+0x42>
		LL_mDelay(500);
 800bfe6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bfea:	f00f fd3f 	bl	801ba6c <LL_mDelay>

		if( FALSE == MODE_setWaitCheck() ){
 800bfee:	f7ff ffc8 	bl	800bf82 <MODE_setWaitCheck>
 800bff2:	4603      	mov	r3, r0
 800bff4:	f083 0301 	eor.w	r3, r3, #1
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d009      	beq.n	800c012 <MODE_CheckExe+0x3c>
			SetLED(0x00);
 800bffe:	2000      	movs	r0, #0
 800c000:	f7f5 ff6a 	bl	8001ed8 <SetLED>
			LL_mDelay(1000);
 800c004:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c008:	f00f fd30 	bl	801ba6c <LL_mDelay>
			bl_check = TRUE;
 800c00c:	2301      	movs	r3, #1
 800c00e:	71fb      	strb	r3, [r7, #7]
 800c010:	e004      	b.n	800c01c <MODE_CheckExe+0x46>

		}else{
			bl_check = FALSE;
 800c012:	2300      	movs	r3, #0
 800c014:	71fb      	strb	r3, [r7, #7]
 800c016:	e001      	b.n	800c01c <MODE_CheckExe+0x46>

		}

	}else{

		bl_check = FALSE;
 800c018:	2300      	movs	r3, #0
 800c01a:	71fb      	strb	r3, [r7, #7]
	}

	return bl_check;
 800c01c:	79fb      	ldrb	r3, [r7, #7]
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <MOT_getAcc1>:
en_TURNTYPE		en_TurnType;



float MOT_getAcc1( void )
{
 800c026:	b580      	push	{r7, lr}
 800c028:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_ST )->f_speed_acc;
 800c02a:	2015      	movs	r0, #21
 800c02c:	f7f6 fb90 	bl	8002750 <PARAM_getSpeed>
 800c030:	4603      	mov	r3, r0
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	ee07 3a90 	vmov	s15, r3
}
 800c038:	eeb0 0a67 	vmov.f32	s0, s15
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <MOT_getAcc3>:

float MOT_getAcc3( void )
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_ST )->f_speed_dec;
 800c042:	2015      	movs	r0, #21
 800c044:	f7f6 fb84 	bl	8002750 <PARAM_getSpeed>
 800c048:	4603      	mov	r3, r0
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	ee07 3a90 	vmov	s15, r3
}
 800c050:	eeb0 0a67 	vmov.f32	s0, s15
 800c054:	bd80      	pop	{r7, pc}

0800c056 <MOT_getJerk>:

float MOT_getJerk( void )
{
 800c056:	b580      	push	{r7, lr}
 800c058:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_ST )->f_speed_jerk;
 800c05a:	2015      	movs	r0, #21
 800c05c:	f7f6 fb78 	bl	8002750 <PARAM_getSpeed>
 800c060:	4603      	mov	r3, r0
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	ee07 3a90 	vmov	s15, r3
}
 800c068:	eeb0 0a67 	vmov.f32	s0, s15
 800c06c:	bd80      	pop	{r7, pc}
	...

0800c070 <MOT_goBlock_AccConstDec>:

void MOT_goBlock_AccConstDec( float f_fin, enMOT_ST_TYPE en_type, enMOT_GO_ST_TYPE en_goType )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b092      	sub	sp, #72	@ 0x48
 800c074:	af00      	add	r7, sp, #0
 800c076:	ed87 0a01 	vstr	s0, [r7, #4]
 800c07a:	4603      	mov	r3, r0
 800c07c:	460a      	mov	r2, r1
 800c07e:	70fb      	strb	r3, [r7, #3]
 800c080:	4613      	mov	r3, r2
 800c082:	70bb      	strb	r3, [r7, #2]
	stCTRL_DATA		st_data;					// CTRLdata
	GYRO_staErrChkAngle();
 800c084:	f7fd fd3e 	bl	8009b04 <GYRO_staErrChkAngle>
	/*      motion      */
	/* ================ */
	/* ------ */
	/*  acc+jerk   */
	/* ------ */
	if( ( en_type != MOT_CONST_DEC ) && ( en_type != MOT_CONST_DEC_CUSTOM ) ){
 800c088:	78fb      	ldrb	r3, [r7, #3]
 800c08a:	2b05      	cmp	r3, #5
 800c08c:	f000 8141 	beq.w	800c312 <MOT_goBlock_AccConstDec+0x2a2>
 800c090:	78fb      	ldrb	r3, [r7, #3]
 800c092:	2b06      	cmp	r3, #6
 800c094:	f000 813d 	beq.w	800c312 <MOT_goBlock_AccConstDec+0x2a2>

		if( MOT_GO_ST_NORMAL == en_goType ){
 800c098:	78bb      	ldrb	r3, [r7, #2]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d102      	bne.n	800c0a4 <MOT_goBlock_AccConstDec+0x34>
			st_data.en_ctrl_type		= CTRL_ACC;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	723b      	strb	r3, [r7, #8]
 800c0a2:	e001      	b.n	800c0a8 <MOT_goBlock_AccConstDec+0x38>
		}
		else{
			st_data.en_ctrl_type		= CTRL_SKEW_ACC;
 800c0a4:	2303      	movs	r3, #3
 800c0a6:	723b      	strb	r3, [r7, #8]
		}
		st_data.f_ctrl_jerk			= st_Info.f_mot_jerk;
 800c0a8:	4bbb      	ldr	r3, [pc, #748]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	613b      	str	r3, [r7, #16]
		st_data.f_ctrl_trgtAcc		= st_Info.f_mot_trgtAcc1;		// 加速度指定
 800c0ae:	4bba      	ldr	r3, [pc, #744]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	61bb      	str	r3, [r7, #24]
		st_data.f_ctrl_nowAcc		= 0;
 800c0b4:	f04f 0300 	mov.w	r3, #0
 800c0b8:	617b      	str	r3, [r7, #20]
		st_data.f_ctrl_now			= st_Info.f_mot_now;		// 現在速度
 800c0ba:	4bb7      	ldr	r3, [pc, #732]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c0bc:	69db      	ldr	r3, [r3, #28]
 800c0be:	61fb      	str	r3, [r7, #28]
		st_data.f_ctrl_trgt			= st_Info.f_mot_now+st_Info.f_mot_accjerk_v;		// 目標速度
 800c0c0:	4bb5      	ldr	r3, [pc, #724]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c0c2:	ed93 7a07 	vldr	s14, [r3, #28]
 800c0c6:	4bb4      	ldr	r3, [pc, #720]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c0c8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800c0cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0d0:	edc7 7a08 	vstr	s15, [r7, #32]
		st_data.f_ctrl_nowDist		= 0;				// 進んでいない
 800c0d4:	f04f 0300 	mov.w	r3, #0
 800c0d8:	627b      	str	r3, [r7, #36]	@ 0x24
		st_data.f_ctrl_dist			= st_Info.f_mot_l1_accjerk;			// 加速距離
 800c0da:	4baf      	ldr	r3, [pc, #700]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c0dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0de:	62bb      	str	r3, [r7, #40]	@ 0x28
		st_data.f_ctrl_jerkAngle		= 0;
 800c0e0:	f04f 0300 	mov.w	r3, #0
 800c0e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		st_data.f_ctrl_nowAccAngle		= 0;
 800c0e6:	f04f 0300 	mov.w	r3, #0
 800c0ea:	633b      	str	r3, [r7, #48]	@ 0x30
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c0ec:	f04f 0300 	mov.w	r3, #0
 800c0f0:	637b      	str	r3, [r7, #52]	@ 0x34
		st_data.f_ctrl_nowAngleS		= 0;				// 現在角速度
 800c0f2:	f04f 0300 	mov.w	r3, #0
 800c0f6:	63bb      	str	r3, [r7, #56]	@ 0x38
		st_data.f_ctrl_trgtAngleS		= 0;				// 目標角度
 800c0f8:	f04f 0300 	mov.w	r3, #0
 800c0fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
		st_data.f_ctrl_nowAngle		= 0;				// 現在角度
 800c0fe:	f04f 0300 	mov.w	r3, #0
 800c102:	643b      	str	r3, [r7, #64]	@ 0x40
		st_data.f_ctrl_angle			= 0;				// 目標角度
 800c104:	f04f 0300 	mov.w	r3, #0
 800c108:	647b      	str	r3, [r7, #68]	@ 0x44
		st_data.f_ctrl_time 			= 0;				// 目標時間 [sec] ← 指定しない
 800c10a:	f04f 0300 	mov.w	r3, #0
 800c10e:	60fb      	str	r3, [r7, #12]
		CTRL_clrData();								// 設定データをクリア
 800c110:	f7fa f998 	bl	8006444 <CTRL_clrData>
		CTRL_clrSpeedErrSum();
 800c114:	f7fa f9f2 	bl	80064fc <CTRL_clrSpeedErrSum>
		CTRL_setData( &st_data );						// データセット
 800c118:	f107 0308 	add.w	r3, r7, #8
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fa fa7f 	bl	8006620 <CTRL_setData>
		DCM_staMotAll();							// モータON
 800c122:	f7fd fabb 	bl	800969c <DCM_staMotAll>
		while( Get_NowDist() < st_Info.f_mot_l1_accjerk ){					// 指定距離到達待ち
 800c126:	e00f      	b.n	800c148 <MOT_goBlock_AccConstDec+0xd8>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c128:	f7fd fa62 	bl	80095f0 <SYS_isOutOfCtrl>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d008      	beq.n	800c144 <MOT_goBlock_AccConstDec+0xd4>
				CTRL_stop();
 800c132:	f7fa f977 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c136:	2000      	movs	r0, #0
 800c138:	f7fd fa8c 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c13c:	2001      	movs	r0, #1
 800c13e:	f7fd fa89 	bl	8009654 <DCM_brakeMot>
				break;
 800c142:	e00d      	b.n	800c160 <MOT_goBlock_AccConstDec+0xf0>
			}				
			MOT_setWallEdgeDist();
 800c144:	f006 fb26 	bl	8012794 <MOT_setWallEdgeDist>
		while( Get_NowDist() < st_Info.f_mot_l1_accjerk ){					// 指定距離到達待ち
 800c148:	f7fa f8bc 	bl	80062c4 <Get_NowDist>
 800c14c:	eeb0 7a40 	vmov.f32	s14, s0
 800c150:	4b91      	ldr	r3, [pc, #580]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c152:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800c156:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c15e:	d4e3      	bmi.n	800c128 <MOT_goBlock_AccConstDec+0xb8>

		}
		//acc
		st_data.f_ctrl_jerk			= 0;
 800c160:	f04f 0300 	mov.w	r3, #0
 800c164:	613b      	str	r3, [r7, #16]
		st_data.f_ctrl_trgtAcc		= st_Info.f_mot_trgtAcc1;		// 加速度指定
 800c166:	4b8c      	ldr	r3, [pc, #560]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	61bb      	str	r3, [r7, #24]
		st_data.f_ctrl_nowAcc		= st_Info.f_mot_trgtAcc1;
 800c16c:	4b8a      	ldr	r3, [pc, #552]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	617b      	str	r3, [r7, #20]
		st_data.f_ctrl_now			= st_Info.f_mot_now+st_Info.f_mot_accjerk_v;		// 現在速度
 800c172:	4b89      	ldr	r3, [pc, #548]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c174:	ed93 7a07 	vldr	s14, [r3, #28]
 800c178:	4b87      	ldr	r3, [pc, #540]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c17a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800c17e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c182:	edc7 7a07 	vstr	s15, [r7, #28]
		st_data.f_ctrl_trgt			= st_Info.f_mot_trgt - st_Info.f_mot_accjerk_v;		// 目標速度
 800c186:	4b84      	ldr	r3, [pc, #528]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c188:	ed93 7a08 	vldr	s14, [r3, #32]
 800c18c:	4b82      	ldr	r3, [pc, #520]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c18e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800c192:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c196:	edc7 7a08 	vstr	s15, [r7, #32]
		st_data.f_ctrl_nowDist		= st_Info.f_mot_l1_accjerk;				// 進んでいない
 800c19a:	4b7f      	ldr	r3, [pc, #508]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c19c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c19e:	627b      	str	r3, [r7, #36]	@ 0x24
		st_data.f_ctrl_dist			= st_Info.f_mot_l1_accjerk+st_Info.f_mot_l1_accconst;			// 加速距離
 800c1a0:	4b7d      	ldr	r3, [pc, #500]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c1a2:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800c1a6:	4b7c      	ldr	r3, [pc, #496]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c1a8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800c1ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1b0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		st_data.f_ctrl_jerkAngle		= 0;
 800c1b4:	f04f 0300 	mov.w	r3, #0
 800c1b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		st_data.f_ctrl_nowAccAngle		= 0;
 800c1ba:	f04f 0300 	mov.w	r3, #0
 800c1be:	633b      	str	r3, [r7, #48]	@ 0x30
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c1c0:	f04f 0300 	mov.w	r3, #0
 800c1c4:	637b      	str	r3, [r7, #52]	@ 0x34
		st_data.f_ctrl_nowAngleS		= 0;				// 現在角速度
 800c1c6:	f04f 0300 	mov.w	r3, #0
 800c1ca:	63bb      	str	r3, [r7, #56]	@ 0x38
		st_data.f_ctrl_trgtAngleS		= 0;				// 目標角度
 800c1cc:	f04f 0300 	mov.w	r3, #0
 800c1d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		st_data.f_ctrl_nowAngle		= 0;				// 現在角度
 800c1d2:	f04f 0300 	mov.w	r3, #0
 800c1d6:	643b      	str	r3, [r7, #64]	@ 0x40
		st_data.f_ctrl_angle			= 0;				// 目標角度
 800c1d8:	f04f 0300 	mov.w	r3, #0
 800c1dc:	647b      	str	r3, [r7, #68]	@ 0x44
		st_data.f_ctrl_time 			= 0;				// 目標時間 [sec] ← 指定しない
 800c1de:	f04f 0300 	mov.w	r3, #0
 800c1e2:	60fb      	str	r3, [r7, #12]
//		CTRL_clrData();								// 設定データをクリア
		CTRL_setData( &st_data );						// データセット
 800c1e4:	f107 0308 	add.w	r3, r7, #8
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7fa fa19 	bl	8006620 <CTRL_setData>
		DCM_staMotAll();							// モータON
 800c1ee:	f7fd fa55 	bl	800969c <DCM_staMotAll>
		while( Get_NowDist() < (st_Info.f_mot_l1_accjerk + st_Info.f_mot_l1_accconst)){					// 指定距離到達待ち
 800c1f2:	e00f      	b.n	800c214 <MOT_goBlock_AccConstDec+0x1a4>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c1f4:	f7fd f9fc 	bl	80095f0 <SYS_isOutOfCtrl>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d008      	beq.n	800c210 <MOT_goBlock_AccConstDec+0x1a0>
				CTRL_stop();
 800c1fe:	f7fa f911 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c202:	2000      	movs	r0, #0
 800c204:	f7fd fa26 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c208:	2001      	movs	r0, #1
 800c20a:	f7fd fa23 	bl	8009654 <DCM_brakeMot>
				break;
 800c20e:	e012      	b.n	800c236 <MOT_goBlock_AccConstDec+0x1c6>
			}				
			MOT_setWallEdgeDist();
 800c210:	f006 fac0 	bl	8012794 <MOT_setWallEdgeDist>
		while( Get_NowDist() < (st_Info.f_mot_l1_accjerk + st_Info.f_mot_l1_accconst)){					// 指定距離到達待ち
 800c214:	f7fa f856 	bl	80062c4 <Get_NowDist>
 800c218:	eef0 6a40 	vmov.f32	s13, s0
 800c21c:	4b5e      	ldr	r3, [pc, #376]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c21e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800c222:	4b5d      	ldr	r3, [pc, #372]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c224:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800c228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c22c:	eef4 6ae7 	vcmpe.f32	s13, s15
 800c230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c234:	d4de      	bmi.n	800c1f4 <MOT_goBlock_AccConstDec+0x184>

		}
		//acc - jerk
		st_data.f_ctrl_jerk			= st_Info.f_mot_jerk*(-1.0);
 800c236:	4b58      	ldr	r3, [pc, #352]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7f4 f9ac 	bl	8000598 <__aeabi_f2d>
 800c240:	4602      	mov	r2, r0
 800c242:	460b      	mov	r3, r1
 800c244:	4610      	mov	r0, r2
 800c246:	4619      	mov	r1, r3
 800c248:	f7f4 fcf6 	bl	8000c38 <__aeabi_d2f>
 800c24c:	4603      	mov	r3, r0
 800c24e:	ee07 3a90 	vmov	s15, r3
 800c252:	eef1 7a67 	vneg.f32	s15, s15
 800c256:	edc7 7a04 	vstr	s15, [r7, #16]
		st_data.f_ctrl_trgtAcc		= 0;		// 加速度指定
 800c25a:	f04f 0300 	mov.w	r3, #0
 800c25e:	61bb      	str	r3, [r7, #24]
		st_data.f_ctrl_nowAcc		= st_Info.f_mot_trgtAcc1;
 800c260:	4b4d      	ldr	r3, [pc, #308]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	617b      	str	r3, [r7, #20]
		st_data.f_ctrl_now			= st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v;		// 現在速度
 800c266:	4b4c      	ldr	r3, [pc, #304]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c268:	ed93 7a08 	vldr	s14, [r3, #32]
 800c26c:	4b4a      	ldr	r3, [pc, #296]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c26e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800c272:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c276:	edc7 7a07 	vstr	s15, [r7, #28]
		st_data.f_ctrl_trgt			= st_Info.f_mot_trgt;		// 目標速度
 800c27a:	4b47      	ldr	r3, [pc, #284]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c27c:	6a1b      	ldr	r3, [r3, #32]
 800c27e:	623b      	str	r3, [r7, #32]
		st_data.f_ctrl_nowDist		= st_Info.f_mot_l1_accjerk + st_Info.f_mot_l1_accconst;				
 800c280:	4b45      	ldr	r3, [pc, #276]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c282:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800c286:	4b44      	ldr	r3, [pc, #272]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c288:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800c28c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c290:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		st_data.f_ctrl_dist			= st_Info.f_mot_l1;			// 加速距離
 800c294:	4b40      	ldr	r3, [pc, #256]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c298:	62bb      	str	r3, [r7, #40]	@ 0x28
		st_data.f_ctrl_jerkAngle		= 0;
 800c29a:	f04f 0300 	mov.w	r3, #0
 800c29e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		st_data.f_ctrl_nowAccAngle		= 0;
 800c2a0:	f04f 0300 	mov.w	r3, #0
 800c2a4:	633b      	str	r3, [r7, #48]	@ 0x30
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c2a6:	f04f 0300 	mov.w	r3, #0
 800c2aa:	637b      	str	r3, [r7, #52]	@ 0x34
		st_data.f_ctrl_nowAngleS		= 0;				// 現在角速度
 800c2ac:	f04f 0300 	mov.w	r3, #0
 800c2b0:	63bb      	str	r3, [r7, #56]	@ 0x38
		st_data.f_ctrl_trgtAngleS		= 0;				// 目標角度
 800c2b2:	f04f 0300 	mov.w	r3, #0
 800c2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		st_data.f_ctrl_nowAngle		= 0;				// 現在角度
 800c2b8:	f04f 0300 	mov.w	r3, #0
 800c2bc:	643b      	str	r3, [r7, #64]	@ 0x40
		st_data.f_ctrl_angle			= 0;				// 目標角度
 800c2be:	f04f 0300 	mov.w	r3, #0
 800c2c2:	647b      	str	r3, [r7, #68]	@ 0x44
		st_data.f_ctrl_time 			= 0;				// 目標時間 [sec] ← 指定しない
 800c2c4:	f04f 0300 	mov.w	r3, #0
 800c2c8:	60fb      	str	r3, [r7, #12]
//		CTRL_clrData();								// 設定データをクリア
		CTRL_setData( &st_data );						// データセット
 800c2ca:	f107 0308 	add.w	r3, r7, #8
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fa f9a6 	bl	8006620 <CTRL_setData>
		DCM_staMotAll();							// モータON
 800c2d4:	f7fd f9e2 	bl	800969c <DCM_staMotAll>
		while( Get_NowDist() < st_Info.f_mot_l1 ){					// 指定距離到達待ち
 800c2d8:	e00f      	b.n	800c2fa <MOT_goBlock_AccConstDec+0x28a>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c2da:	f7fd f989 	bl	80095f0 <SYS_isOutOfCtrl>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d008      	beq.n	800c2f6 <MOT_goBlock_AccConstDec+0x286>
				CTRL_stop();
 800c2e4:	f7fa f89e 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	f7fd f9b3 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c2ee:	2001      	movs	r0, #1
 800c2f0:	f7fd f9b0 	bl	8009654 <DCM_brakeMot>
				break;
 800c2f4:	e00d      	b.n	800c312 <MOT_goBlock_AccConstDec+0x2a2>
			}				
			MOT_setWallEdgeDist();
 800c2f6:	f006 fa4d 	bl	8012794 <MOT_setWallEdgeDist>
		while( Get_NowDist() < st_Info.f_mot_l1 ){					// 指定距離到達待ち
 800c2fa:	f7f9 ffe3 	bl	80062c4 <Get_NowDist>
 800c2fe:	eeb0 7a40 	vmov.f32	s14, s0
 800c302:	4b25      	ldr	r3, [pc, #148]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c304:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800c308:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c310:	d4e3      	bmi.n	800c2da <MOT_goBlock_AccConstDec+0x26a>
	}

	/* ------ */
	/*  const */
	/* ------ */
	if( MOT_GO_ST_NORMAL == en_goType ){
 800c312:	78bb      	ldrb	r3, [r7, #2]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d102      	bne.n	800c31e <MOT_goBlock_AccConstDec+0x2ae>
		st_data.en_ctrl_type		= CTRL_CONST;
 800c318:	2301      	movs	r3, #1
 800c31a:	723b      	strb	r3, [r7, #8]
 800c31c:	e001      	b.n	800c322 <MOT_goBlock_AccConstDec+0x2b2>
	}
	else{
		st_data.en_ctrl_type		= CTRL_SKEW_CONST;
 800c31e:	2304      	movs	r3, #4
 800c320:	723b      	strb	r3, [r7, #8]
	}
	st_data.f_ctrl_jerk			= 0;
 800c322:	f04f 0300 	mov.w	r3, #0
 800c326:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;		// 加速度指定
 800c328:	f04f 0300 	mov.w	r3, #0
 800c32c:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 800c32e:	f04f 0300 	mov.w	r3, #0
 800c332:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_Info.f_mot_trgt;			// 現在速度
 800c334:	4b18      	ldr	r3, [pc, #96]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c336:	6a1b      	ldr	r3, [r3, #32]
 800c338:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_Info.f_mot_trgt;			// 目標速度
 800c33a:	4b17      	ldr	r3, [pc, #92]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c33c:	6a1b      	ldr	r3, [r3, #32]
 800c33e:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= st_Info.f_mot_l1;				// 現在位置
 800c340:	4b15      	ldr	r3, [pc, #84]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c344:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= st_Info.f_mot_l1_2;			// 等速完了位置
 800c346:	4b14      	ldr	r3, [pc, #80]	@ (800c398 <MOT_goBlock_AccConstDec+0x328>)
 800c348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c34a:	62bb      	str	r3, [r7, #40]	@ 0x28
	st_data.f_ctrl_jerkAngle		= 0;
 800c34c:	f04f 0300 	mov.w	r3, #0
 800c350:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= 0;
 800c352:	f04f 0300 	mov.w	r3, #0
 800c356:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c358:	f04f 0300 	mov.w	r3, #0
 800c35c:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= 0;					// 現在角速度
 800c35e:	f04f 0300 	mov.w	r3, #0
 800c362:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS		= 0;					// 目標角度
 800c364:	f04f 0300 	mov.w	r3, #0
 800c368:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle		= 0;					// 現在角度
 800c36a:	f04f 0300 	mov.w	r3, #0
 800c36e:	643b      	str	r3, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= 0;					// 目標角度
 800c370:	f04f 0300 	mov.w	r3, #0
 800c374:	647b      	str	r3, [r7, #68]	@ 0x44
	st_data.f_ctrl_time 			= 0;					// 目標時間 [sec] ← 指定しない
 800c376:	f04f 0300 	mov.w	r3, #0
 800c37a:	60fb      	str	r3, [r7, #12]
	if( ( en_type == MOT_CONST_DEC ) || ( en_type == MOT_CONST_DEC_CUSTOM ) ){
 800c37c:	78fb      	ldrb	r3, [r7, #3]
 800c37e:	2b05      	cmp	r3, #5
 800c380:	d002      	beq.n	800c388 <MOT_goBlock_AccConstDec+0x318>
 800c382:	78fb      	ldrb	r3, [r7, #3]
 800c384:	2b06      	cmp	r3, #6
 800c386:	d101      	bne.n	800c38c <MOT_goBlock_AccConstDec+0x31c>
		CTRL_clrData();										// 設定データをクリア
 800c388:	f7fa f85c 	bl	8006444 <CTRL_clrData>
	}
	CTRL_setData( &st_data );						// データセット
 800c38c:	f107 0308 	add.w	r3, r7, #8
 800c390:	4618      	mov	r0, r3
 800c392:	f7fa f945 	bl	8006620 <CTRL_setData>
	while( Get_NowDist() < st_Info.f_mot_l1_2 ){				// 指定距離到達待ち
 800c396:	e011      	b.n	800c3bc <MOT_goBlock_AccConstDec+0x34c>
 800c398:	20017b2c 	.word	0x20017b2c
		if( SYS_isOutOfCtrl() == TRUE ){
 800c39c:	f7fd f928 	bl	80095f0 <SYS_isOutOfCtrl>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d008      	beq.n	800c3b8 <MOT_goBlock_AccConstDec+0x348>
			CTRL_stop();
 800c3a6:	f7fa f83d 	bl	8006424 <CTRL_stop>
			DCM_brakeMot( DCM_R );		
 800c3aa:	2000      	movs	r0, #0
 800c3ac:	f7fd f952 	bl	8009654 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		
 800c3b0:	2001      	movs	r0, #1
 800c3b2:	f7fd f94f 	bl	8009654 <DCM_brakeMot>
			break;
 800c3b6:	e00d      	b.n	800c3d4 <MOT_goBlock_AccConstDec+0x364>
		}				
		MOT_setWallEdgeDist();
 800c3b8:	f006 f9ec 	bl	8012794 <MOT_setWallEdgeDist>
	while( Get_NowDist() < st_Info.f_mot_l1_2 ){				// 指定距離到達待ち
 800c3bc:	f7f9 ff82 	bl	80062c4 <Get_NowDist>
 800c3c0:	eeb0 7a40 	vmov.f32	s14, s0
 800c3c4:	4bc2      	ldr	r3, [pc, #776]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c3c6:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800c3ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d2:	d4e3      	bmi.n	800c39c <MOT_goBlock_AccConstDec+0x32c>
	}

	/* ------ */
	/*  dec - jerk  */
	/* ------ */
	if( ( en_type != MOT_ACC_CONST ) && ( en_type != MOT_ACC_CONST_CUSTOM ) ){
 800c3d4:	78fb      	ldrb	r3, [r7, #3]
 800c3d6:	2b03      	cmp	r3, #3
 800c3d8:	f000 81a8 	beq.w	800c72c <MOT_goBlock_AccConstDec+0x6bc>
 800c3dc:	78fb      	ldrb	r3, [r7, #3]
 800c3de:	2b04      	cmp	r3, #4
 800c3e0:	f000 81a4 	beq.w	800c72c <MOT_goBlock_AccConstDec+0x6bc>

		if( MOT_GO_ST_NORMAL == en_goType ){
 800c3e4:	78bb      	ldrb	r3, [r7, #2]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d102      	bne.n	800c3f0 <MOT_goBlock_AccConstDec+0x380>
			st_data.en_ctrl_type		= CTRL_DEC;
 800c3ea:	2302      	movs	r3, #2
 800c3ec:	723b      	strb	r3, [r7, #8]
 800c3ee:	e001      	b.n	800c3f4 <MOT_goBlock_AccConstDec+0x384>
		}
		else{
			st_data.en_ctrl_type		= CTRL_SKEW_DEC;
 800c3f0:	2305      	movs	r3, #5
 800c3f2:	723b      	strb	r3, [r7, #8]
		}
		st_data.f_ctrl_jerk			= st_Info.f_mot_jerk*(-1.0) ;
 800c3f4:	4bb6      	ldr	r3, [pc, #728]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7f4 f8cd 	bl	8000598 <__aeabi_f2d>
 800c3fe:	4602      	mov	r2, r0
 800c400:	460b      	mov	r3, r1
 800c402:	4610      	mov	r0, r2
 800c404:	4619      	mov	r1, r3
 800c406:	f7f4 fc17 	bl	8000c38 <__aeabi_d2f>
 800c40a:	4603      	mov	r3, r0
 800c40c:	ee07 3a90 	vmov	s15, r3
 800c410:	eef1 7a67 	vneg.f32	s15, s15
 800c414:	edc7 7a04 	vstr	s15, [r7, #16]
		st_data.f_ctrl_trgtAcc		= st_Info.f_mot_trgtAcc3*(-1.0);		// 減速
 800c418:	4bad      	ldr	r3, [pc, #692]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7f4 f8bb 	bl	8000598 <__aeabi_f2d>
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	4610      	mov	r0, r2
 800c428:	4619      	mov	r1, r3
 800c42a:	f7f4 fc05 	bl	8000c38 <__aeabi_d2f>
 800c42e:	4603      	mov	r3, r0
 800c430:	ee07 3a90 	vmov	s15, r3
 800c434:	eef1 7a67 	vneg.f32	s15, s15
 800c438:	edc7 7a06 	vstr	s15, [r7, #24]
		st_data.f_ctrl_nowAcc		= 0;
 800c43c:	f04f 0300 	mov.w	r3, #0
 800c440:	617b      	str	r3, [r7, #20]
		st_data.f_ctrl_now			= st_Info.f_mot_trgt;			// 現在速度
 800c442:	4ba3      	ldr	r3, [pc, #652]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c444:	6a1b      	ldr	r3, [r3, #32]
 800c446:	61fb      	str	r3, [r7, #28]
		st_data.f_ctrl_trgt			= st_Info.f_mot_trgt - st_Info.f_mot_decjerk_v;			// 最終速度
 800c448:	4ba1      	ldr	r3, [pc, #644]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c44a:	ed93 7a08 	vldr	s14, [r3, #32]
 800c44e:	4ba0      	ldr	r3, [pc, #640]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c450:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c454:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c458:	edc7 7a08 	vstr	s15, [r7, #32]
		st_data.f_ctrl_nowDist		= st_Info.f_mot_l1_2;			// 等速完了位置
 800c45c:	4b9c      	ldr	r3, [pc, #624]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c45e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c460:	627b      	str	r3, [r7, #36]	@ 0x24
		st_data.f_ctrl_dist			= st_Info.f_mot_l1_2 + st_Info.f_mot_l3_decjerk;			// 全移動完了位置
 800c462:	4b9b      	ldr	r3, [pc, #620]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c464:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800c468:	4b99      	ldr	r3, [pc, #612]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c46a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800c46e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c472:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		st_data.f_ctrl_jerkAngle		= 0;
 800c476:	f04f 0300 	mov.w	r3, #0
 800c47a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		st_data.f_ctrl_nowAccAngle		= 0;
 800c47c:	f04f 0300 	mov.w	r3, #0
 800c480:	633b      	str	r3, [r7, #48]	@ 0x30
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c482:	f04f 0300 	mov.w	r3, #0
 800c486:	637b      	str	r3, [r7, #52]	@ 0x34
		st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 800c488:	f04f 0300 	mov.w	r3, #0
 800c48c:	63bb      	str	r3, [r7, #56]	@ 0x38
		st_data.f_ctrl_trgtAngleS		= 0;						// 目標角度
 800c48e:	f04f 0300 	mov.w	r3, #0
 800c492:	63fb      	str	r3, [r7, #60]	@ 0x3c
		st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 800c494:	f04f 0300 	mov.w	r3, #0
 800c498:	643b      	str	r3, [r7, #64]	@ 0x40
		st_data.f_ctrl_angle			= 0;						// 目標角度
 800c49a:	f04f 0300 	mov.w	r3, #0
 800c49e:	647b      	str	r3, [r7, #68]	@ 0x44
		st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c4a0:	f04f 0300 	mov.w	r3, #0
 800c4a4:	60fb      	str	r3, [r7, #12]
		CTRL_setData( &st_data );							// データセット
 800c4a6:	f107 0308 	add.w	r3, r7, #8
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fa f8b8 	bl	8006620 <CTRL_setData>
		while( Get_NowDist() < ( st_Info.f_mot_l1_2 + st_Info.f_mot_l3_decjerk ) ){		// 指定距離到達待ち
 800c4b0:	e00f      	b.n	800c4d2 <MOT_goBlock_AccConstDec+0x462>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c4b2:	f7fd f89d 	bl	80095f0 <SYS_isOutOfCtrl>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d008      	beq.n	800c4ce <MOT_goBlock_AccConstDec+0x45e>
				CTRL_stop();
 800c4bc:	f7f9 ffb2 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	f7fd f8c7 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c4c6:	2001      	movs	r0, #1
 800c4c8:	f7fd f8c4 	bl	8009654 <DCM_brakeMot>
				break;
 800c4cc:	e012      	b.n	800c4f4 <MOT_goBlock_AccConstDec+0x484>
			}				
			MOT_setWallEdgeDist();
 800c4ce:	f006 f961 	bl	8012794 <MOT_setWallEdgeDist>
		while( Get_NowDist() < ( st_Info.f_mot_l1_2 + st_Info.f_mot_l3_decjerk ) ){		// 指定距離到達待ち
 800c4d2:	f7f9 fef7 	bl	80062c4 <Get_NowDist>
 800c4d6:	eef0 6a40 	vmov.f32	s13, s0
 800c4da:	4b7d      	ldr	r3, [pc, #500]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c4dc:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800c4e0:	4b7b      	ldr	r3, [pc, #492]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c4e2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800c4e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4ea:	eef4 6ae7 	vcmpe.f32	s13, s15
 800c4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4f2:	d4de      	bmi.n	800c4b2 <MOT_goBlock_AccConstDec+0x442>

		}

		//dec
		st_data.f_ctrl_jerk			= 0 ;
 800c4f4:	f04f 0300 	mov.w	r3, #0
 800c4f8:	613b      	str	r3, [r7, #16]
		st_data.f_ctrl_trgtAcc		= st_Info.f_mot_trgtAcc3*(-1.0);		// 減速
 800c4fa:	4b75      	ldr	r3, [pc, #468]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7f4 f84a 	bl	8000598 <__aeabi_f2d>
 800c504:	4602      	mov	r2, r0
 800c506:	460b      	mov	r3, r1
 800c508:	4610      	mov	r0, r2
 800c50a:	4619      	mov	r1, r3
 800c50c:	f7f4 fb94 	bl	8000c38 <__aeabi_d2f>
 800c510:	4603      	mov	r3, r0
 800c512:	ee07 3a90 	vmov	s15, r3
 800c516:	eef1 7a67 	vneg.f32	s15, s15
 800c51a:	edc7 7a06 	vstr	s15, [r7, #24]
		st_data.f_ctrl_nowAcc		= st_Info.f_mot_trgtAcc3*(-1.0);
 800c51e:	4b6c      	ldr	r3, [pc, #432]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	4618      	mov	r0, r3
 800c524:	f7f4 f838 	bl	8000598 <__aeabi_f2d>
 800c528:	4602      	mov	r2, r0
 800c52a:	460b      	mov	r3, r1
 800c52c:	4610      	mov	r0, r2
 800c52e:	4619      	mov	r1, r3
 800c530:	f7f4 fb82 	bl	8000c38 <__aeabi_d2f>
 800c534:	4603      	mov	r3, r0
 800c536:	ee07 3a90 	vmov	s15, r3
 800c53a:	eef1 7a67 	vneg.f32	s15, s15
 800c53e:	edc7 7a05 	vstr	s15, [r7, #20]
		st_data.f_ctrl_now			= st_Info.f_mot_trgt - st_Info.f_mot_decjerk_v;			// 現在速度
 800c542:	4b63      	ldr	r3, [pc, #396]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c544:	ed93 7a08 	vldr	s14, [r3, #32]
 800c548:	4b61      	ldr	r3, [pc, #388]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c54a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c54e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c552:	edc7 7a07 	vstr	s15, [r7, #28]
		st_data.f_ctrl_trgt			= st_Info.f_mot_last + st_Info.f_mot_decjerk_v;			// 最終速度
 800c556:	4b5e      	ldr	r3, [pc, #376]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c558:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800c55c:	4b5c      	ldr	r3, [pc, #368]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c55e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c562:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c566:	edc7 7a08 	vstr	s15, [r7, #32]
		st_data.f_ctrl_nowDist		= st_Info.f_mot_l1_2 + st_Info.f_mot_l3_decjerk;			// 等速完了位置
 800c56a:	4b59      	ldr	r3, [pc, #356]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c56c:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800c570:	4b57      	ldr	r3, [pc, #348]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c572:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800c576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c57a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		st_data.f_ctrl_dist			= st_Info.f_mot_l1_2 + st_Info.f_mot_l3_decjerk+st_Info.f_mot_l3_decconst;			// 全移動完了位置
 800c57e:	4b54      	ldr	r3, [pc, #336]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c580:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800c584:	4b52      	ldr	r3, [pc, #328]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c586:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800c58a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c58e:	4b50      	ldr	r3, [pc, #320]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c590:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800c594:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c598:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		st_data.f_ctrl_jerkAngle		= 0;
 800c59c:	f04f 0300 	mov.w	r3, #0
 800c5a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		st_data.f_ctrl_nowAccAngle		= 0;
 800c5a2:	f04f 0300 	mov.w	r3, #0
 800c5a6:	633b      	str	r3, [r7, #48]	@ 0x30
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c5a8:	f04f 0300 	mov.w	r3, #0
 800c5ac:	637b      	str	r3, [r7, #52]	@ 0x34
		st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 800c5ae:	f04f 0300 	mov.w	r3, #0
 800c5b2:	63bb      	str	r3, [r7, #56]	@ 0x38
		st_data.f_ctrl_trgtAngleS		= 0;						// 目標角度
 800c5b4:	f04f 0300 	mov.w	r3, #0
 800c5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 800c5ba:	f04f 0300 	mov.w	r3, #0
 800c5be:	643b      	str	r3, [r7, #64]	@ 0x40
		st_data.f_ctrl_angle			= 0;						// 目標角度
 800c5c0:	f04f 0300 	mov.w	r3, #0
 800c5c4:	647b      	str	r3, [r7, #68]	@ 0x44
		st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c5c6:	f04f 0300 	mov.w	r3, #0
 800c5ca:	60fb      	str	r3, [r7, #12]
		CTRL_setData( &st_data );							// データセット
 800c5cc:	f107 0308 	add.w	r3, r7, #8
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7fa f825 	bl	8006620 <CTRL_setData>
		while( Get_NowDist() < ( st_Info.f_mot_l1_2 + st_Info.f_mot_l3_decjerk+st_Info.f_mot_l3_decconst ) ){		// 指定距離到達待ち
 800c5d6:	e00f      	b.n	800c5f8 <MOT_goBlock_AccConstDec+0x588>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c5d8:	f7fd f80a 	bl	80095f0 <SYS_isOutOfCtrl>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d008      	beq.n	800c5f4 <MOT_goBlock_AccConstDec+0x584>
				CTRL_stop();
 800c5e2:	f7f9 ff1f 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c5e6:	2000      	movs	r0, #0
 800c5e8:	f7fd f834 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c5ec:	2001      	movs	r0, #1
 800c5ee:	f7fd f831 	bl	8009654 <DCM_brakeMot>
				break;
 800c5f2:	e017      	b.n	800c624 <MOT_goBlock_AccConstDec+0x5b4>
			}				
			MOT_setWallEdgeDist();
 800c5f4:	f006 f8ce 	bl	8012794 <MOT_setWallEdgeDist>
		while( Get_NowDist() < ( st_Info.f_mot_l1_2 + st_Info.f_mot_l3_decjerk+st_Info.f_mot_l3_decconst ) ){		// 指定距離到達待ち
 800c5f8:	f7f9 fe64 	bl	80062c4 <Get_NowDist>
 800c5fc:	eef0 6a40 	vmov.f32	s13, s0
 800c600:	4b33      	ldr	r3, [pc, #204]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c602:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800c606:	4b32      	ldr	r3, [pc, #200]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c608:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800c60c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c610:	4b2f      	ldr	r3, [pc, #188]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c612:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800c616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c61a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800c61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c622:	d4d9      	bmi.n	800c5d8 <MOT_goBlock_AccConstDec+0x568>

		}

		//dec + accjerk
		st_data.f_ctrl_jerk			= st_Info.f_mot_jerk ;
 800c624:	4b2a      	ldr	r3, [pc, #168]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	613b      	str	r3, [r7, #16]
		st_data.f_ctrl_trgtAcc		= 0;		// 減速
 800c62a:	f04f 0300 	mov.w	r3, #0
 800c62e:	61bb      	str	r3, [r7, #24]
		st_data.f_ctrl_nowAcc		= st_Info.f_mot_trgtAcc3*(-1.0);
 800c630:	4b27      	ldr	r3, [pc, #156]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	4618      	mov	r0, r3
 800c636:	f7f3 ffaf 	bl	8000598 <__aeabi_f2d>
 800c63a:	4602      	mov	r2, r0
 800c63c:	460b      	mov	r3, r1
 800c63e:	4610      	mov	r0, r2
 800c640:	4619      	mov	r1, r3
 800c642:	f7f4 faf9 	bl	8000c38 <__aeabi_d2f>
 800c646:	4603      	mov	r3, r0
 800c648:	ee07 3a90 	vmov	s15, r3
 800c64c:	eef1 7a67 	vneg.f32	s15, s15
 800c650:	edc7 7a05 	vstr	s15, [r7, #20]
		st_data.f_ctrl_now			= st_Info.f_mot_last + st_Info.f_mot_decjerk_v;			// 現在速度
 800c654:	4b1e      	ldr	r3, [pc, #120]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c656:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800c65a:	4b1d      	ldr	r3, [pc, #116]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c65c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c660:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c664:	edc7 7a07 	vstr	s15, [r7, #28]
		st_data.f_ctrl_trgt			= st_Info.f_mot_last;			// 最終速度
 800c668:	4b19      	ldr	r3, [pc, #100]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c66a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c66c:	623b      	str	r3, [r7, #32]
		st_data.f_ctrl_nowDist		= st_Info.f_mot_l1_2 + st_Info.f_mot_l3_decjerk+st_Info.f_mot_l3_decconst;			// 等速完了位置
 800c66e:	4b18      	ldr	r3, [pc, #96]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c670:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800c674:	4b16      	ldr	r3, [pc, #88]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c676:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800c67a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c67e:	4b14      	ldr	r3, [pc, #80]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c680:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800c684:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c688:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		st_data.f_ctrl_dist			= st_Info.f_mot_dist;			// 全移動完了位置
 800c68c:	4b10      	ldr	r3, [pc, #64]	@ (800c6d0 <MOT_goBlock_AccConstDec+0x660>)
 800c68e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c690:	62bb      	str	r3, [r7, #40]	@ 0x28
		st_data.f_ctrl_jerkAngle		= 0;
 800c692:	f04f 0300 	mov.w	r3, #0
 800c696:	62fb      	str	r3, [r7, #44]	@ 0x2c
		st_data.f_ctrl_nowAccAngle		= 0;
 800c698:	f04f 0300 	mov.w	r3, #0
 800c69c:	633b      	str	r3, [r7, #48]	@ 0x30
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c69e:	f04f 0300 	mov.w	r3, #0
 800c6a2:	637b      	str	r3, [r7, #52]	@ 0x34
		st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 800c6a4:	f04f 0300 	mov.w	r3, #0
 800c6a8:	63bb      	str	r3, [r7, #56]	@ 0x38
		st_data.f_ctrl_trgtAngleS		= 0;						// 目標角度
 800c6aa:	f04f 0300 	mov.w	r3, #0
 800c6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 800c6b0:	f04f 0300 	mov.w	r3, #0
 800c6b4:	643b      	str	r3, [r7, #64]	@ 0x40
		st_data.f_ctrl_angle			= 0;						// 目標角度
 800c6b6:	f04f 0300 	mov.w	r3, #0
 800c6ba:	647b      	str	r3, [r7, #68]	@ 0x44
		st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c6bc:	f04f 0300 	mov.w	r3, #0
 800c6c0:	60fb      	str	r3, [r7, #12]
		CTRL_setData( &st_data );							// データセット
 800c6c2:	f107 0308 	add.w	r3, r7, #8
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7f9 ffaa 	bl	8006620 <CTRL_setData>
		while( Get_NowDist() < ( st_Info.f_mot_dist ) ){		// 指定距離到達待ち
 800c6cc:	e020      	b.n	800c710 <MOT_goBlock_AccConstDec+0x6a0>
 800c6ce:	bf00      	nop
 800c6d0:	20017b2c 	.word	0x20017b2c
			if( SYS_isOutOfCtrl() == TRUE ){
 800c6d4:	f7fc ff8c 	bl	80095f0 <SYS_isOutOfCtrl>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d008      	beq.n	800c6f0 <MOT_goBlock_AccConstDec+0x680>
				CTRL_stop();
 800c6de:	f7f9 fea1 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c6e2:	2000      	movs	r0, #0
 800c6e4:	f7fc ffb6 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c6e8:	2001      	movs	r0, #1
 800c6ea:	f7fc ffb3 	bl	8009654 <DCM_brakeMot>
				break;
 800c6ee:	e01d      	b.n	800c72c <MOT_goBlock_AccConstDec+0x6bc>
			}				
			MOT_setWallEdgeDist();
 800c6f0:	f006 f850 	bl	8012794 <MOT_setWallEdgeDist>

			if((EscapeWait>2.0)&&(SearchFlag == TRUE))break;
 800c6f4:	4b85      	ldr	r3, [pc, #532]	@ (800c90c <MOT_goBlock_AccConstDec+0x89c>)
 800c6f6:	edd3 7a00 	vldr	s15, [r3]
 800c6fa:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800c6fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c706:	dd03      	ble.n	800c710 <MOT_goBlock_AccConstDec+0x6a0>
 800c708:	4b81      	ldr	r3, [pc, #516]	@ (800c910 <MOT_goBlock_AccConstDec+0x8a0>)
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10c      	bne.n	800c72a <MOT_goBlock_AccConstDec+0x6ba>
		while( Get_NowDist() < ( st_Info.f_mot_dist ) ){		// 指定距離到達待ち
 800c710:	f7f9 fdd8 	bl	80062c4 <Get_NowDist>
 800c714:	eeb0 7a40 	vmov.f32	s14, s0
 800c718:	4b7e      	ldr	r3, [pc, #504]	@ (800c914 <MOT_goBlock_AccConstDec+0x8a4>)
 800c71a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800c71e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c726:	d4d5      	bmi.n	800c6d4 <MOT_goBlock_AccConstDec+0x664>
 800c728:	e000      	b.n	800c72c <MOT_goBlock_AccConstDec+0x6bc>
			if((EscapeWait>2.0)&&(SearchFlag == TRUE))break;
 800c72a:	bf00      	nop

	/* -------------------- */
	/*  const walledge      */
	/* -------------------- */
	/* not found edge */
	if( ( en_WallEdge != MOT_WALL_EDGE_NONE ) && ( bl_IsWallEdge == FALSE )  ){
 800c72c:	4b7a      	ldr	r3, [pc, #488]	@ (800c918 <MOT_goBlock_AccConstDec+0x8a8>)
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d067      	beq.n	800c804 <MOT_goBlock_AccConstDec+0x794>
 800c734:	4b79      	ldr	r3, [pc, #484]	@ (800c91c <MOT_goBlock_AccConstDec+0x8ac>)
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	f083 0301 	eor.w	r3, r3, #1
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d060      	beq.n	800c804 <MOT_goBlock_AccConstDec+0x794>
		st_data.en_ctrl_type			= CTRL_CONST;
 800c742:	2301      	movs	r3, #1
 800c744:	723b      	strb	r3, [r7, #8]
		st_data.f_ctrl_jerk			= 0;
 800c746:	f04f 0300 	mov.w	r3, #0
 800c74a:	613b      	str	r3, [r7, #16]
		st_data.f_ctrl_trgtAcc		= 0;		// 加速度指定
 800c74c:	f04f 0300 	mov.w	r3, #0
 800c750:	61bb      	str	r3, [r7, #24]
		st_data.f_ctrl_nowAcc		= 0;
 800c752:	f04f 0300 	mov.w	r3, #0
 800c756:	617b      	str	r3, [r7, #20]
		st_data.f_ctrl_now			= st_Info.f_mot_last;			// 現在速度
 800c758:	4b6e      	ldr	r3, [pc, #440]	@ (800c914 <MOT_goBlock_AccConstDec+0x8a4>)
 800c75a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c75c:	61fb      	str	r3, [r7, #28]
		st_data.f_ctrl_trgt			= st_Info.f_mot_last;			// 目標速度
 800c75e:	4b6d      	ldr	r3, [pc, #436]	@ (800c914 <MOT_goBlock_AccConstDec+0x8a4>)
 800c760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c762:	623b      	str	r3, [r7, #32]
		st_data.f_ctrl_nowDist		= Get_NowDist();				// 現在位置
 800c764:	f7f9 fdae 	bl	80062c4 <Get_NowDist>
 800c768:	eef0 7a40 	vmov.f32	s15, s0
 800c76c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		st_data.f_ctrl_dist			= Get_NowDist() + 0.045f;	// 等速完了位置（90.0f：壁切れをどこまで救うかの距離）、ここではf_NowDistをクリアしてはいけない。
 800c770:	f7f9 fda8 	bl	80062c4 <Get_NowDist>
 800c774:	eef0 7a40 	vmov.f32	s15, s0
 800c778:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800c920 <MOT_goBlock_AccConstDec+0x8b0>
 800c77c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c780:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		st_data.f_ctrl_jerkAngle		= 0;
 800c784:	f04f 0300 	mov.w	r3, #0
 800c788:	62fb      	str	r3, [r7, #44]	@ 0x2c
		st_data.f_ctrl_nowAccAngle		= 0;
 800c78a:	f04f 0300 	mov.w	r3, #0
 800c78e:	633b      	str	r3, [r7, #48]	@ 0x30
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c790:	f04f 0300 	mov.w	r3, #0
 800c794:	637b      	str	r3, [r7, #52]	@ 0x34
		st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 800c796:	f04f 0300 	mov.w	r3, #0
 800c79a:	63bb      	str	r3, [r7, #56]	@ 0x38
		st_data.f_ctrl_trgtAngleS	= 0;						// 目標角度
 800c79c:	f04f 0300 	mov.w	r3, #0
 800c7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 800c7a2:	f04f 0300 	mov.w	r3, #0
 800c7a6:	643b      	str	r3, [r7, #64]	@ 0x40
		st_data.f_ctrl_angle			= 0;						// 目標角度
 800c7a8:	f04f 0300 	mov.w	r3, #0
 800c7ac:	647b      	str	r3, [r7, #68]	@ 0x44
		st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c7ae:	f04f 0300 	mov.w	r3, #0
 800c7b2:	60fb      	str	r3, [r7, #12]
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 800c7b4:	f7f9 fe46 	bl	8006444 <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 800c7b8:	f107 0308 	add.w	r3, r7, #8
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7f9 ff2f 	bl	8006620 <CTRL_setData>
		while( Get_NowDist() < st_data.f_ctrl_dist ){				// 指定距離到達待ち
 800c7c2:	e012      	b.n	800c7ea <MOT_goBlock_AccConstDec+0x77a>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c7c4:	f7fc ff14 	bl	80095f0 <SYS_isOutOfCtrl>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d008      	beq.n	800c7e0 <MOT_goBlock_AccConstDec+0x770>
				CTRL_stop();
 800c7ce:	f7f9 fe29 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c7d2:	2000      	movs	r0, #0
 800c7d4:	f7fc ff3e 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c7d8:	2001      	movs	r0, #1
 800c7da:	f7fc ff3b 	bl	8009654 <DCM_brakeMot>
				break;
 800c7de:	e011      	b.n	800c804 <MOT_goBlock_AccConstDec+0x794>
			}				
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 800c7e0:	f006 f81c 	bl	801281c <MOT_setWallEdgeDist_LoopWait>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d10b      	bne.n	800c802 <MOT_goBlock_AccConstDec+0x792>
		while( Get_NowDist() < st_data.f_ctrl_dist ){				// 指定距離到達待ち
 800c7ea:	f7f9 fd6b 	bl	80062c4 <Get_NowDist>
 800c7ee:	eeb0 7a40 	vmov.f32	s14, s0
 800c7f2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800c7f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7fe:	d4e1      	bmi.n	800c7c4 <MOT_goBlock_AccConstDec+0x754>
 800c800:	e000      	b.n	800c804 <MOT_goBlock_AccConstDec+0x794>
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 800c802:	bf00      	nop
		}
	}
	/* straight for edge */
	if( ( MOT_GO_ST_NORMAL == en_goType ) &&				// 直進時に追加動作が必要な場合にしか実施しない
 800c804:	78bb      	ldrb	r3, [r7, #2]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d15e      	bne.n	800c8c8 <MOT_goBlock_AccConstDec+0x858>
		( f_WallEdgeAddDist != 0.0f ) &&
 800c80a:	4b46      	ldr	r3, [pc, #280]	@ (800c924 <MOT_goBlock_AccConstDec+0x8b4>)
 800c80c:	edd3 7a00 	vldr	s15, [r3]
	if( ( MOT_GO_ST_NORMAL == en_goType ) &&				// 直進時に追加動作が必要な場合にしか実施しない
 800c810:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c818:	d056      	beq.n	800c8c8 <MOT_goBlock_AccConstDec+0x858>
		( f_WallEdgeAddDist != 0.0f ) &&
 800c81a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c81e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c826:	d04f      	beq.n	800c8c8 <MOT_goBlock_AccConstDec+0x858>
		( f_fin != 0.0f )
	){
		st_data.en_ctrl_type			= CTRL_CONST;
 800c828:	2301      	movs	r3, #1
 800c82a:	723b      	strb	r3, [r7, #8]
		st_data.f_ctrl_jerk			= 0;
 800c82c:	f04f 0300 	mov.w	r3, #0
 800c830:	613b      	str	r3, [r7, #16]
		st_data.f_ctrl_trgtAcc		= 0;		// 加速度指定
 800c832:	f04f 0300 	mov.w	r3, #0
 800c836:	61bb      	str	r3, [r7, #24]
		st_data.f_ctrl_nowAcc		= 0;
 800c838:	f04f 0300 	mov.w	r3, #0
 800c83c:	617b      	str	r3, [r7, #20]
		st_data.f_ctrl_now			= st_Info.f_mot_last;			// 現在速度
 800c83e:	4b35      	ldr	r3, [pc, #212]	@ (800c914 <MOT_goBlock_AccConstDec+0x8a4>)
 800c840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c842:	61fb      	str	r3, [r7, #28]
		st_data.f_ctrl_trgt			= st_Info.f_mot_last;			// 目標速度
 800c844:	4b33      	ldr	r3, [pc, #204]	@ (800c914 <MOT_goBlock_AccConstDec+0x8a4>)
 800c846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c848:	623b      	str	r3, [r7, #32]
		st_data.f_ctrl_nowDist		= 0;						// 現在位置
 800c84a:	f04f 0300 	mov.w	r3, #0
 800c84e:	627b      	str	r3, [r7, #36]	@ 0x24
		st_data.f_ctrl_dist			= f_WallEdgeAddDist;		// 等速完了位置
 800c850:	4b34      	ldr	r3, [pc, #208]	@ (800c924 <MOT_goBlock_AccConstDec+0x8b4>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	62bb      	str	r3, [r7, #40]	@ 0x28
		st_data.f_ctrl_jerkAngle		= 0;
 800c856:	f04f 0300 	mov.w	r3, #0
 800c85a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		st_data.f_ctrl_nowAccAngle		= 0;
 800c85c:	f04f 0300 	mov.w	r3, #0
 800c860:	633b      	str	r3, [r7, #48]	@ 0x30
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c862:	f04f 0300 	mov.w	r3, #0
 800c866:	637b      	str	r3, [r7, #52]	@ 0x34
		st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 800c868:	f04f 0300 	mov.w	r3, #0
 800c86c:	63bb      	str	r3, [r7, #56]	@ 0x38
		st_data.f_ctrl_trgtAngleS	= 0;						// 目標角度
 800c86e:	f04f 0300 	mov.w	r3, #0
 800c872:	63fb      	str	r3, [r7, #60]	@ 0x3c
		st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 800c874:	f04f 0300 	mov.w	r3, #0
 800c878:	643b      	str	r3, [r7, #64]	@ 0x40
		st_data.f_ctrl_angle			= 0;						// 目標角度
 800c87a:	f04f 0300 	mov.w	r3, #0
 800c87e:	647b      	str	r3, [r7, #68]	@ 0x44
		st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c880:	f04f 0300 	mov.w	r3, #0
 800c884:	60fb      	str	r3, [r7, #12]
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 800c886:	f7f9 fddd 	bl	8006444 <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 800c88a:	f107 0308 	add.w	r3, r7, #8
 800c88e:	4618      	mov	r0, r3
 800c890:	f7f9 fec6 	bl	8006620 <CTRL_setData>
		while( Get_NowDist() < st_data.f_ctrl_dist ){			// 指定距離到達待ち
 800c894:	e00d      	b.n	800c8b2 <MOT_goBlock_AccConstDec+0x842>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c896:	f7fc feab 	bl	80095f0 <SYS_isOutOfCtrl>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d008      	beq.n	800c8b2 <MOT_goBlock_AccConstDec+0x842>
				CTRL_stop();
 800c8a0:	f7f9 fdc0 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	f7fc fed5 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c8aa:	2001      	movs	r0, #1
 800c8ac:	f7fc fed2 	bl	8009654 <DCM_brakeMot>
				break;
 800c8b0:	e00a      	b.n	800c8c8 <MOT_goBlock_AccConstDec+0x858>
		while( Get_NowDist() < st_data.f_ctrl_dist ){			// 指定距離到達待ち
 800c8b2:	f7f9 fd07 	bl	80062c4 <Get_NowDist>
 800c8b6:	eeb0 7a40 	vmov.f32	s14, s0
 800c8ba:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800c8be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8c6:	d4e6      	bmi.n	800c896 <MOT_goBlock_AccConstDec+0x826>
			}				
		}
	}

	/* stop */
	if( 0.0f == f_fin ){
 800c8c8:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8d4:	d10a      	bne.n	800c8ec <MOT_goBlock_AccConstDec+0x87c>
		LL_mDelay(100);			
 800c8d6:	2064      	movs	r0, #100	@ 0x64
 800c8d8:	f00f f8c8 	bl	801ba6c <LL_mDelay>
	 	CTRL_stop();				
 800c8dc:	f7f9 fda2 	bl	8006424 <CTRL_stop>
		DCM_brakeMot( DCM_R );	
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	f7fc feb7 	bl	8009654 <DCM_brakeMot>
		DCM_brakeMot( DCM_L );	
 800c8e6:	2001      	movs	r0, #1
 800c8e8:	f7fc feb4 	bl	8009654 <DCM_brakeMot>
	}

	f_MotNowSpeed = f_fin;		
 800c8ec:	4a0e      	ldr	r2, [pc, #56]	@ (800c928 <MOT_goBlock_AccConstDec+0x8b8>)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6013      	str	r3, [r2, #0]
	GYRO_endErrChkAngle();
 800c8f2:	f7fd f919 	bl	8009b28 <GYRO_endErrChkAngle>
//	CTRL_clrNowData();
	CTRL_setNowData_Err(/*st_data.f_dist,*/st_data.f_ctrl_angle);
 800c8f6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800c8fa:	eeb0 0a67 	vmov.f32	s0, s15
 800c8fe:	f7f9 fe4b 	bl	8006598 <CTRL_setNowData_Err>
}
 800c902:	bf00      	nop
 800c904:	3748      	adds	r7, #72	@ 0x48
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	200003fc 	.word	0x200003fc
 800c910:	2001bda0 	.word	0x2001bda0
 800c914:	20017b2c 	.word	0x20017b2c
 800c918:	20017be4 	.word	0x20017be4
 800c91c:	20017be5 	.word	0x20017be5
 800c920:	3d3851ec 	.word	0x3d3851ec
 800c924:	20017be8 	.word	0x20017be8
 800c928:	20017bcc 	.word	0x20017bcc
 800c92c:	00000000 	.word	0x00000000

0800c930 <MOT_setData_ACC_CONST_DEC>:

void MOT_setData_ACC_CONST_DEC( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800c930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c934:	b08e      	sub	sp, #56	@ 0x38
 800c936:	af02      	add	r7, sp, #8
 800c938:	ed87 0a07 	vstr	s0, [r7, #28]
 800c93c:	edc7 0a06 	vstr	s1, [r7, #24]
 800c940:	4603      	mov	r3, r0
 800c942:	75fb      	strb	r3, [r7, #23]
	float			f_1blockDist;				// 1区画の距離[m]

	float			f_accTime;

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800c944:	7dfb      	ldrb	r3, [r7, #23]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d104      	bne.n	800c954 <MOT_setData_ACC_CONST_DEC+0x24>
		f_1blockDist = BLOCK;
 800c94a:	4b01      	ldr	r3, [pc, #4]	@ (800c950 <MOT_setData_ACC_CONST_DEC+0x20>)
 800c94c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c94e:	e003      	b.n	800c958 <MOT_setData_ACC_CONST_DEC+0x28>
 800c950:	3db851ec 	.word	0x3db851ec
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800c954:	4bd0      	ldr	r3, [pc, #832]	@ (800cc98 <MOT_setData_ACC_CONST_DEC+0x368>)
 800c956:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}
	//jerk
	st_Info.f_mot_jerk		= MOT_getJerk();
 800c958:	f7ff fb7d 	bl	800c056 <MOT_getJerk>
 800c95c:	eef0 7a40 	vmov.f32	s15, s0
 800c960:	4bce      	ldr	r3, [pc, #824]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800c962:	edc3 7a01 	vstr	s15, [r3, #4]

	/* 加速度 */
	st_Info.f_mot_trgtAcc1 		= MOT_getAcc1();								// 加速度1[mm/s^2]
 800c966:	f7ff fb5e 	bl	800c026 <MOT_getAcc1>
 800c96a:	eef0 7a40 	vmov.f32	s15, s0
 800c96e:	4bcb      	ldr	r3, [pc, #812]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800c970:	edc3 7a02 	vstr	s15, [r3, #8]
	st_Info.f_mot_trgtAcc3 		= MOT_getAcc3();								// 加速度3[mm/s^2]
 800c974:	f7ff fb63 	bl	800c03e <MOT_getAcc3>
 800c978:	eef0 7a40 	vmov.f32	s15, s0
 800c97c:	4bc7      	ldr	r3, [pc, #796]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800c97e:	edc3 7a03 	vstr	s15, [r3, #12]

	/* 速度 */
	st_Info.f_mot_now		= f_MotNowSpeed;								// 現在速度
 800c982:	4bc7      	ldr	r3, [pc, #796]	@ (800cca0 <MOT_setData_ACC_CONST_DEC+0x370>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4ac5      	ldr	r2, [pc, #788]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800c988:	61d3      	str	r3, [r2, #28]
	st_Info.f_mot_trgt		= f_MotTrgtSpeed;								// 目標速度
 800c98a:	4bc6      	ldr	r3, [pc, #792]	@ (800cca4 <MOT_setData_ACC_CONST_DEC+0x374>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4ac3      	ldr	r2, [pc, #780]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800c990:	6213      	str	r3, [r2, #32]
	st_Info.f_mot_last		= f_fin;									// 最終速度
 800c992:	4ac2      	ldr	r2, [pc, #776]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800c994:	69bb      	ldr	r3, [r7, #24]
 800c996:	6253      	str	r3, [r2, #36]	@ 0x24

	/* 距離 */
	st_Info.f_mot_dist		= f_num * f_1blockDist;	
 800c998:	ed97 7a07 	vldr	s14, [r7, #28]
 800c99c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c9a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9a4:	4bbd      	ldr	r3, [pc, #756]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800c9a6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	f_accTime	= st_Info.f_mot_trgtAcc1/st_Info.f_mot_jerk;
 800c9aa:	4bbc      	ldr	r3, [pc, #752]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800c9ac:	edd3 6a02 	vldr	s13, [r3, #8]
 800c9b0:	4bba      	ldr	r3, [pc, #744]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800c9b2:	ed93 7a01 	vldr	s14, [r3, #4]
 800c9b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9ba:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	st_Info.f_mot_accjerk_v	= 1.0/2.0*st_Info.f_mot_jerk*f_accTime*f_accTime;//加速度到達時の速度
 800c9be:	4bb7      	ldr	r3, [pc, #732]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7f3 fde8 	bl	8000598 <__aeabi_f2d>
 800c9c8:	f04f 0200 	mov.w	r2, #0
 800c9cc:	4bb6      	ldr	r3, [pc, #728]	@ (800cca8 <MOT_setData_ACC_CONST_DEC+0x378>)
 800c9ce:	f7f3 fe3b 	bl	8000648 <__aeabi_dmul>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	4614      	mov	r4, r2
 800c9d8:	461d      	mov	r5, r3
 800c9da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9dc:	f7f3 fddc 	bl	8000598 <__aeabi_f2d>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	4629      	mov	r1, r5
 800c9e8:	f7f3 fe2e 	bl	8000648 <__aeabi_dmul>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	4614      	mov	r4, r2
 800c9f2:	461d      	mov	r5, r3
 800c9f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9f6:	f7f3 fdcf 	bl	8000598 <__aeabi_f2d>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	4620      	mov	r0, r4
 800ca00:	4629      	mov	r1, r5
 800ca02:	f7f3 fe21 	bl	8000648 <__aeabi_dmul>
 800ca06:	4602      	mov	r2, r0
 800ca08:	460b      	mov	r3, r1
 800ca0a:	4610      	mov	r0, r2
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	f7f4 f913 	bl	8000c38 <__aeabi_d2f>
 800ca12:	4603      	mov	r3, r0
 800ca14:	4aa1      	ldr	r2, [pc, #644]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800ca16:	6293      	str	r3, [r2, #40]	@ 0x28
	st_Info.f_mot_decjerk_v = st_Info.f_mot_accjerk_v;
 800ca18:	4ba0      	ldr	r3, [pc, #640]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800ca1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca1c:	4a9f      	ldr	r2, [pc, #636]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800ca1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

	printf("1 %f,%f\r\n",st_Info.f_mot_accjerk_v,st_Info.f_mot_decjerk_v);
 800ca20:	4b9e      	ldr	r3, [pc, #632]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800ca22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7f3 fdb7 	bl	8000598 <__aeabi_f2d>
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	460d      	mov	r5, r1
 800ca2e:	4b9b      	ldr	r3, [pc, #620]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800ca30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7f3 fdb0 	bl	8000598 <__aeabi_f2d>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	e9cd 2300 	strd	r2, r3, [sp]
 800ca40:	4622      	mov	r2, r4
 800ca42:	462b      	mov	r3, r5
 800ca44:	4899      	ldr	r0, [pc, #612]	@ (800ccac <MOT_setData_ACC_CONST_DEC+0x37c>)
 800ca46:	f011 f905 	bl	801dc54 <iprintf>
	printf("1 %f,%f\r\n",f_MotTrgtSpeed,f_MotNowSpeed);
 800ca4a:	4b96      	ldr	r3, [pc, #600]	@ (800cca4 <MOT_setData_ACC_CONST_DEC+0x374>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7f3 fda2 	bl	8000598 <__aeabi_f2d>
 800ca54:	4604      	mov	r4, r0
 800ca56:	460d      	mov	r5, r1
 800ca58:	4b91      	ldr	r3, [pc, #580]	@ (800cca0 <MOT_setData_ACC_CONST_DEC+0x370>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7f3 fd9b 	bl	8000598 <__aeabi_f2d>
 800ca62:	4602      	mov	r2, r0
 800ca64:	460b      	mov	r3, r1
 800ca66:	e9cd 2300 	strd	r2, r3, [sp]
 800ca6a:	4622      	mov	r2, r4
 800ca6c:	462b      	mov	r3, r5
 800ca6e:	488f      	ldr	r0, [pc, #572]	@ (800ccac <MOT_setData_ACC_CONST_DEC+0x37c>)
 800ca70:	f011 f8f0 	bl	801dc54 <iprintf>
	if(fabsf(f_MotTrgtSpeed - f_MotNowSpeed) > 0.05){
 800ca74:	4b8b      	ldr	r3, [pc, #556]	@ (800cca4 <MOT_setData_ACC_CONST_DEC+0x374>)
 800ca76:	ed93 7a00 	vldr	s14, [r3]
 800ca7a:	4b89      	ldr	r3, [pc, #548]	@ (800cca0 <MOT_setData_ACC_CONST_DEC+0x370>)
 800ca7c:	edd3 7a00 	vldr	s15, [r3]
 800ca80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca84:	eef0 7ae7 	vabs.f32	s15, s15
 800ca88:	ee17 0a90 	vmov	r0, s15
 800ca8c:	f7f3 fd84 	bl	8000598 <__aeabi_f2d>
 800ca90:	a37d      	add	r3, pc, #500	@ (adr r3, 800cc88 <MOT_setData_ACC_CONST_DEC+0x358>)
 800ca92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca96:	f7f4 f867 	bl	8000b68 <__aeabi_dcmpgt>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	f000 812f 	beq.w	800cd00 <MOT_setData_ACC_CONST_DEC+0x3d0>
		st_Info.f_mot_l1_accjerk	= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;//加速度に到達するまでの距離											// 移動距離[m]
 800caa2:	4b7e      	ldr	r3, [pc, #504]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7f3 fd76 	bl	8000598 <__aeabi_f2d>
 800caac:	a378      	add	r3, pc, #480	@ (adr r3, 800cc90 <MOT_setData_ACC_CONST_DEC+0x360>)
 800caae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab2:	f7f3 fdc9 	bl	8000648 <__aeabi_dmul>
 800cab6:	4602      	mov	r2, r0
 800cab8:	460b      	mov	r3, r1
 800caba:	4614      	mov	r4, r2
 800cabc:	461d      	mov	r5, r3
 800cabe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cac0:	f7f3 fd6a 	bl	8000598 <__aeabi_f2d>
 800cac4:	4602      	mov	r2, r0
 800cac6:	460b      	mov	r3, r1
 800cac8:	4620      	mov	r0, r4
 800caca:	4629      	mov	r1, r5
 800cacc:	f7f3 fdbc 	bl	8000648 <__aeabi_dmul>
 800cad0:	4602      	mov	r2, r0
 800cad2:	460b      	mov	r3, r1
 800cad4:	4614      	mov	r4, r2
 800cad6:	461d      	mov	r5, r3
 800cad8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cada:	f7f3 fd5d 	bl	8000598 <__aeabi_f2d>
 800cade:	4602      	mov	r2, r0
 800cae0:	460b      	mov	r3, r1
 800cae2:	4620      	mov	r0, r4
 800cae4:	4629      	mov	r1, r5
 800cae6:	f7f3 fdaf 	bl	8000648 <__aeabi_dmul>
 800caea:	4602      	mov	r2, r0
 800caec:	460b      	mov	r3, r1
 800caee:	4614      	mov	r4, r2
 800caf0:	461d      	mov	r5, r3
 800caf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800caf4:	f7f3 fd50 	bl	8000598 <__aeabi_f2d>
 800caf8:	4602      	mov	r2, r0
 800cafa:	460b      	mov	r3, r1
 800cafc:	4620      	mov	r0, r4
 800cafe:	4629      	mov	r1, r5
 800cb00:	f7f3 fda2 	bl	8000648 <__aeabi_dmul>
 800cb04:	4602      	mov	r2, r0
 800cb06:	460b      	mov	r3, r1
 800cb08:	4614      	mov	r4, r2
 800cb0a:	461d      	mov	r5, r3
 800cb0c:	4b64      	ldr	r3, [pc, #400]	@ (800cca0 <MOT_setData_ACC_CONST_DEC+0x370>)
 800cb0e:	ed93 7a00 	vldr	s14, [r3]
 800cb12:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800cb16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb1a:	ee17 0a90 	vmov	r0, s15
 800cb1e:	f7f3 fd3b 	bl	8000598 <__aeabi_f2d>
 800cb22:	4602      	mov	r2, r0
 800cb24:	460b      	mov	r3, r1
 800cb26:	4620      	mov	r0, r4
 800cb28:	4629      	mov	r1, r5
 800cb2a:	f7f3 fbd7 	bl	80002dc <__adddf3>
 800cb2e:	4602      	mov	r2, r0
 800cb30:	460b      	mov	r3, r1
 800cb32:	4610      	mov	r0, r2
 800cb34:	4619      	mov	r1, r3
 800cb36:	f7f4 f87f 	bl	8000c38 <__aeabi_d2f>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	4a57      	ldr	r2, [pc, #348]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cb3e:	6393      	str	r3, [r2, #56]	@ 0x38
		st_Info.f_mot_l1_decjerk	= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + (st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)*f_accTime 
 800cb40:	4b56      	ldr	r3, [pc, #344]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7f3 fd27 	bl	8000598 <__aeabi_f2d>
 800cb4a:	a351      	add	r3, pc, #324	@ (adr r3, 800cc90 <MOT_setData_ACC_CONST_DEC+0x360>)
 800cb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb50:	f7f3 fd7a 	bl	8000648 <__aeabi_dmul>
 800cb54:	4602      	mov	r2, r0
 800cb56:	460b      	mov	r3, r1
 800cb58:	4690      	mov	r8, r2
 800cb5a:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800cb5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb60:	f7f3 fd1a 	bl	8000598 <__aeabi_f2d>
 800cb64:	4602      	mov	r2, r0
 800cb66:	460b      	mov	r3, r1
 800cb68:	4640      	mov	r0, r8
 800cb6a:	4649      	mov	r1, r9
 800cb6c:	f7f3 fd6c 	bl	8000648 <__aeabi_dmul>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	4614      	mov	r4, r2
 800cb76:	461d      	mov	r5, r3
 800cb78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb7a:	f7f3 fd0d 	bl	8000598 <__aeabi_f2d>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	460b      	mov	r3, r1
 800cb82:	4620      	mov	r0, r4
 800cb84:	4629      	mov	r1, r5
 800cb86:	f7f3 fd5f 	bl	8000648 <__aeabi_dmul>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	4614      	mov	r4, r2
 800cb90:	461d      	mov	r5, r3
 800cb92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb94:	f7f3 fd00 	bl	8000598 <__aeabi_f2d>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	4629      	mov	r1, r5
 800cba0:	f7f3 fd52 	bl	8000648 <__aeabi_dmul>
 800cba4:	4602      	mov	r2, r0
 800cba6:	460b      	mov	r3, r1
 800cba8:	4614      	mov	r4, r2
 800cbaa:	461d      	mov	r5, r3
 800cbac:	4b3b      	ldr	r3, [pc, #236]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cbae:	ed93 7a08 	vldr	s14, [r3, #32]
 800cbb2:	4b3a      	ldr	r3, [pc, #232]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cbb4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800cbb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cbbc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800cbc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbc4:	ee17 0a90 	vmov	r0, s15
 800cbc8:	f7f3 fce6 	bl	8000598 <__aeabi_f2d>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	460b      	mov	r3, r1
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	f7f3 fb82 	bl	80002dc <__adddf3>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	460b      	mov	r3, r1
 800cbdc:	4690      	mov	r8, r2
 800cbde:	4699      	mov	r9, r3
										+ 1.0/2.0*st_Info.f_mot_trgtAcc1*f_accTime*f_accTime;
 800cbe0:	4b2e      	ldr	r3, [pc, #184]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7f3 fcd7 	bl	8000598 <__aeabi_f2d>
 800cbea:	f04f 0200 	mov.w	r2, #0
 800cbee:	4b2e      	ldr	r3, [pc, #184]	@ (800cca8 <MOT_setData_ACC_CONST_DEC+0x378>)
 800cbf0:	f7f3 fd2a 	bl	8000648 <__aeabi_dmul>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	4614      	mov	r4, r2
 800cbfa:	461d      	mov	r5, r3
 800cbfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbfe:	f7f3 fccb 	bl	8000598 <__aeabi_f2d>
 800cc02:	4602      	mov	r2, r0
 800cc04:	460b      	mov	r3, r1
 800cc06:	4620      	mov	r0, r4
 800cc08:	4629      	mov	r1, r5
 800cc0a:	f7f3 fd1d 	bl	8000648 <__aeabi_dmul>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	460b      	mov	r3, r1
 800cc12:	4614      	mov	r4, r2
 800cc14:	461d      	mov	r5, r3
 800cc16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc18:	f7f3 fcbe 	bl	8000598 <__aeabi_f2d>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	460b      	mov	r3, r1
 800cc20:	4620      	mov	r0, r4
 800cc22:	4629      	mov	r1, r5
 800cc24:	f7f3 fd10 	bl	8000648 <__aeabi_dmul>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	4640      	mov	r0, r8
 800cc2e:	4649      	mov	r1, r9
 800cc30:	f7f3 fb54 	bl	80002dc <__adddf3>
 800cc34:	4602      	mov	r2, r0
 800cc36:	460b      	mov	r3, r1
 800cc38:	4610      	mov	r0, r2
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	f7f3 fffc 	bl	8000c38 <__aeabi_d2f>
 800cc40:	4603      	mov	r3, r0
		st_Info.f_mot_l1_decjerk	= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + (st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)*f_accTime 
 800cc42:	4a16      	ldr	r2, [pc, #88]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cc44:	6413      	str	r3, [r2, #64]	@ 0x40
		st_Info.f_mot_l1_accconst	= ((f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)*(f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)
 800cc46:	4b17      	ldr	r3, [pc, #92]	@ (800cca4 <MOT_setData_ACC_CONST_DEC+0x374>)
 800cc48:	ed93 7a00 	vldr	s14, [r3]
 800cc4c:	4b13      	ldr	r3, [pc, #76]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cc4e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800cc52:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cc56:	4b13      	ldr	r3, [pc, #76]	@ (800cca4 <MOT_setData_ACC_CONST_DEC+0x374>)
 800cc58:	edd3 6a00 	vldr	s13, [r3]
 800cc5c:	4b0f      	ldr	r3, [pc, #60]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cc5e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800cc62:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800cc66:	ee27 7a27 	vmul.f32	s14, s14, s15
										-(f_MotNowSpeed+st_Info.f_mot_accjerk_v)*(f_MotNowSpeed+st_Info.f_mot_accjerk_v))
 800cc6a:	4b0c      	ldr	r3, [pc, #48]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cc6c:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800cc70:	4b0b      	ldr	r3, [pc, #44]	@ (800cca0 <MOT_setData_ACC_CONST_DEC+0x370>)
 800cc72:	edd3 7a00 	vldr	s15, [r3]
 800cc76:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800cc7a:	4b08      	ldr	r3, [pc, #32]	@ (800cc9c <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cc7c:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 800cc80:	e016      	b.n	800ccb0 <MOT_setData_ACC_CONST_DEC+0x380>
 800cc82:	bf00      	nop
 800cc84:	f3af 8000 	nop.w
 800cc88:	9999999a 	.word	0x9999999a
 800cc8c:	3fa99999 	.word	0x3fa99999
 800cc90:	55555555 	.word	0x55555555
 800cc94:	3fc55555 	.word	0x3fc55555
 800cc98:	3e0255b0 	.word	0x3e0255b0
 800cc9c:	20017b2c 	.word	0x20017b2c
 800cca0:	20017bcc 	.word	0x20017bcc
 800cca4:	20017bd0 	.word	0x20017bd0
 800cca8:	3fe00000 	.word	0x3fe00000
 800ccac:	08021c80 	.word	0x08021c80
 800ccb0:	4bbb      	ldr	r3, [pc, #748]	@ (800cfa0 <MOT_setData_ACC_CONST_DEC+0x670>)
 800ccb2:	edd3 7a00 	vldr	s15, [r3]
 800ccb6:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ccba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ccbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccc2:	ee17 0a90 	vmov	r0, s15
 800ccc6:	f7f3 fc67 	bl	8000598 <__aeabi_f2d>
 800ccca:	4604      	mov	r4, r0
 800cccc:	460d      	mov	r5, r1
										/( st_Info.f_mot_trgtAcc1 * 2.0 );
 800ccce:	4bb5      	ldr	r3, [pc, #724]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800ccd0:	689b      	ldr	r3, [r3, #8]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7f3 fc60 	bl	8000598 <__aeabi_f2d>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	460b      	mov	r3, r1
 800ccdc:	f7f3 fafe 	bl	80002dc <__adddf3>
 800cce0:	4602      	mov	r2, r0
 800cce2:	460b      	mov	r3, r1
 800cce4:	4620      	mov	r0, r4
 800cce6:	4629      	mov	r1, r5
 800cce8:	f7f3 fdd8 	bl	800089c <__aeabi_ddiv>
 800ccec:	4602      	mov	r2, r0
 800ccee:	460b      	mov	r3, r1
 800ccf0:	4610      	mov	r0, r2
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	f7f3 ffa0 	bl	8000c38 <__aeabi_d2f>
 800ccf8:	4603      	mov	r3, r0
		st_Info.f_mot_l1_accconst	= ((f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)*(f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)
 800ccfa:	4aaa      	ldr	r2, [pc, #680]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800ccfc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800ccfe:	e00f      	b.n	800cd20 <MOT_setData_ACC_CONST_DEC+0x3f0>
	}else{
		st_Info.f_mot_l1_accjerk	= 0.0;//加速度に到達するまでの距離											// 移動距離[m]
 800cd00:	4ba8      	ldr	r3, [pc, #672]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cd02:	f04f 0200 	mov.w	r2, #0
 800cd06:	639a      	str	r2, [r3, #56]	@ 0x38
		st_Info.f_mot_l1_decjerk	= 0.0;
 800cd08:	4ba6      	ldr	r3, [pc, #664]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cd0a:	f04f 0200 	mov.w	r2, #0
 800cd0e:	641a      	str	r2, [r3, #64]	@ 0x40
		st_Info.f_mot_l1_accconst	= 0.0;
 800cd10:	4ba4      	ldr	r3, [pc, #656]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cd12:	f04f 0200 	mov.w	r2, #0
 800cd16:	63da      	str	r2, [r3, #60]	@ 0x3c
		st_Info.f_mot_accjerk_v		= 0.0;
 800cd18:	4ba2      	ldr	r3, [pc, #648]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cd1a:	f04f 0200 	mov.w	r2, #0
 800cd1e:	629a      	str	r2, [r3, #40]	@ 0x28
	}
	st_Info.f_mot_l1	= st_Info.f_mot_l1_accjerk + st_Info.f_mot_l1_decjerk + st_Info.f_mot_l1_accconst;
 800cd20:	4ba0      	ldr	r3, [pc, #640]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cd22:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800cd26:	4b9f      	ldr	r3, [pc, #636]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cd28:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800cd2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cd30:	4b9c      	ldr	r3, [pc, #624]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cd32:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800cd36:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd3a:	4b9a      	ldr	r3, [pc, #616]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cd3c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
//	st_Info.f_l1		= ( f_MotTrgtSpeed * f_MotTrgtSpeed - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_acc1 * 2.0 );			// 第1移動距離[m]

	if((f_MotTrgtSpeed - f_fin) != 0){
 800cd40:	4b99      	ldr	r3, [pc, #612]	@ (800cfa8 <MOT_setData_ACC_CONST_DEC+0x678>)
 800cd42:	ed93 7a00 	vldr	s14, [r3]
 800cd46:	edd7 7a06 	vldr	s15, [r7, #24]
 800cd4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd56:	f000 812b 	beq.w	800cfb0 <MOT_setData_ACC_CONST_DEC+0x680>
		st_Info.f_mot_l3_decjerk	= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + st_Info.f_mot_trgt*f_accTime;
 800cd5a:	4b92      	ldr	r3, [pc, #584]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7f3 fc1a 	bl	8000598 <__aeabi_f2d>
 800cd64:	a38c      	add	r3, pc, #560	@ (adr r3, 800cf98 <MOT_setData_ACC_CONST_DEC+0x668>)
 800cd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6a:	f7f3 fc6d 	bl	8000648 <__aeabi_dmul>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	460b      	mov	r3, r1
 800cd72:	60ba      	str	r2, [r7, #8]
 800cd74:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800cd78:	60fb      	str	r3, [r7, #12]
 800cd7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd7c:	f7f3 fc0c 	bl	8000598 <__aeabi_f2d>
 800cd80:	4602      	mov	r2, r0
 800cd82:	460b      	mov	r3, r1
 800cd84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cd88:	f7f3 fc5e 	bl	8000648 <__aeabi_dmul>
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	460b      	mov	r3, r1
 800cd90:	4614      	mov	r4, r2
 800cd92:	461d      	mov	r5, r3
 800cd94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd96:	f7f3 fbff 	bl	8000598 <__aeabi_f2d>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	4620      	mov	r0, r4
 800cda0:	4629      	mov	r1, r5
 800cda2:	f7f3 fc51 	bl	8000648 <__aeabi_dmul>
 800cda6:	4602      	mov	r2, r0
 800cda8:	460b      	mov	r3, r1
 800cdaa:	4614      	mov	r4, r2
 800cdac:	461d      	mov	r5, r3
 800cdae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdb0:	f7f3 fbf2 	bl	8000598 <__aeabi_f2d>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	4620      	mov	r0, r4
 800cdba:	4629      	mov	r1, r5
 800cdbc:	f7f3 fc44 	bl	8000648 <__aeabi_dmul>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	4614      	mov	r4, r2
 800cdc6:	461d      	mov	r5, r3
 800cdc8:	4b76      	ldr	r3, [pc, #472]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cdca:	ed93 7a08 	vldr	s14, [r3, #32]
 800cdce:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800cdd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdd6:	ee17 0a90 	vmov	r0, s15
 800cdda:	f7f3 fbdd 	bl	8000598 <__aeabi_f2d>
 800cdde:	4602      	mov	r2, r0
 800cde0:	460b      	mov	r3, r1
 800cde2:	4620      	mov	r0, r4
 800cde4:	4629      	mov	r1, r5
 800cde6:	f7f3 fa79 	bl	80002dc <__adddf3>
 800cdea:	4602      	mov	r2, r0
 800cdec:	460b      	mov	r3, r1
 800cdee:	4610      	mov	r0, r2
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	f7f3 ff21 	bl	8000c38 <__aeabi_d2f>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	4a6a      	ldr	r2, [pc, #424]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cdfa:	6493      	str	r3, [r2, #72]	@ 0x48
		st_Info.f_mot_l3_accjerk	= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + (f_fin+st_Info.f_mot_decjerk_v)*f_accTime 
 800cdfc:	4b69      	ldr	r3, [pc, #420]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7f3 fbc9 	bl	8000598 <__aeabi_f2d>
 800ce06:	a364      	add	r3, pc, #400	@ (adr r3, 800cf98 <MOT_setData_ACC_CONST_DEC+0x668>)
 800ce08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0c:	f7f3 fc1c 	bl	8000648 <__aeabi_dmul>
 800ce10:	4602      	mov	r2, r0
 800ce12:	460b      	mov	r3, r1
 800ce14:	4614      	mov	r4, r2
 800ce16:	461d      	mov	r5, r3
 800ce18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce1a:	f7f3 fbbd 	bl	8000598 <__aeabi_f2d>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	460b      	mov	r3, r1
 800ce22:	4620      	mov	r0, r4
 800ce24:	4629      	mov	r1, r5
 800ce26:	f7f3 fc0f 	bl	8000648 <__aeabi_dmul>
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	4614      	mov	r4, r2
 800ce30:	461d      	mov	r5, r3
 800ce32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce34:	f7f3 fbb0 	bl	8000598 <__aeabi_f2d>
 800ce38:	4602      	mov	r2, r0
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	4629      	mov	r1, r5
 800ce40:	f7f3 fc02 	bl	8000648 <__aeabi_dmul>
 800ce44:	4602      	mov	r2, r0
 800ce46:	460b      	mov	r3, r1
 800ce48:	4614      	mov	r4, r2
 800ce4a:	461d      	mov	r5, r3
 800ce4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce4e:	f7f3 fba3 	bl	8000598 <__aeabi_f2d>
 800ce52:	4602      	mov	r2, r0
 800ce54:	460b      	mov	r3, r1
 800ce56:	4620      	mov	r0, r4
 800ce58:	4629      	mov	r1, r5
 800ce5a:	f7f3 fbf5 	bl	8000648 <__aeabi_dmul>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	460b      	mov	r3, r1
 800ce62:	4614      	mov	r4, r2
 800ce64:	461d      	mov	r5, r3
 800ce66:	4b4f      	ldr	r3, [pc, #316]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800ce68:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800ce6c:	edd7 7a06 	vldr	s15, [r7, #24]
 800ce70:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ce74:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800ce78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce7c:	ee17 0a90 	vmov	r0, s15
 800ce80:	f7f3 fb8a 	bl	8000598 <__aeabi_f2d>
 800ce84:	4602      	mov	r2, r0
 800ce86:	460b      	mov	r3, r1
 800ce88:	4620      	mov	r0, r4
 800ce8a:	4629      	mov	r1, r5
 800ce8c:	f7f3 fa26 	bl	80002dc <__adddf3>
 800ce90:	4602      	mov	r2, r0
 800ce92:	460b      	mov	r3, r1
 800ce94:	4614      	mov	r4, r2
 800ce96:	461d      	mov	r5, r3
										+ 1.0/2.0*st_Info.f_mot_trgtAcc3*(-1.0)*f_accTime*f_accTime;//減速は加速度同様にする前提処理
 800ce98:	4b42      	ldr	r3, [pc, #264]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7f3 fb7b 	bl	8000598 <__aeabi_f2d>
 800cea2:	f04f 0200 	mov.w	r2, #0
 800cea6:	4b41      	ldr	r3, [pc, #260]	@ (800cfac <MOT_setData_ACC_CONST_DEC+0x67c>)
 800cea8:	f7f3 fbce 	bl	8000648 <__aeabi_dmul>
 800ceac:	4602      	mov	r2, r0
 800ceae:	460b      	mov	r3, r1
 800ceb0:	603a      	str	r2, [r7, #0]
 800ceb2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800ceb6:	607b      	str	r3, [r7, #4]
 800ceb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ceba:	f7f3 fb6d 	bl	8000598 <__aeabi_f2d>
 800cebe:	4602      	mov	r2, r0
 800cec0:	460b      	mov	r3, r1
 800cec2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cec6:	f7f3 fbbf 	bl	8000648 <__aeabi_dmul>
 800ceca:	4602      	mov	r2, r0
 800cecc:	460b      	mov	r3, r1
 800cece:	4690      	mov	r8, r2
 800ced0:	4699      	mov	r9, r3
 800ced2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ced4:	f7f3 fb60 	bl	8000598 <__aeabi_f2d>
 800ced8:	4602      	mov	r2, r0
 800ceda:	460b      	mov	r3, r1
 800cedc:	4640      	mov	r0, r8
 800cede:	4649      	mov	r1, r9
 800cee0:	f7f3 fbb2 	bl	8000648 <__aeabi_dmul>
 800cee4:	4602      	mov	r2, r0
 800cee6:	460b      	mov	r3, r1
 800cee8:	4620      	mov	r0, r4
 800ceea:	4629      	mov	r1, r5
 800ceec:	f7f3 f9f6 	bl	80002dc <__adddf3>
 800cef0:	4602      	mov	r2, r0
 800cef2:	460b      	mov	r3, r1
 800cef4:	4610      	mov	r0, r2
 800cef6:	4619      	mov	r1, r3
 800cef8:	f7f3 fe9e 	bl	8000c38 <__aeabi_d2f>
 800cefc:	4603      	mov	r3, r0
		st_Info.f_mot_l3_accjerk	= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + (f_fin+st_Info.f_mot_decjerk_v)*f_accTime 
 800cefe:	4a29      	ldr	r2, [pc, #164]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cf00:	6513      	str	r3, [r2, #80]	@ 0x50
		st_Info.f_mot_l3_decconst	= ( (f_fin+st_Info.f_mot_decjerk_v) * (f_fin+st_Info.f_mot_decjerk_v)
 800cf02:	4b28      	ldr	r3, [pc, #160]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cf04:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800cf08:	edd7 7a06 	vldr	s15, [r7, #24]
 800cf0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cf10:	4b24      	ldr	r3, [pc, #144]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cf12:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800cf16:	edd7 7a06 	vldr	s15, [r7, #24]
 800cf1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf1e:	ee27 7a27 	vmul.f32	s14, s14, s15
										- (f_MotTrgtSpeed-st_Info.f_mot_decjerk_v) * (f_MotTrgtSpeed-st_Info.f_mot_decjerk_v) ) 
 800cf22:	4b21      	ldr	r3, [pc, #132]	@ (800cfa8 <MOT_setData_ACC_CONST_DEC+0x678>)
 800cf24:	edd3 6a00 	vldr	s13, [r3]
 800cf28:	4b1e      	ldr	r3, [pc, #120]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cf2a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cf2e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800cf32:	4b1d      	ldr	r3, [pc, #116]	@ (800cfa8 <MOT_setData_ACC_CONST_DEC+0x678>)
 800cf34:	ed93 6a00 	vldr	s12, [r3]
 800cf38:	4b1a      	ldr	r3, [pc, #104]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cf3a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800cf3e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800cf42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf4a:	ee17 0a90 	vmov	r0, s15
 800cf4e:	f7f3 fb23 	bl	8000598 <__aeabi_f2d>
 800cf52:	4604      	mov	r4, r0
 800cf54:	460d      	mov	r5, r1
										/ ( st_Info.f_mot_trgtAcc3 * (-1.0 ) * 2.0 );
 800cf56:	4b13      	ldr	r3, [pc, #76]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7f3 fb1c 	bl	8000598 <__aeabi_f2d>
 800cf60:	4602      	mov	r2, r0
 800cf62:	460b      	mov	r3, r1
 800cf64:	4692      	mov	sl, r2
 800cf66:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 800cf6a:	4652      	mov	r2, sl
 800cf6c:	465b      	mov	r3, fp
 800cf6e:	4650      	mov	r0, sl
 800cf70:	4659      	mov	r1, fp
 800cf72:	f7f3 f9b3 	bl	80002dc <__adddf3>
 800cf76:	4602      	mov	r2, r0
 800cf78:	460b      	mov	r3, r1
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	4629      	mov	r1, r5
 800cf7e:	f7f3 fc8d 	bl	800089c <__aeabi_ddiv>
 800cf82:	4602      	mov	r2, r0
 800cf84:	460b      	mov	r3, r1
 800cf86:	4610      	mov	r0, r2
 800cf88:	4619      	mov	r1, r3
 800cf8a:	f7f3 fe55 	bl	8000c38 <__aeabi_d2f>
 800cf8e:	4603      	mov	r3, r0
		st_Info.f_mot_l3_decconst	= ( (f_fin+st_Info.f_mot_decjerk_v) * (f_fin+st_Info.f_mot_decjerk_v)
 800cf90:	4a04      	ldr	r2, [pc, #16]	@ (800cfa4 <MOT_setData_ACC_CONST_DEC+0x674>)
 800cf92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800cf94:	e01c      	b.n	800cfd0 <MOT_setData_ACC_CONST_DEC+0x6a0>
 800cf96:	bf00      	nop
 800cf98:	55555555 	.word	0x55555555
 800cf9c:	3fc55555 	.word	0x3fc55555
 800cfa0:	20017bcc 	.word	0x20017bcc
 800cfa4:	20017b2c 	.word	0x20017b2c
 800cfa8:	20017bd0 	.word	0x20017bd0
 800cfac:	3fe00000 	.word	0x3fe00000
	}else{
		st_Info.f_mot_l3_decjerk	= 0.0;
 800cfb0:	4b21      	ldr	r3, [pc, #132]	@ (800d038 <MOT_setData_ACC_CONST_DEC+0x708>)
 800cfb2:	f04f 0200 	mov.w	r2, #0
 800cfb6:	649a      	str	r2, [r3, #72]	@ 0x48
		st_Info.f_mot_l3_accjerk	= 0.0;
 800cfb8:	4b1f      	ldr	r3, [pc, #124]	@ (800d038 <MOT_setData_ACC_CONST_DEC+0x708>)
 800cfba:	f04f 0200 	mov.w	r2, #0
 800cfbe:	651a      	str	r2, [r3, #80]	@ 0x50
		st_Info.f_mot_l3_decconst	= 0.0;
 800cfc0:	4b1d      	ldr	r3, [pc, #116]	@ (800d038 <MOT_setData_ACC_CONST_DEC+0x708>)
 800cfc2:	f04f 0200 	mov.w	r2, #0
 800cfc6:	64da      	str	r2, [r3, #76]	@ 0x4c
		st_Info.f_mot_decjerk_v		= 0.0;
 800cfc8:	4b1b      	ldr	r3, [pc, #108]	@ (800d038 <MOT_setData_ACC_CONST_DEC+0x708>)
 800cfca:	f04f 0200 	mov.w	r2, #0
 800cfce:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	f_l3				=  st_Info.f_mot_l3_decjerk + st_Info.f_mot_l3_accjerk + st_Info.f_mot_l3_decconst;	
 800cfd0:	4b19      	ldr	r3, [pc, #100]	@ (800d038 <MOT_setData_ACC_CONST_DEC+0x708>)
 800cfd2:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800cfd6:	4b18      	ldr	r3, [pc, #96]	@ (800d038 <MOT_setData_ACC_CONST_DEC+0x708>)
 800cfd8:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800cfdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cfe0:	4b15      	ldr	r3, [pc, #84]	@ (800d038 <MOT_setData_ACC_CONST_DEC+0x708>)
 800cfe2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800cfe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
//	f_l3			= ( f_fin * f_fin - f_MotTrgtSpeed * f_MotTrgtSpeed ) / ( ( st_Info.f_acc3 * -1.0 ) * 2.0 );			// 第3移動距離[m]
	st_Info.f_mot_l1_2		= st_Info.f_mot_dist - f_l3;											// 第1+2移動距離[m]
 800cfee:	4b12      	ldr	r3, [pc, #72]	@ (800d038 <MOT_setData_ACC_CONST_DEC+0x708>)
 800cff0:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800cff4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800cff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cffc:	4b0e      	ldr	r3, [pc, #56]	@ (800d038 <MOT_setData_ACC_CONST_DEC+0x708>)
 800cffe:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

	printf("1 %f,%f\r\n",st_Info.f_mot_accjerk_v,st_Info.f_mot_decjerk_v);
 800d002:	4b0d      	ldr	r3, [pc, #52]	@ (800d038 <MOT_setData_ACC_CONST_DEC+0x708>)
 800d004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d006:	4618      	mov	r0, r3
 800d008:	f7f3 fac6 	bl	8000598 <__aeabi_f2d>
 800d00c:	4604      	mov	r4, r0
 800d00e:	460d      	mov	r5, r1
 800d010:	4b09      	ldr	r3, [pc, #36]	@ (800d038 <MOT_setData_ACC_CONST_DEC+0x708>)
 800d012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d014:	4618      	mov	r0, r3
 800d016:	f7f3 fabf 	bl	8000598 <__aeabi_f2d>
 800d01a:	4602      	mov	r2, r0
 800d01c:	460b      	mov	r3, r1
 800d01e:	e9cd 2300 	strd	r2, r3, [sp]
 800d022:	4622      	mov	r2, r4
 800d024:	462b      	mov	r3, r5
 800d026:	4805      	ldr	r0, [pc, #20]	@ (800d03c <MOT_setData_ACC_CONST_DEC+0x70c>)
 800d028:	f010 fe14 	bl	801dc54 <iprintf>
//	printf("1 %f,%f\r",st_Info.f_trgt,st_Info.f_l1);
}
 800d02c:	bf00      	nop
 800d02e:	3730      	adds	r7, #48	@ 0x30
 800d030:	46bd      	mov	sp, r7
 800d032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d036:	bf00      	nop
 800d038:	20017b2c 	.word	0x20017b2c
 800d03c:	08021c80 	.word	0x08021c80

0800d040 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM>:

void MOT_setData_MOT_ACC_CONST_DEC_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800d040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d044:	b094      	sub	sp, #80	@ 0x50
 800d046:	af00      	add	r7, sp, #0
 800d048:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
 800d04c:	edc7 0a0e 	vstr	s1, [r7, #56]	@ 0x38
 800d050:	4603      	mov	r3, r0
 800d052:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	float			f_1blockDist;				// 1区画の距離[m]

	float			f_accTime;

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800d056:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d104      	bne.n	800d068 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x28>
		f_1blockDist = BLOCK;
 800d05e:	4b01      	ldr	r3, [pc, #4]	@ (800d064 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x24>)
 800d060:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d062:	e003      	b.n	800d06c <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2c>
 800d064:	3db851ec 	.word	0x3db851ec
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800d068:	4bd3      	ldr	r3, [pc, #844]	@ (800d3b8 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x378>)
 800d06a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	}
	//jerk
	st_Info.f_mot_jerk		= MOT_getJerk();
 800d06c:	f7fe fff3 	bl	800c056 <MOT_getJerk>
 800d070:	eef0 7a40 	vmov.f32	s15, s0
 800d074:	4bd1      	ldr	r3, [pc, #836]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d076:	edc3 7a01 	vstr	s15, [r3, #4]

	/* 加速度 */
	st_Info.f_mot_trgtAcc1 		= MOT_getAcc1();								// 加速度1[mm/s^2]
 800d07a:	f7fe ffd4 	bl	800c026 <MOT_getAcc1>
 800d07e:	eef0 7a40 	vmov.f32	s15, s0
 800d082:	4bce      	ldr	r3, [pc, #824]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d084:	edc3 7a02 	vstr	s15, [r3, #8]
	st_Info.f_mot_trgtAcc3 		= MOT_getAcc3();								// 加速度3[mm/s^2]
 800d088:	f7fe ffd9 	bl	800c03e <MOT_getAcc3>
 800d08c:	eef0 7a40 	vmov.f32	s15, s0
 800d090:	4bca      	ldr	r3, [pc, #808]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d092:	edc3 7a03 	vstr	s15, [r3, #12]


	/* 距離 */
	st_Info.f_mot_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800d096:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800d09a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0a2:	4bc6      	ldr	r3, [pc, #792]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d0a4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	/* 速度 */
	st_Info.f_mot_now		= f_MotNowSpeed;												// 現在速度
 800d0a8:	4bc5      	ldr	r3, [pc, #788]	@ (800d3c0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x380>)
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	4bc3      	ldr	r3, [pc, #780]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d0ae:	61da      	str	r2, [r3, #28]
	st_Info.f_mot_last		= f_fin;													// 最終速度
 800d0b0:	4ac2      	ldr	r2, [pc, #776]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b4:	6253      	str	r3, [r2, #36]	@ 0x24
	st_Info.f_mot_l1		= ( st_Info.f_mot_trgt * st_Info.f_mot_trgt - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_mot_acc1 * 2.0 );			// 第1移動距離[m]
	f_l3					= ( f_fin * f_fin - st_Info.f_mot_trgt * st_Info.f_mot_trgt ) / ( ( st_Info.f_mot_acc3  * -1.0 ) * 2.0 );			// 第3移動距離[m]
	st_Info.f_mot_l1_2		= st_Info.f_mot_dist - f_l3;											// 第1+2移動距離[m]
*/

	f_accTime	= st_Info.f_mot_trgtAcc1/st_Info.f_mot_jerk;
 800d0b6:	4bc1      	ldr	r3, [pc, #772]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d0b8:	edd3 6a02 	vldr	s13, [r3, #8]
 800d0bc:	4bbf      	ldr	r3, [pc, #764]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d0be:	ed93 7a01 	vldr	s14, [r3, #4]
 800d0c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0c6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	st_Info.f_mot_accjerk_v		= 1.0/2.0*st_Info.f_mot_jerk*f_accTime*f_accTime;//加速度到達時の速度
 800d0ca:	4bbc      	ldr	r3, [pc, #752]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7f3 fa62 	bl	8000598 <__aeabi_f2d>
 800d0d4:	f04f 0200 	mov.w	r2, #0
 800d0d8:	4bba      	ldr	r3, [pc, #744]	@ (800d3c4 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x384>)
 800d0da:	f7f3 fab5 	bl	8000648 <__aeabi_dmul>
 800d0de:	4602      	mov	r2, r0
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	4614      	mov	r4, r2
 800d0e4:	461d      	mov	r5, r3
 800d0e6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d0e8:	f7f3 fa56 	bl	8000598 <__aeabi_f2d>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	4629      	mov	r1, r5
 800d0f4:	f7f3 faa8 	bl	8000648 <__aeabi_dmul>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	4614      	mov	r4, r2
 800d0fe:	461d      	mov	r5, r3
 800d100:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d102:	f7f3 fa49 	bl	8000598 <__aeabi_f2d>
 800d106:	4602      	mov	r2, r0
 800d108:	460b      	mov	r3, r1
 800d10a:	4620      	mov	r0, r4
 800d10c:	4629      	mov	r1, r5
 800d10e:	f7f3 fa9b 	bl	8000648 <__aeabi_dmul>
 800d112:	4602      	mov	r2, r0
 800d114:	460b      	mov	r3, r1
 800d116:	4610      	mov	r0, r2
 800d118:	4619      	mov	r1, r3
 800d11a:	f7f3 fd8d 	bl	8000c38 <__aeabi_d2f>
 800d11e:	4602      	mov	r2, r0
 800d120:	4ba6      	ldr	r3, [pc, #664]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d122:	629a      	str	r2, [r3, #40]	@ 0x28
	st_Info.f_mot_decjerk_v		= st_Info.f_mot_accjerk_v;
 800d124:	4ba5      	ldr	r3, [pc, #660]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d126:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d128:	4ba4      	ldr	r3, [pc, #656]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d12a:	62da      	str	r2, [r3, #44]	@ 0x2c
//すべての計算を真面目にやると全然やってられんので最低移動距離を伸ばして余裕作って代用しておくジャーク分を移動距離からサボってる
	st_Info.f_mot_trgt		= sqrt( 1.0 / ( ( st_Info.f_mot_trgtAcc3 * -1.0 ) - st_Info.f_mot_trgtAcc1 ) *
 800d12c:	4ba3      	ldr	r3, [pc, #652]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	4618      	mov	r0, r3
 800d132:	f7f3 fa31 	bl	8000598 <__aeabi_f2d>
 800d136:	4602      	mov	r2, r0
 800d138:	460b      	mov	r3, r1
 800d13a:	4690      	mov	r8, r2
 800d13c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800d140:	4b9e      	ldr	r3, [pc, #632]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	4618      	mov	r0, r3
 800d146:	f7f3 fa27 	bl	8000598 <__aeabi_f2d>
 800d14a:	4602      	mov	r2, r0
 800d14c:	460b      	mov	r3, r1
 800d14e:	4640      	mov	r0, r8
 800d150:	4649      	mov	r1, r9
 800d152:	f7f3 f8c1 	bl	80002d8 <__aeabi_dsub>
 800d156:	4602      	mov	r2, r0
 800d158:	460b      	mov	r3, r1
 800d15a:	f04f 0000 	mov.w	r0, #0
 800d15e:	499a      	ldr	r1, [pc, #616]	@ (800d3c8 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x388>)
 800d160:	f7f3 fb9c 	bl	800089c <__aeabi_ddiv>
 800d164:	4602      	mov	r2, r0
 800d166:	460b      	mov	r3, r1
 800d168:	e9c7 2300 	strd	r2, r3, [r7]
								( 2.0 * st_Info.f_mot_trgtAcc1 * ( st_Info.f_mot_trgtAcc3 * -1.0 ) * 
 800d16c:	4b93      	ldr	r3, [pc, #588]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d16e:	689b      	ldr	r3, [r3, #8]
 800d170:	4618      	mov	r0, r3
 800d172:	f7f3 fa11 	bl	8000598 <__aeabi_f2d>
 800d176:	4602      	mov	r2, r0
 800d178:	460b      	mov	r3, r1
 800d17a:	f7f3 f8af 	bl	80002dc <__adddf3>
 800d17e:	4602      	mov	r2, r0
 800d180:	460b      	mov	r3, r1
 800d182:	4614      	mov	r4, r2
 800d184:	461d      	mov	r5, r3
 800d186:	4b8d      	ldr	r3, [pc, #564]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7f3 fa04 	bl	8000598 <__aeabi_f2d>
 800d190:	4602      	mov	r2, r0
 800d192:	460b      	mov	r3, r1
 800d194:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d196:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800d19a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d19c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	4629      	mov	r1, r5
 800d1a4:	f7f3 fa50 	bl	8000648 <__aeabi_dmul>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	4614      	mov	r4, r2
 800d1ae:	461d      	mov	r5, r3
								( st_Info.f_mot_dist - MOT_MOVE_ST_MIN*3.0) +
 800d1b0:	4b82      	ldr	r3, [pc, #520]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d1b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7f3 f9ef 	bl	8000598 <__aeabi_f2d>
 800d1ba:	a379      	add	r3, pc, #484	@ (adr r3, 800d3a0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x360>)
 800d1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c0:	f7f3 f88a 	bl	80002d8 <__aeabi_dsub>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	460b      	mov	r3, r1
								( 2.0 * st_Info.f_mot_trgtAcc1 * ( st_Info.f_mot_trgtAcc3 * -1.0 ) * 
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	4629      	mov	r1, r5
 800d1cc:	f7f3 fa3c 	bl	8000648 <__aeabi_dmul>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	4690      	mov	r8, r2
 800d1d6:	4699      	mov	r9, r3
								( st_Info.f_mot_trgtAcc3 * -1.0 ) * (f_MotNowSpeed+st_Info.f_mot_accjerk_v) * (f_MotNowSpeed+st_Info.f_mot_accjerk_v)
 800d1d8:	4b78      	ldr	r3, [pc, #480]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7f3 f9db 	bl	8000598 <__aeabi_f2d>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	623a      	str	r2, [r7, #32]
 800d1e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800d1ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1ee:	4b73      	ldr	r3, [pc, #460]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d1f0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800d1f4:	4b72      	ldr	r3, [pc, #456]	@ (800d3c0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x380>)
 800d1f6:	edd3 7a00 	vldr	s15, [r3]
 800d1fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d1fe:	ee17 0a90 	vmov	r0, s15
 800d202:	f7f3 f9c9 	bl	8000598 <__aeabi_f2d>
 800d206:	4602      	mov	r2, r0
 800d208:	460b      	mov	r3, r1
 800d20a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d20e:	f7f3 fa1b 	bl	8000648 <__aeabi_dmul>
 800d212:	4602      	mov	r2, r0
 800d214:	460b      	mov	r3, r1
 800d216:	4614      	mov	r4, r2
 800d218:	461d      	mov	r5, r3
 800d21a:	4b68      	ldr	r3, [pc, #416]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d21c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800d220:	4b67      	ldr	r3, [pc, #412]	@ (800d3c0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x380>)
 800d222:	edd3 7a00 	vldr	s15, [r3]
 800d226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d22a:	ee17 0a90 	vmov	r0, s15
 800d22e:	f7f3 f9b3 	bl	8000598 <__aeabi_f2d>
 800d232:	4602      	mov	r2, r0
 800d234:	460b      	mov	r3, r1
 800d236:	4620      	mov	r0, r4
 800d238:	4629      	mov	r1, r5
 800d23a:	f7f3 fa05 	bl	8000648 <__aeabi_dmul>
 800d23e:	4602      	mov	r2, r0
 800d240:	460b      	mov	r3, r1
								( st_Info.f_mot_dist - MOT_MOVE_ST_MIN*3.0) +
 800d242:	4640      	mov	r0, r8
 800d244:	4649      	mov	r1, r9
 800d246:	f7f3 f849 	bl	80002dc <__adddf3>
 800d24a:	4602      	mov	r2, r0
 800d24c:	460b      	mov	r3, r1
 800d24e:	4614      	mov	r4, r2
 800d250:	461d      	mov	r5, r3
								 - st_Info.f_mot_trgtAcc1 * (f_fin-st_Info.f_mot_decjerk_v) * (f_fin-st_Info.f_mot_decjerk_v) ) )+st_Info.f_mot_decjerk_v;
 800d252:	4b5a      	ldr	r3, [pc, #360]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d254:	ed93 7a02 	vldr	s14, [r3, #8]
 800d258:	4b58      	ldr	r3, [pc, #352]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d25a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d25e:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800d262:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d266:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d26a:	4b54      	ldr	r3, [pc, #336]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d26c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d270:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800d274:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d27c:	ee17 0a90 	vmov	r0, s15
 800d280:	f7f3 f98a 	bl	8000598 <__aeabi_f2d>
 800d284:	4602      	mov	r2, r0
 800d286:	460b      	mov	r3, r1
 800d288:	4620      	mov	r0, r4
 800d28a:	4629      	mov	r1, r5
 800d28c:	f7f3 f824 	bl	80002d8 <__aeabi_dsub>
 800d290:	4602      	mov	r2, r0
 800d292:	460b      	mov	r3, r1
	st_Info.f_mot_trgt		= sqrt( 1.0 / ( ( st_Info.f_mot_trgtAcc3 * -1.0 ) - st_Info.f_mot_trgtAcc1 ) *
 800d294:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d298:	f7f3 f9d6 	bl	8000648 <__aeabi_dmul>
 800d29c:	4602      	mov	r2, r0
 800d29e:	460b      	mov	r3, r1
 800d2a0:	ec43 2b17 	vmov	d7, r2, r3
 800d2a4:	eeb0 0a47 	vmov.f32	s0, s14
 800d2a8:	eef0 0a67 	vmov.f32	s1, s15
 800d2ac:	f00e fc16 	bl	801badc <sqrt>
 800d2b0:	ec55 4b10 	vmov	r4, r5, d0
								 - st_Info.f_mot_trgtAcc1 * (f_fin-st_Info.f_mot_decjerk_v) * (f_fin-st_Info.f_mot_decjerk_v) ) )+st_Info.f_mot_decjerk_v;
 800d2b4:	4b41      	ldr	r3, [pc, #260]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7f3 f96d 	bl	8000598 <__aeabi_f2d>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	f7f3 f809 	bl	80002dc <__adddf3>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	4610      	mov	r0, r2
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	f7f3 fcb1 	bl	8000c38 <__aeabi_d2f>
 800d2d6:	4603      	mov	r3, r0
	st_Info.f_mot_trgt		= sqrt( 1.0 / ( ( st_Info.f_mot_trgtAcc3 * -1.0 ) - st_Info.f_mot_trgtAcc1 ) *
 800d2d8:	4a38      	ldr	r2, [pc, #224]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d2da:	6213      	str	r3, [r2, #32]

	if(fabsf(f_MotTrgtSpeed - f_MotNowSpeed) > 0.05){
 800d2dc:	4b3b      	ldr	r3, [pc, #236]	@ (800d3cc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x38c>)
 800d2de:	ed93 7a00 	vldr	s14, [r3]
 800d2e2:	4b37      	ldr	r3, [pc, #220]	@ (800d3c0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x380>)
 800d2e4:	edd3 7a00 	vldr	s15, [r3]
 800d2e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2ec:	eef0 7ae7 	vabs.f32	s15, s15
 800d2f0:	ee17 0a90 	vmov	r0, s15
 800d2f4:	f7f3 f950 	bl	8000598 <__aeabi_f2d>
 800d2f8:	a32b      	add	r3, pc, #172	@ (adr r3, 800d3a8 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x368>)
 800d2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fe:	f7f3 fc33 	bl	8000b68 <__aeabi_dcmpgt>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	f000 813d 	beq.w	800d584 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x544>
		st_Info.f_mot_l1_accjerk	= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;//加速度に到達するまでの距離											// 移動距離[m]
 800d30a:	4b2c      	ldr	r3, [pc, #176]	@ (800d3bc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	4618      	mov	r0, r3
 800d310:	f7f3 f942 	bl	8000598 <__aeabi_f2d>
 800d314:	a326      	add	r3, pc, #152	@ (adr r3, 800d3b0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x370>)
 800d316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31a:	f7f3 f995 	bl	8000648 <__aeabi_dmul>
 800d31e:	4602      	mov	r2, r0
 800d320:	460b      	mov	r3, r1
 800d322:	4614      	mov	r4, r2
 800d324:	461d      	mov	r5, r3
 800d326:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d328:	f7f3 f936 	bl	8000598 <__aeabi_f2d>
 800d32c:	4602      	mov	r2, r0
 800d32e:	460b      	mov	r3, r1
 800d330:	4620      	mov	r0, r4
 800d332:	4629      	mov	r1, r5
 800d334:	f7f3 f988 	bl	8000648 <__aeabi_dmul>
 800d338:	4602      	mov	r2, r0
 800d33a:	460b      	mov	r3, r1
 800d33c:	4614      	mov	r4, r2
 800d33e:	461d      	mov	r5, r3
 800d340:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d342:	f7f3 f929 	bl	8000598 <__aeabi_f2d>
 800d346:	4602      	mov	r2, r0
 800d348:	460b      	mov	r3, r1
 800d34a:	4620      	mov	r0, r4
 800d34c:	4629      	mov	r1, r5
 800d34e:	f7f3 f97b 	bl	8000648 <__aeabi_dmul>
 800d352:	4602      	mov	r2, r0
 800d354:	460b      	mov	r3, r1
 800d356:	4614      	mov	r4, r2
 800d358:	461d      	mov	r5, r3
 800d35a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d35c:	f7f3 f91c 	bl	8000598 <__aeabi_f2d>
 800d360:	4602      	mov	r2, r0
 800d362:	460b      	mov	r3, r1
 800d364:	4620      	mov	r0, r4
 800d366:	4629      	mov	r1, r5
 800d368:	f7f3 f96e 	bl	8000648 <__aeabi_dmul>
 800d36c:	4602      	mov	r2, r0
 800d36e:	460b      	mov	r3, r1
 800d370:	4614      	mov	r4, r2
 800d372:	461d      	mov	r5, r3
 800d374:	4b12      	ldr	r3, [pc, #72]	@ (800d3c0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x380>)
 800d376:	ed93 7a00 	vldr	s14, [r3]
 800d37a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d37e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d382:	ee17 0a90 	vmov	r0, s15
 800d386:	f7f3 f907 	bl	8000598 <__aeabi_f2d>
 800d38a:	4602      	mov	r2, r0
 800d38c:	460b      	mov	r3, r1
 800d38e:	4620      	mov	r0, r4
 800d390:	4629      	mov	r1, r5
 800d392:	f7f2 ffa3 	bl	80002dc <__adddf3>
 800d396:	4602      	mov	r2, r0
 800d398:	460b      	mov	r3, r1
 800d39a:	e019      	b.n	800d3d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x390>
 800d39c:	f3af 8000 	nop.w
 800d3a0:	eb851eb8 	.word	0xeb851eb8
 800d3a4:	3f9eb851 	.word	0x3f9eb851
 800d3a8:	9999999a 	.word	0x9999999a
 800d3ac:	3fa99999 	.word	0x3fa99999
 800d3b0:	55555555 	.word	0x55555555
 800d3b4:	3fc55555 	.word	0x3fc55555
 800d3b8:	3e0255b0 	.word	0x3e0255b0
 800d3bc:	20017b2c 	.word	0x20017b2c
 800d3c0:	20017bcc 	.word	0x20017bcc
 800d3c4:	3fe00000 	.word	0x3fe00000
 800d3c8:	3ff00000 	.word	0x3ff00000
 800d3cc:	20017bd0 	.word	0x20017bd0
 800d3d0:	4610      	mov	r0, r2
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	f7f3 fc30 	bl	8000c38 <__aeabi_d2f>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	4a67      	ldr	r2, [pc, #412]	@ (800d578 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d3dc:	6393      	str	r3, [r2, #56]	@ 0x38
		st_Info.f_mot_l1_decjerk	= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + (st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)*f_accTime + 1.0/2.0*st_Info.f_mot_trgtAcc1*f_accTime*f_accTime;
 800d3de:	4b66      	ldr	r3, [pc, #408]	@ (800d578 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7f3 f8d8 	bl	8000598 <__aeabi_f2d>
 800d3e8:	a361      	add	r3, pc, #388	@ (adr r3, 800d570 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x530>)
 800d3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ee:	f7f3 f92b 	bl	8000648 <__aeabi_dmul>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	61ba      	str	r2, [r7, #24]
 800d3f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800d3fc:	61fb      	str	r3, [r7, #28]
 800d3fe:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d400:	f7f3 f8ca 	bl	8000598 <__aeabi_f2d>
 800d404:	4602      	mov	r2, r0
 800d406:	460b      	mov	r3, r1
 800d408:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d40c:	f7f3 f91c 	bl	8000648 <__aeabi_dmul>
 800d410:	4602      	mov	r2, r0
 800d412:	460b      	mov	r3, r1
 800d414:	4614      	mov	r4, r2
 800d416:	461d      	mov	r5, r3
 800d418:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d41a:	f7f3 f8bd 	bl	8000598 <__aeabi_f2d>
 800d41e:	4602      	mov	r2, r0
 800d420:	460b      	mov	r3, r1
 800d422:	4620      	mov	r0, r4
 800d424:	4629      	mov	r1, r5
 800d426:	f7f3 f90f 	bl	8000648 <__aeabi_dmul>
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	4614      	mov	r4, r2
 800d430:	461d      	mov	r5, r3
 800d432:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d434:	f7f3 f8b0 	bl	8000598 <__aeabi_f2d>
 800d438:	4602      	mov	r2, r0
 800d43a:	460b      	mov	r3, r1
 800d43c:	4620      	mov	r0, r4
 800d43e:	4629      	mov	r1, r5
 800d440:	f7f3 f902 	bl	8000648 <__aeabi_dmul>
 800d444:	4602      	mov	r2, r0
 800d446:	460b      	mov	r3, r1
 800d448:	4614      	mov	r4, r2
 800d44a:	461d      	mov	r5, r3
 800d44c:	4b4a      	ldr	r3, [pc, #296]	@ (800d578 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d44e:	ed93 7a08 	vldr	s14, [r3, #32]
 800d452:	4b49      	ldr	r3, [pc, #292]	@ (800d578 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d454:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800d458:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d45c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d460:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d464:	ee17 0a90 	vmov	r0, s15
 800d468:	f7f3 f896 	bl	8000598 <__aeabi_f2d>
 800d46c:	4602      	mov	r2, r0
 800d46e:	460b      	mov	r3, r1
 800d470:	4620      	mov	r0, r4
 800d472:	4629      	mov	r1, r5
 800d474:	f7f2 ff32 	bl	80002dc <__adddf3>
 800d478:	4602      	mov	r2, r0
 800d47a:	460b      	mov	r3, r1
 800d47c:	4690      	mov	r8, r2
 800d47e:	4699      	mov	r9, r3
 800d480:	4b3d      	ldr	r3, [pc, #244]	@ (800d578 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d482:	689b      	ldr	r3, [r3, #8]
 800d484:	4618      	mov	r0, r3
 800d486:	f7f3 f887 	bl	8000598 <__aeabi_f2d>
 800d48a:	f04f 0200 	mov.w	r2, #0
 800d48e:	4b3b      	ldr	r3, [pc, #236]	@ (800d57c <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x53c>)
 800d490:	f7f3 f8da 	bl	8000648 <__aeabi_dmul>
 800d494:	4602      	mov	r2, r0
 800d496:	460b      	mov	r3, r1
 800d498:	4614      	mov	r4, r2
 800d49a:	461d      	mov	r5, r3
 800d49c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d49e:	f7f3 f87b 	bl	8000598 <__aeabi_f2d>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	4629      	mov	r1, r5
 800d4aa:	f7f3 f8cd 	bl	8000648 <__aeabi_dmul>
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	4614      	mov	r4, r2
 800d4b4:	461d      	mov	r5, r3
 800d4b6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d4b8:	f7f3 f86e 	bl	8000598 <__aeabi_f2d>
 800d4bc:	4602      	mov	r2, r0
 800d4be:	460b      	mov	r3, r1
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	4629      	mov	r1, r5
 800d4c4:	f7f3 f8c0 	bl	8000648 <__aeabi_dmul>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	4640      	mov	r0, r8
 800d4ce:	4649      	mov	r1, r9
 800d4d0:	f7f2 ff04 	bl	80002dc <__adddf3>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	4610      	mov	r0, r2
 800d4da:	4619      	mov	r1, r3
 800d4dc:	f7f3 fbac 	bl	8000c38 <__aeabi_d2f>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	4a25      	ldr	r2, [pc, #148]	@ (800d578 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d4e4:	6413      	str	r3, [r2, #64]	@ 0x40
		st_Info.f_mot_l1_accconst	= ((st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)*(st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)
 800d4e6:	4b24      	ldr	r3, [pc, #144]	@ (800d578 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d4e8:	ed93 7a08 	vldr	s14, [r3, #32]
 800d4ec:	4b22      	ldr	r3, [pc, #136]	@ (800d578 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d4ee:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800d4f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d4f6:	4b20      	ldr	r3, [pc, #128]	@ (800d578 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d4f8:	edd3 6a08 	vldr	s13, [r3, #32]
 800d4fc:	4b1e      	ldr	r3, [pc, #120]	@ (800d578 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d4fe:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800d502:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d506:	ee27 7a27 	vmul.f32	s14, s14, s15
										-(f_MotNowSpeed+st_Info.f_mot_accjerk_v)*(f_MotNowSpeed+st_Info.f_mot_accjerk_v))
 800d50a:	4b1b      	ldr	r3, [pc, #108]	@ (800d578 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d50c:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800d510:	4b1b      	ldr	r3, [pc, #108]	@ (800d580 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x540>)
 800d512:	edd3 7a00 	vldr	s15, [r3]
 800d516:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d51a:	4b17      	ldr	r3, [pc, #92]	@ (800d578 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d51c:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 800d520:	4b17      	ldr	r3, [pc, #92]	@ (800d580 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x540>)
 800d522:	edd3 7a00 	vldr	s15, [r3]
 800d526:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d52a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d52e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d532:	ee17 0a90 	vmov	r0, s15
 800d536:	f7f3 f82f 	bl	8000598 <__aeabi_f2d>
 800d53a:	4604      	mov	r4, r0
 800d53c:	460d      	mov	r5, r1
										/( st_Info.f_mot_trgtAcc1 * 2.0 );
 800d53e:	4b0e      	ldr	r3, [pc, #56]	@ (800d578 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	4618      	mov	r0, r3
 800d544:	f7f3 f828 	bl	8000598 <__aeabi_f2d>
 800d548:	4602      	mov	r2, r0
 800d54a:	460b      	mov	r3, r1
 800d54c:	f7f2 fec6 	bl	80002dc <__adddf3>
 800d550:	4602      	mov	r2, r0
 800d552:	460b      	mov	r3, r1
 800d554:	4620      	mov	r0, r4
 800d556:	4629      	mov	r1, r5
 800d558:	f7f3 f9a0 	bl	800089c <__aeabi_ddiv>
 800d55c:	4602      	mov	r2, r0
 800d55e:	460b      	mov	r3, r1
 800d560:	4610      	mov	r0, r2
 800d562:	4619      	mov	r1, r3
 800d564:	f7f3 fb68 	bl	8000c38 <__aeabi_d2f>
 800d568:	4603      	mov	r3, r0
		st_Info.f_mot_l1_accconst	= ((st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)*(st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)
 800d56a:	4a03      	ldr	r2, [pc, #12]	@ (800d578 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d56c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800d56e:	e019      	b.n	800d5a4 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x564>
 800d570:	55555555 	.word	0x55555555
 800d574:	3fc55555 	.word	0x3fc55555
 800d578:	20017b2c 	.word	0x20017b2c
 800d57c:	3fe00000 	.word	0x3fe00000
 800d580:	20017bcc 	.word	0x20017bcc
	}else{
		st_Info.f_mot_l1_accjerk	= 0.0;//加速度に到達するまでの距離											// 移動距離[m]
 800d584:	4bbe      	ldr	r3, [pc, #760]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d586:	f04f 0200 	mov.w	r2, #0
 800d58a:	639a      	str	r2, [r3, #56]	@ 0x38
		st_Info.f_mot_l1_decjerk	= 0.0;
 800d58c:	4bbc      	ldr	r3, [pc, #752]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d58e:	f04f 0200 	mov.w	r2, #0
 800d592:	641a      	str	r2, [r3, #64]	@ 0x40
		st_Info.f_mot_l1_accconst	= 0.0;
 800d594:	4bba      	ldr	r3, [pc, #744]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d596:	f04f 0200 	mov.w	r2, #0
 800d59a:	63da      	str	r2, [r3, #60]	@ 0x3c
		st_Info.f_mot_accjerk_v		= 0.0;
 800d59c:	4bb8      	ldr	r3, [pc, #736]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d59e:	f04f 0200 	mov.w	r2, #0
 800d5a2:	629a      	str	r2, [r3, #40]	@ 0x28
	}
	st_Info.f_mot_l1	= st_Info.f_mot_l1_accjerk + st_Info.f_mot_l1_decjerk + st_Info.f_mot_l1_accconst;
 800d5a4:	4bb6      	ldr	r3, [pc, #728]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d5a6:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800d5aa:	4bb5      	ldr	r3, [pc, #724]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d5ac:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800d5b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d5b4:	4bb2      	ldr	r3, [pc, #712]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d5b6:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800d5ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5be:	4bb0      	ldr	r3, [pc, #704]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d5c0:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	if((st_Info.f_mot_trgt - f_fin) != 0){
 800d5c4:	4bae      	ldr	r3, [pc, #696]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d5c6:	ed93 7a08 	vldr	s14, [r3, #32]
 800d5ca:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d5ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5da:	f000 811e 	beq.w	800d81a <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x7da>
		st_Info.f_mot_l3_decjerk	= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + st_Info.f_mot_trgt*f_accTime;
 800d5de:	4ba8      	ldr	r3, [pc, #672]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7f2 ffd8 	bl	8000598 <__aeabi_f2d>
 800d5e8:	a3a3      	add	r3, pc, #652	@ (adr r3, 800d878 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x838>)
 800d5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ee:	f7f3 f82b 	bl	8000648 <__aeabi_dmul>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	613a      	str	r2, [r7, #16]
 800d5f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800d5fc:	617b      	str	r3, [r7, #20]
 800d5fe:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d600:	f7f2 ffca 	bl	8000598 <__aeabi_f2d>
 800d604:	4602      	mov	r2, r0
 800d606:	460b      	mov	r3, r1
 800d608:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d60c:	f7f3 f81c 	bl	8000648 <__aeabi_dmul>
 800d610:	4602      	mov	r2, r0
 800d612:	460b      	mov	r3, r1
 800d614:	4614      	mov	r4, r2
 800d616:	461d      	mov	r5, r3
 800d618:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d61a:	f7f2 ffbd 	bl	8000598 <__aeabi_f2d>
 800d61e:	4602      	mov	r2, r0
 800d620:	460b      	mov	r3, r1
 800d622:	4620      	mov	r0, r4
 800d624:	4629      	mov	r1, r5
 800d626:	f7f3 f80f 	bl	8000648 <__aeabi_dmul>
 800d62a:	4602      	mov	r2, r0
 800d62c:	460b      	mov	r3, r1
 800d62e:	4614      	mov	r4, r2
 800d630:	461d      	mov	r5, r3
 800d632:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d634:	f7f2 ffb0 	bl	8000598 <__aeabi_f2d>
 800d638:	4602      	mov	r2, r0
 800d63a:	460b      	mov	r3, r1
 800d63c:	4620      	mov	r0, r4
 800d63e:	4629      	mov	r1, r5
 800d640:	f7f3 f802 	bl	8000648 <__aeabi_dmul>
 800d644:	4602      	mov	r2, r0
 800d646:	460b      	mov	r3, r1
 800d648:	4614      	mov	r4, r2
 800d64a:	461d      	mov	r5, r3
 800d64c:	4b8c      	ldr	r3, [pc, #560]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d64e:	ed93 7a08 	vldr	s14, [r3, #32]
 800d652:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d65a:	ee17 0a90 	vmov	r0, s15
 800d65e:	f7f2 ff9b 	bl	8000598 <__aeabi_f2d>
 800d662:	4602      	mov	r2, r0
 800d664:	460b      	mov	r3, r1
 800d666:	4620      	mov	r0, r4
 800d668:	4629      	mov	r1, r5
 800d66a:	f7f2 fe37 	bl	80002dc <__adddf3>
 800d66e:	4602      	mov	r2, r0
 800d670:	460b      	mov	r3, r1
 800d672:	4610      	mov	r0, r2
 800d674:	4619      	mov	r1, r3
 800d676:	f7f3 fadf 	bl	8000c38 <__aeabi_d2f>
 800d67a:	4603      	mov	r3, r0
 800d67c:	4a80      	ldr	r2, [pc, #512]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d67e:	6493      	str	r3, [r2, #72]	@ 0x48
		st_Info.f_mot_l3_accjerk	= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + (f_fin+st_Info.f_mot_decjerk_v)*f_accTime + 1.0/2.0*st_Info.f_mot_trgtAcc3*(-1.0)*f_accTime*f_accTime;//減速は加速度同様にする前提処理
 800d680:	4b7f      	ldr	r3, [pc, #508]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	4618      	mov	r0, r3
 800d686:	f7f2 ff87 	bl	8000598 <__aeabi_f2d>
 800d68a:	a37b      	add	r3, pc, #492	@ (adr r3, 800d878 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x838>)
 800d68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d690:	f7f2 ffda 	bl	8000648 <__aeabi_dmul>
 800d694:	4602      	mov	r2, r0
 800d696:	460b      	mov	r3, r1
 800d698:	4614      	mov	r4, r2
 800d69a:	461d      	mov	r5, r3
 800d69c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d69e:	f7f2 ff7b 	bl	8000598 <__aeabi_f2d>
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	4629      	mov	r1, r5
 800d6aa:	f7f2 ffcd 	bl	8000648 <__aeabi_dmul>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	4614      	mov	r4, r2
 800d6b4:	461d      	mov	r5, r3
 800d6b6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d6b8:	f7f2 ff6e 	bl	8000598 <__aeabi_f2d>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	460b      	mov	r3, r1
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	f7f2 ffc0 	bl	8000648 <__aeabi_dmul>
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	4614      	mov	r4, r2
 800d6ce:	461d      	mov	r5, r3
 800d6d0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d6d2:	f7f2 ff61 	bl	8000598 <__aeabi_f2d>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	460b      	mov	r3, r1
 800d6da:	4620      	mov	r0, r4
 800d6dc:	4629      	mov	r1, r5
 800d6de:	f7f2 ffb3 	bl	8000648 <__aeabi_dmul>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	4614      	mov	r4, r2
 800d6e8:	461d      	mov	r5, r3
 800d6ea:	4b65      	ldr	r3, [pc, #404]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d6ec:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800d6f0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d6f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d6f8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d6fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d700:	ee17 0a90 	vmov	r0, s15
 800d704:	f7f2 ff48 	bl	8000598 <__aeabi_f2d>
 800d708:	4602      	mov	r2, r0
 800d70a:	460b      	mov	r3, r1
 800d70c:	4620      	mov	r0, r4
 800d70e:	4629      	mov	r1, r5
 800d710:	f7f2 fde4 	bl	80002dc <__adddf3>
 800d714:	4602      	mov	r2, r0
 800d716:	460b      	mov	r3, r1
 800d718:	4614      	mov	r4, r2
 800d71a:	461d      	mov	r5, r3
 800d71c:	4b58      	ldr	r3, [pc, #352]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d71e:	68db      	ldr	r3, [r3, #12]
 800d720:	4618      	mov	r0, r3
 800d722:	f7f2 ff39 	bl	8000598 <__aeabi_f2d>
 800d726:	f04f 0200 	mov.w	r2, #0
 800d72a:	4b56      	ldr	r3, [pc, #344]	@ (800d884 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x844>)
 800d72c:	f7f2 ff8c 	bl	8000648 <__aeabi_dmul>
 800d730:	4602      	mov	r2, r0
 800d732:	460b      	mov	r3, r1
 800d734:	60ba      	str	r2, [r7, #8]
 800d736:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800d73a:	60fb      	str	r3, [r7, #12]
 800d73c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d73e:	f7f2 ff2b 	bl	8000598 <__aeabi_f2d>
 800d742:	4602      	mov	r2, r0
 800d744:	460b      	mov	r3, r1
 800d746:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d74a:	f7f2 ff7d 	bl	8000648 <__aeabi_dmul>
 800d74e:	4602      	mov	r2, r0
 800d750:	460b      	mov	r3, r1
 800d752:	4690      	mov	r8, r2
 800d754:	4699      	mov	r9, r3
 800d756:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d758:	f7f2 ff1e 	bl	8000598 <__aeabi_f2d>
 800d75c:	4602      	mov	r2, r0
 800d75e:	460b      	mov	r3, r1
 800d760:	4640      	mov	r0, r8
 800d762:	4649      	mov	r1, r9
 800d764:	f7f2 ff70 	bl	8000648 <__aeabi_dmul>
 800d768:	4602      	mov	r2, r0
 800d76a:	460b      	mov	r3, r1
 800d76c:	4620      	mov	r0, r4
 800d76e:	4629      	mov	r1, r5
 800d770:	f7f2 fdb4 	bl	80002dc <__adddf3>
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	4610      	mov	r0, r2
 800d77a:	4619      	mov	r1, r3
 800d77c:	f7f3 fa5c 	bl	8000c38 <__aeabi_d2f>
 800d780:	4603      	mov	r3, r0
 800d782:	4a3f      	ldr	r2, [pc, #252]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d784:	6513      	str	r3, [r2, #80]	@ 0x50
		st_Info.f_mot_l3_decconst	= ( (f_fin+st_Info.f_mot_decjerk_v) * (f_fin+st_Info.f_mot_decjerk_v)
 800d786:	4b3e      	ldr	r3, [pc, #248]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d788:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800d78c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d790:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d794:	4b3a      	ldr	r3, [pc, #232]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d796:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800d79a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d79e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7a2:	ee27 7a27 	vmul.f32	s14, s14, s15
										- (st_Info.f_mot_trgt-st_Info.f_mot_decjerk_v) * (st_Info.f_mot_trgt-st_Info.f_mot_decjerk_v) ) 
 800d7a6:	4b36      	ldr	r3, [pc, #216]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d7a8:	edd3 6a08 	vldr	s13, [r3, #32]
 800d7ac:	4b34      	ldr	r3, [pc, #208]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d7ae:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d7b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d7b6:	4b32      	ldr	r3, [pc, #200]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d7b8:	ed93 6a08 	vldr	s12, [r3, #32]
 800d7bc:	4b30      	ldr	r3, [pc, #192]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d7be:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d7c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d7c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7ce:	ee17 0a90 	vmov	r0, s15
 800d7d2:	f7f2 fee1 	bl	8000598 <__aeabi_f2d>
 800d7d6:	4604      	mov	r4, r0
 800d7d8:	460d      	mov	r5, r1
										/ ( st_Info.f_mot_trgtAcc3 * (-1.0 ) * 2.0 );
 800d7da:	4b29      	ldr	r3, [pc, #164]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d7dc:	68db      	ldr	r3, [r3, #12]
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7f2 feda 	bl	8000598 <__aeabi_f2d>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	4692      	mov	sl, r2
 800d7ea:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 800d7ee:	4652      	mov	r2, sl
 800d7f0:	465b      	mov	r3, fp
 800d7f2:	4650      	mov	r0, sl
 800d7f4:	4659      	mov	r1, fp
 800d7f6:	f7f2 fd71 	bl	80002dc <__adddf3>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	4620      	mov	r0, r4
 800d800:	4629      	mov	r1, r5
 800d802:	f7f3 f84b 	bl	800089c <__aeabi_ddiv>
 800d806:	4602      	mov	r2, r0
 800d808:	460b      	mov	r3, r1
 800d80a:	4610      	mov	r0, r2
 800d80c:	4619      	mov	r1, r3
 800d80e:	f7f3 fa13 	bl	8000c38 <__aeabi_d2f>
 800d812:	4603      	mov	r3, r0
		st_Info.f_mot_l3_decconst	= ( (f_fin+st_Info.f_mot_decjerk_v) * (f_fin+st_Info.f_mot_decjerk_v)
 800d814:	4a1a      	ldr	r2, [pc, #104]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d816:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d818:	e00f      	b.n	800d83a <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x7fa>
	}else{
		st_Info.f_mot_l3_decjerk	= 0.0;
 800d81a:	4b19      	ldr	r3, [pc, #100]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d81c:	f04f 0200 	mov.w	r2, #0
 800d820:	649a      	str	r2, [r3, #72]	@ 0x48
		st_Info.f_mot_l3_accjerk	= 0.0;
 800d822:	4b17      	ldr	r3, [pc, #92]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d824:	f04f 0200 	mov.w	r2, #0
 800d828:	651a      	str	r2, [r3, #80]	@ 0x50
		st_Info.f_mot_l3_decconst	= 0.0;
 800d82a:	4b15      	ldr	r3, [pc, #84]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d82c:	f04f 0200 	mov.w	r2, #0
 800d830:	64da      	str	r2, [r3, #76]	@ 0x4c
		st_Info.f_mot_decjerk_v		= 0.0;
 800d832:	4b13      	ldr	r3, [pc, #76]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d834:	f04f 0200 	mov.w	r2, #0
 800d838:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	f_l3				=  st_Info.f_mot_l3_decjerk + st_Info.f_mot_l3_accjerk + st_Info.f_mot_l3_decconst;
 800d83a:	4b11      	ldr	r3, [pc, #68]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d83c:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800d840:	4b0f      	ldr	r3, [pc, #60]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d842:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800d846:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d84a:	4b0d      	ldr	r3, [pc, #52]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d84c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800d850:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d854:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	st_Info.f_mot_l1_2		= st_Info.f_mot_dist - f_l3;											// 第1+2移動距離[m]
 800d858:	4b09      	ldr	r3, [pc, #36]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d85a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800d85e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800d862:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d866:	4b06      	ldr	r3, [pc, #24]	@ (800d880 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d868:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

//	printf("2 %f,%f,%f,%f\r",st_Info.f_trgt,st_Info.f_l1,f_fin,f_MotNowSpeed);
}
 800d86c:	bf00      	nop
 800d86e:	3750      	adds	r7, #80	@ 0x50
 800d870:	46bd      	mov	sp, r7
 800d872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d876:	bf00      	nop
 800d878:	55555555 	.word	0x55555555
 800d87c:	3fc55555 	.word	0x3fc55555
 800d880:	20017b2c 	.word	0x20017b2c
 800d884:	3fe00000 	.word	0x3fe00000

0800d888 <MOT_setData_MOT_ACC_CONST>:

void MOT_setData_MOT_ACC_CONST( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800d888:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d88c:	b086      	sub	sp, #24
 800d88e:	af00      	add	r7, sp, #0
 800d890:	ed87 0a03 	vstr	s0, [r7, #12]
 800d894:	edc7 0a02 	vstr	s1, [r7, #8]
 800d898:	4603      	mov	r3, r0
 800d89a:	71fb      	strb	r3, [r7, #7]
	float			f_1blockDist;				// 1区画の距離[m]
	float           f_accTime;

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800d89c:	79fb      	ldrb	r3, [r7, #7]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d102      	bne.n	800d8a8 <MOT_setData_MOT_ACC_CONST+0x20>
		f_1blockDist = BLOCK;
 800d8a2:	4bcd      	ldr	r3, [pc, #820]	@ (800dbd8 <MOT_setData_MOT_ACC_CONST+0x350>)
 800d8a4:	617b      	str	r3, [r7, #20]
 800d8a6:	e001      	b.n	800d8ac <MOT_setData_MOT_ACC_CONST+0x24>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800d8a8:	4bcc      	ldr	r3, [pc, #816]	@ (800dbdc <MOT_setData_MOT_ACC_CONST+0x354>)
 800d8aa:	617b      	str	r3, [r7, #20]
	}
	//jerk
	st_Info.f_mot_jerk		= MOT_getJerk();
 800d8ac:	f7fe fbd3 	bl	800c056 <MOT_getJerk>
 800d8b0:	eef0 7a40 	vmov.f32	s15, s0
 800d8b4:	4bca      	ldr	r3, [pc, #808]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d8b6:	edc3 7a01 	vstr	s15, [r3, #4]

	/* 加速度 */
	st_Info.f_mot_trgtAcc1 		= MOT_getAcc1();													// 加速度1[mm/s^2]
 800d8ba:	f7fe fbb4 	bl	800c026 <MOT_getAcc1>
 800d8be:	eef0 7a40 	vmov.f32	s15, s0
 800d8c2:	4bc7      	ldr	r3, [pc, #796]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d8c4:	edc3 7a02 	vstr	s15, [r3, #8]
	st_Info.f_mot_trgtAcc3 		= 0;																// 加速度3[mm/s^2](未使用)
 800d8c8:	4bc5      	ldr	r3, [pc, #788]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d8ca:	f04f 0200 	mov.w	r2, #0
 800d8ce:	60da      	str	r2, [r3, #12]

	/* 速度 */
	st_Info.f_mot_now		= f_MotNowSpeed;													// 現在速度
 800d8d0:	4bc4      	ldr	r3, [pc, #784]	@ (800dbe4 <MOT_setData_MOT_ACC_CONST+0x35c>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4ac2      	ldr	r2, [pc, #776]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d8d6:	61d3      	str	r3, [r2, #28]
	st_Info.f_mot_trgt		= f_fin;															// 目標速度
 800d8d8:	4ac1      	ldr	r2, [pc, #772]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	6213      	str	r3, [r2, #32]
	st_Info.f_mot_last		= 0;																// 最終速度(未使用)
 800d8de:	4bc0      	ldr	r3, [pc, #768]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d8e0:	f04f 0200 	mov.w	r2, #0
 800d8e4:	625a      	str	r2, [r3, #36]	@ 0x24

	/* 距離 */
	st_Info.f_mot_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800d8e6:	ed97 7a03 	vldr	s14, [r7, #12]
 800d8ea:	edd7 7a05 	vldr	s15, [r7, #20]
 800d8ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8f2:	4bbb      	ldr	r3, [pc, #748]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d8f4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
//	st_Info.f_mot_l1		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_mot_acc1 * 2.0 );			// 第1移動距離[m]

	f_accTime   = st_Info.f_mot_trgtAcc1/st_Info.f_mot_jerk;
 800d8f8:	4bb9      	ldr	r3, [pc, #740]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d8fa:	edd3 6a02 	vldr	s13, [r3, #8]
 800d8fe:	4bb8      	ldr	r3, [pc, #736]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d900:	ed93 7a01 	vldr	s14, [r3, #4]
 800d904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d908:	edc7 7a04 	vstr	s15, [r7, #16]
	st_Info.f_mot_accjerk_v  	= 1.0/2.0*st_Info.f_mot_jerk*f_accTime*f_accTime;//加速度到達時の速度
 800d90c:	4bb4      	ldr	r3, [pc, #720]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	4618      	mov	r0, r3
 800d912:	f7f2 fe41 	bl	8000598 <__aeabi_f2d>
 800d916:	f04f 0200 	mov.w	r2, #0
 800d91a:	4bb3      	ldr	r3, [pc, #716]	@ (800dbe8 <MOT_setData_MOT_ACC_CONST+0x360>)
 800d91c:	f7f2 fe94 	bl	8000648 <__aeabi_dmul>
 800d920:	4602      	mov	r2, r0
 800d922:	460b      	mov	r3, r1
 800d924:	4690      	mov	r8, r2
 800d926:	4699      	mov	r9, r3
 800d928:	6938      	ldr	r0, [r7, #16]
 800d92a:	f7f2 fe35 	bl	8000598 <__aeabi_f2d>
 800d92e:	4602      	mov	r2, r0
 800d930:	460b      	mov	r3, r1
 800d932:	4640      	mov	r0, r8
 800d934:	4649      	mov	r1, r9
 800d936:	f7f2 fe87 	bl	8000648 <__aeabi_dmul>
 800d93a:	4602      	mov	r2, r0
 800d93c:	460b      	mov	r3, r1
 800d93e:	4690      	mov	r8, r2
 800d940:	4699      	mov	r9, r3
 800d942:	6938      	ldr	r0, [r7, #16]
 800d944:	f7f2 fe28 	bl	8000598 <__aeabi_f2d>
 800d948:	4602      	mov	r2, r0
 800d94a:	460b      	mov	r3, r1
 800d94c:	4640      	mov	r0, r8
 800d94e:	4649      	mov	r1, r9
 800d950:	f7f2 fe7a 	bl	8000648 <__aeabi_dmul>
 800d954:	4602      	mov	r2, r0
 800d956:	460b      	mov	r3, r1
 800d958:	4610      	mov	r0, r2
 800d95a:	4619      	mov	r1, r3
 800d95c:	f7f3 f96c 	bl	8000c38 <__aeabi_d2f>
 800d960:	4603      	mov	r3, r0
 800d962:	4a9f      	ldr	r2, [pc, #636]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d964:	6293      	str	r3, [r2, #40]	@ 0x28
    if(fabsf(f_MotTrgtSpeed - f_MotNowSpeed) > 0.05){
 800d966:	4ba1      	ldr	r3, [pc, #644]	@ (800dbec <MOT_setData_MOT_ACC_CONST+0x364>)
 800d968:	ed93 7a00 	vldr	s14, [r3]
 800d96c:	4b9d      	ldr	r3, [pc, #628]	@ (800dbe4 <MOT_setData_MOT_ACC_CONST+0x35c>)
 800d96e:	edd3 7a00 	vldr	s15, [r3]
 800d972:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d976:	eef0 7ae7 	vabs.f32	s15, s15
 800d97a:	ee17 0a90 	vmov	r0, s15
 800d97e:	f7f2 fe0b 	bl	8000598 <__aeabi_f2d>
 800d982:	a391      	add	r3, pc, #580	@ (adr r3, 800dbc8 <MOT_setData_MOT_ACC_CONST+0x340>)
 800d984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d988:	f7f3 f8ee 	bl	8000b68 <__aeabi_dcmpgt>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	f000 812e 	beq.w	800dbf0 <MOT_setData_MOT_ACC_CONST+0x368>
		st_Info.f_mot_l1_accjerk    = 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;//加速度に到達するまでの距離                                          // 移動距離[m]
 800d994:	4b92      	ldr	r3, [pc, #584]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	4618      	mov	r0, r3
 800d99a:	f7f2 fdfd 	bl	8000598 <__aeabi_f2d>
 800d99e:	a38c      	add	r3, pc, #560	@ (adr r3, 800dbd0 <MOT_setData_MOT_ACC_CONST+0x348>)
 800d9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a4:	f7f2 fe50 	bl	8000648 <__aeabi_dmul>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	4690      	mov	r8, r2
 800d9ae:	4699      	mov	r9, r3
 800d9b0:	6938      	ldr	r0, [r7, #16]
 800d9b2:	f7f2 fdf1 	bl	8000598 <__aeabi_f2d>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	4640      	mov	r0, r8
 800d9bc:	4649      	mov	r1, r9
 800d9be:	f7f2 fe43 	bl	8000648 <__aeabi_dmul>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	4690      	mov	r8, r2
 800d9c8:	4699      	mov	r9, r3
 800d9ca:	6938      	ldr	r0, [r7, #16]
 800d9cc:	f7f2 fde4 	bl	8000598 <__aeabi_f2d>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	4640      	mov	r0, r8
 800d9d6:	4649      	mov	r1, r9
 800d9d8:	f7f2 fe36 	bl	8000648 <__aeabi_dmul>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	460b      	mov	r3, r1
 800d9e0:	4690      	mov	r8, r2
 800d9e2:	4699      	mov	r9, r3
 800d9e4:	6938      	ldr	r0, [r7, #16]
 800d9e6:	f7f2 fdd7 	bl	8000598 <__aeabi_f2d>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	4640      	mov	r0, r8
 800d9f0:	4649      	mov	r1, r9
 800d9f2:	f7f2 fe29 	bl	8000648 <__aeabi_dmul>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	4690      	mov	r8, r2
 800d9fc:	4699      	mov	r9, r3
 800d9fe:	4b79      	ldr	r3, [pc, #484]	@ (800dbe4 <MOT_setData_MOT_ACC_CONST+0x35c>)
 800da00:	ed93 7a00 	vldr	s14, [r3]
 800da04:	edd7 7a04 	vldr	s15, [r7, #16]
 800da08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da0c:	ee17 0a90 	vmov	r0, s15
 800da10:	f7f2 fdc2 	bl	8000598 <__aeabi_f2d>
 800da14:	4602      	mov	r2, r0
 800da16:	460b      	mov	r3, r1
 800da18:	4640      	mov	r0, r8
 800da1a:	4649      	mov	r1, r9
 800da1c:	f7f2 fc5e 	bl	80002dc <__adddf3>
 800da20:	4602      	mov	r2, r0
 800da22:	460b      	mov	r3, r1
 800da24:	4610      	mov	r0, r2
 800da26:	4619      	mov	r1, r3
 800da28:	f7f3 f906 	bl	8000c38 <__aeabi_d2f>
 800da2c:	4603      	mov	r3, r0
 800da2e:	4a6c      	ldr	r2, [pc, #432]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800da30:	6393      	str	r3, [r2, #56]	@ 0x38
		st_Info.f_mot_l1_decjerk    = 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + (st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)*f_accTime + 1.0/2.0*st_Info.f_mot_trgtAcc1*f_accTime*f_accTime;
 800da32:	4b6b      	ldr	r3, [pc, #428]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	4618      	mov	r0, r3
 800da38:	f7f2 fdae 	bl	8000598 <__aeabi_f2d>
 800da3c:	a364      	add	r3, pc, #400	@ (adr r3, 800dbd0 <MOT_setData_MOT_ACC_CONST+0x348>)
 800da3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da42:	f7f2 fe01 	bl	8000648 <__aeabi_dmul>
 800da46:	4602      	mov	r2, r0
 800da48:	460b      	mov	r3, r1
 800da4a:	4614      	mov	r4, r2
 800da4c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800da50:	6938      	ldr	r0, [r7, #16]
 800da52:	f7f2 fda1 	bl	8000598 <__aeabi_f2d>
 800da56:	4602      	mov	r2, r0
 800da58:	460b      	mov	r3, r1
 800da5a:	4620      	mov	r0, r4
 800da5c:	4629      	mov	r1, r5
 800da5e:	f7f2 fdf3 	bl	8000648 <__aeabi_dmul>
 800da62:	4602      	mov	r2, r0
 800da64:	460b      	mov	r3, r1
 800da66:	4614      	mov	r4, r2
 800da68:	461d      	mov	r5, r3
 800da6a:	6938      	ldr	r0, [r7, #16]
 800da6c:	f7f2 fd94 	bl	8000598 <__aeabi_f2d>
 800da70:	4602      	mov	r2, r0
 800da72:	460b      	mov	r3, r1
 800da74:	4620      	mov	r0, r4
 800da76:	4629      	mov	r1, r5
 800da78:	f7f2 fde6 	bl	8000648 <__aeabi_dmul>
 800da7c:	4602      	mov	r2, r0
 800da7e:	460b      	mov	r3, r1
 800da80:	4614      	mov	r4, r2
 800da82:	461d      	mov	r5, r3
 800da84:	6938      	ldr	r0, [r7, #16]
 800da86:	f7f2 fd87 	bl	8000598 <__aeabi_f2d>
 800da8a:	4602      	mov	r2, r0
 800da8c:	460b      	mov	r3, r1
 800da8e:	4620      	mov	r0, r4
 800da90:	4629      	mov	r1, r5
 800da92:	f7f2 fdd9 	bl	8000648 <__aeabi_dmul>
 800da96:	4602      	mov	r2, r0
 800da98:	460b      	mov	r3, r1
 800da9a:	4614      	mov	r4, r2
 800da9c:	461d      	mov	r5, r3
 800da9e:	4b50      	ldr	r3, [pc, #320]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800daa0:	ed93 7a08 	vldr	s14, [r3, #32]
 800daa4:	4b4e      	ldr	r3, [pc, #312]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800daa6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800daaa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800daae:	edd7 7a04 	vldr	s15, [r7, #16]
 800dab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dab6:	ee17 0a90 	vmov	r0, s15
 800daba:	f7f2 fd6d 	bl	8000598 <__aeabi_f2d>
 800dabe:	4602      	mov	r2, r0
 800dac0:	460b      	mov	r3, r1
 800dac2:	4620      	mov	r0, r4
 800dac4:	4629      	mov	r1, r5
 800dac6:	f7f2 fc09 	bl	80002dc <__adddf3>
 800daca:	4602      	mov	r2, r0
 800dacc:	460b      	mov	r3, r1
 800dace:	4614      	mov	r4, r2
 800dad0:	461d      	mov	r5, r3
 800dad2:	4b43      	ldr	r3, [pc, #268]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800dad4:	689b      	ldr	r3, [r3, #8]
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7f2 fd5e 	bl	8000598 <__aeabi_f2d>
 800dadc:	f04f 0200 	mov.w	r2, #0
 800dae0:	4b41      	ldr	r3, [pc, #260]	@ (800dbe8 <MOT_setData_MOT_ACC_CONST+0x360>)
 800dae2:	f7f2 fdb1 	bl	8000648 <__aeabi_dmul>
 800dae6:	4602      	mov	r2, r0
 800dae8:	460b      	mov	r3, r1
 800daea:	4690      	mov	r8, r2
 800daec:	4699      	mov	r9, r3
 800daee:	6938      	ldr	r0, [r7, #16]
 800daf0:	f7f2 fd52 	bl	8000598 <__aeabi_f2d>
 800daf4:	4602      	mov	r2, r0
 800daf6:	460b      	mov	r3, r1
 800daf8:	4640      	mov	r0, r8
 800dafa:	4649      	mov	r1, r9
 800dafc:	f7f2 fda4 	bl	8000648 <__aeabi_dmul>
 800db00:	4602      	mov	r2, r0
 800db02:	460b      	mov	r3, r1
 800db04:	4690      	mov	r8, r2
 800db06:	4699      	mov	r9, r3
 800db08:	6938      	ldr	r0, [r7, #16]
 800db0a:	f7f2 fd45 	bl	8000598 <__aeabi_f2d>
 800db0e:	4602      	mov	r2, r0
 800db10:	460b      	mov	r3, r1
 800db12:	4640      	mov	r0, r8
 800db14:	4649      	mov	r1, r9
 800db16:	f7f2 fd97 	bl	8000648 <__aeabi_dmul>
 800db1a:	4602      	mov	r2, r0
 800db1c:	460b      	mov	r3, r1
 800db1e:	4620      	mov	r0, r4
 800db20:	4629      	mov	r1, r5
 800db22:	f7f2 fbdb 	bl	80002dc <__adddf3>
 800db26:	4602      	mov	r2, r0
 800db28:	460b      	mov	r3, r1
 800db2a:	4610      	mov	r0, r2
 800db2c:	4619      	mov	r1, r3
 800db2e:	f7f3 f883 	bl	8000c38 <__aeabi_d2f>
 800db32:	4603      	mov	r3, r0
 800db34:	4a2a      	ldr	r2, [pc, #168]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800db36:	6413      	str	r3, [r2, #64]	@ 0x40
		st_Info.f_mot_l1_accconst   = ((f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)*(f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)
 800db38:	4b2c      	ldr	r3, [pc, #176]	@ (800dbec <MOT_setData_MOT_ACC_CONST+0x364>)
 800db3a:	ed93 7a00 	vldr	s14, [r3]
 800db3e:	4b28      	ldr	r3, [pc, #160]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800db40:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800db44:	ee37 7a67 	vsub.f32	s14, s14, s15
 800db48:	4b28      	ldr	r3, [pc, #160]	@ (800dbec <MOT_setData_MOT_ACC_CONST+0x364>)
 800db4a:	edd3 6a00 	vldr	s13, [r3]
 800db4e:	4b24      	ldr	r3, [pc, #144]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800db50:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800db54:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800db58:	ee27 7a27 	vmul.f32	s14, s14, s15
										-(f_MotNowSpeed+st_Info.f_mot_accjerk_v)*(f_MotNowSpeed+st_Info.f_mot_accjerk_v))
 800db5c:	4b20      	ldr	r3, [pc, #128]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800db5e:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800db62:	4b20      	ldr	r3, [pc, #128]	@ (800dbe4 <MOT_setData_MOT_ACC_CONST+0x35c>)
 800db64:	edd3 7a00 	vldr	s15, [r3]
 800db68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800db6c:	4b1c      	ldr	r3, [pc, #112]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800db6e:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 800db72:	4b1c      	ldr	r3, [pc, #112]	@ (800dbe4 <MOT_setData_MOT_ACC_CONST+0x35c>)
 800db74:	edd3 7a00 	vldr	s15, [r3]
 800db78:	ee76 7a27 	vadd.f32	s15, s12, s15
 800db7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db84:	ee17 0a90 	vmov	r0, s15
 800db88:	f7f2 fd06 	bl	8000598 <__aeabi_f2d>
 800db8c:	4604      	mov	r4, r0
 800db8e:	460d      	mov	r5, r1
										/( st_Info.f_mot_trgtAcc1 * 2.0 );
 800db90:	4b13      	ldr	r3, [pc, #76]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	4618      	mov	r0, r3
 800db96:	f7f2 fcff 	bl	8000598 <__aeabi_f2d>
 800db9a:	4602      	mov	r2, r0
 800db9c:	460b      	mov	r3, r1
 800db9e:	f7f2 fb9d 	bl	80002dc <__adddf3>
 800dba2:	4602      	mov	r2, r0
 800dba4:	460b      	mov	r3, r1
 800dba6:	4620      	mov	r0, r4
 800dba8:	4629      	mov	r1, r5
 800dbaa:	f7f2 fe77 	bl	800089c <__aeabi_ddiv>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	4610      	mov	r0, r2
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	f7f3 f83f 	bl	8000c38 <__aeabi_d2f>
 800dbba:	4603      	mov	r3, r0
		st_Info.f_mot_l1_accconst   = ((f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)*(f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)
 800dbbc:	4a08      	ldr	r2, [pc, #32]	@ (800dbe0 <MOT_setData_MOT_ACC_CONST+0x358>)
 800dbbe:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800dbc0:	e026      	b.n	800dc10 <MOT_setData_MOT_ACC_CONST+0x388>
 800dbc2:	bf00      	nop
 800dbc4:	f3af 8000 	nop.w
 800dbc8:	9999999a 	.word	0x9999999a
 800dbcc:	3fa99999 	.word	0x3fa99999
 800dbd0:	55555555 	.word	0x55555555
 800dbd4:	3fc55555 	.word	0x3fc55555
 800dbd8:	3db851ec 	.word	0x3db851ec
 800dbdc:	3e0255b0 	.word	0x3e0255b0
 800dbe0:	20017b2c 	.word	0x20017b2c
 800dbe4:	20017bcc 	.word	0x20017bcc
 800dbe8:	3fe00000 	.word	0x3fe00000
 800dbec:	20017bd0 	.word	0x20017bd0
	}else{
		st_Info.f_mot_l1_accjerk    = 0.0;//加速度に到達するまでの距離                                          // 移動距離[m]
 800dbf0:	4b14      	ldr	r3, [pc, #80]	@ (800dc44 <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dbf2:	f04f 0200 	mov.w	r2, #0
 800dbf6:	639a      	str	r2, [r3, #56]	@ 0x38
		st_Info.f_mot_l1_decjerk    = 0.0;
 800dbf8:	4b12      	ldr	r3, [pc, #72]	@ (800dc44 <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dbfa:	f04f 0200 	mov.w	r2, #0
 800dbfe:	641a      	str	r2, [r3, #64]	@ 0x40
		st_Info.f_mot_l1_accconst   = 0.0;
 800dc00:	4b10      	ldr	r3, [pc, #64]	@ (800dc44 <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dc02:	f04f 0200 	mov.w	r2, #0
 800dc06:	63da      	str	r2, [r3, #60]	@ 0x3c
		st_Info.f_mot_accjerk_v  	= 0.0;
 800dc08:	4b0e      	ldr	r3, [pc, #56]	@ (800dc44 <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dc0a:	f04f 0200 	mov.w	r2, #0
 800dc0e:	629a      	str	r2, [r3, #40]	@ 0x28
	}
    st_Info.f_mot_l1    = st_Info.f_mot_l1_accjerk + st_Info.f_mot_l1_decjerk + st_Info.f_mot_l1_accconst;
 800dc10:	4b0c      	ldr	r3, [pc, #48]	@ (800dc44 <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dc12:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800dc16:	4b0b      	ldr	r3, [pc, #44]	@ (800dc44 <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dc18:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800dc1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc20:	4b08      	ldr	r3, [pc, #32]	@ (800dc44 <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dc22:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800dc26:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc2a:	4b06      	ldr	r3, [pc, #24]	@ (800dc44 <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dc2c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
//  st_Info.f_l1        = ( f_MotTrgtSpeed * f_MotTrgtSpeed - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_acc1 * 2.0 );           // 第1移動距離[m]
   
    st_Info.f_mot_l1_2  = st_Info.f_mot_dist;                                            // 第1+2移動距離[m]
 800dc30:	4b04      	ldr	r3, [pc, #16]	@ (800dc44 <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dc32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc34:	4a03      	ldr	r2, [pc, #12]	@ (800dc44 <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dc36:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800dc38:	bf00      	nop
 800dc3a:	3718      	adds	r7, #24
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800dc42:	bf00      	nop
 800dc44:	20017b2c 	.word	0x20017b2c

0800dc48 <MOT_setData_MOT_ACC_CONST_CUSTOM>:

void MOT_setData_MOT_ACC_CONST_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800dc48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc4c:	ed2d 8b02 	vpush	{d8}
 800dc50:	b086      	sub	sp, #24
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	ed87 0a03 	vstr	s0, [r7, #12]
 800dc58:	edc7 0a02 	vstr	s1, [r7, #8]
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	71fb      	strb	r3, [r7, #7]
	float			f_1blockDist;				// 1区画の距離[m]
	float           f_accTime;

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800dc60:	79fb      	ldrb	r3, [r7, #7]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d104      	bne.n	800dc70 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x28>
		f_1blockDist = BLOCK;
 800dc66:	4b01      	ldr	r3, [pc, #4]	@ (800dc6c <MOT_setData_MOT_ACC_CONST_CUSTOM+0x24>)
 800dc68:	617b      	str	r3, [r7, #20]
 800dc6a:	e003      	b.n	800dc74 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x2c>
 800dc6c:	3db851ec 	.word	0x3db851ec
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800dc70:	4bd9      	ldr	r3, [pc, #868]	@ (800dfd8 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x390>)
 800dc72:	617b      	str	r3, [r7, #20]
	}
	//jerk
	st_Info.f_mot_jerk		= MOT_getJerk();
 800dc74:	f7fe f9ef 	bl	800c056 <MOT_getJerk>
 800dc78:	eef0 7a40 	vmov.f32	s15, s0
 800dc7c:	4bd7      	ldr	r3, [pc, #860]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dc7e:	edc3 7a01 	vstr	s15, [r3, #4]

	/* 速度 */
	st_Info.f_mot_now		= f_MotNowSpeed;													// 現在速度
 800dc82:	4bd7      	ldr	r3, [pc, #860]	@ (800dfe0 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x398>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4ad5      	ldr	r2, [pc, #852]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dc88:	61d3      	str	r3, [r2, #28]
	st_Info.f_mot_trgt		= f_fin;															// 目標速度
 800dc8a:	4ad4      	ldr	r2, [pc, #848]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	6213      	str	r3, [r2, #32]
	st_Info.f_mot_last		= 0;																// 最終速度(未使用)
 800dc90:	4bd2      	ldr	r3, [pc, #840]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dc92:	f04f 0200 	mov.w	r2, #0
 800dc96:	625a      	str	r2, [r3, #36]	@ 0x24

	/* 距離 */
	st_Info.f_mot_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800dc98:	ed97 7a03 	vldr	s14, [r7, #12]
 800dc9c:	edd7 7a05 	vldr	s15, [r7, #20]
 800dca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dca4:	4bcd      	ldr	r3, [pc, #820]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dca6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	/* 加速度 */
//	st_Info.f_mot_acc1 		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_mot_dist - MOT_MOVE_ST_MIN ) * 2.0 );	// 加速度1[mm/s^2]（強制的に書き換え）

	st_Info.f_mot_trgtAcc1		= sqrt(6.0*st_Info.f_mot_jerk*(( st_Info.f_mot_dist - MOT_MOVE_ST_MIN ) - f_MotNowSpeed*MOT_getAcc1()/st_Info.f_mot_jerk)
 800dcaa:	4bcc      	ldr	r3, [pc, #816]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7f2 fc72 	bl	8000598 <__aeabi_f2d>
 800dcb4:	f04f 0200 	mov.w	r2, #0
 800dcb8:	4bca      	ldr	r3, [pc, #808]	@ (800dfe4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x39c>)
 800dcba:	f7f2 fcc5 	bl	8000648 <__aeabi_dmul>
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	4690      	mov	r8, r2
 800dcc4:	4699      	mov	r9, r3
 800dcc6:	4bc5      	ldr	r3, [pc, #788]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dcc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7f2 fc64 	bl	8000598 <__aeabi_f2d>
 800dcd0:	a3bb      	add	r3, pc, #748	@ (adr r3, 800dfc0 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x378>)
 800dcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd6:	f7f2 faff 	bl	80002d8 <__aeabi_dsub>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	460b      	mov	r3, r1
 800dcde:	4692      	mov	sl, r2
 800dce0:	469b      	mov	fp, r3
 800dce2:	f7fe f9a0 	bl	800c026 <MOT_getAcc1>
 800dce6:	eeb0 7a40 	vmov.f32	s14, s0
 800dcea:	4bbd      	ldr	r3, [pc, #756]	@ (800dfe0 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x398>)
 800dcec:	edd3 7a00 	vldr	s15, [r3]
 800dcf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dcf4:	4bb9      	ldr	r3, [pc, #740]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dcf6:	edd3 7a01 	vldr	s15, [r3, #4]
 800dcfa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800dcfe:	ee16 0a90 	vmov	r0, s13
 800dd02:	f7f2 fc49 	bl	8000598 <__aeabi_f2d>
 800dd06:	4602      	mov	r2, r0
 800dd08:	460b      	mov	r3, r1
 800dd0a:	4650      	mov	r0, sl
 800dd0c:	4659      	mov	r1, fp
 800dd0e:	f7f2 fae3 	bl	80002d8 <__aeabi_dsub>
 800dd12:	4602      	mov	r2, r0
 800dd14:	460b      	mov	r3, r1
 800dd16:	4640      	mov	r0, r8
 800dd18:	4649      	mov	r1, r9
 800dd1a:	f7f2 fc95 	bl	8000648 <__aeabi_dmul>
 800dd1e:	4602      	mov	r2, r0
 800dd20:	460b      	mov	r3, r1
 800dd22:	4690      	mov	r8, r2
 800dd24:	4699      	mov	r9, r3
								/((MOT_getAcc1()/st_Info.f_mot_jerk)*(MOT_getAcc1()/st_Info.f_mot_jerk)));
 800dd26:	f7fe f97e 	bl	800c026 <MOT_getAcc1>
 800dd2a:	eeb0 7a40 	vmov.f32	s14, s0
 800dd2e:	4bab      	ldr	r3, [pc, #684]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dd30:	edd3 7a01 	vldr	s15, [r3, #4]
 800dd34:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800dd38:	f7fe f975 	bl	800c026 <MOT_getAcc1>
 800dd3c:	eef0 6a40 	vmov.f32	s13, s0
 800dd40:	4ba6      	ldr	r3, [pc, #664]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dd42:	ed93 7a01 	vldr	s14, [r3, #4]
 800dd46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd4a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800dd4e:	ee17 0a90 	vmov	r0, s15
 800dd52:	f7f2 fc21 	bl	8000598 <__aeabi_f2d>
 800dd56:	4602      	mov	r2, r0
 800dd58:	460b      	mov	r3, r1
	st_Info.f_mot_trgtAcc1		= sqrt(6.0*st_Info.f_mot_jerk*(( st_Info.f_mot_dist - MOT_MOVE_ST_MIN ) - f_MotNowSpeed*MOT_getAcc1()/st_Info.f_mot_jerk)
 800dd5a:	4640      	mov	r0, r8
 800dd5c:	4649      	mov	r1, r9
 800dd5e:	f7f2 fd9d 	bl	800089c <__aeabi_ddiv>
 800dd62:	4602      	mov	r2, r0
 800dd64:	460b      	mov	r3, r1
 800dd66:	ec43 2b17 	vmov	d7, r2, r3
 800dd6a:	eeb0 0a47 	vmov.f32	s0, s14
 800dd6e:	eef0 0a67 	vmov.f32	s1, s15
 800dd72:	f00d feb3 	bl	801badc <sqrt>
 800dd76:	ec53 2b10 	vmov	r2, r3, d0
 800dd7a:	4610      	mov	r0, r2
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	f7f2 ff5b 	bl	8000c38 <__aeabi_d2f>
 800dd82:	4603      	mov	r3, r0
 800dd84:	4a95      	ldr	r2, [pc, #596]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dd86:	6093      	str	r3, [r2, #8]

	st_Info.f_mot_trgtAcc3 		= 0;																// 加速度3[m/s^2](未使用)
 800dd88:	4b94      	ldr	r3, [pc, #592]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dd8a:	f04f 0200 	mov.w	r2, #0
 800dd8e:	60da      	str	r2, [r3, #12]

	/* 距離 */
//	st_Info.f_mot_l1		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_mot_acc1 * 2.0 );			// 第1移動距離[m]
	f_accTime					= st_Info.f_mot_trgtAcc1/st_Info.f_mot_jerk;
 800dd90:	4b92      	ldr	r3, [pc, #584]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dd92:	edd3 6a02 	vldr	s13, [r3, #8]
 800dd96:	4b91      	ldr	r3, [pc, #580]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dd98:	ed93 7a01 	vldr	s14, [r3, #4]
 800dd9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dda0:	edc7 7a04 	vstr	s15, [r7, #16]

	st_Info.f_mot_accjerk_v		= 1.0/2.0*st_Info.f_mot_jerk*f_accTime*f_accTime;//加速度到達時の速度
 800dda4:	4b8d      	ldr	r3, [pc, #564]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7f2 fbf5 	bl	8000598 <__aeabi_f2d>
 800ddae:	f04f 0200 	mov.w	r2, #0
 800ddb2:	4b8d      	ldr	r3, [pc, #564]	@ (800dfe8 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x3a0>)
 800ddb4:	f7f2 fc48 	bl	8000648 <__aeabi_dmul>
 800ddb8:	4602      	mov	r2, r0
 800ddba:	460b      	mov	r3, r1
 800ddbc:	4690      	mov	r8, r2
 800ddbe:	4699      	mov	r9, r3
 800ddc0:	6938      	ldr	r0, [r7, #16]
 800ddc2:	f7f2 fbe9 	bl	8000598 <__aeabi_f2d>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	460b      	mov	r3, r1
 800ddca:	4640      	mov	r0, r8
 800ddcc:	4649      	mov	r1, r9
 800ddce:	f7f2 fc3b 	bl	8000648 <__aeabi_dmul>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	4690      	mov	r8, r2
 800ddd8:	4699      	mov	r9, r3
 800ddda:	6938      	ldr	r0, [r7, #16]
 800dddc:	f7f2 fbdc 	bl	8000598 <__aeabi_f2d>
 800dde0:	4602      	mov	r2, r0
 800dde2:	460b      	mov	r3, r1
 800dde4:	4640      	mov	r0, r8
 800dde6:	4649      	mov	r1, r9
 800dde8:	f7f2 fc2e 	bl	8000648 <__aeabi_dmul>
 800ddec:	4602      	mov	r2, r0
 800ddee:	460b      	mov	r3, r1
 800ddf0:	4610      	mov	r0, r2
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	f7f2 ff20 	bl	8000c38 <__aeabi_d2f>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	4a78      	ldr	r2, [pc, #480]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800ddfc:	6293      	str	r3, [r2, #40]	@ 0x28
	if(fabsf(f_MotTrgtSpeed - f_MotNowSpeed) > 0.05){
 800ddfe:	4b7b      	ldr	r3, [pc, #492]	@ (800dfec <MOT_setData_MOT_ACC_CONST_CUSTOM+0x3a4>)
 800de00:	ed93 7a00 	vldr	s14, [r3]
 800de04:	4b76      	ldr	r3, [pc, #472]	@ (800dfe0 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x398>)
 800de06:	edd3 7a00 	vldr	s15, [r3]
 800de0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de0e:	eef0 7ae7 	vabs.f32	s15, s15
 800de12:	ee17 0a90 	vmov	r0, s15
 800de16:	f7f2 fbbf 	bl	8000598 <__aeabi_f2d>
 800de1a:	a36b      	add	r3, pc, #428	@ (adr r3, 800dfc8 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x380>)
 800de1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de20:	f7f2 fea2 	bl	8000b68 <__aeabi_dcmpgt>
 800de24:	4603      	mov	r3, r0
 800de26:	2b00      	cmp	r3, #0
 800de28:	f000 8130 	beq.w	800e08c <MOT_setData_MOT_ACC_CONST_CUSTOM+0x444>
		st_Info.f_mot_l1_accjerk	= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;//加速度に到達するまでの距離		// 移動距離[m]
 800de2c:	4b6b      	ldr	r3, [pc, #428]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	4618      	mov	r0, r3
 800de32:	f7f2 fbb1 	bl	8000598 <__aeabi_f2d>
 800de36:	a366      	add	r3, pc, #408	@ (adr r3, 800dfd0 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x388>)
 800de38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3c:	f7f2 fc04 	bl	8000648 <__aeabi_dmul>
 800de40:	4602      	mov	r2, r0
 800de42:	460b      	mov	r3, r1
 800de44:	4690      	mov	r8, r2
 800de46:	4699      	mov	r9, r3
 800de48:	6938      	ldr	r0, [r7, #16]
 800de4a:	f7f2 fba5 	bl	8000598 <__aeabi_f2d>
 800de4e:	4602      	mov	r2, r0
 800de50:	460b      	mov	r3, r1
 800de52:	4640      	mov	r0, r8
 800de54:	4649      	mov	r1, r9
 800de56:	f7f2 fbf7 	bl	8000648 <__aeabi_dmul>
 800de5a:	4602      	mov	r2, r0
 800de5c:	460b      	mov	r3, r1
 800de5e:	4690      	mov	r8, r2
 800de60:	4699      	mov	r9, r3
 800de62:	6938      	ldr	r0, [r7, #16]
 800de64:	f7f2 fb98 	bl	8000598 <__aeabi_f2d>
 800de68:	4602      	mov	r2, r0
 800de6a:	460b      	mov	r3, r1
 800de6c:	4640      	mov	r0, r8
 800de6e:	4649      	mov	r1, r9
 800de70:	f7f2 fbea 	bl	8000648 <__aeabi_dmul>
 800de74:	4602      	mov	r2, r0
 800de76:	460b      	mov	r3, r1
 800de78:	4690      	mov	r8, r2
 800de7a:	4699      	mov	r9, r3
 800de7c:	6938      	ldr	r0, [r7, #16]
 800de7e:	f7f2 fb8b 	bl	8000598 <__aeabi_f2d>
 800de82:	4602      	mov	r2, r0
 800de84:	460b      	mov	r3, r1
 800de86:	4640      	mov	r0, r8
 800de88:	4649      	mov	r1, r9
 800de8a:	f7f2 fbdd 	bl	8000648 <__aeabi_dmul>
 800de8e:	4602      	mov	r2, r0
 800de90:	460b      	mov	r3, r1
 800de92:	4690      	mov	r8, r2
 800de94:	4699      	mov	r9, r3
 800de96:	4b52      	ldr	r3, [pc, #328]	@ (800dfe0 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x398>)
 800de98:	ed93 7a00 	vldr	s14, [r3]
 800de9c:	edd7 7a04 	vldr	s15, [r7, #16]
 800dea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dea4:	ee17 0a90 	vmov	r0, s15
 800dea8:	f7f2 fb76 	bl	8000598 <__aeabi_f2d>
 800deac:	4602      	mov	r2, r0
 800deae:	460b      	mov	r3, r1
 800deb0:	4640      	mov	r0, r8
 800deb2:	4649      	mov	r1, r9
 800deb4:	f7f2 fa12 	bl	80002dc <__adddf3>
 800deb8:	4602      	mov	r2, r0
 800deba:	460b      	mov	r3, r1
 800debc:	4610      	mov	r0, r2
 800debe:	4619      	mov	r1, r3
 800dec0:	f7f2 feba 	bl	8000c38 <__aeabi_d2f>
 800dec4:	4603      	mov	r3, r0
 800dec6:	4a45      	ldr	r2, [pc, #276]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dec8:	6393      	str	r3, [r2, #56]	@ 0x38
		st_Info.f_mot_l1_decjerk	= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + (st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)*f_accTime + 1.0/2.0*st_Info.f_mot_trgtAcc1*f_accTime*f_accTime;
 800deca:	4b44      	ldr	r3, [pc, #272]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	4618      	mov	r0, r3
 800ded0:	f7f2 fb62 	bl	8000598 <__aeabi_f2d>
 800ded4:	a33e      	add	r3, pc, #248	@ (adr r3, 800dfd0 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x388>)
 800ded6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deda:	f7f2 fbb5 	bl	8000648 <__aeabi_dmul>
 800dede:	4602      	mov	r2, r0
 800dee0:	460b      	mov	r3, r1
 800dee2:	4614      	mov	r4, r2
 800dee4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800dee8:	6938      	ldr	r0, [r7, #16]
 800deea:	f7f2 fb55 	bl	8000598 <__aeabi_f2d>
 800deee:	4602      	mov	r2, r0
 800def0:	460b      	mov	r3, r1
 800def2:	4620      	mov	r0, r4
 800def4:	4629      	mov	r1, r5
 800def6:	f7f2 fba7 	bl	8000648 <__aeabi_dmul>
 800defa:	4602      	mov	r2, r0
 800defc:	460b      	mov	r3, r1
 800defe:	4614      	mov	r4, r2
 800df00:	461d      	mov	r5, r3
 800df02:	6938      	ldr	r0, [r7, #16]
 800df04:	f7f2 fb48 	bl	8000598 <__aeabi_f2d>
 800df08:	4602      	mov	r2, r0
 800df0a:	460b      	mov	r3, r1
 800df0c:	4620      	mov	r0, r4
 800df0e:	4629      	mov	r1, r5
 800df10:	f7f2 fb9a 	bl	8000648 <__aeabi_dmul>
 800df14:	4602      	mov	r2, r0
 800df16:	460b      	mov	r3, r1
 800df18:	4614      	mov	r4, r2
 800df1a:	461d      	mov	r5, r3
 800df1c:	6938      	ldr	r0, [r7, #16]
 800df1e:	f7f2 fb3b 	bl	8000598 <__aeabi_f2d>
 800df22:	4602      	mov	r2, r0
 800df24:	460b      	mov	r3, r1
 800df26:	4620      	mov	r0, r4
 800df28:	4629      	mov	r1, r5
 800df2a:	f7f2 fb8d 	bl	8000648 <__aeabi_dmul>
 800df2e:	4602      	mov	r2, r0
 800df30:	460b      	mov	r3, r1
 800df32:	4614      	mov	r4, r2
 800df34:	461d      	mov	r5, r3
 800df36:	4b29      	ldr	r3, [pc, #164]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800df38:	ed93 7a08 	vldr	s14, [r3, #32]
 800df3c:	4b27      	ldr	r3, [pc, #156]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800df3e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800df42:	ee37 7a67 	vsub.f32	s14, s14, s15
 800df46:	edd7 7a04 	vldr	s15, [r7, #16]
 800df4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df4e:	ee17 0a90 	vmov	r0, s15
 800df52:	f7f2 fb21 	bl	8000598 <__aeabi_f2d>
 800df56:	4602      	mov	r2, r0
 800df58:	460b      	mov	r3, r1
 800df5a:	4620      	mov	r0, r4
 800df5c:	4629      	mov	r1, r5
 800df5e:	f7f2 f9bd 	bl	80002dc <__adddf3>
 800df62:	4602      	mov	r2, r0
 800df64:	460b      	mov	r3, r1
 800df66:	4614      	mov	r4, r2
 800df68:	461d      	mov	r5, r3
 800df6a:	4b1c      	ldr	r3, [pc, #112]	@ (800dfdc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800df6c:	689b      	ldr	r3, [r3, #8]
 800df6e:	4618      	mov	r0, r3
 800df70:	f7f2 fb12 	bl	8000598 <__aeabi_f2d>
 800df74:	f04f 0200 	mov.w	r2, #0
 800df78:	4b1b      	ldr	r3, [pc, #108]	@ (800dfe8 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x3a0>)
 800df7a:	f7f2 fb65 	bl	8000648 <__aeabi_dmul>
 800df7e:	4602      	mov	r2, r0
 800df80:	460b      	mov	r3, r1
 800df82:	4690      	mov	r8, r2
 800df84:	4699      	mov	r9, r3
 800df86:	6938      	ldr	r0, [r7, #16]
 800df88:	f7f2 fb06 	bl	8000598 <__aeabi_f2d>
 800df8c:	4602      	mov	r2, r0
 800df8e:	460b      	mov	r3, r1
 800df90:	4640      	mov	r0, r8
 800df92:	4649      	mov	r1, r9
 800df94:	f7f2 fb58 	bl	8000648 <__aeabi_dmul>
 800df98:	4602      	mov	r2, r0
 800df9a:	460b      	mov	r3, r1
 800df9c:	4690      	mov	r8, r2
 800df9e:	4699      	mov	r9, r3
 800dfa0:	6938      	ldr	r0, [r7, #16]
 800dfa2:	f7f2 faf9 	bl	8000598 <__aeabi_f2d>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	4640      	mov	r0, r8
 800dfac:	4649      	mov	r1, r9
 800dfae:	f7f2 fb4b 	bl	8000648 <__aeabi_dmul>
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	4629      	mov	r1, r5
 800dfba:	f7f2 f98f 	bl	80002dc <__adddf3>
 800dfbe:	e017      	b.n	800dff0 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x3a8>
 800dfc0:	47ae147b 	.word	0x47ae147b
 800dfc4:	3f847ae1 	.word	0x3f847ae1
 800dfc8:	9999999a 	.word	0x9999999a
 800dfcc:	3fa99999 	.word	0x3fa99999
 800dfd0:	55555555 	.word	0x55555555
 800dfd4:	3fc55555 	.word	0x3fc55555
 800dfd8:	3e0255b0 	.word	0x3e0255b0
 800dfdc:	20017b2c 	.word	0x20017b2c
 800dfe0:	20017bcc 	.word	0x20017bcc
 800dfe4:	40180000 	.word	0x40180000
 800dfe8:	3fe00000 	.word	0x3fe00000
 800dfec:	20017bd0 	.word	0x20017bd0
 800dff0:	4602      	mov	r2, r0
 800dff2:	460b      	mov	r3, r1
 800dff4:	4610      	mov	r0, r2
 800dff6:	4619      	mov	r1, r3
 800dff8:	f7f2 fe1e 	bl	8000c38 <__aeabi_d2f>
 800dffc:	4603      	mov	r3, r0
 800dffe:	4a39      	ldr	r2, [pc, #228]	@ (800e0e4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e000:	6413      	str	r3, [r2, #64]	@ 0x40
		st_Info.f_mot_l1_accconst	= ((f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)*(f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)
 800e002:	4b39      	ldr	r3, [pc, #228]	@ (800e0e8 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x4a0>)
 800e004:	ed93 7a00 	vldr	s14, [r3]
 800e008:	4b36      	ldr	r3, [pc, #216]	@ (800e0e4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e00a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e00e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e012:	4b35      	ldr	r3, [pc, #212]	@ (800e0e8 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x4a0>)
 800e014:	edd3 6a00 	vldr	s13, [r3]
 800e018:	4b32      	ldr	r3, [pc, #200]	@ (800e0e4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e01a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e01e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e022:	ee27 7a27 	vmul.f32	s14, s14, s15
										-(f_MotNowSpeed+st_Info.f_mot_accjerk_v)*(f_MotNowSpeed+st_Info.f_mot_accjerk_v))
 800e026:	4b2f      	ldr	r3, [pc, #188]	@ (800e0e4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e028:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800e02c:	4b2f      	ldr	r3, [pc, #188]	@ (800e0ec <MOT_setData_MOT_ACC_CONST_CUSTOM+0x4a4>)
 800e02e:	edd3 7a00 	vldr	s15, [r3]
 800e032:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e036:	4b2b      	ldr	r3, [pc, #172]	@ (800e0e4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e038:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 800e03c:	4b2b      	ldr	r3, [pc, #172]	@ (800e0ec <MOT_setData_MOT_ACC_CONST_CUSTOM+0x4a4>)
 800e03e:	edd3 7a00 	vldr	s15, [r3]
 800e042:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e046:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e04a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e04e:	ee17 0a90 	vmov	r0, s15
 800e052:	f7f2 faa1 	bl	8000598 <__aeabi_f2d>
 800e056:	4604      	mov	r4, r0
 800e058:	460d      	mov	r5, r1
										/( st_Info.f_mot_trgtAcc1 * 2.0 );
 800e05a:	4b22      	ldr	r3, [pc, #136]	@ (800e0e4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	4618      	mov	r0, r3
 800e060:	f7f2 fa9a 	bl	8000598 <__aeabi_f2d>
 800e064:	4602      	mov	r2, r0
 800e066:	460b      	mov	r3, r1
 800e068:	f7f2 f938 	bl	80002dc <__adddf3>
 800e06c:	4602      	mov	r2, r0
 800e06e:	460b      	mov	r3, r1
 800e070:	4620      	mov	r0, r4
 800e072:	4629      	mov	r1, r5
 800e074:	f7f2 fc12 	bl	800089c <__aeabi_ddiv>
 800e078:	4602      	mov	r2, r0
 800e07a:	460b      	mov	r3, r1
 800e07c:	4610      	mov	r0, r2
 800e07e:	4619      	mov	r1, r3
 800e080:	f7f2 fdda 	bl	8000c38 <__aeabi_d2f>
 800e084:	4603      	mov	r3, r0
		st_Info.f_mot_l1_accconst	= ((f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)*(f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)
 800e086:	4a17      	ldr	r2, [pc, #92]	@ (800e0e4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e088:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800e08a:	e00f      	b.n	800e0ac <MOT_setData_MOT_ACC_CONST_CUSTOM+0x464>
	}else{
		st_Info.f_mot_l1_accjerk    = 0.0;//加速度に到達するまでの距離                                          // 移動距離[m]
 800e08c:	4b15      	ldr	r3, [pc, #84]	@ (800e0e4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e08e:	f04f 0200 	mov.w	r2, #0
 800e092:	639a      	str	r2, [r3, #56]	@ 0x38
		st_Info.f_mot_l1_decjerk    = 0.0;
 800e094:	4b13      	ldr	r3, [pc, #76]	@ (800e0e4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e096:	f04f 0200 	mov.w	r2, #0
 800e09a:	641a      	str	r2, [r3, #64]	@ 0x40
		st_Info.f_mot_l1_accconst   = 0.0;
 800e09c:	4b11      	ldr	r3, [pc, #68]	@ (800e0e4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e09e:	f04f 0200 	mov.w	r2, #0
 800e0a2:	63da      	str	r2, [r3, #60]	@ 0x3c
		st_Info.f_mot_accjerk_v		= 0.0;
 800e0a4:	4b0f      	ldr	r3, [pc, #60]	@ (800e0e4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e0a6:	f04f 0200 	mov.w	r2, #0
 800e0aa:	629a      	str	r2, [r3, #40]	@ 0x28
	}
	st_Info.f_mot_l1			= st_Info.f_mot_l1_accjerk + st_Info.f_mot_l1_decjerk + st_Info.f_mot_l1_accconst;
 800e0ac:	4b0d      	ldr	r3, [pc, #52]	@ (800e0e4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e0ae:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800e0b2:	4b0c      	ldr	r3, [pc, #48]	@ (800e0e4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e0b4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800e0b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e0bc:	4b09      	ldr	r3, [pc, #36]	@ (800e0e4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e0be:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800e0c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e0c6:	4b07      	ldr	r3, [pc, #28]	@ (800e0e4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e0c8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	st_Info.f_mot_l1_2			= st_Info.f_mot_dist;													// 第1+2移動距離[m]
 800e0cc:	4b05      	ldr	r3, [pc, #20]	@ (800e0e4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e0ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0d0:	4a04      	ldr	r2, [pc, #16]	@ (800e0e4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e0d2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800e0d4:	bf00      	nop
 800e0d6:	3718      	adds	r7, #24
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	ecbd 8b02 	vpop	{d8}
 800e0de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e0e2:	bf00      	nop
 800e0e4:	20017b2c 	.word	0x20017b2c
 800e0e8:	20017bd0 	.word	0x20017bd0
 800e0ec:	20017bcc 	.word	0x20017bcc

0800e0f0 <MOT_setData_MOT_CONST_DEC>:

void MOT_setData_MOT_CONST_DEC( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800e0f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0f4:	b08a      	sub	sp, #40	@ 0x28
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	ed87 0a05 	vstr	s0, [r7, #20]
 800e0fc:	edc7 0a04 	vstr	s1, [r7, #16]
 800e100:	4603      	mov	r3, r0
 800e102:	73fb      	strb	r3, [r7, #15]
	float           f_l3;                       // 第3移動距離[m]
	float			f_1blockDist;				// 1区画の距離[mm]
	float           f_accTime;

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800e104:	7bfb      	ldrb	r3, [r7, #15]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d102      	bne.n	800e110 <MOT_setData_MOT_CONST_DEC+0x20>
		f_1blockDist = BLOCK;
 800e10a:	4bc9      	ldr	r3, [pc, #804]	@ (800e430 <MOT_setData_MOT_CONST_DEC+0x340>)
 800e10c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e10e:	e001      	b.n	800e114 <MOT_setData_MOT_CONST_DEC+0x24>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800e110:	4bc8      	ldr	r3, [pc, #800]	@ (800e434 <MOT_setData_MOT_CONST_DEC+0x344>)
 800e112:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	//jerk
	st_Info.f_mot_jerk		= MOT_getJerk();
 800e114:	f7fd ff9f 	bl	800c056 <MOT_getJerk>
 800e118:	eef0 7a40 	vmov.f32	s15, s0
 800e11c:	4bc6      	ldr	r3, [pc, #792]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e11e:	edc3 7a01 	vstr	s15, [r3, #4]

	/* 加速度 */
	st_Info.f_mot_trgtAcc1 		= 0;																// 加速度1[mm/s^2](未使用)
 800e122:	4bc5      	ldr	r3, [pc, #788]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e124:	f04f 0200 	mov.w	r2, #0
 800e128:	609a      	str	r2, [r3, #8]
	st_Info.f_mot_trgtAcc3 		= MOT_getAcc3();													// 加速度3[mm/s^2]
 800e12a:	f7fd ff88 	bl	800c03e <MOT_getAcc3>
 800e12e:	eef0 7a40 	vmov.f32	s15, s0
 800e132:	4bc1      	ldr	r3, [pc, #772]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e134:	edc3 7a03 	vstr	s15, [r3, #12]

	/* 速度 */
	st_Info.f_mot_now		= f_MotNowSpeed;													// 現在速度
 800e138:	4bc0      	ldr	r3, [pc, #768]	@ (800e43c <MOT_setData_MOT_CONST_DEC+0x34c>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4abe      	ldr	r2, [pc, #760]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e13e:	61d3      	str	r3, [r2, #28]
	st_Info.f_mot_trgt		= f_MotNowSpeed;													// 目標速度
 800e140:	4bbe      	ldr	r3, [pc, #760]	@ (800e43c <MOT_setData_MOT_CONST_DEC+0x34c>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4abc      	ldr	r2, [pc, #752]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e146:	6213      	str	r3, [r2, #32]
	st_Info.f_mot_last		= f_fin;															// 最終速度(未使用)
 800e148:	4abb      	ldr	r2, [pc, #748]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	6253      	str	r3, [r2, #36]	@ 0x24

	/* 距離 */
	st_Info.f_mot_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800e14e:	ed97 7a05 	vldr	s14, [r7, #20]
 800e152:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e15a:	4bb7      	ldr	r3, [pc, #732]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e15c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	st_Info.f_mot_l1		= 0;																// 第1移動距離[m]
 800e160:	4bb5      	ldr	r3, [pc, #724]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e162:	f04f 0200 	mov.w	r2, #0
 800e166:	635a      	str	r2, [r3, #52]	@ 0x34
//	st_Info.f_mot_l1_2		= st_Info.f_mot_dist - ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_mot_acc3 * -1.0 ) * 2.0 );			// 第1-2移動距離[m]

	f_accTime   = st_Info.f_mot_trgtAcc3/st_Info.f_mot_jerk;
 800e168:	4bb3      	ldr	r3, [pc, #716]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e16a:	edd3 6a03 	vldr	s13, [r3, #12]
 800e16e:	4bb2      	ldr	r3, [pc, #712]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e170:	ed93 7a01 	vldr	s14, [r3, #4]
 800e174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e178:	edc7 7a08 	vstr	s15, [r7, #32]
    st_Info.f_mot_decjerk_v  	= 1.0/2.0*st_Info.f_mot_jerk*f_accTime*f_accTime;//加速度到達時の速度
 800e17c:	4bae      	ldr	r3, [pc, #696]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	4618      	mov	r0, r3
 800e182:	f7f2 fa09 	bl	8000598 <__aeabi_f2d>
 800e186:	f04f 0200 	mov.w	r2, #0
 800e18a:	4bad      	ldr	r3, [pc, #692]	@ (800e440 <MOT_setData_MOT_CONST_DEC+0x350>)
 800e18c:	f7f2 fa5c 	bl	8000648 <__aeabi_dmul>
 800e190:	4602      	mov	r2, r0
 800e192:	460b      	mov	r3, r1
 800e194:	e9c7 2300 	strd	r2, r3, [r7]
 800e198:	6a38      	ldr	r0, [r7, #32]
 800e19a:	f7f2 f9fd 	bl	8000598 <__aeabi_f2d>
 800e19e:	4602      	mov	r2, r0
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e1a6:	f7f2 fa4f 	bl	8000648 <__aeabi_dmul>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	e9c7 2300 	strd	r2, r3, [r7]
 800e1b2:	6a38      	ldr	r0, [r7, #32]
 800e1b4:	f7f2 f9f0 	bl	8000598 <__aeabi_f2d>
 800e1b8:	4602      	mov	r2, r0
 800e1ba:	460b      	mov	r3, r1
 800e1bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e1c0:	f7f2 fa42 	bl	8000648 <__aeabi_dmul>
 800e1c4:	4602      	mov	r2, r0
 800e1c6:	460b      	mov	r3, r1
 800e1c8:	4610      	mov	r0, r2
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	f7f2 fd34 	bl	8000c38 <__aeabi_d2f>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	4a99      	ldr	r2, [pc, #612]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e1d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if((f_MotTrgtSpeed - f_fin) != 0){
 800e1d6:	4b9b      	ldr	r3, [pc, #620]	@ (800e444 <MOT_setData_MOT_CONST_DEC+0x354>)
 800e1d8:	ed93 7a00 	vldr	s14, [r3]
 800e1dc:	edd7 7a04 	vldr	s15, [r7, #16]
 800e1e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1ec:	f000 812c 	beq.w	800e448 <MOT_setData_MOT_CONST_DEC+0x358>
		st_Info.f_mot_l3_decjerk    = 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;
 800e1f0:	4b91      	ldr	r3, [pc, #580]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7f2 f9cf 	bl	8000598 <__aeabi_f2d>
 800e1fa:	a38b      	add	r3, pc, #556	@ (adr r3, 800e428 <MOT_setData_MOT_CONST_DEC+0x338>)
 800e1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e200:	f7f2 fa22 	bl	8000648 <__aeabi_dmul>
 800e204:	4602      	mov	r2, r0
 800e206:	460b      	mov	r3, r1
 800e208:	4692      	mov	sl, r2
 800e20a:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 800e20e:	6a38      	ldr	r0, [r7, #32]
 800e210:	f7f2 f9c2 	bl	8000598 <__aeabi_f2d>
 800e214:	4602      	mov	r2, r0
 800e216:	460b      	mov	r3, r1
 800e218:	4650      	mov	r0, sl
 800e21a:	4659      	mov	r1, fp
 800e21c:	f7f2 fa14 	bl	8000648 <__aeabi_dmul>
 800e220:	4602      	mov	r2, r0
 800e222:	460b      	mov	r3, r1
 800e224:	4692      	mov	sl, r2
 800e226:	469b      	mov	fp, r3
 800e228:	6a38      	ldr	r0, [r7, #32]
 800e22a:	f7f2 f9b5 	bl	8000598 <__aeabi_f2d>
 800e22e:	4602      	mov	r2, r0
 800e230:	460b      	mov	r3, r1
 800e232:	4650      	mov	r0, sl
 800e234:	4659      	mov	r1, fp
 800e236:	f7f2 fa07 	bl	8000648 <__aeabi_dmul>
 800e23a:	4602      	mov	r2, r0
 800e23c:	460b      	mov	r3, r1
 800e23e:	4692      	mov	sl, r2
 800e240:	469b      	mov	fp, r3
 800e242:	6a38      	ldr	r0, [r7, #32]
 800e244:	f7f2 f9a8 	bl	8000598 <__aeabi_f2d>
 800e248:	4602      	mov	r2, r0
 800e24a:	460b      	mov	r3, r1
 800e24c:	4650      	mov	r0, sl
 800e24e:	4659      	mov	r1, fp
 800e250:	f7f2 f9fa 	bl	8000648 <__aeabi_dmul>
 800e254:	4602      	mov	r2, r0
 800e256:	460b      	mov	r3, r1
 800e258:	4692      	mov	sl, r2
 800e25a:	469b      	mov	fp, r3
 800e25c:	4b77      	ldr	r3, [pc, #476]	@ (800e43c <MOT_setData_MOT_CONST_DEC+0x34c>)
 800e25e:	ed93 7a00 	vldr	s14, [r3]
 800e262:	edd7 7a08 	vldr	s15, [r7, #32]
 800e266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e26a:	ee17 0a90 	vmov	r0, s15
 800e26e:	f7f2 f993 	bl	8000598 <__aeabi_f2d>
 800e272:	4602      	mov	r2, r0
 800e274:	460b      	mov	r3, r1
 800e276:	4650      	mov	r0, sl
 800e278:	4659      	mov	r1, fp
 800e27a:	f7f2 f82f 	bl	80002dc <__adddf3>
 800e27e:	4602      	mov	r2, r0
 800e280:	460b      	mov	r3, r1
 800e282:	4610      	mov	r0, r2
 800e284:	4619      	mov	r1, r3
 800e286:	f7f2 fcd7 	bl	8000c38 <__aeabi_d2f>
 800e28a:	4603      	mov	r3, r0
 800e28c:	4a6a      	ldr	r2, [pc, #424]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e28e:	6493      	str	r3, [r2, #72]	@ 0x48
		st_Info.f_mot_l3_accjerk    = 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + (f_fin-st_Info.f_mot_decjerk_v)*f_accTime + 1.0/2.0*st_Info.f_mot_trgtAcc3*(-1.0)*f_accTime*f_accTime;//減速は加速度同様にする前提処理
 800e290:	4b69      	ldr	r3, [pc, #420]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	4618      	mov	r0, r3
 800e296:	f7f2 f97f 	bl	8000598 <__aeabi_f2d>
 800e29a:	a363      	add	r3, pc, #396	@ (adr r3, 800e428 <MOT_setData_MOT_CONST_DEC+0x338>)
 800e29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a0:	f7f2 f9d2 	bl	8000648 <__aeabi_dmul>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	4692      	mov	sl, r2
 800e2aa:	469b      	mov	fp, r3
 800e2ac:	6a38      	ldr	r0, [r7, #32]
 800e2ae:	f7f2 f973 	bl	8000598 <__aeabi_f2d>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	4650      	mov	r0, sl
 800e2b8:	4659      	mov	r1, fp
 800e2ba:	f7f2 f9c5 	bl	8000648 <__aeabi_dmul>
 800e2be:	4602      	mov	r2, r0
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	4692      	mov	sl, r2
 800e2c4:	469b      	mov	fp, r3
 800e2c6:	6a38      	ldr	r0, [r7, #32]
 800e2c8:	f7f2 f966 	bl	8000598 <__aeabi_f2d>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	4650      	mov	r0, sl
 800e2d2:	4659      	mov	r1, fp
 800e2d4:	f7f2 f9b8 	bl	8000648 <__aeabi_dmul>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	460b      	mov	r3, r1
 800e2dc:	4692      	mov	sl, r2
 800e2de:	469b      	mov	fp, r3
 800e2e0:	6a38      	ldr	r0, [r7, #32]
 800e2e2:	f7f2 f959 	bl	8000598 <__aeabi_f2d>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	4650      	mov	r0, sl
 800e2ec:	4659      	mov	r1, fp
 800e2ee:	f7f2 f9ab 	bl	8000648 <__aeabi_dmul>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	4692      	mov	sl, r2
 800e2f8:	469b      	mov	fp, r3
 800e2fa:	4b4f      	ldr	r3, [pc, #316]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e2fc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800e300:	ed97 7a04 	vldr	s14, [r7, #16]
 800e304:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e308:	edd7 7a08 	vldr	s15, [r7, #32]
 800e30c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e310:	ee17 0a90 	vmov	r0, s15
 800e314:	f7f2 f940 	bl	8000598 <__aeabi_f2d>
 800e318:	4602      	mov	r2, r0
 800e31a:	460b      	mov	r3, r1
 800e31c:	4650      	mov	r0, sl
 800e31e:	4659      	mov	r1, fp
 800e320:	f7f1 ffdc 	bl	80002dc <__adddf3>
 800e324:	4602      	mov	r2, r0
 800e326:	460b      	mov	r3, r1
 800e328:	4692      	mov	sl, r2
 800e32a:	469b      	mov	fp, r3
 800e32c:	4b42      	ldr	r3, [pc, #264]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e32e:	68db      	ldr	r3, [r3, #12]
 800e330:	4618      	mov	r0, r3
 800e332:	f7f2 f931 	bl	8000598 <__aeabi_f2d>
 800e336:	f04f 0200 	mov.w	r2, #0
 800e33a:	4b41      	ldr	r3, [pc, #260]	@ (800e440 <MOT_setData_MOT_CONST_DEC+0x350>)
 800e33c:	f7f2 f984 	bl	8000648 <__aeabi_dmul>
 800e340:	4602      	mov	r2, r0
 800e342:	460b      	mov	r3, r1
 800e344:	4690      	mov	r8, r2
 800e346:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800e34a:	6a38      	ldr	r0, [r7, #32]
 800e34c:	f7f2 f924 	bl	8000598 <__aeabi_f2d>
 800e350:	4602      	mov	r2, r0
 800e352:	460b      	mov	r3, r1
 800e354:	4640      	mov	r0, r8
 800e356:	4649      	mov	r1, r9
 800e358:	f7f2 f976 	bl	8000648 <__aeabi_dmul>
 800e35c:	4602      	mov	r2, r0
 800e35e:	460b      	mov	r3, r1
 800e360:	4690      	mov	r8, r2
 800e362:	4699      	mov	r9, r3
 800e364:	6a38      	ldr	r0, [r7, #32]
 800e366:	f7f2 f917 	bl	8000598 <__aeabi_f2d>
 800e36a:	4602      	mov	r2, r0
 800e36c:	460b      	mov	r3, r1
 800e36e:	4640      	mov	r0, r8
 800e370:	4649      	mov	r1, r9
 800e372:	f7f2 f969 	bl	8000648 <__aeabi_dmul>
 800e376:	4602      	mov	r2, r0
 800e378:	460b      	mov	r3, r1
 800e37a:	4650      	mov	r0, sl
 800e37c:	4659      	mov	r1, fp
 800e37e:	f7f1 ffad 	bl	80002dc <__adddf3>
 800e382:	4602      	mov	r2, r0
 800e384:	460b      	mov	r3, r1
 800e386:	4610      	mov	r0, r2
 800e388:	4619      	mov	r1, r3
 800e38a:	f7f2 fc55 	bl	8000c38 <__aeabi_d2f>
 800e38e:	4603      	mov	r3, r0
 800e390:	4a29      	ldr	r2, [pc, #164]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e392:	6513      	str	r3, [r2, #80]	@ 0x50
		st_Info.f_mot_l3_decconst   = ( (f_fin+st_Info.f_mot_decjerk_v) * (f_fin+st_Info.f_mot_decjerk_v) 
 800e394:	4b28      	ldr	r3, [pc, #160]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e396:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800e39a:	edd7 7a04 	vldr	s15, [r7, #16]
 800e39e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e3a2:	4b25      	ldr	r3, [pc, #148]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e3a4:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800e3a8:	edd7 7a04 	vldr	s15, [r7, #16]
 800e3ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e3b0:	ee27 7a27 	vmul.f32	s14, s14, s15
										- (f_MotTrgtSpeed-st_Info.f_mot_decjerk_v) * (f_MotTrgtSpeed-st_Info.f_mot_decjerk_v) ) 
 800e3b4:	4b23      	ldr	r3, [pc, #140]	@ (800e444 <MOT_setData_MOT_CONST_DEC+0x354>)
 800e3b6:	edd3 6a00 	vldr	s13, [r3]
 800e3ba:	4b1f      	ldr	r3, [pc, #124]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e3bc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800e3c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e3c4:	4b1f      	ldr	r3, [pc, #124]	@ (800e444 <MOT_setData_MOT_CONST_DEC+0x354>)
 800e3c6:	ed93 6a00 	vldr	s12, [r3]
 800e3ca:	4b1b      	ldr	r3, [pc, #108]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e3cc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800e3d0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e3d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e3d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e3dc:	ee17 0a90 	vmov	r0, s15
 800e3e0:	f7f2 f8da 	bl	8000598 <__aeabi_f2d>
 800e3e4:	4680      	mov	r8, r0
 800e3e6:	4689      	mov	r9, r1
										/ ( st_Info.f_mot_trgtAcc3 * (-1.0 ) * 2.0 );
 800e3e8:	4b13      	ldr	r3, [pc, #76]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7f2 f8d3 	bl	8000598 <__aeabi_f2d>
 800e3f2:	4602      	mov	r2, r0
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	4614      	mov	r4, r2
 800e3f8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800e3fc:	4622      	mov	r2, r4
 800e3fe:	462b      	mov	r3, r5
 800e400:	4620      	mov	r0, r4
 800e402:	4629      	mov	r1, r5
 800e404:	f7f1 ff6a 	bl	80002dc <__adddf3>
 800e408:	4602      	mov	r2, r0
 800e40a:	460b      	mov	r3, r1
 800e40c:	4640      	mov	r0, r8
 800e40e:	4649      	mov	r1, r9
 800e410:	f7f2 fa44 	bl	800089c <__aeabi_ddiv>
 800e414:	4602      	mov	r2, r0
 800e416:	460b      	mov	r3, r1
 800e418:	4610      	mov	r0, r2
 800e41a:	4619      	mov	r1, r3
 800e41c:	f7f2 fc0c 	bl	8000c38 <__aeabi_d2f>
 800e420:	4603      	mov	r3, r0
		st_Info.f_mot_l3_decconst   = ( (f_fin+st_Info.f_mot_decjerk_v) * (f_fin+st_Info.f_mot_decjerk_v) 
 800e422:	4a05      	ldr	r2, [pc, #20]	@ (800e438 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e426:	e01f      	b.n	800e468 <MOT_setData_MOT_CONST_DEC+0x378>
 800e428:	55555555 	.word	0x55555555
 800e42c:	3fc55555 	.word	0x3fc55555
 800e430:	3db851ec 	.word	0x3db851ec
 800e434:	3e0255b0 	.word	0x3e0255b0
 800e438:	20017b2c 	.word	0x20017b2c
 800e43c:	20017bcc 	.word	0x20017bcc
 800e440:	3fe00000 	.word	0x3fe00000
 800e444:	20017bd0 	.word	0x20017bd0
	}else{
		st_Info.f_mot_l3_decjerk    = 0.0;
 800e448:	4b16      	ldr	r3, [pc, #88]	@ (800e4a4 <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e44a:	f04f 0200 	mov.w	r2, #0
 800e44e:	649a      	str	r2, [r3, #72]	@ 0x48
		st_Info.f_mot_l3_accjerk    = 0.0;//減速は加速度同様にする前提処理
 800e450:	4b14      	ldr	r3, [pc, #80]	@ (800e4a4 <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e452:	f04f 0200 	mov.w	r2, #0
 800e456:	651a      	str	r2, [r3, #80]	@ 0x50
		st_Info.f_mot_l3_decconst   = 0.0;
 800e458:	4b12      	ldr	r3, [pc, #72]	@ (800e4a4 <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e45a:	f04f 0200 	mov.w	r2, #0
 800e45e:	64da      	str	r2, [r3, #76]	@ 0x4c
		st_Info.f_mot_decjerk_v  	= 0.0;
 800e460:	4b10      	ldr	r3, [pc, #64]	@ (800e4a4 <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e462:	f04f 0200 	mov.w	r2, #0
 800e466:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
    f_l3                	= st_Info.f_mot_l3_decjerk + st_Info.f_mot_l3_accjerk + st_Info.f_mot_l3_decconst;    
 800e468:	4b0e      	ldr	r3, [pc, #56]	@ (800e4a4 <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e46a:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800e46e:	4b0d      	ldr	r3, [pc, #52]	@ (800e4a4 <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e470:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800e474:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e478:	4b0a      	ldr	r3, [pc, #40]	@ (800e4a4 <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e47a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800e47e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e482:	edc7 7a07 	vstr	s15, [r7, #28]
    st_Info.f_mot_l1_2      = st_Info.f_mot_dist - f_l3;                                            // 第1+2移動距離[m]
 800e486:	4b07      	ldr	r3, [pc, #28]	@ (800e4a4 <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e488:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800e48c:	edd7 7a07 	vldr	s15, [r7, #28]
 800e490:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e494:	4b03      	ldr	r3, [pc, #12]	@ (800e4a4 <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e496:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
}
 800e49a:	bf00      	nop
 800e49c:	3728      	adds	r7, #40	@ 0x28
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e4a4:	20017b2c 	.word	0x20017b2c

0800e4a8 <MOT_setData_MOT_CONST_DEC_CUSTOM>:

void MOT_setData_MOT_CONST_DEC_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800e4a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e4ac:	ed2d 8b02 	vpush	{d8}
 800e4b0:	b08a      	sub	sp, #40	@ 0x28
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	ed87 0a07 	vstr	s0, [r7, #28]
 800e4b8:	edc7 0a06 	vstr	s1, [r7, #24]
 800e4bc:	4603      	mov	r3, r0
 800e4be:	75fb      	strb	r3, [r7, #23]
	float			f_1blockDist;				// 1区画の距離[m]
	float			f_accTime;

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800e4c0:	7dfb      	ldrb	r3, [r7, #23]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d104      	bne.n	800e4d0 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x28>
		f_1blockDist = BLOCK;
 800e4c6:	4b01      	ldr	r3, [pc, #4]	@ (800e4cc <MOT_setData_MOT_CONST_DEC_CUSTOM+0x24>)
 800e4c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4ca:	e003      	b.n	800e4d4 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x2c>
 800e4cc:	3db851ec 	.word	0x3db851ec
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800e4d0:	4bd5      	ldr	r3, [pc, #852]	@ (800e828 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x380>)
 800e4d2:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	//jerk
	st_Info.f_mot_jerk		= MOT_getJerk();
 800e4d4:	f7fd fdbf 	bl	800c056 <MOT_getJerk>
 800e4d8:	eef0 7a40 	vmov.f32	s15, s0
 800e4dc:	4bd3      	ldr	r3, [pc, #844]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e4de:	edc3 7a01 	vstr	s15, [r3, #4]

	/* 速度 */
	st_Info.f_mot_now		= f_MotNowSpeed;									// 現在速度
 800e4e2:	4bd3      	ldr	r3, [pc, #844]	@ (800e830 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x388>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4ad1      	ldr	r2, [pc, #836]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e4e8:	61d3      	str	r3, [r2, #28]
	st_Info.f_mot_trgt		= f_MotNowSpeed;									// 目標速度
 800e4ea:	4bd1      	ldr	r3, [pc, #836]	@ (800e830 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x388>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	4acf      	ldr	r2, [pc, #828]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e4f0:	6213      	str	r3, [r2, #32]
	st_Info.f_mot_last		= f_fin;															// 最終速度
 800e4f2:	4ace      	ldr	r2, [pc, #824]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e4f4:	69bb      	ldr	r3, [r7, #24]
 800e4f6:	6253      	str	r3, [r2, #36]	@ 0x24

	/* 距離 */
	st_Info.f_mot_dist		= f_num * f_1blockDist;									// 移動距離[mm]
 800e4f8:	ed97 7a07 	vldr	s14, [r7, #28]
 800e4fc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e500:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e504:	4bc9      	ldr	r3, [pc, #804]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e506:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	/* 加速度 */
	st_Info.f_mot_trgtAcc1 		= 0;																// 加速度1[mm/s^2](未使用)
 800e50a:	4bc8      	ldr	r3, [pc, #800]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e50c:	f04f 0200 	mov.w	r2, #0
 800e510:	609a      	str	r2, [r3, #8]
//	st_Info.f_mot_acc3 		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_mot_dist - MOT_MOVE_ST_MIN ) * 2.0 ) * -1.0;	// 加速度3[mm/s^2]（強制的に書き換え）
	st_Info.f_mot_trgtAcc3		= sqrt(6.0*st_Info.f_mot_jerk*(( st_Info.f_mot_dist - MOT_MOVE_ST_MIN ) - f_MotNowSpeed*MOT_getAcc3()/st_Info.f_mot_jerk)
 800e512:	4bc6      	ldr	r3, [pc, #792]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	4618      	mov	r0, r3
 800e518:	f7f2 f83e 	bl	8000598 <__aeabi_f2d>
 800e51c:	f04f 0200 	mov.w	r2, #0
 800e520:	4bc4      	ldr	r3, [pc, #784]	@ (800e834 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x38c>)
 800e522:	f7f2 f891 	bl	8000648 <__aeabi_dmul>
 800e526:	4602      	mov	r2, r0
 800e528:	460b      	mov	r3, r1
 800e52a:	e9c7 2300 	strd	r2, r3, [r7]
 800e52e:	4bbf      	ldr	r3, [pc, #764]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e532:	4618      	mov	r0, r3
 800e534:	f7f2 f830 	bl	8000598 <__aeabi_f2d>
 800e538:	a3b7      	add	r3, pc, #732	@ (adr r3, 800e818 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x370>)
 800e53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53e:	f7f1 fecb 	bl	80002d8 <__aeabi_dsub>
 800e542:	4602      	mov	r2, r0
 800e544:	460b      	mov	r3, r1
 800e546:	4614      	mov	r4, r2
 800e548:	461d      	mov	r5, r3
 800e54a:	f7fd fd78 	bl	800c03e <MOT_getAcc3>
 800e54e:	eeb0 7a40 	vmov.f32	s14, s0
 800e552:	4bb7      	ldr	r3, [pc, #732]	@ (800e830 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x388>)
 800e554:	edd3 7a00 	vldr	s15, [r3]
 800e558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e55c:	4bb3      	ldr	r3, [pc, #716]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e55e:	edd3 7a01 	vldr	s15, [r3, #4]
 800e562:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e566:	ee16 0a90 	vmov	r0, s13
 800e56a:	f7f2 f815 	bl	8000598 <__aeabi_f2d>
 800e56e:	4602      	mov	r2, r0
 800e570:	460b      	mov	r3, r1
 800e572:	4620      	mov	r0, r4
 800e574:	4629      	mov	r1, r5
 800e576:	f7f1 feaf 	bl	80002d8 <__aeabi_dsub>
 800e57a:	4602      	mov	r2, r0
 800e57c:	460b      	mov	r3, r1
 800e57e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e582:	f7f2 f861 	bl	8000648 <__aeabi_dmul>
 800e586:	4602      	mov	r2, r0
 800e588:	460b      	mov	r3, r1
 800e58a:	4614      	mov	r4, r2
 800e58c:	461d      	mov	r5, r3
								/((MOT_getAcc3()/st_Info.f_mot_jerk)*(MOT_getAcc3()/st_Info.f_mot_jerk)));
 800e58e:	f7fd fd56 	bl	800c03e <MOT_getAcc3>
 800e592:	eeb0 7a40 	vmov.f32	s14, s0
 800e596:	4ba5      	ldr	r3, [pc, #660]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e598:	edd3 7a01 	vldr	s15, [r3, #4]
 800e59c:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800e5a0:	f7fd fd4d 	bl	800c03e <MOT_getAcc3>
 800e5a4:	eef0 6a40 	vmov.f32	s13, s0
 800e5a8:	4ba0      	ldr	r3, [pc, #640]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e5aa:	ed93 7a01 	vldr	s14, [r3, #4]
 800e5ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5b2:	ee68 7a27 	vmul.f32	s15, s16, s15
 800e5b6:	ee17 0a90 	vmov	r0, s15
 800e5ba:	f7f1 ffed 	bl	8000598 <__aeabi_f2d>
 800e5be:	4602      	mov	r2, r0
 800e5c0:	460b      	mov	r3, r1
	st_Info.f_mot_trgtAcc3		= sqrt(6.0*st_Info.f_mot_jerk*(( st_Info.f_mot_dist - MOT_MOVE_ST_MIN ) - f_MotNowSpeed*MOT_getAcc3()/st_Info.f_mot_jerk)
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	4629      	mov	r1, r5
 800e5c6:	f7f2 f969 	bl	800089c <__aeabi_ddiv>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	ec43 2b17 	vmov	d7, r2, r3
 800e5d2:	eeb0 0a47 	vmov.f32	s0, s14
 800e5d6:	eef0 0a67 	vmov.f32	s1, s15
 800e5da:	f00d fa7f 	bl	801badc <sqrt>
 800e5de:	ec53 2b10 	vmov	r2, r3, d0
 800e5e2:	4610      	mov	r0, r2
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	f7f2 fb27 	bl	8000c38 <__aeabi_d2f>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	4a8f      	ldr	r2, [pc, #572]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e5ee:	60d3      	str	r3, [r2, #12]

	/* 距離 */
	st_Info.f_mot_l1		= 0;																// 第1移動距離[m]
 800e5f0:	4b8e      	ldr	r3, [pc, #568]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e5f2:	f04f 0200 	mov.w	r2, #0
 800e5f6:	635a      	str	r2, [r3, #52]	@ 0x34

	f_accTime					= st_Info.f_mot_trgtAcc3/st_Info.f_mot_jerk;
 800e5f8:	4b8c      	ldr	r3, [pc, #560]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e5fa:	edd3 6a03 	vldr	s13, [r3, #12]
 800e5fe:	4b8b      	ldr	r3, [pc, #556]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e600:	ed93 7a01 	vldr	s14, [r3, #4]
 800e604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e608:	edc7 7a08 	vstr	s15, [r7, #32]

	st_Info.f_mot_decjerk_v		= 1.0/2.0*st_Info.f_mot_jerk*f_accTime*f_accTime;//加速度到達時の速度
 800e60c:	4b87      	ldr	r3, [pc, #540]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e60e:	685b      	ldr	r3, [r3, #4]
 800e610:	4618      	mov	r0, r3
 800e612:	f7f1 ffc1 	bl	8000598 <__aeabi_f2d>
 800e616:	f04f 0200 	mov.w	r2, #0
 800e61a:	4b87      	ldr	r3, [pc, #540]	@ (800e838 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x390>)
 800e61c:	f7f2 f814 	bl	8000648 <__aeabi_dmul>
 800e620:	4602      	mov	r2, r0
 800e622:	460b      	mov	r3, r1
 800e624:	4614      	mov	r4, r2
 800e626:	461d      	mov	r5, r3
 800e628:	6a38      	ldr	r0, [r7, #32]
 800e62a:	f7f1 ffb5 	bl	8000598 <__aeabi_f2d>
 800e62e:	4602      	mov	r2, r0
 800e630:	460b      	mov	r3, r1
 800e632:	4620      	mov	r0, r4
 800e634:	4629      	mov	r1, r5
 800e636:	f7f2 f807 	bl	8000648 <__aeabi_dmul>
 800e63a:	4602      	mov	r2, r0
 800e63c:	460b      	mov	r3, r1
 800e63e:	4614      	mov	r4, r2
 800e640:	461d      	mov	r5, r3
 800e642:	6a38      	ldr	r0, [r7, #32]
 800e644:	f7f1 ffa8 	bl	8000598 <__aeabi_f2d>
 800e648:	4602      	mov	r2, r0
 800e64a:	460b      	mov	r3, r1
 800e64c:	4620      	mov	r0, r4
 800e64e:	4629      	mov	r1, r5
 800e650:	f7f1 fffa 	bl	8000648 <__aeabi_dmul>
 800e654:	4602      	mov	r2, r0
 800e656:	460b      	mov	r3, r1
 800e658:	4610      	mov	r0, r2
 800e65a:	4619      	mov	r1, r3
 800e65c:	f7f2 faec 	bl	8000c38 <__aeabi_d2f>
 800e660:	4603      	mov	r3, r0
 800e662:	4a72      	ldr	r2, [pc, #456]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e664:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if((f_MotNowSpeed- f_fin)!=0){
 800e666:	4b72      	ldr	r3, [pc, #456]	@ (800e830 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x388>)
 800e668:	ed93 7a00 	vldr	s14, [r3]
 800e66c:	edd7 7a06 	vldr	s15, [r7, #24]
 800e670:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e674:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e67c:	f000 8131 	beq.w	800e8e2 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x43a>
		st_Info.f_mot_l3_decjerk    = 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;
 800e680:	4b6a      	ldr	r3, [pc, #424]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	4618      	mov	r0, r3
 800e686:	f7f1 ff87 	bl	8000598 <__aeabi_f2d>
 800e68a:	a365      	add	r3, pc, #404	@ (adr r3, 800e820 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x378>)
 800e68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e690:	f7f1 ffda 	bl	8000648 <__aeabi_dmul>
 800e694:	4602      	mov	r2, r0
 800e696:	460b      	mov	r3, r1
 800e698:	60ba      	str	r2, [r7, #8]
 800e69a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800e69e:	60fb      	str	r3, [r7, #12]
 800e6a0:	6a38      	ldr	r0, [r7, #32]
 800e6a2:	f7f1 ff79 	bl	8000598 <__aeabi_f2d>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e6ae:	f7f1 ffcb 	bl	8000648 <__aeabi_dmul>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	460b      	mov	r3, r1
 800e6b6:	4614      	mov	r4, r2
 800e6b8:	461d      	mov	r5, r3
 800e6ba:	6a38      	ldr	r0, [r7, #32]
 800e6bc:	f7f1 ff6c 	bl	8000598 <__aeabi_f2d>
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	4629      	mov	r1, r5
 800e6c8:	f7f1 ffbe 	bl	8000648 <__aeabi_dmul>
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	4614      	mov	r4, r2
 800e6d2:	461d      	mov	r5, r3
 800e6d4:	6a38      	ldr	r0, [r7, #32]
 800e6d6:	f7f1 ff5f 	bl	8000598 <__aeabi_f2d>
 800e6da:	4602      	mov	r2, r0
 800e6dc:	460b      	mov	r3, r1
 800e6de:	4620      	mov	r0, r4
 800e6e0:	4629      	mov	r1, r5
 800e6e2:	f7f1 ffb1 	bl	8000648 <__aeabi_dmul>
 800e6e6:	4602      	mov	r2, r0
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	4614      	mov	r4, r2
 800e6ec:	461d      	mov	r5, r3
 800e6ee:	4b50      	ldr	r3, [pc, #320]	@ (800e830 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x388>)
 800e6f0:	ed93 7a00 	vldr	s14, [r3]
 800e6f4:	edd7 7a08 	vldr	s15, [r7, #32]
 800e6f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6fc:	ee17 0a90 	vmov	r0, s15
 800e700:	f7f1 ff4a 	bl	8000598 <__aeabi_f2d>
 800e704:	4602      	mov	r2, r0
 800e706:	460b      	mov	r3, r1
 800e708:	4620      	mov	r0, r4
 800e70a:	4629      	mov	r1, r5
 800e70c:	f7f1 fde6 	bl	80002dc <__adddf3>
 800e710:	4602      	mov	r2, r0
 800e712:	460b      	mov	r3, r1
 800e714:	4610      	mov	r0, r2
 800e716:	4619      	mov	r1, r3
 800e718:	f7f2 fa8e 	bl	8000c38 <__aeabi_d2f>
 800e71c:	4603      	mov	r3, r0
 800e71e:	4a43      	ldr	r2, [pc, #268]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e720:	6493      	str	r3, [r2, #72]	@ 0x48
		st_Info.f_mot_l3_accjerk    = 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + (f_fin+st_Info.f_mot_decjerk_v)*f_accTime + 1.0/2.0*st_Info.f_mot_trgtAcc3*(-1.0)*f_accTime*f_accTime;//減速は加速度同様にする前提処理
 800e722:	4b42      	ldr	r3, [pc, #264]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e724:	685b      	ldr	r3, [r3, #4]
 800e726:	4618      	mov	r0, r3
 800e728:	f7f1 ff36 	bl	8000598 <__aeabi_f2d>
 800e72c:	a33c      	add	r3, pc, #240	@ (adr r3, 800e820 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x378>)
 800e72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e732:	f7f1 ff89 	bl	8000648 <__aeabi_dmul>
 800e736:	4602      	mov	r2, r0
 800e738:	460b      	mov	r3, r1
 800e73a:	4614      	mov	r4, r2
 800e73c:	461d      	mov	r5, r3
 800e73e:	6a38      	ldr	r0, [r7, #32]
 800e740:	f7f1 ff2a 	bl	8000598 <__aeabi_f2d>
 800e744:	4602      	mov	r2, r0
 800e746:	460b      	mov	r3, r1
 800e748:	4620      	mov	r0, r4
 800e74a:	4629      	mov	r1, r5
 800e74c:	f7f1 ff7c 	bl	8000648 <__aeabi_dmul>
 800e750:	4602      	mov	r2, r0
 800e752:	460b      	mov	r3, r1
 800e754:	4614      	mov	r4, r2
 800e756:	461d      	mov	r5, r3
 800e758:	6a38      	ldr	r0, [r7, #32]
 800e75a:	f7f1 ff1d 	bl	8000598 <__aeabi_f2d>
 800e75e:	4602      	mov	r2, r0
 800e760:	460b      	mov	r3, r1
 800e762:	4620      	mov	r0, r4
 800e764:	4629      	mov	r1, r5
 800e766:	f7f1 ff6f 	bl	8000648 <__aeabi_dmul>
 800e76a:	4602      	mov	r2, r0
 800e76c:	460b      	mov	r3, r1
 800e76e:	4614      	mov	r4, r2
 800e770:	461d      	mov	r5, r3
 800e772:	6a38      	ldr	r0, [r7, #32]
 800e774:	f7f1 ff10 	bl	8000598 <__aeabi_f2d>
 800e778:	4602      	mov	r2, r0
 800e77a:	460b      	mov	r3, r1
 800e77c:	4620      	mov	r0, r4
 800e77e:	4629      	mov	r1, r5
 800e780:	f7f1 ff62 	bl	8000648 <__aeabi_dmul>
 800e784:	4602      	mov	r2, r0
 800e786:	460b      	mov	r3, r1
 800e788:	4614      	mov	r4, r2
 800e78a:	461d      	mov	r5, r3
 800e78c:	4b27      	ldr	r3, [pc, #156]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e78e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800e792:	edd7 7a06 	vldr	s15, [r7, #24]
 800e796:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e79a:	edd7 7a08 	vldr	s15, [r7, #32]
 800e79e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7a2:	ee17 0a90 	vmov	r0, s15
 800e7a6:	f7f1 fef7 	bl	8000598 <__aeabi_f2d>
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	4629      	mov	r1, r5
 800e7b2:	f7f1 fd93 	bl	80002dc <__adddf3>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	4614      	mov	r4, r2
 800e7bc:	461d      	mov	r5, r3
 800e7be:	4b1b      	ldr	r3, [pc, #108]	@ (800e82c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e7c0:	68db      	ldr	r3, [r3, #12]
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7f1 fee8 	bl	8000598 <__aeabi_f2d>
 800e7c8:	f04f 0200 	mov.w	r2, #0
 800e7cc:	4b1a      	ldr	r3, [pc, #104]	@ (800e838 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x390>)
 800e7ce:	f7f1 ff3b 	bl	8000648 <__aeabi_dmul>
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	4692      	mov	sl, r2
 800e7d8:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 800e7dc:	6a38      	ldr	r0, [r7, #32]
 800e7de:	f7f1 fedb 	bl	8000598 <__aeabi_f2d>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	4650      	mov	r0, sl
 800e7e8:	4659      	mov	r1, fp
 800e7ea:	f7f1 ff2d 	bl	8000648 <__aeabi_dmul>
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	4692      	mov	sl, r2
 800e7f4:	469b      	mov	fp, r3
 800e7f6:	6a38      	ldr	r0, [r7, #32]
 800e7f8:	f7f1 fece 	bl	8000598 <__aeabi_f2d>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	460b      	mov	r3, r1
 800e800:	4650      	mov	r0, sl
 800e802:	4659      	mov	r1, fp
 800e804:	f7f1 ff20 	bl	8000648 <__aeabi_dmul>
 800e808:	4602      	mov	r2, r0
 800e80a:	460b      	mov	r3, r1
 800e80c:	4620      	mov	r0, r4
 800e80e:	4629      	mov	r1, r5
 800e810:	f7f1 fd64 	bl	80002dc <__adddf3>
 800e814:	e012      	b.n	800e83c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x394>
 800e816:	bf00      	nop
 800e818:	47ae147b 	.word	0x47ae147b
 800e81c:	3f847ae1 	.word	0x3f847ae1
 800e820:	55555555 	.word	0x55555555
 800e824:	3fc55555 	.word	0x3fc55555
 800e828:	3e0255b0 	.word	0x3e0255b0
 800e82c:	20017b2c 	.word	0x20017b2c
 800e830:	20017bcc 	.word	0x20017bcc
 800e834:	40180000 	.word	0x40180000
 800e838:	3fe00000 	.word	0x3fe00000
 800e83c:	4602      	mov	r2, r0
 800e83e:	460b      	mov	r3, r1
 800e840:	4610      	mov	r0, r2
 800e842:	4619      	mov	r1, r3
 800e844:	f7f2 f9f8 	bl	8000c38 <__aeabi_d2f>
 800e848:	4603      	mov	r3, r0
 800e84a:	4a3a      	ldr	r2, [pc, #232]	@ (800e934 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e84c:	6513      	str	r3, [r2, #80]	@ 0x50
		st_Info.f_mot_l3_decconst	= ((f_fin-st_Info.f_mot_decjerk_v)*(f_fin-st_Info.f_mot_decjerk_v)
 800e84e:	4b39      	ldr	r3, [pc, #228]	@ (800e934 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e850:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800e854:	ed97 7a06 	vldr	s14, [r7, #24]
 800e858:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e85c:	4b35      	ldr	r3, [pc, #212]	@ (800e934 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e85e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800e862:	edd7 6a06 	vldr	s13, [r7, #24]
 800e866:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e86a:	ee27 7a27 	vmul.f32	s14, s14, s15
										-(f_MotNowSpeed+st_Info.f_mot_decjerk_v)*(f_MotNowSpeed+st_Info.f_mot_decjerk_v))
 800e86e:	4b31      	ldr	r3, [pc, #196]	@ (800e934 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e870:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800e874:	4b30      	ldr	r3, [pc, #192]	@ (800e938 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x490>)
 800e876:	edd3 7a00 	vldr	s15, [r3]
 800e87a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e87e:	4b2d      	ldr	r3, [pc, #180]	@ (800e934 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e880:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 800e884:	4b2c      	ldr	r3, [pc, #176]	@ (800e938 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x490>)
 800e886:	edd3 7a00 	vldr	s15, [r3]
 800e88a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e88e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e892:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e896:	ee17 0a90 	vmov	r0, s15
 800e89a:	f7f1 fe7d 	bl	8000598 <__aeabi_f2d>
 800e89e:	4604      	mov	r4, r0
 800e8a0:	460d      	mov	r5, r1
										/( st_Info.f_mot_trgtAcc3 * (-1.0) * 2.0 );
 800e8a2:	4b24      	ldr	r3, [pc, #144]	@ (800e934 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7f1 fe76 	bl	8000598 <__aeabi_f2d>
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	4690      	mov	r8, r2
 800e8b2:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800e8b6:	4642      	mov	r2, r8
 800e8b8:	464b      	mov	r3, r9
 800e8ba:	4640      	mov	r0, r8
 800e8bc:	4649      	mov	r1, r9
 800e8be:	f7f1 fd0d 	bl	80002dc <__adddf3>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	f7f1 ffe7 	bl	800089c <__aeabi_ddiv>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	4610      	mov	r0, r2
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	f7f2 f9af 	bl	8000c38 <__aeabi_d2f>
 800e8da:	4603      	mov	r3, r0
		st_Info.f_mot_l3_decconst	= ((f_fin-st_Info.f_mot_decjerk_v)*(f_fin-st_Info.f_mot_decjerk_v)
 800e8dc:	4a15      	ldr	r2, [pc, #84]	@ (800e934 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e8de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e8e0:	e00b      	b.n	800e8fa <MOT_setData_MOT_CONST_DEC_CUSTOM+0x452>
	}else{
		st_Info.f_mot_l3_decjerk    = 0.0;
 800e8e2:	4b14      	ldr	r3, [pc, #80]	@ (800e934 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e8e4:	f04f 0200 	mov.w	r2, #0
 800e8e8:	649a      	str	r2, [r3, #72]	@ 0x48
		st_Info.f_mot_l3_accjerk    = 0.0;//減速は加速度同様にする前提処理
 800e8ea:	4b12      	ldr	r3, [pc, #72]	@ (800e934 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e8ec:	f04f 0200 	mov.w	r2, #0
 800e8f0:	651a      	str	r2, [r3, #80]	@ 0x50
		st_Info.f_mot_l3_decconst	= 0.0;
 800e8f2:	4b10      	ldr	r3, [pc, #64]	@ (800e934 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e8f4:	f04f 0200 	mov.w	r2, #0
 800e8f8:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
//	st_Info.f_mot_l1			= st_Info.f_mot_l3_accjerk*2.0 + st_Info.f_mot_l3_accconst;


	st_Info.f_mot_l1_2		= st_Info.f_mot_dist - (st_Info.f_mot_l3_decjerk + st_Info.f_mot_l3_accjerk + st_Info.f_mot_l3_decconst);			// 第1-2移動距離[m]
 800e8fa:	4b0e      	ldr	r3, [pc, #56]	@ (800e934 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e8fc:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800e900:	4b0c      	ldr	r3, [pc, #48]	@ (800e934 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e902:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 800e906:	4b0b      	ldr	r3, [pc, #44]	@ (800e934 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e908:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800e90c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e910:	4b08      	ldr	r3, [pc, #32]	@ (800e934 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e912:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800e916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e91a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e91e:	4b05      	ldr	r3, [pc, #20]	@ (800e934 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e920:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
}
 800e924:	bf00      	nop
 800e926:	3728      	adds	r7, #40	@ 0x28
 800e928:	46bd      	mov	sp, r7
 800e92a:	ecbd 8b02 	vpop	{d8}
 800e92e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e932:	bf00      	nop
 800e934:	20017b2c 	.word	0x20017b2c
 800e938:	20017bcc 	.word	0x20017bcc
 800e93c:	00000000 	.word	0x00000000

0800e940 <MOT_getStType>:

enMOT_ST_TYPE MOT_getStType( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800e940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e944:	b09e      	sub	sp, #120	@ 0x78
 800e946:	af00      	add	r7, sp, #0
 800e948:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
 800e94c:	edc7 0a10 	vstr	s1, [r7, #64]	@ 0x40
 800e950:	4603      	mov	r3, r0
 800e952:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	float f_l_acc_accConst;
	float f_l_acc_decJerk;
	float f_v_accJerk;

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800e956:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d108      	bne.n	800e970 <MOT_getStType+0x30>
		f_total	= f_num * BLOCK;
 800e95e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800e962:	ed9f 7acf 	vldr	s14, [pc, #828]	@ 800eca0 <MOT_getStType+0x360>
 800e966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e96a:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
 800e96e:	e007      	b.n	800e980 <MOT_getStType+0x40>
	}
	else{									// 斜めの直進
		f_total	= f_num * BLOCK_SKEW;
 800e970:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800e974:	ed9f 7acb 	vldr	s14, [pc, #812]	@ 800eca4 <MOT_getStType+0x364>
 800e978:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e97c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	}

	f_Jerk		= MOT_getJerk();
 800e980:	f7fd fb69 	bl	800c056 <MOT_getJerk>
 800e984:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
	f_acc1		= MOT_getAcc1();
 800e988:	f7fd fb4d 	bl	800c026 <MOT_getAcc1>
 800e98c:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
	f_acc3		= MOT_getAcc3();
 800e990:	f7fd fb55 	bl	800c03e <MOT_getAcc3>
 800e994:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
//	f_acc1		= MOT_getAcc1();				// 加速度1[mm/s^2]
//	f_t1		= f_v1Div / f_acc1;

//	f_l1 = ( f_MotNowSpeed + f_fin ) * 0.5f * f_t1;

	f_accTime			= f_acc1/f_Jerk;
 800e998:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800e99c:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800e9a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9a4:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	f_v_accJerk			= 1.0/2.0*f_Jerk*f_accTime*f_accTime;
 800e9a8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800e9aa:	f7f1 fdf5 	bl	8000598 <__aeabi_f2d>
 800e9ae:	f04f 0200 	mov.w	r2, #0
 800e9b2:	4bbd      	ldr	r3, [pc, #756]	@ (800eca8 <MOT_getStType+0x368>)
 800e9b4:	f7f1 fe48 	bl	8000648 <__aeabi_dmul>
 800e9b8:	4602      	mov	r2, r0
 800e9ba:	460b      	mov	r3, r1
 800e9bc:	4614      	mov	r4, r2
 800e9be:	461d      	mov	r5, r3
 800e9c0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800e9c2:	f7f1 fde9 	bl	8000598 <__aeabi_f2d>
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	4629      	mov	r1, r5
 800e9ce:	f7f1 fe3b 	bl	8000648 <__aeabi_dmul>
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	4614      	mov	r4, r2
 800e9d8:	461d      	mov	r5, r3
 800e9da:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800e9dc:	f7f1 fddc 	bl	8000598 <__aeabi_f2d>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	4629      	mov	r1, r5
 800e9e8:	f7f1 fe2e 	bl	8000648 <__aeabi_dmul>
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	460b      	mov	r3, r1
 800e9f0:	4610      	mov	r0, r2
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	f7f2 f920 	bl	8000c38 <__aeabi_d2f>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	663b      	str	r3, [r7, #96]	@ 0x60
	f_l_acc_accJerk		= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;
 800e9fc:	4bab      	ldr	r3, [pc, #684]	@ (800ecac <MOT_getStType+0x36c>)
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	4618      	mov	r0, r3
 800ea02:	f7f1 fdc9 	bl	8000598 <__aeabi_f2d>
 800ea06:	a3a0      	add	r3, pc, #640	@ (adr r3, 800ec88 <MOT_getStType+0x348>)
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	f7f1 fe1c 	bl	8000648 <__aeabi_dmul>
 800ea10:	4602      	mov	r2, r0
 800ea12:	460b      	mov	r3, r1
 800ea14:	4614      	mov	r4, r2
 800ea16:	461d      	mov	r5, r3
 800ea18:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ea1a:	f7f1 fdbd 	bl	8000598 <__aeabi_f2d>
 800ea1e:	4602      	mov	r2, r0
 800ea20:	460b      	mov	r3, r1
 800ea22:	4620      	mov	r0, r4
 800ea24:	4629      	mov	r1, r5
 800ea26:	f7f1 fe0f 	bl	8000648 <__aeabi_dmul>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	460b      	mov	r3, r1
 800ea2e:	4614      	mov	r4, r2
 800ea30:	461d      	mov	r5, r3
 800ea32:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ea34:	f7f1 fdb0 	bl	8000598 <__aeabi_f2d>
 800ea38:	4602      	mov	r2, r0
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	4629      	mov	r1, r5
 800ea40:	f7f1 fe02 	bl	8000648 <__aeabi_dmul>
 800ea44:	4602      	mov	r2, r0
 800ea46:	460b      	mov	r3, r1
 800ea48:	4614      	mov	r4, r2
 800ea4a:	461d      	mov	r5, r3
 800ea4c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ea4e:	f7f1 fda3 	bl	8000598 <__aeabi_f2d>
 800ea52:	4602      	mov	r2, r0
 800ea54:	460b      	mov	r3, r1
 800ea56:	4620      	mov	r0, r4
 800ea58:	4629      	mov	r1, r5
 800ea5a:	f7f1 fdf5 	bl	8000648 <__aeabi_dmul>
 800ea5e:	4602      	mov	r2, r0
 800ea60:	460b      	mov	r3, r1
 800ea62:	4614      	mov	r4, r2
 800ea64:	461d      	mov	r5, r3
 800ea66:	4b92      	ldr	r3, [pc, #584]	@ (800ecb0 <MOT_getStType+0x370>)
 800ea68:	ed93 7a00 	vldr	s14, [r3]
 800ea6c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800ea70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea74:	ee17 0a90 	vmov	r0, s15
 800ea78:	f7f1 fd8e 	bl	8000598 <__aeabi_f2d>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	460b      	mov	r3, r1
 800ea80:	4620      	mov	r0, r4
 800ea82:	4629      	mov	r1, r5
 800ea84:	f7f1 fc2a 	bl	80002dc <__adddf3>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	4610      	mov	r0, r2
 800ea8e:	4619      	mov	r1, r3
 800ea90:	f7f2 f8d2 	bl	8000c38 <__aeabi_d2f>
 800ea94:	4603      	mov	r3, r0
 800ea96:	65fb      	str	r3, [r7, #92]	@ 0x5c
	f_l_acc_decJerk		= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + (f_fin-f_v_accJerk)*f_accTime + 1.0/2.0*f_acc1*f_accTime*f_accTime;
 800ea98:	4b84      	ldr	r3, [pc, #528]	@ (800ecac <MOT_getStType+0x36c>)
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7f1 fd7b 	bl	8000598 <__aeabi_f2d>
 800eaa2:	a379      	add	r3, pc, #484	@ (adr r3, 800ec88 <MOT_getStType+0x348>)
 800eaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa8:	f7f1 fdce 	bl	8000648 <__aeabi_dmul>
 800eaac:	4602      	mov	r2, r0
 800eaae:	460b      	mov	r3, r1
 800eab0:	4614      	mov	r4, r2
 800eab2:	461d      	mov	r5, r3
 800eab4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800eab6:	f7f1 fd6f 	bl	8000598 <__aeabi_f2d>
 800eaba:	4602      	mov	r2, r0
 800eabc:	460b      	mov	r3, r1
 800eabe:	4620      	mov	r0, r4
 800eac0:	4629      	mov	r1, r5
 800eac2:	f7f1 fdc1 	bl	8000648 <__aeabi_dmul>
 800eac6:	4602      	mov	r2, r0
 800eac8:	460b      	mov	r3, r1
 800eaca:	4614      	mov	r4, r2
 800eacc:	461d      	mov	r5, r3
 800eace:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ead0:	f7f1 fd62 	bl	8000598 <__aeabi_f2d>
 800ead4:	4602      	mov	r2, r0
 800ead6:	460b      	mov	r3, r1
 800ead8:	4620      	mov	r0, r4
 800eada:	4629      	mov	r1, r5
 800eadc:	f7f1 fdb4 	bl	8000648 <__aeabi_dmul>
 800eae0:	4602      	mov	r2, r0
 800eae2:	460b      	mov	r3, r1
 800eae4:	4614      	mov	r4, r2
 800eae6:	461d      	mov	r5, r3
 800eae8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800eaea:	f7f1 fd55 	bl	8000598 <__aeabi_f2d>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	460b      	mov	r3, r1
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	4629      	mov	r1, r5
 800eaf6:	f7f1 fda7 	bl	8000648 <__aeabi_dmul>
 800eafa:	4602      	mov	r2, r0
 800eafc:	460b      	mov	r3, r1
 800eafe:	4614      	mov	r4, r2
 800eb00:	461d      	mov	r5, r3
 800eb02:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800eb06:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800eb0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eb0e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800eb12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb16:	ee17 0a90 	vmov	r0, s15
 800eb1a:	f7f1 fd3d 	bl	8000598 <__aeabi_f2d>
 800eb1e:	4602      	mov	r2, r0
 800eb20:	460b      	mov	r3, r1
 800eb22:	4620      	mov	r0, r4
 800eb24:	4629      	mov	r1, r5
 800eb26:	f7f1 fbd9 	bl	80002dc <__adddf3>
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	4690      	mov	r8, r2
 800eb30:	4699      	mov	r9, r3
 800eb32:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800eb34:	f7f1 fd30 	bl	8000598 <__aeabi_f2d>
 800eb38:	f04f 0200 	mov.w	r2, #0
 800eb3c:	4b5a      	ldr	r3, [pc, #360]	@ (800eca8 <MOT_getStType+0x368>)
 800eb3e:	f7f1 fd83 	bl	8000648 <__aeabi_dmul>
 800eb42:	4602      	mov	r2, r0
 800eb44:	460b      	mov	r3, r1
 800eb46:	4614      	mov	r4, r2
 800eb48:	461d      	mov	r5, r3
 800eb4a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800eb4c:	f7f1 fd24 	bl	8000598 <__aeabi_f2d>
 800eb50:	4602      	mov	r2, r0
 800eb52:	460b      	mov	r3, r1
 800eb54:	4620      	mov	r0, r4
 800eb56:	4629      	mov	r1, r5
 800eb58:	f7f1 fd76 	bl	8000648 <__aeabi_dmul>
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	460b      	mov	r3, r1
 800eb60:	4614      	mov	r4, r2
 800eb62:	461d      	mov	r5, r3
 800eb64:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800eb66:	f7f1 fd17 	bl	8000598 <__aeabi_f2d>
 800eb6a:	4602      	mov	r2, r0
 800eb6c:	460b      	mov	r3, r1
 800eb6e:	4620      	mov	r0, r4
 800eb70:	4629      	mov	r1, r5
 800eb72:	f7f1 fd69 	bl	8000648 <__aeabi_dmul>
 800eb76:	4602      	mov	r2, r0
 800eb78:	460b      	mov	r3, r1
 800eb7a:	4640      	mov	r0, r8
 800eb7c:	4649      	mov	r1, r9
 800eb7e:	f7f1 fbad 	bl	80002dc <__adddf3>
 800eb82:	4602      	mov	r2, r0
 800eb84:	460b      	mov	r3, r1
 800eb86:	4610      	mov	r0, r2
 800eb88:	4619      	mov	r1, r3
 800eb8a:	f7f2 f855 	bl	8000c38 <__aeabi_d2f>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	65bb      	str	r3, [r7, #88]	@ 0x58
	f_l_acc_accConst	= ((f_fin-f_v_accJerk)*(f_fin-f_v_accJerk)
 800eb92:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800eb96:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800eb9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eb9e:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800eba2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800eba6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ebaa:	ee27 7a27 	vmul.f32	s14, s14, s15
							-(f_MotNowSpeed+f_v_accJerk)*(f_MotNowSpeed+f_v_accJerk))
 800ebae:	4b40      	ldr	r3, [pc, #256]	@ (800ecb0 <MOT_getStType+0x370>)
 800ebb0:	edd3 6a00 	vldr	s13, [r3]
 800ebb4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800ebb8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ebbc:	4b3c      	ldr	r3, [pc, #240]	@ (800ecb0 <MOT_getStType+0x370>)
 800ebbe:	ed93 6a00 	vldr	s12, [r3]
 800ebc2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800ebc6:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ebca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ebce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebd2:	ee17 0a90 	vmov	r0, s15
 800ebd6:	f7f1 fcdf 	bl	8000598 <__aeabi_f2d>
 800ebda:	4604      	mov	r4, r0
 800ebdc:	460d      	mov	r5, r1
							/( f_acc1 * 2.0 );
 800ebde:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ebe0:	f7f1 fcda 	bl	8000598 <__aeabi_f2d>
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	460b      	mov	r3, r1
 800ebe8:	f7f1 fb78 	bl	80002dc <__adddf3>
 800ebec:	4602      	mov	r2, r0
 800ebee:	460b      	mov	r3, r1
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	4629      	mov	r1, r5
 800ebf4:	f7f1 fe52 	bl	800089c <__aeabi_ddiv>
 800ebf8:	4602      	mov	r2, r0
 800ebfa:	460b      	mov	r3, r1
	f_l_acc_accConst	= ((f_fin-f_v_accJerk)*(f_fin-f_v_accJerk)
 800ebfc:	4610      	mov	r0, r2
 800ebfe:	4619      	mov	r1, r3
 800ec00:	f7f2 f81a 	bl	8000c38 <__aeabi_d2f>
 800ec04:	4603      	mov	r3, r0
 800ec06:	657b      	str	r3, [r7, #84]	@ 0x54
	f_l1	= f_l_acc_accJerk + f_l_acc_decJerk + f_l_acc_accConst;
 800ec08:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800ec0c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800ec10:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec14:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800ec18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec1c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

//	printf("1, %f ,2, %f ,3, %f\n\r",f_l_acc_accJerk,f_l_acc_accConst,f_l_acc_decJerk);
//	printf("l, %f\r\n",f_l1);
	/*  加速＋等速動作 */
	if( f_total <= ( f_l1 + MOT_MOVE_ST_THRESHOLD ) ){
 800ec20:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800ec22:	f7f1 fcb9 	bl	8000598 <__aeabi_f2d>
 800ec26:	4604      	mov	r4, r0
 800ec28:	460d      	mov	r5, r1
 800ec2a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ec2c:	f7f1 fcb4 	bl	8000598 <__aeabi_f2d>
 800ec30:	a317      	add	r3, pc, #92	@ (adr r3, 800ec90 <MOT_getStType+0x350>)
 800ec32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec36:	f7f1 fb51 	bl	80002dc <__adddf3>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	460b      	mov	r3, r1
 800ec3e:	4620      	mov	r0, r4
 800ec40:	4629      	mov	r1, r5
 800ec42:	f7f1 ff7d 	bl	8000b40 <__aeabi_dcmple>
 800ec46:	4603      	mov	r3, r0
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d033      	beq.n	800ecb4 <MOT_getStType+0x374>

		/* 加速が最終速度に対して完了しない */
		if( f_total < ( f_l1 + MOT_MOVE_ST_MIN ) ){
 800ec4c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800ec4e:	f7f1 fca3 	bl	8000598 <__aeabi_f2d>
 800ec52:	4604      	mov	r4, r0
 800ec54:	460d      	mov	r5, r1
 800ec56:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ec58:	f7f1 fc9e 	bl	8000598 <__aeabi_f2d>
 800ec5c:	a30e      	add	r3, pc, #56	@ (adr r3, 800ec98 <MOT_getStType+0x358>)
 800ec5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec62:	f7f1 fb3b 	bl	80002dc <__adddf3>
 800ec66:	4602      	mov	r2, r0
 800ec68:	460b      	mov	r3, r1
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	4629      	mov	r1, r5
 800ec6e:	f7f1 ff5d 	bl	8000b2c <__aeabi_dcmplt>
 800ec72:	4603      	mov	r3, r0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d002      	beq.n	800ec7e <MOT_getStType+0x33e>
//			printf("パターン4\n\r");
			return MOT_ACC_CONST_CUSTOM;		// パターン4（強制的に加速度を変更する）
 800ec78:	2304      	movs	r3, #4
 800ec7a:	f000 bc70 	b.w	800f55e <MOT_getStType+0xc1e>
		}
		else{
//			printf("パターン3\n\r");
			return MOT_ACC_CONST;				// パターン3（加速＋等速）
 800ec7e:	2303      	movs	r3, #3
 800ec80:	f000 bc6d 	b.w	800f55e <MOT_getStType+0xc1e>
 800ec84:	f3af 8000 	nop.w
 800ec88:	55555555 	.word	0x55555555
 800ec8c:	3fc55555 	.word	0x3fc55555
 800ec90:	76c8b439 	.word	0x76c8b439
 800ec94:	3f8a9fbe 	.word	0x3f8a9fbe
 800ec98:	47ae147b 	.word	0x47ae147b
 800ec9c:	3f847ae1 	.word	0x3f847ae1
 800eca0:	3db851ec 	.word	0x3db851ec
 800eca4:	3e0255b0 	.word	0x3e0255b0
 800eca8:	3fe00000 	.word	0x3fe00000
 800ecac:	20017b2c 	.word	0x20017b2c
 800ecb0:	20017bcc 	.word	0x20017bcc
//	f_acc3		= MOT_getAcc3();				// 加速度3[mm/s^2]
//	f_t3		= f_v3Div / ( f_acc3 * -1.0 );

//	f_l3 = ( f_MotNowSpeed + f_fin ) * 0.5f * f_t3;

	f_accTime			= f_acc3/f_Jerk;
 800ecb4:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 800ecb8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800ecbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ecc0:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	f_v_accJerk			= 1.0/2.0*f_Jerk*f_accTime*f_accTime;
 800ecc4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800ecc6:	f7f1 fc67 	bl	8000598 <__aeabi_f2d>
 800ecca:	f04f 0200 	mov.w	r2, #0
 800ecce:	4bbe      	ldr	r3, [pc, #760]	@ (800efc8 <MOT_getStType+0x688>)
 800ecd0:	f7f1 fcba 	bl	8000648 <__aeabi_dmul>
 800ecd4:	4602      	mov	r2, r0
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	4614      	mov	r4, r2
 800ecda:	461d      	mov	r5, r3
 800ecdc:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ecde:	f7f1 fc5b 	bl	8000598 <__aeabi_f2d>
 800ece2:	4602      	mov	r2, r0
 800ece4:	460b      	mov	r3, r1
 800ece6:	4620      	mov	r0, r4
 800ece8:	4629      	mov	r1, r5
 800ecea:	f7f1 fcad 	bl	8000648 <__aeabi_dmul>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	4614      	mov	r4, r2
 800ecf4:	461d      	mov	r5, r3
 800ecf6:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ecf8:	f7f1 fc4e 	bl	8000598 <__aeabi_f2d>
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	460b      	mov	r3, r1
 800ed00:	4620      	mov	r0, r4
 800ed02:	4629      	mov	r1, r5
 800ed04:	f7f1 fca0 	bl	8000648 <__aeabi_dmul>
 800ed08:	4602      	mov	r2, r0
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	4610      	mov	r0, r2
 800ed0e:	4619      	mov	r1, r3
 800ed10:	f7f1 ff92 	bl	8000c38 <__aeabi_d2f>
 800ed14:	4603      	mov	r3, r0
 800ed16:	663b      	str	r3, [r7, #96]	@ 0x60
	f_l_acc_decJerk		= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;
 800ed18:	4bac      	ldr	r3, [pc, #688]	@ (800efcc <MOT_getStType+0x68c>)
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7f1 fc3b 	bl	8000598 <__aeabi_f2d>
 800ed22:	a3a3      	add	r3, pc, #652	@ (adr r3, 800efb0 <MOT_getStType+0x670>)
 800ed24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed28:	f7f1 fc8e 	bl	8000648 <__aeabi_dmul>
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	460b      	mov	r3, r1
 800ed30:	4692      	mov	sl, r2
 800ed32:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 800ed36:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ed38:	f7f1 fc2e 	bl	8000598 <__aeabi_f2d>
 800ed3c:	4602      	mov	r2, r0
 800ed3e:	460b      	mov	r3, r1
 800ed40:	4650      	mov	r0, sl
 800ed42:	4659      	mov	r1, fp
 800ed44:	f7f1 fc80 	bl	8000648 <__aeabi_dmul>
 800ed48:	4602      	mov	r2, r0
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	4614      	mov	r4, r2
 800ed4e:	461d      	mov	r5, r3
 800ed50:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ed52:	f7f1 fc21 	bl	8000598 <__aeabi_f2d>
 800ed56:	4602      	mov	r2, r0
 800ed58:	460b      	mov	r3, r1
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	4629      	mov	r1, r5
 800ed5e:	f7f1 fc73 	bl	8000648 <__aeabi_dmul>
 800ed62:	4602      	mov	r2, r0
 800ed64:	460b      	mov	r3, r1
 800ed66:	4614      	mov	r4, r2
 800ed68:	461d      	mov	r5, r3
 800ed6a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ed6c:	f7f1 fc14 	bl	8000598 <__aeabi_f2d>
 800ed70:	4602      	mov	r2, r0
 800ed72:	460b      	mov	r3, r1
 800ed74:	4620      	mov	r0, r4
 800ed76:	4629      	mov	r1, r5
 800ed78:	f7f1 fc66 	bl	8000648 <__aeabi_dmul>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	460b      	mov	r3, r1
 800ed80:	4614      	mov	r4, r2
 800ed82:	461d      	mov	r5, r3
 800ed84:	4b92      	ldr	r3, [pc, #584]	@ (800efd0 <MOT_getStType+0x690>)
 800ed86:	ed93 7a00 	vldr	s14, [r3]
 800ed8a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800ed8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed92:	ee17 0a90 	vmov	r0, s15
 800ed96:	f7f1 fbff 	bl	8000598 <__aeabi_f2d>
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	4620      	mov	r0, r4
 800eda0:	4629      	mov	r1, r5
 800eda2:	f7f1 fa9b 	bl	80002dc <__adddf3>
 800eda6:	4602      	mov	r2, r0
 800eda8:	460b      	mov	r3, r1
 800edaa:	4610      	mov	r0, r2
 800edac:	4619      	mov	r1, r3
 800edae:	f7f1 ff43 	bl	8000c38 <__aeabi_d2f>
 800edb2:	4603      	mov	r3, r0
 800edb4:	65bb      	str	r3, [r7, #88]	@ 0x58
	f_l_acc_accJerk		= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + (f_fin+f_v_accJerk)*f_accTime+ 1.0/2.0*f_acc3*(-1.0)*f_accTime*f_accTime;
 800edb6:	4b85      	ldr	r3, [pc, #532]	@ (800efcc <MOT_getStType+0x68c>)
 800edb8:	685b      	ldr	r3, [r3, #4]
 800edba:	4618      	mov	r0, r3
 800edbc:	f7f1 fbec 	bl	8000598 <__aeabi_f2d>
 800edc0:	a37b      	add	r3, pc, #492	@ (adr r3, 800efb0 <MOT_getStType+0x670>)
 800edc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc6:	f7f1 fc3f 	bl	8000648 <__aeabi_dmul>
 800edca:	4602      	mov	r2, r0
 800edcc:	460b      	mov	r3, r1
 800edce:	633a      	str	r2, [r7, #48]	@ 0x30
 800edd0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800edd4:	637b      	str	r3, [r7, #52]	@ 0x34
 800edd6:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800edd8:	f7f1 fbde 	bl	8000598 <__aeabi_f2d>
 800eddc:	4602      	mov	r2, r0
 800edde:	460b      	mov	r3, r1
 800ede0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800ede4:	f7f1 fc30 	bl	8000648 <__aeabi_dmul>
 800ede8:	4602      	mov	r2, r0
 800edea:	460b      	mov	r3, r1
 800edec:	4614      	mov	r4, r2
 800edee:	461d      	mov	r5, r3
 800edf0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800edf2:	f7f1 fbd1 	bl	8000598 <__aeabi_f2d>
 800edf6:	4602      	mov	r2, r0
 800edf8:	460b      	mov	r3, r1
 800edfa:	4620      	mov	r0, r4
 800edfc:	4629      	mov	r1, r5
 800edfe:	f7f1 fc23 	bl	8000648 <__aeabi_dmul>
 800ee02:	4602      	mov	r2, r0
 800ee04:	460b      	mov	r3, r1
 800ee06:	4614      	mov	r4, r2
 800ee08:	461d      	mov	r5, r3
 800ee0a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ee0c:	f7f1 fbc4 	bl	8000598 <__aeabi_f2d>
 800ee10:	4602      	mov	r2, r0
 800ee12:	460b      	mov	r3, r1
 800ee14:	4620      	mov	r0, r4
 800ee16:	4629      	mov	r1, r5
 800ee18:	f7f1 fc16 	bl	8000648 <__aeabi_dmul>
 800ee1c:	4602      	mov	r2, r0
 800ee1e:	460b      	mov	r3, r1
 800ee20:	4614      	mov	r4, r2
 800ee22:	461d      	mov	r5, r3
 800ee24:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800ee28:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800ee2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ee30:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800ee34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee38:	ee17 0a90 	vmov	r0, s15
 800ee3c:	f7f1 fbac 	bl	8000598 <__aeabi_f2d>
 800ee40:	4602      	mov	r2, r0
 800ee42:	460b      	mov	r3, r1
 800ee44:	4620      	mov	r0, r4
 800ee46:	4629      	mov	r1, r5
 800ee48:	f7f1 fa48 	bl	80002dc <__adddf3>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	460b      	mov	r3, r1
 800ee50:	4690      	mov	r8, r2
 800ee52:	4699      	mov	r9, r3
 800ee54:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800ee56:	f7f1 fb9f 	bl	8000598 <__aeabi_f2d>
 800ee5a:	f04f 0200 	mov.w	r2, #0
 800ee5e:	4b5a      	ldr	r3, [pc, #360]	@ (800efc8 <MOT_getStType+0x688>)
 800ee60:	f7f1 fbf2 	bl	8000648 <__aeabi_dmul>
 800ee64:	4602      	mov	r2, r0
 800ee66:	460b      	mov	r3, r1
 800ee68:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ee6a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800ee6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ee70:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ee72:	f7f1 fb91 	bl	8000598 <__aeabi_f2d>
 800ee76:	4602      	mov	r2, r0
 800ee78:	460b      	mov	r3, r1
 800ee7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ee7e:	f7f1 fbe3 	bl	8000648 <__aeabi_dmul>
 800ee82:	4602      	mov	r2, r0
 800ee84:	460b      	mov	r3, r1
 800ee86:	4614      	mov	r4, r2
 800ee88:	461d      	mov	r5, r3
 800ee8a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ee8c:	f7f1 fb84 	bl	8000598 <__aeabi_f2d>
 800ee90:	4602      	mov	r2, r0
 800ee92:	460b      	mov	r3, r1
 800ee94:	4620      	mov	r0, r4
 800ee96:	4629      	mov	r1, r5
 800ee98:	f7f1 fbd6 	bl	8000648 <__aeabi_dmul>
 800ee9c:	4602      	mov	r2, r0
 800ee9e:	460b      	mov	r3, r1
 800eea0:	4640      	mov	r0, r8
 800eea2:	4649      	mov	r1, r9
 800eea4:	f7f1 fa1a 	bl	80002dc <__adddf3>
 800eea8:	4602      	mov	r2, r0
 800eeaa:	460b      	mov	r3, r1
 800eeac:	4610      	mov	r0, r2
 800eeae:	4619      	mov	r1, r3
 800eeb0:	f7f1 fec2 	bl	8000c38 <__aeabi_d2f>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	f_l_acc_accConst	= ((f_fin-f_v_accJerk)*(f_fin-f_v_accJerk)
 800eeb8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800eebc:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800eec0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eec4:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800eec8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800eecc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800eed0:	ee27 7a27 	vmul.f32	s14, s14, s15
							-(f_MotNowSpeed+f_v_accJerk)*(f_MotNowSpeed+f_v_accJerk))
 800eed4:	4b3e      	ldr	r3, [pc, #248]	@ (800efd0 <MOT_getStType+0x690>)
 800eed6:	edd3 6a00 	vldr	s13, [r3]
 800eeda:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800eede:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800eee2:	4b3b      	ldr	r3, [pc, #236]	@ (800efd0 <MOT_getStType+0x690>)
 800eee4:	ed93 6a00 	vldr	s12, [r3]
 800eee8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800eeec:	ee76 7a27 	vadd.f32	s15, s12, s15
 800eef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eef8:	ee17 0a90 	vmov	r0, s15
 800eefc:	f7f1 fb4c 	bl	8000598 <__aeabi_f2d>
 800ef00:	4602      	mov	r2, r0
 800ef02:	460b      	mov	r3, r1
							/( f_acc3 * 2.0 *(-1.0));
 800ef04:	623a      	str	r2, [r7, #32]
 800ef06:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800ef0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef0c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800ef0e:	f7f1 fb43 	bl	8000598 <__aeabi_f2d>
 800ef12:	4602      	mov	r2, r0
 800ef14:	460b      	mov	r3, r1
 800ef16:	f7f1 f9e1 	bl	80002dc <__adddf3>
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ef22:	f7f1 fcbb 	bl	800089c <__aeabi_ddiv>
 800ef26:	4602      	mov	r2, r0
 800ef28:	460b      	mov	r3, r1
	f_l_acc_accConst	= ((f_fin-f_v_accJerk)*(f_fin-f_v_accJerk)
 800ef2a:	4610      	mov	r0, r2
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	f7f1 fe83 	bl	8000c38 <__aeabi_d2f>
 800ef32:	4603      	mov	r3, r0
 800ef34:	657b      	str	r3, [r7, #84]	@ 0x54
	
	f_l3	= f_l_acc_decJerk + f_l_acc_accJerk + f_l_acc_accConst;
 800ef36:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800ef3a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800ef3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef42:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800ef46:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef4a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

//	printf("1, %f ,2, %f ,3, %f\n\r",f_l_acc_accJerk,f_l_acc_accConst,f_l_acc_decJerk);
//	printf("l, %f\r\n",f_l3);
	/* 等速＋減速動作 */
	if( f_total <= ( f_l3 + MOT_MOVE_ST_THRESHOLD ) ){
 800ef4e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800ef50:	f7f1 fb22 	bl	8000598 <__aeabi_f2d>
 800ef54:	4604      	mov	r4, r0
 800ef56:	460d      	mov	r5, r1
 800ef58:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ef5a:	f7f1 fb1d 	bl	8000598 <__aeabi_f2d>
 800ef5e:	a316      	add	r3, pc, #88	@ (adr r3, 800efb8 <MOT_getStType+0x678>)
 800ef60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef64:	f7f1 f9ba 	bl	80002dc <__adddf3>
 800ef68:	4602      	mov	r2, r0
 800ef6a:	460b      	mov	r3, r1
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	4629      	mov	r1, r5
 800ef70:	f7f1 fde6 	bl	8000b40 <__aeabi_dcmple>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d02c      	beq.n	800efd4 <MOT_getStType+0x694>

		/* 減速が最終速度に対して完了しない */
		if( f_total < ( f_l3 + MOT_MOVE_ST_MIN ) ){
 800ef7a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800ef7c:	f7f1 fb0c 	bl	8000598 <__aeabi_f2d>
 800ef80:	4604      	mov	r4, r0
 800ef82:	460d      	mov	r5, r1
 800ef84:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ef86:	f7f1 fb07 	bl	8000598 <__aeabi_f2d>
 800ef8a:	a30d      	add	r3, pc, #52	@ (adr r3, 800efc0 <MOT_getStType+0x680>)
 800ef8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef90:	f7f1 f9a4 	bl	80002dc <__adddf3>
 800ef94:	4602      	mov	r2, r0
 800ef96:	460b      	mov	r3, r1
 800ef98:	4620      	mov	r0, r4
 800ef9a:	4629      	mov	r1, r5
 800ef9c:	f7f1 fdc6 	bl	8000b2c <__aeabi_dcmplt>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d001      	beq.n	800efaa <MOT_getStType+0x66a>
//			printf("パターン6\n\r");
			return MOT_CONST_DEC_CUSTOM;		// パターン6（強制的に加速度を変更する）
 800efa6:	2306      	movs	r3, #6
 800efa8:	e2d9      	b.n	800f55e <MOT_getStType+0xc1e>
		}
		else{
//			printf("パターン5\n\r");
			return MOT_CONST_DEC;				// パターン5（等速＋減速）
 800efaa:	2305      	movs	r3, #5
 800efac:	e2d7      	b.n	800f55e <MOT_getStType+0xc1e>
 800efae:	bf00      	nop
 800efb0:	55555555 	.word	0x55555555
 800efb4:	3fc55555 	.word	0x3fc55555
 800efb8:	76c8b439 	.word	0x76c8b439
 800efbc:	3f8a9fbe 	.word	0x3f8a9fbe
 800efc0:	47ae147b 	.word	0x47ae147b
 800efc4:	3f847ae1 	.word	0x3f847ae1
 800efc8:	3fe00000 	.word	0x3fe00000
 800efcc:	20017b2c 	.word	0x20017b2c
 800efd0:	20017bcc 	.word	0x20017bcc
	f_acc3		= MOT_getAcc3();									// 加速度3[mm/s^2]
	f_t3		= -1.0f * f_v3Div / f_acc3;							// 減速時の所要時間
	f_l3		= ( f_MotTrgtSpeed + f_fin ) * 0.5f * f_t3;
*/

	f_accTime			= f_acc1/f_Jerk;
 800efd4:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800efd8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800efdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800efe0:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	f_v_accJerk			= 1.0/2.0*f_Jerk*f_accTime*f_accTime;
 800efe4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800efe6:	f7f1 fad7 	bl	8000598 <__aeabi_f2d>
 800efea:	f04f 0200 	mov.w	r2, #0
 800efee:	4be0      	ldr	r3, [pc, #896]	@ (800f370 <MOT_getStType+0xa30>)
 800eff0:	f7f1 fb2a 	bl	8000648 <__aeabi_dmul>
 800eff4:	4602      	mov	r2, r0
 800eff6:	460b      	mov	r3, r1
 800eff8:	4614      	mov	r4, r2
 800effa:	461d      	mov	r5, r3
 800effc:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800effe:	f7f1 facb 	bl	8000598 <__aeabi_f2d>
 800f002:	4602      	mov	r2, r0
 800f004:	460b      	mov	r3, r1
 800f006:	4620      	mov	r0, r4
 800f008:	4629      	mov	r1, r5
 800f00a:	f7f1 fb1d 	bl	8000648 <__aeabi_dmul>
 800f00e:	4602      	mov	r2, r0
 800f010:	460b      	mov	r3, r1
 800f012:	4614      	mov	r4, r2
 800f014:	461d      	mov	r5, r3
 800f016:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f018:	f7f1 fabe 	bl	8000598 <__aeabi_f2d>
 800f01c:	4602      	mov	r2, r0
 800f01e:	460b      	mov	r3, r1
 800f020:	4620      	mov	r0, r4
 800f022:	4629      	mov	r1, r5
 800f024:	f7f1 fb10 	bl	8000648 <__aeabi_dmul>
 800f028:	4602      	mov	r2, r0
 800f02a:	460b      	mov	r3, r1
 800f02c:	4610      	mov	r0, r2
 800f02e:	4619      	mov	r1, r3
 800f030:	f7f1 fe02 	bl	8000c38 <__aeabi_d2f>
 800f034:	4603      	mov	r3, r0
 800f036:	663b      	str	r3, [r7, #96]	@ 0x60
	f_l_acc_accJerk		= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;
 800f038:	4bce      	ldr	r3, [pc, #824]	@ (800f374 <MOT_getStType+0xa34>)
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7f1 faab 	bl	8000598 <__aeabi_f2d>
 800f042:	a3c9      	add	r3, pc, #804	@ (adr r3, 800f368 <MOT_getStType+0xa28>)
 800f044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f048:	f7f1 fafe 	bl	8000648 <__aeabi_dmul>
 800f04c:	4602      	mov	r2, r0
 800f04e:	460b      	mov	r3, r1
 800f050:	4614      	mov	r4, r2
 800f052:	461d      	mov	r5, r3
 800f054:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f056:	f7f1 fa9f 	bl	8000598 <__aeabi_f2d>
 800f05a:	4602      	mov	r2, r0
 800f05c:	460b      	mov	r3, r1
 800f05e:	4620      	mov	r0, r4
 800f060:	4629      	mov	r1, r5
 800f062:	f7f1 faf1 	bl	8000648 <__aeabi_dmul>
 800f066:	4602      	mov	r2, r0
 800f068:	460b      	mov	r3, r1
 800f06a:	4614      	mov	r4, r2
 800f06c:	461d      	mov	r5, r3
 800f06e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f070:	f7f1 fa92 	bl	8000598 <__aeabi_f2d>
 800f074:	4602      	mov	r2, r0
 800f076:	460b      	mov	r3, r1
 800f078:	4620      	mov	r0, r4
 800f07a:	4629      	mov	r1, r5
 800f07c:	f7f1 fae4 	bl	8000648 <__aeabi_dmul>
 800f080:	4602      	mov	r2, r0
 800f082:	460b      	mov	r3, r1
 800f084:	4614      	mov	r4, r2
 800f086:	461d      	mov	r5, r3
 800f088:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f08a:	f7f1 fa85 	bl	8000598 <__aeabi_f2d>
 800f08e:	4602      	mov	r2, r0
 800f090:	460b      	mov	r3, r1
 800f092:	4620      	mov	r0, r4
 800f094:	4629      	mov	r1, r5
 800f096:	f7f1 fad7 	bl	8000648 <__aeabi_dmul>
 800f09a:	4602      	mov	r2, r0
 800f09c:	460b      	mov	r3, r1
 800f09e:	4614      	mov	r4, r2
 800f0a0:	461d      	mov	r5, r3
 800f0a2:	4bb5      	ldr	r3, [pc, #724]	@ (800f378 <MOT_getStType+0xa38>)
 800f0a4:	ed93 7a00 	vldr	s14, [r3]
 800f0a8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800f0ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0b0:	ee17 0a90 	vmov	r0, s15
 800f0b4:	f7f1 fa70 	bl	8000598 <__aeabi_f2d>
 800f0b8:	4602      	mov	r2, r0
 800f0ba:	460b      	mov	r3, r1
 800f0bc:	4620      	mov	r0, r4
 800f0be:	4629      	mov	r1, r5
 800f0c0:	f7f1 f90c 	bl	80002dc <__adddf3>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	4610      	mov	r0, r2
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	f7f1 fdb4 	bl	8000c38 <__aeabi_d2f>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	f_l_acc_decJerk		= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + (f_MotTrgtSpeed-f_v_accJerk)*f_accTime + 1.0/2.0*f_acc1*f_accTime*f_accTime;
 800f0d4:	4ba7      	ldr	r3, [pc, #668]	@ (800f374 <MOT_getStType+0xa34>)
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7f1 fa5d 	bl	8000598 <__aeabi_f2d>
 800f0de:	a3a2      	add	r3, pc, #648	@ (adr r3, 800f368 <MOT_getStType+0xa28>)
 800f0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e4:	f7f1 fab0 	bl	8000648 <__aeabi_dmul>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	4614      	mov	r4, r2
 800f0ee:	461d      	mov	r5, r3
 800f0f0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f0f2:	f7f1 fa51 	bl	8000598 <__aeabi_f2d>
 800f0f6:	4602      	mov	r2, r0
 800f0f8:	460b      	mov	r3, r1
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	4629      	mov	r1, r5
 800f0fe:	f7f1 faa3 	bl	8000648 <__aeabi_dmul>
 800f102:	4602      	mov	r2, r0
 800f104:	460b      	mov	r3, r1
 800f106:	4614      	mov	r4, r2
 800f108:	461d      	mov	r5, r3
 800f10a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f10c:	f7f1 fa44 	bl	8000598 <__aeabi_f2d>
 800f110:	4602      	mov	r2, r0
 800f112:	460b      	mov	r3, r1
 800f114:	4620      	mov	r0, r4
 800f116:	4629      	mov	r1, r5
 800f118:	f7f1 fa96 	bl	8000648 <__aeabi_dmul>
 800f11c:	4602      	mov	r2, r0
 800f11e:	460b      	mov	r3, r1
 800f120:	4614      	mov	r4, r2
 800f122:	461d      	mov	r5, r3
 800f124:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f126:	f7f1 fa37 	bl	8000598 <__aeabi_f2d>
 800f12a:	4602      	mov	r2, r0
 800f12c:	460b      	mov	r3, r1
 800f12e:	4620      	mov	r0, r4
 800f130:	4629      	mov	r1, r5
 800f132:	f7f1 fa89 	bl	8000648 <__aeabi_dmul>
 800f136:	4602      	mov	r2, r0
 800f138:	460b      	mov	r3, r1
 800f13a:	4614      	mov	r4, r2
 800f13c:	461d      	mov	r5, r3
 800f13e:	4b8f      	ldr	r3, [pc, #572]	@ (800f37c <MOT_getStType+0xa3c>)
 800f140:	ed93 7a00 	vldr	s14, [r3]
 800f144:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f148:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f14c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800f150:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f154:	ee17 0a90 	vmov	r0, s15
 800f158:	f7f1 fa1e 	bl	8000598 <__aeabi_f2d>
 800f15c:	4602      	mov	r2, r0
 800f15e:	460b      	mov	r3, r1
 800f160:	4620      	mov	r0, r4
 800f162:	4629      	mov	r1, r5
 800f164:	f7f1 f8ba 	bl	80002dc <__adddf3>
 800f168:	4602      	mov	r2, r0
 800f16a:	460b      	mov	r3, r1
 800f16c:	4690      	mov	r8, r2
 800f16e:	4699      	mov	r9, r3
 800f170:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f172:	f7f1 fa11 	bl	8000598 <__aeabi_f2d>
 800f176:	f04f 0200 	mov.w	r2, #0
 800f17a:	4b7d      	ldr	r3, [pc, #500]	@ (800f370 <MOT_getStType+0xa30>)
 800f17c:	f7f1 fa64 	bl	8000648 <__aeabi_dmul>
 800f180:	4602      	mov	r2, r0
 800f182:	460b      	mov	r3, r1
 800f184:	4614      	mov	r4, r2
 800f186:	461d      	mov	r5, r3
 800f188:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f18a:	f7f1 fa05 	bl	8000598 <__aeabi_f2d>
 800f18e:	4602      	mov	r2, r0
 800f190:	460b      	mov	r3, r1
 800f192:	4620      	mov	r0, r4
 800f194:	4629      	mov	r1, r5
 800f196:	f7f1 fa57 	bl	8000648 <__aeabi_dmul>
 800f19a:	4602      	mov	r2, r0
 800f19c:	460b      	mov	r3, r1
 800f19e:	4614      	mov	r4, r2
 800f1a0:	461d      	mov	r5, r3
 800f1a2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f1a4:	f7f1 f9f8 	bl	8000598 <__aeabi_f2d>
 800f1a8:	4602      	mov	r2, r0
 800f1aa:	460b      	mov	r3, r1
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	4629      	mov	r1, r5
 800f1b0:	f7f1 fa4a 	bl	8000648 <__aeabi_dmul>
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	4640      	mov	r0, r8
 800f1ba:	4649      	mov	r1, r9
 800f1bc:	f7f1 f88e 	bl	80002dc <__adddf3>
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	460b      	mov	r3, r1
 800f1c4:	4610      	mov	r0, r2
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	f7f1 fd36 	bl	8000c38 <__aeabi_d2f>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	65bb      	str	r3, [r7, #88]	@ 0x58
	f_l_acc_accConst	= ((f_MotTrgtSpeed-f_v_accJerk)*(f_MotTrgtSpeed-f_v_accJerk)
 800f1d0:	4b6a      	ldr	r3, [pc, #424]	@ (800f37c <MOT_getStType+0xa3c>)
 800f1d2:	ed93 7a00 	vldr	s14, [r3]
 800f1d6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f1da:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f1de:	4b67      	ldr	r3, [pc, #412]	@ (800f37c <MOT_getStType+0xa3c>)
 800f1e0:	edd3 6a00 	vldr	s13, [r3]
 800f1e4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f1e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f1ec:	ee27 7a27 	vmul.f32	s14, s14, s15
							-(f_MotNowSpeed+f_v_accJerk)*(f_MotNowSpeed+f_v_accJerk))
 800f1f0:	4b61      	ldr	r3, [pc, #388]	@ (800f378 <MOT_getStType+0xa38>)
 800f1f2:	edd3 6a00 	vldr	s13, [r3]
 800f1f6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f1fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f1fe:	4b5e      	ldr	r3, [pc, #376]	@ (800f378 <MOT_getStType+0xa38>)
 800f200:	ed93 6a00 	vldr	s12, [r3]
 800f204:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f208:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f20c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f210:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f214:	ee17 0a90 	vmov	r0, s15
 800f218:	f7f1 f9be 	bl	8000598 <__aeabi_f2d>
 800f21c:	4604      	mov	r4, r0
 800f21e:	460d      	mov	r5, r1
							/( f_acc1 * 2.0 );
 800f220:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f222:	f7f1 f9b9 	bl	8000598 <__aeabi_f2d>
 800f226:	4602      	mov	r2, r0
 800f228:	460b      	mov	r3, r1
 800f22a:	f7f1 f857 	bl	80002dc <__adddf3>
 800f22e:	4602      	mov	r2, r0
 800f230:	460b      	mov	r3, r1
 800f232:	4620      	mov	r0, r4
 800f234:	4629      	mov	r1, r5
 800f236:	f7f1 fb31 	bl	800089c <__aeabi_ddiv>
 800f23a:	4602      	mov	r2, r0
 800f23c:	460b      	mov	r3, r1
	f_l_acc_accConst	= ((f_MotTrgtSpeed-f_v_accJerk)*(f_MotTrgtSpeed-f_v_accJerk)
 800f23e:	4610      	mov	r0, r2
 800f240:	4619      	mov	r1, r3
 800f242:	f7f1 fcf9 	bl	8000c38 <__aeabi_d2f>
 800f246:	4603      	mov	r3, r0
 800f248:	657b      	str	r3, [r7, #84]	@ 0x54

	f_l1	= f_l_acc_accJerk + f_l_acc_decJerk + f_l_acc_accConst;
 800f24a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800f24e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800f252:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f256:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800f25a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f25e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

//	printf("1, %f ,2, %f ,3, %f\n\r",f_l_acc_accJerk,f_l_acc_accConst,f_l_acc_decJerk);
//	printf("l, %f\r\n",f_l1);

	f_accTime			= f_acc3/f_Jerk;
 800f262:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 800f266:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800f26a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f26e:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	f_v_accJerk			= 1.0/2.0*f_Jerk*f_accTime*f_accTime;
 800f272:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800f274:	f7f1 f990 	bl	8000598 <__aeabi_f2d>
 800f278:	f04f 0200 	mov.w	r2, #0
 800f27c:	4b3c      	ldr	r3, [pc, #240]	@ (800f370 <MOT_getStType+0xa30>)
 800f27e:	f7f1 f9e3 	bl	8000648 <__aeabi_dmul>
 800f282:	4602      	mov	r2, r0
 800f284:	460b      	mov	r3, r1
 800f286:	4614      	mov	r4, r2
 800f288:	461d      	mov	r5, r3
 800f28a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f28c:	f7f1 f984 	bl	8000598 <__aeabi_f2d>
 800f290:	4602      	mov	r2, r0
 800f292:	460b      	mov	r3, r1
 800f294:	4620      	mov	r0, r4
 800f296:	4629      	mov	r1, r5
 800f298:	f7f1 f9d6 	bl	8000648 <__aeabi_dmul>
 800f29c:	4602      	mov	r2, r0
 800f29e:	460b      	mov	r3, r1
 800f2a0:	4614      	mov	r4, r2
 800f2a2:	461d      	mov	r5, r3
 800f2a4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f2a6:	f7f1 f977 	bl	8000598 <__aeabi_f2d>
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	4629      	mov	r1, r5
 800f2b2:	f7f1 f9c9 	bl	8000648 <__aeabi_dmul>
 800f2b6:	4602      	mov	r2, r0
 800f2b8:	460b      	mov	r3, r1
 800f2ba:	4610      	mov	r0, r2
 800f2bc:	4619      	mov	r1, r3
 800f2be:	f7f1 fcbb 	bl	8000c38 <__aeabi_d2f>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	663b      	str	r3, [r7, #96]	@ 0x60
	f_l_acc_decJerk		= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + f_MotTrgtSpeed*f_accTime;
 800f2c6:	4b2b      	ldr	r3, [pc, #172]	@ (800f374 <MOT_getStType+0xa34>)
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7f1 f964 	bl	8000598 <__aeabi_f2d>
 800f2d0:	a325      	add	r3, pc, #148	@ (adr r3, 800f368 <MOT_getStType+0xa28>)
 800f2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d6:	f7f1 f9b7 	bl	8000648 <__aeabi_dmul>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	460b      	mov	r3, r1
 800f2de:	61ba      	str	r2, [r7, #24]
 800f2e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800f2e4:	61fb      	str	r3, [r7, #28]
 800f2e6:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f2e8:	f7f1 f956 	bl	8000598 <__aeabi_f2d>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f2f4:	f7f1 f9a8 	bl	8000648 <__aeabi_dmul>
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	4614      	mov	r4, r2
 800f2fe:	461d      	mov	r5, r3
 800f300:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f302:	f7f1 f949 	bl	8000598 <__aeabi_f2d>
 800f306:	4602      	mov	r2, r0
 800f308:	460b      	mov	r3, r1
 800f30a:	4620      	mov	r0, r4
 800f30c:	4629      	mov	r1, r5
 800f30e:	f7f1 f99b 	bl	8000648 <__aeabi_dmul>
 800f312:	4602      	mov	r2, r0
 800f314:	460b      	mov	r3, r1
 800f316:	4614      	mov	r4, r2
 800f318:	461d      	mov	r5, r3
 800f31a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f31c:	f7f1 f93c 	bl	8000598 <__aeabi_f2d>
 800f320:	4602      	mov	r2, r0
 800f322:	460b      	mov	r3, r1
 800f324:	4620      	mov	r0, r4
 800f326:	4629      	mov	r1, r5
 800f328:	f7f1 f98e 	bl	8000648 <__aeabi_dmul>
 800f32c:	4602      	mov	r2, r0
 800f32e:	460b      	mov	r3, r1
 800f330:	4614      	mov	r4, r2
 800f332:	461d      	mov	r5, r3
 800f334:	4b11      	ldr	r3, [pc, #68]	@ (800f37c <MOT_getStType+0xa3c>)
 800f336:	ed93 7a00 	vldr	s14, [r3]
 800f33a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800f33e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f342:	ee17 0a90 	vmov	r0, s15
 800f346:	f7f1 f927 	bl	8000598 <__aeabi_f2d>
 800f34a:	4602      	mov	r2, r0
 800f34c:	460b      	mov	r3, r1
 800f34e:	4620      	mov	r0, r4
 800f350:	4629      	mov	r1, r5
 800f352:	f7f0 ffc3 	bl	80002dc <__adddf3>
 800f356:	4602      	mov	r2, r0
 800f358:	460b      	mov	r3, r1
 800f35a:	4610      	mov	r0, r2
 800f35c:	4619      	mov	r1, r3
 800f35e:	f7f1 fc6b 	bl	8000c38 <__aeabi_d2f>
 800f362:	4603      	mov	r3, r0
 800f364:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f366:	e00b      	b.n	800f380 <MOT_getStType+0xa40>
 800f368:	55555555 	.word	0x55555555
 800f36c:	3fc55555 	.word	0x3fc55555
 800f370:	3fe00000 	.word	0x3fe00000
 800f374:	20017b2c 	.word	0x20017b2c
 800f378:	20017bcc 	.word	0x20017bcc
 800f37c:	20017bd0 	.word	0x20017bd0
	f_l_acc_accJerk		= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + (f_fin+f_v_accJerk)*f_accTime + 1.0/2.0*f_acc3*(-1.0)*f_accTime*f_accTime;
 800f380:	4b7d      	ldr	r3, [pc, #500]	@ (800f578 <MOT_getStType+0xc38>)
 800f382:	685b      	ldr	r3, [r3, #4]
 800f384:	4618      	mov	r0, r3
 800f386:	f7f1 f907 	bl	8000598 <__aeabi_f2d>
 800f38a:	a377      	add	r3, pc, #476	@ (adr r3, 800f568 <MOT_getStType+0xc28>)
 800f38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f390:	f7f1 f95a 	bl	8000648 <__aeabi_dmul>
 800f394:	4602      	mov	r2, r0
 800f396:	460b      	mov	r3, r1
 800f398:	613a      	str	r2, [r7, #16]
 800f39a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800f39e:	617b      	str	r3, [r7, #20]
 800f3a0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f3a2:	f7f1 f8f9 	bl	8000598 <__aeabi_f2d>
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	460b      	mov	r3, r1
 800f3aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f3ae:	f7f1 f94b 	bl	8000648 <__aeabi_dmul>
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	4614      	mov	r4, r2
 800f3b8:	461d      	mov	r5, r3
 800f3ba:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f3bc:	f7f1 f8ec 	bl	8000598 <__aeabi_f2d>
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	460b      	mov	r3, r1
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	4629      	mov	r1, r5
 800f3c8:	f7f1 f93e 	bl	8000648 <__aeabi_dmul>
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	460b      	mov	r3, r1
 800f3d0:	4614      	mov	r4, r2
 800f3d2:	461d      	mov	r5, r3
 800f3d4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f3d6:	f7f1 f8df 	bl	8000598 <__aeabi_f2d>
 800f3da:	4602      	mov	r2, r0
 800f3dc:	460b      	mov	r3, r1
 800f3de:	4620      	mov	r0, r4
 800f3e0:	4629      	mov	r1, r5
 800f3e2:	f7f1 f931 	bl	8000648 <__aeabi_dmul>
 800f3e6:	4602      	mov	r2, r0
 800f3e8:	460b      	mov	r3, r1
 800f3ea:	4614      	mov	r4, r2
 800f3ec:	461d      	mov	r5, r3
 800f3ee:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800f3f2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f3f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3fa:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800f3fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f402:	ee17 0a90 	vmov	r0, s15
 800f406:	f7f1 f8c7 	bl	8000598 <__aeabi_f2d>
 800f40a:	4602      	mov	r2, r0
 800f40c:	460b      	mov	r3, r1
 800f40e:	4620      	mov	r0, r4
 800f410:	4629      	mov	r1, r5
 800f412:	f7f0 ff63 	bl	80002dc <__adddf3>
 800f416:	4602      	mov	r2, r0
 800f418:	460b      	mov	r3, r1
 800f41a:	4614      	mov	r4, r2
 800f41c:	461d      	mov	r5, r3
 800f41e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800f420:	f7f1 f8ba 	bl	8000598 <__aeabi_f2d>
 800f424:	f04f 0200 	mov.w	r2, #0
 800f428:	4b54      	ldr	r3, [pc, #336]	@ (800f57c <MOT_getStType+0xc3c>)
 800f42a:	f7f1 f90d 	bl	8000648 <__aeabi_dmul>
 800f42e:	4602      	mov	r2, r0
 800f430:	460b      	mov	r3, r1
 800f432:	60ba      	str	r2, [r7, #8]
 800f434:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800f438:	60fb      	str	r3, [r7, #12]
 800f43a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f43c:	f7f1 f8ac 	bl	8000598 <__aeabi_f2d>
 800f440:	4602      	mov	r2, r0
 800f442:	460b      	mov	r3, r1
 800f444:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f448:	f7f1 f8fe 	bl	8000648 <__aeabi_dmul>
 800f44c:	4602      	mov	r2, r0
 800f44e:	460b      	mov	r3, r1
 800f450:	4690      	mov	r8, r2
 800f452:	4699      	mov	r9, r3
 800f454:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f456:	f7f1 f89f 	bl	8000598 <__aeabi_f2d>
 800f45a:	4602      	mov	r2, r0
 800f45c:	460b      	mov	r3, r1
 800f45e:	4640      	mov	r0, r8
 800f460:	4649      	mov	r1, r9
 800f462:	f7f1 f8f1 	bl	8000648 <__aeabi_dmul>
 800f466:	4602      	mov	r2, r0
 800f468:	460b      	mov	r3, r1
 800f46a:	4620      	mov	r0, r4
 800f46c:	4629      	mov	r1, r5
 800f46e:	f7f0 ff35 	bl	80002dc <__adddf3>
 800f472:	4602      	mov	r2, r0
 800f474:	460b      	mov	r3, r1
 800f476:	4610      	mov	r0, r2
 800f478:	4619      	mov	r1, r3
 800f47a:	f7f1 fbdd 	bl	8000c38 <__aeabi_d2f>
 800f47e:	4603      	mov	r3, r0
 800f480:	65fb      	str	r3, [r7, #92]	@ 0x5c
	f_l_acc_accConst	= ((f_fin-f_v_accJerk)*(f_fin-f_v_accJerk)
 800f482:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800f486:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f48a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f48e:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800f492:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f496:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f49a:	ee27 7a27 	vmul.f32	s14, s14, s15
							-(f_MotTrgtSpeed+f_v_accJerk)*(f_MotTrgtSpeed+f_v_accJerk))
 800f49e:	4b38      	ldr	r3, [pc, #224]	@ (800f580 <MOT_getStType+0xc40>)
 800f4a0:	edd3 6a00 	vldr	s13, [r3]
 800f4a4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f4a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f4ac:	4b34      	ldr	r3, [pc, #208]	@ (800f580 <MOT_getStType+0xc40>)
 800f4ae:	ed93 6a00 	vldr	s12, [r3]
 800f4b2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f4b6:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f4ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f4be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4c2:	ee17 0a90 	vmov	r0, s15
 800f4c6:	f7f1 f867 	bl	8000598 <__aeabi_f2d>
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	460b      	mov	r3, r1
							/( f_acc3 * 2.0 * (-1.0));
 800f4ce:	603a      	str	r2, [r7, #0]
 800f4d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800f4d4:	607b      	str	r3, [r7, #4]
 800f4d6:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800f4d8:	f7f1 f85e 	bl	8000598 <__aeabi_f2d>
 800f4dc:	4602      	mov	r2, r0
 800f4de:	460b      	mov	r3, r1
 800f4e0:	f7f0 fefc 	bl	80002dc <__adddf3>
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	460b      	mov	r3, r1
 800f4e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f4ec:	f7f1 f9d6 	bl	800089c <__aeabi_ddiv>
 800f4f0:	4602      	mov	r2, r0
 800f4f2:	460b      	mov	r3, r1
	f_l_acc_accConst	= ((f_fin-f_v_accJerk)*(f_fin-f_v_accJerk)
 800f4f4:	4610      	mov	r0, r2
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	f7f1 fb9e 	bl	8000c38 <__aeabi_d2f>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	657b      	str	r3, [r7, #84]	@ 0x54
	
	f_l3	= f_l_acc_decJerk + f_l_acc_accJerk + f_l_acc_accConst;
 800f500:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800f504:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800f508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f50c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800f510:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f514:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

//	printf("1, %f ,2, %f ,3, %f\n\r",f_l_acc_accJerk,f_l_acc_accConst,f_l_acc_decJerk);
//	printf("l, %f\r\n",f_l3);

	/* 通常の台形動作 */
	if( ( f_total - f_l1 - f_l3 - MOT_MOVE_ST_MIN) >= 0 ){
 800f518:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800f51c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800f520:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f524:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800f528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f52c:	ee17 0a90 	vmov	r0, s15
 800f530:	f7f1 f832 	bl	8000598 <__aeabi_f2d>
 800f534:	a30e      	add	r3, pc, #56	@ (adr r3, 800f570 <MOT_getStType+0xc30>)
 800f536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53a:	f7f0 fecd 	bl	80002d8 <__aeabi_dsub>
 800f53e:	4602      	mov	r2, r0
 800f540:	460b      	mov	r3, r1
 800f542:	4610      	mov	r0, r2
 800f544:	4619      	mov	r1, r3
 800f546:	f04f 0200 	mov.w	r2, #0
 800f54a:	f04f 0300 	mov.w	r3, #0
 800f54e:	f7f1 fb01 	bl	8000b54 <__aeabi_dcmpge>
 800f552:	4603      	mov	r3, r0
 800f554:	2b00      	cmp	r3, #0
 800f556:	d001      	beq.n	800f55c <MOT_getStType+0xc1c>
//		printf("パターン1\n\r");
		return MOT_ACC_CONST_DEC;				// パターン1（通常）
 800f558:	2301      	movs	r3, #1
 800f55a:	e000      	b.n	800f55e <MOT_getStType+0xc1e>
	}
	/* 等速値を変更する */
	else{
//		printf("パターン2\n\r");
		return MOT_ACC_CONST_DEC_CUSTOM;		// パターン2（目標速度を変更）
 800f55c:	2302      	movs	r3, #2
	}
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3778      	adds	r7, #120	@ 0x78
 800f562:	46bd      	mov	sp, r7
 800f564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f568:	55555555 	.word	0x55555555
 800f56c:	3fc55555 	.word	0x3fc55555
 800f570:	47ae147b 	.word	0x47ae147b
 800f574:	3f847ae1 	.word	0x3f847ae1
 800f578:	20017b2c 	.word	0x20017b2c
 800f57c:	3fe00000 	.word	0x3fe00000
 800f580:	20017bd0 	.word	0x20017bd0

0800f584 <MOT_go_FinSpeed>:

void MOT_go_FinSpeed( float f_num, float f_fin, enMOT_GO_ST_TYPE en_goStType )
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b086      	sub	sp, #24
 800f588:	af00      	add	r7, sp, #0
 800f58a:	ed87 0a03 	vstr	s0, [r7, #12]
 800f58e:	edc7 0a02 	vstr	s1, [r7, #8]
 800f592:	4603      	mov	r3, r0
 800f594:	71fb      	strb	r3, [r7, #7]
	enMOT_ST_TYPE 		en_type 		= MOT_getStType( f_num, f_fin, en_goStType);			// 動作パターン取得
 800f596:	79fb      	ldrb	r3, [r7, #7]
 800f598:	4618      	mov	r0, r3
 800f59a:	edd7 0a02 	vldr	s1, [r7, #8]
 800f59e:	ed97 0a03 	vldr	s0, [r7, #12]
 800f5a2:	f7ff f9cd 	bl	800e940 <MOT_getStType>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	75fb      	strb	r3, [r7, #23]
	/* 移動距離と指定値に応じで動作を変える */
	switch( en_type ){
 800f5aa:	7dfb      	ldrb	r3, [r7, #23]
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	2b05      	cmp	r3, #5
 800f5b0:	d873      	bhi.n	800f69a <MOT_go_FinSpeed+0x116>
 800f5b2:	a201      	add	r2, pc, #4	@ (adr r2, 800f5b8 <MOT_go_FinSpeed+0x34>)
 800f5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5b8:	0800f5d1 	.word	0x0800f5d1
 800f5bc:	0800f5f3 	.word	0x0800f5f3
 800f5c0:	0800f615 	.word	0x0800f615
 800f5c4:	0800f637 	.word	0x0800f637
 800f5c8:	0800f657 	.word	0x0800f657
 800f5cc:	0800f679 	.word	0x0800f679

		case MOT_ACC_CONST_DEC:				// [01] 台形加速
			MOT_setData_ACC_CONST_DEC( f_num, f_fin, en_goStType );					// 動作データ作成
 800f5d0:	79fb      	ldrb	r3, [r7, #7]
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	edd7 0a02 	vldr	s1, [r7, #8]
 800f5d8:	ed97 0a03 	vldr	s0, [r7, #12]
 800f5dc:	f7fd f9a8 	bl	800c930 <MOT_setData_ACC_CONST_DEC>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800f5e0:	79fa      	ldrb	r2, [r7, #7]
 800f5e2:	7dfb      	ldrb	r3, [r7, #23]
 800f5e4:	4611      	mov	r1, r2
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	ed97 0a02 	vldr	s0, [r7, #8]
 800f5ec:	f7fc fd40 	bl	800c070 <MOT_goBlock_AccConstDec>
			break;
 800f5f0:	e054      	b.n	800f69c <MOT_go_FinSpeed+0x118>

		case MOT_ACC_CONST_DEC_CUSTOM:		// [02] 台形加速（等速）
			MOT_setData_MOT_ACC_CONST_DEC_CUSTOM( f_num, f_fin, en_goStType );		// 動作データ作成
 800f5f2:	79fb      	ldrb	r3, [r7, #7]
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	edd7 0a02 	vldr	s1, [r7, #8]
 800f5fa:	ed97 0a03 	vldr	s0, [r7, #12]
 800f5fe:	f7fd fd1f 	bl	800d040 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800f602:	79fa      	ldrb	r2, [r7, #7]
 800f604:	7dfb      	ldrb	r3, [r7, #23]
 800f606:	4611      	mov	r1, r2
 800f608:	4618      	mov	r0, r3
 800f60a:	ed97 0a02 	vldr	s0, [r7, #8]
 800f60e:	f7fc fd2f 	bl	800c070 <MOT_goBlock_AccConstDec>
			break;
 800f612:	e043      	b.n	800f69c <MOT_go_FinSpeed+0x118>

		case MOT_ACC_CONST:				// [03] 加速＋等速
			MOT_setData_MOT_ACC_CONST( f_num, f_fin, en_goStType );					// 動作データ作成
 800f614:	79fb      	ldrb	r3, [r7, #7]
 800f616:	4618      	mov	r0, r3
 800f618:	edd7 0a02 	vldr	s1, [r7, #8]
 800f61c:	ed97 0a03 	vldr	s0, [r7, #12]
 800f620:	f7fe f932 	bl	800d888 <MOT_setData_MOT_ACC_CONST>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800f624:	79fa      	ldrb	r2, [r7, #7]
 800f626:	7dfb      	ldrb	r3, [r7, #23]
 800f628:	4611      	mov	r1, r2
 800f62a:	4618      	mov	r0, r3
 800f62c:	ed97 0a02 	vldr	s0, [r7, #8]
 800f630:	f7fc fd1e 	bl	800c070 <MOT_goBlock_AccConstDec>
			break;
 800f634:	e032      	b.n	800f69c <MOT_go_FinSpeed+0x118>

		case MOT_ACC_CONST_CUSTOM:		// [04] 加速＋等速（等速）
			MOT_setData_MOT_ACC_CONST_CUSTOM( f_num, f_fin, en_goStType );			// 動作データ作成
 800f636:	79fb      	ldrb	r3, [r7, #7]
 800f638:	4618      	mov	r0, r3
 800f63a:	edd7 0a02 	vldr	s1, [r7, #8]
 800f63e:	ed97 0a03 	vldr	s0, [r7, #12]
 800f642:	f7fe fb01 	bl	800dc48 <MOT_setData_MOT_ACC_CONST_CUSTOM>
			MOT_goBlock_AccConstDec( f_fin, en_type, MOT_GO_ST_NORMAL );			// 動作
 800f646:	7dfb      	ldrb	r3, [r7, #23]
 800f648:	2100      	movs	r1, #0
 800f64a:	4618      	mov	r0, r3
 800f64c:	ed97 0a02 	vldr	s0, [r7, #8]
 800f650:	f7fc fd0e 	bl	800c070 <MOT_goBlock_AccConstDec>
			break;
 800f654:	e022      	b.n	800f69c <MOT_go_FinSpeed+0x118>

		case MOT_CONST_DEC:				// [05] 等速＋減速
			MOT_setData_MOT_CONST_DEC( f_num, f_fin, en_goStType );					// 動作データ作成
 800f656:	79fb      	ldrb	r3, [r7, #7]
 800f658:	4618      	mov	r0, r3
 800f65a:	edd7 0a02 	vldr	s1, [r7, #8]
 800f65e:	ed97 0a03 	vldr	s0, [r7, #12]
 800f662:	f7fe fd45 	bl	800e0f0 <MOT_setData_MOT_CONST_DEC>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800f666:	79fa      	ldrb	r2, [r7, #7]
 800f668:	7dfb      	ldrb	r3, [r7, #23]
 800f66a:	4611      	mov	r1, r2
 800f66c:	4618      	mov	r0, r3
 800f66e:	ed97 0a02 	vldr	s0, [r7, #8]
 800f672:	f7fc fcfd 	bl	800c070 <MOT_goBlock_AccConstDec>
			break;
 800f676:	e011      	b.n	800f69c <MOT_go_FinSpeed+0x118>

		case MOT_CONST_DEC_CUSTOM:		// [06] 等速＋減速（減速値変更）
			MOT_setData_MOT_CONST_DEC_CUSTOM( f_num, f_fin, en_goStType );			// 動作データ作成
 800f678:	79fb      	ldrb	r3, [r7, #7]
 800f67a:	4618      	mov	r0, r3
 800f67c:	edd7 0a02 	vldr	s1, [r7, #8]
 800f680:	ed97 0a03 	vldr	s0, [r7, #12]
 800f684:	f7fe ff10 	bl	800e4a8 <MOT_setData_MOT_CONST_DEC_CUSTOM>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800f688:	79fa      	ldrb	r2, [r7, #7]
 800f68a:	7dfb      	ldrb	r3, [r7, #23]
 800f68c:	4611      	mov	r1, r2
 800f68e:	4618      	mov	r0, r3
 800f690:	ed97 0a02 	vldr	s0, [r7, #8]
 800f694:	f7fc fcec 	bl	800c070 <MOT_goBlock_AccConstDec>
			break;
 800f698:	e000      	b.n	800f69c <MOT_go_FinSpeed+0x118>

		default:
			break;
 800f69a:	bf00      	nop
	}

}
 800f69c:	bf00      	nop
 800f69e:	3718      	adds	r7, #24
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <MOT_goBlock_FinSpeed>:

void MOT_goBlock_FinSpeed( float f_num, float f_fin )
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	ed87 0a01 	vstr	s0, [r7, #4]
 800f6ae:	edc7 0a00 	vstr	s1, [r7]
	MOT_go_FinSpeed( f_num, f_fin, MOT_GO_ST_NORMAL );		// 通常の直進
 800f6b2:	2000      	movs	r0, #0
 800f6b4:	edd7 0a00 	vldr	s1, [r7]
 800f6b8:	ed97 0a01 	vldr	s0, [r7, #4]
 800f6bc:	f7ff ff62 	bl	800f584 <MOT_go_FinSpeed>
}
 800f6c0:	bf00      	nop
 800f6c2:	3708      	adds	r7, #8
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <MOT_goSkewBlock_FinSpeed>:

void MOT_goSkewBlock_FinSpeed( float f_num, float f_fin )
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	ed87 0a01 	vstr	s0, [r7, #4]
 800f6d2:	edc7 0a00 	vstr	s1, [r7]
	MOT_go_FinSpeed( f_num, f_fin, MOT_GO_ST_SKEW );		// 通常の直進
 800f6d6:	2001      	movs	r0, #1
 800f6d8:	edd7 0a00 	vldr	s1, [r7]
 800f6dc:	ed97 0a01 	vldr	s0, [r7, #4]
 800f6e0:	f7ff ff50 	bl	800f584 <MOT_go_FinSpeed>
}
 800f6e4:	bf00      	nop
 800f6e6:	3708      	adds	r7, #8
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <MOT_goBlock_Const>:

void MOT_goBlock_Const(float f_num)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b0ba      	sub	sp, #232	@ 0xe8
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	ed87 0a01 	vstr	s0, [r7, #4]
	stCTRL_DATA		st_data;
	stMOT_DATA		st_info;

	GYRO_staErrChkAngle();
 800f6f6:	f7fa fa05 	bl	8009b04 <GYRO_staErrChkAngle>

	/* ---------------- */
	/*  動作データ計算   */
	/* ---------------- */
	/* 距離 */
	st_info.f_mot_dist		= f_num * BLOCK;													// 移動距離[m]
 800f6fa:	edd7 7a01 	vldr	s15, [r7, #4]
 800f6fe:	ed9f 7aca 	vldr	s14, [pc, #808]	@ 800fa28 <MOT_goBlock_Const+0x33c>
 800f702:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f706:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38


	/* ------ */
	/*  等速  */
	/* ------ */
	st_data.en_ctrl_type			= CTRL_CONST;
 800f70a:	2301      	movs	r3, #1
 800f70c:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
	st_data.f_ctrl_jerk			= 0;
 800f710:	f04f 0300 	mov.w	r3, #0
 800f714:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	st_data.f_ctrl_trgtAcc		= 0;		// 加速度指定
 800f718:	f04f 0300 	mov.w	r3, #0
 800f71c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	st_data.f_ctrl_nowAcc		= 0;
 800f720:	f04f 0300 	mov.w	r3, #0
 800f724:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	st_data.f_ctrl_now			= f_MotNowSpeed;			// 現在速度
 800f728:	4bc0      	ldr	r3, [pc, #768]	@ (800fa2c <MOT_goBlock_Const+0x340>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	st_data.f_ctrl_trgt			= f_MotNowSpeed;			// 目標速度
 800f730:	4bbe      	ldr	r3, [pc, #760]	@ (800fa2c <MOT_goBlock_Const+0x340>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	st_data.f_ctrl_nowDist		= 0;				// 現在位置
 800f738:	f04f 0300 	mov.w	r3, #0
 800f73c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	st_data.f_ctrl_dist			= st_info.f_mot_dist;			// 等速完了位置
 800f740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f742:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	st_data.f_ctrl_nowAccAngle		= 0;
 800f746:	f04f 0300 	mov.w	r3, #0
 800f74a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800f74e:	f04f 0300 	mov.w	r3, #0
 800f752:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	st_data.f_ctrl_nowAngleS		= 0;					// 現在角速度
 800f756:	f04f 0300 	mov.w	r3, #0
 800f75a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	st_data.f_ctrl_trgtAngleS		= 0;					// 目標角度
 800f75e:	f04f 0300 	mov.w	r3, #0
 800f762:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	st_data.f_ctrl_nowAngle		= 0;					// 現在角度
 800f766:	f04f 0300 	mov.w	r3, #0
 800f76a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	st_data.f_ctrl_angle			= 0;					// 目標角度
 800f76e:	f04f 0300 	mov.w	r3, #0
 800f772:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	st_data.f_ctrl_time 			= 0;					// 目標時間 [sec] ← 指定しない
 800f776:	f04f 0300 	mov.w	r3, #0
 800f77a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	CTRL_clrData();										// 設定データをクリア
 800f77e:	f7f6 fe61 	bl	8006444 <CTRL_clrData>
	CTRL_setData( &st_data );						// データセット
 800f782:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800f786:	4618      	mov	r0, r3
 800f788:	f7f6 ff4a 	bl	8006620 <CTRL_setData>
	Set_TrgtSpeed(f_MotNowSpeed);
 800f78c:	4ba7      	ldr	r3, [pc, #668]	@ (800fa2c <MOT_goBlock_Const+0x340>)
 800f78e:	edd3 7a00 	vldr	s15, [r3]
 800f792:	eeb0 0a67 	vmov.f32	s0, s15
 800f796:	f7f6 fdbf 	bl	8006318 <Set_TrgtSpeed>
//	printf("目標速度 %f 目標位置 %f \r\n",st_data.f_trgt,st_data.f_dist);
	while( Get_NowDist() < st_info.f_mot_dist ){				// 指定距離到達待ち
 800f79a:	e02e      	b.n	800f7fa <MOT_goBlock_Const+0x10e>
		if( SYS_isOutOfCtrl() == TRUE ){
 800f79c:	f7f9 ff28 	bl	80095f0 <SYS_isOutOfCtrl>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d008      	beq.n	800f7b8 <MOT_goBlock_Const+0xcc>
			CTRL_stop();
 800f7a6:	f7f6 fe3d 	bl	8006424 <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 800f7aa:	2000      	movs	r0, #0
 800f7ac:	f7f9 ff52 	bl	8009654 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 800f7b0:	2001      	movs	r0, #1
 800f7b2:	f7f9 ff4f 	bl	8009654 <DCM_brakeMot>
			break;
 800f7b6:	e02d      	b.n	800f814 <MOT_goBlock_Const+0x128>
		}				// 途中で制御不能になった
		if(MOT_setWallEdgeDist()==TRUE) break;
 800f7b8:	f002 ffec 	bl	8012794 <MOT_setWallEdgeDist>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d127      	bne.n	800f812 <MOT_goBlock_Const+0x126>
		if(Is_Known_Accel() == FALSE){
 800f7c2:	f007 f94d 	bl	8016a60 <Is_Known_Accel>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	f083 0301 	eor.w	r3, r3, #1
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d013      	beq.n	800f7fa <MOT_goBlock_Const+0x10e>
			if((DIST_getNowVal(DIST_SEN_R_FRONT)>(R_FRONT_REF-FRONT_WALL_MISS_DIF))||(DIST_getNowVal(DIST_SEN_L_FRONT)>(L_FRONT_REF-FRONT_WALL_MISS_DIF))){
 800f7d2:	2000      	movs	r0, #0
 800f7d4:	f003 f9c8 	bl	8012b68 <DIST_getNowVal>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 800f7de:	dc08      	bgt.n	800f7f2 <MOT_goBlock_Const+0x106>
 800f7e0:	2001      	movs	r0, #1
 800f7e2:	f003 f9c1 	bl	8012b68 <DIST_getNowVal>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	f240 2326 	movw	r3, #550	@ 0x226
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	dd03      	ble.n	800f7fa <MOT_goBlock_Const+0x10e>
				front_wall_miss = TRUE;
 800f7f2:	4b8f      	ldr	r3, [pc, #572]	@ (800fa30 <MOT_goBlock_Const+0x344>)
 800f7f4:	2201      	movs	r2, #1
 800f7f6:	701a      	strb	r2, [r3, #0]
				break;
 800f7f8:	e00c      	b.n	800f814 <MOT_goBlock_Const+0x128>
	while( Get_NowDist() < st_info.f_mot_dist ){				// 指定距離到達待ち
 800f7fa:	f7f6 fd63 	bl	80062c4 <Get_NowDist>
 800f7fe:	eeb0 7a40 	vmov.f32	s14, s0
 800f802:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800f806:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f80e:	d4c5      	bmi.n	800f79c <MOT_goBlock_Const+0xb0>
 800f810:	e000      	b.n	800f814 <MOT_goBlock_Const+0x128>
		if(MOT_setWallEdgeDist()==TRUE) break;
 800f812:	bf00      	nop
			}
		}
	}

	if( ( en_WallEdge != MOT_WALL_EDGE_NONE ) && ( bl_IsWallEdge == FALSE )  ){
 800f814:	4b87      	ldr	r3, [pc, #540]	@ (800fa34 <MOT_goBlock_Const+0x348>)
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	f000 808f 	beq.w	800f93c <MOT_goBlock_Const+0x250>
 800f81e:	4b86      	ldr	r3, [pc, #536]	@ (800fa38 <MOT_goBlock_Const+0x34c>)
 800f820:	781b      	ldrb	r3, [r3, #0]
 800f822:	f083 0301 	eor.w	r3, r3, #1
 800f826:	b2db      	uxtb	r3, r3
 800f828:	2b00      	cmp	r3, #0
 800f82a:	f000 8087 	beq.w	800f93c <MOT_goBlock_Const+0x250>
		st_data.en_ctrl_type			= CTRL_CONST;
 800f82e:	2301      	movs	r3, #1
 800f830:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
		st_data.f_ctrl_jerk			= 0;
 800f834:	f04f 0300 	mov.w	r3, #0
 800f838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		st_data.f_ctrl_trgtAcc		= 0;		// 加速度指定
 800f83c:	f04f 0300 	mov.w	r3, #0
 800f840:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		st_data.f_ctrl_nowAcc		= 0;
 800f844:	f04f 0300 	mov.w	r3, #0
 800f848:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		st_data.f_ctrl_now			= st_Info.f_mot_last;			// 現在速度
 800f84c:	4b7b      	ldr	r3, [pc, #492]	@ (800fa3c <MOT_goBlock_Const+0x350>)
 800f84e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f850:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		st_data.f_ctrl_trgt			= st_Info.f_mot_last;			// 目標速度
 800f854:	4b79      	ldr	r3, [pc, #484]	@ (800fa3c <MOT_goBlock_Const+0x350>)
 800f856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f858:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		st_data.f_ctrl_nowDist		= Get_NowDist();				// 現在位置
 800f85c:	f7f6 fd32 	bl	80062c4 <Get_NowDist>
 800f860:	eef0 7a40 	vmov.f32	s15, s0
 800f864:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
		st_data.f_ctrl_dist			= Get_NowDist() + 0.045f;	// 等速完了位置（90.0f：壁切れをどこまで救うかの距離）、ここではf_NowDistをクリアしてはいけない。
 800f868:	f7f6 fd2c 	bl	80062c4 <Get_NowDist>
 800f86c:	eef0 7a40 	vmov.f32	s15, s0
 800f870:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 800fa40 <MOT_goBlock_Const+0x354>
 800f874:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f878:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8
		st_data.f_ctrl_nowAccAngle		= 0;
 800f87c:	f04f 0300 	mov.w	r3, #0
 800f880:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800f884:	f04f 0300 	mov.w	r3, #0
 800f888:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 800f88c:	f04f 0300 	mov.w	r3, #0
 800f890:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		st_data.f_ctrl_trgtAngleS	= 0;						// 目標角度
 800f894:	f04f 0300 	mov.w	r3, #0
 800f898:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 800f89c:	f04f 0300 	mov.w	r3, #0
 800f8a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
		st_data.f_ctrl_angle			= 0;						// 目標角度
 800f8a4:	f04f 0300 	mov.w	r3, #0
 800f8a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800f8ac:	f04f 0300 	mov.w	r3, #0
 800f8b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 800f8b4:	f7f6 fdc6 	bl	8006444 <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 800f8b8:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7f6 feaf 	bl	8006620 <CTRL_setData>
		while( Get_NowDist() < st_data.f_ctrl_dist ){				// 指定距離到達待ち
 800f8c2:	e02e      	b.n	800f922 <MOT_goBlock_Const+0x236>
			if( SYS_isOutOfCtrl() == TRUE ){
 800f8c4:	f7f9 fe94 	bl	80095f0 <SYS_isOutOfCtrl>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d008      	beq.n	800f8e0 <MOT_goBlock_Const+0x1f4>
				CTRL_stop();
 800f8ce:	f7f6 fda9 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800f8d2:	2000      	movs	r0, #0
 800f8d4:	f7f9 febe 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800f8d8:	2001      	movs	r0, #1
 800f8da:	f7f9 febb 	bl	8009654 <DCM_brakeMot>
				break;
 800f8de:	e02d      	b.n	800f93c <MOT_goBlock_Const+0x250>
			}				
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 800f8e0:	f002 ff9c 	bl	801281c <MOT_setWallEdgeDist_LoopWait>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d127      	bne.n	800f93a <MOT_goBlock_Const+0x24e>
			if(Is_Known_Accel() == FALSE){
 800f8ea:	f007 f8b9 	bl	8016a60 <Is_Known_Accel>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	f083 0301 	eor.w	r3, r3, #1
 800f8f4:	b2db      	uxtb	r3, r3
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d013      	beq.n	800f922 <MOT_goBlock_Const+0x236>
				if((DIST_getNowVal(DIST_SEN_R_FRONT)>(R_FRONT_REF-FRONT_WALL_MISS_DIF))||(DIST_getNowVal(DIST_SEN_L_FRONT)>(L_FRONT_REF-FRONT_WALL_MISS_DIF))){
 800f8fa:	2000      	movs	r0, #0
 800f8fc:	f003 f934 	bl	8012b68 <DIST_getNowVal>
 800f900:	4603      	mov	r3, r0
 800f902:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 800f906:	dc08      	bgt.n	800f91a <MOT_goBlock_Const+0x22e>
 800f908:	2001      	movs	r0, #1
 800f90a:	f003 f92d 	bl	8012b68 <DIST_getNowVal>
 800f90e:	4603      	mov	r3, r0
 800f910:	461a      	mov	r2, r3
 800f912:	f240 2326 	movw	r3, #550	@ 0x226
 800f916:	429a      	cmp	r2, r3
 800f918:	dd03      	ble.n	800f922 <MOT_goBlock_Const+0x236>
					front_wall_miss = TRUE;
 800f91a:	4b45      	ldr	r3, [pc, #276]	@ (800fa30 <MOT_goBlock_Const+0x344>)
 800f91c:	2201      	movs	r2, #1
 800f91e:	701a      	strb	r2, [r3, #0]
					break;
 800f920:	e00c      	b.n	800f93c <MOT_goBlock_Const+0x250>
		while( Get_NowDist() < st_data.f_ctrl_dist ){				// 指定距離到達待ち
 800f922:	f7f6 fccf 	bl	80062c4 <Get_NowDist>
 800f926:	eeb0 7a40 	vmov.f32	s14, s0
 800f92a:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 800f92e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f936:	d4c5      	bmi.n	800f8c4 <MOT_goBlock_Const+0x1d8>
 800f938:	e000      	b.n	800f93c <MOT_goBlock_Const+0x250>
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 800f93a:	bf00      	nop
				}
			}
		}
	}
	/* straight for edge */
	if( f_WallEdgeAddDist != 0.0f)
 800f93c:	4b41      	ldr	r3, [pc, #260]	@ (800fa44 <MOT_goBlock_Const+0x358>)
 800f93e:	edd3 7a00 	vldr	s15, [r3]
 800f942:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f94a:	f000 8088 	beq.w	800fa5e <MOT_goBlock_Const+0x372>
	{
		st_data.en_ctrl_type			= CTRL_CONST;
 800f94e:	2301      	movs	r3, #1
 800f950:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
		st_data.f_ctrl_jerk			= 0;
 800f954:	f04f 0300 	mov.w	r3, #0
 800f958:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		st_data.f_ctrl_trgtAcc		= 0;		// 加速度指定
 800f95c:	f04f 0300 	mov.w	r3, #0
 800f960:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		st_data.f_ctrl_nowAcc		= 0;
 800f964:	f04f 0300 	mov.w	r3, #0
 800f968:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		st_data.f_ctrl_now			= st_Info.f_mot_last;			// 現在速度
 800f96c:	4b33      	ldr	r3, [pc, #204]	@ (800fa3c <MOT_goBlock_Const+0x350>)
 800f96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f970:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		st_data.f_ctrl_trgt			= st_Info.f_mot_last;			// 目標速度
 800f974:	4b31      	ldr	r3, [pc, #196]	@ (800fa3c <MOT_goBlock_Const+0x350>)
 800f976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f978:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		st_data.f_ctrl_nowDist		= 0;						// 現在位置
 800f97c:	f04f 0300 	mov.w	r3, #0
 800f980:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
		st_data.f_ctrl_dist			= f_WallEdgeAddDist;		// 等速完了位置
 800f984:	4b2f      	ldr	r3, [pc, #188]	@ (800fa44 <MOT_goBlock_Const+0x358>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
		st_data.f_ctrl_nowAccAngle		= 0;
 800f98c:	f04f 0300 	mov.w	r3, #0
 800f990:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800f994:	f04f 0300 	mov.w	r3, #0
 800f998:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 800f99c:	f04f 0300 	mov.w	r3, #0
 800f9a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		st_data.f_ctrl_trgtAngleS	= 0;						// 目標角度
 800f9a4:	f04f 0300 	mov.w	r3, #0
 800f9a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 800f9ac:	f04f 0300 	mov.w	r3, #0
 800f9b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
		st_data.f_ctrl_angle			= 0;						// 目標角度
 800f9b4:	f04f 0300 	mov.w	r3, #0
 800f9b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800f9bc:	f04f 0300 	mov.w	r3, #0
 800f9c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 800f9c4:	f7f6 fd3e 	bl	8006444 <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 800f9c8:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f7f6 fe27 	bl	8006620 <CTRL_setData>
		while( Get_NowDist() < st_data.f_ctrl_dist ){			// 指定距離到達待ち
 800f9d2:	e039      	b.n	800fa48 <MOT_goBlock_Const+0x35c>
			if( SYS_isOutOfCtrl() == TRUE ){
 800f9d4:	f7f9 fe0c 	bl	80095f0 <SYS_isOutOfCtrl>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d008      	beq.n	800f9f0 <MOT_goBlock_Const+0x304>
				CTRL_stop();
 800f9de:	f7f6 fd21 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800f9e2:	2000      	movs	r0, #0
 800f9e4:	f7f9 fe36 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800f9e8:	2001      	movs	r0, #1
 800f9ea:	f7f9 fe33 	bl	8009654 <DCM_brakeMot>
				break;
 800f9ee:	e036      	b.n	800fa5e <MOT_goBlock_Const+0x372>
			}	
			if(Is_Known_Accel() == FALSE){
 800f9f0:	f007 f836 	bl	8016a60 <Is_Known_Accel>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	f083 0301 	eor.w	r3, r3, #1
 800f9fa:	b2db      	uxtb	r3, r3
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d023      	beq.n	800fa48 <MOT_goBlock_Const+0x35c>
				if((DIST_getNowVal(DIST_SEN_R_FRONT)>(R_FRONT_REF-FRONT_WALL_MISS_DIF))||(DIST_getNowVal(DIST_SEN_L_FRONT)>(L_FRONT_REF-FRONT_WALL_MISS_DIF))){
 800fa00:	2000      	movs	r0, #0
 800fa02:	f003 f8b1 	bl	8012b68 <DIST_getNowVal>
 800fa06:	4603      	mov	r3, r0
 800fa08:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 800fa0c:	dc08      	bgt.n	800fa20 <MOT_goBlock_Const+0x334>
 800fa0e:	2001      	movs	r0, #1
 800fa10:	f003 f8aa 	bl	8012b68 <DIST_getNowVal>
 800fa14:	4603      	mov	r3, r0
 800fa16:	461a      	mov	r2, r3
 800fa18:	f240 2326 	movw	r3, #550	@ 0x226
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	dd13      	ble.n	800fa48 <MOT_goBlock_Const+0x35c>
					front_wall_miss = TRUE;
 800fa20:	4b03      	ldr	r3, [pc, #12]	@ (800fa30 <MOT_goBlock_Const+0x344>)
 800fa22:	2201      	movs	r2, #1
 800fa24:	701a      	strb	r2, [r3, #0]
					break;
 800fa26:	e01a      	b.n	800fa5e <MOT_goBlock_Const+0x372>
 800fa28:	3db851ec 	.word	0x3db851ec
 800fa2c:	20017bcc 	.word	0x20017bcc
 800fa30:	2001ad9b 	.word	0x2001ad9b
 800fa34:	20017be4 	.word	0x20017be4
 800fa38:	20017be5 	.word	0x20017be5
 800fa3c:	20017b2c 	.word	0x20017b2c
 800fa40:	3d3851ec 	.word	0x3d3851ec
 800fa44:	20017be8 	.word	0x20017be8
		while( Get_NowDist() < st_data.f_ctrl_dist ){			// 指定距離到達待ち
 800fa48:	f7f6 fc3c 	bl	80062c4 <Get_NowDist>
 800fa4c:	eeb0 7a40 	vmov.f32	s14, s0
 800fa50:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 800fa54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa5c:	d4ba      	bmi.n	800f9d4 <MOT_goBlock_Const+0x2e8>
				}
			}			
		}
	}

	if(front_wall_miss == TRUE){
 800fa5e:	4b11      	ldr	r3, [pc, #68]	@ (800faa4 <MOT_goBlock_Const+0x3b8>)
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d00e      	beq.n	800fa84 <MOT_goBlock_Const+0x398>
		MOT_goBlock_FinSpeed(0.4,0);
 800fa66:	eddf 0a10 	vldr	s1, [pc, #64]	@ 800faa8 <MOT_goBlock_Const+0x3bc>
 800fa6a:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 800faac <MOT_goBlock_Const+0x3c0>
 800fa6e:	f7ff fe19 	bl	800f6a4 <MOT_goBlock_FinSpeed>
		DCM_brakeMot( DCM_R );		
 800fa72:	2000      	movs	r0, #0
 800fa74:	f7f9 fdee 	bl	8009654 <DCM_brakeMot>
		DCM_brakeMot( DCM_L );
 800fa78:	2001      	movs	r0, #1
 800fa7a:	f7f9 fdeb 	bl	8009654 <DCM_brakeMot>
		LL_mDelay(200);
 800fa7e:	20c8      	movs	r0, #200	@ 0xc8
 800fa80:	f00b fff4 	bl	801ba6c <LL_mDelay>

	}

	MOT_setWallEdgeType( MOT_WALL_EDGE_NONE );		// 壁切れ補正終了
 800fa84:	2000      	movs	r0, #0
 800fa86:	f002 fe53 	bl	8012730 <MOT_setWallEdgeType>
	GYRO_endErrChkAngle();
 800fa8a:	f7fa f84d 	bl	8009b28 <GYRO_endErrChkAngle>
//	CTRL_clrNowData();
	CTRL_setNowData_Err(/*st_data.f_dist,*/st_data.f_ctrl_angle);
 800fa8e:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 800fa92:	eeb0 0a67 	vmov.f32	s0, s15
 800fa96:	f7f6 fd7f 	bl	8006598 <CTRL_setNowData_Err>
}
 800fa9a:	bf00      	nop
 800fa9c:	37e8      	adds	r7, #232	@ 0xe8
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	2001ad9b 	.word	0x2001ad9b
 800faa8:	00000000 	.word	0x00000000
 800faac:	3ecccccd 	.word	0x3ecccccd

0800fab0 <MOT_getAccAngle1>:
	CTRL_clrData();
	CTRL_setData(&test);
}

float MOT_getAccAngle1( void )
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_TRUN )->f_speed_accangle;
 800fab4:	2016      	movs	r0, #22
 800fab6:	f7f2 fe4b 	bl	8002750 <PARAM_getSpeed>
 800faba:	4603      	mov	r3, r0
 800fabc:	691b      	ldr	r3, [r3, #16]
 800fabe:	ee07 3a90 	vmov	s15, r3
}
 800fac2:	eeb0 0a67 	vmov.f32	s0, s15
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <MOT_getAccAngle3>:

float MOT_getAccAngle3( void )
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_TRUN )->f_speed_decangle;
 800facc:	2016      	movs	r0, #22
 800face:	f7f2 fe3f 	bl	8002750 <PARAM_getSpeed>
 800fad2:	4603      	mov	r3, r0
 800fad4:	695b      	ldr	r3, [r3, #20]
 800fad6:	ee07 3a90 	vmov	s15, r3
}
 800fada:	eeb0 0a67 	vmov.f32	s0, s15
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <MOT_getJerkAngle>:

float MOT_getJerkAngle( void )
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_TRUN )->f_speed_jerkangle;
 800fae4:	2016      	movs	r0, #22
 800fae6:	f7f2 fe33 	bl	8002750 <PARAM_getSpeed>
 800faea:	4603      	mov	r3, r0
 800faec:	68db      	ldr	r3, [r3, #12]
 800faee:	ee07 3a90 	vmov	s15, r3
}
 800faf2:	eeb0 0a67 	vmov.f32	s0, s15
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <MOT_turn>:

void MOT_turn( enMOT_TURN_CMD en_type )
{
 800faf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fafc:	b0ca      	sub	sp, #296	@ 0x128
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	4602      	mov	r2, r0
 800fb02:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fb06:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800fb0a:	701a      	strb	r2, [r3, #0]

	float		f_mot_l3_decanglejerk;
	float		f_mot_l3_accanglejerk;
    float		f_mot_l3_decangleconst;

	us_trgtAngleS = 2.8*PI;//500;
 800fb0c:	4b27      	ldr	r3, [pc, #156]	@ (800fbac <MOT_turn+0xb4>)
 800fb0e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	/* ---------------- */
	/*  動作データ計計算  */
	/* ---------------- */
	st_info.f_mot_jerkAngle = MOT_getJerkAngle();
 800fb12:	f7ff ffe5 	bl	800fae0 <MOT_getJerkAngle>
 800fb16:	eef0 7a40 	vmov.f32	s15, s0
 800fb1a:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
	/* 加速度 */
	st_info.f_mot_trgtAccAngle1= MOT_getAccAngle1();												// 角加速度1[rad/s^2]
 800fb1e:	f7ff ffc7 	bl	800fab0 <MOT_getAccAngle1>
 800fb22:	eef0 7a40 	vmov.f32	s15, s0
 800fb26:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
	st_info.f_mot_trgtAccAngle3= MOT_getAccAngle3();												// 角加速度3[rad/s^2]
 800fb2a:	f7ff ffcd 	bl	800fac8 <MOT_getAccAngle3>
 800fb2e:	eef0 7a40 	vmov.f32	s15, s0
 800fb32:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4

	/* 角速度 */
	st_info.f_mot_nowAngleS	= 0;																// 現在角速度
 800fb36:	f04f 0300 	mov.w	r3, #0
 800fb3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	st_info.f_mot_trgtAngleS= (float)us_trgtAngleS;												// 目標角速度
 800fb3e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800fb42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	st_info.f_mot_lastAngleS= 0;																// 最終角速度
 800fb46:	f04f 0300 	mov.w	r3, #0
 800fb4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

	/* 角度 */
	switch( en_type ){
 800fb4e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fb52:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	2b05      	cmp	r3, #5
 800fb5a:	d835      	bhi.n	800fbc8 <MOT_turn+0xd0>
 800fb5c:	a201      	add	r2, pc, #4	@ (adr r2, 800fb64 <MOT_turn+0x6c>)
 800fb5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb62:	bf00      	nop
 800fb64:	0800fb7d 	.word	0x0800fb7d
 800fb68:	0800fb85 	.word	0x0800fb85
 800fb6c:	0800fb8d 	.word	0x0800fb8d
 800fb70:	0800fb95 	.word	0x0800fb95
 800fb74:	0800fb9d 	.word	0x0800fb9d
 800fb78:	0800fba5 	.word	0x0800fba5
		case MOT_R90:	st_info.f_mot_angle = -PI/2.0 - ANGLE_OFFSET1_R;	break;					// 回転角度[rad]
 800fb7c:	4b0c      	ldr	r3, [pc, #48]	@ (800fbb0 <MOT_turn+0xb8>)
 800fb7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fb82:	e025      	b.n	800fbd0 <MOT_turn+0xd8>
		case MOT_L90:	st_info.f_mot_angle =  PI/2.0 + ANGLE_OFFSET1;		break;					// 回転角度[rad]
 800fb84:	4b0b      	ldr	r3, [pc, #44]	@ (800fbb4 <MOT_turn+0xbc>)
 800fb86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fb8a:	e021      	b.n	800fbd0 <MOT_turn+0xd8>
		case MOT_R180:	st_info.f_mot_angle = -PI - ANGLE_OFFSET2_R;	break;					// 回転角度[rad]
 800fb8c:	4b0a      	ldr	r3, [pc, #40]	@ (800fbb8 <MOT_turn+0xc0>)
 800fb8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fb92:	e01d      	b.n	800fbd0 <MOT_turn+0xd8>
		case MOT_L180:	st_info.f_mot_angle =  PI + ANGLE_OFFSET2;		break;					// 回転角度[rad]
 800fb94:	4b09      	ldr	r3, [pc, #36]	@ (800fbbc <MOT_turn+0xc4>)
 800fb96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fb9a:	e019      	b.n	800fbd0 <MOT_turn+0xd8>
		case MOT_R360:	st_info.f_mot_angle = -2.0*PI - ANGLE_OFFSET3;		break;					// 回転角度[rad]
 800fb9c:	4b08      	ldr	r3, [pc, #32]	@ (800fbc0 <MOT_turn+0xc8>)
 800fb9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fba2:	e015      	b.n	800fbd0 <MOT_turn+0xd8>
		case MOT_L360:	st_info.f_mot_angle =  2.0*PI + ANGLE_OFFSET3;		break;					// 回転角度[rad]
 800fba4:	4b07      	ldr	r3, [pc, #28]	@ (800fbc4 <MOT_turn+0xcc>)
 800fba6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fbaa:	e011      	b.n	800fbd0 <MOT_turn+0xd8>
 800fbac:	410cbe45 	.word	0x410cbe45
 800fbb0:	bfc90fd0 	.word	0xbfc90fd0
 800fbb4:	3fc90fd0 	.word	0x3fc90fd0
 800fbb8:	c0490fd0 	.word	0xc0490fd0
 800fbbc:	40490fd0 	.word	0x40490fd0
 800fbc0:	c0c90fd0 	.word	0xc0c90fd0
 800fbc4:	40c90fd0 	.word	0x40c90fd0
		default:
			printf("error\r\n");
 800fbc8:	48f1      	ldr	r0, [pc, #964]	@ (800ff90 <MOT_turn+0x498>)
 800fbca:	f00e f8b3 	bl	801dd34 <puts>
			break;
 800fbce:	bf00      	nop
	}

	f_accAngleTime1 = st_info.f_mot_trgtAccAngle1/st_info.f_mot_jerkAngle;
 800fbd0:	edd7 6a2c 	vldr	s13, [r7, #176]	@ 0xb0
 800fbd4:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800fbd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fbdc:	edc7 7a48 	vstr	s15, [r7, #288]	@ 0x120
	f_accAngleTime3 = st_info.f_mot_trgtAccAngle3/st_info.f_mot_jerkAngle;
 800fbe0:	edd7 6a2d 	vldr	s13, [r7, #180]	@ 0xb4
 800fbe4:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800fbe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fbec:	edc7 7a47 	vstr	s15, [r7, #284]	@ 0x11c

	f_mot_accAnglejerk_v	= 1.0/2.0*st_info.f_mot_jerkAngle*f_accAngleTime1*f_accAngleTime1;//加速度到達時の速度
 800fbf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7f0 fccf 	bl	8000598 <__aeabi_f2d>
 800fbfa:	f04f 0200 	mov.w	r2, #0
 800fbfe:	4be5      	ldr	r3, [pc, #916]	@ (800ff94 <MOT_turn+0x49c>)
 800fc00:	f7f0 fd22 	bl	8000648 <__aeabi_dmul>
 800fc04:	4602      	mov	r2, r0
 800fc06:	460b      	mov	r3, r1
 800fc08:	4614      	mov	r4, r2
 800fc0a:	461d      	mov	r5, r3
 800fc0c:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fc10:	f7f0 fcc2 	bl	8000598 <__aeabi_f2d>
 800fc14:	4602      	mov	r2, r0
 800fc16:	460b      	mov	r3, r1
 800fc18:	4620      	mov	r0, r4
 800fc1a:	4629      	mov	r1, r5
 800fc1c:	f7f0 fd14 	bl	8000648 <__aeabi_dmul>
 800fc20:	4602      	mov	r2, r0
 800fc22:	460b      	mov	r3, r1
 800fc24:	4614      	mov	r4, r2
 800fc26:	461d      	mov	r5, r3
 800fc28:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fc2c:	f7f0 fcb4 	bl	8000598 <__aeabi_f2d>
 800fc30:	4602      	mov	r2, r0
 800fc32:	460b      	mov	r3, r1
 800fc34:	4620      	mov	r0, r4
 800fc36:	4629      	mov	r1, r5
 800fc38:	f7f0 fd06 	bl	8000648 <__aeabi_dmul>
 800fc3c:	4602      	mov	r2, r0
 800fc3e:	460b      	mov	r3, r1
 800fc40:	4610      	mov	r0, r2
 800fc42:	4619      	mov	r1, r3
 800fc44:	f7f0 fff8 	bl	8000c38 <__aeabi_d2f>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	f_mot_l1_accanglejerk	= 1.0/6.0*st_info.f_mot_jerkAngle*f_accAngleTime1*f_accAngleTime1*f_accAngleTime1;
 800fc4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7f0 fca0 	bl	8000598 <__aeabi_f2d>
 800fc58:	a3cb      	add	r3, pc, #812	@ (adr r3, 800ff88 <MOT_turn+0x490>)
 800fc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5e:	f7f0 fcf3 	bl	8000648 <__aeabi_dmul>
 800fc62:	4602      	mov	r2, r0
 800fc64:	460b      	mov	r3, r1
 800fc66:	4614      	mov	r4, r2
 800fc68:	461d      	mov	r5, r3
 800fc6a:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fc6e:	f7f0 fc93 	bl	8000598 <__aeabi_f2d>
 800fc72:	4602      	mov	r2, r0
 800fc74:	460b      	mov	r3, r1
 800fc76:	4620      	mov	r0, r4
 800fc78:	4629      	mov	r1, r5
 800fc7a:	f7f0 fce5 	bl	8000648 <__aeabi_dmul>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	460b      	mov	r3, r1
 800fc82:	4614      	mov	r4, r2
 800fc84:	461d      	mov	r5, r3
 800fc86:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fc8a:	f7f0 fc85 	bl	8000598 <__aeabi_f2d>
 800fc8e:	4602      	mov	r2, r0
 800fc90:	460b      	mov	r3, r1
 800fc92:	4620      	mov	r0, r4
 800fc94:	4629      	mov	r1, r5
 800fc96:	f7f0 fcd7 	bl	8000648 <__aeabi_dmul>
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	4614      	mov	r4, r2
 800fca0:	461d      	mov	r5, r3
 800fca2:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fca6:	f7f0 fc77 	bl	8000598 <__aeabi_f2d>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	460b      	mov	r3, r1
 800fcae:	4620      	mov	r0, r4
 800fcb0:	4629      	mov	r1, r5
 800fcb2:	f7f0 fcc9 	bl	8000648 <__aeabi_dmul>
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	460b      	mov	r3, r1
 800fcba:	4610      	mov	r0, r2
 800fcbc:	4619      	mov	r1, r3
 800fcbe:	f7f0 ffbb 	bl	8000c38 <__aeabi_d2f>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	f_mot_l1_decanglejerk	= 1.0/6.0*st_info.f_mot_jerkAngle*(-1.0)*f_accAngleTime1*f_accAngleTime1*f_accAngleTime1 + (st_info.f_mot_trgtAngleS-f_mot_accAnglejerk_v)*f_accAngleTime1 + 1.0/2.0* st_info.f_mot_trgtAccAngle1 *f_accAngleTime1*f_accAngleTime1;
 800fcc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7f0 fc63 	bl	8000598 <__aeabi_f2d>
 800fcd2:	a3ad      	add	r3, pc, #692	@ (adr r3, 800ff88 <MOT_turn+0x490>)
 800fcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd8:	f7f0 fcb6 	bl	8000648 <__aeabi_dmul>
 800fcdc:	4602      	mov	r2, r0
 800fcde:	460b      	mov	r3, r1
 800fce0:	4690      	mov	r8, r2
 800fce2:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800fce6:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fcea:	f7f0 fc55 	bl	8000598 <__aeabi_f2d>
 800fcee:	4602      	mov	r2, r0
 800fcf0:	460b      	mov	r3, r1
 800fcf2:	4640      	mov	r0, r8
 800fcf4:	4649      	mov	r1, r9
 800fcf6:	f7f0 fca7 	bl	8000648 <__aeabi_dmul>
 800fcfa:	4602      	mov	r2, r0
 800fcfc:	460b      	mov	r3, r1
 800fcfe:	4614      	mov	r4, r2
 800fd00:	461d      	mov	r5, r3
 800fd02:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fd06:	f7f0 fc47 	bl	8000598 <__aeabi_f2d>
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	460b      	mov	r3, r1
 800fd0e:	4620      	mov	r0, r4
 800fd10:	4629      	mov	r1, r5
 800fd12:	f7f0 fc99 	bl	8000648 <__aeabi_dmul>
 800fd16:	4602      	mov	r2, r0
 800fd18:	460b      	mov	r3, r1
 800fd1a:	4614      	mov	r4, r2
 800fd1c:	461d      	mov	r5, r3
 800fd1e:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fd22:	f7f0 fc39 	bl	8000598 <__aeabi_f2d>
 800fd26:	4602      	mov	r2, r0
 800fd28:	460b      	mov	r3, r1
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	4629      	mov	r1, r5
 800fd2e:	f7f0 fc8b 	bl	8000648 <__aeabi_dmul>
 800fd32:	4602      	mov	r2, r0
 800fd34:	460b      	mov	r3, r1
 800fd36:	4614      	mov	r4, r2
 800fd38:	461d      	mov	r5, r3
 800fd3a:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 800fd3e:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 800fd42:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fd46:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 800fd4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd4e:	ee17 0a90 	vmov	r0, s15
 800fd52:	f7f0 fc21 	bl	8000598 <__aeabi_f2d>
 800fd56:	4602      	mov	r2, r0
 800fd58:	460b      	mov	r3, r1
 800fd5a:	4620      	mov	r0, r4
 800fd5c:	4629      	mov	r1, r5
 800fd5e:	f7f0 fabd 	bl	80002dc <__adddf3>
 800fd62:	4602      	mov	r2, r0
 800fd64:	460b      	mov	r3, r1
 800fd66:	4690      	mov	r8, r2
 800fd68:	4699      	mov	r9, r3
 800fd6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7f0 fc12 	bl	8000598 <__aeabi_f2d>
 800fd74:	f04f 0200 	mov.w	r2, #0
 800fd78:	4b86      	ldr	r3, [pc, #536]	@ (800ff94 <MOT_turn+0x49c>)
 800fd7a:	f7f0 fc65 	bl	8000648 <__aeabi_dmul>
 800fd7e:	4602      	mov	r2, r0
 800fd80:	460b      	mov	r3, r1
 800fd82:	4614      	mov	r4, r2
 800fd84:	461d      	mov	r5, r3
 800fd86:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fd8a:	f7f0 fc05 	bl	8000598 <__aeabi_f2d>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	460b      	mov	r3, r1
 800fd92:	4620      	mov	r0, r4
 800fd94:	4629      	mov	r1, r5
 800fd96:	f7f0 fc57 	bl	8000648 <__aeabi_dmul>
 800fd9a:	4602      	mov	r2, r0
 800fd9c:	460b      	mov	r3, r1
 800fd9e:	4614      	mov	r4, r2
 800fda0:	461d      	mov	r5, r3
 800fda2:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fda6:	f7f0 fbf7 	bl	8000598 <__aeabi_f2d>
 800fdaa:	4602      	mov	r2, r0
 800fdac:	460b      	mov	r3, r1
 800fdae:	4620      	mov	r0, r4
 800fdb0:	4629      	mov	r1, r5
 800fdb2:	f7f0 fc49 	bl	8000648 <__aeabi_dmul>
 800fdb6:	4602      	mov	r2, r0
 800fdb8:	460b      	mov	r3, r1
 800fdba:	4640      	mov	r0, r8
 800fdbc:	4649      	mov	r1, r9
 800fdbe:	f7f0 fa8d 	bl	80002dc <__adddf3>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	4610      	mov	r0, r2
 800fdc8:	4619      	mov	r1, r3
 800fdca:	f7f0 ff35 	bl	8000c38 <__aeabi_d2f>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    f_mot_l1_accangleconst		= ((us_trgtAngleS-f_mot_accAnglejerk_v)*(us_trgtAngleS-f_mot_accAnglejerk_v)
 800fdd4:	ed97 7a49 	vldr	s14, [r7, #292]	@ 0x124
 800fdd8:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 800fddc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fde0:	edd7 6a49 	vldr	s13, [r7, #292]	@ 0x124
 800fde4:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 800fde8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fdec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdf0:	ee17 0a90 	vmov	r0, s15
 800fdf4:	f7f0 fbd0 	bl	8000598 <__aeabi_f2d>
 800fdf8:	4604      	mov	r4, r0
 800fdfa:	460d      	mov	r5, r1
                                -(0.0+f_mot_accAnglejerk_v)*(0.0+f_mot_accAnglejerk_v))
 800fdfc:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800fe00:	f7f0 fbca 	bl	8000598 <__aeabi_f2d>
 800fe04:	f04f 0200 	mov.w	r2, #0
 800fe08:	f04f 0300 	mov.w	r3, #0
 800fe0c:	f7f0 fa66 	bl	80002dc <__adddf3>
 800fe10:	4602      	mov	r2, r0
 800fe12:	460b      	mov	r3, r1
 800fe14:	4690      	mov	r8, r2
 800fe16:	4699      	mov	r9, r3
 800fe18:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800fe1c:	f7f0 fbbc 	bl	8000598 <__aeabi_f2d>
 800fe20:	f04f 0200 	mov.w	r2, #0
 800fe24:	f04f 0300 	mov.w	r3, #0
 800fe28:	f7f0 fa58 	bl	80002dc <__adddf3>
 800fe2c:	4602      	mov	r2, r0
 800fe2e:	460b      	mov	r3, r1
 800fe30:	4640      	mov	r0, r8
 800fe32:	4649      	mov	r1, r9
 800fe34:	f7f0 fc08 	bl	8000648 <__aeabi_dmul>
 800fe38:	4602      	mov	r2, r0
 800fe3a:	460b      	mov	r3, r1
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	4629      	mov	r1, r5
 800fe40:	f7f0 fa4a 	bl	80002d8 <__aeabi_dsub>
 800fe44:	4602      	mov	r2, r0
 800fe46:	460b      	mov	r3, r1
 800fe48:	4614      	mov	r4, r2
 800fe4a:	461d      	mov	r5, r3
                                /( st_info.f_mot_trgtAccAngle1 * 2.0 );
 800fe4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800fe50:	4618      	mov	r0, r3
 800fe52:	f7f0 fba1 	bl	8000598 <__aeabi_f2d>
 800fe56:	4602      	mov	r2, r0
 800fe58:	460b      	mov	r3, r1
 800fe5a:	f7f0 fa3f 	bl	80002dc <__adddf3>
 800fe5e:	4602      	mov	r2, r0
 800fe60:	460b      	mov	r3, r1
 800fe62:	4620      	mov	r0, r4
 800fe64:	4629      	mov	r1, r5
 800fe66:	f7f0 fd19 	bl	800089c <__aeabi_ddiv>
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	460b      	mov	r3, r1
    f_mot_l1_accangleconst		= ((us_trgtAngleS-f_mot_accAnglejerk_v)*(us_trgtAngleS-f_mot_accAnglejerk_v)
 800fe6e:	4610      	mov	r0, r2
 800fe70:	4619      	mov	r1, r3
 800fe72:	f7f0 fee1 	bl	8000c38 <__aeabi_d2f>
 800fe76:	4603      	mov	r3, r0
 800fe78:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	f_angle1 = f_mot_l1_accanglejerk+f_mot_l1_decanglejerk+f_mot_l1_accangleconst;
 800fe7c:	ed97 7a45 	vldr	s14, [r7, #276]	@ 0x114
 800fe80:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 800fe84:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fe88:	ed97 7a43 	vldr	s14, [r7, #268]	@ 0x10c
 800fe8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fe90:	edc7 7a42 	vstr	s15, [r7, #264]	@ 0x108

	f_mot_accAnglejerk_v	= 1.0/2.0*st_info.f_mot_jerkAngle*f_accAngleTime3*f_accAngleTime3;//加速度到達時の速度
 800fe94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f7f0 fb7d 	bl	8000598 <__aeabi_f2d>
 800fe9e:	f04f 0200 	mov.w	r2, #0
 800fea2:	4b3c      	ldr	r3, [pc, #240]	@ (800ff94 <MOT_turn+0x49c>)
 800fea4:	f7f0 fbd0 	bl	8000648 <__aeabi_dmul>
 800fea8:	4602      	mov	r2, r0
 800feaa:	460b      	mov	r3, r1
 800feac:	4614      	mov	r4, r2
 800feae:	461d      	mov	r5, r3
 800feb0:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800feb4:	f7f0 fb70 	bl	8000598 <__aeabi_f2d>
 800feb8:	4602      	mov	r2, r0
 800feba:	460b      	mov	r3, r1
 800febc:	4620      	mov	r0, r4
 800febe:	4629      	mov	r1, r5
 800fec0:	f7f0 fbc2 	bl	8000648 <__aeabi_dmul>
 800fec4:	4602      	mov	r2, r0
 800fec6:	460b      	mov	r3, r1
 800fec8:	4614      	mov	r4, r2
 800feca:	461d      	mov	r5, r3
 800fecc:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800fed0:	f7f0 fb62 	bl	8000598 <__aeabi_f2d>
 800fed4:	4602      	mov	r2, r0
 800fed6:	460b      	mov	r3, r1
 800fed8:	4620      	mov	r0, r4
 800feda:	4629      	mov	r1, r5
 800fedc:	f7f0 fbb4 	bl	8000648 <__aeabi_dmul>
 800fee0:	4602      	mov	r2, r0
 800fee2:	460b      	mov	r3, r1
 800fee4:	4610      	mov	r0, r2
 800fee6:	4619      	mov	r1, r3
 800fee8:	f7f0 fea6 	bl	8000c38 <__aeabi_d2f>
 800feec:	4603      	mov	r3, r0
 800feee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	f_mot_l3_decanglejerk	= 1.0/6.0*st_info.f_mot_jerkAngle*(-1.0)*f_accAngleTime3*f_accAngleTime3*f_accAngleTime3 + st_info.f_mot_trgtAngleS*f_accAngleTime3;
 800fef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7f0 fb4e 	bl	8000598 <__aeabi_f2d>
 800fefc:	a322      	add	r3, pc, #136	@ (adr r3, 800ff88 <MOT_turn+0x490>)
 800fefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff02:	f7f0 fba1 	bl	8000648 <__aeabi_dmul>
 800ff06:	4602      	mov	r2, r0
 800ff08:	460b      	mov	r3, r1
 800ff0a:	60ba      	str	r2, [r7, #8]
 800ff0c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800ff10:	60fb      	str	r3, [r7, #12]
 800ff12:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800ff16:	f7f0 fb3f 	bl	8000598 <__aeabi_f2d>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ff22:	f7f0 fb91 	bl	8000648 <__aeabi_dmul>
 800ff26:	4602      	mov	r2, r0
 800ff28:	460b      	mov	r3, r1
 800ff2a:	4614      	mov	r4, r2
 800ff2c:	461d      	mov	r5, r3
 800ff2e:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800ff32:	f7f0 fb31 	bl	8000598 <__aeabi_f2d>
 800ff36:	4602      	mov	r2, r0
 800ff38:	460b      	mov	r3, r1
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	f7f0 fb83 	bl	8000648 <__aeabi_dmul>
 800ff42:	4602      	mov	r2, r0
 800ff44:	460b      	mov	r3, r1
 800ff46:	4614      	mov	r4, r2
 800ff48:	461d      	mov	r5, r3
 800ff4a:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800ff4e:	f7f0 fb23 	bl	8000598 <__aeabi_f2d>
 800ff52:	4602      	mov	r2, r0
 800ff54:	460b      	mov	r3, r1
 800ff56:	4620      	mov	r0, r4
 800ff58:	4629      	mov	r1, r5
 800ff5a:	f7f0 fb75 	bl	8000648 <__aeabi_dmul>
 800ff5e:	4602      	mov	r2, r0
 800ff60:	460b      	mov	r3, r1
 800ff62:	4614      	mov	r4, r2
 800ff64:	461d      	mov	r5, r3
 800ff66:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 800ff6a:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 800ff6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff72:	ee17 0a90 	vmov	r0, s15
 800ff76:	f7f0 fb0f 	bl	8000598 <__aeabi_f2d>
 800ff7a:	4602      	mov	r2, r0
 800ff7c:	460b      	mov	r3, r1
 800ff7e:	4620      	mov	r0, r4
 800ff80:	4629      	mov	r1, r5
 800ff82:	f7f0 f9ab 	bl	80002dc <__adddf3>
 800ff86:	e007      	b.n	800ff98 <MOT_turn+0x4a0>
 800ff88:	55555555 	.word	0x55555555
 800ff8c:	3fc55555 	.word	0x3fc55555
 800ff90:	08021c8c 	.word	0x08021c8c
 800ff94:	3fe00000 	.word	0x3fe00000
 800ff98:	4602      	mov	r2, r0
 800ff9a:	460b      	mov	r3, r1
 800ff9c:	4610      	mov	r0, r2
 800ff9e:	4619      	mov	r1, r3
 800ffa0:	f7f0 fe4a 	bl	8000c38 <__aeabi_d2f>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	f_mot_l3_accanglejerk	= 1.0/6.0*st_info.f_mot_jerkAngle*f_accAngleTime3*f_accAngleTime3*f_accAngleTime3 + f_mot_accAnglejerk_v*f_accAngleTime3 + 1.0/2.0* st_info.f_mot_trgtAccAngle3*(-1.0) *f_accAngleTime1*f_accAngleTime1;
 800ffaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7f0 faf2 	bl	8000598 <__aeabi_f2d>
 800ffb4:	a3f8      	add	r3, pc, #992	@ (adr r3, 8010398 <MOT_turn+0x8a0>)
 800ffb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffba:	f7f0 fb45 	bl	8000648 <__aeabi_dmul>
 800ffbe:	4602      	mov	r2, r0
 800ffc0:	460b      	mov	r3, r1
 800ffc2:	4614      	mov	r4, r2
 800ffc4:	461d      	mov	r5, r3
 800ffc6:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800ffca:	f7f0 fae5 	bl	8000598 <__aeabi_f2d>
 800ffce:	4602      	mov	r2, r0
 800ffd0:	460b      	mov	r3, r1
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	4629      	mov	r1, r5
 800ffd6:	f7f0 fb37 	bl	8000648 <__aeabi_dmul>
 800ffda:	4602      	mov	r2, r0
 800ffdc:	460b      	mov	r3, r1
 800ffde:	4614      	mov	r4, r2
 800ffe0:	461d      	mov	r5, r3
 800ffe2:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800ffe6:	f7f0 fad7 	bl	8000598 <__aeabi_f2d>
 800ffea:	4602      	mov	r2, r0
 800ffec:	460b      	mov	r3, r1
 800ffee:	4620      	mov	r0, r4
 800fff0:	4629      	mov	r1, r5
 800fff2:	f7f0 fb29 	bl	8000648 <__aeabi_dmul>
 800fff6:	4602      	mov	r2, r0
 800fff8:	460b      	mov	r3, r1
 800fffa:	4614      	mov	r4, r2
 800fffc:	461d      	mov	r5, r3
 800fffe:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8010002:	f7f0 fac9 	bl	8000598 <__aeabi_f2d>
 8010006:	4602      	mov	r2, r0
 8010008:	460b      	mov	r3, r1
 801000a:	4620      	mov	r0, r4
 801000c:	4629      	mov	r1, r5
 801000e:	f7f0 fb1b 	bl	8000648 <__aeabi_dmul>
 8010012:	4602      	mov	r2, r0
 8010014:	460b      	mov	r3, r1
 8010016:	4614      	mov	r4, r2
 8010018:	461d      	mov	r5, r3
 801001a:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 801001e:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8010022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010026:	ee17 0a90 	vmov	r0, s15
 801002a:	f7f0 fab5 	bl	8000598 <__aeabi_f2d>
 801002e:	4602      	mov	r2, r0
 8010030:	460b      	mov	r3, r1
 8010032:	4620      	mov	r0, r4
 8010034:	4629      	mov	r1, r5
 8010036:	f7f0 f951 	bl	80002dc <__adddf3>
 801003a:	4602      	mov	r2, r0
 801003c:	460b      	mov	r3, r1
 801003e:	4614      	mov	r4, r2
 8010040:	461d      	mov	r5, r3
 8010042:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010046:	4618      	mov	r0, r3
 8010048:	f7f0 faa6 	bl	8000598 <__aeabi_f2d>
 801004c:	f04f 0200 	mov.w	r2, #0
 8010050:	4bcf      	ldr	r3, [pc, #828]	@ (8010390 <MOT_turn+0x898>)
 8010052:	f7f0 faf9 	bl	8000648 <__aeabi_dmul>
 8010056:	4602      	mov	r2, r0
 8010058:	460b      	mov	r3, r1
 801005a:	603a      	str	r2, [r7, #0]
 801005c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8010060:	607b      	str	r3, [r7, #4]
 8010062:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8010066:	f7f0 fa97 	bl	8000598 <__aeabi_f2d>
 801006a:	4602      	mov	r2, r0
 801006c:	460b      	mov	r3, r1
 801006e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010072:	f7f0 fae9 	bl	8000648 <__aeabi_dmul>
 8010076:	4602      	mov	r2, r0
 8010078:	460b      	mov	r3, r1
 801007a:	4690      	mov	r8, r2
 801007c:	4699      	mov	r9, r3
 801007e:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8010082:	f7f0 fa89 	bl	8000598 <__aeabi_f2d>
 8010086:	4602      	mov	r2, r0
 8010088:	460b      	mov	r3, r1
 801008a:	4640      	mov	r0, r8
 801008c:	4649      	mov	r1, r9
 801008e:	f7f0 fadb 	bl	8000648 <__aeabi_dmul>
 8010092:	4602      	mov	r2, r0
 8010094:	460b      	mov	r3, r1
 8010096:	4620      	mov	r0, r4
 8010098:	4629      	mov	r1, r5
 801009a:	f7f0 f91f 	bl	80002dc <__adddf3>
 801009e:	4602      	mov	r2, r0
 80100a0:	460b      	mov	r3, r1
 80100a2:	4610      	mov	r0, r2
 80100a4:	4619      	mov	r1, r3
 80100a6:	f7f0 fdc7 	bl	8000c38 <__aeabi_d2f>
 80100aa:	4603      	mov	r3, r0
 80100ac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    f_mot_l3_decangleconst		= ((0.0+f_mot_accAnglejerk_v)*(0.0+f_mot_accAnglejerk_v)
 80100b0:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80100b4:	f7f0 fa70 	bl	8000598 <__aeabi_f2d>
 80100b8:	f04f 0200 	mov.w	r2, #0
 80100bc:	f04f 0300 	mov.w	r3, #0
 80100c0:	f7f0 f90c 	bl	80002dc <__adddf3>
 80100c4:	4602      	mov	r2, r0
 80100c6:	460b      	mov	r3, r1
 80100c8:	4614      	mov	r4, r2
 80100ca:	461d      	mov	r5, r3
 80100cc:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80100d0:	f7f0 fa62 	bl	8000598 <__aeabi_f2d>
 80100d4:	f04f 0200 	mov.w	r2, #0
 80100d8:	f04f 0300 	mov.w	r3, #0
 80100dc:	f7f0 f8fe 	bl	80002dc <__adddf3>
 80100e0:	4602      	mov	r2, r0
 80100e2:	460b      	mov	r3, r1
 80100e4:	4620      	mov	r0, r4
 80100e6:	4629      	mov	r1, r5
 80100e8:	f7f0 faae 	bl	8000648 <__aeabi_dmul>
 80100ec:	4602      	mov	r2, r0
 80100ee:	460b      	mov	r3, r1
 80100f0:	4614      	mov	r4, r2
 80100f2:	461d      	mov	r5, r3
                                -(us_trgtAngleS-f_mot_accAnglejerk_v)*(us_trgtAngleS-f_mot_accAnglejerk_v))
 80100f4:	ed97 7a49 	vldr	s14, [r7, #292]	@ 0x124
 80100f8:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 80100fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010100:	edd7 6a49 	vldr	s13, [r7, #292]	@ 0x124
 8010104:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8010108:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801010c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010110:	ee17 0a90 	vmov	r0, s15
 8010114:	f7f0 fa40 	bl	8000598 <__aeabi_f2d>
 8010118:	4602      	mov	r2, r0
 801011a:	460b      	mov	r3, r1
 801011c:	4620      	mov	r0, r4
 801011e:	4629      	mov	r1, r5
 8010120:	f7f0 f8da 	bl	80002d8 <__aeabi_dsub>
 8010124:	4602      	mov	r2, r0
 8010126:	460b      	mov	r3, r1
 8010128:	4614      	mov	r4, r2
 801012a:	461d      	mov	r5, r3
                                /( st_info.f_mot_trgtAccAngle3 *(-1.0)* 2.0 );
 801012c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010130:	4618      	mov	r0, r3
 8010132:	f7f0 fa31 	bl	8000598 <__aeabi_f2d>
 8010136:	4602      	mov	r2, r0
 8010138:	460b      	mov	r3, r1
 801013a:	4692      	mov	sl, r2
 801013c:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8010140:	4652      	mov	r2, sl
 8010142:	465b      	mov	r3, fp
 8010144:	4650      	mov	r0, sl
 8010146:	4659      	mov	r1, fp
 8010148:	f7f0 f8c8 	bl	80002dc <__adddf3>
 801014c:	4602      	mov	r2, r0
 801014e:	460b      	mov	r3, r1
 8010150:	4620      	mov	r0, r4
 8010152:	4629      	mov	r1, r5
 8010154:	f7f0 fba2 	bl	800089c <__aeabi_ddiv>
 8010158:	4602      	mov	r2, r0
 801015a:	460b      	mov	r3, r1
    f_mot_l3_decangleconst		= ((0.0+f_mot_accAnglejerk_v)*(0.0+f_mot_accAnglejerk_v)
 801015c:	4610      	mov	r0, r2
 801015e:	4619      	mov	r1, r3
 8010160:	f7f0 fd6a 	bl	8000c38 <__aeabi_d2f>
 8010164:	4603      	mov	r3, r0
 8010166:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

	f_angle3 = f_mot_l3_decanglejerk+f_mot_l3_accanglejerk+f_mot_l3_decangleconst;
 801016a:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 801016e:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8010172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010176:	ed97 7a3f 	vldr	s14, [r7, #252]	@ 0xfc
 801017a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801017e:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

//	f_angle3 = ( st_info.f_mot_trgtAngleS - st_info.f_mot_lastAngleS ) / 2.0 * ( st_info.f_mot_trgtAngleS - st_info.f_mot_lastAngleS ) / st_info.f_mot_accAngleS3;						// 第3移動角度[rad]
//	f_angle1 = ( 0.0 - st_info.f_mot_trgtAngleS) / 2.0 * ( 0.0 - st_info.f_mot_trgtAngleS ) / st_info.f_mot_accAngleS1;

	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010182:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010186:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d00e      	beq.n	80101ae <MOT_turn+0x6b6>
 8010190:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010194:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	2b02      	cmp	r3, #2
 801019c:	d007      	beq.n	80101ae <MOT_turn+0x6b6>
 801019e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80101a2:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	2b04      	cmp	r3, #4
 80101aa:	f040 80f9 	bne.w	80103a0 <MOT_turn+0x8a8>
		st_info.f_mot_jerkAngle *= -1.0;
 80101ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7f0 f9f0 	bl	8000598 <__aeabi_f2d>
 80101b8:	4602      	mov	r2, r0
 80101ba:	460b      	mov	r3, r1
 80101bc:	4610      	mov	r0, r2
 80101be:	4619      	mov	r1, r3
 80101c0:	f7f0 fd3a 	bl	8000c38 <__aeabi_d2f>
 80101c4:	4603      	mov	r3, r0
 80101c6:	ee07 3a90 	vmov	s15, r3
 80101ca:	eef1 7a67 	vneg.f32	s15, s15
 80101ce:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
		st_info.f_mot_trgtAngleS*= -1.0;															// 回転方向を逆にする
 80101d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7f0 f9de 	bl	8000598 <__aeabi_f2d>
 80101dc:	4602      	mov	r2, r0
 80101de:	460b      	mov	r3, r1
 80101e0:	4610      	mov	r0, r2
 80101e2:	4619      	mov	r1, r3
 80101e4:	f7f0 fd28 	bl	8000c38 <__aeabi_d2f>
 80101e8:	4603      	mov	r3, r0
 80101ea:	ee07 3a90 	vmov	s15, r3
 80101ee:	eef1 7a67 	vneg.f32	s15, s15
 80101f2:	edc7 7a33 	vstr	s15, [r7, #204]	@ 0xcc
		f_angle1			*= -1.0;
 80101f6:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80101fa:	f7f0 f9cd 	bl	8000598 <__aeabi_f2d>
 80101fe:	4602      	mov	r2, r0
 8010200:	460b      	mov	r3, r1
 8010202:	4610      	mov	r0, r2
 8010204:	4619      	mov	r1, r3
 8010206:	f7f0 fd17 	bl	8000c38 <__aeabi_d2f>
 801020a:	4603      	mov	r3, r0
 801020c:	ee07 3a90 	vmov	s15, r3
 8010210:	eef1 7a67 	vneg.f32	s15, s15
 8010214:	edc7 7a42 	vstr	s15, [r7, #264]	@ 0x108
//		f_angle2 			*= -1;															// 回転方向を逆にする
		f_angle3 			*= -1.0;															// 回転方向を逆にする
 8010218:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 801021c:	f7f0 f9bc 	bl	8000598 <__aeabi_f2d>
 8010220:	4602      	mov	r2, r0
 8010222:	460b      	mov	r3, r1
 8010224:	4610      	mov	r0, r2
 8010226:	4619      	mov	r1, r3
 8010228:	f7f0 fd06 	bl	8000c38 <__aeabi_d2f>
 801022c:	4603      	mov	r3, r0
 801022e:	ee07 3a90 	vmov	s15, r3
 8010232:	eef1 7a67 	vneg.f32	s15, s15
 8010236:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

		st_info.f_mot_trgtAccAngle1*= -1.0;												// 角加速度1[rad/s^2]
 801023a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801023e:	4618      	mov	r0, r3
 8010240:	f7f0 f9aa 	bl	8000598 <__aeabi_f2d>
 8010244:	4602      	mov	r2, r0
 8010246:	460b      	mov	r3, r1
 8010248:	4610      	mov	r0, r2
 801024a:	4619      	mov	r1, r3
 801024c:	f7f0 fcf4 	bl	8000c38 <__aeabi_d2f>
 8010250:	4603      	mov	r3, r0
 8010252:	ee07 3a90 	vmov	s15, r3
 8010256:	eef1 7a67 	vneg.f32	s15, s15
 801025a:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
		st_info.f_mot_trgtAccAngle3*= -1.0;
 801025e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010262:	4618      	mov	r0, r3
 8010264:	f7f0 f998 	bl	8000598 <__aeabi_f2d>
 8010268:	4602      	mov	r2, r0
 801026a:	460b      	mov	r3, r1
 801026c:	4610      	mov	r0, r2
 801026e:	4619      	mov	r1, r3
 8010270:	f7f0 fce2 	bl	8000c38 <__aeabi_d2f>
 8010274:	4603      	mov	r3, r0
 8010276:	ee07 3a90 	vmov	s15, r3
 801027a:	eef1 7a67 	vneg.f32	s15, s15
 801027e:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4

		st_info.f_mot_l1_accanglejerk	= f_mot_l1_accanglejerk	* (-1.0);
 8010282:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8010286:	f7f0 f987 	bl	8000598 <__aeabi_f2d>
 801028a:	4602      	mov	r2, r0
 801028c:	460b      	mov	r3, r1
 801028e:	4610      	mov	r0, r2
 8010290:	4619      	mov	r1, r3
 8010292:	f7f0 fcd1 	bl	8000c38 <__aeabi_d2f>
 8010296:	4603      	mov	r3, r0
 8010298:	ee07 3a90 	vmov	s15, r3
 801029c:	eef1 7a67 	vneg.f32	s15, s15
 80102a0:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
		st_info.f_mot_l1_decanglejerk	= f_mot_l1_decanglejerk	* (-1.0);
 80102a4:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80102a8:	f7f0 f976 	bl	8000598 <__aeabi_f2d>
 80102ac:	4602      	mov	r2, r0
 80102ae:	460b      	mov	r3, r1
 80102b0:	4610      	mov	r0, r2
 80102b2:	4619      	mov	r1, r3
 80102b4:	f7f0 fcc0 	bl	8000c38 <__aeabi_d2f>
 80102b8:	4603      	mov	r3, r0
 80102ba:	ee07 3a90 	vmov	s15, r3
 80102be:	eef1 7a67 	vneg.f32	s15, s15
 80102c2:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8
		st_info.f_mot_l1_accangleconst		= f_mot_l1_accangleconst		* (-1.0);
 80102c6:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80102ca:	f7f0 f965 	bl	8000598 <__aeabi_f2d>
 80102ce:	4602      	mov	r2, r0
 80102d0:	460b      	mov	r3, r1
 80102d2:	4610      	mov	r0, r2
 80102d4:	4619      	mov	r1, r3
 80102d6:	f7f0 fcaf 	bl	8000c38 <__aeabi_d2f>
 80102da:	4603      	mov	r3, r0
 80102dc:	ee07 3a90 	vmov	s15, r3
 80102e0:	eef1 7a67 	vneg.f32	s15, s15
 80102e4:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
		st_info.f_mot_accAnglejerk_v = f_mot_accAnglejerk_v * (-1.0);
 80102e8:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80102ec:	f7f0 f954 	bl	8000598 <__aeabi_f2d>
 80102f0:	4602      	mov	r2, r0
 80102f2:	460b      	mov	r3, r1
 80102f4:	4610      	mov	r0, r2
 80102f6:	4619      	mov	r1, r3
 80102f8:	f7f0 fc9e 	bl	8000c38 <__aeabi_d2f>
 80102fc:	4603      	mov	r3, r0
 80102fe:	ee07 3a90 	vmov	s15, r3
 8010302:	eef1 7a67 	vneg.f32	s15, s15
 8010306:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4

		st_info.f_mot_l3_decanglejerk	= f_mot_l3_decanglejerk	* (-1.0);
 801030a:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 801030e:	f7f0 f943 	bl	8000598 <__aeabi_f2d>
 8010312:	4602      	mov	r2, r0
 8010314:	460b      	mov	r3, r1
 8010316:	4610      	mov	r0, r2
 8010318:	4619      	mov	r1, r3
 801031a:	f7f0 fc8d 	bl	8000c38 <__aeabi_d2f>
 801031e:	4603      	mov	r3, r0
 8010320:	ee07 3a90 	vmov	s15, r3
 8010324:	eef1 7a67 	vneg.f32	s15, s15
 8010328:	edc7 7a3b 	vstr	s15, [r7, #236]	@ 0xec
		st_info.f_mot_l3_accanglejerk	= f_mot_l3_accanglejerk	* (-1.0);
 801032c:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8010330:	f7f0 f932 	bl	8000598 <__aeabi_f2d>
 8010334:	4602      	mov	r2, r0
 8010336:	460b      	mov	r3, r1
 8010338:	4610      	mov	r0, r2
 801033a:	4619      	mov	r1, r3
 801033c:	f7f0 fc7c 	bl	8000c38 <__aeabi_d2f>
 8010340:	4603      	mov	r3, r0
 8010342:	ee07 3a90 	vmov	s15, r3
 8010346:	eef1 7a67 	vneg.f32	s15, s15
 801034a:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
    	st_info.f_mot_l3_decangleconst		= f_mot_l3_decangleconst		* (-1.0);
 801034e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8010352:	f7f0 f921 	bl	8000598 <__aeabi_f2d>
 8010356:	4602      	mov	r2, r0
 8010358:	460b      	mov	r3, r1
 801035a:	4610      	mov	r0, r2
 801035c:	4619      	mov	r1, r3
 801035e:	f7f0 fc6b 	bl	8000c38 <__aeabi_d2f>
 8010362:	4603      	mov	r3, r0
 8010364:	ee07 3a90 	vmov	s15, r3
 8010368:	eef1 7a67 	vneg.f32	s15, s15
 801036c:	edc7 7a3c 	vstr	s15, [r7, #240]	@ 0xf0

		st_info.f_mot_angle1	= f_angle1;						// 第1移動角度[rad]
 8010370:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8010374:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		st_info.f_mot_angle1_2	= st_info.f_mot_angle - f_angle3;									// 第1+2移動角度[rad]
 8010378:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 801037c:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8010380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010384:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
		en_TurnType			= Right;
 8010388:	4b02      	ldr	r3, [pc, #8]	@ (8010394 <MOT_turn+0x89c>)
 801038a:	2200      	movs	r2, #0
 801038c:	701a      	strb	r2, [r3, #0]
 801038e:	e032      	b.n	80103f6 <MOT_turn+0x8fe>
 8010390:	3fe00000 	.word	0x3fe00000
 8010394:	20017bec 	.word	0x20017bec
 8010398:	55555555 	.word	0x55555555
 801039c:	3fc55555 	.word	0x3fc55555
//		if( st_info.f_mot_angle1 > ( A1_MIN * -1.0 ) ){
//			st_info.f_mot_angle1 = A1_MIN * -1.0;
//		}
	}
	else{
		st_info.f_mot_l1_accanglejerk	= f_mot_l1_accanglejerk;
 80103a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80103a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
		st_info.f_mot_l1_decanglejerk	= f_mot_l1_decanglejerk;
 80103a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80103ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
		st_info.f_mot_l1_accangleconst		= f_mot_l1_accangleconst;
 80103b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80103b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		st_info.f_mot_accAnglejerk_v = f_mot_accAnglejerk_v;
 80103b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80103bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

		st_info.f_mot_l3_decanglejerk	= f_mot_l3_decanglejerk;
 80103c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80103c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
		st_info.f_mot_l3_accanglejerk	= f_mot_l3_accanglejerk;
 80103c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80103cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    	st_info.f_mot_l3_decangleconst		= f_mot_l3_decangleconst;
 80103d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80103d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

		st_info.f_mot_angle1	= f_angle1;						// 第1移動角度[rad]
 80103d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80103dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		st_info.f_mot_angle1_2	= st_info.f_mot_angle - f_angle3;									// 第1+2移動角度[rad]
 80103e0:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 80103e4:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 80103e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103ec:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
		en_TurnType			= Left;
 80103f0:	4bc4      	ldr	r3, [pc, #784]	@ (8010704 <MOT_turn+0xc0c>)
 80103f2:	2201      	movs	r2, #1
 80103f4:	701a      	strb	r2, [r3, #0]
//			st_info.f_mot_angle1 = A1_MIN;
//		}
	}


	GYRO_staErrChkAngle();			// エラー検出開始
 80103f6:	f7f9 fb85 	bl	8009b04 <GYRO_staErrChkAngle>
	/*      実動作       */
	/* ================ */
	/* ------ */
	/*  加速  */
	/* ------ */
	st_data.en_ctrl_type			= CTRL_ACC_TRUN;
 80103fa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80103fe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010402:	2207      	movs	r2, #7
 8010404:	701a      	strb	r2, [r3, #0]
	st_data.f_ctrl_jerk			= 0;
 8010406:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801040a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801040e:	f04f 0200 	mov.w	r2, #0
 8010412:	609a      	str	r2, [r3, #8]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8010414:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010418:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801041c:	f04f 0200 	mov.w	r2, #0
 8010420:	611a      	str	r2, [r3, #16]
	st_data.f_ctrl_nowAcc		= 0;
 8010422:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010426:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801042a:	f04f 0200 	mov.w	r2, #0
 801042e:	60da      	str	r2, [r3, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 8010430:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010434:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010438:	f04f 0200 	mov.w	r2, #0
 801043c:	615a      	str	r2, [r3, #20]
	st_data.f_ctrl_trgt			= 0;						// 目標速度
 801043e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010442:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010446:	f04f 0200 	mov.w	r2, #0
 801044a:	619a      	str	r2, [r3, #24]
	st_data.f_ctrl_nowDist		= 0;						// 進んでいない
 801044c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010450:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010454:	f04f 0200 	mov.w	r2, #0
 8010458:	61da      	str	r2, [r3, #28]
	st_data.f_ctrl_dist			= 0;						// 加速距離
 801045a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801045e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010462:	f04f 0200 	mov.w	r2, #0
 8010466:	621a      	str	r2, [r3, #32]
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS1;		// 角加速度
	st_data.f_ctrl_jerkAngle	= st_info.f_mot_jerkAngle;
 8010468:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801046c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010470:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010474:	625a      	str	r2, [r3, #36]	@ 0x24
	st_data.f_ctrl_nowAccAngle		= 0;
 8010476:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801047a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801047e:	f04f 0200 	mov.w	r2, #0
 8010482:	629a      	str	r2, [r3, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= st_info.f_mot_trgtAccAngle1;				// 角加速度
 8010484:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010488:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801048c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010490:	62da      	str	r2, [r3, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 8010492:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010496:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801049a:	f04f 0200 	mov.w	r2, #0
 801049e:	631a      	str	r2, [r3, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_accAnglejerk_v;		// 目標角度
 80104a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80104a4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80104a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80104ac:	635a      	str	r2, [r3, #52]	@ 0x34
	st_data.f_ctrl_nowAngle			= 0;						// 現在角度
 80104ae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80104b2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80104b6:	f04f 0200 	mov.w	r2, #0
 80104ba:	639a      	str	r2, [r3, #56]	@ 0x38
	st_data.f_ctrl_angle			= st_info.f_mot_l1_accanglejerk;			// 目標角度
 80104bc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80104c0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80104c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80104c8:	63da      	str	r2, [r3, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 80104ca:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80104ce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80104d2:	f04f 0200 	mov.w	r2, #0
 80104d6:	605a      	str	r2, [r3, #4]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 80104d8:	f7f5 ffb4 	bl	8006444 <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 80104dc:	f107 0318 	add.w	r3, r7, #24
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7f6 f89d 	bl	8006620 <CTRL_setData>
	DCM_staMotAll();									// モータON
 80104e6:	f7f9 f8d9 	bl	800969c <DCM_staMotAll>

	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 80104ea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80104ee:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d01d      	beq.n	8010534 <MOT_turn+0xa3c>
 80104f8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80104fc:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	2b02      	cmp	r3, #2
 8010504:	d016      	beq.n	8010534 <MOT_turn+0xa3c>
 8010506:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801050a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	2b04      	cmp	r3, #4
 8010512:	d129      	bne.n	8010568 <MOT_turn+0xa70>
		while( Get_NowAngle() > st_info.f_mot_l1_accanglejerk ){			// 指定角度到達待ち
 8010514:	e00e      	b.n	8010534 <MOT_turn+0xa3c>
			if( SYS_isOutOfCtrl() == TRUE ){
 8010516:	f7f9 f86b 	bl	80095f0 <SYS_isOutOfCtrl>
 801051a:	4603      	mov	r3, r0
 801051c:	2b00      	cmp	r3, #0
 801051e:	d009      	beq.n	8010534 <MOT_turn+0xa3c>
				CTRL_stop();
 8010520:	f7f5 ff80 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010524:	2000      	movs	r0, #0
 8010526:	f7f9 f895 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 801052a:	2001      	movs	r0, #1
 801052c:	f7f9 f892 	bl	8009654 <DCM_brakeMot>
				break;
 8010530:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010532:	e024      	b.n	801057e <MOT_turn+0xa86>
		while( Get_NowAngle() > st_info.f_mot_l1_accanglejerk ){			// 指定角度到達待ち
 8010534:	f7f5 ff0e 	bl	8006354 <Get_NowAngle>
 8010538:	eeb0 7a40 	vmov.f32	s14, s0
 801053c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8010540:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010548:	dce5      	bgt.n	8010516 <MOT_turn+0xa1e>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 801054a:	e018      	b.n	801057e <MOT_turn+0xa86>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( Get_NowAngle() < st_info.f_mot_l1_accanglejerk ){			// 指定角度到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 801054c:	f7f9 f850 	bl	80095f0 <SYS_isOutOfCtrl>
 8010550:	4603      	mov	r3, r0
 8010552:	2b00      	cmp	r3, #0
 8010554:	d008      	beq.n	8010568 <MOT_turn+0xa70>
				CTRL_stop();
 8010556:	f7f5 ff65 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 801055a:	2000      	movs	r0, #0
 801055c:	f7f9 f87a 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010560:	2001      	movs	r0, #1
 8010562:	f7f9 f877 	bl	8009654 <DCM_brakeMot>
				break;
 8010566:	e00a      	b.n	801057e <MOT_turn+0xa86>
		while( Get_NowAngle() < st_info.f_mot_l1_accanglejerk ){			// 指定角度到達待ち
 8010568:	f7f5 fef4 	bl	8006354 <Get_NowAngle>
 801056c:	eeb0 7a40 	vmov.f32	s14, s0
 8010570:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8010574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801057c:	d4e6      	bmi.n	801054c <MOT_turn+0xa54>
			}				// 途中で制御不能になった
		}
	}
	//jerk const
	st_data.en_ctrl_type		= CTRL_ACC_TRUN;
 801057e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010582:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010586:	2207      	movs	r2, #7
 8010588:	701a      	strb	r2, [r3, #0]
	st_data.f_ctrl_jerk			= 0;
 801058a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801058e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010592:	f04f 0200 	mov.w	r2, #0
 8010596:	609a      	str	r2, [r3, #8]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8010598:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801059c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80105a0:	f04f 0200 	mov.w	r2, #0
 80105a4:	611a      	str	r2, [r3, #16]
	st_data.f_ctrl_nowAcc		= 0;
 80105a6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80105aa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80105ae:	f04f 0200 	mov.w	r2, #0
 80105b2:	60da      	str	r2, [r3, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 80105b4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80105b8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80105bc:	f04f 0200 	mov.w	r2, #0
 80105c0:	615a      	str	r2, [r3, #20]
	st_data.f_ctrl_trgt			= 0;						// 目標速度
 80105c2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80105c6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80105ca:	f04f 0200 	mov.w	r2, #0
 80105ce:	619a      	str	r2, [r3, #24]
	st_data.f_ctrl_nowDist		= 0;						// 進んでいない
 80105d0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80105d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80105d8:	f04f 0200 	mov.w	r2, #0
 80105dc:	61da      	str	r2, [r3, #28]
	st_data.f_ctrl_dist			= 0;						// 加速距離
 80105de:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80105e2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80105e6:	f04f 0200 	mov.w	r2, #0
 80105ea:	621a      	str	r2, [r3, #32]
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS1;		// 角加速度
	st_data.f_ctrl_jerkAngle	= 0;
 80105ec:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80105f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80105f4:	f04f 0200 	mov.w	r2, #0
 80105f8:	625a      	str	r2, [r3, #36]	@ 0x24
	st_data.f_ctrl_nowAccAngle		= st_info.f_mot_trgtAccAngle1;
 80105fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80105fe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010602:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010606:	629a      	str	r2, [r3, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= st_info.f_mot_trgtAccAngle1;				// 角加速度
 8010608:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801060c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010610:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010614:	62da      	str	r2, [r3, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_accAnglejerk_v;						// 現在角速度
 8010616:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801061a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801061e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010622:	631a      	str	r2, [r3, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_trgtAngleS-st_info.f_mot_accAnglejerk_v;		// 目標角度
 8010624:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8010628:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 801062c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010630:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010634:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010638:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	st_data.f_ctrl_nowAngle			= st_info.f_mot_l1_accanglejerk;						// 現在角度
 801063c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010640:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010644:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010648:	639a      	str	r2, [r3, #56]	@ 0x38
	st_data.f_ctrl_angle			= st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst;			// 目標角度
 801064a:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 801064e:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8010652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010656:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801065a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801065e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 8010662:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010666:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801066a:	f04f 0200 	mov.w	r2, #0
 801066e:	605a      	str	r2, [r3, #4]
	CTRL_setData( &st_data );							// データセット
 8010670:	f107 0318 	add.w	r3, r7, #24
 8010674:	4618      	mov	r0, r3
 8010676:	f7f5 ffd3 	bl	8006620 <CTRL_setData>
	DCM_staMotAll();									// モータON
 801067a:	f7f9 f80f 	bl	800969c <DCM_staMotAll>

	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 801067e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010682:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d01d      	beq.n	80106c8 <MOT_turn+0xbd0>
 801068c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010690:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	2b02      	cmp	r3, #2
 8010698:	d016      	beq.n	80106c8 <MOT_turn+0xbd0>
 801069a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801069e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	2b04      	cmp	r3, #4
 80106a6:	d12f      	bne.n	8010708 <MOT_turn+0xc10>
		while( Get_NowAngle() > (st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst) ){			// 指定角度到達待ち
 80106a8:	e00e      	b.n	80106c8 <MOT_turn+0xbd0>
			if( SYS_isOutOfCtrl() == TRUE ){
 80106aa:	f7f8 ffa1 	bl	80095f0 <SYS_isOutOfCtrl>
 80106ae:	4603      	mov	r3, r0
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d009      	beq.n	80106c8 <MOT_turn+0xbd0>
				CTRL_stop();
 80106b4:	f7f5 feb6 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 80106b8:	2000      	movs	r0, #0
 80106ba:	f7f8 ffcb 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 80106be:	2001      	movs	r0, #1
 80106c0:	f7f8 ffc8 	bl	8009654 <DCM_brakeMot>
				break;
 80106c4:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 80106c6:	e02e      	b.n	8010726 <MOT_turn+0xc2e>
		while( Get_NowAngle() > (st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst) ){			// 指定角度到達待ち
 80106c8:	f7f5 fe44 	bl	8006354 <Get_NowAngle>
 80106cc:	eef0 6a40 	vmov.f32	s13, s0
 80106d0:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 80106d4:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 80106d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106dc:	eef4 6ae7 	vcmpe.f32	s13, s15
 80106e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106e4:	dce1      	bgt.n	80106aa <MOT_turn+0xbb2>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 80106e6:	e01e      	b.n	8010726 <MOT_turn+0xc2e>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( Get_NowAngle() < (st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst) ){			// 指定角度到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 80106e8:	f7f8 ff82 	bl	80095f0 <SYS_isOutOfCtrl>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d00a      	beq.n	8010708 <MOT_turn+0xc10>
				CTRL_stop();
 80106f2:	f7f5 fe97 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 80106f6:	2000      	movs	r0, #0
 80106f8:	f7f8 ffac 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 80106fc:	2001      	movs	r0, #1
 80106fe:	f7f8 ffa9 	bl	8009654 <DCM_brakeMot>
				break;
 8010702:	e010      	b.n	8010726 <MOT_turn+0xc2e>
 8010704:	20017bec 	.word	0x20017bec
		while( Get_NowAngle() < (st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst) ){			// 指定角度到達待ち
 8010708:	f7f5 fe24 	bl	8006354 <Get_NowAngle>
 801070c:	eef0 6a40 	vmov.f32	s13, s0
 8010710:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8010714:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8010718:	ee77 7a27 	vadd.f32	s15, s14, s15
 801071c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010724:	d4e0      	bmi.n	80106e8 <MOT_turn+0xbf0>
			}				// 途中で制御不能になった
		}
	}
	//-jerk
	st_data.en_ctrl_type			= CTRL_ACC_TRUN;
 8010726:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801072a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801072e:	2207      	movs	r2, #7
 8010730:	701a      	strb	r2, [r3, #0]
	st_data.f_ctrl_jerk			= 0;
 8010732:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010736:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801073a:	f04f 0200 	mov.w	r2, #0
 801073e:	609a      	str	r2, [r3, #8]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8010740:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010744:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010748:	f04f 0200 	mov.w	r2, #0
 801074c:	611a      	str	r2, [r3, #16]
	st_data.f_ctrl_nowAcc		= 0;
 801074e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010752:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010756:	f04f 0200 	mov.w	r2, #0
 801075a:	60da      	str	r2, [r3, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 801075c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010760:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010764:	f04f 0200 	mov.w	r2, #0
 8010768:	615a      	str	r2, [r3, #20]
	st_data.f_ctrl_trgt			= 0;						// 目標速度
 801076a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801076e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010772:	f04f 0200 	mov.w	r2, #0
 8010776:	619a      	str	r2, [r3, #24]
	st_data.f_ctrl_nowDist		= 0;						// 進んでいない
 8010778:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801077c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010780:	f04f 0200 	mov.w	r2, #0
 8010784:	61da      	str	r2, [r3, #28]
	st_data.f_ctrl_dist			= 0;						// 加速距離
 8010786:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801078a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801078e:	f04f 0200 	mov.w	r2, #0
 8010792:	621a      	str	r2, [r3, #32]
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS1;		// 角加速度
	st_data.f_ctrl_jerkAngle	= st_info.f_mot_jerkAngle*(-1.0);
 8010794:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010798:	4618      	mov	r0, r3
 801079a:	f7ef fefd 	bl	8000598 <__aeabi_f2d>
 801079e:	4602      	mov	r2, r0
 80107a0:	460b      	mov	r3, r1
 80107a2:	4610      	mov	r0, r2
 80107a4:	4619      	mov	r1, r3
 80107a6:	f7f0 fa47 	bl	8000c38 <__aeabi_d2f>
 80107aa:	4603      	mov	r3, r0
 80107ac:	ee07 3a90 	vmov	s15, r3
 80107b0:	eef1 7a67 	vneg.f32	s15, s15
 80107b4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80107b8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80107bc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	st_data.f_ctrl_nowAccAngle		= st_info.f_mot_trgtAccAngle1;
 80107c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80107c4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80107c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80107cc:	629a      	str	r2, [r3, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 80107ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80107d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80107d6:	f04f 0200 	mov.w	r2, #0
 80107da:	62da      	str	r2, [r3, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_trgtAngleS - st_info.f_mot_accAnglejerk_v;						// 現在角速度
 80107dc:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 80107e0:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 80107e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107e8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80107ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80107f0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_trgtAngleS;		
 80107f4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80107f8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80107fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010800:	635a      	str	r2, [r3, #52]	@ 0x34
	st_data.f_ctrl_nowAngle			= st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst;						// 現在角度
 8010802:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8010806:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 801080a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801080e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010812:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010816:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	st_data.f_ctrl_angle			= st_info.f_mot_angle1;			// 目標角度
 801081a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801081e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010822:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010826:	63da      	str	r2, [r3, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 8010828:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801082c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010830:	f04f 0200 	mov.w	r2, #0
 8010834:	605a      	str	r2, [r3, #4]
	CTRL_setData( &st_data );							// データセット
 8010836:	f107 0318 	add.w	r3, r7, #24
 801083a:	4618      	mov	r0, r3
 801083c:	f7f5 fef0 	bl	8006620 <CTRL_setData>
	DCM_staMotAll();									// モータON
 8010840:	f7f8 ff2c 	bl	800969c <DCM_staMotAll>

	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010844:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010848:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 801084c:	781b      	ldrb	r3, [r3, #0]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d01d      	beq.n	801088e <MOT_turn+0xd96>
 8010852:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010856:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	2b02      	cmp	r3, #2
 801085e:	d016      	beq.n	801088e <MOT_turn+0xd96>
 8010860:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010864:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010868:	781b      	ldrb	r3, [r3, #0]
 801086a:	2b04      	cmp	r3, #4
 801086c:	d129      	bne.n	80108c2 <MOT_turn+0xdca>
		while( Get_NowAngle() > st_info.f_mot_angle1 ){			// 指定角度到達待ち
 801086e:	e00e      	b.n	801088e <MOT_turn+0xd96>
			if( SYS_isOutOfCtrl() == TRUE ){
 8010870:	f7f8 febe 	bl	80095f0 <SYS_isOutOfCtrl>
 8010874:	4603      	mov	r3, r0
 8010876:	2b00      	cmp	r3, #0
 8010878:	d009      	beq.n	801088e <MOT_turn+0xd96>
				CTRL_stop();
 801087a:	f7f5 fdd3 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 801087e:	2000      	movs	r0, #0
 8010880:	f7f8 fee8 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010884:	2001      	movs	r0, #1
 8010886:	f7f8 fee5 	bl	8009654 <DCM_brakeMot>
				break;
 801088a:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 801088c:	e024      	b.n	80108d8 <MOT_turn+0xde0>
		while( Get_NowAngle() > st_info.f_mot_angle1 ){			// 指定角度到達待ち
 801088e:	f7f5 fd61 	bl	8006354 <Get_NowAngle>
 8010892:	eeb0 7a40 	vmov.f32	s14, s0
 8010896:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 801089a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801089e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a2:	dce5      	bgt.n	8010870 <MOT_turn+0xd78>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 80108a4:	e018      	b.n	80108d8 <MOT_turn+0xde0>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( Get_NowAngle() < st_info.f_mot_angle1 ){			// 指定角度到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 80108a6:	f7f8 fea3 	bl	80095f0 <SYS_isOutOfCtrl>
 80108aa:	4603      	mov	r3, r0
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d008      	beq.n	80108c2 <MOT_turn+0xdca>
				CTRL_stop();
 80108b0:	f7f5 fdb8 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 80108b4:	2000      	movs	r0, #0
 80108b6:	f7f8 fecd 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 80108ba:	2001      	movs	r0, #1
 80108bc:	f7f8 feca 	bl	8009654 <DCM_brakeMot>
				break;
 80108c0:	e00a      	b.n	80108d8 <MOT_turn+0xde0>
		while( Get_NowAngle() < st_info.f_mot_angle1 ){			// 指定角度到達待ち
 80108c2:	f7f5 fd47 	bl	8006354 <Get_NowAngle>
 80108c6:	eeb0 7a40 	vmov.f32	s14, s0
 80108ca:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 80108ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80108d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d6:	d4e6      	bmi.n	80108a6 <MOT_turn+0xdae>
		st_info.f_mot_angle1_2		= st_info.f_mot_angle - f_angle3;																// 第1+2移動角度[rad]
//		printf("   [f_angle3]%d [f_angle1_2]%d\n\r", (int32_t)f_angle3, (int32_t)	st_info.f_angle1_2 );
	}
//	printf("[f_TrgtAngleS] %5.2f,st_info.f_angle1_2%5.2f,f_angle2%5.2f\n\r",f_TrgtAngleS,st_info.f_angle1_2,f_angle3);
*/
	st_data.en_ctrl_type			= CTRL_CONST_TRUN;
 80108d8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80108dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80108e0:	2208      	movs	r2, #8
 80108e2:	701a      	strb	r2, [r3, #0]
	st_data.f_ctrl_jerk			= 0;
 80108e4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80108e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80108ec:	f04f 0200 	mov.w	r2, #0
 80108f0:	609a      	str	r2, [r3, #8]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 80108f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80108f6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80108fa:	f04f 0200 	mov.w	r2, #0
 80108fe:	611a      	str	r2, [r3, #16]
	st_data.f_ctrl_nowAcc		= 0;
 8010900:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010904:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010908:	f04f 0200 	mov.w	r2, #0
 801090c:	60da      	str	r2, [r3, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 801090e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010912:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010916:	f04f 0200 	mov.w	r2, #0
 801091a:	615a      	str	r2, [r3, #20]
	st_data.f_ctrl_trgt			= 0;						// 目標速度
 801091c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010920:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010924:	f04f 0200 	mov.w	r2, #0
 8010928:	619a      	str	r2, [r3, #24]
	st_data.f_ctrl_nowDist		= 0;						// 進んでいない
 801092a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801092e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010932:	f04f 0200 	mov.w	r2, #0
 8010936:	61da      	str	r2, [r3, #28]
	st_data.f_ctrl_dist			= 0;						// 等速完了位置
 8010938:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801093c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010940:	f04f 0200 	mov.w	r2, #0
 8010944:	621a      	str	r2, [r3, #32]
//	st_data.f_ctrl_accAngleS		= 0;						// 角加速度
	st_data.f_ctrl_jerkAngle	= 0;
 8010946:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801094a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801094e:	f04f 0200 	mov.w	r2, #0
 8010952:	625a      	str	r2, [r3, #36]	@ 0x24
	st_data.f_ctrl_nowAccAngle		= 0;
 8010954:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010958:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801095c:	f04f 0200 	mov.w	r2, #0
 8010960:	629a      	str	r2, [r3, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 8010962:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010966:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801096a:	f04f 0200 	mov.w	r2, #0
 801096e:	62da      	str	r2, [r3, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_trgtAngleS;				// 現在角速度
 8010970:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8010974:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010978:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801097c:	631a      	str	r2, [r3, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_trgtAngleS;				// 目標角度
 801097e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8010982:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010986:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801098a:	635a      	str	r2, [r3, #52]	@ 0x34
	st_data.f_ctrl_nowAngle			= st_info.f_mot_angle1;			// 現在角度
 801098c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8010990:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010994:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010998:	639a      	str	r2, [r3, #56]	@ 0x38
	st_data.f_ctrl_angle			= st_info.f_mot_angle1_2;			// 目標角度
 801099a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801099e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80109a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80109a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 80109a8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80109ac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80109b0:	f04f 0200 	mov.w	r2, #0
 80109b4:	605a      	str	r2, [r3, #4]
	CTRL_setData( &st_data );							// データセット
 80109b6:	f107 0318 	add.w	r3, r7, #24
 80109ba:	4618      	mov	r0, r3
 80109bc:	f7f5 fe30 	bl	8006620 <CTRL_setData>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 80109c0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80109c4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d01d      	beq.n	8010a0a <MOT_turn+0xf12>
 80109ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80109d2:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	2b02      	cmp	r3, #2
 80109da:	d016      	beq.n	8010a0a <MOT_turn+0xf12>
 80109dc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80109e0:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	2b04      	cmp	r3, #4
 80109e8:	d129      	bne.n	8010a3e <MOT_turn+0xf46>
		while( Get_NowAngle() > st_info.f_mot_angle1_2 ){			// 指定距離到達待ち
 80109ea:	e00e      	b.n	8010a0a <MOT_turn+0xf12>
			if( SYS_isOutOfCtrl() == TRUE ){
 80109ec:	f7f8 fe00 	bl	80095f0 <SYS_isOutOfCtrl>
 80109f0:	4603      	mov	r3, r0
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d009      	beq.n	8010a0a <MOT_turn+0xf12>
				CTRL_stop();
 80109f6:	f7f5 fd15 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 80109fa:	2000      	movs	r0, #0
 80109fc:	f7f8 fe2a 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010a00:	2001      	movs	r0, #1
 8010a02:	f7f8 fe27 	bl	8009654 <DCM_brakeMot>
				break;
 8010a06:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010a08:	e024      	b.n	8010a54 <MOT_turn+0xf5c>
		while( Get_NowAngle() > st_info.f_mot_angle1_2 ){			// 指定距離到達待ち
 8010a0a:	f7f5 fca3 	bl	8006354 <Get_NowAngle>
 8010a0e:	eeb0 7a40 	vmov.f32	s14, s0
 8010a12:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8010a16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a1e:	dce5      	bgt.n	80109ec <MOT_turn+0xef4>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010a20:	e018      	b.n	8010a54 <MOT_turn+0xf5c>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( Get_NowAngle() < st_info.f_mot_angle1_2 ){			// 指定距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 8010a22:	f7f8 fde5 	bl	80095f0 <SYS_isOutOfCtrl>
 8010a26:	4603      	mov	r3, r0
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d008      	beq.n	8010a3e <MOT_turn+0xf46>
				CTRL_stop();
 8010a2c:	f7f5 fcfa 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010a30:	2000      	movs	r0, #0
 8010a32:	f7f8 fe0f 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010a36:	2001      	movs	r0, #1
 8010a38:	f7f8 fe0c 	bl	8009654 <DCM_brakeMot>
				break;
 8010a3c:	e00a      	b.n	8010a54 <MOT_turn+0xf5c>
		while( Get_NowAngle() < st_info.f_mot_angle1_2 ){			// 指定距離到達待ち
 8010a3e:	f7f5 fc89 	bl	8006354 <Get_NowAngle>
 8010a42:	eeb0 7a40 	vmov.f32	s14, s0
 8010a46:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8010a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a52:	d4e6      	bmi.n	8010a22 <MOT_turn+0xf2a>
//	CTRL_clrAngleErrSum();

	/* ------ */
	/*  // 減速  */
	/* ------ */
	st_data.en_ctrl_type			= CTRL_DEC_TRUN;
 8010a54:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010a58:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010a5c:	2209      	movs	r2, #9
 8010a5e:	701a      	strb	r2, [r3, #0]
	st_data.f_ctrl_jerk			= 0;
 8010a60:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010a64:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010a68:	f04f 0200 	mov.w	r2, #0
 8010a6c:	609a      	str	r2, [r3, #8]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8010a6e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010a72:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010a76:	f04f 0200 	mov.w	r2, #0
 8010a7a:	611a      	str	r2, [r3, #16]
	st_data.f_ctrl_nowAcc		= 0;
 8010a7c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010a80:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010a84:	f04f 0200 	mov.w	r2, #0
 8010a88:	60da      	str	r2, [r3, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 8010a8a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010a8e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010a92:	f04f 0200 	mov.w	r2, #0
 8010a96:	615a      	str	r2, [r3, #20]
	st_data.f_ctrl_trgt			= 0;						// 最終速度
 8010a98:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010a9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010aa0:	f04f 0200 	mov.w	r2, #0
 8010aa4:	619a      	str	r2, [r3, #24]
	st_data.f_ctrl_nowDist		= 0;						// 等速完了位置
 8010aa6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010aaa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010aae:	f04f 0200 	mov.w	r2, #0
 8010ab2:	61da      	str	r2, [r3, #28]
	st_data.f_ctrl_dist			= 0;						// 全移動完了位置
 8010ab4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010ab8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010abc:	f04f 0200 	mov.w	r2, #0
 8010ac0:	621a      	str	r2, [r3, #32]
	st_data.f_ctrl_jerkAngle	= st_info.f_mot_jerkAngle*(-1.0);
 8010ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7ef fd66 	bl	8000598 <__aeabi_f2d>
 8010acc:	4602      	mov	r2, r0
 8010ace:	460b      	mov	r3, r1
 8010ad0:	4610      	mov	r0, r2
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	f7f0 f8b0 	bl	8000c38 <__aeabi_d2f>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	ee07 3a90 	vmov	s15, r3
 8010ade:	eef1 7a67 	vneg.f32	s15, s15
 8010ae2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010ae6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010aea:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	st_data.f_ctrl_nowAccAngle		= 0;
 8010aee:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010af2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010af6:	f04f 0200 	mov.w	r2, #0
 8010afa:	629a      	str	r2, [r3, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= st_info.f_mot_trgtAccAngle3*(-1.0);				// 角加速度
 8010afc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7ef fd49 	bl	8000598 <__aeabi_f2d>
 8010b06:	4602      	mov	r2, r0
 8010b08:	460b      	mov	r3, r1
 8010b0a:	4610      	mov	r0, r2
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	f7f0 f893 	bl	8000c38 <__aeabi_d2f>
 8010b12:	4603      	mov	r3, r0
 8010b14:	ee07 3a90 	vmov	s15, r3
 8010b18:	eef1 7a67 	vneg.f32	s15, s15
 8010b1c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010b20:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010b24:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_trgtAngleS;				// 現在角速度
 8010b28:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8010b2c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010b30:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010b34:	631a      	str	r2, [r3, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_trgtAngleS-st_info.f_mot_accAnglejerk_v;				// 目標角度
 8010b36:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8010b3a:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8010b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b42:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010b46:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010b4a:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	st_data.f_ctrl_nowAngle			= st_info.f_mot_angle1_2;			// 現在角度
 8010b4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010b52:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010b56:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010b5a:	639a      	str	r2, [r3, #56]	@ 0x38
	st_data.f_ctrl_angle			= st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk;			// 目標角度
 8010b5c:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8010b60:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8010b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b68:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010b6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010b70:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 8010b74:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010b78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010b7c:	f04f 0200 	mov.w	r2, #0
 8010b80:	605a      	str	r2, [r3, #4]
	CTRL_setData( &st_data );							// データセット
 8010b82:	f107 0318 	add.w	r3, r7, #24
 8010b86:	4618      	mov	r0, r3
 8010b88:	f7f5 fd4a 	bl	8006620 <CTRL_setData>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010b8c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010b90:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010b94:	781b      	ldrb	r3, [r3, #0]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d01d      	beq.n	8010bd6 <MOT_turn+0x10de>
 8010b9a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010b9e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	2b02      	cmp	r3, #2
 8010ba6:	d016      	beq.n	8010bd6 <MOT_turn+0x10de>
 8010ba8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010bac:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010bb0:	781b      	ldrb	r3, [r3, #0]
 8010bb2:	2b04      	cmp	r3, #4
 8010bb4:	d12d      	bne.n	8010c12 <MOT_turn+0x111a>
		while( Get_NowAngle() > ( st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk) ){		// 指定距離到達待ち
 8010bb6:	e00e      	b.n	8010bd6 <MOT_turn+0x10de>
			if( SYS_isOutOfCtrl() == TRUE ){
 8010bb8:	f7f8 fd1a 	bl	80095f0 <SYS_isOutOfCtrl>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d009      	beq.n	8010bd6 <MOT_turn+0x10de>
				CTRL_stop();
 8010bc2:	f7f5 fc2f 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010bc6:	2000      	movs	r0, #0
 8010bc8:	f7f8 fd44 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010bcc:	2001      	movs	r0, #1
 8010bce:	f7f8 fd41 	bl	8009654 <DCM_brakeMot>
				break;
 8010bd2:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010bd4:	e02c      	b.n	8010c30 <MOT_turn+0x1138>
		while( Get_NowAngle() > ( st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk) ){		// 指定距離到達待ち
 8010bd6:	f7f5 fbbd 	bl	8006354 <Get_NowAngle>
 8010bda:	eef0 6a40 	vmov.f32	s13, s0
 8010bde:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8010be2:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8010be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010bea:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf2:	dce1      	bgt.n	8010bb8 <MOT_turn+0x10c0>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010bf4:	e01c      	b.n	8010c30 <MOT_turn+0x1138>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( Get_NowAngle() < ( st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk ) ){		// 指定距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 8010bf6:	f7f8 fcfb 	bl	80095f0 <SYS_isOutOfCtrl>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d008      	beq.n	8010c12 <MOT_turn+0x111a>
				CTRL_stop();
 8010c00:	f7f5 fc10 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010c04:	2000      	movs	r0, #0
 8010c06:	f7f8 fd25 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010c0a:	2001      	movs	r0, #1
 8010c0c:	f7f8 fd22 	bl	8009654 <DCM_brakeMot>
				break;
 8010c10:	e00e      	b.n	8010c30 <MOT_turn+0x1138>
		while( Get_NowAngle() < ( st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk ) ){		// 指定距離到達待ち
 8010c12:	f7f5 fb9f 	bl	8006354 <Get_NowAngle>
 8010c16:	eef0 6a40 	vmov.f32	s13, s0
 8010c1a:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8010c1e:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8010c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c26:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c2e:	d4e2      	bmi.n	8010bf6 <MOT_turn+0x10fe>
			}				// 途中で制御不能になった
		}
	}

	st_data.en_ctrl_type			= CTRL_DEC_TRUN;
 8010c30:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010c34:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010c38:	2209      	movs	r2, #9
 8010c3a:	701a      	strb	r2, [r3, #0]
	st_data.f_ctrl_jerk			= 0;
 8010c3c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010c40:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010c44:	f04f 0200 	mov.w	r2, #0
 8010c48:	609a      	str	r2, [r3, #8]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8010c4a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010c4e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010c52:	f04f 0200 	mov.w	r2, #0
 8010c56:	611a      	str	r2, [r3, #16]
	st_data.f_ctrl_nowAcc		= 0;
 8010c58:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010c5c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010c60:	f04f 0200 	mov.w	r2, #0
 8010c64:	60da      	str	r2, [r3, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 8010c66:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010c6a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010c6e:	f04f 0200 	mov.w	r2, #0
 8010c72:	615a      	str	r2, [r3, #20]
	st_data.f_ctrl_trgt			= 0;						// 最終速度
 8010c74:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010c78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010c7c:	f04f 0200 	mov.w	r2, #0
 8010c80:	619a      	str	r2, [r3, #24]
	st_data.f_ctrl_nowDist		= 0;						// 等速完了位置
 8010c82:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010c86:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010c8a:	f04f 0200 	mov.w	r2, #0
 8010c8e:	61da      	str	r2, [r3, #28]
	st_data.f_ctrl_dist			= 0;						// 全移動完了位置
 8010c90:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010c94:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010c98:	f04f 0200 	mov.w	r2, #0
 8010c9c:	621a      	str	r2, [r3, #32]
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS3;		// 角加速度
	st_data.f_ctrl_jerkAngle		= 0;
 8010c9e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010ca2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010ca6:	f04f 0200 	mov.w	r2, #0
 8010caa:	625a      	str	r2, [r3, #36]	@ 0x24
	st_data.f_ctrl_nowAccAngle		= st_info.f_mot_trgtAccAngle3*(-1.0);
 8010cac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f7ef fc71 	bl	8000598 <__aeabi_f2d>
 8010cb6:	4602      	mov	r2, r0
 8010cb8:	460b      	mov	r3, r1
 8010cba:	4610      	mov	r0, r2
 8010cbc:	4619      	mov	r1, r3
 8010cbe:	f7ef ffbb 	bl	8000c38 <__aeabi_d2f>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	ee07 3a90 	vmov	s15, r3
 8010cc8:	eef1 7a67 	vneg.f32	s15, s15
 8010ccc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010cd0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010cd4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= st_info.f_mot_trgtAccAngle3*(-1.0);
 8010cd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7ef fc5b 	bl	8000598 <__aeabi_f2d>
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	460b      	mov	r3, r1
 8010ce6:	4610      	mov	r0, r2
 8010ce8:	4619      	mov	r1, r3
 8010cea:	f7ef ffa5 	bl	8000c38 <__aeabi_d2f>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	ee07 3a90 	vmov	s15, r3
 8010cf4:	eef1 7a67 	vneg.f32	s15, s15
 8010cf8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010cfc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010d00:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_trgtAngleS-st_info.f_mot_accAnglejerk_v;				// 現在角速度
 8010d04:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8010d08:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8010d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d10:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010d14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010d18:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_accAnglejerk_v;						// 目標角度
 8010d1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010d20:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010d24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010d28:	635a      	str	r2, [r3, #52]	@ 0x34
	st_data.f_ctrl_nowAngle			= st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk;		// 現在角度
 8010d2a:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8010d2e:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8010d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d36:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010d3a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010d3e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	st_data.f_ctrl_angle			= st_info.f_mot_angle-st_info.f_mot_l3_accanglejerk;			// 目標角度
 8010d42:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 8010d46:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8010d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d4e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010d52:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010d56:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 8010d5a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010d5e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010d62:	f04f 0200 	mov.w	r2, #0
 8010d66:	605a      	str	r2, [r3, #4]
	CTRL_setData( &st_data );							// データセット
 8010d68:	f107 0318 	add.w	r3, r7, #24
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f7f5 fc57 	bl	8006620 <CTRL_setData>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010d72:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010d76:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d01d      	beq.n	8010dbc <MOT_turn+0x12c4>
 8010d80:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010d84:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	2b02      	cmp	r3, #2
 8010d8c:	d016      	beq.n	8010dbc <MOT_turn+0x12c4>
 8010d8e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010d92:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	2b04      	cmp	r3, #4
 8010d9a:	d12d      	bne.n	8010df8 <MOT_turn+0x1300>
		while( Get_NowAngle() > ( st_info.f_mot_angle-st_info.f_mot_l3_accanglejerk) ){		// 指定距離到達待ち
 8010d9c:	e00e      	b.n	8010dbc <MOT_turn+0x12c4>
			if( SYS_isOutOfCtrl() == TRUE ){
 8010d9e:	f7f8 fc27 	bl	80095f0 <SYS_isOutOfCtrl>
 8010da2:	4603      	mov	r3, r0
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d009      	beq.n	8010dbc <MOT_turn+0x12c4>
				CTRL_stop();
 8010da8:	f7f5 fb3c 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010dac:	2000      	movs	r0, #0
 8010dae:	f7f8 fc51 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010db2:	2001      	movs	r0, #1
 8010db4:	f7f8 fc4e 	bl	8009654 <DCM_brakeMot>
				break;
 8010db8:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010dba:	e02c      	b.n	8010e16 <MOT_turn+0x131e>
		while( Get_NowAngle() > ( st_info.f_mot_angle-st_info.f_mot_l3_accanglejerk) ){		// 指定距離到達待ち
 8010dbc:	f7f5 faca 	bl	8006354 <Get_NowAngle>
 8010dc0:	eef0 6a40 	vmov.f32	s13, s0
 8010dc4:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 8010dc8:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8010dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010dd0:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dd8:	dce1      	bgt.n	8010d9e <MOT_turn+0x12a6>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010dda:	e01c      	b.n	8010e16 <MOT_turn+0x131e>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( Get_NowAngle() < ( st_info.f_mot_angle-st_info.f_mot_l3_accanglejerk ) ){		// 指定距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 8010ddc:	f7f8 fc08 	bl	80095f0 <SYS_isOutOfCtrl>
 8010de0:	4603      	mov	r3, r0
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d008      	beq.n	8010df8 <MOT_turn+0x1300>
				CTRL_stop();
 8010de6:	f7f5 fb1d 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010dea:	2000      	movs	r0, #0
 8010dec:	f7f8 fc32 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010df0:	2001      	movs	r0, #1
 8010df2:	f7f8 fc2f 	bl	8009654 <DCM_brakeMot>
				break;
 8010df6:	e00e      	b.n	8010e16 <MOT_turn+0x131e>
		while( Get_NowAngle() < ( st_info.f_mot_angle-st_info.f_mot_l3_accanglejerk ) ){		// 指定距離到達待ち
 8010df8:	f7f5 faac 	bl	8006354 <Get_NowAngle>
 8010dfc:	eef0 6a40 	vmov.f32	s13, s0
 8010e00:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 8010e04:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8010e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e0c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e14:	d4e2      	bmi.n	8010ddc <MOT_turn+0x12e4>
			}				// 途中で制御不能になった
		}
	}

	st_data.en_ctrl_type			= CTRL_DEC_TRUN;
 8010e16:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010e1a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010e1e:	2209      	movs	r2, #9
 8010e20:	701a      	strb	r2, [r3, #0]
	st_data.f_ctrl_jerk			= 0;
 8010e22:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010e26:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010e2a:	f04f 0200 	mov.w	r2, #0
 8010e2e:	609a      	str	r2, [r3, #8]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8010e30:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010e34:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010e38:	f04f 0200 	mov.w	r2, #0
 8010e3c:	611a      	str	r2, [r3, #16]
	st_data.f_ctrl_nowAcc		= 0;
 8010e3e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010e42:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010e46:	f04f 0200 	mov.w	r2, #0
 8010e4a:	60da      	str	r2, [r3, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 8010e4c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010e50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010e54:	f04f 0200 	mov.w	r2, #0
 8010e58:	615a      	str	r2, [r3, #20]
	st_data.f_ctrl_trgt			= 0;						// 最終速度
 8010e5a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010e5e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010e62:	f04f 0200 	mov.w	r2, #0
 8010e66:	619a      	str	r2, [r3, #24]
	st_data.f_ctrl_nowDist		= 0;						// 等速完了位置
 8010e68:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010e6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010e70:	f04f 0200 	mov.w	r2, #0
 8010e74:	61da      	str	r2, [r3, #28]
	st_data.f_ctrl_dist			= 0;						// 全移動完了位置
 8010e76:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010e7a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010e7e:	f04f 0200 	mov.w	r2, #0
 8010e82:	621a      	str	r2, [r3, #32]
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS3;		// 角加速度
	st_data.f_ctrl_jerkAngle	= st_info.f_mot_jerkAngle;
 8010e84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8010e88:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010e8c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010e90:	625a      	str	r2, [r3, #36]	@ 0x24
	st_data.f_ctrl_nowAccAngle		= st_info.f_mot_trgtAccAngle3*(-1.0);
 8010e92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7ef fb7e 	bl	8000598 <__aeabi_f2d>
 8010e9c:	4602      	mov	r2, r0
 8010e9e:	460b      	mov	r3, r1
 8010ea0:	4610      	mov	r0, r2
 8010ea2:	4619      	mov	r1, r3
 8010ea4:	f7ef fec8 	bl	8000c38 <__aeabi_d2f>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	ee07 3a90 	vmov	s15, r3
 8010eae:	eef1 7a67 	vneg.f32	s15, s15
 8010eb2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010eb6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010eba:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= 0;
 8010ebe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010ec2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010ec6:	f04f 0200 	mov.w	r2, #0
 8010eca:	62da      	str	r2, [r3, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_accAnglejerk_v;				// 現在角速度
 8010ecc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010ed0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010ed4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010ed8:	631a      	str	r2, [r3, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= 0;						// 目標角度
 8010eda:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010ede:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010ee2:	f04f 0200 	mov.w	r2, #0
 8010ee6:	635a      	str	r2, [r3, #52]	@ 0x34
	st_data.f_ctrl_nowAngle		= st_info.f_mot_angle-st_info.f_mot_l3_accanglejerk;		// 現在角度
 8010ee8:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 8010eec:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8010ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ef4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010ef8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010efc:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	st_data.f_ctrl_angle			= st_info.f_mot_angle;			// 目標角度
 8010f00:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8010f04:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010f08:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010f0c:	63da      	str	r2, [r3, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 8010f0e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010f12:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010f16:	f04f 0200 	mov.w	r2, #0
 8010f1a:	605a      	str	r2, [r3, #4]
	CTRL_setData( &st_data );							// データセット
 8010f1c:	f107 0318 	add.w	r3, r7, #24
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7f5 fb7d 	bl	8006620 <CTRL_setData>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010f26:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010f2a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d02a      	beq.n	8010f8a <MOT_turn+0x1492>
 8010f34:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010f38:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	2b02      	cmp	r3, #2
 8010f40:	d023      	beq.n	8010f8a <MOT_turn+0x1492>
 8010f42:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010f46:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010f4a:	781b      	ldrb	r3, [r3, #0]
 8010f4c:	2b04      	cmp	r3, #4
 8010f4e:	d146      	bne.n	8010fde <MOT_turn+0x14e6>
		while( Get_NowAngle() > ( st_info.f_mot_angle) ){		// 指定距離到達待ち
 8010f50:	e01b      	b.n	8010f8a <MOT_turn+0x1492>
			if( SYS_isOutOfCtrl() == TRUE ){
 8010f52:	f7f8 fb4d 	bl	80095f0 <SYS_isOutOfCtrl>
 8010f56:	4603      	mov	r3, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d008      	beq.n	8010f6e <MOT_turn+0x1476>
				CTRL_stop();
 8010f5c:	f7f5 fa62 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010f60:	2000      	movs	r0, #0
 8010f62:	f7f8 fb77 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010f66:	2001      	movs	r0, #1
 8010f68:	f7f8 fb74 	bl	8009654 <DCM_brakeMot>
				break;
 8010f6c:	e01a      	b.n	8010fa4 <MOT_turn+0x14ac>
			}				// 途中で制御不能になった
			if((EscapeWait>0.5)&&(SearchFlag == TRUE))break;
 8010f6e:	4b31      	ldr	r3, [pc, #196]	@ (8011034 <MOT_turn+0x153c>)
 8010f70:	edd3 7a00 	vldr	s15, [r3]
 8010f74:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f80:	dd03      	ble.n	8010f8a <MOT_turn+0x1492>
 8010f82:	4b2d      	ldr	r3, [pc, #180]	@ (8011038 <MOT_turn+0x1540>)
 8010f84:	781b      	ldrb	r3, [r3, #0]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d10b      	bne.n	8010fa2 <MOT_turn+0x14aa>
		while( Get_NowAngle() > ( st_info.f_mot_angle) ){		// 指定距離到達待ち
 8010f8a:	f7f5 f9e3 	bl	8006354 <Get_NowAngle>
 8010f8e:	eeb0 7a40 	vmov.f32	s14, s0
 8010f92:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8010f96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f9e:	dcd8      	bgt.n	8010f52 <MOT_turn+0x145a>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010fa0:	e02a      	b.n	8010ff8 <MOT_turn+0x1500>
			if((EscapeWait>0.5)&&(SearchFlag == TRUE))break;
 8010fa2:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010fa4:	e028      	b.n	8010ff8 <MOT_turn+0x1500>
		}
	}
	else{
		while( Get_NowAngle() < ( st_info.f_mot_angle ) ){		// 指定距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 8010fa6:	f7f8 fb23 	bl	80095f0 <SYS_isOutOfCtrl>
 8010faa:	4603      	mov	r3, r0
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d008      	beq.n	8010fc2 <MOT_turn+0x14ca>
				CTRL_stop();
 8010fb0:	f7f5 fa38 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010fb4:	2000      	movs	r0, #0
 8010fb6:	f7f8 fb4d 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010fba:	2001      	movs	r0, #1
 8010fbc:	f7f8 fb4a 	bl	8009654 <DCM_brakeMot>
				break;
 8010fc0:	e01a      	b.n	8010ff8 <MOT_turn+0x1500>
			}				// 途中で制御不能になった
			if((EscapeWait>0.5)&&(SearchFlag == TRUE))break;
 8010fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8011034 <MOT_turn+0x153c>)
 8010fc4:	edd3 7a00 	vldr	s15, [r3]
 8010fc8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fd4:	dd03      	ble.n	8010fde <MOT_turn+0x14e6>
 8010fd6:	4b18      	ldr	r3, [pc, #96]	@ (8011038 <MOT_turn+0x1540>)
 8010fd8:	781b      	ldrb	r3, [r3, #0]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d10b      	bne.n	8010ff6 <MOT_turn+0x14fe>
		while( Get_NowAngle() < ( st_info.f_mot_angle ) ){		// 指定距離到達待ち
 8010fde:	f7f5 f9b9 	bl	8006354 <Get_NowAngle>
 8010fe2:	eeb0 7a40 	vmov.f32	s14, s0
 8010fe6:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8010fea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ff2:	d4d8      	bmi.n	8010fa6 <MOT_turn+0x14ae>
 8010ff4:	e000      	b.n	8010ff8 <MOT_turn+0x1500>
			if((EscapeWait>0.5)&&(SearchFlag == TRUE))break;
 8010ff6:	bf00      	nop
		}
	}
//	printf("finish3\n");
	/* 停止 */
	LL_mDelay(200);				// 安定待ち
 8010ff8:	20c8      	movs	r0, #200	@ 0xc8
 8010ffa:	f00a fd37 	bl	801ba6c <LL_mDelay>
	CTRL_stop();			// 制御停止
 8010ffe:	f7f5 fa11 	bl	8006424 <CTRL_stop>
	DCM_brakeMot( DCM_R );		// ブレーキ
 8011002:	2000      	movs	r0, #0
 8011004:	f7f8 fb26 	bl	8009654 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 8011008:	2001      	movs	r0, #1
 801100a:	f7f8 fb23 	bl	8009654 <DCM_brakeMot>
	GYRO_endErrChkAngle();					// エラー検出終了
 801100e:	f7f8 fd8b 	bl	8009b28 <GYRO_endErrChkAngle>
//	CTRL_clrNowData();
	CTRL_setNowData_Err(/*st_data.f_dist,*/st_data.f_ctrl_angle);
 8011012:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8011016:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801101a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 801101e:	eeb0 0a67 	vmov.f32	s0, s15
 8011022:	f7f5 fab9 	bl	8006598 <CTRL_setNowData_Err>
}
 8011026:	bf00      	nop
 8011028:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801102c:	46bd      	mov	sp, r7
 801102e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011032:	bf00      	nop
 8011034:	200003fc 	.word	0x200003fc
 8011038:	2001bda0 	.word	0x2001bda0

0801103c <MOT_setSlaStaSpeed>:

void MOT_setSlaStaSpeed( float f_speed , uint8_t sla_cmd)
{
 801103c:	b480      	push	{r7}
 801103e:	b083      	sub	sp, #12
 8011040:	af00      	add	r7, sp, #0
 8011042:	ed87 0a01 	vstr	s0, [r7, #4]
 8011046:	4603      	mov	r3, r0
 8011048:	70fb      	strb	r3, [r7, #3]
	if(sla_cmd == SLA_90){
 801104a:	78fb      	ldrb	r3, [r7, #3]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d103      	bne.n	8011058 <MOT_setSlaStaSpeed+0x1c>
		f_MotSlaStaSpeed_90S = f_speed;
 8011050:	4a0e      	ldr	r2, [pc, #56]	@ (801108c <MOT_setSlaStaSpeed+0x50>)
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6013      	str	r3, [r2, #0]
		f_MotSlaStaSpeed_135S = f_speed;
	}	else if(sla_cmd == SLA_N90){
		f_MotSlaStaSpeed_V90 = f_speed;
	}

}
 8011056:	e013      	b.n	8011080 <MOT_setSlaStaSpeed+0x44>
	}	else if(sla_cmd == SLA_45){
 8011058:	78fb      	ldrb	r3, [r7, #3]
 801105a:	2b01      	cmp	r3, #1
 801105c:	d103      	bne.n	8011066 <MOT_setSlaStaSpeed+0x2a>
		f_MotSlaStaSpeed_45S = f_speed;
 801105e:	4a0c      	ldr	r2, [pc, #48]	@ (8011090 <MOT_setSlaStaSpeed+0x54>)
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6013      	str	r3, [r2, #0]
}
 8011064:	e00c      	b.n	8011080 <MOT_setSlaStaSpeed+0x44>
	}	else if(sla_cmd == SLA_135){
 8011066:	78fb      	ldrb	r3, [r7, #3]
 8011068:	2b02      	cmp	r3, #2
 801106a:	d103      	bne.n	8011074 <MOT_setSlaStaSpeed+0x38>
		f_MotSlaStaSpeed_135S = f_speed;
 801106c:	4a09      	ldr	r2, [pc, #36]	@ (8011094 <MOT_setSlaStaSpeed+0x58>)
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6013      	str	r3, [r2, #0]
}
 8011072:	e005      	b.n	8011080 <MOT_setSlaStaSpeed+0x44>
	}	else if(sla_cmd == SLA_N90){
 8011074:	78fb      	ldrb	r3, [r7, #3]
 8011076:	2b03      	cmp	r3, #3
 8011078:	d102      	bne.n	8011080 <MOT_setSlaStaSpeed+0x44>
		f_MotSlaStaSpeed_V90 = f_speed;
 801107a:	4a07      	ldr	r2, [pc, #28]	@ (8011098 <MOT_setSlaStaSpeed+0x5c>)
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6013      	str	r3, [r2, #0]
}
 8011080:	bf00      	nop
 8011082:	370c      	adds	r7, #12
 8011084:	46bd      	mov	sp, r7
 8011086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108a:	4770      	bx	lr
 801108c:	20017bd4 	.word	0x20017bd4
 8011090:	20017bd8 	.word	0x20017bd8
 8011094:	20017bdc 	.word	0x20017bdc
 8011098:	20017be0 	.word	0x20017be0

0801109c <MOT_getSlaStaSpeed>:

float MOT_getSlaStaSpeed( uint8_t sla_cmd )
{
 801109c:	b480      	push	{r7}
 801109e:	b085      	sub	sp, #20
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	4603      	mov	r3, r0
 80110a4:	71fb      	strb	r3, [r7, #7]
	float sla_speed;

	if(sla_cmd == SLA_90){
 80110a6:	79fb      	ldrb	r3, [r7, #7]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d103      	bne.n	80110b4 <MOT_getSlaStaSpeed+0x18>
		sla_speed = f_MotSlaStaSpeed_90S;
 80110ac:	4b10      	ldr	r3, [pc, #64]	@ (80110f0 <MOT_getSlaStaSpeed+0x54>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	60fb      	str	r3, [r7, #12]
 80110b2:	e013      	b.n	80110dc <MOT_getSlaStaSpeed+0x40>
	}else if(sla_cmd == SLA_45){
 80110b4:	79fb      	ldrb	r3, [r7, #7]
 80110b6:	2b01      	cmp	r3, #1
 80110b8:	d103      	bne.n	80110c2 <MOT_getSlaStaSpeed+0x26>
		sla_speed = f_MotSlaStaSpeed_45S;
 80110ba:	4b0e      	ldr	r3, [pc, #56]	@ (80110f4 <MOT_getSlaStaSpeed+0x58>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	60fb      	str	r3, [r7, #12]
 80110c0:	e00c      	b.n	80110dc <MOT_getSlaStaSpeed+0x40>
	}else if(sla_cmd == SLA_135){
 80110c2:	79fb      	ldrb	r3, [r7, #7]
 80110c4:	2b02      	cmp	r3, #2
 80110c6:	d103      	bne.n	80110d0 <MOT_getSlaStaSpeed+0x34>
		sla_speed = f_MotSlaStaSpeed_135S;
 80110c8:	4b0b      	ldr	r3, [pc, #44]	@ (80110f8 <MOT_getSlaStaSpeed+0x5c>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	60fb      	str	r3, [r7, #12]
 80110ce:	e005      	b.n	80110dc <MOT_getSlaStaSpeed+0x40>
	}else if(sla_cmd == SLA_N90){
 80110d0:	79fb      	ldrb	r3, [r7, #7]
 80110d2:	2b03      	cmp	r3, #3
 80110d4:	d102      	bne.n	80110dc <MOT_getSlaStaSpeed+0x40>
		sla_speed = f_MotSlaStaSpeed_V90;
 80110d6:	4b09      	ldr	r3, [pc, #36]	@ (80110fc <MOT_getSlaStaSpeed+0x60>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	60fb      	str	r3, [r7, #12]
	}
	return sla_speed;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	ee07 3a90 	vmov	s15, r3
}
 80110e2:	eeb0 0a67 	vmov.f32	s0, s15
 80110e6:	3714      	adds	r7, #20
 80110e8:	46bd      	mov	sp, r7
 80110ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ee:	4770      	bx	lr
 80110f0:	20017bd4 	.word	0x20017bd4
 80110f4:	20017bd8 	.word	0x20017bd8
 80110f8:	20017bdc 	.word	0x20017bdc
 80110fc:	20017be0 	.word	0x20017be0

08011100 <MOT_setTrgtSpeed>:

float MOT_setTrgtSpeed(float f_speed)
{
 8011100:	b480      	push	{r7}
 8011102:	b083      	sub	sp, #12
 8011104:	af00      	add	r7, sp, #0
 8011106:	ed87 0a01 	vstr	s0, [r7, #4]
	f_MotTrgtSpeed = f_speed;
 801110a:	4a07      	ldr	r2, [pc, #28]	@ (8011128 <MOT_setTrgtSpeed+0x28>)
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6013      	str	r3, [r2, #0]
	return f_MotTrgtSpeed;
 8011110:	4b05      	ldr	r3, [pc, #20]	@ (8011128 <MOT_setTrgtSpeed+0x28>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	ee07 3a90 	vmov	s15, r3
}
 8011118:	eeb0 0a67 	vmov.f32	s0, s15
 801111c:	370c      	adds	r7, #12
 801111e:	46bd      	mov	sp, r7
 8011120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011124:	4770      	bx	lr
 8011126:	bf00      	nop
 8011128:	20017bd0 	.word	0x20017bd0

0801112c <MOT_setNowSpeed>:

void MOT_setNowSpeed(float f_speed)
{
 801112c:	b480      	push	{r7}
 801112e:	b083      	sub	sp, #12
 8011130:	af00      	add	r7, sp, #0
 8011132:	ed87 0a01 	vstr	s0, [r7, #4]
	f_MotNowSpeed = f_speed;
 8011136:	4a04      	ldr	r2, [pc, #16]	@ (8011148 <MOT_setNowSpeed+0x1c>)
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	6013      	str	r3, [r2, #0]
}
 801113c:	bf00      	nop
 801113e:	370c      	adds	r7, #12
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr
 8011148:	20017bcc 	.word	0x20017bcc

0801114c <MOT_goHitBackWall>:

void MOT_goHitBackWall(void)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b0b8      	sub	sp, #224	@ 0xe0
 8011150:	af00      	add	r7, sp, #0

	/* ---------------- */
	/*  動作データ計算  */
	/* ---------------- */
	/* 加速度 */
	st_info.f_mot_trgtAcc1= 1200.0;												// 角加速度1[rad/s^2]												// 角加速度3[rad/s^2]
 8011152:	4b2b      	ldr	r3, [pc, #172]	@ (8011200 <MOT_goHitBackWall+0xb4>)
 8011154:	64bb      	str	r3, [r7, #72]	@ 0x48

	GYRO_staErrChkAngle();			// エラー検出開始
 8011156:	f7f8 fcd5 	bl	8009b04 <GYRO_staErrChkAngle>
	/*      実動作       */
	/* ================ */
	/* ------ */
	/*  加速  */
	/* ------ */
	st_data.en_ctrl_type			= CTRL_HIT_WALL;
 801115a:	2306      	movs	r3, #6
 801115c:	703b      	strb	r3, [r7, #0]
	st_data.f_ctrl_jerk			= st_Info.f_mot_jerk;
 801115e:	4b29      	ldr	r3, [pc, #164]	@ (8011204 <MOT_goHitBackWall+0xb8>)
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	60bb      	str	r3, [r7, #8]
	st_data.f_ctrl_trgtAcc		= st_info.f_mot_trgtAcc1;						// 加速度指定
 8011164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011166:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_nowAcc		= 0;
 8011168:	f04f 0300 	mov.w	r3, #0
 801116c:	60fb      	str	r3, [r7, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 801116e:	f04f 0300 	mov.w	r3, #0
 8011172:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_trgt			= 0;						// 目標速度
 8011174:	f04f 0300 	mov.w	r3, #0
 8011178:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowDist		= 0;						// 進んでいない
 801117a:	f04f 0300 	mov.w	r3, #0
 801117e:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_dist			= 0;						// 加速距離
 8011180:	f04f 0300 	mov.w	r3, #0
 8011184:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowAccAngle		= 0;
 8011186:	f04f 0300 	mov.w	r3, #0
 801118a:	62bb      	str	r3, [r7, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= 0;
 801118c:	f04f 0300 	mov.w	r3, #0
 8011190:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 8011192:	f04f 0300 	mov.w	r3, #0
 8011196:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= 0;		// 目標角度
 8011198:	f04f 0300 	mov.w	r3, #0
 801119c:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 801119e:	f04f 0300 	mov.w	r3, #0
 80111a2:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_angle			= 0;			// 目標角度
 80111a4:	f04f 0300 	mov.w	r3, #0
 80111a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 80111aa:	f04f 0300 	mov.w	r3, #0
 80111ae:	607b      	str	r3, [r7, #4]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 80111b0:	f7f5 f948 	bl	8006444 <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 80111b4:	463b      	mov	r3, r7
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7f5 fa32 	bl	8006620 <CTRL_setData>
	DCM_staMotAll();									// モータON
 80111bc:	f7f8 fa6e 	bl	800969c <DCM_staMotAll>
//	printf("目標速度 %f 目標位置 %f\r\n",st_data.f_trgt,st_data.f_dist);

	/*停止*/
	LL_mDelay(400);				// 安定待ち
 80111c0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80111c4:	f00a fc52 	bl	801ba6c <LL_mDelay>
	CTRL_stop();			// 制御停止
 80111c8:	f7f5 f92c 	bl	8006424 <CTRL_stop>
	DCM_brakeMot( DCM_R );		// ブレーキ
 80111cc:	2000      	movs	r0, #0
 80111ce:	f7f8 fa41 	bl	8009654 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 80111d2:	2001      	movs	r0, #1
 80111d4:	f7f8 fa3e 	bl	8009654 <DCM_brakeMot>

	LL_mDelay(100);
 80111d8:	2064      	movs	r0, #100	@ 0x64
 80111da:	f00a fc47 	bl	801ba6c <LL_mDelay>

	f_MotNowSpeed = 0.0f;		//現在速度更新
 80111de:	4b0a      	ldr	r3, [pc, #40]	@ (8011208 <MOT_goHitBackWall+0xbc>)
 80111e0:	f04f 0200 	mov.w	r2, #0
 80111e4:	601a      	str	r2, [r3, #0]

	GYRO_endErrChkAngle();					// エラー検出終了
 80111e6:	f7f8 fc9f 	bl	8009b28 <GYRO_endErrChkAngle>
	CTRL_clrNowData();
 80111ea:	f7f5 f99b 	bl	8006524 <CTRL_clrNowData>
	CTRL_clrAngleErrSum();
 80111ee:	f7f5 f971 	bl	80064d4 <CTRL_clrAngleErrSum>
	CTRL_clrSpeedErrSum();
 80111f2:	f7f5 f983 	bl	80064fc <CTRL_clrSpeedErrSum>
}
 80111f6:	bf00      	nop
 80111f8:	37e0      	adds	r7, #224	@ 0xe0
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
 80111fe:	bf00      	nop
 8011200:	44960000 	.word	0x44960000
 8011204:	20017b2c 	.word	0x20017b2c
 8011208:	20017bcc 	.word	0x20017bcc
 801120c:	00000000 	.word	0x00000000

08011210 <MOT_goSla>:

void MOT_goSla( enMOT_SLA_CMD en_type, stSLA* p_sla )
{
 8011210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011214:	b0bc      	sub	sp, #240	@ 0xf0
 8011216:	af00      	add	r7, sp, #0
 8011218:	4603      	mov	r3, r0
 801121a:	6039      	str	r1, [r7, #0]
 801121c:	71fb      	strb	r3, [r7, #7]

	/* ---------------- */
	/*  動作データ計算  */
	/* ---------------- */

	st_Info.f_mot_jerk		= 0;
 801121e:	4bc1      	ldr	r3, [pc, #772]	@ (8011524 <MOT_goSla+0x314>)
 8011220:	f04f 0200 	mov.w	r2, #0
 8011224:	605a      	str	r2, [r3, #4]
	/* 加速度 */
	st_info.f_mot_trgtAcc1 		= 0;																// 加速度1[mm/s^2]
 8011226:	f04f 0300 	mov.w	r3, #0
 801122a:	653b      	str	r3, [r7, #80]	@ 0x50
	st_info.f_mot_trgtAcc3 		= 0;																// 加速度3[mm/s^2]
 801122c:	f04f 0300 	mov.w	r3, #0
 8011230:	657b      	str	r3, [r7, #84]	@ 0x54

	/* 速度 */
	st_info.f_mot_now		= p_sla->f_sla_speed;													// 現在速度
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	667b      	str	r3, [r7, #100]	@ 0x64
	st_info.f_mot_trgt		= p_sla->f_sla_speed;													// 目標速度
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	66bb      	str	r3, [r7, #104]	@ 0x68
	st_info.f_mot_last		= p_sla->f_sla_speed;													// 最終速度
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	66fb      	str	r3, [r7, #108]	@ 0x6c

	/* 距離 */
	st_info.f_mot_dist		= 0;																// 移動距離
 8011244:	f04f 0300 	mov.w	r3, #0
 8011248:	67bb      	str	r3, [r7, #120]	@ 0x78
	st_info.f_mot_l1		= 0;																// 第1移動距離[mm]
 801124a:	f04f 0300 	mov.w	r3, #0
 801124e:	67fb      	str	r3, [r7, #124]	@ 0x7c
	st_info.f_mot_l1_2		= 0;																// 第1+2移動距離[mm]
 8011250:	f04f 0300 	mov.w	r3, #0
 8011254:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	//角度jerk
	st_info.f_mot_jerkAngle = p_sla->f_sla_angJerk;
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	/* 角加速度 */
	st_info.f_mot_trgtAccAngle1= p_sla->f_sla_angAcc;													// 角加速度1[deg/s^2]
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	689b      	ldr	r3, [r3, #8]
 8011264:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	st_info.f_mot_trgtAccAngle3= p_sla->f_sla_angAcc;													// 角加速度3[deg/s^2]
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	689b      	ldr	r3, [r3, #8]
 801126c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	/* 角速度 */
	st_info.f_mot_nowAngleS	= 0;																// 現在角速度[deg/s]
 8011270:	f04f 0300 	mov.w	r3, #0
 8011274:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	st_info.f_mot_trgtAngleS= p_sla->f_sla_angvel;													// 目標角速度
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	68db      	ldr	r3, [r3, #12]
 801127c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	st_info.f_mot_lastAngleS= 0;																// 最終角速度
 8011280:	f04f 0300 	mov.w	r3, #0
 8011284:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	st_info.f_mot_accAnglejerk_v = p_sla->f_sla_angS_Jerk;
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	6a1b      	ldr	r3, [r3, #32]
 801128c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	/* 角度 */
	st_info.f_mot_angle				= p_sla->f_sla_ang_Total;
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011294:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	st_info.f_mot_angle1			= p_sla->f_sla_ang_AccEnd;												// 第1移動角度[deg]
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801129c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	st_info.f_mot_angle1_2			= p_sla->f_sla_ang_ConstEnd;											// 旋回角度[deg]
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80112a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	
	st_info.f_mot_l1_accanglejerk	= p_sla->f_sla_ang_AccAccJerk;
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	st_info.f_mot_l1_accangleconst	= p_sla->f_sla_ang_AccConst;
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	st_info.f_mot_l1_decanglejerk	= p_sla->f_sla_ang_AccDecJerk;											// 第1+2移動角度[deg]
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	st_info.f_mot_l3_decanglejerk	= p_sla->f_sla_ang_DecDecJerk;
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80112c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	st_info.f_mot_l3_decangleconst	= p_sla->f_sla_ang_DecConst;
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	st_info.f_mot_l3_accanglejerk	= p_sla->f_sla_ang_DecAccJerk;
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

	/* 方向に応じて符号を変更 */
	if( ( en_type == MOT_R90S ) ||
 80112d8:	79fb      	ldrb	r3, [r7, #7]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d00f      	beq.n	80112fe <MOT_goSla+0xee>
 80112de:	79fb      	ldrb	r3, [r7, #7]
 80112e0:	2b02      	cmp	r3, #2
 80112e2:	d00c      	beq.n	80112fe <MOT_goSla+0xee>
		( en_type == MOT_R45S_S2N ) || ( en_type == MOT_R45S_N2S ) ||
 80112e4:	79fb      	ldrb	r3, [r7, #7]
 80112e6:	2b04      	cmp	r3, #4
 80112e8:	d009      	beq.n	80112fe <MOT_goSla+0xee>
 80112ea:	79fb      	ldrb	r3, [r7, #7]
 80112ec:	2b06      	cmp	r3, #6
 80112ee:	d006      	beq.n	80112fe <MOT_goSla+0xee>
		( en_type == MOT_R90S_N ) ||
 80112f0:	79fb      	ldrb	r3, [r7, #7]
 80112f2:	2b08      	cmp	r3, #8
 80112f4:	d003      	beq.n	80112fe <MOT_goSla+0xee>
		( en_type == MOT_R135S_S2N ) || ( en_type == MOT_R135S_N2S )
 80112f6:	79fb      	ldrb	r3, [r7, #7]
 80112f8:	2b0a      	cmp	r3, #10
 80112fa:	f040 80eb 	bne.w	80114d4 <MOT_goSla+0x2c4>
	){
		st_info.f_mot_jerkAngle *= -1.0;
 80112fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011302:	4618      	mov	r0, r3
 8011304:	f7ef f948 	bl	8000598 <__aeabi_f2d>
 8011308:	4602      	mov	r2, r0
 801130a:	460b      	mov	r3, r1
 801130c:	4610      	mov	r0, r2
 801130e:	4619      	mov	r1, r3
 8011310:	f7ef fc92 	bl	8000c38 <__aeabi_d2f>
 8011314:	4603      	mov	r3, r0
 8011316:	ee07 3a90 	vmov	s15, r3
 801131a:	eef1 7a67 	vneg.f32	s15, s15
 801131e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
		st_info.f_mot_trgtAccAngle1 *= -1.0;
 8011322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011326:	4618      	mov	r0, r3
 8011328:	f7ef f936 	bl	8000598 <__aeabi_f2d>
 801132c:	4602      	mov	r2, r0
 801132e:	460b      	mov	r3, r1
 8011330:	4610      	mov	r0, r2
 8011332:	4619      	mov	r1, r3
 8011334:	f7ef fc80 	bl	8000c38 <__aeabi_d2f>
 8011338:	4603      	mov	r3, r0
 801133a:	ee07 3a90 	vmov	s15, r3
 801133e:	eef1 7a67 	vneg.f32	s15, s15
 8011342:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
		st_info.f_mot_trgtAngleS *= -1.0;
 8011346:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801134a:	4618      	mov	r0, r3
 801134c:	f7ef f924 	bl	8000598 <__aeabi_f2d>
 8011350:	4602      	mov	r2, r0
 8011352:	460b      	mov	r3, r1
 8011354:	4610      	mov	r0, r2
 8011356:	4619      	mov	r1, r3
 8011358:	f7ef fc6e 	bl	8000c38 <__aeabi_d2f>
 801135c:	4603      	mov	r3, r0
 801135e:	ee07 3a90 	vmov	s15, r3
 8011362:	eef1 7a67 	vneg.f32	s15, s15
 8011366:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
		st_info.f_mot_accAnglejerk_v *= -1.0;
 801136a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801136e:	4618      	mov	r0, r3
 8011370:	f7ef f912 	bl	8000598 <__aeabi_f2d>
 8011374:	4602      	mov	r2, r0
 8011376:	460b      	mov	r3, r1
 8011378:	4610      	mov	r0, r2
 801137a:	4619      	mov	r1, r3
 801137c:	f7ef fc5c 	bl	8000c38 <__aeabi_d2f>
 8011380:	4603      	mov	r3, r0
 8011382:	ee07 3a90 	vmov	s15, r3
 8011386:	eef1 7a67 	vneg.f32	s15, s15
 801138a:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4

		st_info.f_mot_angle      *= -1.0;
 801138e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011392:	4618      	mov	r0, r3
 8011394:	f7ef f900 	bl	8000598 <__aeabi_f2d>
 8011398:	4602      	mov	r2, r0
 801139a:	460b      	mov	r3, r1
 801139c:	4610      	mov	r0, r2
 801139e:	4619      	mov	r1, r3
 80113a0:	f7ef fc4a 	bl	8000c38 <__aeabi_d2f>
 80113a4:	4603      	mov	r3, r0
 80113a6:	ee07 3a90 	vmov	s15, r3
 80113aa:	eef1 7a67 	vneg.f32	s15, s15
 80113ae:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
		st_info.f_mot_angle1     *= -1.0;
 80113b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7ef f8ee 	bl	8000598 <__aeabi_f2d>
 80113bc:	4602      	mov	r2, r0
 80113be:	460b      	mov	r3, r1
 80113c0:	4610      	mov	r0, r2
 80113c2:	4619      	mov	r1, r3
 80113c4:	f7ef fc38 	bl	8000c38 <__aeabi_d2f>
 80113c8:	4603      	mov	r3, r0
 80113ca:	ee07 3a90 	vmov	s15, r3
 80113ce:	eef1 7a67 	vneg.f32	s15, s15
 80113d2:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8
		st_info.f_mot_angle1_2   *= -1.0;
 80113d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80113da:	4618      	mov	r0, r3
 80113dc:	f7ef f8dc 	bl	8000598 <__aeabi_f2d>
 80113e0:	4602      	mov	r2, r0
 80113e2:	460b      	mov	r3, r1
 80113e4:	4610      	mov	r0, r2
 80113e6:	4619      	mov	r1, r3
 80113e8:	f7ef fc26 	bl	8000c38 <__aeabi_d2f>
 80113ec:	4603      	mov	r3, r0
 80113ee:	ee07 3a90 	vmov	s15, r3
 80113f2:	eef1 7a67 	vneg.f32	s15, s15
 80113f6:	edc7 7a33 	vstr	s15, [r7, #204]	@ 0xcc

		st_info.f_mot_l1_accanglejerk	*= -1.0;
 80113fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80113fe:	4618      	mov	r0, r3
 8011400:	f7ef f8ca 	bl	8000598 <__aeabi_f2d>
 8011404:	4602      	mov	r2, r0
 8011406:	460b      	mov	r3, r1
 8011408:	4610      	mov	r0, r2
 801140a:	4619      	mov	r1, r3
 801140c:	f7ef fc14 	bl	8000c38 <__aeabi_d2f>
 8011410:	4603      	mov	r3, r0
 8011412:	ee07 3a90 	vmov	s15, r3
 8011416:	eef1 7a67 	vneg.f32	s15, s15
 801141a:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
		st_info.f_mot_l1_accangleconst	*= -1.0;
 801141e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011422:	4618      	mov	r0, r3
 8011424:	f7ef f8b8 	bl	8000598 <__aeabi_f2d>
 8011428:	4602      	mov	r2, r0
 801142a:	460b      	mov	r3, r1
 801142c:	4610      	mov	r0, r2
 801142e:	4619      	mov	r1, r3
 8011430:	f7ef fc02 	bl	8000c38 <__aeabi_d2f>
 8011434:	4603      	mov	r3, r0
 8011436:	ee07 3a90 	vmov	s15, r3
 801143a:	eef1 7a67 	vneg.f32	s15, s15
 801143e:	edc7 7a35 	vstr	s15, [r7, #212]	@ 0xd4
		st_info.f_mot_l1_decanglejerk	*= -1.0;
 8011442:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011446:	4618      	mov	r0, r3
 8011448:	f7ef f8a6 	bl	8000598 <__aeabi_f2d>
 801144c:	4602      	mov	r2, r0
 801144e:	460b      	mov	r3, r1
 8011450:	4610      	mov	r0, r2
 8011452:	4619      	mov	r1, r3
 8011454:	f7ef fbf0 	bl	8000c38 <__aeabi_d2f>
 8011458:	4603      	mov	r3, r0
 801145a:	ee07 3a90 	vmov	s15, r3
 801145e:	eef1 7a67 	vneg.f32	s15, s15
 8011462:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8
		st_info.f_mot_l3_decanglejerk	*= -1.0;
 8011466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801146a:	4618      	mov	r0, r3
 801146c:	f7ef f894 	bl	8000598 <__aeabi_f2d>
 8011470:	4602      	mov	r2, r0
 8011472:	460b      	mov	r3, r1
 8011474:	4610      	mov	r0, r2
 8011476:	4619      	mov	r1, r3
 8011478:	f7ef fbde 	bl	8000c38 <__aeabi_d2f>
 801147c:	4603      	mov	r3, r0
 801147e:	ee07 3a90 	vmov	s15, r3
 8011482:	eef1 7a67 	vneg.f32	s15, s15
 8011486:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
		st_info.f_mot_l3_decangleconst	*= -1.0;
 801148a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801148e:	4618      	mov	r0, r3
 8011490:	f7ef f882 	bl	8000598 <__aeabi_f2d>
 8011494:	4602      	mov	r2, r0
 8011496:	460b      	mov	r3, r1
 8011498:	4610      	mov	r0, r2
 801149a:	4619      	mov	r1, r3
 801149c:	f7ef fbcc 	bl	8000c38 <__aeabi_d2f>
 80114a0:	4603      	mov	r3, r0
 80114a2:	ee07 3a90 	vmov	s15, r3
 80114a6:	eef1 7a67 	vneg.f32	s15, s15
 80114aa:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
		st_info.f_mot_l3_accanglejerk	*= -1.0;
 80114ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7ef f870 	bl	8000598 <__aeabi_f2d>
 80114b8:	4602      	mov	r2, r0
 80114ba:	460b      	mov	r3, r1
 80114bc:	4610      	mov	r0, r2
 80114be:	4619      	mov	r1, r3
 80114c0:	f7ef fbba 	bl	8000c38 <__aeabi_d2f>
 80114c4:	4603      	mov	r3, r0
 80114c6:	ee07 3a90 	vmov	s15, r3
 80114ca:	eef1 7a67 	vneg.f32	s15, s15
 80114ce:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
 80114d2:	e011      	b.n	80114f8 <MOT_goSla+0x2e8>
	}
	else{
		st_info.f_mot_trgtAccAngle3 *= -1.0;
 80114d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80114d8:	4618      	mov	r0, r3
 80114da:	f7ef f85d 	bl	8000598 <__aeabi_f2d>
 80114de:	4602      	mov	r2, r0
 80114e0:	460b      	mov	r3, r1
 80114e2:	4610      	mov	r0, r2
 80114e4:	4619      	mov	r1, r3
 80114e6:	f7ef fba7 	bl	8000c38 <__aeabi_d2f>
 80114ea:	4603      	mov	r3, r0
 80114ec:	ee07 3a90 	vmov	s15, r3
 80114f0:	eef1 7a67 	vneg.f32	s15, s15
 80114f4:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
	}

	/* 斜め走行のタイプに応じて、スラローム前の距離とスラローム後の退避距離を入れ替える */
	if( ( en_type == MOT_R45S_N2S ) || ( en_type == MOT_L45S_N2S ) || ( en_type == MOT_R135S_N2S ) || ( en_type == MOT_L135S_N2S ) ){ 		// 逆にするもの
 80114f8:	79fb      	ldrb	r3, [r7, #7]
 80114fa:	2b04      	cmp	r3, #4
 80114fc:	d008      	beq.n	8011510 <MOT_goSla+0x300>
 80114fe:	79fb      	ldrb	r3, [r7, #7]
 8011500:	2b05      	cmp	r3, #5
 8011502:	d005      	beq.n	8011510 <MOT_goSla+0x300>
 8011504:	79fb      	ldrb	r3, [r7, #7]
 8011506:	2b0a      	cmp	r3, #10
 8011508:	d002      	beq.n	8011510 <MOT_goSla+0x300>
 801150a:	79fb      	ldrb	r3, [r7, #7]
 801150c:	2b0b      	cmp	r3, #11
 801150e:	d10b      	bne.n	8011528 <MOT_goSla+0x318>
		f_entryLen  = p_sla->f_sla_escapeLen;
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	695b      	ldr	r3, [r3, #20]
 8011514:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
		f_escapeLen = p_sla->f_sla_entryLen;
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	691b      	ldr	r3, [r3, #16]
 801151c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8011520:	e00a      	b.n	8011538 <MOT_goSla+0x328>
 8011522:	bf00      	nop
 8011524:	20017b2c 	.word	0x20017b2c
	}
	else{		// 通常
		f_entryLen  = p_sla->f_sla_entryLen;
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	691b      	ldr	r3, [r3, #16]
 801152c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
		f_escapeLen = p_sla->f_sla_escapeLen;
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	695b      	ldr	r3, [r3, #20]
 8011534:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
	}

	GYRO_staErrChkAngle();			// エラー検出開始
 8011538:	f7f8 fae4 	bl	8009b04 <GYRO_staErrChkAngle>
	/*      entry      */
	/* ================ */
	/* ------------------------ */
	/*  スラローム前の前進動作  */
	/* ------------------------ */
	st_data.en_ctrl_type			= CTRL_ENTRY_SLA;
 801153c:	230a      	movs	r3, #10
 801153e:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 8011540:	f04f 0300 	mov.w	r3, #0
 8011544:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8011546:	f04f 0300 	mov.w	r3, #0
 801154a:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 801154c:	f04f 0300 	mov.w	r3, #0
 8011550:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 8011552:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011554:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 8011556:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011558:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= 0;						// 進んでいない
 801155a:	f04f 0300 	mov.w	r3, #0
 801155e:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_entryLen;				// スラローム前の前進距離
 8011560:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8011564:	62bb      	str	r3, [r7, #40]	@ 0x28
	st_data.f_ctrl_jerkAngle	= 0;
 8011566:	f04f 0300 	mov.w	r3, #0
 801156a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= 0;
 801156c:	f04f 0300 	mov.w	r3, #0
 8011570:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= 0;
 8011572:	f04f 0300 	mov.w	r3, #0
 8011576:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 8011578:	f04f 0300 	mov.w	r3, #0
 801157c:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS	= 0;						// 目標角度
 801157e:	f04f 0300 	mov.w	r3, #0
 8011582:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 8011584:	f04f 0300 	mov.w	r3, #0
 8011588:	643b      	str	r3, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= 0;						// 目標角度
 801158a:	f04f 0300 	mov.w	r3, #0
 801158e:	647b      	str	r3, [r7, #68]	@ 0x44
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 8011590:	f04f 0300 	mov.w	r3, #0
 8011594:	60fb      	str	r3, [r7, #12]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 8011596:	f7f4 ff55 	bl	8006444 <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 801159a:	f107 0308 	add.w	r3, r7, #8
 801159e:	4618      	mov	r0, r3
 80115a0:	f7f5 f83e 	bl	8006620 <CTRL_setData>
	DCM_staMotAll();									// モータON
 80115a4:	f7f8 f87a 	bl	800969c <DCM_staMotAll>

	while( Get_NowDist() < f_entryLen + uc_DistControl ){				// 指定距離到達待ち
 80115a8:	e025      	b.n	80115f6 <MOT_goSla+0x3e6>
		if(( en_type == MOT_R90S ) ||( en_type == MOT_L90S ) ){
 80115aa:	79fb      	ldrb	r3, [r7, #7]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d002      	beq.n	80115b6 <MOT_goSla+0x3a6>
 80115b0:	79fb      	ldrb	r3, [r7, #7]
 80115b2:	2b01      	cmp	r3, #1
 80115b4:	d10c      	bne.n	80115d0 <MOT_goSla+0x3c0>
			if((DIST_getNowVal( DIST_SEN_R_FRONT )>R_FRONT_CTRL)&&(DIST_getNowVal( DIST_SEN_L_FRONT )>L_FRONT_CTRL))break;
 80115b6:	2000      	movs	r0, #0
 80115b8:	f001 fad6 	bl	8012b68 <DIST_getNowVal>
 80115bc:	4603      	mov	r3, r0
 80115be:	2ba0      	cmp	r3, #160	@ 0xa0
 80115c0:	dd0a      	ble.n	80115d8 <MOT_goSla+0x3c8>
 80115c2:	2001      	movs	r0, #1
 80115c4:	f001 fad0 	bl	8012b68 <DIST_getNowVal>
 80115c8:	4603      	mov	r3, r0
 80115ca:	2bc8      	cmp	r3, #200	@ 0xc8
 80115cc:	dd04      	ble.n	80115d8 <MOT_goSla+0x3c8>
 80115ce:	e025      	b.n	801161c <MOT_goSla+0x40c>
		}
		else{
			uc_DistControl = 0.0;
 80115d0:	4bc5      	ldr	r3, [pc, #788]	@ (80118e8 <MOT_goSla+0x6d8>)
 80115d2:	2200      	movs	r2, #0
 80115d4:	701a      	strb	r2, [r3, #0]
 80115d6:	e000      	b.n	80115da <MOT_goSla+0x3ca>
			if((DIST_getNowVal( DIST_SEN_R_FRONT )>R_FRONT_CTRL)&&(DIST_getNowVal( DIST_SEN_L_FRONT )>L_FRONT_CTRL))break;
 80115d8:	bf00      	nop
		}
		if( SYS_isOutOfCtrl() == TRUE ){
 80115da:	f7f8 f809 	bl	80095f0 <SYS_isOutOfCtrl>
 80115de:	4603      	mov	r3, r0
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d008      	beq.n	80115f6 <MOT_goSla+0x3e6>
			CTRL_stop();
 80115e4:	f7f4 ff1e 	bl	8006424 <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 80115e8:	2000      	movs	r0, #0
 80115ea:	f7f8 f833 	bl	8009654 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 80115ee:	2001      	movs	r0, #1
 80115f0:	f7f8 f830 	bl	8009654 <DCM_brakeMot>
			break;
 80115f4:	e012      	b.n	801161c <MOT_goSla+0x40c>
	while( Get_NowDist() < f_entryLen + uc_DistControl ){				// 指定距離到達待ち
 80115f6:	f7f4 fe65 	bl	80062c4 <Get_NowDist>
 80115fa:	eef0 6a40 	vmov.f32	s13, s0
 80115fe:	4bba      	ldr	r3, [pc, #744]	@ (80118e8 <MOT_goSla+0x6d8>)
 8011600:	781b      	ldrb	r3, [r3, #0]
 8011602:	ee07 3a90 	vmov	s15, r3
 8011606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801160a:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 801160e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011612:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801161a:	d4c6      	bmi.n	80115aa <MOT_goSla+0x39a>
//	LED_off(LED1);
//	log_in(0);
	/* ------ */
	/*  acc jerk */
	/* ------ */
	st_data.en_ctrl_type			= CTRL_ACC_SLA;
 801161c:	230b      	movs	r3, #11
 801161e:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 8011620:	f04f 0300 	mov.w	r3, #0
 8011624:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8011626:	f04f 0300 	mov.w	r3, #0
 801162a:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 801162c:	f04f 0300 	mov.w	r3, #0
 8011630:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 8011632:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011634:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 8011636:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011638:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= f_entryLen;				//
 801163a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801163e:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_entryLen + st_info.f_mot_now * p_sla->us_sla_jerkAngaccTime * 0.001;		// 加速距離
 8011640:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8011644:	f7ee ffa8 	bl	8000598 <__aeabi_f2d>
 8011648:	4604      	mov	r4, r0
 801164a:	460d      	mov	r5, r1
 801164c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	8b1b      	ldrh	r3, [r3, #24]
 8011654:	ee07 3a90 	vmov	s15, r3
 8011658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801165c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011660:	ee17 0a90 	vmov	r0, s15
 8011664:	f7ee ff98 	bl	8000598 <__aeabi_f2d>
 8011668:	a39d      	add	r3, pc, #628	@ (adr r3, 80118e0 <MOT_goSla+0x6d0>)
 801166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801166e:	f7ee ffeb 	bl	8000648 <__aeabi_dmul>
 8011672:	4602      	mov	r2, r0
 8011674:	460b      	mov	r3, r1
 8011676:	4620      	mov	r0, r4
 8011678:	4629      	mov	r1, r5
 801167a:	f7ee fe2f 	bl	80002dc <__adddf3>
 801167e:	4602      	mov	r2, r0
 8011680:	460b      	mov	r3, r1
 8011682:	4610      	mov	r0, r2
 8011684:	4619      	mov	r1, r3
 8011686:	f7ef fad7 	bl	8000c38 <__aeabi_d2f>
 801168a:	4603      	mov	r3, r0
 801168c:	62bb      	str	r3, [r7, #40]	@ 0x28
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS1;		// 角加速度
	st_data.f_ctrl_jerkAngle	= st_info.f_mot_jerkAngle;
 801168e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011692:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= 0;
 8011694:	f04f 0300 	mov.w	r3, #0
 8011698:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= st_info.f_mot_trgtAccAngle1;
 801169a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801169e:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 80116a0:	f04f 0300 	mov.w	r3, #0
 80116a4:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_accAnglejerk_v;		// 目標角速度
 80116a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80116aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 80116ac:	f04f 0300 	mov.w	r3, #0
 80116b0:	643b      	str	r3, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= st_info.f_mot_l1_accanglejerk;			// 目標角度
 80116b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80116b6:	647b      	str	r3, [r7, #68]	@ 0x44
	st_data.f_ctrl_time 			= p_sla->us_sla_jerkAngaccTime * 0.001;			// [msec] → [sec]
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	8b1b      	ldrh	r3, [r3, #24]
 80116bc:	4618      	mov	r0, r3
 80116be:	f7ee ff59 	bl	8000574 <__aeabi_i2d>
 80116c2:	a387      	add	r3, pc, #540	@ (adr r3, 80118e0 <MOT_goSla+0x6d0>)
 80116c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c8:	f7ee ffbe 	bl	8000648 <__aeabi_dmul>
 80116cc:	4602      	mov	r2, r0
 80116ce:	460b      	mov	r3, r1
 80116d0:	4610      	mov	r0, r2
 80116d2:	4619      	mov	r1, r3
 80116d4:	f7ef fab0 	bl	8000c38 <__aeabi_d2f>
 80116d8:	4603      	mov	r3, r0
 80116da:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 80116dc:	f107 0308 	add.w	r3, r7, #8
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7f4 ff9d 	bl	8006620 <CTRL_setData>
//	printf("trgtangleS %5.2f\n\r",st_data.f_trgtAngleS);
//	printf("jerkacc angle%.5f, dist%.5f\n\r",st_info.f_mot_l1_accanglejerk,st_data.f_ctrl_dist);
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 80116e6:	79fb      	ldrb	r3, [r7, #7]
 80116e8:	f003 0301 	and.w	r3, r3, #1
 80116ec:	b2db      	uxtb	r3, r3
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d133      	bne.n	801175a <MOT_goSla+0x54a>
		while( ( Get_NowAngle() > st_info.f_mot_l1_accanglejerk ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 80116f2:	e00d      	b.n	8011710 <MOT_goSla+0x500>
			if( SYS_isOutOfCtrl() == TRUE ){
 80116f4:	f7f7 ff7c 	bl	80095f0 <SYS_isOutOfCtrl>
 80116f8:	4603      	mov	r3, r0
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d008      	beq.n	8011710 <MOT_goSla+0x500>
				CTRL_stop();
 80116fe:	f7f4 fe91 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8011702:	2000      	movs	r0, #0
 8011704:	f7f7 ffa6 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8011708:	2001      	movs	r0, #1
 801170a:	f7f7 ffa3 	bl	8009654 <DCM_brakeMot>
				break;
 801170e:	e03a      	b.n	8011786 <MOT_goSla+0x576>
		while( ( Get_NowAngle() > st_info.f_mot_l1_accanglejerk ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8011710:	f7f4 fe20 	bl	8006354 <Get_NowAngle>
 8011714:	eeb0 7a40 	vmov.f32	s14, s0
 8011718:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 801171c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011724:	dd2f      	ble.n	8011786 <MOT_goSla+0x576>
 8011726:	f7f4 fdcd 	bl	80062c4 <Get_NowDist>
 801172a:	eeb0 7a40 	vmov.f32	s14, s0
 801172e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801173a:	d4db      	bmi.n	80116f4 <MOT_goSla+0x4e4>
 801173c:	e023      	b.n	8011786 <MOT_goSla+0x576>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( ( Get_NowAngle() < st_info.f_mot_l1_accanglejerk ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 801173e:	f7f7 ff57 	bl	80095f0 <SYS_isOutOfCtrl>
 8011742:	4603      	mov	r3, r0
 8011744:	2b00      	cmp	r3, #0
 8011746:	d008      	beq.n	801175a <MOT_goSla+0x54a>
				CTRL_stop();
 8011748:	f7f4 fe6c 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 801174c:	2000      	movs	r0, #0
 801174e:	f7f7 ff81 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8011752:	2001      	movs	r0, #1
 8011754:	f7f7 ff7e 	bl	8009654 <DCM_brakeMot>
				break;
 8011758:	e015      	b.n	8011786 <MOT_goSla+0x576>
		while( ( Get_NowAngle() < st_info.f_mot_l1_accanglejerk ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 801175a:	f7f4 fdfb 	bl	8006354 <Get_NowAngle>
 801175e:	eeb0 7a40 	vmov.f32	s14, s0
 8011762:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8011766:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801176e:	d50a      	bpl.n	8011786 <MOT_goSla+0x576>
 8011770:	f7f4 fda8 	bl	80062c4 <Get_NowDist>
 8011774:	eeb0 7a40 	vmov.f32	s14, s0
 8011778:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801177c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011784:	d4db      	bmi.n	801173e <MOT_goSla+0x52e>
			}				// 途中で制御不能になった
		}
	}
	//acc const
	st_data.en_ctrl_type			= CTRL_ACC_SLA;
 8011786:	230b      	movs	r3, #11
 8011788:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 801178a:	f04f 0300 	mov.w	r3, #0
 801178e:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8011790:	f04f 0300 	mov.w	r3, #0
 8011794:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 8011796:	f04f 0300 	mov.w	r3, #0
 801179a:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 801179c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801179e:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 80117a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80117a2:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= f_entryLen + st_info.f_mot_now * p_sla->us_sla_jerkAngaccTime * 0.001;				//
 80117a4:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 80117a8:	f7ee fef6 	bl	8000598 <__aeabi_f2d>
 80117ac:	4604      	mov	r4, r0
 80117ae:	460d      	mov	r5, r1
 80117b0:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	8b1b      	ldrh	r3, [r3, #24]
 80117b8:	ee07 3a90 	vmov	s15, r3
 80117bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117c4:	ee17 0a90 	vmov	r0, s15
 80117c8:	f7ee fee6 	bl	8000598 <__aeabi_f2d>
 80117cc:	a344      	add	r3, pc, #272	@ (adr r3, 80118e0 <MOT_goSla+0x6d0>)
 80117ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d2:	f7ee ff39 	bl	8000648 <__aeabi_dmul>
 80117d6:	4602      	mov	r2, r0
 80117d8:	460b      	mov	r3, r1
 80117da:	4620      	mov	r0, r4
 80117dc:	4629      	mov	r1, r5
 80117de:	f7ee fd7d 	bl	80002dc <__adddf3>
 80117e2:	4602      	mov	r2, r0
 80117e4:	460b      	mov	r3, r1
 80117e6:	4610      	mov	r0, r2
 80117e8:	4619      	mov	r1, r3
 80117ea:	f7ef fa25 	bl	8000c38 <__aeabi_d2f>
 80117ee:	4603      	mov	r3, r0
 80117f0:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_entryLen + st_info.f_mot_now * (p_sla->us_sla_accAngvelTime + p_sla->us_sla_jerkAngaccTime)* 0.001;		// 加速距離
 80117f2:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 80117f6:	f7ee fecf 	bl	8000598 <__aeabi_f2d>
 80117fa:	4604      	mov	r4, r0
 80117fc:	460d      	mov	r5, r1
 80117fe:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	8b5b      	ldrh	r3, [r3, #26]
 8011806:	461a      	mov	r2, r3
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	8b1b      	ldrh	r3, [r3, #24]
 801180c:	4413      	add	r3, r2
 801180e:	ee07 3a90 	vmov	s15, r3
 8011812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011816:	ee67 7a27 	vmul.f32	s15, s14, s15
 801181a:	ee17 0a90 	vmov	r0, s15
 801181e:	f7ee febb 	bl	8000598 <__aeabi_f2d>
 8011822:	a32f      	add	r3, pc, #188	@ (adr r3, 80118e0 <MOT_goSla+0x6d0>)
 8011824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011828:	f7ee ff0e 	bl	8000648 <__aeabi_dmul>
 801182c:	4602      	mov	r2, r0
 801182e:	460b      	mov	r3, r1
 8011830:	4620      	mov	r0, r4
 8011832:	4629      	mov	r1, r5
 8011834:	f7ee fd52 	bl	80002dc <__adddf3>
 8011838:	4602      	mov	r2, r0
 801183a:	460b      	mov	r3, r1
 801183c:	4610      	mov	r0, r2
 801183e:	4619      	mov	r1, r3
 8011840:	f7ef f9fa 	bl	8000c38 <__aeabi_d2f>
 8011844:	4603      	mov	r3, r0
 8011846:	62bb      	str	r3, [r7, #40]	@ 0x28
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS1;		// 角加速度
	st_data.f_ctrl_jerkAngle	= 0;
 8011848:	f04f 0300 	mov.w	r3, #0
 801184c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= st_info.f_mot_trgtAccAngle1;
 801184e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011852:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= st_info.f_mot_trgtAccAngle1;
 8011854:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011858:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_accAnglejerk_v;						// 現在角速度
 801185a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801185e:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_trgtAngleS-st_info.f_mot_accAnglejerk_v;		// 目標角速度
 8011860:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 8011864:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8011868:	ee77 7a67 	vsub.f32	s15, s14, s15
 801186c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle		= st_info.f_mot_l1_accanglejerk;						// 現在角度
 8011870:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011874:	643b      	str	r3, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst;			// 目標角度
 8011876:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 801187a:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 801187e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011882:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	st_data.f_ctrl_time 			=  p_sla->us_sla_accAngvelTime * 0.001;			// [msec] → [sec]
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	8b5b      	ldrh	r3, [r3, #26]
 801188a:	4618      	mov	r0, r3
 801188c:	f7ee fe72 	bl	8000574 <__aeabi_i2d>
 8011890:	a313      	add	r3, pc, #76	@ (adr r3, 80118e0 <MOT_goSla+0x6d0>)
 8011892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011896:	f7ee fed7 	bl	8000648 <__aeabi_dmul>
 801189a:	4602      	mov	r2, r0
 801189c:	460b      	mov	r3, r1
 801189e:	4610      	mov	r0, r2
 80118a0:	4619      	mov	r1, r3
 80118a2:	f7ef f9c9 	bl	8000c38 <__aeabi_d2f>
 80118a6:	4603      	mov	r3, r0
 80118a8:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 80118aa:	f107 0308 	add.w	r3, r7, #8
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7f4 feb6 	bl	8006620 <CTRL_setData>
//	printf("trgtangleS %5.2f\n\r",st_data.f_trgtAngleS);
//	printf("jerkconst angle%.5f, dist%.5f\n\r",st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst,st_data.f_ctrl_dist);
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 80118b4:	79fb      	ldrb	r3, [r7, #7]
 80118b6:	f003 0301 	and.w	r3, r3, #1
 80118ba:	b2db      	uxtb	r3, r3
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d13e      	bne.n	801193e <MOT_goSla+0x72e>
		while( ( Get_NowAngle() > (st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 80118c0:	e014      	b.n	80118ec <MOT_goSla+0x6dc>
			if( SYS_isOutOfCtrl() == TRUE ){
 80118c2:	f7f7 fe95 	bl	80095f0 <SYS_isOutOfCtrl>
 80118c6:	4603      	mov	r3, r0
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d00f      	beq.n	80118ec <MOT_goSla+0x6dc>
				CTRL_stop();
 80118cc:	f7f4 fdaa 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 80118d0:	2000      	movs	r0, #0
 80118d2:	f7f7 febf 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 80118d6:	2001      	movs	r0, #1
 80118d8:	f7f7 febc 	bl	8009654 <DCM_brakeMot>
				break;
 80118dc:	e049      	b.n	8011972 <MOT_goSla+0x762>
 80118de:	bf00      	nop
 80118e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80118e4:	3f50624d 	.word	0x3f50624d
 80118e8:	20000400 	.word	0x20000400
		while( ( Get_NowAngle() > (st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 80118ec:	f7f4 fd32 	bl	8006354 <Get_NowAngle>
 80118f0:	eef0 6a40 	vmov.f32	s13, s0
 80118f4:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 80118f8:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 80118fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011900:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011908:	dd33      	ble.n	8011972 <MOT_goSla+0x762>
 801190a:	f7f4 fcdb 	bl	80062c4 <Get_NowDist>
 801190e:	eeb0 7a40 	vmov.f32	s14, s0
 8011912:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801191a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191e:	d4d0      	bmi.n	80118c2 <MOT_goSla+0x6b2>
 8011920:	e027      	b.n	8011972 <MOT_goSla+0x762>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( ( Get_NowAngle() < (st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 8011922:	f7f7 fe65 	bl	80095f0 <SYS_isOutOfCtrl>
 8011926:	4603      	mov	r3, r0
 8011928:	2b00      	cmp	r3, #0
 801192a:	d008      	beq.n	801193e <MOT_goSla+0x72e>
				CTRL_stop();
 801192c:	f7f4 fd7a 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8011930:	2000      	movs	r0, #0
 8011932:	f7f7 fe8f 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8011936:	2001      	movs	r0, #1
 8011938:	f7f7 fe8c 	bl	8009654 <DCM_brakeMot>
				break;
 801193c:	e019      	b.n	8011972 <MOT_goSla+0x762>
		while( ( Get_NowAngle() < (st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 801193e:	f7f4 fd09 	bl	8006354 <Get_NowAngle>
 8011942:	eef0 6a40 	vmov.f32	s13, s0
 8011946:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 801194a:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 801194e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011952:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801195a:	d50a      	bpl.n	8011972 <MOT_goSla+0x762>
 801195c:	f7f4 fcb2 	bl	80062c4 <Get_NowDist>
 8011960:	eeb0 7a40 	vmov.f32	s14, s0
 8011964:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011968:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011970:	d4d7      	bmi.n	8011922 <MOT_goSla+0x712>
			}				// 途中で制御不能になった
		}
	}

	//acc -jerk
	st_data.en_ctrl_type			= CTRL_ACC_SLA;
 8011972:	230b      	movs	r3, #11
 8011974:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 8011976:	f04f 0300 	mov.w	r3, #0
 801197a:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 801197c:	f04f 0300 	mov.w	r3, #0
 8011980:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 8011982:	f04f 0300 	mov.w	r3, #0
 8011986:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 8011988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801198a:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 801198c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801198e:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= f_entryLen + st_info.f_mot_now * (p_sla->us_sla_accAngvelTime + p_sla->us_sla_jerkAngaccTime)* 0.001;				//
 8011990:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8011994:	f7ee fe00 	bl	8000598 <__aeabi_f2d>
 8011998:	4604      	mov	r4, r0
 801199a:	460d      	mov	r5, r1
 801199c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	8b5b      	ldrh	r3, [r3, #26]
 80119a4:	461a      	mov	r2, r3
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	8b1b      	ldrh	r3, [r3, #24]
 80119aa:	4413      	add	r3, r2
 80119ac:	ee07 3a90 	vmov	s15, r3
 80119b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80119b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119b8:	ee17 0a90 	vmov	r0, s15
 80119bc:	f7ee fdec 	bl	8000598 <__aeabi_f2d>
 80119c0:	f20f 631c 	addw	r3, pc, #1564	@ 0x61c
 80119c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c8:	f7ee fe3e 	bl	8000648 <__aeabi_dmul>
 80119cc:	4602      	mov	r2, r0
 80119ce:	460b      	mov	r3, r1
 80119d0:	4620      	mov	r0, r4
 80119d2:	4629      	mov	r1, r5
 80119d4:	f7ee fc82 	bl	80002dc <__adddf3>
 80119d8:	4602      	mov	r2, r0
 80119da:	460b      	mov	r3, r1
 80119dc:	4610      	mov	r0, r2
 80119de:	4619      	mov	r1, r3
 80119e0:	f7ef f92a 	bl	8000c38 <__aeabi_d2f>
 80119e4:	4603      	mov	r3, r0
 80119e6:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_entryLen + st_info.f_mot_now * (p_sla->us_sla_accAngvelTime + p_sla->us_sla_jerkAngaccTime*2.0)* 0.001;		// 加速距離
 80119e8:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 80119ec:	f7ee fdd4 	bl	8000598 <__aeabi_f2d>
 80119f0:	4604      	mov	r4, r0
 80119f2:	460d      	mov	r5, r1
 80119f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7ee fdce 	bl	8000598 <__aeabi_f2d>
 80119fc:	4680      	mov	r8, r0
 80119fe:	4689      	mov	r9, r1
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	8b5b      	ldrh	r3, [r3, #26]
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7ee fdb5 	bl	8000574 <__aeabi_i2d>
 8011a0a:	4682      	mov	sl, r0
 8011a0c:	468b      	mov	fp, r1
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	8b1b      	ldrh	r3, [r3, #24]
 8011a12:	4618      	mov	r0, r3
 8011a14:	f7ee fdae 	bl	8000574 <__aeabi_i2d>
 8011a18:	4602      	mov	r2, r0
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	f7ee fc5e 	bl	80002dc <__adddf3>
 8011a20:	4602      	mov	r2, r0
 8011a22:	460b      	mov	r3, r1
 8011a24:	4650      	mov	r0, sl
 8011a26:	4659      	mov	r1, fp
 8011a28:	f7ee fc58 	bl	80002dc <__adddf3>
 8011a2c:	4602      	mov	r2, r0
 8011a2e:	460b      	mov	r3, r1
 8011a30:	4640      	mov	r0, r8
 8011a32:	4649      	mov	r1, r9
 8011a34:	f7ee fe08 	bl	8000648 <__aeabi_dmul>
 8011a38:	4602      	mov	r2, r0
 8011a3a:	460b      	mov	r3, r1
 8011a3c:	4610      	mov	r0, r2
 8011a3e:	4619      	mov	r1, r3
 8011a40:	f20f 539c 	addw	r3, pc, #1436	@ 0x59c
 8011a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a48:	f7ee fdfe 	bl	8000648 <__aeabi_dmul>
 8011a4c:	4602      	mov	r2, r0
 8011a4e:	460b      	mov	r3, r1
 8011a50:	4620      	mov	r0, r4
 8011a52:	4629      	mov	r1, r5
 8011a54:	f7ee fc42 	bl	80002dc <__adddf3>
 8011a58:	4602      	mov	r2, r0
 8011a5a:	460b      	mov	r3, r1
 8011a5c:	4610      	mov	r0, r2
 8011a5e:	4619      	mov	r1, r3
 8011a60:	f7ef f8ea 	bl	8000c38 <__aeabi_d2f>
 8011a64:	4603      	mov	r3, r0
 8011a66:	62bb      	str	r3, [r7, #40]	@ 0x28
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS1;		// 角加速度
	st_data.f_ctrl_jerkAngle	= st_info.f_mot_jerkAngle*(-1.0);
 8011a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f7ee fd93 	bl	8000598 <__aeabi_f2d>
 8011a72:	4602      	mov	r2, r0
 8011a74:	460b      	mov	r3, r1
 8011a76:	4610      	mov	r0, r2
 8011a78:	4619      	mov	r1, r3
 8011a7a:	f7ef f8dd 	bl	8000c38 <__aeabi_d2f>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	ee07 3a90 	vmov	s15, r3
 8011a84:	eef1 7a67 	vneg.f32	s15, s15
 8011a88:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= st_info.f_mot_trgtAccAngle1;
 8011a8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011a90:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= 0;
 8011a92:	f04f 0300 	mov.w	r3, #0
 8011a96:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_trgtAngleS - st_info.f_mot_accAnglejerk_v;						// 現在角速度
 8011a98:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 8011a9c:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8011aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011aa4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_trgtAngleS;		// 目標角速度
 8011aa8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle			= st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst;						// 現在角度
 8011aae:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 8011ab2:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8011ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011aba:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= st_info.f_mot_angle1;			// 目標角度
 8011abe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011ac2:	647b      	str	r3, [r7, #68]	@ 0x44
	st_data.f_ctrl_time 			=  p_sla->us_sla_jerkAngaccTime * 0.001;			// [msec] → [sec]
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	8b1b      	ldrh	r3, [r3, #24]
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f7ee fd53 	bl	8000574 <__aeabi_i2d>
 8011ace:	f20f 5310 	addw	r3, pc, #1296	@ 0x510
 8011ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad6:	f7ee fdb7 	bl	8000648 <__aeabi_dmul>
 8011ada:	4602      	mov	r2, r0
 8011adc:	460b      	mov	r3, r1
 8011ade:	4610      	mov	r0, r2
 8011ae0:	4619      	mov	r1, r3
 8011ae2:	f7ef f8a9 	bl	8000c38 <__aeabi_d2f>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 8011aea:	f107 0308 	add.w	r3, r7, #8
 8011aee:	4618      	mov	r0, r3
 8011af0:	f7f4 fd96 	bl	8006620 <CTRL_setData>
//	printf("trgtangleS %5.2f\n\r",st_data.f_trgtAngleS);
//	printf("jerkdec angle%.5f, dist%.5f\n\r",st_info.f_mot_angle1,st_data.f_ctrl_dist);
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 8011af4:	79fb      	ldrb	r3, [r7, #7]
 8011af6:	f003 0301 	and.w	r3, r3, #1
 8011afa:	b2db      	uxtb	r3, r3
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d133      	bne.n	8011b68 <MOT_goSla+0x958>
		while( ( Get_NowAngle() > st_info.f_mot_angle1 ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8011b00:	e00d      	b.n	8011b1e <MOT_goSla+0x90e>
			if( SYS_isOutOfCtrl() == TRUE ){
 8011b02:	f7f7 fd75 	bl	80095f0 <SYS_isOutOfCtrl>
 8011b06:	4603      	mov	r3, r0
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d008      	beq.n	8011b1e <MOT_goSla+0x90e>
				CTRL_stop();
 8011b0c:	f7f4 fc8a 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8011b10:	2000      	movs	r0, #0
 8011b12:	f7f7 fd9f 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8011b16:	2001      	movs	r0, #1
 8011b18:	f7f7 fd9c 	bl	8009654 <DCM_brakeMot>
				break;
 8011b1c:	e03a      	b.n	8011b94 <MOT_goSla+0x984>
		while( ( Get_NowAngle() > st_info.f_mot_angle1 ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8011b1e:	f7f4 fc19 	bl	8006354 <Get_NowAngle>
 8011b22:	eeb0 7a40 	vmov.f32	s14, s0
 8011b26:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8011b2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b32:	dd2f      	ble.n	8011b94 <MOT_goSla+0x984>
 8011b34:	f7f4 fbc6 	bl	80062c4 <Get_NowDist>
 8011b38:	eeb0 7a40 	vmov.f32	s14, s0
 8011b3c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b48:	d4db      	bmi.n	8011b02 <MOT_goSla+0x8f2>
 8011b4a:	e023      	b.n	8011b94 <MOT_goSla+0x984>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( ( Get_NowAngle() < st_info.f_mot_angle1 ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 8011b4c:	f7f7 fd50 	bl	80095f0 <SYS_isOutOfCtrl>
 8011b50:	4603      	mov	r3, r0
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d008      	beq.n	8011b68 <MOT_goSla+0x958>
				CTRL_stop();
 8011b56:	f7f4 fc65 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8011b5a:	2000      	movs	r0, #0
 8011b5c:	f7f7 fd7a 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8011b60:	2001      	movs	r0, #1
 8011b62:	f7f7 fd77 	bl	8009654 <DCM_brakeMot>
				break;
 8011b66:	e015      	b.n	8011b94 <MOT_goSla+0x984>
		while( ( Get_NowAngle() < st_info.f_mot_angle1 ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8011b68:	f7f4 fbf4 	bl	8006354 <Get_NowAngle>
 8011b6c:	eeb0 7a40 	vmov.f32	s14, s0
 8011b70:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8011b74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b7c:	d50a      	bpl.n	8011b94 <MOT_goSla+0x984>
 8011b7e:	f7f4 fba1 	bl	80062c4 <Get_NowDist>
 8011b82:	eeb0 7a40 	vmov.f32	s14, s0
 8011b86:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011b8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b92:	d4db      	bmi.n	8011b4c <MOT_goSla+0x93c>
//	log_in(0);
//	log_in(f_NowAngle);
	/* ------ */
	/*  const  */
	/* ------ */
	st_data.en_ctrl_type			= CTRL_CONST_SLA;
 8011b94:	230c      	movs	r3, #12
 8011b96:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 8011b98:	f04f 0300 	mov.w	r3, #0
 8011b9c:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8011b9e:	f04f 0300 	mov.w	r3, #0
 8011ba2:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 8011ba4:	f04f 0300 	mov.w	r3, #0
 8011ba8:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 8011baa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011bac:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 8011bae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011bb0:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= f_entryLen + st_info.f_mot_now * (p_sla->us_sla_accAngvelTime + p_sla->us_sla_jerkAngaccTime*2.0)* 0.001;
 8011bb2:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8011bb6:	f7ee fcef 	bl	8000598 <__aeabi_f2d>
 8011bba:	4604      	mov	r4, r0
 8011bbc:	460d      	mov	r5, r1
 8011bbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7ee fce9 	bl	8000598 <__aeabi_f2d>
 8011bc6:	4680      	mov	r8, r0
 8011bc8:	4689      	mov	r9, r1
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	8b5b      	ldrh	r3, [r3, #26]
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7ee fcd0 	bl	8000574 <__aeabi_i2d>
 8011bd4:	4682      	mov	sl, r0
 8011bd6:	468b      	mov	fp, r1
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	8b1b      	ldrh	r3, [r3, #24]
 8011bdc:	4618      	mov	r0, r3
 8011bde:	f7ee fcc9 	bl	8000574 <__aeabi_i2d>
 8011be2:	4602      	mov	r2, r0
 8011be4:	460b      	mov	r3, r1
 8011be6:	f7ee fb79 	bl	80002dc <__adddf3>
 8011bea:	4602      	mov	r2, r0
 8011bec:	460b      	mov	r3, r1
 8011bee:	4650      	mov	r0, sl
 8011bf0:	4659      	mov	r1, fp
 8011bf2:	f7ee fb73 	bl	80002dc <__adddf3>
 8011bf6:	4602      	mov	r2, r0
 8011bf8:	460b      	mov	r3, r1
 8011bfa:	4640      	mov	r0, r8
 8011bfc:	4649      	mov	r1, r9
 8011bfe:	f7ee fd23 	bl	8000648 <__aeabi_dmul>
 8011c02:	4602      	mov	r2, r0
 8011c04:	460b      	mov	r3, r1
 8011c06:	4610      	mov	r0, r2
 8011c08:	4619      	mov	r1, r3
 8011c0a:	a3f5      	add	r3, pc, #980	@ (adr r3, 8011fe0 <MOT_goSla+0xdd0>)
 8011c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c10:	f7ee fd1a 	bl	8000648 <__aeabi_dmul>
 8011c14:	4602      	mov	r2, r0
 8011c16:	460b      	mov	r3, r1
 8011c18:	4620      	mov	r0, r4
 8011c1a:	4629      	mov	r1, r5
 8011c1c:	f7ee fb5e 	bl	80002dc <__adddf3>
 8011c20:	4602      	mov	r2, r0
 8011c22:	460b      	mov	r3, r1
 8011c24:	4610      	mov	r0, r2
 8011c26:	4619      	mov	r1, r3
 8011c28:	f7ef f806 	bl	8000c38 <__aeabi_d2f>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime + p_sla->us_sla_jerkAngaccTime*2.0) * 0.001;		// 等速距離
 8011c30:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8011c34:	f7ee fcb0 	bl	8000598 <__aeabi_f2d>
 8011c38:	4604      	mov	r4, r0
 8011c3a:	460d      	mov	r5, r1
 8011c3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7ee fcaa 	bl	8000598 <__aeabi_f2d>
 8011c44:	4680      	mov	r8, r0
 8011c46:	4689      	mov	r9, r1
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	8b9b      	ldrh	r3, [r3, #28]
 8011c4c:	461a      	mov	r2, r3
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	8b5b      	ldrh	r3, [r3, #26]
 8011c52:	4413      	add	r3, r2
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7ee fc8d 	bl	8000574 <__aeabi_i2d>
 8011c5a:	4682      	mov	sl, r0
 8011c5c:	468b      	mov	fp, r1
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	8b1b      	ldrh	r3, [r3, #24]
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7ee fc86 	bl	8000574 <__aeabi_i2d>
 8011c68:	4602      	mov	r2, r0
 8011c6a:	460b      	mov	r3, r1
 8011c6c:	f7ee fb36 	bl	80002dc <__adddf3>
 8011c70:	4602      	mov	r2, r0
 8011c72:	460b      	mov	r3, r1
 8011c74:	4650      	mov	r0, sl
 8011c76:	4659      	mov	r1, fp
 8011c78:	f7ee fb30 	bl	80002dc <__adddf3>
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	460b      	mov	r3, r1
 8011c80:	4640      	mov	r0, r8
 8011c82:	4649      	mov	r1, r9
 8011c84:	f7ee fce0 	bl	8000648 <__aeabi_dmul>
 8011c88:	4602      	mov	r2, r0
 8011c8a:	460b      	mov	r3, r1
 8011c8c:	4610      	mov	r0, r2
 8011c8e:	4619      	mov	r1, r3
 8011c90:	a3d3      	add	r3, pc, #844	@ (adr r3, 8011fe0 <MOT_goSla+0xdd0>)
 8011c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c96:	f7ee fcd7 	bl	8000648 <__aeabi_dmul>
 8011c9a:	4602      	mov	r2, r0
 8011c9c:	460b      	mov	r3, r1
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	4629      	mov	r1, r5
 8011ca2:	f7ee fb1b 	bl	80002dc <__adddf3>
 8011ca6:	4602      	mov	r2, r0
 8011ca8:	460b      	mov	r3, r1
 8011caa:	4610      	mov	r0, r2
 8011cac:	4619      	mov	r1, r3
 8011cae:	f7ee ffc3 	bl	8000c38 <__aeabi_d2f>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
//	st_data.f_ctrl_accAngleS		= 0;						// 角加速度
	st_data.f_ctrl_jerkAngle	= 0;
 8011cb6:	f04f 0300 	mov.w	r3, #0
 8011cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= 0;
 8011cbc:	f04f 0300 	mov.w	r3, #0
 8011cc0:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= 0;
 8011cc2:	f04f 0300 	mov.w	r3, #0
 8011cc6:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_trgtAngleS;		// 現在角速度
 8011cc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS	= st_info.f_mot_trgtAngleS;		// 目標角速度
 8011cce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle		= st_info.f_mot_angle1;			// 現在角度
 8011cd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011cd8:	643b      	str	r3, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= st_info.f_mot_angle1_2;		// 目標角度
 8011cda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8011cde:	647b      	str	r3, [r7, #68]	@ 0x44
	st_data.f_ctrl_time 			= p_sla->us_sla_constAngvelTime * 0.001;		// [msec] → [sec]
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	8b9b      	ldrh	r3, [r3, #28]
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7ee fc45 	bl	8000574 <__aeabi_i2d>
 8011cea:	a3bd      	add	r3, pc, #756	@ (adr r3, 8011fe0 <MOT_goSla+0xdd0>)
 8011cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf0:	f7ee fcaa 	bl	8000648 <__aeabi_dmul>
 8011cf4:	4602      	mov	r2, r0
 8011cf6:	460b      	mov	r3, r1
 8011cf8:	4610      	mov	r0, r2
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	f7ee ff9c 	bl	8000c38 <__aeabi_d2f>
 8011d00:	4603      	mov	r3, r0
 8011d02:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 8011d04:	f107 0308 	add.w	r3, r7, #8
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7f4 fc89 	bl	8006620 <CTRL_setData>
//	printf("const angle%.5f, dist%.5f\n\r",st_info.f_mot_angle1_2,st_data.f_ctrl_dist);
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 8011d0e:	79fb      	ldrb	r3, [r7, #7]
 8011d10:	f003 0301 	and.w	r3, r3, #1
 8011d14:	b2db      	uxtb	r3, r3
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d133      	bne.n	8011d82 <MOT_goSla+0xb72>
		while( ( Get_NowAngle() > st_info.f_mot_angle1_2 ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){		// 指定角度＋距離到達待ち
 8011d1a:	e00d      	b.n	8011d38 <MOT_goSla+0xb28>
			if( SYS_isOutOfCtrl() == TRUE ){
 8011d1c:	f7f7 fc68 	bl	80095f0 <SYS_isOutOfCtrl>
 8011d20:	4603      	mov	r3, r0
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d008      	beq.n	8011d38 <MOT_goSla+0xb28>
				CTRL_stop();
 8011d26:	f7f4 fb7d 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8011d2a:	2000      	movs	r0, #0
 8011d2c:	f7f7 fc92 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8011d30:	2001      	movs	r0, #1
 8011d32:	f7f7 fc8f 	bl	8009654 <DCM_brakeMot>
				break;
 8011d36:	e03a      	b.n	8011dae <MOT_goSla+0xb9e>
		while( ( Get_NowAngle() > st_info.f_mot_angle1_2 ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){		// 指定角度＋距離到達待ち
 8011d38:	f7f4 fb0c 	bl	8006354 <Get_NowAngle>
 8011d3c:	eeb0 7a40 	vmov.f32	s14, s0
 8011d40:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8011d44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d4c:	dd2f      	ble.n	8011dae <MOT_goSla+0xb9e>
 8011d4e:	f7f4 fab9 	bl	80062c4 <Get_NowDist>
 8011d52:	eeb0 7a40 	vmov.f32	s14, s0
 8011d56:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011d5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d62:	d4db      	bmi.n	8011d1c <MOT_goSla+0xb0c>
 8011d64:	e023      	b.n	8011dae <MOT_goSla+0xb9e>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( ( Get_NowAngle() < st_info.f_mot_angle1_2 ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){		// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 8011d66:	f7f7 fc43 	bl	80095f0 <SYS_isOutOfCtrl>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d008      	beq.n	8011d82 <MOT_goSla+0xb72>
				CTRL_stop();
 8011d70:	f7f4 fb58 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8011d74:	2000      	movs	r0, #0
 8011d76:	f7f7 fc6d 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8011d7a:	2001      	movs	r0, #1
 8011d7c:	f7f7 fc6a 	bl	8009654 <DCM_brakeMot>
				break;
 8011d80:	e015      	b.n	8011dae <MOT_goSla+0xb9e>
		while( ( Get_NowAngle() < st_info.f_mot_angle1_2 ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){		// 指定角度＋距離到達待ち
 8011d82:	f7f4 fae7 	bl	8006354 <Get_NowAngle>
 8011d86:	eeb0 7a40 	vmov.f32	s14, s0
 8011d8a:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8011d8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d96:	d50a      	bpl.n	8011dae <MOT_goSla+0xb9e>
 8011d98:	f7f4 fa94 	bl	80062c4 <Get_NowDist>
 8011d9c:	eeb0 7a40 	vmov.f32	s14, s0
 8011da0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011da4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dac:	d4db      	bmi.n	8011d66 <MOT_goSla+0xb56>
		
	/* ------ */
	/*  dec  */
	/* ------ */
	//dec -jerk
	st_data.en_ctrl_type			= CTRL_DEC_SLA;
 8011dae:	230d      	movs	r3, #13
 8011db0:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 8011db2:	f04f 0300 	mov.w	r3, #0
 8011db6:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8011db8:	f04f 0300 	mov.w	r3, #0
 8011dbc:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 8011dbe:	f04f 0300 	mov.w	r3, #0
 8011dc2:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 8011dc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011dc6:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 8011dc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011dca:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime + p_sla->us_sla_jerkAngaccTime*2.0)* 0.001;		//
 8011dcc:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8011dd0:	f7ee fbe2 	bl	8000598 <__aeabi_f2d>
 8011dd4:	4604      	mov	r4, r0
 8011dd6:	460d      	mov	r5, r1
 8011dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f7ee fbdc 	bl	8000598 <__aeabi_f2d>
 8011de0:	4680      	mov	r8, r0
 8011de2:	4689      	mov	r9, r1
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	8b9b      	ldrh	r3, [r3, #28]
 8011de8:	461a      	mov	r2, r3
 8011dea:	683b      	ldr	r3, [r7, #0]
 8011dec:	8b5b      	ldrh	r3, [r3, #26]
 8011dee:	4413      	add	r3, r2
 8011df0:	4618      	mov	r0, r3
 8011df2:	f7ee fbbf 	bl	8000574 <__aeabi_i2d>
 8011df6:	4682      	mov	sl, r0
 8011df8:	468b      	mov	fp, r1
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	8b1b      	ldrh	r3, [r3, #24]
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7ee fbb8 	bl	8000574 <__aeabi_i2d>
 8011e04:	4602      	mov	r2, r0
 8011e06:	460b      	mov	r3, r1
 8011e08:	f7ee fa68 	bl	80002dc <__adddf3>
 8011e0c:	4602      	mov	r2, r0
 8011e0e:	460b      	mov	r3, r1
 8011e10:	4650      	mov	r0, sl
 8011e12:	4659      	mov	r1, fp
 8011e14:	f7ee fa62 	bl	80002dc <__adddf3>
 8011e18:	4602      	mov	r2, r0
 8011e1a:	460b      	mov	r3, r1
 8011e1c:	4640      	mov	r0, r8
 8011e1e:	4649      	mov	r1, r9
 8011e20:	f7ee fc12 	bl	8000648 <__aeabi_dmul>
 8011e24:	4602      	mov	r2, r0
 8011e26:	460b      	mov	r3, r1
 8011e28:	4610      	mov	r0, r2
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	a36c      	add	r3, pc, #432	@ (adr r3, 8011fe0 <MOT_goSla+0xdd0>)
 8011e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e32:	f7ee fc09 	bl	8000648 <__aeabi_dmul>
 8011e36:	4602      	mov	r2, r0
 8011e38:	460b      	mov	r3, r1
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	4629      	mov	r1, r5
 8011e3e:	f7ee fa4d 	bl	80002dc <__adddf3>
 8011e42:	4602      	mov	r2, r0
 8011e44:	460b      	mov	r3, r1
 8011e46:	4610      	mov	r0, r2
 8011e48:	4619      	mov	r1, r3
 8011e4a:	f7ee fef5 	bl	8000c38 <__aeabi_d2f>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime + p_sla->us_sla_jerkAngaccTime*3.0)* 0.001;		// 加速距離
 8011e52:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8011e56:	f7ee fb9f 	bl	8000598 <__aeabi_f2d>
 8011e5a:	4604      	mov	r4, r0
 8011e5c:	460d      	mov	r5, r1
 8011e5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011e60:	4618      	mov	r0, r3
 8011e62:	f7ee fb99 	bl	8000598 <__aeabi_f2d>
 8011e66:	4680      	mov	r8, r0
 8011e68:	4689      	mov	r9, r1
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	8b9b      	ldrh	r3, [r3, #28]
 8011e6e:	461a      	mov	r2, r3
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	8b5b      	ldrh	r3, [r3, #26]
 8011e74:	4413      	add	r3, r2
 8011e76:	4618      	mov	r0, r3
 8011e78:	f7ee fb7c 	bl	8000574 <__aeabi_i2d>
 8011e7c:	4682      	mov	sl, r0
 8011e7e:	468b      	mov	fp, r1
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	8b1b      	ldrh	r3, [r3, #24]
 8011e84:	4618      	mov	r0, r3
 8011e86:	f7ee fb75 	bl	8000574 <__aeabi_i2d>
 8011e8a:	f04f 0200 	mov.w	r2, #0
 8011e8e:	4b56      	ldr	r3, [pc, #344]	@ (8011fe8 <MOT_goSla+0xdd8>)
 8011e90:	f7ee fbda 	bl	8000648 <__aeabi_dmul>
 8011e94:	4602      	mov	r2, r0
 8011e96:	460b      	mov	r3, r1
 8011e98:	4650      	mov	r0, sl
 8011e9a:	4659      	mov	r1, fp
 8011e9c:	f7ee fa1e 	bl	80002dc <__adddf3>
 8011ea0:	4602      	mov	r2, r0
 8011ea2:	460b      	mov	r3, r1
 8011ea4:	4640      	mov	r0, r8
 8011ea6:	4649      	mov	r1, r9
 8011ea8:	f7ee fbce 	bl	8000648 <__aeabi_dmul>
 8011eac:	4602      	mov	r2, r0
 8011eae:	460b      	mov	r3, r1
 8011eb0:	4610      	mov	r0, r2
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	a34a      	add	r3, pc, #296	@ (adr r3, 8011fe0 <MOT_goSla+0xdd0>)
 8011eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eba:	f7ee fbc5 	bl	8000648 <__aeabi_dmul>
 8011ebe:	4602      	mov	r2, r0
 8011ec0:	460b      	mov	r3, r1
 8011ec2:	4620      	mov	r0, r4
 8011ec4:	4629      	mov	r1, r5
 8011ec6:	f7ee fa09 	bl	80002dc <__adddf3>
 8011eca:	4602      	mov	r2, r0
 8011ecc:	460b      	mov	r3, r1
 8011ece:	4610      	mov	r0, r2
 8011ed0:	4619      	mov	r1, r3
 8011ed2:	f7ee feb1 	bl	8000c38 <__aeabi_d2f>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS1;		// 角加速度
	st_data.f_ctrl_jerkAngle	= st_info.f_mot_jerkAngle*(-1.0);
 8011eda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7ee fb5a 	bl	8000598 <__aeabi_f2d>
 8011ee4:	4602      	mov	r2, r0
 8011ee6:	460b      	mov	r3, r1
 8011ee8:	4610      	mov	r0, r2
 8011eea:	4619      	mov	r1, r3
 8011eec:	f7ee fea4 	bl	8000c38 <__aeabi_d2f>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	ee07 3a90 	vmov	s15, r3
 8011ef6:	eef1 7a67 	vneg.f32	s15, s15
 8011efa:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= 0;
 8011efe:	f04f 0300 	mov.w	r3, #0
 8011f02:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= st_info.f_mot_trgtAccAngle3;
 8011f04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011f08:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_trgtAngleS;						// 現在角速度
 8011f0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_trgtAngleS - st_info.f_mot_accAnglejerk_v;		// 目標角速度
 8011f10:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 8011f14:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8011f18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f1c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle			= st_info.f_mot_angle1_2;						// 現在角度
 8011f20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8011f24:	643b      	str	r3, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk;			// 目標角度
 8011f26:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8011f2a:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8011f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f32:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	st_data.f_ctrl_time 			=  p_sla->us_sla_jerkAngaccTime * 0.001;			// [msec] → [sec]
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	8b1b      	ldrh	r3, [r3, #24]
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7ee fb1a 	bl	8000574 <__aeabi_i2d>
 8011f40:	a327      	add	r3, pc, #156	@ (adr r3, 8011fe0 <MOT_goSla+0xdd0>)
 8011f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f46:	f7ee fb7f 	bl	8000648 <__aeabi_dmul>
 8011f4a:	4602      	mov	r2, r0
 8011f4c:	460b      	mov	r3, r1
 8011f4e:	4610      	mov	r0, r2
 8011f50:	4619      	mov	r1, r3
 8011f52:	f7ee fe71 	bl	8000c38 <__aeabi_d2f>
 8011f56:	4603      	mov	r3, r0
 8011f58:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 8011f5a:	f107 0308 	add.w	r3, r7, #8
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7f4 fb5e 	bl	8006620 <CTRL_setData>
//	printf("trgtangleS %5.2f\n\r",st_data.f_trgtAngleS);
//	printf("jerkacc angle%.5f, dist%.5f\n\r",st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk,st_data.f_ctrl_dist);
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 8011f64:	79fb      	ldrb	r3, [r7, #7]
 8011f66:	f003 0301 	and.w	r3, r3, #1
 8011f6a:	b2db      	uxtb	r3, r3
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d13d      	bne.n	8011fec <MOT_goSla+0xddc>
		while( ( Get_NowAngle() > (st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8011f70:	e00d      	b.n	8011f8e <MOT_goSla+0xd7e>
			if( SYS_isOutOfCtrl() == TRUE ){
 8011f72:	f7f7 fb3d 	bl	80095f0 <SYS_isOutOfCtrl>
 8011f76:	4603      	mov	r3, r0
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d008      	beq.n	8011f8e <MOT_goSla+0xd7e>
				CTRL_stop();
 8011f7c:	f7f4 fa52 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8011f80:	2000      	movs	r0, #0
 8011f82:	f7f7 fb67 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8011f86:	2001      	movs	r0, #1
 8011f88:	f7f7 fb64 	bl	8009654 <DCM_brakeMot>
				break;
 8011f8c:	e048      	b.n	8012020 <MOT_goSla+0xe10>
		while( ( Get_NowAngle() > (st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8011f8e:	f7f4 f9e1 	bl	8006354 <Get_NowAngle>
 8011f92:	eef0 6a40 	vmov.f32	s13, s0
 8011f96:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8011f9a:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8011f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011fa2:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011faa:	dd39      	ble.n	8012020 <MOT_goSla+0xe10>
 8011fac:	f7f4 f98a 	bl	80062c4 <Get_NowDist>
 8011fb0:	eeb0 7a40 	vmov.f32	s14, s0
 8011fb4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fc0:	d4d7      	bmi.n	8011f72 <MOT_goSla+0xd62>
 8011fc2:	e02d      	b.n	8012020 <MOT_goSla+0xe10>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( ( Get_NowAngle() < (st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 8011fc4:	f7f7 fb14 	bl	80095f0 <SYS_isOutOfCtrl>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d00e      	beq.n	8011fec <MOT_goSla+0xddc>
				CTRL_stop();
 8011fce:	f7f4 fa29 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8011fd2:	2000      	movs	r0, #0
 8011fd4:	f7f7 fb3e 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8011fd8:	2001      	movs	r0, #1
 8011fda:	f7f7 fb3b 	bl	8009654 <DCM_brakeMot>
				break;
 8011fde:	e01f      	b.n	8012020 <MOT_goSla+0xe10>
 8011fe0:	d2f1a9fc 	.word	0xd2f1a9fc
 8011fe4:	3f50624d 	.word	0x3f50624d
 8011fe8:	40080000 	.word	0x40080000
		while( ( Get_NowAngle() < (st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8011fec:	f7f4 f9b2 	bl	8006354 <Get_NowAngle>
 8011ff0:	eef0 6a40 	vmov.f32	s13, s0
 8011ff4:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8011ff8:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8011ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012000:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012008:	d50a      	bpl.n	8012020 <MOT_goSla+0xe10>
 801200a:	f7f4 f95b 	bl	80062c4 <Get_NowDist>
 801200e:	eeb0 7a40 	vmov.f32	s14, s0
 8012012:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8012016:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801201a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801201e:	d4d1      	bmi.n	8011fc4 <MOT_goSla+0xdb4>
			}				// 途中で制御不能になった
		}
	}

	st_data.en_ctrl_type			= CTRL_DEC_SLA;
 8012020:	230d      	movs	r3, #13
 8012022:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 8012024:	f04f 0300 	mov.w	r3, #0
 8012028:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 801202a:	f04f 0300 	mov.w	r3, #0
 801202e:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 8012030:	f04f 0300 	mov.w	r3, #0
 8012034:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 8012036:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012038:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 801203a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801203c:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime + p_sla->us_sla_jerkAngaccTime*3.0)* 0.001;
 801203e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8012042:	f7ee faa9 	bl	8000598 <__aeabi_f2d>
 8012046:	4604      	mov	r4, r0
 8012048:	460d      	mov	r5, r1
 801204a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801204c:	4618      	mov	r0, r3
 801204e:	f7ee faa3 	bl	8000598 <__aeabi_f2d>
 8012052:	4680      	mov	r8, r0
 8012054:	4689      	mov	r9, r1
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	8b9b      	ldrh	r3, [r3, #28]
 801205a:	461a      	mov	r2, r3
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	8b5b      	ldrh	r3, [r3, #26]
 8012060:	4413      	add	r3, r2
 8012062:	4618      	mov	r0, r3
 8012064:	f7ee fa86 	bl	8000574 <__aeabi_i2d>
 8012068:	4682      	mov	sl, r0
 801206a:	468b      	mov	fp, r1
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	8b1b      	ldrh	r3, [r3, #24]
 8012070:	4618      	mov	r0, r3
 8012072:	f7ee fa7f 	bl	8000574 <__aeabi_i2d>
 8012076:	f04f 0200 	mov.w	r2, #0
 801207a:	4b7b      	ldr	r3, [pc, #492]	@ (8012268 <MOT_goSla+0x1058>)
 801207c:	f7ee fae4 	bl	8000648 <__aeabi_dmul>
 8012080:	4602      	mov	r2, r0
 8012082:	460b      	mov	r3, r1
 8012084:	4650      	mov	r0, sl
 8012086:	4659      	mov	r1, fp
 8012088:	f7ee f928 	bl	80002dc <__adddf3>
 801208c:	4602      	mov	r2, r0
 801208e:	460b      	mov	r3, r1
 8012090:	4640      	mov	r0, r8
 8012092:	4649      	mov	r1, r9
 8012094:	f7ee fad8 	bl	8000648 <__aeabi_dmul>
 8012098:	4602      	mov	r2, r0
 801209a:	460b      	mov	r3, r1
 801209c:	4610      	mov	r0, r2
 801209e:	4619      	mov	r1, r3
 80120a0:	a36f      	add	r3, pc, #444	@ (adr r3, 8012260 <MOT_goSla+0x1050>)
 80120a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a6:	f7ee facf 	bl	8000648 <__aeabi_dmul>
 80120aa:	4602      	mov	r2, r0
 80120ac:	460b      	mov	r3, r1
 80120ae:	4620      	mov	r0, r4
 80120b0:	4629      	mov	r1, r5
 80120b2:	f7ee f913 	bl	80002dc <__adddf3>
 80120b6:	4602      	mov	r2, r0
 80120b8:	460b      	mov	r3, r1
 80120ba:	4610      	mov	r0, r2
 80120bc:	4619      	mov	r1, r3
 80120be:	f7ee fdbb 	bl	8000c38 <__aeabi_d2f>
 80120c2:	4603      	mov	r3, r0
 80120c4:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime*2.0 + p_sla->us_sla_jerkAngaccTime*3.0)* 0.001;		// 減速距離
 80120c6:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 80120ca:	f7ee fa65 	bl	8000598 <__aeabi_f2d>
 80120ce:	4604      	mov	r4, r0
 80120d0:	460d      	mov	r5, r1
 80120d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80120d4:	4618      	mov	r0, r3
 80120d6:	f7ee fa5f 	bl	8000598 <__aeabi_f2d>
 80120da:	4680      	mov	r8, r0
 80120dc:	4689      	mov	r9, r1
 80120de:	683b      	ldr	r3, [r7, #0]
 80120e0:	8b9b      	ldrh	r3, [r3, #28]
 80120e2:	4618      	mov	r0, r3
 80120e4:	f7ee fa46 	bl	8000574 <__aeabi_i2d>
 80120e8:	4682      	mov	sl, r0
 80120ea:	468b      	mov	fp, r1
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	8b5b      	ldrh	r3, [r3, #26]
 80120f0:	4618      	mov	r0, r3
 80120f2:	f7ee fa3f 	bl	8000574 <__aeabi_i2d>
 80120f6:	4602      	mov	r2, r0
 80120f8:	460b      	mov	r3, r1
 80120fa:	f7ee f8ef 	bl	80002dc <__adddf3>
 80120fe:	4602      	mov	r2, r0
 8012100:	460b      	mov	r3, r1
 8012102:	4650      	mov	r0, sl
 8012104:	4659      	mov	r1, fp
 8012106:	f7ee f8e9 	bl	80002dc <__adddf3>
 801210a:	4602      	mov	r2, r0
 801210c:	460b      	mov	r3, r1
 801210e:	4692      	mov	sl, r2
 8012110:	469b      	mov	fp, r3
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	8b1b      	ldrh	r3, [r3, #24]
 8012116:	4618      	mov	r0, r3
 8012118:	f7ee fa2c 	bl	8000574 <__aeabi_i2d>
 801211c:	f04f 0200 	mov.w	r2, #0
 8012120:	4b51      	ldr	r3, [pc, #324]	@ (8012268 <MOT_goSla+0x1058>)
 8012122:	f7ee fa91 	bl	8000648 <__aeabi_dmul>
 8012126:	4602      	mov	r2, r0
 8012128:	460b      	mov	r3, r1
 801212a:	4650      	mov	r0, sl
 801212c:	4659      	mov	r1, fp
 801212e:	f7ee f8d5 	bl	80002dc <__adddf3>
 8012132:	4602      	mov	r2, r0
 8012134:	460b      	mov	r3, r1
 8012136:	4640      	mov	r0, r8
 8012138:	4649      	mov	r1, r9
 801213a:	f7ee fa85 	bl	8000648 <__aeabi_dmul>
 801213e:	4602      	mov	r2, r0
 8012140:	460b      	mov	r3, r1
 8012142:	4610      	mov	r0, r2
 8012144:	4619      	mov	r1, r3
 8012146:	a346      	add	r3, pc, #280	@ (adr r3, 8012260 <MOT_goSla+0x1050>)
 8012148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801214c:	f7ee fa7c 	bl	8000648 <__aeabi_dmul>
 8012150:	4602      	mov	r2, r0
 8012152:	460b      	mov	r3, r1
 8012154:	4620      	mov	r0, r4
 8012156:	4629      	mov	r1, r5
 8012158:	f7ee f8c0 	bl	80002dc <__adddf3>
 801215c:	4602      	mov	r2, r0
 801215e:	460b      	mov	r3, r1
 8012160:	4610      	mov	r0, r2
 8012162:	4619      	mov	r1, r3
 8012164:	f7ee fd68 	bl	8000c38 <__aeabi_d2f>
 8012168:	4603      	mov	r3, r0
 801216a:	62bb      	str	r3, [r7, #40]	@ 0x28
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS3;		// 角加速度
	st_data.f_ctrl_jerkAngle	= 0;
 801216c:	f04f 0300 	mov.w	r3, #0
 8012170:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= st_info.f_mot_trgtAccAngle3;
 8012172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012176:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= st_info.f_mot_trgtAccAngle3;
 8012178:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801217c:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_trgtAngleS - st_info.f_mot_accAnglejerk_v;		// 現在角速度
 801217e:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 8012182:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8012186:	ee77 7a67 	vsub.f32	s15, s14, s15
 801218a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_accAnglejerk_v;				// 目標角速度
 801218e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012192:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle			= st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk;		// 現在角度
 8012194:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8012198:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 801219c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121a0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= st_info.f_mot_angle - st_info.f_mot_l3_accanglejerk;			// 目標角度
 80121a4:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 80121a8:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 80121ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80121b0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	st_data.f_ctrl_time			= p_sla->us_sla_accAngvelTime * 0.001;			// [msec] → [sec]
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	8b5b      	ldrh	r3, [r3, #26]
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7ee f9db 	bl	8000574 <__aeabi_i2d>
 80121be:	a328      	add	r3, pc, #160	@ (adr r3, 8012260 <MOT_goSla+0x1050>)
 80121c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c4:	f7ee fa40 	bl	8000648 <__aeabi_dmul>
 80121c8:	4602      	mov	r2, r0
 80121ca:	460b      	mov	r3, r1
 80121cc:	4610      	mov	r0, r2
 80121ce:	4619      	mov	r1, r3
 80121d0:	f7ee fd32 	bl	8000c38 <__aeabi_d2f>
 80121d4:	4603      	mov	r3, r0
 80121d6:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 80121d8:	f107 0308 	add.w	r3, r7, #8
 80121dc:	4618      	mov	r0, r3
 80121de:	f7f4 fa1f 	bl	8006620 <CTRL_setData>
//	LED = LED_ALL_ON;
//	printf("jerkconst angle%.5f, dist%.5f\n\r",st_info.f_mot_angle - st_info.f_mot_l3_accanglejerk,st_data.f_ctrl_dist);
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 80121e2:	79fb      	ldrb	r3, [r7, #7]
 80121e4:	f003 0301 	and.w	r3, r3, #1
 80121e8:	b2db      	uxtb	r3, r3
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d13e      	bne.n	801226c <MOT_goSla+0x105c>
		while( ( Get_NowAngle() > (st_info.f_mot_angle - st_info.f_mot_l3_accanglejerk) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 80121ee:	e00d      	b.n	801220c <MOT_goSla+0xffc>
			if( SYS_isOutOfCtrl() == TRUE ){
 80121f0:	f7f7 f9fe 	bl	80095f0 <SYS_isOutOfCtrl>
 80121f4:	4603      	mov	r3, r0
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d008      	beq.n	801220c <MOT_goSla+0xffc>
				CTRL_stop();
 80121fa:	f7f4 f913 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 80121fe:	2000      	movs	r0, #0
 8012200:	f7f7 fa28 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8012204:	2001      	movs	r0, #1
 8012206:	f7f7 fa25 	bl	8009654 <DCM_brakeMot>
				break;
 801220a:	e049      	b.n	80122a0 <MOT_goSla+0x1090>
		while( ( Get_NowAngle() > (st_info.f_mot_angle - st_info.f_mot_l3_accanglejerk) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 801220c:	f7f4 f8a2 	bl	8006354 <Get_NowAngle>
 8012210:	eef0 6a40 	vmov.f32	s13, s0
 8012214:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8012218:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 801221c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012220:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012228:	dd3a      	ble.n	80122a0 <MOT_goSla+0x1090>
 801222a:	f7f4 f84b 	bl	80062c4 <Get_NowDist>
 801222e:	eeb0 7a40 	vmov.f32	s14, s0
 8012232:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8012236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801223a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801223e:	d4d7      	bmi.n	80121f0 <MOT_goSla+0xfe0>
 8012240:	e02e      	b.n	80122a0 <MOT_goSla+0x1090>

		}
	}
	else{
		while( ( Get_NowAngle() < (st_info.f_mot_angle - st_info.f_mot_l3_accanglejerk) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 8012242:	f7f7 f9d5 	bl	80095f0 <SYS_isOutOfCtrl>
 8012246:	4603      	mov	r3, r0
 8012248:	2b00      	cmp	r3, #0
 801224a:	d00f      	beq.n	801226c <MOT_goSla+0x105c>
				CTRL_stop();
 801224c:	f7f4 f8ea 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8012250:	2000      	movs	r0, #0
 8012252:	f7f7 f9ff 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8012256:	2001      	movs	r0, #1
 8012258:	f7f7 f9fc 	bl	8009654 <DCM_brakeMot>
				break;
 801225c:	e020      	b.n	80122a0 <MOT_goSla+0x1090>
 801225e:	bf00      	nop
 8012260:	d2f1a9fc 	.word	0xd2f1a9fc
 8012264:	3f50624d 	.word	0x3f50624d
 8012268:	40080000 	.word	0x40080000
		while( ( Get_NowAngle() < (st_info.f_mot_angle - st_info.f_mot_l3_accanglejerk) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 801226c:	f7f4 f872 	bl	8006354 <Get_NowAngle>
 8012270:	eef0 6a40 	vmov.f32	s13, s0
 8012274:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8012278:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 801227c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012280:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012288:	d50a      	bpl.n	80122a0 <MOT_goSla+0x1090>
 801228a:	f7f4 f81b 	bl	80062c4 <Get_NowDist>
 801228e:	eeb0 7a40 	vmov.f32	s14, s0
 8012292:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8012296:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801229a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801229e:	d4d0      	bmi.n	8012242 <MOT_goSla+0x1032>

		}
	}

	//dec jerk
	st_data.en_ctrl_type			= CTRL_DEC_SLA;
 80122a0:	230d      	movs	r3, #13
 80122a2:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 80122a4:	f04f 0300 	mov.w	r3, #0
 80122a8:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 80122aa:	f04f 0300 	mov.w	r3, #0
 80122ae:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 80122b0:	f04f 0300 	mov.w	r3, #0
 80122b4:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 80122b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80122b8:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 80122ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80122bc:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime*2.0 + p_sla->us_sla_jerkAngaccTime*3.0)* 0.001;
 80122be:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 80122c2:	f7ee f969 	bl	8000598 <__aeabi_f2d>
 80122c6:	4604      	mov	r4, r0
 80122c8:	460d      	mov	r5, r1
 80122ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80122cc:	4618      	mov	r0, r3
 80122ce:	f7ee f963 	bl	8000598 <__aeabi_f2d>
 80122d2:	4680      	mov	r8, r0
 80122d4:	4689      	mov	r9, r1
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	8b9b      	ldrh	r3, [r3, #28]
 80122da:	4618      	mov	r0, r3
 80122dc:	f7ee f94a 	bl	8000574 <__aeabi_i2d>
 80122e0:	4682      	mov	sl, r0
 80122e2:	468b      	mov	fp, r1
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	8b5b      	ldrh	r3, [r3, #26]
 80122e8:	4618      	mov	r0, r3
 80122ea:	f7ee f943 	bl	8000574 <__aeabi_i2d>
 80122ee:	4602      	mov	r2, r0
 80122f0:	460b      	mov	r3, r1
 80122f2:	f7ed fff3 	bl	80002dc <__adddf3>
 80122f6:	4602      	mov	r2, r0
 80122f8:	460b      	mov	r3, r1
 80122fa:	4650      	mov	r0, sl
 80122fc:	4659      	mov	r1, fp
 80122fe:	f7ed ffed 	bl	80002dc <__adddf3>
 8012302:	4602      	mov	r2, r0
 8012304:	460b      	mov	r3, r1
 8012306:	4692      	mov	sl, r2
 8012308:	469b      	mov	fp, r3
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	8b1b      	ldrh	r3, [r3, #24]
 801230e:	4618      	mov	r0, r3
 8012310:	f7ee f930 	bl	8000574 <__aeabi_i2d>
 8012314:	f04f 0200 	mov.w	r2, #0
 8012318:	4b73      	ldr	r3, [pc, #460]	@ (80124e8 <MOT_goSla+0x12d8>)
 801231a:	f7ee f995 	bl	8000648 <__aeabi_dmul>
 801231e:	4602      	mov	r2, r0
 8012320:	460b      	mov	r3, r1
 8012322:	4650      	mov	r0, sl
 8012324:	4659      	mov	r1, fp
 8012326:	f7ed ffd9 	bl	80002dc <__adddf3>
 801232a:	4602      	mov	r2, r0
 801232c:	460b      	mov	r3, r1
 801232e:	4640      	mov	r0, r8
 8012330:	4649      	mov	r1, r9
 8012332:	f7ee f989 	bl	8000648 <__aeabi_dmul>
 8012336:	4602      	mov	r2, r0
 8012338:	460b      	mov	r3, r1
 801233a:	4610      	mov	r0, r2
 801233c:	4619      	mov	r1, r3
 801233e:	a368      	add	r3, pc, #416	@ (adr r3, 80124e0 <MOT_goSla+0x12d0>)
 8012340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012344:	f7ee f980 	bl	8000648 <__aeabi_dmul>
 8012348:	4602      	mov	r2, r0
 801234a:	460b      	mov	r3, r1
 801234c:	4620      	mov	r0, r4
 801234e:	4629      	mov	r1, r5
 8012350:	f7ed ffc4 	bl	80002dc <__adddf3>
 8012354:	4602      	mov	r2, r0
 8012356:	460b      	mov	r3, r1
 8012358:	4610      	mov	r0, r2
 801235a:	4619      	mov	r1, r3
 801235c:	f7ee fc6c 	bl	8000c38 <__aeabi_d2f>
 8012360:	4603      	mov	r3, r0
 8012362:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime*2.0 + p_sla->us_sla_jerkAngaccTime*4.0)* 0.001;		// 減速距離
 8012364:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8012368:	f7ee f916 	bl	8000598 <__aeabi_f2d>
 801236c:	4604      	mov	r4, r0
 801236e:	460d      	mov	r5, r1
 8012370:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012372:	4618      	mov	r0, r3
 8012374:	f7ee f910 	bl	8000598 <__aeabi_f2d>
 8012378:	4680      	mov	r8, r0
 801237a:	4689      	mov	r9, r1
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	8b9b      	ldrh	r3, [r3, #28]
 8012380:	4618      	mov	r0, r3
 8012382:	f7ee f8f7 	bl	8000574 <__aeabi_i2d>
 8012386:	4682      	mov	sl, r0
 8012388:	468b      	mov	fp, r1
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	8b5b      	ldrh	r3, [r3, #26]
 801238e:	4618      	mov	r0, r3
 8012390:	f7ee f8f0 	bl	8000574 <__aeabi_i2d>
 8012394:	4602      	mov	r2, r0
 8012396:	460b      	mov	r3, r1
 8012398:	f7ed ffa0 	bl	80002dc <__adddf3>
 801239c:	4602      	mov	r2, r0
 801239e:	460b      	mov	r3, r1
 80123a0:	4650      	mov	r0, sl
 80123a2:	4659      	mov	r1, fp
 80123a4:	f7ed ff9a 	bl	80002dc <__adddf3>
 80123a8:	4602      	mov	r2, r0
 80123aa:	460b      	mov	r3, r1
 80123ac:	4692      	mov	sl, r2
 80123ae:	469b      	mov	fp, r3
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	8b1b      	ldrh	r3, [r3, #24]
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7ee f8dd 	bl	8000574 <__aeabi_i2d>
 80123ba:	f04f 0200 	mov.w	r2, #0
 80123be:	4b4b      	ldr	r3, [pc, #300]	@ (80124ec <MOT_goSla+0x12dc>)
 80123c0:	f7ee f942 	bl	8000648 <__aeabi_dmul>
 80123c4:	4602      	mov	r2, r0
 80123c6:	460b      	mov	r3, r1
 80123c8:	4650      	mov	r0, sl
 80123ca:	4659      	mov	r1, fp
 80123cc:	f7ed ff86 	bl	80002dc <__adddf3>
 80123d0:	4602      	mov	r2, r0
 80123d2:	460b      	mov	r3, r1
 80123d4:	4640      	mov	r0, r8
 80123d6:	4649      	mov	r1, r9
 80123d8:	f7ee f936 	bl	8000648 <__aeabi_dmul>
 80123dc:	4602      	mov	r2, r0
 80123de:	460b      	mov	r3, r1
 80123e0:	4610      	mov	r0, r2
 80123e2:	4619      	mov	r1, r3
 80123e4:	a33e      	add	r3, pc, #248	@ (adr r3, 80124e0 <MOT_goSla+0x12d0>)
 80123e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ea:	f7ee f92d 	bl	8000648 <__aeabi_dmul>
 80123ee:	4602      	mov	r2, r0
 80123f0:	460b      	mov	r3, r1
 80123f2:	4620      	mov	r0, r4
 80123f4:	4629      	mov	r1, r5
 80123f6:	f7ed ff71 	bl	80002dc <__adddf3>
 80123fa:	4602      	mov	r2, r0
 80123fc:	460b      	mov	r3, r1
 80123fe:	4610      	mov	r0, r2
 8012400:	4619      	mov	r1, r3
 8012402:	f7ee fc19 	bl	8000c38 <__aeabi_d2f>
 8012406:	4603      	mov	r3, r0
 8012408:	62bb      	str	r3, [r7, #40]	@ 0x28
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS3;		// 角加速度
	st_data.f_ctrl_jerkAngle	= st_info.f_mot_jerkAngle;
 801240a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801240e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= st_info.f_mot_trgtAccAngle3;
 8012410:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012414:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= 0;
 8012416:	f04f 0300 	mov.w	r3, #0
 801241a:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_accAnglejerk_v;		// 現在角速度
 801241c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012420:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS		= 0;				// 目標角速度
 8012422:	f04f 0300 	mov.w	r3, #0
 8012426:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle			= st_info.f_mot_angle - st_info.f_mot_l3_accanglejerk;		// 現在角度
 8012428:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 801242c:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8012430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012434:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= st_info.f_mot_angle;			// 目標角度
 8012438:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801243c:	647b      	str	r3, [r7, #68]	@ 0x44
	st_data.f_ctrl_time			= p_sla->us_sla_jerkAngaccTime * 0.001;			// [msec] → [sec]
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	8b1b      	ldrh	r3, [r3, #24]
 8012442:	4618      	mov	r0, r3
 8012444:	f7ee f896 	bl	8000574 <__aeabi_i2d>
 8012448:	a325      	add	r3, pc, #148	@ (adr r3, 80124e0 <MOT_goSla+0x12d0>)
 801244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801244e:	f7ee f8fb 	bl	8000648 <__aeabi_dmul>
 8012452:	4602      	mov	r2, r0
 8012454:	460b      	mov	r3, r1
 8012456:	4610      	mov	r0, r2
 8012458:	4619      	mov	r1, r3
 801245a:	f7ee fbed 	bl	8000c38 <__aeabi_d2f>
 801245e:	4603      	mov	r3, r0
 8012460:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 8012462:	f107 0308 	add.w	r3, r7, #8
 8012466:	4618      	mov	r0, r3
 8012468:	f7f4 f8da 	bl	8006620 <CTRL_setData>
//	LED = LED_ALL_ON;
//	printf("jerkdec angle%.5f, dist%.5f\n\r",st_info.f_mot_angle,st_data.f_ctrl_dist);
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 801246c:	79fb      	ldrb	r3, [r7, #7]
 801246e:	f003 0301 	and.w	r3, r3, #1
 8012472:	b2db      	uxtb	r3, r3
 8012474:	2b00      	cmp	r3, #0
 8012476:	d13b      	bne.n	80124f0 <MOT_goSla+0x12e0>
		while( ( Get_NowAngle() > st_info.f_mot_angle ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8012478:	e00d      	b.n	8012496 <MOT_goSla+0x1286>
			if( SYS_isOutOfCtrl() == TRUE ){
 801247a:	f7f7 f8b9 	bl	80095f0 <SYS_isOutOfCtrl>
 801247e:	4603      	mov	r3, r0
 8012480:	2b00      	cmp	r3, #0
 8012482:	d008      	beq.n	8012496 <MOT_goSla+0x1286>
				CTRL_stop();
 8012484:	f7f3 ffce 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8012488:	2000      	movs	r0, #0
 801248a:	f7f7 f8e3 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 801248e:	2001      	movs	r0, #1
 8012490:	f7f7 f8e0 	bl	8009654 <DCM_brakeMot>
				break;
 8012494:	e042      	b.n	801251c <MOT_goSla+0x130c>
		while( ( Get_NowAngle() > st_info.f_mot_angle ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8012496:	f7f3 ff5d 	bl	8006354 <Get_NowAngle>
 801249a:	eeb0 7a40 	vmov.f32	s14, s0
 801249e:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 80124a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80124a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124aa:	dd37      	ble.n	801251c <MOT_goSla+0x130c>
 80124ac:	f7f3 ff0a 	bl	80062c4 <Get_NowDist>
 80124b0:	eeb0 7a40 	vmov.f32	s14, s0
 80124b4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80124b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80124bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124c0:	d4db      	bmi.n	801247a <MOT_goSla+0x126a>
 80124c2:	e02b      	b.n	801251c <MOT_goSla+0x130c>

		}
	}
	else{
		while( ( Get_NowAngle() < st_info.f_mot_angle ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 80124c4:	f7f7 f894 	bl	80095f0 <SYS_isOutOfCtrl>
 80124c8:	4603      	mov	r3, r0
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d010      	beq.n	80124f0 <MOT_goSla+0x12e0>
				CTRL_stop();
 80124ce:	f7f3 ffa9 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 80124d2:	2000      	movs	r0, #0
 80124d4:	f7f7 f8be 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 80124d8:	2001      	movs	r0, #1
 80124da:	f7f7 f8bb 	bl	8009654 <DCM_brakeMot>
				break;
 80124de:	e01d      	b.n	801251c <MOT_goSla+0x130c>
 80124e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80124e4:	3f50624d 	.word	0x3f50624d
 80124e8:	40080000 	.word	0x40080000
 80124ec:	40100000 	.word	0x40100000
		while( ( Get_NowAngle() < st_info.f_mot_angle ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 80124f0:	f7f3 ff30 	bl	8006354 <Get_NowAngle>
 80124f4:	eeb0 7a40 	vmov.f32	s14, s0
 80124f8:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 80124fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012504:	d50a      	bpl.n	801251c <MOT_goSla+0x130c>
 8012506:	f7f3 fedd 	bl	80062c4 <Get_NowDist>
 801250a:	eeb0 7a40 	vmov.f32	s14, s0
 801250e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8012512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801251a:	d4d3      	bmi.n	80124c4 <MOT_goSla+0x12b4>

//	LED_on(LED1);
	/* ------------------------ */
	/*  escape  */
	/* ------------------------ */
	st_data.en_ctrl_type			= CTRL_EXIT_SLA;
 801251c:	230e      	movs	r3, #14
 801251e:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 8012520:	f04f 0300 	mov.w	r3, #0
 8012524:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8012526:	f04f 0300 	mov.w	r3, #0
 801252a:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 801252c:	f04f 0300 	mov.w	r3, #0
 8012530:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 8012532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012534:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 8012536:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012538:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime*2.0 + p_sla->us_sla_jerkAngaccTime*4.0) * 0.001;
 801253a:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 801253e:	f7ee f82b 	bl	8000598 <__aeabi_f2d>
 8012542:	4604      	mov	r4, r0
 8012544:	460d      	mov	r5, r1
 8012546:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012548:	4618      	mov	r0, r3
 801254a:	f7ee f825 	bl	8000598 <__aeabi_f2d>
 801254e:	4680      	mov	r8, r0
 8012550:	4689      	mov	r9, r1
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	8b9b      	ldrh	r3, [r3, #28]
 8012556:	4618      	mov	r0, r3
 8012558:	f7ee f80c 	bl	8000574 <__aeabi_i2d>
 801255c:	4682      	mov	sl, r0
 801255e:	468b      	mov	fp, r1
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	8b5b      	ldrh	r3, [r3, #26]
 8012564:	4618      	mov	r0, r3
 8012566:	f7ee f805 	bl	8000574 <__aeabi_i2d>
 801256a:	4602      	mov	r2, r0
 801256c:	460b      	mov	r3, r1
 801256e:	f7ed feb5 	bl	80002dc <__adddf3>
 8012572:	4602      	mov	r2, r0
 8012574:	460b      	mov	r3, r1
 8012576:	4650      	mov	r0, sl
 8012578:	4659      	mov	r1, fp
 801257a:	f7ed feaf 	bl	80002dc <__adddf3>
 801257e:	4602      	mov	r2, r0
 8012580:	460b      	mov	r3, r1
 8012582:	4692      	mov	sl, r2
 8012584:	469b      	mov	fp, r3
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	8b1b      	ldrh	r3, [r3, #24]
 801258a:	4618      	mov	r0, r3
 801258c:	f7ed fff2 	bl	8000574 <__aeabi_i2d>
 8012590:	f04f 0200 	mov.w	r2, #0
 8012594:	4b64      	ldr	r3, [pc, #400]	@ (8012728 <MOT_goSla+0x1518>)
 8012596:	f7ee f857 	bl	8000648 <__aeabi_dmul>
 801259a:	4602      	mov	r2, r0
 801259c:	460b      	mov	r3, r1
 801259e:	4650      	mov	r0, sl
 80125a0:	4659      	mov	r1, fp
 80125a2:	f7ed fe9b 	bl	80002dc <__adddf3>
 80125a6:	4602      	mov	r2, r0
 80125a8:	460b      	mov	r3, r1
 80125aa:	4640      	mov	r0, r8
 80125ac:	4649      	mov	r1, r9
 80125ae:	f7ee f84b 	bl	8000648 <__aeabi_dmul>
 80125b2:	4602      	mov	r2, r0
 80125b4:	460b      	mov	r3, r1
 80125b6:	4610      	mov	r0, r2
 80125b8:	4619      	mov	r1, r3
 80125ba:	a359      	add	r3, pc, #356	@ (adr r3, 8012720 <MOT_goSla+0x1510>)
 80125bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c0:	f7ee f842 	bl	8000648 <__aeabi_dmul>
 80125c4:	4602      	mov	r2, r0
 80125c6:	460b      	mov	r3, r1
 80125c8:	4620      	mov	r0, r4
 80125ca:	4629      	mov	r1, r5
 80125cc:	f7ed fe86 	bl	80002dc <__adddf3>
 80125d0:	4602      	mov	r2, r0
 80125d2:	460b      	mov	r3, r1
 80125d4:	4610      	mov	r0, r2
 80125d6:	4619      	mov	r1, r3
 80125d8:	f7ee fb2e 	bl	8000c38 <__aeabi_d2f>
 80125dc:	4603      	mov	r3, r0
 80125de:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_escapeLen + f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime*2.0 + p_sla->us_sla_jerkAngaccTime*4.0) * 0.001;	// スラローム後の前進距離
 80125e0:	ed97 7a3a 	vldr	s14, [r7, #232]	@ 0xe8
 80125e4:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 80125e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80125ec:	ee17 0a90 	vmov	r0, s15
 80125f0:	f7ed ffd2 	bl	8000598 <__aeabi_f2d>
 80125f4:	4604      	mov	r4, r0
 80125f6:	460d      	mov	r5, r1
 80125f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80125fa:	4618      	mov	r0, r3
 80125fc:	f7ed ffcc 	bl	8000598 <__aeabi_f2d>
 8012600:	4680      	mov	r8, r0
 8012602:	4689      	mov	r9, r1
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	8b9b      	ldrh	r3, [r3, #28]
 8012608:	4618      	mov	r0, r3
 801260a:	f7ed ffb3 	bl	8000574 <__aeabi_i2d>
 801260e:	4682      	mov	sl, r0
 8012610:	468b      	mov	fp, r1
 8012612:	683b      	ldr	r3, [r7, #0]
 8012614:	8b5b      	ldrh	r3, [r3, #26]
 8012616:	4618      	mov	r0, r3
 8012618:	f7ed ffac 	bl	8000574 <__aeabi_i2d>
 801261c:	4602      	mov	r2, r0
 801261e:	460b      	mov	r3, r1
 8012620:	f7ed fe5c 	bl	80002dc <__adddf3>
 8012624:	4602      	mov	r2, r0
 8012626:	460b      	mov	r3, r1
 8012628:	4650      	mov	r0, sl
 801262a:	4659      	mov	r1, fp
 801262c:	f7ed fe56 	bl	80002dc <__adddf3>
 8012630:	4602      	mov	r2, r0
 8012632:	460b      	mov	r3, r1
 8012634:	4692      	mov	sl, r2
 8012636:	469b      	mov	fp, r3
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	8b1b      	ldrh	r3, [r3, #24]
 801263c:	4618      	mov	r0, r3
 801263e:	f7ed ff99 	bl	8000574 <__aeabi_i2d>
 8012642:	f04f 0200 	mov.w	r2, #0
 8012646:	4b38      	ldr	r3, [pc, #224]	@ (8012728 <MOT_goSla+0x1518>)
 8012648:	f7ed fffe 	bl	8000648 <__aeabi_dmul>
 801264c:	4602      	mov	r2, r0
 801264e:	460b      	mov	r3, r1
 8012650:	4650      	mov	r0, sl
 8012652:	4659      	mov	r1, fp
 8012654:	f7ed fe42 	bl	80002dc <__adddf3>
 8012658:	4602      	mov	r2, r0
 801265a:	460b      	mov	r3, r1
 801265c:	4640      	mov	r0, r8
 801265e:	4649      	mov	r1, r9
 8012660:	f7ed fff2 	bl	8000648 <__aeabi_dmul>
 8012664:	4602      	mov	r2, r0
 8012666:	460b      	mov	r3, r1
 8012668:	4610      	mov	r0, r2
 801266a:	4619      	mov	r1, r3
 801266c:	a32c      	add	r3, pc, #176	@ (adr r3, 8012720 <MOT_goSla+0x1510>)
 801266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012672:	f7ed ffe9 	bl	8000648 <__aeabi_dmul>
 8012676:	4602      	mov	r2, r0
 8012678:	460b      	mov	r3, r1
 801267a:	4620      	mov	r0, r4
 801267c:	4629      	mov	r1, r5
 801267e:	f7ed fe2d 	bl	80002dc <__adddf3>
 8012682:	4602      	mov	r2, r0
 8012684:	460b      	mov	r3, r1
 8012686:	4610      	mov	r0, r2
 8012688:	4619      	mov	r1, r3
 801268a:	f7ee fad5 	bl	8000c38 <__aeabi_d2f>
 801268e:	4603      	mov	r3, r0
 8012690:	62bb      	str	r3, [r7, #40]	@ 0x28
//	st_data.f_ctrl_accAngleS		= 0;						// 角加速度
	st_data.f_ctrl_jerkAngle		= 0;
 8012692:	f04f 0300 	mov.w	r3, #0
 8012696:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= 0;
 8012698:	f04f 0300 	mov.w	r3, #0
 801269c:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= 0;
 801269e:	f04f 0300 	mov.w	r3, #0
 80126a2:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 80126a4:	f04f 0300 	mov.w	r3, #0
 80126a8:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS		= 0;						// 目標角度
 80126aa:	f04f 0300 	mov.w	r3, #0
 80126ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 80126b0:	f04f 0300 	mov.w	r3, #0
 80126b4:	643b      	str	r3, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= 0;						// 目標角度
 80126b6:	f04f 0300 	mov.w	r3, #0
 80126ba:	647b      	str	r3, [r7, #68]	@ 0x44
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 80126bc:	f04f 0300 	mov.w	r3, #0
 80126c0:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 80126c2:	f107 0308 	add.w	r3, r7, #8
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7f3 ffaa 	bl	8006620 <CTRL_setData>
//	LED =LED_ALL_OFF;
	while( Get_NowDist() < ( st_data.f_ctrl_dist ) ){	// 指定距離到達待ち
 80126cc:	e00d      	b.n	80126ea <MOT_goSla+0x14da>
		if( SYS_isOutOfCtrl() == TRUE ){
 80126ce:	f7f6 ff8f 	bl	80095f0 <SYS_isOutOfCtrl>
 80126d2:	4603      	mov	r3, r0
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d008      	beq.n	80126ea <MOT_goSla+0x14da>
			CTRL_stop();
 80126d8:	f7f3 fea4 	bl	8006424 <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 80126dc:	2000      	movs	r0, #0
 80126de:	f7f6 ffb9 	bl	8009654 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 80126e2:	2001      	movs	r0, #1
 80126e4:	f7f6 ffb6 	bl	8009654 <DCM_brakeMot>
			break;
 80126e8:	e00a      	b.n	8012700 <MOT_goSla+0x14f0>
	while( Get_NowDist() < ( st_data.f_ctrl_dist ) ){	// 指定距離到達待ち
 80126ea:	f7f3 fdeb 	bl	80062c4 <Get_NowDist>
 80126ee:	eeb0 7a40 	vmov.f32	s14, s0
 80126f2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80126f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80126fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126fe:	d4e6      	bmi.n	80126ce <MOT_goSla+0x14be>
		}				// 途中で制御不能になった
	}
//	LED_off(LED1);
//	log_in(f_NowAngle);
	f_MotNowSpeed = st_info.f_mot_now;			// 現在速度更新
 8012700:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012702:	4a0a      	ldr	r2, [pc, #40]	@ (801272c <MOT_goSla+0x151c>)
 8012704:	6013      	str	r3, [r2, #0]
//	LED =LED_ALL_OFF;
	GYRO_endErrChkAngle();					// エラー検出終了
 8012706:	f7f7 fa0f 	bl	8009b28 <GYRO_endErrChkAngle>
//	CTRL_clrNowData();
	CTRL_setNowData_Err(/*st_data.f_dist ,*/st_data.f_ctrl_angle);
 801270a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 801270e:	eeb0 0a67 	vmov.f32	s0, s15
 8012712:	f7f3 ff41 	bl	8006598 <CTRL_setNowData_Err>

}
 8012716:	bf00      	nop
 8012718:	37f0      	adds	r7, #240	@ 0xf0
 801271a:	46bd      	mov	sp, r7
 801271c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012720:	d2f1a9fc 	.word	0xd2f1a9fc
 8012724:	3f50624d 	.word	0x3f50624d
 8012728:	40100000 	.word	0x40100000
 801272c:	20017bcc 	.word	0x20017bcc

08012730 <MOT_setWallEdgeType>:
		}
	}
}

void MOT_setWallEdgeType( enMOT_WALL_EDGE_TYPE en_type )
{
 8012730:	b480      	push	{r7}
 8012732:	b083      	sub	sp, #12
 8012734:	af00      	add	r7, sp, #0
 8012736:	4603      	mov	r3, r0
 8012738:	71fb      	strb	r3, [r7, #7]
	en_WallEdge = en_type;
 801273a:	4a06      	ldr	r2, [pc, #24]	@ (8012754 <MOT_setWallEdgeType+0x24>)
 801273c:	79fb      	ldrb	r3, [r7, #7]
 801273e:	7013      	strb	r3, [r2, #0]
	bl_IsWallEdge = FALSE;			// 非検知
 8012740:	4b05      	ldr	r3, [pc, #20]	@ (8012758 <MOT_setWallEdgeType+0x28>)
 8012742:	2200      	movs	r2, #0
 8012744:	701a      	strb	r2, [r3, #0]

}
 8012746:	bf00      	nop
 8012748:	370c      	adds	r7, #12
 801274a:	46bd      	mov	sp, r7
 801274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012750:	4770      	bx	lr
 8012752:	bf00      	nop
 8012754:	20017be4 	.word	0x20017be4
 8012758:	20017be5 	.word	0x20017be5

0801275c <MOT_getWallEdgeType>:

enMOT_WALL_EDGE_TYPE MOT_getWallEdgeType( void )
{
 801275c:	b480      	push	{r7}
 801275e:	af00      	add	r7, sp, #0
	return en_WallEdge;
 8012760:	4b03      	ldr	r3, [pc, #12]	@ (8012770 <MOT_getWallEdgeType+0x14>)
 8012762:	781b      	ldrb	r3, [r3, #0]
}
 8012764:	4618      	mov	r0, r3
 8012766:	46bd      	mov	sp, r7
 8012768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276c:	4770      	bx	lr
 801276e:	bf00      	nop
 8012770:	20017be4 	.word	0x20017be4

08012774 <MOT_setWallEdge>:

void MOT_setWallEdge( bool bl_val )
{
 8012774:	b480      	push	{r7}
 8012776:	b083      	sub	sp, #12
 8012778:	af00      	add	r7, sp, #0
 801277a:	4603      	mov	r3, r0
 801277c:	71fb      	strb	r3, [r7, #7]
	bl_IsWallEdge = bl_val;
 801277e:	4a04      	ldr	r2, [pc, #16]	@ (8012790 <MOT_setWallEdge+0x1c>)
 8012780:	79fb      	ldrb	r3, [r7, #7]
 8012782:	7013      	strb	r3, [r2, #0]

}
 8012784:	bf00      	nop
 8012786:	370c      	adds	r7, #12
 8012788:	46bd      	mov	sp, r7
 801278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278e:	4770      	bx	lr
 8012790:	20017be5 	.word	0x20017be5

08012794 <MOT_setWallEdgeDist>:

bool MOT_setWallEdgeDist( void )
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
	float f_addDist;

	/* 壁の切れ目を検知していない */
	if( ( bl_IsWallEdge == FALSE ) || ( en_WallEdge == MOT_WALL_EDGE_NONE ) ){		// 壁切れ設定されていないか、検出していない場合は処理を抜ける
 801279a:	4b1b      	ldr	r3, [pc, #108]	@ (8012808 <MOT_setWallEdgeDist+0x74>)
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	f083 0301 	eor.w	r3, r3, #1
 80127a2:	b2db      	uxtb	r3, r3
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d103      	bne.n	80127b0 <MOT_setWallEdgeDist+0x1c>
 80127a8:	4b18      	ldr	r3, [pc, #96]	@ (801280c <MOT_setWallEdgeDist+0x78>)
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d101      	bne.n	80127b4 <MOT_setWallEdgeDist+0x20>
		return FALSE;
 80127b0:	2300      	movs	r3, #0
 80127b2:	e024      	b.n	80127fe <MOT_setWallEdgeDist+0x6a>
	}

	f_addDist = Get_NowDist() + MOT_WALL_EDGE_DIST;		// 旋回開始位置
 80127b4:	f7f3 fd86 	bl	80062c4 <Get_NowDist>
 80127b8:	eef0 7a40 	vmov.f32	s15, s0
 80127bc:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8012810 <MOT_setWallEdgeDist+0x7c>
 80127c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80127c4:	edc7 7a01 	vstr	s15, [r7, #4]

	/* 多く走る必要がある */
	if( f_addDist > st_Info.f_mot_dist ){
 80127c8:	4b12      	ldr	r3, [pc, #72]	@ (8012814 <MOT_setWallEdgeDist+0x80>)
 80127ca:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80127ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80127d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80127d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127da:	dd09      	ble.n	80127f0 <MOT_setWallEdgeDist+0x5c>

		f_WallEdgeAddDist = f_addDist - st_Info.f_mot_dist;	//壁切れの距離＋現在距離が本来の距離を超えた分をwall_adddistとして設定してるんだなぁだから設定だけすればいいのか
 80127dc:	4b0d      	ldr	r3, [pc, #52]	@ (8012814 <MOT_setWallEdgeDist+0x80>)
 80127de:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80127e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80127e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80127ea:	4b0b      	ldr	r3, [pc, #44]	@ (8012818 <MOT_setWallEdgeDist+0x84>)
 80127ec:	edc3 7a00 	vstr	s15, [r3]
/*	if( f_addDist < st_Info.f_dist){
		st_Info.f_dist = f_addDist;
	}
*/
	/* 壁の切れ目補正の変数を初期化 */
	en_WallEdge   = MOT_WALL_EDGE_NONE;		// 壁の切れ目タイプ
 80127f0:	4b06      	ldr	r3, [pc, #24]	@ (801280c <MOT_setWallEdgeDist+0x78>)
 80127f2:	2200      	movs	r2, #0
 80127f4:	701a      	strb	r2, [r3, #0]
	bl_IsWallEdge = FALSE;					// 壁の切れ目検知
 80127f6:	4b04      	ldr	r3, [pc, #16]	@ (8012808 <MOT_setWallEdgeDist+0x74>)
 80127f8:	2200      	movs	r2, #0
 80127fa:	701a      	strb	r2, [r3, #0]
	return TRUE;
 80127fc:	2301      	movs	r3, #1
}
 80127fe:	4618      	mov	r0, r3
 8012800:	3708      	adds	r7, #8
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}
 8012806:	bf00      	nop
 8012808:	20017be5 	.word	0x20017be5
 801280c:	20017be4 	.word	0x20017be4
 8012810:	3cf9db23 	.word	0x3cf9db23
 8012814:	20017b2c 	.word	0x20017b2c
 8012818:	20017be8 	.word	0x20017be8

0801281c <MOT_setWallEdgeDist_LoopWait>:
bool MOT_setWallEdgeDist_LoopWait( void )
{
 801281c:	b480      	push	{r7}
 801281e:	af00      	add	r7, sp, #0
//	SetLED(0x11);
	/* 壁の切れ目を検知していない */
	if( bl_IsWallEdge == FALSE ){		// 壁切れ設定されていないか、検出していない場合は処理を抜ける
 8012820:	4b08      	ldr	r3, [pc, #32]	@ (8012844 <MOT_setWallEdgeDist_LoopWait+0x28>)
 8012822:	781b      	ldrb	r3, [r3, #0]
 8012824:	f083 0301 	eor.w	r3, r3, #1
 8012828:	b2db      	uxtb	r3, r3
 801282a:	2b00      	cmp	r3, #0
 801282c:	d001      	beq.n	8012832 <MOT_setWallEdgeDist_LoopWait+0x16>

		return FALSE;
 801282e:	2300      	movs	r3, #0
 8012830:	e003      	b.n	801283a <MOT_setWallEdgeDist_LoopWait+0x1e>
	}

	f_WallEdgeAddDist = MOT_WALL_EDGE_DIST;		// 旋回開始位置
 8012832:	4b05      	ldr	r3, [pc, #20]	@ (8012848 <MOT_setWallEdgeDist_LoopWait+0x2c>)
 8012834:	4a05      	ldr	r2, [pc, #20]	@ (801284c <MOT_setWallEdgeDist_LoopWait+0x30>)
 8012836:	601a      	str	r2, [r3, #0]

	return TRUE;
 8012838:	2301      	movs	r3, #1
}
 801283a:	4618      	mov	r0, r3
 801283c:	46bd      	mov	sp, r7
 801283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012842:	4770      	bx	lr
 8012844:	20017be5 	.word	0x20017be5
 8012848:	20017be8 	.word	0x20017be8
 801284c:	3cf9db23 	.word	0x3cf9db23

08012850 <DIST_Front_Wall_correction>:

void DIST_Front_Wall_correction(void)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b0b8      	sub	sp, #224	@ 0xe0
 8012854:	af00      	add	r7, sp, #0
	stMOT_DATA	st_info;	//シーケンスデータ
	stCTRL_DATA	st_data;	//制御データ

	GYRO_staErrChkAngle();			// エラー検出開始
 8012856:	f7f7 f955 	bl	8009b04 <GYRO_staErrChkAngle>
	
	st_data.en_ctrl_type			= CTRL_FRONT_WALL;
 801285a:	230f      	movs	r3, #15
 801285c:	703b      	strb	r3, [r7, #0]
	st_data.f_ctrl_jerk			= 0;
 801285e:	f04f 0300 	mov.w	r3, #0
 8012862:	60bb      	str	r3, [r7, #8]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8012864:	f04f 0300 	mov.w	r3, #0
 8012868:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_nowAcc		= 0;
 801286a:	f04f 0300 	mov.w	r3, #0
 801286e:	60fb      	str	r3, [r7, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 8012870:	f04f 0300 	mov.w	r3, #0
 8012874:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_trgt			= 0;						// 目標速度
 8012876:	f04f 0300 	mov.w	r3, #0
 801287a:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowDist		= 0;						// 進んでいない
 801287c:	f04f 0300 	mov.w	r3, #0
 8012880:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_dist			= 0;						// 加速距離
 8012882:	f04f 0300 	mov.w	r3, #0
 8012886:	623b      	str	r3, [r7, #32]
//	st_data.f_ctrl_accAngleS		= 0;		// 角加速度
	st_data.f_ctrl_nowAccAngle		= 0;
 8012888:	f04f 0300 	mov.w	r3, #0
 801288c:	62bb      	str	r3, [r7, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= 0;
 801288e:	f04f 0300 	mov.w	r3, #0
 8012892:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 8012894:	f04f 0300 	mov.w	r3, #0
 8012898:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= 0;		// 目標角度
 801289a:	f04f 0300 	mov.w	r3, #0
 801289e:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 80128a0:	f04f 0300 	mov.w	r3, #0
 80128a4:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_angle			= 0;			// 目標角度
 80128a6:	f04f 0300 	mov.w	r3, #0
 80128aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 80128ac:	f04f 0300 	mov.w	r3, #0
 80128b0:	607b      	str	r3, [r7, #4]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 80128b2:	f7f3 fdc7 	bl	8006444 <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 80128b6:	463b      	mov	r3, r7
 80128b8:	4618      	mov	r0, r3
 80128ba:	f7f3 feb1 	bl	8006620 <CTRL_setData>
	DCM_staMotAll();									// モータON
 80128be:	f7f6 feed 	bl	800969c <DCM_staMotAll>
	while((DIST_getNowVal( DIST_SEN_R_FRONT )>(R_FRONT_REF+FRONT_WALL_MINUS+30))||(DIST_getNowVal( DIST_SEN_R_FRONT )<(R_FRONT_REF+FRONT_WALL_MINUS-30))
 80128c2:	e00f      	b.n	80128e4 <DIST_Front_Wall_correction+0x94>
		||(DIST_getNowVal( DIST_SEN_L_FRONT )>(L_FRONT_REF+FRONT_WALL_MINUS+30))||(DIST_getNowVal( DIST_SEN_L_FRONT )<(L_FRONT_REF+FRONT_WALL_MINUS-30))){
			if(EscapeWait > 0.8)break;
 80128c4:	4b2a      	ldr	r3, [pc, #168]	@ (8012970 <DIST_Front_Wall_correction+0x120>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	4618      	mov	r0, r3
 80128ca:	f7ed fe65 	bl	8000598 <__aeabi_f2d>
 80128ce:	a326      	add	r3, pc, #152	@ (adr r3, 8012968 <DIST_Front_Wall_correction+0x118>)
 80128d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d4:	f7ee f948 	bl	8000b68 <__aeabi_dcmpgt>
 80128d8:	4603      	mov	r3, r0
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d123      	bne.n	8012926 <DIST_Front_Wall_correction+0xd6>
			LL_mDelay(10);//volatile入れてないから回避用に入れてみる
 80128de:	200a      	movs	r0, #10
 80128e0:	f009 f8c4 	bl	801ba6c <LL_mDelay>
	while((DIST_getNowVal( DIST_SEN_R_FRONT )>(R_FRONT_REF+FRONT_WALL_MINUS+30))||(DIST_getNowVal( DIST_SEN_R_FRONT )<(R_FRONT_REF+FRONT_WALL_MINUS-30))
 80128e4:	2000      	movs	r0, #0
 80128e6:	f000 f93f 	bl	8012b68 <DIST_getNowVal>
 80128ea:	4603      	mov	r3, r0
		||(DIST_getNowVal( DIST_SEN_L_FRONT )>(L_FRONT_REF+FRONT_WALL_MINUS+30))||(DIST_getNowVal( DIST_SEN_L_FRONT )<(L_FRONT_REF+FRONT_WALL_MINUS-30))){
 80128ec:	f5b3 7f47 	cmp.w	r3, #796	@ 0x31c
 80128f0:	dae8      	bge.n	80128c4 <DIST_Front_Wall_correction+0x74>
	while((DIST_getNowVal( DIST_SEN_R_FRONT )>(R_FRONT_REF+FRONT_WALL_MINUS+30))||(DIST_getNowVal( DIST_SEN_R_FRONT )<(R_FRONT_REF+FRONT_WALL_MINUS-30))
 80128f2:	2000      	movs	r0, #0
 80128f4:	f000 f938 	bl	8012b68 <DIST_getNowVal>
 80128f8:	4603      	mov	r3, r0
 80128fa:	461a      	mov	r2, r3
 80128fc:	f240 23de 	movw	r3, #734	@ 0x2de
 8012900:	429a      	cmp	r2, r3
 8012902:	dddf      	ble.n	80128c4 <DIST_Front_Wall_correction+0x74>
		||(DIST_getNowVal( DIST_SEN_L_FRONT )>(L_FRONT_REF+FRONT_WALL_MINUS+30))||(DIST_getNowVal( DIST_SEN_L_FRONT )<(L_FRONT_REF+FRONT_WALL_MINUS-30))){
 8012904:	2001      	movs	r0, #1
 8012906:	f000 f92f 	bl	8012b68 <DIST_getNowVal>
 801290a:	4603      	mov	r3, r0
 801290c:	461a      	mov	r2, r3
 801290e:	f240 3339 	movw	r3, #825	@ 0x339
 8012912:	429a      	cmp	r2, r3
 8012914:	dcd6      	bgt.n	80128c4 <DIST_Front_Wall_correction+0x74>
 8012916:	2001      	movs	r0, #1
 8012918:	f000 f926 	bl	8012b68 <DIST_getNowVal>
 801291c:	4603      	mov	r3, r0
 801291e:	f5b3 7f3f 	cmp.w	r3, #764	@ 0x2fc
 8012922:	ddcf      	ble.n	80128c4 <DIST_Front_Wall_correction+0x74>
 8012924:	e000      	b.n	8012928 <DIST_Front_Wall_correction+0xd8>
			if(EscapeWait > 0.8)break;
 8012926:	bf00      	nop
	}
	LL_mDelay(50);
 8012928:	2032      	movs	r0, #50	@ 0x32
 801292a:	f009 f89f 	bl	801ba6c <LL_mDelay>
	CTRL_stop();			// 制御停止
 801292e:	f7f3 fd79 	bl	8006424 <CTRL_stop>
	DCM_brakeMot( DCM_R );		// ブレーキ
 8012932:	2000      	movs	r0, #0
 8012934:	f7f6 fe8e 	bl	8009654 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 8012938:	2001      	movs	r0, #1
 801293a:	f7f6 fe8b 	bl	8009654 <DCM_brakeMot>
	GYRO_endErrChkAngle();					// エラー検出終了
 801293e:	f7f7 f8f3 	bl	8009b28 <GYRO_endErrChkAngle>
	LL_mDelay(100);
 8012942:	2064      	movs	r0, #100	@ 0x64
 8012944:	f009 f892 	bl	801ba6c <LL_mDelay>
	f_MotNowSpeed = 0.0f;		//現在速度更新
 8012948:	4b0a      	ldr	r3, [pc, #40]	@ (8012974 <DIST_Front_Wall_correction+0x124>)
 801294a:	f04f 0200 	mov.w	r2, #0
 801294e:	601a      	str	r2, [r3, #0]

	CTRL_clrNowData();
 8012950:	f7f3 fde8 	bl	8006524 <CTRL_clrNowData>
	CTRL_clrAngleErrSum();
 8012954:	f7f3 fdbe 	bl	80064d4 <CTRL_clrAngleErrSum>
	CTRL_clrSpeedErrSum();
 8012958:	f7f3 fdd0 	bl	80064fc <CTRL_clrSpeedErrSum>
}
 801295c:	bf00      	nop
 801295e:	37e0      	adds	r7, #224	@ 0xe0
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}
 8012964:	f3af 8000 	nop.w
 8012968:	9999999a 	.word	0x9999999a
 801296c:	3fe99999 	.word	0x3fe99999
 8012970:	200003fc 	.word	0x200003fc
 8012974:	20017bcc 	.word	0x20017bcc

08012978 <BAT_Pol>:

uint16_t	us_BatLvAve = 4095;							// バッテリ平均値（AD変換の最大値で初期化）


void BAT_Pol( void )
{
 8012978:	b580      	push	{r7, lr}
 801297a:	af00      	add	r7, sp, #0
	static uint16_t 	us_batLv[5] = { 4095, 4095, 4095, 4095, 4095 };
	static uint8_t		i = 0;

	us_batLv[4] = us_batLv[3];
 801297c:	4b2d      	ldr	r3, [pc, #180]	@ (8012a34 <BAT_Pol+0xbc>)
 801297e:	88da      	ldrh	r2, [r3, #6]
 8012980:	4b2c      	ldr	r3, [pc, #176]	@ (8012a34 <BAT_Pol+0xbc>)
 8012982:	811a      	strh	r2, [r3, #8]
	us_batLv[3] = us_batLv[2];
 8012984:	4b2b      	ldr	r3, [pc, #172]	@ (8012a34 <BAT_Pol+0xbc>)
 8012986:	889a      	ldrh	r2, [r3, #4]
 8012988:	4b2a      	ldr	r3, [pc, #168]	@ (8012a34 <BAT_Pol+0xbc>)
 801298a:	80da      	strh	r2, [r3, #6]
	us_batLv[2] = us_batLv[1];
 801298c:	4b29      	ldr	r3, [pc, #164]	@ (8012a34 <BAT_Pol+0xbc>)
 801298e:	885a      	ldrh	r2, [r3, #2]
 8012990:	4b28      	ldr	r3, [pc, #160]	@ (8012a34 <BAT_Pol+0xbc>)
 8012992:	809a      	strh	r2, [r3, #4]
	us_batLv[1] = us_batLv[0];
 8012994:	4b27      	ldr	r3, [pc, #156]	@ (8012a34 <BAT_Pol+0xbc>)
 8012996:	881a      	ldrh	r2, [r3, #0]
 8012998:	4b26      	ldr	r3, [pc, #152]	@ (8012a34 <BAT_Pol+0xbc>)
 801299a:	805a      	strh	r2, [r3, #2]

	us_batLv[0] = GetBatVal();
 801299c:	f7ee ff52 	bl	8001844 <GetBatVal>
 80129a0:	4603      	mov	r3, r0
 80129a2:	461a      	mov	r2, r3
 80129a4:	4b23      	ldr	r3, [pc, #140]	@ (8012a34 <BAT_Pol+0xbc>)
 80129a6:	801a      	strh	r2, [r3, #0]

	us_BatLvAve = ( us_batLv[0] + us_batLv[1] + us_batLv[2] + us_batLv[3] + us_batLv[4] ) / 5;
 80129a8:	4b22      	ldr	r3, [pc, #136]	@ (8012a34 <BAT_Pol+0xbc>)
 80129aa:	881b      	ldrh	r3, [r3, #0]
 80129ac:	461a      	mov	r2, r3
 80129ae:	4b21      	ldr	r3, [pc, #132]	@ (8012a34 <BAT_Pol+0xbc>)
 80129b0:	885b      	ldrh	r3, [r3, #2]
 80129b2:	4413      	add	r3, r2
 80129b4:	4a1f      	ldr	r2, [pc, #124]	@ (8012a34 <BAT_Pol+0xbc>)
 80129b6:	8892      	ldrh	r2, [r2, #4]
 80129b8:	4413      	add	r3, r2
 80129ba:	4a1e      	ldr	r2, [pc, #120]	@ (8012a34 <BAT_Pol+0xbc>)
 80129bc:	88d2      	ldrh	r2, [r2, #6]
 80129be:	4413      	add	r3, r2
 80129c0:	4a1c      	ldr	r2, [pc, #112]	@ (8012a34 <BAT_Pol+0xbc>)
 80129c2:	8912      	ldrh	r2, [r2, #8]
 80129c4:	4413      	add	r3, r2
 80129c6:	4a1c      	ldr	r2, [pc, #112]	@ (8012a38 <BAT_Pol+0xc0>)
 80129c8:	fb82 1203 	smull	r1, r2, r2, r3
 80129cc:	1052      	asrs	r2, r2, #1
 80129ce:	17db      	asrs	r3, r3, #31
 80129d0:	1ad3      	subs	r3, r2, r3
 80129d2:	b29a      	uxth	r2, r3
 80129d4:	4b19      	ldr	r3, [pc, #100]	@ (8012a3c <BAT_Pol+0xc4>)
 80129d6:	801a      	strh	r2, [r3, #0]


	if( us_BatLvAve < BAT_LOW ) {
 80129d8:	4b18      	ldr	r3, [pc, #96]	@ (8012a3c <BAT_Pol+0xc4>)
 80129da:	881b      	ldrh	r3, [r3, #0]
 80129dc:	f640 22a9 	movw	r2, #2729	@ 0xaa9
 80129e0:	4293      	cmp	r3, r2
 80129e2:	d803      	bhi.n	80129ec <BAT_Pol+0x74>
		SetBatLED(0);
 80129e4:	2000      	movs	r0, #0
 80129e6:	f7ef fad1 	bl	8001f8c <SetBatLED>
		i++;
	}
	else{
		SetBatLED(1);
	}
}
 80129ea:	e021      	b.n	8012a30 <BAT_Pol+0xb8>
	else if( us_BatLvAve < BAT_GOOD ) {
 80129ec:	4b13      	ldr	r3, [pc, #76]	@ (8012a3c <BAT_Pol+0xc4>)
 80129ee:	881b      	ldrh	r3, [r3, #0]
 80129f0:	f640 32f3 	movw	r2, #3059	@ 0xbf3
 80129f4:	4293      	cmp	r3, r2
 80129f6:	d818      	bhi.n	8012a2a <BAT_Pol+0xb2>
		if( i>=100){
 80129f8:	4b11      	ldr	r3, [pc, #68]	@ (8012a40 <BAT_Pol+0xc8>)
 80129fa:	781b      	ldrb	r3, [r3, #0]
 80129fc:	2b63      	cmp	r3, #99	@ 0x63
 80129fe:	d906      	bls.n	8012a0e <BAT_Pol+0x96>
			SetBatLED(1);
 8012a00:	2001      	movs	r0, #1
 8012a02:	f7ef fac3 	bl	8001f8c <SetBatLED>
			i=0;
 8012a06:	4b0e      	ldr	r3, [pc, #56]	@ (8012a40 <BAT_Pol+0xc8>)
 8012a08:	2200      	movs	r2, #0
 8012a0a:	701a      	strb	r2, [r3, #0]
 8012a0c:	e006      	b.n	8012a1c <BAT_Pol+0xa4>
		else if(i>=50){
 8012a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8012a40 <BAT_Pol+0xc8>)
 8012a10:	781b      	ldrb	r3, [r3, #0]
 8012a12:	2b31      	cmp	r3, #49	@ 0x31
 8012a14:	d902      	bls.n	8012a1c <BAT_Pol+0xa4>
			SetBatLED(0);
 8012a16:	2000      	movs	r0, #0
 8012a18:	f7ef fab8 	bl	8001f8c <SetBatLED>
		i++;
 8012a1c:	4b08      	ldr	r3, [pc, #32]	@ (8012a40 <BAT_Pol+0xc8>)
 8012a1e:	781b      	ldrb	r3, [r3, #0]
 8012a20:	3301      	adds	r3, #1
 8012a22:	b2da      	uxtb	r2, r3
 8012a24:	4b06      	ldr	r3, [pc, #24]	@ (8012a40 <BAT_Pol+0xc8>)
 8012a26:	701a      	strb	r2, [r3, #0]
}
 8012a28:	e002      	b.n	8012a30 <BAT_Pol+0xb8>
		SetBatLED(1);
 8012a2a:	2001      	movs	r0, #1
 8012a2c:	f7ef faae 	bl	8001f8c <SetBatLED>
}
 8012a30:	bf00      	nop
 8012a32:	bd80      	pop	{r7, pc}
 8012a34:	20000010 	.word	0x20000010
 8012a38:	66666667 	.word	0x66666667
 8012a3c:	2000000e 	.word	0x2000000e
 8012a40:	20017bed 	.word	0x20017bed
 8012a44:	00000000 	.word	0x00000000

08012a48 <get_battLv>:

float get_battLv(void){
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	af00      	add	r7, sp, #0
	return (float)us_BatLvAve*(20.0+10.0)/10.0/4095.000*3.300;
 8012a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8012ac8 <get_battLv+0x80>)
 8012a4e:	881b      	ldrh	r3, [r3, #0]
 8012a50:	ee07 3a90 	vmov	s15, r3
 8012a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a58:	ee17 0a90 	vmov	r0, s15
 8012a5c:	f7ed fd9c 	bl	8000598 <__aeabi_f2d>
 8012a60:	f04f 0200 	mov.w	r2, #0
 8012a64:	4b19      	ldr	r3, [pc, #100]	@ (8012acc <get_battLv+0x84>)
 8012a66:	f7ed fdef 	bl	8000648 <__aeabi_dmul>
 8012a6a:	4602      	mov	r2, r0
 8012a6c:	460b      	mov	r3, r1
 8012a6e:	4610      	mov	r0, r2
 8012a70:	4619      	mov	r1, r3
 8012a72:	f04f 0200 	mov.w	r2, #0
 8012a76:	4b16      	ldr	r3, [pc, #88]	@ (8012ad0 <get_battLv+0x88>)
 8012a78:	f7ed ff10 	bl	800089c <__aeabi_ddiv>
 8012a7c:	4602      	mov	r2, r0
 8012a7e:	460b      	mov	r3, r1
 8012a80:	4610      	mov	r0, r2
 8012a82:	4619      	mov	r1, r3
 8012a84:	a30c      	add	r3, pc, #48	@ (adr r3, 8012ab8 <get_battLv+0x70>)
 8012a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a8a:	f7ed ff07 	bl	800089c <__aeabi_ddiv>
 8012a8e:	4602      	mov	r2, r0
 8012a90:	460b      	mov	r3, r1
 8012a92:	4610      	mov	r0, r2
 8012a94:	4619      	mov	r1, r3
 8012a96:	a30a      	add	r3, pc, #40	@ (adr r3, 8012ac0 <get_battLv+0x78>)
 8012a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a9c:	f7ed fdd4 	bl	8000648 <__aeabi_dmul>
 8012aa0:	4602      	mov	r2, r0
 8012aa2:	460b      	mov	r3, r1
 8012aa4:	4610      	mov	r0, r2
 8012aa6:	4619      	mov	r1, r3
 8012aa8:	f7ee f8c6 	bl	8000c38 <__aeabi_d2f>
 8012aac:	4603      	mov	r3, r0
 8012aae:	ee07 3a90 	vmov	s15, r3
}
 8012ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8012ab6:	bd80      	pop	{r7, pc}
 8012ab8:	00000000 	.word	0x00000000
 8012abc:	40affe00 	.word	0x40affe00
 8012ac0:	66666666 	.word	0x66666666
 8012ac4:	400a6666 	.word	0x400a6666
 8012ac8:	2000000e 	.word	0x2000000e
 8012acc:	403e0000 	.word	0x403e0000
 8012ad0:	40240000 	.word	0x40240000

08012ad4 <DIST_init>:
stDIST_SEN		st_sen[DIST_SEN_NUM];					// 距離センサ
stDIST_FRONT_SEN		st_senF[DIST_SEN_NUM];


void DIST_init( void )
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	af00      	add	r7, sp, #0
	memset( st_sen, 0, sizeof(st_sen) );				// 距離センサ(全センサ共通)
 8012ad8:	2238      	movs	r2, #56	@ 0x38
 8012ada:	2100      	movs	r1, #0
 8012adc:	4820      	ldr	r0, [pc, #128]	@ (8012b60 <DIST_init+0x8c>)
 8012ade:	f00b fae5 	bl	801e0ac <memset>
	st_sen[DIST_SEN_R_FRONT].s_ref       = R_FRONT_REF;
 8012ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8012b60 <DIST_init+0x8c>)
 8012ae4:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 8012ae8:	80da      	strh	r2, [r3, #6]
	st_sen[DIST_SEN_L_FRONT].s_ref       = L_FRONT_REF;
 8012aea:	4b1d      	ldr	r3, [pc, #116]	@ (8012b60 <DIST_init+0x8c>)
 8012aec:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012af0:	829a      	strh	r2, [r3, #20]
	st_sen[DIST_SEN_R_SIDE].s_ref        = R_SIDE_REF;
 8012af2:	4b1b      	ldr	r3, [pc, #108]	@ (8012b60 <DIST_init+0x8c>)
 8012af4:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8012af8:	845a      	strh	r2, [r3, #34]	@ 0x22
	st_sen[DIST_SEN_L_SIDE].s_ref        = L_SIDE_REF;
 8012afa:	4b19      	ldr	r3, [pc, #100]	@ (8012b60 <DIST_init+0x8c>)
 8012afc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8012b00:	861a      	strh	r2, [r3, #48]	@ 0x30
	st_sen[DIST_SEN_R_FRONT].s_limit     = R_FRONT_WALL;
 8012b02:	4b17      	ldr	r3, [pc, #92]	@ (8012b60 <DIST_init+0x8c>)
 8012b04:	2255      	movs	r2, #85	@ 0x55
 8012b06:	809a      	strh	r2, [r3, #4]
	st_sen[DIST_SEN_L_FRONT].s_limit     = L_FRONT_WALL;
 8012b08:	4b15      	ldr	r3, [pc, #84]	@ (8012b60 <DIST_init+0x8c>)
 8012b0a:	225f      	movs	r2, #95	@ 0x5f
 8012b0c:	825a      	strh	r2, [r3, #18]
	st_sen[DIST_SEN_R_SIDE].s_limit      = R_SIDE_WALL;
 8012b0e:	4b14      	ldr	r3, [pc, #80]	@ (8012b60 <DIST_init+0x8c>)
 8012b10:	226e      	movs	r2, #110	@ 0x6e
 8012b12:	841a      	strh	r2, [r3, #32]
	st_sen[DIST_SEN_L_SIDE].s_limit      = L_SIDE_WALL;
 8012b14:	4b12      	ldr	r3, [pc, #72]	@ (8012b60 <DIST_init+0x8c>)
 8012b16:	2282      	movs	r2, #130	@ 0x82
 8012b18:	85da      	strh	r2, [r3, #46]	@ 0x2e
	st_senF[DIST_SEN_R_FRONT].s_skewErr1	= R_FRONT_SKEW_ERR1;
 8012b1a:	4b12      	ldr	r3, [pc, #72]	@ (8012b64 <DIST_init+0x90>)
 8012b1c:	2250      	movs	r2, #80	@ 0x50
 8012b1e:	805a      	strh	r2, [r3, #2]
	st_senF[DIST_SEN_L_FRONT].s_skewErr1	= L_FRONT_SKEW_ERR1;
 8012b20:	4b10      	ldr	r3, [pc, #64]	@ (8012b64 <DIST_init+0x90>)
 8012b22:	2246      	movs	r2, #70	@ 0x46
 8012b24:	815a      	strh	r2, [r3, #10]
	st_senF[DIST_SEN_R_FRONT].s_skewErr2	= R_FRONT_SKEW_ERR2;
 8012b26:	4b0f      	ldr	r3, [pc, #60]	@ (8012b64 <DIST_init+0x90>)
 8012b28:	22c0      	movs	r2, #192	@ 0xc0
 8012b2a:	809a      	strh	r2, [r3, #4]
	st_senF[DIST_SEN_L_FRONT].s_skewErr2	= L_FRONT_SKEW_ERR2;
 8012b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8012b64 <DIST_init+0x90>)
 8012b2e:	22a0      	movs	r2, #160	@ 0xa0
 8012b30:	819a      	strh	r2, [r3, #12]
	st_senF[DIST_SEN_R_FRONT].s_skewErr3	= R_FRONT_SKEW_ERR3;
 8012b32:	4b0c      	ldr	r3, [pc, #48]	@ (8012b64 <DIST_init+0x90>)
 8012b34:	22fa      	movs	r2, #250	@ 0xfa
 8012b36:	80da      	strh	r2, [r3, #6]
	st_senF[DIST_SEN_L_FRONT].s_skewErr3	= L_FRONT_SKEW_ERR3;
 8012b38:	4b0a      	ldr	r3, [pc, #40]	@ (8012b64 <DIST_init+0x90>)
 8012b3a:	22fa      	movs	r2, #250	@ 0xfa
 8012b3c:	81da      	strh	r2, [r3, #14]
	st_sen[DIST_SEN_R_FRONT].s_noCtrl = R_FRONT_NOCTRL;
 8012b3e:	4b08      	ldr	r3, [pc, #32]	@ (8012b60 <DIST_init+0x8c>)
 8012b40:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012b44:	819a      	strh	r2, [r3, #12]
	st_sen[DIST_SEN_L_FRONT].s_noCtrl = L_FRONT_NOCTRL;
 8012b46:	4b06      	ldr	r3, [pc, #24]	@ (8012b60 <DIST_init+0x8c>)
 8012b48:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8012b4c:	835a      	strh	r2, [r3, #26]
	st_sen[DIST_SEN_R_FRONT].s_ctrl = R_FRONT_CTRL;
 8012b4e:	4b04      	ldr	r3, [pc, #16]	@ (8012b60 <DIST_init+0x8c>)
 8012b50:	22a0      	movs	r2, #160	@ 0xa0
 8012b52:	815a      	strh	r2, [r3, #10]
	st_sen[DIST_SEN_L_FRONT].s_ctrl = L_FRONT_CTRL;
 8012b54:	4b02      	ldr	r3, [pc, #8]	@ (8012b60 <DIST_init+0x8c>)
 8012b56:	22c8      	movs	r2, #200	@ 0xc8
 8012b58:	831a      	strh	r2, [r3, #24]

}
 8012b5a:	bf00      	nop
 8012b5c:	bd80      	pop	{r7, pc}
 8012b5e:	bf00      	nop
 8012b60:	20017bf0 	.word	0x20017bf0
 8012b64:	20017c28 	.word	0x20017c28

08012b68 <DIST_getNowVal>:

int16_t DIST_getNowVal( enDIST_SEN_ID en_id )
{
 8012b68:	b480      	push	{r7}
 8012b6a:	b083      	sub	sp, #12
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	4603      	mov	r3, r0
 8012b70:	71fb      	strb	r3, [r7, #7]
	return st_sen[en_id].s_now;
 8012b72:	79fa      	ldrb	r2, [r7, #7]
 8012b74:	4906      	ldr	r1, [pc, #24]	@ (8012b90 <DIST_getNowVal+0x28>)
 8012b76:	4613      	mov	r3, r2
 8012b78:	00db      	lsls	r3, r3, #3
 8012b7a:	1a9b      	subs	r3, r3, r2
 8012b7c:	005b      	lsls	r3, r3, #1
 8012b7e:	440b      	add	r3, r1
 8012b80:	881b      	ldrh	r3, [r3, #0]
 8012b82:	b21b      	sxth	r3, r3
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	370c      	adds	r7, #12
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8e:	4770      	bx	lr
 8012b90:	20017bf0 	.word	0x20017bf0
 8012b94:	00000000 	.word	0x00000000

08012b98 <DIST_getErr>:


void DIST_getErr( int32_t* p_err )
{
 8012b98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8012b9c:	b084      	sub	sp, #16
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	6078      	str	r0, [r7, #4]
	volatile int16_t	s_threshold_R = 0;		// 右センサの閾値
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	81bb      	strh	r3, [r7, #12]
	volatile int16_t	s_threshold_L = 0;		// 左センサの閾値
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	817b      	strh	r3, [r7, #10]
	/* ---------- */
	/*  右壁制御  */
	/* ---------- */
	/* 壁の切れ目対策 */
	// 急激にセンサの値が変化した場合は、壁の有無の基準値を閾値に変更する
	s_temp = st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_old;
 8012baa:	4ba5      	ldr	r3, [pc, #660]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012bac:	8b9a      	ldrh	r2, [r3, #28]
 8012bae:	4ba4      	ldr	r3, [pc, #656]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012bb0:	8bdb      	ldrh	r3, [r3, #30]
 8012bb2:	1ad3      	subs	r3, r2, r3
 8012bb4:	b29b      	uxth	r3, r3
 8012bb6:	81fb      	strh	r3, [r7, #14]
	if( ( s_temp < -1 * DIST_NO_WALL_DIV_FILTER ) || ( DIST_NO_WALL_DIV_FILTER < s_temp )
 8012bb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012bbc:	f113 0f19 	cmn.w	r3, #25
 8012bc0:	db03      	blt.n	8012bca <DIST_getErr+0x32>
 8012bc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012bc6:	2b19      	cmp	r3, #25
 8012bc8:	dd06      	ble.n	8012bd8 <DIST_getErr+0x40>
	){
		s_threshold_R = st_sen[DIST_SEN_R_SIDE].s_ref + DIST_REF_UP;		// 基準値＋αを壁の存在する閾値にする
 8012bca:	4b9d      	ldr	r3, [pc, #628]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012bcc:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012bce:	3323      	adds	r3, #35	@ 0x23
 8012bd0:	b29b      	uxth	r3, r3
 8012bd2:	b21b      	sxth	r3, r3
 8012bd4:	81bb      	strh	r3, [r7, #12]
 8012bd6:	e003      	b.n	8012be0 <DIST_getErr+0x48>
	}
	else{
		s_threshold_R = st_sen[DIST_SEN_R_SIDE].s_limit;		// 通常通り
 8012bd8:	4b99      	ldr	r3, [pc, #612]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012bda:	8c1b      	ldrh	r3, [r3, #32]
 8012bdc:	b21b      	sxth	r3, r3
 8012bde:	81bb      	strh	r3, [r7, #12]
	/* ---------- */
	/*  左壁制御  */
	/* ---------- */
	/* 壁の切れ目対策 */
	// 急激にセンサの値が変化した場合は、壁の有無の基準値を閾値に変更する
	s_temp = st_sen[DIST_SEN_L_SIDE].s_now - st_sen[DIST_SEN_L_SIDE].s_old;
 8012be0:	4b97      	ldr	r3, [pc, #604]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012be2:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012be4:	4b96      	ldr	r3, [pc, #600]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012be6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012be8:	1ad3      	subs	r3, r2, r3
 8012bea:	b29b      	uxth	r3, r3
 8012bec:	81fb      	strh	r3, [r7, #14]
	if( ( s_temp < -1 * DIST_NO_WALL_DIV_FILTER ) || ( DIST_NO_WALL_DIV_FILTER < s_temp )
 8012bee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012bf2:	f113 0f19 	cmn.w	r3, #25
 8012bf6:	db03      	blt.n	8012c00 <DIST_getErr+0x68>
 8012bf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012bfc:	2b19      	cmp	r3, #25
 8012bfe:	dd06      	ble.n	8012c0e <DIST_getErr+0x76>
	){
		s_threshold_L = st_sen[DIST_SEN_L_SIDE].s_ref + DIST_REF_UP;		// 基準値＋αを壁の存在する閾値にする
 8012c00:	4b8f      	ldr	r3, [pc, #572]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c02:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8012c04:	3323      	adds	r3, #35	@ 0x23
 8012c06:	b29b      	uxth	r3, r3
 8012c08:	b21b      	sxth	r3, r3
 8012c0a:	817b      	strh	r3, [r7, #10]
 8012c0c:	e003      	b.n	8012c16 <DIST_getErr+0x7e>
	}
	else{
		s_threshold_L = st_sen[DIST_SEN_L_SIDE].s_limit;		// 通常通り
 8012c0e:	4b8c      	ldr	r3, [pc, #560]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8012c12:	b21b      	sxth	r3, r3
 8012c14:	817b      	strh	r3, [r7, #10]
	}

	/* ------------ */
	/*  制御値算出  */
	/* ------------ */
	*p_err = 0;		// クリア
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2200      	movs	r2, #0
 8012c1a:	601a      	str	r2, [r3, #0]

	/* 前壁がものすごく近い時 */
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_noCtrl ) &&
 8012c1c:	4b88      	ldr	r3, [pc, #544]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c1e:	881a      	ldrh	r2, [r3, #0]
 8012c20:	4b87      	ldr	r3, [pc, #540]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c22:	899b      	ldrh	r3, [r3, #12]
 8012c24:	429a      	cmp	r2, r3
 8012c26:	d909      	bls.n	8012c3c <DIST_getErr+0xa4>
		( st_sen[DIST_SEN_L_FRONT].s_now > st_sen[DIST_SEN_L_FRONT].s_noCtrl )
 8012c28:	4b85      	ldr	r3, [pc, #532]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c2a:	89da      	ldrh	r2, [r3, #14]
 8012c2c:	4b84      	ldr	r3, [pc, #528]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c2e:	8b5b      	ldrh	r3, [r3, #26]
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_noCtrl ) &&
 8012c30:	429a      	cmp	r2, r3
 8012c32:	d903      	bls.n	8012c3c <DIST_getErr+0xa4>
	){
//		printf("[Val]%6d 前壁がものすごい近い 	\n\r", *p_err);
		*p_err = 0;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2200      	movs	r2, #0
 8012c38:	601a      	str	r2, [r3, #0]
 8012c3a:	e05a      	b.n	8012cf2 <DIST_getErr+0x15a>
	}
	/* 前壁 */
	else if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_ctrl ) &&
 8012c3c:	4b80      	ldr	r3, [pc, #512]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c3e:	881a      	ldrh	r2, [r3, #0]
 8012c40:	4b7f      	ldr	r3, [pc, #508]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c42:	895b      	ldrh	r3, [r3, #10]
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d915      	bls.n	8012c74 <DIST_getErr+0xdc>
		( st_sen[DIST_SEN_L_FRONT].s_now > st_sen[DIST_SEN_L_FRONT].s_ctrl )
 8012c48:	4b7d      	ldr	r3, [pc, #500]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c4a:	89da      	ldrh	r2, [r3, #14]
 8012c4c:	4b7c      	ldr	r3, [pc, #496]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c4e:	8b1b      	ldrh	r3, [r3, #24]
	else if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_ctrl ) &&
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d90f      	bls.n	8012c74 <DIST_getErr+0xdc>
	){
		*p_err = ( st_sen[DIST_SEN_L_FRONT].s_now - st_sen[DIST_SEN_L_FRONT].s_ref ) -
 8012c54:	4b7a      	ldr	r3, [pc, #488]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c56:	89db      	ldrh	r3, [r3, #14]
 8012c58:	461a      	mov	r2, r3
 8012c5a:	4b79      	ldr	r3, [pc, #484]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c5c:	8a9b      	ldrh	r3, [r3, #20]
 8012c5e:	1ad2      	subs	r2, r2, r3
				 ( st_sen[DIST_SEN_R_FRONT].s_now - st_sen[DIST_SEN_R_FRONT].s_ref );
 8012c60:	4b77      	ldr	r3, [pc, #476]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c62:	881b      	ldrh	r3, [r3, #0]
 8012c64:	4619      	mov	r1, r3
 8012c66:	4b76      	ldr	r3, [pc, #472]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c68:	88db      	ldrh	r3, [r3, #6]
 8012c6a:	1acb      	subs	r3, r1, r3
		*p_err = ( st_sen[DIST_SEN_L_FRONT].s_now - st_sen[DIST_SEN_L_FRONT].s_ref ) -
 8012c6c:	1ad2      	subs	r2, r2, r3
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	601a      	str	r2, [r3, #0]
 8012c72:	e03e      	b.n	8012cf2 <DIST_getErr+0x15a>
//		printf("[Val]%6d 前壁制御 	\n\r", *p_err);
	}
	/* 右壁と左壁あり */
	else if( ( s_threshold_R < st_sen[DIST_SEN_R_SIDE].s_now ) && ( s_threshold_L < st_sen[DIST_SEN_L_SIDE].s_now )
 8012c74:	89bb      	ldrh	r3, [r7, #12]
 8012c76:	b21b      	sxth	r3, r3
 8012c78:	461a      	mov	r2, r3
 8012c7a:	4b71      	ldr	r3, [pc, #452]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c7c:	8b9b      	ldrh	r3, [r3, #28]
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	da16      	bge.n	8012cb0 <DIST_getErr+0x118>
 8012c82:	897b      	ldrh	r3, [r7, #10]
 8012c84:	b21b      	sxth	r3, r3
 8012c86:	461a      	mov	r2, r3
 8012c88:	4b6d      	ldr	r3, [pc, #436]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	da0f      	bge.n	8012cb0 <DIST_getErr+0x118>
	){
		*p_err = ( st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_ref ) +
 8012c90:	4b6b      	ldr	r3, [pc, #428]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c92:	8b9b      	ldrh	r3, [r3, #28]
 8012c94:	461a      	mov	r2, r3
 8012c96:	4b6a      	ldr	r3, [pc, #424]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c98:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012c9a:	1ad2      	subs	r2, r2, r3
				 ( st_sen[DIST_SEN_L_SIDE].s_ref - st_sen[DIST_SEN_L_SIDE].s_now );
 8012c9c:	4b68      	ldr	r3, [pc, #416]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012c9e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8012ca0:	4619      	mov	r1, r3
 8012ca2:	4b67      	ldr	r3, [pc, #412]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012ca6:	1acb      	subs	r3, r1, r3
		*p_err = ( st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_ref ) +
 8012ca8:	441a      	add	r2, r3
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	601a      	str	r2, [r3, #0]
 8012cae:	e020      	b.n	8012cf2 <DIST_getErr+0x15a>
//		printf("[Val]%6d 両壁制御 	\n\r", *p_err);
	}
	/* 右壁あり */
	else if( s_threshold_R < st_sen[DIST_SEN_R_SIDE].s_now ){
 8012cb0:	89bb      	ldrh	r3, [r7, #12]
 8012cb2:	b21b      	sxth	r3, r3
 8012cb4:	461a      	mov	r2, r3
 8012cb6:	4b62      	ldr	r3, [pc, #392]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012cb8:	8b9b      	ldrh	r3, [r3, #28]
 8012cba:	429a      	cmp	r2, r3
 8012cbc:	da09      	bge.n	8012cd2 <DIST_getErr+0x13a>
		*p_err = ( st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_ref ) * 2;
 8012cbe:	4b60      	ldr	r3, [pc, #384]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012cc0:	8b9b      	ldrh	r3, [r3, #28]
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	4b5e      	ldr	r3, [pc, #376]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012cc6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012cc8:	1ad3      	subs	r3, r2, r3
 8012cca:	005a      	lsls	r2, r3, #1
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	601a      	str	r2, [r3, #0]
 8012cd0:	e00f      	b.n	8012cf2 <DIST_getErr+0x15a>
//		printf("[Val]%6d 右壁制御 	\n\r", *p_err);
	}
	/* 左壁あり */
	else if( s_threshold_L < st_sen[DIST_SEN_L_SIDE].s_now ){
 8012cd2:	897b      	ldrh	r3, [r7, #10]
 8012cd4:	b21b      	sxth	r3, r3
 8012cd6:	461a      	mov	r2, r3
 8012cd8:	4b59      	ldr	r3, [pc, #356]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	da08      	bge.n	8012cf2 <DIST_getErr+0x15a>
		*p_err = ( st_sen[DIST_SEN_L_SIDE].s_ref - st_sen[DIST_SEN_L_SIDE].s_now ) * 2;
 8012ce0:	4b57      	ldr	r3, [pc, #348]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012ce2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8012ce4:	461a      	mov	r2, r3
 8012ce6:	4b56      	ldr	r3, [pc, #344]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012cea:	1ad3      	subs	r3, r2, r3
 8012cec:	005a      	lsls	r2, r3, #1
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	601a      	str	r2, [r3, #0]
//		printf("[Val]%6d 左壁制御 	\n\r", *p_err);
	}

	if((st_sen[DIST_SEN_L_FRONT].s_now >st_sen[DIST_SEN_L_FRONT].s_limit/0.7)&&
 8012cf2:	4b53      	ldr	r3, [pc, #332]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012cf4:	89db      	ldrh	r3, [r3, #14]
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f7ed fc3c 	bl	8000574 <__aeabi_i2d>
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	460d      	mov	r5, r1
 8012d00:	4b4f      	ldr	r3, [pc, #316]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012d02:	8a5b      	ldrh	r3, [r3, #18]
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7ed fc35 	bl	8000574 <__aeabi_i2d>
 8012d0a:	a34b      	add	r3, pc, #300	@ (adr r3, 8012e38 <DIST_getErr+0x2a0>)
 8012d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d10:	f7ed fdc4 	bl	800089c <__aeabi_ddiv>
 8012d14:	4602      	mov	r2, r0
 8012d16:	460b      	mov	r3, r1
 8012d18:	4620      	mov	r0, r4
 8012d1a:	4629      	mov	r1, r5
 8012d1c:	f7ed ff24 	bl	8000b68 <__aeabi_dcmpgt>
 8012d20:	4603      	mov	r3, r0
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d051      	beq.n	8012dca <DIST_getErr+0x232>
		(st_sen[DIST_SEN_R_FRONT].s_now <st_sen[DIST_SEN_R_FRONT].s_limit/0.7)){
 8012d26:	4b46      	ldr	r3, [pc, #280]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012d28:	881b      	ldrh	r3, [r3, #0]
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7ed fc22 	bl	8000574 <__aeabi_i2d>
 8012d30:	4604      	mov	r4, r0
 8012d32:	460d      	mov	r5, r1
 8012d34:	4b42      	ldr	r3, [pc, #264]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012d36:	889b      	ldrh	r3, [r3, #4]
 8012d38:	4618      	mov	r0, r3
 8012d3a:	f7ed fc1b 	bl	8000574 <__aeabi_i2d>
 8012d3e:	a33e      	add	r3, pc, #248	@ (adr r3, 8012e38 <DIST_getErr+0x2a0>)
 8012d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d44:	f7ed fdaa 	bl	800089c <__aeabi_ddiv>
 8012d48:	4602      	mov	r2, r0
 8012d4a:	460b      	mov	r3, r1
	if((st_sen[DIST_SEN_L_FRONT].s_now >st_sen[DIST_SEN_L_FRONT].s_limit/0.7)&&
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	4629      	mov	r1, r5
 8012d50:	f7ed feec 	bl	8000b2c <__aeabi_dcmplt>
 8012d54:	4603      	mov	r3, r0
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d037      	beq.n	8012dca <DIST_getErr+0x232>
			*p_err += 2*(st_sen[DIST_SEN_L_FRONT].s_limit/0.7-st_sen[DIST_SEN_L_FRONT].s_now);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7ed fc08 	bl	8000574 <__aeabi_i2d>
 8012d64:	4604      	mov	r4, r0
 8012d66:	460d      	mov	r5, r1
 8012d68:	4b35      	ldr	r3, [pc, #212]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012d6a:	8a5b      	ldrh	r3, [r3, #18]
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	f7ed fc01 	bl	8000574 <__aeabi_i2d>
 8012d72:	a331      	add	r3, pc, #196	@ (adr r3, 8012e38 <DIST_getErr+0x2a0>)
 8012d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d78:	f7ed fd90 	bl	800089c <__aeabi_ddiv>
 8012d7c:	4602      	mov	r2, r0
 8012d7e:	460b      	mov	r3, r1
 8012d80:	4690      	mov	r8, r2
 8012d82:	4699      	mov	r9, r3
 8012d84:	4b2e      	ldr	r3, [pc, #184]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012d86:	89db      	ldrh	r3, [r3, #14]
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f7ed fbf3 	bl	8000574 <__aeabi_i2d>
 8012d8e:	4602      	mov	r2, r0
 8012d90:	460b      	mov	r3, r1
 8012d92:	4640      	mov	r0, r8
 8012d94:	4649      	mov	r1, r9
 8012d96:	f7ed fa9f 	bl	80002d8 <__aeabi_dsub>
 8012d9a:	4602      	mov	r2, r0
 8012d9c:	460b      	mov	r3, r1
 8012d9e:	4610      	mov	r0, r2
 8012da0:	4619      	mov	r1, r3
 8012da2:	4602      	mov	r2, r0
 8012da4:	460b      	mov	r3, r1
 8012da6:	f7ed fa99 	bl	80002dc <__adddf3>
 8012daa:	4602      	mov	r2, r0
 8012dac:	460b      	mov	r3, r1
 8012dae:	4620      	mov	r0, r4
 8012db0:	4629      	mov	r1, r5
 8012db2:	f7ed fa93 	bl	80002dc <__adddf3>
 8012db6:	4602      	mov	r2, r0
 8012db8:	460b      	mov	r3, r1
 8012dba:	4610      	mov	r0, r2
 8012dbc:	4619      	mov	r1, r3
 8012dbe:	f7ed fef3 	bl	8000ba8 <__aeabi_d2iz>
 8012dc2:	4602      	mov	r2, r0
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	601a      	str	r2, [r3, #0]
	}else if((st_sen[DIST_SEN_R_FRONT].s_now >st_sen[DIST_SEN_R_FRONT].s_limit/0.7)&&
		(st_sen[DIST_SEN_L_FRONT].s_now <st_sen[DIST_SEN_L_FRONT].s_limit/0.7)){
			*p_err += 2*(st_sen[DIST_SEN_R_FRONT].s_now-st_sen[DIST_SEN_R_FRONT].s_limit/0.7);
	}

}
 8012dc8:	e071      	b.n	8012eae <DIST_getErr+0x316>
	}else if((st_sen[DIST_SEN_R_FRONT].s_now >st_sen[DIST_SEN_R_FRONT].s_limit/0.7)&&
 8012dca:	4b1d      	ldr	r3, [pc, #116]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012dcc:	881b      	ldrh	r3, [r3, #0]
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7ed fbd0 	bl	8000574 <__aeabi_i2d>
 8012dd4:	4604      	mov	r4, r0
 8012dd6:	460d      	mov	r5, r1
 8012dd8:	4b19      	ldr	r3, [pc, #100]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012dda:	889b      	ldrh	r3, [r3, #4]
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f7ed fbc9 	bl	8000574 <__aeabi_i2d>
 8012de2:	a315      	add	r3, pc, #84	@ (adr r3, 8012e38 <DIST_getErr+0x2a0>)
 8012de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de8:	f7ed fd58 	bl	800089c <__aeabi_ddiv>
 8012dec:	4602      	mov	r2, r0
 8012dee:	460b      	mov	r3, r1
 8012df0:	4620      	mov	r0, r4
 8012df2:	4629      	mov	r1, r5
 8012df4:	f7ed feb8 	bl	8000b68 <__aeabi_dcmpgt>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d100      	bne.n	8012e00 <DIST_getErr+0x268>
}
 8012dfe:	e056      	b.n	8012eae <DIST_getErr+0x316>
		(st_sen[DIST_SEN_L_FRONT].s_now <st_sen[DIST_SEN_L_FRONT].s_limit/0.7)){
 8012e00:	4b0f      	ldr	r3, [pc, #60]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012e02:	89db      	ldrh	r3, [r3, #14]
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7ed fbb5 	bl	8000574 <__aeabi_i2d>
 8012e0a:	4604      	mov	r4, r0
 8012e0c:	460d      	mov	r5, r1
 8012e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8012e40 <DIST_getErr+0x2a8>)
 8012e10:	8a5b      	ldrh	r3, [r3, #18]
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7ed fbae 	bl	8000574 <__aeabi_i2d>
 8012e18:	a307      	add	r3, pc, #28	@ (adr r3, 8012e38 <DIST_getErr+0x2a0>)
 8012e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e1e:	f7ed fd3d 	bl	800089c <__aeabi_ddiv>
 8012e22:	4602      	mov	r2, r0
 8012e24:	460b      	mov	r3, r1
	}else if((st_sen[DIST_SEN_R_FRONT].s_now >st_sen[DIST_SEN_R_FRONT].s_limit/0.7)&&
 8012e26:	4620      	mov	r0, r4
 8012e28:	4629      	mov	r1, r5
 8012e2a:	f7ed fe7f 	bl	8000b2c <__aeabi_dcmplt>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d107      	bne.n	8012e44 <DIST_getErr+0x2ac>
}
 8012e34:	e03b      	b.n	8012eae <DIST_getErr+0x316>
 8012e36:	bf00      	nop
 8012e38:	66666666 	.word	0x66666666
 8012e3c:	3fe66666 	.word	0x3fe66666
 8012e40:	20017bf0 	.word	0x20017bf0
			*p_err += 2*(st_sen[DIST_SEN_R_FRONT].s_now-st_sen[DIST_SEN_R_FRONT].s_limit/0.7);
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	4618      	mov	r0, r3
 8012e4a:	f7ed fb93 	bl	8000574 <__aeabi_i2d>
 8012e4e:	4604      	mov	r4, r0
 8012e50:	460d      	mov	r5, r1
 8012e52:	4b1b      	ldr	r3, [pc, #108]	@ (8012ec0 <DIST_getErr+0x328>)
 8012e54:	881b      	ldrh	r3, [r3, #0]
 8012e56:	4618      	mov	r0, r3
 8012e58:	f7ed fb8c 	bl	8000574 <__aeabi_i2d>
 8012e5c:	4680      	mov	r8, r0
 8012e5e:	4689      	mov	r9, r1
 8012e60:	4b17      	ldr	r3, [pc, #92]	@ (8012ec0 <DIST_getErr+0x328>)
 8012e62:	889b      	ldrh	r3, [r3, #4]
 8012e64:	4618      	mov	r0, r3
 8012e66:	f7ed fb85 	bl	8000574 <__aeabi_i2d>
 8012e6a:	a313      	add	r3, pc, #76	@ (adr r3, 8012eb8 <DIST_getErr+0x320>)
 8012e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e70:	f7ed fd14 	bl	800089c <__aeabi_ddiv>
 8012e74:	4602      	mov	r2, r0
 8012e76:	460b      	mov	r3, r1
 8012e78:	4640      	mov	r0, r8
 8012e7a:	4649      	mov	r1, r9
 8012e7c:	f7ed fa2c 	bl	80002d8 <__aeabi_dsub>
 8012e80:	4602      	mov	r2, r0
 8012e82:	460b      	mov	r3, r1
 8012e84:	4610      	mov	r0, r2
 8012e86:	4619      	mov	r1, r3
 8012e88:	4602      	mov	r2, r0
 8012e8a:	460b      	mov	r3, r1
 8012e8c:	f7ed fa26 	bl	80002dc <__adddf3>
 8012e90:	4602      	mov	r2, r0
 8012e92:	460b      	mov	r3, r1
 8012e94:	4620      	mov	r0, r4
 8012e96:	4629      	mov	r1, r5
 8012e98:	f7ed fa20 	bl	80002dc <__adddf3>
 8012e9c:	4602      	mov	r2, r0
 8012e9e:	460b      	mov	r3, r1
 8012ea0:	4610      	mov	r0, r2
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	f7ed fe80 	bl	8000ba8 <__aeabi_d2iz>
 8012ea8:	4602      	mov	r2, r0
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	601a      	str	r2, [r3, #0]
}
 8012eae:	bf00      	nop
 8012eb0:	3710      	adds	r7, #16
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8012eb8:	66666666 	.word	0x66666666
 8012ebc:	3fe66666 	.word	0x3fe66666
 8012ec0:	20017bf0 	.word	0x20017bf0

08012ec4 <DIST_getErrSkew>:

void DIST_getErrSkew( int32_t* p_err )
{
 8012ec4:	b480      	push	{r7}
 8012ec6:	b083      	sub	sp, #12
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
	*p_err =0;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	2200      	movs	r2, #0
 8012ed0:	601a      	str	r2, [r3, #0]

	/* 進行方向に壁が存在する場合によける動作を行う */
	if( st_sen[DIST_SEN_R_FRONT].s_now > st_senF[DIST_SEN_R_FRONT].s_skewErr3 ){
 8012ed2:	4b20      	ldr	r3, [pc, #128]	@ (8012f54 <DIST_getErrSkew+0x90>)
 8012ed4:	881a      	ldrh	r2, [r3, #0]
 8012ed6:	4b20      	ldr	r3, [pc, #128]	@ (8012f58 <DIST_getErrSkew+0x94>)
 8012ed8:	88db      	ldrh	r3, [r3, #6]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d903      	bls.n	8012ee6 <DIST_getErrSkew+0x22>
		*p_err = 0;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	601a      	str	r2, [r3, #0]
//		printf("左前が近い  [NOW]%d > [ERR1]%d", st_sen[DIST_SEN_L_FRONT].s_now, st_senF[DIST_SEN_L_FRONT].s_skewErr1 );
	}
	else{
	}

}
 8012ee4:	e030      	b.n	8012f48 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_L_FRONT].s_now > st_senF[DIST_SEN_L_FRONT].s_skewErr3 ){
 8012ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8012f54 <DIST_getErrSkew+0x90>)
 8012ee8:	89da      	ldrh	r2, [r3, #14]
 8012eea:	4b1b      	ldr	r3, [pc, #108]	@ (8012f58 <DIST_getErrSkew+0x94>)
 8012eec:	89db      	ldrh	r3, [r3, #14]
 8012eee:	429a      	cmp	r2, r3
 8012ef0:	d903      	bls.n	8012efa <DIST_getErrSkew+0x36>
		*p_err = 0;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	601a      	str	r2, [r3, #0]
}
 8012ef8:	e026      	b.n	8012f48 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_R_FRONT].s_now > st_senF[DIST_SEN_R_FRONT].s_skewErr2 ){
 8012efa:	4b16      	ldr	r3, [pc, #88]	@ (8012f54 <DIST_getErrSkew+0x90>)
 8012efc:	881a      	ldrh	r2, [r3, #0]
 8012efe:	4b16      	ldr	r3, [pc, #88]	@ (8012f58 <DIST_getErrSkew+0x94>)
 8012f00:	889b      	ldrh	r3, [r3, #4]
 8012f02:	429a      	cmp	r2, r3
 8012f04:	d903      	bls.n	8012f0e <DIST_getErrSkew+0x4a>
		*p_err = 0;
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	2200      	movs	r2, #0
 8012f0a:	601a      	str	r2, [r3, #0]
}
 8012f0c:	e01c      	b.n	8012f48 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_L_FRONT].s_now > st_senF[DIST_SEN_L_FRONT].s_skewErr2 ){
 8012f0e:	4b11      	ldr	r3, [pc, #68]	@ (8012f54 <DIST_getErrSkew+0x90>)
 8012f10:	89da      	ldrh	r2, [r3, #14]
 8012f12:	4b11      	ldr	r3, [pc, #68]	@ (8012f58 <DIST_getErrSkew+0x94>)
 8012f14:	899b      	ldrh	r3, [r3, #12]
 8012f16:	429a      	cmp	r2, r3
 8012f18:	d903      	bls.n	8012f22 <DIST_getErrSkew+0x5e>
		*p_err = 0;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	601a      	str	r2, [r3, #0]
}
 8012f20:	e012      	b.n	8012f48 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_R_FRONT].s_now > st_senF[DIST_SEN_R_FRONT].s_skewErr1 ){
 8012f22:	4b0c      	ldr	r3, [pc, #48]	@ (8012f54 <DIST_getErrSkew+0x90>)
 8012f24:	881a      	ldrh	r2, [r3, #0]
 8012f26:	4b0c      	ldr	r3, [pc, #48]	@ (8012f58 <DIST_getErrSkew+0x94>)
 8012f28:	885b      	ldrh	r3, [r3, #2]
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d903      	bls.n	8012f36 <DIST_getErrSkew+0x72>
		*p_err = 0;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	2200      	movs	r2, #0
 8012f32:	601a      	str	r2, [r3, #0]
}
 8012f34:	e008      	b.n	8012f48 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_L_FRONT].s_now > st_senF[DIST_SEN_L_FRONT].s_skewErr1 ){
 8012f36:	4b07      	ldr	r3, [pc, #28]	@ (8012f54 <DIST_getErrSkew+0x90>)
 8012f38:	89da      	ldrh	r2, [r3, #14]
 8012f3a:	4b07      	ldr	r3, [pc, #28]	@ (8012f58 <DIST_getErrSkew+0x94>)
 8012f3c:	895b      	ldrh	r3, [r3, #10]
 8012f3e:	429a      	cmp	r2, r3
 8012f40:	d902      	bls.n	8012f48 <DIST_getErrSkew+0x84>
		*p_err = 0;
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	2200      	movs	r2, #0
 8012f46:	601a      	str	r2, [r3, #0]
}
 8012f48:	bf00      	nop
 8012f4a:	370c      	adds	r7, #12
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f52:	4770      	bx	lr
 8012f54:	20017bf0 	.word	0x20017bf0
 8012f58:	20017c28 	.word	0x20017c28

08012f5c <DIST_Pol_FL>:

void DIST_Pol_FL( void )
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
	st_sen[DIST_SEN_L_FRONT].s_offset = GetSensor_FL();
 8012f62:	f7ee fbf3 	bl	800174c <GetSensor_FL>
 8012f66:	4603      	mov	r3, r0
 8012f68:	461a      	mov	r2, r3
 8012f6a:	4b17      	ldr	r3, [pc, #92]	@ (8012fc8 <DIST_Pol_FL+0x6c>)
 8012f6c:	82da      	strh	r2, [r3, #22]

	Set_SenFL(1);
 8012f6e:	2001      	movs	r0, #1
 8012f70:	f7ef f842 	bl	8001ff8 <Set_SenFL>

	for(uint16_t i=0;i<1000;i++);
 8012f74:	2300      	movs	r3, #0
 8012f76:	80fb      	strh	r3, [r7, #6]
 8012f78:	e002      	b.n	8012f80 <DIST_Pol_FL+0x24>
 8012f7a:	88fb      	ldrh	r3, [r7, #6]
 8012f7c:	3301      	adds	r3, #1
 8012f7e:	80fb      	strh	r3, [r7, #6]
 8012f80:	88fb      	ldrh	r3, [r7, #6]
 8012f82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012f86:	d3f8      	bcc.n	8012f7a <DIST_Pol_FL+0x1e>

	st_sen[DIST_SEN_L_FRONT].s_old = st_sen[DIST_SEN_L_FRONT].s_now;
 8012f88:	4b0f      	ldr	r3, [pc, #60]	@ (8012fc8 <DIST_Pol_FL+0x6c>)
 8012f8a:	89da      	ldrh	r2, [r3, #14]
 8012f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8012fc8 <DIST_Pol_FL+0x6c>)
 8012f8e:	821a      	strh	r2, [r3, #16]
	st_sen[DIST_SEN_L_FRONT].s_now = GetSensor_FL()- st_sen[DIST_SEN_L_FRONT].s_offset;
 8012f90:	f7ee fbdc 	bl	800174c <GetSensor_FL>
 8012f94:	4603      	mov	r3, r0
 8012f96:	461a      	mov	r2, r3
 8012f98:	4b0b      	ldr	r3, [pc, #44]	@ (8012fc8 <DIST_Pol_FL+0x6c>)
 8012f9a:	8adb      	ldrh	r3, [r3, #22]
 8012f9c:	1ad3      	subs	r3, r2, r3
 8012f9e:	b29a      	uxth	r2, r3
 8012fa0:	4b09      	ldr	r3, [pc, #36]	@ (8012fc8 <DIST_Pol_FL+0x6c>)
 8012fa2:	81da      	strh	r2, [r3, #14]
	if(st_sen[DIST_SEN_L_FRONT].s_now>(65535/2))st_sen[DIST_SEN_L_FRONT].s_now =0;
 8012fa4:	4b08      	ldr	r3, [pc, #32]	@ (8012fc8 <DIST_Pol_FL+0x6c>)
 8012fa6:	89db      	ldrh	r3, [r3, #14]
 8012fa8:	b21b      	sxth	r3, r3
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	da02      	bge.n	8012fb4 <DIST_Pol_FL+0x58>
 8012fae:	4b06      	ldr	r3, [pc, #24]	@ (8012fc8 <DIST_Pol_FL+0x6c>)
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	81da      	strh	r2, [r3, #14]
	ADC3_clearEOS();
 8012fb4:	f7ee fbe2 	bl	800177c <ADC3_clearEOS>

	Set_SenFL(0);
 8012fb8:	2000      	movs	r0, #0
 8012fba:	f7ef f81d 	bl	8001ff8 <Set_SenFL>
}
 8012fbe:	bf00      	nop
 8012fc0:	3708      	adds	r7, #8
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bd80      	pop	{r7, pc}
 8012fc6:	bf00      	nop
 8012fc8:	20017bf0 	.word	0x20017bf0

08012fcc <DIST_Pol_FR>:

void DIST_Pol_FR( void )
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b082      	sub	sp, #8
 8012fd0:	af00      	add	r7, sp, #0

	st_sen[DIST_SEN_R_FRONT].s_offset = GetSensor_FR();
 8012fd2:	f7ee fc1f 	bl	8001814 <GetSensor_FR>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	461a      	mov	r2, r3
 8012fda:	4b17      	ldr	r3, [pc, #92]	@ (8013038 <DIST_Pol_FR+0x6c>)
 8012fdc:	811a      	strh	r2, [r3, #8]

	Set_SenFR(1);
 8012fde:	2001      	movs	r0, #1
 8012fe0:	f7ef f853 	bl	800208a <Set_SenFR>

	for(uint16_t i=0;i<1000;i++);
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	80fb      	strh	r3, [r7, #6]
 8012fe8:	e002      	b.n	8012ff0 <DIST_Pol_FR+0x24>
 8012fea:	88fb      	ldrh	r3, [r7, #6]
 8012fec:	3301      	adds	r3, #1
 8012fee:	80fb      	strh	r3, [r7, #6]
 8012ff0:	88fb      	ldrh	r3, [r7, #6]
 8012ff2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012ff6:	d3f8      	bcc.n	8012fea <DIST_Pol_FR+0x1e>

	st_sen[DIST_SEN_R_FRONT].s_old = st_sen[DIST_SEN_R_FRONT].s_now;
 8012ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8013038 <DIST_Pol_FR+0x6c>)
 8012ffa:	881a      	ldrh	r2, [r3, #0]
 8012ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8013038 <DIST_Pol_FR+0x6c>)
 8012ffe:	805a      	strh	r2, [r3, #2]
	st_sen[DIST_SEN_R_FRONT].s_now = GetSensor_FR()- st_sen[DIST_SEN_R_FRONT].s_offset;
 8013000:	f7ee fc08 	bl	8001814 <GetSensor_FR>
 8013004:	4603      	mov	r3, r0
 8013006:	461a      	mov	r2, r3
 8013008:	4b0b      	ldr	r3, [pc, #44]	@ (8013038 <DIST_Pol_FR+0x6c>)
 801300a:	891b      	ldrh	r3, [r3, #8]
 801300c:	1ad3      	subs	r3, r2, r3
 801300e:	b29a      	uxth	r2, r3
 8013010:	4b09      	ldr	r3, [pc, #36]	@ (8013038 <DIST_Pol_FR+0x6c>)
 8013012:	801a      	strh	r2, [r3, #0]
	if(st_sen[DIST_SEN_R_FRONT].s_now>(65535/2))st_sen[DIST_SEN_R_FRONT].s_now =0;
 8013014:	4b08      	ldr	r3, [pc, #32]	@ (8013038 <DIST_Pol_FR+0x6c>)
 8013016:	881b      	ldrh	r3, [r3, #0]
 8013018:	b21b      	sxth	r3, r3
 801301a:	2b00      	cmp	r3, #0
 801301c:	da02      	bge.n	8013024 <DIST_Pol_FR+0x58>
 801301e:	4b06      	ldr	r3, [pc, #24]	@ (8013038 <DIST_Pol_FR+0x6c>)
 8013020:	2200      	movs	r2, #0
 8013022:	801a      	strh	r2, [r3, #0]
	ADC2_clearEOS();
 8013024:	f7ee fbb4 	bl	8001790 <ADC2_clearEOS>

	Set_SenFR(0);
 8013028:	2000      	movs	r0, #0
 801302a:	f7ef f82e 	bl	800208a <Set_SenFR>

}
 801302e:	bf00      	nop
 8013030:	3708      	adds	r7, #8
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}
 8013036:	bf00      	nop
 8013038:	20017bf0 	.word	0x20017bf0

0801303c <DIST_Pol_SL>:


void DIST_Pol_SL( void )
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b082      	sub	sp, #8
 8013040:	af00      	add	r7, sp, #0

	st_sen[DIST_SEN_L_SIDE].s_offset = GetSensor_SL();
 8013042:	f7ee fbb7 	bl	80017b4 <GetSensor_SL>
 8013046:	4603      	mov	r3, r0
 8013048:	461a      	mov	r2, r3
 801304a:	4b17      	ldr	r3, [pc, #92]	@ (80130a8 <DIST_Pol_SL+0x6c>)
 801304c:	865a      	strh	r2, [r3, #50]	@ 0x32

	Set_SenSL(1);
 801304e:	2001      	movs	r0, #1
 8013050:	f7ee ffec 	bl	800202c <Set_SenSL>

	for(uint16_t i=0;i<1000;i++);
 8013054:	2300      	movs	r3, #0
 8013056:	80fb      	strh	r3, [r7, #6]
 8013058:	e002      	b.n	8013060 <DIST_Pol_SL+0x24>
 801305a:	88fb      	ldrh	r3, [r7, #6]
 801305c:	3301      	adds	r3, #1
 801305e:	80fb      	strh	r3, [r7, #6]
 8013060:	88fb      	ldrh	r3, [r7, #6]
 8013062:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013066:	d3f8      	bcc.n	801305a <DIST_Pol_SL+0x1e>

	st_sen[DIST_SEN_L_SIDE].s_old = st_sen[DIST_SEN_L_SIDE].s_now;
 8013068:	4b0f      	ldr	r3, [pc, #60]	@ (80130a8 <DIST_Pol_SL+0x6c>)
 801306a:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801306c:	4b0e      	ldr	r3, [pc, #56]	@ (80130a8 <DIST_Pol_SL+0x6c>)
 801306e:	859a      	strh	r2, [r3, #44]	@ 0x2c
	st_sen[DIST_SEN_L_SIDE].s_now = GetSensor_SL()- st_sen[DIST_SEN_L_SIDE].s_offset;
 8013070:	f7ee fba0 	bl	80017b4 <GetSensor_SL>
 8013074:	4603      	mov	r3, r0
 8013076:	461a      	mov	r2, r3
 8013078:	4b0b      	ldr	r3, [pc, #44]	@ (80130a8 <DIST_Pol_SL+0x6c>)
 801307a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801307c:	1ad3      	subs	r3, r2, r3
 801307e:	b29a      	uxth	r2, r3
 8013080:	4b09      	ldr	r3, [pc, #36]	@ (80130a8 <DIST_Pol_SL+0x6c>)
 8013082:	855a      	strh	r2, [r3, #42]	@ 0x2a
	if(st_sen[DIST_SEN_L_SIDE].s_now>(65535/2))st_sen[DIST_SEN_L_SIDE].s_now =0;
 8013084:	4b08      	ldr	r3, [pc, #32]	@ (80130a8 <DIST_Pol_SL+0x6c>)
 8013086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013088:	b21b      	sxth	r3, r3
 801308a:	2b00      	cmp	r3, #0
 801308c:	da02      	bge.n	8013094 <DIST_Pol_SL+0x58>
 801308e:	4b06      	ldr	r3, [pc, #24]	@ (80130a8 <DIST_Pol_SL+0x6c>)
 8013090:	2200      	movs	r2, #0
 8013092:	855a      	strh	r2, [r3, #42]	@ 0x2a
	ADC1_clearEOS();
 8013094:	f7ee fb86 	bl	80017a4 <ADC1_clearEOS>

	Set_SenSL(0);
 8013098:	2000      	movs	r0, #0
 801309a:	f7ee ffc7 	bl	800202c <Set_SenSL>

}
 801309e:	bf00      	nop
 80130a0:	3708      	adds	r7, #8
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
 80130a6:	bf00      	nop
 80130a8:	20017bf0 	.word	0x20017bf0

080130ac <DIST_Pol_SR>:

void DIST_Pol_SR( void )
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b082      	sub	sp, #8
 80130b0:	af00      	add	r7, sp, #0

	st_sen[DIST_SEN_R_SIDE].s_offset = GetSensor_SR();
 80130b2:	f7ee fb97 	bl	80017e4 <GetSensor_SR>
 80130b6:	4603      	mov	r3, r0
 80130b8:	461a      	mov	r2, r3
 80130ba:	4b16      	ldr	r3, [pc, #88]	@ (8013114 <DIST_Pol_SR+0x68>)
 80130bc:	849a      	strh	r2, [r3, #36]	@ 0x24

	Set_SenSR(1);
 80130be:	2001      	movs	r0, #1
 80130c0:	f7ee ffcc 	bl	800205c <Set_SenSR>

	for(uint16_t i=0;i<1000;i++);
 80130c4:	2300      	movs	r3, #0
 80130c6:	80fb      	strh	r3, [r7, #6]
 80130c8:	e002      	b.n	80130d0 <DIST_Pol_SR+0x24>
 80130ca:	88fb      	ldrh	r3, [r7, #6]
 80130cc:	3301      	adds	r3, #1
 80130ce:	80fb      	strh	r3, [r7, #6]
 80130d0:	88fb      	ldrh	r3, [r7, #6]
 80130d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80130d6:	d3f8      	bcc.n	80130ca <DIST_Pol_SR+0x1e>

	st_sen[DIST_SEN_R_SIDE].s_old = st_sen[DIST_SEN_R_SIDE].s_now;
 80130d8:	4b0e      	ldr	r3, [pc, #56]	@ (8013114 <DIST_Pol_SR+0x68>)
 80130da:	8b9a      	ldrh	r2, [r3, #28]
 80130dc:	4b0d      	ldr	r3, [pc, #52]	@ (8013114 <DIST_Pol_SR+0x68>)
 80130de:	83da      	strh	r2, [r3, #30]
	st_sen[DIST_SEN_R_SIDE].s_now = GetSensor_SR()- st_sen[DIST_SEN_R_SIDE].s_offset;
 80130e0:	f7ee fb80 	bl	80017e4 <GetSensor_SR>
 80130e4:	4603      	mov	r3, r0
 80130e6:	461a      	mov	r2, r3
 80130e8:	4b0a      	ldr	r3, [pc, #40]	@ (8013114 <DIST_Pol_SR+0x68>)
 80130ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80130ec:	1ad3      	subs	r3, r2, r3
 80130ee:	b29a      	uxth	r2, r3
 80130f0:	4b08      	ldr	r3, [pc, #32]	@ (8013114 <DIST_Pol_SR+0x68>)
 80130f2:	839a      	strh	r2, [r3, #28]
	if(st_sen[DIST_SEN_R_SIDE].s_now>(65535/2))st_sen[DIST_SEN_R_SIDE].s_now =0;
 80130f4:	4b07      	ldr	r3, [pc, #28]	@ (8013114 <DIST_Pol_SR+0x68>)
 80130f6:	8b9b      	ldrh	r3, [r3, #28]
 80130f8:	b21b      	sxth	r3, r3
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	da02      	bge.n	8013104 <DIST_Pol_SR+0x58>
 80130fe:	4b05      	ldr	r3, [pc, #20]	@ (8013114 <DIST_Pol_SR+0x68>)
 8013100:	2200      	movs	r2, #0
 8013102:	839a      	strh	r2, [r3, #28]

	Set_SenSR(0);
 8013104:	2000      	movs	r0, #0
 8013106:	f7ee ffa9 	bl	800205c <Set_SenSR>

}
 801310a:	bf00      	nop
 801310c:	3708      	adds	r7, #8
 801310e:	46bd      	mov	sp, r7
 8013110:	bd80      	pop	{r7, pc}
 8013112:	bf00      	nop
 8013114:	20017bf0 	.word	0x20017bf0

08013118 <Get_Sen_Nowdata>:

void Get_Sen_Nowdata(void){
 8013118:	b580      	push	{r7, lr}
 801311a:	b082      	sub	sp, #8
 801311c:	af02      	add	r7, sp, #8
	printf("FL %4d SL %4d SR %4d FR %4d\r",
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 801311e:	4b09      	ldr	r3, [pc, #36]	@ (8013144 <Get_Sen_Nowdata+0x2c>)
 8013120:	89db      	ldrh	r3, [r3, #14]
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 8013122:	4619      	mov	r1, r3
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 8013124:	4b07      	ldr	r3, [pc, #28]	@ (8013144 <Get_Sen_Nowdata+0x2c>)
 8013126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 8013128:	461a      	mov	r2, r3
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 801312a:	4b06      	ldr	r3, [pc, #24]	@ (8013144 <Get_Sen_Nowdata+0x2c>)
 801312c:	8b9b      	ldrh	r3, [r3, #28]
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 801312e:	4618      	mov	r0, r3
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 8013130:	4b04      	ldr	r3, [pc, #16]	@ (8013144 <Get_Sen_Nowdata+0x2c>)
 8013132:	881b      	ldrh	r3, [r3, #0]
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 8013134:	9300      	str	r3, [sp, #0]
 8013136:	4603      	mov	r3, r0
 8013138:	4803      	ldr	r0, [pc, #12]	@ (8013148 <Get_Sen_Nowdata+0x30>)
 801313a:	f00a fd8b 	bl	801dc54 <iprintf>
}
 801313e:	bf00      	nop
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}
 8013144:	20017bf0 	.word	0x20017bf0
 8013148:	08021c94 	.word	0x08021c94

0801314c <DIST_isWall_FRONT>:

bool DIST_isWall_FRONT( void )
{
 801314c:	b480      	push	{r7}
 801314e:	b083      	sub	sp, #12
 8013150:	af00      	add	r7, sp, #0
	bool bl_res 		= false;
 8013152:	2300      	movs	r3, #0
 8013154:	71fb      	strb	r3, [r7, #7]
//	printf("DIST_SEN_R_FRONT %5d \r\n",st_sen[DIST_SEN_R_FRONT].s_limit);
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_limit ) ||
 8013156:	4b0a      	ldr	r3, [pc, #40]	@ (8013180 <DIST_isWall_FRONT+0x34>)
 8013158:	881a      	ldrh	r2, [r3, #0]
 801315a:	4b09      	ldr	r3, [pc, #36]	@ (8013180 <DIST_isWall_FRONT+0x34>)
 801315c:	889b      	ldrh	r3, [r3, #4]
 801315e:	429a      	cmp	r2, r3
 8013160:	d805      	bhi.n	801316e <DIST_isWall_FRONT+0x22>
		( st_sen[DIST_SEN_L_FRONT].s_now > st_sen[DIST_SEN_L_FRONT].s_limit )
 8013162:	4b07      	ldr	r3, [pc, #28]	@ (8013180 <DIST_isWall_FRONT+0x34>)
 8013164:	89da      	ldrh	r2, [r3, #14]
 8013166:	4b06      	ldr	r3, [pc, #24]	@ (8013180 <DIST_isWall_FRONT+0x34>)
 8013168:	8a5b      	ldrh	r3, [r3, #18]
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_limit ) ||
 801316a:	429a      	cmp	r2, r3
 801316c:	d901      	bls.n	8013172 <DIST_isWall_FRONT+0x26>
	){
		bl_res = true;
 801316e:	2301      	movs	r3, #1
 8013170:	71fb      	strb	r3, [r7, #7]
	}

	return bl_res;
 8013172:	79fb      	ldrb	r3, [r7, #7]
}
 8013174:	4618      	mov	r0, r3
 8013176:	370c      	adds	r7, #12
 8013178:	46bd      	mov	sp, r7
 801317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317e:	4770      	bx	lr
 8013180:	20017bf0 	.word	0x20017bf0

08013184 <DIST_isWall_R_SIDE>:

bool DIST_isWall_R_SIDE( void )
{
 8013184:	b480      	push	{r7}
 8013186:	b083      	sub	sp, #12
 8013188:	af00      	add	r7, sp, #0
	bool bl_res 		= false;
 801318a:	2300      	movs	r3, #0
 801318c:	71fb      	strb	r3, [r7, #7]

	if( st_sen[DIST_SEN_R_SIDE].s_now > st_sen[DIST_SEN_R_SIDE].s_limit ){
 801318e:	4b07      	ldr	r3, [pc, #28]	@ (80131ac <DIST_isWall_R_SIDE+0x28>)
 8013190:	8b9a      	ldrh	r2, [r3, #28]
 8013192:	4b06      	ldr	r3, [pc, #24]	@ (80131ac <DIST_isWall_R_SIDE+0x28>)
 8013194:	8c1b      	ldrh	r3, [r3, #32]
 8013196:	429a      	cmp	r2, r3
 8013198:	d901      	bls.n	801319e <DIST_isWall_R_SIDE+0x1a>
		bl_res = true;
 801319a:	2301      	movs	r3, #1
 801319c:	71fb      	strb	r3, [r7, #7]
	}

	return bl_res;
 801319e:	79fb      	ldrb	r3, [r7, #7]
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	370c      	adds	r7, #12
 80131a4:	46bd      	mov	sp, r7
 80131a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131aa:	4770      	bx	lr
 80131ac:	20017bf0 	.word	0x20017bf0

080131b0 <DIST_isWall_L_SIDE>:

bool DIST_isWall_L_SIDE( void )
{
 80131b0:	b480      	push	{r7}
 80131b2:	b083      	sub	sp, #12
 80131b4:	af00      	add	r7, sp, #0
	bool bl_res 		= false;
 80131b6:	2300      	movs	r3, #0
 80131b8:	71fb      	strb	r3, [r7, #7]

	if( st_sen[DIST_SEN_L_SIDE].s_now > st_sen[DIST_SEN_L_SIDE].s_limit ){
 80131ba:	4b07      	ldr	r3, [pc, #28]	@ (80131d8 <DIST_isWall_L_SIDE+0x28>)
 80131bc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80131be:	4b06      	ldr	r3, [pc, #24]	@ (80131d8 <DIST_isWall_L_SIDE+0x28>)
 80131c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80131c2:	429a      	cmp	r2, r3
 80131c4:	d901      	bls.n	80131ca <DIST_isWall_L_SIDE+0x1a>
		bl_res = true;
 80131c6:	2301      	movs	r3, #1
 80131c8:	71fb      	strb	r3, [r7, #7]
	}

	return bl_res;
 80131ca:	79fb      	ldrb	r3, [r7, #7]
}
 80131cc:	4618      	mov	r0, r3
 80131ce:	370c      	adds	r7, #12
 80131d0:	46bd      	mov	sp, r7
 80131d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d6:	4770      	bx	lr
 80131d8:	20017bf0 	.word	0x20017bf0

080131dc <MAP_refPos>:
uint16_t us_LogIndex = 0;
uint16_t us_LogWallCut[30];
uint16_t us_LogIndexWallCut = 0;

void MAP_refPos( uint8_t uc_cmd )
{
 80131dc:	b480      	push	{r7}
 80131de:	b085      	sub	sp, #20
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	4603      	mov	r3, r0
 80131e4:	71fb      	strb	r3, [r7, #7]
	uint8_t uc_index = 0;			// テーブルのインデックス番号
 80131e6:	2300      	movs	r3, #0
 80131e8:	73fb      	strb	r3, [r7, #15]
	
	/* ------------------------------------------ */
	/*  コマンドからテーブルのインデックスを取得  */
	/* ------------------------------------------ */
	/* 直進 */
	if( ( uc_cmd <=  GO71 ) && ( uc_cmd >=  GO1) ){
 80131ea:	79fb      	ldrb	r3, [r7, #7]
 80131ec:	2b47      	cmp	r3, #71	@ 0x47
 80131ee:	d805      	bhi.n	80131fc <MAP_refPos+0x20>
 80131f0:	79fb      	ldrb	r3, [r7, #7]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d002      	beq.n	80131fc <MAP_refPos+0x20>
		
		uc_index = 14;		// st_PosDataテーブルの直進のインデックス番号
 80131f6:	230e      	movs	r3, #14
 80131f8:	73fb      	strb	r3, [r7, #15]
 80131fa:	e024      	b.n	8013246 <MAP_refPos+0x6a>
	}
	/* 斜め直進 */
	else if( ( uc_cmd <=  NGO71 ) && ( uc_cmd >=  NGO1) ){
 80131fc:	79fb      	ldrb	r3, [r7, #7]
 80131fe:	2b98      	cmp	r3, #152	@ 0x98
 8013200:	d900      	bls.n	8013204 <MAP_refPos+0x28>
 8013202:	e005      	b.n	8013210 <MAP_refPos+0x34>
 8013204:	79fb      	ldrb	r3, [r7, #7]
 8013206:	2b51      	cmp	r3, #81	@ 0x51
 8013208:	d902      	bls.n	8013210 <MAP_refPos+0x34>
		
		uc_index = 15;		// st_PosDataテーブルの斜め直進のインデックス番号
 801320a:	230f      	movs	r3, #15
 801320c:	73fb      	strb	r3, [r7, #15]
 801320e:	e01a      	b.n	8013246 <MAP_refPos+0x6a>
	}
	/* その他のコマンド */
	else{
		while(1){
			
			if( st_PosData[uc_index].en_cmd == uc_cmd )      break;			// コマンド発見
 8013210:	7bfa      	ldrb	r2, [r7, #15]
 8013212:	49c7      	ldr	r1, [pc, #796]	@ (8013530 <MAP_refPos+0x354>)
 8013214:	4613      	mov	r3, r2
 8013216:	009b      	lsls	r3, r3, #2
 8013218:	4413      	add	r3, r2
 801321a:	00db      	lsls	r3, r3, #3
 801321c:	440b      	add	r3, r1
 801321e:	781b      	ldrb	r3, [r3, #0]
 8013220:	79fa      	ldrb	r2, [r7, #7]
 8013222:	429a      	cmp	r2, r3
 8013224:	d00e      	beq.n	8013244 <MAP_refPos+0x68>
			if( st_PosData[uc_index].en_cmd == MAP_CMD_MAX ) return;		// コマンド未発見
 8013226:	7bfa      	ldrb	r2, [r7, #15]
 8013228:	49c1      	ldr	r1, [pc, #772]	@ (8013530 <MAP_refPos+0x354>)
 801322a:	4613      	mov	r3, r2
 801322c:	009b      	lsls	r3, r3, #2
 801322e:	4413      	add	r3, r2
 8013230:	00db      	lsls	r3, r3, #3
 8013232:	440b      	add	r3, r1
 8013234:	781b      	ldrb	r3, [r3, #0]
 8013236:	2bfb      	cmp	r3, #251	@ 0xfb
 8013238:	f000 82ca 	beq.w	80137d0 <MAP_refPos+0x5f4>
			uc_index++;
 801323c:	7bfb      	ldrb	r3, [r7, #15]
 801323e:	3301      	adds	r3, #1
 8013240:	73fb      	strb	r3, [r7, #15]
			if( st_PosData[uc_index].en_cmd == uc_cmd )      break;			// コマンド発見
 8013242:	e7e5      	b.n	8013210 <MAP_refPos+0x34>
 8013244:	bf00      	nop
		}
	}
	
		/* 位置更新 */
	switch( s_PosDir ){
 8013246:	4bbb      	ldr	r3, [pc, #748]	@ (8013534 <MAP_refPos+0x358>)
 8013248:	f9b3 3000 	ldrsh.w	r3, [r3]
 801324c:	2b07      	cmp	r3, #7
 801324e:	f200 8267 	bhi.w	8013720 <MAP_refPos+0x544>
 8013252:	a201      	add	r2, pc, #4	@ (adr r2, 8013258 <MAP_refPos+0x7c>)
 8013254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013258:	08013279 	.word	0x08013279
 801325c:	08013279 	.word	0x08013279
 8013260:	0801339f 	.word	0x0801339f
 8013264:	0801339f 	.word	0x0801339f
 8013268:	080134c5 	.word	0x080134c5
 801326c:	080134c5 	.word	0x080134c5
 8013270:	080135fb 	.word	0x080135fb
 8013274:	080135fb 	.word	0x080135fb
		/* [0]北 [1]北東 */
		case 0:
		case 1:
		
			/* 直進 */
			if( uc_index == 14 ){
 8013278:	7bfb      	ldrb	r3, [r7, #15]
 801327a:	2b0e      	cmp	r3, #14
 801327c:	d132      	bne.n	80132e4 <MAP_refPos+0x108>
				
				f_PosX += st_PosData[uc_index].f_x0_x1 * uc_cmd;
 801327e:	7bfa      	ldrb	r2, [r7, #15]
 8013280:	49ab      	ldr	r1, [pc, #684]	@ (8013530 <MAP_refPos+0x354>)
 8013282:	4613      	mov	r3, r2
 8013284:	009b      	lsls	r3, r3, #2
 8013286:	4413      	add	r3, r2
 8013288:	00db      	lsls	r3, r3, #3
 801328a:	440b      	add	r3, r1
 801328c:	3304      	adds	r3, #4
 801328e:	ed93 7a00 	vldr	s14, [r3]
 8013292:	79fb      	ldrb	r3, [r7, #7]
 8013294:	ee07 3a90 	vmov	s15, r3
 8013298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801329c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80132a0:	4ba5      	ldr	r3, [pc, #660]	@ (8013538 <MAP_refPos+0x35c>)
 80132a2:	edd3 7a00 	vldr	s15, [r3]
 80132a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80132aa:	4ba3      	ldr	r3, [pc, #652]	@ (8013538 <MAP_refPos+0x35c>)
 80132ac:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y0_y1 * uc_cmd;
 80132b0:	7bfa      	ldrb	r2, [r7, #15]
 80132b2:	499f      	ldr	r1, [pc, #636]	@ (8013530 <MAP_refPos+0x354>)
 80132b4:	4613      	mov	r3, r2
 80132b6:	009b      	lsls	r3, r3, #2
 80132b8:	4413      	add	r3, r2
 80132ba:	00db      	lsls	r3, r3, #3
 80132bc:	440b      	add	r3, r1
 80132be:	3308      	adds	r3, #8
 80132c0:	ed93 7a00 	vldr	s14, [r3]
 80132c4:	79fb      	ldrb	r3, [r7, #7]
 80132c6:	ee07 3a90 	vmov	s15, r3
 80132ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80132ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80132d2:	4b9a      	ldr	r3, [pc, #616]	@ (801353c <MAP_refPos+0x360>)
 80132d4:	edd3 7a00 	vldr	s15, [r3]
 80132d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80132dc:	4b97      	ldr	r3, [pc, #604]	@ (801353c <MAP_refPos+0x360>)
 80132de:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x0_x1;
				f_PosY += st_PosData[uc_index].f_y0_y1;
			}
			break;
 80132e2:	e21d      	b.n	8013720 <MAP_refPos+0x544>
			else if( uc_index == 15 ){
 80132e4:	7bfb      	ldrb	r3, [r7, #15]
 80132e6:	2b0f      	cmp	r3, #15
 80132e8:	d134      	bne.n	8013354 <MAP_refPos+0x178>
				f_PosX += st_PosData[uc_index].f_x0_x1 * ( uc_cmd - 81 );
 80132ea:	7bfa      	ldrb	r2, [r7, #15]
 80132ec:	4990      	ldr	r1, [pc, #576]	@ (8013530 <MAP_refPos+0x354>)
 80132ee:	4613      	mov	r3, r2
 80132f0:	009b      	lsls	r3, r3, #2
 80132f2:	4413      	add	r3, r2
 80132f4:	00db      	lsls	r3, r3, #3
 80132f6:	440b      	add	r3, r1
 80132f8:	3304      	adds	r3, #4
 80132fa:	ed93 7a00 	vldr	s14, [r3]
 80132fe:	79fb      	ldrb	r3, [r7, #7]
 8013300:	3b51      	subs	r3, #81	@ 0x51
 8013302:	ee07 3a90 	vmov	s15, r3
 8013306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801330a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801330e:	4b8a      	ldr	r3, [pc, #552]	@ (8013538 <MAP_refPos+0x35c>)
 8013310:	edd3 7a00 	vldr	s15, [r3]
 8013314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013318:	4b87      	ldr	r3, [pc, #540]	@ (8013538 <MAP_refPos+0x35c>)
 801331a:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y0_y1 * ( uc_cmd - 81 );
 801331e:	7bfa      	ldrb	r2, [r7, #15]
 8013320:	4983      	ldr	r1, [pc, #524]	@ (8013530 <MAP_refPos+0x354>)
 8013322:	4613      	mov	r3, r2
 8013324:	009b      	lsls	r3, r3, #2
 8013326:	4413      	add	r3, r2
 8013328:	00db      	lsls	r3, r3, #3
 801332a:	440b      	add	r3, r1
 801332c:	3308      	adds	r3, #8
 801332e:	ed93 7a00 	vldr	s14, [r3]
 8013332:	79fb      	ldrb	r3, [r7, #7]
 8013334:	3b51      	subs	r3, #81	@ 0x51
 8013336:	ee07 3a90 	vmov	s15, r3
 801333a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801333e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013342:	4b7e      	ldr	r3, [pc, #504]	@ (801353c <MAP_refPos+0x360>)
 8013344:	edd3 7a00 	vldr	s15, [r3]
 8013348:	ee77 7a27 	vadd.f32	s15, s14, s15
 801334c:	4b7b      	ldr	r3, [pc, #492]	@ (801353c <MAP_refPos+0x360>)
 801334e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8013352:	e1e5      	b.n	8013720 <MAP_refPos+0x544>
				f_PosX += st_PosData[uc_index].f_x0_x1;
 8013354:	7bfa      	ldrb	r2, [r7, #15]
 8013356:	4976      	ldr	r1, [pc, #472]	@ (8013530 <MAP_refPos+0x354>)
 8013358:	4613      	mov	r3, r2
 801335a:	009b      	lsls	r3, r3, #2
 801335c:	4413      	add	r3, r2
 801335e:	00db      	lsls	r3, r3, #3
 8013360:	440b      	add	r3, r1
 8013362:	3304      	adds	r3, #4
 8013364:	ed93 7a00 	vldr	s14, [r3]
 8013368:	4b73      	ldr	r3, [pc, #460]	@ (8013538 <MAP_refPos+0x35c>)
 801336a:	edd3 7a00 	vldr	s15, [r3]
 801336e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013372:	4b71      	ldr	r3, [pc, #452]	@ (8013538 <MAP_refPos+0x35c>)
 8013374:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y0_y1;
 8013378:	7bfa      	ldrb	r2, [r7, #15]
 801337a:	496d      	ldr	r1, [pc, #436]	@ (8013530 <MAP_refPos+0x354>)
 801337c:	4613      	mov	r3, r2
 801337e:	009b      	lsls	r3, r3, #2
 8013380:	4413      	add	r3, r2
 8013382:	00db      	lsls	r3, r3, #3
 8013384:	440b      	add	r3, r1
 8013386:	3308      	adds	r3, #8
 8013388:	ed93 7a00 	vldr	s14, [r3]
 801338c:	4b6b      	ldr	r3, [pc, #428]	@ (801353c <MAP_refPos+0x360>)
 801338e:	edd3 7a00 	vldr	s15, [r3]
 8013392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013396:	4b69      	ldr	r3, [pc, #420]	@ (801353c <MAP_refPos+0x360>)
 8013398:	edc3 7a00 	vstr	s15, [r3]
			break;
 801339c:	e1c0      	b.n	8013720 <MAP_refPos+0x544>
		/* [2]東 [3]南東 */
		case 2:
		case 3:

			/* 直進 */
			if( uc_index == 14 ){
 801339e:	7bfb      	ldrb	r3, [r7, #15]
 80133a0:	2b0e      	cmp	r3, #14
 80133a2:	d132      	bne.n	801340a <MAP_refPos+0x22e>
				
				f_PosX += st_PosData[uc_index].f_x2_x3 * uc_cmd;
 80133a4:	7bfa      	ldrb	r2, [r7, #15]
 80133a6:	4962      	ldr	r1, [pc, #392]	@ (8013530 <MAP_refPos+0x354>)
 80133a8:	4613      	mov	r3, r2
 80133aa:	009b      	lsls	r3, r3, #2
 80133ac:	4413      	add	r3, r2
 80133ae:	00db      	lsls	r3, r3, #3
 80133b0:	440b      	add	r3, r1
 80133b2:	330c      	adds	r3, #12
 80133b4:	ed93 7a00 	vldr	s14, [r3]
 80133b8:	79fb      	ldrb	r3, [r7, #7]
 80133ba:	ee07 3a90 	vmov	s15, r3
 80133be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80133c6:	4b5c      	ldr	r3, [pc, #368]	@ (8013538 <MAP_refPos+0x35c>)
 80133c8:	edd3 7a00 	vldr	s15, [r3]
 80133cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80133d0:	4b59      	ldr	r3, [pc, #356]	@ (8013538 <MAP_refPos+0x35c>)
 80133d2:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y2_y3 * uc_cmd;
 80133d6:	7bfa      	ldrb	r2, [r7, #15]
 80133d8:	4955      	ldr	r1, [pc, #340]	@ (8013530 <MAP_refPos+0x354>)
 80133da:	4613      	mov	r3, r2
 80133dc:	009b      	lsls	r3, r3, #2
 80133de:	4413      	add	r3, r2
 80133e0:	00db      	lsls	r3, r3, #3
 80133e2:	440b      	add	r3, r1
 80133e4:	3310      	adds	r3, #16
 80133e6:	ed93 7a00 	vldr	s14, [r3]
 80133ea:	79fb      	ldrb	r3, [r7, #7]
 80133ec:	ee07 3a90 	vmov	s15, r3
 80133f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80133f8:	4b50      	ldr	r3, [pc, #320]	@ (801353c <MAP_refPos+0x360>)
 80133fa:	edd3 7a00 	vldr	s15, [r3]
 80133fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013402:	4b4e      	ldr	r3, [pc, #312]	@ (801353c <MAP_refPos+0x360>)
 8013404:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x2_x3;
				f_PosY += st_PosData[uc_index].f_y2_y3;
			}
			break;
 8013408:	e18a      	b.n	8013720 <MAP_refPos+0x544>
			else if( uc_index == 15 ){
 801340a:	7bfb      	ldrb	r3, [r7, #15]
 801340c:	2b0f      	cmp	r3, #15
 801340e:	d134      	bne.n	801347a <MAP_refPos+0x29e>
				f_PosX += st_PosData[uc_index].f_x2_x3 * ( uc_cmd - 81 );
 8013410:	7bfa      	ldrb	r2, [r7, #15]
 8013412:	4947      	ldr	r1, [pc, #284]	@ (8013530 <MAP_refPos+0x354>)
 8013414:	4613      	mov	r3, r2
 8013416:	009b      	lsls	r3, r3, #2
 8013418:	4413      	add	r3, r2
 801341a:	00db      	lsls	r3, r3, #3
 801341c:	440b      	add	r3, r1
 801341e:	330c      	adds	r3, #12
 8013420:	ed93 7a00 	vldr	s14, [r3]
 8013424:	79fb      	ldrb	r3, [r7, #7]
 8013426:	3b51      	subs	r3, #81	@ 0x51
 8013428:	ee07 3a90 	vmov	s15, r3
 801342c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013430:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013434:	4b40      	ldr	r3, [pc, #256]	@ (8013538 <MAP_refPos+0x35c>)
 8013436:	edd3 7a00 	vldr	s15, [r3]
 801343a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801343e:	4b3e      	ldr	r3, [pc, #248]	@ (8013538 <MAP_refPos+0x35c>)
 8013440:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y2_y3 * ( uc_cmd - 81 );
 8013444:	7bfa      	ldrb	r2, [r7, #15]
 8013446:	493a      	ldr	r1, [pc, #232]	@ (8013530 <MAP_refPos+0x354>)
 8013448:	4613      	mov	r3, r2
 801344a:	009b      	lsls	r3, r3, #2
 801344c:	4413      	add	r3, r2
 801344e:	00db      	lsls	r3, r3, #3
 8013450:	440b      	add	r3, r1
 8013452:	3310      	adds	r3, #16
 8013454:	ed93 7a00 	vldr	s14, [r3]
 8013458:	79fb      	ldrb	r3, [r7, #7]
 801345a:	3b51      	subs	r3, #81	@ 0x51
 801345c:	ee07 3a90 	vmov	s15, r3
 8013460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013464:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013468:	4b34      	ldr	r3, [pc, #208]	@ (801353c <MAP_refPos+0x360>)
 801346a:	edd3 7a00 	vldr	s15, [r3]
 801346e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013472:	4b32      	ldr	r3, [pc, #200]	@ (801353c <MAP_refPos+0x360>)
 8013474:	edc3 7a00 	vstr	s15, [r3]
			break;
 8013478:	e152      	b.n	8013720 <MAP_refPos+0x544>
				f_PosX += st_PosData[uc_index].f_x2_x3;
 801347a:	7bfa      	ldrb	r2, [r7, #15]
 801347c:	492c      	ldr	r1, [pc, #176]	@ (8013530 <MAP_refPos+0x354>)
 801347e:	4613      	mov	r3, r2
 8013480:	009b      	lsls	r3, r3, #2
 8013482:	4413      	add	r3, r2
 8013484:	00db      	lsls	r3, r3, #3
 8013486:	440b      	add	r3, r1
 8013488:	330c      	adds	r3, #12
 801348a:	ed93 7a00 	vldr	s14, [r3]
 801348e:	4b2a      	ldr	r3, [pc, #168]	@ (8013538 <MAP_refPos+0x35c>)
 8013490:	edd3 7a00 	vldr	s15, [r3]
 8013494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013498:	4b27      	ldr	r3, [pc, #156]	@ (8013538 <MAP_refPos+0x35c>)
 801349a:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y2_y3;
 801349e:	7bfa      	ldrb	r2, [r7, #15]
 80134a0:	4923      	ldr	r1, [pc, #140]	@ (8013530 <MAP_refPos+0x354>)
 80134a2:	4613      	mov	r3, r2
 80134a4:	009b      	lsls	r3, r3, #2
 80134a6:	4413      	add	r3, r2
 80134a8:	00db      	lsls	r3, r3, #3
 80134aa:	440b      	add	r3, r1
 80134ac:	3310      	adds	r3, #16
 80134ae:	ed93 7a00 	vldr	s14, [r3]
 80134b2:	4b22      	ldr	r3, [pc, #136]	@ (801353c <MAP_refPos+0x360>)
 80134b4:	edd3 7a00 	vldr	s15, [r3]
 80134b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134bc:	4b1f      	ldr	r3, [pc, #124]	@ (801353c <MAP_refPos+0x360>)
 80134be:	edc3 7a00 	vstr	s15, [r3]
			break;
 80134c2:	e12d      	b.n	8013720 <MAP_refPos+0x544>
		/* [4]南 [5]南西 */
		case 4:
		case 5:

			/* 直進 */
			if( uc_index == 14 ){
 80134c4:	7bfb      	ldrb	r3, [r7, #15]
 80134c6:	2b0e      	cmp	r3, #14
 80134c8:	d13a      	bne.n	8013540 <MAP_refPos+0x364>
				
				f_PosX += st_PosData[uc_index].f_x4_x5 * uc_cmd;
 80134ca:	7bfa      	ldrb	r2, [r7, #15]
 80134cc:	4918      	ldr	r1, [pc, #96]	@ (8013530 <MAP_refPos+0x354>)
 80134ce:	4613      	mov	r3, r2
 80134d0:	009b      	lsls	r3, r3, #2
 80134d2:	4413      	add	r3, r2
 80134d4:	00db      	lsls	r3, r3, #3
 80134d6:	440b      	add	r3, r1
 80134d8:	3314      	adds	r3, #20
 80134da:	ed93 7a00 	vldr	s14, [r3]
 80134de:	79fb      	ldrb	r3, [r7, #7]
 80134e0:	ee07 3a90 	vmov	s15, r3
 80134e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80134ec:	4b12      	ldr	r3, [pc, #72]	@ (8013538 <MAP_refPos+0x35c>)
 80134ee:	edd3 7a00 	vldr	s15, [r3]
 80134f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134f6:	4b10      	ldr	r3, [pc, #64]	@ (8013538 <MAP_refPos+0x35c>)
 80134f8:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y4_y5 * uc_cmd;
 80134fc:	7bfa      	ldrb	r2, [r7, #15]
 80134fe:	490c      	ldr	r1, [pc, #48]	@ (8013530 <MAP_refPos+0x354>)
 8013500:	4613      	mov	r3, r2
 8013502:	009b      	lsls	r3, r3, #2
 8013504:	4413      	add	r3, r2
 8013506:	00db      	lsls	r3, r3, #3
 8013508:	440b      	add	r3, r1
 801350a:	3318      	adds	r3, #24
 801350c:	ed93 7a00 	vldr	s14, [r3]
 8013510:	79fb      	ldrb	r3, [r7, #7]
 8013512:	ee07 3a90 	vmov	s15, r3
 8013516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801351a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801351e:	4b07      	ldr	r3, [pc, #28]	@ (801353c <MAP_refPos+0x360>)
 8013520:	edd3 7a00 	vldr	s15, [r3]
 8013524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013528:	4b04      	ldr	r3, [pc, #16]	@ (801353c <MAP_refPos+0x360>)
 801352a:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x4_x5;
				f_PosY += st_PosData[uc_index].f_y4_y5;
			}
			break;
 801352e:	e0f7      	b.n	8013720 <MAP_refPos+0x544>
 8013530:	080221ec 	.word	0x080221ec
 8013534:	2001ac54 	.word	0x2001ac54
 8013538:	2001ac4c 	.word	0x2001ac4c
 801353c:	2001ac50 	.word	0x2001ac50
			else if( uc_index == 15 ){
 8013540:	7bfb      	ldrb	r3, [r7, #15]
 8013542:	2b0f      	cmp	r3, #15
 8013544:	d134      	bne.n	80135b0 <MAP_refPos+0x3d4>
				f_PosX += st_PosData[uc_index].f_x4_x5 * ( uc_cmd - 81 );
 8013546:	7bfa      	ldrb	r2, [r7, #15]
 8013548:	49a4      	ldr	r1, [pc, #656]	@ (80137dc <MAP_refPos+0x600>)
 801354a:	4613      	mov	r3, r2
 801354c:	009b      	lsls	r3, r3, #2
 801354e:	4413      	add	r3, r2
 8013550:	00db      	lsls	r3, r3, #3
 8013552:	440b      	add	r3, r1
 8013554:	3314      	adds	r3, #20
 8013556:	ed93 7a00 	vldr	s14, [r3]
 801355a:	79fb      	ldrb	r3, [r7, #7]
 801355c:	3b51      	subs	r3, #81	@ 0x51
 801355e:	ee07 3a90 	vmov	s15, r3
 8013562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013566:	ee27 7a27 	vmul.f32	s14, s14, s15
 801356a:	4b9d      	ldr	r3, [pc, #628]	@ (80137e0 <MAP_refPos+0x604>)
 801356c:	edd3 7a00 	vldr	s15, [r3]
 8013570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013574:	4b9a      	ldr	r3, [pc, #616]	@ (80137e0 <MAP_refPos+0x604>)
 8013576:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y4_y5 * ( uc_cmd - 81 );
 801357a:	7bfa      	ldrb	r2, [r7, #15]
 801357c:	4997      	ldr	r1, [pc, #604]	@ (80137dc <MAP_refPos+0x600>)
 801357e:	4613      	mov	r3, r2
 8013580:	009b      	lsls	r3, r3, #2
 8013582:	4413      	add	r3, r2
 8013584:	00db      	lsls	r3, r3, #3
 8013586:	440b      	add	r3, r1
 8013588:	3318      	adds	r3, #24
 801358a:	ed93 7a00 	vldr	s14, [r3]
 801358e:	79fb      	ldrb	r3, [r7, #7]
 8013590:	3b51      	subs	r3, #81	@ 0x51
 8013592:	ee07 3a90 	vmov	s15, r3
 8013596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801359a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801359e:	4b91      	ldr	r3, [pc, #580]	@ (80137e4 <MAP_refPos+0x608>)
 80135a0:	edd3 7a00 	vldr	s15, [r3]
 80135a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80135a8:	4b8e      	ldr	r3, [pc, #568]	@ (80137e4 <MAP_refPos+0x608>)
 80135aa:	edc3 7a00 	vstr	s15, [r3]
			break;
 80135ae:	e0b7      	b.n	8013720 <MAP_refPos+0x544>
				f_PosX += st_PosData[uc_index].f_x4_x5;
 80135b0:	7bfa      	ldrb	r2, [r7, #15]
 80135b2:	498a      	ldr	r1, [pc, #552]	@ (80137dc <MAP_refPos+0x600>)
 80135b4:	4613      	mov	r3, r2
 80135b6:	009b      	lsls	r3, r3, #2
 80135b8:	4413      	add	r3, r2
 80135ba:	00db      	lsls	r3, r3, #3
 80135bc:	440b      	add	r3, r1
 80135be:	3314      	adds	r3, #20
 80135c0:	ed93 7a00 	vldr	s14, [r3]
 80135c4:	4b86      	ldr	r3, [pc, #536]	@ (80137e0 <MAP_refPos+0x604>)
 80135c6:	edd3 7a00 	vldr	s15, [r3]
 80135ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80135ce:	4b84      	ldr	r3, [pc, #528]	@ (80137e0 <MAP_refPos+0x604>)
 80135d0:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y4_y5;
 80135d4:	7bfa      	ldrb	r2, [r7, #15]
 80135d6:	4981      	ldr	r1, [pc, #516]	@ (80137dc <MAP_refPos+0x600>)
 80135d8:	4613      	mov	r3, r2
 80135da:	009b      	lsls	r3, r3, #2
 80135dc:	4413      	add	r3, r2
 80135de:	00db      	lsls	r3, r3, #3
 80135e0:	440b      	add	r3, r1
 80135e2:	3318      	adds	r3, #24
 80135e4:	ed93 7a00 	vldr	s14, [r3]
 80135e8:	4b7e      	ldr	r3, [pc, #504]	@ (80137e4 <MAP_refPos+0x608>)
 80135ea:	edd3 7a00 	vldr	s15, [r3]
 80135ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80135f2:	4b7c      	ldr	r3, [pc, #496]	@ (80137e4 <MAP_refPos+0x608>)
 80135f4:	edc3 7a00 	vstr	s15, [r3]
			break;
 80135f8:	e092      	b.n	8013720 <MAP_refPos+0x544>
		/* [6]西 [7]北西 */
		case 6:
		case 7:

			/* 直進 */
			if( uc_index == 14 ){
 80135fa:	7bfb      	ldrb	r3, [r7, #15]
 80135fc:	2b0e      	cmp	r3, #14
 80135fe:	d132      	bne.n	8013666 <MAP_refPos+0x48a>
				
				f_PosX += st_PosData[uc_index].f_x6_x7 * uc_cmd;
 8013600:	7bfa      	ldrb	r2, [r7, #15]
 8013602:	4976      	ldr	r1, [pc, #472]	@ (80137dc <MAP_refPos+0x600>)
 8013604:	4613      	mov	r3, r2
 8013606:	009b      	lsls	r3, r3, #2
 8013608:	4413      	add	r3, r2
 801360a:	00db      	lsls	r3, r3, #3
 801360c:	440b      	add	r3, r1
 801360e:	331c      	adds	r3, #28
 8013610:	ed93 7a00 	vldr	s14, [r3]
 8013614:	79fb      	ldrb	r3, [r7, #7]
 8013616:	ee07 3a90 	vmov	s15, r3
 801361a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801361e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013622:	4b6f      	ldr	r3, [pc, #444]	@ (80137e0 <MAP_refPos+0x604>)
 8013624:	edd3 7a00 	vldr	s15, [r3]
 8013628:	ee77 7a27 	vadd.f32	s15, s14, s15
 801362c:	4b6c      	ldr	r3, [pc, #432]	@ (80137e0 <MAP_refPos+0x604>)
 801362e:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y6_y7 * uc_cmd;
 8013632:	7bfa      	ldrb	r2, [r7, #15]
 8013634:	4969      	ldr	r1, [pc, #420]	@ (80137dc <MAP_refPos+0x600>)
 8013636:	4613      	mov	r3, r2
 8013638:	009b      	lsls	r3, r3, #2
 801363a:	4413      	add	r3, r2
 801363c:	00db      	lsls	r3, r3, #3
 801363e:	440b      	add	r3, r1
 8013640:	3320      	adds	r3, #32
 8013642:	ed93 7a00 	vldr	s14, [r3]
 8013646:	79fb      	ldrb	r3, [r7, #7]
 8013648:	ee07 3a90 	vmov	s15, r3
 801364c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013654:	4b63      	ldr	r3, [pc, #396]	@ (80137e4 <MAP_refPos+0x608>)
 8013656:	edd3 7a00 	vldr	s15, [r3]
 801365a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801365e:	4b61      	ldr	r3, [pc, #388]	@ (80137e4 <MAP_refPos+0x608>)
 8013660:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x6_x7;
				f_PosY += st_PosData[uc_index].f_y6_y7;
			}
			break;
 8013664:	e05b      	b.n	801371e <MAP_refPos+0x542>
			else if( uc_index == 15 ){
 8013666:	7bfb      	ldrb	r3, [r7, #15]
 8013668:	2b0f      	cmp	r3, #15
 801366a:	d134      	bne.n	80136d6 <MAP_refPos+0x4fa>
				f_PosX += st_PosData[uc_index].f_x6_x7 * ( uc_cmd - 81 );
 801366c:	7bfa      	ldrb	r2, [r7, #15]
 801366e:	495b      	ldr	r1, [pc, #364]	@ (80137dc <MAP_refPos+0x600>)
 8013670:	4613      	mov	r3, r2
 8013672:	009b      	lsls	r3, r3, #2
 8013674:	4413      	add	r3, r2
 8013676:	00db      	lsls	r3, r3, #3
 8013678:	440b      	add	r3, r1
 801367a:	331c      	adds	r3, #28
 801367c:	ed93 7a00 	vldr	s14, [r3]
 8013680:	79fb      	ldrb	r3, [r7, #7]
 8013682:	3b51      	subs	r3, #81	@ 0x51
 8013684:	ee07 3a90 	vmov	s15, r3
 8013688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801368c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013690:	4b53      	ldr	r3, [pc, #332]	@ (80137e0 <MAP_refPos+0x604>)
 8013692:	edd3 7a00 	vldr	s15, [r3]
 8013696:	ee77 7a27 	vadd.f32	s15, s14, s15
 801369a:	4b51      	ldr	r3, [pc, #324]	@ (80137e0 <MAP_refPos+0x604>)
 801369c:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y6_y7 * ( uc_cmd - 81 );
 80136a0:	7bfa      	ldrb	r2, [r7, #15]
 80136a2:	494e      	ldr	r1, [pc, #312]	@ (80137dc <MAP_refPos+0x600>)
 80136a4:	4613      	mov	r3, r2
 80136a6:	009b      	lsls	r3, r3, #2
 80136a8:	4413      	add	r3, r2
 80136aa:	00db      	lsls	r3, r3, #3
 80136ac:	440b      	add	r3, r1
 80136ae:	3320      	adds	r3, #32
 80136b0:	ed93 7a00 	vldr	s14, [r3]
 80136b4:	79fb      	ldrb	r3, [r7, #7]
 80136b6:	3b51      	subs	r3, #81	@ 0x51
 80136b8:	ee07 3a90 	vmov	s15, r3
 80136bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80136c4:	4b47      	ldr	r3, [pc, #284]	@ (80137e4 <MAP_refPos+0x608>)
 80136c6:	edd3 7a00 	vldr	s15, [r3]
 80136ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80136ce:	4b45      	ldr	r3, [pc, #276]	@ (80137e4 <MAP_refPos+0x608>)
 80136d0:	edc3 7a00 	vstr	s15, [r3]
			break;
 80136d4:	e023      	b.n	801371e <MAP_refPos+0x542>
				f_PosX += st_PosData[uc_index].f_x6_x7;
 80136d6:	7bfa      	ldrb	r2, [r7, #15]
 80136d8:	4940      	ldr	r1, [pc, #256]	@ (80137dc <MAP_refPos+0x600>)
 80136da:	4613      	mov	r3, r2
 80136dc:	009b      	lsls	r3, r3, #2
 80136de:	4413      	add	r3, r2
 80136e0:	00db      	lsls	r3, r3, #3
 80136e2:	440b      	add	r3, r1
 80136e4:	331c      	adds	r3, #28
 80136e6:	ed93 7a00 	vldr	s14, [r3]
 80136ea:	4b3d      	ldr	r3, [pc, #244]	@ (80137e0 <MAP_refPos+0x604>)
 80136ec:	edd3 7a00 	vldr	s15, [r3]
 80136f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80136f4:	4b3a      	ldr	r3, [pc, #232]	@ (80137e0 <MAP_refPos+0x604>)
 80136f6:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y6_y7;
 80136fa:	7bfa      	ldrb	r2, [r7, #15]
 80136fc:	4937      	ldr	r1, [pc, #220]	@ (80137dc <MAP_refPos+0x600>)
 80136fe:	4613      	mov	r3, r2
 8013700:	009b      	lsls	r3, r3, #2
 8013702:	4413      	add	r3, r2
 8013704:	00db      	lsls	r3, r3, #3
 8013706:	440b      	add	r3, r1
 8013708:	3320      	adds	r3, #32
 801370a:	ed93 7a00 	vldr	s14, [r3]
 801370e:	4b35      	ldr	r3, [pc, #212]	@ (80137e4 <MAP_refPos+0x608>)
 8013710:	edd3 7a00 	vldr	s15, [r3]
 8013714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013718:	4b32      	ldr	r3, [pc, #200]	@ (80137e4 <MAP_refPos+0x608>)
 801371a:	edc3 7a00 	vstr	s15, [r3]
			break;
 801371e:	bf00      	nop
	}
	
	/* 進行方向更新 */
	s_PosDir += st_PosData[uc_index].s_dir;
 8013720:	7bfa      	ldrb	r2, [r7, #15]
 8013722:	492e      	ldr	r1, [pc, #184]	@ (80137dc <MAP_refPos+0x600>)
 8013724:	4613      	mov	r3, r2
 8013726:	009b      	lsls	r3, r3, #2
 8013728:	4413      	add	r3, r2
 801372a:	00db      	lsls	r3, r3, #3
 801372c:	440b      	add	r3, r1
 801372e:	3324      	adds	r3, #36	@ 0x24
 8013730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013734:	b29a      	uxth	r2, r3
 8013736:	4b2c      	ldr	r3, [pc, #176]	@ (80137e8 <MAP_refPos+0x60c>)
 8013738:	f9b3 3000 	ldrsh.w	r3, [r3]
 801373c:	b29b      	uxth	r3, r3
 801373e:	4413      	add	r3, r2
 8013740:	b29b      	uxth	r3, r3
 8013742:	b21a      	sxth	r2, r3
 8013744:	4b28      	ldr	r3, [pc, #160]	@ (80137e8 <MAP_refPos+0x60c>)
 8013746:	801a      	strh	r2, [r3, #0]
	if( s_PosDir < 0 ) s_PosDir += 8;				// [0]～[7]にしたい
 8013748:	4b27      	ldr	r3, [pc, #156]	@ (80137e8 <MAP_refPos+0x60c>)
 801374a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801374e:	2b00      	cmp	r3, #0
 8013750:	da09      	bge.n	8013766 <MAP_refPos+0x58a>
 8013752:	4b25      	ldr	r3, [pc, #148]	@ (80137e8 <MAP_refPos+0x60c>)
 8013754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013758:	b29b      	uxth	r3, r3
 801375a:	3308      	adds	r3, #8
 801375c:	b29b      	uxth	r3, r3
 801375e:	b21a      	sxth	r2, r3
 8013760:	4b21      	ldr	r3, [pc, #132]	@ (80137e8 <MAP_refPos+0x60c>)
 8013762:	801a      	strh	r2, [r3, #0]
 8013764:	e00d      	b.n	8013782 <MAP_refPos+0x5a6>
	else if( s_PosDir > 7 ) s_PosDir -= 8;
 8013766:	4b20      	ldr	r3, [pc, #128]	@ (80137e8 <MAP_refPos+0x60c>)
 8013768:	f9b3 3000 	ldrsh.w	r3, [r3]
 801376c:	2b07      	cmp	r3, #7
 801376e:	dd08      	ble.n	8013782 <MAP_refPos+0x5a6>
 8013770:	4b1d      	ldr	r3, [pc, #116]	@ (80137e8 <MAP_refPos+0x60c>)
 8013772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013776:	b29b      	uxth	r3, r3
 8013778:	3b08      	subs	r3, #8
 801377a:	b29b      	uxth	r3, r3
 801377c:	b21a      	sxth	r2, r3
 801377e:	4b1a      	ldr	r3, [pc, #104]	@ (80137e8 <MAP_refPos+0x60c>)
 8013780:	801a      	strh	r2, [r3, #0]
	
	f_LogPosX[us_LogIndex] = f_PosX;
 8013782:	4b1a      	ldr	r3, [pc, #104]	@ (80137ec <MAP_refPos+0x610>)
 8013784:	881b      	ldrh	r3, [r3, #0]
 8013786:	4618      	mov	r0, r3
 8013788:	4b15      	ldr	r3, [pc, #84]	@ (80137e0 <MAP_refPos+0x604>)
 801378a:	681a      	ldr	r2, [r3, #0]
 801378c:	4918      	ldr	r1, [pc, #96]	@ (80137f0 <MAP_refPos+0x614>)
 801378e:	0083      	lsls	r3, r0, #2
 8013790:	440b      	add	r3, r1
 8013792:	601a      	str	r2, [r3, #0]
	f_LogPosY[us_LogIndex] = f_PosY;
 8013794:	4b15      	ldr	r3, [pc, #84]	@ (80137ec <MAP_refPos+0x610>)
 8013796:	881b      	ldrh	r3, [r3, #0]
 8013798:	4618      	mov	r0, r3
 801379a:	4b12      	ldr	r3, [pc, #72]	@ (80137e4 <MAP_refPos+0x608>)
 801379c:	681a      	ldr	r2, [r3, #0]
 801379e:	4915      	ldr	r1, [pc, #84]	@ (80137f4 <MAP_refPos+0x618>)
 80137a0:	0083      	lsls	r3, r0, #2
 80137a2:	440b      	add	r3, r1
 80137a4:	601a      	str	r2, [r3, #0]
	
	us_LogIndex++;
 80137a6:	4b11      	ldr	r3, [pc, #68]	@ (80137ec <MAP_refPos+0x610>)
 80137a8:	881b      	ldrh	r3, [r3, #0]
 80137aa:	3301      	adds	r3, #1
 80137ac:	b29a      	uxth	r2, r3
 80137ae:	4b0f      	ldr	r3, [pc, #60]	@ (80137ec <MAP_refPos+0x610>)
 80137b0:	801a      	strh	r2, [r3, #0]
	us_LogIndex %= 30;
 80137b2:	4b0e      	ldr	r3, [pc, #56]	@ (80137ec <MAP_refPos+0x610>)
 80137b4:	881a      	ldrh	r2, [r3, #0]
 80137b6:	4b10      	ldr	r3, [pc, #64]	@ (80137f8 <MAP_refPos+0x61c>)
 80137b8:	fba3 1302 	umull	r1, r3, r3, r2
 80137bc:	0919      	lsrs	r1, r3, #4
 80137be:	460b      	mov	r3, r1
 80137c0:	011b      	lsls	r3, r3, #4
 80137c2:	1a5b      	subs	r3, r3, r1
 80137c4:	005b      	lsls	r3, r3, #1
 80137c6:	1ad3      	subs	r3, r2, r3
 80137c8:	b29a      	uxth	r2, r3
 80137ca:	4b08      	ldr	r3, [pc, #32]	@ (80137ec <MAP_refPos+0x610>)
 80137cc:	801a      	strh	r2, [r3, #0]
 80137ce:	e000      	b.n	80137d2 <MAP_refPos+0x5f6>
			if( st_PosData[uc_index].en_cmd == MAP_CMD_MAX ) return;		// コマンド未発見
 80137d0:	bf00      	nop
}
 80137d2:	3714      	adds	r7, #20
 80137d4:	46bd      	mov	sp, r7
 80137d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137da:	4770      	bx	lr
 80137dc:	080221ec 	.word	0x080221ec
 80137e0:	2001ac4c 	.word	0x2001ac4c
 80137e4:	2001ac50 	.word	0x2001ac50
 80137e8:	2001ac54 	.word	0x2001ac54
 80137ec:	2001ad48 	.word	0x2001ad48
 80137f0:	2001ac58 	.word	0x2001ac58
 80137f4:	2001acd0 	.word	0x2001acd0
 80137f8:	88888889 	.word	0x88888889

080137fc <MAP_setWallCut>:

bool MAP_setWallCut( uint8_t uc_cmd )
{
 80137fc:	b590      	push	{r4, r7, lr}
 80137fe:	b085      	sub	sp, #20
 8013800:	af00      	add	r7, sp, #0
 8013802:	4603      	mov	r3, r0
 8013804:	71fb      	strb	r3, [r7, #7]
	uint8_t uc_val = 0;			// 1区画前のコーナー側の壁があるか（0以外なら壁あり）
 8013806:	2300      	movs	r3, #0
 8013808:	73fb      	strb	r3, [r7, #15]
	uint8_t uc_valPrev = 0;		// 2区画前のコーナー側の壁があるか（0以外なら壁あり）
 801380a:	2300      	movs	r3, #0
 801380c:	73bb      	strb	r3, [r7, #14]
	bool bl_wallCut = FALSE;
 801380e:	2300      	movs	r3, #0
 8013810:	737b      	strb	r3, [r7, #13]
	
	/* 位置更新 */
	switch( uc_cmd ){
 8013812:	79fb      	ldrb	r3, [r7, #7]
 8013814:	2b9c      	cmp	r3, #156	@ 0x9c
 8013816:	f000 822a 	beq.w	8013c6e <MAP_setWallCut+0x472>
 801381a:	2b9c      	cmp	r3, #156	@ 0x9c
 801381c:	f300 843f 	bgt.w	801409e <MAP_setWallCut+0x8a2>
 8013820:	2b9b      	cmp	r3, #155	@ 0x9b
 8013822:	d009      	beq.n	8013838 <MAP_setWallCut+0x3c>
 8013824:	2b9b      	cmp	r3, #155	@ 0x9b
 8013826:	f300 843a 	bgt.w	801409e <MAP_setWallCut+0x8a2>
 801382a:	2b4c      	cmp	r3, #76	@ 0x4c
 801382c:	d004      	beq.n	8013838 <MAP_setWallCut+0x3c>
 801382e:	2b4d      	cmp	r3, #77	@ 0x4d
 8013830:	f000 821d 	beq.w	8013c6e <MAP_setWallCut+0x472>
				bl_wallCut = TRUE;
			}
			break;
			
		default:
			break;
 8013834:	f000 bc33 	b.w	801409e <MAP_setWallCut+0x8a2>
			switch( s_PosDir ){
 8013838:	4bc1      	ldr	r3, [pc, #772]	@ (8013b40 <MAP_setWallCut+0x344>)
 801383a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801383e:	2b06      	cmp	r3, #6
 8013840:	f200 8204 	bhi.w	8013c4c <MAP_setWallCut+0x450>
 8013844:	a201      	add	r2, pc, #4	@ (adr r2, 801384c <MAP_setWallCut+0x50>)
 8013846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801384a:	bf00      	nop
 801384c:	08013869 	.word	0x08013869
 8013850:	08013c4d 	.word	0x08013c4d
 8013854:	0801395d 	.word	0x0801395d
 8013858:	08013c4d 	.word	0x08013c4d
 801385c:	08013a51 	.word	0x08013a51
 8013860:	08013c4d 	.word	0x08013c4d
 8013864:	08013b5d 	.word	0x08013b5d
					if( 0 < f_PosY-0.5 ) uc_val     = g_SysMap[(uint8_t)(f_PosY-0.5)][(uint8_t)(f_PosX)] & 0x02;		// 北を向いているので東側の壁があるか
 8013868:	4bb6      	ldr	r3, [pc, #728]	@ (8013b44 <MAP_setWallCut+0x348>)
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	4618      	mov	r0, r3
 801386e:	f7ec fe93 	bl	8000598 <__aeabi_f2d>
 8013872:	f04f 0200 	mov.w	r2, #0
 8013876:	4bb4      	ldr	r3, [pc, #720]	@ (8013b48 <MAP_setWallCut+0x34c>)
 8013878:	f7ec fd2e 	bl	80002d8 <__aeabi_dsub>
 801387c:	4602      	mov	r2, r0
 801387e:	460b      	mov	r3, r1
 8013880:	4610      	mov	r0, r2
 8013882:	4619      	mov	r1, r3
 8013884:	f04f 0200 	mov.w	r2, #0
 8013888:	f04f 0300 	mov.w	r3, #0
 801388c:	f7ed f96c 	bl	8000b68 <__aeabi_dcmpgt>
 8013890:	4603      	mov	r3, r0
 8013892:	2b00      	cmp	r3, #0
 8013894:	d024      	beq.n	80138e0 <MAP_setWallCut+0xe4>
 8013896:	4bab      	ldr	r3, [pc, #684]	@ (8013b44 <MAP_setWallCut+0x348>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	4618      	mov	r0, r3
 801389c:	f7ec fe7c 	bl	8000598 <__aeabi_f2d>
 80138a0:	f04f 0200 	mov.w	r2, #0
 80138a4:	4ba8      	ldr	r3, [pc, #672]	@ (8013b48 <MAP_setWallCut+0x34c>)
 80138a6:	f7ec fd17 	bl	80002d8 <__aeabi_dsub>
 80138aa:	4602      	mov	r2, r0
 80138ac:	460b      	mov	r3, r1
 80138ae:	4610      	mov	r0, r2
 80138b0:	4619      	mov	r1, r3
 80138b2:	f7ed f9a1 	bl	8000bf8 <__aeabi_d2uiz>
 80138b6:	4603      	mov	r3, r0
 80138b8:	b2db      	uxtb	r3, r3
 80138ba:	4618      	mov	r0, r3
 80138bc:	4ba3      	ldr	r3, [pc, #652]	@ (8013b4c <MAP_setWallCut+0x350>)
 80138be:	edd3 7a00 	vldr	s15, [r3]
 80138c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80138c6:	edc7 7a00 	vstr	s15, [r7]
 80138ca:	783b      	ldrb	r3, [r7, #0]
 80138cc:	b2db      	uxtb	r3, r3
 80138ce:	4619      	mov	r1, r3
 80138d0:	4a9f      	ldr	r2, [pc, #636]	@ (8013b50 <MAP_setWallCut+0x354>)
 80138d2:	0143      	lsls	r3, r0, #5
 80138d4:	4413      	add	r3, r2
 80138d6:	440b      	add	r3, r1
 80138d8:	781b      	ldrb	r3, [r3, #0]
 80138da:	f003 0302 	and.w	r3, r3, #2
 80138de:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x02;		// 北を向いているので東側の壁があるか
 80138e0:	4b98      	ldr	r3, [pc, #608]	@ (8013b44 <MAP_setWallCut+0x348>)
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	4618      	mov	r0, r3
 80138e6:	f7ec fe57 	bl	8000598 <__aeabi_f2d>
 80138ea:	f04f 0200 	mov.w	r2, #0
 80138ee:	4b99      	ldr	r3, [pc, #612]	@ (8013b54 <MAP_setWallCut+0x358>)
 80138f0:	f7ec fcf2 	bl	80002d8 <__aeabi_dsub>
 80138f4:	4602      	mov	r2, r0
 80138f6:	460b      	mov	r3, r1
 80138f8:	4610      	mov	r0, r2
 80138fa:	4619      	mov	r1, r3
 80138fc:	f04f 0200 	mov.w	r2, #0
 8013900:	f04f 0300 	mov.w	r3, #0
 8013904:	f7ed f930 	bl	8000b68 <__aeabi_dcmpgt>
 8013908:	4603      	mov	r3, r0
 801390a:	2b00      	cmp	r3, #0
 801390c:	d100      	bne.n	8013910 <MAP_setWallCut+0x114>
					break;	
 801390e:	e19d      	b.n	8013c4c <MAP_setWallCut+0x450>
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x02;		// 北を向いているので東側の壁があるか
 8013910:	4b8c      	ldr	r3, [pc, #560]	@ (8013b44 <MAP_setWallCut+0x348>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	4618      	mov	r0, r3
 8013916:	f7ec fe3f 	bl	8000598 <__aeabi_f2d>
 801391a:	f04f 0200 	mov.w	r2, #0
 801391e:	4b8d      	ldr	r3, [pc, #564]	@ (8013b54 <MAP_setWallCut+0x358>)
 8013920:	f7ec fcda 	bl	80002d8 <__aeabi_dsub>
 8013924:	4602      	mov	r2, r0
 8013926:	460b      	mov	r3, r1
 8013928:	4610      	mov	r0, r2
 801392a:	4619      	mov	r1, r3
 801392c:	f7ed f964 	bl	8000bf8 <__aeabi_d2uiz>
 8013930:	4603      	mov	r3, r0
 8013932:	b2db      	uxtb	r3, r3
 8013934:	4618      	mov	r0, r3
 8013936:	4b85      	ldr	r3, [pc, #532]	@ (8013b4c <MAP_setWallCut+0x350>)
 8013938:	edd3 7a00 	vldr	s15, [r3]
 801393c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013940:	edc7 7a00 	vstr	s15, [r7]
 8013944:	783b      	ldrb	r3, [r7, #0]
 8013946:	b2db      	uxtb	r3, r3
 8013948:	4619      	mov	r1, r3
 801394a:	4a81      	ldr	r2, [pc, #516]	@ (8013b50 <MAP_setWallCut+0x354>)
 801394c:	0143      	lsls	r3, r0, #5
 801394e:	4413      	add	r3, r2
 8013950:	440b      	add	r3, r1
 8013952:	781b      	ldrb	r3, [r3, #0]
 8013954:	f003 0302 	and.w	r3, r3, #2
 8013958:	73bb      	strb	r3, [r7, #14]
					break;	
 801395a:	e177      	b.n	8013c4c <MAP_setWallCut+0x450>
					if( 0 < f_PosX-0.5 ) uc_val     = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-0.5)] & 0x04;		// 東を向いているので南側の壁があるか
 801395c:	4b7b      	ldr	r3, [pc, #492]	@ (8013b4c <MAP_setWallCut+0x350>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	4618      	mov	r0, r3
 8013962:	f7ec fe19 	bl	8000598 <__aeabi_f2d>
 8013966:	f04f 0200 	mov.w	r2, #0
 801396a:	4b77      	ldr	r3, [pc, #476]	@ (8013b48 <MAP_setWallCut+0x34c>)
 801396c:	f7ec fcb4 	bl	80002d8 <__aeabi_dsub>
 8013970:	4602      	mov	r2, r0
 8013972:	460b      	mov	r3, r1
 8013974:	4610      	mov	r0, r2
 8013976:	4619      	mov	r1, r3
 8013978:	f04f 0200 	mov.w	r2, #0
 801397c:	f04f 0300 	mov.w	r3, #0
 8013980:	f7ed f8f2 	bl	8000b68 <__aeabi_dcmpgt>
 8013984:	4603      	mov	r3, r0
 8013986:	2b00      	cmp	r3, #0
 8013988:	d024      	beq.n	80139d4 <MAP_setWallCut+0x1d8>
 801398a:	4b6e      	ldr	r3, [pc, #440]	@ (8013b44 <MAP_setWallCut+0x348>)
 801398c:	edd3 7a00 	vldr	s15, [r3]
 8013990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013994:	edc7 7a00 	vstr	s15, [r7]
 8013998:	783b      	ldrb	r3, [r7, #0]
 801399a:	b2db      	uxtb	r3, r3
 801399c:	461c      	mov	r4, r3
 801399e:	4b6b      	ldr	r3, [pc, #428]	@ (8013b4c <MAP_setWallCut+0x350>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	4618      	mov	r0, r3
 80139a4:	f7ec fdf8 	bl	8000598 <__aeabi_f2d>
 80139a8:	f04f 0200 	mov.w	r2, #0
 80139ac:	4b66      	ldr	r3, [pc, #408]	@ (8013b48 <MAP_setWallCut+0x34c>)
 80139ae:	f7ec fc93 	bl	80002d8 <__aeabi_dsub>
 80139b2:	4602      	mov	r2, r0
 80139b4:	460b      	mov	r3, r1
 80139b6:	4610      	mov	r0, r2
 80139b8:	4619      	mov	r1, r3
 80139ba:	f7ed f91d 	bl	8000bf8 <__aeabi_d2uiz>
 80139be:	4603      	mov	r3, r0
 80139c0:	b2db      	uxtb	r3, r3
 80139c2:	4619      	mov	r1, r3
 80139c4:	4a62      	ldr	r2, [pc, #392]	@ (8013b50 <MAP_setWallCut+0x354>)
 80139c6:	0163      	lsls	r3, r4, #5
 80139c8:	4413      	add	r3, r2
 80139ca:	440b      	add	r3, r1
 80139cc:	781b      	ldrb	r3, [r3, #0]
 80139ce:	f003 0304 	and.w	r3, r3, #4
 80139d2:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x04;		// 東を向いているので南側の壁があるか
 80139d4:	4b5d      	ldr	r3, [pc, #372]	@ (8013b4c <MAP_setWallCut+0x350>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	4618      	mov	r0, r3
 80139da:	f7ec fddd 	bl	8000598 <__aeabi_f2d>
 80139de:	f04f 0200 	mov.w	r2, #0
 80139e2:	4b5c      	ldr	r3, [pc, #368]	@ (8013b54 <MAP_setWallCut+0x358>)
 80139e4:	f7ec fc78 	bl	80002d8 <__aeabi_dsub>
 80139e8:	4602      	mov	r2, r0
 80139ea:	460b      	mov	r3, r1
 80139ec:	4610      	mov	r0, r2
 80139ee:	4619      	mov	r1, r3
 80139f0:	f04f 0200 	mov.w	r2, #0
 80139f4:	f04f 0300 	mov.w	r3, #0
 80139f8:	f7ed f8b6 	bl	8000b68 <__aeabi_dcmpgt>
 80139fc:	4603      	mov	r3, r0
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d100      	bne.n	8013a04 <MAP_setWallCut+0x208>
					break;
 8013a02:	e123      	b.n	8013c4c <MAP_setWallCut+0x450>
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x04;		// 東を向いているので南側の壁があるか
 8013a04:	4b4f      	ldr	r3, [pc, #316]	@ (8013b44 <MAP_setWallCut+0x348>)
 8013a06:	edd3 7a00 	vldr	s15, [r3]
 8013a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013a0e:	edc7 7a00 	vstr	s15, [r7]
 8013a12:	783b      	ldrb	r3, [r7, #0]
 8013a14:	b2db      	uxtb	r3, r3
 8013a16:	461c      	mov	r4, r3
 8013a18:	4b4c      	ldr	r3, [pc, #304]	@ (8013b4c <MAP_setWallCut+0x350>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	f7ec fdbb 	bl	8000598 <__aeabi_f2d>
 8013a22:	f04f 0200 	mov.w	r2, #0
 8013a26:	4b4b      	ldr	r3, [pc, #300]	@ (8013b54 <MAP_setWallCut+0x358>)
 8013a28:	f7ec fc56 	bl	80002d8 <__aeabi_dsub>
 8013a2c:	4602      	mov	r2, r0
 8013a2e:	460b      	mov	r3, r1
 8013a30:	4610      	mov	r0, r2
 8013a32:	4619      	mov	r1, r3
 8013a34:	f7ed f8e0 	bl	8000bf8 <__aeabi_d2uiz>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	b2db      	uxtb	r3, r3
 8013a3c:	4619      	mov	r1, r3
 8013a3e:	4a44      	ldr	r2, [pc, #272]	@ (8013b50 <MAP_setWallCut+0x354>)
 8013a40:	0163      	lsls	r3, r4, #5
 8013a42:	4413      	add	r3, r2
 8013a44:	440b      	add	r3, r1
 8013a46:	781b      	ldrb	r3, [r3, #0]
 8013a48:	f003 0304 	and.w	r3, r3, #4
 8013a4c:	73bb      	strb	r3, [r7, #14]
					break;
 8013a4e:	e0fd      	b.n	8013c4c <MAP_setWallCut+0x450>
					if( MAP_Y_SIZE_REAL > f_PosY+0.5 ) uc_val     = g_SysMap[(uint8_t)(f_PosY+0.5)][(uint8_t)(f_PosX)] & 0x08;		// 南を向いているので西側の壁があるか
 8013a50:	4b3c      	ldr	r3, [pc, #240]	@ (8013b44 <MAP_setWallCut+0x348>)
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	4618      	mov	r0, r3
 8013a56:	f7ec fd9f 	bl	8000598 <__aeabi_f2d>
 8013a5a:	f04f 0200 	mov.w	r2, #0
 8013a5e:	4b3a      	ldr	r3, [pc, #232]	@ (8013b48 <MAP_setWallCut+0x34c>)
 8013a60:	f7ec fc3c 	bl	80002dc <__adddf3>
 8013a64:	4602      	mov	r2, r0
 8013a66:	460b      	mov	r3, r1
 8013a68:	4610      	mov	r0, r2
 8013a6a:	4619      	mov	r1, r3
 8013a6c:	f04f 0200 	mov.w	r2, #0
 8013a70:	4b39      	ldr	r3, [pc, #228]	@ (8013b58 <MAP_setWallCut+0x35c>)
 8013a72:	f7ed f85b 	bl	8000b2c <__aeabi_dcmplt>
 8013a76:	4603      	mov	r3, r0
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d024      	beq.n	8013ac6 <MAP_setWallCut+0x2ca>
 8013a7c:	4b31      	ldr	r3, [pc, #196]	@ (8013b44 <MAP_setWallCut+0x348>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7ec fd89 	bl	8000598 <__aeabi_f2d>
 8013a86:	f04f 0200 	mov.w	r2, #0
 8013a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8013b48 <MAP_setWallCut+0x34c>)
 8013a8c:	f7ec fc26 	bl	80002dc <__adddf3>
 8013a90:	4602      	mov	r2, r0
 8013a92:	460b      	mov	r3, r1
 8013a94:	4610      	mov	r0, r2
 8013a96:	4619      	mov	r1, r3
 8013a98:	f7ed f8ae 	bl	8000bf8 <__aeabi_d2uiz>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	b2db      	uxtb	r3, r3
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8013b4c <MAP_setWallCut+0x350>)
 8013aa4:	edd3 7a00 	vldr	s15, [r3]
 8013aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013aac:	edc7 7a00 	vstr	s15, [r7]
 8013ab0:	783b      	ldrb	r3, [r7, #0]
 8013ab2:	b2db      	uxtb	r3, r3
 8013ab4:	4619      	mov	r1, r3
 8013ab6:	4a26      	ldr	r2, [pc, #152]	@ (8013b50 <MAP_setWallCut+0x354>)
 8013ab8:	0143      	lsls	r3, r0, #5
 8013aba:	4413      	add	r3, r2
 8013abc:	440b      	add	r3, r1
 8013abe:	781b      	ldrb	r3, [r3, #0]
 8013ac0:	f003 0308 	and.w	r3, r3, #8
 8013ac4:	73fb      	strb	r3, [r7, #15]
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x08;		// 南を向いているので西側の壁があるか
 8013ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8013b44 <MAP_setWallCut+0x348>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	4618      	mov	r0, r3
 8013acc:	f7ec fd64 	bl	8000598 <__aeabi_f2d>
 8013ad0:	f04f 0200 	mov.w	r2, #0
 8013ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8013b54 <MAP_setWallCut+0x358>)
 8013ad6:	f7ec fc01 	bl	80002dc <__adddf3>
 8013ada:	4602      	mov	r2, r0
 8013adc:	460b      	mov	r3, r1
 8013ade:	4610      	mov	r0, r2
 8013ae0:	4619      	mov	r1, r3
 8013ae2:	f04f 0200 	mov.w	r2, #0
 8013ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8013b58 <MAP_setWallCut+0x35c>)
 8013ae8:	f7ed f820 	bl	8000b2c <__aeabi_dcmplt>
 8013aec:	4603      	mov	r3, r0
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d100      	bne.n	8013af4 <MAP_setWallCut+0x2f8>
					break;
 8013af2:	e0ab      	b.n	8013c4c <MAP_setWallCut+0x450>
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x08;		// 南を向いているので西側の壁があるか
 8013af4:	4b13      	ldr	r3, [pc, #76]	@ (8013b44 <MAP_setWallCut+0x348>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7ec fd4d 	bl	8000598 <__aeabi_f2d>
 8013afe:	f04f 0200 	mov.w	r2, #0
 8013b02:	4b14      	ldr	r3, [pc, #80]	@ (8013b54 <MAP_setWallCut+0x358>)
 8013b04:	f7ec fbea 	bl	80002dc <__adddf3>
 8013b08:	4602      	mov	r2, r0
 8013b0a:	460b      	mov	r3, r1
 8013b0c:	4610      	mov	r0, r2
 8013b0e:	4619      	mov	r1, r3
 8013b10:	f7ed f872 	bl	8000bf8 <__aeabi_d2uiz>
 8013b14:	4603      	mov	r3, r0
 8013b16:	b2db      	uxtb	r3, r3
 8013b18:	4618      	mov	r0, r3
 8013b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8013b4c <MAP_setWallCut+0x350>)
 8013b1c:	edd3 7a00 	vldr	s15, [r3]
 8013b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013b24:	edc7 7a00 	vstr	s15, [r7]
 8013b28:	783b      	ldrb	r3, [r7, #0]
 8013b2a:	b2db      	uxtb	r3, r3
 8013b2c:	4619      	mov	r1, r3
 8013b2e:	4a08      	ldr	r2, [pc, #32]	@ (8013b50 <MAP_setWallCut+0x354>)
 8013b30:	0143      	lsls	r3, r0, #5
 8013b32:	4413      	add	r3, r2
 8013b34:	440b      	add	r3, r1
 8013b36:	781b      	ldrb	r3, [r3, #0]
 8013b38:	f003 0308 	and.w	r3, r3, #8
 8013b3c:	73bb      	strb	r3, [r7, #14]
					break;
 8013b3e:	e085      	b.n	8013c4c <MAP_setWallCut+0x450>
 8013b40:	2001ac54 	.word	0x2001ac54
 8013b44:	2001ac50 	.word	0x2001ac50
 8013b48:	3fe00000 	.word	0x3fe00000
 8013b4c:	2001ac4c 	.word	0x2001ac4c
 8013b50:	2001b5a0 	.word	0x2001b5a0
 8013b54:	3ff80000 	.word	0x3ff80000
 8013b58:	40400000 	.word	0x40400000
					if( MAP_X_SIZE_REAL > f_PosX+0.5 ) uc_val     = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+0.5)] & 0x01;		// 西を向いているので北側の壁があるか
 8013b5c:	4bb6      	ldr	r3, [pc, #728]	@ (8013e38 <MAP_setWallCut+0x63c>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	4618      	mov	r0, r3
 8013b62:	f7ec fd19 	bl	8000598 <__aeabi_f2d>
 8013b66:	f04f 0200 	mov.w	r2, #0
 8013b6a:	4bb4      	ldr	r3, [pc, #720]	@ (8013e3c <MAP_setWallCut+0x640>)
 8013b6c:	f7ec fbb6 	bl	80002dc <__adddf3>
 8013b70:	4602      	mov	r2, r0
 8013b72:	460b      	mov	r3, r1
 8013b74:	4610      	mov	r0, r2
 8013b76:	4619      	mov	r1, r3
 8013b78:	f04f 0200 	mov.w	r2, #0
 8013b7c:	4bb0      	ldr	r3, [pc, #704]	@ (8013e40 <MAP_setWallCut+0x644>)
 8013b7e:	f7ec ffd5 	bl	8000b2c <__aeabi_dcmplt>
 8013b82:	4603      	mov	r3, r0
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d024      	beq.n	8013bd2 <MAP_setWallCut+0x3d6>
 8013b88:	4bae      	ldr	r3, [pc, #696]	@ (8013e44 <MAP_setWallCut+0x648>)
 8013b8a:	edd3 7a00 	vldr	s15, [r3]
 8013b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013b92:	edc7 7a00 	vstr	s15, [r7]
 8013b96:	783b      	ldrb	r3, [r7, #0]
 8013b98:	b2db      	uxtb	r3, r3
 8013b9a:	461c      	mov	r4, r3
 8013b9c:	4ba6      	ldr	r3, [pc, #664]	@ (8013e38 <MAP_setWallCut+0x63c>)
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7ec fcf9 	bl	8000598 <__aeabi_f2d>
 8013ba6:	f04f 0200 	mov.w	r2, #0
 8013baa:	4ba4      	ldr	r3, [pc, #656]	@ (8013e3c <MAP_setWallCut+0x640>)
 8013bac:	f7ec fb96 	bl	80002dc <__adddf3>
 8013bb0:	4602      	mov	r2, r0
 8013bb2:	460b      	mov	r3, r1
 8013bb4:	4610      	mov	r0, r2
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	f7ed f81e 	bl	8000bf8 <__aeabi_d2uiz>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	b2db      	uxtb	r3, r3
 8013bc0:	4619      	mov	r1, r3
 8013bc2:	4aa1      	ldr	r2, [pc, #644]	@ (8013e48 <MAP_setWallCut+0x64c>)
 8013bc4:	0163      	lsls	r3, r4, #5
 8013bc6:	4413      	add	r3, r2
 8013bc8:	440b      	add	r3, r1
 8013bca:	781b      	ldrb	r3, [r3, #0]
 8013bcc:	f003 0301 	and.w	r3, r3, #1
 8013bd0:	73fb      	strb	r3, [r7, #15]
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x01;		// 西を向いているので北側の壁があるか
 8013bd2:	4b99      	ldr	r3, [pc, #612]	@ (8013e38 <MAP_setWallCut+0x63c>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7ec fcde 	bl	8000598 <__aeabi_f2d>
 8013bdc:	f04f 0200 	mov.w	r2, #0
 8013be0:	4b9a      	ldr	r3, [pc, #616]	@ (8013e4c <MAP_setWallCut+0x650>)
 8013be2:	f7ec fb7b 	bl	80002dc <__adddf3>
 8013be6:	4602      	mov	r2, r0
 8013be8:	460b      	mov	r3, r1
 8013bea:	4610      	mov	r0, r2
 8013bec:	4619      	mov	r1, r3
 8013bee:	f04f 0200 	mov.w	r2, #0
 8013bf2:	4b93      	ldr	r3, [pc, #588]	@ (8013e40 <MAP_setWallCut+0x644>)
 8013bf4:	f7ec ff9a 	bl	8000b2c <__aeabi_dcmplt>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d100      	bne.n	8013c00 <MAP_setWallCut+0x404>
					break;
 8013bfe:	e024      	b.n	8013c4a <MAP_setWallCut+0x44e>
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x01;		// 西を向いているので北側の壁があるか
 8013c00:	4b90      	ldr	r3, [pc, #576]	@ (8013e44 <MAP_setWallCut+0x648>)
 8013c02:	edd3 7a00 	vldr	s15, [r3]
 8013c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013c0a:	edc7 7a00 	vstr	s15, [r7]
 8013c0e:	783b      	ldrb	r3, [r7, #0]
 8013c10:	b2db      	uxtb	r3, r3
 8013c12:	461c      	mov	r4, r3
 8013c14:	4b88      	ldr	r3, [pc, #544]	@ (8013e38 <MAP_setWallCut+0x63c>)
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f7ec fcbd 	bl	8000598 <__aeabi_f2d>
 8013c1e:	f04f 0200 	mov.w	r2, #0
 8013c22:	4b8a      	ldr	r3, [pc, #552]	@ (8013e4c <MAP_setWallCut+0x650>)
 8013c24:	f7ec fb5a 	bl	80002dc <__adddf3>
 8013c28:	4602      	mov	r2, r0
 8013c2a:	460b      	mov	r3, r1
 8013c2c:	4610      	mov	r0, r2
 8013c2e:	4619      	mov	r1, r3
 8013c30:	f7ec ffe2 	bl	8000bf8 <__aeabi_d2uiz>
 8013c34:	4603      	mov	r3, r0
 8013c36:	b2db      	uxtb	r3, r3
 8013c38:	4619      	mov	r1, r3
 8013c3a:	4a83      	ldr	r2, [pc, #524]	@ (8013e48 <MAP_setWallCut+0x64c>)
 8013c3c:	0163      	lsls	r3, r4, #5
 8013c3e:	4413      	add	r3, r2
 8013c40:	440b      	add	r3, r1
 8013c42:	781b      	ldrb	r3, [r3, #0]
 8013c44:	f003 0301 	and.w	r3, r3, #1
 8013c48:	73bb      	strb	r3, [r7, #14]
					break;
 8013c4a:	bf00      	nop
			if( ( uc_val != 0 ) || ( ( uc_val != 0 ) && ( uc_valPrev != 0 ) ) ){
 8013c4c:	7bfb      	ldrb	r3, [r7, #15]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d107      	bne.n	8013c62 <MAP_setWallCut+0x466>
 8013c52:	7bfb      	ldrb	r3, [r7, #15]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	f000 8224 	beq.w	80140a2 <MAP_setWallCut+0x8a6>
 8013c5a:	7bbb      	ldrb	r3, [r7, #14]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	f000 8220 	beq.w	80140a2 <MAP_setWallCut+0x8a6>
				MOT_setWallEdgeType( MOT_WALL_EDGE_RIGHT );		// 壁切れ補正を実施する
 8013c62:	2001      	movs	r0, #1
 8013c64:	f7fe fd64 	bl	8012730 <MOT_setWallEdgeType>
				bl_wallCut = TRUE;
 8013c68:	2301      	movs	r3, #1
 8013c6a:	737b      	strb	r3, [r7, #13]
			break;
 8013c6c:	e219      	b.n	80140a2 <MAP_setWallCut+0x8a6>
			switch( s_PosDir ){
 8013c6e:	4b78      	ldr	r3, [pc, #480]	@ (8013e50 <MAP_setWallCut+0x654>)
 8013c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013c74:	2b06      	cmp	r3, #6
 8013c76:	f200 8203 	bhi.w	8014080 <MAP_setWallCut+0x884>
 8013c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8013c80 <MAP_setWallCut+0x484>)
 8013c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c80:	08013c9d 	.word	0x08013c9d
 8013c84:	08014081 	.word	0x08014081
 8013c88:	08013d91 	.word	0x08013d91
 8013c8c:	08014081 	.word	0x08014081
 8013c90:	08013ea1 	.word	0x08013ea1
 8013c94:	08014081 	.word	0x08014081
 8013c98:	08013f91 	.word	0x08013f91
					if( 0 < f_PosY-0.5 ) uc_val     = g_SysMap[(uint8_t)(f_PosY-0.5)][(uint8_t)(f_PosX)] & 0x08;			// 北を向いているので西側の壁があるか
 8013c9c:	4b69      	ldr	r3, [pc, #420]	@ (8013e44 <MAP_setWallCut+0x648>)
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7ec fc79 	bl	8000598 <__aeabi_f2d>
 8013ca6:	f04f 0200 	mov.w	r2, #0
 8013caa:	4b64      	ldr	r3, [pc, #400]	@ (8013e3c <MAP_setWallCut+0x640>)
 8013cac:	f7ec fb14 	bl	80002d8 <__aeabi_dsub>
 8013cb0:	4602      	mov	r2, r0
 8013cb2:	460b      	mov	r3, r1
 8013cb4:	4610      	mov	r0, r2
 8013cb6:	4619      	mov	r1, r3
 8013cb8:	f04f 0200 	mov.w	r2, #0
 8013cbc:	f04f 0300 	mov.w	r3, #0
 8013cc0:	f7ec ff52 	bl	8000b68 <__aeabi_dcmpgt>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d024      	beq.n	8013d14 <MAP_setWallCut+0x518>
 8013cca:	4b5e      	ldr	r3, [pc, #376]	@ (8013e44 <MAP_setWallCut+0x648>)
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	4618      	mov	r0, r3
 8013cd0:	f7ec fc62 	bl	8000598 <__aeabi_f2d>
 8013cd4:	f04f 0200 	mov.w	r2, #0
 8013cd8:	4b58      	ldr	r3, [pc, #352]	@ (8013e3c <MAP_setWallCut+0x640>)
 8013cda:	f7ec fafd 	bl	80002d8 <__aeabi_dsub>
 8013cde:	4602      	mov	r2, r0
 8013ce0:	460b      	mov	r3, r1
 8013ce2:	4610      	mov	r0, r2
 8013ce4:	4619      	mov	r1, r3
 8013ce6:	f7ec ff87 	bl	8000bf8 <__aeabi_d2uiz>
 8013cea:	4603      	mov	r3, r0
 8013cec:	b2db      	uxtb	r3, r3
 8013cee:	4618      	mov	r0, r3
 8013cf0:	4b51      	ldr	r3, [pc, #324]	@ (8013e38 <MAP_setWallCut+0x63c>)
 8013cf2:	edd3 7a00 	vldr	s15, [r3]
 8013cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013cfa:	edc7 7a00 	vstr	s15, [r7]
 8013cfe:	783b      	ldrb	r3, [r7, #0]
 8013d00:	b2db      	uxtb	r3, r3
 8013d02:	4619      	mov	r1, r3
 8013d04:	4a50      	ldr	r2, [pc, #320]	@ (8013e48 <MAP_setWallCut+0x64c>)
 8013d06:	0143      	lsls	r3, r0, #5
 8013d08:	4413      	add	r3, r2
 8013d0a:	440b      	add	r3, r1
 8013d0c:	781b      	ldrb	r3, [r3, #0]
 8013d0e:	f003 0308 	and.w	r3, r3, #8
 8013d12:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x08;			// 北を向いているので西側の壁があるか
 8013d14:	4b4b      	ldr	r3, [pc, #300]	@ (8013e44 <MAP_setWallCut+0x648>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f7ec fc3d 	bl	8000598 <__aeabi_f2d>
 8013d1e:	f04f 0200 	mov.w	r2, #0
 8013d22:	4b4a      	ldr	r3, [pc, #296]	@ (8013e4c <MAP_setWallCut+0x650>)
 8013d24:	f7ec fad8 	bl	80002d8 <__aeabi_dsub>
 8013d28:	4602      	mov	r2, r0
 8013d2a:	460b      	mov	r3, r1
 8013d2c:	4610      	mov	r0, r2
 8013d2e:	4619      	mov	r1, r3
 8013d30:	f04f 0200 	mov.w	r2, #0
 8013d34:	f04f 0300 	mov.w	r3, #0
 8013d38:	f7ec ff16 	bl	8000b68 <__aeabi_dcmpgt>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d100      	bne.n	8013d44 <MAP_setWallCut+0x548>
					break;
 8013d42:	e19d      	b.n	8014080 <MAP_setWallCut+0x884>
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x08;			// 北を向いているので西側の壁があるか
 8013d44:	4b3f      	ldr	r3, [pc, #252]	@ (8013e44 <MAP_setWallCut+0x648>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7ec fc25 	bl	8000598 <__aeabi_f2d>
 8013d4e:	f04f 0200 	mov.w	r2, #0
 8013d52:	4b3e      	ldr	r3, [pc, #248]	@ (8013e4c <MAP_setWallCut+0x650>)
 8013d54:	f7ec fac0 	bl	80002d8 <__aeabi_dsub>
 8013d58:	4602      	mov	r2, r0
 8013d5a:	460b      	mov	r3, r1
 8013d5c:	4610      	mov	r0, r2
 8013d5e:	4619      	mov	r1, r3
 8013d60:	f7ec ff4a 	bl	8000bf8 <__aeabi_d2uiz>
 8013d64:	4603      	mov	r3, r0
 8013d66:	b2db      	uxtb	r3, r3
 8013d68:	4618      	mov	r0, r3
 8013d6a:	4b33      	ldr	r3, [pc, #204]	@ (8013e38 <MAP_setWallCut+0x63c>)
 8013d6c:	edd3 7a00 	vldr	s15, [r3]
 8013d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013d74:	edc7 7a00 	vstr	s15, [r7]
 8013d78:	783b      	ldrb	r3, [r7, #0]
 8013d7a:	b2db      	uxtb	r3, r3
 8013d7c:	4619      	mov	r1, r3
 8013d7e:	4a32      	ldr	r2, [pc, #200]	@ (8013e48 <MAP_setWallCut+0x64c>)
 8013d80:	0143      	lsls	r3, r0, #5
 8013d82:	4413      	add	r3, r2
 8013d84:	440b      	add	r3, r1
 8013d86:	781b      	ldrb	r3, [r3, #0]
 8013d88:	f003 0308 	and.w	r3, r3, #8
 8013d8c:	73bb      	strb	r3, [r7, #14]
					break;
 8013d8e:	e177      	b.n	8014080 <MAP_setWallCut+0x884>
					if( 0 < f_PosX-0.5 ) uc_val     = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-0.5)] & 0x01;			// 東を向いているので北側の壁があるか
 8013d90:	4b29      	ldr	r3, [pc, #164]	@ (8013e38 <MAP_setWallCut+0x63c>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7ec fbff 	bl	8000598 <__aeabi_f2d>
 8013d9a:	f04f 0200 	mov.w	r2, #0
 8013d9e:	4b27      	ldr	r3, [pc, #156]	@ (8013e3c <MAP_setWallCut+0x640>)
 8013da0:	f7ec fa9a 	bl	80002d8 <__aeabi_dsub>
 8013da4:	4602      	mov	r2, r0
 8013da6:	460b      	mov	r3, r1
 8013da8:	4610      	mov	r0, r2
 8013daa:	4619      	mov	r1, r3
 8013dac:	f04f 0200 	mov.w	r2, #0
 8013db0:	f04f 0300 	mov.w	r3, #0
 8013db4:	f7ec fed8 	bl	8000b68 <__aeabi_dcmpgt>
 8013db8:	4603      	mov	r3, r0
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d024      	beq.n	8013e08 <MAP_setWallCut+0x60c>
 8013dbe:	4b21      	ldr	r3, [pc, #132]	@ (8013e44 <MAP_setWallCut+0x648>)
 8013dc0:	edd3 7a00 	vldr	s15, [r3]
 8013dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013dc8:	edc7 7a00 	vstr	s15, [r7]
 8013dcc:	783b      	ldrb	r3, [r7, #0]
 8013dce:	b2db      	uxtb	r3, r3
 8013dd0:	461c      	mov	r4, r3
 8013dd2:	4b19      	ldr	r3, [pc, #100]	@ (8013e38 <MAP_setWallCut+0x63c>)
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f7ec fbde 	bl	8000598 <__aeabi_f2d>
 8013ddc:	f04f 0200 	mov.w	r2, #0
 8013de0:	4b16      	ldr	r3, [pc, #88]	@ (8013e3c <MAP_setWallCut+0x640>)
 8013de2:	f7ec fa79 	bl	80002d8 <__aeabi_dsub>
 8013de6:	4602      	mov	r2, r0
 8013de8:	460b      	mov	r3, r1
 8013dea:	4610      	mov	r0, r2
 8013dec:	4619      	mov	r1, r3
 8013dee:	f7ec ff03 	bl	8000bf8 <__aeabi_d2uiz>
 8013df2:	4603      	mov	r3, r0
 8013df4:	b2db      	uxtb	r3, r3
 8013df6:	4619      	mov	r1, r3
 8013df8:	4a13      	ldr	r2, [pc, #76]	@ (8013e48 <MAP_setWallCut+0x64c>)
 8013dfa:	0163      	lsls	r3, r4, #5
 8013dfc:	4413      	add	r3, r2
 8013dfe:	440b      	add	r3, r1
 8013e00:	781b      	ldrb	r3, [r3, #0]
 8013e02:	f003 0301 	and.w	r3, r3, #1
 8013e06:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x01;			// 東を向いているので北側の壁があるか
 8013e08:	4b0b      	ldr	r3, [pc, #44]	@ (8013e38 <MAP_setWallCut+0x63c>)
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f7ec fbc3 	bl	8000598 <__aeabi_f2d>
 8013e12:	f04f 0200 	mov.w	r2, #0
 8013e16:	4b0d      	ldr	r3, [pc, #52]	@ (8013e4c <MAP_setWallCut+0x650>)
 8013e18:	f7ec fa5e 	bl	80002d8 <__aeabi_dsub>
 8013e1c:	4602      	mov	r2, r0
 8013e1e:	460b      	mov	r3, r1
 8013e20:	4610      	mov	r0, r2
 8013e22:	4619      	mov	r1, r3
 8013e24:	f04f 0200 	mov.w	r2, #0
 8013e28:	f04f 0300 	mov.w	r3, #0
 8013e2c:	f7ec fe9c 	bl	8000b68 <__aeabi_dcmpgt>
 8013e30:	4603      	mov	r3, r0
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d10e      	bne.n	8013e54 <MAP_setWallCut+0x658>
					break;
 8013e36:	e123      	b.n	8014080 <MAP_setWallCut+0x884>
 8013e38:	2001ac4c 	.word	0x2001ac4c
 8013e3c:	3fe00000 	.word	0x3fe00000
 8013e40:	40400000 	.word	0x40400000
 8013e44:	2001ac50 	.word	0x2001ac50
 8013e48:	2001b5a0 	.word	0x2001b5a0
 8013e4c:	3ff80000 	.word	0x3ff80000
 8013e50:	2001ac54 	.word	0x2001ac54
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x01;			// 東を向いているので北側の壁があるか
 8013e54:	4b97      	ldr	r3, [pc, #604]	@ (80140b4 <MAP_setWallCut+0x8b8>)
 8013e56:	edd3 7a00 	vldr	s15, [r3]
 8013e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013e5e:	edc7 7a00 	vstr	s15, [r7]
 8013e62:	783b      	ldrb	r3, [r7, #0]
 8013e64:	b2db      	uxtb	r3, r3
 8013e66:	461c      	mov	r4, r3
 8013e68:	4b93      	ldr	r3, [pc, #588]	@ (80140b8 <MAP_setWallCut+0x8bc>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f7ec fb93 	bl	8000598 <__aeabi_f2d>
 8013e72:	f04f 0200 	mov.w	r2, #0
 8013e76:	4b91      	ldr	r3, [pc, #580]	@ (80140bc <MAP_setWallCut+0x8c0>)
 8013e78:	f7ec fa2e 	bl	80002d8 <__aeabi_dsub>
 8013e7c:	4602      	mov	r2, r0
 8013e7e:	460b      	mov	r3, r1
 8013e80:	4610      	mov	r0, r2
 8013e82:	4619      	mov	r1, r3
 8013e84:	f7ec feb8 	bl	8000bf8 <__aeabi_d2uiz>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	b2db      	uxtb	r3, r3
 8013e8c:	4619      	mov	r1, r3
 8013e8e:	4a8c      	ldr	r2, [pc, #560]	@ (80140c0 <MAP_setWallCut+0x8c4>)
 8013e90:	0163      	lsls	r3, r4, #5
 8013e92:	4413      	add	r3, r2
 8013e94:	440b      	add	r3, r1
 8013e96:	781b      	ldrb	r3, [r3, #0]
 8013e98:	f003 0301 	and.w	r3, r3, #1
 8013e9c:	73bb      	strb	r3, [r7, #14]
					break;
 8013e9e:	e0ef      	b.n	8014080 <MAP_setWallCut+0x884>
					if( MAP_Y_SIZE_REAL > f_PosY+0.5 ) uc_val     = g_SysMap[(uint8_t)(f_PosY+0.5)][(uint8_t)(f_PosX)] & 0x02;			// 南を向いているので東側の壁があるか
 8013ea0:	4b84      	ldr	r3, [pc, #528]	@ (80140b4 <MAP_setWallCut+0x8b8>)
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f7ec fb77 	bl	8000598 <__aeabi_f2d>
 8013eaa:	f04f 0200 	mov.w	r2, #0
 8013eae:	4b85      	ldr	r3, [pc, #532]	@ (80140c4 <MAP_setWallCut+0x8c8>)
 8013eb0:	f7ec fa14 	bl	80002dc <__adddf3>
 8013eb4:	4602      	mov	r2, r0
 8013eb6:	460b      	mov	r3, r1
 8013eb8:	4610      	mov	r0, r2
 8013eba:	4619      	mov	r1, r3
 8013ebc:	f04f 0200 	mov.w	r2, #0
 8013ec0:	4b81      	ldr	r3, [pc, #516]	@ (80140c8 <MAP_setWallCut+0x8cc>)
 8013ec2:	f7ec fe33 	bl	8000b2c <__aeabi_dcmplt>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d024      	beq.n	8013f16 <MAP_setWallCut+0x71a>
 8013ecc:	4b79      	ldr	r3, [pc, #484]	@ (80140b4 <MAP_setWallCut+0x8b8>)
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7ec fb61 	bl	8000598 <__aeabi_f2d>
 8013ed6:	f04f 0200 	mov.w	r2, #0
 8013eda:	4b7a      	ldr	r3, [pc, #488]	@ (80140c4 <MAP_setWallCut+0x8c8>)
 8013edc:	f7ec f9fe 	bl	80002dc <__adddf3>
 8013ee0:	4602      	mov	r2, r0
 8013ee2:	460b      	mov	r3, r1
 8013ee4:	4610      	mov	r0, r2
 8013ee6:	4619      	mov	r1, r3
 8013ee8:	f7ec fe86 	bl	8000bf8 <__aeabi_d2uiz>
 8013eec:	4603      	mov	r3, r0
 8013eee:	b2db      	uxtb	r3, r3
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	4b71      	ldr	r3, [pc, #452]	@ (80140b8 <MAP_setWallCut+0x8bc>)
 8013ef4:	edd3 7a00 	vldr	s15, [r3]
 8013ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013efc:	edc7 7a00 	vstr	s15, [r7]
 8013f00:	783b      	ldrb	r3, [r7, #0]
 8013f02:	b2db      	uxtb	r3, r3
 8013f04:	4619      	mov	r1, r3
 8013f06:	4a6e      	ldr	r2, [pc, #440]	@ (80140c0 <MAP_setWallCut+0x8c4>)
 8013f08:	0143      	lsls	r3, r0, #5
 8013f0a:	4413      	add	r3, r2
 8013f0c:	440b      	add	r3, r1
 8013f0e:	781b      	ldrb	r3, [r3, #0]
 8013f10:	f003 0302 	and.w	r3, r3, #2
 8013f14:	73fb      	strb	r3, [r7, #15]
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x02;			// 南を向いているので東側の壁があるか
 8013f16:	4b67      	ldr	r3, [pc, #412]	@ (80140b4 <MAP_setWallCut+0x8b8>)
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	f7ec fb3c 	bl	8000598 <__aeabi_f2d>
 8013f20:	f04f 0200 	mov.w	r2, #0
 8013f24:	4b65      	ldr	r3, [pc, #404]	@ (80140bc <MAP_setWallCut+0x8c0>)
 8013f26:	f7ec f9d9 	bl	80002dc <__adddf3>
 8013f2a:	4602      	mov	r2, r0
 8013f2c:	460b      	mov	r3, r1
 8013f2e:	4610      	mov	r0, r2
 8013f30:	4619      	mov	r1, r3
 8013f32:	f04f 0200 	mov.w	r2, #0
 8013f36:	4b64      	ldr	r3, [pc, #400]	@ (80140c8 <MAP_setWallCut+0x8cc>)
 8013f38:	f7ec fdf8 	bl	8000b2c <__aeabi_dcmplt>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d100      	bne.n	8013f44 <MAP_setWallCut+0x748>
					break;
 8013f42:	e09d      	b.n	8014080 <MAP_setWallCut+0x884>
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x02;			// 南を向いているので東側の壁があるか
 8013f44:	4b5b      	ldr	r3, [pc, #364]	@ (80140b4 <MAP_setWallCut+0x8b8>)
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f7ec fb25 	bl	8000598 <__aeabi_f2d>
 8013f4e:	f04f 0200 	mov.w	r2, #0
 8013f52:	4b5a      	ldr	r3, [pc, #360]	@ (80140bc <MAP_setWallCut+0x8c0>)
 8013f54:	f7ec f9c2 	bl	80002dc <__adddf3>
 8013f58:	4602      	mov	r2, r0
 8013f5a:	460b      	mov	r3, r1
 8013f5c:	4610      	mov	r0, r2
 8013f5e:	4619      	mov	r1, r3
 8013f60:	f7ec fe4a 	bl	8000bf8 <__aeabi_d2uiz>
 8013f64:	4603      	mov	r3, r0
 8013f66:	b2db      	uxtb	r3, r3
 8013f68:	4618      	mov	r0, r3
 8013f6a:	4b53      	ldr	r3, [pc, #332]	@ (80140b8 <MAP_setWallCut+0x8bc>)
 8013f6c:	edd3 7a00 	vldr	s15, [r3]
 8013f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f74:	edc7 7a00 	vstr	s15, [r7]
 8013f78:	783b      	ldrb	r3, [r7, #0]
 8013f7a:	b2db      	uxtb	r3, r3
 8013f7c:	4619      	mov	r1, r3
 8013f7e:	4a50      	ldr	r2, [pc, #320]	@ (80140c0 <MAP_setWallCut+0x8c4>)
 8013f80:	0143      	lsls	r3, r0, #5
 8013f82:	4413      	add	r3, r2
 8013f84:	440b      	add	r3, r1
 8013f86:	781b      	ldrb	r3, [r3, #0]
 8013f88:	f003 0302 	and.w	r3, r3, #2
 8013f8c:	73bb      	strb	r3, [r7, #14]
					break;
 8013f8e:	e077      	b.n	8014080 <MAP_setWallCut+0x884>
					if( MAP_X_SIZE_REAL > f_PosX+0.5 ) uc_val     = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+0.5)] & 0x04;			// 西を向いているので南側の壁があるか
 8013f90:	4b49      	ldr	r3, [pc, #292]	@ (80140b8 <MAP_setWallCut+0x8bc>)
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	4618      	mov	r0, r3
 8013f96:	f7ec faff 	bl	8000598 <__aeabi_f2d>
 8013f9a:	f04f 0200 	mov.w	r2, #0
 8013f9e:	4b49      	ldr	r3, [pc, #292]	@ (80140c4 <MAP_setWallCut+0x8c8>)
 8013fa0:	f7ec f99c 	bl	80002dc <__adddf3>
 8013fa4:	4602      	mov	r2, r0
 8013fa6:	460b      	mov	r3, r1
 8013fa8:	4610      	mov	r0, r2
 8013faa:	4619      	mov	r1, r3
 8013fac:	f04f 0200 	mov.w	r2, #0
 8013fb0:	4b45      	ldr	r3, [pc, #276]	@ (80140c8 <MAP_setWallCut+0x8cc>)
 8013fb2:	f7ec fdbb 	bl	8000b2c <__aeabi_dcmplt>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d024      	beq.n	8014006 <MAP_setWallCut+0x80a>
 8013fbc:	4b3d      	ldr	r3, [pc, #244]	@ (80140b4 <MAP_setWallCut+0x8b8>)
 8013fbe:	edd3 7a00 	vldr	s15, [r3]
 8013fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013fc6:	edc7 7a00 	vstr	s15, [r7]
 8013fca:	783b      	ldrb	r3, [r7, #0]
 8013fcc:	b2db      	uxtb	r3, r3
 8013fce:	461c      	mov	r4, r3
 8013fd0:	4b39      	ldr	r3, [pc, #228]	@ (80140b8 <MAP_setWallCut+0x8bc>)
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7ec fadf 	bl	8000598 <__aeabi_f2d>
 8013fda:	f04f 0200 	mov.w	r2, #0
 8013fde:	4b39      	ldr	r3, [pc, #228]	@ (80140c4 <MAP_setWallCut+0x8c8>)
 8013fe0:	f7ec f97c 	bl	80002dc <__adddf3>
 8013fe4:	4602      	mov	r2, r0
 8013fe6:	460b      	mov	r3, r1
 8013fe8:	4610      	mov	r0, r2
 8013fea:	4619      	mov	r1, r3
 8013fec:	f7ec fe04 	bl	8000bf8 <__aeabi_d2uiz>
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	b2db      	uxtb	r3, r3
 8013ff4:	4619      	mov	r1, r3
 8013ff6:	4a32      	ldr	r2, [pc, #200]	@ (80140c0 <MAP_setWallCut+0x8c4>)
 8013ff8:	0163      	lsls	r3, r4, #5
 8013ffa:	4413      	add	r3, r2
 8013ffc:	440b      	add	r3, r1
 8013ffe:	781b      	ldrb	r3, [r3, #0]
 8014000:	f003 0304 	and.w	r3, r3, #4
 8014004:	73fb      	strb	r3, [r7, #15]
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x04;			// 西を向いているので南側の壁があるか
 8014006:	4b2c      	ldr	r3, [pc, #176]	@ (80140b8 <MAP_setWallCut+0x8bc>)
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	4618      	mov	r0, r3
 801400c:	f7ec fac4 	bl	8000598 <__aeabi_f2d>
 8014010:	f04f 0200 	mov.w	r2, #0
 8014014:	4b29      	ldr	r3, [pc, #164]	@ (80140bc <MAP_setWallCut+0x8c0>)
 8014016:	f7ec f961 	bl	80002dc <__adddf3>
 801401a:	4602      	mov	r2, r0
 801401c:	460b      	mov	r3, r1
 801401e:	4610      	mov	r0, r2
 8014020:	4619      	mov	r1, r3
 8014022:	f04f 0200 	mov.w	r2, #0
 8014026:	4b28      	ldr	r3, [pc, #160]	@ (80140c8 <MAP_setWallCut+0x8cc>)
 8014028:	f7ec fd80 	bl	8000b2c <__aeabi_dcmplt>
 801402c:	4603      	mov	r3, r0
 801402e:	2b00      	cmp	r3, #0
 8014030:	d100      	bne.n	8014034 <MAP_setWallCut+0x838>
					break;
 8014032:	e024      	b.n	801407e <MAP_setWallCut+0x882>
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x04;			// 西を向いているので南側の壁があるか
 8014034:	4b1f      	ldr	r3, [pc, #124]	@ (80140b4 <MAP_setWallCut+0x8b8>)
 8014036:	edd3 7a00 	vldr	s15, [r3]
 801403a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801403e:	edc7 7a00 	vstr	s15, [r7]
 8014042:	783b      	ldrb	r3, [r7, #0]
 8014044:	b2db      	uxtb	r3, r3
 8014046:	461c      	mov	r4, r3
 8014048:	4b1b      	ldr	r3, [pc, #108]	@ (80140b8 <MAP_setWallCut+0x8bc>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	4618      	mov	r0, r3
 801404e:	f7ec faa3 	bl	8000598 <__aeabi_f2d>
 8014052:	f04f 0200 	mov.w	r2, #0
 8014056:	4b19      	ldr	r3, [pc, #100]	@ (80140bc <MAP_setWallCut+0x8c0>)
 8014058:	f7ec f940 	bl	80002dc <__adddf3>
 801405c:	4602      	mov	r2, r0
 801405e:	460b      	mov	r3, r1
 8014060:	4610      	mov	r0, r2
 8014062:	4619      	mov	r1, r3
 8014064:	f7ec fdc8 	bl	8000bf8 <__aeabi_d2uiz>
 8014068:	4603      	mov	r3, r0
 801406a:	b2db      	uxtb	r3, r3
 801406c:	4619      	mov	r1, r3
 801406e:	4a14      	ldr	r2, [pc, #80]	@ (80140c0 <MAP_setWallCut+0x8c4>)
 8014070:	0163      	lsls	r3, r4, #5
 8014072:	4413      	add	r3, r2
 8014074:	440b      	add	r3, r1
 8014076:	781b      	ldrb	r3, [r3, #0]
 8014078:	f003 0304 	and.w	r3, r3, #4
 801407c:	73bb      	strb	r3, [r7, #14]
					break;
 801407e:	bf00      	nop
			if( ( uc_val != 0 ) || ( ( uc_val != 0 ) && ( uc_valPrev != 0 ) ) ){
 8014080:	7bfb      	ldrb	r3, [r7, #15]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d105      	bne.n	8014092 <MAP_setWallCut+0x896>
 8014086:	7bfb      	ldrb	r3, [r7, #15]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d00c      	beq.n	80140a6 <MAP_setWallCut+0x8aa>
 801408c:	7bbb      	ldrb	r3, [r7, #14]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d009      	beq.n	80140a6 <MAP_setWallCut+0x8aa>
				MOT_setWallEdgeType( MOT_WALL_EDGE_LEFT );		// 壁切れ補正を実施する
 8014092:	2002      	movs	r0, #2
 8014094:	f7fe fb4c 	bl	8012730 <MOT_setWallEdgeType>
				bl_wallCut = TRUE;
 8014098:	2301      	movs	r3, #1
 801409a:	737b      	strb	r3, [r7, #13]
			break;
 801409c:	e003      	b.n	80140a6 <MAP_setWallCut+0x8aa>
			break;
 801409e:	bf00      	nop
 80140a0:	e002      	b.n	80140a8 <MAP_setWallCut+0x8ac>
			break;
 80140a2:	bf00      	nop
 80140a4:	e000      	b.n	80140a8 <MAP_setWallCut+0x8ac>
			break;
 80140a6:	bf00      	nop
	}
	
	return bl_wallCut;
 80140a8:	7b7b      	ldrb	r3, [r7, #13]
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	3714      	adds	r7, #20
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bd90      	pop	{r4, r7, pc}
 80140b2:	bf00      	nop
 80140b4:	2001ac50 	.word	0x2001ac50
 80140b8:	2001ac4c 	.word	0x2001ac4c
 80140bc:	3ff80000 	.word	0x3ff80000
 80140c0:	2001b5a0 	.word	0x2001b5a0
 80140c4:	3fe00000 	.word	0x3fe00000
 80140c8:	40400000 	.word	0x40400000

080140cc <MAP_setCmdPos>:

void MAP_setCmdPos( uint8_t uc_x, uint8_t uc_y, enMAP_HEAD_DIR en_dir )
{
 80140cc:	b480      	push	{r7}
 80140ce:	b083      	sub	sp, #12
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	4603      	mov	r3, r0
 80140d4:	71fb      	strb	r3, [r7, #7]
 80140d6:	460b      	mov	r3, r1
 80140d8:	71bb      	strb	r3, [r7, #6]
 80140da:	4613      	mov	r3, r2
 80140dc:	717b      	strb	r3, [r7, #5]
	f_PosX   = (float)uc_x;
 80140de:	79fb      	ldrb	r3, [r7, #7]
 80140e0:	ee07 3a90 	vmov	s15, r3
 80140e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140e8:	4b0b      	ldr	r3, [pc, #44]	@ (8014118 <MAP_setCmdPos+0x4c>)
 80140ea:	edc3 7a00 	vstr	s15, [r3]
	f_PosX   = (float)uc_y;
 80140ee:	79bb      	ldrb	r3, [r7, #6]
 80140f0:	ee07 3a90 	vmov	s15, r3
 80140f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140f8:	4b07      	ldr	r3, [pc, #28]	@ (8014118 <MAP_setCmdPos+0x4c>)
 80140fa:	edc3 7a00 	vstr	s15, [r3]
	s_PosDir = (int16_t)(en_dir * 2);	// 進行方向（[0]北 [1]北東 [2]東 [3]南東 [4]南 [5]南西 [6]西 [7]北西 ）、2倍すると丁度値が合致する
 80140fe:	797b      	ldrb	r3, [r7, #5]
 8014100:	b29b      	uxth	r3, r3
 8014102:	005b      	lsls	r3, r3, #1
 8014104:	b29b      	uxth	r3, r3
 8014106:	b21a      	sxth	r2, r3
 8014108:	4b04      	ldr	r3, [pc, #16]	@ (801411c <MAP_setCmdPos+0x50>)
 801410a:	801a      	strh	r2, [r3, #0]
}
 801410c:	bf00      	nop
 801410e:	370c      	adds	r7, #12
 8014110:	46bd      	mov	sp, r7
 8014112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014116:	4770      	bx	lr
 8014118:	2001ac4c 	.word	0x2001ac4c
 801411c:	2001ac54 	.word	0x2001ac54

08014120 <MAP_showCmdLog>:

void MAP_showCmdLog( void )
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b082      	sub	sp, #8
 8014124:	af00      	add	r7, sp, #0
	uint16_t i=0;
 8014126:	2300      	movs	r3, #0
 8014128:	80fb      	strh	r3, [r7, #6]
	
	/* 超信地旋回コマンド */
	while(1){
		
		printf("dcom[%4d] = %02d  \n\r",i,dcom[i]);
 801412a:	88f9      	ldrh	r1, [r7, #6]
 801412c:	88fb      	ldrh	r3, [r7, #6]
 801412e:	4a1e      	ldr	r2, [pc, #120]	@ (80141a8 <MAP_showCmdLog+0x88>)
 8014130:	5cd3      	ldrb	r3, [r2, r3]
 8014132:	461a      	mov	r2, r3
 8014134:	481d      	ldr	r0, [pc, #116]	@ (80141ac <MAP_showCmdLog+0x8c>)
 8014136:	f009 fd8d 	bl	801dc54 <iprintf>
		if( dcom[i] == CEND ) break;
 801413a:	88fb      	ldrh	r3, [r7, #6]
 801413c:	4a1a      	ldr	r2, [pc, #104]	@ (80141a8 <MAP_showCmdLog+0x88>)
 801413e:	5cd3      	ldrb	r3, [r2, r3]
 8014140:	2bfa      	cmp	r3, #250	@ 0xfa
 8014142:	d003      	beq.n	801414c <MAP_showCmdLog+0x2c>
		i++;
 8014144:	88fb      	ldrh	r3, [r7, #6]
 8014146:	3301      	adds	r3, #1
 8014148:	80fb      	strh	r3, [r7, #6]
		printf("dcom[%4d] = %02d  \n\r",i,dcom[i]);
 801414a:	e7ee      	b.n	801412a <MAP_showCmdLog+0xa>
		if( dcom[i] == CEND ) break;
 801414c:	bf00      	nop
	}
	i=0;
 801414e:	2300      	movs	r3, #0
 8014150:	80fb      	strh	r3, [r7, #6]
	
	/* スラロームコマンド */
	while(1){
		
		printf("scom[%4d] = %02d  \n\r",i,scom[i]);
 8014152:	88f9      	ldrh	r1, [r7, #6]
 8014154:	88fb      	ldrh	r3, [r7, #6]
 8014156:	4a16      	ldr	r2, [pc, #88]	@ (80141b0 <MAP_showCmdLog+0x90>)
 8014158:	5cd3      	ldrb	r3, [r2, r3]
 801415a:	461a      	mov	r2, r3
 801415c:	4815      	ldr	r0, [pc, #84]	@ (80141b4 <MAP_showCmdLog+0x94>)
 801415e:	f009 fd79 	bl	801dc54 <iprintf>
		if( scom[i] == CEND ) break;
 8014162:	88fb      	ldrh	r3, [r7, #6]
 8014164:	4a12      	ldr	r2, [pc, #72]	@ (80141b0 <MAP_showCmdLog+0x90>)
 8014166:	5cd3      	ldrb	r3, [r2, r3]
 8014168:	2bfa      	cmp	r3, #250	@ 0xfa
 801416a:	d003      	beq.n	8014174 <MAP_showCmdLog+0x54>
		i++;
 801416c:	88fb      	ldrh	r3, [r7, #6]
 801416e:	3301      	adds	r3, #1
 8014170:	80fb      	strh	r3, [r7, #6]
		printf("scom[%4d] = %02d  \n\r",i,scom[i]);
 8014172:	e7ee      	b.n	8014152 <MAP_showCmdLog+0x32>
		if( scom[i] == CEND ) break;
 8014174:	bf00      	nop
	}
	i=0;
 8014176:	2300      	movs	r3, #0
 8014178:	80fb      	strh	r3, [r7, #6]

	/* 斜め走行コマンド */
	while(1){
		
		printf("tcom[%4d] = %02d  \n\r",i,tcom[i]);
 801417a:	88f9      	ldrh	r1, [r7, #6]
 801417c:	88fb      	ldrh	r3, [r7, #6]
 801417e:	4a0e      	ldr	r2, [pc, #56]	@ (80141b8 <MAP_showCmdLog+0x98>)
 8014180:	5cd3      	ldrb	r3, [r2, r3]
 8014182:	461a      	mov	r2, r3
 8014184:	480d      	ldr	r0, [pc, #52]	@ (80141bc <MAP_showCmdLog+0x9c>)
 8014186:	f009 fd65 	bl	801dc54 <iprintf>
		if( tcom[i] == CEND ) break;
 801418a:	88fb      	ldrh	r3, [r7, #6]
 801418c:	4a0a      	ldr	r2, [pc, #40]	@ (80141b8 <MAP_showCmdLog+0x98>)
 801418e:	5cd3      	ldrb	r3, [r2, r3]
 8014190:	2bfa      	cmp	r3, #250	@ 0xfa
 8014192:	d003      	beq.n	801419c <MAP_showCmdLog+0x7c>
		i++;
 8014194:	88fb      	ldrh	r3, [r7, #6]
 8014196:	3301      	adds	r3, #1
 8014198:	80fb      	strh	r3, [r7, #6]
		printf("tcom[%4d] = %02d  \n\r",i,tcom[i]);
 801419a:	e7ee      	b.n	801417a <MAP_showCmdLog+0x5a>
		if( tcom[i] == CEND ) break;
 801419c:	bf00      	nop
	}
}
 801419e:	bf00      	nop
 80141a0:	3708      	adds	r7, #8
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd80      	pop	{r7, pc}
 80141a6:	bf00      	nop
 80141a8:	20017c48 	.word	0x20017c48
 80141ac:	08021cb4 	.word	0x08021cb4
 80141b0:	20018c48 	.word	0x20018c48
 80141b4:	08021ccc 	.word	0x08021ccc
 80141b8:	20019c48 	.word	0x20019c48
 80141bc:	08021ce4 	.word	0x08021ce4

080141c0 <MAP_makeCmdList>:
	uint8_t uc_staY,					///< [in] 開始Y座標
	enMAP_HEAD_DIR en_staDir,		///< [in] 開始時の方向
	uint8_t uc_endX,					///< [in] 終了X座標
	uint8_t uc_endY,					///< [in] 終了Y座標
	enMAP_HEAD_DIR* en_endDir		///< [out] 終了時の方向
){
 80141c0:	b490      	push	{r4, r7}
 80141c2:	b086      	sub	sp, #24
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	4604      	mov	r4, r0
 80141c8:	4608      	mov	r0, r1
 80141ca:	4611      	mov	r1, r2
 80141cc:	461a      	mov	r2, r3
 80141ce:	4623      	mov	r3, r4
 80141d0:	71fb      	strb	r3, [r7, #7]
 80141d2:	4603      	mov	r3, r0
 80141d4:	71bb      	strb	r3, [r7, #6]
 80141d6:	460b      	mov	r3, r1
 80141d8:	717b      	strb	r3, [r7, #5]
 80141da:	4613      	mov	r3, r2
 80141dc:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_nowDir;									// 現在マウスの向いている絶対方向
	enMAP_HEAD_DIR	en_tempDir;									// 相対方向
//	uint16_t			i;											// roop
	
	/* 前進ステップ数を初期化する */
	uc_goStep = 0;
 80141de:	2300      	movs	r3, #0
 80141e0:	75fb      	strb	r3, [r7, #23]
	us_pt = 0;
 80141e2:	2300      	movs	r3, #0
 80141e4:	82bb      	strh	r3, [r7, #20]

	/* 迷路情報からコマンド作成 */
	while(1){	
		us_high = us_Cmap[uc_staY][uc_staX]-1;
 80141e6:	79ba      	ldrb	r2, [r7, #6]
 80141e8:	79fb      	ldrb	r3, [r7, #7]
 80141ea:	499f      	ldr	r1, [pc, #636]	@ (8014468 <MAP_makeCmdList+0x2a8>)
 80141ec:	0152      	lsls	r2, r2, #5
 80141ee:	4413      	add	r3, r2
 80141f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80141f4:	3b01      	subs	r3, #1
 80141f6:	823b      	strh	r3, [r7, #16]
		if (en_staDir == NORTH){
 80141f8:	797b      	ldrb	r3, [r7, #5]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d164      	bne.n	80142c8 <MAP_makeCmdList+0x108>
			if     (((g_SysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_Cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 80141fe:	79ba      	ldrb	r2, [r7, #6]
 8014200:	79fb      	ldrb	r3, [r7, #7]
 8014202:	499a      	ldr	r1, [pc, #616]	@ (801446c <MAP_makeCmdList+0x2ac>)
 8014204:	0152      	lsls	r2, r2, #5
 8014206:	440a      	add	r2, r1
 8014208:	4413      	add	r3, r2
 801420a:	781b      	ldrb	r3, [r3, #0]
 801420c:	f003 0311 	and.w	r3, r3, #17
 8014210:	2b10      	cmp	r3, #16
 8014212:	d10d      	bne.n	8014230 <MAP_makeCmdList+0x70>
 8014214:	79bb      	ldrb	r3, [r7, #6]
 8014216:	1c5a      	adds	r2, r3, #1
 8014218:	79fb      	ldrb	r3, [r7, #7]
 801421a:	4993      	ldr	r1, [pc, #588]	@ (8014468 <MAP_makeCmdList+0x2a8>)
 801421c:	0152      	lsls	r2, r2, #5
 801421e:	4413      	add	r3, r2
 8014220:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014224:	8a3a      	ldrh	r2, [r7, #16]
 8014226:	429a      	cmp	r2, r3
 8014228:	d102      	bne.n	8014230 <MAP_makeCmdList+0x70>
 801422a:	2300      	movs	r3, #0
 801422c:	74fb      	strb	r3, [r7, #19]
 801422e:	e187      	b.n	8014540 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_Cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 8014230:	79ba      	ldrb	r2, [r7, #6]
 8014232:	79fb      	ldrb	r3, [r7, #7]
 8014234:	498d      	ldr	r1, [pc, #564]	@ (801446c <MAP_makeCmdList+0x2ac>)
 8014236:	0152      	lsls	r2, r2, #5
 8014238:	440a      	add	r2, r1
 801423a:	4413      	add	r3, r2
 801423c:	781b      	ldrb	r3, [r3, #0]
 801423e:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8014242:	2b20      	cmp	r3, #32
 8014244:	d10d      	bne.n	8014262 <MAP_makeCmdList+0xa2>
 8014246:	79ba      	ldrb	r2, [r7, #6]
 8014248:	79fb      	ldrb	r3, [r7, #7]
 801424a:	3301      	adds	r3, #1
 801424c:	4986      	ldr	r1, [pc, #536]	@ (8014468 <MAP_makeCmdList+0x2a8>)
 801424e:	0152      	lsls	r2, r2, #5
 8014250:	4413      	add	r3, r2
 8014252:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014256:	8a3a      	ldrh	r2, [r7, #16]
 8014258:	429a      	cmp	r2, r3
 801425a:	d102      	bne.n	8014262 <MAP_makeCmdList+0xa2>
 801425c:	2301      	movs	r3, #1
 801425e:	74fb      	strb	r3, [r7, #19]
 8014260:	e16e      	b.n	8014540 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_Cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 8014262:	79ba      	ldrb	r2, [r7, #6]
 8014264:	79fb      	ldrb	r3, [r7, #7]
 8014266:	4981      	ldr	r1, [pc, #516]	@ (801446c <MAP_makeCmdList+0x2ac>)
 8014268:	0152      	lsls	r2, r2, #5
 801426a:	440a      	add	r2, r1
 801426c:	4413      	add	r3, r2
 801426e:	781b      	ldrb	r3, [r3, #0]
 8014270:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 8014274:	2b80      	cmp	r3, #128	@ 0x80
 8014276:	d10d      	bne.n	8014294 <MAP_makeCmdList+0xd4>
 8014278:	79ba      	ldrb	r2, [r7, #6]
 801427a:	79fb      	ldrb	r3, [r7, #7]
 801427c:	3b01      	subs	r3, #1
 801427e:	497a      	ldr	r1, [pc, #488]	@ (8014468 <MAP_makeCmdList+0x2a8>)
 8014280:	0152      	lsls	r2, r2, #5
 8014282:	4413      	add	r3, r2
 8014284:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014288:	8a3a      	ldrh	r2, [r7, #16]
 801428a:	429a      	cmp	r2, r3
 801428c:	d102      	bne.n	8014294 <MAP_makeCmdList+0xd4>
 801428e:	2303      	movs	r3, #3
 8014290:	74fb      	strb	r3, [r7, #19]
 8014292:	e155      	b.n	8014540 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_Cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 8014294:	79ba      	ldrb	r2, [r7, #6]
 8014296:	79fb      	ldrb	r3, [r7, #7]
 8014298:	4974      	ldr	r1, [pc, #464]	@ (801446c <MAP_makeCmdList+0x2ac>)
 801429a:	0152      	lsls	r2, r2, #5
 801429c:	440a      	add	r2, r1
 801429e:	4413      	add	r3, r2
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80142a6:	2b40      	cmp	r3, #64	@ 0x40
 80142a8:	d10d      	bne.n	80142c6 <MAP_makeCmdList+0x106>
 80142aa:	79bb      	ldrb	r3, [r7, #6]
 80142ac:	1e5a      	subs	r2, r3, #1
 80142ae:	79fb      	ldrb	r3, [r7, #7]
 80142b0:	496d      	ldr	r1, [pc, #436]	@ (8014468 <MAP_makeCmdList+0x2a8>)
 80142b2:	0152      	lsls	r2, r2, #5
 80142b4:	4413      	add	r3, r2
 80142b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80142ba:	8a3a      	ldrh	r2, [r7, #16]
 80142bc:	429a      	cmp	r2, r3
 80142be:	d102      	bne.n	80142c6 <MAP_makeCmdList+0x106>
 80142c0:	2302      	movs	r3, #2
 80142c2:	74fb      	strb	r3, [r7, #19]
 80142c4:	e13c      	b.n	8014540 <MAP_makeCmdList+0x380>
			else   while(1);
 80142c6:	e7fe      	b.n	80142c6 <MAP_makeCmdList+0x106>
		}else if (en_staDir == EAST){
 80142c8:	797b      	ldrb	r3, [r7, #5]
 80142ca:	2b01      	cmp	r3, #1
 80142cc:	d164      	bne.n	8014398 <MAP_makeCmdList+0x1d8>
			if     (((g_SysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_Cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 80142ce:	79ba      	ldrb	r2, [r7, #6]
 80142d0:	79fb      	ldrb	r3, [r7, #7]
 80142d2:	4966      	ldr	r1, [pc, #408]	@ (801446c <MAP_makeCmdList+0x2ac>)
 80142d4:	0152      	lsls	r2, r2, #5
 80142d6:	440a      	add	r2, r1
 80142d8:	4413      	add	r3, r2
 80142da:	781b      	ldrb	r3, [r3, #0]
 80142dc:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80142e0:	2b20      	cmp	r3, #32
 80142e2:	d10d      	bne.n	8014300 <MAP_makeCmdList+0x140>
 80142e4:	79ba      	ldrb	r2, [r7, #6]
 80142e6:	79fb      	ldrb	r3, [r7, #7]
 80142e8:	3301      	adds	r3, #1
 80142ea:	495f      	ldr	r1, [pc, #380]	@ (8014468 <MAP_makeCmdList+0x2a8>)
 80142ec:	0152      	lsls	r2, r2, #5
 80142ee:	4413      	add	r3, r2
 80142f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80142f4:	8a3a      	ldrh	r2, [r7, #16]
 80142f6:	429a      	cmp	r2, r3
 80142f8:	d102      	bne.n	8014300 <MAP_makeCmdList+0x140>
 80142fa:	2301      	movs	r3, #1
 80142fc:	74fb      	strb	r3, [r7, #19]
 80142fe:	e11f      	b.n	8014540 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_Cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 8014300:	79ba      	ldrb	r2, [r7, #6]
 8014302:	79fb      	ldrb	r3, [r7, #7]
 8014304:	4959      	ldr	r1, [pc, #356]	@ (801446c <MAP_makeCmdList+0x2ac>)
 8014306:	0152      	lsls	r2, r2, #5
 8014308:	440a      	add	r2, r1
 801430a:	4413      	add	r3, r2
 801430c:	781b      	ldrb	r3, [r3, #0]
 801430e:	f003 0311 	and.w	r3, r3, #17
 8014312:	2b10      	cmp	r3, #16
 8014314:	d10d      	bne.n	8014332 <MAP_makeCmdList+0x172>
 8014316:	79bb      	ldrb	r3, [r7, #6]
 8014318:	1c5a      	adds	r2, r3, #1
 801431a:	79fb      	ldrb	r3, [r7, #7]
 801431c:	4952      	ldr	r1, [pc, #328]	@ (8014468 <MAP_makeCmdList+0x2a8>)
 801431e:	0152      	lsls	r2, r2, #5
 8014320:	4413      	add	r3, r2
 8014322:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014326:	8a3a      	ldrh	r2, [r7, #16]
 8014328:	429a      	cmp	r2, r3
 801432a:	d102      	bne.n	8014332 <MAP_makeCmdList+0x172>
 801432c:	2300      	movs	r3, #0
 801432e:	74fb      	strb	r3, [r7, #19]
 8014330:	e106      	b.n	8014540 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_Cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 8014332:	79ba      	ldrb	r2, [r7, #6]
 8014334:	79fb      	ldrb	r3, [r7, #7]
 8014336:	494d      	ldr	r1, [pc, #308]	@ (801446c <MAP_makeCmdList+0x2ac>)
 8014338:	0152      	lsls	r2, r2, #5
 801433a:	440a      	add	r2, r1
 801433c:	4413      	add	r3, r2
 801433e:	781b      	ldrb	r3, [r3, #0]
 8014340:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8014344:	2b40      	cmp	r3, #64	@ 0x40
 8014346:	d10d      	bne.n	8014364 <MAP_makeCmdList+0x1a4>
 8014348:	79bb      	ldrb	r3, [r7, #6]
 801434a:	1e5a      	subs	r2, r3, #1
 801434c:	79fb      	ldrb	r3, [r7, #7]
 801434e:	4946      	ldr	r1, [pc, #280]	@ (8014468 <MAP_makeCmdList+0x2a8>)
 8014350:	0152      	lsls	r2, r2, #5
 8014352:	4413      	add	r3, r2
 8014354:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014358:	8a3a      	ldrh	r2, [r7, #16]
 801435a:	429a      	cmp	r2, r3
 801435c:	d102      	bne.n	8014364 <MAP_makeCmdList+0x1a4>
 801435e:	2302      	movs	r3, #2
 8014360:	74fb      	strb	r3, [r7, #19]
 8014362:	e0ed      	b.n	8014540 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_Cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 8014364:	79ba      	ldrb	r2, [r7, #6]
 8014366:	79fb      	ldrb	r3, [r7, #7]
 8014368:	4940      	ldr	r1, [pc, #256]	@ (801446c <MAP_makeCmdList+0x2ac>)
 801436a:	0152      	lsls	r2, r2, #5
 801436c:	440a      	add	r2, r1
 801436e:	4413      	add	r3, r2
 8014370:	781b      	ldrb	r3, [r3, #0]
 8014372:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 8014376:	2b80      	cmp	r3, #128	@ 0x80
 8014378:	d10d      	bne.n	8014396 <MAP_makeCmdList+0x1d6>
 801437a:	79ba      	ldrb	r2, [r7, #6]
 801437c:	79fb      	ldrb	r3, [r7, #7]
 801437e:	3b01      	subs	r3, #1
 8014380:	4939      	ldr	r1, [pc, #228]	@ (8014468 <MAP_makeCmdList+0x2a8>)
 8014382:	0152      	lsls	r2, r2, #5
 8014384:	4413      	add	r3, r2
 8014386:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801438a:	8a3a      	ldrh	r2, [r7, #16]
 801438c:	429a      	cmp	r2, r3
 801438e:	d102      	bne.n	8014396 <MAP_makeCmdList+0x1d6>
 8014390:	2303      	movs	r3, #3
 8014392:	74fb      	strb	r3, [r7, #19]
 8014394:	e0d4      	b.n	8014540 <MAP_makeCmdList+0x380>
			else   while(1);
 8014396:	e7fe      	b.n	8014396 <MAP_makeCmdList+0x1d6>
		}else if (en_staDir == SOUTH){
 8014398:	797b      	ldrb	r3, [r7, #5]
 801439a:	2b02      	cmp	r3, #2
 801439c:	d168      	bne.n	8014470 <MAP_makeCmdList+0x2b0>
			if     (((g_SysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_Cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 801439e:	79ba      	ldrb	r2, [r7, #6]
 80143a0:	79fb      	ldrb	r3, [r7, #7]
 80143a2:	4932      	ldr	r1, [pc, #200]	@ (801446c <MAP_makeCmdList+0x2ac>)
 80143a4:	0152      	lsls	r2, r2, #5
 80143a6:	440a      	add	r2, r1
 80143a8:	4413      	add	r3, r2
 80143aa:	781b      	ldrb	r3, [r3, #0]
 80143ac:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80143b0:	2b40      	cmp	r3, #64	@ 0x40
 80143b2:	d10d      	bne.n	80143d0 <MAP_makeCmdList+0x210>
 80143b4:	79bb      	ldrb	r3, [r7, #6]
 80143b6:	1e5a      	subs	r2, r3, #1
 80143b8:	79fb      	ldrb	r3, [r7, #7]
 80143ba:	492b      	ldr	r1, [pc, #172]	@ (8014468 <MAP_makeCmdList+0x2a8>)
 80143bc:	0152      	lsls	r2, r2, #5
 80143be:	4413      	add	r3, r2
 80143c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80143c4:	8a3a      	ldrh	r2, [r7, #16]
 80143c6:	429a      	cmp	r2, r3
 80143c8:	d102      	bne.n	80143d0 <MAP_makeCmdList+0x210>
 80143ca:	2302      	movs	r3, #2
 80143cc:	74fb      	strb	r3, [r7, #19]
 80143ce:	e0b7      	b.n	8014540 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_Cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 80143d0:	79ba      	ldrb	r2, [r7, #6]
 80143d2:	79fb      	ldrb	r3, [r7, #7]
 80143d4:	4925      	ldr	r1, [pc, #148]	@ (801446c <MAP_makeCmdList+0x2ac>)
 80143d6:	0152      	lsls	r2, r2, #5
 80143d8:	440a      	add	r2, r1
 80143da:	4413      	add	r3, r2
 80143dc:	781b      	ldrb	r3, [r3, #0]
 80143de:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80143e2:	2b20      	cmp	r3, #32
 80143e4:	d10d      	bne.n	8014402 <MAP_makeCmdList+0x242>
 80143e6:	79ba      	ldrb	r2, [r7, #6]
 80143e8:	79fb      	ldrb	r3, [r7, #7]
 80143ea:	3301      	adds	r3, #1
 80143ec:	491e      	ldr	r1, [pc, #120]	@ (8014468 <MAP_makeCmdList+0x2a8>)
 80143ee:	0152      	lsls	r2, r2, #5
 80143f0:	4413      	add	r3, r2
 80143f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80143f6:	8a3a      	ldrh	r2, [r7, #16]
 80143f8:	429a      	cmp	r2, r3
 80143fa:	d102      	bne.n	8014402 <MAP_makeCmdList+0x242>
 80143fc:	2301      	movs	r3, #1
 80143fe:	74fb      	strb	r3, [r7, #19]
 8014400:	e09e      	b.n	8014540 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_Cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 8014402:	79ba      	ldrb	r2, [r7, #6]
 8014404:	79fb      	ldrb	r3, [r7, #7]
 8014406:	4919      	ldr	r1, [pc, #100]	@ (801446c <MAP_makeCmdList+0x2ac>)
 8014408:	0152      	lsls	r2, r2, #5
 801440a:	440a      	add	r2, r1
 801440c:	4413      	add	r3, r2
 801440e:	781b      	ldrb	r3, [r3, #0]
 8014410:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 8014414:	2b80      	cmp	r3, #128	@ 0x80
 8014416:	d10d      	bne.n	8014434 <MAP_makeCmdList+0x274>
 8014418:	79ba      	ldrb	r2, [r7, #6]
 801441a:	79fb      	ldrb	r3, [r7, #7]
 801441c:	3b01      	subs	r3, #1
 801441e:	4912      	ldr	r1, [pc, #72]	@ (8014468 <MAP_makeCmdList+0x2a8>)
 8014420:	0152      	lsls	r2, r2, #5
 8014422:	4413      	add	r3, r2
 8014424:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014428:	8a3a      	ldrh	r2, [r7, #16]
 801442a:	429a      	cmp	r2, r3
 801442c:	d102      	bne.n	8014434 <MAP_makeCmdList+0x274>
 801442e:	2303      	movs	r3, #3
 8014430:	74fb      	strb	r3, [r7, #19]
 8014432:	e085      	b.n	8014540 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_Cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 8014434:	79ba      	ldrb	r2, [r7, #6]
 8014436:	79fb      	ldrb	r3, [r7, #7]
 8014438:	490c      	ldr	r1, [pc, #48]	@ (801446c <MAP_makeCmdList+0x2ac>)
 801443a:	0152      	lsls	r2, r2, #5
 801443c:	440a      	add	r2, r1
 801443e:	4413      	add	r3, r2
 8014440:	781b      	ldrb	r3, [r3, #0]
 8014442:	f003 0311 	and.w	r3, r3, #17
 8014446:	2b10      	cmp	r3, #16
 8014448:	d10d      	bne.n	8014466 <MAP_makeCmdList+0x2a6>
 801444a:	79bb      	ldrb	r3, [r7, #6]
 801444c:	1c5a      	adds	r2, r3, #1
 801444e:	79fb      	ldrb	r3, [r7, #7]
 8014450:	4905      	ldr	r1, [pc, #20]	@ (8014468 <MAP_makeCmdList+0x2a8>)
 8014452:	0152      	lsls	r2, r2, #5
 8014454:	4413      	add	r3, r2
 8014456:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801445a:	8a3a      	ldrh	r2, [r7, #16]
 801445c:	429a      	cmp	r2, r3
 801445e:	d102      	bne.n	8014466 <MAP_makeCmdList+0x2a6>
 8014460:	2300      	movs	r3, #0
 8014462:	74fb      	strb	r3, [r7, #19]
 8014464:	e06c      	b.n	8014540 <MAP_makeCmdList+0x380>
			else   while(1);
 8014466:	e7fe      	b.n	8014466 <MAP_makeCmdList+0x2a6>
 8014468:	2001ada0 	.word	0x2001ada0
 801446c:	2001b5a0 	.word	0x2001b5a0
		}else if (en_staDir == WEST){
 8014470:	797b      	ldrb	r3, [r7, #5]
 8014472:	2b03      	cmp	r3, #3
 8014474:	d164      	bne.n	8014540 <MAP_makeCmdList+0x380>
			if     (((g_SysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_Cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 8014476:	79ba      	ldrb	r2, [r7, #6]
 8014478:	79fb      	ldrb	r3, [r7, #7]
 801447a:	4979      	ldr	r1, [pc, #484]	@ (8014660 <MAP_makeCmdList+0x4a0>)
 801447c:	0152      	lsls	r2, r2, #5
 801447e:	440a      	add	r2, r1
 8014480:	4413      	add	r3, r2
 8014482:	781b      	ldrb	r3, [r3, #0]
 8014484:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 8014488:	2b80      	cmp	r3, #128	@ 0x80
 801448a:	d10d      	bne.n	80144a8 <MAP_makeCmdList+0x2e8>
 801448c:	79ba      	ldrb	r2, [r7, #6]
 801448e:	79fb      	ldrb	r3, [r7, #7]
 8014490:	3b01      	subs	r3, #1
 8014492:	4974      	ldr	r1, [pc, #464]	@ (8014664 <MAP_makeCmdList+0x4a4>)
 8014494:	0152      	lsls	r2, r2, #5
 8014496:	4413      	add	r3, r2
 8014498:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801449c:	8a3a      	ldrh	r2, [r7, #16]
 801449e:	429a      	cmp	r2, r3
 80144a0:	d102      	bne.n	80144a8 <MAP_makeCmdList+0x2e8>
 80144a2:	2303      	movs	r3, #3
 80144a4:	74fb      	strb	r3, [r7, #19]
 80144a6:	e04b      	b.n	8014540 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_Cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 80144a8:	79ba      	ldrb	r2, [r7, #6]
 80144aa:	79fb      	ldrb	r3, [r7, #7]
 80144ac:	496c      	ldr	r1, [pc, #432]	@ (8014660 <MAP_makeCmdList+0x4a0>)
 80144ae:	0152      	lsls	r2, r2, #5
 80144b0:	440a      	add	r2, r1
 80144b2:	4413      	add	r3, r2
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	f003 0311 	and.w	r3, r3, #17
 80144ba:	2b10      	cmp	r3, #16
 80144bc:	d10d      	bne.n	80144da <MAP_makeCmdList+0x31a>
 80144be:	79bb      	ldrb	r3, [r7, #6]
 80144c0:	1c5a      	adds	r2, r3, #1
 80144c2:	79fb      	ldrb	r3, [r7, #7]
 80144c4:	4967      	ldr	r1, [pc, #412]	@ (8014664 <MAP_makeCmdList+0x4a4>)
 80144c6:	0152      	lsls	r2, r2, #5
 80144c8:	4413      	add	r3, r2
 80144ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80144ce:	8a3a      	ldrh	r2, [r7, #16]
 80144d0:	429a      	cmp	r2, r3
 80144d2:	d102      	bne.n	80144da <MAP_makeCmdList+0x31a>
 80144d4:	2300      	movs	r3, #0
 80144d6:	74fb      	strb	r3, [r7, #19]
 80144d8:	e032      	b.n	8014540 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_Cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 80144da:	79ba      	ldrb	r2, [r7, #6]
 80144dc:	79fb      	ldrb	r3, [r7, #7]
 80144de:	4960      	ldr	r1, [pc, #384]	@ (8014660 <MAP_makeCmdList+0x4a0>)
 80144e0:	0152      	lsls	r2, r2, #5
 80144e2:	440a      	add	r2, r1
 80144e4:	4413      	add	r3, r2
 80144e6:	781b      	ldrb	r3, [r3, #0]
 80144e8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80144ec:	2b40      	cmp	r3, #64	@ 0x40
 80144ee:	d10d      	bne.n	801450c <MAP_makeCmdList+0x34c>
 80144f0:	79bb      	ldrb	r3, [r7, #6]
 80144f2:	1e5a      	subs	r2, r3, #1
 80144f4:	79fb      	ldrb	r3, [r7, #7]
 80144f6:	495b      	ldr	r1, [pc, #364]	@ (8014664 <MAP_makeCmdList+0x4a4>)
 80144f8:	0152      	lsls	r2, r2, #5
 80144fa:	4413      	add	r3, r2
 80144fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014500:	8a3a      	ldrh	r2, [r7, #16]
 8014502:	429a      	cmp	r2, r3
 8014504:	d102      	bne.n	801450c <MAP_makeCmdList+0x34c>
 8014506:	2302      	movs	r3, #2
 8014508:	74fb      	strb	r3, [r7, #19]
 801450a:	e019      	b.n	8014540 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_Cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 801450c:	79ba      	ldrb	r2, [r7, #6]
 801450e:	79fb      	ldrb	r3, [r7, #7]
 8014510:	4953      	ldr	r1, [pc, #332]	@ (8014660 <MAP_makeCmdList+0x4a0>)
 8014512:	0152      	lsls	r2, r2, #5
 8014514:	440a      	add	r2, r1
 8014516:	4413      	add	r3, r2
 8014518:	781b      	ldrb	r3, [r3, #0]
 801451a:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 801451e:	2b20      	cmp	r3, #32
 8014520:	d10d      	bne.n	801453e <MAP_makeCmdList+0x37e>
 8014522:	79ba      	ldrb	r2, [r7, #6]
 8014524:	79fb      	ldrb	r3, [r7, #7]
 8014526:	3301      	adds	r3, #1
 8014528:	494e      	ldr	r1, [pc, #312]	@ (8014664 <MAP_makeCmdList+0x4a4>)
 801452a:	0152      	lsls	r2, r2, #5
 801452c:	4413      	add	r3, r2
 801452e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014532:	8a3a      	ldrh	r2, [r7, #16]
 8014534:	429a      	cmp	r2, r3
 8014536:	d102      	bne.n	801453e <MAP_makeCmdList+0x37e>
 8014538:	2301      	movs	r3, #1
 801453a:	74fb      	strb	r3, [r7, #19]
 801453c:	e000      	b.n	8014540 <MAP_makeCmdList+0x380>
			else   while(1);
 801453e:	e7fe      	b.n	801453e <MAP_makeCmdList+0x37e>
		}
		
		en_tempDir = (enMAP_HEAD_DIR)( (en_nowDir - en_staDir) & (enMAP_HEAD_DIR)3 );		// 方向更新
 8014540:	7cfa      	ldrb	r2, [r7, #19]
 8014542:	797b      	ldrb	r3, [r7, #5]
 8014544:	1ad3      	subs	r3, r2, r3
 8014546:	b2db      	uxtb	r3, r3
 8014548:	f003 0303 	and.w	r3, r3, #3
 801454c:	73fb      	strb	r3, [r7, #15]
		en_staDir = en_nowDir;
 801454e:	7cfb      	ldrb	r3, [r7, #19]
 8014550:	717b      	strb	r3, [r7, #5]

		if (en_tempDir == NORTH){
 8014552:	7bfb      	ldrb	r3, [r7, #15]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d103      	bne.n	8014560 <MAP_makeCmdList+0x3a0>
			uc_goStep = uc_goStep + 2;
 8014558:	7dfb      	ldrb	r3, [r7, #23]
 801455a:	3302      	adds	r3, #2
 801455c:	75fb      	strb	r3, [r7, #23]
 801455e:	e037      	b.n	80145d0 <MAP_makeCmdList+0x410>
		}
		else if (en_tempDir == EAST){
 8014560:	7bfb      	ldrb	r3, [r7, #15]
 8014562:	2b01      	cmp	r3, #1
 8014564:	d110      	bne.n	8014588 <MAP_makeCmdList+0x3c8>
			dcom[us_pt] = uc_goStep;
 8014566:	8abb      	ldrh	r3, [r7, #20]
 8014568:	493f      	ldr	r1, [pc, #252]	@ (8014668 <MAP_makeCmdList+0x4a8>)
 801456a:	7dfa      	ldrb	r2, [r7, #23]
 801456c:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R90;
 801456e:	8abb      	ldrh	r3, [r7, #20]
 8014570:	3301      	adds	r3, #1
 8014572:	82bb      	strh	r3, [r7, #20]
 8014574:	8abb      	ldrh	r3, [r7, #20]
 8014576:	4a3c      	ldr	r2, [pc, #240]	@ (8014668 <MAP_makeCmdList+0x4a8>)
 8014578:	2148      	movs	r1, #72	@ 0x48
 801457a:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 801457c:	2302      	movs	r3, #2
 801457e:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 8014580:	8abb      	ldrh	r3, [r7, #20]
 8014582:	3301      	adds	r3, #1
 8014584:	82bb      	strh	r3, [r7, #20]
 8014586:	e023      	b.n	80145d0 <MAP_makeCmdList+0x410>
		}
		else if (en_tempDir == WEST){
 8014588:	7bfb      	ldrb	r3, [r7, #15]
 801458a:	2b03      	cmp	r3, #3
 801458c:	d110      	bne.n	80145b0 <MAP_makeCmdList+0x3f0>
			dcom[us_pt] = uc_goStep;
 801458e:	8abb      	ldrh	r3, [r7, #20]
 8014590:	4935      	ldr	r1, [pc, #212]	@ (8014668 <MAP_makeCmdList+0x4a8>)
 8014592:	7dfa      	ldrb	r2, [r7, #23]
 8014594:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = L90;
 8014596:	8abb      	ldrh	r3, [r7, #20]
 8014598:	3301      	adds	r3, #1
 801459a:	82bb      	strh	r3, [r7, #20]
 801459c:	8abb      	ldrh	r3, [r7, #20]
 801459e:	4a32      	ldr	r2, [pc, #200]	@ (8014668 <MAP_makeCmdList+0x4a8>)
 80145a0:	2149      	movs	r1, #73	@ 0x49
 80145a2:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 80145a4:	2302      	movs	r3, #2
 80145a6:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 80145a8:	8abb      	ldrh	r3, [r7, #20]
 80145aa:	3301      	adds	r3, #1
 80145ac:	82bb      	strh	r3, [r7, #20]
 80145ae:	e00f      	b.n	80145d0 <MAP_makeCmdList+0x410>
		}
		else{
			dcom[us_pt] = uc_goStep;
 80145b0:	8abb      	ldrh	r3, [r7, #20]
 80145b2:	492d      	ldr	r1, [pc, #180]	@ (8014668 <MAP_makeCmdList+0x4a8>)
 80145b4:	7dfa      	ldrb	r2, [r7, #23]
 80145b6:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R180;
 80145b8:	8abb      	ldrh	r3, [r7, #20]
 80145ba:	3301      	adds	r3, #1
 80145bc:	82bb      	strh	r3, [r7, #20]
 80145be:	8abb      	ldrh	r3, [r7, #20]
 80145c0:	4a29      	ldr	r2, [pc, #164]	@ (8014668 <MAP_makeCmdList+0x4a8>)
 80145c2:	214a      	movs	r1, #74	@ 0x4a
 80145c4:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 80145c6:	2302      	movs	r3, #2
 80145c8:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 80145ca:	8abb      	ldrh	r3, [r7, #20]
 80145cc:	3301      	adds	r3, #1
 80145ce:	82bb      	strh	r3, [r7, #20]
		}

		if      (en_nowDir == NORTH) uc_staY = uc_staY + 1;
 80145d0:	7cfb      	ldrb	r3, [r7, #19]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d103      	bne.n	80145de <MAP_makeCmdList+0x41e>
 80145d6:	79bb      	ldrb	r3, [r7, #6]
 80145d8:	3301      	adds	r3, #1
 80145da:	71bb      	strb	r3, [r7, #6]
 80145dc:	e013      	b.n	8014606 <MAP_makeCmdList+0x446>
		else if (en_nowDir == EAST) uc_staX = uc_staX + 1;
 80145de:	7cfb      	ldrb	r3, [r7, #19]
 80145e0:	2b01      	cmp	r3, #1
 80145e2:	d103      	bne.n	80145ec <MAP_makeCmdList+0x42c>
 80145e4:	79fb      	ldrb	r3, [r7, #7]
 80145e6:	3301      	adds	r3, #1
 80145e8:	71fb      	strb	r3, [r7, #7]
 80145ea:	e00c      	b.n	8014606 <MAP_makeCmdList+0x446>
		else if (en_nowDir == SOUTH) uc_staY = uc_staY - 1;
 80145ec:	7cfb      	ldrb	r3, [r7, #19]
 80145ee:	2b02      	cmp	r3, #2
 80145f0:	d103      	bne.n	80145fa <MAP_makeCmdList+0x43a>
 80145f2:	79bb      	ldrb	r3, [r7, #6]
 80145f4:	3b01      	subs	r3, #1
 80145f6:	71bb      	strb	r3, [r7, #6]
 80145f8:	e005      	b.n	8014606 <MAP_makeCmdList+0x446>
		else if (en_nowDir == WEST) uc_staX = uc_staX - 1;
 80145fa:	7cfb      	ldrb	r3, [r7, #19]
 80145fc:	2b03      	cmp	r3, #3
 80145fe:	d102      	bne.n	8014606 <MAP_makeCmdList+0x446>
 8014600:	79fb      	ldrb	r3, [r7, #7]
 8014602:	3b01      	subs	r3, #1
 8014604:	71fb      	strb	r3, [r7, #7]
		
		en_staDir = en_nowDir;
 8014606:	7cfb      	ldrb	r3, [r7, #19]
 8014608:	717b      	strb	r3, [r7, #5]
		
		if ((uc_staX == uc_endX) &&(uc_staY == uc_endY)) break;
 801460a:	79fa      	ldrb	r2, [r7, #7]
 801460c:	793b      	ldrb	r3, [r7, #4]
 801460e:	429a      	cmp	r2, r3
 8014610:	f47f ade9 	bne.w	80141e6 <MAP_makeCmdList+0x26>
 8014614:	79ba      	ldrb	r2, [r7, #6]
 8014616:	f897 3020 	ldrb.w	r3, [r7, #32]
 801461a:	429a      	cmp	r2, r3
 801461c:	d000      	beq.n	8014620 <MAP_makeCmdList+0x460>
		us_high = us_Cmap[uc_staY][uc_staX]-1;
 801461e:	e5e2      	b.n	80141e6 <MAP_makeCmdList+0x26>
		if ((uc_staX == uc_endX) &&(uc_staY == uc_endY)) break;
 8014620:	bf00      	nop
	}
	
	/* 超地信旋回用のコマンドリスト作成 */
	dcom[us_pt] = uc_goStep;
 8014622:	8abb      	ldrh	r3, [r7, #20]
 8014624:	4910      	ldr	r1, [pc, #64]	@ (8014668 <MAP_makeCmdList+0x4a8>)
 8014626:	7dfa      	ldrb	r2, [r7, #23]
 8014628:	54ca      	strb	r2, [r1, r3]
	dcom[++us_pt] = STOP;
 801462a:	8abb      	ldrh	r3, [r7, #20]
 801462c:	3301      	adds	r3, #1
 801462e:	82bb      	strh	r3, [r7, #20]
 8014630:	8abb      	ldrh	r3, [r7, #20]
 8014632:	4a0d      	ldr	r2, [pc, #52]	@ (8014668 <MAP_makeCmdList+0x4a8>)
 8014634:	2100      	movs	r1, #0
 8014636:	54d1      	strb	r1, [r2, r3]
	dcom[++us_pt] = CEND;
 8014638:	8abb      	ldrh	r3, [r7, #20]
 801463a:	3301      	adds	r3, #1
 801463c:	82bb      	strh	r3, [r7, #20]
 801463e:	8abb      	ldrh	r3, [r7, #20]
 8014640:	4a09      	ldr	r2, [pc, #36]	@ (8014668 <MAP_makeCmdList+0x4a8>)
 8014642:	21fa      	movs	r1, #250	@ 0xfa
 8014644:	54d1      	strb	r1, [r2, r3]
	us_totalCmd = us_pt+1;			// コマンド総数
 8014646:	8abb      	ldrh	r3, [r7, #20]
 8014648:	3301      	adds	r3, #1
 801464a:	b29a      	uxth	r2, r3
 801464c:	4b07      	ldr	r3, [pc, #28]	@ (801466c <MAP_makeCmdList+0x4ac>)
 801464e:	801a      	strh	r2, [r3, #0]


	/* 最終的に向いている方向 */
	*en_endDir = en_staDir;
 8014650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014652:	797a      	ldrb	r2, [r7, #5]
 8014654:	701a      	strb	r2, [r3, #0]
}
 8014656:	bf00      	nop
 8014658:	3718      	adds	r7, #24
 801465a:	46bd      	mov	sp, r7
 801465c:	bc90      	pop	{r4, r7}
 801465e:	4770      	bx	lr
 8014660:	2001b5a0 	.word	0x2001b5a0
 8014664:	2001ada0 	.word	0x2001ada0
 8014668:	20017c48 	.word	0x20017c48
 801466c:	2001ac48 	.word	0x2001ac48

08014670 <MAP_makeSlaCmdList>:

void MAP_makeSlaCmdList( void )
{
 8014670:	b480      	push	{r7}
 8014672:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 8014676:	b083      	sub	sp, #12
 8014678:	af00      	add	r7, sp, #0
	uint16_t dcom_temp[4096];			// 半区画超信旋回コマンドリスト
	uint16_t i=0,j=0;					// roop
 801467a:	2300      	movs	r3, #0
 801467c:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014680:	f102 0206 	add.w	r2, r2, #6
 8014684:	8013      	strh	r3, [r2, #0]
 8014686:	2300      	movs	r3, #0
 8014688:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801468c:	f102 0204 	add.w	r2, r2, #4
 8014690:	8013      	strh	r3, [r2, #0]
	
	/* 超地信旋回コマンドをコピー */
	for( i=0; i<us_totalCmd; i++ ){
 8014692:	2300      	movs	r3, #0
 8014694:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014698:	f102 0206 	add.w	r2, r2, #6
 801469c:	8013      	strh	r3, [r2, #0]
 801469e:	e01e      	b.n	80146de <MAP_makeSlaCmdList+0x6e>
		dcom_temp[i] = dcom[i];
 80146a0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80146a4:	f103 0306 	add.w	r3, r3, #6
 80146a8:	881b      	ldrh	r3, [r3, #0]
 80146aa:	4aac      	ldr	r2, [pc, #688]	@ (801495c <MAP_makeSlaCmdList+0x2ec>)
 80146ac:	5cd2      	ldrb	r2, [r2, r3]
 80146ae:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80146b2:	f103 0306 	add.w	r3, r3, #6
 80146b6:	881b      	ldrh	r3, [r3, #0]
 80146b8:	4611      	mov	r1, r2
 80146ba:	f107 0208 	add.w	r2, r7, #8
 80146be:	005b      	lsls	r3, r3, #1
 80146c0:	4413      	add	r3, r2
 80146c2:	460a      	mov	r2, r1
 80146c4:	f823 2c04 	strh.w	r2, [r3, #-4]
	for( i=0; i<us_totalCmd; i++ ){
 80146c8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80146cc:	f103 0306 	add.w	r3, r3, #6
 80146d0:	881b      	ldrh	r3, [r3, #0]
 80146d2:	3301      	adds	r3, #1
 80146d4:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80146d8:	f102 0206 	add.w	r2, r2, #6
 80146dc:	8013      	strh	r3, [r2, #0]
 80146de:	4ba0      	ldr	r3, [pc, #640]	@ (8014960 <MAP_makeSlaCmdList+0x2f0>)
 80146e0:	881b      	ldrh	r3, [r3, #0]
 80146e2:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80146e6:	f102 0206 	add.w	r2, r2, #6
 80146ea:	8812      	ldrh	r2, [r2, #0]
 80146ec:	429a      	cmp	r2, r3
 80146ee:	d3d7      	bcc.n	80146a0 <MAP_makeSlaCmdList+0x30>
	}

	i = 0;
 80146f0:	2300      	movs	r3, #0
 80146f2:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80146f6:	f102 0206 	add.w	r2, r2, #6
 80146fa:	8013      	strh	r3, [r2, #0]

	/* 配列が旋回コマンドかをチェック */
	while(1)
	{
		if( dcom_temp[i] == R90 ){		// 右90°
 80146fc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014700:	f103 0306 	add.w	r3, r3, #6
 8014704:	881b      	ldrh	r3, [r3, #0]
 8014706:	f107 0208 	add.w	r2, r7, #8
 801470a:	005b      	lsls	r3, r3, #1
 801470c:	4413      	add	r3, r2
 801470e:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 8014712:	2b48      	cmp	r3, #72	@ 0x48
 8014714:	d140      	bne.n	8014798 <MAP_makeSlaCmdList+0x128>
			dcom_temp[i-1] -= 1;		// 1つ手前を引く
 8014716:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801471a:	f103 0306 	add.w	r3, r3, #6
 801471e:	881b      	ldrh	r3, [r3, #0]
 8014720:	3b01      	subs	r3, #1
 8014722:	f107 0208 	add.w	r2, r7, #8
 8014726:	005b      	lsls	r3, r3, #1
 8014728:	4413      	add	r3, r2
 801472a:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801472e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014732:	f103 0306 	add.w	r3, r3, #6
 8014736:	881b      	ldrh	r3, [r3, #0]
 8014738:	3b01      	subs	r3, #1
 801473a:	3a01      	subs	r2, #1
 801473c:	b292      	uxth	r2, r2
 801473e:	f107 0108 	add.w	r1, r7, #8
 8014742:	005b      	lsls	r3, r3, #1
 8014744:	440b      	add	r3, r1
 8014746:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i+1] -= 1;		// 1つ手前を引く
 801474a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801474e:	f103 0306 	add.w	r3, r3, #6
 8014752:	881b      	ldrh	r3, [r3, #0]
 8014754:	3301      	adds	r3, #1
 8014756:	f107 0208 	add.w	r2, r7, #8
 801475a:	005b      	lsls	r3, r3, #1
 801475c:	4413      	add	r3, r2
 801475e:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8014762:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014766:	f103 0306 	add.w	r3, r3, #6
 801476a:	881b      	ldrh	r3, [r3, #0]
 801476c:	3301      	adds	r3, #1
 801476e:	3a01      	subs	r2, #1
 8014770:	b292      	uxth	r2, r2
 8014772:	f107 0108 	add.w	r1, r7, #8
 8014776:	005b      	lsls	r3, r3, #1
 8014778:	440b      	add	r3, r1
 801477a:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i] = R90S;		// 右スラローム90°
 801477e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014782:	f103 0306 	add.w	r3, r3, #6
 8014786:	881b      	ldrh	r3, [r3, #0]
 8014788:	f107 0208 	add.w	r2, r7, #8
 801478c:	005b      	lsls	r3, r3, #1
 801478e:	4413      	add	r3, r2
 8014790:	224c      	movs	r2, #76	@ 0x4c
 8014792:	f823 2c04 	strh.w	r2, [r3, #-4]
 8014796:	e05a      	b.n	801484e <MAP_makeSlaCmdList+0x1de>
		}
		else if( dcom_temp[i] == L90 ){	// 左90°
 8014798:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801479c:	f103 0306 	add.w	r3, r3, #6
 80147a0:	881b      	ldrh	r3, [r3, #0]
 80147a2:	f107 0208 	add.w	r2, r7, #8
 80147a6:	005b      	lsls	r3, r3, #1
 80147a8:	4413      	add	r3, r2
 80147aa:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 80147ae:	2b49      	cmp	r3, #73	@ 0x49
 80147b0:	d140      	bne.n	8014834 <MAP_makeSlaCmdList+0x1c4>
			dcom_temp[i-1] -= 1;		// 1つ手前を引く
 80147b2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80147b6:	f103 0306 	add.w	r3, r3, #6
 80147ba:	881b      	ldrh	r3, [r3, #0]
 80147bc:	3b01      	subs	r3, #1
 80147be:	f107 0208 	add.w	r2, r7, #8
 80147c2:	005b      	lsls	r3, r3, #1
 80147c4:	4413      	add	r3, r2
 80147c6:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80147ca:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80147ce:	f103 0306 	add.w	r3, r3, #6
 80147d2:	881b      	ldrh	r3, [r3, #0]
 80147d4:	3b01      	subs	r3, #1
 80147d6:	3a01      	subs	r2, #1
 80147d8:	b292      	uxth	r2, r2
 80147da:	f107 0108 	add.w	r1, r7, #8
 80147de:	005b      	lsls	r3, r3, #1
 80147e0:	440b      	add	r3, r1
 80147e2:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i+1] -= 1;		// 1つ手前を引く
 80147e6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80147ea:	f103 0306 	add.w	r3, r3, #6
 80147ee:	881b      	ldrh	r3, [r3, #0]
 80147f0:	3301      	adds	r3, #1
 80147f2:	f107 0208 	add.w	r2, r7, #8
 80147f6:	005b      	lsls	r3, r3, #1
 80147f8:	4413      	add	r3, r2
 80147fa:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80147fe:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014802:	f103 0306 	add.w	r3, r3, #6
 8014806:	881b      	ldrh	r3, [r3, #0]
 8014808:	3301      	adds	r3, #1
 801480a:	3a01      	subs	r2, #1
 801480c:	b292      	uxth	r2, r2
 801480e:	f107 0108 	add.w	r1, r7, #8
 8014812:	005b      	lsls	r3, r3, #1
 8014814:	440b      	add	r3, r1
 8014816:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i] = L90S;		// 左スラローム90°
 801481a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801481e:	f103 0306 	add.w	r3, r3, #6
 8014822:	881b      	ldrh	r3, [r3, #0]
 8014824:	f107 0208 	add.w	r2, r7, #8
 8014828:	005b      	lsls	r3, r3, #1
 801482a:	4413      	add	r3, r2
 801482c:	224d      	movs	r2, #77	@ 0x4d
 801482e:	f823 2c04 	strh.w	r2, [r3, #-4]
 8014832:	e00c      	b.n	801484e <MAP_makeSlaCmdList+0x1de>
		}
		else{
			if( dcom_temp[i] == CEND ){
 8014834:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014838:	f103 0306 	add.w	r3, r3, #6
 801483c:	881b      	ldrh	r3, [r3, #0]
 801483e:	f107 0208 	add.w	r2, r7, #8
 8014842:	005b      	lsls	r3, r3, #1
 8014844:	4413      	add	r3, r2
 8014846:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 801484a:	2bfa      	cmp	r3, #250	@ 0xfa
 801484c:	d00b      	beq.n	8014866 <MAP_makeSlaCmdList+0x1f6>
				break;
			}
		}
		i++;
 801484e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014852:	f103 0306 	add.w	r3, r3, #6
 8014856:	881b      	ldrh	r3, [r3, #0]
 8014858:	3301      	adds	r3, #1
 801485a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801485e:	f102 0206 	add.w	r2, r2, #6
 8014862:	8013      	strh	r3, [r2, #0]
		if( dcom_temp[i] == R90 ){		// 右90°
 8014864:	e74a      	b.n	80146fc <MAP_makeSlaCmdList+0x8c>
				break;
 8014866:	bf00      	nop
	}

	i = j = 0;
 8014868:	2300      	movs	r3, #0
 801486a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801486e:	f102 0204 	add.w	r2, r2, #4
 8014872:	8013      	strh	r3, [r2, #0]
 8014874:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014878:	f103 0304 	add.w	r3, r3, #4
 801487c:	881b      	ldrh	r3, [r3, #0]
 801487e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014882:	f102 0206 	add.w	r2, r2, #6
 8014886:	8013      	strh	r3, [r2, #0]

	/* スラロームコマンド変換 */
	while(1)
	{
		if( dcom_temp[i+1] == CEND ){
 8014888:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801488c:	f103 0306 	add.w	r3, r3, #6
 8014890:	881b      	ldrh	r3, [r3, #0]
 8014892:	3301      	adds	r3, #1
 8014894:	f107 0208 	add.w	r2, r7, #8
 8014898:	005b      	lsls	r3, r3, #1
 801489a:	4413      	add	r3, r2
 801489c:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 80148a0:	2bfa      	cmp	r3, #250	@ 0xfa
 80148a2:	d111      	bne.n	80148c8 <MAP_makeSlaCmdList+0x258>
			scom[j] = STOP;
 80148a4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80148a8:	f103 0304 	add.w	r3, r3, #4
 80148ac:	881b      	ldrh	r3, [r3, #0]
 80148ae:	4a2d      	ldr	r2, [pc, #180]	@ (8014964 <MAP_makeSlaCmdList+0x2f4>)
 80148b0:	2100      	movs	r1, #0
 80148b2:	54d1      	strb	r1, [r2, r3]
			scom[j+1] = CEND;
 80148b4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80148b8:	f103 0304 	add.w	r3, r3, #4
 80148bc:	881b      	ldrh	r3, [r3, #0]
 80148be:	3301      	adds	r3, #1
 80148c0:	4a28      	ldr	r2, [pc, #160]	@ (8014964 <MAP_makeSlaCmdList+0x2f4>)
 80148c2:	21fa      	movs	r1, #250	@ 0xfa
 80148c4:	54d1      	strb	r1, [r2, r3]
			break;
 80148c6:	e041      	b.n	801494c <MAP_makeSlaCmdList+0x2dc>
		}
		else
		{
			/* データがストップコマンドだったら */
			if( dcom_temp[i] == 0 ){
 80148c8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80148cc:	f103 0306 	add.w	r3, r3, #6
 80148d0:	881b      	ldrh	r3, [r3, #0]
 80148d2:	f107 0208 	add.w	r2, r7, #8
 80148d6:	005b      	lsls	r3, r3, #1
 80148d8:	4413      	add	r3, r2
 80148da:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d10a      	bne.n	80148f8 <MAP_makeSlaCmdList+0x288>
				i++;
 80148e2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80148e6:	f103 0306 	add.w	r3, r3, #6
 80148ea:	881b      	ldrh	r3, [r3, #0]
 80148ec:	3301      	adds	r3, #1
 80148ee:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80148f2:	f102 0206 	add.w	r2, r2, #6
 80148f6:	8013      	strh	r3, [r2, #0]
			}
			
			scom[j] = dcom_temp[i];
 80148f8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80148fc:	f103 0306 	add.w	r3, r3, #6
 8014900:	881b      	ldrh	r3, [r3, #0]
 8014902:	f107 0208 	add.w	r2, r7, #8
 8014906:	005b      	lsls	r3, r3, #1
 8014908:	4413      	add	r3, r2
 801490a:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801490e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014912:	f103 0304 	add.w	r3, r3, #4
 8014916:	881b      	ldrh	r3, [r3, #0]
 8014918:	b2d1      	uxtb	r1, r2
 801491a:	4a12      	ldr	r2, [pc, #72]	@ (8014964 <MAP_makeSlaCmdList+0x2f4>)
 801491c:	54d1      	strb	r1, [r2, r3]
			
			i++;
 801491e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014922:	f103 0306 	add.w	r3, r3, #6
 8014926:	881b      	ldrh	r3, [r3, #0]
 8014928:	3301      	adds	r3, #1
 801492a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801492e:	f102 0206 	add.w	r2, r2, #6
 8014932:	8013      	strh	r3, [r2, #0]
			j++;
 8014934:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014938:	f103 0304 	add.w	r3, r3, #4
 801493c:	881b      	ldrh	r3, [r3, #0]
 801493e:	3301      	adds	r3, #1
 8014940:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014944:	f102 0204 	add.w	r2, r2, #4
 8014948:	8013      	strh	r3, [r2, #0]
		if( dcom_temp[i+1] == CEND ){
 801494a:	e79d      	b.n	8014888 <MAP_makeSlaCmdList+0x218>
		}
	}
}
 801494c:	bf00      	nop
 801494e:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 8014952:	370c      	adds	r7, #12
 8014954:	46bd      	mov	sp, r7
 8014956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495a:	4770      	bx	lr
 801495c:	20017c48 	.word	0x20017c48
 8014960:	2001ac48 	.word	0x2001ac48
 8014964:	20018c48 	.word	0x20018c48

08014968 <MAP_makeSkewCmdList>:

void MAP_makeSkewCmdList( void )
{
 8014968:	b480      	push	{r7}
 801496a:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 801496e:	b087      	sub	sp, #28
 8014970:	af00      	add	r7, sp, #0
	uint16_t	scom_temp[4096];			// 半区画超信旋回コマンドリスト
	uint16_t	i;							// roop
	uint16_t	c1, c2, c3, c4;				// 計算用
	uint16_t	x;
	uint16_t	ct_n=0, ct_st=0;
 8014972:	2300      	movs	r3, #0
 8014974:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014978:	f102 0212 	add.w	r2, r2, #18
 801497c:	8013      	strh	r3, [r2, #0]
 801497e:	2300      	movs	r3, #0
 8014980:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014984:	f102 0210 	add.w	r2, r2, #16
 8014988:	8013      	strh	r3, [r2, #0]
	uint16_t	flag = 3;					//	斜め走行用バッファ  0:複合コマンド　1:斜め  2:S135N → N135S  3:直進
 801498a:	2303      	movs	r3, #3
 801498c:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014990:	f102 020e 	add.w	r2, r2, #14
 8014994:	8013      	strh	r3, [r2, #0]
	
	/* 超地信旋回コマンドをコピー */
	for( i=0; i<us_totalCmd; i++ )
 8014996:	2300      	movs	r3, #0
 8014998:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801499c:	f102 0216 	add.w	r2, r2, #22
 80149a0:	8013      	strh	r3, [r2, #0]
 80149a2:	e01e      	b.n	80149e2 <MAP_makeSkewCmdList+0x7a>
	{
		scom_temp[i] = scom[i];
 80149a4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80149a8:	f103 0316 	add.w	r3, r3, #22
 80149ac:	881b      	ldrh	r3, [r3, #0]
 80149ae:	4acb      	ldr	r2, [pc, #812]	@ (8014cdc <MAP_makeSkewCmdList+0x374>)
 80149b0:	5cd2      	ldrb	r2, [r2, r3]
 80149b2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80149b6:	f103 0316 	add.w	r3, r3, #22
 80149ba:	881b      	ldrh	r3, [r3, #0]
 80149bc:	4611      	mov	r1, r2
 80149be:	f107 0218 	add.w	r2, r7, #24
 80149c2:	005b      	lsls	r3, r3, #1
 80149c4:	4413      	add	r3, r2
 80149c6:	460a      	mov	r2, r1
 80149c8:	f823 2c14 	strh.w	r2, [r3, #-20]
	for( i=0; i<us_totalCmd; i++ )
 80149cc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80149d0:	f103 0316 	add.w	r3, r3, #22
 80149d4:	881b      	ldrh	r3, [r3, #0]
 80149d6:	3301      	adds	r3, #1
 80149d8:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80149dc:	f102 0216 	add.w	r2, r2, #22
 80149e0:	8013      	strh	r3, [r2, #0]
 80149e2:	4bbf      	ldr	r3, [pc, #764]	@ (8014ce0 <MAP_makeSkewCmdList+0x378>)
 80149e4:	881b      	ldrh	r3, [r3, #0]
 80149e6:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80149ea:	f102 0216 	add.w	r2, r2, #22
 80149ee:	8812      	ldrh	r2, [r2, #0]
 80149f0:	429a      	cmp	r2, r3
 80149f2:	d3d7      	bcc.n	80149a4 <MAP_makeSkewCmdList+0x3c>
	}

	i=0;
 80149f4:	2300      	movs	r3, #0
 80149f6:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80149fa:	f102 0216 	add.w	r2, r2, #22
 80149fe:	8013      	strh	r3, [r2, #0]

	/* 配列が旋回コマンドかをチェック */
	while(1)
	{
		c1 = scom_temp[ct_st];
 8014a00:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014a04:	f103 0310 	add.w	r3, r3, #16
 8014a08:	881b      	ldrh	r3, [r3, #0]
 8014a0a:	f107 0218 	add.w	r2, r7, #24
 8014a0e:	005b      	lsls	r3, r3, #1
 8014a10:	4413      	add	r3, r2
 8014a12:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8014a16:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014a1a:	f102 020c 	add.w	r2, r2, #12
 8014a1e:	8013      	strh	r3, [r2, #0]
		c2 = scom_temp[ct_st+1];
 8014a20:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014a24:	f103 0310 	add.w	r3, r3, #16
 8014a28:	881b      	ldrh	r3, [r3, #0]
 8014a2a:	3301      	adds	r3, #1
 8014a2c:	f107 0218 	add.w	r2, r7, #24
 8014a30:	005b      	lsls	r3, r3, #1
 8014a32:	4413      	add	r3, r2
 8014a34:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8014a38:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014a3c:	f102 020a 	add.w	r2, r2, #10
 8014a40:	8013      	strh	r3, [r2, #0]
		c3 = scom_temp[ct_st+2];
 8014a42:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014a46:	f103 0310 	add.w	r3, r3, #16
 8014a4a:	881b      	ldrh	r3, [r3, #0]
 8014a4c:	3302      	adds	r3, #2
 8014a4e:	f107 0218 	add.w	r2, r7, #24
 8014a52:	005b      	lsls	r3, r3, #1
 8014a54:	4413      	add	r3, r2
 8014a56:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8014a5a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014a5e:	f102 0208 	add.w	r2, r2, #8
 8014a62:	8013      	strh	r3, [r2, #0]
		c4 = scom_temp[ct_st+3];
 8014a64:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014a68:	f103 0310 	add.w	r3, r3, #16
 8014a6c:	881b      	ldrh	r3, [r3, #0]
 8014a6e:	3303      	adds	r3, #3
 8014a70:	f107 0218 	add.w	r2, r7, #24
 8014a74:	005b      	lsls	r3, r3, #1
 8014a76:	4413      	add	r3, r2
 8014a78:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8014a7c:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014a80:	f102 0206 	add.w	r2, r2, #6
 8014a84:	8013      	strh	r3, [r2, #0]

		//	直進 → 右45度 → 斜め
		if( (c1<=GO32) && (c2==R90S) && (c3==L90S) )
 8014a86:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014a8a:	f103 030c 	add.w	r3, r3, #12
 8014a8e:	881b      	ldrh	r3, [r3, #0]
 8014a90:	2b20      	cmp	r3, #32
 8014a92:	f200 808d 	bhi.w	8014bb0 <MAP_makeSkewCmdList+0x248>
 8014a96:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014a9a:	f103 030a 	add.w	r3, r3, #10
 8014a9e:	881b      	ldrh	r3, [r3, #0]
 8014aa0:	2b4c      	cmp	r3, #76	@ 0x4c
 8014aa2:	f040 8085 	bne.w	8014bb0 <MAP_makeSkewCmdList+0x248>
 8014aa6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014aaa:	f103 0308 	add.w	r3, r3, #8
 8014aae:	881b      	ldrh	r3, [r3, #0]
 8014ab0:	2b4d      	cmp	r3, #77	@ 0x4d
 8014ab2:	d17d      	bne.n	8014bb0 <MAP_makeSkewCmdList+0x248>
		{
			if((ct_st == 0) && (c1-1 == 0)){
 8014ab4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014ab8:	f103 0310 	add.w	r3, r3, #16
 8014abc:	881b      	ldrh	r3, [r3, #0]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d131      	bne.n	8014b26 <MAP_makeSkewCmdList+0x1be>
 8014ac2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014ac6:	f103 030c 	add.w	r3, r3, #12
 8014aca:	881b      	ldrh	r3, [r3, #0]
 8014acc:	2b01      	cmp	r3, #1
 8014ace:	d12a      	bne.n	8014b26 <MAP_makeSkewCmdList+0x1be>
				tcom[ ct_n ] = scom_temp[ct_st];
 8014ad0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014ad4:	f103 0310 	add.w	r3, r3, #16
 8014ad8:	881b      	ldrh	r3, [r3, #0]
 8014ada:	f107 0218 	add.w	r2, r7, #24
 8014ade:	005b      	lsls	r3, r3, #1
 8014ae0:	4413      	add	r3, r2
 8014ae2:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8014ae6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014aea:	f103 0312 	add.w	r3, r3, #18
 8014aee:	881b      	ldrh	r3, [r3, #0]
 8014af0:	b2d1      	uxtb	r1, r2
 8014af2:	4a7c      	ldr	r2, [pc, #496]	@ (8014ce4 <MAP_makeSkewCmdList+0x37c>)
 8014af4:	54d1      	strb	r1, [r2, r3]
				ct_st ++;
 8014af6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014afa:	f103 0310 	add.w	r3, r3, #16
 8014afe:	881b      	ldrh	r3, [r3, #0]
 8014b00:	3301      	adds	r3, #1
 8014b02:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014b06:	f102 0210 	add.w	r2, r2, #16
 8014b0a:	8013      	strh	r3, [r2, #0]
				ct_n ++;
 8014b0c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014b10:	f103 0312 	add.w	r3, r3, #18
 8014b14:	881b      	ldrh	r3, [r3, #0]
 8014b16:	3301      	adds	r3, #1
 8014b18:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014b1c:	f102 0212 	add.w	r2, r2, #18
 8014b20:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 8014b22:	f000 beca 	b.w	80158ba <MAP_makeSkewCmdList+0xf52>
			}
			else{
				if( c1-1 != 0 ) tcom[ ct_n++ ] = c1 - 1;		//	前の複合コマンドによって直線区間が消えない場合
 8014b26:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014b2a:	f103 030c 	add.w	r3, r3, #12
 8014b2e:	881b      	ldrh	r3, [r3, #0]
 8014b30:	2b01      	cmp	r3, #1
 8014b32:	d015      	beq.n	8014b60 <MAP_makeSkewCmdList+0x1f8>
 8014b34:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014b38:	f103 030c 	add.w	r3, r3, #12
 8014b3c:	881b      	ldrh	r3, [r3, #0]
 8014b3e:	b2da      	uxtb	r2, r3
 8014b40:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014b44:	f103 0312 	add.w	r3, r3, #18
 8014b48:	881b      	ldrh	r3, [r3, #0]
 8014b4a:	1c59      	adds	r1, r3, #1
 8014b4c:	f507 5000 	add.w	r0, r7, #8192	@ 0x2000
 8014b50:	f100 0012 	add.w	r0, r0, #18
 8014b54:	8001      	strh	r1, [r0, #0]
 8014b56:	4619      	mov	r1, r3
 8014b58:	1e53      	subs	r3, r2, #1
 8014b5a:	b2da      	uxtb	r2, r3
 8014b5c:	4b61      	ldr	r3, [pc, #388]	@ (8014ce4 <MAP_makeSkewCmdList+0x37c>)
 8014b5e:	545a      	strb	r2, [r3, r1]
				tcom[ ct_n++ ] = RS45N;
 8014b60:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014b64:	f103 0312 	add.w	r3, r3, #18
 8014b68:	881b      	ldrh	r3, [r3, #0]
 8014b6a:	1c5a      	adds	r2, r3, #1
 8014b6c:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014b70:	f101 0112 	add.w	r1, r1, #18
 8014b74:	800a      	strh	r2, [r1, #0]
 8014b76:	461a      	mov	r2, r3
 8014b78:	4b5a      	ldr	r3, [pc, #360]	@ (8014ce4 <MAP_makeSkewCmdList+0x37c>)
 8014b7a:	2199      	movs	r1, #153	@ 0x99
 8014b7c:	5499      	strb	r1, [r3, r2]
				ct_st ++;
 8014b7e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014b82:	f103 0310 	add.w	r3, r3, #16
 8014b86:	881b      	ldrh	r3, [r3, #0]
 8014b88:	3301      	adds	r3, #1
 8014b8a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014b8e:	f102 0210 	add.w	r2, r2, #16
 8014b92:	8013      	strh	r3, [r2, #0]

				x = (uint16_t)(NGO1 - 1);		//	斜めモード
 8014b94:	2351      	movs	r3, #81	@ 0x51
 8014b96:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014b9a:	f102 0214 	add.w	r2, r2, #20
 8014b9e:	8013      	strh	r3, [r2, #0]
				flag = 0;
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014ba6:	f102 020e 	add.w	r2, r2, #14
 8014baa:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 8014bac:	f000 be85 	b.w	80158ba <MAP_makeSkewCmdList+0xf52>
			}
		}
		//	直進 → 左45度 → 斜め
		else if( (c1<=GO32) && (c2==L90S) && (c3==R90S) )
 8014bb0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014bb4:	f103 030c 	add.w	r3, r3, #12
 8014bb8:	881b      	ldrh	r3, [r3, #0]
 8014bba:	2b20      	cmp	r3, #32
 8014bbc:	f200 8094 	bhi.w	8014ce8 <MAP_makeSkewCmdList+0x380>
 8014bc0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014bc4:	f103 030a 	add.w	r3, r3, #10
 8014bc8:	881b      	ldrh	r3, [r3, #0]
 8014bca:	2b4d      	cmp	r3, #77	@ 0x4d
 8014bcc:	f040 808c 	bne.w	8014ce8 <MAP_makeSkewCmdList+0x380>
 8014bd0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014bd4:	f103 0308 	add.w	r3, r3, #8
 8014bd8:	881b      	ldrh	r3, [r3, #0]
 8014bda:	2b4c      	cmp	r3, #76	@ 0x4c
 8014bdc:	f040 8084 	bne.w	8014ce8 <MAP_makeSkewCmdList+0x380>
		{
			if((ct_st == 0) && (c1-1 == 0)){
 8014be0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014be4:	f103 0310 	add.w	r3, r3, #16
 8014be8:	881b      	ldrh	r3, [r3, #0]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d131      	bne.n	8014c52 <MAP_makeSkewCmdList+0x2ea>
 8014bee:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014bf2:	f103 030c 	add.w	r3, r3, #12
 8014bf6:	881b      	ldrh	r3, [r3, #0]
 8014bf8:	2b01      	cmp	r3, #1
 8014bfa:	d12a      	bne.n	8014c52 <MAP_makeSkewCmdList+0x2ea>
				tcom[ ct_n ] = scom_temp[ct_st];
 8014bfc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014c00:	f103 0310 	add.w	r3, r3, #16
 8014c04:	881b      	ldrh	r3, [r3, #0]
 8014c06:	f107 0218 	add.w	r2, r7, #24
 8014c0a:	005b      	lsls	r3, r3, #1
 8014c0c:	4413      	add	r3, r2
 8014c0e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8014c12:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014c16:	f103 0312 	add.w	r3, r3, #18
 8014c1a:	881b      	ldrh	r3, [r3, #0]
 8014c1c:	b2d1      	uxtb	r1, r2
 8014c1e:	4a31      	ldr	r2, [pc, #196]	@ (8014ce4 <MAP_makeSkewCmdList+0x37c>)
 8014c20:	54d1      	strb	r1, [r2, r3]
				ct_st ++;
 8014c22:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014c26:	f103 0310 	add.w	r3, r3, #16
 8014c2a:	881b      	ldrh	r3, [r3, #0]
 8014c2c:	3301      	adds	r3, #1
 8014c2e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014c32:	f102 0210 	add.w	r2, r2, #16
 8014c36:	8013      	strh	r3, [r2, #0]
				ct_n ++;
 8014c38:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014c3c:	f103 0312 	add.w	r3, r3, #18
 8014c40:	881b      	ldrh	r3, [r3, #0]
 8014c42:	3301      	adds	r3, #1
 8014c44:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014c48:	f102 0212 	add.w	r2, r2, #18
 8014c4c:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 8014c4e:	f000 be34 	b.w	80158ba <MAP_makeSkewCmdList+0xf52>
			}
			else{
				if( c1-1 != 0 ) tcom[ ct_n++ ] = c1 - 1;		//	前の複合コマンドによって直線区間が消えない場合
 8014c52:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014c56:	f103 030c 	add.w	r3, r3, #12
 8014c5a:	881b      	ldrh	r3, [r3, #0]
 8014c5c:	2b01      	cmp	r3, #1
 8014c5e:	d015      	beq.n	8014c8c <MAP_makeSkewCmdList+0x324>
 8014c60:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014c64:	f103 030c 	add.w	r3, r3, #12
 8014c68:	881b      	ldrh	r3, [r3, #0]
 8014c6a:	b2da      	uxtb	r2, r3
 8014c6c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014c70:	f103 0312 	add.w	r3, r3, #18
 8014c74:	881b      	ldrh	r3, [r3, #0]
 8014c76:	1c59      	adds	r1, r3, #1
 8014c78:	f507 5000 	add.w	r0, r7, #8192	@ 0x2000
 8014c7c:	f100 0012 	add.w	r0, r0, #18
 8014c80:	8001      	strh	r1, [r0, #0]
 8014c82:	4619      	mov	r1, r3
 8014c84:	1e53      	subs	r3, r2, #1
 8014c86:	b2da      	uxtb	r2, r3
 8014c88:	4b16      	ldr	r3, [pc, #88]	@ (8014ce4 <MAP_makeSkewCmdList+0x37c>)
 8014c8a:	545a      	strb	r2, [r3, r1]
				tcom[ ct_n++ ] = LS45N;
 8014c8c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014c90:	f103 0312 	add.w	r3, r3, #18
 8014c94:	881b      	ldrh	r3, [r3, #0]
 8014c96:	1c5a      	adds	r2, r3, #1
 8014c98:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014c9c:	f101 0112 	add.w	r1, r1, #18
 8014ca0:	800a      	strh	r2, [r1, #0]
 8014ca2:	461a      	mov	r2, r3
 8014ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8014ce4 <MAP_makeSkewCmdList+0x37c>)
 8014ca6:	219a      	movs	r1, #154	@ 0x9a
 8014ca8:	5499      	strb	r1, [r3, r2]
				ct_st ++;
 8014caa:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014cae:	f103 0310 	add.w	r3, r3, #16
 8014cb2:	881b      	ldrh	r3, [r3, #0]
 8014cb4:	3301      	adds	r3, #1
 8014cb6:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014cba:	f102 0210 	add.w	r2, r2, #16
 8014cbe:	8013      	strh	r3, [r2, #0]

				x = (uint16_t)(NGO1 - 1);		//	斜めモード
 8014cc0:	2351      	movs	r3, #81	@ 0x51
 8014cc2:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014cc6:	f102 0214 	add.w	r2, r2, #20
 8014cca:	8013      	strh	r3, [r2, #0]
				flag = 0;
 8014ccc:	2300      	movs	r3, #0
 8014cce:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014cd2:	f102 020e 	add.w	r2, r2, #14
 8014cd6:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 8014cd8:	f000 bdef 	b.w	80158ba <MAP_makeSkewCmdList+0xf52>
 8014cdc:	20018c48 	.word	0x20018c48
 8014ce0:	2001ac48 	.word	0x2001ac48
 8014ce4:	20019c48 	.word	0x20019c48
			}
		}

		//	直進 → 右90度 → 直進
		else if( (c1<=GO32) && (c2==R90S) && (c3<=GO32) )
 8014ce8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014cec:	f103 030c 	add.w	r3, r3, #12
 8014cf0:	881b      	ldrh	r3, [r3, #0]
 8014cf2:	2b20      	cmp	r3, #32
 8014cf4:	d843      	bhi.n	8014d7e <MAP_makeSkewCmdList+0x416>
 8014cf6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014cfa:	f103 030a 	add.w	r3, r3, #10
 8014cfe:	881b      	ldrh	r3, [r3, #0]
 8014d00:	2b4c      	cmp	r3, #76	@ 0x4c
 8014d02:	d13c      	bne.n	8014d7e <MAP_makeSkewCmdList+0x416>
 8014d04:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014d08:	f103 0308 	add.w	r3, r3, #8
 8014d0c:	881b      	ldrh	r3, [r3, #0]
 8014d0e:	2b20      	cmp	r3, #32
 8014d10:	d835      	bhi.n	8014d7e <MAP_makeSkewCmdList+0x416>
		{
			tcom[ ct_n++ ] = c1;
 8014d12:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014d16:	f103 0312 	add.w	r3, r3, #18
 8014d1a:	881b      	ldrh	r3, [r3, #0]
 8014d1c:	1c5a      	adds	r2, r3, #1
 8014d1e:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014d22:	f101 0112 	add.w	r1, r1, #18
 8014d26:	800a      	strh	r2, [r1, #0]
 8014d28:	461a      	mov	r2, r3
 8014d2a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014d2e:	f103 030c 	add.w	r3, r3, #12
 8014d32:	881b      	ldrh	r3, [r3, #0]
 8014d34:	b2d9      	uxtb	r1, r3
 8014d36:	4bc0      	ldr	r3, [pc, #768]	@ (8015038 <MAP_makeSkewCmdList+0x6d0>)
 8014d38:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = R90S;
 8014d3a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014d3e:	f103 0312 	add.w	r3, r3, #18
 8014d42:	881b      	ldrh	r3, [r3, #0]
 8014d44:	1c5a      	adds	r2, r3, #1
 8014d46:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014d4a:	f101 0112 	add.w	r1, r1, #18
 8014d4e:	800a      	strh	r2, [r1, #0]
 8014d50:	461a      	mov	r2, r3
 8014d52:	4bb9      	ldr	r3, [pc, #740]	@ (8015038 <MAP_makeSkewCmdList+0x6d0>)
 8014d54:	214c      	movs	r1, #76	@ 0x4c
 8014d56:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 8014d58:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014d5c:	f103 0310 	add.w	r3, r3, #16
 8014d60:	881b      	ldrh	r3, [r3, #0]
 8014d62:	3302      	adds	r3, #2
 8014d64:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014d68:	f102 0210 	add.w	r2, r2, #16
 8014d6c:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 8014d6e:	2303      	movs	r3, #3
 8014d70:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014d74:	f102 020e 	add.w	r2, r2, #14
 8014d78:	8013      	strh	r3, [r2, #0]
 8014d7a:	f000 bd9e 	b.w	80158ba <MAP_makeSkewCmdList+0xf52>
		}
		//	直進 → 左90度 → 直進
		else if( (c1<=GO32) && (c2==L90S) && (c3<=GO32) )
 8014d7e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014d82:	f103 030c 	add.w	r3, r3, #12
 8014d86:	881b      	ldrh	r3, [r3, #0]
 8014d88:	2b20      	cmp	r3, #32
 8014d8a:	d843      	bhi.n	8014e14 <MAP_makeSkewCmdList+0x4ac>
 8014d8c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014d90:	f103 030a 	add.w	r3, r3, #10
 8014d94:	881b      	ldrh	r3, [r3, #0]
 8014d96:	2b4d      	cmp	r3, #77	@ 0x4d
 8014d98:	d13c      	bne.n	8014e14 <MAP_makeSkewCmdList+0x4ac>
 8014d9a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014d9e:	f103 0308 	add.w	r3, r3, #8
 8014da2:	881b      	ldrh	r3, [r3, #0]
 8014da4:	2b20      	cmp	r3, #32
 8014da6:	d835      	bhi.n	8014e14 <MAP_makeSkewCmdList+0x4ac>
		{
			tcom[ ct_n++ ] = c1;
 8014da8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014dac:	f103 0312 	add.w	r3, r3, #18
 8014db0:	881b      	ldrh	r3, [r3, #0]
 8014db2:	1c5a      	adds	r2, r3, #1
 8014db4:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014db8:	f101 0112 	add.w	r1, r1, #18
 8014dbc:	800a      	strh	r2, [r1, #0]
 8014dbe:	461a      	mov	r2, r3
 8014dc0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014dc4:	f103 030c 	add.w	r3, r3, #12
 8014dc8:	881b      	ldrh	r3, [r3, #0]
 8014dca:	b2d9      	uxtb	r1, r3
 8014dcc:	4b9a      	ldr	r3, [pc, #616]	@ (8015038 <MAP_makeSkewCmdList+0x6d0>)
 8014dce:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = L90S;
 8014dd0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014dd4:	f103 0312 	add.w	r3, r3, #18
 8014dd8:	881b      	ldrh	r3, [r3, #0]
 8014dda:	1c5a      	adds	r2, r3, #1
 8014ddc:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014de0:	f101 0112 	add.w	r1, r1, #18
 8014de4:	800a      	strh	r2, [r1, #0]
 8014de6:	461a      	mov	r2, r3
 8014de8:	4b93      	ldr	r3, [pc, #588]	@ (8015038 <MAP_makeSkewCmdList+0x6d0>)
 8014dea:	214d      	movs	r1, #77	@ 0x4d
 8014dec:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 8014dee:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014df2:	f103 0310 	add.w	r3, r3, #16
 8014df6:	881b      	ldrh	r3, [r3, #0]
 8014df8:	3302      	adds	r3, #2
 8014dfa:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014dfe:	f102 0210 	add.w	r2, r2, #16
 8014e02:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 8014e04:	2303      	movs	r3, #3
 8014e06:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014e0a:	f102 020e 	add.w	r2, r2, #14
 8014e0e:	8013      	strh	r3, [r2, #0]
 8014e10:	f000 bd53 	b.w	80158ba <MAP_makeSkewCmdList+0xf52>
		}
		//	直進 → 右135度 → 斜め
		else if( (c1<=GO32) && (c2==R90S) && (c3==R90S) && (c4==L90S) )
 8014e14:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014e18:	f103 030c 	add.w	r3, r3, #12
 8014e1c:	881b      	ldrh	r3, [r3, #0]
 8014e1e:	2b20      	cmp	r3, #32
 8014e20:	d850      	bhi.n	8014ec4 <MAP_makeSkewCmdList+0x55c>
 8014e22:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014e26:	f103 030a 	add.w	r3, r3, #10
 8014e2a:	881b      	ldrh	r3, [r3, #0]
 8014e2c:	2b4c      	cmp	r3, #76	@ 0x4c
 8014e2e:	d149      	bne.n	8014ec4 <MAP_makeSkewCmdList+0x55c>
 8014e30:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014e34:	f103 0308 	add.w	r3, r3, #8
 8014e38:	881b      	ldrh	r3, [r3, #0]
 8014e3a:	2b4c      	cmp	r3, #76	@ 0x4c
 8014e3c:	d142      	bne.n	8014ec4 <MAP_makeSkewCmdList+0x55c>
 8014e3e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014e42:	f103 0306 	add.w	r3, r3, #6
 8014e46:	881b      	ldrh	r3, [r3, #0]
 8014e48:	2b4d      	cmp	r3, #77	@ 0x4d
 8014e4a:	d13b      	bne.n	8014ec4 <MAP_makeSkewCmdList+0x55c>
		{
			tcom[ ct_n++ ] = c1;
 8014e4c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014e50:	f103 0312 	add.w	r3, r3, #18
 8014e54:	881b      	ldrh	r3, [r3, #0]
 8014e56:	1c5a      	adds	r2, r3, #1
 8014e58:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014e5c:	f101 0112 	add.w	r1, r1, #18
 8014e60:	800a      	strh	r2, [r1, #0]
 8014e62:	461a      	mov	r2, r3
 8014e64:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014e68:	f103 030c 	add.w	r3, r3, #12
 8014e6c:	881b      	ldrh	r3, [r3, #0]
 8014e6e:	b2d9      	uxtb	r1, r3
 8014e70:	4b71      	ldr	r3, [pc, #452]	@ (8015038 <MAP_makeSkewCmdList+0x6d0>)
 8014e72:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RS135N;
 8014e74:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014e78:	f103 0312 	add.w	r3, r3, #18
 8014e7c:	881b      	ldrh	r3, [r3, #0]
 8014e7e:	1c5a      	adds	r2, r3, #1
 8014e80:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014e84:	f101 0112 	add.w	r1, r1, #18
 8014e88:	800a      	strh	r2, [r1, #0]
 8014e8a:	461a      	mov	r2, r3
 8014e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8015038 <MAP_makeSkewCmdList+0x6d0>)
 8014e8e:	219b      	movs	r1, #155	@ 0x9b
 8014e90:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 8014e92:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014e96:	f103 0310 	add.w	r3, r3, #16
 8014e9a:	881b      	ldrh	r3, [r3, #0]
 8014e9c:	3302      	adds	r3, #2
 8014e9e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014ea2:	f102 0210 	add.w	r2, r2, #16
 8014ea6:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 8014ea8:	2351      	movs	r3, #81	@ 0x51
 8014eaa:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014eae:	f102 0214 	add.w	r2, r2, #20
 8014eb2:	8013      	strh	r3, [r2, #0]
			flag = 2;
 8014eb4:	2302      	movs	r3, #2
 8014eb6:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014eba:	f102 020e 	add.w	r2, r2, #14
 8014ebe:	8013      	strh	r3, [r2, #0]
 8014ec0:	f000 bcfb 	b.w	80158ba <MAP_makeSkewCmdList+0xf52>
		}
		//	直進 → 左135度 → 斜め
		else if( (c1<=GO32) && (c2==L90S) && (c3==L90S) && (c4==R90S) )
 8014ec4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014ec8:	f103 030c 	add.w	r3, r3, #12
 8014ecc:	881b      	ldrh	r3, [r3, #0]
 8014ece:	2b20      	cmp	r3, #32
 8014ed0:	d850      	bhi.n	8014f74 <MAP_makeSkewCmdList+0x60c>
 8014ed2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014ed6:	f103 030a 	add.w	r3, r3, #10
 8014eda:	881b      	ldrh	r3, [r3, #0]
 8014edc:	2b4d      	cmp	r3, #77	@ 0x4d
 8014ede:	d149      	bne.n	8014f74 <MAP_makeSkewCmdList+0x60c>
 8014ee0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014ee4:	f103 0308 	add.w	r3, r3, #8
 8014ee8:	881b      	ldrh	r3, [r3, #0]
 8014eea:	2b4d      	cmp	r3, #77	@ 0x4d
 8014eec:	d142      	bne.n	8014f74 <MAP_makeSkewCmdList+0x60c>
 8014eee:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014ef2:	f103 0306 	add.w	r3, r3, #6
 8014ef6:	881b      	ldrh	r3, [r3, #0]
 8014ef8:	2b4c      	cmp	r3, #76	@ 0x4c
 8014efa:	d13b      	bne.n	8014f74 <MAP_makeSkewCmdList+0x60c>
		{
			tcom[ ct_n++ ] = c1;
 8014efc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014f00:	f103 0312 	add.w	r3, r3, #18
 8014f04:	881b      	ldrh	r3, [r3, #0]
 8014f06:	1c5a      	adds	r2, r3, #1
 8014f08:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014f0c:	f101 0112 	add.w	r1, r1, #18
 8014f10:	800a      	strh	r2, [r1, #0]
 8014f12:	461a      	mov	r2, r3
 8014f14:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014f18:	f103 030c 	add.w	r3, r3, #12
 8014f1c:	881b      	ldrh	r3, [r3, #0]
 8014f1e:	b2d9      	uxtb	r1, r3
 8014f20:	4b45      	ldr	r3, [pc, #276]	@ (8015038 <MAP_makeSkewCmdList+0x6d0>)
 8014f22:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LS135N;
 8014f24:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014f28:	f103 0312 	add.w	r3, r3, #18
 8014f2c:	881b      	ldrh	r3, [r3, #0]
 8014f2e:	1c5a      	adds	r2, r3, #1
 8014f30:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014f34:	f101 0112 	add.w	r1, r1, #18
 8014f38:	800a      	strh	r2, [r1, #0]
 8014f3a:	461a      	mov	r2, r3
 8014f3c:	4b3e      	ldr	r3, [pc, #248]	@ (8015038 <MAP_makeSkewCmdList+0x6d0>)
 8014f3e:	219c      	movs	r1, #156	@ 0x9c
 8014f40:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 8014f42:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014f46:	f103 0310 	add.w	r3, r3, #16
 8014f4a:	881b      	ldrh	r3, [r3, #0]
 8014f4c:	3302      	adds	r3, #2
 8014f4e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014f52:	f102 0210 	add.w	r2, r2, #16
 8014f56:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 8014f58:	2351      	movs	r3, #81	@ 0x51
 8014f5a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014f5e:	f102 0214 	add.w	r2, r2, #20
 8014f62:	8013      	strh	r3, [r2, #0]
			flag = 2;
 8014f64:	2302      	movs	r3, #2
 8014f66:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014f6a:	f102 020e 	add.w	r2, r2, #14
 8014f6e:	8013      	strh	r3, [r2, #0]
 8014f70:	f000 bca3 	b.w	80158ba <MAP_makeSkewCmdList+0xf52>
		}

		//	直進 → 右180度 → 直進
		else if( (c1<=GO32) && (c2==R90S) && (c3==R90S) && (c4<=GO32) )
 8014f74:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014f78:	f103 030c 	add.w	r3, r3, #12
 8014f7c:	881b      	ldrh	r3, [r3, #0]
 8014f7e:	2b20      	cmp	r3, #32
 8014f80:	d85c      	bhi.n	801503c <MAP_makeSkewCmdList+0x6d4>
 8014f82:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014f86:	f103 030a 	add.w	r3, r3, #10
 8014f8a:	881b      	ldrh	r3, [r3, #0]
 8014f8c:	2b4c      	cmp	r3, #76	@ 0x4c
 8014f8e:	d155      	bne.n	801503c <MAP_makeSkewCmdList+0x6d4>
 8014f90:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014f94:	f103 0308 	add.w	r3, r3, #8
 8014f98:	881b      	ldrh	r3, [r3, #0]
 8014f9a:	2b4c      	cmp	r3, #76	@ 0x4c
 8014f9c:	d14e      	bne.n	801503c <MAP_makeSkewCmdList+0x6d4>
 8014f9e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014fa2:	f103 0306 	add.w	r3, r3, #6
 8014fa6:	881b      	ldrh	r3, [r3, #0]
 8014fa8:	2b20      	cmp	r3, #32
 8014faa:	d847      	bhi.n	801503c <MAP_makeSkewCmdList+0x6d4>
		{
			tcom[ ct_n++ ] = c1;
 8014fac:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014fb0:	f103 0312 	add.w	r3, r3, #18
 8014fb4:	881b      	ldrh	r3, [r3, #0]
 8014fb6:	1c5a      	adds	r2, r3, #1
 8014fb8:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014fbc:	f101 0112 	add.w	r1, r1, #18
 8014fc0:	800a      	strh	r2, [r1, #0]
 8014fc2:	461a      	mov	r2, r3
 8014fc4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014fc8:	f103 030c 	add.w	r3, r3, #12
 8014fcc:	881b      	ldrh	r3, [r3, #0]
 8014fce:	b2d9      	uxtb	r1, r3
 8014fd0:	4b19      	ldr	r3, [pc, #100]	@ (8015038 <MAP_makeSkewCmdList+0x6d0>)
 8014fd2:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = R90S;
 8014fd4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014fd8:	f103 0312 	add.w	r3, r3, #18
 8014fdc:	881b      	ldrh	r3, [r3, #0]
 8014fde:	1c5a      	adds	r2, r3, #1
 8014fe0:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014fe4:	f101 0112 	add.w	r1, r1, #18
 8014fe8:	800a      	strh	r2, [r1, #0]
 8014fea:	461a      	mov	r2, r3
 8014fec:	4b12      	ldr	r3, [pc, #72]	@ (8015038 <MAP_makeSkewCmdList+0x6d0>)
 8014fee:	214c      	movs	r1, #76	@ 0x4c
 8014ff0:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = R90S;
 8014ff2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014ff6:	f103 0312 	add.w	r3, r3, #18
 8014ffa:	881b      	ldrh	r3, [r3, #0]
 8014ffc:	1c5a      	adds	r2, r3, #1
 8014ffe:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8015002:	f101 0112 	add.w	r1, r1, #18
 8015006:	800a      	strh	r2, [r1, #0]
 8015008:	461a      	mov	r2, r3
 801500a:	4b0b      	ldr	r3, [pc, #44]	@ (8015038 <MAP_makeSkewCmdList+0x6d0>)
 801500c:	214c      	movs	r1, #76	@ 0x4c
 801500e:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 8015010:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015014:	f103 0310 	add.w	r3, r3, #16
 8015018:	881b      	ldrh	r3, [r3, #0]
 801501a:	3303      	adds	r3, #3
 801501c:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015020:	f102 0210 	add.w	r2, r2, #16
 8015024:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 8015026:	2303      	movs	r3, #3
 8015028:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801502c:	f102 020e 	add.w	r2, r2, #14
 8015030:	8013      	strh	r3, [r2, #0]
 8015032:	f000 bc42 	b.w	80158ba <MAP_makeSkewCmdList+0xf52>
 8015036:	bf00      	nop
 8015038:	20019c48 	.word	0x20019c48
		}
		//	直進 → 左180度 → 直進
		else if( (c1<=GO32) && (c2==L90S) && (c2==L90S) && (c4<=GO32) )
 801503c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015040:	f103 030c 	add.w	r3, r3, #12
 8015044:	881b      	ldrh	r3, [r3, #0]
 8015046:	2b20      	cmp	r3, #32
 8015048:	d858      	bhi.n	80150fc <MAP_makeSkewCmdList+0x794>
 801504a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801504e:	f103 030a 	add.w	r3, r3, #10
 8015052:	881b      	ldrh	r3, [r3, #0]
 8015054:	2b4d      	cmp	r3, #77	@ 0x4d
 8015056:	d151      	bne.n	80150fc <MAP_makeSkewCmdList+0x794>
 8015058:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801505c:	f103 030a 	add.w	r3, r3, #10
 8015060:	881b      	ldrh	r3, [r3, #0]
 8015062:	2b4d      	cmp	r3, #77	@ 0x4d
 8015064:	d14a      	bne.n	80150fc <MAP_makeSkewCmdList+0x794>
 8015066:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801506a:	f103 0306 	add.w	r3, r3, #6
 801506e:	881b      	ldrh	r3, [r3, #0]
 8015070:	2b20      	cmp	r3, #32
 8015072:	d843      	bhi.n	80150fc <MAP_makeSkewCmdList+0x794>
		{
			tcom[ ct_n++ ] = c1;
 8015074:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015078:	f103 0312 	add.w	r3, r3, #18
 801507c:	881b      	ldrh	r3, [r3, #0]
 801507e:	1c5a      	adds	r2, r3, #1
 8015080:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8015084:	f101 0112 	add.w	r1, r1, #18
 8015088:	800a      	strh	r2, [r1, #0]
 801508a:	461a      	mov	r2, r3
 801508c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015090:	f103 030c 	add.w	r3, r3, #12
 8015094:	881b      	ldrh	r3, [r3, #0]
 8015096:	b2d9      	uxtb	r1, r3
 8015098:	4baa      	ldr	r3, [pc, #680]	@ (8015344 <MAP_makeSkewCmdList+0x9dc>)
 801509a:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = L90S;
 801509c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80150a0:	f103 0312 	add.w	r3, r3, #18
 80150a4:	881b      	ldrh	r3, [r3, #0]
 80150a6:	1c5a      	adds	r2, r3, #1
 80150a8:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 80150ac:	f101 0112 	add.w	r1, r1, #18
 80150b0:	800a      	strh	r2, [r1, #0]
 80150b2:	461a      	mov	r2, r3
 80150b4:	4ba3      	ldr	r3, [pc, #652]	@ (8015344 <MAP_makeSkewCmdList+0x9dc>)
 80150b6:	214d      	movs	r1, #77	@ 0x4d
 80150b8:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = L90S;
 80150ba:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80150be:	f103 0312 	add.w	r3, r3, #18
 80150c2:	881b      	ldrh	r3, [r3, #0]
 80150c4:	1c5a      	adds	r2, r3, #1
 80150c6:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 80150ca:	f101 0112 	add.w	r1, r1, #18
 80150ce:	800a      	strh	r2, [r1, #0]
 80150d0:	461a      	mov	r2, r3
 80150d2:	4b9c      	ldr	r3, [pc, #624]	@ (8015344 <MAP_makeSkewCmdList+0x9dc>)
 80150d4:	214d      	movs	r1, #77	@ 0x4d
 80150d6:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 80150d8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80150dc:	f103 0310 	add.w	r3, r3, #16
 80150e0:	881b      	ldrh	r3, [r3, #0]
 80150e2:	3303      	adds	r3, #3
 80150e4:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80150e8:	f102 0210 	add.w	r2, r2, #16
 80150ec:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 80150ee:	2303      	movs	r3, #3
 80150f0:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80150f4:	f102 020e 	add.w	r2, r2, #14
 80150f8:	8013      	strh	r3, [r2, #0]
 80150fa:	e3de      	b.n	80158ba <MAP_makeSkewCmdList+0xf52>
		}

		//	斜め → 右45度 → 直進
		else if( (c1==R90S) && (c2<=GO32)  && (flag != 3 ) )
 80150fc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015100:	f103 030c 	add.w	r3, r3, #12
 8015104:	881b      	ldrh	r3, [r3, #0]
 8015106:	2b4c      	cmp	r3, #76	@ 0x4c
 8015108:	d15c      	bne.n	80151c4 <MAP_makeSkewCmdList+0x85c>
 801510a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801510e:	f103 030a 	add.w	r3, r3, #10
 8015112:	881b      	ldrh	r3, [r3, #0]
 8015114:	2b20      	cmp	r3, #32
 8015116:	d855      	bhi.n	80151c4 <MAP_makeSkewCmdList+0x85c>
 8015118:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801511c:	f103 030e 	add.w	r3, r3, #14
 8015120:	881b      	ldrh	r3, [r3, #0]
 8015122:	2b03      	cmp	r3, #3
 8015124:	d04e      	beq.n	80151c4 <MAP_makeSkewCmdList+0x85c>
		{
			if( flag==1 ) tcom[ ct_n++ ] = x;
 8015126:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801512a:	f103 030e 	add.w	r3, r3, #14
 801512e:	881b      	ldrh	r3, [r3, #0]
 8015130:	2b01      	cmp	r3, #1
 8015132:	d113      	bne.n	801515c <MAP_makeSkewCmdList+0x7f4>
 8015134:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015138:	f103 0312 	add.w	r3, r3, #18
 801513c:	881b      	ldrh	r3, [r3, #0]
 801513e:	1c5a      	adds	r2, r3, #1
 8015140:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8015144:	f101 0112 	add.w	r1, r1, #18
 8015148:	800a      	strh	r2, [r1, #0]
 801514a:	461a      	mov	r2, r3
 801514c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015150:	f103 0314 	add.w	r3, r3, #20
 8015154:	881b      	ldrh	r3, [r3, #0]
 8015156:	b2d9      	uxtb	r1, r3
 8015158:	4b7a      	ldr	r3, [pc, #488]	@ (8015344 <MAP_makeSkewCmdList+0x9dc>)
 801515a:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RN45S;
 801515c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015160:	f103 0312 	add.w	r3, r3, #18
 8015164:	881b      	ldrh	r3, [r3, #0]
 8015166:	1c5a      	adds	r2, r3, #1
 8015168:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 801516c:	f101 0112 	add.w	r1, r1, #18
 8015170:	800a      	strh	r2, [r1, #0]
 8015172:	461a      	mov	r2, r3
 8015174:	4b73      	ldr	r3, [pc, #460]	@ (8015344 <MAP_makeSkewCmdList+0x9dc>)
 8015176:	219d      	movs	r1, #157	@ 0x9d
 8015178:	5499      	strb	r1, [r3, r2]
			scom_temp[ct_st+1] = c2 - 1;		//	直線区間を1つ減らす
 801517a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801517e:	f103 0310 	add.w	r3, r3, #16
 8015182:	881b      	ldrh	r3, [r3, #0]
 8015184:	3301      	adds	r3, #1
 8015186:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801518a:	f102 020a 	add.w	r2, r2, #10
 801518e:	8812      	ldrh	r2, [r2, #0]
 8015190:	3a01      	subs	r2, #1
 8015192:	b292      	uxth	r2, r2
 8015194:	f107 0118 	add.w	r1, r7, #24
 8015198:	005b      	lsls	r3, r3, #1
 801519a:	440b      	add	r3, r1
 801519c:	f823 2c14 	strh.w	r2, [r3, #-20]
			ct_st ++;
 80151a0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80151a4:	f103 0310 	add.w	r3, r3, #16
 80151a8:	881b      	ldrh	r3, [r3, #0]
 80151aa:	3301      	adds	r3, #1
 80151ac:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80151b0:	f102 0210 	add.w	r2, r2, #16
 80151b4:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 80151b6:	2303      	movs	r3, #3
 80151b8:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80151bc:	f102 020e 	add.w	r2, r2, #14
 80151c0:	8013      	strh	r3, [r2, #0]
 80151c2:	e37a      	b.n	80158ba <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 左45度 → 直進
		else if( (c1==L90S) && (c2<=GO32)  && (flag != 3 ) )
 80151c4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80151c8:	f103 030c 	add.w	r3, r3, #12
 80151cc:	881b      	ldrh	r3, [r3, #0]
 80151ce:	2b4d      	cmp	r3, #77	@ 0x4d
 80151d0:	d15c      	bne.n	801528c <MAP_makeSkewCmdList+0x924>
 80151d2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80151d6:	f103 030a 	add.w	r3, r3, #10
 80151da:	881b      	ldrh	r3, [r3, #0]
 80151dc:	2b20      	cmp	r3, #32
 80151de:	d855      	bhi.n	801528c <MAP_makeSkewCmdList+0x924>
 80151e0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80151e4:	f103 030e 	add.w	r3, r3, #14
 80151e8:	881b      	ldrh	r3, [r3, #0]
 80151ea:	2b03      	cmp	r3, #3
 80151ec:	d04e      	beq.n	801528c <MAP_makeSkewCmdList+0x924>
		{
			if( flag==1 ) tcom[ ct_n++ ] = x;
 80151ee:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80151f2:	f103 030e 	add.w	r3, r3, #14
 80151f6:	881b      	ldrh	r3, [r3, #0]
 80151f8:	2b01      	cmp	r3, #1
 80151fa:	d113      	bne.n	8015224 <MAP_makeSkewCmdList+0x8bc>
 80151fc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015200:	f103 0312 	add.w	r3, r3, #18
 8015204:	881b      	ldrh	r3, [r3, #0]
 8015206:	1c5a      	adds	r2, r3, #1
 8015208:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 801520c:	f101 0112 	add.w	r1, r1, #18
 8015210:	800a      	strh	r2, [r1, #0]
 8015212:	461a      	mov	r2, r3
 8015214:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015218:	f103 0314 	add.w	r3, r3, #20
 801521c:	881b      	ldrh	r3, [r3, #0]
 801521e:	b2d9      	uxtb	r1, r3
 8015220:	4b48      	ldr	r3, [pc, #288]	@ (8015344 <MAP_makeSkewCmdList+0x9dc>)
 8015222:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LN45S;
 8015224:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015228:	f103 0312 	add.w	r3, r3, #18
 801522c:	881b      	ldrh	r3, [r3, #0]
 801522e:	1c5a      	adds	r2, r3, #1
 8015230:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8015234:	f101 0112 	add.w	r1, r1, #18
 8015238:	800a      	strh	r2, [r1, #0]
 801523a:	461a      	mov	r2, r3
 801523c:	4b41      	ldr	r3, [pc, #260]	@ (8015344 <MAP_makeSkewCmdList+0x9dc>)
 801523e:	219e      	movs	r1, #158	@ 0x9e
 8015240:	5499      	strb	r1, [r3, r2]
			scom_temp[ct_st+1] = c2 - 1;		//	直線区間を1つ減らす
 8015242:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015246:	f103 0310 	add.w	r3, r3, #16
 801524a:	881b      	ldrh	r3, [r3, #0]
 801524c:	3301      	adds	r3, #1
 801524e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015252:	f102 020a 	add.w	r2, r2, #10
 8015256:	8812      	ldrh	r2, [r2, #0]
 8015258:	3a01      	subs	r2, #1
 801525a:	b292      	uxth	r2, r2
 801525c:	f107 0118 	add.w	r1, r7, #24
 8015260:	005b      	lsls	r3, r3, #1
 8015262:	440b      	add	r3, r1
 8015264:	f823 2c14 	strh.w	r2, [r3, #-20]
			ct_st ++;
 8015268:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801526c:	f103 0310 	add.w	r3, r3, #16
 8015270:	881b      	ldrh	r3, [r3, #0]
 8015272:	3301      	adds	r3, #1
 8015274:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015278:	f102 0210 	add.w	r2, r2, #16
 801527c:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 801527e:	2303      	movs	r3, #3
 8015280:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015284:	f102 020e 	add.w	r2, r2, #14
 8015288:	8013      	strh	r3, [r2, #0]
 801528a:	e316      	b.n	80158ba <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 右90度 → 斜め
		else if( (c1==L90S) && (c2==R90S) && (c3==R90S) && (c4==L90S)  && (flag != 3 ) )
 801528c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015290:	f103 030c 	add.w	r3, r3, #12
 8015294:	881b      	ldrh	r3, [r3, #0]
 8015296:	2b4d      	cmp	r3, #77	@ 0x4d
 8015298:	f040 8093 	bne.w	80153c2 <MAP_makeSkewCmdList+0xa5a>
 801529c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80152a0:	f103 030a 	add.w	r3, r3, #10
 80152a4:	881b      	ldrh	r3, [r3, #0]
 80152a6:	2b4c      	cmp	r3, #76	@ 0x4c
 80152a8:	f040 808b 	bne.w	80153c2 <MAP_makeSkewCmdList+0xa5a>
 80152ac:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80152b0:	f103 0308 	add.w	r3, r3, #8
 80152b4:	881b      	ldrh	r3, [r3, #0]
 80152b6:	2b4c      	cmp	r3, #76	@ 0x4c
 80152b8:	f040 8083 	bne.w	80153c2 <MAP_makeSkewCmdList+0xa5a>
 80152bc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80152c0:	f103 0306 	add.w	r3, r3, #6
 80152c4:	881b      	ldrh	r3, [r3, #0]
 80152c6:	2b4d      	cmp	r3, #77	@ 0x4d
 80152c8:	d17b      	bne.n	80153c2 <MAP_makeSkewCmdList+0xa5a>
 80152ca:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80152ce:	f103 030e 	add.w	r3, r3, #14
 80152d2:	881b      	ldrh	r3, [r3, #0]
 80152d4:	2b03      	cmp	r3, #3
 80152d6:	d074      	beq.n	80153c2 <MAP_makeSkewCmdList+0xa5a>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからRN90N
 80152d8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80152dc:	f103 030e 	add.w	r3, r3, #14
 80152e0:	881b      	ldrh	r3, [r3, #0]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d10f      	bne.n	8015306 <MAP_makeSkewCmdList+0x99e>
 80152e6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80152ea:	f103 0312 	add.w	r3, r3, #18
 80152ee:	881b      	ldrh	r3, [r3, #0]
 80152f0:	1c5a      	adds	r2, r3, #1
 80152f2:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 80152f6:	f101 0112 	add.w	r1, r1, #18
 80152fa:	800a      	strh	r2, [r1, #0]
 80152fc:	461a      	mov	r2, r3
 80152fe:	4b11      	ldr	r3, [pc, #68]	@ (8015344 <MAP_makeSkewCmdList+0x9dc>)
 8015300:	2152      	movs	r1, #82	@ 0x52
 8015302:	5499      	strb	r1, [r3, r2]
 8015304:	e036      	b.n	8015374 <MAP_makeSkewCmdList+0xa0c>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 8015306:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801530a:	f103 030e 	add.w	r3, r3, #14
 801530e:	881b      	ldrh	r3, [r3, #0]
 8015310:	2b01      	cmp	r3, #1
 8015312:	d119      	bne.n	8015348 <MAP_makeSkewCmdList+0x9e0>
 8015314:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015318:	f103 0314 	add.w	r3, r3, #20
 801531c:	881b      	ldrh	r3, [r3, #0]
 801531e:	b2da      	uxtb	r2, r3
 8015320:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015324:	f103 0312 	add.w	r3, r3, #18
 8015328:	881b      	ldrh	r3, [r3, #0]
 801532a:	1c59      	adds	r1, r3, #1
 801532c:	f507 5000 	add.w	r0, r7, #8192	@ 0x2000
 8015330:	f100 0012 	add.w	r0, r0, #18
 8015334:	8001      	strh	r1, [r0, #0]
 8015336:	4619      	mov	r1, r3
 8015338:	1c53      	adds	r3, r2, #1
 801533a:	b2da      	uxtb	r2, r3
 801533c:	4b01      	ldr	r3, [pc, #4]	@ (8015344 <MAP_makeSkewCmdList+0x9dc>)
 801533e:	545a      	strb	r2, [r3, r1]
 8015340:	e018      	b.n	8015374 <MAP_makeSkewCmdList+0xa0c>
 8015342:	bf00      	nop
 8015344:	20019c48 	.word	0x20019c48
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 8015348:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801534c:	f103 030e 	add.w	r3, r3, #14
 8015350:	881b      	ldrh	r3, [r3, #0]
 8015352:	2b02      	cmp	r3, #2
 8015354:	d10e      	bne.n	8015374 <MAP_makeSkewCmdList+0xa0c>
 8015356:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801535a:	f103 0312 	add.w	r3, r3, #18
 801535e:	881b      	ldrh	r3, [r3, #0]
 8015360:	1c5a      	adds	r2, r3, #1
 8015362:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8015366:	f101 0112 	add.w	r1, r1, #18
 801536a:	800a      	strh	r2, [r1, #0]
 801536c:	461a      	mov	r2, r3
 801536e:	4ba9      	ldr	r3, [pc, #676]	@ (8015614 <MAP_makeSkewCmdList+0xcac>)
 8015370:	2152      	movs	r1, #82	@ 0x52
 8015372:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RN90N;
 8015374:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015378:	f103 0312 	add.w	r3, r3, #18
 801537c:	881b      	ldrh	r3, [r3, #0]
 801537e:	1c5a      	adds	r2, r3, #1
 8015380:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8015384:	f101 0112 	add.w	r1, r1, #18
 8015388:	800a      	strh	r2, [r1, #0]
 801538a:	461a      	mov	r2, r3
 801538c:	4ba1      	ldr	r3, [pc, #644]	@ (8015614 <MAP_makeSkewCmdList+0xcac>)
 801538e:	21a1      	movs	r1, #161	@ 0xa1
 8015390:	5499      	strb	r1, [r3, r2]
			ct_st +=2;
 8015392:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015396:	f103 0310 	add.w	r3, r3, #16
 801539a:	881b      	ldrh	r3, [r3, #0]
 801539c:	3302      	adds	r3, #2
 801539e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80153a2:	f102 0210 	add.w	r2, r2, #16
 80153a6:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 80153a8:	2351      	movs	r3, #81	@ 0x51
 80153aa:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80153ae:	f102 0214 	add.w	r2, r2, #20
 80153b2:	8013      	strh	r3, [r2, #0]
			flag = 1;
 80153b4:	2301      	movs	r3, #1
 80153b6:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80153ba:	f102 020e 	add.w	r2, r2, #14
 80153be:	8013      	strh	r3, [r2, #0]
 80153c0:	e27b      	b.n	80158ba <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 左90度 → 斜め
		else if( (c1==R90S) && (c2==L90S) && (c3==L90S) && (c4==R90S)  && (flag != 3 ) )
 80153c2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80153c6:	f103 030c 	add.w	r3, r3, #12
 80153ca:	881b      	ldrh	r3, [r3, #0]
 80153cc:	2b4c      	cmp	r3, #76	@ 0x4c
 80153ce:	f040 808f 	bne.w	80154f0 <MAP_makeSkewCmdList+0xb88>
 80153d2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80153d6:	f103 030a 	add.w	r3, r3, #10
 80153da:	881b      	ldrh	r3, [r3, #0]
 80153dc:	2b4d      	cmp	r3, #77	@ 0x4d
 80153de:	f040 8087 	bne.w	80154f0 <MAP_makeSkewCmdList+0xb88>
 80153e2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80153e6:	f103 0308 	add.w	r3, r3, #8
 80153ea:	881b      	ldrh	r3, [r3, #0]
 80153ec:	2b4d      	cmp	r3, #77	@ 0x4d
 80153ee:	d17f      	bne.n	80154f0 <MAP_makeSkewCmdList+0xb88>
 80153f0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80153f4:	f103 0306 	add.w	r3, r3, #6
 80153f8:	881b      	ldrh	r3, [r3, #0]
 80153fa:	2b4c      	cmp	r3, #76	@ 0x4c
 80153fc:	d178      	bne.n	80154f0 <MAP_makeSkewCmdList+0xb88>
 80153fe:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015402:	f103 030e 	add.w	r3, r3, #14
 8015406:	881b      	ldrh	r3, [r3, #0]
 8015408:	2b03      	cmp	r3, #3
 801540a:	d071      	beq.n	80154f0 <MAP_makeSkewCmdList+0xb88>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからLN90N
 801540c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015410:	f103 030e 	add.w	r3, r3, #14
 8015414:	881b      	ldrh	r3, [r3, #0]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d10f      	bne.n	801543a <MAP_makeSkewCmdList+0xad2>
 801541a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801541e:	f103 0312 	add.w	r3, r3, #18
 8015422:	881b      	ldrh	r3, [r3, #0]
 8015424:	1c5a      	adds	r2, r3, #1
 8015426:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 801542a:	f101 0112 	add.w	r1, r1, #18
 801542e:	800a      	strh	r2, [r1, #0]
 8015430:	461a      	mov	r2, r3
 8015432:	4b78      	ldr	r3, [pc, #480]	@ (8015614 <MAP_makeSkewCmdList+0xcac>)
 8015434:	2152      	movs	r1, #82	@ 0x52
 8015436:	5499      	strb	r1, [r3, r2]
 8015438:	e033      	b.n	80154a2 <MAP_makeSkewCmdList+0xb3a>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 801543a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801543e:	f103 030e 	add.w	r3, r3, #14
 8015442:	881b      	ldrh	r3, [r3, #0]
 8015444:	2b01      	cmp	r3, #1
 8015446:	d116      	bne.n	8015476 <MAP_makeSkewCmdList+0xb0e>
 8015448:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801544c:	f103 0314 	add.w	r3, r3, #20
 8015450:	881b      	ldrh	r3, [r3, #0]
 8015452:	b2da      	uxtb	r2, r3
 8015454:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015458:	f103 0312 	add.w	r3, r3, #18
 801545c:	881b      	ldrh	r3, [r3, #0]
 801545e:	1c59      	adds	r1, r3, #1
 8015460:	f507 5000 	add.w	r0, r7, #8192	@ 0x2000
 8015464:	f100 0012 	add.w	r0, r0, #18
 8015468:	8001      	strh	r1, [r0, #0]
 801546a:	4619      	mov	r1, r3
 801546c:	1c53      	adds	r3, r2, #1
 801546e:	b2da      	uxtb	r2, r3
 8015470:	4b68      	ldr	r3, [pc, #416]	@ (8015614 <MAP_makeSkewCmdList+0xcac>)
 8015472:	545a      	strb	r2, [r3, r1]
 8015474:	e015      	b.n	80154a2 <MAP_makeSkewCmdList+0xb3a>
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 8015476:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801547a:	f103 030e 	add.w	r3, r3, #14
 801547e:	881b      	ldrh	r3, [r3, #0]
 8015480:	2b02      	cmp	r3, #2
 8015482:	d10e      	bne.n	80154a2 <MAP_makeSkewCmdList+0xb3a>
 8015484:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015488:	f103 0312 	add.w	r3, r3, #18
 801548c:	881b      	ldrh	r3, [r3, #0]
 801548e:	1c5a      	adds	r2, r3, #1
 8015490:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8015494:	f101 0112 	add.w	r1, r1, #18
 8015498:	800a      	strh	r2, [r1, #0]
 801549a:	461a      	mov	r2, r3
 801549c:	4b5d      	ldr	r3, [pc, #372]	@ (8015614 <MAP_makeSkewCmdList+0xcac>)
 801549e:	2152      	movs	r1, #82	@ 0x52
 80154a0:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LN90N;
 80154a2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80154a6:	f103 0312 	add.w	r3, r3, #18
 80154aa:	881b      	ldrh	r3, [r3, #0]
 80154ac:	1c5a      	adds	r2, r3, #1
 80154ae:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 80154b2:	f101 0112 	add.w	r1, r1, #18
 80154b6:	800a      	strh	r2, [r1, #0]
 80154b8:	461a      	mov	r2, r3
 80154ba:	4b56      	ldr	r3, [pc, #344]	@ (8015614 <MAP_makeSkewCmdList+0xcac>)
 80154bc:	21a2      	movs	r1, #162	@ 0xa2
 80154be:	5499      	strb	r1, [r3, r2]
			ct_st +=2;
 80154c0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80154c4:	f103 0310 	add.w	r3, r3, #16
 80154c8:	881b      	ldrh	r3, [r3, #0]
 80154ca:	3302      	adds	r3, #2
 80154cc:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80154d0:	f102 0210 	add.w	r2, r2, #16
 80154d4:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 80154d6:	2351      	movs	r3, #81	@ 0x51
 80154d8:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80154dc:	f102 0214 	add.w	r2, r2, #20
 80154e0:	8013      	strh	r3, [r2, #0]
			flag = 1;
 80154e2:	2301      	movs	r3, #1
 80154e4:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80154e8:	f102 020e 	add.w	r2, r2, #14
 80154ec:	8013      	strh	r3, [r2, #0]
 80154ee:	e1e4      	b.n	80158ba <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 右135度 → 直進
		else if( (c1==L90S) && (c2==R90S) && (c3==R90S) && (c4<=GO32)  && (flag != 3 ) )
 80154f0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80154f4:	f103 030c 	add.w	r3, r3, #12
 80154f8:	881b      	ldrh	r3, [r3, #0]
 80154fa:	2b4d      	cmp	r3, #77	@ 0x4d
 80154fc:	f040 808c 	bne.w	8015618 <MAP_makeSkewCmdList+0xcb0>
 8015500:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015504:	f103 030a 	add.w	r3, r3, #10
 8015508:	881b      	ldrh	r3, [r3, #0]
 801550a:	2b4c      	cmp	r3, #76	@ 0x4c
 801550c:	f040 8084 	bne.w	8015618 <MAP_makeSkewCmdList+0xcb0>
 8015510:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015514:	f103 0308 	add.w	r3, r3, #8
 8015518:	881b      	ldrh	r3, [r3, #0]
 801551a:	2b4c      	cmp	r3, #76	@ 0x4c
 801551c:	d17c      	bne.n	8015618 <MAP_makeSkewCmdList+0xcb0>
 801551e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015522:	f103 0306 	add.w	r3, r3, #6
 8015526:	881b      	ldrh	r3, [r3, #0]
 8015528:	2b20      	cmp	r3, #32
 801552a:	d875      	bhi.n	8015618 <MAP_makeSkewCmdList+0xcb0>
 801552c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015530:	f103 030e 	add.w	r3, r3, #14
 8015534:	881b      	ldrh	r3, [r3, #0]
 8015536:	2b03      	cmp	r3, #3
 8015538:	d06e      	beq.n	8015618 <MAP_makeSkewCmdList+0xcb0>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからLN90N
 801553a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801553e:	f103 030e 	add.w	r3, r3, #14
 8015542:	881b      	ldrh	r3, [r3, #0]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d10f      	bne.n	8015568 <MAP_makeSkewCmdList+0xc00>
 8015548:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801554c:	f103 0312 	add.w	r3, r3, #18
 8015550:	881b      	ldrh	r3, [r3, #0]
 8015552:	1c5a      	adds	r2, r3, #1
 8015554:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8015558:	f101 0112 	add.w	r1, r1, #18
 801555c:	800a      	strh	r2, [r1, #0]
 801555e:	461a      	mov	r2, r3
 8015560:	4b2c      	ldr	r3, [pc, #176]	@ (8015614 <MAP_makeSkewCmdList+0xcac>)
 8015562:	2152      	movs	r1, #82	@ 0x52
 8015564:	5499      	strb	r1, [r3, r2]
 8015566:	e033      	b.n	80155d0 <MAP_makeSkewCmdList+0xc68>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 8015568:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801556c:	f103 030e 	add.w	r3, r3, #14
 8015570:	881b      	ldrh	r3, [r3, #0]
 8015572:	2b01      	cmp	r3, #1
 8015574:	d116      	bne.n	80155a4 <MAP_makeSkewCmdList+0xc3c>
 8015576:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801557a:	f103 0314 	add.w	r3, r3, #20
 801557e:	881b      	ldrh	r3, [r3, #0]
 8015580:	b2da      	uxtb	r2, r3
 8015582:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015586:	f103 0312 	add.w	r3, r3, #18
 801558a:	881b      	ldrh	r3, [r3, #0]
 801558c:	1c59      	adds	r1, r3, #1
 801558e:	f507 5000 	add.w	r0, r7, #8192	@ 0x2000
 8015592:	f100 0012 	add.w	r0, r0, #18
 8015596:	8001      	strh	r1, [r0, #0]
 8015598:	4619      	mov	r1, r3
 801559a:	1c53      	adds	r3, r2, #1
 801559c:	b2da      	uxtb	r2, r3
 801559e:	4b1d      	ldr	r3, [pc, #116]	@ (8015614 <MAP_makeSkewCmdList+0xcac>)
 80155a0:	545a      	strb	r2, [r3, r1]
 80155a2:	e015      	b.n	80155d0 <MAP_makeSkewCmdList+0xc68>
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 80155a4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80155a8:	f103 030e 	add.w	r3, r3, #14
 80155ac:	881b      	ldrh	r3, [r3, #0]
 80155ae:	2b02      	cmp	r3, #2
 80155b0:	d10e      	bne.n	80155d0 <MAP_makeSkewCmdList+0xc68>
 80155b2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80155b6:	f103 0312 	add.w	r3, r3, #18
 80155ba:	881b      	ldrh	r3, [r3, #0]
 80155bc:	1c5a      	adds	r2, r3, #1
 80155be:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 80155c2:	f101 0112 	add.w	r1, r1, #18
 80155c6:	800a      	strh	r2, [r1, #0]
 80155c8:	461a      	mov	r2, r3
 80155ca:	4b12      	ldr	r3, [pc, #72]	@ (8015614 <MAP_makeSkewCmdList+0xcac>)
 80155cc:	2152      	movs	r1, #82	@ 0x52
 80155ce:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RN135S;
 80155d0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80155d4:	f103 0312 	add.w	r3, r3, #18
 80155d8:	881b      	ldrh	r3, [r3, #0]
 80155da:	1c5a      	adds	r2, r3, #1
 80155dc:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 80155e0:	f101 0112 	add.w	r1, r1, #18
 80155e4:	800a      	strh	r2, [r1, #0]
 80155e6:	461a      	mov	r2, r3
 80155e8:	4b0a      	ldr	r3, [pc, #40]	@ (8015614 <MAP_makeSkewCmdList+0xcac>)
 80155ea:	219f      	movs	r1, #159	@ 0x9f
 80155ec:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 80155ee:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80155f2:	f103 0310 	add.w	r3, r3, #16
 80155f6:	881b      	ldrh	r3, [r3, #0]
 80155f8:	3303      	adds	r3, #3
 80155fa:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80155fe:	f102 0210 	add.w	r2, r2, #16
 8015602:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 8015604:	2303      	movs	r3, #3
 8015606:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801560a:	f102 020e 	add.w	r2, r2, #14
 801560e:	8013      	strh	r3, [r2, #0]
 8015610:	e153      	b.n	80158ba <MAP_makeSkewCmdList+0xf52>
 8015612:	bf00      	nop
 8015614:	20019c48 	.word	0x20019c48
		}
		//	斜め → 左135度 → 直進
		else if( (c1==R90S) && (c2==L90S) && (c3==L90S) && (c4<=GO32)  && (flag != 3 ) )
 8015618:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801561c:	f103 030c 	add.w	r3, r3, #12
 8015620:	881b      	ldrh	r3, [r3, #0]
 8015622:	2b4c      	cmp	r3, #76	@ 0x4c
 8015624:	f040 8089 	bne.w	801573a <MAP_makeSkewCmdList+0xdd2>
 8015628:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801562c:	f103 030a 	add.w	r3, r3, #10
 8015630:	881b      	ldrh	r3, [r3, #0]
 8015632:	2b4d      	cmp	r3, #77	@ 0x4d
 8015634:	f040 8081 	bne.w	801573a <MAP_makeSkewCmdList+0xdd2>
 8015638:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801563c:	f103 0308 	add.w	r3, r3, #8
 8015640:	881b      	ldrh	r3, [r3, #0]
 8015642:	2b4d      	cmp	r3, #77	@ 0x4d
 8015644:	d179      	bne.n	801573a <MAP_makeSkewCmdList+0xdd2>
 8015646:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801564a:	f103 0306 	add.w	r3, r3, #6
 801564e:	881b      	ldrh	r3, [r3, #0]
 8015650:	2b20      	cmp	r3, #32
 8015652:	d872      	bhi.n	801573a <MAP_makeSkewCmdList+0xdd2>
 8015654:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015658:	f103 030e 	add.w	r3, r3, #14
 801565c:	881b      	ldrh	r3, [r3, #0]
 801565e:	2b03      	cmp	r3, #3
 8015660:	d06b      	beq.n	801573a <MAP_makeSkewCmdList+0xdd2>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからLN90N
 8015662:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015666:	f103 030e 	add.w	r3, r3, #14
 801566a:	881b      	ldrh	r3, [r3, #0]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d10f      	bne.n	8015690 <MAP_makeSkewCmdList+0xd28>
 8015670:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015674:	f103 0312 	add.w	r3, r3, #18
 8015678:	881b      	ldrh	r3, [r3, #0]
 801567a:	1c5a      	adds	r2, r3, #1
 801567c:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8015680:	f101 0112 	add.w	r1, r1, #18
 8015684:	800a      	strh	r2, [r1, #0]
 8015686:	461a      	mov	r2, r3
 8015688:	4b91      	ldr	r3, [pc, #580]	@ (80158d0 <MAP_makeSkewCmdList+0xf68>)
 801568a:	2152      	movs	r1, #82	@ 0x52
 801568c:	5499      	strb	r1, [r3, r2]
 801568e:	e033      	b.n	80156f8 <MAP_makeSkewCmdList+0xd90>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 8015690:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015694:	f103 030e 	add.w	r3, r3, #14
 8015698:	881b      	ldrh	r3, [r3, #0]
 801569a:	2b01      	cmp	r3, #1
 801569c:	d116      	bne.n	80156cc <MAP_makeSkewCmdList+0xd64>
 801569e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80156a2:	f103 0314 	add.w	r3, r3, #20
 80156a6:	881b      	ldrh	r3, [r3, #0]
 80156a8:	b2da      	uxtb	r2, r3
 80156aa:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80156ae:	f103 0312 	add.w	r3, r3, #18
 80156b2:	881b      	ldrh	r3, [r3, #0]
 80156b4:	1c59      	adds	r1, r3, #1
 80156b6:	f507 5000 	add.w	r0, r7, #8192	@ 0x2000
 80156ba:	f100 0012 	add.w	r0, r0, #18
 80156be:	8001      	strh	r1, [r0, #0]
 80156c0:	4619      	mov	r1, r3
 80156c2:	1c53      	adds	r3, r2, #1
 80156c4:	b2da      	uxtb	r2, r3
 80156c6:	4b82      	ldr	r3, [pc, #520]	@ (80158d0 <MAP_makeSkewCmdList+0xf68>)
 80156c8:	545a      	strb	r2, [r3, r1]
 80156ca:	e015      	b.n	80156f8 <MAP_makeSkewCmdList+0xd90>
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 80156cc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80156d0:	f103 030e 	add.w	r3, r3, #14
 80156d4:	881b      	ldrh	r3, [r3, #0]
 80156d6:	2b02      	cmp	r3, #2
 80156d8:	d10e      	bne.n	80156f8 <MAP_makeSkewCmdList+0xd90>
 80156da:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80156de:	f103 0312 	add.w	r3, r3, #18
 80156e2:	881b      	ldrh	r3, [r3, #0]
 80156e4:	1c5a      	adds	r2, r3, #1
 80156e6:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 80156ea:	f101 0112 	add.w	r1, r1, #18
 80156ee:	800a      	strh	r2, [r1, #0]
 80156f0:	461a      	mov	r2, r3
 80156f2:	4b77      	ldr	r3, [pc, #476]	@ (80158d0 <MAP_makeSkewCmdList+0xf68>)
 80156f4:	2152      	movs	r1, #82	@ 0x52
 80156f6:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LN135S;
 80156f8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80156fc:	f103 0312 	add.w	r3, r3, #18
 8015700:	881b      	ldrh	r3, [r3, #0]
 8015702:	1c5a      	adds	r2, r3, #1
 8015704:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8015708:	f101 0112 	add.w	r1, r1, #18
 801570c:	800a      	strh	r2, [r1, #0]
 801570e:	461a      	mov	r2, r3
 8015710:	4b6f      	ldr	r3, [pc, #444]	@ (80158d0 <MAP_makeSkewCmdList+0xf68>)
 8015712:	21a0      	movs	r1, #160	@ 0xa0
 8015714:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 8015716:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801571a:	f103 0310 	add.w	r3, r3, #16
 801571e:	881b      	ldrh	r3, [r3, #0]
 8015720:	3303      	adds	r3, #3
 8015722:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015726:	f102 0210 	add.w	r2, r2, #16
 801572a:	8013      	strh	r3, [r2, #0]
			flag = 3;		///	直進
 801572c:	2303      	movs	r3, #3
 801572e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015732:	f102 020e 	add.w	r2, r2, #14
 8015736:	8013      	strh	r3, [r2, #0]
 8015738:	e0bf      	b.n	80158ba <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 斜め
		else if( (c1==R90S) && (c2==L90S) && ( (c3==R90S) || (c3==L90S) || ( c3<=GO32 ) ) && (flag != 3 ) )
 801573a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801573e:	f103 030c 	add.w	r3, r3, #12
 8015742:	881b      	ldrh	r3, [r3, #0]
 8015744:	2b4c      	cmp	r3, #76	@ 0x4c
 8015746:	d13f      	bne.n	80157c8 <MAP_makeSkewCmdList+0xe60>
 8015748:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801574c:	f103 030a 	add.w	r3, r3, #10
 8015750:	881b      	ldrh	r3, [r3, #0]
 8015752:	2b4d      	cmp	r3, #77	@ 0x4d
 8015754:	d138      	bne.n	80157c8 <MAP_makeSkewCmdList+0xe60>
 8015756:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801575a:	f103 0308 	add.w	r3, r3, #8
 801575e:	881b      	ldrh	r3, [r3, #0]
 8015760:	2b4c      	cmp	r3, #76	@ 0x4c
 8015762:	d00d      	beq.n	8015780 <MAP_makeSkewCmdList+0xe18>
 8015764:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015768:	f103 0308 	add.w	r3, r3, #8
 801576c:	881b      	ldrh	r3, [r3, #0]
 801576e:	2b4d      	cmp	r3, #77	@ 0x4d
 8015770:	d006      	beq.n	8015780 <MAP_makeSkewCmdList+0xe18>
 8015772:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015776:	f103 0308 	add.w	r3, r3, #8
 801577a:	881b      	ldrh	r3, [r3, #0]
 801577c:	2b20      	cmp	r3, #32
 801577e:	d823      	bhi.n	80157c8 <MAP_makeSkewCmdList+0xe60>
 8015780:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015784:	f103 030e 	add.w	r3, r3, #14
 8015788:	881b      	ldrh	r3, [r3, #0]
 801578a:	2b03      	cmp	r3, #3
 801578c:	d01c      	beq.n	80157c8 <MAP_makeSkewCmdList+0xe60>
		{
			x++;
 801578e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015792:	f103 0314 	add.w	r3, r3, #20
 8015796:	881b      	ldrh	r3, [r3, #0]
 8015798:	3301      	adds	r3, #1
 801579a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801579e:	f102 0214 	add.w	r2, r2, #20
 80157a2:	8013      	strh	r3, [r2, #0]
			ct_st ++;
 80157a4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80157a8:	f103 0310 	add.w	r3, r3, #16
 80157ac:	881b      	ldrh	r3, [r3, #0]
 80157ae:	3301      	adds	r3, #1
 80157b0:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80157b4:	f102 0210 	add.w	r2, r2, #16
 80157b8:	8013      	strh	r3, [r2, #0]

			flag = 1;		//	斜め走行バッファあり
 80157ba:	2301      	movs	r3, #1
 80157bc:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80157c0:	f102 020e 	add.w	r2, r2, #14
 80157c4:	8013      	strh	r3, [r2, #0]
 80157c6:	e078      	b.n	80158ba <MAP_makeSkewCmdList+0xf52>
		}
		else if( (c1==L90S) && (c2==R90S) && ( (c3==L90S) || (c3==R90S) || ( c3<=GO32 ) ) && (flag != 3 ) )
 80157c8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80157cc:	f103 030c 	add.w	r3, r3, #12
 80157d0:	881b      	ldrh	r3, [r3, #0]
 80157d2:	2b4d      	cmp	r3, #77	@ 0x4d
 80157d4:	d13f      	bne.n	8015856 <MAP_makeSkewCmdList+0xeee>
 80157d6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80157da:	f103 030a 	add.w	r3, r3, #10
 80157de:	881b      	ldrh	r3, [r3, #0]
 80157e0:	2b4c      	cmp	r3, #76	@ 0x4c
 80157e2:	d138      	bne.n	8015856 <MAP_makeSkewCmdList+0xeee>
 80157e4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80157e8:	f103 0308 	add.w	r3, r3, #8
 80157ec:	881b      	ldrh	r3, [r3, #0]
 80157ee:	2b4d      	cmp	r3, #77	@ 0x4d
 80157f0:	d00d      	beq.n	801580e <MAP_makeSkewCmdList+0xea6>
 80157f2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80157f6:	f103 0308 	add.w	r3, r3, #8
 80157fa:	881b      	ldrh	r3, [r3, #0]
 80157fc:	2b4c      	cmp	r3, #76	@ 0x4c
 80157fe:	d006      	beq.n	801580e <MAP_makeSkewCmdList+0xea6>
 8015800:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015804:	f103 0308 	add.w	r3, r3, #8
 8015808:	881b      	ldrh	r3, [r3, #0]
 801580a:	2b20      	cmp	r3, #32
 801580c:	d823      	bhi.n	8015856 <MAP_makeSkewCmdList+0xeee>
 801580e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015812:	f103 030e 	add.w	r3, r3, #14
 8015816:	881b      	ldrh	r3, [r3, #0]
 8015818:	2b03      	cmp	r3, #3
 801581a:	d01c      	beq.n	8015856 <MAP_makeSkewCmdList+0xeee>
		{
			//	コマンド出力
			x++;
 801581c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015820:	f103 0314 	add.w	r3, r3, #20
 8015824:	881b      	ldrh	r3, [r3, #0]
 8015826:	3301      	adds	r3, #1
 8015828:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801582c:	f102 0214 	add.w	r2, r2, #20
 8015830:	8013      	strh	r3, [r2, #0]
			ct_st ++;
 8015832:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015836:	f103 0310 	add.w	r3, r3, #16
 801583a:	881b      	ldrh	r3, [r3, #0]
 801583c:	3301      	adds	r3, #1
 801583e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015842:	f102 0210 	add.w	r2, r2, #16
 8015846:	8013      	strh	r3, [r2, #0]

			flag = 1;		//	斜め走行バッファあり
 8015848:	2301      	movs	r3, #1
 801584a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801584e:	f102 020e 	add.w	r2, r2, #14
 8015852:	8013      	strh	r3, [r2, #0]
 8015854:	e031      	b.n	80158ba <MAP_makeSkewCmdList+0xf52>
		}
		else
		{
			tcom[ ct_n ] = scom_temp[ct_st];
 8015856:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801585a:	f103 0310 	add.w	r3, r3, #16
 801585e:	881b      	ldrh	r3, [r3, #0]
 8015860:	f107 0218 	add.w	r2, r7, #24
 8015864:	005b      	lsls	r3, r3, #1
 8015866:	4413      	add	r3, r2
 8015868:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 801586c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015870:	f103 0312 	add.w	r3, r3, #18
 8015874:	881b      	ldrh	r3, [r3, #0]
 8015876:	b2d1      	uxtb	r1, r2
 8015878:	4a15      	ldr	r2, [pc, #84]	@ (80158d0 <MAP_makeSkewCmdList+0xf68>)
 801587a:	54d1      	strb	r1, [r2, r3]
			if( tcom[ ct_n ] == CEND ) break;
 801587c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015880:	f103 0312 	add.w	r3, r3, #18
 8015884:	881b      	ldrh	r3, [r3, #0]
 8015886:	4a12      	ldr	r2, [pc, #72]	@ (80158d0 <MAP_makeSkewCmdList+0xf68>)
 8015888:	5cd3      	ldrb	r3, [r2, r3]
 801588a:	2bfa      	cmp	r3, #250	@ 0xfa
 801588c:	d017      	beq.n	80158be <MAP_makeSkewCmdList+0xf56>
			ct_st ++;
 801588e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015892:	f103 0310 	add.w	r3, r3, #16
 8015896:	881b      	ldrh	r3, [r3, #0]
 8015898:	3301      	adds	r3, #1
 801589a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801589e:	f102 0210 	add.w	r2, r2, #16
 80158a2:	8013      	strh	r3, [r2, #0]
			ct_n ++;
 80158a4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80158a8:	f103 0312 	add.w	r3, r3, #18
 80158ac:	881b      	ldrh	r3, [r3, #0]
 80158ae:	3301      	adds	r3, #1
 80158b0:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80158b4:	f102 0212 	add.w	r2, r2, #18
 80158b8:	8013      	strh	r3, [r2, #0]
		c1 = scom_temp[ct_st];
 80158ba:	f7ff b8a1 	b.w	8014a00 <MAP_makeSkewCmdList+0x98>
			if( tcom[ ct_n ] == CEND ) break;
 80158be:	bf00      	nop
		}
	}
}
 80158c0:	bf00      	nop
 80158c2:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 80158c6:	371c      	adds	r7, #28
 80158c8:	46bd      	mov	sp, r7
 80158ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ce:	4770      	bx	lr
 80158d0:	20019c48 	.word	0x20019c48

080158d4 <MAP_drive>:

void MAP_drive( enMAP_DRIVE_TYPE en_driveType )
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	ed2d 8b02 	vpush	{d8}
 80158da:	b084      	sub	sp, #16
 80158dc:	af00      	add	r7, sp, #0
 80158de:	4603      	mov	r3, r0
 80158e0:	71fb      	strb	r3, [r7, #7]
	uint16_t			us_rp = 0;				// 現在の読み込み位置
 80158e2:	2300      	movs	r3, #0
 80158e4:	81fb      	strh	r3, [r7, #14]
	enMOT_TURN_CMD 		en_type;
	bool			bl_isWallCut = FALSE;
 80158e6:	2300      	movs	r3, #0
 80158e8:	733b      	strb	r3, [r7, #12]
	
	/* 超信旋回モード*/
	if( en_driveType == MAP_DRIVE_TURN )
 80158ea:	79fb      	ldrb	r3, [r7, #7]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d15f      	bne.n	80159b0 <MAP_drive+0xdc>
	{
		while(1)
		{
			if ( dcom[us_rp] == CEND  ) break;								//	コマンド終了
 80158f0:	89fb      	ldrh	r3, [r7, #14]
 80158f2:	4aad      	ldr	r2, [pc, #692]	@ (8015ba8 <MAP_drive+0x2d4>)
 80158f4:	5cd3      	ldrb	r3, [r2, r3]
 80158f6:	2bfa      	cmp	r3, #250	@ 0xfa
 80158f8:	d050      	beq.n	801599c <MAP_drive+0xc8>
			
			else if ( dcom[us_rp] == STOP  ){
 80158fa:	89fb      	ldrh	r3, [r7, #14]
 80158fc:	4aaa      	ldr	r2, [pc, #680]	@ (8015ba8 <MAP_drive+0x2d4>)
 80158fe:	5cd3      	ldrb	r3, [r2, r3]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d108      	bne.n	8015916 <MAP_drive+0x42>
			 	CTRL_stop();			// 制御停止
 8015904:	f7f0 fd8e 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8015908:	2000      	movs	r0, #0
 801590a:	f7f3 fea3 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 801590e:	2001      	movs	r0, #1
 8015910:	f7f3 fea0 	bl	8009654 <DCM_brakeMot>
 8015914:	e031      	b.n	801597a <MAP_drive+0xa6>
			}
			else if ( ( dcom[us_rp] <=  GO71 ) && ( dcom[us_rp] >=  GO1) )
 8015916:	89fb      	ldrh	r3, [r7, #14]
 8015918:	4aa3      	ldr	r2, [pc, #652]	@ (8015ba8 <MAP_drive+0x2d4>)
 801591a:	5cd3      	ldrb	r3, [r2, r3]
 801591c:	2b47      	cmp	r3, #71	@ 0x47
 801591e:	d816      	bhi.n	801594e <MAP_drive+0x7a>
 8015920:	89fb      	ldrh	r3, [r7, #14]
 8015922:	4aa1      	ldr	r2, [pc, #644]	@ (8015ba8 <MAP_drive+0x2d4>)
 8015924:	5cd3      	ldrb	r3, [r2, r3]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d011      	beq.n	801594e <MAP_drive+0x7a>
			{
				MOT_goBlock_FinSpeed( (float)dcom[us_rp]*0.5f, 0 );		// 直線走行コマンド、半区間前進後に停止
 801592a:	89fb      	ldrh	r3, [r7, #14]
 801592c:	4a9e      	ldr	r2, [pc, #632]	@ (8015ba8 <MAP_drive+0x2d4>)
 801592e:	5cd3      	ldrb	r3, [r2, r3]
 8015930:	ee07 3a90 	vmov	s15, r3
 8015934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015938:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801593c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015940:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 8015bac <MAP_drive+0x2d8>
 8015944:	eeb0 0a67 	vmov.f32	s0, s15
 8015948:	f7f9 feac 	bl	800f6a4 <MOT_goBlock_FinSpeed>
 801594c:	e015      	b.n	801597a <MAP_drive+0xa6>
			}
			else{
				
				if( dcom[us_rp] == R90 ) en_type = MOT_R90;
 801594e:	89fb      	ldrh	r3, [r7, #14]
 8015950:	4a95      	ldr	r2, [pc, #596]	@ (8015ba8 <MAP_drive+0x2d4>)
 8015952:	5cd3      	ldrb	r3, [r2, r3]
 8015954:	2b48      	cmp	r3, #72	@ 0x48
 8015956:	d102      	bne.n	801595e <MAP_drive+0x8a>
 8015958:	2300      	movs	r3, #0
 801595a:	737b      	strb	r3, [r7, #13]
 801595c:	e001      	b.n	8015962 <MAP_drive+0x8e>
				else 					 en_type = MOT_L90;
 801595e:	2301      	movs	r3, #1
 8015960:	737b      	strb	r3, [r7, #13]
				
				LL_mDelay(500);
 8015962:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8015966:	f006 f881 	bl	801ba6c <LL_mDelay>
				MOT_turn( en_type );		//	旋回
 801596a:	7b7b      	ldrb	r3, [r7, #13]
 801596c:	4618      	mov	r0, r3
 801596e:	f7fa f8c3 	bl	800faf8 <MOT_turn>
				LL_mDelay(500);
 8015972:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8015976:	f006 f879 	bl	801ba6c <LL_mDelay>
			}
			us_rp++;
 801597a:	89fb      	ldrh	r3, [r7, #14]
 801597c:	3301      	adds	r3, #1
 801597e:	81fb      	strh	r3, [r7, #14]
			
			/* 途中で制御不能になった */
			if( SYS_isOutOfCtrl() == TRUE ){
 8015980:	f7f3 fe36 	bl	80095f0 <SYS_isOutOfCtrl>
 8015984:	4603      	mov	r3, r0
 8015986:	2b00      	cmp	r3, #0
 8015988:	d0b2      	beq.n	80158f0 <MAP_drive+0x1c>
				CTRL_stop();
 801598a:	f7f0 fd4b 	bl	8006424 <CTRL_stop>
				DCM_brakeMot(DCM_R);
 801598e:	2000      	movs	r0, #0
 8015990:	f7f3 fe60 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot(DCM_L);
 8015994:	2001      	movs	r0, #1
 8015996:	f7f3 fe5d 	bl	8009654 <DCM_brakeMot>
				break;
 801599a:	e000      	b.n	801599e <MAP_drive+0xca>
			if ( dcom[us_rp] == CEND  ) break;								//	コマンド終了
 801599c:	bf00      	nop
			}
			
		}
	 	CTRL_stop();			// 制御停止
 801599e:	f7f0 fd41 	bl	8006424 <CTRL_stop>
		DCM_brakeMot( DCM_R );		// ブレーキ
 80159a2:	2000      	movs	r0, #0
 80159a4:	f7f3 fe56 	bl	8009654 <DCM_brakeMot>
		DCM_brakeMot( DCM_L );		// ブレーキ
 80159a8:	2001      	movs	r0, #1
 80159aa:	f7f3 fe53 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
				break;
			}
		}
	}
}
 80159ae:	e371      	b.n	8016094 <MAP_drive+0x7c0>
	else if( en_driveType == MAP_DRIVE_SLA )
 80159b0:	79fb      	ldrb	r3, [r7, #7]
 80159b2:	2b01      	cmp	r3, #1
 80159b4:	f040 80b5 	bne.w	8015b22 <MAP_drive+0x24e>
			MAP_refPos( scom[us_rp] );									// 実行されるコマンドが終了した位置に更新
 80159b8:	89fb      	ldrh	r3, [r7, #14]
 80159ba:	4a7d      	ldr	r2, [pc, #500]	@ (8015bb0 <MAP_drive+0x2dc>)
 80159bc:	5cd3      	ldrb	r3, [r2, r3]
 80159be:	4618      	mov	r0, r3
 80159c0:	f7fd fc0c 	bl	80131dc <MAP_refPos>
			if ( scom[us_rp] == CEND  ) break;							//	コマンド終了
 80159c4:	89fb      	ldrh	r3, [r7, #14]
 80159c6:	4a7a      	ldr	r2, [pc, #488]	@ (8015bb0 <MAP_drive+0x2dc>)
 80159c8:	5cd3      	ldrb	r3, [r2, r3]
 80159ca:	2bfa      	cmp	r3, #250	@ 0xfa
 80159cc:	f000 835f 	beq.w	801608e <MAP_drive+0x7ba>
			else if ( scom[us_rp] == STOP  )
 80159d0:	89fb      	ldrh	r3, [r7, #14]
 80159d2:	4a77      	ldr	r2, [pc, #476]	@ (8015bb0 <MAP_drive+0x2dc>)
 80159d4:	5cd3      	ldrb	r3, [r2, r3]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d108      	bne.n	80159ec <MAP_drive+0x118>
			 	CTRL_stop();			// 制御停止
 80159da:	f7f0 fd23 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 80159de:	2000      	movs	r0, #0
 80159e0:	f7f3 fe38 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 80159e4:	2001      	movs	r0, #1
 80159e6:	f7f3 fe35 	bl	8009654 <DCM_brakeMot>
 80159ea:	e088      	b.n	8015afe <MAP_drive+0x22a>
			else if ( ( scom[us_rp] <=  GO71 ) && ( scom[us_rp] >=  GO1) )
 80159ec:	89fb      	ldrh	r3, [r7, #14]
 80159ee:	4a70      	ldr	r2, [pc, #448]	@ (8015bb0 <MAP_drive+0x2dc>)
 80159f0:	5cd3      	ldrb	r3, [r2, r3]
 80159f2:	2b47      	cmp	r3, #71	@ 0x47
 80159f4:	d868      	bhi.n	8015ac8 <MAP_drive+0x1f4>
 80159f6:	89fb      	ldrh	r3, [r7, #14]
 80159f8:	4a6d      	ldr	r2, [pc, #436]	@ (8015bb0 <MAP_drive+0x2dc>)
 80159fa:	5cd3      	ldrb	r3, [r2, r3]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d063      	beq.n	8015ac8 <MAP_drive+0x1f4>
				if( scom[us_rp+1] == STOP  ){
 8015a00:	89fb      	ldrh	r3, [r7, #14]
 8015a02:	3301      	adds	r3, #1
 8015a04:	4a6a      	ldr	r2, [pc, #424]	@ (8015bb0 <MAP_drive+0x2dc>)
 8015a06:	5cd3      	ldrb	r3, [r2, r3]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d111      	bne.n	8015a30 <MAP_drive+0x15c>
					MOT_goBlock_FinSpeed( (float)scom[us_rp]*0.5f, 0 );						// 直線走行コマンド、半区間前進（最終速度なし）
 8015a0c:	89fb      	ldrh	r3, [r7, #14]
 8015a0e:	4a68      	ldr	r2, [pc, #416]	@ (8015bb0 <MAP_drive+0x2dc>)
 8015a10:	5cd3      	ldrb	r3, [r2, r3]
 8015a12:	ee07 3a90 	vmov	s15, r3
 8015a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015a1a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015a22:	eddf 0a62 	vldr	s1, [pc, #392]	@ 8015bac <MAP_drive+0x2d8>
 8015a26:	eeb0 0a67 	vmov.f32	s0, s15
 8015a2a:	f7f9 fe3b 	bl	800f6a4 <MOT_goBlock_FinSpeed>
				if( scom[us_rp+1] == STOP  ){
 8015a2e:	e066      	b.n	8015afe <MAP_drive+0x22a>
					if( ( scom[us_rp+1] == R90S )   || ( scom[us_rp+1] == L90S ) ){
 8015a30:	89fb      	ldrh	r3, [r7, #14]
 8015a32:	3301      	adds	r3, #1
 8015a34:	4a5e      	ldr	r2, [pc, #376]	@ (8015bb0 <MAP_drive+0x2dc>)
 8015a36:	5cd3      	ldrb	r3, [r2, r3]
 8015a38:	2b4c      	cmp	r3, #76	@ 0x4c
 8015a3a:	d005      	beq.n	8015a48 <MAP_drive+0x174>
 8015a3c:	89fb      	ldrh	r3, [r7, #14]
 8015a3e:	3301      	adds	r3, #1
 8015a40:	4a5b      	ldr	r2, [pc, #364]	@ (8015bb0 <MAP_drive+0x2dc>)
 8015a42:	5cd3      	ldrb	r3, [r2, r3]
 8015a44:	2b4d      	cmp	r3, #77	@ 0x4d
 8015a46:	d128      	bne.n	8015a9a <MAP_drive+0x1c6>
						bl_isWallCut = MAP_setWallCut( scom[us_rp+1] );		// コーナー前に壁があったら壁の切れ目補正を行う設定をする
 8015a48:	89fb      	ldrh	r3, [r7, #14]
 8015a4a:	3301      	adds	r3, #1
 8015a4c:	4a58      	ldr	r2, [pc, #352]	@ (8015bb0 <MAP_drive+0x2dc>)
 8015a4e:	5cd3      	ldrb	r3, [r2, r3]
 8015a50:	4618      	mov	r0, r3
 8015a52:	f7fd fed3 	bl	80137fc <MAP_setWallCut>
 8015a56:	4603      	mov	r3, r0
 8015a58:	733b      	strb	r3, [r7, #12]
						if( bl_isWallCut == TRUE ){
 8015a5a:	7b3b      	ldrb	r3, [r7, #12]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d01c      	beq.n	8015a9a <MAP_drive+0x1c6>
							bl_isWallCut = FALSE;
 8015a60:	2300      	movs	r3, #0
 8015a62:	733b      	strb	r3, [r7, #12]
							us_LogWallCut[us_LogIndexWallCut] = us_rp;
 8015a64:	4b53      	ldr	r3, [pc, #332]	@ (8015bb4 <MAP_drive+0x2e0>)
 8015a66:	881b      	ldrh	r3, [r3, #0]
 8015a68:	4619      	mov	r1, r3
 8015a6a:	4a53      	ldr	r2, [pc, #332]	@ (8015bb8 <MAP_drive+0x2e4>)
 8015a6c:	89fb      	ldrh	r3, [r7, #14]
 8015a6e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
							us_LogIndexWallCut++;
 8015a72:	4b50      	ldr	r3, [pc, #320]	@ (8015bb4 <MAP_drive+0x2e0>)
 8015a74:	881b      	ldrh	r3, [r3, #0]
 8015a76:	3301      	adds	r3, #1
 8015a78:	b29a      	uxth	r2, r3
 8015a7a:	4b4e      	ldr	r3, [pc, #312]	@ (8015bb4 <MAP_drive+0x2e0>)
 8015a7c:	801a      	strh	r2, [r3, #0]
							us_LogIndexWallCut %= 30;
 8015a7e:	4b4d      	ldr	r3, [pc, #308]	@ (8015bb4 <MAP_drive+0x2e0>)
 8015a80:	881a      	ldrh	r2, [r3, #0]
 8015a82:	4b4e      	ldr	r3, [pc, #312]	@ (8015bbc <MAP_drive+0x2e8>)
 8015a84:	fba3 1302 	umull	r1, r3, r3, r2
 8015a88:	0919      	lsrs	r1, r3, #4
 8015a8a:	460b      	mov	r3, r1
 8015a8c:	011b      	lsls	r3, r3, #4
 8015a8e:	1a5b      	subs	r3, r3, r1
 8015a90:	005b      	lsls	r3, r3, #1
 8015a92:	1ad3      	subs	r3, r2, r3
 8015a94:	b29a      	uxth	r2, r3
 8015a96:	4b47      	ldr	r3, [pc, #284]	@ (8015bb4 <MAP_drive+0x2e0>)
 8015a98:	801a      	strh	r2, [r3, #0]
					MOT_goBlock_FinSpeed( (float)scom[us_rp]*0.5f, MOT_getSlaStaSpeed(SLA_90) );		// 直線走行コマンド、半区間前進（最終速度あり）
 8015a9a:	89fb      	ldrh	r3, [r7, #14]
 8015a9c:	4a44      	ldr	r2, [pc, #272]	@ (8015bb0 <MAP_drive+0x2dc>)
 8015a9e:	5cd3      	ldrb	r3, [r2, r3]
 8015aa0:	ee07 3a90 	vmov	s15, r3
 8015aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015aa8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015aac:	ee27 8a87 	vmul.f32	s16, s15, s14
 8015ab0:	2000      	movs	r0, #0
 8015ab2:	f7fb faf3 	bl	801109c <MOT_getSlaStaSpeed>
 8015ab6:	eef0 7a40 	vmov.f32	s15, s0
 8015aba:	eef0 0a67 	vmov.f32	s1, s15
 8015abe:	eeb0 0a48 	vmov.f32	s0, s16
 8015ac2:	f7f9 fdef 	bl	800f6a4 <MOT_goBlock_FinSpeed>
				if( scom[us_rp+1] == STOP  ){
 8015ac6:	e01a      	b.n	8015afe <MAP_drive+0x22a>
			else if( scom[us_rp] == R90S )
 8015ac8:	89fb      	ldrh	r3, [r7, #14]
 8015aca:	4a39      	ldr	r2, [pc, #228]	@ (8015bb0 <MAP_drive+0x2dc>)
 8015acc:	5cd3      	ldrb	r3, [r2, r3]
 8015ace:	2b4c      	cmp	r3, #76	@ 0x4c
 8015ad0:	d108      	bne.n	8015ae4 <MAP_drive+0x210>
				MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8015ad2:	2000      	movs	r0, #0
 8015ad4:	f7ee f98c 	bl	8003df0 <PARAM_getSra>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	4619      	mov	r1, r3
 8015adc:	2000      	movs	r0, #0
 8015ade:	f7fb fb97 	bl	8011210 <MOT_goSla>
 8015ae2:	e00c      	b.n	8015afe <MAP_drive+0x22a>
			else if( scom[us_rp] == L90S )
 8015ae4:	89fb      	ldrh	r3, [r7, #14]
 8015ae6:	4a32      	ldr	r2, [pc, #200]	@ (8015bb0 <MAP_drive+0x2dc>)
 8015ae8:	5cd3      	ldrb	r3, [r2, r3]
 8015aea:	2b4d      	cmp	r3, #77	@ 0x4d
 8015aec:	d107      	bne.n	8015afe <MAP_drive+0x22a>
				MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 8015aee:	2000      	movs	r0, #0
 8015af0:	f7ee f97e 	bl	8003df0 <PARAM_getSra>
 8015af4:	4603      	mov	r3, r0
 8015af6:	4619      	mov	r1, r3
 8015af8:	2001      	movs	r0, #1
 8015afa:	f7fb fb89 	bl	8011210 <MOT_goSla>
			us_rp++;
 8015afe:	89fb      	ldrh	r3, [r7, #14]
 8015b00:	3301      	adds	r3, #1
 8015b02:	81fb      	strh	r3, [r7, #14]
			if( SYS_isOutOfCtrl() == TRUE){
 8015b04:	f7f3 fd74 	bl	80095f0 <SYS_isOutOfCtrl>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	f43f af54 	beq.w	80159b8 <MAP_drive+0xe4>
				CTRL_stop();
 8015b10:	f7f0 fc88 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8015b14:	2000      	movs	r0, #0
 8015b16:	f7f3 fd9d 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8015b1a:	2001      	movs	r0, #1
 8015b1c:	f7f3 fd9a 	bl	8009654 <DCM_brakeMot>
				break;
 8015b20:	e2b8      	b.n	8016094 <MAP_drive+0x7c0>
	else if( en_driveType == MAP_DRIVE_SKEW )
 8015b22:	79fb      	ldrb	r3, [r7, #7]
 8015b24:	2b02      	cmp	r3, #2
 8015b26:	f040 82b5 	bne.w	8016094 <MAP_drive+0x7c0>
			MAP_refPos( tcom[us_rp] );									// 実行されるコマンドが終了した位置に更新
 8015b2a:	89fb      	ldrh	r3, [r7, #14]
 8015b2c:	4a24      	ldr	r2, [pc, #144]	@ (8015bc0 <MAP_drive+0x2ec>)
 8015b2e:	5cd3      	ldrb	r3, [r2, r3]
 8015b30:	4618      	mov	r0, r3
 8015b32:	f7fd fb53 	bl	80131dc <MAP_refPos>
			if ( tcom[us_rp] == CEND  ) break;							//	コマンド終了
 8015b36:	89fb      	ldrh	r3, [r7, #14]
 8015b38:	4a21      	ldr	r2, [pc, #132]	@ (8015bc0 <MAP_drive+0x2ec>)
 8015b3a:	5cd3      	ldrb	r3, [r2, r3]
 8015b3c:	2bfa      	cmp	r3, #250	@ 0xfa
 8015b3e:	f000 82a8 	beq.w	8016092 <MAP_drive+0x7be>
			else if ( tcom[us_rp] == STOP  )
 8015b42:	89fb      	ldrh	r3, [r7, #14]
 8015b44:	4a1e      	ldr	r2, [pc, #120]	@ (8015bc0 <MAP_drive+0x2ec>)
 8015b46:	5cd3      	ldrb	r3, [r2, r3]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d108      	bne.n	8015b5e <MAP_drive+0x28a>
			 	CTRL_stop();			// 制御停止
 8015b4c:	f7f0 fc6a 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8015b50:	2000      	movs	r0, #0
 8015b52:	f7f3 fd7f 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8015b56:	2001      	movs	r0, #1
 8015b58:	f7f3 fd7c 	bl	8009654 <DCM_brakeMot>
 8015b5c:	e285      	b.n	801606a <MAP_drive+0x796>
			else if ( ( tcom[us_rp] <=  GO71 ) && ( tcom[us_rp] >=  GO1) )
 8015b5e:	89fb      	ldrh	r3, [r7, #14]
 8015b60:	4a17      	ldr	r2, [pc, #92]	@ (8015bc0 <MAP_drive+0x2ec>)
 8015b62:	5cd3      	ldrb	r3, [r2, r3]
 8015b64:	2b47      	cmp	r3, #71	@ 0x47
 8015b66:	f200 80d9 	bhi.w	8015d1c <MAP_drive+0x448>
 8015b6a:	89fb      	ldrh	r3, [r7, #14]
 8015b6c:	4a14      	ldr	r2, [pc, #80]	@ (8015bc0 <MAP_drive+0x2ec>)
 8015b6e:	5cd3      	ldrb	r3, [r2, r3]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	f000 80d3 	beq.w	8015d1c <MAP_drive+0x448>
				if( tcom[us_rp+1] == STOP  ){
 8015b76:	89fb      	ldrh	r3, [r7, #14]
 8015b78:	3301      	adds	r3, #1
 8015b7a:	4a11      	ldr	r2, [pc, #68]	@ (8015bc0 <MAP_drive+0x2ec>)
 8015b7c:	5cd3      	ldrb	r3, [r2, r3]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d120      	bne.n	8015bc4 <MAP_drive+0x2f0>
					MOT_goBlock_FinSpeed( (float)tcom[us_rp]*0.5f, 0 );						// 直線走行コマンド、半区間前進（最終速度なし）
 8015b82:	89fb      	ldrh	r3, [r7, #14]
 8015b84:	4a0e      	ldr	r2, [pc, #56]	@ (8015bc0 <MAP_drive+0x2ec>)
 8015b86:	5cd3      	ldrb	r3, [r2, r3]
 8015b88:	ee07 3a90 	vmov	s15, r3
 8015b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b90:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015b98:	eddf 0a04 	vldr	s1, [pc, #16]	@ 8015bac <MAP_drive+0x2d8>
 8015b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8015ba0:	f7f9 fd80 	bl	800f6a4 <MOT_goBlock_FinSpeed>
				if( tcom[us_rp+1] == STOP  ){
 8015ba4:	e25e      	b.n	8016064 <MAP_drive+0x790>
 8015ba6:	bf00      	nop
 8015ba8:	20017c48 	.word	0x20017c48
 8015bac:	00000000 	.word	0x00000000
 8015bb0:	20018c48 	.word	0x20018c48
 8015bb4:	2001ad88 	.word	0x2001ad88
 8015bb8:	2001ad4c 	.word	0x2001ad4c
 8015bbc:	88888889 	.word	0x88888889
 8015bc0:	20019c48 	.word	0x20019c48
					if( ( tcom[us_rp+1] == R90S )   || ( tcom[us_rp+1] == L90S )   || 
 8015bc4:	89fb      	ldrh	r3, [r7, #14]
 8015bc6:	3301      	adds	r3, #1
 8015bc8:	4a90      	ldr	r2, [pc, #576]	@ (8015e0c <MAP_drive+0x538>)
 8015bca:	5cd3      	ldrb	r3, [r2, r3]
 8015bcc:	2b4c      	cmp	r3, #76	@ 0x4c
 8015bce:	d011      	beq.n	8015bf4 <MAP_drive+0x320>
 8015bd0:	89fb      	ldrh	r3, [r7, #14]
 8015bd2:	3301      	adds	r3, #1
 8015bd4:	4a8d      	ldr	r2, [pc, #564]	@ (8015e0c <MAP_drive+0x538>)
 8015bd6:	5cd3      	ldrb	r3, [r2, r3]
 8015bd8:	2b4d      	cmp	r3, #77	@ 0x4d
 8015bda:	d00b      	beq.n	8015bf4 <MAP_drive+0x320>
					 	( tcom[us_rp+1] == RS135N ) || ( tcom[us_rp+1] == LS135N ) 
 8015bdc:	89fb      	ldrh	r3, [r7, #14]
 8015bde:	3301      	adds	r3, #1
 8015be0:	4a8a      	ldr	r2, [pc, #552]	@ (8015e0c <MAP_drive+0x538>)
 8015be2:	5cd3      	ldrb	r3, [r2, r3]
					if( ( tcom[us_rp+1] == R90S )   || ( tcom[us_rp+1] == L90S )   || 
 8015be4:	2b9b      	cmp	r3, #155	@ 0x9b
 8015be6:	d005      	beq.n	8015bf4 <MAP_drive+0x320>
					 	( tcom[us_rp+1] == RS135N ) || ( tcom[us_rp+1] == LS135N ) 
 8015be8:	89fb      	ldrh	r3, [r7, #14]
 8015bea:	3301      	adds	r3, #1
 8015bec:	4a87      	ldr	r2, [pc, #540]	@ (8015e0c <MAP_drive+0x538>)
 8015bee:	5cd3      	ldrb	r3, [r2, r3]
 8015bf0:	2b9c      	cmp	r3, #156	@ 0x9c
 8015bf2:	d128      	bne.n	8015c46 <MAP_drive+0x372>
						bl_isWallCut = MAP_setWallCut( tcom[us_rp+1] );		// コーナー前に壁があったら壁の切れ目補正を行う設定をする
 8015bf4:	89fb      	ldrh	r3, [r7, #14]
 8015bf6:	3301      	adds	r3, #1
 8015bf8:	4a84      	ldr	r2, [pc, #528]	@ (8015e0c <MAP_drive+0x538>)
 8015bfa:	5cd3      	ldrb	r3, [r2, r3]
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	f7fd fdfd 	bl	80137fc <MAP_setWallCut>
 8015c02:	4603      	mov	r3, r0
 8015c04:	733b      	strb	r3, [r7, #12]
						if( bl_isWallCut == TRUE ){
 8015c06:	7b3b      	ldrb	r3, [r7, #12]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d01c      	beq.n	8015c46 <MAP_drive+0x372>
							bl_isWallCut = FALSE;
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	733b      	strb	r3, [r7, #12]
							us_LogWallCut[us_LogIndexWallCut] = us_rp;
 8015c10:	4b7f      	ldr	r3, [pc, #508]	@ (8015e10 <MAP_drive+0x53c>)
 8015c12:	881b      	ldrh	r3, [r3, #0]
 8015c14:	4619      	mov	r1, r3
 8015c16:	4a7f      	ldr	r2, [pc, #508]	@ (8015e14 <MAP_drive+0x540>)
 8015c18:	89fb      	ldrh	r3, [r7, #14]
 8015c1a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
							us_LogIndexWallCut++;
 8015c1e:	4b7c      	ldr	r3, [pc, #496]	@ (8015e10 <MAP_drive+0x53c>)
 8015c20:	881b      	ldrh	r3, [r3, #0]
 8015c22:	3301      	adds	r3, #1
 8015c24:	b29a      	uxth	r2, r3
 8015c26:	4b7a      	ldr	r3, [pc, #488]	@ (8015e10 <MAP_drive+0x53c>)
 8015c28:	801a      	strh	r2, [r3, #0]
							us_LogIndexWallCut %= 30;
 8015c2a:	4b79      	ldr	r3, [pc, #484]	@ (8015e10 <MAP_drive+0x53c>)
 8015c2c:	881a      	ldrh	r2, [r3, #0]
 8015c2e:	4b7a      	ldr	r3, [pc, #488]	@ (8015e18 <MAP_drive+0x544>)
 8015c30:	fba3 1302 	umull	r1, r3, r3, r2
 8015c34:	0919      	lsrs	r1, r3, #4
 8015c36:	460b      	mov	r3, r1
 8015c38:	011b      	lsls	r3, r3, #4
 8015c3a:	1a5b      	subs	r3, r3, r1
 8015c3c:	005b      	lsls	r3, r3, #1
 8015c3e:	1ad3      	subs	r3, r2, r3
 8015c40:	b29a      	uxth	r2, r3
 8015c42:	4b73      	ldr	r3, [pc, #460]	@ (8015e10 <MAP_drive+0x53c>)
 8015c44:	801a      	strh	r2, [r3, #0]
					if((tcom[us_rp+1]==R90S)||(tcom[us_rp+1]==L90S)){
 8015c46:	89fb      	ldrh	r3, [r7, #14]
 8015c48:	3301      	adds	r3, #1
 8015c4a:	4a70      	ldr	r2, [pc, #448]	@ (8015e0c <MAP_drive+0x538>)
 8015c4c:	5cd3      	ldrb	r3, [r2, r3]
 8015c4e:	2b4c      	cmp	r3, #76	@ 0x4c
 8015c50:	d005      	beq.n	8015c5e <MAP_drive+0x38a>
 8015c52:	89fb      	ldrh	r3, [r7, #14]
 8015c54:	3301      	adds	r3, #1
 8015c56:	4a6d      	ldr	r2, [pc, #436]	@ (8015e0c <MAP_drive+0x538>)
 8015c58:	5cd3      	ldrb	r3, [r2, r3]
 8015c5a:	2b4d      	cmp	r3, #77	@ 0x4d
 8015c5c:	d116      	bne.n	8015c8c <MAP_drive+0x3b8>
						MOT_goBlock_FinSpeed( (float)tcom[us_rp]*0.5f, MOT_getSlaStaSpeed(SLA_90) );		// 直線走行コマンド、半区間前進（最終速度あり）
 8015c5e:	89fb      	ldrh	r3, [r7, #14]
 8015c60:	4a6a      	ldr	r2, [pc, #424]	@ (8015e0c <MAP_drive+0x538>)
 8015c62:	5cd3      	ldrb	r3, [r2, r3]
 8015c64:	ee07 3a90 	vmov	s15, r3
 8015c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015c6c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015c70:	ee27 8a87 	vmul.f32	s16, s15, s14
 8015c74:	2000      	movs	r0, #0
 8015c76:	f7fb fa11 	bl	801109c <MOT_getSlaStaSpeed>
 8015c7a:	eef0 7a40 	vmov.f32	s15, s0
 8015c7e:	eef0 0a67 	vmov.f32	s1, s15
 8015c82:	eeb0 0a48 	vmov.f32	s0, s16
 8015c86:	f7f9 fd0d 	bl	800f6a4 <MOT_goBlock_FinSpeed>
 8015c8a:	e046      	b.n	8015d1a <MAP_drive+0x446>
					}else if((tcom[us_rp+1]==RS45N)||(tcom[us_rp+1]==LS45N)){
 8015c8c:	89fb      	ldrh	r3, [r7, #14]
 8015c8e:	3301      	adds	r3, #1
 8015c90:	4a5e      	ldr	r2, [pc, #376]	@ (8015e0c <MAP_drive+0x538>)
 8015c92:	5cd3      	ldrb	r3, [r2, r3]
 8015c94:	2b99      	cmp	r3, #153	@ 0x99
 8015c96:	d005      	beq.n	8015ca4 <MAP_drive+0x3d0>
 8015c98:	89fb      	ldrh	r3, [r7, #14]
 8015c9a:	3301      	adds	r3, #1
 8015c9c:	4a5b      	ldr	r2, [pc, #364]	@ (8015e0c <MAP_drive+0x538>)
 8015c9e:	5cd3      	ldrb	r3, [r2, r3]
 8015ca0:	2b9a      	cmp	r3, #154	@ 0x9a
 8015ca2:	d116      	bne.n	8015cd2 <MAP_drive+0x3fe>
						MOT_goBlock_FinSpeed( (float)tcom[us_rp]*0.5f, MOT_getSlaStaSpeed(SLA_45) );		// 直線走行コマンド、半区間前進（最終速度あり）
 8015ca4:	89fb      	ldrh	r3, [r7, #14]
 8015ca6:	4a59      	ldr	r2, [pc, #356]	@ (8015e0c <MAP_drive+0x538>)
 8015ca8:	5cd3      	ldrb	r3, [r2, r3]
 8015caa:	ee07 3a90 	vmov	s15, r3
 8015cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015cb2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015cb6:	ee27 8a87 	vmul.f32	s16, s15, s14
 8015cba:	2001      	movs	r0, #1
 8015cbc:	f7fb f9ee 	bl	801109c <MOT_getSlaStaSpeed>
 8015cc0:	eef0 7a40 	vmov.f32	s15, s0
 8015cc4:	eef0 0a67 	vmov.f32	s1, s15
 8015cc8:	eeb0 0a48 	vmov.f32	s0, s16
 8015ccc:	f7f9 fcea 	bl	800f6a4 <MOT_goBlock_FinSpeed>
 8015cd0:	e023      	b.n	8015d1a <MAP_drive+0x446>
					}else if((tcom[us_rp+1]==RS135N)||(tcom[us_rp+1]==LS135N)){
 8015cd2:	89fb      	ldrh	r3, [r7, #14]
 8015cd4:	3301      	adds	r3, #1
 8015cd6:	4a4d      	ldr	r2, [pc, #308]	@ (8015e0c <MAP_drive+0x538>)
 8015cd8:	5cd3      	ldrb	r3, [r2, r3]
 8015cda:	2b9b      	cmp	r3, #155	@ 0x9b
 8015cdc:	d006      	beq.n	8015cec <MAP_drive+0x418>
 8015cde:	89fb      	ldrh	r3, [r7, #14]
 8015ce0:	3301      	adds	r3, #1
 8015ce2:	4a4a      	ldr	r2, [pc, #296]	@ (8015e0c <MAP_drive+0x538>)
 8015ce4:	5cd3      	ldrb	r3, [r2, r3]
 8015ce6:	2b9c      	cmp	r3, #156	@ 0x9c
 8015ce8:	f040 81bc 	bne.w	8016064 <MAP_drive+0x790>
						MOT_goBlock_FinSpeed( (float)tcom[us_rp]*0.5f, MOT_getSlaStaSpeed(SLA_135) );		// 直線走行コマンド、半区間前進（最終速度あり）
 8015cec:	89fb      	ldrh	r3, [r7, #14]
 8015cee:	4a47      	ldr	r2, [pc, #284]	@ (8015e0c <MAP_drive+0x538>)
 8015cf0:	5cd3      	ldrb	r3, [r2, r3]
 8015cf2:	ee07 3a90 	vmov	s15, r3
 8015cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015cfa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015cfe:	ee27 8a87 	vmul.f32	s16, s15, s14
 8015d02:	2002      	movs	r0, #2
 8015d04:	f7fb f9ca 	bl	801109c <MOT_getSlaStaSpeed>
 8015d08:	eef0 7a40 	vmov.f32	s15, s0
 8015d0c:	eef0 0a67 	vmov.f32	s1, s15
 8015d10:	eeb0 0a48 	vmov.f32	s0, s16
 8015d14:	f7f9 fcc6 	bl	800f6a4 <MOT_goBlock_FinSpeed>
				if( tcom[us_rp+1] == STOP  ){
 8015d18:	e1a4      	b.n	8016064 <MAP_drive+0x790>
 8015d1a:	e1a3      	b.n	8016064 <MAP_drive+0x790>
			else if ( ( tcom[us_rp] <=  NGO71 ) && ( tcom[us_rp] >=  NGO1) )
 8015d1c:	89fb      	ldrh	r3, [r7, #14]
 8015d1e:	4a3b      	ldr	r2, [pc, #236]	@ (8015e0c <MAP_drive+0x538>)
 8015d20:	5cd3      	ldrb	r3, [r2, r3]
 8015d22:	2b98      	cmp	r3, #152	@ 0x98
 8015d24:	d87a      	bhi.n	8015e1c <MAP_drive+0x548>
 8015d26:	89fb      	ldrh	r3, [r7, #14]
 8015d28:	4a38      	ldr	r2, [pc, #224]	@ (8015e0c <MAP_drive+0x538>)
 8015d2a:	5cd3      	ldrb	r3, [r2, r3]
 8015d2c:	2b51      	cmp	r3, #81	@ 0x51
 8015d2e:	d975      	bls.n	8015e1c <MAP_drive+0x548>
				if((tcom[us_rp+1]==RN45S)||(tcom[us_rp+1]==LN45S)){
 8015d30:	89fb      	ldrh	r3, [r7, #14]
 8015d32:	3301      	adds	r3, #1
 8015d34:	4a35      	ldr	r2, [pc, #212]	@ (8015e0c <MAP_drive+0x538>)
 8015d36:	5cd3      	ldrb	r3, [r2, r3]
 8015d38:	2b9d      	cmp	r3, #157	@ 0x9d
 8015d3a:	d005      	beq.n	8015d48 <MAP_drive+0x474>
 8015d3c:	89fb      	ldrh	r3, [r7, #14]
 8015d3e:	3301      	adds	r3, #1
 8015d40:	4a32      	ldr	r2, [pc, #200]	@ (8015e0c <MAP_drive+0x538>)
 8015d42:	5cd3      	ldrb	r3, [r2, r3]
 8015d44:	2b9e      	cmp	r3, #158	@ 0x9e
 8015d46:	d117      	bne.n	8015d78 <MAP_drive+0x4a4>
					MOT_goSkewBlock_FinSpeed( (float)(tcom[us_rp]-81)*0.5f, MOT_getSlaStaSpeed(SLA_45) );		// 直線走行コマンド、半区間前進（最終速度あり）
 8015d48:	89fb      	ldrh	r3, [r7, #14]
 8015d4a:	4a30      	ldr	r2, [pc, #192]	@ (8015e0c <MAP_drive+0x538>)
 8015d4c:	5cd3      	ldrb	r3, [r2, r3]
 8015d4e:	3b51      	subs	r3, #81	@ 0x51
 8015d50:	ee07 3a90 	vmov	s15, r3
 8015d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015d58:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015d5c:	ee27 8a87 	vmul.f32	s16, s15, s14
 8015d60:	2001      	movs	r0, #1
 8015d62:	f7fb f99b 	bl	801109c <MOT_getSlaStaSpeed>
 8015d66:	eef0 7a40 	vmov.f32	s15, s0
 8015d6a:	eef0 0a67 	vmov.f32	s1, s15
 8015d6e:	eeb0 0a48 	vmov.f32	s0, s16
 8015d72:	f7f9 fca9 	bl	800f6c8 <MOT_goSkewBlock_FinSpeed>
 8015d76:	e048      	b.n	8015e0a <MAP_drive+0x536>
				}else if((tcom[us_rp+1]==RN135S)||(tcom[us_rp+1]==LN135S)){
 8015d78:	89fb      	ldrh	r3, [r7, #14]
 8015d7a:	3301      	adds	r3, #1
 8015d7c:	4a23      	ldr	r2, [pc, #140]	@ (8015e0c <MAP_drive+0x538>)
 8015d7e:	5cd3      	ldrb	r3, [r2, r3]
 8015d80:	2b9f      	cmp	r3, #159	@ 0x9f
 8015d82:	d005      	beq.n	8015d90 <MAP_drive+0x4bc>
 8015d84:	89fb      	ldrh	r3, [r7, #14]
 8015d86:	3301      	adds	r3, #1
 8015d88:	4a20      	ldr	r2, [pc, #128]	@ (8015e0c <MAP_drive+0x538>)
 8015d8a:	5cd3      	ldrb	r3, [r2, r3]
 8015d8c:	2ba0      	cmp	r3, #160	@ 0xa0
 8015d8e:	d117      	bne.n	8015dc0 <MAP_drive+0x4ec>
					MOT_goSkewBlock_FinSpeed( (float)(tcom[us_rp]-81)*0.5f, MOT_getSlaStaSpeed(SLA_135) );		// 直線走行コマンド、半区間前進（最終速度あり）
 8015d90:	89fb      	ldrh	r3, [r7, #14]
 8015d92:	4a1e      	ldr	r2, [pc, #120]	@ (8015e0c <MAP_drive+0x538>)
 8015d94:	5cd3      	ldrb	r3, [r2, r3]
 8015d96:	3b51      	subs	r3, #81	@ 0x51
 8015d98:	ee07 3a90 	vmov	s15, r3
 8015d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015da0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015da4:	ee27 8a87 	vmul.f32	s16, s15, s14
 8015da8:	2002      	movs	r0, #2
 8015daa:	f7fb f977 	bl	801109c <MOT_getSlaStaSpeed>
 8015dae:	eef0 7a40 	vmov.f32	s15, s0
 8015db2:	eef0 0a67 	vmov.f32	s1, s15
 8015db6:	eeb0 0a48 	vmov.f32	s0, s16
 8015dba:	f7f9 fc85 	bl	800f6c8 <MOT_goSkewBlock_FinSpeed>
 8015dbe:	e024      	b.n	8015e0a <MAP_drive+0x536>
				}else if((tcom[us_rp+1]==RN90N)||(tcom[us_rp+1]==LN90N)){
 8015dc0:	89fb      	ldrh	r3, [r7, #14]
 8015dc2:	3301      	adds	r3, #1
 8015dc4:	4a11      	ldr	r2, [pc, #68]	@ (8015e0c <MAP_drive+0x538>)
 8015dc6:	5cd3      	ldrb	r3, [r2, r3]
 8015dc8:	2ba1      	cmp	r3, #161	@ 0xa1
 8015dca:	d006      	beq.n	8015dda <MAP_drive+0x506>
 8015dcc:	89fb      	ldrh	r3, [r7, #14]
 8015dce:	3301      	adds	r3, #1
 8015dd0:	4a0e      	ldr	r2, [pc, #56]	@ (8015e0c <MAP_drive+0x538>)
 8015dd2:	5cd3      	ldrb	r3, [r2, r3]
 8015dd4:	2ba2      	cmp	r3, #162	@ 0xa2
 8015dd6:	f040 8147 	bne.w	8016068 <MAP_drive+0x794>
					MOT_goSkewBlock_FinSpeed( (float)(tcom[us_rp]-81)*0.5f, MOT_getSlaStaSpeed(SLA_N90) );		// 直線走行コマンド、半区間前進（最終速度あり）
 8015dda:	89fb      	ldrh	r3, [r7, #14]
 8015ddc:	4a0b      	ldr	r2, [pc, #44]	@ (8015e0c <MAP_drive+0x538>)
 8015dde:	5cd3      	ldrb	r3, [r2, r3]
 8015de0:	3b51      	subs	r3, #81	@ 0x51
 8015de2:	ee07 3a90 	vmov	s15, r3
 8015de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015dea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015dee:	ee27 8a87 	vmul.f32	s16, s15, s14
 8015df2:	2003      	movs	r0, #3
 8015df4:	f7fb f952 	bl	801109c <MOT_getSlaStaSpeed>
 8015df8:	eef0 7a40 	vmov.f32	s15, s0
 8015dfc:	eef0 0a67 	vmov.f32	s1, s15
 8015e00:	eeb0 0a48 	vmov.f32	s0, s16
 8015e04:	f7f9 fc60 	bl	800f6c8 <MOT_goSkewBlock_FinSpeed>
				if((tcom[us_rp+1]==RN45S)||(tcom[us_rp+1]==LN45S)){
 8015e08:	e12e      	b.n	8016068 <MAP_drive+0x794>
 8015e0a:	e12d      	b.n	8016068 <MAP_drive+0x794>
 8015e0c:	20019c48 	.word	0x20019c48
 8015e10:	2001ad88 	.word	0x2001ad88
 8015e14:	2001ad4c 	.word	0x2001ad4c
 8015e18:	88888889 	.word	0x88888889
				switch( tcom[us_rp] )
 8015e1c:	89fb      	ldrh	r3, [r7, #14]
 8015e1e:	4aa0      	ldr	r2, [pc, #640]	@ (80160a0 <MAP_drive+0x7cc>)
 8015e20:	5cd3      	ldrb	r3, [r2, r3]
 8015e22:	3b4c      	subs	r3, #76	@ 0x4c
 8015e24:	2b56      	cmp	r3, #86	@ 0x56
 8015e26:	f200 8120 	bhi.w	801606a <MAP_drive+0x796>
 8015e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8015e30 <MAP_drive+0x55c>)
 8015e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e30:	08015f8d 	.word	0x08015f8d
 8015e34:	08015f9f 	.word	0x08015f9f
 8015e38:	0801606b 	.word	0x0801606b
 8015e3c:	0801606b 	.word	0x0801606b
 8015e40:	0801606b 	.word	0x0801606b
 8015e44:	0801606b 	.word	0x0801606b
 8015e48:	0801606b 	.word	0x0801606b
 8015e4c:	0801606b 	.word	0x0801606b
 8015e50:	0801606b 	.word	0x0801606b
 8015e54:	0801606b 	.word	0x0801606b
 8015e58:	0801606b 	.word	0x0801606b
 8015e5c:	0801606b 	.word	0x0801606b
 8015e60:	0801606b 	.word	0x0801606b
 8015e64:	0801606b 	.word	0x0801606b
 8015e68:	0801606b 	.word	0x0801606b
 8015e6c:	0801606b 	.word	0x0801606b
 8015e70:	0801606b 	.word	0x0801606b
 8015e74:	0801606b 	.word	0x0801606b
 8015e78:	0801606b 	.word	0x0801606b
 8015e7c:	0801606b 	.word	0x0801606b
 8015e80:	0801606b 	.word	0x0801606b
 8015e84:	0801606b 	.word	0x0801606b
 8015e88:	0801606b 	.word	0x0801606b
 8015e8c:	0801606b 	.word	0x0801606b
 8015e90:	0801606b 	.word	0x0801606b
 8015e94:	0801606b 	.word	0x0801606b
 8015e98:	0801606b 	.word	0x0801606b
 8015e9c:	0801606b 	.word	0x0801606b
 8015ea0:	0801606b 	.word	0x0801606b
 8015ea4:	0801606b 	.word	0x0801606b
 8015ea8:	0801606b 	.word	0x0801606b
 8015eac:	0801606b 	.word	0x0801606b
 8015eb0:	0801606b 	.word	0x0801606b
 8015eb4:	0801606b 	.word	0x0801606b
 8015eb8:	0801606b 	.word	0x0801606b
 8015ebc:	0801606b 	.word	0x0801606b
 8015ec0:	0801606b 	.word	0x0801606b
 8015ec4:	0801606b 	.word	0x0801606b
 8015ec8:	0801606b 	.word	0x0801606b
 8015ecc:	0801606b 	.word	0x0801606b
 8015ed0:	0801606b 	.word	0x0801606b
 8015ed4:	0801606b 	.word	0x0801606b
 8015ed8:	0801606b 	.word	0x0801606b
 8015edc:	0801606b 	.word	0x0801606b
 8015ee0:	0801606b 	.word	0x0801606b
 8015ee4:	0801606b 	.word	0x0801606b
 8015ee8:	0801606b 	.word	0x0801606b
 8015eec:	0801606b 	.word	0x0801606b
 8015ef0:	0801606b 	.word	0x0801606b
 8015ef4:	0801606b 	.word	0x0801606b
 8015ef8:	0801606b 	.word	0x0801606b
 8015efc:	0801606b 	.word	0x0801606b
 8015f00:	0801606b 	.word	0x0801606b
 8015f04:	0801606b 	.word	0x0801606b
 8015f08:	0801606b 	.word	0x0801606b
 8015f0c:	0801606b 	.word	0x0801606b
 8015f10:	0801606b 	.word	0x0801606b
 8015f14:	0801606b 	.word	0x0801606b
 8015f18:	0801606b 	.word	0x0801606b
 8015f1c:	0801606b 	.word	0x0801606b
 8015f20:	0801606b 	.word	0x0801606b
 8015f24:	0801606b 	.word	0x0801606b
 8015f28:	0801606b 	.word	0x0801606b
 8015f2c:	0801606b 	.word	0x0801606b
 8015f30:	0801606b 	.word	0x0801606b
 8015f34:	0801606b 	.word	0x0801606b
 8015f38:	0801606b 	.word	0x0801606b
 8015f3c:	0801606b 	.word	0x0801606b
 8015f40:	0801606b 	.word	0x0801606b
 8015f44:	0801606b 	.word	0x0801606b
 8015f48:	0801606b 	.word	0x0801606b
 8015f4c:	0801606b 	.word	0x0801606b
 8015f50:	0801606b 	.word	0x0801606b
 8015f54:	0801606b 	.word	0x0801606b
 8015f58:	0801606b 	.word	0x0801606b
 8015f5c:	0801606b 	.word	0x0801606b
 8015f60:	0801606b 	.word	0x0801606b
 8015f64:	08015fb1 	.word	0x08015fb1
 8015f68:	08015fc3 	.word	0x08015fc3
 8015f6c:	08015fd5 	.word	0x08015fd5
 8015f70:	08015fe7 	.word	0x08015fe7
 8015f74:	08015ff9 	.word	0x08015ff9
 8015f78:	0801600b 	.word	0x0801600b
 8015f7c:	0801601d 	.word	0x0801601d
 8015f80:	0801602f 	.word	0x0801602f
 8015f84:	08016041 	.word	0x08016041
 8015f88:	08016053 	.word	0x08016053
					case R90S:		MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );			break;
 8015f8c:	2000      	movs	r0, #0
 8015f8e:	f7ed ff2f 	bl	8003df0 <PARAM_getSra>
 8015f92:	4603      	mov	r3, r0
 8015f94:	4619      	mov	r1, r3
 8015f96:	2000      	movs	r0, #0
 8015f98:	f7fb f93a 	bl	8011210 <MOT_goSla>
 8015f9c:	e065      	b.n	801606a <MAP_drive+0x796>
					case L90S:		MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );			break;
 8015f9e:	2000      	movs	r0, #0
 8015fa0:	f7ed ff26 	bl	8003df0 <PARAM_getSra>
 8015fa4:	4603      	mov	r3, r0
 8015fa6:	4619      	mov	r1, r3
 8015fa8:	2001      	movs	r0, #1
 8015faa:	f7fb f931 	bl	8011210 <MOT_goSla>
 8015fae:	e05c      	b.n	801606a <MAP_drive+0x796>
					case RS45N:		MOT_goSla( MOT_R45S_S2N, PARAM_getSra( SLA_45 ) ); 		break;
 8015fb0:	2001      	movs	r0, #1
 8015fb2:	f7ed ff1d 	bl	8003df0 <PARAM_getSra>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	4619      	mov	r1, r3
 8015fba:	2002      	movs	r0, #2
 8015fbc:	f7fb f928 	bl	8011210 <MOT_goSla>
 8015fc0:	e053      	b.n	801606a <MAP_drive+0x796>
					case LS45N:		MOT_goSla( MOT_L45S_S2N, PARAM_getSra( SLA_45 ) ); 		break;
 8015fc2:	2001      	movs	r0, #1
 8015fc4:	f7ed ff14 	bl	8003df0 <PARAM_getSra>
 8015fc8:	4603      	mov	r3, r0
 8015fca:	4619      	mov	r1, r3
 8015fcc:	2003      	movs	r0, #3
 8015fce:	f7fb f91f 	bl	8011210 <MOT_goSla>
 8015fd2:	e04a      	b.n	801606a <MAP_drive+0x796>
					case RS135N:	MOT_goSla( MOT_R135S_S2N, PARAM_getSra( SLA_135 ) ); 	break;
 8015fd4:	2002      	movs	r0, #2
 8015fd6:	f7ed ff0b 	bl	8003df0 <PARAM_getSra>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	4619      	mov	r1, r3
 8015fde:	2008      	movs	r0, #8
 8015fe0:	f7fb f916 	bl	8011210 <MOT_goSla>
 8015fe4:	e041      	b.n	801606a <MAP_drive+0x796>
					case LS135N:	MOT_goSla( MOT_L135S_S2N, PARAM_getSra( SLA_135 ) ); 	break;
 8015fe6:	2002      	movs	r0, #2
 8015fe8:	f7ed ff02 	bl	8003df0 <PARAM_getSra>
 8015fec:	4603      	mov	r3, r0
 8015fee:	4619      	mov	r1, r3
 8015ff0:	2009      	movs	r0, #9
 8015ff2:	f7fb f90d 	bl	8011210 <MOT_goSla>
 8015ff6:	e038      	b.n	801606a <MAP_drive+0x796>
					case RN45S:		MOT_goSla( MOT_R45S_N2S, PARAM_getSra( SLA_45 ) ); 		break;
 8015ff8:	2001      	movs	r0, #1
 8015ffa:	f7ed fef9 	bl	8003df0 <PARAM_getSra>
 8015ffe:	4603      	mov	r3, r0
 8016000:	4619      	mov	r1, r3
 8016002:	2004      	movs	r0, #4
 8016004:	f7fb f904 	bl	8011210 <MOT_goSla>
 8016008:	e02f      	b.n	801606a <MAP_drive+0x796>
					case LN45S:		MOT_goSla( MOT_L45S_N2S, PARAM_getSra( SLA_45 ) ); 		break;
 801600a:	2001      	movs	r0, #1
 801600c:	f7ed fef0 	bl	8003df0 <PARAM_getSra>
 8016010:	4603      	mov	r3, r0
 8016012:	4619      	mov	r1, r3
 8016014:	2005      	movs	r0, #5
 8016016:	f7fb f8fb 	bl	8011210 <MOT_goSla>
 801601a:	e026      	b.n	801606a <MAP_drive+0x796>
					case RN135S:	MOT_goSla( MOT_R135S_N2S, PARAM_getSra( SLA_135 ) ); 	break;
 801601c:	2002      	movs	r0, #2
 801601e:	f7ed fee7 	bl	8003df0 <PARAM_getSra>
 8016022:	4603      	mov	r3, r0
 8016024:	4619      	mov	r1, r3
 8016026:	200a      	movs	r0, #10
 8016028:	f7fb f8f2 	bl	8011210 <MOT_goSla>
 801602c:	e01d      	b.n	801606a <MAP_drive+0x796>
					case LN135S:	MOT_goSla( MOT_L135S_N2S, PARAM_getSra( SLA_135 ) ); 	break;
 801602e:	2002      	movs	r0, #2
 8016030:	f7ed fede 	bl	8003df0 <PARAM_getSra>
 8016034:	4603      	mov	r3, r0
 8016036:	4619      	mov	r1, r3
 8016038:	200b      	movs	r0, #11
 801603a:	f7fb f8e9 	bl	8011210 <MOT_goSla>
 801603e:	e014      	b.n	801606a <MAP_drive+0x796>
					case RN90N:		MOT_goSla( MOT_R90S_N, PARAM_getSra( SLA_N90 ) ); 		break;
 8016040:	2003      	movs	r0, #3
 8016042:	f7ed fed5 	bl	8003df0 <PARAM_getSra>
 8016046:	4603      	mov	r3, r0
 8016048:	4619      	mov	r1, r3
 801604a:	2006      	movs	r0, #6
 801604c:	f7fb f8e0 	bl	8011210 <MOT_goSla>
 8016050:	e00b      	b.n	801606a <MAP_drive+0x796>
					case LN90N:		MOT_goSla( MOT_L90S_N, PARAM_getSra( SLA_N90 ) );		break;
 8016052:	2003      	movs	r0, #3
 8016054:	f7ed fecc 	bl	8003df0 <PARAM_getSra>
 8016058:	4603      	mov	r3, r0
 801605a:	4619      	mov	r1, r3
 801605c:	2007      	movs	r0, #7
 801605e:	f7fb f8d7 	bl	8011210 <MOT_goSla>
 8016062:	e002      	b.n	801606a <MAP_drive+0x796>
				if( tcom[us_rp+1] == STOP  ){
 8016064:	bf00      	nop
 8016066:	e000      	b.n	801606a <MAP_drive+0x796>
				if((tcom[us_rp+1]==RN45S)||(tcom[us_rp+1]==LN45S)){
 8016068:	bf00      	nop
			us_rp++;
 801606a:	89fb      	ldrh	r3, [r7, #14]
 801606c:	3301      	adds	r3, #1
 801606e:	81fb      	strh	r3, [r7, #14]
			if( SYS_isOutOfCtrl() == TRUE ){
 8016070:	f7f3 fabe 	bl	80095f0 <SYS_isOutOfCtrl>
 8016074:	4603      	mov	r3, r0
 8016076:	2b00      	cmp	r3, #0
 8016078:	f43f ad57 	beq.w	8015b2a <MAP_drive+0x256>
				CTRL_stop();
 801607c:	f7f0 f9d2 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8016080:	2000      	movs	r0, #0
 8016082:	f7f3 fae7 	bl	8009654 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8016086:	2001      	movs	r0, #1
 8016088:	f7f3 fae4 	bl	8009654 <DCM_brakeMot>
				break;
 801608c:	e002      	b.n	8016094 <MAP_drive+0x7c0>
			if ( scom[us_rp] == CEND  ) break;							//	コマンド終了
 801608e:	bf00      	nop
 8016090:	e000      	b.n	8016094 <MAP_drive+0x7c0>
			if ( tcom[us_rp] == CEND  ) break;							//	コマンド終了
 8016092:	bf00      	nop
}
 8016094:	bf00      	nop
 8016096:	3710      	adds	r7, #16
 8016098:	46bd      	mov	sp, r7
 801609a:	ecbd 8b02 	vpop	{d8}
 801609e:	bd80      	pop	{r7, pc}
 80160a0:	20019c48 	.word	0x20019c48

080160a4 <MAP_searchCmdList>:
	uint8_t uc_staY,					///< [in] 開始Y座標
	enMAP_HEAD_DIR en_staDir,		///< [in] 開始時の方向
	uint8_t uc_endX,					///< [in] 終了X座標
	uint8_t uc_endY,					///< [in] 終了Y座標
	enMAP_HEAD_DIR* en_endDir		///< [out] 終了時の方向
) {
 80160a4:	b490      	push	{r4, r7}
 80160a6:	b084      	sub	sp, #16
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	4604      	mov	r4, r0
 80160ac:	4608      	mov	r0, r1
 80160ae:	4611      	mov	r1, r2
 80160b0:	461a      	mov	r2, r3
 80160b2:	4623      	mov	r3, r4
 80160b4:	71fb      	strb	r3, [r7, #7]
 80160b6:	4603      	mov	r3, r0
 80160b8:	71bb      	strb	r3, [r7, #6]
 80160ba:	460b      	mov	r3, r1
 80160bc:	717b      	strb	r3, [r7, #5]
 80160be:	4613      	mov	r3, r2
 80160c0:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_nowDir;									// 現在マウスの向いている絶対方向
	enMAP_HEAD_DIR	en_tempDir;									// 相対方向
//	uint16_t			i;											// roop

	/* 前進ステップ数を初期化する */
	uc_goStep = 0;
 80160c2:	2300      	movs	r3, #0
 80160c4:	73bb      	strb	r3, [r7, #14]
	us_pt = 0;
 80160c6:	2300      	movs	r3, #0
 80160c8:	81bb      	strh	r3, [r7, #12]
//	printf("mx%d,my%d\n", uc_staX, uc_staY);
	/* 迷路情報からコマンド作成 */
	while (1) {
		us_high = us_Cmap[uc_staY][uc_staX] - 1;
 80160ca:	79ba      	ldrb	r2, [r7, #6]
 80160cc:	79fb      	ldrb	r3, [r7, #7]
 80160ce:	499b      	ldr	r1, [pc, #620]	@ (801633c <MAP_searchCmdList+0x298>)
 80160d0:	0152      	lsls	r2, r2, #5
 80160d2:	4413      	add	r3, r2
 80160d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80160d8:	3b01      	subs	r3, #1
 80160da:	817b      	strh	r3, [r7, #10]
		if ((g_SysMap[uc_staY][uc_staX]&0xf0) != 0xf0){
 80160dc:	79ba      	ldrb	r2, [r7, #6]
 80160de:	79fb      	ldrb	r3, [r7, #7]
 80160e0:	4997      	ldr	r1, [pc, #604]	@ (8016340 <MAP_searchCmdList+0x29c>)
 80160e2:	0152      	lsls	r2, r2, #5
 80160e4:	440a      	add	r2, r1
 80160e6:	4413      	add	r3, r2
 80160e8:	781b      	ldrb	r3, [r3, #0]
 80160ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80160ee:	2bf0      	cmp	r3, #240	@ 0xf0
 80160f0:	d006      	beq.n	8016100 <MAP_searchCmdList+0x5c>
			Return_X = uc_staX;
 80160f2:	4a94      	ldr	r2, [pc, #592]	@ (8016344 <MAP_searchCmdList+0x2a0>)
 80160f4:	79fb      	ldrb	r3, [r7, #7]
 80160f6:	7013      	strb	r3, [r2, #0]
			Return_Y = uc_staY;
 80160f8:	4a93      	ldr	r2, [pc, #588]	@ (8016348 <MAP_searchCmdList+0x2a4>)
 80160fa:	79bb      	ldrb	r3, [r7, #6]
 80160fc:	7013      	strb	r3, [r2, #0]
			break;
 80160fe:	e1dd      	b.n	80164bc <MAP_searchCmdList+0x418>
		}

		if (en_staDir == NORTH) {
 8016100:	797b      	ldrb	r3, [r7, #5]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d164      	bne.n	80161d0 <MAP_searchCmdList+0x12c>
			if (((g_SysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_Cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 8016106:	79ba      	ldrb	r2, [r7, #6]
 8016108:	79fb      	ldrb	r3, [r7, #7]
 801610a:	498d      	ldr	r1, [pc, #564]	@ (8016340 <MAP_searchCmdList+0x29c>)
 801610c:	0152      	lsls	r2, r2, #5
 801610e:	440a      	add	r2, r1
 8016110:	4413      	add	r3, r2
 8016112:	781b      	ldrb	r3, [r3, #0]
 8016114:	f003 0311 	and.w	r3, r3, #17
 8016118:	2b10      	cmp	r3, #16
 801611a:	d10d      	bne.n	8016138 <MAP_searchCmdList+0x94>
 801611c:	79bb      	ldrb	r3, [r7, #6]
 801611e:	1c5a      	adds	r2, r3, #1
 8016120:	79fb      	ldrb	r3, [r7, #7]
 8016122:	4986      	ldr	r1, [pc, #536]	@ (801633c <MAP_searchCmdList+0x298>)
 8016124:	0152      	lsls	r2, r2, #5
 8016126:	4413      	add	r3, r2
 8016128:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801612c:	897a      	ldrh	r2, [r7, #10]
 801612e:	429a      	cmp	r2, r3
 8016130:	d102      	bne.n	8016138 <MAP_searchCmdList+0x94>
 8016132:	2300      	movs	r3, #0
 8016134:	73fb      	strb	r3, [r7, #15]
 8016136:	e18b      	b.n	8016450 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_Cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 8016138:	79ba      	ldrb	r2, [r7, #6]
 801613a:	79fb      	ldrb	r3, [r7, #7]
 801613c:	4980      	ldr	r1, [pc, #512]	@ (8016340 <MAP_searchCmdList+0x29c>)
 801613e:	0152      	lsls	r2, r2, #5
 8016140:	440a      	add	r2, r1
 8016142:	4413      	add	r3, r2
 8016144:	781b      	ldrb	r3, [r3, #0]
 8016146:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 801614a:	2b20      	cmp	r3, #32
 801614c:	d10d      	bne.n	801616a <MAP_searchCmdList+0xc6>
 801614e:	79ba      	ldrb	r2, [r7, #6]
 8016150:	79fb      	ldrb	r3, [r7, #7]
 8016152:	3301      	adds	r3, #1
 8016154:	4979      	ldr	r1, [pc, #484]	@ (801633c <MAP_searchCmdList+0x298>)
 8016156:	0152      	lsls	r2, r2, #5
 8016158:	4413      	add	r3, r2
 801615a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801615e:	897a      	ldrh	r2, [r7, #10]
 8016160:	429a      	cmp	r2, r3
 8016162:	d102      	bne.n	801616a <MAP_searchCmdList+0xc6>
 8016164:	2301      	movs	r3, #1
 8016166:	73fb      	strb	r3, [r7, #15]
 8016168:	e172      	b.n	8016450 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_Cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 801616a:	79ba      	ldrb	r2, [r7, #6]
 801616c:	79fb      	ldrb	r3, [r7, #7]
 801616e:	4974      	ldr	r1, [pc, #464]	@ (8016340 <MAP_searchCmdList+0x29c>)
 8016170:	0152      	lsls	r2, r2, #5
 8016172:	440a      	add	r2, r1
 8016174:	4413      	add	r3, r2
 8016176:	781b      	ldrb	r3, [r3, #0]
 8016178:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 801617c:	2b80      	cmp	r3, #128	@ 0x80
 801617e:	d10d      	bne.n	801619c <MAP_searchCmdList+0xf8>
 8016180:	79ba      	ldrb	r2, [r7, #6]
 8016182:	79fb      	ldrb	r3, [r7, #7]
 8016184:	3b01      	subs	r3, #1
 8016186:	496d      	ldr	r1, [pc, #436]	@ (801633c <MAP_searchCmdList+0x298>)
 8016188:	0152      	lsls	r2, r2, #5
 801618a:	4413      	add	r3, r2
 801618c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016190:	897a      	ldrh	r2, [r7, #10]
 8016192:	429a      	cmp	r2, r3
 8016194:	d102      	bne.n	801619c <MAP_searchCmdList+0xf8>
 8016196:	2303      	movs	r3, #3
 8016198:	73fb      	strb	r3, [r7, #15]
 801619a:	e159      	b.n	8016450 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_Cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 801619c:	79ba      	ldrb	r2, [r7, #6]
 801619e:	79fb      	ldrb	r3, [r7, #7]
 80161a0:	4967      	ldr	r1, [pc, #412]	@ (8016340 <MAP_searchCmdList+0x29c>)
 80161a2:	0152      	lsls	r2, r2, #5
 80161a4:	440a      	add	r2, r1
 80161a6:	4413      	add	r3, r2
 80161a8:	781b      	ldrb	r3, [r3, #0]
 80161aa:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80161ae:	2b40      	cmp	r3, #64	@ 0x40
 80161b0:	d10d      	bne.n	80161ce <MAP_searchCmdList+0x12a>
 80161b2:	79bb      	ldrb	r3, [r7, #6]
 80161b4:	1e5a      	subs	r2, r3, #1
 80161b6:	79fb      	ldrb	r3, [r7, #7]
 80161b8:	4960      	ldr	r1, [pc, #384]	@ (801633c <MAP_searchCmdList+0x298>)
 80161ba:	0152      	lsls	r2, r2, #5
 80161bc:	4413      	add	r3, r2
 80161be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80161c2:	897a      	ldrh	r2, [r7, #10]
 80161c4:	429a      	cmp	r2, r3
 80161c6:	d102      	bne.n	80161ce <MAP_searchCmdList+0x12a>
 80161c8:	2302      	movs	r3, #2
 80161ca:	73fb      	strb	r3, [r7, #15]
 80161cc:	e140      	b.n	8016450 <MAP_searchCmdList+0x3ac>
			else   while (1);
 80161ce:	e7fe      	b.n	80161ce <MAP_searchCmdList+0x12a>
		}
		else if (en_staDir == EAST) {
 80161d0:	797b      	ldrb	r3, [r7, #5]
 80161d2:	2b01      	cmp	r3, #1
 80161d4:	d164      	bne.n	80162a0 <MAP_searchCmdList+0x1fc>
			if (((g_SysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_Cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 80161d6:	79ba      	ldrb	r2, [r7, #6]
 80161d8:	79fb      	ldrb	r3, [r7, #7]
 80161da:	4959      	ldr	r1, [pc, #356]	@ (8016340 <MAP_searchCmdList+0x29c>)
 80161dc:	0152      	lsls	r2, r2, #5
 80161de:	440a      	add	r2, r1
 80161e0:	4413      	add	r3, r2
 80161e2:	781b      	ldrb	r3, [r3, #0]
 80161e4:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80161e8:	2b20      	cmp	r3, #32
 80161ea:	d10d      	bne.n	8016208 <MAP_searchCmdList+0x164>
 80161ec:	79ba      	ldrb	r2, [r7, #6]
 80161ee:	79fb      	ldrb	r3, [r7, #7]
 80161f0:	3301      	adds	r3, #1
 80161f2:	4952      	ldr	r1, [pc, #328]	@ (801633c <MAP_searchCmdList+0x298>)
 80161f4:	0152      	lsls	r2, r2, #5
 80161f6:	4413      	add	r3, r2
 80161f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80161fc:	897a      	ldrh	r2, [r7, #10]
 80161fe:	429a      	cmp	r2, r3
 8016200:	d102      	bne.n	8016208 <MAP_searchCmdList+0x164>
 8016202:	2301      	movs	r3, #1
 8016204:	73fb      	strb	r3, [r7, #15]
 8016206:	e123      	b.n	8016450 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_Cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 8016208:	79ba      	ldrb	r2, [r7, #6]
 801620a:	79fb      	ldrb	r3, [r7, #7]
 801620c:	494c      	ldr	r1, [pc, #304]	@ (8016340 <MAP_searchCmdList+0x29c>)
 801620e:	0152      	lsls	r2, r2, #5
 8016210:	440a      	add	r2, r1
 8016212:	4413      	add	r3, r2
 8016214:	781b      	ldrb	r3, [r3, #0]
 8016216:	f003 0311 	and.w	r3, r3, #17
 801621a:	2b10      	cmp	r3, #16
 801621c:	d10d      	bne.n	801623a <MAP_searchCmdList+0x196>
 801621e:	79bb      	ldrb	r3, [r7, #6]
 8016220:	1c5a      	adds	r2, r3, #1
 8016222:	79fb      	ldrb	r3, [r7, #7]
 8016224:	4945      	ldr	r1, [pc, #276]	@ (801633c <MAP_searchCmdList+0x298>)
 8016226:	0152      	lsls	r2, r2, #5
 8016228:	4413      	add	r3, r2
 801622a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801622e:	897a      	ldrh	r2, [r7, #10]
 8016230:	429a      	cmp	r2, r3
 8016232:	d102      	bne.n	801623a <MAP_searchCmdList+0x196>
 8016234:	2300      	movs	r3, #0
 8016236:	73fb      	strb	r3, [r7, #15]
 8016238:	e10a      	b.n	8016450 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_Cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 801623a:	79ba      	ldrb	r2, [r7, #6]
 801623c:	79fb      	ldrb	r3, [r7, #7]
 801623e:	4940      	ldr	r1, [pc, #256]	@ (8016340 <MAP_searchCmdList+0x29c>)
 8016240:	0152      	lsls	r2, r2, #5
 8016242:	440a      	add	r2, r1
 8016244:	4413      	add	r3, r2
 8016246:	781b      	ldrb	r3, [r3, #0]
 8016248:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801624c:	2b40      	cmp	r3, #64	@ 0x40
 801624e:	d10d      	bne.n	801626c <MAP_searchCmdList+0x1c8>
 8016250:	79bb      	ldrb	r3, [r7, #6]
 8016252:	1e5a      	subs	r2, r3, #1
 8016254:	79fb      	ldrb	r3, [r7, #7]
 8016256:	4939      	ldr	r1, [pc, #228]	@ (801633c <MAP_searchCmdList+0x298>)
 8016258:	0152      	lsls	r2, r2, #5
 801625a:	4413      	add	r3, r2
 801625c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016260:	897a      	ldrh	r2, [r7, #10]
 8016262:	429a      	cmp	r2, r3
 8016264:	d102      	bne.n	801626c <MAP_searchCmdList+0x1c8>
 8016266:	2302      	movs	r3, #2
 8016268:	73fb      	strb	r3, [r7, #15]
 801626a:	e0f1      	b.n	8016450 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_Cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 801626c:	79ba      	ldrb	r2, [r7, #6]
 801626e:	79fb      	ldrb	r3, [r7, #7]
 8016270:	4933      	ldr	r1, [pc, #204]	@ (8016340 <MAP_searchCmdList+0x29c>)
 8016272:	0152      	lsls	r2, r2, #5
 8016274:	440a      	add	r2, r1
 8016276:	4413      	add	r3, r2
 8016278:	781b      	ldrb	r3, [r3, #0]
 801627a:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 801627e:	2b80      	cmp	r3, #128	@ 0x80
 8016280:	d10d      	bne.n	801629e <MAP_searchCmdList+0x1fa>
 8016282:	79ba      	ldrb	r2, [r7, #6]
 8016284:	79fb      	ldrb	r3, [r7, #7]
 8016286:	3b01      	subs	r3, #1
 8016288:	492c      	ldr	r1, [pc, #176]	@ (801633c <MAP_searchCmdList+0x298>)
 801628a:	0152      	lsls	r2, r2, #5
 801628c:	4413      	add	r3, r2
 801628e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016292:	897a      	ldrh	r2, [r7, #10]
 8016294:	429a      	cmp	r2, r3
 8016296:	d102      	bne.n	801629e <MAP_searchCmdList+0x1fa>
 8016298:	2303      	movs	r3, #3
 801629a:	73fb      	strb	r3, [r7, #15]
 801629c:	e0d8      	b.n	8016450 <MAP_searchCmdList+0x3ac>
			else   while (1);
 801629e:	e7fe      	b.n	801629e <MAP_searchCmdList+0x1fa>
		}
		else if (en_staDir == SOUTH) {
 80162a0:	797b      	ldrb	r3, [r7, #5]
 80162a2:	2b02      	cmp	r3, #2
 80162a4:	d16c      	bne.n	8016380 <MAP_searchCmdList+0x2dc>
			if (((g_SysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_Cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 80162a6:	79ba      	ldrb	r2, [r7, #6]
 80162a8:	79fb      	ldrb	r3, [r7, #7]
 80162aa:	4925      	ldr	r1, [pc, #148]	@ (8016340 <MAP_searchCmdList+0x29c>)
 80162ac:	0152      	lsls	r2, r2, #5
 80162ae:	440a      	add	r2, r1
 80162b0:	4413      	add	r3, r2
 80162b2:	781b      	ldrb	r3, [r3, #0]
 80162b4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80162b8:	2b40      	cmp	r3, #64	@ 0x40
 80162ba:	d10d      	bne.n	80162d8 <MAP_searchCmdList+0x234>
 80162bc:	79bb      	ldrb	r3, [r7, #6]
 80162be:	1e5a      	subs	r2, r3, #1
 80162c0:	79fb      	ldrb	r3, [r7, #7]
 80162c2:	491e      	ldr	r1, [pc, #120]	@ (801633c <MAP_searchCmdList+0x298>)
 80162c4:	0152      	lsls	r2, r2, #5
 80162c6:	4413      	add	r3, r2
 80162c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80162cc:	897a      	ldrh	r2, [r7, #10]
 80162ce:	429a      	cmp	r2, r3
 80162d0:	d102      	bne.n	80162d8 <MAP_searchCmdList+0x234>
 80162d2:	2302      	movs	r3, #2
 80162d4:	73fb      	strb	r3, [r7, #15]
 80162d6:	e0bb      	b.n	8016450 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_Cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 80162d8:	79ba      	ldrb	r2, [r7, #6]
 80162da:	79fb      	ldrb	r3, [r7, #7]
 80162dc:	4918      	ldr	r1, [pc, #96]	@ (8016340 <MAP_searchCmdList+0x29c>)
 80162de:	0152      	lsls	r2, r2, #5
 80162e0:	440a      	add	r2, r1
 80162e2:	4413      	add	r3, r2
 80162e4:	781b      	ldrb	r3, [r3, #0]
 80162e6:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80162ea:	2b20      	cmp	r3, #32
 80162ec:	d10d      	bne.n	801630a <MAP_searchCmdList+0x266>
 80162ee:	79ba      	ldrb	r2, [r7, #6]
 80162f0:	79fb      	ldrb	r3, [r7, #7]
 80162f2:	3301      	adds	r3, #1
 80162f4:	4911      	ldr	r1, [pc, #68]	@ (801633c <MAP_searchCmdList+0x298>)
 80162f6:	0152      	lsls	r2, r2, #5
 80162f8:	4413      	add	r3, r2
 80162fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80162fe:	897a      	ldrh	r2, [r7, #10]
 8016300:	429a      	cmp	r2, r3
 8016302:	d102      	bne.n	801630a <MAP_searchCmdList+0x266>
 8016304:	2301      	movs	r3, #1
 8016306:	73fb      	strb	r3, [r7, #15]
 8016308:	e0a2      	b.n	8016450 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_Cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 801630a:	79ba      	ldrb	r2, [r7, #6]
 801630c:	79fb      	ldrb	r3, [r7, #7]
 801630e:	490c      	ldr	r1, [pc, #48]	@ (8016340 <MAP_searchCmdList+0x29c>)
 8016310:	0152      	lsls	r2, r2, #5
 8016312:	440a      	add	r2, r1
 8016314:	4413      	add	r3, r2
 8016316:	781b      	ldrb	r3, [r3, #0]
 8016318:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 801631c:	2b80      	cmp	r3, #128	@ 0x80
 801631e:	d115      	bne.n	801634c <MAP_searchCmdList+0x2a8>
 8016320:	79ba      	ldrb	r2, [r7, #6]
 8016322:	79fb      	ldrb	r3, [r7, #7]
 8016324:	3b01      	subs	r3, #1
 8016326:	4905      	ldr	r1, [pc, #20]	@ (801633c <MAP_searchCmdList+0x298>)
 8016328:	0152      	lsls	r2, r2, #5
 801632a:	4413      	add	r3, r2
 801632c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016330:	897a      	ldrh	r2, [r7, #10]
 8016332:	429a      	cmp	r2, r3
 8016334:	d10a      	bne.n	801634c <MAP_searchCmdList+0x2a8>
 8016336:	2303      	movs	r3, #3
 8016338:	73fb      	strb	r3, [r7, #15]
 801633a:	e089      	b.n	8016450 <MAP_searchCmdList+0x3ac>
 801633c:	2001ada0 	.word	0x2001ada0
 8016340:	2001b5a0 	.word	0x2001b5a0
 8016344:	2001ad9c 	.word	0x2001ad9c
 8016348:	2001ad9d 	.word	0x2001ad9d
			else if (((g_SysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_Cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 801634c:	79ba      	ldrb	r2, [r7, #6]
 801634e:	79fb      	ldrb	r3, [r7, #7]
 8016350:	495e      	ldr	r1, [pc, #376]	@ (80164cc <MAP_searchCmdList+0x428>)
 8016352:	0152      	lsls	r2, r2, #5
 8016354:	440a      	add	r2, r1
 8016356:	4413      	add	r3, r2
 8016358:	781b      	ldrb	r3, [r3, #0]
 801635a:	f003 0311 	and.w	r3, r3, #17
 801635e:	2b10      	cmp	r3, #16
 8016360:	d10d      	bne.n	801637e <MAP_searchCmdList+0x2da>
 8016362:	79bb      	ldrb	r3, [r7, #6]
 8016364:	1c5a      	adds	r2, r3, #1
 8016366:	79fb      	ldrb	r3, [r7, #7]
 8016368:	4959      	ldr	r1, [pc, #356]	@ (80164d0 <MAP_searchCmdList+0x42c>)
 801636a:	0152      	lsls	r2, r2, #5
 801636c:	4413      	add	r3, r2
 801636e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016372:	897a      	ldrh	r2, [r7, #10]
 8016374:	429a      	cmp	r2, r3
 8016376:	d102      	bne.n	801637e <MAP_searchCmdList+0x2da>
 8016378:	2300      	movs	r3, #0
 801637a:	73fb      	strb	r3, [r7, #15]
 801637c:	e068      	b.n	8016450 <MAP_searchCmdList+0x3ac>
			else   while (1);
 801637e:	e7fe      	b.n	801637e <MAP_searchCmdList+0x2da>
		}
		else if (en_staDir == WEST) {
 8016380:	797b      	ldrb	r3, [r7, #5]
 8016382:	2b03      	cmp	r3, #3
 8016384:	d164      	bne.n	8016450 <MAP_searchCmdList+0x3ac>
			if (((g_SysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_Cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 8016386:	79ba      	ldrb	r2, [r7, #6]
 8016388:	79fb      	ldrb	r3, [r7, #7]
 801638a:	4950      	ldr	r1, [pc, #320]	@ (80164cc <MAP_searchCmdList+0x428>)
 801638c:	0152      	lsls	r2, r2, #5
 801638e:	440a      	add	r2, r1
 8016390:	4413      	add	r3, r2
 8016392:	781b      	ldrb	r3, [r3, #0]
 8016394:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 8016398:	2b80      	cmp	r3, #128	@ 0x80
 801639a:	d10d      	bne.n	80163b8 <MAP_searchCmdList+0x314>
 801639c:	79ba      	ldrb	r2, [r7, #6]
 801639e:	79fb      	ldrb	r3, [r7, #7]
 80163a0:	3b01      	subs	r3, #1
 80163a2:	494b      	ldr	r1, [pc, #300]	@ (80164d0 <MAP_searchCmdList+0x42c>)
 80163a4:	0152      	lsls	r2, r2, #5
 80163a6:	4413      	add	r3, r2
 80163a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80163ac:	897a      	ldrh	r2, [r7, #10]
 80163ae:	429a      	cmp	r2, r3
 80163b0:	d102      	bne.n	80163b8 <MAP_searchCmdList+0x314>
 80163b2:	2303      	movs	r3, #3
 80163b4:	73fb      	strb	r3, [r7, #15]
 80163b6:	e04b      	b.n	8016450 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_Cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 80163b8:	79ba      	ldrb	r2, [r7, #6]
 80163ba:	79fb      	ldrb	r3, [r7, #7]
 80163bc:	4943      	ldr	r1, [pc, #268]	@ (80164cc <MAP_searchCmdList+0x428>)
 80163be:	0152      	lsls	r2, r2, #5
 80163c0:	440a      	add	r2, r1
 80163c2:	4413      	add	r3, r2
 80163c4:	781b      	ldrb	r3, [r3, #0]
 80163c6:	f003 0311 	and.w	r3, r3, #17
 80163ca:	2b10      	cmp	r3, #16
 80163cc:	d10d      	bne.n	80163ea <MAP_searchCmdList+0x346>
 80163ce:	79bb      	ldrb	r3, [r7, #6]
 80163d0:	1c5a      	adds	r2, r3, #1
 80163d2:	79fb      	ldrb	r3, [r7, #7]
 80163d4:	493e      	ldr	r1, [pc, #248]	@ (80164d0 <MAP_searchCmdList+0x42c>)
 80163d6:	0152      	lsls	r2, r2, #5
 80163d8:	4413      	add	r3, r2
 80163da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80163de:	897a      	ldrh	r2, [r7, #10]
 80163e0:	429a      	cmp	r2, r3
 80163e2:	d102      	bne.n	80163ea <MAP_searchCmdList+0x346>
 80163e4:	2300      	movs	r3, #0
 80163e6:	73fb      	strb	r3, [r7, #15]
 80163e8:	e032      	b.n	8016450 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_Cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 80163ea:	79ba      	ldrb	r2, [r7, #6]
 80163ec:	79fb      	ldrb	r3, [r7, #7]
 80163ee:	4937      	ldr	r1, [pc, #220]	@ (80164cc <MAP_searchCmdList+0x428>)
 80163f0:	0152      	lsls	r2, r2, #5
 80163f2:	440a      	add	r2, r1
 80163f4:	4413      	add	r3, r2
 80163f6:	781b      	ldrb	r3, [r3, #0]
 80163f8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80163fc:	2b40      	cmp	r3, #64	@ 0x40
 80163fe:	d10d      	bne.n	801641c <MAP_searchCmdList+0x378>
 8016400:	79bb      	ldrb	r3, [r7, #6]
 8016402:	1e5a      	subs	r2, r3, #1
 8016404:	79fb      	ldrb	r3, [r7, #7]
 8016406:	4932      	ldr	r1, [pc, #200]	@ (80164d0 <MAP_searchCmdList+0x42c>)
 8016408:	0152      	lsls	r2, r2, #5
 801640a:	4413      	add	r3, r2
 801640c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016410:	897a      	ldrh	r2, [r7, #10]
 8016412:	429a      	cmp	r2, r3
 8016414:	d102      	bne.n	801641c <MAP_searchCmdList+0x378>
 8016416:	2302      	movs	r3, #2
 8016418:	73fb      	strb	r3, [r7, #15]
 801641a:	e019      	b.n	8016450 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_Cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 801641c:	79ba      	ldrb	r2, [r7, #6]
 801641e:	79fb      	ldrb	r3, [r7, #7]
 8016420:	492a      	ldr	r1, [pc, #168]	@ (80164cc <MAP_searchCmdList+0x428>)
 8016422:	0152      	lsls	r2, r2, #5
 8016424:	440a      	add	r2, r1
 8016426:	4413      	add	r3, r2
 8016428:	781b      	ldrb	r3, [r3, #0]
 801642a:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 801642e:	2b20      	cmp	r3, #32
 8016430:	d10d      	bne.n	801644e <MAP_searchCmdList+0x3aa>
 8016432:	79ba      	ldrb	r2, [r7, #6]
 8016434:	79fb      	ldrb	r3, [r7, #7]
 8016436:	3301      	adds	r3, #1
 8016438:	4925      	ldr	r1, [pc, #148]	@ (80164d0 <MAP_searchCmdList+0x42c>)
 801643a:	0152      	lsls	r2, r2, #5
 801643c:	4413      	add	r3, r2
 801643e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016442:	897a      	ldrh	r2, [r7, #10]
 8016444:	429a      	cmp	r2, r3
 8016446:	d102      	bne.n	801644e <MAP_searchCmdList+0x3aa>
 8016448:	2301      	movs	r3, #1
 801644a:	73fb      	strb	r3, [r7, #15]
 801644c:	e000      	b.n	8016450 <MAP_searchCmdList+0x3ac>
			else   while (1);
 801644e:	e7fe      	b.n	801644e <MAP_searchCmdList+0x3aa>
		}

		en_tempDir = (enMAP_HEAD_DIR)((en_nowDir - en_staDir) & (enMAP_HEAD_DIR)3);		// 方向更新
 8016450:	7bfa      	ldrb	r2, [r7, #15]
 8016452:	797b      	ldrb	r3, [r7, #5]
 8016454:	1ad3      	subs	r3, r2, r3
 8016456:	b2db      	uxtb	r3, r3
 8016458:	f003 0303 	and.w	r3, r3, #3
 801645c:	727b      	strb	r3, [r7, #9]
		en_staDir = en_nowDir;
 801645e:	7bfb      	ldrb	r3, [r7, #15]
 8016460:	717b      	strb	r3, [r7, #5]

		if (en_nowDir == NORTH) uc_staY = uc_staY + 1;
 8016462:	7bfb      	ldrb	r3, [r7, #15]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d103      	bne.n	8016470 <MAP_searchCmdList+0x3cc>
 8016468:	79bb      	ldrb	r3, [r7, #6]
 801646a:	3301      	adds	r3, #1
 801646c:	71bb      	strb	r3, [r7, #6]
 801646e:	e013      	b.n	8016498 <MAP_searchCmdList+0x3f4>
		else if (en_nowDir == EAST) uc_staX = uc_staX + 1;
 8016470:	7bfb      	ldrb	r3, [r7, #15]
 8016472:	2b01      	cmp	r3, #1
 8016474:	d103      	bne.n	801647e <MAP_searchCmdList+0x3da>
 8016476:	79fb      	ldrb	r3, [r7, #7]
 8016478:	3301      	adds	r3, #1
 801647a:	71fb      	strb	r3, [r7, #7]
 801647c:	e00c      	b.n	8016498 <MAP_searchCmdList+0x3f4>
		else if (en_nowDir == SOUTH) uc_staY = uc_staY - 1;
 801647e:	7bfb      	ldrb	r3, [r7, #15]
 8016480:	2b02      	cmp	r3, #2
 8016482:	d103      	bne.n	801648c <MAP_searchCmdList+0x3e8>
 8016484:	79bb      	ldrb	r3, [r7, #6]
 8016486:	3b01      	subs	r3, #1
 8016488:	71bb      	strb	r3, [r7, #6]
 801648a:	e005      	b.n	8016498 <MAP_searchCmdList+0x3f4>
		else if (en_nowDir == WEST) uc_staX = uc_staX - 1;
 801648c:	7bfb      	ldrb	r3, [r7, #15]
 801648e:	2b03      	cmp	r3, #3
 8016490:	d102      	bne.n	8016498 <MAP_searchCmdList+0x3f4>
 8016492:	79fb      	ldrb	r3, [r7, #7]
 8016494:	3b01      	subs	r3, #1
 8016496:	71fb      	strb	r3, [r7, #7]

		en_staDir = en_nowDir;
 8016498:	7bfb      	ldrb	r3, [r7, #15]
 801649a:	717b      	strb	r3, [r7, #5]

//		if ((uc_staX == uc_endX) && (uc_staY == uc_endY)) break;
		if (us_Cmap[uc_staY][uc_staX] == 0) {
 801649c:	79ba      	ldrb	r2, [r7, #6]
 801649e:	79fb      	ldrb	r3, [r7, #7]
 80164a0:	490b      	ldr	r1, [pc, #44]	@ (80164d0 <MAP_searchCmdList+0x42c>)
 80164a2:	0152      	lsls	r2, r2, #5
 80164a4:	4413      	add	r3, r2
 80164a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	f47f ae0d 	bne.w	80160ca <MAP_searchCmdList+0x26>
			Return_X = 0;
 80164b0:	4b08      	ldr	r3, [pc, #32]	@ (80164d4 <MAP_searchCmdList+0x430>)
 80164b2:	2200      	movs	r2, #0
 80164b4:	701a      	strb	r2, [r3, #0]
			Return_Y = 0;
 80164b6:	4b08      	ldr	r3, [pc, #32]	@ (80164d8 <MAP_searchCmdList+0x434>)
 80164b8:	2200      	movs	r2, #0
 80164ba:	701a      	strb	r2, [r3, #0]
		}
	}


	/* 最終的に向いている方向 */
	*en_endDir = en_staDir;
 80164bc:	69fb      	ldr	r3, [r7, #28]
 80164be:	797a      	ldrb	r2, [r7, #5]
 80164c0:	701a      	strb	r2, [r3, #0]
}
 80164c2:	bf00      	nop
 80164c4:	3710      	adds	r7, #16
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bc90      	pop	{r4, r7}
 80164ca:	4770      	bx	lr
 80164cc:	2001b5a0 	.word	0x2001b5a0
 80164d0:	2001ada0 	.word	0x2001ada0
 80164d4:	2001ad9c 	.word	0x2001ad9c
 80164d8:	2001ad9d 	.word	0x2001ad9d

080164dc <MAP_makeCmdList_dijkstra_modoki>:
	uint8_t uc_staY,					///< [in] 開始Y座標
	enMAP_HEAD_DIR en_staDir,		///< [in] 開始時の方向
	uint8_t uc_endX,					///< [in] 終了X座標
	uint8_t uc_endY,					///< [in] 終了Y座標
	enMAP_HEAD_DIR* en_endDir		///< [out] 終了時の方向
) {
 80164dc:	b490      	push	{r4, r7}
 80164de:	b086      	sub	sp, #24
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	4604      	mov	r4, r0
 80164e4:	4608      	mov	r0, r1
 80164e6:	4611      	mov	r1, r2
 80164e8:	461a      	mov	r2, r3
 80164ea:	4623      	mov	r3, r4
 80164ec:	71fb      	strb	r3, [r7, #7]
 80164ee:	4603      	mov	r3, r0
 80164f0:	71bb      	strb	r3, [r7, #6]
 80164f2:	460b      	mov	r3, r1
 80164f4:	717b      	strb	r3, [r7, #5]
 80164f6:	4613      	mov	r3, r2
 80164f8:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_nowDir;									// 現在マウスの向いている絶対方向
	enMAP_HEAD_DIR	en_tempDir;									// 相対方向
//	USHORT			i;											// roop

	/* 前進ステップ数を初期化する */
	uc_goStep = 0;
 80164fa:	2300      	movs	r3, #0
 80164fc:	75fb      	strb	r3, [r7, #23]
	us_pt = 0;
 80164fe:	2300      	movs	r3, #0
 8016500:	82bb      	strh	r3, [r7, #20]

	/* 迷路情報からコマンド作成 */
	while (1) {
		us_high = us_Cmap[uc_staY][uc_staX];
 8016502:	79ba      	ldrb	r2, [r7, #6]
 8016504:	79fb      	ldrb	r3, [r7, #7]
 8016506:	49a4      	ldr	r1, [pc, #656]	@ (8016798 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 8016508:	0152      	lsls	r2, r2, #5
 801650a:	4413      	add	r3, r2
 801650c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016510:	823b      	strh	r3, [r7, #16]

		if ((uc_staX == uc_endX) && (uc_staY == uc_endY)) {
 8016512:	79fa      	ldrb	r2, [r7, #7]
 8016514:	793b      	ldrb	r3, [r7, #4]
 8016516:	429a      	cmp	r2, r3
 8016518:	d105      	bne.n	8016526 <MAP_makeCmdList_dijkstra_modoki+0x4a>
 801651a:	79ba      	ldrb	r2, [r7, #6]
 801651c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016520:	429a      	cmp	r2, r3
 8016522:	f000 820b 	beq.w	801693c <MAP_makeCmdList_dijkstra_modoki+0x460>
			break;
		}
		
		if (en_staDir == NORTH) {
 8016526:	797b      	ldrb	r3, [r7, #5]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d164      	bne.n	80165f6 <MAP_makeCmdList_dijkstra_modoki+0x11a>
			if (((g_SysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_Cmap[uc_staY + 1][uc_staX] < us_high)) en_nowDir = NORTH;
 801652c:	79ba      	ldrb	r2, [r7, #6]
 801652e:	79fb      	ldrb	r3, [r7, #7]
 8016530:	499a      	ldr	r1, [pc, #616]	@ (801679c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8016532:	0152      	lsls	r2, r2, #5
 8016534:	440a      	add	r2, r1
 8016536:	4413      	add	r3, r2
 8016538:	781b      	ldrb	r3, [r3, #0]
 801653a:	f003 0311 	and.w	r3, r3, #17
 801653e:	2b10      	cmp	r3, #16
 8016540:	d10d      	bne.n	801655e <MAP_makeCmdList_dijkstra_modoki+0x82>
 8016542:	79bb      	ldrb	r3, [r7, #6]
 8016544:	1c5a      	adds	r2, r3, #1
 8016546:	79fb      	ldrb	r3, [r7, #7]
 8016548:	4993      	ldr	r1, [pc, #588]	@ (8016798 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801654a:	0152      	lsls	r2, r2, #5
 801654c:	4413      	add	r3, r2
 801654e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016552:	8a3a      	ldrh	r2, [r7, #16]
 8016554:	429a      	cmp	r2, r3
 8016556:	d902      	bls.n	801655e <MAP_makeCmdList_dijkstra_modoki+0x82>
 8016558:	2300      	movs	r3, #0
 801655a:	74fb      	strb	r3, [r7, #19]
 801655c:	e188      	b.n	8016870 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_Cmap[uc_staY][uc_staX + 1] < us_high)) en_nowDir = EAST;
 801655e:	79ba      	ldrb	r2, [r7, #6]
 8016560:	79fb      	ldrb	r3, [r7, #7]
 8016562:	498e      	ldr	r1, [pc, #568]	@ (801679c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8016564:	0152      	lsls	r2, r2, #5
 8016566:	440a      	add	r2, r1
 8016568:	4413      	add	r3, r2
 801656a:	781b      	ldrb	r3, [r3, #0]
 801656c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8016570:	2b20      	cmp	r3, #32
 8016572:	d10d      	bne.n	8016590 <MAP_makeCmdList_dijkstra_modoki+0xb4>
 8016574:	79ba      	ldrb	r2, [r7, #6]
 8016576:	79fb      	ldrb	r3, [r7, #7]
 8016578:	3301      	adds	r3, #1
 801657a:	4987      	ldr	r1, [pc, #540]	@ (8016798 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801657c:	0152      	lsls	r2, r2, #5
 801657e:	4413      	add	r3, r2
 8016580:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016584:	8a3a      	ldrh	r2, [r7, #16]
 8016586:	429a      	cmp	r2, r3
 8016588:	d902      	bls.n	8016590 <MAP_makeCmdList_dijkstra_modoki+0xb4>
 801658a:	2301      	movs	r3, #1
 801658c:	74fb      	strb	r3, [r7, #19]
 801658e:	e16f      	b.n	8016870 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_Cmap[uc_staY][uc_staX - 1] < us_high)) en_nowDir = WEST;
 8016590:	79ba      	ldrb	r2, [r7, #6]
 8016592:	79fb      	ldrb	r3, [r7, #7]
 8016594:	4981      	ldr	r1, [pc, #516]	@ (801679c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8016596:	0152      	lsls	r2, r2, #5
 8016598:	440a      	add	r2, r1
 801659a:	4413      	add	r3, r2
 801659c:	781b      	ldrb	r3, [r3, #0]
 801659e:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 80165a2:	2b80      	cmp	r3, #128	@ 0x80
 80165a4:	d10d      	bne.n	80165c2 <MAP_makeCmdList_dijkstra_modoki+0xe6>
 80165a6:	79ba      	ldrb	r2, [r7, #6]
 80165a8:	79fb      	ldrb	r3, [r7, #7]
 80165aa:	3b01      	subs	r3, #1
 80165ac:	497a      	ldr	r1, [pc, #488]	@ (8016798 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80165ae:	0152      	lsls	r2, r2, #5
 80165b0:	4413      	add	r3, r2
 80165b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80165b6:	8a3a      	ldrh	r2, [r7, #16]
 80165b8:	429a      	cmp	r2, r3
 80165ba:	d902      	bls.n	80165c2 <MAP_makeCmdList_dijkstra_modoki+0xe6>
 80165bc:	2303      	movs	r3, #3
 80165be:	74fb      	strb	r3, [r7, #19]
 80165c0:	e156      	b.n	8016870 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_Cmap[uc_staY - 1][uc_staX] < us_high)) en_nowDir = SOUTH;
 80165c2:	79ba      	ldrb	r2, [r7, #6]
 80165c4:	79fb      	ldrb	r3, [r7, #7]
 80165c6:	4975      	ldr	r1, [pc, #468]	@ (801679c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 80165c8:	0152      	lsls	r2, r2, #5
 80165ca:	440a      	add	r2, r1
 80165cc:	4413      	add	r3, r2
 80165ce:	781b      	ldrb	r3, [r3, #0]
 80165d0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80165d4:	2b40      	cmp	r3, #64	@ 0x40
 80165d6:	d10d      	bne.n	80165f4 <MAP_makeCmdList_dijkstra_modoki+0x118>
 80165d8:	79bb      	ldrb	r3, [r7, #6]
 80165da:	1e5a      	subs	r2, r3, #1
 80165dc:	79fb      	ldrb	r3, [r7, #7]
 80165de:	496e      	ldr	r1, [pc, #440]	@ (8016798 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80165e0:	0152      	lsls	r2, r2, #5
 80165e2:	4413      	add	r3, r2
 80165e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80165e8:	8a3a      	ldrh	r2, [r7, #16]
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d902      	bls.n	80165f4 <MAP_makeCmdList_dijkstra_modoki+0x118>
 80165ee:	2302      	movs	r3, #2
 80165f0:	74fb      	strb	r3, [r7, #19]
 80165f2:	e13d      	b.n	8016870 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else   while (1);
 80165f4:	e7fe      	b.n	80165f4 <MAP_makeCmdList_dijkstra_modoki+0x118>
		}
		else if (en_staDir == EAST) {
 80165f6:	797b      	ldrb	r3, [r7, #5]
 80165f8:	2b01      	cmp	r3, #1
 80165fa:	d164      	bne.n	80166c6 <MAP_makeCmdList_dijkstra_modoki+0x1ea>
			if (((g_SysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_Cmap[uc_staY][uc_staX + 1] < us_high)) en_nowDir = EAST;
 80165fc:	79ba      	ldrb	r2, [r7, #6]
 80165fe:	79fb      	ldrb	r3, [r7, #7]
 8016600:	4966      	ldr	r1, [pc, #408]	@ (801679c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8016602:	0152      	lsls	r2, r2, #5
 8016604:	440a      	add	r2, r1
 8016606:	4413      	add	r3, r2
 8016608:	781b      	ldrb	r3, [r3, #0]
 801660a:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 801660e:	2b20      	cmp	r3, #32
 8016610:	d10d      	bne.n	801662e <MAP_makeCmdList_dijkstra_modoki+0x152>
 8016612:	79ba      	ldrb	r2, [r7, #6]
 8016614:	79fb      	ldrb	r3, [r7, #7]
 8016616:	3301      	adds	r3, #1
 8016618:	495f      	ldr	r1, [pc, #380]	@ (8016798 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801661a:	0152      	lsls	r2, r2, #5
 801661c:	4413      	add	r3, r2
 801661e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016622:	8a3a      	ldrh	r2, [r7, #16]
 8016624:	429a      	cmp	r2, r3
 8016626:	d902      	bls.n	801662e <MAP_makeCmdList_dijkstra_modoki+0x152>
 8016628:	2301      	movs	r3, #1
 801662a:	74fb      	strb	r3, [r7, #19]
 801662c:	e120      	b.n	8016870 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_Cmap[uc_staY + 1][uc_staX] < us_high)) en_nowDir = NORTH;
 801662e:	79ba      	ldrb	r2, [r7, #6]
 8016630:	79fb      	ldrb	r3, [r7, #7]
 8016632:	495a      	ldr	r1, [pc, #360]	@ (801679c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8016634:	0152      	lsls	r2, r2, #5
 8016636:	440a      	add	r2, r1
 8016638:	4413      	add	r3, r2
 801663a:	781b      	ldrb	r3, [r3, #0]
 801663c:	f003 0311 	and.w	r3, r3, #17
 8016640:	2b10      	cmp	r3, #16
 8016642:	d10d      	bne.n	8016660 <MAP_makeCmdList_dijkstra_modoki+0x184>
 8016644:	79bb      	ldrb	r3, [r7, #6]
 8016646:	1c5a      	adds	r2, r3, #1
 8016648:	79fb      	ldrb	r3, [r7, #7]
 801664a:	4953      	ldr	r1, [pc, #332]	@ (8016798 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801664c:	0152      	lsls	r2, r2, #5
 801664e:	4413      	add	r3, r2
 8016650:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016654:	8a3a      	ldrh	r2, [r7, #16]
 8016656:	429a      	cmp	r2, r3
 8016658:	d902      	bls.n	8016660 <MAP_makeCmdList_dijkstra_modoki+0x184>
 801665a:	2300      	movs	r3, #0
 801665c:	74fb      	strb	r3, [r7, #19]
 801665e:	e107      	b.n	8016870 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_Cmap[uc_staY - 1][uc_staX] < us_high)) en_nowDir = SOUTH;
 8016660:	79ba      	ldrb	r2, [r7, #6]
 8016662:	79fb      	ldrb	r3, [r7, #7]
 8016664:	494d      	ldr	r1, [pc, #308]	@ (801679c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8016666:	0152      	lsls	r2, r2, #5
 8016668:	440a      	add	r2, r1
 801666a:	4413      	add	r3, r2
 801666c:	781b      	ldrb	r3, [r3, #0]
 801666e:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8016672:	2b40      	cmp	r3, #64	@ 0x40
 8016674:	d10d      	bne.n	8016692 <MAP_makeCmdList_dijkstra_modoki+0x1b6>
 8016676:	79bb      	ldrb	r3, [r7, #6]
 8016678:	1e5a      	subs	r2, r3, #1
 801667a:	79fb      	ldrb	r3, [r7, #7]
 801667c:	4946      	ldr	r1, [pc, #280]	@ (8016798 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801667e:	0152      	lsls	r2, r2, #5
 8016680:	4413      	add	r3, r2
 8016682:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016686:	8a3a      	ldrh	r2, [r7, #16]
 8016688:	429a      	cmp	r2, r3
 801668a:	d902      	bls.n	8016692 <MAP_makeCmdList_dijkstra_modoki+0x1b6>
 801668c:	2302      	movs	r3, #2
 801668e:	74fb      	strb	r3, [r7, #19]
 8016690:	e0ee      	b.n	8016870 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_Cmap[uc_staY][uc_staX - 1] < us_high)) en_nowDir = WEST;
 8016692:	79ba      	ldrb	r2, [r7, #6]
 8016694:	79fb      	ldrb	r3, [r7, #7]
 8016696:	4941      	ldr	r1, [pc, #260]	@ (801679c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8016698:	0152      	lsls	r2, r2, #5
 801669a:	440a      	add	r2, r1
 801669c:	4413      	add	r3, r2
 801669e:	781b      	ldrb	r3, [r3, #0]
 80166a0:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 80166a4:	2b80      	cmp	r3, #128	@ 0x80
 80166a6:	d10d      	bne.n	80166c4 <MAP_makeCmdList_dijkstra_modoki+0x1e8>
 80166a8:	79ba      	ldrb	r2, [r7, #6]
 80166aa:	79fb      	ldrb	r3, [r7, #7]
 80166ac:	3b01      	subs	r3, #1
 80166ae:	493a      	ldr	r1, [pc, #232]	@ (8016798 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80166b0:	0152      	lsls	r2, r2, #5
 80166b2:	4413      	add	r3, r2
 80166b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80166b8:	8a3a      	ldrh	r2, [r7, #16]
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d902      	bls.n	80166c4 <MAP_makeCmdList_dijkstra_modoki+0x1e8>
 80166be:	2303      	movs	r3, #3
 80166c0:	74fb      	strb	r3, [r7, #19]
 80166c2:	e0d5      	b.n	8016870 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else   while (1);
 80166c4:	e7fe      	b.n	80166c4 <MAP_makeCmdList_dijkstra_modoki+0x1e8>
		}
		else if (en_staDir == SOUTH) {
 80166c6:	797b      	ldrb	r3, [r7, #5]
 80166c8:	2b02      	cmp	r3, #2
 80166ca:	d169      	bne.n	80167a0 <MAP_makeCmdList_dijkstra_modoki+0x2c4>
			if (((g_SysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_Cmap[uc_staY - 1][uc_staX] < us_high)) en_nowDir = SOUTH;
 80166cc:	79ba      	ldrb	r2, [r7, #6]
 80166ce:	79fb      	ldrb	r3, [r7, #7]
 80166d0:	4932      	ldr	r1, [pc, #200]	@ (801679c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 80166d2:	0152      	lsls	r2, r2, #5
 80166d4:	440a      	add	r2, r1
 80166d6:	4413      	add	r3, r2
 80166d8:	781b      	ldrb	r3, [r3, #0]
 80166da:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80166de:	2b40      	cmp	r3, #64	@ 0x40
 80166e0:	d10d      	bne.n	80166fe <MAP_makeCmdList_dijkstra_modoki+0x222>
 80166e2:	79bb      	ldrb	r3, [r7, #6]
 80166e4:	1e5a      	subs	r2, r3, #1
 80166e6:	79fb      	ldrb	r3, [r7, #7]
 80166e8:	492b      	ldr	r1, [pc, #172]	@ (8016798 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80166ea:	0152      	lsls	r2, r2, #5
 80166ec:	4413      	add	r3, r2
 80166ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80166f2:	8a3a      	ldrh	r2, [r7, #16]
 80166f4:	429a      	cmp	r2, r3
 80166f6:	d902      	bls.n	80166fe <MAP_makeCmdList_dijkstra_modoki+0x222>
 80166f8:	2302      	movs	r3, #2
 80166fa:	74fb      	strb	r3, [r7, #19]
 80166fc:	e0b8      	b.n	8016870 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_Cmap[uc_staY][uc_staX + 1] < us_high)) en_nowDir = EAST;
 80166fe:	79ba      	ldrb	r2, [r7, #6]
 8016700:	79fb      	ldrb	r3, [r7, #7]
 8016702:	4926      	ldr	r1, [pc, #152]	@ (801679c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8016704:	0152      	lsls	r2, r2, #5
 8016706:	440a      	add	r2, r1
 8016708:	4413      	add	r3, r2
 801670a:	781b      	ldrb	r3, [r3, #0]
 801670c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8016710:	2b20      	cmp	r3, #32
 8016712:	d10d      	bne.n	8016730 <MAP_makeCmdList_dijkstra_modoki+0x254>
 8016714:	79ba      	ldrb	r2, [r7, #6]
 8016716:	79fb      	ldrb	r3, [r7, #7]
 8016718:	3301      	adds	r3, #1
 801671a:	491f      	ldr	r1, [pc, #124]	@ (8016798 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801671c:	0152      	lsls	r2, r2, #5
 801671e:	4413      	add	r3, r2
 8016720:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016724:	8a3a      	ldrh	r2, [r7, #16]
 8016726:	429a      	cmp	r2, r3
 8016728:	d902      	bls.n	8016730 <MAP_makeCmdList_dijkstra_modoki+0x254>
 801672a:	2301      	movs	r3, #1
 801672c:	74fb      	strb	r3, [r7, #19]
 801672e:	e09f      	b.n	8016870 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_Cmap[uc_staY][uc_staX - 1] < us_high)) en_nowDir = WEST;
 8016730:	79ba      	ldrb	r2, [r7, #6]
 8016732:	79fb      	ldrb	r3, [r7, #7]
 8016734:	4919      	ldr	r1, [pc, #100]	@ (801679c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8016736:	0152      	lsls	r2, r2, #5
 8016738:	440a      	add	r2, r1
 801673a:	4413      	add	r3, r2
 801673c:	781b      	ldrb	r3, [r3, #0]
 801673e:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 8016742:	2b80      	cmp	r3, #128	@ 0x80
 8016744:	d10d      	bne.n	8016762 <MAP_makeCmdList_dijkstra_modoki+0x286>
 8016746:	79ba      	ldrb	r2, [r7, #6]
 8016748:	79fb      	ldrb	r3, [r7, #7]
 801674a:	3b01      	subs	r3, #1
 801674c:	4912      	ldr	r1, [pc, #72]	@ (8016798 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801674e:	0152      	lsls	r2, r2, #5
 8016750:	4413      	add	r3, r2
 8016752:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016756:	8a3a      	ldrh	r2, [r7, #16]
 8016758:	429a      	cmp	r2, r3
 801675a:	d902      	bls.n	8016762 <MAP_makeCmdList_dijkstra_modoki+0x286>
 801675c:	2303      	movs	r3, #3
 801675e:	74fb      	strb	r3, [r7, #19]
 8016760:	e086      	b.n	8016870 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_Cmap[uc_staY + 1][uc_staX] < us_high)) en_nowDir = NORTH;
 8016762:	79ba      	ldrb	r2, [r7, #6]
 8016764:	79fb      	ldrb	r3, [r7, #7]
 8016766:	490d      	ldr	r1, [pc, #52]	@ (801679c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8016768:	0152      	lsls	r2, r2, #5
 801676a:	440a      	add	r2, r1
 801676c:	4413      	add	r3, r2
 801676e:	781b      	ldrb	r3, [r3, #0]
 8016770:	f003 0311 	and.w	r3, r3, #17
 8016774:	2b10      	cmp	r3, #16
 8016776:	d10d      	bne.n	8016794 <MAP_makeCmdList_dijkstra_modoki+0x2b8>
 8016778:	79bb      	ldrb	r3, [r7, #6]
 801677a:	1c5a      	adds	r2, r3, #1
 801677c:	79fb      	ldrb	r3, [r7, #7]
 801677e:	4906      	ldr	r1, [pc, #24]	@ (8016798 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 8016780:	0152      	lsls	r2, r2, #5
 8016782:	4413      	add	r3, r2
 8016784:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016788:	8a3a      	ldrh	r2, [r7, #16]
 801678a:	429a      	cmp	r2, r3
 801678c:	d902      	bls.n	8016794 <MAP_makeCmdList_dijkstra_modoki+0x2b8>
 801678e:	2300      	movs	r3, #0
 8016790:	74fb      	strb	r3, [r7, #19]
 8016792:	e06d      	b.n	8016870 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else   while (1);
 8016794:	e7fe      	b.n	8016794 <MAP_makeCmdList_dijkstra_modoki+0x2b8>
 8016796:	bf00      	nop
 8016798:	2001ada0 	.word	0x2001ada0
 801679c:	2001b5a0 	.word	0x2001b5a0
		}
		else if (en_staDir == WEST) {
 80167a0:	797b      	ldrb	r3, [r7, #5]
 80167a2:	2b03      	cmp	r3, #3
 80167a4:	d164      	bne.n	8016870 <MAP_makeCmdList_dijkstra_modoki+0x394>
			if (((g_SysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_Cmap[uc_staY][uc_staX - 1] < us_high)) en_nowDir = WEST;
 80167a6:	79ba      	ldrb	r2, [r7, #6]
 80167a8:	79fb      	ldrb	r3, [r7, #7]
 80167aa:	4974      	ldr	r1, [pc, #464]	@ (801697c <MAP_makeCmdList_dijkstra_modoki+0x4a0>)
 80167ac:	0152      	lsls	r2, r2, #5
 80167ae:	440a      	add	r2, r1
 80167b0:	4413      	add	r3, r2
 80167b2:	781b      	ldrb	r3, [r3, #0]
 80167b4:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 80167b8:	2b80      	cmp	r3, #128	@ 0x80
 80167ba:	d10d      	bne.n	80167d8 <MAP_makeCmdList_dijkstra_modoki+0x2fc>
 80167bc:	79ba      	ldrb	r2, [r7, #6]
 80167be:	79fb      	ldrb	r3, [r7, #7]
 80167c0:	3b01      	subs	r3, #1
 80167c2:	496f      	ldr	r1, [pc, #444]	@ (8016980 <MAP_makeCmdList_dijkstra_modoki+0x4a4>)
 80167c4:	0152      	lsls	r2, r2, #5
 80167c6:	4413      	add	r3, r2
 80167c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80167cc:	8a3a      	ldrh	r2, [r7, #16]
 80167ce:	429a      	cmp	r2, r3
 80167d0:	d902      	bls.n	80167d8 <MAP_makeCmdList_dijkstra_modoki+0x2fc>
 80167d2:	2303      	movs	r3, #3
 80167d4:	74fb      	strb	r3, [r7, #19]
 80167d6:	e04b      	b.n	8016870 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_Cmap[uc_staY + 1][uc_staX] < us_high)) en_nowDir = NORTH;
 80167d8:	79ba      	ldrb	r2, [r7, #6]
 80167da:	79fb      	ldrb	r3, [r7, #7]
 80167dc:	4967      	ldr	r1, [pc, #412]	@ (801697c <MAP_makeCmdList_dijkstra_modoki+0x4a0>)
 80167de:	0152      	lsls	r2, r2, #5
 80167e0:	440a      	add	r2, r1
 80167e2:	4413      	add	r3, r2
 80167e4:	781b      	ldrb	r3, [r3, #0]
 80167e6:	f003 0311 	and.w	r3, r3, #17
 80167ea:	2b10      	cmp	r3, #16
 80167ec:	d10d      	bne.n	801680a <MAP_makeCmdList_dijkstra_modoki+0x32e>
 80167ee:	79bb      	ldrb	r3, [r7, #6]
 80167f0:	1c5a      	adds	r2, r3, #1
 80167f2:	79fb      	ldrb	r3, [r7, #7]
 80167f4:	4962      	ldr	r1, [pc, #392]	@ (8016980 <MAP_makeCmdList_dijkstra_modoki+0x4a4>)
 80167f6:	0152      	lsls	r2, r2, #5
 80167f8:	4413      	add	r3, r2
 80167fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80167fe:	8a3a      	ldrh	r2, [r7, #16]
 8016800:	429a      	cmp	r2, r3
 8016802:	d902      	bls.n	801680a <MAP_makeCmdList_dijkstra_modoki+0x32e>
 8016804:	2300      	movs	r3, #0
 8016806:	74fb      	strb	r3, [r7, #19]
 8016808:	e032      	b.n	8016870 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_Cmap[uc_staY - 1][uc_staX] < us_high)) en_nowDir = SOUTH;
 801680a:	79ba      	ldrb	r2, [r7, #6]
 801680c:	79fb      	ldrb	r3, [r7, #7]
 801680e:	495b      	ldr	r1, [pc, #364]	@ (801697c <MAP_makeCmdList_dijkstra_modoki+0x4a0>)
 8016810:	0152      	lsls	r2, r2, #5
 8016812:	440a      	add	r2, r1
 8016814:	4413      	add	r3, r2
 8016816:	781b      	ldrb	r3, [r3, #0]
 8016818:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801681c:	2b40      	cmp	r3, #64	@ 0x40
 801681e:	d10d      	bne.n	801683c <MAP_makeCmdList_dijkstra_modoki+0x360>
 8016820:	79bb      	ldrb	r3, [r7, #6]
 8016822:	1e5a      	subs	r2, r3, #1
 8016824:	79fb      	ldrb	r3, [r7, #7]
 8016826:	4956      	ldr	r1, [pc, #344]	@ (8016980 <MAP_makeCmdList_dijkstra_modoki+0x4a4>)
 8016828:	0152      	lsls	r2, r2, #5
 801682a:	4413      	add	r3, r2
 801682c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016830:	8a3a      	ldrh	r2, [r7, #16]
 8016832:	429a      	cmp	r2, r3
 8016834:	d902      	bls.n	801683c <MAP_makeCmdList_dijkstra_modoki+0x360>
 8016836:	2302      	movs	r3, #2
 8016838:	74fb      	strb	r3, [r7, #19]
 801683a:	e019      	b.n	8016870 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_Cmap[uc_staY][uc_staX + 1] < us_high)) en_nowDir = EAST;
 801683c:	79ba      	ldrb	r2, [r7, #6]
 801683e:	79fb      	ldrb	r3, [r7, #7]
 8016840:	494e      	ldr	r1, [pc, #312]	@ (801697c <MAP_makeCmdList_dijkstra_modoki+0x4a0>)
 8016842:	0152      	lsls	r2, r2, #5
 8016844:	440a      	add	r2, r1
 8016846:	4413      	add	r3, r2
 8016848:	781b      	ldrb	r3, [r3, #0]
 801684a:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 801684e:	2b20      	cmp	r3, #32
 8016850:	d10d      	bne.n	801686e <MAP_makeCmdList_dijkstra_modoki+0x392>
 8016852:	79ba      	ldrb	r2, [r7, #6]
 8016854:	79fb      	ldrb	r3, [r7, #7]
 8016856:	3301      	adds	r3, #1
 8016858:	4949      	ldr	r1, [pc, #292]	@ (8016980 <MAP_makeCmdList_dijkstra_modoki+0x4a4>)
 801685a:	0152      	lsls	r2, r2, #5
 801685c:	4413      	add	r3, r2
 801685e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016862:	8a3a      	ldrh	r2, [r7, #16]
 8016864:	429a      	cmp	r2, r3
 8016866:	d902      	bls.n	801686e <MAP_makeCmdList_dijkstra_modoki+0x392>
 8016868:	2301      	movs	r3, #1
 801686a:	74fb      	strb	r3, [r7, #19]
 801686c:	e000      	b.n	8016870 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else   while (1);
 801686e:	e7fe      	b.n	801686e <MAP_makeCmdList_dijkstra_modoki+0x392>
		}

		en_tempDir = (enMAP_HEAD_DIR)((en_nowDir - en_staDir) & (enMAP_HEAD_DIR)3);		// 方向更新
 8016870:	7cfa      	ldrb	r2, [r7, #19]
 8016872:	797b      	ldrb	r3, [r7, #5]
 8016874:	1ad3      	subs	r3, r2, r3
 8016876:	b2db      	uxtb	r3, r3
 8016878:	f003 0303 	and.w	r3, r3, #3
 801687c:	73fb      	strb	r3, [r7, #15]
		en_staDir = en_nowDir;
 801687e:	7cfb      	ldrb	r3, [r7, #19]
 8016880:	717b      	strb	r3, [r7, #5]

		if (en_tempDir == NORTH) {
 8016882:	7bfb      	ldrb	r3, [r7, #15]
 8016884:	2b00      	cmp	r3, #0
 8016886:	d103      	bne.n	8016890 <MAP_makeCmdList_dijkstra_modoki+0x3b4>
			uc_goStep = uc_goStep + 2;
 8016888:	7dfb      	ldrb	r3, [r7, #23]
 801688a:	3302      	adds	r3, #2
 801688c:	75fb      	strb	r3, [r7, #23]
 801688e:	e037      	b.n	8016900 <MAP_makeCmdList_dijkstra_modoki+0x424>
		}
		else if (en_tempDir == EAST) {
 8016890:	7bfb      	ldrb	r3, [r7, #15]
 8016892:	2b01      	cmp	r3, #1
 8016894:	d110      	bne.n	80168b8 <MAP_makeCmdList_dijkstra_modoki+0x3dc>
			dcom[us_pt] = uc_goStep;
 8016896:	8abb      	ldrh	r3, [r7, #20]
 8016898:	493a      	ldr	r1, [pc, #232]	@ (8016984 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 801689a:	7dfa      	ldrb	r2, [r7, #23]
 801689c:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R90;
 801689e:	8abb      	ldrh	r3, [r7, #20]
 80168a0:	3301      	adds	r3, #1
 80168a2:	82bb      	strh	r3, [r7, #20]
 80168a4:	8abb      	ldrh	r3, [r7, #20]
 80168a6:	4a37      	ldr	r2, [pc, #220]	@ (8016984 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 80168a8:	2148      	movs	r1, #72	@ 0x48
 80168aa:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 80168ac:	2302      	movs	r3, #2
 80168ae:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 80168b0:	8abb      	ldrh	r3, [r7, #20]
 80168b2:	3301      	adds	r3, #1
 80168b4:	82bb      	strh	r3, [r7, #20]
 80168b6:	e023      	b.n	8016900 <MAP_makeCmdList_dijkstra_modoki+0x424>
		}
		else if (en_tempDir == WEST) {
 80168b8:	7bfb      	ldrb	r3, [r7, #15]
 80168ba:	2b03      	cmp	r3, #3
 80168bc:	d110      	bne.n	80168e0 <MAP_makeCmdList_dijkstra_modoki+0x404>
			dcom[us_pt] = uc_goStep;
 80168be:	8abb      	ldrh	r3, [r7, #20]
 80168c0:	4930      	ldr	r1, [pc, #192]	@ (8016984 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 80168c2:	7dfa      	ldrb	r2, [r7, #23]
 80168c4:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = L90;
 80168c6:	8abb      	ldrh	r3, [r7, #20]
 80168c8:	3301      	adds	r3, #1
 80168ca:	82bb      	strh	r3, [r7, #20]
 80168cc:	8abb      	ldrh	r3, [r7, #20]
 80168ce:	4a2d      	ldr	r2, [pc, #180]	@ (8016984 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 80168d0:	2149      	movs	r1, #73	@ 0x49
 80168d2:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 80168d4:	2302      	movs	r3, #2
 80168d6:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 80168d8:	8abb      	ldrh	r3, [r7, #20]
 80168da:	3301      	adds	r3, #1
 80168dc:	82bb      	strh	r3, [r7, #20]
 80168de:	e00f      	b.n	8016900 <MAP_makeCmdList_dijkstra_modoki+0x424>
		}
		else {
			dcom[us_pt] = uc_goStep;
 80168e0:	8abb      	ldrh	r3, [r7, #20]
 80168e2:	4928      	ldr	r1, [pc, #160]	@ (8016984 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 80168e4:	7dfa      	ldrb	r2, [r7, #23]
 80168e6:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R180;
 80168e8:	8abb      	ldrh	r3, [r7, #20]
 80168ea:	3301      	adds	r3, #1
 80168ec:	82bb      	strh	r3, [r7, #20]
 80168ee:	8abb      	ldrh	r3, [r7, #20]
 80168f0:	4a24      	ldr	r2, [pc, #144]	@ (8016984 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 80168f2:	214a      	movs	r1, #74	@ 0x4a
 80168f4:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 80168f6:	2302      	movs	r3, #2
 80168f8:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 80168fa:	8abb      	ldrh	r3, [r7, #20]
 80168fc:	3301      	adds	r3, #1
 80168fe:	82bb      	strh	r3, [r7, #20]
		}

		if (en_nowDir == NORTH) uc_staY = uc_staY + 1;
 8016900:	7cfb      	ldrb	r3, [r7, #19]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d103      	bne.n	801690e <MAP_makeCmdList_dijkstra_modoki+0x432>
 8016906:	79bb      	ldrb	r3, [r7, #6]
 8016908:	3301      	adds	r3, #1
 801690a:	71bb      	strb	r3, [r7, #6]
 801690c:	e013      	b.n	8016936 <MAP_makeCmdList_dijkstra_modoki+0x45a>
		else if (en_nowDir == EAST) uc_staX = uc_staX + 1;
 801690e:	7cfb      	ldrb	r3, [r7, #19]
 8016910:	2b01      	cmp	r3, #1
 8016912:	d103      	bne.n	801691c <MAP_makeCmdList_dijkstra_modoki+0x440>
 8016914:	79fb      	ldrb	r3, [r7, #7]
 8016916:	3301      	adds	r3, #1
 8016918:	71fb      	strb	r3, [r7, #7]
 801691a:	e00c      	b.n	8016936 <MAP_makeCmdList_dijkstra_modoki+0x45a>
		else if (en_nowDir == SOUTH) uc_staY = uc_staY - 1;
 801691c:	7cfb      	ldrb	r3, [r7, #19]
 801691e:	2b02      	cmp	r3, #2
 8016920:	d103      	bne.n	801692a <MAP_makeCmdList_dijkstra_modoki+0x44e>
 8016922:	79bb      	ldrb	r3, [r7, #6]
 8016924:	3b01      	subs	r3, #1
 8016926:	71bb      	strb	r3, [r7, #6]
 8016928:	e005      	b.n	8016936 <MAP_makeCmdList_dijkstra_modoki+0x45a>
		else if (en_nowDir == WEST) uc_staX = uc_staX - 1;
 801692a:	7cfb      	ldrb	r3, [r7, #19]
 801692c:	2b03      	cmp	r3, #3
 801692e:	d102      	bne.n	8016936 <MAP_makeCmdList_dijkstra_modoki+0x45a>
 8016930:	79fb      	ldrb	r3, [r7, #7]
 8016932:	3b01      	subs	r3, #1
 8016934:	71fb      	strb	r3, [r7, #7]

		en_staDir = en_nowDir;
 8016936:	7cfb      	ldrb	r3, [r7, #19]
 8016938:	717b      	strb	r3, [r7, #5]
		us_high = us_Cmap[uc_staY][uc_staX];
 801693a:	e5e2      	b.n	8016502 <MAP_makeCmdList_dijkstra_modoki+0x26>
			break;
 801693c:	bf00      	nop
*/
//		if (us_Cmap[uc_staY][uc_staX] == 0) break;
	}

	/* 超地信旋回用のコマンドリスト作成 */
	dcom[us_pt] = uc_goStep;
 801693e:	8abb      	ldrh	r3, [r7, #20]
 8016940:	4910      	ldr	r1, [pc, #64]	@ (8016984 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8016942:	7dfa      	ldrb	r2, [r7, #23]
 8016944:	54ca      	strb	r2, [r1, r3]
	dcom[++us_pt] = STOP;
 8016946:	8abb      	ldrh	r3, [r7, #20]
 8016948:	3301      	adds	r3, #1
 801694a:	82bb      	strh	r3, [r7, #20]
 801694c:	8abb      	ldrh	r3, [r7, #20]
 801694e:	4a0d      	ldr	r2, [pc, #52]	@ (8016984 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8016950:	2100      	movs	r1, #0
 8016952:	54d1      	strb	r1, [r2, r3]
	dcom[++us_pt] = CEND;
 8016954:	8abb      	ldrh	r3, [r7, #20]
 8016956:	3301      	adds	r3, #1
 8016958:	82bb      	strh	r3, [r7, #20]
 801695a:	8abb      	ldrh	r3, [r7, #20]
 801695c:	4a09      	ldr	r2, [pc, #36]	@ (8016984 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 801695e:	21fa      	movs	r1, #250	@ 0xfa
 8016960:	54d1      	strb	r1, [r2, r3]
	us_totalCmd = us_pt + 1;			// コマンド総数
 8016962:	8abb      	ldrh	r3, [r7, #20]
 8016964:	3301      	adds	r3, #1
 8016966:	b29a      	uxth	r2, r3
 8016968:	4b07      	ldr	r3, [pc, #28]	@ (8016988 <MAP_makeCmdList_dijkstra_modoki+0x4ac>)
 801696a:	801a      	strh	r2, [r3, #0]


	/* 最終的に向いている方向 */
	*en_endDir = en_staDir;
 801696c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801696e:	797a      	ldrb	r2, [r7, #5]
 8016970:	701a      	strb	r2, [r3, #0]

}
 8016972:	bf00      	nop
 8016974:	3718      	adds	r7, #24
 8016976:	46bd      	mov	sp, r7
 8016978:	bc90      	pop	{r4, r7}
 801697a:	4770      	bx	lr
 801697c:	2001b5a0 	.word	0x2001b5a0
 8016980:	2001ada0 	.word	0x2001ada0
 8016984:	20017c48 	.word	0x20017c48
 8016988:	2001ac48 	.word	0x2001ac48

0801698c <FLASH_Lock>:
{
 801698c:	b480      	push	{r7}
 801698e:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8016990:	4b05      	ldr	r3, [pc, #20]	@ (80169a8 <FLASH_Lock+0x1c>)
 8016992:	695b      	ldr	r3, [r3, #20]
 8016994:	4a04      	ldr	r2, [pc, #16]	@ (80169a8 <FLASH_Lock+0x1c>)
 8016996:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801699a:	6153      	str	r3, [r2, #20]
}
 801699c:	bf00      	nop
 801699e:	46bd      	mov	sp, r7
 80169a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a4:	4770      	bx	lr
 80169a6:	bf00      	nop
 80169a8:	40022000 	.word	0x40022000

080169ac <FLASH_Unlock>:
{
 80169ac:	b480      	push	{r7}
 80169ae:	af00      	add	r7, sp, #0
	FLASH->KEYR = FLASH_KEY1;
 80169b0:	4b05      	ldr	r3, [pc, #20]	@ (80169c8 <FLASH_Unlock+0x1c>)
 80169b2:	4a06      	ldr	r2, [pc, #24]	@ (80169cc <FLASH_Unlock+0x20>)
 80169b4:	609a      	str	r2, [r3, #8]
	FLASH->KEYR = FLASH_KEY2;
 80169b6:	4b04      	ldr	r3, [pc, #16]	@ (80169c8 <FLASH_Unlock+0x1c>)
 80169b8:	4a05      	ldr	r2, [pc, #20]	@ (80169d0 <FLASH_Unlock+0x24>)
 80169ba:	609a      	str	r2, [r3, #8]
}
 80169bc:	bf00      	nop
 80169be:	46bd      	mov	sp, r7
 80169c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c4:	4770      	bx	lr
 80169c6:	bf00      	nop
 80169c8:	40022000 	.word	0x40022000
 80169cc:	45670123 	.word	0x45670123
 80169d0:	cdef89ab 	.word	0xcdef89ab

080169d4 <Map_Write>:


#include "search/map_flash.h"

void Map_Write(void)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b082      	sub	sp, #8
 80169d8:	af00      	add	r7, sp, #0
	uint64_t *map_add;
	map_add = (uint64_t *)g_SysMap;
 80169da:	4b06      	ldr	r3, [pc, #24]	@ (80169f4 <Map_Write+0x20>)
 80169dc:	607b      	str	r3, [r7, #4]
	
	//DataFlashイレース
//    FLASH_Erase(0x7F);  //reg127
	//マップデータをDataFlashに書き込む
    FLASH_WriteData(0x7F,(uint32_t)sta_add_127, map_add, 32*32);
 80169de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80169e2:	687a      	ldr	r2, [r7, #4]
 80169e4:	4904      	ldr	r1, [pc, #16]	@ (80169f8 <Map_Write+0x24>)
 80169e6:	207f      	movs	r0, #127	@ 0x7f
 80169e8:	f7eb f8b4 	bl	8001b54 <FLASH_WriteData>
}
 80169ec:	bf00      	nop
 80169ee:	3708      	adds	r7, #8
 80169f0:	46bd      	mov	sp, r7
 80169f2:	bd80      	pop	{r7, pc}
 80169f4:	2001b5a0 	.word	0x2001b5a0
 80169f8:	0807f800 	.word	0x0807f800

080169fc <Map_Copy>:

void Map_Copy(void)
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b084      	sub	sp, #16
 8016a00:	af00      	add	r7, sp, #0
    uint64_t *map_add;
    map_add = (uint64_t *)&g_SysMap;
 8016a02:	4b0f      	ldr	r3, [pc, #60]	@ (8016a40 <Map_Copy+0x44>)
 8016a04:	60fb      	str	r3, [r7, #12]
    uint32_t read_address = sta_add_127;
 8016a06:	4b0f      	ldr	r3, [pc, #60]	@ (8016a44 <Map_Copy+0x48>)
 8016a08:	60bb      	str	r3, [r7, #8]

    for (uint16_t i = 0;i<MAP_X_SIZE*MAP_Y_SIZE;i += 8){
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	80fb      	strh	r3, [r7, #6]
 8016a0e:	e00d      	b.n	8016a2c <Map_Copy+0x30>
	    FLASH_ReadData(read_address, map_add, 8);
 8016a10:	2208      	movs	r2, #8
 8016a12:	68f9      	ldr	r1, [r7, #12]
 8016a14:	68b8      	ldr	r0, [r7, #8]
 8016a16:	f7eb f8c3 	bl	8001ba0 <FLASH_ReadData>
	    read_address +=8;
 8016a1a:	68bb      	ldr	r3, [r7, #8]
 8016a1c:	3308      	adds	r3, #8
 8016a1e:	60bb      	str	r3, [r7, #8]
	    map_add++;
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	3308      	adds	r3, #8
 8016a24:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0;i<MAP_X_SIZE*MAP_Y_SIZE;i += 8){
 8016a26:	88fb      	ldrh	r3, [r7, #6]
 8016a28:	3308      	adds	r3, #8
 8016a2a:	80fb      	strh	r3, [r7, #6]
 8016a2c:	88fb      	ldrh	r3, [r7, #6]
 8016a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016a32:	d3ed      	bcc.n	8016a10 <Map_Copy+0x14>
    }
}
 8016a34:	bf00      	nop
 8016a36:	bf00      	nop
 8016a38:	3710      	adds	r7, #16
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	bd80      	pop	{r7, pc}
 8016a3e:	bf00      	nop
 8016a40:	2001b5a0 	.word	0x2001b5a0
 8016a44:	0807f800 	.word	0x0807f800

08016a48 <Map_Erase>:

void Map_Erase(void)
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	af00      	add	r7, sp, #0
	FLASH_Unlock();
 8016a4c:	f7ff ffae 	bl	80169ac <FLASH_Unlock>
	FLASH_Erase(0x7F);
 8016a50:	207f      	movs	r0, #127	@ 0x7f
 8016a52:	f7eb f813 	bl	8001a7c <FLASH_Erase>
	FLASH_Lock();
 8016a56:	f7ff ff99 	bl	801698c <FLASH_Lock>
}
 8016a5a:	bf00      	nop
 8016a5c:	bd80      	pop	{r7, pc}
	...

08016a60 <Is_Known_Accel>:
uint8_t		g_MapDirection[MAP_Y_SIZE][MAP_X_SIZE];			///< 迷路情報


bool			SearchFlag;

bool Is_Known_Accel(void){
 8016a60:	b480      	push	{r7}
 8016a62:	af00      	add	r7, sp, #0
	return st_Known.bl_known;
 8016a64:	4b03      	ldr	r3, [pc, #12]	@ (8016a74 <Is_Known_Accel+0x14>)
 8016a66:	785b      	ldrb	r3, [r3, #1]
}
 8016a68:	4618      	mov	r0, r3
 8016a6a:	46bd      	mov	sp, r7
 8016a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a70:	4770      	bx	lr
 8016a72:	bf00      	nop
 8016a74:	2001ad98 	.word	0x2001ad98

08016a78 <MAP_init>:

void MAP_init( void )
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	af00      	add	r7, sp, #0
//	uint8_t uc_dummy[ MAP_Y_SIZE ][ MAP_X_SIZE ];			// 迷路データ

	/* 座標、向き、迷路情報を初期化 */
	en_Head		= NORTH;
 8016a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8016aac <MAP_init+0x34>)
 8016a7e:	2200      	movs	r2, #0
 8016a80:	701a      	strb	r2, [r3, #0]
	mx		= 0;
 8016a82:	4b0b      	ldr	r3, [pc, #44]	@ (8016ab0 <MAP_init+0x38>)
 8016a84:	2200      	movs	r2, #0
 8016a86:	701a      	strb	r2, [r3, #0]
	my		= 0;
 8016a88:	4b0a      	ldr	r3, [pc, #40]	@ (8016ab4 <MAP_init+0x3c>)
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	701a      	strb	r2, [r3, #0]
	MAP_clearMap();
 8016a8e:	f000 f919 	bl	8016cc4 <MAP_clearMap>

	front_wall_miss = FALSE;
 8016a92:	4b09      	ldr	r3, [pc, #36]	@ (8016ab8 <MAP_init+0x40>)
 8016a94:	2200      	movs	r2, #0
 8016a96:	701a      	strb	r2, [r3, #0]
	
	/* 走行用のパラメータ */
	f_MoveBackDist = 0;
 8016a98:	4b08      	ldr	r3, [pc, #32]	@ (8016abc <MAP_init+0x44>)
 8016a9a:	f04f 0200 	mov.w	r2, #0
 8016a9e:	601a      	str	r2, [r3, #0]
	uc_SlaCnt = 0;
 8016aa0:	4b07      	ldr	r3, [pc, #28]	@ (8016ac0 <MAP_init+0x48>)
 8016aa2:	2200      	movs	r2, #0
 8016aa4:	701a      	strb	r2, [r3, #0]

}
 8016aa6:	bf00      	nop
 8016aa8:	bd80      	pop	{r7, pc}
 8016aaa:	bf00      	nop
 8016aac:	2001ad8a 	.word	0x2001ad8a
 8016ab0:	2001ad8c 	.word	0x2001ad8c
 8016ab4:	2001ad8b 	.word	0x2001ad8b
 8016ab8:	2001ad9b 	.word	0x2001ad9b
 8016abc:	2001ad90 	.word	0x2001ad90
 8016ac0:	2001ad94 	.word	0x2001ad94

08016ac4 <MAP_Goal_init>:

void MAP_Goal_init( void )
{
 8016ac4:	b480      	push	{r7}
 8016ac6:	af00      	add	r7, sp, #0
	GOAL_MAP_X = GOAL_MAP_X_DEF;
 8016ac8:	4b05      	ldr	r3, [pc, #20]	@ (8016ae0 <MAP_Goal_init+0x1c>)
 8016aca:	2208      	movs	r2, #8
 8016acc:	701a      	strb	r2, [r3, #0]
	GOAL_MAP_Y = GOAL_MAP_Y_DEF;
 8016ace:	4b05      	ldr	r3, [pc, #20]	@ (8016ae4 <MAP_Goal_init+0x20>)
 8016ad0:	2207      	movs	r2, #7
 8016ad2:	701a      	strb	r2, [r3, #0]
}
 8016ad4:	bf00      	nop
 8016ad6:	46bd      	mov	sp, r7
 8016ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016adc:	4770      	bx	lr
 8016ade:	bf00      	nop
 8016ae0:	2001ad95 	.word	0x2001ad95
 8016ae4:	2001ad96 	.word	0x2001ad96

08016ae8 <MAP_setPos>:

//	Storage_Clear( sizeof(g_SysMap), ADR_MAP );			// データセーブ
}

void MAP_setPos( uint8_t uc_x, uint8_t uc_y, enMAP_HEAD_DIR en_dir )
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b082      	sub	sp, #8
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	4603      	mov	r3, r0
 8016af0:	71fb      	strb	r3, [r7, #7]
 8016af2:	460b      	mov	r3, r1
 8016af4:	71bb      	strb	r3, [r7, #6]
 8016af6:	4613      	mov	r3, r2
 8016af8:	717b      	strb	r3, [r7, #5]
	mx		= uc_x;
 8016afa:	4a09      	ldr	r2, [pc, #36]	@ (8016b20 <MAP_setPos+0x38>)
 8016afc:	79fb      	ldrb	r3, [r7, #7]
 8016afe:	7013      	strb	r3, [r2, #0]
	my		= uc_y;
 8016b00:	4a08      	ldr	r2, [pc, #32]	@ (8016b24 <MAP_setPos+0x3c>)
 8016b02:	79bb      	ldrb	r3, [r7, #6]
 8016b04:	7013      	strb	r3, [r2, #0]
	en_Head		= en_dir;
 8016b06:	4a08      	ldr	r2, [pc, #32]	@ (8016b28 <MAP_setPos+0x40>)
 8016b08:	797b      	ldrb	r3, [r7, #5]
 8016b0a:	7013      	strb	r3, [r2, #0]
	
	MAP_setCmdPos( uc_x, uc_y, en_dir );
 8016b0c:	797a      	ldrb	r2, [r7, #5]
 8016b0e:	79b9      	ldrb	r1, [r7, #6]
 8016b10:	79fb      	ldrb	r3, [r7, #7]
 8016b12:	4618      	mov	r0, r3
 8016b14:	f7fd fada 	bl	80140cc <MAP_setCmdPos>

}
 8016b18:	bf00      	nop
 8016b1a:	3708      	adds	r7, #8
 8016b1c:	46bd      	mov	sp, r7
 8016b1e:	bd80      	pop	{r7, pc}
 8016b20:	2001ad8c 	.word	0x2001ad8c
 8016b24:	2001ad8b 	.word	0x2001ad8b
 8016b28:	2001ad8a 	.word	0x2001ad8a

08016b2c <MAP_showLog>:

void MAP_showLog( void )
{
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	b082      	sub	sp, #8
 8016b30:	af00      	add	r7, sp, #0
	uint8_t	c_data;
	
	/* ---------- */
	/*  通常迷路  */
	/* ---------- */
	printf("\n\r  /* ---------- */   ");
 8016b32:	4857      	ldr	r0, [pc, #348]	@ (8016c90 <MAP_showLog+0x164>)
 8016b34:	f007 f88e 	bl	801dc54 <iprintf>
	printf("\n\r  /*  通常迷路  */   ");
 8016b38:	4856      	ldr	r0, [pc, #344]	@ (8016c94 <MAP_showLog+0x168>)
 8016b3a:	f007 f88b 	bl	801dc54 <iprintf>
	printf("\n\r  /* ---------- */   ");
 8016b3e:	4854      	ldr	r0, [pc, #336]	@ (8016c90 <MAP_showLog+0x164>)
 8016b40:	f007 f888 	bl	801dc54 <iprintf>

	printf("\n\r     ");
 8016b44:	4854      	ldr	r0, [pc, #336]	@ (8016c98 <MAP_showLog+0x16c>)
 8016b46:	f007 f885 	bl	801dc54 <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	80fb      	strh	r3, [r7, #6]
 8016b4e:	e008      	b.n	8016b62 <MAP_showLog+0x36>
		printf("._");
 8016b50:	4852      	ldr	r0, [pc, #328]	@ (8016c9c <MAP_showLog+0x170>)
 8016b52:	f007 f87f 	bl	801dc54 <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 8016b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016b5a:	b29b      	uxth	r3, r3
 8016b5c:	3301      	adds	r3, #1
 8016b5e:	b29b      	uxth	r3, r3
 8016b60:	80fb      	strh	r3, [r7, #6]
 8016b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016b66:	2b1f      	cmp	r3, #31
 8016b68:	ddf2      	ble.n	8016b50 <MAP_showLog+0x24>
	}
	printf(".\n\r");
 8016b6a:	484d      	ldr	r0, [pc, #308]	@ (8016ca0 <MAP_showLog+0x174>)
 8016b6c:	f007 f872 	bl	801dc54 <iprintf>
	
	for( y=MAP_Y_SIZE-1; y>-1; y-- ){
 8016b70:	231f      	movs	r3, #31
 8016b72:	80bb      	strh	r3, [r7, #4]
 8016b74:	e05f      	b.n	8016c36 <MAP_showLog+0x10a>
		
		printf("   %2d",y);
 8016b76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8016b7a:	4619      	mov	r1, r3
 8016b7c:	4849      	ldr	r0, [pc, #292]	@ (8016ca4 <MAP_showLog+0x178>)
 8016b7e:	f007 f869 	bl	801dc54 <iprintf>
		for( x=0; x<MAP_X_SIZE; x++){
 8016b82:	2300      	movs	r3, #0
 8016b84:	80fb      	strh	r3, [r7, #6]
 8016b86:	e027      	b.n	8016bd8 <MAP_showLog+0xac>
			c_data = (uint8_t)g_SysMap[y][x];
 8016b88:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8016b8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016b90:	4945      	ldr	r1, [pc, #276]	@ (8016ca8 <MAP_showLog+0x17c>)
 8016b92:	0152      	lsls	r2, r2, #5
 8016b94:	440a      	add	r2, r1
 8016b96:	4413      	add	r3, r2
 8016b98:	781b      	ldrb	r3, [r3, #0]
 8016b9a:	70fb      	strb	r3, [r7, #3]
			if ( ( c_data & 0x08 ) == 0 ){
 8016b9c:	78fb      	ldrb	r3, [r7, #3]
 8016b9e:	f003 0308 	and.w	r3, r3, #8
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d103      	bne.n	8016bae <MAP_showLog+0x82>
				printf(".");
 8016ba6:	202e      	movs	r0, #46	@ 0x2e
 8016ba8:	f007 f866 	bl	801dc78 <putchar>
 8016bac:	e002      	b.n	8016bb4 <MAP_showLog+0x88>
			}
			else{
				printf("|");
 8016bae:	207c      	movs	r0, #124	@ 0x7c
 8016bb0:	f007 f862 	bl	801dc78 <putchar>
			}
			if ( ( c_data & 0x04 ) == 0 ){
 8016bb4:	78fb      	ldrb	r3, [r7, #3]
 8016bb6:	f003 0304 	and.w	r3, r3, #4
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d103      	bne.n	8016bc6 <MAP_showLog+0x9a>
				printf(" ");
 8016bbe:	2020      	movs	r0, #32
 8016bc0:	f007 f85a 	bl	801dc78 <putchar>
 8016bc4:	e002      	b.n	8016bcc <MAP_showLog+0xa0>
			}
			else{
				printf("_");
 8016bc6:	205f      	movs	r0, #95	@ 0x5f
 8016bc8:	f007 f856 	bl	801dc78 <putchar>
		for( x=0; x<MAP_X_SIZE; x++){
 8016bcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016bd0:	b29b      	uxth	r3, r3
 8016bd2:	3301      	adds	r3, #1
 8016bd4:	b29b      	uxth	r3, r3
 8016bd6:	80fb      	strh	r3, [r7, #6]
 8016bd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016bdc:	2b1f      	cmp	r3, #31
 8016bde:	ddd3      	ble.n	8016b88 <MAP_showLog+0x5c>
			}
		}
		printf("|   ");
 8016be0:	4832      	ldr	r0, [pc, #200]	@ (8016cac <MAP_showLog+0x180>)
 8016be2:	f007 f837 	bl	801dc54 <iprintf>
		
		for( x=0; x<MAP_X_SIZE; x++ ){
 8016be6:	2300      	movs	r3, #0
 8016be8:	80fb      	strh	r3, [r7, #6]
 8016bea:	e017      	b.n	8016c1c <MAP_showLog+0xf0>
			c_data = g_SysMap[y][x];
 8016bec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8016bf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016bf4:	492c      	ldr	r1, [pc, #176]	@ (8016ca8 <MAP_showLog+0x17c>)
 8016bf6:	0152      	lsls	r2, r2, #5
 8016bf8:	440a      	add	r2, r1
 8016bfa:	4413      	add	r3, r2
 8016bfc:	781b      	ldrb	r3, [r3, #0]
 8016bfe:	70fb      	strb	r3, [r7, #3]
			c_data = c_data >> 4;
 8016c00:	78fb      	ldrb	r3, [r7, #3]
 8016c02:	091b      	lsrs	r3, r3, #4
 8016c04:	70fb      	strb	r3, [r7, #3]
			printf("%x", c_data);
 8016c06:	78fb      	ldrb	r3, [r7, #3]
 8016c08:	4619      	mov	r1, r3
 8016c0a:	4829      	ldr	r0, [pc, #164]	@ (8016cb0 <MAP_showLog+0x184>)
 8016c0c:	f007 f822 	bl	801dc54 <iprintf>
		for( x=0; x<MAP_X_SIZE; x++ ){
 8016c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016c14:	b29b      	uxth	r3, r3
 8016c16:	3301      	adds	r3, #1
 8016c18:	b29b      	uxth	r3, r3
 8016c1a:	80fb      	strh	r3, [r7, #6]
 8016c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016c20:	2b1f      	cmp	r3, #31
 8016c22:	dde3      	ble.n	8016bec <MAP_showLog+0xc0>
		}
		
		printf("\n\r");
 8016c24:	4823      	ldr	r0, [pc, #140]	@ (8016cb4 <MAP_showLog+0x188>)
 8016c26:	f007 f815 	bl	801dc54 <iprintf>
	for( y=MAP_Y_SIZE-1; y>-1; y-- ){
 8016c2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8016c2e:	b29b      	uxth	r3, r3
 8016c30:	3b01      	subs	r3, #1
 8016c32:	b29b      	uxth	r3, r3
 8016c34:	80bb      	strh	r3, [r7, #4]
 8016c36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	da9b      	bge.n	8016b76 <MAP_showLog+0x4a>
	}
	
	printf("     ");
 8016c3e:	481e      	ldr	r0, [pc, #120]	@ (8016cb8 <MAP_showLog+0x18c>)
 8016c40:	f007 f808 	bl	801dc54 <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 8016c44:	2300      	movs	r3, #0
 8016c46:	80fb      	strh	r3, [r7, #6]
 8016c48:	e017      	b.n	8016c7a <MAP_showLog+0x14e>
		printf("%2d",x%10);
 8016c4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8016c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8016cbc <MAP_showLog+0x190>)
 8016c50:	fb83 1302 	smull	r1, r3, r3, r2
 8016c54:	1099      	asrs	r1, r3, #2
 8016c56:	17d3      	asrs	r3, r2, #31
 8016c58:	1ac9      	subs	r1, r1, r3
 8016c5a:	460b      	mov	r3, r1
 8016c5c:	009b      	lsls	r3, r3, #2
 8016c5e:	440b      	add	r3, r1
 8016c60:	005b      	lsls	r3, r3, #1
 8016c62:	1ad3      	subs	r3, r2, r3
 8016c64:	b21b      	sxth	r3, r3
 8016c66:	4619      	mov	r1, r3
 8016c68:	4815      	ldr	r0, [pc, #84]	@ (8016cc0 <MAP_showLog+0x194>)
 8016c6a:	f006 fff3 	bl	801dc54 <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 8016c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016c72:	b29b      	uxth	r3, r3
 8016c74:	3301      	adds	r3, #1
 8016c76:	b29b      	uxth	r3, r3
 8016c78:	80fb      	strh	r3, [r7, #6]
 8016c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016c7e:	2b1f      	cmp	r3, #31
 8016c80:	dde3      	ble.n	8016c4a <MAP_showLog+0x11e>
	}
	printf("\n\r");
 8016c82:	480c      	ldr	r0, [pc, #48]	@ (8016cb4 <MAP_showLog+0x188>)
 8016c84:	f006 ffe6 	bl	801dc54 <iprintf>

}
 8016c88:	bf00      	nop
 8016c8a:	3708      	adds	r7, #8
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	bd80      	pop	{r7, pc}
 8016c90:	08021d14 	.word	0x08021d14
 8016c94:	08021d2c 	.word	0x08021d2c
 8016c98:	08021d48 	.word	0x08021d48
 8016c9c:	08021d50 	.word	0x08021d50
 8016ca0:	08021d54 	.word	0x08021d54
 8016ca4:	08021d58 	.word	0x08021d58
 8016ca8:	2001b5a0 	.word	0x2001b5a0
 8016cac:	08021d60 	.word	0x08021d60
 8016cb0:	08021d68 	.word	0x08021d68
 8016cb4:	08021d6c 	.word	0x08021d6c
 8016cb8:	08021d70 	.word	0x08021d70
 8016cbc:	66666667 	.word	0x66666667
 8016cc0:	08021d78 	.word	0x08021d78

08016cc4 <MAP_clearMap>:
		printf("\n\r");
	}
}

void MAP_clearMap( void )
{
 8016cc4:	b480      	push	{r7}
 8016cc6:	b083      	sub	sp, #12
 8016cc8:	af00      	add	r7, sp, #0
	uint16_t	x, y;
	uint8_t	uc_data;

	/* すべてのマップデータを未探索状態にする */
	for ( y = 0; y < MAP_Y_SIZE; y++){
 8016cca:	2300      	movs	r3, #0
 8016ccc:	80bb      	strh	r3, [r7, #4]
 8016cce:	e059      	b.n	8016d84 <MAP_clearMap+0xc0>
		for( x = 0; x < MAP_X_SIZE; x++){
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	80fb      	strh	r3, [r7, #6]
 8016cd4:	e050      	b.n	8016d78 <MAP_clearMap+0xb4>
			uc_data = 0x00;
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	70fb      	strb	r3, [r7, #3]
			if ( ( x == 0) && ( y == 0 ) ) uc_data = 0xfe;
 8016cda:	88fb      	ldrh	r3, [r7, #6]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d105      	bne.n	8016cec <MAP_clearMap+0x28>
 8016ce0:	88bb      	ldrh	r3, [r7, #4]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d102      	bne.n	8016cec <MAP_clearMap+0x28>
 8016ce6:	23fe      	movs	r3, #254	@ 0xfe
 8016ce8:	70fb      	strb	r3, [r7, #3]
 8016cea:	e03a      	b.n	8016d62 <MAP_clearMap+0x9e>
			else if ( ( x == 1 ) && ( y == 0 ) ) uc_data = 0xcc;
 8016cec:	88fb      	ldrh	r3, [r7, #6]
 8016cee:	2b01      	cmp	r3, #1
 8016cf0:	d105      	bne.n	8016cfe <MAP_clearMap+0x3a>
 8016cf2:	88bb      	ldrh	r3, [r7, #4]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d102      	bne.n	8016cfe <MAP_clearMap+0x3a>
 8016cf8:	23cc      	movs	r3, #204	@ 0xcc
 8016cfa:	70fb      	strb	r3, [r7, #3]
 8016cfc:	e031      	b.n	8016d62 <MAP_clearMap+0x9e>
			else if ( ( x == (MAP_X_SIZE-1) ) && ( y == 0 ) ) uc_data = 0x66;
 8016cfe:	88fb      	ldrh	r3, [r7, #6]
 8016d00:	2b1f      	cmp	r3, #31
 8016d02:	d105      	bne.n	8016d10 <MAP_clearMap+0x4c>
 8016d04:	88bb      	ldrh	r3, [r7, #4]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d102      	bne.n	8016d10 <MAP_clearMap+0x4c>
 8016d0a:	2366      	movs	r3, #102	@ 0x66
 8016d0c:	70fb      	strb	r3, [r7, #3]
 8016d0e:	e028      	b.n	8016d62 <MAP_clearMap+0x9e>
			else if ( ( x == 0 ) && ( y == (MAP_Y_SIZE-1) ) ) uc_data = 0x99;
 8016d10:	88fb      	ldrh	r3, [r7, #6]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d105      	bne.n	8016d22 <MAP_clearMap+0x5e>
 8016d16:	88bb      	ldrh	r3, [r7, #4]
 8016d18:	2b1f      	cmp	r3, #31
 8016d1a:	d102      	bne.n	8016d22 <MAP_clearMap+0x5e>
 8016d1c:	2399      	movs	r3, #153	@ 0x99
 8016d1e:	70fb      	strb	r3, [r7, #3]
 8016d20:	e01f      	b.n	8016d62 <MAP_clearMap+0x9e>
			else if ( ( x == (MAP_X_SIZE-1) ) && ( y == (MAP_Y_SIZE-1) ) ) uc_data = 0x33;
 8016d22:	88fb      	ldrh	r3, [r7, #6]
 8016d24:	2b1f      	cmp	r3, #31
 8016d26:	d105      	bne.n	8016d34 <MAP_clearMap+0x70>
 8016d28:	88bb      	ldrh	r3, [r7, #4]
 8016d2a:	2b1f      	cmp	r3, #31
 8016d2c:	d102      	bne.n	8016d34 <MAP_clearMap+0x70>
 8016d2e:	2333      	movs	r3, #51	@ 0x33
 8016d30:	70fb      	strb	r3, [r7, #3]
 8016d32:	e016      	b.n	8016d62 <MAP_clearMap+0x9e>
			else if ( x == 0 ) uc_data = 0x88;
 8016d34:	88fb      	ldrh	r3, [r7, #6]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d102      	bne.n	8016d40 <MAP_clearMap+0x7c>
 8016d3a:	2388      	movs	r3, #136	@ 0x88
 8016d3c:	70fb      	strb	r3, [r7, #3]
 8016d3e:	e010      	b.n	8016d62 <MAP_clearMap+0x9e>
			else if ( x == (MAP_X_SIZE-1) ) uc_data = 0x22;
 8016d40:	88fb      	ldrh	r3, [r7, #6]
 8016d42:	2b1f      	cmp	r3, #31
 8016d44:	d102      	bne.n	8016d4c <MAP_clearMap+0x88>
 8016d46:	2322      	movs	r3, #34	@ 0x22
 8016d48:	70fb      	strb	r3, [r7, #3]
 8016d4a:	e00a      	b.n	8016d62 <MAP_clearMap+0x9e>
			else if ( y == 0 ) uc_data = 0x44;
 8016d4c:	88bb      	ldrh	r3, [r7, #4]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d102      	bne.n	8016d58 <MAP_clearMap+0x94>
 8016d52:	2344      	movs	r3, #68	@ 0x44
 8016d54:	70fb      	strb	r3, [r7, #3]
 8016d56:	e004      	b.n	8016d62 <MAP_clearMap+0x9e>
			else if ( y == (MAP_Y_SIZE-1) ) uc_data = 0x11;
 8016d58:	88bb      	ldrh	r3, [r7, #4]
 8016d5a:	2b1f      	cmp	r3, #31
 8016d5c:	d101      	bne.n	8016d62 <MAP_clearMap+0x9e>
 8016d5e:	2311      	movs	r3, #17
 8016d60:	70fb      	strb	r3, [r7, #3]
			g_SysMap[y][x] = uc_data;
 8016d62:	88ba      	ldrh	r2, [r7, #4]
 8016d64:	88fb      	ldrh	r3, [r7, #6]
 8016d66:	490c      	ldr	r1, [pc, #48]	@ (8016d98 <MAP_clearMap+0xd4>)
 8016d68:	0152      	lsls	r2, r2, #5
 8016d6a:	440a      	add	r2, r1
 8016d6c:	4413      	add	r3, r2
 8016d6e:	78fa      	ldrb	r2, [r7, #3]
 8016d70:	701a      	strb	r2, [r3, #0]
		for( x = 0; x < MAP_X_SIZE; x++){
 8016d72:	88fb      	ldrh	r3, [r7, #6]
 8016d74:	3301      	adds	r3, #1
 8016d76:	80fb      	strh	r3, [r7, #6]
 8016d78:	88fb      	ldrh	r3, [r7, #6]
 8016d7a:	2b1f      	cmp	r3, #31
 8016d7c:	d9ab      	bls.n	8016cd6 <MAP_clearMap+0x12>
	for ( y = 0; y < MAP_Y_SIZE; y++){
 8016d7e:	88bb      	ldrh	r3, [r7, #4]
 8016d80:	3301      	adds	r3, #1
 8016d82:	80bb      	strh	r3, [r7, #4]
 8016d84:	88bb      	ldrh	r3, [r7, #4]
 8016d86:	2b1f      	cmp	r3, #31
 8016d88:	d9a2      	bls.n	8016cd0 <MAP_clearMap+0xc>
		}
	}

}
 8016d8a:	bf00      	nop
 8016d8c:	bf00      	nop
 8016d8e:	370c      	adds	r7, #12
 8016d90:	46bd      	mov	sp, r7
 8016d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d96:	4770      	bx	lr
 8016d98:	2001b5a0 	.word	0x2001b5a0

08016d9c <MAP_getWallData>:

uint8_t MAP_getWallData( void )
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b082      	sub	sp, #8
 8016da0:	af00      	add	r7, sp, #0
	uint8_t	 uc_wall;

//	LED_offAll();			// debug

	// センサ情報から壁情報作成
	uc_wall = 0;
 8016da2:	2300      	movs	r3, #0
 8016da4:	71fb      	strb	r3, [r7, #7]
	if( TRUE == DIST_isWall_FRONT() ){
 8016da6:	f7fc f9d1 	bl	801314c <DIST_isWall_FRONT>
 8016daa:	4603      	mov	r3, r0
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d003      	beq.n	8016db8 <MAP_getWallData+0x1c>
		uc_wall = uc_wall | 0x11;
 8016db0:	79fb      	ldrb	r3, [r7, #7]
 8016db2:	f043 0311 	orr.w	r3, r3, #17
 8016db6:	71fb      	strb	r3, [r7, #7]
//		LED_on(LED3);			// debug
//		LED_on(LED2);			// debug
	}
	if( TRUE == DIST_isWall_L_SIDE() ){
 8016db8:	f7fc f9fa 	bl	80131b0 <DIST_isWall_L_SIDE>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d003      	beq.n	8016dca <MAP_getWallData+0x2e>
//		LED_on(LED0);			// debug
		uc_wall = uc_wall | 0x88;
 8016dc2:	79fb      	ldrb	r3, [r7, #7]
 8016dc4:	f063 0377 	orn	r3, r3, #119	@ 0x77
 8016dc8:	71fb      	strb	r3, [r7, #7]
	}
	if( TRUE == DIST_isWall_R_SIDE() ){
 8016dca:	f7fc f9db 	bl	8013184 <DIST_isWall_R_SIDE>
 8016dce:	4603      	mov	r3, r0
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d003      	beq.n	8016ddc <MAP_getWallData+0x40>
//		LED_on(LED1);			// debug
		uc_wall = uc_wall | 0x22;
 8016dd4:	79fb      	ldrb	r3, [r7, #7]
 8016dd6:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 8016dda:	71fb      	strb	r3, [r7, #7]
	}
	if(DIST_getNowVal(DIST_SEN_L_SIDE)>L_SIDE_REF){
 8016ddc:	2003      	movs	r0, #3
 8016dde:	f7fb fec3 	bl	8012b68 <DIST_getNowVal>
 8016de2:	4603      	mov	r3, r0
 8016de4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8016de8:	dd02      	ble.n	8016df0 <MAP_getWallData+0x54>
		NearWall = 1;
 8016dea:	4b16      	ldr	r3, [pc, #88]	@ (8016e44 <MAP_getWallData+0xa8>)
 8016dec:	2201      	movs	r2, #1
 8016dee:	701a      	strb	r2, [r3, #0]
	}
	if(DIST_getNowVal(DIST_SEN_R_SIDE)>R_SIDE_REF){
 8016df0:	2002      	movs	r0, #2
 8016df2:	f7fb feb9 	bl	8012b68 <DIST_getNowVal>
 8016df6:	4603      	mov	r3, r0
 8016df8:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 8016dfc:	dd02      	ble.n	8016e04 <MAP_getWallData+0x68>
		NearWall = 1;
 8016dfe:	4b11      	ldr	r3, [pc, #68]	@ (8016e44 <MAP_getWallData+0xa8>)
 8016e00:	2201      	movs	r2, #1
 8016e02:	701a      	strb	r2, [r3, #0]
	}

	// マウスの進行方向にあわせてセンサデータを移動し壁データとする
	if		( en_Head == EAST ){
 8016e04:	4b10      	ldr	r3, [pc, #64]	@ (8016e48 <MAP_getWallData+0xac>)
 8016e06:	781b      	ldrb	r3, [r3, #0]
 8016e08:	2b01      	cmp	r3, #1
 8016e0a:	d103      	bne.n	8016e14 <MAP_getWallData+0x78>
		uc_wall = uc_wall >> 3;
 8016e0c:	79fb      	ldrb	r3, [r7, #7]
 8016e0e:	08db      	lsrs	r3, r3, #3
 8016e10:	71fb      	strb	r3, [r7, #7]
 8016e12:	e00e      	b.n	8016e32 <MAP_getWallData+0x96>
	}
	else if ( en_Head == SOUTH ){
 8016e14:	4b0c      	ldr	r3, [pc, #48]	@ (8016e48 <MAP_getWallData+0xac>)
 8016e16:	781b      	ldrb	r3, [r3, #0]
 8016e18:	2b02      	cmp	r3, #2
 8016e1a:	d103      	bne.n	8016e24 <MAP_getWallData+0x88>
		uc_wall = uc_wall >> 2;
 8016e1c:	79fb      	ldrb	r3, [r7, #7]
 8016e1e:	089b      	lsrs	r3, r3, #2
 8016e20:	71fb      	strb	r3, [r7, #7]
 8016e22:	e006      	b.n	8016e32 <MAP_getWallData+0x96>
	}
	else if ( en_Head == WEST ){
 8016e24:	4b08      	ldr	r3, [pc, #32]	@ (8016e48 <MAP_getWallData+0xac>)
 8016e26:	781b      	ldrb	r3, [r3, #0]
 8016e28:	2b03      	cmp	r3, #3
 8016e2a:	d102      	bne.n	8016e32 <MAP_getWallData+0x96>
		uc_wall = uc_wall >> 1;
 8016e2c:	79fb      	ldrb	r3, [r7, #7]
 8016e2e:	085b      	lsrs	r3, r3, #1
 8016e30:	71fb      	strb	r3, [r7, #7]
	}

	//	探索済みフラグを立てる
	return ( uc_wall | 0xf0 );
 8016e32:	79fb      	ldrb	r3, [r7, #7]
 8016e34:	f063 030f 	orn	r3, r3, #15
 8016e38:	b2db      	uxtb	r3, r3
}
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	3708      	adds	r7, #8
 8016e3e:	46bd      	mov	sp, r7
 8016e40:	bd80      	pop	{r7, pc}
 8016e42:	bf00      	nop
 8016e44:	2001ad9a 	.word	0x2001ad9a
 8016e48:	2001ad8a 	.word	0x2001ad8a

08016e4c <MAP_makeMapData>:

void MAP_makeMapData( void )
{
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b082      	sub	sp, #8
 8016e50:	af00      	add	r7, sp, #0
	uint8_t uc_wall;

	//	走行時の壁情報を迷路情報に書込
	if ( ( mx == 0 ) && ( my == 0 ) ){
 8016e52:	4b66      	ldr	r3, [pc, #408]	@ (8016fec <MAP_makeMapData+0x1a0>)
 8016e54:	781b      	ldrb	r3, [r3, #0]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d106      	bne.n	8016e68 <MAP_makeMapData+0x1c>
 8016e5a:	4b65      	ldr	r3, [pc, #404]	@ (8016ff0 <MAP_makeMapData+0x1a4>)
 8016e5c:	781b      	ldrb	r3, [r3, #0]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d102      	bne.n	8016e68 <MAP_makeMapData+0x1c>
		uc_wall = 0xfe;
 8016e62:	23fe      	movs	r3, #254	@ 0xfe
 8016e64:	71fb      	strb	r3, [r7, #7]
 8016e66:	e003      	b.n	8016e70 <MAP_makeMapData+0x24>
	}
	else{
		uc_wall = MAP_getWallData();
 8016e68:	f7ff ff98 	bl	8016d9c <MAP_getWallData>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	71fb      	strb	r3, [r7, #7]
	}
	g_SysMap[my][mx] = uc_wall;
 8016e70:	4b5f      	ldr	r3, [pc, #380]	@ (8016ff0 <MAP_makeMapData+0x1a4>)
 8016e72:	781b      	ldrb	r3, [r3, #0]
 8016e74:	4618      	mov	r0, r3
 8016e76:	4b5d      	ldr	r3, [pc, #372]	@ (8016fec <MAP_makeMapData+0x1a0>)
 8016e78:	781b      	ldrb	r3, [r3, #0]
 8016e7a:	4619      	mov	r1, r3
 8016e7c:	4a5d      	ldr	r2, [pc, #372]	@ (8016ff4 <MAP_makeMapData+0x1a8>)
 8016e7e:	0143      	lsls	r3, r0, #5
 8016e80:	4413      	add	r3, r2
 8016e82:	440b      	add	r3, r1
 8016e84:	79fa      	ldrb	r2, [r7, #7]
 8016e86:	701a      	strb	r2, [r3, #0]

	//	隣の区間のＭＡＰデータも更新する
	if ( mx != (MAP_X_SIZE-1) ){
 8016e88:	4b58      	ldr	r3, [pc, #352]	@ (8016fec <MAP_makeMapData+0x1a0>)
 8016e8a:	781b      	ldrb	r3, [r3, #0]
 8016e8c:	2b1f      	cmp	r3, #31
 8016e8e:	d026      	beq.n	8016ede <MAP_makeMapData+0x92>
		g_SysMap[my][mx+1] = ( g_SysMap[my][mx+1] & 0x77 ) | 0x80 | ( ( uc_wall << 2 ) & 0x08 );
 8016e90:	4b57      	ldr	r3, [pc, #348]	@ (8016ff0 <MAP_makeMapData+0x1a4>)
 8016e92:	781b      	ldrb	r3, [r3, #0]
 8016e94:	461a      	mov	r2, r3
 8016e96:	4b55      	ldr	r3, [pc, #340]	@ (8016fec <MAP_makeMapData+0x1a0>)
 8016e98:	781b      	ldrb	r3, [r3, #0]
 8016e9a:	3301      	adds	r3, #1
 8016e9c:	4955      	ldr	r1, [pc, #340]	@ (8016ff4 <MAP_makeMapData+0x1a8>)
 8016e9e:	0152      	lsls	r2, r2, #5
 8016ea0:	440a      	add	r2, r1
 8016ea2:	4413      	add	r3, r2
 8016ea4:	781b      	ldrb	r3, [r3, #0]
 8016ea6:	b25b      	sxtb	r3, r3
 8016ea8:	f003 0377 	and.w	r3, r3, #119	@ 0x77
 8016eac:	b25b      	sxtb	r3, r3
 8016eae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016eb2:	b25a      	sxtb	r2, r3
 8016eb4:	79fb      	ldrb	r3, [r7, #7]
 8016eb6:	009b      	lsls	r3, r3, #2
 8016eb8:	b25b      	sxtb	r3, r3
 8016eba:	f003 0308 	and.w	r3, r3, #8
 8016ebe:	b25b      	sxtb	r3, r3
 8016ec0:	4313      	orrs	r3, r2
 8016ec2:	b259      	sxtb	r1, r3
 8016ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8016ff0 <MAP_makeMapData+0x1a4>)
 8016ec6:	781b      	ldrb	r3, [r3, #0]
 8016ec8:	461a      	mov	r2, r3
 8016eca:	4b48      	ldr	r3, [pc, #288]	@ (8016fec <MAP_makeMapData+0x1a0>)
 8016ecc:	781b      	ldrb	r3, [r3, #0]
 8016ece:	3301      	adds	r3, #1
 8016ed0:	b2c8      	uxtb	r0, r1
 8016ed2:	4948      	ldr	r1, [pc, #288]	@ (8016ff4 <MAP_makeMapData+0x1a8>)
 8016ed4:	0152      	lsls	r2, r2, #5
 8016ed6:	440a      	add	r2, r1
 8016ed8:	4413      	add	r3, r2
 8016eda:	4602      	mov	r2, r0
 8016edc:	701a      	strb	r2, [r3, #0]
	}
	if ( mx !=  0 ){
 8016ede:	4b43      	ldr	r3, [pc, #268]	@ (8016fec <MAP_makeMapData+0x1a0>)
 8016ee0:	781b      	ldrb	r3, [r3, #0]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d027      	beq.n	8016f36 <MAP_makeMapData+0xea>
		g_SysMap[my][mx-1] = ( g_SysMap[my][mx-1] & 0xdd ) | 0x20 | ( ( uc_wall >> 2 ) & 0x02 );
 8016ee6:	4b42      	ldr	r3, [pc, #264]	@ (8016ff0 <MAP_makeMapData+0x1a4>)
 8016ee8:	781b      	ldrb	r3, [r3, #0]
 8016eea:	461a      	mov	r2, r3
 8016eec:	4b3f      	ldr	r3, [pc, #252]	@ (8016fec <MAP_makeMapData+0x1a0>)
 8016eee:	781b      	ldrb	r3, [r3, #0]
 8016ef0:	3b01      	subs	r3, #1
 8016ef2:	4940      	ldr	r1, [pc, #256]	@ (8016ff4 <MAP_makeMapData+0x1a8>)
 8016ef4:	0152      	lsls	r2, r2, #5
 8016ef6:	440a      	add	r2, r1
 8016ef8:	4413      	add	r3, r2
 8016efa:	781b      	ldrb	r3, [r3, #0]
 8016efc:	b25b      	sxtb	r3, r3
 8016efe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8016f02:	b25b      	sxtb	r3, r3
 8016f04:	f043 0320 	orr.w	r3, r3, #32
 8016f08:	b25a      	sxtb	r2, r3
 8016f0a:	79fb      	ldrb	r3, [r7, #7]
 8016f0c:	089b      	lsrs	r3, r3, #2
 8016f0e:	b2db      	uxtb	r3, r3
 8016f10:	b25b      	sxtb	r3, r3
 8016f12:	f003 0302 	and.w	r3, r3, #2
 8016f16:	b25b      	sxtb	r3, r3
 8016f18:	4313      	orrs	r3, r2
 8016f1a:	b259      	sxtb	r1, r3
 8016f1c:	4b34      	ldr	r3, [pc, #208]	@ (8016ff0 <MAP_makeMapData+0x1a4>)
 8016f1e:	781b      	ldrb	r3, [r3, #0]
 8016f20:	461a      	mov	r2, r3
 8016f22:	4b32      	ldr	r3, [pc, #200]	@ (8016fec <MAP_makeMapData+0x1a0>)
 8016f24:	781b      	ldrb	r3, [r3, #0]
 8016f26:	3b01      	subs	r3, #1
 8016f28:	b2c8      	uxtb	r0, r1
 8016f2a:	4932      	ldr	r1, [pc, #200]	@ (8016ff4 <MAP_makeMapData+0x1a8>)
 8016f2c:	0152      	lsls	r2, r2, #5
 8016f2e:	440a      	add	r2, r1
 8016f30:	4413      	add	r3, r2
 8016f32:	4602      	mov	r2, r0
 8016f34:	701a      	strb	r2, [r3, #0]
	}
	if ( my != (MAP_Y_SIZE-1) ){
 8016f36:	4b2e      	ldr	r3, [pc, #184]	@ (8016ff0 <MAP_makeMapData+0x1a4>)
 8016f38:	781b      	ldrb	r3, [r3, #0]
 8016f3a:	2b1f      	cmp	r3, #31
 8016f3c:	d026      	beq.n	8016f8c <MAP_makeMapData+0x140>
		g_SysMap[my+1][mx] = ( g_SysMap[my+1][mx] & 0xbb ) | 0x40 | ( ( uc_wall << 2 ) & 0x04 );
 8016f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8016ff0 <MAP_makeMapData+0x1a4>)
 8016f40:	781b      	ldrb	r3, [r3, #0]
 8016f42:	3301      	adds	r3, #1
 8016f44:	4a29      	ldr	r2, [pc, #164]	@ (8016fec <MAP_makeMapData+0x1a0>)
 8016f46:	7812      	ldrb	r2, [r2, #0]
 8016f48:	4611      	mov	r1, r2
 8016f4a:	4a2a      	ldr	r2, [pc, #168]	@ (8016ff4 <MAP_makeMapData+0x1a8>)
 8016f4c:	015b      	lsls	r3, r3, #5
 8016f4e:	4413      	add	r3, r2
 8016f50:	440b      	add	r3, r1
 8016f52:	781b      	ldrb	r3, [r3, #0]
 8016f54:	b25b      	sxtb	r3, r3
 8016f56:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8016f5a:	b25b      	sxtb	r3, r3
 8016f5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f60:	b25a      	sxtb	r2, r3
 8016f62:	79fb      	ldrb	r3, [r7, #7]
 8016f64:	009b      	lsls	r3, r3, #2
 8016f66:	b25b      	sxtb	r3, r3
 8016f68:	f003 0304 	and.w	r3, r3, #4
 8016f6c:	b25b      	sxtb	r3, r3
 8016f6e:	4313      	orrs	r3, r2
 8016f70:	b259      	sxtb	r1, r3
 8016f72:	4b1f      	ldr	r3, [pc, #124]	@ (8016ff0 <MAP_makeMapData+0x1a4>)
 8016f74:	781b      	ldrb	r3, [r3, #0]
 8016f76:	3301      	adds	r3, #1
 8016f78:	4a1c      	ldr	r2, [pc, #112]	@ (8016fec <MAP_makeMapData+0x1a0>)
 8016f7a:	7812      	ldrb	r2, [r2, #0]
 8016f7c:	4610      	mov	r0, r2
 8016f7e:	b2c9      	uxtb	r1, r1
 8016f80:	4a1c      	ldr	r2, [pc, #112]	@ (8016ff4 <MAP_makeMapData+0x1a8>)
 8016f82:	015b      	lsls	r3, r3, #5
 8016f84:	4413      	add	r3, r2
 8016f86:	4403      	add	r3, r0
 8016f88:	460a      	mov	r2, r1
 8016f8a:	701a      	strb	r2, [r3, #0]
	}
	if ( my !=  0 ){
 8016f8c:	4b18      	ldr	r3, [pc, #96]	@ (8016ff0 <MAP_makeMapData+0x1a4>)
 8016f8e:	781b      	ldrb	r3, [r3, #0]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d027      	beq.n	8016fe4 <MAP_makeMapData+0x198>
		g_SysMap[my-1][mx] = ( g_SysMap[my-1][mx] & 0xee ) | 0x10 | ( ( uc_wall >> 2 ) & 0x01 );
 8016f94:	4b16      	ldr	r3, [pc, #88]	@ (8016ff0 <MAP_makeMapData+0x1a4>)
 8016f96:	781b      	ldrb	r3, [r3, #0]
 8016f98:	3b01      	subs	r3, #1
 8016f9a:	4a14      	ldr	r2, [pc, #80]	@ (8016fec <MAP_makeMapData+0x1a0>)
 8016f9c:	7812      	ldrb	r2, [r2, #0]
 8016f9e:	4611      	mov	r1, r2
 8016fa0:	4a14      	ldr	r2, [pc, #80]	@ (8016ff4 <MAP_makeMapData+0x1a8>)
 8016fa2:	015b      	lsls	r3, r3, #5
 8016fa4:	4413      	add	r3, r2
 8016fa6:	440b      	add	r3, r1
 8016fa8:	781b      	ldrb	r3, [r3, #0]
 8016faa:	b25b      	sxtb	r3, r3
 8016fac:	f023 0311 	bic.w	r3, r3, #17
 8016fb0:	b25b      	sxtb	r3, r3
 8016fb2:	f043 0310 	orr.w	r3, r3, #16
 8016fb6:	b25a      	sxtb	r2, r3
 8016fb8:	79fb      	ldrb	r3, [r7, #7]
 8016fba:	089b      	lsrs	r3, r3, #2
 8016fbc:	b2db      	uxtb	r3, r3
 8016fbe:	b25b      	sxtb	r3, r3
 8016fc0:	f003 0301 	and.w	r3, r3, #1
 8016fc4:	b25b      	sxtb	r3, r3
 8016fc6:	4313      	orrs	r3, r2
 8016fc8:	b259      	sxtb	r1, r3
 8016fca:	4b09      	ldr	r3, [pc, #36]	@ (8016ff0 <MAP_makeMapData+0x1a4>)
 8016fcc:	781b      	ldrb	r3, [r3, #0]
 8016fce:	3b01      	subs	r3, #1
 8016fd0:	4a06      	ldr	r2, [pc, #24]	@ (8016fec <MAP_makeMapData+0x1a0>)
 8016fd2:	7812      	ldrb	r2, [r2, #0]
 8016fd4:	4610      	mov	r0, r2
 8016fd6:	b2c9      	uxtb	r1, r1
 8016fd8:	4a06      	ldr	r2, [pc, #24]	@ (8016ff4 <MAP_makeMapData+0x1a8>)
 8016fda:	015b      	lsls	r3, r3, #5
 8016fdc:	4413      	add	r3, r2
 8016fde:	4403      	add	r3, r0
 8016fe0:	460a      	mov	r2, r1
 8016fe2:	701a      	strb	r2, [r3, #0]
	}

}
 8016fe4:	bf00      	nop
 8016fe6:	3708      	adds	r7, #8
 8016fe8:	46bd      	mov	sp, r7
 8016fea:	bd80      	pop	{r7, pc}
 8016fec:	2001ad8c 	.word	0x2001ad8c
 8016ff0:	2001ad8b 	.word	0x2001ad8b
 8016ff4:	2001b5a0 	.word	0x2001b5a0

08016ff8 <MAP_get_refPos_WallData>:

uint8_t MAP_get_refPos_WallData( void )
{
 8016ff8:	b580      	push	{r7, lr}
 8016ffa:	b082      	sub	sp, #8
 8016ffc:	af00      	add	r7, sp, #0
	uint8_t	 uc_wall;

	// センサ情報から壁情報作成
	uc_wall = 0;
 8016ffe:	2300      	movs	r3, #0
 8017000:	71fb      	strb	r3, [r7, #7]
	if( TRUE == DIST_isWall_FRONT() ){
 8017002:	f7fc f8a3 	bl	801314c <DIST_isWall_FRONT>
 8017006:	4603      	mov	r3, r0
 8017008:	2b00      	cmp	r3, #0
 801700a:	d003      	beq.n	8017014 <MAP_get_refPos_WallData+0x1c>
		uc_wall = uc_wall | 0x11;
 801700c:	79fb      	ldrb	r3, [r7, #7]
 801700e:	f043 0311 	orr.w	r3, r3, #17
 8017012:	71fb      	strb	r3, [r7, #7]
	}
	MOT_turn(MOT_R90);
 8017014:	2000      	movs	r0, #0
 8017016:	f7f8 fd6f 	bl	800faf8 <MOT_turn>
	if( TRUE == DIST_isWall_FRONT() ){
 801701a:	f7fc f897 	bl	801314c <DIST_isWall_FRONT>
 801701e:	4603      	mov	r3, r0
 8017020:	2b00      	cmp	r3, #0
 8017022:	d003      	beq.n	801702c <MAP_get_refPos_WallData+0x34>
		uc_wall = uc_wall | 0x22;
 8017024:	79fb      	ldrb	r3, [r7, #7]
 8017026:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 801702a:	71fb      	strb	r3, [r7, #7]
	}
	MOT_turn(MOT_R90);
 801702c:	2000      	movs	r0, #0
 801702e:	f7f8 fd63 	bl	800faf8 <MOT_turn>
	if( TRUE == DIST_isWall_FRONT() ){
 8017032:	f7fc f88b 	bl	801314c <DIST_isWall_FRONT>
 8017036:	4603      	mov	r3, r0
 8017038:	2b00      	cmp	r3, #0
 801703a:	d003      	beq.n	8017044 <MAP_get_refPos_WallData+0x4c>
		uc_wall = uc_wall | 0x44;
 801703c:	79fb      	ldrb	r3, [r7, #7]
 801703e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8017042:	71fb      	strb	r3, [r7, #7]
	}
	MOT_turn(MOT_R90);
 8017044:	2000      	movs	r0, #0
 8017046:	f7f8 fd57 	bl	800faf8 <MOT_turn>
	if( TRUE == DIST_isWall_FRONT() ){
 801704a:	f7fc f87f 	bl	801314c <DIST_isWall_FRONT>
 801704e:	4603      	mov	r3, r0
 8017050:	2b00      	cmp	r3, #0
 8017052:	d003      	beq.n	801705c <MAP_get_refPos_WallData+0x64>
		uc_wall = uc_wall | 0x88;
 8017054:	79fb      	ldrb	r3, [r7, #7]
 8017056:	f063 0377 	orn	r3, r3, #119	@ 0x77
 801705a:	71fb      	strb	r3, [r7, #7]
	}
	MOT_turn(MOT_R90);
 801705c:	2000      	movs	r0, #0
 801705e:	f7f8 fd4b 	bl	800faf8 <MOT_turn>

	// マウスの進行方向にあわせてセンサデータを移動し壁データとする
	if		( en_Head == EAST ){
 8017062:	4b0f      	ldr	r3, [pc, #60]	@ (80170a0 <MAP_get_refPos_WallData+0xa8>)
 8017064:	781b      	ldrb	r3, [r3, #0]
 8017066:	2b01      	cmp	r3, #1
 8017068:	d103      	bne.n	8017072 <MAP_get_refPos_WallData+0x7a>
		uc_wall = uc_wall >> 3;
 801706a:	79fb      	ldrb	r3, [r7, #7]
 801706c:	08db      	lsrs	r3, r3, #3
 801706e:	71fb      	strb	r3, [r7, #7]
 8017070:	e00e      	b.n	8017090 <MAP_get_refPos_WallData+0x98>
	}
	else if ( en_Head == SOUTH ){
 8017072:	4b0b      	ldr	r3, [pc, #44]	@ (80170a0 <MAP_get_refPos_WallData+0xa8>)
 8017074:	781b      	ldrb	r3, [r3, #0]
 8017076:	2b02      	cmp	r3, #2
 8017078:	d103      	bne.n	8017082 <MAP_get_refPos_WallData+0x8a>
		uc_wall = uc_wall >> 2;
 801707a:	79fb      	ldrb	r3, [r7, #7]
 801707c:	089b      	lsrs	r3, r3, #2
 801707e:	71fb      	strb	r3, [r7, #7]
 8017080:	e006      	b.n	8017090 <MAP_get_refPos_WallData+0x98>
	}
	else if ( en_Head == WEST ){
 8017082:	4b07      	ldr	r3, [pc, #28]	@ (80170a0 <MAP_get_refPos_WallData+0xa8>)
 8017084:	781b      	ldrb	r3, [r3, #0]
 8017086:	2b03      	cmp	r3, #3
 8017088:	d102      	bne.n	8017090 <MAP_get_refPos_WallData+0x98>
		uc_wall = uc_wall >> 1;
 801708a:	79fb      	ldrb	r3, [r7, #7]
 801708c:	085b      	lsrs	r3, r3, #1
 801708e:	71fb      	strb	r3, [r7, #7]
	}

	//	探索済みフラグを立てる
	return ( uc_wall | 0xf0 );
 8017090:	79fb      	ldrb	r3, [r7, #7]
 8017092:	f063 030f 	orn	r3, r3, #15
 8017096:	b2db      	uxtb	r3, r3
}
 8017098:	4618      	mov	r0, r3
 801709a:	3708      	adds	r7, #8
 801709c:	46bd      	mov	sp, r7
 801709e:	bd80      	pop	{r7, pc}
 80170a0:	2001ad8a 	.word	0x2001ad8a

080170a4 <MAP_make_refPos_MapData>:

void MAP_make_refPos_MapData(enMAP_HEAD_DIR en_head)
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b084      	sub	sp, #16
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	4603      	mov	r3, r0
 80170ac:	71fb      	strb	r3, [r7, #7]
	uint8_t uc_wall;

	//	走行時の壁情報を迷路情報に書込	
	uc_wall = MAP_get_refPos_WallData();
 80170ae:	f7ff ffa3 	bl	8016ff8 <MAP_get_refPos_WallData>
 80170b2:	4603      	mov	r3, r0
 80170b4:	73fb      	strb	r3, [r7, #15]
	
	g_SysMap[my][mx] = uc_wall;
 80170b6:	4b5f      	ldr	r3, [pc, #380]	@ (8017234 <MAP_make_refPos_MapData+0x190>)
 80170b8:	781b      	ldrb	r3, [r3, #0]
 80170ba:	4618      	mov	r0, r3
 80170bc:	4b5e      	ldr	r3, [pc, #376]	@ (8017238 <MAP_make_refPos_MapData+0x194>)
 80170be:	781b      	ldrb	r3, [r3, #0]
 80170c0:	4619      	mov	r1, r3
 80170c2:	4a5e      	ldr	r2, [pc, #376]	@ (801723c <MAP_make_refPos_MapData+0x198>)
 80170c4:	0143      	lsls	r3, r0, #5
 80170c6:	4413      	add	r3, r2
 80170c8:	440b      	add	r3, r1
 80170ca:	7bfa      	ldrb	r2, [r7, #15]
 80170cc:	701a      	strb	r2, [r3, #0]

	//	隣の区間のＭＡＰデータも更新する
	if ( mx != (MAP_X_SIZE-1) ){
 80170ce:	4b5a      	ldr	r3, [pc, #360]	@ (8017238 <MAP_make_refPos_MapData+0x194>)
 80170d0:	781b      	ldrb	r3, [r3, #0]
 80170d2:	2b1f      	cmp	r3, #31
 80170d4:	d026      	beq.n	8017124 <MAP_make_refPos_MapData+0x80>
		g_SysMap[my][mx+1] = ( g_SysMap[my][mx+1] & 0x77 ) | 0x80 | ( ( uc_wall << 2 ) & 0x08 );
 80170d6:	4b57      	ldr	r3, [pc, #348]	@ (8017234 <MAP_make_refPos_MapData+0x190>)
 80170d8:	781b      	ldrb	r3, [r3, #0]
 80170da:	461a      	mov	r2, r3
 80170dc:	4b56      	ldr	r3, [pc, #344]	@ (8017238 <MAP_make_refPos_MapData+0x194>)
 80170de:	781b      	ldrb	r3, [r3, #0]
 80170e0:	3301      	adds	r3, #1
 80170e2:	4956      	ldr	r1, [pc, #344]	@ (801723c <MAP_make_refPos_MapData+0x198>)
 80170e4:	0152      	lsls	r2, r2, #5
 80170e6:	440a      	add	r2, r1
 80170e8:	4413      	add	r3, r2
 80170ea:	781b      	ldrb	r3, [r3, #0]
 80170ec:	b25b      	sxtb	r3, r3
 80170ee:	f003 0377 	and.w	r3, r3, #119	@ 0x77
 80170f2:	b25b      	sxtb	r3, r3
 80170f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80170f8:	b25a      	sxtb	r2, r3
 80170fa:	7bfb      	ldrb	r3, [r7, #15]
 80170fc:	009b      	lsls	r3, r3, #2
 80170fe:	b25b      	sxtb	r3, r3
 8017100:	f003 0308 	and.w	r3, r3, #8
 8017104:	b25b      	sxtb	r3, r3
 8017106:	4313      	orrs	r3, r2
 8017108:	b259      	sxtb	r1, r3
 801710a:	4b4a      	ldr	r3, [pc, #296]	@ (8017234 <MAP_make_refPos_MapData+0x190>)
 801710c:	781b      	ldrb	r3, [r3, #0]
 801710e:	461a      	mov	r2, r3
 8017110:	4b49      	ldr	r3, [pc, #292]	@ (8017238 <MAP_make_refPos_MapData+0x194>)
 8017112:	781b      	ldrb	r3, [r3, #0]
 8017114:	3301      	adds	r3, #1
 8017116:	b2c8      	uxtb	r0, r1
 8017118:	4948      	ldr	r1, [pc, #288]	@ (801723c <MAP_make_refPos_MapData+0x198>)
 801711a:	0152      	lsls	r2, r2, #5
 801711c:	440a      	add	r2, r1
 801711e:	4413      	add	r3, r2
 8017120:	4602      	mov	r2, r0
 8017122:	701a      	strb	r2, [r3, #0]
	}
	if ( mx !=  0 ){
 8017124:	4b44      	ldr	r3, [pc, #272]	@ (8017238 <MAP_make_refPos_MapData+0x194>)
 8017126:	781b      	ldrb	r3, [r3, #0]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d027      	beq.n	801717c <MAP_make_refPos_MapData+0xd8>
		g_SysMap[my][mx-1] = ( g_SysMap[my][mx-1] & 0xdd ) | 0x20 | ( ( uc_wall >> 2 ) & 0x02 );
 801712c:	4b41      	ldr	r3, [pc, #260]	@ (8017234 <MAP_make_refPos_MapData+0x190>)
 801712e:	781b      	ldrb	r3, [r3, #0]
 8017130:	461a      	mov	r2, r3
 8017132:	4b41      	ldr	r3, [pc, #260]	@ (8017238 <MAP_make_refPos_MapData+0x194>)
 8017134:	781b      	ldrb	r3, [r3, #0]
 8017136:	3b01      	subs	r3, #1
 8017138:	4940      	ldr	r1, [pc, #256]	@ (801723c <MAP_make_refPos_MapData+0x198>)
 801713a:	0152      	lsls	r2, r2, #5
 801713c:	440a      	add	r2, r1
 801713e:	4413      	add	r3, r2
 8017140:	781b      	ldrb	r3, [r3, #0]
 8017142:	b25b      	sxtb	r3, r3
 8017144:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8017148:	b25b      	sxtb	r3, r3
 801714a:	f043 0320 	orr.w	r3, r3, #32
 801714e:	b25a      	sxtb	r2, r3
 8017150:	7bfb      	ldrb	r3, [r7, #15]
 8017152:	089b      	lsrs	r3, r3, #2
 8017154:	b2db      	uxtb	r3, r3
 8017156:	b25b      	sxtb	r3, r3
 8017158:	f003 0302 	and.w	r3, r3, #2
 801715c:	b25b      	sxtb	r3, r3
 801715e:	4313      	orrs	r3, r2
 8017160:	b259      	sxtb	r1, r3
 8017162:	4b34      	ldr	r3, [pc, #208]	@ (8017234 <MAP_make_refPos_MapData+0x190>)
 8017164:	781b      	ldrb	r3, [r3, #0]
 8017166:	461a      	mov	r2, r3
 8017168:	4b33      	ldr	r3, [pc, #204]	@ (8017238 <MAP_make_refPos_MapData+0x194>)
 801716a:	781b      	ldrb	r3, [r3, #0]
 801716c:	3b01      	subs	r3, #1
 801716e:	b2c8      	uxtb	r0, r1
 8017170:	4932      	ldr	r1, [pc, #200]	@ (801723c <MAP_make_refPos_MapData+0x198>)
 8017172:	0152      	lsls	r2, r2, #5
 8017174:	440a      	add	r2, r1
 8017176:	4413      	add	r3, r2
 8017178:	4602      	mov	r2, r0
 801717a:	701a      	strb	r2, [r3, #0]
	}
	if ( my != (MAP_Y_SIZE-1) ){
 801717c:	4b2d      	ldr	r3, [pc, #180]	@ (8017234 <MAP_make_refPos_MapData+0x190>)
 801717e:	781b      	ldrb	r3, [r3, #0]
 8017180:	2b1f      	cmp	r3, #31
 8017182:	d026      	beq.n	80171d2 <MAP_make_refPos_MapData+0x12e>
		g_SysMap[my+1][mx] = ( g_SysMap[my+1][mx] & 0xbb ) | 0x40 | ( ( uc_wall << 2 ) & 0x04 );
 8017184:	4b2b      	ldr	r3, [pc, #172]	@ (8017234 <MAP_make_refPos_MapData+0x190>)
 8017186:	781b      	ldrb	r3, [r3, #0]
 8017188:	3301      	adds	r3, #1
 801718a:	4a2b      	ldr	r2, [pc, #172]	@ (8017238 <MAP_make_refPos_MapData+0x194>)
 801718c:	7812      	ldrb	r2, [r2, #0]
 801718e:	4611      	mov	r1, r2
 8017190:	4a2a      	ldr	r2, [pc, #168]	@ (801723c <MAP_make_refPos_MapData+0x198>)
 8017192:	015b      	lsls	r3, r3, #5
 8017194:	4413      	add	r3, r2
 8017196:	440b      	add	r3, r1
 8017198:	781b      	ldrb	r3, [r3, #0]
 801719a:	b25b      	sxtb	r3, r3
 801719c:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80171a0:	b25b      	sxtb	r3, r3
 80171a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80171a6:	b25a      	sxtb	r2, r3
 80171a8:	7bfb      	ldrb	r3, [r7, #15]
 80171aa:	009b      	lsls	r3, r3, #2
 80171ac:	b25b      	sxtb	r3, r3
 80171ae:	f003 0304 	and.w	r3, r3, #4
 80171b2:	b25b      	sxtb	r3, r3
 80171b4:	4313      	orrs	r3, r2
 80171b6:	b259      	sxtb	r1, r3
 80171b8:	4b1e      	ldr	r3, [pc, #120]	@ (8017234 <MAP_make_refPos_MapData+0x190>)
 80171ba:	781b      	ldrb	r3, [r3, #0]
 80171bc:	3301      	adds	r3, #1
 80171be:	4a1e      	ldr	r2, [pc, #120]	@ (8017238 <MAP_make_refPos_MapData+0x194>)
 80171c0:	7812      	ldrb	r2, [r2, #0]
 80171c2:	4610      	mov	r0, r2
 80171c4:	b2c9      	uxtb	r1, r1
 80171c6:	4a1d      	ldr	r2, [pc, #116]	@ (801723c <MAP_make_refPos_MapData+0x198>)
 80171c8:	015b      	lsls	r3, r3, #5
 80171ca:	4413      	add	r3, r2
 80171cc:	4403      	add	r3, r0
 80171ce:	460a      	mov	r2, r1
 80171d0:	701a      	strb	r2, [r3, #0]
	}
	if ( my !=  0 ){
 80171d2:	4b18      	ldr	r3, [pc, #96]	@ (8017234 <MAP_make_refPos_MapData+0x190>)
 80171d4:	781b      	ldrb	r3, [r3, #0]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d027      	beq.n	801722a <MAP_make_refPos_MapData+0x186>
		g_SysMap[my-1][mx] = ( g_SysMap[my-1][mx] & 0xee ) | 0x10 | ( ( uc_wall >> 2 ) & 0x01 );
 80171da:	4b16      	ldr	r3, [pc, #88]	@ (8017234 <MAP_make_refPos_MapData+0x190>)
 80171dc:	781b      	ldrb	r3, [r3, #0]
 80171de:	3b01      	subs	r3, #1
 80171e0:	4a15      	ldr	r2, [pc, #84]	@ (8017238 <MAP_make_refPos_MapData+0x194>)
 80171e2:	7812      	ldrb	r2, [r2, #0]
 80171e4:	4611      	mov	r1, r2
 80171e6:	4a15      	ldr	r2, [pc, #84]	@ (801723c <MAP_make_refPos_MapData+0x198>)
 80171e8:	015b      	lsls	r3, r3, #5
 80171ea:	4413      	add	r3, r2
 80171ec:	440b      	add	r3, r1
 80171ee:	781b      	ldrb	r3, [r3, #0]
 80171f0:	b25b      	sxtb	r3, r3
 80171f2:	f023 0311 	bic.w	r3, r3, #17
 80171f6:	b25b      	sxtb	r3, r3
 80171f8:	f043 0310 	orr.w	r3, r3, #16
 80171fc:	b25a      	sxtb	r2, r3
 80171fe:	7bfb      	ldrb	r3, [r7, #15]
 8017200:	089b      	lsrs	r3, r3, #2
 8017202:	b2db      	uxtb	r3, r3
 8017204:	b25b      	sxtb	r3, r3
 8017206:	f003 0301 	and.w	r3, r3, #1
 801720a:	b25b      	sxtb	r3, r3
 801720c:	4313      	orrs	r3, r2
 801720e:	b259      	sxtb	r1, r3
 8017210:	4b08      	ldr	r3, [pc, #32]	@ (8017234 <MAP_make_refPos_MapData+0x190>)
 8017212:	781b      	ldrb	r3, [r3, #0]
 8017214:	3b01      	subs	r3, #1
 8017216:	4a08      	ldr	r2, [pc, #32]	@ (8017238 <MAP_make_refPos_MapData+0x194>)
 8017218:	7812      	ldrb	r2, [r2, #0]
 801721a:	4610      	mov	r0, r2
 801721c:	b2c9      	uxtb	r1, r1
 801721e:	4a07      	ldr	r2, [pc, #28]	@ (801723c <MAP_make_refPos_MapData+0x198>)
 8017220:	015b      	lsls	r3, r3, #5
 8017222:	4413      	add	r3, r2
 8017224:	4403      	add	r3, r0
 8017226:	460a      	mov	r2, r1
 8017228:	701a      	strb	r2, [r3, #0]
	}

}
 801722a:	bf00      	nop
 801722c:	3710      	adds	r7, #16
 801722e:	46bd      	mov	sp, r7
 8017230:	bd80      	pop	{r7, pc}
 8017232:	bf00      	nop
 8017234:	2001ad8b 	.word	0x2001ad8b
 8017238:	2001ad8c 	.word	0x2001ad8c
 801723c:	2001b5a0 	.word	0x2001b5a0

08017240 <setStep>:
	}
	while( uc_level != 0 );
	
}
*/
void setStep(const int8_t x, const int8_t y, const uint16_t step) {
 8017240:	b580      	push	{r7, lr}
 8017242:	b082      	sub	sp, #8
 8017244:	af00      	add	r7, sp, #0
 8017246:	4603      	mov	r3, r0
 8017248:	71fb      	strb	r3, [r7, #7]
 801724a:	460b      	mov	r3, r1
 801724c:	71bb      	strb	r3, [r7, #6]
 801724e:	4613      	mov	r3, r2
 8017250:	80bb      	strh	r3, [r7, #4]
	/* (x, y) がフィールド内か確認 */
	if (x < 0 || y < 0 || x >= MAP_X_SIZE || y >= MAP_Y_SIZE) {
 8017252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017256:	2b00      	cmp	r3, #0
 8017258:	db0b      	blt.n	8017272 <setStep+0x32>
 801725a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801725e:	2b00      	cmp	r3, #0
 8017260:	db07      	blt.n	8017272 <setStep+0x32>
 8017262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017266:	2b1f      	cmp	r3, #31
 8017268:	dc03      	bgt.n	8017272 <setStep+0x32>
 801726a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801726e:	2b1f      	cmp	r3, #31
 8017270:	dd03      	ble.n	801727a <setStep+0x3a>
		printf( "referred to out of field\r\n");
 8017272:	4808      	ldr	r0, [pc, #32]	@ (8017294 <setStep+0x54>)
 8017274:	f006 fd5e 	bl	801dd34 <puts>
		return;
 8017278:	e009      	b.n	801728e <setStep+0x4e>
	}
	us_Cmap[y][x] = step;
 801727a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801727e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017282:	4905      	ldr	r1, [pc, #20]	@ (8017298 <setStep+0x58>)
 8017284:	0152      	lsls	r2, r2, #5
 8017286:	4413      	add	r3, r2
 8017288:	88ba      	ldrh	r2, [r7, #4]
 801728a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 801728e:	3708      	adds	r7, #8
 8017290:	46bd      	mov	sp, r7
 8017292:	bd80      	pop	{r7, pc}
 8017294:	08021dc0 	.word	0x08021dc0
 8017298:	2001ada0 	.word	0x2001ada0

0801729c <MAP_makeContourMap_queue>:

void  MAP_makeContourMap_queue(//queue
	uint8_t uc_goalX, 			///< [in] ゴールX座標
	uint8_t uc_goalY, 			///< [in] ゴールY座標
	enMAP_ACT_MODE	en_type		///< [in] 計算方法（まだ未使用）
) {
 801729c:	b590      	push	{r4, r7, lr}
 801729e:	b0cd      	sub	sp, #308	@ 0x134
 80172a0:	af00      	add	r7, sp, #0
 80172a2:	4604      	mov	r4, r0
 80172a4:	4608      	mov	r0, r1
 80172a6:	4611      	mov	r1, r2
 80172a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80172ac:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80172b0:	4622      	mov	r2, r4
 80172b2:	701a      	strb	r2, [r3, #0]
 80172b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80172b8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80172bc:	4602      	mov	r2, r0
 80172be:	701a      	strb	r2, [r3, #0]
 80172c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80172c4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80172c8:	460a      	mov	r2, r1
 80172ca:	701a      	strb	r2, [r3, #0]
	uint16_t		uc_level;		// 等高線
	uint8_t		uc_wallData;	// 壁情報

	stPOSITION		st_pos;

	en_type = en_type;		// コンパイルワーニング回避（いずれ削除）
 80172cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80172d0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80172d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80172d8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80172dc:	7812      	ldrb	r2, [r2, #0]
 80172de:	701a      	strb	r2, [r3, #0]

	queue_t queue;
	queue_t* pQueue = &queue;
 80172e0:	f107 0310 	add.w	r3, r7, #16
 80172e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	InitQueue(pQueue);
 80172e8:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80172ec:	f7ec fd94 	bl	8003e18 <InitQueue>

	/* 等高線マップを初期化する */
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 80172f0:	2300      	movs	r3, #0
 80172f2:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
 80172f6:	e014      	b.n	8017322 <MAP_makeContourMap_queue+0x86>
		us_Cmap[i / MAP_Y_SIZE][i & (MAP_X_SIZE - 1)] = MAP_SMAP_MAX_VAL - 1;
 80172f8:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 80172fc:	095b      	lsrs	r3, r3, #5
 80172fe:	b29b      	uxth	r3, r3
 8017300:	461a      	mov	r2, r3
 8017302:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8017306:	f003 031f 	and.w	r3, r3, #31
 801730a:	49d7      	ldr	r1, [pc, #860]	@ (8017668 <MAP_makeContourMap_queue+0x3cc>)
 801730c:	0152      	lsls	r2, r2, #5
 801730e:	4413      	add	r3, r2
 8017310:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8017314:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 8017318:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 801731c:	3301      	adds	r3, #1
 801731e:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
 8017322:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8017326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801732a:	d3e5      	bcc.n	80172f8 <MAP_makeContourMap_queue+0x5c>

//	std::queue<stPOSITION> q;
//	QueryPerformanceCounter(&start);

	/* 目標地点の等高線を0に設定 */
	setStep(uc_goalX, uc_goalY, 0);
 801732c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017330:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8017334:	f993 0000 	ldrsb.w	r0, [r3]
 8017338:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801733c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8017340:	f993 3000 	ldrsb.w	r3, [r3]
 8017344:	2200      	movs	r2, #0
 8017346:	4619      	mov	r1, r3
 8017348:	f7ff ff7a 	bl	8017240 <setStep>
	st_pos.x = uc_goalX;
 801734c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017350:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8017354:	781b      	ldrb	r3, [r3, #0]
 8017356:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
	st_pos.y = uc_goalY;
 801735a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801735e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8017362:	781b      	ldrb	r3, [r3, #0]
 8017364:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	st_pos.step = 0;
 8017368:	2300      	movs	r3, #0
 801736a:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e

	EnQueue(pQueue,st_pos);
 801736e:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8017372:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8017376:	f7ec fd7f 	bl	8003e78 <EnQueue>

	/* 等高線マップを作成 */
	while (pQueue->flag != EMPTY) {
 801737a:	e167      	b.n	801764c <MAP_makeContourMap_queue+0x3b0>
		const stPOSITION focus = DeQueue(pQueue);
 801737c:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8017380:	f7ec fdb6 	bl	8003ef0 <DeQueue>
 8017384:	4602      	mov	r2, r0
 8017386:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801738a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801738e:	601a      	str	r2, [r3, #0]
//		q.pop();
		const uint16_t focus_step = focus.step;
 8017390:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017394:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8017398:	885b      	ldrh	r3, [r3, #2]
 801739a:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
		x = focus.x;
 801739e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80173a2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80173a6:	781b      	ldrb	r3, [r3, #0]
 80173a8:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
		y = focus.y;
 80173ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80173b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80173b4:	785b      	ldrb	r3, [r3, #1]
 80173b6:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
		stPOSITION next = focus;
 80173ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80173be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80173c2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80173c6:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 80173ca:	6812      	ldr	r2, [r2, #0]
 80173cc:	601a      	str	r2, [r3, #0]
		uc_wallData = g_SysMap[y][x];
 80173ce:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 80173d2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80173d6:	49a5      	ldr	r1, [pc, #660]	@ (801766c <MAP_makeContourMap_queue+0x3d0>)
 80173d8:	0152      	lsls	r2, r2, #5
 80173da:	440a      	add	r2, r1
 80173dc:	4413      	add	r3, r2
 80173de:	781b      	ldrb	r3, [r3, #0]
 80173e0:	f887 3121 	strb.w	r3, [r7, #289]	@ 0x121

		if (((uc_wallData & 0x01) == 0x00) && (y != (MAP_Y_SIZE - 1))) {
 80173e4:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 80173e8:	f003 0301 	and.w	r3, r3, #1
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d146      	bne.n	801747e <MAP_makeContourMap_queue+0x1e2>
 80173f0:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80173f4:	2b1f      	cmp	r3, #31
 80173f6:	d042      	beq.n	801747e <MAP_makeContourMap_queue+0x1e2>
			if (us_Cmap[y + 1][x] > focus_step + 1) {
 80173f8:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80173fc:	1c5a      	adds	r2, r3, #1
 80173fe:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8017402:	4999      	ldr	r1, [pc, #612]	@ (8017668 <MAP_makeContourMap_queue+0x3cc>)
 8017404:	0152      	lsls	r2, r2, #5
 8017406:	4413      	add	r3, r2
 8017408:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801740c:	461a      	mov	r2, r3
 801740e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8017412:	3301      	adds	r3, #1
 8017414:	429a      	cmp	r2, r3
 8017416:	dd32      	ble.n	801747e <MAP_makeContourMap_queue+0x1e2>
				next.step = focus_step + 1;
 8017418:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 801741c:	3301      	adds	r3, #1
 801741e:	b29a      	uxth	r2, r3
 8017420:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017424:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8017428:	805a      	strh	r2, [r3, #2]
				us_Cmap[y + 1][x] = focus_step + 1;
 801742a:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 801742e:	1c5a      	adds	r2, r3, #1
 8017430:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8017434:	f8b7 1126 	ldrh.w	r1, [r7, #294]	@ 0x126
 8017438:	3101      	adds	r1, #1
 801743a:	b288      	uxth	r0, r1
 801743c:	498a      	ldr	r1, [pc, #552]	@ (8017668 <MAP_makeContourMap_queue+0x3cc>)
 801743e:	0152      	lsls	r2, r2, #5
 8017440:	4413      	add	r3, r2
 8017442:	4602      	mov	r2, r0
 8017444:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 8017448:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801744c:	b2da      	uxtb	r2, r3
 801744e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017452:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8017456:	701a      	strb	r2, [r3, #0]
				next.y = y + 1;
 8017458:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 801745c:	b2db      	uxtb	r3, r3
 801745e:	3301      	adds	r3, #1
 8017460:	b2da      	uxtb	r2, r3
 8017462:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017466:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801746a:	705a      	strb	r2, [r3, #1]
				EnQueue(pQueue,next);
 801746c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017470:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8017474:	6819      	ldr	r1, [r3, #0]
 8017476:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 801747a:	f7ec fcfd 	bl	8003e78 <EnQueue>
			}
		}
		if (((uc_wallData & 0x02) == 0x00) && (x != (MAP_X_SIZE - 1))) {
 801747e:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 8017482:	f003 0302 	and.w	r3, r3, #2
 8017486:	2b00      	cmp	r3, #0
 8017488:	d146      	bne.n	8017518 <MAP_makeContourMap_queue+0x27c>
 801748a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801748e:	2b1f      	cmp	r3, #31
 8017490:	d042      	beq.n	8017518 <MAP_makeContourMap_queue+0x27c>
			if (us_Cmap[y][x + 1] > focus_step + 1) {
 8017492:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 8017496:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801749a:	3301      	adds	r3, #1
 801749c:	4972      	ldr	r1, [pc, #456]	@ (8017668 <MAP_makeContourMap_queue+0x3cc>)
 801749e:	0152      	lsls	r2, r2, #5
 80174a0:	4413      	add	r3, r2
 80174a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80174a6:	461a      	mov	r2, r3
 80174a8:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80174ac:	3301      	adds	r3, #1
 80174ae:	429a      	cmp	r2, r3
 80174b0:	dd32      	ble.n	8017518 <MAP_makeContourMap_queue+0x27c>
				next.step = focus_step + 1;
 80174b2:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80174b6:	3301      	adds	r3, #1
 80174b8:	b29a      	uxth	r2, r3
 80174ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80174be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80174c2:	805a      	strh	r2, [r3, #2]
				us_Cmap[y][x + 1] = focus_step + 1;
 80174c4:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 80174c8:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80174cc:	3301      	adds	r3, #1
 80174ce:	f8b7 1126 	ldrh.w	r1, [r7, #294]	@ 0x126
 80174d2:	3101      	adds	r1, #1
 80174d4:	b288      	uxth	r0, r1
 80174d6:	4964      	ldr	r1, [pc, #400]	@ (8017668 <MAP_makeContourMap_queue+0x3cc>)
 80174d8:	0152      	lsls	r2, r2, #5
 80174da:	4413      	add	r3, r2
 80174dc:	4602      	mov	r2, r0
 80174de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x + 1;
 80174e2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80174e6:	b2db      	uxtb	r3, r3
 80174e8:	3301      	adds	r3, #1
 80174ea:	b2da      	uxtb	r2, r3
 80174ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80174f0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80174f4:	701a      	strb	r2, [r3, #0]
				next.y = y;
 80174f6:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80174fa:	b2da      	uxtb	r2, r3
 80174fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017500:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8017504:	705a      	strb	r2, [r3, #1]
				EnQueue(pQueue, next);
 8017506:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801750a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801750e:	6819      	ldr	r1, [r3, #0]
 8017510:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8017514:	f7ec fcb0 	bl	8003e78 <EnQueue>
			}
		}
		if (((uc_wallData & 0x04) == 0x00) && (y != 0)) {
 8017518:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 801751c:	f003 0304 	and.w	r3, r3, #4
 8017520:	2b00      	cmp	r3, #0
 8017522:	d146      	bne.n	80175b2 <MAP_makeContourMap_queue+0x316>
 8017524:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8017528:	2b00      	cmp	r3, #0
 801752a:	d042      	beq.n	80175b2 <MAP_makeContourMap_queue+0x316>
			if (us_Cmap[y - 1][x] > focus_step + 1) {
 801752c:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8017530:	1e5a      	subs	r2, r3, #1
 8017532:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8017536:	494c      	ldr	r1, [pc, #304]	@ (8017668 <MAP_makeContourMap_queue+0x3cc>)
 8017538:	0152      	lsls	r2, r2, #5
 801753a:	4413      	add	r3, r2
 801753c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017540:	461a      	mov	r2, r3
 8017542:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8017546:	3301      	adds	r3, #1
 8017548:	429a      	cmp	r2, r3
 801754a:	dd32      	ble.n	80175b2 <MAP_makeContourMap_queue+0x316>
				next.step = focus_step + 1;
 801754c:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8017550:	3301      	adds	r3, #1
 8017552:	b29a      	uxth	r2, r3
 8017554:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017558:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801755c:	805a      	strh	r2, [r3, #2]
				us_Cmap[y - 1][x] = focus_step + 1;
 801755e:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8017562:	1e5a      	subs	r2, r3, #1
 8017564:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8017568:	f8b7 1126 	ldrh.w	r1, [r7, #294]	@ 0x126
 801756c:	3101      	adds	r1, #1
 801756e:	b288      	uxth	r0, r1
 8017570:	493d      	ldr	r1, [pc, #244]	@ (8017668 <MAP_makeContourMap_queue+0x3cc>)
 8017572:	0152      	lsls	r2, r2, #5
 8017574:	4413      	add	r3, r2
 8017576:	4602      	mov	r2, r0
 8017578:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 801757c:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8017580:	b2da      	uxtb	r2, r3
 8017582:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017586:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801758a:	701a      	strb	r2, [r3, #0]
				next.y = y - 1;
 801758c:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8017590:	b2db      	uxtb	r3, r3
 8017592:	3b01      	subs	r3, #1
 8017594:	b2da      	uxtb	r2, r3
 8017596:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801759a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801759e:	705a      	strb	r2, [r3, #1]
				EnQueue(pQueue, next);
 80175a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80175a4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80175a8:	6819      	ldr	r1, [r3, #0]
 80175aa:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80175ae:	f7ec fc63 	bl	8003e78 <EnQueue>
			}
		}
		if (((uc_wallData & 0x08) == 0x00) && (x != 0)) {
 80175b2:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 80175b6:	f003 0308 	and.w	r3, r3, #8
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d146      	bne.n	801764c <MAP_makeContourMap_queue+0x3b0>
 80175be:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d042      	beq.n	801764c <MAP_makeContourMap_queue+0x3b0>
			if (us_Cmap[y][x - 1] > focus_step + 1) {
 80175c6:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 80175ca:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80175ce:	3b01      	subs	r3, #1
 80175d0:	4925      	ldr	r1, [pc, #148]	@ (8017668 <MAP_makeContourMap_queue+0x3cc>)
 80175d2:	0152      	lsls	r2, r2, #5
 80175d4:	4413      	add	r3, r2
 80175d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80175da:	461a      	mov	r2, r3
 80175dc:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80175e0:	3301      	adds	r3, #1
 80175e2:	429a      	cmp	r2, r3
 80175e4:	dd32      	ble.n	801764c <MAP_makeContourMap_queue+0x3b0>
				next.step = focus_step + 1;
 80175e6:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80175ea:	3301      	adds	r3, #1
 80175ec:	b29a      	uxth	r2, r3
 80175ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80175f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80175f6:	805a      	strh	r2, [r3, #2]
				us_Cmap[y][x - 1] = focus_step + 1;
 80175f8:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 80175fc:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8017600:	3b01      	subs	r3, #1
 8017602:	f8b7 1126 	ldrh.w	r1, [r7, #294]	@ 0x126
 8017606:	3101      	adds	r1, #1
 8017608:	b288      	uxth	r0, r1
 801760a:	4917      	ldr	r1, [pc, #92]	@ (8017668 <MAP_makeContourMap_queue+0x3cc>)
 801760c:	0152      	lsls	r2, r2, #5
 801760e:	4413      	add	r3, r2
 8017610:	4602      	mov	r2, r0
 8017612:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x - 1;
 8017616:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801761a:	b2db      	uxtb	r3, r3
 801761c:	3b01      	subs	r3, #1
 801761e:	b2da      	uxtb	r2, r3
 8017620:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017624:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8017628:	701a      	strb	r2, [r3, #0]
				next.y = y;
 801762a:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 801762e:	b2da      	uxtb	r2, r3
 8017630:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017634:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8017638:	705a      	strb	r2, [r3, #1]
				EnQueue(pQueue, next);
 801763a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801763e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8017642:	6819      	ldr	r1, [r3, #0]
 8017644:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8017648:	f7ec fc16 	bl	8003e78 <EnQueue>
	while (pQueue->flag != EMPTY) {
 801764c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017650:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8017654:	2b00      	cmp	r3, #0
 8017656:	f47f ae91 	bne.w	801737c <MAP_makeContourMap_queue+0xe0>
			}
		}

	}

}
 801765a:	bf00      	nop
 801765c:	bf00      	nop
 801765e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8017662:	46bd      	mov	sp, r7
 8017664:	bd90      	pop	{r4, r7, pc}
 8017666:	bf00      	nop
 8017668:	2001ada0 	.word	0x2001ada0
 801766c:	2001b5a0 	.word	0x2001b5a0

08017670 <MAP_makeContourMap_run>:

void  MAP_makeContourMap_run( //初期型のフルマップ生成　最短用に使用
	uint8_t uc_goalX, 			///< [in] ゴールX座標
	uint8_t uc_goalY, 			///< [in] ゴールY座標
	enMAP_ACT_MODE	en_type		///< [in] 計算方法（まだ未使用）
) {
 8017670:	b480      	push	{r7}
 8017672:	b087      	sub	sp, #28
 8017674:	af00      	add	r7, sp, #0
 8017676:	4603      	mov	r3, r0
 8017678:	71fb      	strb	r3, [r7, #7]
 801767a:	460b      	mov	r3, r1
 801767c:	71bb      	strb	r3, [r7, #6]
 801767e:	4613      	mov	r3, r2
 8017680:	717b      	strb	r3, [r7, #5]
	uint8_t		uc_wallData;	// 壁情報

	en_type = en_type;		// コンパイルワーニング回避（いずれ削除）

	/* 等高線マップを初期化する */
	for ( i = 0; i < MAP_SMAP_MAX_VAL; i++ ){
 8017682:	2300      	movs	r3, #0
 8017684:	827b      	strh	r3, [r7, #18]
 8017686:	e010      	b.n	80176aa <MAP_makeContourMap_run+0x3a>
		us_Cmap[ i / MAP_Y_SIZE][ i & (MAP_X_SIZE-1) ] = MAP_SMAP_MAX_VAL - 1;
 8017688:	8a7b      	ldrh	r3, [r7, #18]
 801768a:	095b      	lsrs	r3, r3, #5
 801768c:	b29b      	uxth	r3, r3
 801768e:	461a      	mov	r2, r3
 8017690:	8a7b      	ldrh	r3, [r7, #18]
 8017692:	f003 031f 	and.w	r3, r3, #31
 8017696:	4997      	ldr	r1, [pc, #604]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 8017698:	0152      	lsls	r2, r2, #5
 801769a:	4413      	add	r3, r2
 801769c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80176a0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for ( i = 0; i < MAP_SMAP_MAX_VAL; i++ ){
 80176a4:	8a7b      	ldrh	r3, [r7, #18]
 80176a6:	3301      	adds	r3, #1
 80176a8:	827b      	strh	r3, [r7, #18]
 80176aa:	8a7b      	ldrh	r3, [r7, #18]
 80176ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80176b0:	d3ea      	bcc.n	8017688 <MAP_makeContourMap_run+0x18>
	}
	/* 目標地点の等高線を0に設定 */
	us_Cmap[uc_goalY][uc_goalX] = 0;
 80176b2:	79ba      	ldrb	r2, [r7, #6]
 80176b4:	79fb      	ldrb	r3, [r7, #7]
 80176b6:	498f      	ldr	r1, [pc, #572]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 80176b8:	0152      	lsls	r2, r2, #5
 80176ba:	4413      	add	r3, r2
 80176bc:	2200      	movs	r2, #0
 80176be:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	if (GOAL_SIZE == 4) {
 80176c2:	4b8d      	ldr	r3, [pc, #564]	@ (80178f8 <MAP_makeContourMap_run+0x288>)
 80176c4:	781b      	ldrb	r3, [r3, #0]
 80176c6:	2b04      	cmp	r3, #4
 80176c8:	d11c      	bne.n	8017704 <MAP_makeContourMap_run+0x94>
		us_Cmap[uc_goalY + 1][uc_goalX] = 0;
 80176ca:	79bb      	ldrb	r3, [r7, #6]
 80176cc:	1c5a      	adds	r2, r3, #1
 80176ce:	79fb      	ldrb	r3, [r7, #7]
 80176d0:	4988      	ldr	r1, [pc, #544]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 80176d2:	0152      	lsls	r2, r2, #5
 80176d4:	4413      	add	r3, r2
 80176d6:	2200      	movs	r2, #0
 80176d8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY][uc_goalX + 1] = 0;
 80176dc:	79ba      	ldrb	r2, [r7, #6]
 80176de:	79fb      	ldrb	r3, [r7, #7]
 80176e0:	3301      	adds	r3, #1
 80176e2:	4984      	ldr	r1, [pc, #528]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 80176e4:	0152      	lsls	r2, r2, #5
 80176e6:	4413      	add	r3, r2
 80176e8:	2200      	movs	r2, #0
 80176ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY + 1][uc_goalX + 1] = 0;
 80176ee:	79bb      	ldrb	r3, [r7, #6]
 80176f0:	1c5a      	adds	r2, r3, #1
 80176f2:	79fb      	ldrb	r3, [r7, #7]
 80176f4:	3301      	adds	r3, #1
 80176f6:	497f      	ldr	r1, [pc, #508]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 80176f8:	0152      	lsls	r2, r2, #5
 80176fa:	4413      	add	r3, r2
 80176fc:	2200      	movs	r2, #0
 80176fe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8017702:	e04f      	b.n	80177a4 <MAP_makeContourMap_run+0x134>
	}
	else if (GOAL_SIZE == 9){
 8017704:	4b7c      	ldr	r3, [pc, #496]	@ (80178f8 <MAP_makeContourMap_run+0x288>)
 8017706:	781b      	ldrb	r3, [r3, #0]
 8017708:	2b09      	cmp	r3, #9
 801770a:	d14b      	bne.n	80177a4 <MAP_makeContourMap_run+0x134>
		us_Cmap[uc_goalY+1][uc_goalX] = 0;
 801770c:	79bb      	ldrb	r3, [r7, #6]
 801770e:	1c5a      	adds	r2, r3, #1
 8017710:	79fb      	ldrb	r3, [r7, #7]
 8017712:	4978      	ldr	r1, [pc, #480]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 8017714:	0152      	lsls	r2, r2, #5
 8017716:	4413      	add	r3, r2
 8017718:	2200      	movs	r2, #0
 801771a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY][uc_goalX+1] = 0;
 801771e:	79ba      	ldrb	r2, [r7, #6]
 8017720:	79fb      	ldrb	r3, [r7, #7]
 8017722:	3301      	adds	r3, #1
 8017724:	4973      	ldr	r1, [pc, #460]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 8017726:	0152      	lsls	r2, r2, #5
 8017728:	4413      	add	r3, r2
 801772a:	2200      	movs	r2, #0
 801772c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+1][uc_goalX+1] = 0;
 8017730:	79bb      	ldrb	r3, [r7, #6]
 8017732:	1c5a      	adds	r2, r3, #1
 8017734:	79fb      	ldrb	r3, [r7, #7]
 8017736:	3301      	adds	r3, #1
 8017738:	496e      	ldr	r1, [pc, #440]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 801773a:	0152      	lsls	r2, r2, #5
 801773c:	4413      	add	r3, r2
 801773e:	2200      	movs	r2, #0
 8017740:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+2][uc_goalX] = 0;
 8017744:	79bb      	ldrb	r3, [r7, #6]
 8017746:	1c9a      	adds	r2, r3, #2
 8017748:	79fb      	ldrb	r3, [r7, #7]
 801774a:	496a      	ldr	r1, [pc, #424]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 801774c:	0152      	lsls	r2, r2, #5
 801774e:	4413      	add	r3, r2
 8017750:	2200      	movs	r2, #0
 8017752:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+2][uc_goalX+1] = 0;
 8017756:	79bb      	ldrb	r3, [r7, #6]
 8017758:	1c9a      	adds	r2, r3, #2
 801775a:	79fb      	ldrb	r3, [r7, #7]
 801775c:	3301      	adds	r3, #1
 801775e:	4965      	ldr	r1, [pc, #404]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 8017760:	0152      	lsls	r2, r2, #5
 8017762:	4413      	add	r3, r2
 8017764:	2200      	movs	r2, #0
 8017766:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY][uc_goalX+2] = 0;
 801776a:	79ba      	ldrb	r2, [r7, #6]
 801776c:	79fb      	ldrb	r3, [r7, #7]
 801776e:	3302      	adds	r3, #2
 8017770:	4960      	ldr	r1, [pc, #384]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 8017772:	0152      	lsls	r2, r2, #5
 8017774:	4413      	add	r3, r2
 8017776:	2200      	movs	r2, #0
 8017778:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+1][uc_goalX+2] = 0;
 801777c:	79bb      	ldrb	r3, [r7, #6]
 801777e:	1c5a      	adds	r2, r3, #1
 8017780:	79fb      	ldrb	r3, [r7, #7]
 8017782:	3302      	adds	r3, #2
 8017784:	495b      	ldr	r1, [pc, #364]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 8017786:	0152      	lsls	r2, r2, #5
 8017788:	4413      	add	r3, r2
 801778a:	2200      	movs	r2, #0
 801778c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+2][uc_goalX+2] = 0;
 8017790:	79bb      	ldrb	r3, [r7, #6]
 8017792:	1c9a      	adds	r2, r3, #2
 8017794:	79fb      	ldrb	r3, [r7, #7]
 8017796:	3302      	adds	r3, #2
 8017798:	4956      	ldr	r1, [pc, #344]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 801779a:	0152      	lsls	r2, r2, #5
 801779c:	4413      	add	r3, r2
 801779e:	2200      	movs	r2, #0
 80177a0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}

	/* 等高線マップを作成 */
	uc_dase = 0;
 80177a4:	2300      	movs	r3, #0
 80177a6:	823b      	strh	r3, [r7, #16]
	do{
		uc_level = 0;
 80177a8:	2300      	movs	r3, #0
 80177aa:	81fb      	strh	r3, [r7, #14]
		uc_new = uc_dase + 1;
 80177ac:	8a3b      	ldrh	r3, [r7, #16]
 80177ae:	3301      	adds	r3, #1
 80177b0:	81bb      	strh	r3, [r7, #12]
		for ( y = 0; y < MAP_Y_SIZE; y++ ){
 80177b2:	2300      	movs	r3, #0
 80177b4:	82bb      	strh	r3, [r7, #20]
 80177b6:	e12d      	b.n	8017a14 <MAP_makeContourMap_run+0x3a4>
			for ( x = 0; x < MAP_X_SIZE; x++ ){
 80177b8:	2300      	movs	r3, #0
 80177ba:	82fb      	strh	r3, [r7, #22]
 80177bc:	e123      	b.n	8017a06 <MAP_makeContourMap_run+0x396>
				if ( us_Cmap[y][x] == uc_dase ){
 80177be:	8aba      	ldrh	r2, [r7, #20]
 80177c0:	8afb      	ldrh	r3, [r7, #22]
 80177c2:	494c      	ldr	r1, [pc, #304]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 80177c4:	0152      	lsls	r2, r2, #5
 80177c6:	4413      	add	r3, r2
 80177c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80177cc:	8a3a      	ldrh	r2, [r7, #16]
 80177ce:	429a      	cmp	r2, r3
 80177d0:	f040 8116 	bne.w	8017a00 <MAP_makeContourMap_run+0x390>
					uc_wallData = g_SysMap[y][x];
 80177d4:	8aba      	ldrh	r2, [r7, #20]
 80177d6:	8afb      	ldrh	r3, [r7, #22]
 80177d8:	4948      	ldr	r1, [pc, #288]	@ (80178fc <MAP_makeContourMap_run+0x28c>)
 80177da:	0152      	lsls	r2, r2, #5
 80177dc:	440a      	add	r2, r1
 80177de:	4413      	add	r3, r2
 80177e0:	781b      	ldrb	r3, [r3, #0]
 80177e2:	72fb      	strb	r3, [r7, #11]
					/* 探索走行 */
					if( SEARCH == en_type ){
 80177e4:	797b      	ldrb	r3, [r7, #5]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	f040 808a 	bne.w	8017900 <MAP_makeContourMap_run+0x290>
						if ( ( ( uc_wallData & 0x01 ) == 0x00 ) && ( y != (MAP_Y_SIZE-1) ) ){
 80177ec:	7afb      	ldrb	r3, [r7, #11]
 80177ee:	f003 0301 	and.w	r3, r3, #1
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d11a      	bne.n	801782c <MAP_makeContourMap_run+0x1bc>
 80177f6:	8abb      	ldrh	r3, [r7, #20]
 80177f8:	2b1f      	cmp	r3, #31
 80177fa:	d017      	beq.n	801782c <MAP_makeContourMap_run+0x1bc>
							if ( us_Cmap[y+1][x] == MAP_SMAP_MAX_VAL - 1 ){
 80177fc:	8abb      	ldrh	r3, [r7, #20]
 80177fe:	1c5a      	adds	r2, r3, #1
 8017800:	8afb      	ldrh	r3, [r7, #22]
 8017802:	493c      	ldr	r1, [pc, #240]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 8017804:	0152      	lsls	r2, r2, #5
 8017806:	4413      	add	r3, r2
 8017808:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801780c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8017810:	4293      	cmp	r3, r2
 8017812:	d10b      	bne.n	801782c <MAP_makeContourMap_run+0x1bc>
								us_Cmap[y+1][x] = uc_new;
 8017814:	8abb      	ldrh	r3, [r7, #20]
 8017816:	1c5a      	adds	r2, r3, #1
 8017818:	8afb      	ldrh	r3, [r7, #22]
 801781a:	4936      	ldr	r1, [pc, #216]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 801781c:	0152      	lsls	r2, r2, #5
 801781e:	4413      	add	r3, r2
 8017820:	89ba      	ldrh	r2, [r7, #12]
 8017822:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8017826:	89fb      	ldrh	r3, [r7, #14]
 8017828:	3301      	adds	r3, #1
 801782a:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x02 ) == 0x00 ) && ( x != (MAP_X_SIZE-1) ) ){
 801782c:	7afb      	ldrb	r3, [r7, #11]
 801782e:	f003 0302 	and.w	r3, r3, #2
 8017832:	2b00      	cmp	r3, #0
 8017834:	d11a      	bne.n	801786c <MAP_makeContourMap_run+0x1fc>
 8017836:	8afb      	ldrh	r3, [r7, #22]
 8017838:	2b1f      	cmp	r3, #31
 801783a:	d017      	beq.n	801786c <MAP_makeContourMap_run+0x1fc>
							if ( us_Cmap[y][x+1] == MAP_SMAP_MAX_VAL - 1 ){
 801783c:	8aba      	ldrh	r2, [r7, #20]
 801783e:	8afb      	ldrh	r3, [r7, #22]
 8017840:	3301      	adds	r3, #1
 8017842:	492c      	ldr	r1, [pc, #176]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 8017844:	0152      	lsls	r2, r2, #5
 8017846:	4413      	add	r3, r2
 8017848:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801784c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8017850:	4293      	cmp	r3, r2
 8017852:	d10b      	bne.n	801786c <MAP_makeContourMap_run+0x1fc>
								us_Cmap[y][x+1] = uc_new;
 8017854:	8aba      	ldrh	r2, [r7, #20]
 8017856:	8afb      	ldrh	r3, [r7, #22]
 8017858:	3301      	adds	r3, #1
 801785a:	4926      	ldr	r1, [pc, #152]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 801785c:	0152      	lsls	r2, r2, #5
 801785e:	4413      	add	r3, r2
 8017860:	89ba      	ldrh	r2, [r7, #12]
 8017862:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8017866:	89fb      	ldrh	r3, [r7, #14]
 8017868:	3301      	adds	r3, #1
 801786a:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x04 ) == 0x00 ) && ( y != 0 ) ){
 801786c:	7afb      	ldrb	r3, [r7, #11]
 801786e:	f003 0304 	and.w	r3, r3, #4
 8017872:	2b00      	cmp	r3, #0
 8017874:	d11a      	bne.n	80178ac <MAP_makeContourMap_run+0x23c>
 8017876:	8abb      	ldrh	r3, [r7, #20]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d017      	beq.n	80178ac <MAP_makeContourMap_run+0x23c>
							if ( us_Cmap[y-1][x] == MAP_SMAP_MAX_VAL - 1 ){
 801787c:	8abb      	ldrh	r3, [r7, #20]
 801787e:	1e5a      	subs	r2, r3, #1
 8017880:	8afb      	ldrh	r3, [r7, #22]
 8017882:	491c      	ldr	r1, [pc, #112]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 8017884:	0152      	lsls	r2, r2, #5
 8017886:	4413      	add	r3, r2
 8017888:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801788c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8017890:	4293      	cmp	r3, r2
 8017892:	d10b      	bne.n	80178ac <MAP_makeContourMap_run+0x23c>
								us_Cmap[y-1][x] = uc_new;
 8017894:	8abb      	ldrh	r3, [r7, #20]
 8017896:	1e5a      	subs	r2, r3, #1
 8017898:	8afb      	ldrh	r3, [r7, #22]
 801789a:	4916      	ldr	r1, [pc, #88]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 801789c:	0152      	lsls	r2, r2, #5
 801789e:	4413      	add	r3, r2
 80178a0:	89ba      	ldrh	r2, [r7, #12]
 80178a2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 80178a6:	89fb      	ldrh	r3, [r7, #14]
 80178a8:	3301      	adds	r3, #1
 80178aa:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x08 ) == 0x00 ) && ( x != 0 ) ){
 80178ac:	7afb      	ldrb	r3, [r7, #11]
 80178ae:	f003 0308 	and.w	r3, r3, #8
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	f040 80a4 	bne.w	8017a00 <MAP_makeContourMap_run+0x390>
 80178b8:	8afb      	ldrh	r3, [r7, #22]
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	f000 80a0 	beq.w	8017a00 <MAP_makeContourMap_run+0x390>
							if ( us_Cmap[y][x-1] == MAP_SMAP_MAX_VAL - 1 ){
 80178c0:	8aba      	ldrh	r2, [r7, #20]
 80178c2:	8afb      	ldrh	r3, [r7, #22]
 80178c4:	3b01      	subs	r3, #1
 80178c6:	490b      	ldr	r1, [pc, #44]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 80178c8:	0152      	lsls	r2, r2, #5
 80178ca:	4413      	add	r3, r2
 80178cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80178d0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80178d4:	4293      	cmp	r3, r2
 80178d6:	f040 8093 	bne.w	8017a00 <MAP_makeContourMap_run+0x390>
								us_Cmap[y][x-1] = uc_new;
 80178da:	8aba      	ldrh	r2, [r7, #20]
 80178dc:	8afb      	ldrh	r3, [r7, #22]
 80178de:	3b01      	subs	r3, #1
 80178e0:	4904      	ldr	r1, [pc, #16]	@ (80178f4 <MAP_makeContourMap_run+0x284>)
 80178e2:	0152      	lsls	r2, r2, #5
 80178e4:	4413      	add	r3, r2
 80178e6:	89ba      	ldrh	r2, [r7, #12]
 80178e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 80178ec:	89fb      	ldrh	r3, [r7, #14]
 80178ee:	3301      	adds	r3, #1
 80178f0:	81fb      	strh	r3, [r7, #14]
 80178f2:	e085      	b.n	8017a00 <MAP_makeContourMap_run+0x390>
 80178f4:	2001ada0 	.word	0x2001ada0
 80178f8:	2001ad97 	.word	0x2001ad97
 80178fc:	2001b5a0 	.word	0x2001b5a0
							}
						}
					}
					/* 最短走行 */
					else{
						if ( ( ( uc_wallData & 0x11 ) == 0x10 ) && ( y != (MAP_Y_SIZE-1) ) ){
 8017900:	7afb      	ldrb	r3, [r7, #11]
 8017902:	f003 0311 	and.w	r3, r3, #17
 8017906:	2b10      	cmp	r3, #16
 8017908:	d11a      	bne.n	8017940 <MAP_makeContourMap_run+0x2d0>
 801790a:	8abb      	ldrh	r3, [r7, #20]
 801790c:	2b1f      	cmp	r3, #31
 801790e:	d017      	beq.n	8017940 <MAP_makeContourMap_run+0x2d0>
							if ( us_Cmap[y+1][x] == MAP_SMAP_MAX_VAL - 1 ){
 8017910:	8abb      	ldrh	r3, [r7, #20]
 8017912:	1c5a      	adds	r2, r3, #1
 8017914:	8afb      	ldrh	r3, [r7, #22]
 8017916:	4948      	ldr	r1, [pc, #288]	@ (8017a38 <MAP_makeContourMap_run+0x3c8>)
 8017918:	0152      	lsls	r2, r2, #5
 801791a:	4413      	add	r3, r2
 801791c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017920:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8017924:	4293      	cmp	r3, r2
 8017926:	d10b      	bne.n	8017940 <MAP_makeContourMap_run+0x2d0>
								us_Cmap[y+1][x] = uc_new;
 8017928:	8abb      	ldrh	r3, [r7, #20]
 801792a:	1c5a      	adds	r2, r3, #1
 801792c:	8afb      	ldrh	r3, [r7, #22]
 801792e:	4942      	ldr	r1, [pc, #264]	@ (8017a38 <MAP_makeContourMap_run+0x3c8>)
 8017930:	0152      	lsls	r2, r2, #5
 8017932:	4413      	add	r3, r2
 8017934:	89ba      	ldrh	r2, [r7, #12]
 8017936:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 801793a:	89fb      	ldrh	r3, [r7, #14]
 801793c:	3301      	adds	r3, #1
 801793e:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x22 ) == 0x20 ) && ( x != (MAP_X_SIZE-1) ) ){
 8017940:	7afb      	ldrb	r3, [r7, #11]
 8017942:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8017946:	2b20      	cmp	r3, #32
 8017948:	d11a      	bne.n	8017980 <MAP_makeContourMap_run+0x310>
 801794a:	8afb      	ldrh	r3, [r7, #22]
 801794c:	2b1f      	cmp	r3, #31
 801794e:	d017      	beq.n	8017980 <MAP_makeContourMap_run+0x310>
							if ( us_Cmap[y][x+1] == MAP_SMAP_MAX_VAL - 1 ){
 8017950:	8aba      	ldrh	r2, [r7, #20]
 8017952:	8afb      	ldrh	r3, [r7, #22]
 8017954:	3301      	adds	r3, #1
 8017956:	4938      	ldr	r1, [pc, #224]	@ (8017a38 <MAP_makeContourMap_run+0x3c8>)
 8017958:	0152      	lsls	r2, r2, #5
 801795a:	4413      	add	r3, r2
 801795c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017960:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8017964:	4293      	cmp	r3, r2
 8017966:	d10b      	bne.n	8017980 <MAP_makeContourMap_run+0x310>
								us_Cmap[y][x+1] = uc_new;
 8017968:	8aba      	ldrh	r2, [r7, #20]
 801796a:	8afb      	ldrh	r3, [r7, #22]
 801796c:	3301      	adds	r3, #1
 801796e:	4932      	ldr	r1, [pc, #200]	@ (8017a38 <MAP_makeContourMap_run+0x3c8>)
 8017970:	0152      	lsls	r2, r2, #5
 8017972:	4413      	add	r3, r2
 8017974:	89ba      	ldrh	r2, [r7, #12]
 8017976:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 801797a:	89fb      	ldrh	r3, [r7, #14]
 801797c:	3301      	adds	r3, #1
 801797e:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x44 ) == 0x40 ) && ( y != 0 ) ){
 8017980:	7afb      	ldrb	r3, [r7, #11]
 8017982:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8017986:	2b40      	cmp	r3, #64	@ 0x40
 8017988:	d11a      	bne.n	80179c0 <MAP_makeContourMap_run+0x350>
 801798a:	8abb      	ldrh	r3, [r7, #20]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d017      	beq.n	80179c0 <MAP_makeContourMap_run+0x350>
							if ( us_Cmap[y-1][x] == MAP_SMAP_MAX_VAL - 1 ){
 8017990:	8abb      	ldrh	r3, [r7, #20]
 8017992:	1e5a      	subs	r2, r3, #1
 8017994:	8afb      	ldrh	r3, [r7, #22]
 8017996:	4928      	ldr	r1, [pc, #160]	@ (8017a38 <MAP_makeContourMap_run+0x3c8>)
 8017998:	0152      	lsls	r2, r2, #5
 801799a:	4413      	add	r3, r2
 801799c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80179a0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80179a4:	4293      	cmp	r3, r2
 80179a6:	d10b      	bne.n	80179c0 <MAP_makeContourMap_run+0x350>
								us_Cmap[y-1][x] = uc_new;
 80179a8:	8abb      	ldrh	r3, [r7, #20]
 80179aa:	1e5a      	subs	r2, r3, #1
 80179ac:	8afb      	ldrh	r3, [r7, #22]
 80179ae:	4922      	ldr	r1, [pc, #136]	@ (8017a38 <MAP_makeContourMap_run+0x3c8>)
 80179b0:	0152      	lsls	r2, r2, #5
 80179b2:	4413      	add	r3, r2
 80179b4:	89ba      	ldrh	r2, [r7, #12]
 80179b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 80179ba:	89fb      	ldrh	r3, [r7, #14]
 80179bc:	3301      	adds	r3, #1
 80179be:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x88 ) == 0x80 ) && ( x != 0 ) ){
 80179c0:	7afb      	ldrb	r3, [r7, #11]
 80179c2:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 80179c6:	2b80      	cmp	r3, #128	@ 0x80
 80179c8:	d11a      	bne.n	8017a00 <MAP_makeContourMap_run+0x390>
 80179ca:	8afb      	ldrh	r3, [r7, #22]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d017      	beq.n	8017a00 <MAP_makeContourMap_run+0x390>
							if ( us_Cmap[y][x-1] == MAP_SMAP_MAX_VAL - 1 ){
 80179d0:	8aba      	ldrh	r2, [r7, #20]
 80179d2:	8afb      	ldrh	r3, [r7, #22]
 80179d4:	3b01      	subs	r3, #1
 80179d6:	4918      	ldr	r1, [pc, #96]	@ (8017a38 <MAP_makeContourMap_run+0x3c8>)
 80179d8:	0152      	lsls	r2, r2, #5
 80179da:	4413      	add	r3, r2
 80179dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80179e0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80179e4:	4293      	cmp	r3, r2
 80179e6:	d10b      	bne.n	8017a00 <MAP_makeContourMap_run+0x390>
								us_Cmap[y][x-1] = uc_new;
 80179e8:	8aba      	ldrh	r2, [r7, #20]
 80179ea:	8afb      	ldrh	r3, [r7, #22]
 80179ec:	3b01      	subs	r3, #1
 80179ee:	4912      	ldr	r1, [pc, #72]	@ (8017a38 <MAP_makeContourMap_run+0x3c8>)
 80179f0:	0152      	lsls	r2, r2, #5
 80179f2:	4413      	add	r3, r2
 80179f4:	89ba      	ldrh	r2, [r7, #12]
 80179f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 80179fa:	89fb      	ldrh	r3, [r7, #14]
 80179fc:	3301      	adds	r3, #1
 80179fe:	81fb      	strh	r3, [r7, #14]
			for ( x = 0; x < MAP_X_SIZE; x++ ){
 8017a00:	8afb      	ldrh	r3, [r7, #22]
 8017a02:	3301      	adds	r3, #1
 8017a04:	82fb      	strh	r3, [r7, #22]
 8017a06:	8afb      	ldrh	r3, [r7, #22]
 8017a08:	2b1f      	cmp	r3, #31
 8017a0a:	f67f aed8 	bls.w	80177be <MAP_makeContourMap_run+0x14e>
		for ( y = 0; y < MAP_Y_SIZE; y++ ){
 8017a0e:	8abb      	ldrh	r3, [r7, #20]
 8017a10:	3301      	adds	r3, #1
 8017a12:	82bb      	strh	r3, [r7, #20]
 8017a14:	8abb      	ldrh	r3, [r7, #20]
 8017a16:	2b1f      	cmp	r3, #31
 8017a18:	f67f aece 	bls.w	80177b8 <MAP_makeContourMap_run+0x148>
						}
					}
				}
			}
		}
		uc_dase = uc_dase + 1;
 8017a1c:	8a3b      	ldrh	r3, [r7, #16]
 8017a1e:	3301      	adds	r3, #1
 8017a20:	823b      	strh	r3, [r7, #16]
	}
	while( uc_level != 0 );
 8017a22:	89fb      	ldrh	r3, [r7, #14]
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	f47f aebf 	bne.w	80177a8 <MAP_makeContourMap_run+0x138>
	
}
 8017a2a:	bf00      	nop
 8017a2c:	bf00      	nop
 8017a2e:	371c      	adds	r7, #28
 8017a30:	46bd      	mov	sp, r7
 8017a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a36:	4770      	bx	lr
 8017a38:	2001ada0 	.word	0x2001ada0

08017a3c <MAP_calcMouseDir>:

void MAP_calcMouseDir( 
	enMAP_SEARCH_TYPE	en_calcType,	///< [in] 計算方法
	enMAP_HEAD_DIR* 	p_head			///< [out] 進行方向（戻り値）
){
 8017a3c:	b480      	push	{r7}
 8017a3e:	b085      	sub	sp, #20
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	4603      	mov	r3, r0
 8017a44:	6039      	str	r1, [r7, #0]
 8017a46:	71fb      	strb	r3, [r7, #7]
	uint16_t		us_new;
	enMAP_HEAD_DIR	en_tmpHead;

	/* 方向計算 */
	// 等高線MAP法
	if( CONTOUR_SYSTEM == en_calcType ){
 8017a48:	79fb      	ldrb	r3, [r7, #7]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	f040 80ee 	bne.w	8017c2c <MAP_calcMouseDir+0x1f0>
		// 周辺の4区画で一番目的地に近い移動方向を算出する。
		// ただし、移動できる一番近い区間が複数ある場合には、次の順で選択する。
		// ①未探索区間,直進 ②未探索区間,旋回 ③既探索区間,直進 ④既探索区間,旋回
		uc_wall = g_SysMap[my][mx];
 8017a50:	4b7b      	ldr	r3, [pc, #492]	@ (8017c40 <MAP_calcMouseDir+0x204>)
 8017a52:	781b      	ldrb	r3, [r3, #0]
 8017a54:	4618      	mov	r0, r3
 8017a56:	4b7b      	ldr	r3, [pc, #492]	@ (8017c44 <MAP_calcMouseDir+0x208>)
 8017a58:	781b      	ldrb	r3, [r3, #0]
 8017a5a:	4619      	mov	r1, r3
 8017a5c:	4a7a      	ldr	r2, [pc, #488]	@ (8017c48 <MAP_calcMouseDir+0x20c>)
 8017a5e:	0143      	lsls	r3, r0, #5
 8017a60:	4413      	add	r3, r2
 8017a62:	440b      	add	r3, r1
 8017a64:	781b      	ldrb	r3, [r3, #0]
 8017a66:	72bb      	strb	r3, [r7, #10]
		us_base = MAP_SMAP_MAX_PRI_VAL;					// 16[区画]×16[区画]×4[方向]
 8017a68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017a6c:	81fb      	strh	r3, [r7, #14]

		/* 4方向を比較 */
		//	北方向の区画の確認
		if ( ( uc_wall & 1 ) == 0 ){
 8017a6e:	7abb      	ldrb	r3, [r7, #10]
 8017a70:	f003 0301 	and.w	r3, r3, #1
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d12f      	bne.n	8017ad8 <MAP_calcMouseDir+0x9c>
			us_new = us_Cmap[my+1][mx] * 4 + 4;
 8017a78:	4b71      	ldr	r3, [pc, #452]	@ (8017c40 <MAP_calcMouseDir+0x204>)
 8017a7a:	781b      	ldrb	r3, [r3, #0]
 8017a7c:	3301      	adds	r3, #1
 8017a7e:	4a71      	ldr	r2, [pc, #452]	@ (8017c44 <MAP_calcMouseDir+0x208>)
 8017a80:	7812      	ldrb	r2, [r2, #0]
 8017a82:	4611      	mov	r1, r2
 8017a84:	4a71      	ldr	r2, [pc, #452]	@ (8017c4c <MAP_calcMouseDir+0x210>)
 8017a86:	015b      	lsls	r3, r3, #5
 8017a88:	440b      	add	r3, r1
 8017a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017a8e:	3301      	adds	r3, #1
 8017a90:	b29b      	uxth	r3, r3
 8017a92:	009b      	lsls	r3, r3, #2
 8017a94:	81bb      	strh	r3, [r7, #12]
			if ( ( g_SysMap[my+1][mx] & 0xf0 ) != 0xf0 ) us_new = us_new - 2;
 8017a96:	4b6a      	ldr	r3, [pc, #424]	@ (8017c40 <MAP_calcMouseDir+0x204>)
 8017a98:	781b      	ldrb	r3, [r3, #0]
 8017a9a:	3301      	adds	r3, #1
 8017a9c:	4a69      	ldr	r2, [pc, #420]	@ (8017c44 <MAP_calcMouseDir+0x208>)
 8017a9e:	7812      	ldrb	r2, [r2, #0]
 8017aa0:	4611      	mov	r1, r2
 8017aa2:	4a69      	ldr	r2, [pc, #420]	@ (8017c48 <MAP_calcMouseDir+0x20c>)
 8017aa4:	015b      	lsls	r3, r3, #5
 8017aa6:	4413      	add	r3, r2
 8017aa8:	440b      	add	r3, r1
 8017aaa:	781b      	ldrb	r3, [r3, #0]
 8017aac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017ab0:	2bf0      	cmp	r3, #240	@ 0xf0
 8017ab2:	d002      	beq.n	8017aba <MAP_calcMouseDir+0x7e>
 8017ab4:	89bb      	ldrh	r3, [r7, #12]
 8017ab6:	3b02      	subs	r3, #2
 8017ab8:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == NORTH ) us_new = us_new - 1;
 8017aba:	4b65      	ldr	r3, [pc, #404]	@ (8017c50 <MAP_calcMouseDir+0x214>)
 8017abc:	781b      	ldrb	r3, [r3, #0]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d102      	bne.n	8017ac8 <MAP_calcMouseDir+0x8c>
 8017ac2:	89bb      	ldrh	r3, [r7, #12]
 8017ac4:	3b01      	subs	r3, #1
 8017ac6:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 8017ac8:	89ba      	ldrh	r2, [r7, #12]
 8017aca:	89fb      	ldrh	r3, [r7, #14]
 8017acc:	429a      	cmp	r2, r3
 8017ace:	d203      	bcs.n	8017ad8 <MAP_calcMouseDir+0x9c>
				us_base = us_new;
 8017ad0:	89bb      	ldrh	r3, [r7, #12]
 8017ad2:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = NORTH;
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	72fb      	strb	r3, [r7, #11]
			}
		}
		//	東方向の区画の確認
		if ( ( uc_wall & 2 ) == 0 ){
 8017ad8:	7abb      	ldrb	r3, [r7, #10]
 8017ada:	f003 0302 	and.w	r3, r3, #2
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d12f      	bne.n	8017b42 <MAP_calcMouseDir+0x106>
			us_new = us_Cmap[my][mx+1] * 4 + 4;
 8017ae2:	4b57      	ldr	r3, [pc, #348]	@ (8017c40 <MAP_calcMouseDir+0x204>)
 8017ae4:	781b      	ldrb	r3, [r3, #0]
 8017ae6:	461a      	mov	r2, r3
 8017ae8:	4b56      	ldr	r3, [pc, #344]	@ (8017c44 <MAP_calcMouseDir+0x208>)
 8017aea:	781b      	ldrb	r3, [r3, #0]
 8017aec:	3301      	adds	r3, #1
 8017aee:	4957      	ldr	r1, [pc, #348]	@ (8017c4c <MAP_calcMouseDir+0x210>)
 8017af0:	0152      	lsls	r2, r2, #5
 8017af2:	4413      	add	r3, r2
 8017af4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017af8:	3301      	adds	r3, #1
 8017afa:	b29b      	uxth	r3, r3
 8017afc:	009b      	lsls	r3, r3, #2
 8017afe:	81bb      	strh	r3, [r7, #12]
			if ( ( g_SysMap[my][mx+1] & 0xf0 ) != 0xf0 ) us_new = us_new - 2;
 8017b00:	4b4f      	ldr	r3, [pc, #316]	@ (8017c40 <MAP_calcMouseDir+0x204>)
 8017b02:	781b      	ldrb	r3, [r3, #0]
 8017b04:	461a      	mov	r2, r3
 8017b06:	4b4f      	ldr	r3, [pc, #316]	@ (8017c44 <MAP_calcMouseDir+0x208>)
 8017b08:	781b      	ldrb	r3, [r3, #0]
 8017b0a:	3301      	adds	r3, #1
 8017b0c:	494e      	ldr	r1, [pc, #312]	@ (8017c48 <MAP_calcMouseDir+0x20c>)
 8017b0e:	0152      	lsls	r2, r2, #5
 8017b10:	440a      	add	r2, r1
 8017b12:	4413      	add	r3, r2
 8017b14:	781b      	ldrb	r3, [r3, #0]
 8017b16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017b1a:	2bf0      	cmp	r3, #240	@ 0xf0
 8017b1c:	d002      	beq.n	8017b24 <MAP_calcMouseDir+0xe8>
 8017b1e:	89bb      	ldrh	r3, [r7, #12]
 8017b20:	3b02      	subs	r3, #2
 8017b22:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == EAST) us_new = us_new - 1;
 8017b24:	4b4a      	ldr	r3, [pc, #296]	@ (8017c50 <MAP_calcMouseDir+0x214>)
 8017b26:	781b      	ldrb	r3, [r3, #0]
 8017b28:	2b01      	cmp	r3, #1
 8017b2a:	d102      	bne.n	8017b32 <MAP_calcMouseDir+0xf6>
 8017b2c:	89bb      	ldrh	r3, [r7, #12]
 8017b2e:	3b01      	subs	r3, #1
 8017b30:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 8017b32:	89ba      	ldrh	r2, [r7, #12]
 8017b34:	89fb      	ldrh	r3, [r7, #14]
 8017b36:	429a      	cmp	r2, r3
 8017b38:	d203      	bcs.n	8017b42 <MAP_calcMouseDir+0x106>
				us_base = us_new;
 8017b3a:	89bb      	ldrh	r3, [r7, #12]
 8017b3c:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = EAST;
 8017b3e:	2301      	movs	r3, #1
 8017b40:	72fb      	strb	r3, [r7, #11]
			}
		}
		//	南方向の区画の確認
		if ( ( uc_wall & 4 ) == 0 ){
 8017b42:	7abb      	ldrb	r3, [r7, #10]
 8017b44:	f003 0304 	and.w	r3, r3, #4
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d12f      	bne.n	8017bac <MAP_calcMouseDir+0x170>
			us_new = us_Cmap[my-1][mx] * 4 + 4;
 8017b4c:	4b3c      	ldr	r3, [pc, #240]	@ (8017c40 <MAP_calcMouseDir+0x204>)
 8017b4e:	781b      	ldrb	r3, [r3, #0]
 8017b50:	3b01      	subs	r3, #1
 8017b52:	4a3c      	ldr	r2, [pc, #240]	@ (8017c44 <MAP_calcMouseDir+0x208>)
 8017b54:	7812      	ldrb	r2, [r2, #0]
 8017b56:	4611      	mov	r1, r2
 8017b58:	4a3c      	ldr	r2, [pc, #240]	@ (8017c4c <MAP_calcMouseDir+0x210>)
 8017b5a:	015b      	lsls	r3, r3, #5
 8017b5c:	440b      	add	r3, r1
 8017b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017b62:	3301      	adds	r3, #1
 8017b64:	b29b      	uxth	r3, r3
 8017b66:	009b      	lsls	r3, r3, #2
 8017b68:	81bb      	strh	r3, [r7, #12]
			if ( ( g_SysMap[my-1][mx] & 0xf0 ) != 0xf0) us_new = us_new - 2;
 8017b6a:	4b35      	ldr	r3, [pc, #212]	@ (8017c40 <MAP_calcMouseDir+0x204>)
 8017b6c:	781b      	ldrb	r3, [r3, #0]
 8017b6e:	3b01      	subs	r3, #1
 8017b70:	4a34      	ldr	r2, [pc, #208]	@ (8017c44 <MAP_calcMouseDir+0x208>)
 8017b72:	7812      	ldrb	r2, [r2, #0]
 8017b74:	4611      	mov	r1, r2
 8017b76:	4a34      	ldr	r2, [pc, #208]	@ (8017c48 <MAP_calcMouseDir+0x20c>)
 8017b78:	015b      	lsls	r3, r3, #5
 8017b7a:	4413      	add	r3, r2
 8017b7c:	440b      	add	r3, r1
 8017b7e:	781b      	ldrb	r3, [r3, #0]
 8017b80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017b84:	2bf0      	cmp	r3, #240	@ 0xf0
 8017b86:	d002      	beq.n	8017b8e <MAP_calcMouseDir+0x152>
 8017b88:	89bb      	ldrh	r3, [r7, #12]
 8017b8a:	3b02      	subs	r3, #2
 8017b8c:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == SOUTH ) us_new = us_new - 1;
 8017b8e:	4b30      	ldr	r3, [pc, #192]	@ (8017c50 <MAP_calcMouseDir+0x214>)
 8017b90:	781b      	ldrb	r3, [r3, #0]
 8017b92:	2b02      	cmp	r3, #2
 8017b94:	d102      	bne.n	8017b9c <MAP_calcMouseDir+0x160>
 8017b96:	89bb      	ldrh	r3, [r7, #12]
 8017b98:	3b01      	subs	r3, #1
 8017b9a:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 8017b9c:	89ba      	ldrh	r2, [r7, #12]
 8017b9e:	89fb      	ldrh	r3, [r7, #14]
 8017ba0:	429a      	cmp	r2, r3
 8017ba2:	d203      	bcs.n	8017bac <MAP_calcMouseDir+0x170>
				us_base = us_new;
 8017ba4:	89bb      	ldrh	r3, [r7, #12]
 8017ba6:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = SOUTH;
 8017ba8:	2302      	movs	r3, #2
 8017baa:	72fb      	strb	r3, [r7, #11]
			}
		}
		//	西方向の区画の確認
		if ( ( uc_wall & 8 ) == 0 ){
 8017bac:	7abb      	ldrb	r3, [r7, #10]
 8017bae:	f003 0308 	and.w	r3, r3, #8
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d12f      	bne.n	8017c16 <MAP_calcMouseDir+0x1da>
			us_new = us_Cmap[my][mx-1] * 4 + 4;
 8017bb6:	4b22      	ldr	r3, [pc, #136]	@ (8017c40 <MAP_calcMouseDir+0x204>)
 8017bb8:	781b      	ldrb	r3, [r3, #0]
 8017bba:	461a      	mov	r2, r3
 8017bbc:	4b21      	ldr	r3, [pc, #132]	@ (8017c44 <MAP_calcMouseDir+0x208>)
 8017bbe:	781b      	ldrb	r3, [r3, #0]
 8017bc0:	3b01      	subs	r3, #1
 8017bc2:	4922      	ldr	r1, [pc, #136]	@ (8017c4c <MAP_calcMouseDir+0x210>)
 8017bc4:	0152      	lsls	r2, r2, #5
 8017bc6:	4413      	add	r3, r2
 8017bc8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017bcc:	3301      	adds	r3, #1
 8017bce:	b29b      	uxth	r3, r3
 8017bd0:	009b      	lsls	r3, r3, #2
 8017bd2:	81bb      	strh	r3, [r7, #12]
			if ( ( g_SysMap[my][mx-1] & 0xf0 ) != 0xf0 ) us_new = us_new - 2;
 8017bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8017c40 <MAP_calcMouseDir+0x204>)
 8017bd6:	781b      	ldrb	r3, [r3, #0]
 8017bd8:	461a      	mov	r2, r3
 8017bda:	4b1a      	ldr	r3, [pc, #104]	@ (8017c44 <MAP_calcMouseDir+0x208>)
 8017bdc:	781b      	ldrb	r3, [r3, #0]
 8017bde:	3b01      	subs	r3, #1
 8017be0:	4919      	ldr	r1, [pc, #100]	@ (8017c48 <MAP_calcMouseDir+0x20c>)
 8017be2:	0152      	lsls	r2, r2, #5
 8017be4:	440a      	add	r2, r1
 8017be6:	4413      	add	r3, r2
 8017be8:	781b      	ldrb	r3, [r3, #0]
 8017bea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017bee:	2bf0      	cmp	r3, #240	@ 0xf0
 8017bf0:	d002      	beq.n	8017bf8 <MAP_calcMouseDir+0x1bc>
 8017bf2:	89bb      	ldrh	r3, [r7, #12]
 8017bf4:	3b02      	subs	r3, #2
 8017bf6:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == WEST ) us_new = us_new - 1;
 8017bf8:	4b15      	ldr	r3, [pc, #84]	@ (8017c50 <MAP_calcMouseDir+0x214>)
 8017bfa:	781b      	ldrb	r3, [r3, #0]
 8017bfc:	2b03      	cmp	r3, #3
 8017bfe:	d102      	bne.n	8017c06 <MAP_calcMouseDir+0x1ca>
 8017c00:	89bb      	ldrh	r3, [r7, #12]
 8017c02:	3b01      	subs	r3, #1
 8017c04:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 8017c06:	89ba      	ldrh	r2, [r7, #12]
 8017c08:	89fb      	ldrh	r3, [r7, #14]
 8017c0a:	429a      	cmp	r2, r3
 8017c0c:	d203      	bcs.n	8017c16 <MAP_calcMouseDir+0x1da>
				us_base = us_new;
 8017c0e:	89bb      	ldrh	r3, [r7, #12]
 8017c10:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = WEST;
 8017c12:	2303      	movs	r3, #3
 8017c14:	72fb      	strb	r3, [r7, #11]
			}
		}
		
		*p_head = (enMAP_HEAD_DIR)( (en_tmpHead - en_Head) & 3 );		// 移動方向
 8017c16:	4b0e      	ldr	r3, [pc, #56]	@ (8017c50 <MAP_calcMouseDir+0x214>)
 8017c18:	781b      	ldrb	r3, [r3, #0]
 8017c1a:	7afa      	ldrb	r2, [r7, #11]
 8017c1c:	1ad3      	subs	r3, r2, r3
 8017c1e:	b2db      	uxtb	r3, r3
 8017c20:	f003 0303 	and.w	r3, r3, #3
 8017c24:	b2da      	uxtb	r2, r3
 8017c26:	683b      	ldr	r3, [r7, #0]
 8017c28:	701a      	strb	r2, [r3, #0]
	// 制御方法指定なし
	else{
		*p_head = (enMAP_HEAD_DIR)0;
	}

}
 8017c2a:	e002      	b.n	8017c32 <MAP_calcMouseDir+0x1f6>
		*p_head = (enMAP_HEAD_DIR)0;
 8017c2c:	683b      	ldr	r3, [r7, #0]
 8017c2e:	2200      	movs	r2, #0
 8017c30:	701a      	strb	r2, [r3, #0]
}
 8017c32:	bf00      	nop
 8017c34:	3714      	adds	r7, #20
 8017c36:	46bd      	mov	sp, r7
 8017c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c3c:	4770      	bx	lr
 8017c3e:	bf00      	nop
 8017c40:	2001ad8b 	.word	0x2001ad8b
 8017c44:	2001ad8c 	.word	0x2001ad8c
 8017c48:	2001b5a0 	.word	0x2001b5a0
 8017c4c:	2001ada0 	.word	0x2001ada0
 8017c50:	2001ad8a 	.word	0x2001ad8a

08017c54 <MAP_refMousePos>:

void MAP_refMousePos( 
	enMAP_HEAD_DIR 			en_head			///< [in] 進行方向
){
 8017c54:	b480      	push	{r7}
 8017c56:	b083      	sub	sp, #12
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	4603      	mov	r3, r0
 8017c5c:	71fb      	strb	r3, [r7, #7]
	switch( en_head ){
 8017c5e:	79fb      	ldrb	r3, [r7, #7]
 8017c60:	2b03      	cmp	r3, #3
 8017c62:	d827      	bhi.n	8017cb4 <MAP_refMousePos+0x60>
 8017c64:	a201      	add	r2, pc, #4	@ (adr r2, 8017c6c <MAP_refMousePos+0x18>)
 8017c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c6a:	bf00      	nop
 8017c6c:	08017c7d 	.word	0x08017c7d
 8017c70:	08017c8b 	.word	0x08017c8b
 8017c74:	08017c99 	.word	0x08017c99
 8017c78:	08017ca7 	.word	0x08017ca7
		case NORTH:
			my = my + 1;
 8017c7c:	4b11      	ldr	r3, [pc, #68]	@ (8017cc4 <MAP_refMousePos+0x70>)
 8017c7e:	781b      	ldrb	r3, [r3, #0]
 8017c80:	3301      	adds	r3, #1
 8017c82:	b2da      	uxtb	r2, r3
 8017c84:	4b0f      	ldr	r3, [pc, #60]	@ (8017cc4 <MAP_refMousePos+0x70>)
 8017c86:	701a      	strb	r2, [r3, #0]
			break;
 8017c88:	e015      	b.n	8017cb6 <MAP_refMousePos+0x62>
		case EAST:
			mx = mx + 1;
 8017c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8017cc8 <MAP_refMousePos+0x74>)
 8017c8c:	781b      	ldrb	r3, [r3, #0]
 8017c8e:	3301      	adds	r3, #1
 8017c90:	b2da      	uxtb	r2, r3
 8017c92:	4b0d      	ldr	r3, [pc, #52]	@ (8017cc8 <MAP_refMousePos+0x74>)
 8017c94:	701a      	strb	r2, [r3, #0]
			break;
 8017c96:	e00e      	b.n	8017cb6 <MAP_refMousePos+0x62>
		case SOUTH:
			my = my - 1;
 8017c98:	4b0a      	ldr	r3, [pc, #40]	@ (8017cc4 <MAP_refMousePos+0x70>)
 8017c9a:	781b      	ldrb	r3, [r3, #0]
 8017c9c:	3b01      	subs	r3, #1
 8017c9e:	b2da      	uxtb	r2, r3
 8017ca0:	4b08      	ldr	r3, [pc, #32]	@ (8017cc4 <MAP_refMousePos+0x70>)
 8017ca2:	701a      	strb	r2, [r3, #0]
			break;
 8017ca4:	e007      	b.n	8017cb6 <MAP_refMousePos+0x62>
		case WEST:
			mx = mx - 1;
 8017ca6:	4b08      	ldr	r3, [pc, #32]	@ (8017cc8 <MAP_refMousePos+0x74>)
 8017ca8:	781b      	ldrb	r3, [r3, #0]
 8017caa:	3b01      	subs	r3, #1
 8017cac:	b2da      	uxtb	r2, r3
 8017cae:	4b06      	ldr	r3, [pc, #24]	@ (8017cc8 <MAP_refMousePos+0x74>)
 8017cb0:	701a      	strb	r2, [r3, #0]
			break;
 8017cb2:	e000      	b.n	8017cb6 <MAP_refMousePos+0x62>
		default:
			break;
 8017cb4:	bf00      	nop
	}
}
 8017cb6:	bf00      	nop
 8017cb8:	370c      	adds	r7, #12
 8017cba:	46bd      	mov	sp, r7
 8017cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc0:	4770      	bx	lr
 8017cc2:	bf00      	nop
 8017cc4:	2001ad8b 	.word	0x2001ad8b
 8017cc8:	2001ad8c 	.word	0x2001ad8c

08017ccc <MAP_moveNextBlock>:

void MAP_moveNextBlock( 
	enMAP_HEAD_DIR 	en_head,		///< [in] 相対進行方向（マウス進行方向を北としている）
	bool*			p_type			///< [in] FALSE: １区間前進状態、TURE:半区間前進状態
){
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b082      	sub	sp, #8
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	4603      	mov	r3, r0
 8017cd4:	6039      	str	r1, [r7, #0]
 8017cd6:	71fb      	strb	r3, [r7, #7]
	*p_type = TRUE;
 8017cd8:	683b      	ldr	r3, [r7, #0]
 8017cda:	2201      	movs	r2, #1
 8017cdc:	701a      	strb	r2, [r3, #0]
	f_MoveBackDist = 0;				// 移動距離を加算値クリア
 8017cde:	4b4d      	ldr	r3, [pc, #308]	@ (8017e14 <MAP_moveNextBlock+0x148>)
 8017ce0:	f04f 0200 	mov.w	r2, #0
 8017ce4:	601a      	str	r2, [r3, #0]
	
	/* 動作 */
	switch( en_head ){
 8017ce6:	79fb      	ldrb	r3, [r7, #7]
 8017ce8:	2b03      	cmp	r3, #3
 8017cea:	f200 8082 	bhi.w	8017df2 <MAP_moveNextBlock+0x126>
 8017cee:	a201      	add	r2, pc, #4	@ (adr r2, 8017cf4 <MAP_moveNextBlock+0x28>)
 8017cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017cf4:	08017d05 	.word	0x08017d05
 8017cf8:	08017d15 	.word	0x08017d15
 8017cfc:	08017d3d 	.word	0x08017d3d
 8017d00:	08017d29 	.word	0x08017d29

		/* そのまま前進 */
		case NORTH:
			*p_type = FALSE;
 8017d04:	683b      	ldr	r3, [r7, #0]
 8017d06:	2200      	movs	r2, #0
 8017d08:	701a      	strb	r2, [r3, #0]
			MOT_goBlock_Const( 1 );				// 1区画前進
 8017d0a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017d0e:	f7f7 fced 	bl	800f6ec <MOT_goBlock_Const>
			break;
 8017d12:	e071      	b.n	8017df8 <MAP_moveNextBlock+0x12c>
		// 右に旋回する
		case EAST:
			MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8017d14:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8017e18 <MAP_moveNextBlock+0x14c>
 8017d18:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8017d1c:	f7f7 fcc2 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R90);					// 右90度旋回
 8017d20:	2000      	movs	r0, #0
 8017d22:	f7f7 fee9 	bl	800faf8 <MOT_turn>
			break;
 8017d26:	e067      	b.n	8017df8 <MAP_moveNextBlock+0x12c>
		// 左に旋回する
		case WEST:
			MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8017d28:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8017e18 <MAP_moveNextBlock+0x14c>
 8017d2c:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8017d30:	f7f7 fcb8 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_L90);					// 右90度旋回
 8017d34:	2001      	movs	r0, #1
 8017d36:	f7f7 fedf 	bl	800faf8 <MOT_turn>
			break;
 8017d3a:	e05d      	b.n	8017df8 <MAP_moveNextBlock+0x12c>
		// 反転して戻る
		case SOUTH:
			MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8017d3c:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8017e18 <MAP_moveNextBlock+0x14c>
 8017d40:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8017d44:	f7f7 fcae 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R180);					// 右180度旋回
 8017d48:	2002      	movs	r0, #2
 8017d4a:	f7f7 fed5 	bl	800faf8 <MOT_turn>
			
			/* 壁当て姿勢制御（後ろに壁があったらバック＋移動距離を加算する） */
			if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8017d4e:	4b33      	ldr	r3, [pc, #204]	@ (8017e1c <MAP_moveNextBlock+0x150>)
 8017d50:	781b      	ldrb	r3, [r3, #0]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d10e      	bne.n	8017d74 <MAP_moveNextBlock+0xa8>
 8017d56:	4b32      	ldr	r3, [pc, #200]	@ (8017e20 <MAP_moveNextBlock+0x154>)
 8017d58:	781b      	ldrb	r3, [r3, #0]
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	4b31      	ldr	r3, [pc, #196]	@ (8017e24 <MAP_moveNextBlock+0x158>)
 8017d5e:	781b      	ldrb	r3, [r3, #0]
 8017d60:	4619      	mov	r1, r3
 8017d62:	4a31      	ldr	r2, [pc, #196]	@ (8017e28 <MAP_moveNextBlock+0x15c>)
 8017d64:	0143      	lsls	r3, r0, #5
 8017d66:	4413      	add	r3, r2
 8017d68:	440b      	add	r3, r1
 8017d6a:	781b      	ldrb	r3, [r3, #0]
 8017d6c:	f003 0301 	and.w	r3, r3, #1
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d138      	bne.n	8017de6 <MAP_moveNextBlock+0x11a>
				( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8017d74:	4b29      	ldr	r3, [pc, #164]	@ (8017e1c <MAP_moveNextBlock+0x150>)
 8017d76:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8017d78:	2b01      	cmp	r3, #1
 8017d7a:	d10e      	bne.n	8017d9a <MAP_moveNextBlock+0xce>
				( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8017d7c:	4b28      	ldr	r3, [pc, #160]	@ (8017e20 <MAP_moveNextBlock+0x154>)
 8017d7e:	781b      	ldrb	r3, [r3, #0]
 8017d80:	4618      	mov	r0, r3
 8017d82:	4b28      	ldr	r3, [pc, #160]	@ (8017e24 <MAP_moveNextBlock+0x158>)
 8017d84:	781b      	ldrb	r3, [r3, #0]
 8017d86:	4619      	mov	r1, r3
 8017d88:	4a27      	ldr	r2, [pc, #156]	@ (8017e28 <MAP_moveNextBlock+0x15c>)
 8017d8a:	0143      	lsls	r3, r0, #5
 8017d8c:	4413      	add	r3, r2
 8017d8e:	440b      	add	r3, r1
 8017d90:	781b      	ldrb	r3, [r3, #0]
 8017d92:	f003 0302 	and.w	r3, r3, #2
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d125      	bne.n	8017de6 <MAP_moveNextBlock+0x11a>
				( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8017d9a:	4b20      	ldr	r3, [pc, #128]	@ (8017e1c <MAP_moveNextBlock+0x150>)
 8017d9c:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8017d9e:	2b02      	cmp	r3, #2
 8017da0:	d10e      	bne.n	8017dc0 <MAP_moveNextBlock+0xf4>
				( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8017da2:	4b1f      	ldr	r3, [pc, #124]	@ (8017e20 <MAP_moveNextBlock+0x154>)
 8017da4:	781b      	ldrb	r3, [r3, #0]
 8017da6:	4618      	mov	r0, r3
 8017da8:	4b1e      	ldr	r3, [pc, #120]	@ (8017e24 <MAP_moveNextBlock+0x158>)
 8017daa:	781b      	ldrb	r3, [r3, #0]
 8017dac:	4619      	mov	r1, r3
 8017dae:	4a1e      	ldr	r2, [pc, #120]	@ (8017e28 <MAP_moveNextBlock+0x15c>)
 8017db0:	0143      	lsls	r3, r0, #5
 8017db2:	4413      	add	r3, r2
 8017db4:	440b      	add	r3, r1
 8017db6:	781b      	ldrb	r3, [r3, #0]
 8017db8:	f003 0304 	and.w	r3, r3, #4
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d112      	bne.n	8017de6 <MAP_moveNextBlock+0x11a>
				( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8017dc0:	4b16      	ldr	r3, [pc, #88]	@ (8017e1c <MAP_moveNextBlock+0x150>)
 8017dc2:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8017dc4:	2b03      	cmp	r3, #3
 8017dc6:	d116      	bne.n	8017df6 <MAP_moveNextBlock+0x12a>
				( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8017dc8:	4b15      	ldr	r3, [pc, #84]	@ (8017e20 <MAP_moveNextBlock+0x154>)
 8017dca:	781b      	ldrb	r3, [r3, #0]
 8017dcc:	4618      	mov	r0, r3
 8017dce:	4b15      	ldr	r3, [pc, #84]	@ (8017e24 <MAP_moveNextBlock+0x158>)
 8017dd0:	781b      	ldrb	r3, [r3, #0]
 8017dd2:	4619      	mov	r1, r3
 8017dd4:	4a14      	ldr	r2, [pc, #80]	@ (8017e28 <MAP_moveNextBlock+0x15c>)
 8017dd6:	0143      	lsls	r3, r0, #5
 8017dd8:	4413      	add	r3, r2
 8017dda:	440b      	add	r3, r1
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	f003 0308 	and.w	r3, r3, #8
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d007      	beq.n	8017df6 <MAP_moveNextBlock+0x12a>
			){
				MOT_goHitBackWall();					// バックする
 8017de6:	f7f9 f9b1 	bl	801114c <MOT_goHitBackWall>
				f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8017dea:	4b0a      	ldr	r3, [pc, #40]	@ (8017e14 <MAP_moveNextBlock+0x148>)
 8017dec:	4a0f      	ldr	r2, [pc, #60]	@ (8017e2c <MAP_moveNextBlock+0x160>)
 8017dee:	601a      	str	r2, [r3, #0]
			}
			break;
 8017df0:	e001      	b.n	8017df6 <MAP_moveNextBlock+0x12a>
		default:
			break;
 8017df2:	bf00      	nop
 8017df4:	e000      	b.n	8017df8 <MAP_moveNextBlock+0x12c>
			break;
 8017df6:	bf00      	nop
		MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);			// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
		MAP_moveNextBlock(en_head, p_type);					// もう１度呼び出し（次の区画へ移動）
	}
	else{*/
		/* 進行方向更新 */
		en_Head = (enMAP_HEAD_DIR)( (en_Head + en_head) & (MAP_HEAD_DIR_MAX-1) );
 8017df8:	4b08      	ldr	r3, [pc, #32]	@ (8017e1c <MAP_moveNextBlock+0x150>)
 8017dfa:	781a      	ldrb	r2, [r3, #0]
 8017dfc:	79fb      	ldrb	r3, [r7, #7]
 8017dfe:	4413      	add	r3, r2
 8017e00:	b2db      	uxtb	r3, r3
 8017e02:	f003 0303 	and.w	r3, r3, #3
 8017e06:	b2da      	uxtb	r2, r3
 8017e08:	4b04      	ldr	r3, [pc, #16]	@ (8017e1c <MAP_moveNextBlock+0x150>)
 8017e0a:	701a      	strb	r2, [r3, #0]
//	}
}
 8017e0c:	bf00      	nop
 8017e0e:	3708      	adds	r7, #8
 8017e10:	46bd      	mov	sp, r7
 8017e12:	bd80      	pop	{r7, pc}
 8017e14:	2001ad90 	.word	0x2001ad90
 8017e18:	00000000 	.word	0x00000000
 8017e1c:	2001ad8a 	.word	0x2001ad8a
 8017e20:	2001ad8b 	.word	0x2001ad8b
 8017e24:	2001ad8c 	.word	0x2001ad8c
 8017e28:	2001b5a0 	.word	0x2001b5a0
 8017e2c:	3e6b851f 	.word	0x3e6b851f

08017e30 <MAP_moveNextBlock_Sla>:

void MAP_moveNextBlock_Sla( 
	enMAP_HEAD_DIR 	en_head,		///< [in] 相対進行方向（マウス進行方向を北としている
	bool*			p_type,			///< [in] FALSE: １区間前進状態、TURE:半区間前進状態
	bool			bl_resume		///< [in] FALSE: レジューム動作ではない、TURE:レジューム動作
){
 8017e30:	b580      	push	{r7, lr}
 8017e32:	b082      	sub	sp, #8
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	4603      	mov	r3, r0
 8017e38:	6039      	str	r1, [r7, #0]
 8017e3a:	71fb      	strb	r3, [r7, #7]
 8017e3c:	4613      	mov	r3, r2
 8017e3e:	71bb      	strb	r3, [r7, #6]
	*p_type = FALSE;
 8017e40:	683b      	ldr	r3, [r7, #0]
 8017e42:	2200      	movs	r2, #0
 8017e44:	701a      	strb	r2, [r3, #0]
	f_MoveBackDist = 0;				// 移動距離を加算値クリア
 8017e46:	4b7e      	ldr	r3, [pc, #504]	@ (8018040 <MAP_moveNextBlock_Sla+0x210>)
 8017e48:	f04f 0200 	mov.w	r2, #0
 8017e4c:	601a      	str	r2, [r3, #0]
	
	/* 動作 */
	switch( en_head ){
 8017e4e:	79fb      	ldrb	r3, [r7, #7]
 8017e50:	2b03      	cmp	r3, #3
 8017e52:	f200 8244 	bhi.w	80182de <MAP_moveNextBlock_Sla+0x4ae>
 8017e56:	a201      	add	r2, pc, #4	@ (adr r2, 8017e5c <MAP_moveNextBlock_Sla+0x2c>)
 8017e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e5c:	08017e6d 	.word	0x08017e6d
 8017e60:	08017e91 	.word	0x08017e91
 8017e64:	0801821d 	.word	0x0801821d
 8017e68:	0801806d 	.word	0x0801806d

		// そのまま前進
		case NORTH:
			
			/* レジューム動作ではない */
			if( bl_resume == FALSE ){
 8017e6c:	79bb      	ldrb	r3, [r7, #6]
 8017e6e:	f083 0301 	eor.w	r3, r3, #1
 8017e72:	b2db      	uxtb	r3, r3
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d004      	beq.n	8017e82 <MAP_moveNextBlock_Sla+0x52>
		
				MOT_goBlock_Const( 1 );					// 1区画前進
 8017e78:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017e7c:	f7f7 fc36 	bl	800f6ec <MOT_goBlock_Const>
			/* レジューム動作 */
			else{
				MOT_goBlock_FinSpeed( 1.0f, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
//				uc_SlaCnt = 0;									// スラロームしていない
			}
			break;
 8017e80:	e22e      	b.n	80182e0 <MAP_moveNextBlock_Sla+0x4b0>
				MOT_goBlock_FinSpeed( 1.0f, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 8017e82:	eddf 0a70 	vldr	s1, [pc, #448]	@ 8018044 <MAP_moveNextBlock_Sla+0x214>
 8017e86:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017e8a:	f7f7 fc0b 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			break;
 8017e8e:	e227      	b.n	80182e0 <MAP_moveNextBlock_Sla+0x4b0>

		// 右にスラロームする
		case EAST:
			if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8017e90:	4b6d      	ldr	r3, [pc, #436]	@ (8018048 <MAP_moveNextBlock_Sla+0x218>)
 8017e92:	781b      	ldrb	r3, [r3, #0]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d10e      	bne.n	8017eb6 <MAP_moveNextBlock_Sla+0x86>
 8017e98:	4b6c      	ldr	r3, [pc, #432]	@ (801804c <MAP_moveNextBlock_Sla+0x21c>)
 8017e9a:	781b      	ldrb	r3, [r3, #0]
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	4b6c      	ldr	r3, [pc, #432]	@ (8018050 <MAP_moveNextBlock_Sla+0x220>)
 8017ea0:	781b      	ldrb	r3, [r3, #0]
 8017ea2:	4619      	mov	r1, r3
 8017ea4:	4a6b      	ldr	r2, [pc, #428]	@ (8018054 <MAP_moveNextBlock_Sla+0x224>)
 8017ea6:	0143      	lsls	r3, r0, #5
 8017ea8:	4413      	add	r3, r2
 8017eaa:	440b      	add	r3, r1
 8017eac:	781b      	ldrb	r3, [r3, #0]
 8017eae:	f003 0302 	and.w	r3, r3, #2
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d138      	bne.n	8017f28 <MAP_moveNextBlock_Sla+0xf8>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8017eb6:	4b64      	ldr	r3, [pc, #400]	@ (8018048 <MAP_moveNextBlock_Sla+0x218>)
 8017eb8:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8017eba:	2b01      	cmp	r3, #1
 8017ebc:	d10e      	bne.n	8017edc <MAP_moveNextBlock_Sla+0xac>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8017ebe:	4b63      	ldr	r3, [pc, #396]	@ (801804c <MAP_moveNextBlock_Sla+0x21c>)
 8017ec0:	781b      	ldrb	r3, [r3, #0]
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	4b62      	ldr	r3, [pc, #392]	@ (8018050 <MAP_moveNextBlock_Sla+0x220>)
 8017ec6:	781b      	ldrb	r3, [r3, #0]
 8017ec8:	4619      	mov	r1, r3
 8017eca:	4a62      	ldr	r2, [pc, #392]	@ (8018054 <MAP_moveNextBlock_Sla+0x224>)
 8017ecc:	0143      	lsls	r3, r0, #5
 8017ece:	4413      	add	r3, r2
 8017ed0:	440b      	add	r3, r1
 8017ed2:	781b      	ldrb	r3, [r3, #0]
 8017ed4:	f003 0304 	and.w	r3, r3, #4
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d125      	bne.n	8017f28 <MAP_moveNextBlock_Sla+0xf8>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8017edc:	4b5a      	ldr	r3, [pc, #360]	@ (8018048 <MAP_moveNextBlock_Sla+0x218>)
 8017ede:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8017ee0:	2b02      	cmp	r3, #2
 8017ee2:	d10e      	bne.n	8017f02 <MAP_moveNextBlock_Sla+0xd2>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8017ee4:	4b59      	ldr	r3, [pc, #356]	@ (801804c <MAP_moveNextBlock_Sla+0x21c>)
 8017ee6:	781b      	ldrb	r3, [r3, #0]
 8017ee8:	4618      	mov	r0, r3
 8017eea:	4b59      	ldr	r3, [pc, #356]	@ (8018050 <MAP_moveNextBlock_Sla+0x220>)
 8017eec:	781b      	ldrb	r3, [r3, #0]
 8017eee:	4619      	mov	r1, r3
 8017ef0:	4a58      	ldr	r2, [pc, #352]	@ (8018054 <MAP_moveNextBlock_Sla+0x224>)
 8017ef2:	0143      	lsls	r3, r0, #5
 8017ef4:	4413      	add	r3, r2
 8017ef6:	440b      	add	r3, r1
 8017ef8:	781b      	ldrb	r3, [r3, #0]
 8017efa:	f003 0308 	and.w	r3, r3, #8
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d112      	bne.n	8017f28 <MAP_moveNextBlock_Sla+0xf8>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8017f02:	4b51      	ldr	r3, [pc, #324]	@ (8018048 <MAP_moveNextBlock_Sla+0x218>)
 8017f04:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8017f06:	2b03      	cmp	r3, #3
 8017f08:	d112      	bne.n	8017f30 <MAP_moveNextBlock_Sla+0x100>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8017f0a:	4b50      	ldr	r3, [pc, #320]	@ (801804c <MAP_moveNextBlock_Sla+0x21c>)
 8017f0c:	781b      	ldrb	r3, [r3, #0]
 8017f0e:	4618      	mov	r0, r3
 8017f10:	4b4f      	ldr	r3, [pc, #316]	@ (8018050 <MAP_moveNextBlock_Sla+0x220>)
 8017f12:	781b      	ldrb	r3, [r3, #0]
 8017f14:	4619      	mov	r1, r3
 8017f16:	4a4f      	ldr	r2, [pc, #316]	@ (8018054 <MAP_moveNextBlock_Sla+0x224>)
 8017f18:	0143      	lsls	r3, r0, #5
 8017f1a:	4413      	add	r3, r2
 8017f1c:	440b      	add	r3, r1
 8017f1e:	781b      	ldrb	r3, [r3, #0]
 8017f20:	f003 0301 	and.w	r3, r3, #1
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d003      	beq.n	8017f30 <MAP_moveNextBlock_Sla+0x100>
				){
				uc_DistControl = 0.01;
 8017f28:	4b4b      	ldr	r3, [pc, #300]	@ (8018058 <MAP_moveNextBlock_Sla+0x228>)
 8017f2a:	2200      	movs	r2, #0
 8017f2c:	701a      	strb	r2, [r3, #0]
 8017f2e:	e002      	b.n	8017f36 <MAP_moveNextBlock_Sla+0x106>
				}
			else{
				uc_DistControl = 0;
 8017f30:	4b49      	ldr	r3, [pc, #292]	@ (8018058 <MAP_moveNextBlock_Sla+0x228>)
 8017f32:	2200      	movs	r2, #0
 8017f34:	701a      	strb	r2, [r3, #0]
			}
			if( uc_SlaCnt < SLA_Count ){
 8017f36:	4b49      	ldr	r3, [pc, #292]	@ (801805c <MAP_moveNextBlock_Sla+0x22c>)
 8017f38:	781a      	ldrb	r2, [r3, #0]
 8017f3a:	4b49      	ldr	r3, [pc, #292]	@ (8018060 <MAP_moveNextBlock_Sla+0x230>)
 8017f3c:	781b      	ldrb	r3, [r3, #0]
 8017f3e:	429a      	cmp	r2, r3
 8017f40:	d20e      	bcs.n	8017f60 <MAP_moveNextBlock_Sla+0x130>
				MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8017f42:	2000      	movs	r0, #0
 8017f44:	f7eb ff54 	bl	8003df0 <PARAM_getSra>
 8017f48:	4603      	mov	r3, r0
 8017f4a:	4619      	mov	r1, r3
 8017f4c:	2000      	movs	r0, #0
 8017f4e:	f7f9 f95f 	bl	8011210 <MOT_goSla>
				uc_SlaCnt++;
 8017f52:	4b42      	ldr	r3, [pc, #264]	@ (801805c <MAP_moveNextBlock_Sla+0x22c>)
 8017f54:	781b      	ldrb	r3, [r3, #0]
 8017f56:	3301      	adds	r3, #1
 8017f58:	b2da      	uxtb	r2, r3
 8017f5a:	4b40      	ldr	r3, [pc, #256]	@ (801805c <MAP_moveNextBlock_Sla+0x22c>)
 8017f5c:	701a      	strb	r2, [r3, #0]
				else{
					MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
					uc_SlaCnt++;
				}
			}
			break;
 8017f5e:	e1bf      	b.n	80182e0 <MAP_moveNextBlock_Sla+0x4b0>
				if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8017f60:	4b39      	ldr	r3, [pc, #228]	@ (8018048 <MAP_moveNextBlock_Sla+0x218>)
 8017f62:	781b      	ldrb	r3, [r3, #0]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d10e      	bne.n	8017f86 <MAP_moveNextBlock_Sla+0x156>
 8017f68:	4b38      	ldr	r3, [pc, #224]	@ (801804c <MAP_moveNextBlock_Sla+0x21c>)
 8017f6a:	781b      	ldrb	r3, [r3, #0]
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	4b38      	ldr	r3, [pc, #224]	@ (8018050 <MAP_moveNextBlock_Sla+0x220>)
 8017f70:	781b      	ldrb	r3, [r3, #0]
 8017f72:	4619      	mov	r1, r3
 8017f74:	4a37      	ldr	r2, [pc, #220]	@ (8018054 <MAP_moveNextBlock_Sla+0x224>)
 8017f76:	0143      	lsls	r3, r0, #5
 8017f78:	4413      	add	r3, r2
 8017f7a:	440b      	add	r3, r1
 8017f7c:	781b      	ldrb	r3, [r3, #0]
 8017f7e:	f003 0308 	and.w	r3, r3, #8
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d138      	bne.n	8017ff8 <MAP_moveNextBlock_Sla+0x1c8>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8017f86:	4b30      	ldr	r3, [pc, #192]	@ (8018048 <MAP_moveNextBlock_Sla+0x218>)
 8017f88:	781b      	ldrb	r3, [r3, #0]
				if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8017f8a:	2b01      	cmp	r3, #1
 8017f8c:	d10e      	bne.n	8017fac <MAP_moveNextBlock_Sla+0x17c>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8017f8e:	4b2f      	ldr	r3, [pc, #188]	@ (801804c <MAP_moveNextBlock_Sla+0x21c>)
 8017f90:	781b      	ldrb	r3, [r3, #0]
 8017f92:	4618      	mov	r0, r3
 8017f94:	4b2e      	ldr	r3, [pc, #184]	@ (8018050 <MAP_moveNextBlock_Sla+0x220>)
 8017f96:	781b      	ldrb	r3, [r3, #0]
 8017f98:	4619      	mov	r1, r3
 8017f9a:	4a2e      	ldr	r2, [pc, #184]	@ (8018054 <MAP_moveNextBlock_Sla+0x224>)
 8017f9c:	0143      	lsls	r3, r0, #5
 8017f9e:	4413      	add	r3, r2
 8017fa0:	440b      	add	r3, r1
 8017fa2:	781b      	ldrb	r3, [r3, #0]
 8017fa4:	f003 0301 	and.w	r3, r3, #1
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d125      	bne.n	8017ff8 <MAP_moveNextBlock_Sla+0x1c8>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8017fac:	4b26      	ldr	r3, [pc, #152]	@ (8018048 <MAP_moveNextBlock_Sla+0x218>)
 8017fae:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8017fb0:	2b02      	cmp	r3, #2
 8017fb2:	d10e      	bne.n	8017fd2 <MAP_moveNextBlock_Sla+0x1a2>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8017fb4:	4b25      	ldr	r3, [pc, #148]	@ (801804c <MAP_moveNextBlock_Sla+0x21c>)
 8017fb6:	781b      	ldrb	r3, [r3, #0]
 8017fb8:	4618      	mov	r0, r3
 8017fba:	4b25      	ldr	r3, [pc, #148]	@ (8018050 <MAP_moveNextBlock_Sla+0x220>)
 8017fbc:	781b      	ldrb	r3, [r3, #0]
 8017fbe:	4619      	mov	r1, r3
 8017fc0:	4a24      	ldr	r2, [pc, #144]	@ (8018054 <MAP_moveNextBlock_Sla+0x224>)
 8017fc2:	0143      	lsls	r3, r0, #5
 8017fc4:	4413      	add	r3, r2
 8017fc6:	440b      	add	r3, r1
 8017fc8:	781b      	ldrb	r3, [r3, #0]
 8017fca:	f003 0302 	and.w	r3, r3, #2
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d112      	bne.n	8017ff8 <MAP_moveNextBlock_Sla+0x1c8>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8017fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8018048 <MAP_moveNextBlock_Sla+0x218>)
 8017fd4:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8017fd6:	2b03      	cmp	r3, #3
 8017fd8:	d123      	bne.n	8018022 <MAP_moveNextBlock_Sla+0x1f2>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8017fda:	4b1c      	ldr	r3, [pc, #112]	@ (801804c <MAP_moveNextBlock_Sla+0x21c>)
 8017fdc:	781b      	ldrb	r3, [r3, #0]
 8017fde:	4618      	mov	r0, r3
 8017fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8018050 <MAP_moveNextBlock_Sla+0x220>)
 8017fe2:	781b      	ldrb	r3, [r3, #0]
 8017fe4:	4619      	mov	r1, r3
 8017fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8018054 <MAP_moveNextBlock_Sla+0x224>)
 8017fe8:	0143      	lsls	r3, r0, #5
 8017fea:	4413      	add	r3, r2
 8017fec:	440b      	add	r3, r1
 8017fee:	781b      	ldrb	r3, [r3, #0]
 8017ff0:	f003 0304 	and.w	r3, r3, #4
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d014      	beq.n	8018022 <MAP_moveNextBlock_Sla+0x1f2>
					MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8017ff8:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8018064 <MAP_moveNextBlock_Sla+0x234>
 8017ffc:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8018000:	f7f7 fb50 	bl	800f6a4 <MOT_goBlock_FinSpeed>
					MOT_turn(MOT_R90);						// 右90度旋回
 8018004:	2000      	movs	r0, #0
 8018006:	f7f7 fd77 	bl	800faf8 <MOT_turn>
					uc_SlaCnt = 0;
 801800a:	4b14      	ldr	r3, [pc, #80]	@ (801805c <MAP_moveNextBlock_Sla+0x22c>)
 801800c:	2200      	movs	r2, #0
 801800e:	701a      	strb	r2, [r3, #0]
					MOT_goHitBackWall();					// バックする
 8018010:	f7f9 f89c 	bl	801114c <MOT_goHitBackWall>
					f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8018014:	4b0a      	ldr	r3, [pc, #40]	@ (8018040 <MAP_moveNextBlock_Sla+0x210>)
 8018016:	4a14      	ldr	r2, [pc, #80]	@ (8018068 <MAP_moveNextBlock_Sla+0x238>)
 8018018:	601a      	str	r2, [r3, #0]
					*p_type = TRUE;							// 次は半区間（＋バック）分進める
 801801a:	683b      	ldr	r3, [r7, #0]
 801801c:	2201      	movs	r2, #1
 801801e:	701a      	strb	r2, [r3, #0]
			break;
 8018020:	e15e      	b.n	80182e0 <MAP_moveNextBlock_Sla+0x4b0>
					MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8018022:	2000      	movs	r0, #0
 8018024:	f7eb fee4 	bl	8003df0 <PARAM_getSra>
 8018028:	4603      	mov	r3, r0
 801802a:	4619      	mov	r1, r3
 801802c:	2000      	movs	r0, #0
 801802e:	f7f9 f8ef 	bl	8011210 <MOT_goSla>
					uc_SlaCnt++;
 8018032:	4b0a      	ldr	r3, [pc, #40]	@ (801805c <MAP_moveNextBlock_Sla+0x22c>)
 8018034:	781b      	ldrb	r3, [r3, #0]
 8018036:	3301      	adds	r3, #1
 8018038:	b2da      	uxtb	r2, r3
 801803a:	4b08      	ldr	r3, [pc, #32]	@ (801805c <MAP_moveNextBlock_Sla+0x22c>)
 801803c:	701a      	strb	r2, [r3, #0]
			break;
 801803e:	e14f      	b.n	80182e0 <MAP_moveNextBlock_Sla+0x4b0>
 8018040:	2001ad90 	.word	0x2001ad90
 8018044:	3e99999a 	.word	0x3e99999a
 8018048:	2001ad8a 	.word	0x2001ad8a
 801804c:	2001ad8b 	.word	0x2001ad8b
 8018050:	2001ad8c 	.word	0x2001ad8c
 8018054:	2001b5a0 	.word	0x2001b5a0
 8018058:	20000400 	.word	0x20000400
 801805c:	2001ad94 	.word	0x2001ad94
 8018060:	2000001c 	.word	0x2000001c
 8018064:	00000000 	.word	0x00000000
 8018068:	3e6b851f 	.word	0x3e6b851f

		// 左にスラロームする
		case WEST:
			if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 801806c:	4ba3      	ldr	r3, [pc, #652]	@ (80182fc <MAP_moveNextBlock_Sla+0x4cc>)
 801806e:	781b      	ldrb	r3, [r3, #0]
 8018070:	2b00      	cmp	r3, #0
 8018072:	d10e      	bne.n	8018092 <MAP_moveNextBlock_Sla+0x262>
 8018074:	4ba2      	ldr	r3, [pc, #648]	@ (8018300 <MAP_moveNextBlock_Sla+0x4d0>)
 8018076:	781b      	ldrb	r3, [r3, #0]
 8018078:	4618      	mov	r0, r3
 801807a:	4ba2      	ldr	r3, [pc, #648]	@ (8018304 <MAP_moveNextBlock_Sla+0x4d4>)
 801807c:	781b      	ldrb	r3, [r3, #0]
 801807e:	4619      	mov	r1, r3
 8018080:	4aa1      	ldr	r2, [pc, #644]	@ (8018308 <MAP_moveNextBlock_Sla+0x4d8>)
 8018082:	0143      	lsls	r3, r0, #5
 8018084:	4413      	add	r3, r2
 8018086:	440b      	add	r3, r1
 8018088:	781b      	ldrb	r3, [r3, #0]
 801808a:	f003 0308 	and.w	r3, r3, #8
 801808e:	2b00      	cmp	r3, #0
 8018090:	d138      	bne.n	8018104 <MAP_moveNextBlock_Sla+0x2d4>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8018092:	4b9a      	ldr	r3, [pc, #616]	@ (80182fc <MAP_moveNextBlock_Sla+0x4cc>)
 8018094:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8018096:	2b01      	cmp	r3, #1
 8018098:	d10e      	bne.n	80180b8 <MAP_moveNextBlock_Sla+0x288>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 801809a:	4b99      	ldr	r3, [pc, #612]	@ (8018300 <MAP_moveNextBlock_Sla+0x4d0>)
 801809c:	781b      	ldrb	r3, [r3, #0]
 801809e:	4618      	mov	r0, r3
 80180a0:	4b98      	ldr	r3, [pc, #608]	@ (8018304 <MAP_moveNextBlock_Sla+0x4d4>)
 80180a2:	781b      	ldrb	r3, [r3, #0]
 80180a4:	4619      	mov	r1, r3
 80180a6:	4a98      	ldr	r2, [pc, #608]	@ (8018308 <MAP_moveNextBlock_Sla+0x4d8>)
 80180a8:	0143      	lsls	r3, r0, #5
 80180aa:	4413      	add	r3, r2
 80180ac:	440b      	add	r3, r1
 80180ae:	781b      	ldrb	r3, [r3, #0]
 80180b0:	f003 0301 	and.w	r3, r3, #1
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d125      	bne.n	8018104 <MAP_moveNextBlock_Sla+0x2d4>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 80180b8:	4b90      	ldr	r3, [pc, #576]	@ (80182fc <MAP_moveNextBlock_Sla+0x4cc>)
 80180ba:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 80180bc:	2b02      	cmp	r3, #2
 80180be:	d10e      	bne.n	80180de <MAP_moveNextBlock_Sla+0x2ae>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 80180c0:	4b8f      	ldr	r3, [pc, #572]	@ (8018300 <MAP_moveNextBlock_Sla+0x4d0>)
 80180c2:	781b      	ldrb	r3, [r3, #0]
 80180c4:	4618      	mov	r0, r3
 80180c6:	4b8f      	ldr	r3, [pc, #572]	@ (8018304 <MAP_moveNextBlock_Sla+0x4d4>)
 80180c8:	781b      	ldrb	r3, [r3, #0]
 80180ca:	4619      	mov	r1, r3
 80180cc:	4a8e      	ldr	r2, [pc, #568]	@ (8018308 <MAP_moveNextBlock_Sla+0x4d8>)
 80180ce:	0143      	lsls	r3, r0, #5
 80180d0:	4413      	add	r3, r2
 80180d2:	440b      	add	r3, r1
 80180d4:	781b      	ldrb	r3, [r3, #0]
 80180d6:	f003 0302 	and.w	r3, r3, #2
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d112      	bne.n	8018104 <MAP_moveNextBlock_Sla+0x2d4>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 80180de:	4b87      	ldr	r3, [pc, #540]	@ (80182fc <MAP_moveNextBlock_Sla+0x4cc>)
 80180e0:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 80180e2:	2b03      	cmp	r3, #3
 80180e4:	d112      	bne.n	801810c <MAP_moveNextBlock_Sla+0x2dc>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 80180e6:	4b86      	ldr	r3, [pc, #536]	@ (8018300 <MAP_moveNextBlock_Sla+0x4d0>)
 80180e8:	781b      	ldrb	r3, [r3, #0]
 80180ea:	4618      	mov	r0, r3
 80180ec:	4b85      	ldr	r3, [pc, #532]	@ (8018304 <MAP_moveNextBlock_Sla+0x4d4>)
 80180ee:	781b      	ldrb	r3, [r3, #0]
 80180f0:	4619      	mov	r1, r3
 80180f2:	4a85      	ldr	r2, [pc, #532]	@ (8018308 <MAP_moveNextBlock_Sla+0x4d8>)
 80180f4:	0143      	lsls	r3, r0, #5
 80180f6:	4413      	add	r3, r2
 80180f8:	440b      	add	r3, r1
 80180fa:	781b      	ldrb	r3, [r3, #0]
 80180fc:	f003 0304 	and.w	r3, r3, #4
 8018100:	2b00      	cmp	r3, #0
 8018102:	d003      	beq.n	801810c <MAP_moveNextBlock_Sla+0x2dc>
				){
				uc_DistControl = 0.01;
 8018104:	4b81      	ldr	r3, [pc, #516]	@ (801830c <MAP_moveNextBlock_Sla+0x4dc>)
 8018106:	2200      	movs	r2, #0
 8018108:	701a      	strb	r2, [r3, #0]
 801810a:	e002      	b.n	8018112 <MAP_moveNextBlock_Sla+0x2e2>
				}
			else{
				uc_DistControl = 0;
 801810c:	4b7f      	ldr	r3, [pc, #508]	@ (801830c <MAP_moveNextBlock_Sla+0x4dc>)
 801810e:	2200      	movs	r2, #0
 8018110:	701a      	strb	r2, [r3, #0]
			}
			if( uc_SlaCnt < SLA_Count ){
 8018112:	4b7f      	ldr	r3, [pc, #508]	@ (8018310 <MAP_moveNextBlock_Sla+0x4e0>)
 8018114:	781a      	ldrb	r2, [r3, #0]
 8018116:	4b7f      	ldr	r3, [pc, #508]	@ (8018314 <MAP_moveNextBlock_Sla+0x4e4>)
 8018118:	781b      	ldrb	r3, [r3, #0]
 801811a:	429a      	cmp	r2, r3
 801811c:	d20e      	bcs.n	801813c <MAP_moveNextBlock_Sla+0x30c>
				MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 801811e:	2000      	movs	r0, #0
 8018120:	f7eb fe66 	bl	8003df0 <PARAM_getSra>
 8018124:	4603      	mov	r3, r0
 8018126:	4619      	mov	r1, r3
 8018128:	2001      	movs	r0, #1
 801812a:	f7f9 f871 	bl	8011210 <MOT_goSla>
				uc_SlaCnt++;
 801812e:	4b78      	ldr	r3, [pc, #480]	@ (8018310 <MAP_moveNextBlock_Sla+0x4e0>)
 8018130:	781b      	ldrb	r3, [r3, #0]
 8018132:	3301      	adds	r3, #1
 8018134:	b2da      	uxtb	r2, r3
 8018136:	4b76      	ldr	r3, [pc, #472]	@ (8018310 <MAP_moveNextBlock_Sla+0x4e0>)
 8018138:	701a      	strb	r2, [r3, #0]
				else{
					MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
					uc_SlaCnt++;
				}
			}
			break;
 801813a:	e0d1      	b.n	80182e0 <MAP_moveNextBlock_Sla+0x4b0>
				if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 801813c:	4b6f      	ldr	r3, [pc, #444]	@ (80182fc <MAP_moveNextBlock_Sla+0x4cc>)
 801813e:	781b      	ldrb	r3, [r3, #0]
 8018140:	2b00      	cmp	r3, #0
 8018142:	d10e      	bne.n	8018162 <MAP_moveNextBlock_Sla+0x332>
 8018144:	4b6e      	ldr	r3, [pc, #440]	@ (8018300 <MAP_moveNextBlock_Sla+0x4d0>)
 8018146:	781b      	ldrb	r3, [r3, #0]
 8018148:	4618      	mov	r0, r3
 801814a:	4b6e      	ldr	r3, [pc, #440]	@ (8018304 <MAP_moveNextBlock_Sla+0x4d4>)
 801814c:	781b      	ldrb	r3, [r3, #0]
 801814e:	4619      	mov	r1, r3
 8018150:	4a6d      	ldr	r2, [pc, #436]	@ (8018308 <MAP_moveNextBlock_Sla+0x4d8>)
 8018152:	0143      	lsls	r3, r0, #5
 8018154:	4413      	add	r3, r2
 8018156:	440b      	add	r3, r1
 8018158:	781b      	ldrb	r3, [r3, #0]
 801815a:	f003 0302 	and.w	r3, r3, #2
 801815e:	2b00      	cmp	r3, #0
 8018160:	d138      	bne.n	80181d4 <MAP_moveNextBlock_Sla+0x3a4>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8018162:	4b66      	ldr	r3, [pc, #408]	@ (80182fc <MAP_moveNextBlock_Sla+0x4cc>)
 8018164:	781b      	ldrb	r3, [r3, #0]
				if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8018166:	2b01      	cmp	r3, #1
 8018168:	d10e      	bne.n	8018188 <MAP_moveNextBlock_Sla+0x358>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 801816a:	4b65      	ldr	r3, [pc, #404]	@ (8018300 <MAP_moveNextBlock_Sla+0x4d0>)
 801816c:	781b      	ldrb	r3, [r3, #0]
 801816e:	4618      	mov	r0, r3
 8018170:	4b64      	ldr	r3, [pc, #400]	@ (8018304 <MAP_moveNextBlock_Sla+0x4d4>)
 8018172:	781b      	ldrb	r3, [r3, #0]
 8018174:	4619      	mov	r1, r3
 8018176:	4a64      	ldr	r2, [pc, #400]	@ (8018308 <MAP_moveNextBlock_Sla+0x4d8>)
 8018178:	0143      	lsls	r3, r0, #5
 801817a:	4413      	add	r3, r2
 801817c:	440b      	add	r3, r1
 801817e:	781b      	ldrb	r3, [r3, #0]
 8018180:	f003 0304 	and.w	r3, r3, #4
 8018184:	2b00      	cmp	r3, #0
 8018186:	d125      	bne.n	80181d4 <MAP_moveNextBlock_Sla+0x3a4>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8018188:	4b5c      	ldr	r3, [pc, #368]	@ (80182fc <MAP_moveNextBlock_Sla+0x4cc>)
 801818a:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 801818c:	2b02      	cmp	r3, #2
 801818e:	d10e      	bne.n	80181ae <MAP_moveNextBlock_Sla+0x37e>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8018190:	4b5b      	ldr	r3, [pc, #364]	@ (8018300 <MAP_moveNextBlock_Sla+0x4d0>)
 8018192:	781b      	ldrb	r3, [r3, #0]
 8018194:	4618      	mov	r0, r3
 8018196:	4b5b      	ldr	r3, [pc, #364]	@ (8018304 <MAP_moveNextBlock_Sla+0x4d4>)
 8018198:	781b      	ldrb	r3, [r3, #0]
 801819a:	4619      	mov	r1, r3
 801819c:	4a5a      	ldr	r2, [pc, #360]	@ (8018308 <MAP_moveNextBlock_Sla+0x4d8>)
 801819e:	0143      	lsls	r3, r0, #5
 80181a0:	4413      	add	r3, r2
 80181a2:	440b      	add	r3, r1
 80181a4:	781b      	ldrb	r3, [r3, #0]
 80181a6:	f003 0308 	and.w	r3, r3, #8
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d112      	bne.n	80181d4 <MAP_moveNextBlock_Sla+0x3a4>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 80181ae:	4b53      	ldr	r3, [pc, #332]	@ (80182fc <MAP_moveNextBlock_Sla+0x4cc>)
 80181b0:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 80181b2:	2b03      	cmp	r3, #3
 80181b4:	d123      	bne.n	80181fe <MAP_moveNextBlock_Sla+0x3ce>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 80181b6:	4b52      	ldr	r3, [pc, #328]	@ (8018300 <MAP_moveNextBlock_Sla+0x4d0>)
 80181b8:	781b      	ldrb	r3, [r3, #0]
 80181ba:	4618      	mov	r0, r3
 80181bc:	4b51      	ldr	r3, [pc, #324]	@ (8018304 <MAP_moveNextBlock_Sla+0x4d4>)
 80181be:	781b      	ldrb	r3, [r3, #0]
 80181c0:	4619      	mov	r1, r3
 80181c2:	4a51      	ldr	r2, [pc, #324]	@ (8018308 <MAP_moveNextBlock_Sla+0x4d8>)
 80181c4:	0143      	lsls	r3, r0, #5
 80181c6:	4413      	add	r3, r2
 80181c8:	440b      	add	r3, r1
 80181ca:	781b      	ldrb	r3, [r3, #0]
 80181cc:	f003 0301 	and.w	r3, r3, #1
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d014      	beq.n	80181fe <MAP_moveNextBlock_Sla+0x3ce>
					MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 80181d4:	eddf 0a50 	vldr	s1, [pc, #320]	@ 8018318 <MAP_moveNextBlock_Sla+0x4e8>
 80181d8:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80181dc:	f7f7 fa62 	bl	800f6a4 <MOT_goBlock_FinSpeed>
					MOT_turn(MOT_L90);					// 右90度旋回
 80181e0:	2001      	movs	r0, #1
 80181e2:	f7f7 fc89 	bl	800faf8 <MOT_turn>
					uc_SlaCnt = 0;
 80181e6:	4b4a      	ldr	r3, [pc, #296]	@ (8018310 <MAP_moveNextBlock_Sla+0x4e0>)
 80181e8:	2200      	movs	r2, #0
 80181ea:	701a      	strb	r2, [r3, #0]
					MOT_goHitBackWall();					// バックする
 80181ec:	f7f8 ffae 	bl	801114c <MOT_goHitBackWall>
					f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 80181f0:	4b4a      	ldr	r3, [pc, #296]	@ (801831c <MAP_moveNextBlock_Sla+0x4ec>)
 80181f2:	4a4b      	ldr	r2, [pc, #300]	@ (8018320 <MAP_moveNextBlock_Sla+0x4f0>)
 80181f4:	601a      	str	r2, [r3, #0]
					*p_type = TRUE;							// 次は半区間（＋バック）分進める
 80181f6:	683b      	ldr	r3, [r7, #0]
 80181f8:	2201      	movs	r2, #1
 80181fa:	701a      	strb	r2, [r3, #0]
			break;
 80181fc:	e070      	b.n	80182e0 <MAP_moveNextBlock_Sla+0x4b0>
					MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 80181fe:	2000      	movs	r0, #0
 8018200:	f7eb fdf6 	bl	8003df0 <PARAM_getSra>
 8018204:	4603      	mov	r3, r0
 8018206:	4619      	mov	r1, r3
 8018208:	2001      	movs	r0, #1
 801820a:	f7f9 f801 	bl	8011210 <MOT_goSla>
					uc_SlaCnt++;
 801820e:	4b40      	ldr	r3, [pc, #256]	@ (8018310 <MAP_moveNextBlock_Sla+0x4e0>)
 8018210:	781b      	ldrb	r3, [r3, #0]
 8018212:	3301      	adds	r3, #1
 8018214:	b2da      	uxtb	r2, r3
 8018216:	4b3e      	ldr	r3, [pc, #248]	@ (8018310 <MAP_moveNextBlock_Sla+0x4e0>)
 8018218:	701a      	strb	r2, [r3, #0]
			break;
 801821a:	e061      	b.n	80182e0 <MAP_moveNextBlock_Sla+0x4b0>

		// 反転して戻る
		case SOUTH:
			MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 801821c:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8018318 <MAP_moveNextBlock_Sla+0x4e8>
 8018220:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8018224:	f7f7 fa3e 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R180);									// 右180度旋回
 8018228:	2002      	movs	r0, #2
 801822a:	f7f7 fc65 	bl	800faf8 <MOT_turn>
			uc_SlaCnt = 0;
 801822e:	4b38      	ldr	r3, [pc, #224]	@ (8018310 <MAP_moveNextBlock_Sla+0x4e0>)
 8018230:	2200      	movs	r2, #0
 8018232:	701a      	strb	r2, [r3, #0]
			
			/* 壁当て姿勢制御（後ろに壁があったらバック＋移動距離を加算する） */
			if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8018234:	4b31      	ldr	r3, [pc, #196]	@ (80182fc <MAP_moveNextBlock_Sla+0x4cc>)
 8018236:	781b      	ldrb	r3, [r3, #0]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d10e      	bne.n	801825a <MAP_moveNextBlock_Sla+0x42a>
 801823c:	4b30      	ldr	r3, [pc, #192]	@ (8018300 <MAP_moveNextBlock_Sla+0x4d0>)
 801823e:	781b      	ldrb	r3, [r3, #0]
 8018240:	4618      	mov	r0, r3
 8018242:	4b30      	ldr	r3, [pc, #192]	@ (8018304 <MAP_moveNextBlock_Sla+0x4d4>)
 8018244:	781b      	ldrb	r3, [r3, #0]
 8018246:	4619      	mov	r1, r3
 8018248:	4a2f      	ldr	r2, [pc, #188]	@ (8018308 <MAP_moveNextBlock_Sla+0x4d8>)
 801824a:	0143      	lsls	r3, r0, #5
 801824c:	4413      	add	r3, r2
 801824e:	440b      	add	r3, r1
 8018250:	781b      	ldrb	r3, [r3, #0]
 8018252:	f003 0301 	and.w	r3, r3, #1
 8018256:	2b00      	cmp	r3, #0
 8018258:	d138      	bne.n	80182cc <MAP_moveNextBlock_Sla+0x49c>
				( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 801825a:	4b28      	ldr	r3, [pc, #160]	@ (80182fc <MAP_moveNextBlock_Sla+0x4cc>)
 801825c:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 801825e:	2b01      	cmp	r3, #1
 8018260:	d10e      	bne.n	8018280 <MAP_moveNextBlock_Sla+0x450>
				( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8018262:	4b27      	ldr	r3, [pc, #156]	@ (8018300 <MAP_moveNextBlock_Sla+0x4d0>)
 8018264:	781b      	ldrb	r3, [r3, #0]
 8018266:	4618      	mov	r0, r3
 8018268:	4b26      	ldr	r3, [pc, #152]	@ (8018304 <MAP_moveNextBlock_Sla+0x4d4>)
 801826a:	781b      	ldrb	r3, [r3, #0]
 801826c:	4619      	mov	r1, r3
 801826e:	4a26      	ldr	r2, [pc, #152]	@ (8018308 <MAP_moveNextBlock_Sla+0x4d8>)
 8018270:	0143      	lsls	r3, r0, #5
 8018272:	4413      	add	r3, r2
 8018274:	440b      	add	r3, r1
 8018276:	781b      	ldrb	r3, [r3, #0]
 8018278:	f003 0302 	and.w	r3, r3, #2
 801827c:	2b00      	cmp	r3, #0
 801827e:	d125      	bne.n	80182cc <MAP_moveNextBlock_Sla+0x49c>
				( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8018280:	4b1e      	ldr	r3, [pc, #120]	@ (80182fc <MAP_moveNextBlock_Sla+0x4cc>)
 8018282:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8018284:	2b02      	cmp	r3, #2
 8018286:	d10e      	bne.n	80182a6 <MAP_moveNextBlock_Sla+0x476>
				( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8018288:	4b1d      	ldr	r3, [pc, #116]	@ (8018300 <MAP_moveNextBlock_Sla+0x4d0>)
 801828a:	781b      	ldrb	r3, [r3, #0]
 801828c:	4618      	mov	r0, r3
 801828e:	4b1d      	ldr	r3, [pc, #116]	@ (8018304 <MAP_moveNextBlock_Sla+0x4d4>)
 8018290:	781b      	ldrb	r3, [r3, #0]
 8018292:	4619      	mov	r1, r3
 8018294:	4a1c      	ldr	r2, [pc, #112]	@ (8018308 <MAP_moveNextBlock_Sla+0x4d8>)
 8018296:	0143      	lsls	r3, r0, #5
 8018298:	4413      	add	r3, r2
 801829a:	440b      	add	r3, r1
 801829c:	781b      	ldrb	r3, [r3, #0]
 801829e:	f003 0304 	and.w	r3, r3, #4
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d112      	bne.n	80182cc <MAP_moveNextBlock_Sla+0x49c>
				( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 80182a6:	4b15      	ldr	r3, [pc, #84]	@ (80182fc <MAP_moveNextBlock_Sla+0x4cc>)
 80182a8:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 80182aa:	2b03      	cmp	r3, #3
 80182ac:	d113      	bne.n	80182d6 <MAP_moveNextBlock_Sla+0x4a6>
				( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 80182ae:	4b14      	ldr	r3, [pc, #80]	@ (8018300 <MAP_moveNextBlock_Sla+0x4d0>)
 80182b0:	781b      	ldrb	r3, [r3, #0]
 80182b2:	4618      	mov	r0, r3
 80182b4:	4b13      	ldr	r3, [pc, #76]	@ (8018304 <MAP_moveNextBlock_Sla+0x4d4>)
 80182b6:	781b      	ldrb	r3, [r3, #0]
 80182b8:	4619      	mov	r1, r3
 80182ba:	4a13      	ldr	r2, [pc, #76]	@ (8018308 <MAP_moveNextBlock_Sla+0x4d8>)
 80182bc:	0143      	lsls	r3, r0, #5
 80182be:	4413      	add	r3, r2
 80182c0:	440b      	add	r3, r1
 80182c2:	781b      	ldrb	r3, [r3, #0]
 80182c4:	f003 0308 	and.w	r3, r3, #8
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d004      	beq.n	80182d6 <MAP_moveNextBlock_Sla+0x4a6>
			){
				MOT_goHitBackWall();					// バックする
 80182cc:	f7f8 ff3e 	bl	801114c <MOT_goHitBackWall>
				f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 80182d0:	4b12      	ldr	r3, [pc, #72]	@ (801831c <MAP_moveNextBlock_Sla+0x4ec>)
 80182d2:	4a13      	ldr	r2, [pc, #76]	@ (8018320 <MAP_moveNextBlock_Sla+0x4f0>)
 80182d4:	601a      	str	r2, [r3, #0]
			}
			*p_type = TRUE;								// 次は半区間＋バック分進める
 80182d6:	683b      	ldr	r3, [r7, #0]
 80182d8:	2201      	movs	r2, #1
 80182da:	701a      	strb	r2, [r3, #0]
			break;
 80182dc:	e000      	b.n	80182e0 <MAP_moveNextBlock_Sla+0x4b0>
			
		default:
			break;
 80182de:	bf00      	nop
		MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);			// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
		MAP_moveNextBlock_Sla(en_head, p_type, TRUE );		// もう１度呼び出し（次の区画へ移動）
	}
	else{*/
		/* 進行方向更新 */
		en_Head = (enMAP_HEAD_DIR)( (en_Head + en_head) & (MAP_HEAD_DIR_MAX-1) );
 80182e0:	4b06      	ldr	r3, [pc, #24]	@ (80182fc <MAP_moveNextBlock_Sla+0x4cc>)
 80182e2:	781a      	ldrb	r2, [r3, #0]
 80182e4:	79fb      	ldrb	r3, [r7, #7]
 80182e6:	4413      	add	r3, r2
 80182e8:	b2db      	uxtb	r3, r3
 80182ea:	f003 0303 	and.w	r3, r3, #3
 80182ee:	b2da      	uxtb	r2, r3
 80182f0:	4b02      	ldr	r3, [pc, #8]	@ (80182fc <MAP_moveNextBlock_Sla+0x4cc>)
 80182f2:	701a      	strb	r2, [r3, #0]
//	}
}
 80182f4:	bf00      	nop
 80182f6:	3708      	adds	r7, #8
 80182f8:	46bd      	mov	sp, r7
 80182fa:	bd80      	pop	{r7, pc}
 80182fc:	2001ad8a 	.word	0x2001ad8a
 8018300:	2001ad8b 	.word	0x2001ad8b
 8018304:	2001ad8c 	.word	0x2001ad8c
 8018308:	2001b5a0 	.word	0x2001b5a0
 801830c:	20000400 	.word	0x20000400
 8018310:	2001ad94 	.word	0x2001ad94
 8018314:	2000001c 	.word	0x2000001c
 8018318:	00000000 	.word	0x00000000
 801831c:	2001ad90 	.word	0x2001ad90
 8018320:	3e6b851f 	.word	0x3e6b851f

08018324 <MAP_moveNextBlock_frontmiss>:

void MAP_moveNextBlock_frontmiss( 
	enMAP_HEAD_DIR 	en_head,		///< [in] 相対進行方向（マウス進行方向を北としている）
	bool*			p_type			///< [in] FALSE: １区間前進状態、TURE:半区間前進状態
){
 8018324:	b580      	push	{r7, lr}
 8018326:	b082      	sub	sp, #8
 8018328:	af00      	add	r7, sp, #0
 801832a:	4603      	mov	r3, r0
 801832c:	6039      	str	r1, [r7, #0]
 801832e:	71fb      	strb	r3, [r7, #7]
	*p_type = FALSE;
 8018330:	683b      	ldr	r3, [r7, #0]
 8018332:	2200      	movs	r2, #0
 8018334:	701a      	strb	r2, [r3, #0]
	f_MoveBackDist = 0;				// 移動距離を加算値クリア
 8018336:	4b23      	ldr	r3, [pc, #140]	@ (80183c4 <MAP_moveNextBlock_frontmiss+0xa0>)
 8018338:	f04f 0200 	mov.w	r2, #0
 801833c:	601a      	str	r2, [r3, #0]
	
	/* 動作 */
	switch( en_head ){
 801833e:	79fb      	ldrb	r3, [r7, #7]
 8018340:	2b03      	cmp	r3, #3
 8018342:	d830      	bhi.n	80183a6 <MAP_moveNextBlock_frontmiss+0x82>
 8018344:	a201      	add	r2, pc, #4	@ (adr r2, 801834c <MAP_moveNextBlock_frontmiss+0x28>)
 8018346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801834a:	bf00      	nop
 801834c:	0801835d 	.word	0x0801835d
 8018350:	0801836b 	.word	0x0801836b
 8018354:	08018393 	.word	0x08018393
 8018358:	0801837f 	.word	0x0801837f

		/* そのまま前進 */
		case NORTH:
			MOT_goBlock_FinSpeed( 0.5, SEARCH_SPEED );				// 1区画前進
 801835c:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 80183c8 <MAP_moveNextBlock_frontmiss+0xa4>
 8018360:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8018364:	f7f7 f99e 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			break;
 8018368:	e01e      	b.n	80183a8 <MAP_moveNextBlock_frontmiss+0x84>
		// 右に旋回する
		case EAST:
			MOT_turn(MOT_R90);					// 右90度旋回
 801836a:	2000      	movs	r0, #0
 801836c:	f7f7 fbc4 	bl	800faf8 <MOT_turn>
			MOT_goBlock_FinSpeed( 0.5, SEARCH_SPEED );		// 半区画前進
 8018370:	eddf 0a15 	vldr	s1, [pc, #84]	@ 80183c8 <MAP_moveNextBlock_frontmiss+0xa4>
 8018374:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8018378:	f7f7 f994 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			break;
 801837c:	e014      	b.n	80183a8 <MAP_moveNextBlock_frontmiss+0x84>
		// 左に旋回する
		case WEST:
			MOT_turn(MOT_L90);					// 右90度旋回
 801837e:	2001      	movs	r0, #1
 8018380:	f7f7 fbba 	bl	800faf8 <MOT_turn>
			MOT_goBlock_FinSpeed( 0.5, SEARCH_SPEED );		// 半区画前進
 8018384:	eddf 0a10 	vldr	s1, [pc, #64]	@ 80183c8 <MAP_moveNextBlock_frontmiss+0xa4>
 8018388:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 801838c:	f7f7 f98a 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			break;
 8018390:	e00a      	b.n	80183a8 <MAP_moveNextBlock_frontmiss+0x84>
		// 反転して戻る
		case SOUTH:
			MOT_turn(MOT_R180);					// 右180度旋回
 8018392:	2002      	movs	r0, #2
 8018394:	f7f7 fbb0 	bl	800faf8 <MOT_turn>
			MOT_goBlock_FinSpeed( 0.5, SEARCH_SPEED );		// 半区画前進
 8018398:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 80183c8 <MAP_moveNextBlock_frontmiss+0xa4>
 801839c:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80183a0:	f7f7 f980 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			break;
 80183a4:	e000      	b.n	80183a8 <MAP_moveNextBlock_frontmiss+0x84>
		default:
			break;
 80183a6:	bf00      	nop
	}

	en_Head = (enMAP_HEAD_DIR)( (en_Head + en_head) & (MAP_HEAD_DIR_MAX-1) );
 80183a8:	4b08      	ldr	r3, [pc, #32]	@ (80183cc <MAP_moveNextBlock_frontmiss+0xa8>)
 80183aa:	781a      	ldrb	r2, [r3, #0]
 80183ac:	79fb      	ldrb	r3, [r7, #7]
 80183ae:	4413      	add	r3, r2
 80183b0:	b2db      	uxtb	r3, r3
 80183b2:	f003 0303 	and.w	r3, r3, #3
 80183b6:	b2da      	uxtb	r2, r3
 80183b8:	4b04      	ldr	r3, [pc, #16]	@ (80183cc <MAP_moveNextBlock_frontmiss+0xa8>)
 80183ba:	701a      	strb	r2, [r3, #0]

}
 80183bc:	bf00      	nop
 80183be:	3708      	adds	r7, #8
 80183c0:	46bd      	mov	sp, r7
 80183c2:	bd80      	pop	{r7, pc}
 80183c4:	2001ad90 	.word	0x2001ad90
 80183c8:	3e99999a 	.word	0x3e99999a
 80183cc:	2001ad8a 	.word	0x2001ad8a

080183d0 <MAP_actGoal>:

void MAP_actGoal( void )
{	
 80183d0:	b580      	push	{r7, lr}
 80183d2:	af00      	add	r7, sp, #0
	MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 80183d4:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8018414 <MAP_actGoal+0x44>
 80183d8:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80183dc:	f7f7 f962 	bl	800f6a4 <MOT_goBlock_FinSpeed>
	LL_mDelay(500);
 80183e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80183e4:	f003 fb42 	bl	801ba6c <LL_mDelay>
	MOT_turn(MOT_R180);										// 右180度旋回
 80183e8:	2002      	movs	r0, #2
 80183ea:	f7f7 fb85 	bl	800faf8 <MOT_turn>
	LL_mDelay(500);
 80183ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80183f2:	f003 fb3b 	bl	801ba6c <LL_mDelay>
	
//	MAP_SaveMapData();						// 迷路情報のバックアップ
	log_flag_off();
 80183f6:	f7f1 fd05 	bl	8009e04 <log_flag_off>
	MAP_actGoalLED();
 80183fa:	f000 f80f 	bl	801841c <MAP_actGoalLED>
	
	en_Head = (enMAP_HEAD_DIR)( (en_Head + 2) & (MAP_HEAD_DIR_MAX-1) );			//	進行方向更新
 80183fe:	4b06      	ldr	r3, [pc, #24]	@ (8018418 <MAP_actGoal+0x48>)
 8018400:	781b      	ldrb	r3, [r3, #0]
 8018402:	3302      	adds	r3, #2
 8018404:	b2db      	uxtb	r3, r3
 8018406:	f003 0303 	and.w	r3, r3, #3
 801840a:	b2da      	uxtb	r2, r3
 801840c:	4b02      	ldr	r3, [pc, #8]	@ (8018418 <MAP_actGoal+0x48>)
 801840e:	701a      	strb	r2, [r3, #0]

}
 8018410:	bf00      	nop
 8018412:	bd80      	pop	{r7, pc}
 8018414:	00000000 	.word	0x00000000
 8018418:	2001ad8a 	.word	0x2001ad8a

0801841c <MAP_actGoalLED>:

void MAP_actGoalLED( void )
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b082      	sub	sp, #8
 8018420:	af00      	add	r7, sp, #0
	int i;
	for(i = 0;i<2;i++)
 8018422:	2300      	movs	r3, #0
 8018424:	607b      	str	r3, [r7, #4]
 8018426:	e020      	b.n	801846a <MAP_actGoalLED+0x4e>
	{
		SetLED(0x02);
 8018428:	2002      	movs	r0, #2
 801842a:	f7e9 fd55 	bl	8001ed8 <SetLED>
		LL_mDelay(100);
 801842e:	2064      	movs	r0, #100	@ 0x64
 8018430:	f003 fb1c 	bl	801ba6c <LL_mDelay>
		SetLED(0x04);
 8018434:	2004      	movs	r0, #4
 8018436:	f7e9 fd4f 	bl	8001ed8 <SetLED>
		LL_mDelay(100);
 801843a:	2064      	movs	r0, #100	@ 0x64
 801843c:	f003 fb16 	bl	801ba6c <LL_mDelay>
		SetLED(0x08);
 8018440:	2008      	movs	r0, #8
 8018442:	f7e9 fd49 	bl	8001ed8 <SetLED>
		LL_mDelay(100);
 8018446:	2064      	movs	r0, #100	@ 0x64
 8018448:	f003 fb10 	bl	801ba6c <LL_mDelay>
		SetLED(0x04);
 801844c:	2004      	movs	r0, #4
 801844e:	f7e9 fd43 	bl	8001ed8 <SetLED>
		LL_mDelay(100);
 8018452:	2064      	movs	r0, #100	@ 0x64
 8018454:	f003 fb0a 	bl	801ba6c <LL_mDelay>
		SetLED(0x02);
 8018458:	2002      	movs	r0, #2
 801845a:	f7e9 fd3d 	bl	8001ed8 <SetLED>
		LL_mDelay(100);
 801845e:	2064      	movs	r0, #100	@ 0x64
 8018460:	f003 fb04 	bl	801ba6c <LL_mDelay>
	for(i = 0;i<2;i++)
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	3301      	adds	r3, #1
 8018468:	607b      	str	r3, [r7, #4]
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	2b01      	cmp	r3, #1
 801846e:	dddb      	ble.n	8018428 <MAP_actGoalLED+0xc>
	}
	LL_mDelay(100);
 8018470:	2064      	movs	r0, #100	@ 0x64
 8018472:	f003 fafb 	bl	801ba6c <LL_mDelay>
	Map_Write();
 8018476:	f7fe faad 	bl	80169d4 <Map_Write>
	SetLED(0x00);
 801847a:	2000      	movs	r0, #0
 801847c:	f7e9 fd2c 	bl	8001ed8 <SetLED>
}
 8018480:	bf00      	nop
 8018482:	3708      	adds	r7, #8
 8018484:	46bd      	mov	sp, r7
 8018486:	bd80      	pop	{r7, pc}

08018488 <MAP_Goalsize>:

void MAP_Goalsize(int size)
{
 8018488:	b480      	push	{r7}
 801848a:	b083      	sub	sp, #12
 801848c:	af00      	add	r7, sp, #0
 801848e:	6078      	str	r0, [r7, #4]
	GOAL_SIZE= size;
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	b2da      	uxtb	r2, r3
 8018494:	4b13      	ldr	r3, [pc, #76]	@ (80184e4 <MAP_Goalsize+0x5c>)
 8018496:	701a      	strb	r2, [r3, #0]
	if (size == 4) {
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	2b04      	cmp	r3, #4
 801849c:	d10c      	bne.n	80184b8 <MAP_Goalsize+0x30>
		uc_max_x = uc_max_x + 1;
 801849e:	4b12      	ldr	r3, [pc, #72]	@ (80184e8 <MAP_Goalsize+0x60>)
 80184a0:	781b      	ldrb	r3, [r3, #0]
 80184a2:	3301      	adds	r3, #1
 80184a4:	b2da      	uxtb	r2, r3
 80184a6:	4b10      	ldr	r3, [pc, #64]	@ (80184e8 <MAP_Goalsize+0x60>)
 80184a8:	701a      	strb	r2, [r3, #0]
		uc_max_y = uc_max_y + 1;
 80184aa:	4b10      	ldr	r3, [pc, #64]	@ (80184ec <MAP_Goalsize+0x64>)
 80184ac:	781b      	ldrb	r3, [r3, #0]
 80184ae:	3301      	adds	r3, #1
 80184b0:	b2da      	uxtb	r2, r3
 80184b2:	4b0e      	ldr	r3, [pc, #56]	@ (80184ec <MAP_Goalsize+0x64>)
 80184b4:	701a      	strb	r2, [r3, #0]
	}
	else if (size == 9) {
		uc_max_x = uc_max_x + 2;
		uc_max_y = uc_max_y + 2;
	}
}
 80184b6:	e00e      	b.n	80184d6 <MAP_Goalsize+0x4e>
	else if (size == 9) {
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	2b09      	cmp	r3, #9
 80184bc:	d10b      	bne.n	80184d6 <MAP_Goalsize+0x4e>
		uc_max_x = uc_max_x + 2;
 80184be:	4b0a      	ldr	r3, [pc, #40]	@ (80184e8 <MAP_Goalsize+0x60>)
 80184c0:	781b      	ldrb	r3, [r3, #0]
 80184c2:	3302      	adds	r3, #2
 80184c4:	b2da      	uxtb	r2, r3
 80184c6:	4b08      	ldr	r3, [pc, #32]	@ (80184e8 <MAP_Goalsize+0x60>)
 80184c8:	701a      	strb	r2, [r3, #0]
		uc_max_y = uc_max_y + 2;
 80184ca:	4b08      	ldr	r3, [pc, #32]	@ (80184ec <MAP_Goalsize+0x64>)
 80184cc:	781b      	ldrb	r3, [r3, #0]
 80184ce:	3302      	adds	r3, #2
 80184d0:	b2da      	uxtb	r2, r3
 80184d2:	4b06      	ldr	r3, [pc, #24]	@ (80184ec <MAP_Goalsize+0x64>)
 80184d4:	701a      	strb	r2, [r3, #0]
}
 80184d6:	bf00      	nop
 80184d8:	370c      	adds	r7, #12
 80184da:	46bd      	mov	sp, r7
 80184dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e0:	4770      	bx	lr
 80184e2:	bf00      	nop
 80184e4:	2001ad97 	.word	0x2001ad97
 80184e8:	2000001a 	.word	0x2000001a
 80184ec:	2000001b 	.word	0x2000001b

080184f0 <MAP_makeReturnContourMap>:

void  MAP_makeReturnContourMap(uint8_t uc_staX,uint8_t uc_staY) 
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b0cc      	sub	sp, #304	@ 0x130
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	4602      	mov	r2, r0
 80184f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80184fc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8018500:	701a      	strb	r2, [r3, #0]
 8018502:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018506:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801850a:	460a      	mov	r2, r1
 801850c:	701a      	strb	r2, [r3, #0]
	uint16_t		uc_level;		// 等高線
	uint8_t		uc_wallData;	// 壁情報

	stPOSITION		st_pos;
	queue_t queue;
	queue_t* pQueue = &queue;
 801850e:	f107 0310 	add.w	r3, r7, #16
 8018512:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	InitQueue(pQueue);
 8018516:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 801851a:	f7eb fc7d 	bl	8003e18 <InitQueue>

	/* 等高線マップを初期化する */
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 801851e:	2300      	movs	r3, #0
 8018520:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
 8018524:	e014      	b.n	8018550 <MAP_makeReturnContourMap+0x60>
		us_Cmap[i / MAP_Y_SIZE][i & (MAP_X_SIZE - 1)] = MAP_SMAP_MAX_VAL - 1;
 8018526:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 801852a:	095b      	lsrs	r3, r3, #5
 801852c:	b29b      	uxth	r3, r3
 801852e:	461a      	mov	r2, r3
 8018530:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8018534:	f003 031f 	and.w	r3, r3, #31
 8018538:	49cd      	ldr	r1, [pc, #820]	@ (8018870 <MAP_makeReturnContourMap+0x380>)
 801853a:	0152      	lsls	r2, r2, #5
 801853c:	4413      	add	r3, r2
 801853e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8018542:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 8018546:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 801854a:	3301      	adds	r3, #1
 801854c:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
 8018550:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8018554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018558:	d3e5      	bcc.n	8018526 <MAP_makeReturnContourMap+0x36>
	}
	/* 目標地点の等高線を0に設定 */
//	us_Cmap[0][0] = 0;
	setStep(0, 0, 0);
 801855a:	2200      	movs	r2, #0
 801855c:	2100      	movs	r1, #0
 801855e:	2000      	movs	r0, #0
 8018560:	f7fe fe6e 	bl	8017240 <setStep>
	st_pos.x = 0;
 8018564:	2300      	movs	r3, #0
 8018566:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
	st_pos.y = 0;
 801856a:	2300      	movs	r3, #0
 801856c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	st_pos.step = 0;
 8018570:	2300      	movs	r3, #0
 8018572:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e

	EnQueue(pQueue,st_pos);
 8018576:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 801857a:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 801857e:	f7eb fc7b 	bl	8003e78 <EnQueue>

	/* 等高線マップを作成 */
	while (pQueue->flag != EMPTY) {
 8018582:	e167      	b.n	8018854 <MAP_makeReturnContourMap+0x364>
		const stPOSITION focus = DeQueue(pQueue);
 8018584:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8018588:	f7eb fcb2 	bl	8003ef0 <DeQueue>
 801858c:	4602      	mov	r2, r0
 801858e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018592:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8018596:	601a      	str	r2, [r3, #0]
//		q.pop();
		const uint16_t focus_step = focus.step;
 8018598:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801859c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80185a0:	885b      	ldrh	r3, [r3, #2]
 80185a2:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
		x = focus.x;
 80185a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80185aa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80185ae:	781b      	ldrb	r3, [r3, #0]
 80185b0:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
		y = focus.y;
 80185b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80185b8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80185bc:	785b      	ldrb	r3, [r3, #1]
 80185be:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
		stPOSITION next = focus;
 80185c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80185c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80185ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80185ce:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 80185d2:	6812      	ldr	r2, [r2, #0]
 80185d4:	601a      	str	r2, [r3, #0]
		uc_wallData = g_SysMap[y][x];
 80185d6:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 80185da:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80185de:	49a5      	ldr	r1, [pc, #660]	@ (8018874 <MAP_makeReturnContourMap+0x384>)
 80185e0:	0152      	lsls	r2, r2, #5
 80185e2:	440a      	add	r2, r1
 80185e4:	4413      	add	r3, r2
 80185e6:	781b      	ldrb	r3, [r3, #0]
 80185e8:	f887 3121 	strb.w	r3, [r7, #289]	@ 0x121

		if (((uc_wallData & 0x01) == 0x00) && (y != (MAP_Y_SIZE - 1))) {
 80185ec:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 80185f0:	f003 0301 	and.w	r3, r3, #1
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d146      	bne.n	8018686 <MAP_makeReturnContourMap+0x196>
 80185f8:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80185fc:	2b1f      	cmp	r3, #31
 80185fe:	d042      	beq.n	8018686 <MAP_makeReturnContourMap+0x196>
			if (us_Cmap[y + 1][x] > focus_step + 1) {
 8018600:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8018604:	1c5a      	adds	r2, r3, #1
 8018606:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801860a:	4999      	ldr	r1, [pc, #612]	@ (8018870 <MAP_makeReturnContourMap+0x380>)
 801860c:	0152      	lsls	r2, r2, #5
 801860e:	4413      	add	r3, r2
 8018610:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8018614:	461a      	mov	r2, r3
 8018616:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 801861a:	3301      	adds	r3, #1
 801861c:	429a      	cmp	r2, r3
 801861e:	dd32      	ble.n	8018686 <MAP_makeReturnContourMap+0x196>
				next.step = focus_step + 1;
 8018620:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8018624:	3301      	adds	r3, #1
 8018626:	b29a      	uxth	r2, r3
 8018628:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801862c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018630:	805a      	strh	r2, [r3, #2]
				us_Cmap[y + 1][x] = focus_step + 1;
 8018632:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8018636:	1c5a      	adds	r2, r3, #1
 8018638:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801863c:	f8b7 1126 	ldrh.w	r1, [r7, #294]	@ 0x126
 8018640:	3101      	adds	r1, #1
 8018642:	b288      	uxth	r0, r1
 8018644:	498a      	ldr	r1, [pc, #552]	@ (8018870 <MAP_makeReturnContourMap+0x380>)
 8018646:	0152      	lsls	r2, r2, #5
 8018648:	4413      	add	r3, r2
 801864a:	4602      	mov	r2, r0
 801864c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 8018650:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8018654:	b2da      	uxtb	r2, r3
 8018656:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801865a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801865e:	701a      	strb	r2, [r3, #0]
				next.y = y + 1;
 8018660:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8018664:	b2db      	uxtb	r3, r3
 8018666:	3301      	adds	r3, #1
 8018668:	b2da      	uxtb	r2, r3
 801866a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801866e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018672:	705a      	strb	r2, [r3, #1]
				EnQueue(pQueue,next);
 8018674:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018678:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801867c:	6819      	ldr	r1, [r3, #0]
 801867e:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8018682:	f7eb fbf9 	bl	8003e78 <EnQueue>
			}
		}
		if (((uc_wallData & 0x02) == 0x00) && (x != (MAP_X_SIZE - 1))) {
 8018686:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 801868a:	f003 0302 	and.w	r3, r3, #2
 801868e:	2b00      	cmp	r3, #0
 8018690:	d146      	bne.n	8018720 <MAP_makeReturnContourMap+0x230>
 8018692:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8018696:	2b1f      	cmp	r3, #31
 8018698:	d042      	beq.n	8018720 <MAP_makeReturnContourMap+0x230>
			if (us_Cmap[y][x + 1] > focus_step + 1) {
 801869a:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 801869e:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80186a2:	3301      	adds	r3, #1
 80186a4:	4972      	ldr	r1, [pc, #456]	@ (8018870 <MAP_makeReturnContourMap+0x380>)
 80186a6:	0152      	lsls	r2, r2, #5
 80186a8:	4413      	add	r3, r2
 80186aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80186ae:	461a      	mov	r2, r3
 80186b0:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80186b4:	3301      	adds	r3, #1
 80186b6:	429a      	cmp	r2, r3
 80186b8:	dd32      	ble.n	8018720 <MAP_makeReturnContourMap+0x230>
				next.step = focus_step + 1;
 80186ba:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80186be:	3301      	adds	r3, #1
 80186c0:	b29a      	uxth	r2, r3
 80186c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80186c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80186ca:	805a      	strh	r2, [r3, #2]
				us_Cmap[y][x + 1] = focus_step + 1;
 80186cc:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 80186d0:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80186d4:	3301      	adds	r3, #1
 80186d6:	f8b7 1126 	ldrh.w	r1, [r7, #294]	@ 0x126
 80186da:	3101      	adds	r1, #1
 80186dc:	b288      	uxth	r0, r1
 80186de:	4964      	ldr	r1, [pc, #400]	@ (8018870 <MAP_makeReturnContourMap+0x380>)
 80186e0:	0152      	lsls	r2, r2, #5
 80186e2:	4413      	add	r3, r2
 80186e4:	4602      	mov	r2, r0
 80186e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x + 1;
 80186ea:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80186ee:	b2db      	uxtb	r3, r3
 80186f0:	3301      	adds	r3, #1
 80186f2:	b2da      	uxtb	r2, r3
 80186f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80186f8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80186fc:	701a      	strb	r2, [r3, #0]
				next.y = y;
 80186fe:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8018702:	b2da      	uxtb	r2, r3
 8018704:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018708:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801870c:	705a      	strb	r2, [r3, #1]
				EnQueue(pQueue, next);
 801870e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018712:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018716:	6819      	ldr	r1, [r3, #0]
 8018718:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 801871c:	f7eb fbac 	bl	8003e78 <EnQueue>
			}
		}
		if (((uc_wallData & 0x04) == 0x00) && (y != 0)) {
 8018720:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 8018724:	f003 0304 	and.w	r3, r3, #4
 8018728:	2b00      	cmp	r3, #0
 801872a:	d146      	bne.n	80187ba <MAP_makeReturnContourMap+0x2ca>
 801872c:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8018730:	2b00      	cmp	r3, #0
 8018732:	d042      	beq.n	80187ba <MAP_makeReturnContourMap+0x2ca>
			if (us_Cmap[y - 1][x] > focus_step + 1) {
 8018734:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8018738:	1e5a      	subs	r2, r3, #1
 801873a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801873e:	494c      	ldr	r1, [pc, #304]	@ (8018870 <MAP_makeReturnContourMap+0x380>)
 8018740:	0152      	lsls	r2, r2, #5
 8018742:	4413      	add	r3, r2
 8018744:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8018748:	461a      	mov	r2, r3
 801874a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 801874e:	3301      	adds	r3, #1
 8018750:	429a      	cmp	r2, r3
 8018752:	dd32      	ble.n	80187ba <MAP_makeReturnContourMap+0x2ca>
				next.step = focus_step + 1;
 8018754:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8018758:	3301      	adds	r3, #1
 801875a:	b29a      	uxth	r2, r3
 801875c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018760:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018764:	805a      	strh	r2, [r3, #2]
				us_Cmap[y - 1][x] = focus_step + 1;
 8018766:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 801876a:	1e5a      	subs	r2, r3, #1
 801876c:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8018770:	f8b7 1126 	ldrh.w	r1, [r7, #294]	@ 0x126
 8018774:	3101      	adds	r1, #1
 8018776:	b288      	uxth	r0, r1
 8018778:	493d      	ldr	r1, [pc, #244]	@ (8018870 <MAP_makeReturnContourMap+0x380>)
 801877a:	0152      	lsls	r2, r2, #5
 801877c:	4413      	add	r3, r2
 801877e:	4602      	mov	r2, r0
 8018780:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 8018784:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8018788:	b2da      	uxtb	r2, r3
 801878a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801878e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018792:	701a      	strb	r2, [r3, #0]
				next.y = y - 1;
 8018794:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8018798:	b2db      	uxtb	r3, r3
 801879a:	3b01      	subs	r3, #1
 801879c:	b2da      	uxtb	r2, r3
 801879e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80187a2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80187a6:	705a      	strb	r2, [r3, #1]
				EnQueue(pQueue, next);
 80187a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80187ac:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80187b0:	6819      	ldr	r1, [r3, #0]
 80187b2:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80187b6:	f7eb fb5f 	bl	8003e78 <EnQueue>
			}
		}
		if (((uc_wallData & 0x08) == 0x00) && (x != 0)) {
 80187ba:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 80187be:	f003 0308 	and.w	r3, r3, #8
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d146      	bne.n	8018854 <MAP_makeReturnContourMap+0x364>
 80187c6:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d042      	beq.n	8018854 <MAP_makeReturnContourMap+0x364>
			if (us_Cmap[y][x - 1] > focus_step + 1) {
 80187ce:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 80187d2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80187d6:	3b01      	subs	r3, #1
 80187d8:	4925      	ldr	r1, [pc, #148]	@ (8018870 <MAP_makeReturnContourMap+0x380>)
 80187da:	0152      	lsls	r2, r2, #5
 80187dc:	4413      	add	r3, r2
 80187de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80187e2:	461a      	mov	r2, r3
 80187e4:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80187e8:	3301      	adds	r3, #1
 80187ea:	429a      	cmp	r2, r3
 80187ec:	dd32      	ble.n	8018854 <MAP_makeReturnContourMap+0x364>
				next.step = focus_step + 1;
 80187ee:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80187f2:	3301      	adds	r3, #1
 80187f4:	b29a      	uxth	r2, r3
 80187f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80187fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80187fe:	805a      	strh	r2, [r3, #2]
				us_Cmap[y][x - 1] = focus_step + 1;
 8018800:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 8018804:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8018808:	3b01      	subs	r3, #1
 801880a:	f8b7 1126 	ldrh.w	r1, [r7, #294]	@ 0x126
 801880e:	3101      	adds	r1, #1
 8018810:	b288      	uxth	r0, r1
 8018812:	4917      	ldr	r1, [pc, #92]	@ (8018870 <MAP_makeReturnContourMap+0x380>)
 8018814:	0152      	lsls	r2, r2, #5
 8018816:	4413      	add	r3, r2
 8018818:	4602      	mov	r2, r0
 801881a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x - 1;
 801881e:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8018822:	b2db      	uxtb	r3, r3
 8018824:	3b01      	subs	r3, #1
 8018826:	b2da      	uxtb	r2, r3
 8018828:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801882c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018830:	701a      	strb	r2, [r3, #0]
				next.y = y;
 8018832:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8018836:	b2da      	uxtb	r2, r3
 8018838:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801883c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018840:	705a      	strb	r2, [r3, #1]
				EnQueue(pQueue, next);
 8018842:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018846:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801884a:	6819      	ldr	r1, [r3, #0]
 801884c:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8018850:	f7eb fb12 	bl	8003e78 <EnQueue>
	while (pQueue->flag != EMPTY) {
 8018854:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018858:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801885c:	2b00      	cmp	r3, #0
 801885e:	f47f ae91 	bne.w	8018584 <MAP_makeReturnContourMap+0x94>
			}
		}

	}

}
 8018862:	bf00      	nop
 8018864:	bf00      	nop
 8018866:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801886a:	46bd      	mov	sp, r7
 801886c:	bd80      	pop	{r7, pc}
 801886e:	bf00      	nop
 8018870:	2001ada0 	.word	0x2001ada0
 8018874:	2001b5a0 	.word	0x2001b5a0

08018878 <MAP_KnownAcc>:

bool MAP_KnownAcc(void) {
 8018878:	b480      	push	{r7}
 801887a:	b083      	sub	sp, #12
 801887c:	af00      	add	r7, sp, #0

	bool	bl_acc = FALSE;
 801887e:	2300      	movs	r3, #0
 8018880:	71fb      	strb	r3, [r7, #7]
	switch (en_Head) {
 8018882:	4b33      	ldr	r3, [pc, #204]	@ (8018950 <MAP_KnownAcc+0xd8>)
 8018884:	781b      	ldrb	r3, [r3, #0]
 8018886:	2b03      	cmp	r3, #3
 8018888:	d852      	bhi.n	8018930 <MAP_KnownAcc+0xb8>
 801888a:	a201      	add	r2, pc, #4	@ (adr r2, 8018890 <MAP_KnownAcc+0x18>)
 801888c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018890:	080188a1 	.word	0x080188a1
 8018894:	080188c5 	.word	0x080188c5
 8018898:	080188e9 	.word	0x080188e9
 801889c:	0801890d 	.word	0x0801890d
	case NORTH:
		if ((g_SysMap[my + 1][mx] & 0xf1) == 0xf0) {
 80188a0:	4b2c      	ldr	r3, [pc, #176]	@ (8018954 <MAP_KnownAcc+0xdc>)
 80188a2:	781b      	ldrb	r3, [r3, #0]
 80188a4:	3301      	adds	r3, #1
 80188a6:	4a2c      	ldr	r2, [pc, #176]	@ (8018958 <MAP_KnownAcc+0xe0>)
 80188a8:	7812      	ldrb	r2, [r2, #0]
 80188aa:	4611      	mov	r1, r2
 80188ac:	4a2b      	ldr	r2, [pc, #172]	@ (801895c <MAP_KnownAcc+0xe4>)
 80188ae:	015b      	lsls	r3, r3, #5
 80188b0:	4413      	add	r3, r2
 80188b2:	440b      	add	r3, r1
 80188b4:	781b      	ldrb	r3, [r3, #0]
 80188b6:	f003 03f1 	and.w	r3, r3, #241	@ 0xf1
 80188ba:	2bf0      	cmp	r3, #240	@ 0xf0
 80188bc:	d13a      	bne.n	8018934 <MAP_KnownAcc+0xbc>
			bl_acc = TRUE;
 80188be:	2301      	movs	r3, #1
 80188c0:	71fb      	strb	r3, [r7, #7]
		}

		break;
 80188c2:	e037      	b.n	8018934 <MAP_KnownAcc+0xbc>

	case EAST:
		if ((g_SysMap[my][mx + 1] & 0xf2) == 0xf0) {
 80188c4:	4b23      	ldr	r3, [pc, #140]	@ (8018954 <MAP_KnownAcc+0xdc>)
 80188c6:	781b      	ldrb	r3, [r3, #0]
 80188c8:	461a      	mov	r2, r3
 80188ca:	4b23      	ldr	r3, [pc, #140]	@ (8018958 <MAP_KnownAcc+0xe0>)
 80188cc:	781b      	ldrb	r3, [r3, #0]
 80188ce:	3301      	adds	r3, #1
 80188d0:	4922      	ldr	r1, [pc, #136]	@ (801895c <MAP_KnownAcc+0xe4>)
 80188d2:	0152      	lsls	r2, r2, #5
 80188d4:	440a      	add	r2, r1
 80188d6:	4413      	add	r3, r2
 80188d8:	781b      	ldrb	r3, [r3, #0]
 80188da:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80188de:	2bf0      	cmp	r3, #240	@ 0xf0
 80188e0:	d12a      	bne.n	8018938 <MAP_KnownAcc+0xc0>
			bl_acc = TRUE;
 80188e2:	2301      	movs	r3, #1
 80188e4:	71fb      	strb	r3, [r7, #7]
		}
		break;
 80188e6:	e027      	b.n	8018938 <MAP_KnownAcc+0xc0>

	case SOUTH:
		if ((g_SysMap[my - 1][mx] & 0xf4) == 0xf0) {
 80188e8:	4b1a      	ldr	r3, [pc, #104]	@ (8018954 <MAP_KnownAcc+0xdc>)
 80188ea:	781b      	ldrb	r3, [r3, #0]
 80188ec:	3b01      	subs	r3, #1
 80188ee:	4a1a      	ldr	r2, [pc, #104]	@ (8018958 <MAP_KnownAcc+0xe0>)
 80188f0:	7812      	ldrb	r2, [r2, #0]
 80188f2:	4611      	mov	r1, r2
 80188f4:	4a19      	ldr	r2, [pc, #100]	@ (801895c <MAP_KnownAcc+0xe4>)
 80188f6:	015b      	lsls	r3, r3, #5
 80188f8:	4413      	add	r3, r2
 80188fa:	440b      	add	r3, r1
 80188fc:	781b      	ldrb	r3, [r3, #0]
 80188fe:	f003 03f4 	and.w	r3, r3, #244	@ 0xf4
 8018902:	2bf0      	cmp	r3, #240	@ 0xf0
 8018904:	d11a      	bne.n	801893c <MAP_KnownAcc+0xc4>
			bl_acc = TRUE;
 8018906:	2301      	movs	r3, #1
 8018908:	71fb      	strb	r3, [r7, #7]
		}
		break;
 801890a:	e017      	b.n	801893c <MAP_KnownAcc+0xc4>

	case WEST:
		if ((g_SysMap[my][mx - 1] & 0xf8) == 0xf0) {
 801890c:	4b11      	ldr	r3, [pc, #68]	@ (8018954 <MAP_KnownAcc+0xdc>)
 801890e:	781b      	ldrb	r3, [r3, #0]
 8018910:	461a      	mov	r2, r3
 8018912:	4b11      	ldr	r3, [pc, #68]	@ (8018958 <MAP_KnownAcc+0xe0>)
 8018914:	781b      	ldrb	r3, [r3, #0]
 8018916:	3b01      	subs	r3, #1
 8018918:	4910      	ldr	r1, [pc, #64]	@ (801895c <MAP_KnownAcc+0xe4>)
 801891a:	0152      	lsls	r2, r2, #5
 801891c:	440a      	add	r2, r1
 801891e:	4413      	add	r3, r2
 8018920:	781b      	ldrb	r3, [r3, #0]
 8018922:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8018926:	2bf0      	cmp	r3, #240	@ 0xf0
 8018928:	d10a      	bne.n	8018940 <MAP_KnownAcc+0xc8>
			bl_acc = TRUE;
 801892a:	2301      	movs	r3, #1
 801892c:	71fb      	strb	r3, [r7, #7]
		}
		break;
 801892e:	e007      	b.n	8018940 <MAP_KnownAcc+0xc8>

	default:
		break;
 8018930:	bf00      	nop
 8018932:	e006      	b.n	8018942 <MAP_KnownAcc+0xca>
		break;
 8018934:	bf00      	nop
 8018936:	e004      	b.n	8018942 <MAP_KnownAcc+0xca>
		break;
 8018938:	bf00      	nop
 801893a:	e002      	b.n	8018942 <MAP_KnownAcc+0xca>
		break;
 801893c:	bf00      	nop
 801893e:	e000      	b.n	8018942 <MAP_KnownAcc+0xca>
		break;
 8018940:	bf00      	nop
	}
	return	bl_acc;
 8018942:	79fb      	ldrb	r3, [r7, #7]
}
 8018944:	4618      	mov	r0, r3
 8018946:	370c      	adds	r7, #12
 8018948:	46bd      	mov	sp, r7
 801894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801894e:	4770      	bx	lr
 8018950:	2001ad8a 	.word	0x2001ad8a
 8018954:	2001ad8b 	.word	0x2001ad8b
 8018958:	2001ad8c 	.word	0x2001ad8c
 801895c:	2001b5a0 	.word	0x2001b5a0

08018960 <MAP_moveNextBlock_acc>:

void MAP_moveNextBlock_acc(enMAP_HEAD_DIR en_head, bool* p_type)
{
 8018960:	b580      	push	{r7, lr}
 8018962:	b082      	sub	sp, #8
 8018964:	af00      	add	r7, sp, #0
 8018966:	4603      	mov	r3, r0
 8018968:	6039      	str	r1, [r7, #0]
 801896a:	71fb      	strb	r3, [r7, #7]
	*p_type = FALSE;
 801896c:	683b      	ldr	r3, [r7, #0]
 801896e:	2200      	movs	r2, #0
 8018970:	701a      	strb	r2, [r3, #0]
	f_MoveBackDist = 0;
 8018972:	4ba6      	ldr	r3, [pc, #664]	@ (8018c0c <MAP_moveNextBlock_acc+0x2ac>)
 8018974:	f04f 0200 	mov.w	r2, #0
 8018978:	601a      	str	r2, [r3, #0]

	/* 動作 */
	switch (en_head) {
 801897a:	79fb      	ldrb	r3, [r7, #7]
 801897c:	2b03      	cmp	r3, #3
 801897e:	f200 85b9 	bhi.w	80194f4 <MAP_moveNextBlock_acc+0xb94>
 8018982:	a201      	add	r2, pc, #4	@ (adr r2, 8018988 <MAP_moveNextBlock_acc+0x28>)
 8018984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018988:	08018999 	.word	0x08018999
 801898c:	08018a19 	.word	0x08018a19
 8018990:	08019081 	.word	0x08019081
 8018994:	08018d43 	.word	0x08018d43

		/* そのまま前進 */
	case NORTH:
//		*p_type = FALSE;
//		LED = LED6;
		if (MAP_KnownAcc() == FALSE) {					// 次に進む区画が未探索のとき
 8018998:	f7ff ff6e 	bl	8018878 <MAP_KnownAcc>
 801899c:	4603      	mov	r3, r0
 801899e:	f083 0301 	eor.w	r3, r3, #1
 80189a2:	b2db      	uxtb	r3, r3
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d02c      	beq.n	8018a02 <MAP_moveNextBlock_acc+0xa2>
			if (st_Known.bl_known == TRUE){
 80189a8:	4b99      	ldr	r3, [pc, #612]	@ (8018c10 <MAP_moveNextBlock_acc+0x2b0>)
 80189aa:	785b      	ldrb	r3, [r3, #1]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d01c      	beq.n	80189ea <MAP_moveNextBlock_acc+0x8a>
				if (st_Known.uc_strCnt < 2) {
 80189b0:	4b97      	ldr	r3, [pc, #604]	@ (8018c10 <MAP_moveNextBlock_acc+0x2b0>)
 80189b2:	781b      	ldrb	r3, [r3, #0]
 80189b4:	2b01      	cmp	r3, #1
 80189b6:	d804      	bhi.n	80189c2 <MAP_moveNextBlock_acc+0x62>
					MOT_goBlock_Const(1);					// 1区画の場合は等速のまま
 80189b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80189bc:	f7f6 fe96 	bl	800f6ec <MOT_goBlock_Const>
 80189c0:	e013      	b.n	80189ea <MAP_moveNextBlock_acc+0x8a>
				}
				else {
					MOT_setTrgtSpeed(MAP_KNOWN_ACC_SPEED);									// 既知区間加速するときの目標速度	
 80189c2:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80189c6:	f7f8 fb9b 	bl	8011100 <MOT_setTrgtSpeed>
					MOT_goBlock_FinSpeed((float)(st_Known.uc_strCnt), SEARCH_SPEED);				// n区画前進
 80189ca:	4b91      	ldr	r3, [pc, #580]	@ (8018c10 <MAP_moveNextBlock_acc+0x2b0>)
 80189cc:	781b      	ldrb	r3, [r3, #0]
 80189ce:	ee07 3a90 	vmov	s15, r3
 80189d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80189d6:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 8018c14 <MAP_moveNextBlock_acc+0x2b4>
 80189da:	eeb0 0a67 	vmov.f32	s0, s15
 80189de:	f7f6 fe61 	bl	800f6a4 <MOT_goBlock_FinSpeed>
					MOT_setTrgtSpeed(SEARCH_SPEED);										// 目標速度をデフォルト値に戻す
 80189e2:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 8018c14 <MAP_moveNextBlock_acc+0x2b4>
 80189e6:	f7f8 fb8b 	bl	8011100 <MOT_setTrgtSpeed>
				}
			}
			MOT_goBlock_Const(1);	////////////////////
 80189ea:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80189ee:	f7f6 fe7d 	bl	800f6ec <MOT_goBlock_Const>
			st_Known.uc_strCnt = 0;
 80189f2:	4b87      	ldr	r3, [pc, #540]	@ (8018c10 <MAP_moveNextBlock_acc+0x2b0>)
 80189f4:	2200      	movs	r2, #0
 80189f6:	701a      	strb	r2, [r3, #0]
			st_Known.bl_known = FALSE;
 80189f8:	4b85      	ldr	r3, [pc, #532]	@ (8018c10 <MAP_moveNextBlock_acc+0x2b0>)
 80189fa:	2200      	movs	r2, #0
 80189fc:	705a      	strb	r2, [r3, #1]

			st_Known.uc_strCnt++;			// 移動区画の加算
			st_Known.bl_known = TRUE;
		}

		break;
 80189fe:	f000 bd7a 	b.w	80194f6 <MAP_moveNextBlock_acc+0xb96>
			st_Known.uc_strCnt++;			// 移動区画の加算
 8018a02:	4b83      	ldr	r3, [pc, #524]	@ (8018c10 <MAP_moveNextBlock_acc+0x2b0>)
 8018a04:	781b      	ldrb	r3, [r3, #0]
 8018a06:	3301      	adds	r3, #1
 8018a08:	b2da      	uxtb	r2, r3
 8018a0a:	4b81      	ldr	r3, [pc, #516]	@ (8018c10 <MAP_moveNextBlock_acc+0x2b0>)
 8018a0c:	701a      	strb	r2, [r3, #0]
			st_Known.bl_known = TRUE;
 8018a0e:	4b80      	ldr	r3, [pc, #512]	@ (8018c10 <MAP_moveNextBlock_acc+0x2b0>)
 8018a10:	2201      	movs	r2, #1
 8018a12:	705a      	strb	r2, [r3, #1]
		break;
 8018a14:	f000 bd6f 	b.w	80194f6 <MAP_moveNextBlock_acc+0xb96>

		/* 右に旋回する */
	case EAST:
//		LED = LED8;
		if (st_Known.bl_known == TRUE) {		// 直線分を消化
 8018a18:	4b7d      	ldr	r3, [pc, #500]	@ (8018c10 <MAP_moveNextBlock_acc+0x2b0>)
 8018a1a:	785b      	ldrb	r3, [r3, #1]
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d022      	beq.n	8018a66 <MAP_moveNextBlock_acc+0x106>
			if (st_Known.uc_strCnt < 2) {
 8018a20:	4b7b      	ldr	r3, [pc, #492]	@ (8018c10 <MAP_moveNextBlock_acc+0x2b0>)
 8018a22:	781b      	ldrb	r3, [r3, #0]
 8018a24:	2b01      	cmp	r3, #1
 8018a26:	d804      	bhi.n	8018a32 <MAP_moveNextBlock_acc+0xd2>
				MOT_goBlock_Const(1);					// 1区画の場合は等速のまま
 8018a28:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018a2c:	f7f6 fe5e 	bl	800f6ec <MOT_goBlock_Const>
 8018a30:	e013      	b.n	8018a5a <MAP_moveNextBlock_acc+0xfa>
			}
			else {
//				LED = LED_ALL_ON;
				MOT_setTrgtSpeed(MAP_KNOWN_ACC_SPEED);									// 既知区間加速するときの目標速度	
 8018a32:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8018a36:	f7f8 fb63 	bl	8011100 <MOT_setTrgtSpeed>
				MOT_goBlock_FinSpeed((float)(st_Known.uc_strCnt), SEARCH_SPEED);				// n区画前進
 8018a3a:	4b75      	ldr	r3, [pc, #468]	@ (8018c10 <MAP_moveNextBlock_acc+0x2b0>)
 8018a3c:	781b      	ldrb	r3, [r3, #0]
 8018a3e:	ee07 3a90 	vmov	s15, r3
 8018a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018a46:	eddf 0a73 	vldr	s1, [pc, #460]	@ 8018c14 <MAP_moveNextBlock_acc+0x2b4>
 8018a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8018a4e:	f7f6 fe29 	bl	800f6a4 <MOT_goBlock_FinSpeed>
				MOT_setTrgtSpeed(SEARCH_SPEED);										// 目標速度をデフォルト値に戻す
 8018a52:	ed9f 0a70 	vldr	s0, [pc, #448]	@ 8018c14 <MAP_moveNextBlock_acc+0x2b4>
 8018a56:	f7f8 fb53 	bl	8011100 <MOT_setTrgtSpeed>
//				LED = LED_ALL_OFF;
			}
			st_Known.uc_strCnt = 0;		/////////////////////////////////////////
 8018a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8018c10 <MAP_moveNextBlock_acc+0x2b0>)
 8018a5c:	2200      	movs	r2, #0
 8018a5e:	701a      	strb	r2, [r3, #0]
			st_Known.bl_known = FALSE;
 8018a60:	4b6b      	ldr	r3, [pc, #428]	@ (8018c10 <MAP_moveNextBlock_acc+0x2b0>)
 8018a62:	2200      	movs	r2, #0
 8018a64:	705a      	strb	r2, [r3, #1]
		}

		if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8018a66:	4b6c      	ldr	r3, [pc, #432]	@ (8018c18 <MAP_moveNextBlock_acc+0x2b8>)
 8018a68:	781b      	ldrb	r3, [r3, #0]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d10e      	bne.n	8018a8c <MAP_moveNextBlock_acc+0x12c>
 8018a6e:	4b6b      	ldr	r3, [pc, #428]	@ (8018c1c <MAP_moveNextBlock_acc+0x2bc>)
 8018a70:	781b      	ldrb	r3, [r3, #0]
 8018a72:	4618      	mov	r0, r3
 8018a74:	4b6a      	ldr	r3, [pc, #424]	@ (8018c20 <MAP_moveNextBlock_acc+0x2c0>)
 8018a76:	781b      	ldrb	r3, [r3, #0]
 8018a78:	4619      	mov	r1, r3
 8018a7a:	4a6a      	ldr	r2, [pc, #424]	@ (8018c24 <MAP_moveNextBlock_acc+0x2c4>)
 8018a7c:	0143      	lsls	r3, r0, #5
 8018a7e:	4413      	add	r3, r2
 8018a80:	440b      	add	r3, r1
 8018a82:	781b      	ldrb	r3, [r3, #0]
 8018a84:	f003 0302 	and.w	r3, r3, #2
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d138      	bne.n	8018afe <MAP_moveNextBlock_acc+0x19e>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8018a8c:	4b62      	ldr	r3, [pc, #392]	@ (8018c18 <MAP_moveNextBlock_acc+0x2b8>)
 8018a8e:	781b      	ldrb	r3, [r3, #0]
		if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8018a90:	2b01      	cmp	r3, #1
 8018a92:	d10e      	bne.n	8018ab2 <MAP_moveNextBlock_acc+0x152>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8018a94:	4b61      	ldr	r3, [pc, #388]	@ (8018c1c <MAP_moveNextBlock_acc+0x2bc>)
 8018a96:	781b      	ldrb	r3, [r3, #0]
 8018a98:	4618      	mov	r0, r3
 8018a9a:	4b61      	ldr	r3, [pc, #388]	@ (8018c20 <MAP_moveNextBlock_acc+0x2c0>)
 8018a9c:	781b      	ldrb	r3, [r3, #0]
 8018a9e:	4619      	mov	r1, r3
 8018aa0:	4a60      	ldr	r2, [pc, #384]	@ (8018c24 <MAP_moveNextBlock_acc+0x2c4>)
 8018aa2:	0143      	lsls	r3, r0, #5
 8018aa4:	4413      	add	r3, r2
 8018aa6:	440b      	add	r3, r1
 8018aa8:	781b      	ldrb	r3, [r3, #0]
 8018aaa:	f003 0304 	and.w	r3, r3, #4
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d125      	bne.n	8018afe <MAP_moveNextBlock_acc+0x19e>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8018ab2:	4b59      	ldr	r3, [pc, #356]	@ (8018c18 <MAP_moveNextBlock_acc+0x2b8>)
 8018ab4:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8018ab6:	2b02      	cmp	r3, #2
 8018ab8:	d10e      	bne.n	8018ad8 <MAP_moveNextBlock_acc+0x178>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8018aba:	4b58      	ldr	r3, [pc, #352]	@ (8018c1c <MAP_moveNextBlock_acc+0x2bc>)
 8018abc:	781b      	ldrb	r3, [r3, #0]
 8018abe:	4618      	mov	r0, r3
 8018ac0:	4b57      	ldr	r3, [pc, #348]	@ (8018c20 <MAP_moveNextBlock_acc+0x2c0>)
 8018ac2:	781b      	ldrb	r3, [r3, #0]
 8018ac4:	4619      	mov	r1, r3
 8018ac6:	4a57      	ldr	r2, [pc, #348]	@ (8018c24 <MAP_moveNextBlock_acc+0x2c4>)
 8018ac8:	0143      	lsls	r3, r0, #5
 8018aca:	4413      	add	r3, r2
 8018acc:	440b      	add	r3, r1
 8018ace:	781b      	ldrb	r3, [r3, #0]
 8018ad0:	f003 0308 	and.w	r3, r3, #8
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d112      	bne.n	8018afe <MAP_moveNextBlock_acc+0x19e>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8018ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8018c18 <MAP_moveNextBlock_acc+0x2b8>)
 8018ada:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8018adc:	2b03      	cmp	r3, #3
 8018ade:	d112      	bne.n	8018b06 <MAP_moveNextBlock_acc+0x1a6>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8018ae0:	4b4e      	ldr	r3, [pc, #312]	@ (8018c1c <MAP_moveNextBlock_acc+0x2bc>)
 8018ae2:	781b      	ldrb	r3, [r3, #0]
 8018ae4:	4618      	mov	r0, r3
 8018ae6:	4b4e      	ldr	r3, [pc, #312]	@ (8018c20 <MAP_moveNextBlock_acc+0x2c0>)
 8018ae8:	781b      	ldrb	r3, [r3, #0]
 8018aea:	4619      	mov	r1, r3
 8018aec:	4a4d      	ldr	r2, [pc, #308]	@ (8018c24 <MAP_moveNextBlock_acc+0x2c4>)
 8018aee:	0143      	lsls	r3, r0, #5
 8018af0:	4413      	add	r3, r2
 8018af2:	440b      	add	r3, r1
 8018af4:	781b      	ldrb	r3, [r3, #0]
 8018af6:	f003 0301 	and.w	r3, r3, #1
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d003      	beq.n	8018b06 <MAP_moveNextBlock_acc+0x1a6>
			){
			uc_DistControl = 0.02;
 8018afe:	4b4a      	ldr	r3, [pc, #296]	@ (8018c28 <MAP_moveNextBlock_acc+0x2c8>)
 8018b00:	2200      	movs	r2, #0
 8018b02:	701a      	strb	r2, [r3, #0]
 8018b04:	e002      	b.n	8018b0c <MAP_moveNextBlock_acc+0x1ac>
			}
		else{
			uc_DistControl = 0;
 8018b06:	4b48      	ldr	r3, [pc, #288]	@ (8018c28 <MAP_moveNextBlock_acc+0x2c8>)
 8018b08:	2200      	movs	r2, #0
 8018b0a:	701a      	strb	r2, [r3, #0]
		}
		if( uc_SlaCnt < SLA_Count ){
 8018b0c:	4b47      	ldr	r3, [pc, #284]	@ (8018c2c <MAP_moveNextBlock_acc+0x2cc>)
 8018b0e:	781a      	ldrb	r2, [r3, #0]
 8018b10:	4b47      	ldr	r3, [pc, #284]	@ (8018c30 <MAP_moveNextBlock_acc+0x2d0>)
 8018b12:	781b      	ldrb	r3, [r3, #0]
 8018b14:	429a      	cmp	r2, r3
 8018b16:	d20f      	bcs.n	8018b38 <MAP_moveNextBlock_acc+0x1d8>
				MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8018b18:	2000      	movs	r0, #0
 8018b1a:	f7eb f969 	bl	8003df0 <PARAM_getSra>
 8018b1e:	4603      	mov	r3, r0
 8018b20:	4619      	mov	r1, r3
 8018b22:	2000      	movs	r0, #0
 8018b24:	f7f8 fb74 	bl	8011210 <MOT_goSla>
				uc_SlaCnt++;
 8018b28:	4b40      	ldr	r3, [pc, #256]	@ (8018c2c <MAP_moveNextBlock_acc+0x2cc>)
 8018b2a:	781b      	ldrb	r3, [r3, #0]
 8018b2c:	3301      	adds	r3, #1
 8018b2e:	b2da      	uxtb	r2, r3
 8018b30:	4b3e      	ldr	r3, [pc, #248]	@ (8018c2c <MAP_moveNextBlock_acc+0x2cc>)
 8018b32:	701a      	strb	r2, [r3, #0]
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
						uc_SlaCnt++;
					}
				}
			}
		break;
 8018b34:	f000 bcdf 	b.w	80194f6 <MAP_moveNextBlock_acc+0xb96>
				if(WallHitFlag == 0){
 8018b38:	4b3e      	ldr	r3, [pc, #248]	@ (8018c34 <MAP_moveNextBlock_acc+0x2d4>)
 8018b3a:	781b      	ldrb	r3, [r3, #0]
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	f040 808f 	bne.w	8018c60 <MAP_moveNextBlock_acc+0x300>
					f_MoveBackDist = 0;
 8018b42:	4b32      	ldr	r3, [pc, #200]	@ (8018c0c <MAP_moveNextBlock_acc+0x2ac>)
 8018b44:	f04f 0200 	mov.w	r2, #0
 8018b48:	601a      	str	r2, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8018b4a:	4b33      	ldr	r3, [pc, #204]	@ (8018c18 <MAP_moveNextBlock_acc+0x2b8>)
 8018b4c:	781b      	ldrb	r3, [r3, #0]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d10e      	bne.n	8018b70 <MAP_moveNextBlock_acc+0x210>
 8018b52:	4b32      	ldr	r3, [pc, #200]	@ (8018c1c <MAP_moveNextBlock_acc+0x2bc>)
 8018b54:	781b      	ldrb	r3, [r3, #0]
 8018b56:	4618      	mov	r0, r3
 8018b58:	4b31      	ldr	r3, [pc, #196]	@ (8018c20 <MAP_moveNextBlock_acc+0x2c0>)
 8018b5a:	781b      	ldrb	r3, [r3, #0]
 8018b5c:	4619      	mov	r1, r3
 8018b5e:	4a31      	ldr	r2, [pc, #196]	@ (8018c24 <MAP_moveNextBlock_acc+0x2c4>)
 8018b60:	0143      	lsls	r3, r0, #5
 8018b62:	4413      	add	r3, r2
 8018b64:	440b      	add	r3, r1
 8018b66:	781b      	ldrb	r3, [r3, #0]
 8018b68:	f003 0308 	and.w	r3, r3, #8
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d138      	bne.n	8018be2 <MAP_moveNextBlock_acc+0x282>
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8018b70:	4b29      	ldr	r3, [pc, #164]	@ (8018c18 <MAP_moveNextBlock_acc+0x2b8>)
 8018b72:	781b      	ldrb	r3, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8018b74:	2b01      	cmp	r3, #1
 8018b76:	d10e      	bne.n	8018b96 <MAP_moveNextBlock_acc+0x236>
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8018b78:	4b28      	ldr	r3, [pc, #160]	@ (8018c1c <MAP_moveNextBlock_acc+0x2bc>)
 8018b7a:	781b      	ldrb	r3, [r3, #0]
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	4b28      	ldr	r3, [pc, #160]	@ (8018c20 <MAP_moveNextBlock_acc+0x2c0>)
 8018b80:	781b      	ldrb	r3, [r3, #0]
 8018b82:	4619      	mov	r1, r3
 8018b84:	4a27      	ldr	r2, [pc, #156]	@ (8018c24 <MAP_moveNextBlock_acc+0x2c4>)
 8018b86:	0143      	lsls	r3, r0, #5
 8018b88:	4413      	add	r3, r2
 8018b8a:	440b      	add	r3, r1
 8018b8c:	781b      	ldrb	r3, [r3, #0]
 8018b8e:	f003 0301 	and.w	r3, r3, #1
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d125      	bne.n	8018be2 <MAP_moveNextBlock_acc+0x282>
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8018b96:	4b20      	ldr	r3, [pc, #128]	@ (8018c18 <MAP_moveNextBlock_acc+0x2b8>)
 8018b98:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8018b9a:	2b02      	cmp	r3, #2
 8018b9c:	d10e      	bne.n	8018bbc <MAP_moveNextBlock_acc+0x25c>
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8018b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8018c1c <MAP_moveNextBlock_acc+0x2bc>)
 8018ba0:	781b      	ldrb	r3, [r3, #0]
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8018c20 <MAP_moveNextBlock_acc+0x2c0>)
 8018ba6:	781b      	ldrb	r3, [r3, #0]
 8018ba8:	4619      	mov	r1, r3
 8018baa:	4a1e      	ldr	r2, [pc, #120]	@ (8018c24 <MAP_moveNextBlock_acc+0x2c4>)
 8018bac:	0143      	lsls	r3, r0, #5
 8018bae:	4413      	add	r3, r2
 8018bb0:	440b      	add	r3, r1
 8018bb2:	781b      	ldrb	r3, [r3, #0]
 8018bb4:	f003 0302 	and.w	r3, r3, #2
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d112      	bne.n	8018be2 <MAP_moveNextBlock_acc+0x282>
						( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8018bbc:	4b16      	ldr	r3, [pc, #88]	@ (8018c18 <MAP_moveNextBlock_acc+0x2b8>)
 8018bbe:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8018bc0:	2b03      	cmp	r3, #3
 8018bc2:	d13d      	bne.n	8018c40 <MAP_moveNextBlock_acc+0x2e0>
						( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8018bc4:	4b15      	ldr	r3, [pc, #84]	@ (8018c1c <MAP_moveNextBlock_acc+0x2bc>)
 8018bc6:	781b      	ldrb	r3, [r3, #0]
 8018bc8:	4618      	mov	r0, r3
 8018bca:	4b15      	ldr	r3, [pc, #84]	@ (8018c20 <MAP_moveNextBlock_acc+0x2c0>)
 8018bcc:	781b      	ldrb	r3, [r3, #0]
 8018bce:	4619      	mov	r1, r3
 8018bd0:	4a14      	ldr	r2, [pc, #80]	@ (8018c24 <MAP_moveNextBlock_acc+0x2c4>)
 8018bd2:	0143      	lsls	r3, r0, #5
 8018bd4:	4413      	add	r3, r2
 8018bd6:	440b      	add	r3, r1
 8018bd8:	781b      	ldrb	r3, [r3, #0]
 8018bda:	f003 0304 	and.w	r3, r3, #4
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d02e      	beq.n	8018c40 <MAP_moveNextBlock_acc+0x2e0>
						MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8018be2:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8018c38 <MAP_moveNextBlock_acc+0x2d8>
 8018be6:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8018bea:	f7f6 fd5b 	bl	800f6a4 <MOT_goBlock_FinSpeed>
						MOT_turn(MOT_R90);						// 右90度旋回
 8018bee:	2000      	movs	r0, #0
 8018bf0:	f7f6 ff82 	bl	800faf8 <MOT_turn>
						uc_SlaCnt = 0;
 8018bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8018c2c <MAP_moveNextBlock_acc+0x2cc>)
 8018bf6:	2200      	movs	r2, #0
 8018bf8:	701a      	strb	r2, [r3, #0]
						MOT_goHitBackWall();					// バックする
 8018bfa:	f7f8 faa7 	bl	801114c <MOT_goHitBackWall>
						f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8018bfe:	4b03      	ldr	r3, [pc, #12]	@ (8018c0c <MAP_moveNextBlock_acc+0x2ac>)
 8018c00:	4a0e      	ldr	r2, [pc, #56]	@ (8018c3c <MAP_moveNextBlock_acc+0x2dc>)
 8018c02:	601a      	str	r2, [r3, #0]
						*p_type = TRUE;							// 次は半区間（＋バック）分進める
 8018c04:	683b      	ldr	r3, [r7, #0]
 8018c06:	2201      	movs	r2, #1
 8018c08:	701a      	strb	r2, [r3, #0]
 8018c0a:	e099      	b.n	8018d40 <MAP_moveNextBlock_acc+0x3e0>
 8018c0c:	2001ad90 	.word	0x2001ad90
 8018c10:	2001ad98 	.word	0x2001ad98
 8018c14:	3e99999a 	.word	0x3e99999a
 8018c18:	2001ad8a 	.word	0x2001ad8a
 8018c1c:	2001ad8b 	.word	0x2001ad8b
 8018c20:	2001ad8c 	.word	0x2001ad8c
 8018c24:	2001b5a0 	.word	0x2001b5a0
 8018c28:	20000400 	.word	0x20000400
 8018c2c:	2001ad94 	.word	0x2001ad94
 8018c30:	2000001c 	.word	0x2000001c
 8018c34:	20017b29 	.word	0x20017b29
 8018c38:	00000000 	.word	0x00000000
 8018c3c:	3e6b851f 	.word	0x3e6b851f
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8018c40:	2000      	movs	r0, #0
 8018c42:	f7eb f8d5 	bl	8003df0 <PARAM_getSra>
 8018c46:	4603      	mov	r3, r0
 8018c48:	4619      	mov	r1, r3
 8018c4a:	2000      	movs	r0, #0
 8018c4c:	f7f8 fae0 	bl	8011210 <MOT_goSla>
						uc_SlaCnt++;
 8018c50:	4b83      	ldr	r3, [pc, #524]	@ (8018e60 <MAP_moveNextBlock_acc+0x500>)
 8018c52:	781b      	ldrb	r3, [r3, #0]
 8018c54:	3301      	adds	r3, #1
 8018c56:	b2da      	uxtb	r2, r3
 8018c58:	4b81      	ldr	r3, [pc, #516]	@ (8018e60 <MAP_moveNextBlock_acc+0x500>)
 8018c5a:	701a      	strb	r2, [r3, #0]
		break;
 8018c5c:	f000 bc4b 	b.w	80194f6 <MAP_moveNextBlock_acc+0xb96>
					if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8018c60:	4b80      	ldr	r3, [pc, #512]	@ (8018e64 <MAP_moveNextBlock_acc+0x504>)
 8018c62:	781b      	ldrb	r3, [r3, #0]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d10e      	bne.n	8018c86 <MAP_moveNextBlock_acc+0x326>
 8018c68:	4b7f      	ldr	r3, [pc, #508]	@ (8018e68 <MAP_moveNextBlock_acc+0x508>)
 8018c6a:	781b      	ldrb	r3, [r3, #0]
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	4b7f      	ldr	r3, [pc, #508]	@ (8018e6c <MAP_moveNextBlock_acc+0x50c>)
 8018c70:	781b      	ldrb	r3, [r3, #0]
 8018c72:	4619      	mov	r1, r3
 8018c74:	4a7e      	ldr	r2, [pc, #504]	@ (8018e70 <MAP_moveNextBlock_acc+0x510>)
 8018c76:	0143      	lsls	r3, r0, #5
 8018c78:	4413      	add	r3, r2
 8018c7a:	440b      	add	r3, r1
 8018c7c:	781b      	ldrb	r3, [r3, #0]
 8018c7e:	f003 0301 	and.w	r3, r3, #1
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d138      	bne.n	8018cf8 <MAP_moveNextBlock_acc+0x398>
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8018c86:	4b77      	ldr	r3, [pc, #476]	@ (8018e64 <MAP_moveNextBlock_acc+0x504>)
 8018c88:	781b      	ldrb	r3, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8018c8a:	2b01      	cmp	r3, #1
 8018c8c:	d10e      	bne.n	8018cac <MAP_moveNextBlock_acc+0x34c>
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8018c8e:	4b76      	ldr	r3, [pc, #472]	@ (8018e68 <MAP_moveNextBlock_acc+0x508>)
 8018c90:	781b      	ldrb	r3, [r3, #0]
 8018c92:	4618      	mov	r0, r3
 8018c94:	4b75      	ldr	r3, [pc, #468]	@ (8018e6c <MAP_moveNextBlock_acc+0x50c>)
 8018c96:	781b      	ldrb	r3, [r3, #0]
 8018c98:	4619      	mov	r1, r3
 8018c9a:	4a75      	ldr	r2, [pc, #468]	@ (8018e70 <MAP_moveNextBlock_acc+0x510>)
 8018c9c:	0143      	lsls	r3, r0, #5
 8018c9e:	4413      	add	r3, r2
 8018ca0:	440b      	add	r3, r1
 8018ca2:	781b      	ldrb	r3, [r3, #0]
 8018ca4:	f003 0302 	and.w	r3, r3, #2
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d125      	bne.n	8018cf8 <MAP_moveNextBlock_acc+0x398>
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8018cac:	4b6d      	ldr	r3, [pc, #436]	@ (8018e64 <MAP_moveNextBlock_acc+0x504>)
 8018cae:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8018cb0:	2b02      	cmp	r3, #2
 8018cb2:	d10e      	bne.n	8018cd2 <MAP_moveNextBlock_acc+0x372>
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8018cb4:	4b6c      	ldr	r3, [pc, #432]	@ (8018e68 <MAP_moveNextBlock_acc+0x508>)
 8018cb6:	781b      	ldrb	r3, [r3, #0]
 8018cb8:	4618      	mov	r0, r3
 8018cba:	4b6c      	ldr	r3, [pc, #432]	@ (8018e6c <MAP_moveNextBlock_acc+0x50c>)
 8018cbc:	781b      	ldrb	r3, [r3, #0]
 8018cbe:	4619      	mov	r1, r3
 8018cc0:	4a6b      	ldr	r2, [pc, #428]	@ (8018e70 <MAP_moveNextBlock_acc+0x510>)
 8018cc2:	0143      	lsls	r3, r0, #5
 8018cc4:	4413      	add	r3, r2
 8018cc6:	440b      	add	r3, r1
 8018cc8:	781b      	ldrb	r3, [r3, #0]
 8018cca:	f003 0304 	and.w	r3, r3, #4
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d112      	bne.n	8018cf8 <MAP_moveNextBlock_acc+0x398>
						( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8018cd2:	4b64      	ldr	r3, [pc, #400]	@ (8018e64 <MAP_moveNextBlock_acc+0x504>)
 8018cd4:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8018cd6:	2b03      	cmp	r3, #3
 8018cd8:	d123      	bne.n	8018d22 <MAP_moveNextBlock_acc+0x3c2>
						( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8018cda:	4b63      	ldr	r3, [pc, #396]	@ (8018e68 <MAP_moveNextBlock_acc+0x508>)
 8018cdc:	781b      	ldrb	r3, [r3, #0]
 8018cde:	4618      	mov	r0, r3
 8018ce0:	4b62      	ldr	r3, [pc, #392]	@ (8018e6c <MAP_moveNextBlock_acc+0x50c>)
 8018ce2:	781b      	ldrb	r3, [r3, #0]
 8018ce4:	4619      	mov	r1, r3
 8018ce6:	4a62      	ldr	r2, [pc, #392]	@ (8018e70 <MAP_moveNextBlock_acc+0x510>)
 8018ce8:	0143      	lsls	r3, r0, #5
 8018cea:	4413      	add	r3, r2
 8018cec:	440b      	add	r3, r1
 8018cee:	781b      	ldrb	r3, [r3, #0]
 8018cf0:	f003 0308 	and.w	r3, r3, #8
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d014      	beq.n	8018d22 <MAP_moveNextBlock_acc+0x3c2>
						MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8018cf8:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 8018e74 <MAP_moveNextBlock_acc+0x514>
 8018cfc:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8018d00:	f7f6 fcd0 	bl	800f6a4 <MOT_goBlock_FinSpeed>
						LL_mDelay(100);
 8018d04:	2064      	movs	r0, #100	@ 0x64
 8018d06:	f002 feb1 	bl	801ba6c <LL_mDelay>
						DIST_Front_Wall_correction();
 8018d0a:	f7f9 fda1 	bl	8012850 <DIST_Front_Wall_correction>
						MOT_turn(MOT_R90);						// 右90度旋回
 8018d0e:	2000      	movs	r0, #0
 8018d10:	f7f6 fef2 	bl	800faf8 <MOT_turn>
						uc_SlaCnt = 0;
 8018d14:	4b52      	ldr	r3, [pc, #328]	@ (8018e60 <MAP_moveNextBlock_acc+0x500>)
 8018d16:	2200      	movs	r2, #0
 8018d18:	701a      	strb	r2, [r3, #0]
						*p_type = TRUE;								// 次は半区間＋バック分進める
 8018d1a:	683b      	ldr	r3, [r7, #0]
 8018d1c:	2201      	movs	r2, #1
 8018d1e:	701a      	strb	r2, [r3, #0]
 8018d20:	e00e      	b.n	8018d40 <MAP_moveNextBlock_acc+0x3e0>
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8018d22:	2000      	movs	r0, #0
 8018d24:	f7eb f864 	bl	8003df0 <PARAM_getSra>
 8018d28:	4603      	mov	r3, r0
 8018d2a:	4619      	mov	r1, r3
 8018d2c:	2000      	movs	r0, #0
 8018d2e:	f7f8 fa6f 	bl	8011210 <MOT_goSla>
						uc_SlaCnt++;
 8018d32:	4b4b      	ldr	r3, [pc, #300]	@ (8018e60 <MAP_moveNextBlock_acc+0x500>)
 8018d34:	781b      	ldrb	r3, [r3, #0]
 8018d36:	3301      	adds	r3, #1
 8018d38:	b2da      	uxtb	r2, r3
 8018d3a:	4b49      	ldr	r3, [pc, #292]	@ (8018e60 <MAP_moveNextBlock_acc+0x500>)
 8018d3c:	701a      	strb	r2, [r3, #0]
		break;
 8018d3e:	e3da      	b.n	80194f6 <MAP_moveNextBlock_acc+0xb96>
 8018d40:	e3d9      	b.n	80194f6 <MAP_moveNextBlock_acc+0xb96>

		/* 左に旋回する */
	case WEST:
		if (st_Known.bl_known == TRUE) {		// 直線分を消化
 8018d42:	4b4d      	ldr	r3, [pc, #308]	@ (8018e78 <MAP_moveNextBlock_acc+0x518>)
 8018d44:	785b      	ldrb	r3, [r3, #1]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d022      	beq.n	8018d90 <MAP_moveNextBlock_acc+0x430>
			if (st_Known.uc_strCnt < 2) {
 8018d4a:	4b4b      	ldr	r3, [pc, #300]	@ (8018e78 <MAP_moveNextBlock_acc+0x518>)
 8018d4c:	781b      	ldrb	r3, [r3, #0]
 8018d4e:	2b01      	cmp	r3, #1
 8018d50:	d804      	bhi.n	8018d5c <MAP_moveNextBlock_acc+0x3fc>
				MOT_goBlock_Const(1);					// 1区画の場合は等速のまま
 8018d52:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018d56:	f7f6 fcc9 	bl	800f6ec <MOT_goBlock_Const>
 8018d5a:	e013      	b.n	8018d84 <MAP_moveNextBlock_acc+0x424>
			}
			else {
//				LED = LED_ALL_ON;
				MOT_setTrgtSpeed(MAP_KNOWN_ACC_SPEED);									// 既知区間加速するときの目標速度	
 8018d5c:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8018d60:	f7f8 f9ce 	bl	8011100 <MOT_setTrgtSpeed>
				MOT_goBlock_FinSpeed((float)(st_Known.uc_strCnt), SEARCH_SPEED);		// n区画前進
 8018d64:	4b44      	ldr	r3, [pc, #272]	@ (8018e78 <MAP_moveNextBlock_acc+0x518>)
 8018d66:	781b      	ldrb	r3, [r3, #0]
 8018d68:	ee07 3a90 	vmov	s15, r3
 8018d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018d70:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8018e7c <MAP_moveNextBlock_acc+0x51c>
 8018d74:	eeb0 0a67 	vmov.f32	s0, s15
 8018d78:	f7f6 fc94 	bl	800f6a4 <MOT_goBlock_FinSpeed>
				MOT_setTrgtSpeed(SEARCH_SPEED);										// 目標速度をデフォルト値に戻す
 8018d7c:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8018e7c <MAP_moveNextBlock_acc+0x51c>
 8018d80:	f7f8 f9be 	bl	8011100 <MOT_setTrgtSpeed>
//				LED = LED_ALL_OFF;
			}
			st_Known.uc_strCnt = 0;			//////////////////////////////////////
 8018d84:	4b3c      	ldr	r3, [pc, #240]	@ (8018e78 <MAP_moveNextBlock_acc+0x518>)
 8018d86:	2200      	movs	r2, #0
 8018d88:	701a      	strb	r2, [r3, #0]
			st_Known.bl_known = FALSE;
 8018d8a:	4b3b      	ldr	r3, [pc, #236]	@ (8018e78 <MAP_moveNextBlock_acc+0x518>)
 8018d8c:	2200      	movs	r2, #0
 8018d8e:	705a      	strb	r2, [r3, #1]
		}

		if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8018d90:	4b34      	ldr	r3, [pc, #208]	@ (8018e64 <MAP_moveNextBlock_acc+0x504>)
 8018d92:	781b      	ldrb	r3, [r3, #0]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d10e      	bne.n	8018db6 <MAP_moveNextBlock_acc+0x456>
 8018d98:	4b33      	ldr	r3, [pc, #204]	@ (8018e68 <MAP_moveNextBlock_acc+0x508>)
 8018d9a:	781b      	ldrb	r3, [r3, #0]
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	4b33      	ldr	r3, [pc, #204]	@ (8018e6c <MAP_moveNextBlock_acc+0x50c>)
 8018da0:	781b      	ldrb	r3, [r3, #0]
 8018da2:	4619      	mov	r1, r3
 8018da4:	4a32      	ldr	r2, [pc, #200]	@ (8018e70 <MAP_moveNextBlock_acc+0x510>)
 8018da6:	0143      	lsls	r3, r0, #5
 8018da8:	4413      	add	r3, r2
 8018daa:	440b      	add	r3, r1
 8018dac:	781b      	ldrb	r3, [r3, #0]
 8018dae:	f003 0308 	and.w	r3, r3, #8
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d138      	bne.n	8018e28 <MAP_moveNextBlock_acc+0x4c8>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8018db6:	4b2b      	ldr	r3, [pc, #172]	@ (8018e64 <MAP_moveNextBlock_acc+0x504>)
 8018db8:	781b      	ldrb	r3, [r3, #0]
		if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8018dba:	2b01      	cmp	r3, #1
 8018dbc:	d10e      	bne.n	8018ddc <MAP_moveNextBlock_acc+0x47c>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8018dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8018e68 <MAP_moveNextBlock_acc+0x508>)
 8018dc0:	781b      	ldrb	r3, [r3, #0]
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	4b29      	ldr	r3, [pc, #164]	@ (8018e6c <MAP_moveNextBlock_acc+0x50c>)
 8018dc6:	781b      	ldrb	r3, [r3, #0]
 8018dc8:	4619      	mov	r1, r3
 8018dca:	4a29      	ldr	r2, [pc, #164]	@ (8018e70 <MAP_moveNextBlock_acc+0x510>)
 8018dcc:	0143      	lsls	r3, r0, #5
 8018dce:	4413      	add	r3, r2
 8018dd0:	440b      	add	r3, r1
 8018dd2:	781b      	ldrb	r3, [r3, #0]
 8018dd4:	f003 0301 	and.w	r3, r3, #1
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d125      	bne.n	8018e28 <MAP_moveNextBlock_acc+0x4c8>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8018ddc:	4b21      	ldr	r3, [pc, #132]	@ (8018e64 <MAP_moveNextBlock_acc+0x504>)
 8018dde:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8018de0:	2b02      	cmp	r3, #2
 8018de2:	d10e      	bne.n	8018e02 <MAP_moveNextBlock_acc+0x4a2>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8018de4:	4b20      	ldr	r3, [pc, #128]	@ (8018e68 <MAP_moveNextBlock_acc+0x508>)
 8018de6:	781b      	ldrb	r3, [r3, #0]
 8018de8:	4618      	mov	r0, r3
 8018dea:	4b20      	ldr	r3, [pc, #128]	@ (8018e6c <MAP_moveNextBlock_acc+0x50c>)
 8018dec:	781b      	ldrb	r3, [r3, #0]
 8018dee:	4619      	mov	r1, r3
 8018df0:	4a1f      	ldr	r2, [pc, #124]	@ (8018e70 <MAP_moveNextBlock_acc+0x510>)
 8018df2:	0143      	lsls	r3, r0, #5
 8018df4:	4413      	add	r3, r2
 8018df6:	440b      	add	r3, r1
 8018df8:	781b      	ldrb	r3, [r3, #0]
 8018dfa:	f003 0302 	and.w	r3, r3, #2
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d112      	bne.n	8018e28 <MAP_moveNextBlock_acc+0x4c8>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8018e02:	4b18      	ldr	r3, [pc, #96]	@ (8018e64 <MAP_moveNextBlock_acc+0x504>)
 8018e04:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8018e06:	2b03      	cmp	r3, #3
 8018e08:	d112      	bne.n	8018e30 <MAP_moveNextBlock_acc+0x4d0>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8018e0a:	4b17      	ldr	r3, [pc, #92]	@ (8018e68 <MAP_moveNextBlock_acc+0x508>)
 8018e0c:	781b      	ldrb	r3, [r3, #0]
 8018e0e:	4618      	mov	r0, r3
 8018e10:	4b16      	ldr	r3, [pc, #88]	@ (8018e6c <MAP_moveNextBlock_acc+0x50c>)
 8018e12:	781b      	ldrb	r3, [r3, #0]
 8018e14:	4619      	mov	r1, r3
 8018e16:	4a16      	ldr	r2, [pc, #88]	@ (8018e70 <MAP_moveNextBlock_acc+0x510>)
 8018e18:	0143      	lsls	r3, r0, #5
 8018e1a:	4413      	add	r3, r2
 8018e1c:	440b      	add	r3, r1
 8018e1e:	781b      	ldrb	r3, [r3, #0]
 8018e20:	f003 0304 	and.w	r3, r3, #4
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d003      	beq.n	8018e30 <MAP_moveNextBlock_acc+0x4d0>
			){
			uc_DistControl = 0.02;
 8018e28:	4b15      	ldr	r3, [pc, #84]	@ (8018e80 <MAP_moveNextBlock_acc+0x520>)
 8018e2a:	2200      	movs	r2, #0
 8018e2c:	701a      	strb	r2, [r3, #0]
 8018e2e:	e002      	b.n	8018e36 <MAP_moveNextBlock_acc+0x4d6>
			}
		else{
			uc_DistControl = 0;
 8018e30:	4b13      	ldr	r3, [pc, #76]	@ (8018e80 <MAP_moveNextBlock_acc+0x520>)
 8018e32:	2200      	movs	r2, #0
 8018e34:	701a      	strb	r2, [r3, #0]
		}

		if( uc_SlaCnt < SLA_Count ){
 8018e36:	4b0a      	ldr	r3, [pc, #40]	@ (8018e60 <MAP_moveNextBlock_acc+0x500>)
 8018e38:	781a      	ldrb	r2, [r3, #0]
 8018e3a:	4b12      	ldr	r3, [pc, #72]	@ (8018e84 <MAP_moveNextBlock_acc+0x524>)
 8018e3c:	781b      	ldrb	r3, [r3, #0]
 8018e3e:	429a      	cmp	r2, r3
 8018e40:	d222      	bcs.n	8018e88 <MAP_moveNextBlock_acc+0x528>
				MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 8018e42:	2000      	movs	r0, #0
 8018e44:	f7ea ffd4 	bl	8003df0 <PARAM_getSra>
 8018e48:	4603      	mov	r3, r0
 8018e4a:	4619      	mov	r1, r3
 8018e4c:	2001      	movs	r0, #1
 8018e4e:	f7f8 f9df 	bl	8011210 <MOT_goSla>
				uc_SlaCnt++;
 8018e52:	4b03      	ldr	r3, [pc, #12]	@ (8018e60 <MAP_moveNextBlock_acc+0x500>)
 8018e54:	781b      	ldrb	r3, [r3, #0]
 8018e56:	3301      	adds	r3, #1
 8018e58:	b2da      	uxtb	r2, r3
 8018e5a:	4b01      	ldr	r3, [pc, #4]	@ (8018e60 <MAP_moveNextBlock_acc+0x500>)
 8018e5c:	701a      	strb	r2, [r3, #0]
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
						uc_SlaCnt++;
					}
				}
			}
		break;
 8018e5e:	e34a      	b.n	80194f6 <MAP_moveNextBlock_acc+0xb96>
 8018e60:	2001ad94 	.word	0x2001ad94
 8018e64:	2001ad8a 	.word	0x2001ad8a
 8018e68:	2001ad8b 	.word	0x2001ad8b
 8018e6c:	2001ad8c 	.word	0x2001ad8c
 8018e70:	2001b5a0 	.word	0x2001b5a0
 8018e74:	00000000 	.word	0x00000000
 8018e78:	2001ad98 	.word	0x2001ad98
 8018e7c:	3e99999a 	.word	0x3e99999a
 8018e80:	20000400 	.word	0x20000400
 8018e84:	2000001c 	.word	0x2000001c
				if(WallHitFlag == 0){
 8018e88:	4b74      	ldr	r3, [pc, #464]	@ (801905c <MAP_moveNextBlock_acc+0x6fc>)
 8018e8a:	781b      	ldrb	r3, [r3, #0]
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d173      	bne.n	8018f78 <MAP_moveNextBlock_acc+0x618>
					f_MoveBackDist = 0;
 8018e90:	4b73      	ldr	r3, [pc, #460]	@ (8019060 <MAP_moveNextBlock_acc+0x700>)
 8018e92:	f04f 0200 	mov.w	r2, #0
 8018e96:	601a      	str	r2, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8018e98:	4b72      	ldr	r3, [pc, #456]	@ (8019064 <MAP_moveNextBlock_acc+0x704>)
 8018e9a:	781b      	ldrb	r3, [r3, #0]
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d10e      	bne.n	8018ebe <MAP_moveNextBlock_acc+0x55e>
 8018ea0:	4b71      	ldr	r3, [pc, #452]	@ (8019068 <MAP_moveNextBlock_acc+0x708>)
 8018ea2:	781b      	ldrb	r3, [r3, #0]
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	4b71      	ldr	r3, [pc, #452]	@ (801906c <MAP_moveNextBlock_acc+0x70c>)
 8018ea8:	781b      	ldrb	r3, [r3, #0]
 8018eaa:	4619      	mov	r1, r3
 8018eac:	4a70      	ldr	r2, [pc, #448]	@ (8019070 <MAP_moveNextBlock_acc+0x710>)
 8018eae:	0143      	lsls	r3, r0, #5
 8018eb0:	4413      	add	r3, r2
 8018eb2:	440b      	add	r3, r1
 8018eb4:	781b      	ldrb	r3, [r3, #0]
 8018eb6:	f003 0302 	and.w	r3, r3, #2
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d138      	bne.n	8018f30 <MAP_moveNextBlock_acc+0x5d0>
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8018ebe:	4b69      	ldr	r3, [pc, #420]	@ (8019064 <MAP_moveNextBlock_acc+0x704>)
 8018ec0:	781b      	ldrb	r3, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8018ec2:	2b01      	cmp	r3, #1
 8018ec4:	d10e      	bne.n	8018ee4 <MAP_moveNextBlock_acc+0x584>
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8018ec6:	4b68      	ldr	r3, [pc, #416]	@ (8019068 <MAP_moveNextBlock_acc+0x708>)
 8018ec8:	781b      	ldrb	r3, [r3, #0]
 8018eca:	4618      	mov	r0, r3
 8018ecc:	4b67      	ldr	r3, [pc, #412]	@ (801906c <MAP_moveNextBlock_acc+0x70c>)
 8018ece:	781b      	ldrb	r3, [r3, #0]
 8018ed0:	4619      	mov	r1, r3
 8018ed2:	4a67      	ldr	r2, [pc, #412]	@ (8019070 <MAP_moveNextBlock_acc+0x710>)
 8018ed4:	0143      	lsls	r3, r0, #5
 8018ed6:	4413      	add	r3, r2
 8018ed8:	440b      	add	r3, r1
 8018eda:	781b      	ldrb	r3, [r3, #0]
 8018edc:	f003 0304 	and.w	r3, r3, #4
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d125      	bne.n	8018f30 <MAP_moveNextBlock_acc+0x5d0>
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8018ee4:	4b5f      	ldr	r3, [pc, #380]	@ (8019064 <MAP_moveNextBlock_acc+0x704>)
 8018ee6:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8018ee8:	2b02      	cmp	r3, #2
 8018eea:	d10e      	bne.n	8018f0a <MAP_moveNextBlock_acc+0x5aa>
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8018eec:	4b5e      	ldr	r3, [pc, #376]	@ (8019068 <MAP_moveNextBlock_acc+0x708>)
 8018eee:	781b      	ldrb	r3, [r3, #0]
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	4b5e      	ldr	r3, [pc, #376]	@ (801906c <MAP_moveNextBlock_acc+0x70c>)
 8018ef4:	781b      	ldrb	r3, [r3, #0]
 8018ef6:	4619      	mov	r1, r3
 8018ef8:	4a5d      	ldr	r2, [pc, #372]	@ (8019070 <MAP_moveNextBlock_acc+0x710>)
 8018efa:	0143      	lsls	r3, r0, #5
 8018efc:	4413      	add	r3, r2
 8018efe:	440b      	add	r3, r1
 8018f00:	781b      	ldrb	r3, [r3, #0]
 8018f02:	f003 0308 	and.w	r3, r3, #8
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d112      	bne.n	8018f30 <MAP_moveNextBlock_acc+0x5d0>
						( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8018f0a:	4b56      	ldr	r3, [pc, #344]	@ (8019064 <MAP_moveNextBlock_acc+0x704>)
 8018f0c:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8018f0e:	2b03      	cmp	r3, #3
 8018f10:	d123      	bne.n	8018f5a <MAP_moveNextBlock_acc+0x5fa>
						( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8018f12:	4b55      	ldr	r3, [pc, #340]	@ (8019068 <MAP_moveNextBlock_acc+0x708>)
 8018f14:	781b      	ldrb	r3, [r3, #0]
 8018f16:	4618      	mov	r0, r3
 8018f18:	4b54      	ldr	r3, [pc, #336]	@ (801906c <MAP_moveNextBlock_acc+0x70c>)
 8018f1a:	781b      	ldrb	r3, [r3, #0]
 8018f1c:	4619      	mov	r1, r3
 8018f1e:	4a54      	ldr	r2, [pc, #336]	@ (8019070 <MAP_moveNextBlock_acc+0x710>)
 8018f20:	0143      	lsls	r3, r0, #5
 8018f22:	4413      	add	r3, r2
 8018f24:	440b      	add	r3, r1
 8018f26:	781b      	ldrb	r3, [r3, #0]
 8018f28:	f003 0301 	and.w	r3, r3, #1
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d014      	beq.n	8018f5a <MAP_moveNextBlock_acc+0x5fa>
						MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8018f30:	eddf 0a52 	vldr	s1, [pc, #328]	@ 801907c <MAP_moveNextBlock_acc+0x71c>
 8018f34:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8018f38:	f7f6 fbb4 	bl	800f6a4 <MOT_goBlock_FinSpeed>
						MOT_turn(MOT_L90);					// 右90度旋回
 8018f3c:	2001      	movs	r0, #1
 8018f3e:	f7f6 fddb 	bl	800faf8 <MOT_turn>
						uc_SlaCnt = 0;
 8018f42:	4b4c      	ldr	r3, [pc, #304]	@ (8019074 <MAP_moveNextBlock_acc+0x714>)
 8018f44:	2200      	movs	r2, #0
 8018f46:	701a      	strb	r2, [r3, #0]
						MOT_goHitBackWall();					// バックする
 8018f48:	f7f8 f900 	bl	801114c <MOT_goHitBackWall>
						f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8018f4c:	4b44      	ldr	r3, [pc, #272]	@ (8019060 <MAP_moveNextBlock_acc+0x700>)
 8018f4e:	4a4a      	ldr	r2, [pc, #296]	@ (8019078 <MAP_moveNextBlock_acc+0x718>)
 8018f50:	601a      	str	r2, [r3, #0]
						*p_type = TRUE;							// 次は半区間（＋バック）分進める
 8018f52:	683b      	ldr	r3, [r7, #0]
 8018f54:	2201      	movs	r2, #1
 8018f56:	701a      	strb	r2, [r3, #0]
 8018f58:	e07e      	b.n	8019058 <MAP_moveNextBlock_acc+0x6f8>
						MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 8018f5a:	2000      	movs	r0, #0
 8018f5c:	f7ea ff48 	bl	8003df0 <PARAM_getSra>
 8018f60:	4603      	mov	r3, r0
 8018f62:	4619      	mov	r1, r3
 8018f64:	2001      	movs	r0, #1
 8018f66:	f7f8 f953 	bl	8011210 <MOT_goSla>
						uc_SlaCnt++;
 8018f6a:	4b42      	ldr	r3, [pc, #264]	@ (8019074 <MAP_moveNextBlock_acc+0x714>)
 8018f6c:	781b      	ldrb	r3, [r3, #0]
 8018f6e:	3301      	adds	r3, #1
 8018f70:	b2da      	uxtb	r2, r3
 8018f72:	4b40      	ldr	r3, [pc, #256]	@ (8019074 <MAP_moveNextBlock_acc+0x714>)
 8018f74:	701a      	strb	r2, [r3, #0]
		break;
 8018f76:	e2be      	b.n	80194f6 <MAP_moveNextBlock_acc+0xb96>
					if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8018f78:	4b3a      	ldr	r3, [pc, #232]	@ (8019064 <MAP_moveNextBlock_acc+0x704>)
 8018f7a:	781b      	ldrb	r3, [r3, #0]
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d10e      	bne.n	8018f9e <MAP_moveNextBlock_acc+0x63e>
 8018f80:	4b39      	ldr	r3, [pc, #228]	@ (8019068 <MAP_moveNextBlock_acc+0x708>)
 8018f82:	781b      	ldrb	r3, [r3, #0]
 8018f84:	4618      	mov	r0, r3
 8018f86:	4b39      	ldr	r3, [pc, #228]	@ (801906c <MAP_moveNextBlock_acc+0x70c>)
 8018f88:	781b      	ldrb	r3, [r3, #0]
 8018f8a:	4619      	mov	r1, r3
 8018f8c:	4a38      	ldr	r2, [pc, #224]	@ (8019070 <MAP_moveNextBlock_acc+0x710>)
 8018f8e:	0143      	lsls	r3, r0, #5
 8018f90:	4413      	add	r3, r2
 8018f92:	440b      	add	r3, r1
 8018f94:	781b      	ldrb	r3, [r3, #0]
 8018f96:	f003 0301 	and.w	r3, r3, #1
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d138      	bne.n	8019010 <MAP_moveNextBlock_acc+0x6b0>
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8018f9e:	4b31      	ldr	r3, [pc, #196]	@ (8019064 <MAP_moveNextBlock_acc+0x704>)
 8018fa0:	781b      	ldrb	r3, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8018fa2:	2b01      	cmp	r3, #1
 8018fa4:	d10e      	bne.n	8018fc4 <MAP_moveNextBlock_acc+0x664>
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8018fa6:	4b30      	ldr	r3, [pc, #192]	@ (8019068 <MAP_moveNextBlock_acc+0x708>)
 8018fa8:	781b      	ldrb	r3, [r3, #0]
 8018faa:	4618      	mov	r0, r3
 8018fac:	4b2f      	ldr	r3, [pc, #188]	@ (801906c <MAP_moveNextBlock_acc+0x70c>)
 8018fae:	781b      	ldrb	r3, [r3, #0]
 8018fb0:	4619      	mov	r1, r3
 8018fb2:	4a2f      	ldr	r2, [pc, #188]	@ (8019070 <MAP_moveNextBlock_acc+0x710>)
 8018fb4:	0143      	lsls	r3, r0, #5
 8018fb6:	4413      	add	r3, r2
 8018fb8:	440b      	add	r3, r1
 8018fba:	781b      	ldrb	r3, [r3, #0]
 8018fbc:	f003 0302 	and.w	r3, r3, #2
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d125      	bne.n	8019010 <MAP_moveNextBlock_acc+0x6b0>
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8018fc4:	4b27      	ldr	r3, [pc, #156]	@ (8019064 <MAP_moveNextBlock_acc+0x704>)
 8018fc6:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8018fc8:	2b02      	cmp	r3, #2
 8018fca:	d10e      	bne.n	8018fea <MAP_moveNextBlock_acc+0x68a>
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8018fcc:	4b26      	ldr	r3, [pc, #152]	@ (8019068 <MAP_moveNextBlock_acc+0x708>)
 8018fce:	781b      	ldrb	r3, [r3, #0]
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	4b26      	ldr	r3, [pc, #152]	@ (801906c <MAP_moveNextBlock_acc+0x70c>)
 8018fd4:	781b      	ldrb	r3, [r3, #0]
 8018fd6:	4619      	mov	r1, r3
 8018fd8:	4a25      	ldr	r2, [pc, #148]	@ (8019070 <MAP_moveNextBlock_acc+0x710>)
 8018fda:	0143      	lsls	r3, r0, #5
 8018fdc:	4413      	add	r3, r2
 8018fde:	440b      	add	r3, r1
 8018fe0:	781b      	ldrb	r3, [r3, #0]
 8018fe2:	f003 0304 	and.w	r3, r3, #4
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d112      	bne.n	8019010 <MAP_moveNextBlock_acc+0x6b0>
						( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8018fea:	4b1e      	ldr	r3, [pc, #120]	@ (8019064 <MAP_moveNextBlock_acc+0x704>)
 8018fec:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8018fee:	2b03      	cmp	r3, #3
 8018ff0:	d123      	bne.n	801903a <MAP_moveNextBlock_acc+0x6da>
						( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8018ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8019068 <MAP_moveNextBlock_acc+0x708>)
 8018ff4:	781b      	ldrb	r3, [r3, #0]
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	4b1c      	ldr	r3, [pc, #112]	@ (801906c <MAP_moveNextBlock_acc+0x70c>)
 8018ffa:	781b      	ldrb	r3, [r3, #0]
 8018ffc:	4619      	mov	r1, r3
 8018ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8019070 <MAP_moveNextBlock_acc+0x710>)
 8019000:	0143      	lsls	r3, r0, #5
 8019002:	4413      	add	r3, r2
 8019004:	440b      	add	r3, r1
 8019006:	781b      	ldrb	r3, [r3, #0]
 8019008:	f003 0308 	and.w	r3, r3, #8
 801900c:	2b00      	cmp	r3, #0
 801900e:	d014      	beq.n	801903a <MAP_moveNextBlock_acc+0x6da>
						MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8019010:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 801907c <MAP_moveNextBlock_acc+0x71c>
 8019014:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8019018:	f7f6 fb44 	bl	800f6a4 <MOT_goBlock_FinSpeed>
						LL_mDelay(100);
 801901c:	2064      	movs	r0, #100	@ 0x64
 801901e:	f002 fd25 	bl	801ba6c <LL_mDelay>
						DIST_Front_Wall_correction();
 8019022:	f7f9 fc15 	bl	8012850 <DIST_Front_Wall_correction>
						MOT_turn(MOT_L90);						// 右90度旋回
 8019026:	2001      	movs	r0, #1
 8019028:	f7f6 fd66 	bl	800faf8 <MOT_turn>
						uc_SlaCnt = 0;
 801902c:	4b11      	ldr	r3, [pc, #68]	@ (8019074 <MAP_moveNextBlock_acc+0x714>)
 801902e:	2200      	movs	r2, #0
 8019030:	701a      	strb	r2, [r3, #0]
						*p_type = TRUE;								// 次は半区間＋バック分進める
 8019032:	683b      	ldr	r3, [r7, #0]
 8019034:	2201      	movs	r2, #1
 8019036:	701a      	strb	r2, [r3, #0]
 8019038:	e00e      	b.n	8019058 <MAP_moveNextBlock_acc+0x6f8>
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 801903a:	2000      	movs	r0, #0
 801903c:	f7ea fed8 	bl	8003df0 <PARAM_getSra>
 8019040:	4603      	mov	r3, r0
 8019042:	4619      	mov	r1, r3
 8019044:	2000      	movs	r0, #0
 8019046:	f7f8 f8e3 	bl	8011210 <MOT_goSla>
						uc_SlaCnt++;
 801904a:	4b0a      	ldr	r3, [pc, #40]	@ (8019074 <MAP_moveNextBlock_acc+0x714>)
 801904c:	781b      	ldrb	r3, [r3, #0]
 801904e:	3301      	adds	r3, #1
 8019050:	b2da      	uxtb	r2, r3
 8019052:	4b08      	ldr	r3, [pc, #32]	@ (8019074 <MAP_moveNextBlock_acc+0x714>)
 8019054:	701a      	strb	r2, [r3, #0]
		break;
 8019056:	e24e      	b.n	80194f6 <MAP_moveNextBlock_acc+0xb96>
 8019058:	e24d      	b.n	80194f6 <MAP_moveNextBlock_acc+0xb96>
 801905a:	bf00      	nop
 801905c:	20017b29 	.word	0x20017b29
 8019060:	2001ad90 	.word	0x2001ad90
 8019064:	2001ad8a 	.word	0x2001ad8a
 8019068:	2001ad8b 	.word	0x2001ad8b
 801906c:	2001ad8c 	.word	0x2001ad8c
 8019070:	2001b5a0 	.word	0x2001b5a0
 8019074:	2001ad94 	.word	0x2001ad94
 8019078:	3e6b851f 	.word	0x3e6b851f
 801907c:	00000000 	.word	0x00000000

		/* 反転して戻る */
	case SOUTH:
//		LED = LED_ALL_ON;
		MOT_goBlock_FinSpeed(0.5, 0);			// 半区画前進
 8019080:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 801907c <MAP_moveNextBlock_acc+0x71c>
 8019084:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8019088:	f7f6 fb0c 	bl	800f6a4 <MOT_goBlock_FinSpeed>
		if(WallHitFlag == 0){
 801908c:	4b86      	ldr	r3, [pc, #536]	@ (80192a8 <MAP_moveNextBlock_acc+0x948>)
 801908e:	781b      	ldrb	r3, [r3, #0]
 8019090:	2b00      	cmp	r3, #0
 8019092:	d15a      	bne.n	801914a <MAP_moveNextBlock_acc+0x7ea>
			MOT_turn(MOT_R180);									// 右180度旋回
 8019094:	2002      	movs	r0, #2
 8019096:	f7f6 fd2f 	bl	800faf8 <MOT_turn>
			uc_SlaCnt = 0;
 801909a:	4b84      	ldr	r3, [pc, #528]	@ (80192ac <MAP_moveNextBlock_acc+0x94c>)
 801909c:	2200      	movs	r2, #0
 801909e:	701a      	strb	r2, [r3, #0]

			/* 壁当て姿勢制御（後ろに壁があったらバック＋移動距離を加算する） */
			if (((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 80190a0:	4b83      	ldr	r3, [pc, #524]	@ (80192b0 <MAP_moveNextBlock_acc+0x950>)
 80190a2:	781b      	ldrb	r3, [r3, #0]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d10e      	bne.n	80190c6 <MAP_moveNextBlock_acc+0x766>
 80190a8:	4b82      	ldr	r3, [pc, #520]	@ (80192b4 <MAP_moveNextBlock_acc+0x954>)
 80190aa:	781b      	ldrb	r3, [r3, #0]
 80190ac:	4618      	mov	r0, r3
 80190ae:	4b82      	ldr	r3, [pc, #520]	@ (80192b8 <MAP_moveNextBlock_acc+0x958>)
 80190b0:	781b      	ldrb	r3, [r3, #0]
 80190b2:	4619      	mov	r1, r3
 80190b4:	4a81      	ldr	r2, [pc, #516]	@ (80192bc <MAP_moveNextBlock_acc+0x95c>)
 80190b6:	0143      	lsls	r3, r0, #5
 80190b8:	4413      	add	r3, r2
 80190ba:	440b      	add	r3, r1
 80190bc:	781b      	ldrb	r3, [r3, #0]
 80190be:	f003 0301 	and.w	r3, r3, #1
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d138      	bne.n	8019138 <MAP_moveNextBlock_acc+0x7d8>
				((en_Head == EAST) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 80190c6:	4b7a      	ldr	r3, [pc, #488]	@ (80192b0 <MAP_moveNextBlock_acc+0x950>)
 80190c8:	781b      	ldrb	r3, [r3, #0]
			if (((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 80190ca:	2b01      	cmp	r3, #1
 80190cc:	d10e      	bne.n	80190ec <MAP_moveNextBlock_acc+0x78c>
				((en_Head == EAST) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 80190ce:	4b79      	ldr	r3, [pc, #484]	@ (80192b4 <MAP_moveNextBlock_acc+0x954>)
 80190d0:	781b      	ldrb	r3, [r3, #0]
 80190d2:	4618      	mov	r0, r3
 80190d4:	4b78      	ldr	r3, [pc, #480]	@ (80192b8 <MAP_moveNextBlock_acc+0x958>)
 80190d6:	781b      	ldrb	r3, [r3, #0]
 80190d8:	4619      	mov	r1, r3
 80190da:	4a78      	ldr	r2, [pc, #480]	@ (80192bc <MAP_moveNextBlock_acc+0x95c>)
 80190dc:	0143      	lsls	r3, r0, #5
 80190de:	4413      	add	r3, r2
 80190e0:	440b      	add	r3, r1
 80190e2:	781b      	ldrb	r3, [r3, #0]
 80190e4:	f003 0302 	and.w	r3, r3, #2
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d125      	bne.n	8019138 <MAP_moveNextBlock_acc+0x7d8>
				((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 80190ec:	4b70      	ldr	r3, [pc, #448]	@ (80192b0 <MAP_moveNextBlock_acc+0x950>)
 80190ee:	781b      	ldrb	r3, [r3, #0]
				((en_Head == EAST) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 80190f0:	2b02      	cmp	r3, #2
 80190f2:	d10e      	bne.n	8019112 <MAP_moveNextBlock_acc+0x7b2>
				((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 80190f4:	4b6f      	ldr	r3, [pc, #444]	@ (80192b4 <MAP_moveNextBlock_acc+0x954>)
 80190f6:	781b      	ldrb	r3, [r3, #0]
 80190f8:	4618      	mov	r0, r3
 80190fa:	4b6f      	ldr	r3, [pc, #444]	@ (80192b8 <MAP_moveNextBlock_acc+0x958>)
 80190fc:	781b      	ldrb	r3, [r3, #0]
 80190fe:	4619      	mov	r1, r3
 8019100:	4a6e      	ldr	r2, [pc, #440]	@ (80192bc <MAP_moveNextBlock_acc+0x95c>)
 8019102:	0143      	lsls	r3, r0, #5
 8019104:	4413      	add	r3, r2
 8019106:	440b      	add	r3, r1
 8019108:	781b      	ldrb	r3, [r3, #0]
 801910a:	f003 0304 	and.w	r3, r3, #4
 801910e:	2b00      	cmp	r3, #0
 8019110:	d112      	bne.n	8019138 <MAP_moveNextBlock_acc+0x7d8>
				((en_Head == WEST) && ((g_SysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 8019112:	4b67      	ldr	r3, [pc, #412]	@ (80192b0 <MAP_moveNextBlock_acc+0x950>)
 8019114:	781b      	ldrb	r3, [r3, #0]
				((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 8019116:	2b03      	cmp	r3, #3
 8019118:	d113      	bne.n	8019142 <MAP_moveNextBlock_acc+0x7e2>
				((en_Head == WEST) && ((g_SysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 801911a:	4b66      	ldr	r3, [pc, #408]	@ (80192b4 <MAP_moveNextBlock_acc+0x954>)
 801911c:	781b      	ldrb	r3, [r3, #0]
 801911e:	4618      	mov	r0, r3
 8019120:	4b65      	ldr	r3, [pc, #404]	@ (80192b8 <MAP_moveNextBlock_acc+0x958>)
 8019122:	781b      	ldrb	r3, [r3, #0]
 8019124:	4619      	mov	r1, r3
 8019126:	4a65      	ldr	r2, [pc, #404]	@ (80192bc <MAP_moveNextBlock_acc+0x95c>)
 8019128:	0143      	lsls	r3, r0, #5
 801912a:	4413      	add	r3, r2
 801912c:	440b      	add	r3, r1
 801912e:	781b      	ldrb	r3, [r3, #0]
 8019130:	f003 0308 	and.w	r3, r3, #8
 8019134:	2b00      	cmp	r3, #0
 8019136:	d004      	beq.n	8019142 <MAP_moveNextBlock_acc+0x7e2>
				) {
				MOT_goHitBackWall();					// バックする
 8019138:	f7f8 f808 	bl	801114c <MOT_goHitBackWall>
				f_MoveBackDist = MOVE_BACK_DIST;	// バックした分の移動距離[区画]を加算
 801913c:	4b60      	ldr	r3, [pc, #384]	@ (80192c0 <MAP_moveNextBlock_acc+0x960>)
 801913e:	4a61      	ldr	r2, [pc, #388]	@ (80192c4 <MAP_moveNextBlock_acc+0x964>)
 8019140:	601a      	str	r2, [r3, #0]
			}
			*p_type = TRUE;								// 次は半区間＋バック分進める
 8019142:	683b      	ldr	r3, [r7, #0]
 8019144:	2201      	movs	r2, #1
 8019146:	701a      	strb	r2, [r3, #0]
				}
				
				*p_type = TRUE;								// 次は半区間＋バック分進める
			}
		}
		break;
 8019148:	e1d5      	b.n	80194f6 <MAP_moveNextBlock_acc+0xb96>
			uc_SlaCnt = 0;
 801914a:	4b58      	ldr	r3, [pc, #352]	@ (80192ac <MAP_moveNextBlock_acc+0x94c>)
 801914c:	2200      	movs	r2, #0
 801914e:	701a      	strb	r2, [r3, #0]
			if (((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 8019150:	4b57      	ldr	r3, [pc, #348]	@ (80192b0 <MAP_moveNextBlock_acc+0x950>)
 8019152:	781b      	ldrb	r3, [r3, #0]
 8019154:	2b00      	cmp	r3, #0
 8019156:	d10e      	bne.n	8019176 <MAP_moveNextBlock_acc+0x816>
 8019158:	4b56      	ldr	r3, [pc, #344]	@ (80192b4 <MAP_moveNextBlock_acc+0x954>)
 801915a:	781b      	ldrb	r3, [r3, #0]
 801915c:	4618      	mov	r0, r3
 801915e:	4b56      	ldr	r3, [pc, #344]	@ (80192b8 <MAP_moveNextBlock_acc+0x958>)
 8019160:	781b      	ldrb	r3, [r3, #0]
 8019162:	4619      	mov	r1, r3
 8019164:	4a55      	ldr	r2, [pc, #340]	@ (80192bc <MAP_moveNextBlock_acc+0x95c>)
 8019166:	0143      	lsls	r3, r0, #5
 8019168:	4413      	add	r3, r2
 801916a:	440b      	add	r3, r1
 801916c:	781b      	ldrb	r3, [r3, #0]
 801916e:	f003 0301 	and.w	r3, r3, #1
 8019172:	2b00      	cmp	r3, #0
 8019174:	d13a      	bne.n	80191ec <MAP_moveNextBlock_acc+0x88c>
				((en_Head == EAST) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 8019176:	4b4e      	ldr	r3, [pc, #312]	@ (80192b0 <MAP_moveNextBlock_acc+0x950>)
 8019178:	781b      	ldrb	r3, [r3, #0]
			if (((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 801917a:	2b01      	cmp	r3, #1
 801917c:	d10e      	bne.n	801919c <MAP_moveNextBlock_acc+0x83c>
				((en_Head == EAST) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 801917e:	4b4d      	ldr	r3, [pc, #308]	@ (80192b4 <MAP_moveNextBlock_acc+0x954>)
 8019180:	781b      	ldrb	r3, [r3, #0]
 8019182:	4618      	mov	r0, r3
 8019184:	4b4c      	ldr	r3, [pc, #304]	@ (80192b8 <MAP_moveNextBlock_acc+0x958>)
 8019186:	781b      	ldrb	r3, [r3, #0]
 8019188:	4619      	mov	r1, r3
 801918a:	4a4c      	ldr	r2, [pc, #304]	@ (80192bc <MAP_moveNextBlock_acc+0x95c>)
 801918c:	0143      	lsls	r3, r0, #5
 801918e:	4413      	add	r3, r2
 8019190:	440b      	add	r3, r1
 8019192:	781b      	ldrb	r3, [r3, #0]
 8019194:	f003 0302 	and.w	r3, r3, #2
 8019198:	2b00      	cmp	r3, #0
 801919a:	d127      	bne.n	80191ec <MAP_moveNextBlock_acc+0x88c>
				((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 801919c:	4b44      	ldr	r3, [pc, #272]	@ (80192b0 <MAP_moveNextBlock_acc+0x950>)
 801919e:	781b      	ldrb	r3, [r3, #0]
				((en_Head == EAST) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 80191a0:	2b02      	cmp	r3, #2
 80191a2:	d10e      	bne.n	80191c2 <MAP_moveNextBlock_acc+0x862>
				((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 80191a4:	4b43      	ldr	r3, [pc, #268]	@ (80192b4 <MAP_moveNextBlock_acc+0x954>)
 80191a6:	781b      	ldrb	r3, [r3, #0]
 80191a8:	4618      	mov	r0, r3
 80191aa:	4b43      	ldr	r3, [pc, #268]	@ (80192b8 <MAP_moveNextBlock_acc+0x958>)
 80191ac:	781b      	ldrb	r3, [r3, #0]
 80191ae:	4619      	mov	r1, r3
 80191b0:	4a42      	ldr	r2, [pc, #264]	@ (80192bc <MAP_moveNextBlock_acc+0x95c>)
 80191b2:	0143      	lsls	r3, r0, #5
 80191b4:	4413      	add	r3, r2
 80191b6:	440b      	add	r3, r1
 80191b8:	781b      	ldrb	r3, [r3, #0]
 80191ba:	f003 0304 	and.w	r3, r3, #4
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d114      	bne.n	80191ec <MAP_moveNextBlock_acc+0x88c>
				((en_Head == WEST) && ((g_SysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 80191c2:	4b3b      	ldr	r3, [pc, #236]	@ (80192b0 <MAP_moveNextBlock_acc+0x950>)
 80191c4:	781b      	ldrb	r3, [r3, #0]
				((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 80191c6:	2b03      	cmp	r3, #3
 80191c8:	f040 80dd 	bne.w	8019386 <MAP_moveNextBlock_acc+0xa26>
				((en_Head == WEST) && ((g_SysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 80191cc:	4b39      	ldr	r3, [pc, #228]	@ (80192b4 <MAP_moveNextBlock_acc+0x954>)
 80191ce:	781b      	ldrb	r3, [r3, #0]
 80191d0:	4618      	mov	r0, r3
 80191d2:	4b39      	ldr	r3, [pc, #228]	@ (80192b8 <MAP_moveNextBlock_acc+0x958>)
 80191d4:	781b      	ldrb	r3, [r3, #0]
 80191d6:	4619      	mov	r1, r3
 80191d8:	4a38      	ldr	r2, [pc, #224]	@ (80192bc <MAP_moveNextBlock_acc+0x95c>)
 80191da:	0143      	lsls	r3, r0, #5
 80191dc:	4413      	add	r3, r2
 80191de:	440b      	add	r3, r1
 80191e0:	781b      	ldrb	r3, [r3, #0]
 80191e2:	f003 0308 	and.w	r3, r3, #8
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	f000 80cd 	beq.w	8019386 <MAP_moveNextBlock_acc+0xa26>
					LL_mDelay(100);
 80191ec:	2064      	movs	r0, #100	@ 0x64
 80191ee:	f002 fc3d 	bl	801ba6c <LL_mDelay>
					DIST_Front_Wall_correction();
 80191f2:	f7f9 fb2d 	bl	8012850 <DIST_Front_Wall_correction>
					if(((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 北を向いていて東に壁がある
 80191f6:	4b2e      	ldr	r3, [pc, #184]	@ (80192b0 <MAP_moveNextBlock_acc+0x950>)
 80191f8:	781b      	ldrb	r3, [r3, #0]
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	d10e      	bne.n	801921c <MAP_moveNextBlock_acc+0x8bc>
 80191fe:	4b2d      	ldr	r3, [pc, #180]	@ (80192b4 <MAP_moveNextBlock_acc+0x954>)
 8019200:	781b      	ldrb	r3, [r3, #0]
 8019202:	4618      	mov	r0, r3
 8019204:	4b2c      	ldr	r3, [pc, #176]	@ (80192b8 <MAP_moveNextBlock_acc+0x958>)
 8019206:	781b      	ldrb	r3, [r3, #0]
 8019208:	4619      	mov	r1, r3
 801920a:	4a2c      	ldr	r2, [pc, #176]	@ (80192bc <MAP_moveNextBlock_acc+0x95c>)
 801920c:	0143      	lsls	r3, r0, #5
 801920e:	4413      	add	r3, r2
 8019210:	440b      	add	r3, r1
 8019212:	781b      	ldrb	r3, [r3, #0]
 8019214:	f003 0302 	and.w	r3, r3, #2
 8019218:	2b00      	cmp	r3, #0
 801921a:	d138      	bne.n	801928e <MAP_moveNextBlock_acc+0x92e>
						((en_Head == EAST) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 801921c:	4b24      	ldr	r3, [pc, #144]	@ (80192b0 <MAP_moveNextBlock_acc+0x950>)
 801921e:	781b      	ldrb	r3, [r3, #0]
					if(((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 北を向いていて東に壁がある
 8019220:	2b01      	cmp	r3, #1
 8019222:	d10e      	bne.n	8019242 <MAP_moveNextBlock_acc+0x8e2>
						((en_Head == EAST) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 8019224:	4b23      	ldr	r3, [pc, #140]	@ (80192b4 <MAP_moveNextBlock_acc+0x954>)
 8019226:	781b      	ldrb	r3, [r3, #0]
 8019228:	4618      	mov	r0, r3
 801922a:	4b23      	ldr	r3, [pc, #140]	@ (80192b8 <MAP_moveNextBlock_acc+0x958>)
 801922c:	781b      	ldrb	r3, [r3, #0]
 801922e:	4619      	mov	r1, r3
 8019230:	4a22      	ldr	r2, [pc, #136]	@ (80192bc <MAP_moveNextBlock_acc+0x95c>)
 8019232:	0143      	lsls	r3, r0, #5
 8019234:	4413      	add	r3, r2
 8019236:	440b      	add	r3, r1
 8019238:	781b      	ldrb	r3, [r3, #0]
 801923a:	f003 0304 	and.w	r3, r3, #4
 801923e:	2b00      	cmp	r3, #0
 8019240:	d125      	bne.n	801928e <MAP_moveNextBlock_acc+0x92e>
						((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 8019242:	4b1b      	ldr	r3, [pc, #108]	@ (80192b0 <MAP_moveNextBlock_acc+0x950>)
 8019244:	781b      	ldrb	r3, [r3, #0]
						((en_Head == EAST) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 8019246:	2b02      	cmp	r3, #2
 8019248:	d10e      	bne.n	8019268 <MAP_moveNextBlock_acc+0x908>
						((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 801924a:	4b1a      	ldr	r3, [pc, #104]	@ (80192b4 <MAP_moveNextBlock_acc+0x954>)
 801924c:	781b      	ldrb	r3, [r3, #0]
 801924e:	4618      	mov	r0, r3
 8019250:	4b19      	ldr	r3, [pc, #100]	@ (80192b8 <MAP_moveNextBlock_acc+0x958>)
 8019252:	781b      	ldrb	r3, [r3, #0]
 8019254:	4619      	mov	r1, r3
 8019256:	4a19      	ldr	r2, [pc, #100]	@ (80192bc <MAP_moveNextBlock_acc+0x95c>)
 8019258:	0143      	lsls	r3, r0, #5
 801925a:	4413      	add	r3, r2
 801925c:	440b      	add	r3, r1
 801925e:	781b      	ldrb	r3, [r3, #0]
 8019260:	f003 0308 	and.w	r3, r3, #8
 8019264:	2b00      	cmp	r3, #0
 8019266:	d112      	bne.n	801928e <MAP_moveNextBlock_acc+0x92e>
						((en_Head == WEST) && ((g_SysMap[my][mx] & 0x01) != 0)) 			// 西を向いていて北に壁がある
 8019268:	4b11      	ldr	r3, [pc, #68]	@ (80192b0 <MAP_moveNextBlock_acc+0x950>)
 801926a:	781b      	ldrb	r3, [r3, #0]
						((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 801926c:	2b03      	cmp	r3, #3
 801926e:	d12b      	bne.n	80192c8 <MAP_moveNextBlock_acc+0x968>
						((en_Head == WEST) && ((g_SysMap[my][mx] & 0x01) != 0)) 			// 西を向いていて北に壁がある
 8019270:	4b10      	ldr	r3, [pc, #64]	@ (80192b4 <MAP_moveNextBlock_acc+0x954>)
 8019272:	781b      	ldrb	r3, [r3, #0]
 8019274:	4618      	mov	r0, r3
 8019276:	4b10      	ldr	r3, [pc, #64]	@ (80192b8 <MAP_moveNextBlock_acc+0x958>)
 8019278:	781b      	ldrb	r3, [r3, #0]
 801927a:	4619      	mov	r1, r3
 801927c:	4a0f      	ldr	r2, [pc, #60]	@ (80192bc <MAP_moveNextBlock_acc+0x95c>)
 801927e:	0143      	lsls	r3, r0, #5
 8019280:	4413      	add	r3, r2
 8019282:	440b      	add	r3, r1
 8019284:	781b      	ldrb	r3, [r3, #0]
 8019286:	f003 0301 	and.w	r3, r3, #1
 801928a:	2b00      	cmp	r3, #0
 801928c:	d01c      	beq.n	80192c8 <MAP_moveNextBlock_acc+0x968>
						MOT_turn(MOT_R90);									// 右90度旋回
 801928e:	2000      	movs	r0, #0
 8019290:	f7f6 fc32 	bl	800faf8 <MOT_turn>
						LL_mDelay(100);
 8019294:	2064      	movs	r0, #100	@ 0x64
 8019296:	f002 fbe9 	bl	801ba6c <LL_mDelay>
						DIST_Front_Wall_correction();
 801929a:	f7f9 fad9 	bl	8012850 <DIST_Front_Wall_correction>
						MOT_turn(MOT_R90);									// 右90度旋回
 801929e:	2000      	movs	r0, #0
 80192a0:	f7f6 fc2a 	bl	800faf8 <MOT_turn>
 80192a4:	e06b      	b.n	801937e <MAP_moveNextBlock_acc+0xa1e>
 80192a6:	bf00      	nop
 80192a8:	20017b29 	.word	0x20017b29
 80192ac:	2001ad94 	.word	0x2001ad94
 80192b0:	2001ad8a 	.word	0x2001ad8a
 80192b4:	2001ad8b 	.word	0x2001ad8b
 80192b8:	2001ad8c 	.word	0x2001ad8c
 80192bc:	2001b5a0 	.word	0x2001b5a0
 80192c0:	2001ad90 	.word	0x2001ad90
 80192c4:	3e6b851f 	.word	0x3e6b851f
					}else if(((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 北を向いていて西に壁がある
 80192c8:	4b92      	ldr	r3, [pc, #584]	@ (8019514 <MAP_moveNextBlock_acc+0xbb4>)
 80192ca:	781b      	ldrb	r3, [r3, #0]
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d10e      	bne.n	80192ee <MAP_moveNextBlock_acc+0x98e>
 80192d0:	4b91      	ldr	r3, [pc, #580]	@ (8019518 <MAP_moveNextBlock_acc+0xbb8>)
 80192d2:	781b      	ldrb	r3, [r3, #0]
 80192d4:	4618      	mov	r0, r3
 80192d6:	4b91      	ldr	r3, [pc, #580]	@ (801951c <MAP_moveNextBlock_acc+0xbbc>)
 80192d8:	781b      	ldrb	r3, [r3, #0]
 80192da:	4619      	mov	r1, r3
 80192dc:	4a90      	ldr	r2, [pc, #576]	@ (8019520 <MAP_moveNextBlock_acc+0xbc0>)
 80192de:	0143      	lsls	r3, r0, #5
 80192e0:	4413      	add	r3, r2
 80192e2:	440b      	add	r3, r1
 80192e4:	781b      	ldrb	r3, [r3, #0]
 80192e6:	f003 0308 	and.w	r3, r3, #8
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d138      	bne.n	8019360 <MAP_moveNextBlock_acc+0xa00>
						((en_Head == EAST) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 80192ee:	4b89      	ldr	r3, [pc, #548]	@ (8019514 <MAP_moveNextBlock_acc+0xbb4>)
 80192f0:	781b      	ldrb	r3, [r3, #0]
					}else if(((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 北を向いていて西に壁がある
 80192f2:	2b01      	cmp	r3, #1
 80192f4:	d10e      	bne.n	8019314 <MAP_moveNextBlock_acc+0x9b4>
						((en_Head == EAST) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 80192f6:	4b88      	ldr	r3, [pc, #544]	@ (8019518 <MAP_moveNextBlock_acc+0xbb8>)
 80192f8:	781b      	ldrb	r3, [r3, #0]
 80192fa:	4618      	mov	r0, r3
 80192fc:	4b87      	ldr	r3, [pc, #540]	@ (801951c <MAP_moveNextBlock_acc+0xbbc>)
 80192fe:	781b      	ldrb	r3, [r3, #0]
 8019300:	4619      	mov	r1, r3
 8019302:	4a87      	ldr	r2, [pc, #540]	@ (8019520 <MAP_moveNextBlock_acc+0xbc0>)
 8019304:	0143      	lsls	r3, r0, #5
 8019306:	4413      	add	r3, r2
 8019308:	440b      	add	r3, r1
 801930a:	781b      	ldrb	r3, [r3, #0]
 801930c:	f003 0301 	and.w	r3, r3, #1
 8019310:	2b00      	cmp	r3, #0
 8019312:	d125      	bne.n	8019360 <MAP_moveNextBlock_acc+0xa00>
						((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 8019314:	4b7f      	ldr	r3, [pc, #508]	@ (8019514 <MAP_moveNextBlock_acc+0xbb4>)
 8019316:	781b      	ldrb	r3, [r3, #0]
						((en_Head == EAST) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 8019318:	2b02      	cmp	r3, #2
 801931a:	d10e      	bne.n	801933a <MAP_moveNextBlock_acc+0x9da>
						((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 801931c:	4b7e      	ldr	r3, [pc, #504]	@ (8019518 <MAP_moveNextBlock_acc+0xbb8>)
 801931e:	781b      	ldrb	r3, [r3, #0]
 8019320:	4618      	mov	r0, r3
 8019322:	4b7e      	ldr	r3, [pc, #504]	@ (801951c <MAP_moveNextBlock_acc+0xbbc>)
 8019324:	781b      	ldrb	r3, [r3, #0]
 8019326:	4619      	mov	r1, r3
 8019328:	4a7d      	ldr	r2, [pc, #500]	@ (8019520 <MAP_moveNextBlock_acc+0xbc0>)
 801932a:	0143      	lsls	r3, r0, #5
 801932c:	4413      	add	r3, r2
 801932e:	440b      	add	r3, r1
 8019330:	781b      	ldrb	r3, [r3, #0]
 8019332:	f003 0302 	and.w	r3, r3, #2
 8019336:	2b00      	cmp	r3, #0
 8019338:	d112      	bne.n	8019360 <MAP_moveNextBlock_acc+0xa00>
						((en_Head == WEST) && ((g_SysMap[my][mx] & 0x04) != 0)) 			// 西を向いていて南に壁がある
 801933a:	4b76      	ldr	r3, [pc, #472]	@ (8019514 <MAP_moveNextBlock_acc+0xbb4>)
 801933c:	781b      	ldrb	r3, [r3, #0]
						((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 801933e:	2b03      	cmp	r3, #3
 8019340:	d11a      	bne.n	8019378 <MAP_moveNextBlock_acc+0xa18>
						((en_Head == WEST) && ((g_SysMap[my][mx] & 0x04) != 0)) 			// 西を向いていて南に壁がある
 8019342:	4b75      	ldr	r3, [pc, #468]	@ (8019518 <MAP_moveNextBlock_acc+0xbb8>)
 8019344:	781b      	ldrb	r3, [r3, #0]
 8019346:	4618      	mov	r0, r3
 8019348:	4b74      	ldr	r3, [pc, #464]	@ (801951c <MAP_moveNextBlock_acc+0xbbc>)
 801934a:	781b      	ldrb	r3, [r3, #0]
 801934c:	4619      	mov	r1, r3
 801934e:	4a74      	ldr	r2, [pc, #464]	@ (8019520 <MAP_moveNextBlock_acc+0xbc0>)
 8019350:	0143      	lsls	r3, r0, #5
 8019352:	4413      	add	r3, r2
 8019354:	440b      	add	r3, r1
 8019356:	781b      	ldrb	r3, [r3, #0]
 8019358:	f003 0304 	and.w	r3, r3, #4
 801935c:	2b00      	cmp	r3, #0
 801935e:	d00b      	beq.n	8019378 <MAP_moveNextBlock_acc+0xa18>
						MOT_turn(MOT_L90);									// 右90度旋回
 8019360:	2001      	movs	r0, #1
 8019362:	f7f6 fbc9 	bl	800faf8 <MOT_turn>
						LL_mDelay(100);
 8019366:	2064      	movs	r0, #100	@ 0x64
 8019368:	f002 fb80 	bl	801ba6c <LL_mDelay>
						DIST_Front_Wall_correction();
 801936c:	f7f9 fa70 	bl	8012850 <DIST_Front_Wall_correction>
						MOT_turn(MOT_L90);									// 右90度旋回
 8019370:	2001      	movs	r0, #1
 8019372:	f7f6 fbc1 	bl	800faf8 <MOT_turn>
 8019376:	e002      	b.n	801937e <MAP_moveNextBlock_acc+0xa1e>
						MOT_turn(MOT_R180);
 8019378:	2002      	movs	r0, #2
 801937a:	f7f6 fbbd 	bl	800faf8 <MOT_turn>
					*p_type = TRUE;								// 次は半区間＋バック分進める
 801937e:	683b      	ldr	r3, [r7, #0]
 8019380:	2201      	movs	r2, #1
 8019382:	701a      	strb	r2, [r3, #0]
		break;
 8019384:	e0b7      	b.n	80194f6 <MAP_moveNextBlock_acc+0xb96>
				if(((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 北を向いていて東に壁がある
 8019386:	4b63      	ldr	r3, [pc, #396]	@ (8019514 <MAP_moveNextBlock_acc+0xbb4>)
 8019388:	781b      	ldrb	r3, [r3, #0]
 801938a:	2b00      	cmp	r3, #0
 801938c:	d10e      	bne.n	80193ac <MAP_moveNextBlock_acc+0xa4c>
 801938e:	4b62      	ldr	r3, [pc, #392]	@ (8019518 <MAP_moveNextBlock_acc+0xbb8>)
 8019390:	781b      	ldrb	r3, [r3, #0]
 8019392:	4618      	mov	r0, r3
 8019394:	4b61      	ldr	r3, [pc, #388]	@ (801951c <MAP_moveNextBlock_acc+0xbbc>)
 8019396:	781b      	ldrb	r3, [r3, #0]
 8019398:	4619      	mov	r1, r3
 801939a:	4a61      	ldr	r2, [pc, #388]	@ (8019520 <MAP_moveNextBlock_acc+0xbc0>)
 801939c:	0143      	lsls	r3, r0, #5
 801939e:	4413      	add	r3, r2
 80193a0:	440b      	add	r3, r1
 80193a2:	781b      	ldrb	r3, [r3, #0]
 80193a4:	f003 0302 	and.w	r3, r3, #2
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d138      	bne.n	801941e <MAP_moveNextBlock_acc+0xabe>
					((en_Head == EAST) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 80193ac:	4b59      	ldr	r3, [pc, #356]	@ (8019514 <MAP_moveNextBlock_acc+0xbb4>)
 80193ae:	781b      	ldrb	r3, [r3, #0]
				if(((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 北を向いていて東に壁がある
 80193b0:	2b01      	cmp	r3, #1
 80193b2:	d10e      	bne.n	80193d2 <MAP_moveNextBlock_acc+0xa72>
					((en_Head == EAST) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 80193b4:	4b58      	ldr	r3, [pc, #352]	@ (8019518 <MAP_moveNextBlock_acc+0xbb8>)
 80193b6:	781b      	ldrb	r3, [r3, #0]
 80193b8:	4618      	mov	r0, r3
 80193ba:	4b58      	ldr	r3, [pc, #352]	@ (801951c <MAP_moveNextBlock_acc+0xbbc>)
 80193bc:	781b      	ldrb	r3, [r3, #0]
 80193be:	4619      	mov	r1, r3
 80193c0:	4a57      	ldr	r2, [pc, #348]	@ (8019520 <MAP_moveNextBlock_acc+0xbc0>)
 80193c2:	0143      	lsls	r3, r0, #5
 80193c4:	4413      	add	r3, r2
 80193c6:	440b      	add	r3, r1
 80193c8:	781b      	ldrb	r3, [r3, #0]
 80193ca:	f003 0304 	and.w	r3, r3, #4
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d125      	bne.n	801941e <MAP_moveNextBlock_acc+0xabe>
					((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 80193d2:	4b50      	ldr	r3, [pc, #320]	@ (8019514 <MAP_moveNextBlock_acc+0xbb4>)
 80193d4:	781b      	ldrb	r3, [r3, #0]
					((en_Head == EAST) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 80193d6:	2b02      	cmp	r3, #2
 80193d8:	d10e      	bne.n	80193f8 <MAP_moveNextBlock_acc+0xa98>
					((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 80193da:	4b4f      	ldr	r3, [pc, #316]	@ (8019518 <MAP_moveNextBlock_acc+0xbb8>)
 80193dc:	781b      	ldrb	r3, [r3, #0]
 80193de:	4618      	mov	r0, r3
 80193e0:	4b4e      	ldr	r3, [pc, #312]	@ (801951c <MAP_moveNextBlock_acc+0xbbc>)
 80193e2:	781b      	ldrb	r3, [r3, #0]
 80193e4:	4619      	mov	r1, r3
 80193e6:	4a4e      	ldr	r2, [pc, #312]	@ (8019520 <MAP_moveNextBlock_acc+0xbc0>)
 80193e8:	0143      	lsls	r3, r0, #5
 80193ea:	4413      	add	r3, r2
 80193ec:	440b      	add	r3, r1
 80193ee:	781b      	ldrb	r3, [r3, #0]
 80193f0:	f003 0308 	and.w	r3, r3, #8
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d112      	bne.n	801941e <MAP_moveNextBlock_acc+0xabe>
					((en_Head == WEST) && ((g_SysMap[my][mx] & 0x01) != 0)) 			// 西を向いていて北に壁がある
 80193f8:	4b46      	ldr	r3, [pc, #280]	@ (8019514 <MAP_moveNextBlock_acc+0xbb4>)
 80193fa:	781b      	ldrb	r3, [r3, #0]
					((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 80193fc:	2b03      	cmp	r3, #3
 80193fe:	d11a      	bne.n	8019436 <MAP_moveNextBlock_acc+0xad6>
					((en_Head == WEST) && ((g_SysMap[my][mx] & 0x01) != 0)) 			// 西を向いていて北に壁がある
 8019400:	4b45      	ldr	r3, [pc, #276]	@ (8019518 <MAP_moveNextBlock_acc+0xbb8>)
 8019402:	781b      	ldrb	r3, [r3, #0]
 8019404:	4618      	mov	r0, r3
 8019406:	4b45      	ldr	r3, [pc, #276]	@ (801951c <MAP_moveNextBlock_acc+0xbbc>)
 8019408:	781b      	ldrb	r3, [r3, #0]
 801940a:	4619      	mov	r1, r3
 801940c:	4a44      	ldr	r2, [pc, #272]	@ (8019520 <MAP_moveNextBlock_acc+0xbc0>)
 801940e:	0143      	lsls	r3, r0, #5
 8019410:	4413      	add	r3, r2
 8019412:	440b      	add	r3, r1
 8019414:	781b      	ldrb	r3, [r3, #0]
 8019416:	f003 0301 	and.w	r3, r3, #1
 801941a:	2b00      	cmp	r3, #0
 801941c:	d00b      	beq.n	8019436 <MAP_moveNextBlock_acc+0xad6>
					MOT_turn(MOT_R90);									// 右90度旋回
 801941e:	2000      	movs	r0, #0
 8019420:	f7f6 fb6a 	bl	800faf8 <MOT_turn>
					LL_mDelay(100);
 8019424:	2064      	movs	r0, #100	@ 0x64
 8019426:	f002 fb21 	bl	801ba6c <LL_mDelay>
					DIST_Front_Wall_correction();
 801942a:	f7f9 fa11 	bl	8012850 <DIST_Front_Wall_correction>
					MOT_turn(MOT_R90);									// 右90度旋回
 801942e:	2000      	movs	r0, #0
 8019430:	f7f6 fb62 	bl	800faf8 <MOT_turn>
 8019434:	e05a      	b.n	80194ec <MAP_moveNextBlock_acc+0xb8c>
				}else if(((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 北を向いていて西に壁がある
 8019436:	4b37      	ldr	r3, [pc, #220]	@ (8019514 <MAP_moveNextBlock_acc+0xbb4>)
 8019438:	781b      	ldrb	r3, [r3, #0]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d10e      	bne.n	801945c <MAP_moveNextBlock_acc+0xafc>
 801943e:	4b36      	ldr	r3, [pc, #216]	@ (8019518 <MAP_moveNextBlock_acc+0xbb8>)
 8019440:	781b      	ldrb	r3, [r3, #0]
 8019442:	4618      	mov	r0, r3
 8019444:	4b35      	ldr	r3, [pc, #212]	@ (801951c <MAP_moveNextBlock_acc+0xbbc>)
 8019446:	781b      	ldrb	r3, [r3, #0]
 8019448:	4619      	mov	r1, r3
 801944a:	4a35      	ldr	r2, [pc, #212]	@ (8019520 <MAP_moveNextBlock_acc+0xbc0>)
 801944c:	0143      	lsls	r3, r0, #5
 801944e:	4413      	add	r3, r2
 8019450:	440b      	add	r3, r1
 8019452:	781b      	ldrb	r3, [r3, #0]
 8019454:	f003 0308 	and.w	r3, r3, #8
 8019458:	2b00      	cmp	r3, #0
 801945a:	d138      	bne.n	80194ce <MAP_moveNextBlock_acc+0xb6e>
					((en_Head == EAST) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 801945c:	4b2d      	ldr	r3, [pc, #180]	@ (8019514 <MAP_moveNextBlock_acc+0xbb4>)
 801945e:	781b      	ldrb	r3, [r3, #0]
				}else if(((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 北を向いていて西に壁がある
 8019460:	2b01      	cmp	r3, #1
 8019462:	d10e      	bne.n	8019482 <MAP_moveNextBlock_acc+0xb22>
					((en_Head == EAST) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 8019464:	4b2c      	ldr	r3, [pc, #176]	@ (8019518 <MAP_moveNextBlock_acc+0xbb8>)
 8019466:	781b      	ldrb	r3, [r3, #0]
 8019468:	4618      	mov	r0, r3
 801946a:	4b2c      	ldr	r3, [pc, #176]	@ (801951c <MAP_moveNextBlock_acc+0xbbc>)
 801946c:	781b      	ldrb	r3, [r3, #0]
 801946e:	4619      	mov	r1, r3
 8019470:	4a2b      	ldr	r2, [pc, #172]	@ (8019520 <MAP_moveNextBlock_acc+0xbc0>)
 8019472:	0143      	lsls	r3, r0, #5
 8019474:	4413      	add	r3, r2
 8019476:	440b      	add	r3, r1
 8019478:	781b      	ldrb	r3, [r3, #0]
 801947a:	f003 0301 	and.w	r3, r3, #1
 801947e:	2b00      	cmp	r3, #0
 8019480:	d125      	bne.n	80194ce <MAP_moveNextBlock_acc+0xb6e>
					((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 8019482:	4b24      	ldr	r3, [pc, #144]	@ (8019514 <MAP_moveNextBlock_acc+0xbb4>)
 8019484:	781b      	ldrb	r3, [r3, #0]
					((en_Head == EAST) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 8019486:	2b02      	cmp	r3, #2
 8019488:	d10e      	bne.n	80194a8 <MAP_moveNextBlock_acc+0xb48>
					((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 801948a:	4b23      	ldr	r3, [pc, #140]	@ (8019518 <MAP_moveNextBlock_acc+0xbb8>)
 801948c:	781b      	ldrb	r3, [r3, #0]
 801948e:	4618      	mov	r0, r3
 8019490:	4b22      	ldr	r3, [pc, #136]	@ (801951c <MAP_moveNextBlock_acc+0xbbc>)
 8019492:	781b      	ldrb	r3, [r3, #0]
 8019494:	4619      	mov	r1, r3
 8019496:	4a22      	ldr	r2, [pc, #136]	@ (8019520 <MAP_moveNextBlock_acc+0xbc0>)
 8019498:	0143      	lsls	r3, r0, #5
 801949a:	4413      	add	r3, r2
 801949c:	440b      	add	r3, r1
 801949e:	781b      	ldrb	r3, [r3, #0]
 80194a0:	f003 0302 	and.w	r3, r3, #2
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d112      	bne.n	80194ce <MAP_moveNextBlock_acc+0xb6e>
					((en_Head == WEST) && ((g_SysMap[my][mx] & 0x04) != 0)) 			// 西を向いていて南に壁がある
 80194a8:	4b1a      	ldr	r3, [pc, #104]	@ (8019514 <MAP_moveNextBlock_acc+0xbb4>)
 80194aa:	781b      	ldrb	r3, [r3, #0]
					((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 80194ac:	2b03      	cmp	r3, #3
 80194ae:	d11a      	bne.n	80194e6 <MAP_moveNextBlock_acc+0xb86>
					((en_Head == WEST) && ((g_SysMap[my][mx] & 0x04) != 0)) 			// 西を向いていて南に壁がある
 80194b0:	4b19      	ldr	r3, [pc, #100]	@ (8019518 <MAP_moveNextBlock_acc+0xbb8>)
 80194b2:	781b      	ldrb	r3, [r3, #0]
 80194b4:	4618      	mov	r0, r3
 80194b6:	4b19      	ldr	r3, [pc, #100]	@ (801951c <MAP_moveNextBlock_acc+0xbbc>)
 80194b8:	781b      	ldrb	r3, [r3, #0]
 80194ba:	4619      	mov	r1, r3
 80194bc:	4a18      	ldr	r2, [pc, #96]	@ (8019520 <MAP_moveNextBlock_acc+0xbc0>)
 80194be:	0143      	lsls	r3, r0, #5
 80194c0:	4413      	add	r3, r2
 80194c2:	440b      	add	r3, r1
 80194c4:	781b      	ldrb	r3, [r3, #0]
 80194c6:	f003 0304 	and.w	r3, r3, #4
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d00b      	beq.n	80194e6 <MAP_moveNextBlock_acc+0xb86>
					MOT_turn(MOT_L90);									// 右90度旋回
 80194ce:	2001      	movs	r0, #1
 80194d0:	f7f6 fb12 	bl	800faf8 <MOT_turn>
					LL_mDelay(100);
 80194d4:	2064      	movs	r0, #100	@ 0x64
 80194d6:	f002 fac9 	bl	801ba6c <LL_mDelay>
					DIST_Front_Wall_correction();
 80194da:	f7f9 f9b9 	bl	8012850 <DIST_Front_Wall_correction>
					MOT_turn(MOT_L90);									// 右90度旋回
 80194de:	2001      	movs	r0, #1
 80194e0:	f7f6 fb0a 	bl	800faf8 <MOT_turn>
 80194e4:	e002      	b.n	80194ec <MAP_moveNextBlock_acc+0xb8c>
					MOT_turn(MOT_R180);
 80194e6:	2002      	movs	r0, #2
 80194e8:	f7f6 fb06 	bl	800faf8 <MOT_turn>
				*p_type = TRUE;								// 次は半区間＋バック分進める
 80194ec:	683b      	ldr	r3, [r7, #0]
 80194ee:	2201      	movs	r2, #1
 80194f0:	701a      	strb	r2, [r3, #0]
		break;
 80194f2:	e000      	b.n	80194f6 <MAP_moveNextBlock_acc+0xb96>

	default:
		break;
 80194f4:	bf00      	nop
	}

	/* 進行方向更新 */
//	en_Head = (enMAP_HEAD_DIR)( (en_Head + en_head) & (MAP_HEAD_DIR_MAX-1) );
	en_Head = (enMAP_HEAD_DIR)(((uint8_t)en_Head + (uint8_t)en_head) & (MAP_HEAD_DIR_MAX - 1));
 80194f6:	4b07      	ldr	r3, [pc, #28]	@ (8019514 <MAP_moveNextBlock_acc+0xbb4>)
 80194f8:	781a      	ldrb	r2, [r3, #0]
 80194fa:	79fb      	ldrb	r3, [r7, #7]
 80194fc:	4413      	add	r3, r2
 80194fe:	b2db      	uxtb	r3, r3
 8019500:	f003 0303 	and.w	r3, r3, #3
 8019504:	b2da      	uxtb	r2, r3
 8019506:	4b03      	ldr	r3, [pc, #12]	@ (8019514 <MAP_moveNextBlock_acc+0xbb4>)
 8019508:	701a      	strb	r2, [r3, #0]
}
 801950a:	bf00      	nop
 801950c:	3708      	adds	r7, #8
 801950e:	46bd      	mov	sp, r7
 8019510:	bd80      	pop	{r7, pc}
 8019512:	bf00      	nop
 8019514:	2001ad8a 	.word	0x2001ad8a
 8019518:	2001ad8b 	.word	0x2001ad8b
 801951c:	2001ad8c 	.word	0x2001ad8c
 8019520:	2001b5a0 	.word	0x2001b5a0

08019524 <MAP_searchGoal>:
void MAP_searchGoal(
	uint8_t 			uc_trgX, 		///< [in] 目標x座標
	uint8_t 			uc_trgY, 		///< [in] 目標y座標 
	enMAP_ACT_MODE 	en_type, 		///< [in] 探索方法
	enSEARCH_MODE	en_search 		///< [in] 探索方法
){
 8019524:	b590      	push	{r4, r7, lr}
 8019526:	b087      	sub	sp, #28
 8019528:	af02      	add	r7, sp, #8
 801952a:	4604      	mov	r4, r0
 801952c:	4608      	mov	r0, r1
 801952e:	4611      	mov	r1, r2
 8019530:	461a      	mov	r2, r3
 8019532:	4623      	mov	r3, r4
 8019534:	71fb      	strb	r3, [r7, #7]
 8019536:	4603      	mov	r3, r0
 8019538:	71bb      	strb	r3, [r7, #6]
 801953a:	460b      	mov	r3, r1
 801953c:	717b      	strb	r3, [r7, #5]
 801953e:	4613      	mov	r3, r2
 8019540:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_head = NORTH;
 8019542:	2300      	movs	r3, #0
 8019544:	72fb      	strb	r3, [r7, #11]
	bool		bl_type = TRUE;			// 現在位置、FALSE: １区間前進状態、TURE:半区間前進状態
 8019546:	2301      	movs	r3, #1
 8019548:	72bb      	strb	r3, [r7, #10]
	uint8_t uc_goalX;
	uint8_t uc_goalY;
	uint8_t uc_staX;
	uint8_t uc_staY;
	
	SearchFlag = TRUE;
 801954a:	4b95      	ldr	r3, [pc, #596]	@ (80197a0 <MAP_searchGoal+0x27c>)
 801954c:	2201      	movs	r2, #1
 801954e:	701a      	strb	r2, [r3, #0]

	if (en_search == SEARCH_RETURN){
 8019550:	793b      	ldrb	r3, [r7, #4]
 8019552:	2b03      	cmp	r3, #3
 8019554:	d122      	bne.n	801959c <MAP_searchGoal+0x78>
		uc_goalX = uc_trgX;
 8019556:	79fb      	ldrb	r3, [r7, #7]
 8019558:	73fb      	strb	r3, [r7, #15]
		uc_goalY = uc_trgY;
 801955a:	79bb      	ldrb	r3, [r7, #6]
 801955c:	733b      	strb	r3, [r7, #12]
		uc_staX = mx;
 801955e:	4b91      	ldr	r3, [pc, #580]	@ (80197a4 <MAP_searchGoal+0x280>)
 8019560:	781b      	ldrb	r3, [r3, #0]
 8019562:	73bb      	strb	r3, [r7, #14]
		uc_staY = my;
 8019564:	4b90      	ldr	r3, [pc, #576]	@ (80197a8 <MAP_searchGoal+0x284>)
 8019566:	781b      	ldrb	r3, [r3, #0]
 8019568:	737b      	strb	r3, [r7, #13]
//		printf("mx%d,my%d\n", mx, my);
//		MAP_makeContourMap(uc_trgX, uc_trgY, en_type);
		MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 801956a:	797a      	ldrb	r2, [r7, #5]
 801956c:	79b9      	ldrb	r1, [r7, #6]
 801956e:	79fb      	ldrb	r3, [r7, #7]
 8019570:	4618      	mov	r0, r3
 8019572:	f7fd fe93 	bl	801729c <MAP_makeContourMap_queue>
		MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 8019576:	4b8d      	ldr	r3, [pc, #564]	@ (80197ac <MAP_searchGoal+0x288>)
 8019578:	781a      	ldrb	r2, [r3, #0]
 801957a:	7bfc      	ldrb	r4, [r7, #15]
 801957c:	7b79      	ldrb	r1, [r7, #13]
 801957e:	7bb8      	ldrb	r0, [r7, #14]
 8019580:	f107 0309 	add.w	r3, r7, #9
 8019584:	9301      	str	r3, [sp, #4]
 8019586:	7bfb      	ldrb	r3, [r7, #15]
 8019588:	9300      	str	r3, [sp, #0]
 801958a:	4623      	mov	r3, r4
 801958c:	f7fc fd8a 	bl	80160a4 <MAP_searchCmdList>
		uc_trgX = Return_X;
 8019590:	4b87      	ldr	r3, [pc, #540]	@ (80197b0 <MAP_searchGoal+0x28c>)
 8019592:	781b      	ldrb	r3, [r3, #0]
 8019594:	71fb      	strb	r3, [r7, #7]
		uc_trgY = Return_Y;
 8019596:	4b87      	ldr	r3, [pc, #540]	@ (80197b4 <MAP_searchGoal+0x290>)
 8019598:	781b      	ldrb	r3, [r3, #0]
 801959a:	71bb      	strb	r3, [r7, #6]
//		MAP_showcountLog();
	}

//	SYS_setDisable( SYS_MODE );				// モード変更禁止

	MOT_setTrgtSpeed(SEARCH_SPEED);		// 目標速度
 801959c:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 80197b8 <MAP_searchGoal+0x294>
 80195a0:	f7f7 fdae 	bl	8011100 <MOT_setTrgtSpeed>
	MOT_setNowSpeed( 0.0f );
 80195a4:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 80197bc <MAP_searchGoal+0x298>
 80195a8:	f7f7 fdc0 	bl	801112c <MOT_setNowSpeed>
	f_MoveBackDist = 0;
 80195ac:	4b84      	ldr	r3, [pc, #528]	@ (80197c0 <MAP_searchGoal+0x29c>)
 80195ae:	f04f 0200 	mov.w	r2, #0
 80195b2:	601a      	str	r2, [r3, #0]
	uc_SlaCnt = 0;
 80195b4:	4b83      	ldr	r3, [pc, #524]	@ (80197c4 <MAP_searchGoal+0x2a0>)
 80195b6:	2200      	movs	r2, #0
 80195b8:	701a      	strb	r2, [r3, #0]
	if(uc_trgX == GOAL_MAP_X && uc_trgY == GOAL_MAP_Y){
 80195ba:	4b83      	ldr	r3, [pc, #524]	@ (80197c8 <MAP_searchGoal+0x2a4>)
 80195bc:	781b      	ldrb	r3, [r3, #0]
 80195be:	79fa      	ldrb	r2, [r7, #7]
 80195c0:	429a      	cmp	r2, r3
 80195c2:	d107      	bne.n	80195d4 <MAP_searchGoal+0xb0>
 80195c4:	4b81      	ldr	r3, [pc, #516]	@ (80197cc <MAP_searchGoal+0x2a8>)
 80195c6:	781b      	ldrb	r3, [r3, #0]
 80195c8:	79ba      	ldrb	r2, [r7, #6]
 80195ca:	429a      	cmp	r2, r3
 80195cc:	d102      	bne.n	80195d4 <MAP_searchGoal+0xb0>
		f_MoveBackDist = MOVE_BACK_DIST;
 80195ce:	4b7c      	ldr	r3, [pc, #496]	@ (80197c0 <MAP_searchGoal+0x29c>)
 80195d0:	4a7f      	ldr	r2, [pc, #508]	@ (80197d0 <MAP_searchGoal+0x2ac>)
 80195d2:	601a      	str	r2, [r3, #0]
	}
	
	log_flag_on();	//ログ関数スタート（大会時削除）
 80195d4:	f7f0 fc0a 	bl	8009dec <log_flag_on>
	
	/* 迷路探索 */
	while(1){
		MAP_refMousePos( en_Head );								// 座標更新
 80195d8:	4b74      	ldr	r3, [pc, #464]	@ (80197ac <MAP_searchGoal+0x288>)
 80195da:	781b      	ldrb	r3, [r3, #0]
 80195dc:	4618      	mov	r0, r3
 80195de:	f7fe fb39 	bl	8017c54 <MAP_refMousePos>
//		MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
		
		/* 超信地旋回探索 */
		if( SEARCH_TURN == en_search ){
 80195e2:	793b      	ldrb	r3, [r7, #4]
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d132      	bne.n	801964e <MAP_searchGoal+0x12a>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 80195e8:	797a      	ldrb	r2, [r7, #5]
 80195ea:	79b9      	ldrb	r1, [r7, #6]
 80195ec:	79fb      	ldrb	r3, [r7, #7]
 80195ee:	4618      	mov	r0, r3
 80195f0:	f7fd fe54 	bl	801729c <MAP_makeContourMap_queue>
			if( TRUE == bl_type ){
 80195f4:	7abb      	ldrb	r3, [r7, #10]
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d00c      	beq.n	8019614 <MAP_searchGoal+0xf0>
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 80195fa:	4b71      	ldr	r3, [pc, #452]	@ (80197c0 <MAP_searchGoal+0x29c>)
 80195fc:	edd3 7a00 	vldr	s15, [r3]
 8019600:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8019604:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019608:	eddf 0a6b 	vldr	s1, [pc, #428]	@ 80197b8 <MAP_searchGoal+0x294>
 801960c:	eeb0 0a67 	vmov.f32	s0, s15
 8019610:	f7f6 f848 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();												// 壁データから迷路データを作成			← ここでデータ作成をミスっている
 8019614:	f7fd fc1a 	bl	8016e4c <MAP_makeMapData>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);						// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 8019618:	f107 030b 	add.w	r3, r7, #11
 801961c:	4619      	mov	r1, r3
 801961e:	2000      	movs	r0, #0
 8019620:	f7fe fa0c 	bl	8017a3c <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 8019624:	4b5f      	ldr	r3, [pc, #380]	@ (80197a4 <MAP_searchGoal+0x280>)
 8019626:	781b      	ldrb	r3, [r3, #0]
 8019628:	79fa      	ldrb	r2, [r7, #7]
 801962a:	429a      	cmp	r2, r3
 801962c:	d107      	bne.n	801963e <MAP_searchGoal+0x11a>
 801962e:	4b5e      	ldr	r3, [pc, #376]	@ (80197a8 <MAP_searchGoal+0x284>)
 8019630:	781b      	ldrb	r3, [r3, #0]
 8019632:	79ba      	ldrb	r2, [r7, #6]
 8019634:	429a      	cmp	r2, r3
 8019636:	d102      	bne.n	801963e <MAP_searchGoal+0x11a>
				MAP_actGoal();										// ゴール時の動作
 8019638:	f7fe feca 	bl	80183d0 <MAP_actGoal>
				break;
 801963c:	e0a4      	b.n	8019788 <MAP_searchGoal+0x264>
			}
			else{
				MAP_moveNextBlock(en_head, &bl_type);				// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 801963e:	7afb      	ldrb	r3, [r7, #11]
 8019640:	f107 020a 	add.w	r2, r7, #10
 8019644:	4611      	mov	r1, r2
 8019646:	4618      	mov	r0, r3
 8019648:	f7fe fb40 	bl	8017ccc <MAP_moveNextBlock>
 801964c:	e081      	b.n	8019752 <MAP_searchGoal+0x22e>
			}
		}
		/* スラローム探索 */
		else if( SEARCH_SLA == en_search ){
 801964e:	793b      	ldrb	r3, [r7, #4]
 8019650:	2b01      	cmp	r3, #1
 8019652:	d132      	bne.n	80196ba <MAP_searchGoal+0x196>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 8019654:	797a      	ldrb	r2, [r7, #5]
 8019656:	79b9      	ldrb	r1, [r7, #6]
 8019658:	79fb      	ldrb	r3, [r7, #7]
 801965a:	4618      	mov	r0, r3
 801965c:	f7fd fe1e 	bl	801729c <MAP_makeContourMap_queue>
			if( TRUE == bl_type ){
 8019660:	7abb      	ldrb	r3, [r7, #10]
 8019662:	2b00      	cmp	r3, #0
 8019664:	d00c      	beq.n	8019680 <MAP_searchGoal+0x15c>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 8019666:	4b56      	ldr	r3, [pc, #344]	@ (80197c0 <MAP_searchGoal+0x29c>)
 8019668:	edd3 7a00 	vldr	s15, [r3]
 801966c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8019670:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019674:	eddf 0a50 	vldr	s1, [pc, #320]	@ 80197b8 <MAP_searchGoal+0x294>
 8019678:	eeb0 0a67 	vmov.f32	s0, s15
 801967c:	f7f6 f812 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();		// 壁データから迷路データを作成
 8019680:	f7fd fbe4 	bl	8016e4c <MAP_makeMapData>
			
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);				// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 8019684:	f107 030b 	add.w	r3, r7, #11
 8019688:	4619      	mov	r1, r3
 801968a:	2000      	movs	r0, #0
 801968c:	f7fe f9d6 	bl	8017a3c <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 8019690:	4b44      	ldr	r3, [pc, #272]	@ (80197a4 <MAP_searchGoal+0x280>)
 8019692:	781b      	ldrb	r3, [r3, #0]
 8019694:	79fa      	ldrb	r2, [r7, #7]
 8019696:	429a      	cmp	r2, r3
 8019698:	d107      	bne.n	80196aa <MAP_searchGoal+0x186>
 801969a:	4b43      	ldr	r3, [pc, #268]	@ (80197a8 <MAP_searchGoal+0x284>)
 801969c:	781b      	ldrb	r3, [r3, #0]
 801969e:	79ba      	ldrb	r2, [r7, #6]
 80196a0:	429a      	cmp	r2, r3
 80196a2:	d102      	bne.n	80196aa <MAP_searchGoal+0x186>
				MAP_actGoal();										// ゴール時の動作
 80196a4:	f7fe fe94 	bl	80183d0 <MAP_actGoal>
				break;
 80196a8:	e06e      	b.n	8019788 <MAP_searchGoal+0x264>
			}
			else{
				MAP_moveNextBlock_Sla(en_head, &bl_type, FALSE );	// 次の区画へ移動						← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 80196aa:	7afb      	ldrb	r3, [r7, #11]
 80196ac:	f107 010a 	add.w	r1, r7, #10
 80196b0:	2200      	movs	r2, #0
 80196b2:	4618      	mov	r0, r3
 80196b4:	f7fe fbbc 	bl	8017e30 <MAP_moveNextBlock_Sla>
 80196b8:	e04b      	b.n	8019752 <MAP_searchGoal+0x22e>
//				MAP_moveNextBlock_acc(en_head, &bl_type);
			}
		}
		/* 帰還探索 */
		else if (SEARCH_RETURN == en_search) {
 80196ba:	793b      	ldrb	r3, [r7, #4]
 80196bc:	2b03      	cmp	r3, #3
 80196be:	d148      	bne.n	8019752 <MAP_searchGoal+0x22e>
			
			if( TRUE == bl_type ){
 80196c0:	7abb      	ldrb	r3, [r7, #10]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d00c      	beq.n	80196e0 <MAP_searchGoal+0x1bc>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 80196c6:	4b3e      	ldr	r3, [pc, #248]	@ (80197c0 <MAP_searchGoal+0x29c>)
 80196c8:	edd3 7a00 	vldr	s15, [r3]
 80196cc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80196d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80196d4:	eddf 0a38 	vldr	s1, [pc, #224]	@ 80197b8 <MAP_searchGoal+0x294>
 80196d8:	eeb0 0a67 	vmov.f32	s0, s15
 80196dc:	f7f5 ffe2 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();		// 壁データから迷路データを作成
 80196e0:	f7fd fbb4 	bl	8016e4c <MAP_makeMapData>
						
			MAP_makeReturnContourMap(uc_staX,uc_staY);
 80196e4:	7b7a      	ldrb	r2, [r7, #13]
 80196e6:	7bbb      	ldrb	r3, [r7, #14]
 80196e8:	4611      	mov	r1, r2
 80196ea:	4618      	mov	r0, r3
 80196ec:	f7fe ff00 	bl	80184f0 <MAP_makeReturnContourMap>
			MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 80196f0:	4b2e      	ldr	r3, [pc, #184]	@ (80197ac <MAP_searchGoal+0x288>)
 80196f2:	781a      	ldrb	r2, [r3, #0]
 80196f4:	7bfc      	ldrb	r4, [r7, #15]
 80196f6:	7b79      	ldrb	r1, [r7, #13]
 80196f8:	7bb8      	ldrb	r0, [r7, #14]
 80196fa:	f107 0309 	add.w	r3, r7, #9
 80196fe:	9301      	str	r3, [sp, #4]
 8019700:	7bfb      	ldrb	r3, [r7, #15]
 8019702:	9300      	str	r3, [sp, #0]
 8019704:	4623      	mov	r3, r4
 8019706:	f7fc fccd 	bl	80160a4 <MAP_searchCmdList>
			uc_trgX = Return_X;
 801970a:	4b29      	ldr	r3, [pc, #164]	@ (80197b0 <MAP_searchGoal+0x28c>)
 801970c:	781b      	ldrb	r3, [r3, #0]
 801970e:	71fb      	strb	r3, [r7, #7]
			uc_trgY = Return_Y;
 8019710:	4b28      	ldr	r3, [pc, #160]	@ (80197b4 <MAP_searchGoal+0x290>)
 8019712:	781b      	ldrb	r3, [r3, #0]
 8019714:	71bb      	strb	r3, [r7, #6]
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 8019716:	797a      	ldrb	r2, [r7, #5]
 8019718:	79b9      	ldrb	r1, [r7, #6]
 801971a:	79fb      	ldrb	r3, [r7, #7]
 801971c:	4618      	mov	r0, r3
 801971e:	f7fd fdbd 	bl	801729c <MAP_makeContourMap_queue>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);	
 8019722:	f107 030b 	add.w	r3, r7, #11
 8019726:	4619      	mov	r1, r3
 8019728:	2000      	movs	r0, #0
 801972a:	f7fe f987 	bl	8017a3c <MAP_calcMouseDir>
			/* 次の区画へ移動 */
//			if ((us_Cmap[my][mx] == 0)||((g_SysMap[uc_trgY][uc_trgX]&0xf0) == 0xf0)) {
			if ((mx == 0)&&(my == 0)){
 801972e:	4b1d      	ldr	r3, [pc, #116]	@ (80197a4 <MAP_searchGoal+0x280>)
 8019730:	781b      	ldrb	r3, [r3, #0]
 8019732:	2b00      	cmp	r3, #0
 8019734:	d106      	bne.n	8019744 <MAP_searchGoal+0x220>
 8019736:	4b1c      	ldr	r3, [pc, #112]	@ (80197a8 <MAP_searchGoal+0x284>)
 8019738:	781b      	ldrb	r3, [r3, #0]
 801973a:	2b00      	cmp	r3, #0
 801973c:	d102      	bne.n	8019744 <MAP_searchGoal+0x220>
				MAP_actGoal();
 801973e:	f7fe fe47 	bl	80183d0 <MAP_actGoal>
				break;
 8019742:	e021      	b.n	8019788 <MAP_searchGoal+0x264>
			}
//			}
			else {
				MAP_moveNextBlock_Sla(en_head, &bl_type, FALSE);	// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 8019744:	7afb      	ldrb	r3, [r7, #11]
 8019746:	f107 010a 	add.w	r1, r7, #10
 801974a:	2200      	movs	r2, #0
 801974c:	4618      	mov	r0, r3
 801974e:	f7fe fb6f 	bl	8017e30 <MAP_moveNextBlock_Sla>
//			LED_count(uc_trgY);
		}

		
		/* 途中で制御不能になった */
		if( SYS_isOutOfCtrl() == TRUE ){
 8019752:	f7ef ff4d 	bl	80095f0 <SYS_isOutOfCtrl>
 8019756:	4603      	mov	r3, r0
 8019758:	2b00      	cmp	r3, #0
 801975a:	f43f af3d 	beq.w	80195d8 <MAP_searchGoal+0xb4>
			CTRL_stop();
 801975e:	f7ec fe61 	bl	8006424 <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 8019762:	2000      	movs	r0, #0
 8019764:	f7ef ff76 	bl	8009654 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 8019768:	2001      	movs	r0, #1
 801976a:	f7ef ff73 	bl	8009654 <DCM_brakeMot>
			
			/* 迷路関連を初期化 */
			en_Head		= NORTH;
 801976e:	4b0f      	ldr	r3, [pc, #60]	@ (80197ac <MAP_searchGoal+0x288>)
 8019770:	2200      	movs	r2, #0
 8019772:	701a      	strb	r2, [r3, #0]
			mx			= 0;
 8019774:	4b0b      	ldr	r3, [pc, #44]	@ (80197a4 <MAP_searchGoal+0x280>)
 8019776:	2200      	movs	r2, #0
 8019778:	701a      	strb	r2, [r3, #0]
			my			= 0;
 801977a:	4b0b      	ldr	r3, [pc, #44]	@ (80197a8 <MAP_searchGoal+0x284>)
 801977c:	2200      	movs	r2, #0
 801977e:	701a      	strb	r2, [r3, #0]
			f_MoveBackDist = 0;
 8019780:	4b0f      	ldr	r3, [pc, #60]	@ (80197c0 <MAP_searchGoal+0x29c>)
 8019782:	f04f 0200 	mov.w	r2, #0
 8019786:	601a      	str	r2, [r3, #0]
			
			// DCMCは下位モジュールで既にクリアと緊急停止を行っている。
			break;
		}
	}
	SearchFlag = FALSE;
 8019788:	4b05      	ldr	r3, [pc, #20]	@ (80197a0 <MAP_searchGoal+0x27c>)
 801978a:	2200      	movs	r2, #0
 801978c:	701a      	strb	r2, [r3, #0]
	LL_mDelay(1000);
 801978e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8019792:	f002 f96b 	bl	801ba6c <LL_mDelay>
//	SYS_setEnable( SYS_MODE );				// モード変更有効
}
 8019796:	bf00      	nop
 8019798:	3714      	adds	r7, #20
 801979a:	46bd      	mov	sp, r7
 801979c:	bd90      	pop	{r4, r7, pc}
 801979e:	bf00      	nop
 80197a0:	2001bda0 	.word	0x2001bda0
 80197a4:	2001ad8c 	.word	0x2001ad8c
 80197a8:	2001ad8b 	.word	0x2001ad8b
 80197ac:	2001ad8a 	.word	0x2001ad8a
 80197b0:	2001ad9c 	.word	0x2001ad9c
 80197b4:	2001ad9d 	.word	0x2001ad9d
 80197b8:	3e99999a 	.word	0x3e99999a
 80197bc:	00000000 	.word	0x00000000
 80197c0:	2001ad90 	.word	0x2001ad90
 80197c4:	2001ad94 	.word	0x2001ad94
 80197c8:	2001ad95 	.word	0x2001ad95
 80197cc:	2001ad96 	.word	0x2001ad96
 80197d0:	3e6b851f 	.word	0x3e6b851f

080197d4 <MAP_searchGoalKnown>:
void MAP_searchGoalKnown(
	uint8_t 			uc_trgX, 		///< [in] 目標x座標
	uint8_t 			uc_trgY, 		///< [in] 目標y座標 
	enMAP_ACT_MODE 	en_type, 		///< [in] 探索方法
	enSEARCH_MODE	en_search 		///< [in] 探索方法
){
 80197d4:	b590      	push	{r4, r7, lr}
 80197d6:	b087      	sub	sp, #28
 80197d8:	af02      	add	r7, sp, #8
 80197da:	4604      	mov	r4, r0
 80197dc:	4608      	mov	r0, r1
 80197de:	4611      	mov	r1, r2
 80197e0:	461a      	mov	r2, r3
 80197e2:	4623      	mov	r3, r4
 80197e4:	71fb      	strb	r3, [r7, #7]
 80197e6:	4603      	mov	r3, r0
 80197e8:	71bb      	strb	r3, [r7, #6]
 80197ea:	460b      	mov	r3, r1
 80197ec:	717b      	strb	r3, [r7, #5]
 80197ee:	4613      	mov	r3, r2
 80197f0:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_head = NORTH;
 80197f2:	2300      	movs	r3, #0
 80197f4:	72fb      	strb	r3, [r7, #11]
	bool		bl_type = TRUE;			// 現在位置、FALSE: １区間前進状態、TURE:半区間前進状態
 80197f6:	2301      	movs	r3, #1
 80197f8:	72bb      	strb	r3, [r7, #10]
	uint8_t uc_goalX;
	uint8_t uc_goalY;
	uint8_t uc_staX;
	uint8_t uc_staY;
	
	SearchFlag = TRUE;
 80197fa:	4b85      	ldr	r3, [pc, #532]	@ (8019a10 <MAP_searchGoalKnown+0x23c>)
 80197fc:	2201      	movs	r2, #1
 80197fe:	701a      	strb	r2, [r3, #0]

	if (en_search == SEARCH_RETURN){
 8019800:	793b      	ldrb	r3, [r7, #4]
 8019802:	2b03      	cmp	r3, #3
 8019804:	d122      	bne.n	801984c <MAP_searchGoalKnown+0x78>
		uc_goalX = uc_trgX;
 8019806:	79fb      	ldrb	r3, [r7, #7]
 8019808:	73fb      	strb	r3, [r7, #15]
		uc_goalY = uc_trgY;
 801980a:	79bb      	ldrb	r3, [r7, #6]
 801980c:	733b      	strb	r3, [r7, #12]
		uc_staX = mx;
 801980e:	4b81      	ldr	r3, [pc, #516]	@ (8019a14 <MAP_searchGoalKnown+0x240>)
 8019810:	781b      	ldrb	r3, [r3, #0]
 8019812:	73bb      	strb	r3, [r7, #14]
		uc_staY = my;
 8019814:	4b80      	ldr	r3, [pc, #512]	@ (8019a18 <MAP_searchGoalKnown+0x244>)
 8019816:	781b      	ldrb	r3, [r3, #0]
 8019818:	737b      	strb	r3, [r7, #13]
//		printf("mx%d,my%d\n", mx, my);
//		MAP_makeContourMap(uc_trgX, uc_trgY, en_type);
		MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 801981a:	797a      	ldrb	r2, [r7, #5]
 801981c:	79b9      	ldrb	r1, [r7, #6]
 801981e:	79fb      	ldrb	r3, [r7, #7]
 8019820:	4618      	mov	r0, r3
 8019822:	f7fd fd3b 	bl	801729c <MAP_makeContourMap_queue>
		MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 8019826:	4b7d      	ldr	r3, [pc, #500]	@ (8019a1c <MAP_searchGoalKnown+0x248>)
 8019828:	781a      	ldrb	r2, [r3, #0]
 801982a:	7bfc      	ldrb	r4, [r7, #15]
 801982c:	7b79      	ldrb	r1, [r7, #13]
 801982e:	7bb8      	ldrb	r0, [r7, #14]
 8019830:	f107 0309 	add.w	r3, r7, #9
 8019834:	9301      	str	r3, [sp, #4]
 8019836:	7bfb      	ldrb	r3, [r7, #15]
 8019838:	9300      	str	r3, [sp, #0]
 801983a:	4623      	mov	r3, r4
 801983c:	f7fc fc32 	bl	80160a4 <MAP_searchCmdList>
		uc_trgX = Return_X;
 8019840:	4b77      	ldr	r3, [pc, #476]	@ (8019a20 <MAP_searchGoalKnown+0x24c>)
 8019842:	781b      	ldrb	r3, [r3, #0]
 8019844:	71fb      	strb	r3, [r7, #7]
		uc_trgY = Return_Y;
 8019846:	4b77      	ldr	r3, [pc, #476]	@ (8019a24 <MAP_searchGoalKnown+0x250>)
 8019848:	781b      	ldrb	r3, [r3, #0]
 801984a:	71bb      	strb	r3, [r7, #6]
//		MAP_showcountLog();
	}

//	SYS_setDisable( SYS_MODE );				// モード変更禁止

	MOT_setTrgtSpeed(SEARCH_SPEED);		// 目標速度
 801984c:	ed9f 0a76 	vldr	s0, [pc, #472]	@ 8019a28 <MAP_searchGoalKnown+0x254>
 8019850:	f7f7 fc56 	bl	8011100 <MOT_setTrgtSpeed>
	MOT_setNowSpeed( 0.0f );
 8019854:	ed9f 0a75 	vldr	s0, [pc, #468]	@ 8019a2c <MAP_searchGoalKnown+0x258>
 8019858:	f7f7 fc68 	bl	801112c <MOT_setNowSpeed>
	f_MoveBackDist = 0;
 801985c:	4b74      	ldr	r3, [pc, #464]	@ (8019a30 <MAP_searchGoalKnown+0x25c>)
 801985e:	f04f 0200 	mov.w	r2, #0
 8019862:	601a      	str	r2, [r3, #0]
	uc_SlaCnt = 0;
 8019864:	4b73      	ldr	r3, [pc, #460]	@ (8019a34 <MAP_searchGoalKnown+0x260>)
 8019866:	2200      	movs	r2, #0
 8019868:	701a      	strb	r2, [r3, #0]
	if(uc_trgX == GOAL_MAP_X && uc_trgY == GOAL_MAP_Y){
 801986a:	4b73      	ldr	r3, [pc, #460]	@ (8019a38 <MAP_searchGoalKnown+0x264>)
 801986c:	781b      	ldrb	r3, [r3, #0]
 801986e:	79fa      	ldrb	r2, [r7, #7]
 8019870:	429a      	cmp	r2, r3
 8019872:	d107      	bne.n	8019884 <MAP_searchGoalKnown+0xb0>
 8019874:	4b71      	ldr	r3, [pc, #452]	@ (8019a3c <MAP_searchGoalKnown+0x268>)
 8019876:	781b      	ldrb	r3, [r3, #0]
 8019878:	79ba      	ldrb	r2, [r7, #6]
 801987a:	429a      	cmp	r2, r3
 801987c:	d102      	bne.n	8019884 <MAP_searchGoalKnown+0xb0>
		f_MoveBackDist = MOVE_BACK_DIST;
 801987e:	4b6c      	ldr	r3, [pc, #432]	@ (8019a30 <MAP_searchGoalKnown+0x25c>)
 8019880:	4a6f      	ldr	r2, [pc, #444]	@ (8019a40 <MAP_searchGoalKnown+0x26c>)
 8019882:	601a      	str	r2, [r3, #0]
	}
	
	log_flag_on();	//ログ関数スタート（大会時削除）
 8019884:	f7f0 fab2 	bl	8009dec <log_flag_on>
	
	/* 迷路探索 */
	while(1){
		MAP_refMousePos( en_Head );								// 座標更新
 8019888:	4b64      	ldr	r3, [pc, #400]	@ (8019a1c <MAP_searchGoalKnown+0x248>)
 801988a:	781b      	ldrb	r3, [r3, #0]
 801988c:	4618      	mov	r0, r3
 801988e:	f7fe f9e1 	bl	8017c54 <MAP_refMousePos>
//		MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
		
		/* 超信地旋回探索 */
		if( SEARCH_TURN == en_search ){
 8019892:	793b      	ldrb	r3, [r7, #4]
 8019894:	2b00      	cmp	r3, #0
 8019896:	d132      	bne.n	80198fe <MAP_searchGoalKnown+0x12a>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
//			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
			if( TRUE == bl_type ){
 8019898:	7abb      	ldrb	r3, [r7, #10]
 801989a:	2b00      	cmp	r3, #0
 801989c:	d00c      	beq.n	80198b8 <MAP_searchGoalKnown+0xe4>
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 801989e:	4b64      	ldr	r3, [pc, #400]	@ (8019a30 <MAP_searchGoalKnown+0x25c>)
 80198a0:	edd3 7a00 	vldr	s15, [r3]
 80198a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80198a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80198ac:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 8019a28 <MAP_searchGoalKnown+0x254>
 80198b0:	eeb0 0a67 	vmov.f32	s0, s15
 80198b4:	f7f5 fef6 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();												// 壁データから迷路データを作成			← ここでデータ作成をミスっている
 80198b8:	f7fd fac8 	bl	8016e4c <MAP_makeMapData>
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 80198bc:	797a      	ldrb	r2, [r7, #5]
 80198be:	79b9      	ldrb	r1, [r7, #6]
 80198c0:	79fb      	ldrb	r3, [r7, #7]
 80198c2:	4618      	mov	r0, r3
 80198c4:	f7fd fcea 	bl	801729c <MAP_makeContourMap_queue>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);						// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 80198c8:	f107 030b 	add.w	r3, r7, #11
 80198cc:	4619      	mov	r1, r3
 80198ce:	2000      	movs	r0, #0
 80198d0:	f7fe f8b4 	bl	8017a3c <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 80198d4:	4b4f      	ldr	r3, [pc, #316]	@ (8019a14 <MAP_searchGoalKnown+0x240>)
 80198d6:	781b      	ldrb	r3, [r3, #0]
 80198d8:	79fa      	ldrb	r2, [r7, #7]
 80198da:	429a      	cmp	r2, r3
 80198dc:	d107      	bne.n	80198ee <MAP_searchGoalKnown+0x11a>
 80198de:	4b4e      	ldr	r3, [pc, #312]	@ (8019a18 <MAP_searchGoalKnown+0x244>)
 80198e0:	781b      	ldrb	r3, [r3, #0]
 80198e2:	79ba      	ldrb	r2, [r7, #6]
 80198e4:	429a      	cmp	r2, r3
 80198e6:	d102      	bne.n	80198ee <MAP_searchGoalKnown+0x11a>
				MAP_actGoal();										// ゴール時の動作
 80198e8:	f7fe fd72 	bl	80183d0 <MAP_actGoal>
				break;
 80198ec:	e13c      	b.n	8019b68 <MAP_searchGoalKnown+0x394>
			}
			else{
				MAP_moveNextBlock(en_head, &bl_type);				// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 80198ee:	7afb      	ldrb	r3, [r7, #11]
 80198f0:	f107 020a 	add.w	r2, r7, #10
 80198f4:	4611      	mov	r1, r2
 80198f6:	4618      	mov	r0, r3
 80198f8:	f7fe f9e8 	bl	8017ccc <MAP_moveNextBlock>
 80198fc:	e0ab      	b.n	8019a56 <MAP_searchGoalKnown+0x282>
			}
		}
		/* スラローム探索 */
		else if( SEARCH_SLA == en_search ){
 80198fe:	793b      	ldrb	r3, [r7, #4]
 8019900:	2b01      	cmp	r3, #1
 8019902:	d139      	bne.n	8019978 <MAP_searchGoalKnown+0x1a4>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
//			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
			if( TRUE == bl_type ){
 8019904:	7abb      	ldrb	r3, [r7, #10]
 8019906:	2b00      	cmp	r3, #0
 8019908:	d00c      	beq.n	8019924 <MAP_searchGoalKnown+0x150>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 801990a:	4b49      	ldr	r3, [pc, #292]	@ (8019a30 <MAP_searchGoalKnown+0x25c>)
 801990c:	edd3 7a00 	vldr	s15, [r3]
 8019910:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8019914:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019918:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8019a28 <MAP_searchGoalKnown+0x254>
 801991c:	eeb0 0a67 	vmov.f32	s0, s15
 8019920:	f7f5 fec0 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			}
			if (st_Known.bl_known != TRUE) {
 8019924:	4b47      	ldr	r3, [pc, #284]	@ (8019a44 <MAP_searchGoalKnown+0x270>)
 8019926:	785b      	ldrb	r3, [r3, #1]
 8019928:	f083 0301 	eor.w	r3, r3, #1
 801992c:	b2db      	uxtb	r3, r3
 801992e:	2b00      	cmp	r3, #0
 8019930:	d001      	beq.n	8019936 <MAP_searchGoalKnown+0x162>
				MAP_makeMapData();		// 壁データから迷路データを作成
 8019932:	f7fd fa8b 	bl	8016e4c <MAP_makeMapData>
			}
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 8019936:	797a      	ldrb	r2, [r7, #5]
 8019938:	79b9      	ldrb	r1, [r7, #6]
 801993a:	79fb      	ldrb	r3, [r7, #7]
 801993c:	4618      	mov	r0, r3
 801993e:	f7fd fcad 	bl	801729c <MAP_makeContourMap_queue>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);			// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 8019942:	f107 030b 	add.w	r3, r7, #11
 8019946:	4619      	mov	r1, r3
 8019948:	2000      	movs	r0, #0
 801994a:	f7fe f877 	bl	8017a3c <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 801994e:	4b31      	ldr	r3, [pc, #196]	@ (8019a14 <MAP_searchGoalKnown+0x240>)
 8019950:	781b      	ldrb	r3, [r3, #0]
 8019952:	79fa      	ldrb	r2, [r7, #7]
 8019954:	429a      	cmp	r2, r3
 8019956:	d107      	bne.n	8019968 <MAP_searchGoalKnown+0x194>
 8019958:	4b2f      	ldr	r3, [pc, #188]	@ (8019a18 <MAP_searchGoalKnown+0x244>)
 801995a:	781b      	ldrb	r3, [r3, #0]
 801995c:	79ba      	ldrb	r2, [r7, #6]
 801995e:	429a      	cmp	r2, r3
 8019960:	d102      	bne.n	8019968 <MAP_searchGoalKnown+0x194>
				MAP_actGoal();									// ゴール時の動作
 8019962:	f7fe fd35 	bl	80183d0 <MAP_actGoal>
				break;
 8019966:	e0ff      	b.n	8019b68 <MAP_searchGoalKnown+0x394>
			}
			else{
//				MAP_moveNextBlock_Sla(en_head, &bl_type, FALSE );	// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
				MAP_moveNextBlock_acc(en_head, &bl_type);
 8019968:	7afb      	ldrb	r3, [r7, #11]
 801996a:	f107 020a 	add.w	r2, r7, #10
 801996e:	4611      	mov	r1, r2
 8019970:	4618      	mov	r0, r3
 8019972:	f7fe fff5 	bl	8018960 <MAP_moveNextBlock_acc>
 8019976:	e06e      	b.n	8019a56 <MAP_searchGoalKnown+0x282>
			}
		}
		/* 帰還探索 */
		else if (SEARCH_RETURN == en_search) {
 8019978:	793b      	ldrb	r3, [r7, #4]
 801997a:	2b03      	cmp	r3, #3
 801997c:	d16b      	bne.n	8019a56 <MAP_searchGoalKnown+0x282>
			
			if( TRUE == bl_type ){
 801997e:	7abb      	ldrb	r3, [r7, #10]
 8019980:	2b00      	cmp	r3, #0
 8019982:	d00c      	beq.n	801999e <MAP_searchGoalKnown+0x1ca>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 8019984:	4b2a      	ldr	r3, [pc, #168]	@ (8019a30 <MAP_searchGoalKnown+0x25c>)
 8019986:	edd3 7a00 	vldr	s15, [r3]
 801998a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801998e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019992:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8019a28 <MAP_searchGoalKnown+0x254>
 8019996:	eeb0 0a67 	vmov.f32	s0, s15
 801999a:	f7f5 fe83 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			}
			if (st_Known.bl_known != TRUE) {
 801999e:	4b29      	ldr	r3, [pc, #164]	@ (8019a44 <MAP_searchGoalKnown+0x270>)
 80199a0:	785b      	ldrb	r3, [r3, #1]
 80199a2:	f083 0301 	eor.w	r3, r3, #1
 80199a6:	b2db      	uxtb	r3, r3
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d001      	beq.n	80199b0 <MAP_searchGoalKnown+0x1dc>
				MAP_makeMapData();		// 壁データから迷路データを作成
 80199ac:	f7fd fa4e 	bl	8016e4c <MAP_makeMapData>
			}			
			MAP_makeReturnContourMap(uc_staX,uc_staY);
 80199b0:	7b7a      	ldrb	r2, [r7, #13]
 80199b2:	7bbb      	ldrb	r3, [r7, #14]
 80199b4:	4611      	mov	r1, r2
 80199b6:	4618      	mov	r0, r3
 80199b8:	f7fe fd9a 	bl	80184f0 <MAP_makeReturnContourMap>
			MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 80199bc:	4b17      	ldr	r3, [pc, #92]	@ (8019a1c <MAP_searchGoalKnown+0x248>)
 80199be:	781a      	ldrb	r2, [r3, #0]
 80199c0:	7bfc      	ldrb	r4, [r7, #15]
 80199c2:	7b79      	ldrb	r1, [r7, #13]
 80199c4:	7bb8      	ldrb	r0, [r7, #14]
 80199c6:	f107 0309 	add.w	r3, r7, #9
 80199ca:	9301      	str	r3, [sp, #4]
 80199cc:	7bfb      	ldrb	r3, [r7, #15]
 80199ce:	9300      	str	r3, [sp, #0]
 80199d0:	4623      	mov	r3, r4
 80199d2:	f7fc fb67 	bl	80160a4 <MAP_searchCmdList>
			uc_trgX = Return_X;
 80199d6:	4b12      	ldr	r3, [pc, #72]	@ (8019a20 <MAP_searchGoalKnown+0x24c>)
 80199d8:	781b      	ldrb	r3, [r3, #0]
 80199da:	71fb      	strb	r3, [r7, #7]
			uc_trgY = Return_Y;
 80199dc:	4b11      	ldr	r3, [pc, #68]	@ (8019a24 <MAP_searchGoalKnown+0x250>)
 80199de:	781b      	ldrb	r3, [r3, #0]
 80199e0:	71bb      	strb	r3, [r7, #6]
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 80199e2:	797a      	ldrb	r2, [r7, #5]
 80199e4:	79b9      	ldrb	r1, [r7, #6]
 80199e6:	79fb      	ldrb	r3, [r7, #7]
 80199e8:	4618      	mov	r0, r3
 80199ea:	f7fd fc57 	bl	801729c <MAP_makeContourMap_queue>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);	
 80199ee:	f107 030b 	add.w	r3, r7, #11
 80199f2:	4619      	mov	r1, r3
 80199f4:	2000      	movs	r0, #0
 80199f6:	f7fe f821 	bl	8017a3c <MAP_calcMouseDir>

			/* 次の区画へ移動 */
//			if ((us_Cmap[my][mx] == 0)||((g_SysMap[uc_trgY][uc_trgX]&0xf0) == 0xf0)) {
			if ((mx == 0)&&(my == 0)){
 80199fa:	4b06      	ldr	r3, [pc, #24]	@ (8019a14 <MAP_searchGoalKnown+0x240>)
 80199fc:	781b      	ldrb	r3, [r3, #0]
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d122      	bne.n	8019a48 <MAP_searchGoalKnown+0x274>
 8019a02:	4b05      	ldr	r3, [pc, #20]	@ (8019a18 <MAP_searchGoalKnown+0x244>)
 8019a04:	781b      	ldrb	r3, [r3, #0]
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d11e      	bne.n	8019a48 <MAP_searchGoalKnown+0x274>
				MAP_actGoal();
 8019a0a:	f7fe fce1 	bl	80183d0 <MAP_actGoal>
				break;
 8019a0e:	e0ab      	b.n	8019b68 <MAP_searchGoalKnown+0x394>
 8019a10:	2001bda0 	.word	0x2001bda0
 8019a14:	2001ad8c 	.word	0x2001ad8c
 8019a18:	2001ad8b 	.word	0x2001ad8b
 8019a1c:	2001ad8a 	.word	0x2001ad8a
 8019a20:	2001ad9c 	.word	0x2001ad9c
 8019a24:	2001ad9d 	.word	0x2001ad9d
 8019a28:	3e99999a 	.word	0x3e99999a
 8019a2c:	00000000 	.word	0x00000000
 8019a30:	2001ad90 	.word	0x2001ad90
 8019a34:	2001ad94 	.word	0x2001ad94
 8019a38:	2001ad95 	.word	0x2001ad95
 8019a3c:	2001ad96 	.word	0x2001ad96
 8019a40:	3e6b851f 	.word	0x3e6b851f
 8019a44:	2001ad98 	.word	0x2001ad98
			}
//			}
			else {
				MAP_moveNextBlock_acc(en_head, &bl_type);
 8019a48:	7afb      	ldrb	r3, [r7, #11]
 8019a4a:	f107 020a 	add.w	r2, r7, #10
 8019a4e:	4611      	mov	r1, r2
 8019a50:	4618      	mov	r0, r3
 8019a52:	f7fe ff85 	bl	8018960 <MAP_moveNextBlock_acc>
			}
//			LED_count(uc_trgY);
		}
		if(front_wall_miss == TRUE){
 8019a56:	4b4a      	ldr	r3, [pc, #296]	@ (8019b80 <MAP_searchGoalKnown+0x3ac>)
 8019a58:	781b      	ldrb	r3, [r3, #0]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d03c      	beq.n	8019ad8 <MAP_searchGoalKnown+0x304>
			MOT_turn(MOT_R180);
 8019a5e:	2002      	movs	r0, #2
 8019a60:	f7f6 f84a 	bl	800faf8 <MOT_turn>
			en_Head = (enMAP_HEAD_DIR)(((uint8_t)en_Head + 2) & (MAP_HEAD_DIR_MAX - 1));
 8019a64:	4b47      	ldr	r3, [pc, #284]	@ (8019b84 <MAP_searchGoalKnown+0x3b0>)
 8019a66:	781b      	ldrb	r3, [r3, #0]
 8019a68:	3302      	adds	r3, #2
 8019a6a:	b2db      	uxtb	r3, r3
 8019a6c:	f003 0303 	and.w	r3, r3, #3
 8019a70:	b2da      	uxtb	r2, r3
 8019a72:	4b44      	ldr	r3, [pc, #272]	@ (8019b84 <MAP_searchGoalKnown+0x3b0>)
 8019a74:	701a      	strb	r2, [r3, #0]
			MOT_goHitBackWall();
 8019a76:	f7f7 fb69 	bl	801114c <MOT_goHitBackWall>
			LL_mDelay(100);
 8019a7a:	2064      	movs	r0, #100	@ 0x64
 8019a7c:	f001 fff6 	bl	801ba6c <LL_mDelay>
			MOT_setTrgtSpeed(SEARCH_SPEED/4.0);		// 目標速度
 8019a80:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8019b88 <MAP_searchGoalKnown+0x3b4>
 8019a84:	f7f7 fb3c 	bl	8011100 <MOT_setTrgtSpeed>
			MOT_goBlock_FinSpeed( MOVE_BACK_DIST, 0.0 );//区画中央に戻り おそらく動作バグ
 8019a88:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8019b8c <MAP_searchGoalKnown+0x3b8>
 8019a8c:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8019b90 <MAP_searchGoalKnown+0x3bc>
 8019a90:	f7f5 fe08 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			LL_mDelay(100);
 8019a94:	2064      	movs	r0, #100	@ 0x64
 8019a96:	f001 ffe9 	bl	801ba6c <LL_mDelay>
			MOT_setTrgtSpeed(SEARCH_SPEED);		// 目標速度
 8019a9a:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 8019b94 <MAP_searchGoalKnown+0x3c0>
 8019a9e:	f7f7 fb2f 	bl	8011100 <MOT_setTrgtSpeed>

			MAP_make_refPos_MapData(en_Head);
 8019aa2:	4b38      	ldr	r3, [pc, #224]	@ (8019b84 <MAP_searchGoalKnown+0x3b0>)
 8019aa4:	781b      	ldrb	r3, [r3, #0]
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	f7fd fafc 	bl	80170a4 <MAP_make_refPos_MapData>

			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 8019aac:	797a      	ldrb	r2, [r7, #5]
 8019aae:	79b9      	ldrb	r1, [r7, #6]
 8019ab0:	79fb      	ldrb	r3, [r7, #7]
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	f7fd fbf2 	bl	801729c <MAP_makeContourMap_queue>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);			// 等高線MAP法で進行方向を算出
 8019ab8:	f107 030b 	add.w	r3, r7, #11
 8019abc:	4619      	mov	r1, r3
 8019abe:	2000      	movs	r0, #0
 8019ac0:	f7fd ffbc 	bl	8017a3c <MAP_calcMouseDir>
			MAP_moveNextBlock_frontmiss(en_head, &bl_type);
 8019ac4:	7afb      	ldrb	r3, [r7, #11]
 8019ac6:	f107 020a 	add.w	r2, r7, #10
 8019aca:	4611      	mov	r1, r2
 8019acc:	4618      	mov	r0, r3
 8019ace:	f7fe fc29 	bl	8018324 <MAP_moveNextBlock_frontmiss>

			front_wall_miss = FALSE;
 8019ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8019b80 <MAP_searchGoalKnown+0x3ac>)
 8019ad4:	2200      	movs	r2, #0
 8019ad6:	701a      	strb	r2, [r3, #0]
		}

		if(Min_in>6){
 8019ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8019b98 <MAP_searchGoalKnown+0x3c4>)
 8019ada:	781b      	ldrb	r3, [r3, #0]
 8019adc:	b2db      	uxtb	r3, r3
 8019ade:	2b06      	cmp	r3, #6
 8019ae0:	d927      	bls.n	8019b32 <MAP_searchGoalKnown+0x35e>
			MOT_goBlock_FinSpeed(0.5,0.0);
 8019ae2:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8019b8c <MAP_searchGoalKnown+0x3b8>
 8019ae6:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8019aea:	f7f5 fddb 	bl	800f6a4 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R180);	
 8019aee:	2002      	movs	r0, #2
 8019af0:	f7f6 f802 	bl	800faf8 <MOT_turn>
			LL_mDelay(200);
 8019af4:	20c8      	movs	r0, #200	@ 0xc8
 8019af6:	f001 ffb9 	bl	801ba6c <LL_mDelay>
			MOT_turn(MOT_R180);	
 8019afa:	2002      	movs	r0, #2
 8019afc:	f7f5 fffc 	bl	800faf8 <MOT_turn>
			LL_mDelay(200);
 8019b00:	20c8      	movs	r0, #200	@ 0xc8
 8019b02:	f001 ffb3 	bl	801ba6c <LL_mDelay>
			CTRL_stop();
 8019b06:	f7ec fc8d 	bl	8006424 <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 8019b0a:	2000      	movs	r0, #0
 8019b0c:	f7ef fda2 	bl	8009654 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 8019b10:	2001      	movs	r0, #1
 8019b12:	f7ef fd9f 	bl	8009654 <DCM_brakeMot>
			
			/* 迷路関連を初期化 */
			en_Head		= NORTH;
 8019b16:	4b1b      	ldr	r3, [pc, #108]	@ (8019b84 <MAP_searchGoalKnown+0x3b0>)
 8019b18:	2200      	movs	r2, #0
 8019b1a:	701a      	strb	r2, [r3, #0]
			mx			= 0;
 8019b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8019b9c <MAP_searchGoalKnown+0x3c8>)
 8019b1e:	2200      	movs	r2, #0
 8019b20:	701a      	strb	r2, [r3, #0]
			my			= 0;
 8019b22:	4b1f      	ldr	r3, [pc, #124]	@ (8019ba0 <MAP_searchGoalKnown+0x3cc>)
 8019b24:	2200      	movs	r2, #0
 8019b26:	701a      	strb	r2, [r3, #0]
			f_MoveBackDist = 0;
 8019b28:	4b1e      	ldr	r3, [pc, #120]	@ (8019ba4 <MAP_searchGoalKnown+0x3d0>)
 8019b2a:	f04f 0200 	mov.w	r2, #0
 8019b2e:	601a      	str	r2, [r3, #0]
			break;
 8019b30:	e01a      	b.n	8019b68 <MAP_searchGoalKnown+0x394>
		}
		
		/* 途中で制御不能になった */
		if( SYS_isOutOfCtrl() == TRUE ){
 8019b32:	f7ef fd5d 	bl	80095f0 <SYS_isOutOfCtrl>
 8019b36:	4603      	mov	r3, r0
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	f43f aea5 	beq.w	8019888 <MAP_searchGoalKnown+0xb4>
			CTRL_stop();
 8019b3e:	f7ec fc71 	bl	8006424 <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 8019b42:	2000      	movs	r0, #0
 8019b44:	f7ef fd86 	bl	8009654 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 8019b48:	2001      	movs	r0, #1
 8019b4a:	f7ef fd83 	bl	8009654 <DCM_brakeMot>
			
			/* 迷路関連を初期化 */
			en_Head		= NORTH;
 8019b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8019b84 <MAP_searchGoalKnown+0x3b0>)
 8019b50:	2200      	movs	r2, #0
 8019b52:	701a      	strb	r2, [r3, #0]
			mx			= 0;
 8019b54:	4b11      	ldr	r3, [pc, #68]	@ (8019b9c <MAP_searchGoalKnown+0x3c8>)
 8019b56:	2200      	movs	r2, #0
 8019b58:	701a      	strb	r2, [r3, #0]
			my			= 0;
 8019b5a:	4b11      	ldr	r3, [pc, #68]	@ (8019ba0 <MAP_searchGoalKnown+0x3cc>)
 8019b5c:	2200      	movs	r2, #0
 8019b5e:	701a      	strb	r2, [r3, #0]
			f_MoveBackDist = 0;
 8019b60:	4b10      	ldr	r3, [pc, #64]	@ (8019ba4 <MAP_searchGoalKnown+0x3d0>)
 8019b62:	f04f 0200 	mov.w	r2, #0
 8019b66:	601a      	str	r2, [r3, #0]
			
			// DCMCは下位モジュールで既にクリアと緊急停止を行っている。
			break;
		}
	}
	SearchFlag = FALSE;
 8019b68:	4b0f      	ldr	r3, [pc, #60]	@ (8019ba8 <MAP_searchGoalKnown+0x3d4>)
 8019b6a:	2200      	movs	r2, #0
 8019b6c:	701a      	strb	r2, [r3, #0]
	LL_mDelay(1000);
 8019b6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8019b72:	f001 ff7b 	bl	801ba6c <LL_mDelay>
//	SYS_setEnable( SYS_MODE );			// モード変更有効

}
 8019b76:	bf00      	nop
 8019b78:	3714      	adds	r7, #20
 8019b7a:	46bd      	mov	sp, r7
 8019b7c:	bd90      	pop	{r4, r7, pc}
 8019b7e:	bf00      	nop
 8019b80:	2001ad9b 	.word	0x2001ad9b
 8019b84:	2001ad8a 	.word	0x2001ad8a
 8019b88:	3d99999a 	.word	0x3d99999a
 8019b8c:	00000000 	.word	0x00000000
 8019b90:	3e6b851f 	.word	0x3e6b851f
 8019b94:	3e99999a 	.word	0x3e99999a
 8019b98:	20000217 	.word	0x20000217
 8019b9c:	2001ad8c 	.word	0x2001ad8c
 8019ba0:	2001ad8b 	.word	0x2001ad8b
 8019ba4:	2001ad90 	.word	0x2001ad90
 8019ba8:	2001bda0 	.word	0x2001bda0

08019bac <MAP_clearMap_direction>:
//	SYS_setEnable( SYS_MODE );			// モード変更有効

}

void MAP_clearMap_direction(void)
{
 8019bac:	b480      	push	{r7}
 8019bae:	b083      	sub	sp, #12
 8019bb0:	af00      	add	r7, sp, #0
	uint16_t	x, y;
	uint8_t	uc_data;

	/* すべてのマップデータを未探索状態にする */
	for (y = 0; y < MAP_Y_SIZE; y++) {
 8019bb2:	2300      	movs	r3, #0
 8019bb4:	80bb      	strh	r3, [r7, #4]
 8019bb6:	e015      	b.n	8019be4 <MAP_clearMap_direction+0x38>
		for (x = 0; x < MAP_X_SIZE; x++) {
 8019bb8:	2300      	movs	r3, #0
 8019bba:	80fb      	strh	r3, [r7, #6]
 8019bbc:	e00c      	b.n	8019bd8 <MAP_clearMap_direction+0x2c>
			uc_data = 0x00;
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	70fb      	strb	r3, [r7, #3]
			g_MapDirection[y][x] = uc_data;
 8019bc2:	88ba      	ldrh	r2, [r7, #4]
 8019bc4:	88fb      	ldrh	r3, [r7, #6]
 8019bc6:	490c      	ldr	r1, [pc, #48]	@ (8019bf8 <MAP_clearMap_direction+0x4c>)
 8019bc8:	0152      	lsls	r2, r2, #5
 8019bca:	440a      	add	r2, r1
 8019bcc:	4413      	add	r3, r2
 8019bce:	78fa      	ldrb	r2, [r7, #3]
 8019bd0:	701a      	strb	r2, [r3, #0]
		for (x = 0; x < MAP_X_SIZE; x++) {
 8019bd2:	88fb      	ldrh	r3, [r7, #6]
 8019bd4:	3301      	adds	r3, #1
 8019bd6:	80fb      	strh	r3, [r7, #6]
 8019bd8:	88fb      	ldrh	r3, [r7, #6]
 8019bda:	2b1f      	cmp	r3, #31
 8019bdc:	d9ef      	bls.n	8019bbe <MAP_clearMap_direction+0x12>
	for (y = 0; y < MAP_Y_SIZE; y++) {
 8019bde:	88bb      	ldrh	r3, [r7, #4]
 8019be0:	3301      	adds	r3, #1
 8019be2:	80bb      	strh	r3, [r7, #4]
 8019be4:	88bb      	ldrh	r3, [r7, #4]
 8019be6:	2b1f      	cmp	r3, #31
 8019be8:	d9e6      	bls.n	8019bb8 <MAP_clearMap_direction+0xc>
		}
	}

}
 8019bea:	bf00      	nop
 8019bec:	bf00      	nop
 8019bee:	370c      	adds	r7, #12
 8019bf0:	46bd      	mov	sp, r7
 8019bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bf6:	4770      	bx	lr
 8019bf8:	2001b9a0 	.word	0x2001b9a0

08019bfc <MAP_makeContourMap_dijkstra_modoki>:

void  MAP_makeContourMap_dijkstra_modoki(
	uint8_t uc_goalX, 			///< [in] ゴールX座標
	uint8_t uc_goalY, 			///< [in] ゴールY座標
	enMAP_ACT_MODE	en_type		///< [in] 計算方法（まだ未使用）
) {
 8019bfc:	b580      	push	{r7, lr}
 8019bfe:	b086      	sub	sp, #24
 8019c00:	af00      	add	r7, sp, #0
 8019c02:	4603      	mov	r3, r0
 8019c04:	71fb      	strb	r3, [r7, #7]
 8019c06:	460b      	mov	r3, r1
 8019c08:	71bb      	strb	r3, [r7, #6]
 8019c0a:	4613      	mov	r3, r2
 8019c0c:	717b      	strb	r3, [r7, #5]
	uint16_t		uc_level;		// 等高線
	uint8_t		uc_wallData;	// 壁情報

	en_type = en_type;		// コンパイルワーニング回避（いずれ削除）

	MAP_clearMap_direction();
 8019c0e:	f7ff ffcd 	bl	8019bac <MAP_clearMap_direction>

	/* 等高線マップを初期化する */
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 8019c12:	2300      	movs	r3, #0
 8019c14:	827b      	strh	r3, [r7, #18]
 8019c16:	e010      	b.n	8019c3a <MAP_makeContourMap_dijkstra_modoki+0x3e>
		us_Cmap[i / MAP_Y_SIZE][i & (MAP_X_SIZE - 1)] = MAP_SMAP_MAX_VAL*4 - 1;
 8019c18:	8a7b      	ldrh	r3, [r7, #18]
 8019c1a:	095b      	lsrs	r3, r3, #5
 8019c1c:	b29b      	uxth	r3, r3
 8019c1e:	461a      	mov	r2, r3
 8019c20:	8a7b      	ldrh	r3, [r7, #18]
 8019c22:	f003 031f 	and.w	r3, r3, #31
 8019c26:	495e      	ldr	r1, [pc, #376]	@ (8019da0 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019c28:	0152      	lsls	r2, r2, #5
 8019c2a:	4413      	add	r3, r2
 8019c2c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8019c30:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 8019c34:	8a7b      	ldrh	r3, [r7, #18]
 8019c36:	3301      	adds	r3, #1
 8019c38:	827b      	strh	r3, [r7, #18]
 8019c3a:	8a7b      	ldrh	r3, [r7, #18]
 8019c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019c40:	d3ea      	bcc.n	8019c18 <MAP_makeContourMap_dijkstra_modoki+0x1c>
	}
	/* 目標地点の等高線を0に設定 */
	us_Cmap[uc_goalY][uc_goalX] = 0;
 8019c42:	79ba      	ldrb	r2, [r7, #6]
 8019c44:	79fb      	ldrb	r3, [r7, #7]
 8019c46:	4956      	ldr	r1, [pc, #344]	@ (8019da0 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019c48:	0152      	lsls	r2, r2, #5
 8019c4a:	4413      	add	r3, r2
 8019c4c:	2200      	movs	r2, #0
 8019c4e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	if (GOAL_SIZE == 4) {
 8019c52:	4b54      	ldr	r3, [pc, #336]	@ (8019da4 <MAP_makeContourMap_dijkstra_modoki+0x1a8>)
 8019c54:	781b      	ldrb	r3, [r3, #0]
 8019c56:	2b04      	cmp	r3, #4
 8019c58:	d11c      	bne.n	8019c94 <MAP_makeContourMap_dijkstra_modoki+0x98>
		us_Cmap[uc_goalY + 1][uc_goalX] = 0;
 8019c5a:	79bb      	ldrb	r3, [r7, #6]
 8019c5c:	1c5a      	adds	r2, r3, #1
 8019c5e:	79fb      	ldrb	r3, [r7, #7]
 8019c60:	494f      	ldr	r1, [pc, #316]	@ (8019da0 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019c62:	0152      	lsls	r2, r2, #5
 8019c64:	4413      	add	r3, r2
 8019c66:	2200      	movs	r2, #0
 8019c68:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY][uc_goalX + 1] = 0;
 8019c6c:	79ba      	ldrb	r2, [r7, #6]
 8019c6e:	79fb      	ldrb	r3, [r7, #7]
 8019c70:	3301      	adds	r3, #1
 8019c72:	494b      	ldr	r1, [pc, #300]	@ (8019da0 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019c74:	0152      	lsls	r2, r2, #5
 8019c76:	4413      	add	r3, r2
 8019c78:	2200      	movs	r2, #0
 8019c7a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY + 1][uc_goalX + 1] = 0;
 8019c7e:	79bb      	ldrb	r3, [r7, #6]
 8019c80:	1c5a      	adds	r2, r3, #1
 8019c82:	79fb      	ldrb	r3, [r7, #7]
 8019c84:	3301      	adds	r3, #1
 8019c86:	4946      	ldr	r1, [pc, #280]	@ (8019da0 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019c88:	0152      	lsls	r2, r2, #5
 8019c8a:	4413      	add	r3, r2
 8019c8c:	2200      	movs	r2, #0
 8019c8e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8019c92:	e04f      	b.n	8019d34 <MAP_makeContourMap_dijkstra_modoki+0x138>
	}
	else if (GOAL_SIZE == 9){
 8019c94:	4b43      	ldr	r3, [pc, #268]	@ (8019da4 <MAP_makeContourMap_dijkstra_modoki+0x1a8>)
 8019c96:	781b      	ldrb	r3, [r3, #0]
 8019c98:	2b09      	cmp	r3, #9
 8019c9a:	d14b      	bne.n	8019d34 <MAP_makeContourMap_dijkstra_modoki+0x138>
		us_Cmap[uc_goalY+1][uc_goalX] = 0;
 8019c9c:	79bb      	ldrb	r3, [r7, #6]
 8019c9e:	1c5a      	adds	r2, r3, #1
 8019ca0:	79fb      	ldrb	r3, [r7, #7]
 8019ca2:	493f      	ldr	r1, [pc, #252]	@ (8019da0 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019ca4:	0152      	lsls	r2, r2, #5
 8019ca6:	4413      	add	r3, r2
 8019ca8:	2200      	movs	r2, #0
 8019caa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY][uc_goalX+1] = 0;
 8019cae:	79ba      	ldrb	r2, [r7, #6]
 8019cb0:	79fb      	ldrb	r3, [r7, #7]
 8019cb2:	3301      	adds	r3, #1
 8019cb4:	493a      	ldr	r1, [pc, #232]	@ (8019da0 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019cb6:	0152      	lsls	r2, r2, #5
 8019cb8:	4413      	add	r3, r2
 8019cba:	2200      	movs	r2, #0
 8019cbc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+1][uc_goalX+1] = 0;
 8019cc0:	79bb      	ldrb	r3, [r7, #6]
 8019cc2:	1c5a      	adds	r2, r3, #1
 8019cc4:	79fb      	ldrb	r3, [r7, #7]
 8019cc6:	3301      	adds	r3, #1
 8019cc8:	4935      	ldr	r1, [pc, #212]	@ (8019da0 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019cca:	0152      	lsls	r2, r2, #5
 8019ccc:	4413      	add	r3, r2
 8019cce:	2200      	movs	r2, #0
 8019cd0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+2][uc_goalX] = 0;
 8019cd4:	79bb      	ldrb	r3, [r7, #6]
 8019cd6:	1c9a      	adds	r2, r3, #2
 8019cd8:	79fb      	ldrb	r3, [r7, #7]
 8019cda:	4931      	ldr	r1, [pc, #196]	@ (8019da0 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019cdc:	0152      	lsls	r2, r2, #5
 8019cde:	4413      	add	r3, r2
 8019ce0:	2200      	movs	r2, #0
 8019ce2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+2][uc_goalX+1] = 0;
 8019ce6:	79bb      	ldrb	r3, [r7, #6]
 8019ce8:	1c9a      	adds	r2, r3, #2
 8019cea:	79fb      	ldrb	r3, [r7, #7]
 8019cec:	3301      	adds	r3, #1
 8019cee:	492c      	ldr	r1, [pc, #176]	@ (8019da0 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019cf0:	0152      	lsls	r2, r2, #5
 8019cf2:	4413      	add	r3, r2
 8019cf4:	2200      	movs	r2, #0
 8019cf6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY][uc_goalX+2] = 0;
 8019cfa:	79ba      	ldrb	r2, [r7, #6]
 8019cfc:	79fb      	ldrb	r3, [r7, #7]
 8019cfe:	3302      	adds	r3, #2
 8019d00:	4927      	ldr	r1, [pc, #156]	@ (8019da0 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019d02:	0152      	lsls	r2, r2, #5
 8019d04:	4413      	add	r3, r2
 8019d06:	2200      	movs	r2, #0
 8019d08:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+1][uc_goalX+2] = 0;
 8019d0c:	79bb      	ldrb	r3, [r7, #6]
 8019d0e:	1c5a      	adds	r2, r3, #1
 8019d10:	79fb      	ldrb	r3, [r7, #7]
 8019d12:	3302      	adds	r3, #2
 8019d14:	4922      	ldr	r1, [pc, #136]	@ (8019da0 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019d16:	0152      	lsls	r2, r2, #5
 8019d18:	4413      	add	r3, r2
 8019d1a:	2200      	movs	r2, #0
 8019d1c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+2][uc_goalX+2] = 0;
 8019d20:	79bb      	ldrb	r3, [r7, #6]
 8019d22:	1c9a      	adds	r2, r3, #2
 8019d24:	79fb      	ldrb	r3, [r7, #7]
 8019d26:	3302      	adds	r3, #2
 8019d28:	491d      	ldr	r1, [pc, #116]	@ (8019da0 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019d2a:	0152      	lsls	r2, r2, #5
 8019d2c:	4413      	add	r3, r2
 8019d2e:	2200      	movs	r2, #0
 8019d30:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}

	if (mx > uc_max_x)uc_max_x = mx;
 8019d34:	4b1c      	ldr	r3, [pc, #112]	@ (8019da8 <MAP_makeContourMap_dijkstra_modoki+0x1ac>)
 8019d36:	781a      	ldrb	r2, [r3, #0]
 8019d38:	4b1c      	ldr	r3, [pc, #112]	@ (8019dac <MAP_makeContourMap_dijkstra_modoki+0x1b0>)
 8019d3a:	781b      	ldrb	r3, [r3, #0]
 8019d3c:	429a      	cmp	r2, r3
 8019d3e:	d903      	bls.n	8019d48 <MAP_makeContourMap_dijkstra_modoki+0x14c>
 8019d40:	4b19      	ldr	r3, [pc, #100]	@ (8019da8 <MAP_makeContourMap_dijkstra_modoki+0x1ac>)
 8019d42:	781a      	ldrb	r2, [r3, #0]
 8019d44:	4b19      	ldr	r3, [pc, #100]	@ (8019dac <MAP_makeContourMap_dijkstra_modoki+0x1b0>)
 8019d46:	701a      	strb	r2, [r3, #0]
	if (my > uc_max_y)uc_max_y = my;
 8019d48:	4b19      	ldr	r3, [pc, #100]	@ (8019db0 <MAP_makeContourMap_dijkstra_modoki+0x1b4>)
 8019d4a:	781a      	ldrb	r2, [r3, #0]
 8019d4c:	4b19      	ldr	r3, [pc, #100]	@ (8019db4 <MAP_makeContourMap_dijkstra_modoki+0x1b8>)
 8019d4e:	781b      	ldrb	r3, [r3, #0]
 8019d50:	429a      	cmp	r2, r3
 8019d52:	d903      	bls.n	8019d5c <MAP_makeContourMap_dijkstra_modoki+0x160>
 8019d54:	4b16      	ldr	r3, [pc, #88]	@ (8019db0 <MAP_makeContourMap_dijkstra_modoki+0x1b4>)
 8019d56:	781a      	ldrb	r2, [r3, #0]
 8019d58:	4b16      	ldr	r3, [pc, #88]	@ (8019db4 <MAP_makeContourMap_dijkstra_modoki+0x1b8>)
 8019d5a:	701a      	strb	r2, [r3, #0]
	uc_max_x = 32;
 8019d5c:	4b13      	ldr	r3, [pc, #76]	@ (8019dac <MAP_makeContourMap_dijkstra_modoki+0x1b0>)
 8019d5e:	2220      	movs	r2, #32
 8019d60:	701a      	strb	r2, [r3, #0]
	uc_max_y = 32;
 8019d62:	4b14      	ldr	r3, [pc, #80]	@ (8019db4 <MAP_makeContourMap_dijkstra_modoki+0x1b8>)
 8019d64:	2220      	movs	r2, #32
 8019d66:	701a      	strb	r2, [r3, #0]

	g_MapDirection[uc_goalY][uc_goalX] = 0xff;
 8019d68:	79ba      	ldrb	r2, [r7, #6]
 8019d6a:	79fb      	ldrb	r3, [r7, #7]
 8019d6c:	4912      	ldr	r1, [pc, #72]	@ (8019db8 <MAP_makeContourMap_dijkstra_modoki+0x1bc>)
 8019d6e:	0152      	lsls	r2, r2, #5
 8019d70:	440a      	add	r2, r1
 8019d72:	4413      	add	r3, r2
 8019d74:	22ff      	movs	r2, #255	@ 0xff
 8019d76:	701a      	strb	r2, [r3, #0]

	/* 等高線マップを作成 */
	uc_dase = 0;
 8019d78:	2300      	movs	r3, #0
 8019d7a:	823b      	strh	r3, [r7, #16]
	do {
		uc_level = 0;
 8019d7c:	2300      	movs	r3, #0
 8019d7e:	81bb      	strh	r3, [r7, #12]
		uc_new = uc_dase + 1;
 8019d80:	8a3b      	ldrh	r3, [r7, #16]
 8019d82:	3301      	adds	r3, #1
 8019d84:	81fb      	strh	r3, [r7, #14]
		for (y = 0; y < MAP_Y_SIZE; y++) {
 8019d86:	2300      	movs	r3, #0
 8019d88:	82bb      	strh	r3, [r7, #20]
 8019d8a:	e1ea      	b.n	801a162 <MAP_makeContourMap_dijkstra_modoki+0x566>
			if (uc_max_y+1 < y) break;
 8019d8c:	4b09      	ldr	r3, [pc, #36]	@ (8019db4 <MAP_makeContourMap_dijkstra_modoki+0x1b8>)
 8019d8e:	781b      	ldrb	r3, [r3, #0]
 8019d90:	1c5a      	adds	r2, r3, #1
 8019d92:	8abb      	ldrh	r3, [r7, #20]
 8019d94:	429a      	cmp	r2, r3
 8019d96:	f2c0 81e9 	blt.w	801a16c <MAP_makeContourMap_dijkstra_modoki+0x570>
			for (x = 0; x < MAP_X_SIZE; x++) {
 8019d9a:	2300      	movs	r3, #0
 8019d9c:	82fb      	strh	r3, [r7, #22]
 8019d9e:	e1d7      	b.n	801a150 <MAP_makeContourMap_dijkstra_modoki+0x554>
 8019da0:	2001ada0 	.word	0x2001ada0
 8019da4:	2001ad97 	.word	0x2001ad97
 8019da8:	2001ad8c 	.word	0x2001ad8c
 8019dac:	2000001a 	.word	0x2000001a
 8019db0:	2001ad8b 	.word	0x2001ad8b
 8019db4:	2000001b 	.word	0x2000001b
 8019db8:	2001b9a0 	.word	0x2001b9a0
				if (us_Cmap[y][x] == uc_dase) {
 8019dbc:	8aba      	ldrh	r2, [r7, #20]
 8019dbe:	8afb      	ldrh	r3, [r7, #22]
 8019dc0:	49a0      	ldr	r1, [pc, #640]	@ (801a044 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019dc2:	0152      	lsls	r2, r2, #5
 8019dc4:	4413      	add	r3, r2
 8019dc6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019dca:	8a3a      	ldrh	r2, [r7, #16]
 8019dcc:	429a      	cmp	r2, r3
 8019dce:	f040 81b4 	bne.w	801a13a <MAP_makeContourMap_dijkstra_modoki+0x53e>
					uc_wallData = g_SysMap[y][x];
 8019dd2:	8aba      	ldrh	r2, [r7, #20]
 8019dd4:	8afb      	ldrh	r3, [r7, #22]
 8019dd6:	499c      	ldr	r1, [pc, #624]	@ (801a048 <MAP_makeContourMap_dijkstra_modoki+0x44c>)
 8019dd8:	0152      	lsls	r2, r2, #5
 8019dda:	440a      	add	r2, r1
 8019ddc:	4413      	add	r3, r2
 8019dde:	781b      	ldrb	r3, [r3, #0]
 8019de0:	72fb      	strb	r3, [r7, #11]
					if (uc_max_x+1 < x) break;
 8019de2:	4b9a      	ldr	r3, [pc, #616]	@ (801a04c <MAP_makeContourMap_dijkstra_modoki+0x450>)
 8019de4:	781b      	ldrb	r3, [r3, #0]
 8019de6:	1c5a      	adds	r2, r3, #1
 8019de8:	8afb      	ldrh	r3, [r7, #22]
 8019dea:	429a      	cmp	r2, r3
 8019dec:	f2c0 81b5 	blt.w	801a15a <MAP_makeContourMap_dijkstra_modoki+0x55e>
					/* 探索走行 */
					if (SEARCH == en_type) {
 8019df0:	797b      	ldrb	r3, [r7, #5]
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	f040 8084 	bne.w	8019f00 <MAP_makeContourMap_dijkstra_modoki+0x304>
						if (((uc_wallData & 0x01) == 0x00) && (y != (MAP_Y_SIZE - 1))) {
 8019df8:	7afb      	ldrb	r3, [r7, #11]
 8019dfa:	f003 0301 	and.w	r3, r3, #1
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d11a      	bne.n	8019e38 <MAP_makeContourMap_dijkstra_modoki+0x23c>
 8019e02:	8abb      	ldrh	r3, [r7, #20]
 8019e04:	2b1f      	cmp	r3, #31
 8019e06:	d017      	beq.n	8019e38 <MAP_makeContourMap_dijkstra_modoki+0x23c>
							if (us_Cmap[y + 1][x] == MAP_SMAP_MAX_VAL - 1) {
 8019e08:	8abb      	ldrh	r3, [r7, #20]
 8019e0a:	1c5a      	adds	r2, r3, #1
 8019e0c:	8afb      	ldrh	r3, [r7, #22]
 8019e0e:	498d      	ldr	r1, [pc, #564]	@ (801a044 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019e10:	0152      	lsls	r2, r2, #5
 8019e12:	4413      	add	r3, r2
 8019e14:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019e18:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8019e1c:	4293      	cmp	r3, r2
 8019e1e:	d10b      	bne.n	8019e38 <MAP_makeContourMap_dijkstra_modoki+0x23c>
								us_Cmap[y + 1][x] = uc_new;
 8019e20:	8abb      	ldrh	r3, [r7, #20]
 8019e22:	1c5a      	adds	r2, r3, #1
 8019e24:	8afb      	ldrh	r3, [r7, #22]
 8019e26:	4987      	ldr	r1, [pc, #540]	@ (801a044 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019e28:	0152      	lsls	r2, r2, #5
 8019e2a:	4413      	add	r3, r2
 8019e2c:	89fa      	ldrh	r2, [r7, #14]
 8019e2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8019e32:	89bb      	ldrh	r3, [r7, #12]
 8019e34:	3301      	adds	r3, #1
 8019e36:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x02) == 0x00) && (x != (MAP_X_SIZE - 1))) {
 8019e38:	7afb      	ldrb	r3, [r7, #11]
 8019e3a:	f003 0302 	and.w	r3, r3, #2
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d11a      	bne.n	8019e78 <MAP_makeContourMap_dijkstra_modoki+0x27c>
 8019e42:	8afb      	ldrh	r3, [r7, #22]
 8019e44:	2b1f      	cmp	r3, #31
 8019e46:	d017      	beq.n	8019e78 <MAP_makeContourMap_dijkstra_modoki+0x27c>
							if (us_Cmap[y][x + 1] == MAP_SMAP_MAX_VAL - 1) {
 8019e48:	8aba      	ldrh	r2, [r7, #20]
 8019e4a:	8afb      	ldrh	r3, [r7, #22]
 8019e4c:	3301      	adds	r3, #1
 8019e4e:	497d      	ldr	r1, [pc, #500]	@ (801a044 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019e50:	0152      	lsls	r2, r2, #5
 8019e52:	4413      	add	r3, r2
 8019e54:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019e58:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8019e5c:	4293      	cmp	r3, r2
 8019e5e:	d10b      	bne.n	8019e78 <MAP_makeContourMap_dijkstra_modoki+0x27c>
								us_Cmap[y][x + 1] = uc_new;
 8019e60:	8aba      	ldrh	r2, [r7, #20]
 8019e62:	8afb      	ldrh	r3, [r7, #22]
 8019e64:	3301      	adds	r3, #1
 8019e66:	4977      	ldr	r1, [pc, #476]	@ (801a044 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019e68:	0152      	lsls	r2, r2, #5
 8019e6a:	4413      	add	r3, r2
 8019e6c:	89fa      	ldrh	r2, [r7, #14]
 8019e6e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8019e72:	89bb      	ldrh	r3, [r7, #12]
 8019e74:	3301      	adds	r3, #1
 8019e76:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x04) == 0x00) && (y != 0)) {
 8019e78:	7afb      	ldrb	r3, [r7, #11]
 8019e7a:	f003 0304 	and.w	r3, r3, #4
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d11a      	bne.n	8019eb8 <MAP_makeContourMap_dijkstra_modoki+0x2bc>
 8019e82:	8abb      	ldrh	r3, [r7, #20]
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d017      	beq.n	8019eb8 <MAP_makeContourMap_dijkstra_modoki+0x2bc>
							if (us_Cmap[y - 1][x] == MAP_SMAP_MAX_VAL - 1) {
 8019e88:	8abb      	ldrh	r3, [r7, #20]
 8019e8a:	1e5a      	subs	r2, r3, #1
 8019e8c:	8afb      	ldrh	r3, [r7, #22]
 8019e8e:	496d      	ldr	r1, [pc, #436]	@ (801a044 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019e90:	0152      	lsls	r2, r2, #5
 8019e92:	4413      	add	r3, r2
 8019e94:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019e98:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8019e9c:	4293      	cmp	r3, r2
 8019e9e:	d10b      	bne.n	8019eb8 <MAP_makeContourMap_dijkstra_modoki+0x2bc>
								us_Cmap[y - 1][x] = uc_new;
 8019ea0:	8abb      	ldrh	r3, [r7, #20]
 8019ea2:	1e5a      	subs	r2, r3, #1
 8019ea4:	8afb      	ldrh	r3, [r7, #22]
 8019ea6:	4967      	ldr	r1, [pc, #412]	@ (801a044 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019ea8:	0152      	lsls	r2, r2, #5
 8019eaa:	4413      	add	r3, r2
 8019eac:	89fa      	ldrh	r2, [r7, #14]
 8019eae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8019eb2:	89bb      	ldrh	r3, [r7, #12]
 8019eb4:	3301      	adds	r3, #1
 8019eb6:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x08) == 0x00) && (x != 0)) {
 8019eb8:	7afb      	ldrb	r3, [r7, #11]
 8019eba:	f003 0308 	and.w	r3, r3, #8
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	f040 813b 	bne.w	801a13a <MAP_makeContourMap_dijkstra_modoki+0x53e>
 8019ec4:	8afb      	ldrh	r3, [r7, #22]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	f000 8137 	beq.w	801a13a <MAP_makeContourMap_dijkstra_modoki+0x53e>
							if (us_Cmap[y][x - 1] == MAP_SMAP_MAX_VAL - 1) {
 8019ecc:	8aba      	ldrh	r2, [r7, #20]
 8019ece:	8afb      	ldrh	r3, [r7, #22]
 8019ed0:	3b01      	subs	r3, #1
 8019ed2:	495c      	ldr	r1, [pc, #368]	@ (801a044 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019ed4:	0152      	lsls	r2, r2, #5
 8019ed6:	4413      	add	r3, r2
 8019ed8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019edc:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8019ee0:	4293      	cmp	r3, r2
 8019ee2:	f040 812a 	bne.w	801a13a <MAP_makeContourMap_dijkstra_modoki+0x53e>
								us_Cmap[y][x - 1] = uc_new;
 8019ee6:	8aba      	ldrh	r2, [r7, #20]
 8019ee8:	8afb      	ldrh	r3, [r7, #22]
 8019eea:	3b01      	subs	r3, #1
 8019eec:	4955      	ldr	r1, [pc, #340]	@ (801a044 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019eee:	0152      	lsls	r2, r2, #5
 8019ef0:	4413      	add	r3, r2
 8019ef2:	89fa      	ldrh	r2, [r7, #14]
 8019ef4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8019ef8:	89bb      	ldrh	r3, [r7, #12]
 8019efa:	3301      	adds	r3, #1
 8019efc:	81bb      	strh	r3, [r7, #12]
 8019efe:	e11c      	b.n	801a13a <MAP_makeContourMap_dijkstra_modoki+0x53e>
							}
						}
					}
					/* 最短走行 */
					else {
						if (((uc_wallData & 0x11) == 0x10) && (y != (MAP_Y_SIZE - 1))) {
 8019f00:	7afb      	ldrb	r3, [r7, #11]
 8019f02:	f003 0311 	and.w	r3, r3, #17
 8019f06:	2b10      	cmp	r3, #16
 8019f08:	d13f      	bne.n	8019f8a <MAP_makeContourMap_dijkstra_modoki+0x38e>
 8019f0a:	8abb      	ldrh	r3, [r7, #20]
 8019f0c:	2b1f      	cmp	r3, #31
 8019f0e:	d03c      	beq.n	8019f8a <MAP_makeContourMap_dijkstra_modoki+0x38e>
							if((g_MapDirection[y][x]&0x10) == 0x10){
 8019f10:	8aba      	ldrh	r2, [r7, #20]
 8019f12:	8afb      	ldrh	r3, [r7, #22]
 8019f14:	494e      	ldr	r1, [pc, #312]	@ (801a050 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 8019f16:	0152      	lsls	r2, r2, #5
 8019f18:	440a      	add	r2, r1
 8019f1a:	4413      	add	r3, r2
 8019f1c:	781b      	ldrb	r3, [r3, #0]
 8019f1e:	f003 0310 	and.w	r3, r3, #16
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d003      	beq.n	8019f2e <MAP_makeContourMap_dijkstra_modoki+0x332>
								uc_new = uc_dase + 1;
 8019f26:	8a3b      	ldrh	r3, [r7, #16]
 8019f28:	3301      	adds	r3, #1
 8019f2a:	81fb      	strh	r3, [r7, #14]
 8019f2c:	e002      	b.n	8019f34 <MAP_makeContourMap_dijkstra_modoki+0x338>
							}else{
								uc_new = uc_dase + 2;
 8019f2e:	8a3b      	ldrh	r3, [r7, #16]
 8019f30:	3302      	adds	r3, #2
 8019f32:	81fb      	strh	r3, [r7, #14]
							}
							if (us_Cmap[y + 1][x] > uc_new) {
 8019f34:	8abb      	ldrh	r3, [r7, #20]
 8019f36:	1c5a      	adds	r2, r3, #1
 8019f38:	8afb      	ldrh	r3, [r7, #22]
 8019f3a:	4942      	ldr	r1, [pc, #264]	@ (801a044 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019f3c:	0152      	lsls	r2, r2, #5
 8019f3e:	4413      	add	r3, r2
 8019f40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019f44:	89fa      	ldrh	r2, [r7, #14]
 8019f46:	429a      	cmp	r2, r3
 8019f48:	d21f      	bcs.n	8019f8a <MAP_makeContourMap_dijkstra_modoki+0x38e>
								us_Cmap[y + 1][x] = uc_new;
 8019f4a:	8abb      	ldrh	r3, [r7, #20]
 8019f4c:	1c5a      	adds	r2, r3, #1
 8019f4e:	8afb      	ldrh	r3, [r7, #22]
 8019f50:	493c      	ldr	r1, [pc, #240]	@ (801a044 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019f52:	0152      	lsls	r2, r2, #5
 8019f54:	4413      	add	r3, r2
 8019f56:	89fa      	ldrh	r2, [r7, #14]
 8019f58:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								g_MapDirection[y+1][x] |= 0x10;
 8019f5c:	8abb      	ldrh	r3, [r7, #20]
 8019f5e:	1c5a      	adds	r2, r3, #1
 8019f60:	8afb      	ldrh	r3, [r7, #22]
 8019f62:	493b      	ldr	r1, [pc, #236]	@ (801a050 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 8019f64:	0152      	lsls	r2, r2, #5
 8019f66:	440a      	add	r2, r1
 8019f68:	4413      	add	r3, r2
 8019f6a:	7819      	ldrb	r1, [r3, #0]
 8019f6c:	8abb      	ldrh	r3, [r7, #20]
 8019f6e:	1c5a      	adds	r2, r3, #1
 8019f70:	8afb      	ldrh	r3, [r7, #22]
 8019f72:	f041 0110 	orr.w	r1, r1, #16
 8019f76:	b2c8      	uxtb	r0, r1
 8019f78:	4935      	ldr	r1, [pc, #212]	@ (801a050 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 8019f7a:	0152      	lsls	r2, r2, #5
 8019f7c:	440a      	add	r2, r1
 8019f7e:	4413      	add	r3, r2
 8019f80:	4602      	mov	r2, r0
 8019f82:	701a      	strb	r2, [r3, #0]
								uc_level++;
 8019f84:	89bb      	ldrh	r3, [r7, #12]
 8019f86:	3301      	adds	r3, #1
 8019f88:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x22) == 0x20) && (x != (MAP_X_SIZE - 1))) {
 8019f8a:	7afb      	ldrb	r3, [r7, #11]
 8019f8c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8019f90:	2b20      	cmp	r3, #32
 8019f92:	d13f      	bne.n	801a014 <MAP_makeContourMap_dijkstra_modoki+0x418>
 8019f94:	8afb      	ldrh	r3, [r7, #22]
 8019f96:	2b1f      	cmp	r3, #31
 8019f98:	d03c      	beq.n	801a014 <MAP_makeContourMap_dijkstra_modoki+0x418>
							if((g_MapDirection[y][x]&0x40) == 0x40){
 8019f9a:	8aba      	ldrh	r2, [r7, #20]
 8019f9c:	8afb      	ldrh	r3, [r7, #22]
 8019f9e:	492c      	ldr	r1, [pc, #176]	@ (801a050 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 8019fa0:	0152      	lsls	r2, r2, #5
 8019fa2:	440a      	add	r2, r1
 8019fa4:	4413      	add	r3, r2
 8019fa6:	781b      	ldrb	r3, [r3, #0]
 8019fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d003      	beq.n	8019fb8 <MAP_makeContourMap_dijkstra_modoki+0x3bc>
								uc_new = uc_dase + 1;
 8019fb0:	8a3b      	ldrh	r3, [r7, #16]
 8019fb2:	3301      	adds	r3, #1
 8019fb4:	81fb      	strh	r3, [r7, #14]
 8019fb6:	e002      	b.n	8019fbe <MAP_makeContourMap_dijkstra_modoki+0x3c2>
							}else{
								uc_new = uc_dase + 2;
 8019fb8:	8a3b      	ldrh	r3, [r7, #16]
 8019fba:	3302      	adds	r3, #2
 8019fbc:	81fb      	strh	r3, [r7, #14]
							}
							if (us_Cmap[y][x + 1] > uc_new) {
 8019fbe:	8aba      	ldrh	r2, [r7, #20]
 8019fc0:	8afb      	ldrh	r3, [r7, #22]
 8019fc2:	3301      	adds	r3, #1
 8019fc4:	491f      	ldr	r1, [pc, #124]	@ (801a044 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019fc6:	0152      	lsls	r2, r2, #5
 8019fc8:	4413      	add	r3, r2
 8019fca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019fce:	89fa      	ldrh	r2, [r7, #14]
 8019fd0:	429a      	cmp	r2, r3
 8019fd2:	d21f      	bcs.n	801a014 <MAP_makeContourMap_dijkstra_modoki+0x418>
								us_Cmap[y][x + 1] = uc_new;
 8019fd4:	8aba      	ldrh	r2, [r7, #20]
 8019fd6:	8afb      	ldrh	r3, [r7, #22]
 8019fd8:	3301      	adds	r3, #1
 8019fda:	491a      	ldr	r1, [pc, #104]	@ (801a044 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019fdc:	0152      	lsls	r2, r2, #5
 8019fde:	4413      	add	r3, r2
 8019fe0:	89fa      	ldrh	r2, [r7, #14]
 8019fe2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								g_MapDirection[y][x+1] |= 0x40;
 8019fe6:	8aba      	ldrh	r2, [r7, #20]
 8019fe8:	8afb      	ldrh	r3, [r7, #22]
 8019fea:	3301      	adds	r3, #1
 8019fec:	4918      	ldr	r1, [pc, #96]	@ (801a050 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 8019fee:	0152      	lsls	r2, r2, #5
 8019ff0:	440a      	add	r2, r1
 8019ff2:	4413      	add	r3, r2
 8019ff4:	7819      	ldrb	r1, [r3, #0]
 8019ff6:	8aba      	ldrh	r2, [r7, #20]
 8019ff8:	8afb      	ldrh	r3, [r7, #22]
 8019ffa:	3301      	adds	r3, #1
 8019ffc:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 801a000:	b2c8      	uxtb	r0, r1
 801a002:	4913      	ldr	r1, [pc, #76]	@ (801a050 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 801a004:	0152      	lsls	r2, r2, #5
 801a006:	440a      	add	r2, r1
 801a008:	4413      	add	r3, r2
 801a00a:	4602      	mov	r2, r0
 801a00c:	701a      	strb	r2, [r3, #0]
								uc_level++;
 801a00e:	89bb      	ldrh	r3, [r7, #12]
 801a010:	3301      	adds	r3, #1
 801a012:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x44) == 0x40) && (y != 0)) {
 801a014:	7afb      	ldrb	r3, [r7, #11]
 801a016:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801a01a:	2b40      	cmp	r3, #64	@ 0x40
 801a01c:	d148      	bne.n	801a0b0 <MAP_makeContourMap_dijkstra_modoki+0x4b4>
 801a01e:	8abb      	ldrh	r3, [r7, #20]
 801a020:	2b00      	cmp	r3, #0
 801a022:	d045      	beq.n	801a0b0 <MAP_makeContourMap_dijkstra_modoki+0x4b4>
							if((g_MapDirection[y][x]&0x01) == 0x01){
 801a024:	8aba      	ldrh	r2, [r7, #20]
 801a026:	8afb      	ldrh	r3, [r7, #22]
 801a028:	4909      	ldr	r1, [pc, #36]	@ (801a050 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 801a02a:	0152      	lsls	r2, r2, #5
 801a02c:	440a      	add	r2, r1
 801a02e:	4413      	add	r3, r2
 801a030:	781b      	ldrb	r3, [r3, #0]
 801a032:	f003 0301 	and.w	r3, r3, #1
 801a036:	2b00      	cmp	r3, #0
 801a038:	d00c      	beq.n	801a054 <MAP_makeContourMap_dijkstra_modoki+0x458>
								uc_new = uc_dase + 1;
 801a03a:	8a3b      	ldrh	r3, [r7, #16]
 801a03c:	3301      	adds	r3, #1
 801a03e:	81fb      	strh	r3, [r7, #14]
 801a040:	e00b      	b.n	801a05a <MAP_makeContourMap_dijkstra_modoki+0x45e>
 801a042:	bf00      	nop
 801a044:	2001ada0 	.word	0x2001ada0
 801a048:	2001b5a0 	.word	0x2001b5a0
 801a04c:	2000001a 	.word	0x2000001a
 801a050:	2001b9a0 	.word	0x2001b9a0
							}else{
								uc_new = uc_dase + 2;
 801a054:	8a3b      	ldrh	r3, [r7, #16]
 801a056:	3302      	adds	r3, #2
 801a058:	81fb      	strh	r3, [r7, #14]
							}
							if (us_Cmap[y - 1][x] > uc_new) {
 801a05a:	8abb      	ldrh	r3, [r7, #20]
 801a05c:	1e5a      	subs	r2, r3, #1
 801a05e:	8afb      	ldrh	r3, [r7, #22]
 801a060:	4949      	ldr	r1, [pc, #292]	@ (801a188 <MAP_makeContourMap_dijkstra_modoki+0x58c>)
 801a062:	0152      	lsls	r2, r2, #5
 801a064:	4413      	add	r3, r2
 801a066:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801a06a:	89fa      	ldrh	r2, [r7, #14]
 801a06c:	429a      	cmp	r2, r3
 801a06e:	d21f      	bcs.n	801a0b0 <MAP_makeContourMap_dijkstra_modoki+0x4b4>
								us_Cmap[y - 1][x] = uc_new;
 801a070:	8abb      	ldrh	r3, [r7, #20]
 801a072:	1e5a      	subs	r2, r3, #1
 801a074:	8afb      	ldrh	r3, [r7, #22]
 801a076:	4944      	ldr	r1, [pc, #272]	@ (801a188 <MAP_makeContourMap_dijkstra_modoki+0x58c>)
 801a078:	0152      	lsls	r2, r2, #5
 801a07a:	4413      	add	r3, r2
 801a07c:	89fa      	ldrh	r2, [r7, #14]
 801a07e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								g_MapDirection[y-1][x] |= 0x01;
 801a082:	8abb      	ldrh	r3, [r7, #20]
 801a084:	1e5a      	subs	r2, r3, #1
 801a086:	8afb      	ldrh	r3, [r7, #22]
 801a088:	4940      	ldr	r1, [pc, #256]	@ (801a18c <MAP_makeContourMap_dijkstra_modoki+0x590>)
 801a08a:	0152      	lsls	r2, r2, #5
 801a08c:	440a      	add	r2, r1
 801a08e:	4413      	add	r3, r2
 801a090:	7819      	ldrb	r1, [r3, #0]
 801a092:	8abb      	ldrh	r3, [r7, #20]
 801a094:	1e5a      	subs	r2, r3, #1
 801a096:	8afb      	ldrh	r3, [r7, #22]
 801a098:	f041 0101 	orr.w	r1, r1, #1
 801a09c:	b2c8      	uxtb	r0, r1
 801a09e:	493b      	ldr	r1, [pc, #236]	@ (801a18c <MAP_makeContourMap_dijkstra_modoki+0x590>)
 801a0a0:	0152      	lsls	r2, r2, #5
 801a0a2:	440a      	add	r2, r1
 801a0a4:	4413      	add	r3, r2
 801a0a6:	4602      	mov	r2, r0
 801a0a8:	701a      	strb	r2, [r3, #0]
								uc_level++;
 801a0aa:	89bb      	ldrh	r3, [r7, #12]
 801a0ac:	3301      	adds	r3, #1
 801a0ae:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x88) == 0x80) && (x != 0)) {
 801a0b0:	7afb      	ldrb	r3, [r7, #11]
 801a0b2:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 801a0b6:	2b80      	cmp	r3, #128	@ 0x80
 801a0b8:	d13f      	bne.n	801a13a <MAP_makeContourMap_dijkstra_modoki+0x53e>
 801a0ba:	8afb      	ldrh	r3, [r7, #22]
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d03c      	beq.n	801a13a <MAP_makeContourMap_dijkstra_modoki+0x53e>
							if((g_MapDirection[y][x]&0x04) == 0x04){
 801a0c0:	8aba      	ldrh	r2, [r7, #20]
 801a0c2:	8afb      	ldrh	r3, [r7, #22]
 801a0c4:	4931      	ldr	r1, [pc, #196]	@ (801a18c <MAP_makeContourMap_dijkstra_modoki+0x590>)
 801a0c6:	0152      	lsls	r2, r2, #5
 801a0c8:	440a      	add	r2, r1
 801a0ca:	4413      	add	r3, r2
 801a0cc:	781b      	ldrb	r3, [r3, #0]
 801a0ce:	f003 0304 	and.w	r3, r3, #4
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d003      	beq.n	801a0de <MAP_makeContourMap_dijkstra_modoki+0x4e2>
								uc_new = uc_dase + 1;
 801a0d6:	8a3b      	ldrh	r3, [r7, #16]
 801a0d8:	3301      	adds	r3, #1
 801a0da:	81fb      	strh	r3, [r7, #14]
 801a0dc:	e002      	b.n	801a0e4 <MAP_makeContourMap_dijkstra_modoki+0x4e8>
							}else{
								uc_new = uc_dase + 2;
 801a0de:	8a3b      	ldrh	r3, [r7, #16]
 801a0e0:	3302      	adds	r3, #2
 801a0e2:	81fb      	strh	r3, [r7, #14]
							}
							if (us_Cmap[y][x - 1] > uc_new) {
 801a0e4:	8aba      	ldrh	r2, [r7, #20]
 801a0e6:	8afb      	ldrh	r3, [r7, #22]
 801a0e8:	3b01      	subs	r3, #1
 801a0ea:	4927      	ldr	r1, [pc, #156]	@ (801a188 <MAP_makeContourMap_dijkstra_modoki+0x58c>)
 801a0ec:	0152      	lsls	r2, r2, #5
 801a0ee:	4413      	add	r3, r2
 801a0f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801a0f4:	89fa      	ldrh	r2, [r7, #14]
 801a0f6:	429a      	cmp	r2, r3
 801a0f8:	d21f      	bcs.n	801a13a <MAP_makeContourMap_dijkstra_modoki+0x53e>
								us_Cmap[y][x - 1] = uc_new;
 801a0fa:	8aba      	ldrh	r2, [r7, #20]
 801a0fc:	8afb      	ldrh	r3, [r7, #22]
 801a0fe:	3b01      	subs	r3, #1
 801a100:	4921      	ldr	r1, [pc, #132]	@ (801a188 <MAP_makeContourMap_dijkstra_modoki+0x58c>)
 801a102:	0152      	lsls	r2, r2, #5
 801a104:	4413      	add	r3, r2
 801a106:	89fa      	ldrh	r2, [r7, #14]
 801a108:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								g_MapDirection[y][x-1] |= 0x04;
 801a10c:	8aba      	ldrh	r2, [r7, #20]
 801a10e:	8afb      	ldrh	r3, [r7, #22]
 801a110:	3b01      	subs	r3, #1
 801a112:	491e      	ldr	r1, [pc, #120]	@ (801a18c <MAP_makeContourMap_dijkstra_modoki+0x590>)
 801a114:	0152      	lsls	r2, r2, #5
 801a116:	440a      	add	r2, r1
 801a118:	4413      	add	r3, r2
 801a11a:	7819      	ldrb	r1, [r3, #0]
 801a11c:	8aba      	ldrh	r2, [r7, #20]
 801a11e:	8afb      	ldrh	r3, [r7, #22]
 801a120:	3b01      	subs	r3, #1
 801a122:	f041 0104 	orr.w	r1, r1, #4
 801a126:	b2c8      	uxtb	r0, r1
 801a128:	4918      	ldr	r1, [pc, #96]	@ (801a18c <MAP_makeContourMap_dijkstra_modoki+0x590>)
 801a12a:	0152      	lsls	r2, r2, #5
 801a12c:	440a      	add	r2, r1
 801a12e:	4413      	add	r3, r2
 801a130:	4602      	mov	r2, r0
 801a132:	701a      	strb	r2, [r3, #0]
								uc_level++;
 801a134:	89bb      	ldrh	r3, [r7, #12]
 801a136:	3301      	adds	r3, #1
 801a138:	81bb      	strh	r3, [r7, #12]
							}
						}
					}
				}
				if(uc_dase != 4095)uc_level++;
 801a13a:	8a3b      	ldrh	r3, [r7, #16]
 801a13c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 801a140:	4293      	cmp	r3, r2
 801a142:	d002      	beq.n	801a14a <MAP_makeContourMap_dijkstra_modoki+0x54e>
 801a144:	89bb      	ldrh	r3, [r7, #12]
 801a146:	3301      	adds	r3, #1
 801a148:	81bb      	strh	r3, [r7, #12]
			for (x = 0; x < MAP_X_SIZE; x++) {
 801a14a:	8afb      	ldrh	r3, [r7, #22]
 801a14c:	3301      	adds	r3, #1
 801a14e:	82fb      	strh	r3, [r7, #22]
 801a150:	8afb      	ldrh	r3, [r7, #22]
 801a152:	2b1f      	cmp	r3, #31
 801a154:	f67f ae32 	bls.w	8019dbc <MAP_makeContourMap_dijkstra_modoki+0x1c0>
 801a158:	e000      	b.n	801a15c <MAP_makeContourMap_dijkstra_modoki+0x560>
					if (uc_max_x+1 < x) break;
 801a15a:	bf00      	nop
		for (y = 0; y < MAP_Y_SIZE; y++) {
 801a15c:	8abb      	ldrh	r3, [r7, #20]
 801a15e:	3301      	adds	r3, #1
 801a160:	82bb      	strh	r3, [r7, #20]
 801a162:	8abb      	ldrh	r3, [r7, #20]
 801a164:	2b1f      	cmp	r3, #31
 801a166:	f67f ae11 	bls.w	8019d8c <MAP_makeContourMap_dijkstra_modoki+0x190>
 801a16a:	e000      	b.n	801a16e <MAP_makeContourMap_dijkstra_modoki+0x572>
			if (uc_max_y+1 < y) break;
 801a16c:	bf00      	nop
			}
		}
		uc_dase = uc_dase + 1;
 801a16e:	8a3b      	ldrh	r3, [r7, #16]
 801a170:	3301      	adds	r3, #1
 801a172:	823b      	strh	r3, [r7, #16]
	} while (uc_level != 0);
 801a174:	89bb      	ldrh	r3, [r7, #12]
 801a176:	2b00      	cmp	r3, #0
 801a178:	f47f ae00 	bne.w	8019d7c <MAP_makeContourMap_dijkstra_modoki+0x180>

}
 801a17c:	bf00      	nop
 801a17e:	bf00      	nop
 801a180:	3718      	adds	r7, #24
 801a182:	46bd      	mov	sp, r7
 801a184:	bd80      	pop	{r7, pc}
 801a186:	bf00      	nop
 801a188:	2001ada0 	.word	0x2001ada0
 801a18c:	2001b9a0 	.word	0x2001b9a0

0801a190 <Reset_Handler>:
 801a190:	480d      	ldr	r0, [pc, #52]	@ (801a1c8 <LoopForever+0x2>)
 801a192:	4685      	mov	sp, r0
 801a194:	f7ea fdda 	bl	8004d4c <SystemInit>
 801a198:	480c      	ldr	r0, [pc, #48]	@ (801a1cc <LoopForever+0x6>)
 801a19a:	490d      	ldr	r1, [pc, #52]	@ (801a1d0 <LoopForever+0xa>)
 801a19c:	4a0d      	ldr	r2, [pc, #52]	@ (801a1d4 <LoopForever+0xe>)
 801a19e:	2300      	movs	r3, #0
 801a1a0:	e002      	b.n	801a1a8 <LoopCopyDataInit>

0801a1a2 <CopyDataInit>:
 801a1a2:	58d4      	ldr	r4, [r2, r3]
 801a1a4:	50c4      	str	r4, [r0, r3]
 801a1a6:	3304      	adds	r3, #4

0801a1a8 <LoopCopyDataInit>:
 801a1a8:	18c4      	adds	r4, r0, r3
 801a1aa:	428c      	cmp	r4, r1
 801a1ac:	d3f9      	bcc.n	801a1a2 <CopyDataInit>
 801a1ae:	4a0a      	ldr	r2, [pc, #40]	@ (801a1d8 <LoopForever+0x12>)
 801a1b0:	4c0a      	ldr	r4, [pc, #40]	@ (801a1dc <LoopForever+0x16>)
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	e001      	b.n	801a1ba <LoopFillZerobss>

0801a1b6 <FillZerobss>:
 801a1b6:	6013      	str	r3, [r2, #0]
 801a1b8:	3204      	adds	r2, #4

0801a1ba <LoopFillZerobss>:
 801a1ba:	42a2      	cmp	r2, r4
 801a1bc:	d3fb      	bcc.n	801a1b6 <FillZerobss>
 801a1be:	f003 ffcd 	bl	801e15c <__libc_init_array>
 801a1c2:	f7e8 f96d 	bl	80024a0 <main>

0801a1c6 <LoopForever>:
 801a1c6:	e7fe      	b.n	801a1c6 <LoopForever>
 801a1c8:	20020000 	.word	0x20020000
 801a1cc:	20000000 	.word	0x20000000
 801a1d0:	200001f8 	.word	0x200001f8
 801a1d4:	08022ae0 	.word	0x08022ae0
 801a1d8:	200001f8 	.word	0x200001f8
 801a1dc:	2001bef0 	.word	0x2001bef0

0801a1e0 <ADC1_2_IRQHandler>:
 801a1e0:	e7fe      	b.n	801a1e0 <ADC1_2_IRQHandler>

0801a1e2 <LL_ADC_REG_SetSequencerLength>:
 801a1e2:	b480      	push	{r7}
 801a1e4:	b083      	sub	sp, #12
 801a1e6:	af00      	add	r7, sp, #0
 801a1e8:	6078      	str	r0, [r7, #4]
 801a1ea:	6039      	str	r1, [r7, #0]
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a1f0:	f023 020f 	bic.w	r2, r3, #15
 801a1f4:	683b      	ldr	r3, [r7, #0]
 801a1f6:	431a      	orrs	r2, r3
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	631a      	str	r2, [r3, #48]	@ 0x30
 801a1fc:	bf00      	nop
 801a1fe:	370c      	adds	r7, #12
 801a200:	46bd      	mov	sp, r7
 801a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a206:	4770      	bx	lr

0801a208 <LL_ADC_IsEnabled>:
 801a208:	b480      	push	{r7}
 801a20a:	b083      	sub	sp, #12
 801a20c:	af00      	add	r7, sp, #0
 801a20e:	6078      	str	r0, [r7, #4]
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	689b      	ldr	r3, [r3, #8]
 801a214:	f003 0301 	and.w	r3, r3, #1
 801a218:	2b01      	cmp	r3, #1
 801a21a:	d101      	bne.n	801a220 <LL_ADC_IsEnabled+0x18>
 801a21c:	2301      	movs	r3, #1
 801a21e:	e000      	b.n	801a222 <LL_ADC_IsEnabled+0x1a>
 801a220:	2300      	movs	r3, #0
 801a222:	4618      	mov	r0, r3
 801a224:	370c      	adds	r7, #12
 801a226:	46bd      	mov	sp, r7
 801a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a22c:	4770      	bx	lr
	...

0801a230 <LL_ADC_CommonInit>:
 801a230:	b590      	push	{r4, r7, lr}
 801a232:	b085      	sub	sp, #20
 801a234:	af00      	add	r7, sp, #0
 801a236:	6078      	str	r0, [r7, #4]
 801a238:	6039      	str	r1, [r7, #0]
 801a23a:	2300      	movs	r3, #0
 801a23c:	73fb      	strb	r3, [r7, #15]
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	4a27      	ldr	r2, [pc, #156]	@ (801a2e0 <LL_ADC_CommonInit+0xb0>)
 801a242:	4293      	cmp	r3, r2
 801a244:	d10f      	bne.n	801a266 <LL_ADC_CommonInit+0x36>
 801a246:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 801a24a:	f7ff ffdd 	bl	801a208 <LL_ADC_IsEnabled>
 801a24e:	4604      	mov	r4, r0
 801a250:	4824      	ldr	r0, [pc, #144]	@ (801a2e4 <LL_ADC_CommonInit+0xb4>)
 801a252:	f7ff ffd9 	bl	801a208 <LL_ADC_IsEnabled>
 801a256:	4603      	mov	r3, r0
 801a258:	4323      	orrs	r3, r4
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	bf0c      	ite	eq
 801a25e:	2301      	moveq	r3, #1
 801a260:	2300      	movne	r3, #0
 801a262:	b2db      	uxtb	r3, r3
 801a264:	e012      	b.n	801a28c <LL_ADC_CommonInit+0x5c>
 801a266:	4820      	ldr	r0, [pc, #128]	@ (801a2e8 <LL_ADC_CommonInit+0xb8>)
 801a268:	f7ff ffce 	bl	801a208 <LL_ADC_IsEnabled>
 801a26c:	4604      	mov	r4, r0
 801a26e:	481f      	ldr	r0, [pc, #124]	@ (801a2ec <LL_ADC_CommonInit+0xbc>)
 801a270:	f7ff ffca 	bl	801a208 <LL_ADC_IsEnabled>
 801a274:	4603      	mov	r3, r0
 801a276:	431c      	orrs	r4, r3
 801a278:	481d      	ldr	r0, [pc, #116]	@ (801a2f0 <LL_ADC_CommonInit+0xc0>)
 801a27a:	f7ff ffc5 	bl	801a208 <LL_ADC_IsEnabled>
 801a27e:	4603      	mov	r3, r0
 801a280:	4323      	orrs	r3, r4
 801a282:	2b00      	cmp	r3, #0
 801a284:	bf0c      	ite	eq
 801a286:	2301      	moveq	r3, #1
 801a288:	2300      	movne	r3, #0
 801a28a:	b2db      	uxtb	r3, r3
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d020      	beq.n	801a2d2 <LL_ADC_CommonInit+0xa2>
 801a290:	683b      	ldr	r3, [r7, #0]
 801a292:	685b      	ldr	r3, [r3, #4]
 801a294:	2b00      	cmp	r3, #0
 801a296:	d012      	beq.n	801a2be <LL_ADC_CommonInit+0x8e>
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	689a      	ldr	r2, [r3, #8]
 801a29c:	4b15      	ldr	r3, [pc, #84]	@ (801a2f4 <LL_ADC_CommonInit+0xc4>)
 801a29e:	4013      	ands	r3, r2
 801a2a0:	683a      	ldr	r2, [r7, #0]
 801a2a2:	6811      	ldr	r1, [r2, #0]
 801a2a4:	683a      	ldr	r2, [r7, #0]
 801a2a6:	6852      	ldr	r2, [r2, #4]
 801a2a8:	4311      	orrs	r1, r2
 801a2aa:	683a      	ldr	r2, [r7, #0]
 801a2ac:	6892      	ldr	r2, [r2, #8]
 801a2ae:	4311      	orrs	r1, r2
 801a2b0:	683a      	ldr	r2, [r7, #0]
 801a2b2:	68d2      	ldr	r2, [r2, #12]
 801a2b4:	430a      	orrs	r2, r1
 801a2b6:	431a      	orrs	r2, r3
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	609a      	str	r2, [r3, #8]
 801a2bc:	e00b      	b.n	801a2d6 <LL_ADC_CommonInit+0xa6>
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	689a      	ldr	r2, [r3, #8]
 801a2c2:	4b0c      	ldr	r3, [pc, #48]	@ (801a2f4 <LL_ADC_CommonInit+0xc4>)
 801a2c4:	4013      	ands	r3, r2
 801a2c6:	683a      	ldr	r2, [r7, #0]
 801a2c8:	6812      	ldr	r2, [r2, #0]
 801a2ca:	431a      	orrs	r2, r3
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	609a      	str	r2, [r3, #8]
 801a2d0:	e001      	b.n	801a2d6 <LL_ADC_CommonInit+0xa6>
 801a2d2:	2301      	movs	r3, #1
 801a2d4:	73fb      	strb	r3, [r7, #15]
 801a2d6:	7bfb      	ldrb	r3, [r7, #15]
 801a2d8:	4618      	mov	r0, r3
 801a2da:	3714      	adds	r7, #20
 801a2dc:	46bd      	mov	sp, r7
 801a2de:	bd90      	pop	{r4, r7, pc}
 801a2e0:	50000300 	.word	0x50000300
 801a2e4:	50000100 	.word	0x50000100
 801a2e8:	50000400 	.word	0x50000400
 801a2ec:	50000500 	.word	0x50000500
 801a2f0:	50000600 	.word	0x50000600
 801a2f4:	ffc030e0 	.word	0xffc030e0

0801a2f8 <LL_ADC_Init>:
 801a2f8:	b580      	push	{r7, lr}
 801a2fa:	b084      	sub	sp, #16
 801a2fc:	af00      	add	r7, sp, #0
 801a2fe:	6078      	str	r0, [r7, #4]
 801a300:	6039      	str	r1, [r7, #0]
 801a302:	2300      	movs	r3, #0
 801a304:	73fb      	strb	r3, [r7, #15]
 801a306:	6878      	ldr	r0, [r7, #4]
 801a308:	f7ff ff7e 	bl	801a208 <LL_ADC_IsEnabled>
 801a30c:	4603      	mov	r3, r0
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d111      	bne.n	801a336 <LL_ADC_Init+0x3e>
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	68db      	ldr	r3, [r3, #12]
 801a316:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 801a31a:	f023 0318 	bic.w	r3, r3, #24
 801a31e:	683a      	ldr	r2, [r7, #0]
 801a320:	6811      	ldr	r1, [r2, #0]
 801a322:	683a      	ldr	r2, [r7, #0]
 801a324:	6852      	ldr	r2, [r2, #4]
 801a326:	4311      	orrs	r1, r2
 801a328:	683a      	ldr	r2, [r7, #0]
 801a32a:	6892      	ldr	r2, [r2, #8]
 801a32c:	430a      	orrs	r2, r1
 801a32e:	431a      	orrs	r2, r3
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	60da      	str	r2, [r3, #12]
 801a334:	e001      	b.n	801a33a <LL_ADC_Init+0x42>
 801a336:	2301      	movs	r3, #1
 801a338:	73fb      	strb	r3, [r7, #15]
 801a33a:	7bfb      	ldrb	r3, [r7, #15]
 801a33c:	4618      	mov	r0, r3
 801a33e:	3710      	adds	r7, #16
 801a340:	46bd      	mov	sp, r7
 801a342:	bd80      	pop	{r7, pc}

0801a344 <LL_ADC_REG_Init>:
 801a344:	b580      	push	{r7, lr}
 801a346:	b084      	sub	sp, #16
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]
 801a34c:	6039      	str	r1, [r7, #0]
 801a34e:	2300      	movs	r3, #0
 801a350:	73fb      	strb	r3, [r7, #15]
 801a352:	6878      	ldr	r0, [r7, #4]
 801a354:	f7ff ff58 	bl	801a208 <LL_ADC_IsEnabled>
 801a358:	4603      	mov	r3, r0
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d132      	bne.n	801a3c4 <LL_ADC_REG_Init+0x80>
 801a35e:	683b      	ldr	r3, [r7, #0]
 801a360:	685b      	ldr	r3, [r3, #4]
 801a362:	2b00      	cmp	r3, #0
 801a364:	d015      	beq.n	801a392 <LL_ADC_REG_Init+0x4e>
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	68da      	ldr	r2, [r3, #12]
 801a36a:	4b1a      	ldr	r3, [pc, #104]	@ (801a3d4 <LL_ADC_REG_Init+0x90>)
 801a36c:	4013      	ands	r3, r2
 801a36e:	683a      	ldr	r2, [r7, #0]
 801a370:	6811      	ldr	r1, [r2, #0]
 801a372:	683a      	ldr	r2, [r7, #0]
 801a374:	6892      	ldr	r2, [r2, #8]
 801a376:	4311      	orrs	r1, r2
 801a378:	683a      	ldr	r2, [r7, #0]
 801a37a:	68d2      	ldr	r2, [r2, #12]
 801a37c:	4311      	orrs	r1, r2
 801a37e:	683a      	ldr	r2, [r7, #0]
 801a380:	6912      	ldr	r2, [r2, #16]
 801a382:	4311      	orrs	r1, r2
 801a384:	683a      	ldr	r2, [r7, #0]
 801a386:	6952      	ldr	r2, [r2, #20]
 801a388:	430a      	orrs	r2, r1
 801a38a:	431a      	orrs	r2, r3
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	60da      	str	r2, [r3, #12]
 801a390:	e011      	b.n	801a3b6 <LL_ADC_REG_Init+0x72>
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	68da      	ldr	r2, [r3, #12]
 801a396:	4b0f      	ldr	r3, [pc, #60]	@ (801a3d4 <LL_ADC_REG_Init+0x90>)
 801a398:	4013      	ands	r3, r2
 801a39a:	683a      	ldr	r2, [r7, #0]
 801a39c:	6811      	ldr	r1, [r2, #0]
 801a39e:	683a      	ldr	r2, [r7, #0]
 801a3a0:	68d2      	ldr	r2, [r2, #12]
 801a3a2:	4311      	orrs	r1, r2
 801a3a4:	683a      	ldr	r2, [r7, #0]
 801a3a6:	6912      	ldr	r2, [r2, #16]
 801a3a8:	4311      	orrs	r1, r2
 801a3aa:	683a      	ldr	r2, [r7, #0]
 801a3ac:	6952      	ldr	r2, [r2, #20]
 801a3ae:	430a      	orrs	r2, r1
 801a3b0:	431a      	orrs	r2, r3
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	60da      	str	r2, [r3, #12]
 801a3b6:	683b      	ldr	r3, [r7, #0]
 801a3b8:	685b      	ldr	r3, [r3, #4]
 801a3ba:	4619      	mov	r1, r3
 801a3bc:	6878      	ldr	r0, [r7, #4]
 801a3be:	f7ff ff10 	bl	801a1e2 <LL_ADC_REG_SetSequencerLength>
 801a3c2:	e001      	b.n	801a3c8 <LL_ADC_REG_Init+0x84>
 801a3c4:	2301      	movs	r3, #1
 801a3c6:	73fb      	strb	r3, [r7, #15]
 801a3c8:	7bfb      	ldrb	r3, [r7, #15]
 801a3ca:	4618      	mov	r0, r3
 801a3cc:	3710      	adds	r7, #16
 801a3ce:	46bd      	mov	sp, r7
 801a3d0:	bd80      	pop	{r7, pc}
 801a3d2:	bf00      	nop
 801a3d4:	fff0c01c 	.word	0xfff0c01c

0801a3d8 <LL_GPIO_SetPinMode>:
 801a3d8:	b480      	push	{r7}
 801a3da:	b08b      	sub	sp, #44	@ 0x2c
 801a3dc:	af00      	add	r7, sp, #0
 801a3de:	60f8      	str	r0, [r7, #12]
 801a3e0:	60b9      	str	r1, [r7, #8]
 801a3e2:	607a      	str	r2, [r7, #4]
 801a3e4:	68fb      	ldr	r3, [r7, #12]
 801a3e6:	681a      	ldr	r2, [r3, #0]
 801a3e8:	68bb      	ldr	r3, [r7, #8]
 801a3ea:	617b      	str	r3, [r7, #20]
 801a3ec:	697b      	ldr	r3, [r7, #20]
 801a3ee:	fa93 f3a3 	rbit	r3, r3
 801a3f2:	613b      	str	r3, [r7, #16]
 801a3f4:	693b      	ldr	r3, [r7, #16]
 801a3f6:	61bb      	str	r3, [r7, #24]
 801a3f8:	69bb      	ldr	r3, [r7, #24]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d101      	bne.n	801a402 <LL_GPIO_SetPinMode+0x2a>
 801a3fe:	2320      	movs	r3, #32
 801a400:	e003      	b.n	801a40a <LL_GPIO_SetPinMode+0x32>
 801a402:	69bb      	ldr	r3, [r7, #24]
 801a404:	fab3 f383 	clz	r3, r3
 801a408:	b2db      	uxtb	r3, r3
 801a40a:	005b      	lsls	r3, r3, #1
 801a40c:	2103      	movs	r1, #3
 801a40e:	fa01 f303 	lsl.w	r3, r1, r3
 801a412:	43db      	mvns	r3, r3
 801a414:	401a      	ands	r2, r3
 801a416:	68bb      	ldr	r3, [r7, #8]
 801a418:	623b      	str	r3, [r7, #32]
 801a41a:	6a3b      	ldr	r3, [r7, #32]
 801a41c:	fa93 f3a3 	rbit	r3, r3
 801a420:	61fb      	str	r3, [r7, #28]
 801a422:	69fb      	ldr	r3, [r7, #28]
 801a424:	627b      	str	r3, [r7, #36]	@ 0x24
 801a426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d101      	bne.n	801a430 <LL_GPIO_SetPinMode+0x58>
 801a42c:	2320      	movs	r3, #32
 801a42e:	e003      	b.n	801a438 <LL_GPIO_SetPinMode+0x60>
 801a430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a432:	fab3 f383 	clz	r3, r3
 801a436:	b2db      	uxtb	r3, r3
 801a438:	005b      	lsls	r3, r3, #1
 801a43a:	6879      	ldr	r1, [r7, #4]
 801a43c:	fa01 f303 	lsl.w	r3, r1, r3
 801a440:	431a      	orrs	r2, r3
 801a442:	68fb      	ldr	r3, [r7, #12]
 801a444:	601a      	str	r2, [r3, #0]
 801a446:	bf00      	nop
 801a448:	372c      	adds	r7, #44	@ 0x2c
 801a44a:	46bd      	mov	sp, r7
 801a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a450:	4770      	bx	lr

0801a452 <LL_GPIO_SetPinOutputType>:
 801a452:	b480      	push	{r7}
 801a454:	b085      	sub	sp, #20
 801a456:	af00      	add	r7, sp, #0
 801a458:	60f8      	str	r0, [r7, #12]
 801a45a:	60b9      	str	r1, [r7, #8]
 801a45c:	607a      	str	r2, [r7, #4]
 801a45e:	68fb      	ldr	r3, [r7, #12]
 801a460:	685a      	ldr	r2, [r3, #4]
 801a462:	68bb      	ldr	r3, [r7, #8]
 801a464:	43db      	mvns	r3, r3
 801a466:	401a      	ands	r2, r3
 801a468:	68bb      	ldr	r3, [r7, #8]
 801a46a:	6879      	ldr	r1, [r7, #4]
 801a46c:	fb01 f303 	mul.w	r3, r1, r3
 801a470:	431a      	orrs	r2, r3
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	605a      	str	r2, [r3, #4]
 801a476:	bf00      	nop
 801a478:	3714      	adds	r7, #20
 801a47a:	46bd      	mov	sp, r7
 801a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a480:	4770      	bx	lr

0801a482 <LL_GPIO_SetPinSpeed>:
 801a482:	b480      	push	{r7}
 801a484:	b08b      	sub	sp, #44	@ 0x2c
 801a486:	af00      	add	r7, sp, #0
 801a488:	60f8      	str	r0, [r7, #12]
 801a48a:	60b9      	str	r1, [r7, #8]
 801a48c:	607a      	str	r2, [r7, #4]
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	689a      	ldr	r2, [r3, #8]
 801a492:	68bb      	ldr	r3, [r7, #8]
 801a494:	617b      	str	r3, [r7, #20]
 801a496:	697b      	ldr	r3, [r7, #20]
 801a498:	fa93 f3a3 	rbit	r3, r3
 801a49c:	613b      	str	r3, [r7, #16]
 801a49e:	693b      	ldr	r3, [r7, #16]
 801a4a0:	61bb      	str	r3, [r7, #24]
 801a4a2:	69bb      	ldr	r3, [r7, #24]
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	d101      	bne.n	801a4ac <LL_GPIO_SetPinSpeed+0x2a>
 801a4a8:	2320      	movs	r3, #32
 801a4aa:	e003      	b.n	801a4b4 <LL_GPIO_SetPinSpeed+0x32>
 801a4ac:	69bb      	ldr	r3, [r7, #24]
 801a4ae:	fab3 f383 	clz	r3, r3
 801a4b2:	b2db      	uxtb	r3, r3
 801a4b4:	005b      	lsls	r3, r3, #1
 801a4b6:	2103      	movs	r1, #3
 801a4b8:	fa01 f303 	lsl.w	r3, r1, r3
 801a4bc:	43db      	mvns	r3, r3
 801a4be:	401a      	ands	r2, r3
 801a4c0:	68bb      	ldr	r3, [r7, #8]
 801a4c2:	623b      	str	r3, [r7, #32]
 801a4c4:	6a3b      	ldr	r3, [r7, #32]
 801a4c6:	fa93 f3a3 	rbit	r3, r3
 801a4ca:	61fb      	str	r3, [r7, #28]
 801a4cc:	69fb      	ldr	r3, [r7, #28]
 801a4ce:	627b      	str	r3, [r7, #36]	@ 0x24
 801a4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d101      	bne.n	801a4da <LL_GPIO_SetPinSpeed+0x58>
 801a4d6:	2320      	movs	r3, #32
 801a4d8:	e003      	b.n	801a4e2 <LL_GPIO_SetPinSpeed+0x60>
 801a4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4dc:	fab3 f383 	clz	r3, r3
 801a4e0:	b2db      	uxtb	r3, r3
 801a4e2:	005b      	lsls	r3, r3, #1
 801a4e4:	6879      	ldr	r1, [r7, #4]
 801a4e6:	fa01 f303 	lsl.w	r3, r1, r3
 801a4ea:	431a      	orrs	r2, r3
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	609a      	str	r2, [r3, #8]
 801a4f0:	bf00      	nop
 801a4f2:	372c      	adds	r7, #44	@ 0x2c
 801a4f4:	46bd      	mov	sp, r7
 801a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4fa:	4770      	bx	lr

0801a4fc <LL_GPIO_SetPinPull>:
 801a4fc:	b480      	push	{r7}
 801a4fe:	b08b      	sub	sp, #44	@ 0x2c
 801a500:	af00      	add	r7, sp, #0
 801a502:	60f8      	str	r0, [r7, #12]
 801a504:	60b9      	str	r1, [r7, #8]
 801a506:	607a      	str	r2, [r7, #4]
 801a508:	68fb      	ldr	r3, [r7, #12]
 801a50a:	68da      	ldr	r2, [r3, #12]
 801a50c:	68bb      	ldr	r3, [r7, #8]
 801a50e:	617b      	str	r3, [r7, #20]
 801a510:	697b      	ldr	r3, [r7, #20]
 801a512:	fa93 f3a3 	rbit	r3, r3
 801a516:	613b      	str	r3, [r7, #16]
 801a518:	693b      	ldr	r3, [r7, #16]
 801a51a:	61bb      	str	r3, [r7, #24]
 801a51c:	69bb      	ldr	r3, [r7, #24]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d101      	bne.n	801a526 <LL_GPIO_SetPinPull+0x2a>
 801a522:	2320      	movs	r3, #32
 801a524:	e003      	b.n	801a52e <LL_GPIO_SetPinPull+0x32>
 801a526:	69bb      	ldr	r3, [r7, #24]
 801a528:	fab3 f383 	clz	r3, r3
 801a52c:	b2db      	uxtb	r3, r3
 801a52e:	005b      	lsls	r3, r3, #1
 801a530:	2103      	movs	r1, #3
 801a532:	fa01 f303 	lsl.w	r3, r1, r3
 801a536:	43db      	mvns	r3, r3
 801a538:	401a      	ands	r2, r3
 801a53a:	68bb      	ldr	r3, [r7, #8]
 801a53c:	623b      	str	r3, [r7, #32]
 801a53e:	6a3b      	ldr	r3, [r7, #32]
 801a540:	fa93 f3a3 	rbit	r3, r3
 801a544:	61fb      	str	r3, [r7, #28]
 801a546:	69fb      	ldr	r3, [r7, #28]
 801a548:	627b      	str	r3, [r7, #36]	@ 0x24
 801a54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d101      	bne.n	801a554 <LL_GPIO_SetPinPull+0x58>
 801a550:	2320      	movs	r3, #32
 801a552:	e003      	b.n	801a55c <LL_GPIO_SetPinPull+0x60>
 801a554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a556:	fab3 f383 	clz	r3, r3
 801a55a:	b2db      	uxtb	r3, r3
 801a55c:	005b      	lsls	r3, r3, #1
 801a55e:	6879      	ldr	r1, [r7, #4]
 801a560:	fa01 f303 	lsl.w	r3, r1, r3
 801a564:	431a      	orrs	r2, r3
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	60da      	str	r2, [r3, #12]
 801a56a:	bf00      	nop
 801a56c:	372c      	adds	r7, #44	@ 0x2c
 801a56e:	46bd      	mov	sp, r7
 801a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a574:	4770      	bx	lr

0801a576 <LL_GPIO_SetAFPin_0_7>:
 801a576:	b480      	push	{r7}
 801a578:	b08b      	sub	sp, #44	@ 0x2c
 801a57a:	af00      	add	r7, sp, #0
 801a57c:	60f8      	str	r0, [r7, #12]
 801a57e:	60b9      	str	r1, [r7, #8]
 801a580:	607a      	str	r2, [r7, #4]
 801a582:	68fb      	ldr	r3, [r7, #12]
 801a584:	6a1a      	ldr	r2, [r3, #32]
 801a586:	68bb      	ldr	r3, [r7, #8]
 801a588:	617b      	str	r3, [r7, #20]
 801a58a:	697b      	ldr	r3, [r7, #20]
 801a58c:	fa93 f3a3 	rbit	r3, r3
 801a590:	613b      	str	r3, [r7, #16]
 801a592:	693b      	ldr	r3, [r7, #16]
 801a594:	61bb      	str	r3, [r7, #24]
 801a596:	69bb      	ldr	r3, [r7, #24]
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d101      	bne.n	801a5a0 <LL_GPIO_SetAFPin_0_7+0x2a>
 801a59c:	2320      	movs	r3, #32
 801a59e:	e003      	b.n	801a5a8 <LL_GPIO_SetAFPin_0_7+0x32>
 801a5a0:	69bb      	ldr	r3, [r7, #24]
 801a5a2:	fab3 f383 	clz	r3, r3
 801a5a6:	b2db      	uxtb	r3, r3
 801a5a8:	009b      	lsls	r3, r3, #2
 801a5aa:	210f      	movs	r1, #15
 801a5ac:	fa01 f303 	lsl.w	r3, r1, r3
 801a5b0:	43db      	mvns	r3, r3
 801a5b2:	401a      	ands	r2, r3
 801a5b4:	68bb      	ldr	r3, [r7, #8]
 801a5b6:	623b      	str	r3, [r7, #32]
 801a5b8:	6a3b      	ldr	r3, [r7, #32]
 801a5ba:	fa93 f3a3 	rbit	r3, r3
 801a5be:	61fb      	str	r3, [r7, #28]
 801a5c0:	69fb      	ldr	r3, [r7, #28]
 801a5c2:	627b      	str	r3, [r7, #36]	@ 0x24
 801a5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d101      	bne.n	801a5ce <LL_GPIO_SetAFPin_0_7+0x58>
 801a5ca:	2320      	movs	r3, #32
 801a5cc:	e003      	b.n	801a5d6 <LL_GPIO_SetAFPin_0_7+0x60>
 801a5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5d0:	fab3 f383 	clz	r3, r3
 801a5d4:	b2db      	uxtb	r3, r3
 801a5d6:	009b      	lsls	r3, r3, #2
 801a5d8:	6879      	ldr	r1, [r7, #4]
 801a5da:	fa01 f303 	lsl.w	r3, r1, r3
 801a5de:	431a      	orrs	r2, r3
 801a5e0:	68fb      	ldr	r3, [r7, #12]
 801a5e2:	621a      	str	r2, [r3, #32]
 801a5e4:	bf00      	nop
 801a5e6:	372c      	adds	r7, #44	@ 0x2c
 801a5e8:	46bd      	mov	sp, r7
 801a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ee:	4770      	bx	lr

0801a5f0 <LL_GPIO_SetAFPin_8_15>:
 801a5f0:	b480      	push	{r7}
 801a5f2:	b08b      	sub	sp, #44	@ 0x2c
 801a5f4:	af00      	add	r7, sp, #0
 801a5f6:	60f8      	str	r0, [r7, #12]
 801a5f8:	60b9      	str	r1, [r7, #8]
 801a5fa:	607a      	str	r2, [r7, #4]
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a600:	68bb      	ldr	r3, [r7, #8]
 801a602:	0a1b      	lsrs	r3, r3, #8
 801a604:	617b      	str	r3, [r7, #20]
 801a606:	697b      	ldr	r3, [r7, #20]
 801a608:	fa93 f3a3 	rbit	r3, r3
 801a60c:	613b      	str	r3, [r7, #16]
 801a60e:	693b      	ldr	r3, [r7, #16]
 801a610:	61bb      	str	r3, [r7, #24]
 801a612:	69bb      	ldr	r3, [r7, #24]
 801a614:	2b00      	cmp	r3, #0
 801a616:	d101      	bne.n	801a61c <LL_GPIO_SetAFPin_8_15+0x2c>
 801a618:	2320      	movs	r3, #32
 801a61a:	e003      	b.n	801a624 <LL_GPIO_SetAFPin_8_15+0x34>
 801a61c:	69bb      	ldr	r3, [r7, #24]
 801a61e:	fab3 f383 	clz	r3, r3
 801a622:	b2db      	uxtb	r3, r3
 801a624:	009b      	lsls	r3, r3, #2
 801a626:	210f      	movs	r1, #15
 801a628:	fa01 f303 	lsl.w	r3, r1, r3
 801a62c:	43db      	mvns	r3, r3
 801a62e:	401a      	ands	r2, r3
 801a630:	68bb      	ldr	r3, [r7, #8]
 801a632:	0a1b      	lsrs	r3, r3, #8
 801a634:	623b      	str	r3, [r7, #32]
 801a636:	6a3b      	ldr	r3, [r7, #32]
 801a638:	fa93 f3a3 	rbit	r3, r3
 801a63c:	61fb      	str	r3, [r7, #28]
 801a63e:	69fb      	ldr	r3, [r7, #28]
 801a640:	627b      	str	r3, [r7, #36]	@ 0x24
 801a642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a644:	2b00      	cmp	r3, #0
 801a646:	d101      	bne.n	801a64c <LL_GPIO_SetAFPin_8_15+0x5c>
 801a648:	2320      	movs	r3, #32
 801a64a:	e003      	b.n	801a654 <LL_GPIO_SetAFPin_8_15+0x64>
 801a64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a64e:	fab3 f383 	clz	r3, r3
 801a652:	b2db      	uxtb	r3, r3
 801a654:	009b      	lsls	r3, r3, #2
 801a656:	6879      	ldr	r1, [r7, #4]
 801a658:	fa01 f303 	lsl.w	r3, r1, r3
 801a65c:	431a      	orrs	r2, r3
 801a65e:	68fb      	ldr	r3, [r7, #12]
 801a660:	625a      	str	r2, [r3, #36]	@ 0x24
 801a662:	bf00      	nop
 801a664:	372c      	adds	r7, #44	@ 0x2c
 801a666:	46bd      	mov	sp, r7
 801a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a66c:	4770      	bx	lr

0801a66e <LL_GPIO_Init>:
 801a66e:	b580      	push	{r7, lr}
 801a670:	b088      	sub	sp, #32
 801a672:	af00      	add	r7, sp, #0
 801a674:	6078      	str	r0, [r7, #4]
 801a676:	6039      	str	r1, [r7, #0]
 801a678:	683b      	ldr	r3, [r7, #0]
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	613b      	str	r3, [r7, #16]
 801a67e:	693b      	ldr	r3, [r7, #16]
 801a680:	fa93 f3a3 	rbit	r3, r3
 801a684:	60fb      	str	r3, [r7, #12]
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	617b      	str	r3, [r7, #20]
 801a68a:	697b      	ldr	r3, [r7, #20]
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d101      	bne.n	801a694 <LL_GPIO_Init+0x26>
 801a690:	2320      	movs	r3, #32
 801a692:	e003      	b.n	801a69c <LL_GPIO_Init+0x2e>
 801a694:	697b      	ldr	r3, [r7, #20]
 801a696:	fab3 f383 	clz	r3, r3
 801a69a:	b2db      	uxtb	r3, r3
 801a69c:	61fb      	str	r3, [r7, #28]
 801a69e:	e048      	b.n	801a732 <LL_GPIO_Init+0xc4>
 801a6a0:	683b      	ldr	r3, [r7, #0]
 801a6a2:	681a      	ldr	r2, [r3, #0]
 801a6a4:	2101      	movs	r1, #1
 801a6a6:	69fb      	ldr	r3, [r7, #28]
 801a6a8:	fa01 f303 	lsl.w	r3, r1, r3
 801a6ac:	4013      	ands	r3, r2
 801a6ae:	61bb      	str	r3, [r7, #24]
 801a6b0:	69bb      	ldr	r3, [r7, #24]
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d03a      	beq.n	801a72c <LL_GPIO_Init+0xbe>
 801a6b6:	683b      	ldr	r3, [r7, #0]
 801a6b8:	685b      	ldr	r3, [r3, #4]
 801a6ba:	2b01      	cmp	r3, #1
 801a6bc:	d003      	beq.n	801a6c6 <LL_GPIO_Init+0x58>
 801a6be:	683b      	ldr	r3, [r7, #0]
 801a6c0:	685b      	ldr	r3, [r3, #4]
 801a6c2:	2b02      	cmp	r3, #2
 801a6c4:	d10e      	bne.n	801a6e4 <LL_GPIO_Init+0x76>
 801a6c6:	683b      	ldr	r3, [r7, #0]
 801a6c8:	689b      	ldr	r3, [r3, #8]
 801a6ca:	461a      	mov	r2, r3
 801a6cc:	69b9      	ldr	r1, [r7, #24]
 801a6ce:	6878      	ldr	r0, [r7, #4]
 801a6d0:	f7ff fed7 	bl	801a482 <LL_GPIO_SetPinSpeed>
 801a6d4:	683b      	ldr	r3, [r7, #0]
 801a6d6:	6819      	ldr	r1, [r3, #0]
 801a6d8:	683b      	ldr	r3, [r7, #0]
 801a6da:	68db      	ldr	r3, [r3, #12]
 801a6dc:	461a      	mov	r2, r3
 801a6de:	6878      	ldr	r0, [r7, #4]
 801a6e0:	f7ff feb7 	bl	801a452 <LL_GPIO_SetPinOutputType>
 801a6e4:	683b      	ldr	r3, [r7, #0]
 801a6e6:	691b      	ldr	r3, [r3, #16]
 801a6e8:	461a      	mov	r2, r3
 801a6ea:	69b9      	ldr	r1, [r7, #24]
 801a6ec:	6878      	ldr	r0, [r7, #4]
 801a6ee:	f7ff ff05 	bl	801a4fc <LL_GPIO_SetPinPull>
 801a6f2:	683b      	ldr	r3, [r7, #0]
 801a6f4:	685b      	ldr	r3, [r3, #4]
 801a6f6:	2b02      	cmp	r3, #2
 801a6f8:	d111      	bne.n	801a71e <LL_GPIO_Init+0xb0>
 801a6fa:	69bb      	ldr	r3, [r7, #24]
 801a6fc:	2bff      	cmp	r3, #255	@ 0xff
 801a6fe:	d807      	bhi.n	801a710 <LL_GPIO_Init+0xa2>
 801a700:	683b      	ldr	r3, [r7, #0]
 801a702:	695b      	ldr	r3, [r3, #20]
 801a704:	461a      	mov	r2, r3
 801a706:	69b9      	ldr	r1, [r7, #24]
 801a708:	6878      	ldr	r0, [r7, #4]
 801a70a:	f7ff ff34 	bl	801a576 <LL_GPIO_SetAFPin_0_7>
 801a70e:	e006      	b.n	801a71e <LL_GPIO_Init+0xb0>
 801a710:	683b      	ldr	r3, [r7, #0]
 801a712:	695b      	ldr	r3, [r3, #20]
 801a714:	461a      	mov	r2, r3
 801a716:	69b9      	ldr	r1, [r7, #24]
 801a718:	6878      	ldr	r0, [r7, #4]
 801a71a:	f7ff ff69 	bl	801a5f0 <LL_GPIO_SetAFPin_8_15>
 801a71e:	683b      	ldr	r3, [r7, #0]
 801a720:	685b      	ldr	r3, [r3, #4]
 801a722:	461a      	mov	r2, r3
 801a724:	69b9      	ldr	r1, [r7, #24]
 801a726:	6878      	ldr	r0, [r7, #4]
 801a728:	f7ff fe56 	bl	801a3d8 <LL_GPIO_SetPinMode>
 801a72c:	69fb      	ldr	r3, [r7, #28]
 801a72e:	3301      	adds	r3, #1
 801a730:	61fb      	str	r3, [r7, #28]
 801a732:	683b      	ldr	r3, [r7, #0]
 801a734:	681a      	ldr	r2, [r3, #0]
 801a736:	69fb      	ldr	r3, [r7, #28]
 801a738:	fa22 f303 	lsr.w	r3, r2, r3
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d1af      	bne.n	801a6a0 <LL_GPIO_Init+0x32>
 801a740:	2300      	movs	r3, #0
 801a742:	4618      	mov	r0, r3
 801a744:	3720      	adds	r7, #32
 801a746:	46bd      	mov	sp, r7
 801a748:	bd80      	pop	{r7, pc}
	...

0801a74c <LL_RCC_HSI_IsReady>:
 801a74c:	b480      	push	{r7}
 801a74e:	af00      	add	r7, sp, #0
 801a750:	4b07      	ldr	r3, [pc, #28]	@ (801a770 <LL_RCC_HSI_IsReady+0x24>)
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801a758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801a75c:	d101      	bne.n	801a762 <LL_RCC_HSI_IsReady+0x16>
 801a75e:	2301      	movs	r3, #1
 801a760:	e000      	b.n	801a764 <LL_RCC_HSI_IsReady+0x18>
 801a762:	2300      	movs	r3, #0
 801a764:	4618      	mov	r0, r3
 801a766:	46bd      	mov	sp, r7
 801a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a76c:	4770      	bx	lr
 801a76e:	bf00      	nop
 801a770:	40021000 	.word	0x40021000

0801a774 <LL_RCC_LSE_IsReady>:
 801a774:	b480      	push	{r7}
 801a776:	af00      	add	r7, sp, #0
 801a778:	4b07      	ldr	r3, [pc, #28]	@ (801a798 <LL_RCC_LSE_IsReady+0x24>)
 801a77a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a77e:	f003 0302 	and.w	r3, r3, #2
 801a782:	2b02      	cmp	r3, #2
 801a784:	d101      	bne.n	801a78a <LL_RCC_LSE_IsReady+0x16>
 801a786:	2301      	movs	r3, #1
 801a788:	e000      	b.n	801a78c <LL_RCC_LSE_IsReady+0x18>
 801a78a:	2300      	movs	r3, #0
 801a78c:	4618      	mov	r0, r3
 801a78e:	46bd      	mov	sp, r7
 801a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a794:	4770      	bx	lr
 801a796:	bf00      	nop
 801a798:	40021000 	.word	0x40021000

0801a79c <LL_RCC_GetSysClkSource>:
 801a79c:	b480      	push	{r7}
 801a79e:	af00      	add	r7, sp, #0
 801a7a0:	4b04      	ldr	r3, [pc, #16]	@ (801a7b4 <LL_RCC_GetSysClkSource+0x18>)
 801a7a2:	689b      	ldr	r3, [r3, #8]
 801a7a4:	f003 030c 	and.w	r3, r3, #12
 801a7a8:	4618      	mov	r0, r3
 801a7aa:	46bd      	mov	sp, r7
 801a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7b0:	4770      	bx	lr
 801a7b2:	bf00      	nop
 801a7b4:	40021000 	.word	0x40021000

0801a7b8 <LL_RCC_GetAHBPrescaler>:
 801a7b8:	b480      	push	{r7}
 801a7ba:	af00      	add	r7, sp, #0
 801a7bc:	4b04      	ldr	r3, [pc, #16]	@ (801a7d0 <LL_RCC_GetAHBPrescaler+0x18>)
 801a7be:	689b      	ldr	r3, [r3, #8]
 801a7c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	46bd      	mov	sp, r7
 801a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7cc:	4770      	bx	lr
 801a7ce:	bf00      	nop
 801a7d0:	40021000 	.word	0x40021000

0801a7d4 <LL_RCC_GetAPB1Prescaler>:
 801a7d4:	b480      	push	{r7}
 801a7d6:	af00      	add	r7, sp, #0
 801a7d8:	4b04      	ldr	r3, [pc, #16]	@ (801a7ec <LL_RCC_GetAPB1Prescaler+0x18>)
 801a7da:	689b      	ldr	r3, [r3, #8]
 801a7dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	46bd      	mov	sp, r7
 801a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7e8:	4770      	bx	lr
 801a7ea:	bf00      	nop
 801a7ec:	40021000 	.word	0x40021000

0801a7f0 <LL_RCC_GetAPB2Prescaler>:
 801a7f0:	b480      	push	{r7}
 801a7f2:	af00      	add	r7, sp, #0
 801a7f4:	4b04      	ldr	r3, [pc, #16]	@ (801a808 <LL_RCC_GetAPB2Prescaler+0x18>)
 801a7f6:	689b      	ldr	r3, [r3, #8]
 801a7f8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	46bd      	mov	sp, r7
 801a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a804:	4770      	bx	lr
 801a806:	bf00      	nop
 801a808:	40021000 	.word	0x40021000

0801a80c <LL_RCC_GetUSARTClockSource>:
 801a80c:	b480      	push	{r7}
 801a80e:	b083      	sub	sp, #12
 801a810:	af00      	add	r7, sp, #0
 801a812:	6078      	str	r0, [r7, #4]
 801a814:	4b06      	ldr	r3, [pc, #24]	@ (801a830 <LL_RCC_GetUSARTClockSource+0x24>)
 801a816:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	401a      	ands	r2, r3
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	041b      	lsls	r3, r3, #16
 801a822:	4313      	orrs	r3, r2
 801a824:	4618      	mov	r0, r3
 801a826:	370c      	adds	r7, #12
 801a828:	46bd      	mov	sp, r7
 801a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a82e:	4770      	bx	lr
 801a830:	40021000 	.word	0x40021000

0801a834 <LL_RCC_GetUARTClockSource>:
 801a834:	b480      	push	{r7}
 801a836:	b083      	sub	sp, #12
 801a838:	af00      	add	r7, sp, #0
 801a83a:	6078      	str	r0, [r7, #4]
 801a83c:	4b06      	ldr	r3, [pc, #24]	@ (801a858 <LL_RCC_GetUARTClockSource+0x24>)
 801a83e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	401a      	ands	r2, r3
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	041b      	lsls	r3, r3, #16
 801a84a:	4313      	orrs	r3, r2
 801a84c:	4618      	mov	r0, r3
 801a84e:	370c      	adds	r7, #12
 801a850:	46bd      	mov	sp, r7
 801a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a856:	4770      	bx	lr
 801a858:	40021000 	.word	0x40021000

0801a85c <LL_RCC_PLL_GetMainSource>:
 801a85c:	b480      	push	{r7}
 801a85e:	af00      	add	r7, sp, #0
 801a860:	4b04      	ldr	r3, [pc, #16]	@ (801a874 <LL_RCC_PLL_GetMainSource+0x18>)
 801a862:	68db      	ldr	r3, [r3, #12]
 801a864:	f003 0303 	and.w	r3, r3, #3
 801a868:	4618      	mov	r0, r3
 801a86a:	46bd      	mov	sp, r7
 801a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a870:	4770      	bx	lr
 801a872:	bf00      	nop
 801a874:	40021000 	.word	0x40021000

0801a878 <LL_RCC_PLL_GetN>:
 801a878:	b480      	push	{r7}
 801a87a:	af00      	add	r7, sp, #0
 801a87c:	4b04      	ldr	r3, [pc, #16]	@ (801a890 <LL_RCC_PLL_GetN+0x18>)
 801a87e:	68db      	ldr	r3, [r3, #12]
 801a880:	0a1b      	lsrs	r3, r3, #8
 801a882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a886:	4618      	mov	r0, r3
 801a888:	46bd      	mov	sp, r7
 801a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a88e:	4770      	bx	lr
 801a890:	40021000 	.word	0x40021000

0801a894 <LL_RCC_PLL_GetR>:
 801a894:	b480      	push	{r7}
 801a896:	af00      	add	r7, sp, #0
 801a898:	4b04      	ldr	r3, [pc, #16]	@ (801a8ac <LL_RCC_PLL_GetR+0x18>)
 801a89a:	68db      	ldr	r3, [r3, #12]
 801a89c:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 801a8a0:	4618      	mov	r0, r3
 801a8a2:	46bd      	mov	sp, r7
 801a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8a8:	4770      	bx	lr
 801a8aa:	bf00      	nop
 801a8ac:	40021000 	.word	0x40021000

0801a8b0 <LL_RCC_PLL_GetDivider>:
 801a8b0:	b480      	push	{r7}
 801a8b2:	af00      	add	r7, sp, #0
 801a8b4:	4b04      	ldr	r3, [pc, #16]	@ (801a8c8 <LL_RCC_PLL_GetDivider+0x18>)
 801a8b6:	68db      	ldr	r3, [r3, #12]
 801a8b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a8bc:	4618      	mov	r0, r3
 801a8be:	46bd      	mov	sp, r7
 801a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8c4:	4770      	bx	lr
 801a8c6:	bf00      	nop
 801a8c8:	40021000 	.word	0x40021000

0801a8cc <LL_RCC_GetUSARTClockFreq>:
 801a8cc:	b580      	push	{r7, lr}
 801a8ce:	b084      	sub	sp, #16
 801a8d0:	af00      	add	r7, sp, #0
 801a8d2:	6078      	str	r0, [r7, #4]
 801a8d4:	2300      	movs	r3, #0
 801a8d6:	60fb      	str	r3, [r7, #12]
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	2b03      	cmp	r3, #3
 801a8dc:	d132      	bne.n	801a944 <LL_RCC_GetUSARTClockFreq+0x78>
 801a8de:	6878      	ldr	r0, [r7, #4]
 801a8e0:	f7ff ff94 	bl	801a80c <LL_RCC_GetUSARTClockSource>
 801a8e4:	4603      	mov	r3, r0
 801a8e6:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 801a8ea:	d016      	beq.n	801a91a <LL_RCC_GetUSARTClockFreq+0x4e>
 801a8ec:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 801a8f0:	d81c      	bhi.n	801a92c <LL_RCC_GetUSARTClockFreq+0x60>
 801a8f2:	4a51      	ldr	r2, [pc, #324]	@ (801aa38 <LL_RCC_GetUSARTClockFreq+0x16c>)
 801a8f4:	4293      	cmp	r3, r2
 801a8f6:	d003      	beq.n	801a900 <LL_RCC_GetUSARTClockFreq+0x34>
 801a8f8:	4a50      	ldr	r2, [pc, #320]	@ (801aa3c <LL_RCC_GetUSARTClockFreq+0x170>)
 801a8fa:	4293      	cmp	r3, r2
 801a8fc:	d004      	beq.n	801a908 <LL_RCC_GetUSARTClockFreq+0x3c>
 801a8fe:	e015      	b.n	801a92c <LL_RCC_GetUSARTClockFreq+0x60>
 801a900:	f000 f92e 	bl	801ab60 <RCC_GetSystemClockFreq>
 801a904:	60f8      	str	r0, [r7, #12]
 801a906:	e092      	b.n	801aa2e <LL_RCC_GetUSARTClockFreq+0x162>
 801a908:	f7ff ff20 	bl	801a74c <LL_RCC_HSI_IsReady>
 801a90c:	4603      	mov	r3, r0
 801a90e:	2b00      	cmp	r3, #0
 801a910:	f000 8082 	beq.w	801aa18 <LL_RCC_GetUSARTClockFreq+0x14c>
 801a914:	4b4a      	ldr	r3, [pc, #296]	@ (801aa40 <LL_RCC_GetUSARTClockFreq+0x174>)
 801a916:	60fb      	str	r3, [r7, #12]
 801a918:	e07e      	b.n	801aa18 <LL_RCC_GetUSARTClockFreq+0x14c>
 801a91a:	f7ff ff2b 	bl	801a774 <LL_RCC_LSE_IsReady>
 801a91e:	4603      	mov	r3, r0
 801a920:	2b00      	cmp	r3, #0
 801a922:	d07b      	beq.n	801aa1c <LL_RCC_GetUSARTClockFreq+0x150>
 801a924:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a928:	60fb      	str	r3, [r7, #12]
 801a92a:	e077      	b.n	801aa1c <LL_RCC_GetUSARTClockFreq+0x150>
 801a92c:	f000 f918 	bl	801ab60 <RCC_GetSystemClockFreq>
 801a930:	4603      	mov	r3, r0
 801a932:	4618      	mov	r0, r3
 801a934:	f000 f93a 	bl	801abac <RCC_GetHCLKClockFreq>
 801a938:	4603      	mov	r3, r0
 801a93a:	4618      	mov	r0, r3
 801a93c:	f000 f964 	bl	801ac08 <RCC_GetPCLK2ClockFreq>
 801a940:	60f8      	str	r0, [r7, #12]
 801a942:	e074      	b.n	801aa2e <LL_RCC_GetUSARTClockFreq+0x162>
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	2b0c      	cmp	r3, #12
 801a948:	d131      	bne.n	801a9ae <LL_RCC_GetUSARTClockFreq+0xe2>
 801a94a:	6878      	ldr	r0, [r7, #4]
 801a94c:	f7ff ff5e 	bl	801a80c <LL_RCC_GetUSARTClockSource>
 801a950:	4603      	mov	r3, r0
 801a952:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 801a956:	d015      	beq.n	801a984 <LL_RCC_GetUSARTClockFreq+0xb8>
 801a958:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 801a95c:	d81b      	bhi.n	801a996 <LL_RCC_GetUSARTClockFreq+0xca>
 801a95e:	4a39      	ldr	r2, [pc, #228]	@ (801aa44 <LL_RCC_GetUSARTClockFreq+0x178>)
 801a960:	4293      	cmp	r3, r2
 801a962:	d003      	beq.n	801a96c <LL_RCC_GetUSARTClockFreq+0xa0>
 801a964:	4a38      	ldr	r2, [pc, #224]	@ (801aa48 <LL_RCC_GetUSARTClockFreq+0x17c>)
 801a966:	4293      	cmp	r3, r2
 801a968:	d004      	beq.n	801a974 <LL_RCC_GetUSARTClockFreq+0xa8>
 801a96a:	e014      	b.n	801a996 <LL_RCC_GetUSARTClockFreq+0xca>
 801a96c:	f000 f8f8 	bl	801ab60 <RCC_GetSystemClockFreq>
 801a970:	60f8      	str	r0, [r7, #12]
 801a972:	e05c      	b.n	801aa2e <LL_RCC_GetUSARTClockFreq+0x162>
 801a974:	f7ff feea 	bl	801a74c <LL_RCC_HSI_IsReady>
 801a978:	4603      	mov	r3, r0
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d050      	beq.n	801aa20 <LL_RCC_GetUSARTClockFreq+0x154>
 801a97e:	4b30      	ldr	r3, [pc, #192]	@ (801aa40 <LL_RCC_GetUSARTClockFreq+0x174>)
 801a980:	60fb      	str	r3, [r7, #12]
 801a982:	e04d      	b.n	801aa20 <LL_RCC_GetUSARTClockFreq+0x154>
 801a984:	f7ff fef6 	bl	801a774 <LL_RCC_LSE_IsReady>
 801a988:	4603      	mov	r3, r0
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d04a      	beq.n	801aa24 <LL_RCC_GetUSARTClockFreq+0x158>
 801a98e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a992:	60fb      	str	r3, [r7, #12]
 801a994:	e046      	b.n	801aa24 <LL_RCC_GetUSARTClockFreq+0x158>
 801a996:	f000 f8e3 	bl	801ab60 <RCC_GetSystemClockFreq>
 801a99a:	4603      	mov	r3, r0
 801a99c:	4618      	mov	r0, r3
 801a99e:	f000 f905 	bl	801abac <RCC_GetHCLKClockFreq>
 801a9a2:	4603      	mov	r3, r0
 801a9a4:	4618      	mov	r0, r3
 801a9a6:	f000 f919 	bl	801abdc <RCC_GetPCLK1ClockFreq>
 801a9aa:	60f8      	str	r0, [r7, #12]
 801a9ac:	e03f      	b.n	801aa2e <LL_RCC_GetUSARTClockFreq+0x162>
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	2b30      	cmp	r3, #48	@ 0x30
 801a9b2:	d13c      	bne.n	801aa2e <LL_RCC_GetUSARTClockFreq+0x162>
 801a9b4:	6878      	ldr	r0, [r7, #4]
 801a9b6:	f7ff ff29 	bl	801a80c <LL_RCC_GetUSARTClockSource>
 801a9ba:	4603      	mov	r3, r0
 801a9bc:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 801a9c0:	d015      	beq.n	801a9ee <LL_RCC_GetUSARTClockFreq+0x122>
 801a9c2:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 801a9c6:	d81b      	bhi.n	801aa00 <LL_RCC_GetUSARTClockFreq+0x134>
 801a9c8:	4a20      	ldr	r2, [pc, #128]	@ (801aa4c <LL_RCC_GetUSARTClockFreq+0x180>)
 801a9ca:	4293      	cmp	r3, r2
 801a9cc:	d003      	beq.n	801a9d6 <LL_RCC_GetUSARTClockFreq+0x10a>
 801a9ce:	4a20      	ldr	r2, [pc, #128]	@ (801aa50 <LL_RCC_GetUSARTClockFreq+0x184>)
 801a9d0:	4293      	cmp	r3, r2
 801a9d2:	d004      	beq.n	801a9de <LL_RCC_GetUSARTClockFreq+0x112>
 801a9d4:	e014      	b.n	801aa00 <LL_RCC_GetUSARTClockFreq+0x134>
 801a9d6:	f000 f8c3 	bl	801ab60 <RCC_GetSystemClockFreq>
 801a9da:	60f8      	str	r0, [r7, #12]
 801a9dc:	e027      	b.n	801aa2e <LL_RCC_GetUSARTClockFreq+0x162>
 801a9de:	f7ff feb5 	bl	801a74c <LL_RCC_HSI_IsReady>
 801a9e2:	4603      	mov	r3, r0
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d01f      	beq.n	801aa28 <LL_RCC_GetUSARTClockFreq+0x15c>
 801a9e8:	4b15      	ldr	r3, [pc, #84]	@ (801aa40 <LL_RCC_GetUSARTClockFreq+0x174>)
 801a9ea:	60fb      	str	r3, [r7, #12]
 801a9ec:	e01c      	b.n	801aa28 <LL_RCC_GetUSARTClockFreq+0x15c>
 801a9ee:	f7ff fec1 	bl	801a774 <LL_RCC_LSE_IsReady>
 801a9f2:	4603      	mov	r3, r0
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d019      	beq.n	801aa2c <LL_RCC_GetUSARTClockFreq+0x160>
 801a9f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a9fc:	60fb      	str	r3, [r7, #12]
 801a9fe:	e015      	b.n	801aa2c <LL_RCC_GetUSARTClockFreq+0x160>
 801aa00:	f000 f8ae 	bl	801ab60 <RCC_GetSystemClockFreq>
 801aa04:	4603      	mov	r3, r0
 801aa06:	4618      	mov	r0, r3
 801aa08:	f000 f8d0 	bl	801abac <RCC_GetHCLKClockFreq>
 801aa0c:	4603      	mov	r3, r0
 801aa0e:	4618      	mov	r0, r3
 801aa10:	f000 f8e4 	bl	801abdc <RCC_GetPCLK1ClockFreq>
 801aa14:	60f8      	str	r0, [r7, #12]
 801aa16:	e00a      	b.n	801aa2e <LL_RCC_GetUSARTClockFreq+0x162>
 801aa18:	bf00      	nop
 801aa1a:	e008      	b.n	801aa2e <LL_RCC_GetUSARTClockFreq+0x162>
 801aa1c:	bf00      	nop
 801aa1e:	e006      	b.n	801aa2e <LL_RCC_GetUSARTClockFreq+0x162>
 801aa20:	bf00      	nop
 801aa22:	e004      	b.n	801aa2e <LL_RCC_GetUSARTClockFreq+0x162>
 801aa24:	bf00      	nop
 801aa26:	e002      	b.n	801aa2e <LL_RCC_GetUSARTClockFreq+0x162>
 801aa28:	bf00      	nop
 801aa2a:	e000      	b.n	801aa2e <LL_RCC_GetUSARTClockFreq+0x162>
 801aa2c:	bf00      	nop
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	4618      	mov	r0, r3
 801aa32:	3710      	adds	r7, #16
 801aa34:	46bd      	mov	sp, r7
 801aa36:	bd80      	pop	{r7, pc}
 801aa38:	00030001 	.word	0x00030001
 801aa3c:	00030002 	.word	0x00030002
 801aa40:	00f42400 	.word	0x00f42400
 801aa44:	000c0004 	.word	0x000c0004
 801aa48:	000c0008 	.word	0x000c0008
 801aa4c:	00300010 	.word	0x00300010
 801aa50:	00300020 	.word	0x00300020

0801aa54 <LL_RCC_GetUARTClockFreq>:
 801aa54:	b580      	push	{r7, lr}
 801aa56:	b084      	sub	sp, #16
 801aa58:	af00      	add	r7, sp, #0
 801aa5a:	6078      	str	r0, [r7, #4]
 801aa5c:	2300      	movs	r3, #0
 801aa5e:	60fb      	str	r3, [r7, #12]
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	2bc0      	cmp	r3, #192	@ 0xc0
 801aa64:	d134      	bne.n	801aad0 <LL_RCC_GetUARTClockFreq+0x7c>
 801aa66:	6878      	ldr	r0, [r7, #4]
 801aa68:	f7ff fee4 	bl	801a834 <LL_RCC_GetUARTClockSource>
 801aa6c:	4603      	mov	r3, r0
 801aa6e:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 801aa72:	d015      	beq.n	801aaa0 <LL_RCC_GetUARTClockFreq+0x4c>
 801aa74:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 801aa78:	d81b      	bhi.n	801aab2 <LL_RCC_GetUARTClockFreq+0x5e>
 801aa7a:	4a34      	ldr	r2, [pc, #208]	@ (801ab4c <LL_RCC_GetUARTClockFreq+0xf8>)
 801aa7c:	4293      	cmp	r3, r2
 801aa7e:	d003      	beq.n	801aa88 <LL_RCC_GetUARTClockFreq+0x34>
 801aa80:	4a33      	ldr	r2, [pc, #204]	@ (801ab50 <LL_RCC_GetUARTClockFreq+0xfc>)
 801aa82:	4293      	cmp	r3, r2
 801aa84:	d004      	beq.n	801aa90 <LL_RCC_GetUARTClockFreq+0x3c>
 801aa86:	e014      	b.n	801aab2 <LL_RCC_GetUARTClockFreq+0x5e>
 801aa88:	f000 f86a 	bl	801ab60 <RCC_GetSystemClockFreq>
 801aa8c:	60f8      	str	r0, [r7, #12]
 801aa8e:	e01f      	b.n	801aad0 <LL_RCC_GetUARTClockFreq+0x7c>
 801aa90:	f7ff fe5c 	bl	801a74c <LL_RCC_HSI_IsReady>
 801aa94:	4603      	mov	r3, r0
 801aa96:	2b00      	cmp	r3, #0
 801aa98:	d017      	beq.n	801aaca <LL_RCC_GetUARTClockFreq+0x76>
 801aa9a:	4b2e      	ldr	r3, [pc, #184]	@ (801ab54 <LL_RCC_GetUARTClockFreq+0x100>)
 801aa9c:	60fb      	str	r3, [r7, #12]
 801aa9e:	e014      	b.n	801aaca <LL_RCC_GetUARTClockFreq+0x76>
 801aaa0:	f7ff fe68 	bl	801a774 <LL_RCC_LSE_IsReady>
 801aaa4:	4603      	mov	r3, r0
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	d011      	beq.n	801aace <LL_RCC_GetUARTClockFreq+0x7a>
 801aaaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801aaae:	60fb      	str	r3, [r7, #12]
 801aab0:	e00d      	b.n	801aace <LL_RCC_GetUARTClockFreq+0x7a>
 801aab2:	f000 f855 	bl	801ab60 <RCC_GetSystemClockFreq>
 801aab6:	4603      	mov	r3, r0
 801aab8:	4618      	mov	r0, r3
 801aaba:	f000 f877 	bl	801abac <RCC_GetHCLKClockFreq>
 801aabe:	4603      	mov	r3, r0
 801aac0:	4618      	mov	r0, r3
 801aac2:	f000 f88b 	bl	801abdc <RCC_GetPCLK1ClockFreq>
 801aac6:	60f8      	str	r0, [r7, #12]
 801aac8:	e002      	b.n	801aad0 <LL_RCC_GetUARTClockFreq+0x7c>
 801aaca:	bf00      	nop
 801aacc:	e000      	b.n	801aad0 <LL_RCC_GetUARTClockFreq+0x7c>
 801aace:	bf00      	nop
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801aad6:	d134      	bne.n	801ab42 <LL_RCC_GetUARTClockFreq+0xee>
 801aad8:	6878      	ldr	r0, [r7, #4]
 801aada:	f7ff feab 	bl	801a834 <LL_RCC_GetUARTClockSource>
 801aade:	4603      	mov	r3, r0
 801aae0:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 801aae4:	d015      	beq.n	801ab12 <LL_RCC_GetUARTClockFreq+0xbe>
 801aae6:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 801aaea:	d81b      	bhi.n	801ab24 <LL_RCC_GetUARTClockFreq+0xd0>
 801aaec:	4a1a      	ldr	r2, [pc, #104]	@ (801ab58 <LL_RCC_GetUARTClockFreq+0x104>)
 801aaee:	4293      	cmp	r3, r2
 801aaf0:	d003      	beq.n	801aafa <LL_RCC_GetUARTClockFreq+0xa6>
 801aaf2:	4a1a      	ldr	r2, [pc, #104]	@ (801ab5c <LL_RCC_GetUARTClockFreq+0x108>)
 801aaf4:	4293      	cmp	r3, r2
 801aaf6:	d004      	beq.n	801ab02 <LL_RCC_GetUARTClockFreq+0xae>
 801aaf8:	e014      	b.n	801ab24 <LL_RCC_GetUARTClockFreq+0xd0>
 801aafa:	f000 f831 	bl	801ab60 <RCC_GetSystemClockFreq>
 801aafe:	60f8      	str	r0, [r7, #12]
 801ab00:	e01f      	b.n	801ab42 <LL_RCC_GetUARTClockFreq+0xee>
 801ab02:	f7ff fe23 	bl	801a74c <LL_RCC_HSI_IsReady>
 801ab06:	4603      	mov	r3, r0
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d017      	beq.n	801ab3c <LL_RCC_GetUARTClockFreq+0xe8>
 801ab0c:	4b11      	ldr	r3, [pc, #68]	@ (801ab54 <LL_RCC_GetUARTClockFreq+0x100>)
 801ab0e:	60fb      	str	r3, [r7, #12]
 801ab10:	e014      	b.n	801ab3c <LL_RCC_GetUARTClockFreq+0xe8>
 801ab12:	f7ff fe2f 	bl	801a774 <LL_RCC_LSE_IsReady>
 801ab16:	4603      	mov	r3, r0
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d011      	beq.n	801ab40 <LL_RCC_GetUARTClockFreq+0xec>
 801ab1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ab20:	60fb      	str	r3, [r7, #12]
 801ab22:	e00d      	b.n	801ab40 <LL_RCC_GetUARTClockFreq+0xec>
 801ab24:	f000 f81c 	bl	801ab60 <RCC_GetSystemClockFreq>
 801ab28:	4603      	mov	r3, r0
 801ab2a:	4618      	mov	r0, r3
 801ab2c:	f000 f83e 	bl	801abac <RCC_GetHCLKClockFreq>
 801ab30:	4603      	mov	r3, r0
 801ab32:	4618      	mov	r0, r3
 801ab34:	f000 f852 	bl	801abdc <RCC_GetPCLK1ClockFreq>
 801ab38:	60f8      	str	r0, [r7, #12]
 801ab3a:	e002      	b.n	801ab42 <LL_RCC_GetUARTClockFreq+0xee>
 801ab3c:	bf00      	nop
 801ab3e:	e000      	b.n	801ab42 <LL_RCC_GetUARTClockFreq+0xee>
 801ab40:	bf00      	nop
 801ab42:	68fb      	ldr	r3, [r7, #12]
 801ab44:	4618      	mov	r0, r3
 801ab46:	3710      	adds	r7, #16
 801ab48:	46bd      	mov	sp, r7
 801ab4a:	bd80      	pop	{r7, pc}
 801ab4c:	00c00040 	.word	0x00c00040
 801ab50:	00c00080 	.word	0x00c00080
 801ab54:	00f42400 	.word	0x00f42400
 801ab58:	03000100 	.word	0x03000100
 801ab5c:	03000200 	.word	0x03000200

0801ab60 <RCC_GetSystemClockFreq>:
 801ab60:	b580      	push	{r7, lr}
 801ab62:	b082      	sub	sp, #8
 801ab64:	af00      	add	r7, sp, #0
 801ab66:	f7ff fe19 	bl	801a79c <LL_RCC_GetSysClkSource>
 801ab6a:	4603      	mov	r3, r0
 801ab6c:	2b0c      	cmp	r3, #12
 801ab6e:	d00c      	beq.n	801ab8a <RCC_GetSystemClockFreq+0x2a>
 801ab70:	2b0c      	cmp	r3, #12
 801ab72:	d80e      	bhi.n	801ab92 <RCC_GetSystemClockFreq+0x32>
 801ab74:	2b04      	cmp	r3, #4
 801ab76:	d002      	beq.n	801ab7e <RCC_GetSystemClockFreq+0x1e>
 801ab78:	2b08      	cmp	r3, #8
 801ab7a:	d003      	beq.n	801ab84 <RCC_GetSystemClockFreq+0x24>
 801ab7c:	e009      	b.n	801ab92 <RCC_GetSystemClockFreq+0x32>
 801ab7e:	4b09      	ldr	r3, [pc, #36]	@ (801aba4 <RCC_GetSystemClockFreq+0x44>)
 801ab80:	607b      	str	r3, [r7, #4]
 801ab82:	e009      	b.n	801ab98 <RCC_GetSystemClockFreq+0x38>
 801ab84:	4b08      	ldr	r3, [pc, #32]	@ (801aba8 <RCC_GetSystemClockFreq+0x48>)
 801ab86:	607b      	str	r3, [r7, #4]
 801ab88:	e006      	b.n	801ab98 <RCC_GetSystemClockFreq+0x38>
 801ab8a:	f000 f853 	bl	801ac34 <RCC_PLL_GetFreqDomain_SYS>
 801ab8e:	6078      	str	r0, [r7, #4]
 801ab90:	e002      	b.n	801ab98 <RCC_GetSystemClockFreq+0x38>
 801ab92:	4b04      	ldr	r3, [pc, #16]	@ (801aba4 <RCC_GetSystemClockFreq+0x44>)
 801ab94:	607b      	str	r3, [r7, #4]
 801ab96:	bf00      	nop
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	4618      	mov	r0, r3
 801ab9c:	3708      	adds	r7, #8
 801ab9e:	46bd      	mov	sp, r7
 801aba0:	bd80      	pop	{r7, pc}
 801aba2:	bf00      	nop
 801aba4:	00f42400 	.word	0x00f42400
 801aba8:	007a1200 	.word	0x007a1200

0801abac <RCC_GetHCLKClockFreq>:
 801abac:	b580      	push	{r7, lr}
 801abae:	b082      	sub	sp, #8
 801abb0:	af00      	add	r7, sp, #0
 801abb2:	6078      	str	r0, [r7, #4]
 801abb4:	f7ff fe00 	bl	801a7b8 <LL_RCC_GetAHBPrescaler>
 801abb8:	4603      	mov	r3, r0
 801abba:	091b      	lsrs	r3, r3, #4
 801abbc:	f003 030f 	and.w	r3, r3, #15
 801abc0:	4a05      	ldr	r2, [pc, #20]	@ (801abd8 <RCC_GetHCLKClockFreq+0x2c>)
 801abc2:	5cd3      	ldrb	r3, [r2, r3]
 801abc4:	f003 031f 	and.w	r3, r3, #31
 801abc8:	687a      	ldr	r2, [r7, #4]
 801abca:	fa22 f303 	lsr.w	r3, r2, r3
 801abce:	4618      	mov	r0, r3
 801abd0:	3708      	adds	r7, #8
 801abd2:	46bd      	mov	sp, r7
 801abd4:	bd80      	pop	{r7, pc}
 801abd6:	bf00      	nop
 801abd8:	080221a4 	.word	0x080221a4

0801abdc <RCC_GetPCLK1ClockFreq>:
 801abdc:	b580      	push	{r7, lr}
 801abde:	b082      	sub	sp, #8
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	6078      	str	r0, [r7, #4]
 801abe4:	f7ff fdf6 	bl	801a7d4 <LL_RCC_GetAPB1Prescaler>
 801abe8:	4603      	mov	r3, r0
 801abea:	0a1b      	lsrs	r3, r3, #8
 801abec:	4a05      	ldr	r2, [pc, #20]	@ (801ac04 <RCC_GetPCLK1ClockFreq+0x28>)
 801abee:	5cd3      	ldrb	r3, [r2, r3]
 801abf0:	f003 031f 	and.w	r3, r3, #31
 801abf4:	687a      	ldr	r2, [r7, #4]
 801abf6:	fa22 f303 	lsr.w	r3, r2, r3
 801abfa:	4618      	mov	r0, r3
 801abfc:	3708      	adds	r7, #8
 801abfe:	46bd      	mov	sp, r7
 801ac00:	bd80      	pop	{r7, pc}
 801ac02:	bf00      	nop
 801ac04:	080221b4 	.word	0x080221b4

0801ac08 <RCC_GetPCLK2ClockFreq>:
 801ac08:	b580      	push	{r7, lr}
 801ac0a:	b082      	sub	sp, #8
 801ac0c:	af00      	add	r7, sp, #0
 801ac0e:	6078      	str	r0, [r7, #4]
 801ac10:	f7ff fdee 	bl	801a7f0 <LL_RCC_GetAPB2Prescaler>
 801ac14:	4603      	mov	r3, r0
 801ac16:	0adb      	lsrs	r3, r3, #11
 801ac18:	4a05      	ldr	r2, [pc, #20]	@ (801ac30 <RCC_GetPCLK2ClockFreq+0x28>)
 801ac1a:	5cd3      	ldrb	r3, [r2, r3]
 801ac1c:	f003 031f 	and.w	r3, r3, #31
 801ac20:	687a      	ldr	r2, [r7, #4]
 801ac22:	fa22 f303 	lsr.w	r3, r2, r3
 801ac26:	4618      	mov	r0, r3
 801ac28:	3708      	adds	r7, #8
 801ac2a:	46bd      	mov	sp, r7
 801ac2c:	bd80      	pop	{r7, pc}
 801ac2e:	bf00      	nop
 801ac30:	080221b4 	.word	0x080221b4

0801ac34 <RCC_PLL_GetFreqDomain_SYS>:
 801ac34:	b590      	push	{r4, r7, lr}
 801ac36:	b083      	sub	sp, #12
 801ac38:	af00      	add	r7, sp, #0
 801ac3a:	f7ff fe0f 	bl	801a85c <LL_RCC_PLL_GetMainSource>
 801ac3e:	6038      	str	r0, [r7, #0]
 801ac40:	683b      	ldr	r3, [r7, #0]
 801ac42:	2b02      	cmp	r3, #2
 801ac44:	d003      	beq.n	801ac4e <RCC_PLL_GetFreqDomain_SYS+0x1a>
 801ac46:	683b      	ldr	r3, [r7, #0]
 801ac48:	2b03      	cmp	r3, #3
 801ac4a:	d003      	beq.n	801ac54 <RCC_PLL_GetFreqDomain_SYS+0x20>
 801ac4c:	e005      	b.n	801ac5a <RCC_PLL_GetFreqDomain_SYS+0x26>
 801ac4e:	4b11      	ldr	r3, [pc, #68]	@ (801ac94 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 801ac50:	607b      	str	r3, [r7, #4]
 801ac52:	e005      	b.n	801ac60 <RCC_PLL_GetFreqDomain_SYS+0x2c>
 801ac54:	4b10      	ldr	r3, [pc, #64]	@ (801ac98 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 801ac56:	607b      	str	r3, [r7, #4]
 801ac58:	e002      	b.n	801ac60 <RCC_PLL_GetFreqDomain_SYS+0x2c>
 801ac5a:	4b0e      	ldr	r3, [pc, #56]	@ (801ac94 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 801ac5c:	607b      	str	r3, [r7, #4]
 801ac5e:	bf00      	nop
 801ac60:	f7ff fe0a 	bl	801a878 <LL_RCC_PLL_GetN>
 801ac64:	4602      	mov	r2, r0
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	fb03 f402 	mul.w	r4, r3, r2
 801ac6c:	f7ff fe20 	bl	801a8b0 <LL_RCC_PLL_GetDivider>
 801ac70:	4603      	mov	r3, r0
 801ac72:	091b      	lsrs	r3, r3, #4
 801ac74:	3301      	adds	r3, #1
 801ac76:	fbb4 f4f3 	udiv	r4, r4, r3
 801ac7a:	f7ff fe0b 	bl	801a894 <LL_RCC_PLL_GetR>
 801ac7e:	4603      	mov	r3, r0
 801ac80:	0e5b      	lsrs	r3, r3, #25
 801ac82:	3301      	adds	r3, #1
 801ac84:	005b      	lsls	r3, r3, #1
 801ac86:	fbb4 f3f3 	udiv	r3, r4, r3
 801ac8a:	4618      	mov	r0, r3
 801ac8c:	370c      	adds	r7, #12
 801ac8e:	46bd      	mov	sp, r7
 801ac90:	bd90      	pop	{r4, r7, pc}
 801ac92:	bf00      	nop
 801ac94:	00f42400 	.word	0x00f42400
 801ac98:	007a1200 	.word	0x007a1200

0801ac9c <LL_SPI_IsEnabled>:
 801ac9c:	b480      	push	{r7}
 801ac9e:	b083      	sub	sp, #12
 801aca0:	af00      	add	r7, sp, #0
 801aca2:	6078      	str	r0, [r7, #4]
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801acac:	2b40      	cmp	r3, #64	@ 0x40
 801acae:	d101      	bne.n	801acb4 <LL_SPI_IsEnabled+0x18>
 801acb0:	2301      	movs	r3, #1
 801acb2:	e000      	b.n	801acb6 <LL_SPI_IsEnabled+0x1a>
 801acb4:	2300      	movs	r3, #0
 801acb6:	4618      	mov	r0, r3
 801acb8:	370c      	adds	r7, #12
 801acba:	46bd      	mov	sp, r7
 801acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acc0:	4770      	bx	lr

0801acc2 <LL_SPI_SetRxFIFOThreshold>:
 801acc2:	b480      	push	{r7}
 801acc4:	b083      	sub	sp, #12
 801acc6:	af00      	add	r7, sp, #0
 801acc8:	6078      	str	r0, [r7, #4]
 801acca:	6039      	str	r1, [r7, #0]
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	685b      	ldr	r3, [r3, #4]
 801acd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801acd4:	683b      	ldr	r3, [r7, #0]
 801acd6:	431a      	orrs	r2, r3
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	605a      	str	r2, [r3, #4]
 801acdc:	bf00      	nop
 801acde:	370c      	adds	r7, #12
 801ace0:	46bd      	mov	sp, r7
 801ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ace6:	4770      	bx	lr

0801ace8 <LL_SPI_SetCRCPolynomial>:
 801ace8:	b480      	push	{r7}
 801acea:	b083      	sub	sp, #12
 801acec:	af00      	add	r7, sp, #0
 801acee:	6078      	str	r0, [r7, #4]
 801acf0:	6039      	str	r1, [r7, #0]
 801acf2:	683b      	ldr	r3, [r7, #0]
 801acf4:	b29b      	uxth	r3, r3
 801acf6:	461a      	mov	r2, r3
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	611a      	str	r2, [r3, #16]
 801acfc:	bf00      	nop
 801acfe:	370c      	adds	r7, #12
 801ad00:	46bd      	mov	sp, r7
 801ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad06:	4770      	bx	lr

0801ad08 <LL_SPI_Init>:
 801ad08:	b580      	push	{r7, lr}
 801ad0a:	b084      	sub	sp, #16
 801ad0c:	af00      	add	r7, sp, #0
 801ad0e:	6078      	str	r0, [r7, #4]
 801ad10:	6039      	str	r1, [r7, #0]
 801ad12:	2301      	movs	r3, #1
 801ad14:	73fb      	strb	r3, [r7, #15]
 801ad16:	6878      	ldr	r0, [r7, #4]
 801ad18:	f7ff ffc0 	bl	801ac9c <LL_SPI_IsEnabled>
 801ad1c:	4603      	mov	r3, r0
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d145      	bne.n	801adae <LL_SPI_Init+0xa6>
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801ad2a:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 801ad2e:	683a      	ldr	r2, [r7, #0]
 801ad30:	6811      	ldr	r1, [r2, #0]
 801ad32:	683a      	ldr	r2, [r7, #0]
 801ad34:	6852      	ldr	r2, [r2, #4]
 801ad36:	4311      	orrs	r1, r2
 801ad38:	683a      	ldr	r2, [r7, #0]
 801ad3a:	68d2      	ldr	r2, [r2, #12]
 801ad3c:	4311      	orrs	r1, r2
 801ad3e:	683a      	ldr	r2, [r7, #0]
 801ad40:	6912      	ldr	r2, [r2, #16]
 801ad42:	4311      	orrs	r1, r2
 801ad44:	683a      	ldr	r2, [r7, #0]
 801ad46:	6952      	ldr	r2, [r2, #20]
 801ad48:	4311      	orrs	r1, r2
 801ad4a:	683a      	ldr	r2, [r7, #0]
 801ad4c:	6992      	ldr	r2, [r2, #24]
 801ad4e:	4311      	orrs	r1, r2
 801ad50:	683a      	ldr	r2, [r7, #0]
 801ad52:	69d2      	ldr	r2, [r2, #28]
 801ad54:	4311      	orrs	r1, r2
 801ad56:	683a      	ldr	r2, [r7, #0]
 801ad58:	6a12      	ldr	r2, [r2, #32]
 801ad5a:	430a      	orrs	r2, r1
 801ad5c:	431a      	orrs	r2, r3
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	601a      	str	r2, [r3, #0]
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	685b      	ldr	r3, [r3, #4]
 801ad66:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801ad6a:	f023 0304 	bic.w	r3, r3, #4
 801ad6e:	683a      	ldr	r2, [r7, #0]
 801ad70:	6891      	ldr	r1, [r2, #8]
 801ad72:	683a      	ldr	r2, [r7, #0]
 801ad74:	6952      	ldr	r2, [r2, #20]
 801ad76:	0c12      	lsrs	r2, r2, #16
 801ad78:	430a      	orrs	r2, r1
 801ad7a:	431a      	orrs	r2, r3
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	605a      	str	r2, [r3, #4]
 801ad80:	683b      	ldr	r3, [r7, #0]
 801ad82:	689b      	ldr	r3, [r3, #8]
 801ad84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801ad88:	d204      	bcs.n	801ad94 <LL_SPI_Init+0x8c>
 801ad8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801ad8e:	6878      	ldr	r0, [r7, #4]
 801ad90:	f7ff ff97 	bl	801acc2 <LL_SPI_SetRxFIFOThreshold>
 801ad94:	683b      	ldr	r3, [r7, #0]
 801ad96:	6a1b      	ldr	r3, [r3, #32]
 801ad98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ad9c:	d105      	bne.n	801adaa <LL_SPI_Init+0xa2>
 801ad9e:	683b      	ldr	r3, [r7, #0]
 801ada0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ada2:	4619      	mov	r1, r3
 801ada4:	6878      	ldr	r0, [r7, #4]
 801ada6:	f7ff ff9f 	bl	801ace8 <LL_SPI_SetCRCPolynomial>
 801adaa:	2300      	movs	r3, #0
 801adac:	73fb      	strb	r3, [r7, #15]
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	69db      	ldr	r3, [r3, #28]
 801adb2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	61da      	str	r2, [r3, #28]
 801adba:	7bfb      	ldrb	r3, [r7, #15]
 801adbc:	4618      	mov	r0, r3
 801adbe:	3710      	adds	r7, #16
 801adc0:	46bd      	mov	sp, r7
 801adc2:	bd80      	pop	{r7, pc}

0801adc4 <LL_TIM_SetPrescaler>:
 801adc4:	b480      	push	{r7}
 801adc6:	b083      	sub	sp, #12
 801adc8:	af00      	add	r7, sp, #0
 801adca:	6078      	str	r0, [r7, #4]
 801adcc:	6039      	str	r1, [r7, #0]
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	683a      	ldr	r2, [r7, #0]
 801add2:	629a      	str	r2, [r3, #40]	@ 0x28
 801add4:	bf00      	nop
 801add6:	370c      	adds	r7, #12
 801add8:	46bd      	mov	sp, r7
 801adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adde:	4770      	bx	lr

0801ade0 <LL_TIM_SetAutoReload>:
 801ade0:	b480      	push	{r7}
 801ade2:	b083      	sub	sp, #12
 801ade4:	af00      	add	r7, sp, #0
 801ade6:	6078      	str	r0, [r7, #4]
 801ade8:	6039      	str	r1, [r7, #0]
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	683a      	ldr	r2, [r7, #0]
 801adee:	62da      	str	r2, [r3, #44]	@ 0x2c
 801adf0:	bf00      	nop
 801adf2:	370c      	adds	r7, #12
 801adf4:	46bd      	mov	sp, r7
 801adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adfa:	4770      	bx	lr

0801adfc <LL_TIM_SetRepetitionCounter>:
 801adfc:	b480      	push	{r7}
 801adfe:	b083      	sub	sp, #12
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	6078      	str	r0, [r7, #4]
 801ae04:	6039      	str	r1, [r7, #0]
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	683a      	ldr	r2, [r7, #0]
 801ae0a:	631a      	str	r2, [r3, #48]	@ 0x30
 801ae0c:	bf00      	nop
 801ae0e:	370c      	adds	r7, #12
 801ae10:	46bd      	mov	sp, r7
 801ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae16:	4770      	bx	lr

0801ae18 <LL_TIM_OC_SetCompareCH1>:
 801ae18:	b480      	push	{r7}
 801ae1a:	b083      	sub	sp, #12
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	6078      	str	r0, [r7, #4]
 801ae20:	6039      	str	r1, [r7, #0]
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	683a      	ldr	r2, [r7, #0]
 801ae26:	635a      	str	r2, [r3, #52]	@ 0x34
 801ae28:	bf00      	nop
 801ae2a:	370c      	adds	r7, #12
 801ae2c:	46bd      	mov	sp, r7
 801ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae32:	4770      	bx	lr

0801ae34 <LL_TIM_OC_SetCompareCH2>:
 801ae34:	b480      	push	{r7}
 801ae36:	b083      	sub	sp, #12
 801ae38:	af00      	add	r7, sp, #0
 801ae3a:	6078      	str	r0, [r7, #4]
 801ae3c:	6039      	str	r1, [r7, #0]
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	683a      	ldr	r2, [r7, #0]
 801ae42:	639a      	str	r2, [r3, #56]	@ 0x38
 801ae44:	bf00      	nop
 801ae46:	370c      	adds	r7, #12
 801ae48:	46bd      	mov	sp, r7
 801ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae4e:	4770      	bx	lr

0801ae50 <LL_TIM_OC_SetCompareCH3>:
 801ae50:	b480      	push	{r7}
 801ae52:	b083      	sub	sp, #12
 801ae54:	af00      	add	r7, sp, #0
 801ae56:	6078      	str	r0, [r7, #4]
 801ae58:	6039      	str	r1, [r7, #0]
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	683a      	ldr	r2, [r7, #0]
 801ae5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 801ae60:	bf00      	nop
 801ae62:	370c      	adds	r7, #12
 801ae64:	46bd      	mov	sp, r7
 801ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae6a:	4770      	bx	lr

0801ae6c <LL_TIM_OC_SetCompareCH4>:
 801ae6c:	b480      	push	{r7}
 801ae6e:	b083      	sub	sp, #12
 801ae70:	af00      	add	r7, sp, #0
 801ae72:	6078      	str	r0, [r7, #4]
 801ae74:	6039      	str	r1, [r7, #0]
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	683a      	ldr	r2, [r7, #0]
 801ae7a:	641a      	str	r2, [r3, #64]	@ 0x40
 801ae7c:	bf00      	nop
 801ae7e:	370c      	adds	r7, #12
 801ae80:	46bd      	mov	sp, r7
 801ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae86:	4770      	bx	lr

0801ae88 <LL_TIM_OC_SetCompareCH5>:
 801ae88:	b480      	push	{r7}
 801ae8a:	b083      	sub	sp, #12
 801ae8c:	af00      	add	r7, sp, #0
 801ae8e:	6078      	str	r0, [r7, #4]
 801ae90:	6039      	str	r1, [r7, #0]
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	683a      	ldr	r2, [r7, #0]
 801ae9a:	649a      	str	r2, [r3, #72]	@ 0x48
 801ae9c:	bf00      	nop
 801ae9e:	370c      	adds	r7, #12
 801aea0:	46bd      	mov	sp, r7
 801aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea6:	4770      	bx	lr

0801aea8 <LL_TIM_OC_SetCompareCH6>:
 801aea8:	b480      	push	{r7}
 801aeaa:	b083      	sub	sp, #12
 801aeac:	af00      	add	r7, sp, #0
 801aeae:	6078      	str	r0, [r7, #4]
 801aeb0:	6039      	str	r1, [r7, #0]
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	683a      	ldr	r2, [r7, #0]
 801aeb6:	64da      	str	r2, [r3, #76]	@ 0x4c
 801aeb8:	bf00      	nop
 801aeba:	370c      	adds	r7, #12
 801aebc:	46bd      	mov	sp, r7
 801aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aec2:	4770      	bx	lr

0801aec4 <LL_TIM_GenerateEvent_UPDATE>:
 801aec4:	b480      	push	{r7}
 801aec6:	b083      	sub	sp, #12
 801aec8:	af00      	add	r7, sp, #0
 801aeca:	6078      	str	r0, [r7, #4]
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	695b      	ldr	r3, [r3, #20]
 801aed0:	f043 0201 	orr.w	r2, r3, #1
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	615a      	str	r2, [r3, #20]
 801aed8:	bf00      	nop
 801aeda:	370c      	adds	r7, #12
 801aedc:	46bd      	mov	sp, r7
 801aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aee2:	4770      	bx	lr

0801aee4 <LL_TIM_Init>:
 801aee4:	b580      	push	{r7, lr}
 801aee6:	b084      	sub	sp, #16
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	6078      	str	r0, [r7, #4]
 801aeec:	6039      	str	r1, [r7, #0]
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	60fb      	str	r3, [r7, #12]
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	4a43      	ldr	r2, [pc, #268]	@ (801b004 <LL_TIM_Init+0x120>)
 801aef8:	4293      	cmp	r3, r2
 801aefa:	d017      	beq.n	801af2c <LL_TIM_Init+0x48>
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801af02:	d013      	beq.n	801af2c <LL_TIM_Init+0x48>
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	4a40      	ldr	r2, [pc, #256]	@ (801b008 <LL_TIM_Init+0x124>)
 801af08:	4293      	cmp	r3, r2
 801af0a:	d00f      	beq.n	801af2c <LL_TIM_Init+0x48>
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	4a3f      	ldr	r2, [pc, #252]	@ (801b00c <LL_TIM_Init+0x128>)
 801af10:	4293      	cmp	r3, r2
 801af12:	d00b      	beq.n	801af2c <LL_TIM_Init+0x48>
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	4a3e      	ldr	r2, [pc, #248]	@ (801b010 <LL_TIM_Init+0x12c>)
 801af18:	4293      	cmp	r3, r2
 801af1a:	d007      	beq.n	801af2c <LL_TIM_Init+0x48>
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	4a3d      	ldr	r2, [pc, #244]	@ (801b014 <LL_TIM_Init+0x130>)
 801af20:	4293      	cmp	r3, r2
 801af22:	d003      	beq.n	801af2c <LL_TIM_Init+0x48>
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	4a3c      	ldr	r2, [pc, #240]	@ (801b018 <LL_TIM_Init+0x134>)
 801af28:	4293      	cmp	r3, r2
 801af2a:	d106      	bne.n	801af3a <LL_TIM_Init+0x56>
 801af2c:	68fb      	ldr	r3, [r7, #12]
 801af2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801af32:	683b      	ldr	r3, [r7, #0]
 801af34:	685b      	ldr	r3, [r3, #4]
 801af36:	4313      	orrs	r3, r2
 801af38:	60fb      	str	r3, [r7, #12]
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	4a31      	ldr	r2, [pc, #196]	@ (801b004 <LL_TIM_Init+0x120>)
 801af3e:	4293      	cmp	r3, r2
 801af40:	d023      	beq.n	801af8a <LL_TIM_Init+0xa6>
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801af48:	d01f      	beq.n	801af8a <LL_TIM_Init+0xa6>
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	4a2e      	ldr	r2, [pc, #184]	@ (801b008 <LL_TIM_Init+0x124>)
 801af4e:	4293      	cmp	r3, r2
 801af50:	d01b      	beq.n	801af8a <LL_TIM_Init+0xa6>
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	4a2d      	ldr	r2, [pc, #180]	@ (801b00c <LL_TIM_Init+0x128>)
 801af56:	4293      	cmp	r3, r2
 801af58:	d017      	beq.n	801af8a <LL_TIM_Init+0xa6>
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	4a2c      	ldr	r2, [pc, #176]	@ (801b010 <LL_TIM_Init+0x12c>)
 801af5e:	4293      	cmp	r3, r2
 801af60:	d013      	beq.n	801af8a <LL_TIM_Init+0xa6>
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	4a2b      	ldr	r2, [pc, #172]	@ (801b014 <LL_TIM_Init+0x130>)
 801af66:	4293      	cmp	r3, r2
 801af68:	d00f      	beq.n	801af8a <LL_TIM_Init+0xa6>
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	4a2b      	ldr	r2, [pc, #172]	@ (801b01c <LL_TIM_Init+0x138>)
 801af6e:	4293      	cmp	r3, r2
 801af70:	d00b      	beq.n	801af8a <LL_TIM_Init+0xa6>
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	4a2a      	ldr	r2, [pc, #168]	@ (801b020 <LL_TIM_Init+0x13c>)
 801af76:	4293      	cmp	r3, r2
 801af78:	d007      	beq.n	801af8a <LL_TIM_Init+0xa6>
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	4a29      	ldr	r2, [pc, #164]	@ (801b024 <LL_TIM_Init+0x140>)
 801af7e:	4293      	cmp	r3, r2
 801af80:	d003      	beq.n	801af8a <LL_TIM_Init+0xa6>
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	4a24      	ldr	r2, [pc, #144]	@ (801b018 <LL_TIM_Init+0x134>)
 801af86:	4293      	cmp	r3, r2
 801af88:	d106      	bne.n	801af98 <LL_TIM_Init+0xb4>
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801af90:	683b      	ldr	r3, [r7, #0]
 801af92:	68db      	ldr	r3, [r3, #12]
 801af94:	4313      	orrs	r3, r2
 801af96:	60fb      	str	r3, [r7, #12]
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	68fa      	ldr	r2, [r7, #12]
 801af9c:	601a      	str	r2, [r3, #0]
 801af9e:	683b      	ldr	r3, [r7, #0]
 801afa0:	689b      	ldr	r3, [r3, #8]
 801afa2:	4619      	mov	r1, r3
 801afa4:	6878      	ldr	r0, [r7, #4]
 801afa6:	f7ff ff1b 	bl	801ade0 <LL_TIM_SetAutoReload>
 801afaa:	683b      	ldr	r3, [r7, #0]
 801afac:	881b      	ldrh	r3, [r3, #0]
 801afae:	4619      	mov	r1, r3
 801afb0:	6878      	ldr	r0, [r7, #4]
 801afb2:	f7ff ff07 	bl	801adc4 <LL_TIM_SetPrescaler>
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	4a12      	ldr	r2, [pc, #72]	@ (801b004 <LL_TIM_Init+0x120>)
 801afba:	4293      	cmp	r3, r2
 801afbc:	d013      	beq.n	801afe6 <LL_TIM_Init+0x102>
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	4a14      	ldr	r2, [pc, #80]	@ (801b014 <LL_TIM_Init+0x130>)
 801afc2:	4293      	cmp	r3, r2
 801afc4:	d00f      	beq.n	801afe6 <LL_TIM_Init+0x102>
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	4a14      	ldr	r2, [pc, #80]	@ (801b01c <LL_TIM_Init+0x138>)
 801afca:	4293      	cmp	r3, r2
 801afcc:	d00b      	beq.n	801afe6 <LL_TIM_Init+0x102>
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	4a13      	ldr	r2, [pc, #76]	@ (801b020 <LL_TIM_Init+0x13c>)
 801afd2:	4293      	cmp	r3, r2
 801afd4:	d007      	beq.n	801afe6 <LL_TIM_Init+0x102>
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	4a12      	ldr	r2, [pc, #72]	@ (801b024 <LL_TIM_Init+0x140>)
 801afda:	4293      	cmp	r3, r2
 801afdc:	d003      	beq.n	801afe6 <LL_TIM_Init+0x102>
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	4a0d      	ldr	r2, [pc, #52]	@ (801b018 <LL_TIM_Init+0x134>)
 801afe2:	4293      	cmp	r3, r2
 801afe4:	d105      	bne.n	801aff2 <LL_TIM_Init+0x10e>
 801afe6:	683b      	ldr	r3, [r7, #0]
 801afe8:	691b      	ldr	r3, [r3, #16]
 801afea:	4619      	mov	r1, r3
 801afec:	6878      	ldr	r0, [r7, #4]
 801afee:	f7ff ff05 	bl	801adfc <LL_TIM_SetRepetitionCounter>
 801aff2:	6878      	ldr	r0, [r7, #4]
 801aff4:	f7ff ff66 	bl	801aec4 <LL_TIM_GenerateEvent_UPDATE>
 801aff8:	2300      	movs	r3, #0
 801affa:	4618      	mov	r0, r3
 801affc:	3710      	adds	r7, #16
 801affe:	46bd      	mov	sp, r7
 801b000:	bd80      	pop	{r7, pc}
 801b002:	bf00      	nop
 801b004:	40012c00 	.word	0x40012c00
 801b008:	40000400 	.word	0x40000400
 801b00c:	40000800 	.word	0x40000800
 801b010:	40000c00 	.word	0x40000c00
 801b014:	40013400 	.word	0x40013400
 801b018:	40015000 	.word	0x40015000
 801b01c:	40014000 	.word	0x40014000
 801b020:	40014400 	.word	0x40014400
 801b024:	40014800 	.word	0x40014800

0801b028 <LL_TIM_OC_Init>:
 801b028:	b580      	push	{r7, lr}
 801b02a:	b086      	sub	sp, #24
 801b02c:	af00      	add	r7, sp, #0
 801b02e:	60f8      	str	r0, [r7, #12]
 801b030:	60b9      	str	r1, [r7, #8]
 801b032:	607a      	str	r2, [r7, #4]
 801b034:	2301      	movs	r3, #1
 801b036:	75fb      	strb	r3, [r7, #23]
 801b038:	68bb      	ldr	r3, [r7, #8]
 801b03a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801b03e:	d045      	beq.n	801b0cc <LL_TIM_OC_Init+0xa4>
 801b040:	68bb      	ldr	r3, [r7, #8]
 801b042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801b046:	d848      	bhi.n	801b0da <LL_TIM_OC_Init+0xb2>
 801b048:	68bb      	ldr	r3, [r7, #8]
 801b04a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b04e:	d036      	beq.n	801b0be <LL_TIM_OC_Init+0x96>
 801b050:	68bb      	ldr	r3, [r7, #8]
 801b052:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b056:	d840      	bhi.n	801b0da <LL_TIM_OC_Init+0xb2>
 801b058:	68bb      	ldr	r3, [r7, #8]
 801b05a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801b05e:	d027      	beq.n	801b0b0 <LL_TIM_OC_Init+0x88>
 801b060:	68bb      	ldr	r3, [r7, #8]
 801b062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801b066:	d838      	bhi.n	801b0da <LL_TIM_OC_Init+0xb2>
 801b068:	68bb      	ldr	r3, [r7, #8]
 801b06a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b06e:	d018      	beq.n	801b0a2 <LL_TIM_OC_Init+0x7a>
 801b070:	68bb      	ldr	r3, [r7, #8]
 801b072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b076:	d830      	bhi.n	801b0da <LL_TIM_OC_Init+0xb2>
 801b078:	68bb      	ldr	r3, [r7, #8]
 801b07a:	2b01      	cmp	r3, #1
 801b07c:	d003      	beq.n	801b086 <LL_TIM_OC_Init+0x5e>
 801b07e:	68bb      	ldr	r3, [r7, #8]
 801b080:	2b10      	cmp	r3, #16
 801b082:	d007      	beq.n	801b094 <LL_TIM_OC_Init+0x6c>
 801b084:	e029      	b.n	801b0da <LL_TIM_OC_Init+0xb2>
 801b086:	6879      	ldr	r1, [r7, #4]
 801b088:	68f8      	ldr	r0, [r7, #12]
 801b08a:	f000 f8ab 	bl	801b1e4 <OC1Config>
 801b08e:	4603      	mov	r3, r0
 801b090:	75fb      	strb	r3, [r7, #23]
 801b092:	e023      	b.n	801b0dc <LL_TIM_OC_Init+0xb4>
 801b094:	6879      	ldr	r1, [r7, #4]
 801b096:	68f8      	ldr	r0, [r7, #12]
 801b098:	f000 f92a 	bl	801b2f0 <OC2Config>
 801b09c:	4603      	mov	r3, r0
 801b09e:	75fb      	strb	r3, [r7, #23]
 801b0a0:	e01c      	b.n	801b0dc <LL_TIM_OC_Init+0xb4>
 801b0a2:	6879      	ldr	r1, [r7, #4]
 801b0a4:	68f8      	ldr	r0, [r7, #12]
 801b0a6:	f000 f9ad 	bl	801b404 <OC3Config>
 801b0aa:	4603      	mov	r3, r0
 801b0ac:	75fb      	strb	r3, [r7, #23]
 801b0ae:	e015      	b.n	801b0dc <LL_TIM_OC_Init+0xb4>
 801b0b0:	6879      	ldr	r1, [r7, #4]
 801b0b2:	68f8      	ldr	r0, [r7, #12]
 801b0b4:	f000 fa30 	bl	801b518 <OC4Config>
 801b0b8:	4603      	mov	r3, r0
 801b0ba:	75fb      	strb	r3, [r7, #23]
 801b0bc:	e00e      	b.n	801b0dc <LL_TIM_OC_Init+0xb4>
 801b0be:	6879      	ldr	r1, [r7, #4]
 801b0c0:	68f8      	ldr	r0, [r7, #12]
 801b0c2:	f000 fab3 	bl	801b62c <OC5Config>
 801b0c6:	4603      	mov	r3, r0
 801b0c8:	75fb      	strb	r3, [r7, #23]
 801b0ca:	e007      	b.n	801b0dc <LL_TIM_OC_Init+0xb4>
 801b0cc:	6879      	ldr	r1, [r7, #4]
 801b0ce:	68f8      	ldr	r0, [r7, #12]
 801b0d0:	f000 fb16 	bl	801b700 <OC6Config>
 801b0d4:	4603      	mov	r3, r0
 801b0d6:	75fb      	strb	r3, [r7, #23]
 801b0d8:	e000      	b.n	801b0dc <LL_TIM_OC_Init+0xb4>
 801b0da:	bf00      	nop
 801b0dc:	7dfb      	ldrb	r3, [r7, #23]
 801b0de:	4618      	mov	r0, r3
 801b0e0:	3718      	adds	r7, #24
 801b0e2:	46bd      	mov	sp, r7
 801b0e4:	bd80      	pop	{r7, pc}
	...

0801b0e8 <LL_TIM_BDTR_Init>:
 801b0e8:	b480      	push	{r7}
 801b0ea:	b085      	sub	sp, #20
 801b0ec:	af00      	add	r7, sp, #0
 801b0ee:	6078      	str	r0, [r7, #4]
 801b0f0:	6039      	str	r1, [r7, #0]
 801b0f2:	2300      	movs	r3, #0
 801b0f4:	60fb      	str	r3, [r7, #12]
 801b0f6:	68fb      	ldr	r3, [r7, #12]
 801b0f8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801b0fc:	683a      	ldr	r2, [r7, #0]
 801b0fe:	7b12      	ldrb	r2, [r2, #12]
 801b100:	4313      	orrs	r3, r2
 801b102:	60fb      	str	r3, [r7, #12]
 801b104:	68fb      	ldr	r3, [r7, #12]
 801b106:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801b10a:	683b      	ldr	r3, [r7, #0]
 801b10c:	689b      	ldr	r3, [r3, #8]
 801b10e:	4313      	orrs	r3, r2
 801b110:	60fb      	str	r3, [r7, #12]
 801b112:	68fb      	ldr	r3, [r7, #12]
 801b114:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801b118:	683b      	ldr	r3, [r7, #0]
 801b11a:	685b      	ldr	r3, [r3, #4]
 801b11c:	4313      	orrs	r3, r2
 801b11e:	60fb      	str	r3, [r7, #12]
 801b120:	68fb      	ldr	r3, [r7, #12]
 801b122:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801b126:	683b      	ldr	r3, [r7, #0]
 801b128:	681b      	ldr	r3, [r3, #0]
 801b12a:	4313      	orrs	r3, r2
 801b12c:	60fb      	str	r3, [r7, #12]
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b134:	683a      	ldr	r2, [r7, #0]
 801b136:	89d2      	ldrh	r2, [r2, #14]
 801b138:	4313      	orrs	r3, r2
 801b13a:	60fb      	str	r3, [r7, #12]
 801b13c:	68fb      	ldr	r3, [r7, #12]
 801b13e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801b142:	683b      	ldr	r3, [r7, #0]
 801b144:	691b      	ldr	r3, [r3, #16]
 801b146:	4313      	orrs	r3, r2
 801b148:	60fb      	str	r3, [r7, #12]
 801b14a:	68fb      	ldr	r3, [r7, #12]
 801b14c:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801b150:	683b      	ldr	r3, [r7, #0]
 801b152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b154:	4313      	orrs	r3, r2
 801b156:	60fb      	str	r3, [r7, #12]
 801b158:	68fb      	ldr	r3, [r7, #12]
 801b15a:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 801b15e:	683b      	ldr	r3, [r7, #0]
 801b160:	695b      	ldr	r3, [r3, #20]
 801b162:	4313      	orrs	r3, r2
 801b164:	60fb      	str	r3, [r7, #12]
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 801b16c:	683b      	ldr	r3, [r7, #0]
 801b16e:	699b      	ldr	r3, [r3, #24]
 801b170:	4313      	orrs	r3, r2
 801b172:	60fb      	str	r3, [r7, #12]
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	4a18      	ldr	r2, [pc, #96]	@ (801b1d8 <LL_TIM_BDTR_Init+0xf0>)
 801b178:	4293      	cmp	r3, r2
 801b17a:	d007      	beq.n	801b18c <LL_TIM_BDTR_Init+0xa4>
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	4a17      	ldr	r2, [pc, #92]	@ (801b1dc <LL_TIM_BDTR_Init+0xf4>)
 801b180:	4293      	cmp	r3, r2
 801b182:	d003      	beq.n	801b18c <LL_TIM_BDTR_Init+0xa4>
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	4a16      	ldr	r2, [pc, #88]	@ (801b1e0 <LL_TIM_BDTR_Init+0xf8>)
 801b188:	4293      	cmp	r3, r2
 801b18a:	d11b      	bne.n	801b1c4 <LL_TIM_BDTR_Init+0xdc>
 801b18c:	68fb      	ldr	r3, [r7, #12]
 801b18e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801b192:	683b      	ldr	r3, [r7, #0]
 801b194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b196:	4313      	orrs	r3, r2
 801b198:	60fb      	str	r3, [r7, #12]
 801b19a:	68fb      	ldr	r3, [r7, #12]
 801b19c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801b1a0:	683b      	ldr	r3, [r7, #0]
 801b1a2:	69db      	ldr	r3, [r3, #28]
 801b1a4:	4313      	orrs	r3, r2
 801b1a6:	60fb      	str	r3, [r7, #12]
 801b1a8:	68fb      	ldr	r3, [r7, #12]
 801b1aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801b1ae:	683b      	ldr	r3, [r7, #0]
 801b1b0:	6a1b      	ldr	r3, [r3, #32]
 801b1b2:	4313      	orrs	r3, r2
 801b1b4:	60fb      	str	r3, [r7, #12]
 801b1b6:	68fb      	ldr	r3, [r7, #12]
 801b1b8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 801b1bc:	683b      	ldr	r3, [r7, #0]
 801b1be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b1c0:	4313      	orrs	r3, r2
 801b1c2:	60fb      	str	r3, [r7, #12]
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	68fa      	ldr	r2, [r7, #12]
 801b1c8:	645a      	str	r2, [r3, #68]	@ 0x44
 801b1ca:	2300      	movs	r3, #0
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	3714      	adds	r7, #20
 801b1d0:	46bd      	mov	sp, r7
 801b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1d6:	4770      	bx	lr
 801b1d8:	40012c00 	.word	0x40012c00
 801b1dc:	40013400 	.word	0x40013400
 801b1e0:	40015000 	.word	0x40015000

0801b1e4 <OC1Config>:
 801b1e4:	b580      	push	{r7, lr}
 801b1e6:	b086      	sub	sp, #24
 801b1e8:	af00      	add	r7, sp, #0
 801b1ea:	6078      	str	r0, [r7, #4]
 801b1ec:	6039      	str	r1, [r7, #0]
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	6a1b      	ldr	r3, [r3, #32]
 801b1f2:	f023 0201 	bic.w	r2, r3, #1
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	621a      	str	r2, [r3, #32]
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	6a1b      	ldr	r3, [r3, #32]
 801b1fe:	617b      	str	r3, [r7, #20]
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	685b      	ldr	r3, [r3, #4]
 801b204:	613b      	str	r3, [r7, #16]
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	699b      	ldr	r3, [r3, #24]
 801b20a:	60fb      	str	r3, [r7, #12]
 801b20c:	68fb      	ldr	r3, [r7, #12]
 801b20e:	f023 0303 	bic.w	r3, r3, #3
 801b212:	60fb      	str	r3, [r7, #12]
 801b214:	68fb      	ldr	r3, [r7, #12]
 801b216:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801b21a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801b21e:	683a      	ldr	r2, [r7, #0]
 801b220:	6812      	ldr	r2, [r2, #0]
 801b222:	4313      	orrs	r3, r2
 801b224:	60fb      	str	r3, [r7, #12]
 801b226:	697b      	ldr	r3, [r7, #20]
 801b228:	f023 0202 	bic.w	r2, r3, #2
 801b22c:	683b      	ldr	r3, [r7, #0]
 801b22e:	691b      	ldr	r3, [r3, #16]
 801b230:	4313      	orrs	r3, r2
 801b232:	617b      	str	r3, [r7, #20]
 801b234:	697b      	ldr	r3, [r7, #20]
 801b236:	f023 0201 	bic.w	r2, r3, #1
 801b23a:	683b      	ldr	r3, [r7, #0]
 801b23c:	685b      	ldr	r3, [r3, #4]
 801b23e:	4313      	orrs	r3, r2
 801b240:	617b      	str	r3, [r7, #20]
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	4a24      	ldr	r2, [pc, #144]	@ (801b2d8 <OC1Config+0xf4>)
 801b246:	4293      	cmp	r3, r2
 801b248:	d013      	beq.n	801b272 <OC1Config+0x8e>
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	4a23      	ldr	r2, [pc, #140]	@ (801b2dc <OC1Config+0xf8>)
 801b24e:	4293      	cmp	r3, r2
 801b250:	d00f      	beq.n	801b272 <OC1Config+0x8e>
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	4a22      	ldr	r2, [pc, #136]	@ (801b2e0 <OC1Config+0xfc>)
 801b256:	4293      	cmp	r3, r2
 801b258:	d00b      	beq.n	801b272 <OC1Config+0x8e>
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	4a21      	ldr	r2, [pc, #132]	@ (801b2e4 <OC1Config+0x100>)
 801b25e:	4293      	cmp	r3, r2
 801b260:	d007      	beq.n	801b272 <OC1Config+0x8e>
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	4a20      	ldr	r2, [pc, #128]	@ (801b2e8 <OC1Config+0x104>)
 801b266:	4293      	cmp	r3, r2
 801b268:	d003      	beq.n	801b272 <OC1Config+0x8e>
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	4a1f      	ldr	r2, [pc, #124]	@ (801b2ec <OC1Config+0x108>)
 801b26e:	4293      	cmp	r3, r2
 801b270:	d11e      	bne.n	801b2b0 <OC1Config+0xcc>
 801b272:	697b      	ldr	r3, [r7, #20]
 801b274:	f023 0208 	bic.w	r2, r3, #8
 801b278:	683b      	ldr	r3, [r7, #0]
 801b27a:	695b      	ldr	r3, [r3, #20]
 801b27c:	009b      	lsls	r3, r3, #2
 801b27e:	4313      	orrs	r3, r2
 801b280:	617b      	str	r3, [r7, #20]
 801b282:	697b      	ldr	r3, [r7, #20]
 801b284:	f023 0204 	bic.w	r2, r3, #4
 801b288:	683b      	ldr	r3, [r7, #0]
 801b28a:	689b      	ldr	r3, [r3, #8]
 801b28c:	009b      	lsls	r3, r3, #2
 801b28e:	4313      	orrs	r3, r2
 801b290:	617b      	str	r3, [r7, #20]
 801b292:	693b      	ldr	r3, [r7, #16]
 801b294:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801b298:	683b      	ldr	r3, [r7, #0]
 801b29a:	699b      	ldr	r3, [r3, #24]
 801b29c:	4313      	orrs	r3, r2
 801b29e:	613b      	str	r3, [r7, #16]
 801b2a0:	693b      	ldr	r3, [r7, #16]
 801b2a2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801b2a6:	683b      	ldr	r3, [r7, #0]
 801b2a8:	69db      	ldr	r3, [r3, #28]
 801b2aa:	005b      	lsls	r3, r3, #1
 801b2ac:	4313      	orrs	r3, r2
 801b2ae:	613b      	str	r3, [r7, #16]
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	693a      	ldr	r2, [r7, #16]
 801b2b4:	605a      	str	r2, [r3, #4]
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	68fa      	ldr	r2, [r7, #12]
 801b2ba:	619a      	str	r2, [r3, #24]
 801b2bc:	683b      	ldr	r3, [r7, #0]
 801b2be:	68db      	ldr	r3, [r3, #12]
 801b2c0:	4619      	mov	r1, r3
 801b2c2:	6878      	ldr	r0, [r7, #4]
 801b2c4:	f7ff fda8 	bl	801ae18 <LL_TIM_OC_SetCompareCH1>
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	697a      	ldr	r2, [r7, #20]
 801b2cc:	621a      	str	r2, [r3, #32]
 801b2ce:	2300      	movs	r3, #0
 801b2d0:	4618      	mov	r0, r3
 801b2d2:	3718      	adds	r7, #24
 801b2d4:	46bd      	mov	sp, r7
 801b2d6:	bd80      	pop	{r7, pc}
 801b2d8:	40012c00 	.word	0x40012c00
 801b2dc:	40013400 	.word	0x40013400
 801b2e0:	40014000 	.word	0x40014000
 801b2e4:	40014400 	.word	0x40014400
 801b2e8:	40014800 	.word	0x40014800
 801b2ec:	40015000 	.word	0x40015000

0801b2f0 <OC2Config>:
 801b2f0:	b580      	push	{r7, lr}
 801b2f2:	b086      	sub	sp, #24
 801b2f4:	af00      	add	r7, sp, #0
 801b2f6:	6078      	str	r0, [r7, #4]
 801b2f8:	6039      	str	r1, [r7, #0]
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	6a1b      	ldr	r3, [r3, #32]
 801b2fe:	f023 0210 	bic.w	r2, r3, #16
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	621a      	str	r2, [r3, #32]
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	6a1b      	ldr	r3, [r3, #32]
 801b30a:	617b      	str	r3, [r7, #20]
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	685b      	ldr	r3, [r3, #4]
 801b310:	613b      	str	r3, [r7, #16]
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	699b      	ldr	r3, [r3, #24]
 801b316:	60fb      	str	r3, [r7, #12]
 801b318:	68fb      	ldr	r3, [r7, #12]
 801b31a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801b31e:	60fb      	str	r3, [r7, #12]
 801b320:	68fb      	ldr	r3, [r7, #12]
 801b322:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801b326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801b32a:	683a      	ldr	r2, [r7, #0]
 801b32c:	6812      	ldr	r2, [r2, #0]
 801b32e:	0212      	lsls	r2, r2, #8
 801b330:	4313      	orrs	r3, r2
 801b332:	60fb      	str	r3, [r7, #12]
 801b334:	697b      	ldr	r3, [r7, #20]
 801b336:	f023 0220 	bic.w	r2, r3, #32
 801b33a:	683b      	ldr	r3, [r7, #0]
 801b33c:	691b      	ldr	r3, [r3, #16]
 801b33e:	011b      	lsls	r3, r3, #4
 801b340:	4313      	orrs	r3, r2
 801b342:	617b      	str	r3, [r7, #20]
 801b344:	697b      	ldr	r3, [r7, #20]
 801b346:	f023 0210 	bic.w	r2, r3, #16
 801b34a:	683b      	ldr	r3, [r7, #0]
 801b34c:	685b      	ldr	r3, [r3, #4]
 801b34e:	011b      	lsls	r3, r3, #4
 801b350:	4313      	orrs	r3, r2
 801b352:	617b      	str	r3, [r7, #20]
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	4a25      	ldr	r2, [pc, #148]	@ (801b3ec <OC2Config+0xfc>)
 801b358:	4293      	cmp	r3, r2
 801b35a:	d013      	beq.n	801b384 <OC2Config+0x94>
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	4a24      	ldr	r2, [pc, #144]	@ (801b3f0 <OC2Config+0x100>)
 801b360:	4293      	cmp	r3, r2
 801b362:	d00f      	beq.n	801b384 <OC2Config+0x94>
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	4a23      	ldr	r2, [pc, #140]	@ (801b3f4 <OC2Config+0x104>)
 801b368:	4293      	cmp	r3, r2
 801b36a:	d00b      	beq.n	801b384 <OC2Config+0x94>
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	4a22      	ldr	r2, [pc, #136]	@ (801b3f8 <OC2Config+0x108>)
 801b370:	4293      	cmp	r3, r2
 801b372:	d007      	beq.n	801b384 <OC2Config+0x94>
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	4a21      	ldr	r2, [pc, #132]	@ (801b3fc <OC2Config+0x10c>)
 801b378:	4293      	cmp	r3, r2
 801b37a:	d003      	beq.n	801b384 <OC2Config+0x94>
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	4a20      	ldr	r2, [pc, #128]	@ (801b400 <OC2Config+0x110>)
 801b380:	4293      	cmp	r3, r2
 801b382:	d11f      	bne.n	801b3c4 <OC2Config+0xd4>
 801b384:	697b      	ldr	r3, [r7, #20]
 801b386:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801b38a:	683b      	ldr	r3, [r7, #0]
 801b38c:	695b      	ldr	r3, [r3, #20]
 801b38e:	019b      	lsls	r3, r3, #6
 801b390:	4313      	orrs	r3, r2
 801b392:	617b      	str	r3, [r7, #20]
 801b394:	697b      	ldr	r3, [r7, #20]
 801b396:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 801b39a:	683b      	ldr	r3, [r7, #0]
 801b39c:	689b      	ldr	r3, [r3, #8]
 801b39e:	019b      	lsls	r3, r3, #6
 801b3a0:	4313      	orrs	r3, r2
 801b3a2:	617b      	str	r3, [r7, #20]
 801b3a4:	693b      	ldr	r3, [r7, #16]
 801b3a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801b3aa:	683b      	ldr	r3, [r7, #0]
 801b3ac:	699b      	ldr	r3, [r3, #24]
 801b3ae:	009b      	lsls	r3, r3, #2
 801b3b0:	4313      	orrs	r3, r2
 801b3b2:	613b      	str	r3, [r7, #16]
 801b3b4:	693b      	ldr	r3, [r7, #16]
 801b3b6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801b3ba:	683b      	ldr	r3, [r7, #0]
 801b3bc:	69db      	ldr	r3, [r3, #28]
 801b3be:	00db      	lsls	r3, r3, #3
 801b3c0:	4313      	orrs	r3, r2
 801b3c2:	613b      	str	r3, [r7, #16]
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	693a      	ldr	r2, [r7, #16]
 801b3c8:	605a      	str	r2, [r3, #4]
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	68fa      	ldr	r2, [r7, #12]
 801b3ce:	619a      	str	r2, [r3, #24]
 801b3d0:	683b      	ldr	r3, [r7, #0]
 801b3d2:	68db      	ldr	r3, [r3, #12]
 801b3d4:	4619      	mov	r1, r3
 801b3d6:	6878      	ldr	r0, [r7, #4]
 801b3d8:	f7ff fd2c 	bl	801ae34 <LL_TIM_OC_SetCompareCH2>
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	697a      	ldr	r2, [r7, #20]
 801b3e0:	621a      	str	r2, [r3, #32]
 801b3e2:	2300      	movs	r3, #0
 801b3e4:	4618      	mov	r0, r3
 801b3e6:	3718      	adds	r7, #24
 801b3e8:	46bd      	mov	sp, r7
 801b3ea:	bd80      	pop	{r7, pc}
 801b3ec:	40012c00 	.word	0x40012c00
 801b3f0:	40013400 	.word	0x40013400
 801b3f4:	40014000 	.word	0x40014000
 801b3f8:	40014400 	.word	0x40014400
 801b3fc:	40014800 	.word	0x40014800
 801b400:	40015000 	.word	0x40015000

0801b404 <OC3Config>:
 801b404:	b580      	push	{r7, lr}
 801b406:	b086      	sub	sp, #24
 801b408:	af00      	add	r7, sp, #0
 801b40a:	6078      	str	r0, [r7, #4]
 801b40c:	6039      	str	r1, [r7, #0]
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	6a1b      	ldr	r3, [r3, #32]
 801b412:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	621a      	str	r2, [r3, #32]
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	6a1b      	ldr	r3, [r3, #32]
 801b41e:	617b      	str	r3, [r7, #20]
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	685b      	ldr	r3, [r3, #4]
 801b424:	613b      	str	r3, [r7, #16]
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	69db      	ldr	r3, [r3, #28]
 801b42a:	60fb      	str	r3, [r7, #12]
 801b42c:	68fb      	ldr	r3, [r7, #12]
 801b42e:	f023 0303 	bic.w	r3, r3, #3
 801b432:	60fb      	str	r3, [r7, #12]
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801b43a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801b43e:	683a      	ldr	r2, [r7, #0]
 801b440:	6812      	ldr	r2, [r2, #0]
 801b442:	4313      	orrs	r3, r2
 801b444:	60fb      	str	r3, [r7, #12]
 801b446:	697b      	ldr	r3, [r7, #20]
 801b448:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801b44c:	683b      	ldr	r3, [r7, #0]
 801b44e:	691b      	ldr	r3, [r3, #16]
 801b450:	021b      	lsls	r3, r3, #8
 801b452:	4313      	orrs	r3, r2
 801b454:	617b      	str	r3, [r7, #20]
 801b456:	697b      	ldr	r3, [r7, #20]
 801b458:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801b45c:	683b      	ldr	r3, [r7, #0]
 801b45e:	685b      	ldr	r3, [r3, #4]
 801b460:	021b      	lsls	r3, r3, #8
 801b462:	4313      	orrs	r3, r2
 801b464:	617b      	str	r3, [r7, #20]
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	4a25      	ldr	r2, [pc, #148]	@ (801b500 <OC3Config+0xfc>)
 801b46a:	4293      	cmp	r3, r2
 801b46c:	d013      	beq.n	801b496 <OC3Config+0x92>
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	4a24      	ldr	r2, [pc, #144]	@ (801b504 <OC3Config+0x100>)
 801b472:	4293      	cmp	r3, r2
 801b474:	d00f      	beq.n	801b496 <OC3Config+0x92>
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	4a23      	ldr	r2, [pc, #140]	@ (801b508 <OC3Config+0x104>)
 801b47a:	4293      	cmp	r3, r2
 801b47c:	d00b      	beq.n	801b496 <OC3Config+0x92>
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	4a22      	ldr	r2, [pc, #136]	@ (801b50c <OC3Config+0x108>)
 801b482:	4293      	cmp	r3, r2
 801b484:	d007      	beq.n	801b496 <OC3Config+0x92>
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	4a21      	ldr	r2, [pc, #132]	@ (801b510 <OC3Config+0x10c>)
 801b48a:	4293      	cmp	r3, r2
 801b48c:	d003      	beq.n	801b496 <OC3Config+0x92>
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	4a20      	ldr	r2, [pc, #128]	@ (801b514 <OC3Config+0x110>)
 801b492:	4293      	cmp	r3, r2
 801b494:	d11f      	bne.n	801b4d6 <OC3Config+0xd2>
 801b496:	697b      	ldr	r3, [r7, #20]
 801b498:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801b49c:	683b      	ldr	r3, [r7, #0]
 801b49e:	695b      	ldr	r3, [r3, #20]
 801b4a0:	029b      	lsls	r3, r3, #10
 801b4a2:	4313      	orrs	r3, r2
 801b4a4:	617b      	str	r3, [r7, #20]
 801b4a6:	697b      	ldr	r3, [r7, #20]
 801b4a8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801b4ac:	683b      	ldr	r3, [r7, #0]
 801b4ae:	689b      	ldr	r3, [r3, #8]
 801b4b0:	029b      	lsls	r3, r3, #10
 801b4b2:	4313      	orrs	r3, r2
 801b4b4:	617b      	str	r3, [r7, #20]
 801b4b6:	693b      	ldr	r3, [r7, #16]
 801b4b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801b4bc:	683b      	ldr	r3, [r7, #0]
 801b4be:	699b      	ldr	r3, [r3, #24]
 801b4c0:	011b      	lsls	r3, r3, #4
 801b4c2:	4313      	orrs	r3, r2
 801b4c4:	613b      	str	r3, [r7, #16]
 801b4c6:	693b      	ldr	r3, [r7, #16]
 801b4c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801b4cc:	683b      	ldr	r3, [r7, #0]
 801b4ce:	69db      	ldr	r3, [r3, #28]
 801b4d0:	015b      	lsls	r3, r3, #5
 801b4d2:	4313      	orrs	r3, r2
 801b4d4:	613b      	str	r3, [r7, #16]
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	693a      	ldr	r2, [r7, #16]
 801b4da:	605a      	str	r2, [r3, #4]
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	68fa      	ldr	r2, [r7, #12]
 801b4e0:	61da      	str	r2, [r3, #28]
 801b4e2:	683b      	ldr	r3, [r7, #0]
 801b4e4:	68db      	ldr	r3, [r3, #12]
 801b4e6:	4619      	mov	r1, r3
 801b4e8:	6878      	ldr	r0, [r7, #4]
 801b4ea:	f7ff fcb1 	bl	801ae50 <LL_TIM_OC_SetCompareCH3>
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	697a      	ldr	r2, [r7, #20]
 801b4f2:	621a      	str	r2, [r3, #32]
 801b4f4:	2300      	movs	r3, #0
 801b4f6:	4618      	mov	r0, r3
 801b4f8:	3718      	adds	r7, #24
 801b4fa:	46bd      	mov	sp, r7
 801b4fc:	bd80      	pop	{r7, pc}
 801b4fe:	bf00      	nop
 801b500:	40012c00 	.word	0x40012c00
 801b504:	40013400 	.word	0x40013400
 801b508:	40014000 	.word	0x40014000
 801b50c:	40014400 	.word	0x40014400
 801b510:	40014800 	.word	0x40014800
 801b514:	40015000 	.word	0x40015000

0801b518 <OC4Config>:
 801b518:	b580      	push	{r7, lr}
 801b51a:	b086      	sub	sp, #24
 801b51c:	af00      	add	r7, sp, #0
 801b51e:	6078      	str	r0, [r7, #4]
 801b520:	6039      	str	r1, [r7, #0]
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	6a1b      	ldr	r3, [r3, #32]
 801b526:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	621a      	str	r2, [r3, #32]
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	6a1b      	ldr	r3, [r3, #32]
 801b532:	617b      	str	r3, [r7, #20]
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	685b      	ldr	r3, [r3, #4]
 801b538:	613b      	str	r3, [r7, #16]
 801b53a:	687b      	ldr	r3, [r7, #4]
 801b53c:	69db      	ldr	r3, [r3, #28]
 801b53e:	60fb      	str	r3, [r7, #12]
 801b540:	68fb      	ldr	r3, [r7, #12]
 801b542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801b546:	60fb      	str	r3, [r7, #12]
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801b54e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801b552:	683a      	ldr	r2, [r7, #0]
 801b554:	6812      	ldr	r2, [r2, #0]
 801b556:	0212      	lsls	r2, r2, #8
 801b558:	4313      	orrs	r3, r2
 801b55a:	60fb      	str	r3, [r7, #12]
 801b55c:	697b      	ldr	r3, [r7, #20]
 801b55e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801b562:	683b      	ldr	r3, [r7, #0]
 801b564:	691b      	ldr	r3, [r3, #16]
 801b566:	031b      	lsls	r3, r3, #12
 801b568:	4313      	orrs	r3, r2
 801b56a:	617b      	str	r3, [r7, #20]
 801b56c:	697b      	ldr	r3, [r7, #20]
 801b56e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801b572:	683b      	ldr	r3, [r7, #0]
 801b574:	685b      	ldr	r3, [r3, #4]
 801b576:	031b      	lsls	r3, r3, #12
 801b578:	4313      	orrs	r3, r2
 801b57a:	617b      	str	r3, [r7, #20]
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	4a25      	ldr	r2, [pc, #148]	@ (801b614 <OC4Config+0xfc>)
 801b580:	4293      	cmp	r3, r2
 801b582:	d013      	beq.n	801b5ac <OC4Config+0x94>
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	4a24      	ldr	r2, [pc, #144]	@ (801b618 <OC4Config+0x100>)
 801b588:	4293      	cmp	r3, r2
 801b58a:	d00f      	beq.n	801b5ac <OC4Config+0x94>
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	4a23      	ldr	r2, [pc, #140]	@ (801b61c <OC4Config+0x104>)
 801b590:	4293      	cmp	r3, r2
 801b592:	d00b      	beq.n	801b5ac <OC4Config+0x94>
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	4a22      	ldr	r2, [pc, #136]	@ (801b620 <OC4Config+0x108>)
 801b598:	4293      	cmp	r3, r2
 801b59a:	d007      	beq.n	801b5ac <OC4Config+0x94>
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	4a21      	ldr	r2, [pc, #132]	@ (801b624 <OC4Config+0x10c>)
 801b5a0:	4293      	cmp	r3, r2
 801b5a2:	d003      	beq.n	801b5ac <OC4Config+0x94>
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	4a20      	ldr	r2, [pc, #128]	@ (801b628 <OC4Config+0x110>)
 801b5a8:	4293      	cmp	r3, r2
 801b5aa:	d11f      	bne.n	801b5ec <OC4Config+0xd4>
 801b5ac:	697b      	ldr	r3, [r7, #20]
 801b5ae:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 801b5b2:	683b      	ldr	r3, [r7, #0]
 801b5b4:	695b      	ldr	r3, [r3, #20]
 801b5b6:	039b      	lsls	r3, r3, #14
 801b5b8:	4313      	orrs	r3, r2
 801b5ba:	617b      	str	r3, [r7, #20]
 801b5bc:	697b      	ldr	r3, [r7, #20]
 801b5be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801b5c2:	683b      	ldr	r3, [r7, #0]
 801b5c4:	689b      	ldr	r3, [r3, #8]
 801b5c6:	039b      	lsls	r3, r3, #14
 801b5c8:	4313      	orrs	r3, r2
 801b5ca:	617b      	str	r3, [r7, #20]
 801b5cc:	693b      	ldr	r3, [r7, #16]
 801b5ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801b5d2:	683b      	ldr	r3, [r7, #0]
 801b5d4:	699b      	ldr	r3, [r3, #24]
 801b5d6:	019b      	lsls	r3, r3, #6
 801b5d8:	4313      	orrs	r3, r2
 801b5da:	613b      	str	r3, [r7, #16]
 801b5dc:	693b      	ldr	r3, [r7, #16]
 801b5de:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 801b5e2:	683b      	ldr	r3, [r7, #0]
 801b5e4:	69db      	ldr	r3, [r3, #28]
 801b5e6:	01db      	lsls	r3, r3, #7
 801b5e8:	4313      	orrs	r3, r2
 801b5ea:	613b      	str	r3, [r7, #16]
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	693a      	ldr	r2, [r7, #16]
 801b5f0:	605a      	str	r2, [r3, #4]
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	68fa      	ldr	r2, [r7, #12]
 801b5f6:	61da      	str	r2, [r3, #28]
 801b5f8:	683b      	ldr	r3, [r7, #0]
 801b5fa:	68db      	ldr	r3, [r3, #12]
 801b5fc:	4619      	mov	r1, r3
 801b5fe:	6878      	ldr	r0, [r7, #4]
 801b600:	f7ff fc34 	bl	801ae6c <LL_TIM_OC_SetCompareCH4>
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	697a      	ldr	r2, [r7, #20]
 801b608:	621a      	str	r2, [r3, #32]
 801b60a:	2300      	movs	r3, #0
 801b60c:	4618      	mov	r0, r3
 801b60e:	3718      	adds	r7, #24
 801b610:	46bd      	mov	sp, r7
 801b612:	bd80      	pop	{r7, pc}
 801b614:	40012c00 	.word	0x40012c00
 801b618:	40013400 	.word	0x40013400
 801b61c:	40014000 	.word	0x40014000
 801b620:	40014400 	.word	0x40014400
 801b624:	40014800 	.word	0x40014800
 801b628:	40015000 	.word	0x40015000

0801b62c <OC5Config>:
 801b62c:	b580      	push	{r7, lr}
 801b62e:	b084      	sub	sp, #16
 801b630:	af00      	add	r7, sp, #0
 801b632:	6078      	str	r0, [r7, #4]
 801b634:	6039      	str	r1, [r7, #0]
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	6a1b      	ldr	r3, [r3, #32]
 801b63a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	621a      	str	r2, [r3, #32]
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	6a1b      	ldr	r3, [r3, #32]
 801b646:	60fb      	str	r3, [r7, #12]
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b64c:	60bb      	str	r3, [r7, #8]
 801b64e:	68bb      	ldr	r3, [r7, #8]
 801b650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801b654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801b658:	683a      	ldr	r2, [r7, #0]
 801b65a:	6812      	ldr	r2, [r2, #0]
 801b65c:	4313      	orrs	r3, r2
 801b65e:	60bb      	str	r3, [r7, #8]
 801b660:	68fb      	ldr	r3, [r7, #12]
 801b662:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 801b666:	683b      	ldr	r3, [r7, #0]
 801b668:	691b      	ldr	r3, [r3, #16]
 801b66a:	041b      	lsls	r3, r3, #16
 801b66c:	4313      	orrs	r3, r2
 801b66e:	60fb      	str	r3, [r7, #12]
 801b670:	68fb      	ldr	r3, [r7, #12]
 801b672:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801b676:	683b      	ldr	r3, [r7, #0]
 801b678:	685b      	ldr	r3, [r3, #4]
 801b67a:	041b      	lsls	r3, r3, #16
 801b67c:	4313      	orrs	r3, r2
 801b67e:	60fb      	str	r3, [r7, #12]
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	4a19      	ldr	r2, [pc, #100]	@ (801b6e8 <OC5Config+0xbc>)
 801b684:	4293      	cmp	r3, r2
 801b686:	d013      	beq.n	801b6b0 <OC5Config+0x84>
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	4a18      	ldr	r2, [pc, #96]	@ (801b6ec <OC5Config+0xc0>)
 801b68c:	4293      	cmp	r3, r2
 801b68e:	d00f      	beq.n	801b6b0 <OC5Config+0x84>
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	4a17      	ldr	r2, [pc, #92]	@ (801b6f0 <OC5Config+0xc4>)
 801b694:	4293      	cmp	r3, r2
 801b696:	d00b      	beq.n	801b6b0 <OC5Config+0x84>
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	4a16      	ldr	r2, [pc, #88]	@ (801b6f4 <OC5Config+0xc8>)
 801b69c:	4293      	cmp	r3, r2
 801b69e:	d007      	beq.n	801b6b0 <OC5Config+0x84>
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	4a15      	ldr	r2, [pc, #84]	@ (801b6f8 <OC5Config+0xcc>)
 801b6a4:	4293      	cmp	r3, r2
 801b6a6:	d003      	beq.n	801b6b0 <OC5Config+0x84>
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	4a14      	ldr	r2, [pc, #80]	@ (801b6fc <OC5Config+0xd0>)
 801b6ac:	4293      	cmp	r3, r2
 801b6ae:	d109      	bne.n	801b6c4 <OC5Config+0x98>
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	685b      	ldr	r3, [r3, #4]
 801b6b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801b6b8:	683b      	ldr	r3, [r7, #0]
 801b6ba:	699b      	ldr	r3, [r3, #24]
 801b6bc:	021b      	lsls	r3, r3, #8
 801b6be:	431a      	orrs	r2, r3
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	605a      	str	r2, [r3, #4]
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	68ba      	ldr	r2, [r7, #8]
 801b6c8:	651a      	str	r2, [r3, #80]	@ 0x50
 801b6ca:	683b      	ldr	r3, [r7, #0]
 801b6cc:	68db      	ldr	r3, [r3, #12]
 801b6ce:	4619      	mov	r1, r3
 801b6d0:	6878      	ldr	r0, [r7, #4]
 801b6d2:	f7ff fbd9 	bl	801ae88 <LL_TIM_OC_SetCompareCH5>
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	68fa      	ldr	r2, [r7, #12]
 801b6da:	621a      	str	r2, [r3, #32]
 801b6dc:	2300      	movs	r3, #0
 801b6de:	4618      	mov	r0, r3
 801b6e0:	3710      	adds	r7, #16
 801b6e2:	46bd      	mov	sp, r7
 801b6e4:	bd80      	pop	{r7, pc}
 801b6e6:	bf00      	nop
 801b6e8:	40012c00 	.word	0x40012c00
 801b6ec:	40013400 	.word	0x40013400
 801b6f0:	40014000 	.word	0x40014000
 801b6f4:	40014400 	.word	0x40014400
 801b6f8:	40014800 	.word	0x40014800
 801b6fc:	40015000 	.word	0x40015000

0801b700 <OC6Config>:
 801b700:	b580      	push	{r7, lr}
 801b702:	b084      	sub	sp, #16
 801b704:	af00      	add	r7, sp, #0
 801b706:	6078      	str	r0, [r7, #4]
 801b708:	6039      	str	r1, [r7, #0]
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	6a1b      	ldr	r3, [r3, #32]
 801b70e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	621a      	str	r2, [r3, #32]
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	6a1b      	ldr	r3, [r3, #32]
 801b71a:	60fb      	str	r3, [r7, #12]
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b720:	60bb      	str	r3, [r7, #8]
 801b722:	68bb      	ldr	r3, [r7, #8]
 801b724:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801b728:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801b72c:	683a      	ldr	r2, [r7, #0]
 801b72e:	6812      	ldr	r2, [r2, #0]
 801b730:	0212      	lsls	r2, r2, #8
 801b732:	4313      	orrs	r3, r2
 801b734:	60bb      	str	r3, [r7, #8]
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801b73c:	683b      	ldr	r3, [r7, #0]
 801b73e:	691b      	ldr	r3, [r3, #16]
 801b740:	051b      	lsls	r3, r3, #20
 801b742:	4313      	orrs	r3, r2
 801b744:	60fb      	str	r3, [r7, #12]
 801b746:	68fb      	ldr	r3, [r7, #12]
 801b748:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801b74c:	683b      	ldr	r3, [r7, #0]
 801b74e:	685b      	ldr	r3, [r3, #4]
 801b750:	051b      	lsls	r3, r3, #20
 801b752:	4313      	orrs	r3, r2
 801b754:	60fb      	str	r3, [r7, #12]
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	4a18      	ldr	r2, [pc, #96]	@ (801b7bc <OC6Config+0xbc>)
 801b75a:	4293      	cmp	r3, r2
 801b75c:	d013      	beq.n	801b786 <OC6Config+0x86>
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	4a17      	ldr	r2, [pc, #92]	@ (801b7c0 <OC6Config+0xc0>)
 801b762:	4293      	cmp	r3, r2
 801b764:	d00f      	beq.n	801b786 <OC6Config+0x86>
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	4a16      	ldr	r2, [pc, #88]	@ (801b7c4 <OC6Config+0xc4>)
 801b76a:	4293      	cmp	r3, r2
 801b76c:	d00b      	beq.n	801b786 <OC6Config+0x86>
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	4a15      	ldr	r2, [pc, #84]	@ (801b7c8 <OC6Config+0xc8>)
 801b772:	4293      	cmp	r3, r2
 801b774:	d007      	beq.n	801b786 <OC6Config+0x86>
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	4a14      	ldr	r2, [pc, #80]	@ (801b7cc <OC6Config+0xcc>)
 801b77a:	4293      	cmp	r3, r2
 801b77c:	d003      	beq.n	801b786 <OC6Config+0x86>
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	4a13      	ldr	r2, [pc, #76]	@ (801b7d0 <OC6Config+0xd0>)
 801b782:	4293      	cmp	r3, r2
 801b784:	d109      	bne.n	801b79a <OC6Config+0x9a>
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	685b      	ldr	r3, [r3, #4]
 801b78a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 801b78e:	683b      	ldr	r3, [r7, #0]
 801b790:	699b      	ldr	r3, [r3, #24]
 801b792:	029b      	lsls	r3, r3, #10
 801b794:	431a      	orrs	r2, r3
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	605a      	str	r2, [r3, #4]
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	68ba      	ldr	r2, [r7, #8]
 801b79e:	651a      	str	r2, [r3, #80]	@ 0x50
 801b7a0:	683b      	ldr	r3, [r7, #0]
 801b7a2:	68db      	ldr	r3, [r3, #12]
 801b7a4:	4619      	mov	r1, r3
 801b7a6:	6878      	ldr	r0, [r7, #4]
 801b7a8:	f7ff fb7e 	bl	801aea8 <LL_TIM_OC_SetCompareCH6>
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	68fa      	ldr	r2, [r7, #12]
 801b7b0:	621a      	str	r2, [r3, #32]
 801b7b2:	2300      	movs	r3, #0
 801b7b4:	4618      	mov	r0, r3
 801b7b6:	3710      	adds	r7, #16
 801b7b8:	46bd      	mov	sp, r7
 801b7ba:	bd80      	pop	{r7, pc}
 801b7bc:	40012c00 	.word	0x40012c00
 801b7c0:	40013400 	.word	0x40013400
 801b7c4:	40014000 	.word	0x40014000
 801b7c8:	40014400 	.word	0x40014400
 801b7cc:	40014800 	.word	0x40014800
 801b7d0:	40015000 	.word	0x40015000

0801b7d4 <LL_USART_IsEnabled>:
 801b7d4:	b480      	push	{r7}
 801b7d6:	b083      	sub	sp, #12
 801b7d8:	af00      	add	r7, sp, #0
 801b7da:	6078      	str	r0, [r7, #4]
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	681b      	ldr	r3, [r3, #0]
 801b7e0:	f003 0301 	and.w	r3, r3, #1
 801b7e4:	2b01      	cmp	r3, #1
 801b7e6:	d101      	bne.n	801b7ec <LL_USART_IsEnabled+0x18>
 801b7e8:	2301      	movs	r3, #1
 801b7ea:	e000      	b.n	801b7ee <LL_USART_IsEnabled+0x1a>
 801b7ec:	2300      	movs	r3, #0
 801b7ee:	4618      	mov	r0, r3
 801b7f0:	370c      	adds	r7, #12
 801b7f2:	46bd      	mov	sp, r7
 801b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7f8:	4770      	bx	lr

0801b7fa <LL_USART_SetPrescaler>:
 801b7fa:	b480      	push	{r7}
 801b7fc:	b083      	sub	sp, #12
 801b7fe:	af00      	add	r7, sp, #0
 801b800:	6078      	str	r0, [r7, #4]
 801b802:	6039      	str	r1, [r7, #0]
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b808:	f023 030f 	bic.w	r3, r3, #15
 801b80c:	683a      	ldr	r2, [r7, #0]
 801b80e:	b292      	uxth	r2, r2
 801b810:	431a      	orrs	r2, r3
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	62da      	str	r2, [r3, #44]	@ 0x2c
 801b816:	bf00      	nop
 801b818:	370c      	adds	r7, #12
 801b81a:	46bd      	mov	sp, r7
 801b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b820:	4770      	bx	lr

0801b822 <LL_USART_SetStopBitsLength>:
 801b822:	b480      	push	{r7}
 801b824:	b083      	sub	sp, #12
 801b826:	af00      	add	r7, sp, #0
 801b828:	6078      	str	r0, [r7, #4]
 801b82a:	6039      	str	r1, [r7, #0]
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	685b      	ldr	r3, [r3, #4]
 801b830:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 801b834:	683b      	ldr	r3, [r7, #0]
 801b836:	431a      	orrs	r2, r3
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	605a      	str	r2, [r3, #4]
 801b83c:	bf00      	nop
 801b83e:	370c      	adds	r7, #12
 801b840:	46bd      	mov	sp, r7
 801b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b846:	4770      	bx	lr

0801b848 <LL_USART_SetHWFlowCtrl>:
 801b848:	b480      	push	{r7}
 801b84a:	b083      	sub	sp, #12
 801b84c:	af00      	add	r7, sp, #0
 801b84e:	6078      	str	r0, [r7, #4]
 801b850:	6039      	str	r1, [r7, #0]
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	689b      	ldr	r3, [r3, #8]
 801b856:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801b85a:	683b      	ldr	r3, [r7, #0]
 801b85c:	431a      	orrs	r2, r3
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	609a      	str	r2, [r3, #8]
 801b862:	bf00      	nop
 801b864:	370c      	adds	r7, #12
 801b866:	46bd      	mov	sp, r7
 801b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b86c:	4770      	bx	lr
	...

0801b870 <LL_USART_SetBaudRate>:
 801b870:	b480      	push	{r7}
 801b872:	b087      	sub	sp, #28
 801b874:	af00      	add	r7, sp, #0
 801b876:	60f8      	str	r0, [r7, #12]
 801b878:	60b9      	str	r1, [r7, #8]
 801b87a:	607a      	str	r2, [r7, #4]
 801b87c:	603b      	str	r3, [r7, #0]
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	2b0b      	cmp	r3, #11
 801b882:	d83c      	bhi.n	801b8fe <LL_USART_SetBaudRate+0x8e>
 801b884:	6a3b      	ldr	r3, [r7, #32]
 801b886:	2b00      	cmp	r3, #0
 801b888:	d039      	beq.n	801b8fe <LL_USART_SetBaudRate+0x8e>
 801b88a:	683b      	ldr	r3, [r7, #0]
 801b88c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801b890:	d122      	bne.n	801b8d8 <LL_USART_SetBaudRate+0x68>
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	b2db      	uxtb	r3, r3
 801b896:	461a      	mov	r2, r3
 801b898:	4b1c      	ldr	r3, [pc, #112]	@ (801b90c <LL_USART_SetBaudRate+0x9c>)
 801b89a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b89e:	68ba      	ldr	r2, [r7, #8]
 801b8a0:	fbb2 f3f3 	udiv	r3, r2, r3
 801b8a4:	005a      	lsls	r2, r3, #1
 801b8a6:	6a3b      	ldr	r3, [r7, #32]
 801b8a8:	085b      	lsrs	r3, r3, #1
 801b8aa:	441a      	add	r2, r3
 801b8ac:	6a3b      	ldr	r3, [r7, #32]
 801b8ae:	fbb2 f3f3 	udiv	r3, r2, r3
 801b8b2:	b29b      	uxth	r3, r3
 801b8b4:	617b      	str	r3, [r7, #20]
 801b8b6:	697a      	ldr	r2, [r7, #20]
 801b8b8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 801b8bc:	4013      	ands	r3, r2
 801b8be:	613b      	str	r3, [r7, #16]
 801b8c0:	697b      	ldr	r3, [r7, #20]
 801b8c2:	085b      	lsrs	r3, r3, #1
 801b8c4:	b29b      	uxth	r3, r3
 801b8c6:	f003 0307 	and.w	r3, r3, #7
 801b8ca:	693a      	ldr	r2, [r7, #16]
 801b8cc:	4313      	orrs	r3, r2
 801b8ce:	613b      	str	r3, [r7, #16]
 801b8d0:	68fb      	ldr	r3, [r7, #12]
 801b8d2:	693a      	ldr	r2, [r7, #16]
 801b8d4:	60da      	str	r2, [r3, #12]
 801b8d6:	e012      	b.n	801b8fe <LL_USART_SetBaudRate+0x8e>
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	b2db      	uxtb	r3, r3
 801b8dc:	461a      	mov	r2, r3
 801b8de:	4b0b      	ldr	r3, [pc, #44]	@ (801b90c <LL_USART_SetBaudRate+0x9c>)
 801b8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b8e4:	68ba      	ldr	r2, [r7, #8]
 801b8e6:	fbb2 f2f3 	udiv	r2, r2, r3
 801b8ea:	6a3b      	ldr	r3, [r7, #32]
 801b8ec:	085b      	lsrs	r3, r3, #1
 801b8ee:	441a      	add	r2, r3
 801b8f0:	6a3b      	ldr	r3, [r7, #32]
 801b8f2:	fbb2 f3f3 	udiv	r3, r2, r3
 801b8f6:	b29b      	uxth	r3, r3
 801b8f8:	461a      	mov	r2, r3
 801b8fa:	68fb      	ldr	r3, [r7, #12]
 801b8fc:	60da      	str	r2, [r3, #12]
 801b8fe:	bf00      	nop
 801b900:	371c      	adds	r7, #28
 801b902:	46bd      	mov	sp, r7
 801b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b908:	4770      	bx	lr
 801b90a:	bf00      	nop
 801b90c:	08022494 	.word	0x08022494

0801b910 <LL_USART_Init>:
 801b910:	b580      	push	{r7, lr}
 801b912:	b086      	sub	sp, #24
 801b914:	af02      	add	r7, sp, #8
 801b916:	6078      	str	r0, [r7, #4]
 801b918:	6039      	str	r1, [r7, #0]
 801b91a:	2301      	movs	r3, #1
 801b91c:	73fb      	strb	r3, [r7, #15]
 801b91e:	2300      	movs	r3, #0
 801b920:	60bb      	str	r3, [r7, #8]
 801b922:	6878      	ldr	r0, [r7, #4]
 801b924:	f7ff ff56 	bl	801b7d4 <LL_USART_IsEnabled>
 801b928:	4603      	mov	r3, r0
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d165      	bne.n	801b9fa <LL_USART_Init+0xea>
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	681a      	ldr	r2, [r3, #0]
 801b932:	4b34      	ldr	r3, [pc, #208]	@ (801ba04 <LL_USART_Init+0xf4>)
 801b934:	4013      	ands	r3, r2
 801b936:	683a      	ldr	r2, [r7, #0]
 801b938:	6891      	ldr	r1, [r2, #8]
 801b93a:	683a      	ldr	r2, [r7, #0]
 801b93c:	6912      	ldr	r2, [r2, #16]
 801b93e:	4311      	orrs	r1, r2
 801b940:	683a      	ldr	r2, [r7, #0]
 801b942:	6952      	ldr	r2, [r2, #20]
 801b944:	4311      	orrs	r1, r2
 801b946:	683a      	ldr	r2, [r7, #0]
 801b948:	69d2      	ldr	r2, [r2, #28]
 801b94a:	430a      	orrs	r2, r1
 801b94c:	431a      	orrs	r2, r3
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	601a      	str	r2, [r3, #0]
 801b952:	683b      	ldr	r3, [r7, #0]
 801b954:	68db      	ldr	r3, [r3, #12]
 801b956:	4619      	mov	r1, r3
 801b958:	6878      	ldr	r0, [r7, #4]
 801b95a:	f7ff ff62 	bl	801b822 <LL_USART_SetStopBitsLength>
 801b95e:	683b      	ldr	r3, [r7, #0]
 801b960:	699b      	ldr	r3, [r3, #24]
 801b962:	4619      	mov	r1, r3
 801b964:	6878      	ldr	r0, [r7, #4]
 801b966:	f7ff ff6f 	bl	801b848 <LL_USART_SetHWFlowCtrl>
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	4a26      	ldr	r2, [pc, #152]	@ (801ba08 <LL_USART_Init+0xf8>)
 801b96e:	4293      	cmp	r3, r2
 801b970:	d104      	bne.n	801b97c <LL_USART_Init+0x6c>
 801b972:	2003      	movs	r0, #3
 801b974:	f7fe ffaa 	bl	801a8cc <LL_RCC_GetUSARTClockFreq>
 801b978:	60b8      	str	r0, [r7, #8]
 801b97a:	e023      	b.n	801b9c4 <LL_USART_Init+0xb4>
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	4a23      	ldr	r2, [pc, #140]	@ (801ba0c <LL_USART_Init+0xfc>)
 801b980:	4293      	cmp	r3, r2
 801b982:	d104      	bne.n	801b98e <LL_USART_Init+0x7e>
 801b984:	200c      	movs	r0, #12
 801b986:	f7fe ffa1 	bl	801a8cc <LL_RCC_GetUSARTClockFreq>
 801b98a:	60b8      	str	r0, [r7, #8]
 801b98c:	e01a      	b.n	801b9c4 <LL_USART_Init+0xb4>
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	4a1f      	ldr	r2, [pc, #124]	@ (801ba10 <LL_USART_Init+0x100>)
 801b992:	4293      	cmp	r3, r2
 801b994:	d104      	bne.n	801b9a0 <LL_USART_Init+0x90>
 801b996:	2030      	movs	r0, #48	@ 0x30
 801b998:	f7fe ff98 	bl	801a8cc <LL_RCC_GetUSARTClockFreq>
 801b99c:	60b8      	str	r0, [r7, #8]
 801b99e:	e011      	b.n	801b9c4 <LL_USART_Init+0xb4>
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	4a1c      	ldr	r2, [pc, #112]	@ (801ba14 <LL_USART_Init+0x104>)
 801b9a4:	4293      	cmp	r3, r2
 801b9a6:	d104      	bne.n	801b9b2 <LL_USART_Init+0xa2>
 801b9a8:	20c0      	movs	r0, #192	@ 0xc0
 801b9aa:	f7ff f853 	bl	801aa54 <LL_RCC_GetUARTClockFreq>
 801b9ae:	60b8      	str	r0, [r7, #8]
 801b9b0:	e008      	b.n	801b9c4 <LL_USART_Init+0xb4>
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	4a18      	ldr	r2, [pc, #96]	@ (801ba18 <LL_USART_Init+0x108>)
 801b9b6:	4293      	cmp	r3, r2
 801b9b8:	d104      	bne.n	801b9c4 <LL_USART_Init+0xb4>
 801b9ba:	f44f 7040 	mov.w	r0, #768	@ 0x300
 801b9be:	f7ff f849 	bl	801aa54 <LL_RCC_GetUARTClockFreq>
 801b9c2:	60b8      	str	r0, [r7, #8]
 801b9c4:	68bb      	ldr	r3, [r7, #8]
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d011      	beq.n	801b9ee <LL_USART_Init+0xde>
 801b9ca:	683b      	ldr	r3, [r7, #0]
 801b9cc:	685b      	ldr	r3, [r3, #4]
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d00d      	beq.n	801b9ee <LL_USART_Init+0xde>
 801b9d2:	2300      	movs	r3, #0
 801b9d4:	73fb      	strb	r3, [r7, #15]
 801b9d6:	683b      	ldr	r3, [r7, #0]
 801b9d8:	681a      	ldr	r2, [r3, #0]
 801b9da:	683b      	ldr	r3, [r7, #0]
 801b9dc:	69d9      	ldr	r1, [r3, #28]
 801b9de:	683b      	ldr	r3, [r7, #0]
 801b9e0:	685b      	ldr	r3, [r3, #4]
 801b9e2:	9300      	str	r3, [sp, #0]
 801b9e4:	460b      	mov	r3, r1
 801b9e6:	68b9      	ldr	r1, [r7, #8]
 801b9e8:	6878      	ldr	r0, [r7, #4]
 801b9ea:	f7ff ff41 	bl	801b870 <LL_USART_SetBaudRate>
 801b9ee:	683b      	ldr	r3, [r7, #0]
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	4619      	mov	r1, r3
 801b9f4:	6878      	ldr	r0, [r7, #4]
 801b9f6:	f7ff ff00 	bl	801b7fa <LL_USART_SetPrescaler>
 801b9fa:	7bfb      	ldrb	r3, [r7, #15]
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	3710      	adds	r7, #16
 801ba00:	46bd      	mov	sp, r7
 801ba02:	bd80      	pop	{r7, pc}
 801ba04:	efff69f3 	.word	0xefff69f3
 801ba08:	40013800 	.word	0x40013800
 801ba0c:	40004400 	.word	0x40004400
 801ba10:	40004800 	.word	0x40004800
 801ba14:	40004c00 	.word	0x40004c00
 801ba18:	40005000 	.word	0x40005000

0801ba1c <LL_InitTick>:
 801ba1c:	b480      	push	{r7}
 801ba1e:	b083      	sub	sp, #12
 801ba20:	af00      	add	r7, sp, #0
 801ba22:	6078      	str	r0, [r7, #4]
 801ba24:	6039      	str	r1, [r7, #0]
 801ba26:	687a      	ldr	r2, [r7, #4]
 801ba28:	683b      	ldr	r3, [r7, #0]
 801ba2a:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba2e:	4a07      	ldr	r2, [pc, #28]	@ (801ba4c <LL_InitTick+0x30>)
 801ba30:	3b01      	subs	r3, #1
 801ba32:	6053      	str	r3, [r2, #4]
 801ba34:	4b05      	ldr	r3, [pc, #20]	@ (801ba4c <LL_InitTick+0x30>)
 801ba36:	2200      	movs	r2, #0
 801ba38:	609a      	str	r2, [r3, #8]
 801ba3a:	4b04      	ldr	r3, [pc, #16]	@ (801ba4c <LL_InitTick+0x30>)
 801ba3c:	2205      	movs	r2, #5
 801ba3e:	601a      	str	r2, [r3, #0]
 801ba40:	bf00      	nop
 801ba42:	370c      	adds	r7, #12
 801ba44:	46bd      	mov	sp, r7
 801ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba4a:	4770      	bx	lr
 801ba4c:	e000e010 	.word	0xe000e010

0801ba50 <LL_Init1msTick>:
 801ba50:	b580      	push	{r7, lr}
 801ba52:	b082      	sub	sp, #8
 801ba54:	af00      	add	r7, sp, #0
 801ba56:	6078      	str	r0, [r7, #4]
 801ba58:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801ba5c:	6878      	ldr	r0, [r7, #4]
 801ba5e:	f7ff ffdd 	bl	801ba1c <LL_InitTick>
 801ba62:	bf00      	nop
 801ba64:	3708      	adds	r7, #8
 801ba66:	46bd      	mov	sp, r7
 801ba68:	bd80      	pop	{r7, pc}
	...

0801ba6c <LL_mDelay>:
 801ba6c:	b480      	push	{r7}
 801ba6e:	b085      	sub	sp, #20
 801ba70:	af00      	add	r7, sp, #0
 801ba72:	6078      	str	r0, [r7, #4]
 801ba74:	4b10      	ldr	r3, [pc, #64]	@ (801bab8 <LL_mDelay+0x4c>)
 801ba76:	681b      	ldr	r3, [r3, #0]
 801ba78:	60bb      	str	r3, [r7, #8]
 801ba7a:	68bb      	ldr	r3, [r7, #8]
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	60fb      	str	r3, [r7, #12]
 801ba80:	68fb      	ldr	r3, [r7, #12]
 801ba82:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba86:	d00c      	beq.n	801baa2 <LL_mDelay+0x36>
 801ba88:	68fb      	ldr	r3, [r7, #12]
 801ba8a:	3301      	adds	r3, #1
 801ba8c:	60fb      	str	r3, [r7, #12]
 801ba8e:	e008      	b.n	801baa2 <LL_mDelay+0x36>
 801ba90:	4b09      	ldr	r3, [pc, #36]	@ (801bab8 <LL_mDelay+0x4c>)
 801ba92:	681b      	ldr	r3, [r3, #0]
 801ba94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	d002      	beq.n	801baa2 <LL_mDelay+0x36>
 801ba9c:	68fb      	ldr	r3, [r7, #12]
 801ba9e:	3b01      	subs	r3, #1
 801baa0:	60fb      	str	r3, [r7, #12]
 801baa2:	68fb      	ldr	r3, [r7, #12]
 801baa4:	2b00      	cmp	r3, #0
 801baa6:	d1f3      	bne.n	801ba90 <LL_mDelay+0x24>
 801baa8:	bf00      	nop
 801baaa:	bf00      	nop
 801baac:	3714      	adds	r7, #20
 801baae:	46bd      	mov	sp, r7
 801bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bab4:	4770      	bx	lr
 801bab6:	bf00      	nop
 801bab8:	e000e010 	.word	0xe000e010

0801babc <LL_SetSystemCoreClock>:
 801babc:	b480      	push	{r7}
 801babe:	b083      	sub	sp, #12
 801bac0:	af00      	add	r7, sp, #0
 801bac2:	6078      	str	r0, [r7, #4]
 801bac4:	4a04      	ldr	r2, [pc, #16]	@ (801bad8 <LL_SetSystemCoreClock+0x1c>)
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	6013      	str	r3, [r2, #0]
 801baca:	bf00      	nop
 801bacc:	370c      	adds	r7, #12
 801bace:	46bd      	mov	sp, r7
 801bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bad4:	4770      	bx	lr
 801bad6:	bf00      	nop
 801bad8:	20000004 	.word	0x20000004

0801badc <sqrt>:
 801badc:	b538      	push	{r3, r4, r5, lr}
 801bade:	ed2d 8b02 	vpush	{d8}
 801bae2:	ec55 4b10 	vmov	r4, r5, d0
 801bae6:	f000 f8cf 	bl	801bc88 <__ieee754_sqrt>
 801baea:	4622      	mov	r2, r4
 801baec:	462b      	mov	r3, r5
 801baee:	4620      	mov	r0, r4
 801baf0:	4629      	mov	r1, r5
 801baf2:	eeb0 8a40 	vmov.f32	s16, s0
 801baf6:	eef0 8a60 	vmov.f32	s17, s1
 801bafa:	f7e5 f83f 	bl	8000b7c <__aeabi_dcmpun>
 801bafe:	b990      	cbnz	r0, 801bb26 <sqrt+0x4a>
 801bb00:	2200      	movs	r2, #0
 801bb02:	2300      	movs	r3, #0
 801bb04:	4620      	mov	r0, r4
 801bb06:	4629      	mov	r1, r5
 801bb08:	f7e5 f810 	bl	8000b2c <__aeabi_dcmplt>
 801bb0c:	b158      	cbz	r0, 801bb26 <sqrt+0x4a>
 801bb0e:	f002 fb1f 	bl	801e150 <__errno>
 801bb12:	2321      	movs	r3, #33	@ 0x21
 801bb14:	6003      	str	r3, [r0, #0]
 801bb16:	2200      	movs	r2, #0
 801bb18:	2300      	movs	r3, #0
 801bb1a:	4610      	mov	r0, r2
 801bb1c:	4619      	mov	r1, r3
 801bb1e:	f7e4 febd 	bl	800089c <__aeabi_ddiv>
 801bb22:	ec41 0b18 	vmov	d8, r0, r1
 801bb26:	eeb0 0a48 	vmov.f32	s0, s16
 801bb2a:	eef0 0a68 	vmov.f32	s1, s17
 801bb2e:	ecbd 8b02 	vpop	{d8}
 801bb32:	bd38      	pop	{r3, r4, r5, pc}
 801bb34:	0000      	movs	r0, r0
	...

0801bb38 <cos>:
 801bb38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bb3a:	ec53 2b10 	vmov	r2, r3, d0
 801bb3e:	4826      	ldr	r0, [pc, #152]	@ (801bbd8 <cos+0xa0>)
 801bb40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801bb44:	4281      	cmp	r1, r0
 801bb46:	d806      	bhi.n	801bb56 <cos+0x1e>
 801bb48:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801bbd0 <cos+0x98>
 801bb4c:	b005      	add	sp, #20
 801bb4e:	f85d eb04 	ldr.w	lr, [sp], #4
 801bb52:	f000 b975 	b.w	801be40 <__kernel_cos>
 801bb56:	4821      	ldr	r0, [pc, #132]	@ (801bbdc <cos+0xa4>)
 801bb58:	4281      	cmp	r1, r0
 801bb5a:	d908      	bls.n	801bb6e <cos+0x36>
 801bb5c:	4610      	mov	r0, r2
 801bb5e:	4619      	mov	r1, r3
 801bb60:	f7e4 fbba 	bl	80002d8 <__aeabi_dsub>
 801bb64:	ec41 0b10 	vmov	d0, r0, r1
 801bb68:	b005      	add	sp, #20
 801bb6a:	f85d fb04 	ldr.w	pc, [sp], #4
 801bb6e:	4668      	mov	r0, sp
 801bb70:	f000 faea 	bl	801c148 <__ieee754_rem_pio2>
 801bb74:	f000 0003 	and.w	r0, r0, #3
 801bb78:	2801      	cmp	r0, #1
 801bb7a:	d00b      	beq.n	801bb94 <cos+0x5c>
 801bb7c:	2802      	cmp	r0, #2
 801bb7e:	d015      	beq.n	801bbac <cos+0x74>
 801bb80:	b9d8      	cbnz	r0, 801bbba <cos+0x82>
 801bb82:	ed9d 1b02 	vldr	d1, [sp, #8]
 801bb86:	ed9d 0b00 	vldr	d0, [sp]
 801bb8a:	f000 f959 	bl	801be40 <__kernel_cos>
 801bb8e:	ec51 0b10 	vmov	r0, r1, d0
 801bb92:	e7e7      	b.n	801bb64 <cos+0x2c>
 801bb94:	ed9d 1b02 	vldr	d1, [sp, #8]
 801bb98:	ed9d 0b00 	vldr	d0, [sp]
 801bb9c:	f000 fa18 	bl	801bfd0 <__kernel_sin>
 801bba0:	ec53 2b10 	vmov	r2, r3, d0
 801bba4:	4610      	mov	r0, r2
 801bba6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801bbaa:	e7db      	b.n	801bb64 <cos+0x2c>
 801bbac:	ed9d 1b02 	vldr	d1, [sp, #8]
 801bbb0:	ed9d 0b00 	vldr	d0, [sp]
 801bbb4:	f000 f944 	bl	801be40 <__kernel_cos>
 801bbb8:	e7f2      	b.n	801bba0 <cos+0x68>
 801bbba:	ed9d 1b02 	vldr	d1, [sp, #8]
 801bbbe:	ed9d 0b00 	vldr	d0, [sp]
 801bbc2:	2001      	movs	r0, #1
 801bbc4:	f000 fa04 	bl	801bfd0 <__kernel_sin>
 801bbc8:	e7e1      	b.n	801bb8e <cos+0x56>
 801bbca:	bf00      	nop
 801bbcc:	f3af 8000 	nop.w
	...
 801bbd8:	3fe921fb 	.word	0x3fe921fb
 801bbdc:	7fefffff 	.word	0x7fefffff

0801bbe0 <sin>:
 801bbe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bbe2:	ec53 2b10 	vmov	r2, r3, d0
 801bbe6:	4826      	ldr	r0, [pc, #152]	@ (801bc80 <sin+0xa0>)
 801bbe8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801bbec:	4281      	cmp	r1, r0
 801bbee:	d807      	bhi.n	801bc00 <sin+0x20>
 801bbf0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801bc78 <sin+0x98>
 801bbf4:	2000      	movs	r0, #0
 801bbf6:	b005      	add	sp, #20
 801bbf8:	f85d eb04 	ldr.w	lr, [sp], #4
 801bbfc:	f000 b9e8 	b.w	801bfd0 <__kernel_sin>
 801bc00:	4820      	ldr	r0, [pc, #128]	@ (801bc84 <sin+0xa4>)
 801bc02:	4281      	cmp	r1, r0
 801bc04:	d908      	bls.n	801bc18 <sin+0x38>
 801bc06:	4610      	mov	r0, r2
 801bc08:	4619      	mov	r1, r3
 801bc0a:	f7e4 fb65 	bl	80002d8 <__aeabi_dsub>
 801bc0e:	ec41 0b10 	vmov	d0, r0, r1
 801bc12:	b005      	add	sp, #20
 801bc14:	f85d fb04 	ldr.w	pc, [sp], #4
 801bc18:	4668      	mov	r0, sp
 801bc1a:	f000 fa95 	bl	801c148 <__ieee754_rem_pio2>
 801bc1e:	f000 0003 	and.w	r0, r0, #3
 801bc22:	2801      	cmp	r0, #1
 801bc24:	d00c      	beq.n	801bc40 <sin+0x60>
 801bc26:	2802      	cmp	r0, #2
 801bc28:	d011      	beq.n	801bc4e <sin+0x6e>
 801bc2a:	b9e8      	cbnz	r0, 801bc68 <sin+0x88>
 801bc2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801bc30:	ed9d 0b00 	vldr	d0, [sp]
 801bc34:	2001      	movs	r0, #1
 801bc36:	f000 f9cb 	bl	801bfd0 <__kernel_sin>
 801bc3a:	ec51 0b10 	vmov	r0, r1, d0
 801bc3e:	e7e6      	b.n	801bc0e <sin+0x2e>
 801bc40:	ed9d 1b02 	vldr	d1, [sp, #8]
 801bc44:	ed9d 0b00 	vldr	d0, [sp]
 801bc48:	f000 f8fa 	bl	801be40 <__kernel_cos>
 801bc4c:	e7f5      	b.n	801bc3a <sin+0x5a>
 801bc4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801bc52:	ed9d 0b00 	vldr	d0, [sp]
 801bc56:	2001      	movs	r0, #1
 801bc58:	f000 f9ba 	bl	801bfd0 <__kernel_sin>
 801bc5c:	ec53 2b10 	vmov	r2, r3, d0
 801bc60:	4610      	mov	r0, r2
 801bc62:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801bc66:	e7d2      	b.n	801bc0e <sin+0x2e>
 801bc68:	ed9d 1b02 	vldr	d1, [sp, #8]
 801bc6c:	ed9d 0b00 	vldr	d0, [sp]
 801bc70:	f000 f8e6 	bl	801be40 <__kernel_cos>
 801bc74:	e7f2      	b.n	801bc5c <sin+0x7c>
 801bc76:	bf00      	nop
	...
 801bc80:	3fe921fb 	.word	0x3fe921fb
 801bc84:	7fefffff 	.word	0x7fefffff

0801bc88 <__ieee754_sqrt>:
 801bc88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc8c:	4a68      	ldr	r2, [pc, #416]	@ (801be30 <__ieee754_sqrt+0x1a8>)
 801bc8e:	ec55 4b10 	vmov	r4, r5, d0
 801bc92:	43aa      	bics	r2, r5
 801bc94:	462b      	mov	r3, r5
 801bc96:	4621      	mov	r1, r4
 801bc98:	d110      	bne.n	801bcbc <__ieee754_sqrt+0x34>
 801bc9a:	4622      	mov	r2, r4
 801bc9c:	4620      	mov	r0, r4
 801bc9e:	4629      	mov	r1, r5
 801bca0:	f7e4 fcd2 	bl	8000648 <__aeabi_dmul>
 801bca4:	4602      	mov	r2, r0
 801bca6:	460b      	mov	r3, r1
 801bca8:	4620      	mov	r0, r4
 801bcaa:	4629      	mov	r1, r5
 801bcac:	f7e4 fb16 	bl	80002dc <__adddf3>
 801bcb0:	4604      	mov	r4, r0
 801bcb2:	460d      	mov	r5, r1
 801bcb4:	ec45 4b10 	vmov	d0, r4, r5
 801bcb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcbc:	2d00      	cmp	r5, #0
 801bcbe:	dc0e      	bgt.n	801bcde <__ieee754_sqrt+0x56>
 801bcc0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801bcc4:	4322      	orrs	r2, r4
 801bcc6:	d0f5      	beq.n	801bcb4 <__ieee754_sqrt+0x2c>
 801bcc8:	b19d      	cbz	r5, 801bcf2 <__ieee754_sqrt+0x6a>
 801bcca:	4622      	mov	r2, r4
 801bccc:	4620      	mov	r0, r4
 801bcce:	4629      	mov	r1, r5
 801bcd0:	f7e4 fb02 	bl	80002d8 <__aeabi_dsub>
 801bcd4:	4602      	mov	r2, r0
 801bcd6:	460b      	mov	r3, r1
 801bcd8:	f7e4 fde0 	bl	800089c <__aeabi_ddiv>
 801bcdc:	e7e8      	b.n	801bcb0 <__ieee754_sqrt+0x28>
 801bcde:	152a      	asrs	r2, r5, #20
 801bce0:	d115      	bne.n	801bd0e <__ieee754_sqrt+0x86>
 801bce2:	2000      	movs	r0, #0
 801bce4:	e009      	b.n	801bcfa <__ieee754_sqrt+0x72>
 801bce6:	0acb      	lsrs	r3, r1, #11
 801bce8:	3a15      	subs	r2, #21
 801bcea:	0549      	lsls	r1, r1, #21
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d0fa      	beq.n	801bce6 <__ieee754_sqrt+0x5e>
 801bcf0:	e7f7      	b.n	801bce2 <__ieee754_sqrt+0x5a>
 801bcf2:	462a      	mov	r2, r5
 801bcf4:	e7fa      	b.n	801bcec <__ieee754_sqrt+0x64>
 801bcf6:	005b      	lsls	r3, r3, #1
 801bcf8:	3001      	adds	r0, #1
 801bcfa:	02dc      	lsls	r4, r3, #11
 801bcfc:	d5fb      	bpl.n	801bcf6 <__ieee754_sqrt+0x6e>
 801bcfe:	1e44      	subs	r4, r0, #1
 801bd00:	1b12      	subs	r2, r2, r4
 801bd02:	f1c0 0420 	rsb	r4, r0, #32
 801bd06:	fa21 f404 	lsr.w	r4, r1, r4
 801bd0a:	4323      	orrs	r3, r4
 801bd0c:	4081      	lsls	r1, r0
 801bd0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bd12:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801bd16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801bd1a:	07d2      	lsls	r2, r2, #31
 801bd1c:	bf5c      	itt	pl
 801bd1e:	005b      	lslpl	r3, r3, #1
 801bd20:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801bd24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801bd28:	bf58      	it	pl
 801bd2a:	0049      	lslpl	r1, r1, #1
 801bd2c:	2600      	movs	r6, #0
 801bd2e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801bd32:	106d      	asrs	r5, r5, #1
 801bd34:	0049      	lsls	r1, r1, #1
 801bd36:	2016      	movs	r0, #22
 801bd38:	4632      	mov	r2, r6
 801bd3a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801bd3e:	1917      	adds	r7, r2, r4
 801bd40:	429f      	cmp	r7, r3
 801bd42:	bfde      	ittt	le
 801bd44:	193a      	addle	r2, r7, r4
 801bd46:	1bdb      	suble	r3, r3, r7
 801bd48:	1936      	addle	r6, r6, r4
 801bd4a:	0fcf      	lsrs	r7, r1, #31
 801bd4c:	3801      	subs	r0, #1
 801bd4e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801bd52:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801bd56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801bd5a:	d1f0      	bne.n	801bd3e <__ieee754_sqrt+0xb6>
 801bd5c:	4604      	mov	r4, r0
 801bd5e:	2720      	movs	r7, #32
 801bd60:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801bd64:	429a      	cmp	r2, r3
 801bd66:	eb00 0e0c 	add.w	lr, r0, ip
 801bd6a:	db02      	blt.n	801bd72 <__ieee754_sqrt+0xea>
 801bd6c:	d113      	bne.n	801bd96 <__ieee754_sqrt+0x10e>
 801bd6e:	458e      	cmp	lr, r1
 801bd70:	d811      	bhi.n	801bd96 <__ieee754_sqrt+0x10e>
 801bd72:	f1be 0f00 	cmp.w	lr, #0
 801bd76:	eb0e 000c 	add.w	r0, lr, ip
 801bd7a:	da42      	bge.n	801be02 <__ieee754_sqrt+0x17a>
 801bd7c:	2800      	cmp	r0, #0
 801bd7e:	db40      	blt.n	801be02 <__ieee754_sqrt+0x17a>
 801bd80:	f102 0801 	add.w	r8, r2, #1
 801bd84:	1a9b      	subs	r3, r3, r2
 801bd86:	458e      	cmp	lr, r1
 801bd88:	bf88      	it	hi
 801bd8a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801bd8e:	eba1 010e 	sub.w	r1, r1, lr
 801bd92:	4464      	add	r4, ip
 801bd94:	4642      	mov	r2, r8
 801bd96:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801bd9a:	3f01      	subs	r7, #1
 801bd9c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801bda0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801bda4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801bda8:	d1dc      	bne.n	801bd64 <__ieee754_sqrt+0xdc>
 801bdaa:	4319      	orrs	r1, r3
 801bdac:	d01b      	beq.n	801bde6 <__ieee754_sqrt+0x15e>
 801bdae:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801be34 <__ieee754_sqrt+0x1ac>
 801bdb2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801be38 <__ieee754_sqrt+0x1b0>
 801bdb6:	e9da 0100 	ldrd	r0, r1, [sl]
 801bdba:	e9db 2300 	ldrd	r2, r3, [fp]
 801bdbe:	f7e4 fa8b 	bl	80002d8 <__aeabi_dsub>
 801bdc2:	e9da 8900 	ldrd	r8, r9, [sl]
 801bdc6:	4602      	mov	r2, r0
 801bdc8:	460b      	mov	r3, r1
 801bdca:	4640      	mov	r0, r8
 801bdcc:	4649      	mov	r1, r9
 801bdce:	f7e4 feb7 	bl	8000b40 <__aeabi_dcmple>
 801bdd2:	b140      	cbz	r0, 801bde6 <__ieee754_sqrt+0x15e>
 801bdd4:	f1b4 3fff 	cmp.w	r4, #4294967295
 801bdd8:	e9da 0100 	ldrd	r0, r1, [sl]
 801bddc:	e9db 2300 	ldrd	r2, r3, [fp]
 801bde0:	d111      	bne.n	801be06 <__ieee754_sqrt+0x17e>
 801bde2:	3601      	adds	r6, #1
 801bde4:	463c      	mov	r4, r7
 801bde6:	1072      	asrs	r2, r6, #1
 801bde8:	0863      	lsrs	r3, r4, #1
 801bdea:	07f1      	lsls	r1, r6, #31
 801bdec:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801bdf0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801bdf4:	bf48      	it	mi
 801bdf6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801bdfa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801bdfe:	4618      	mov	r0, r3
 801be00:	e756      	b.n	801bcb0 <__ieee754_sqrt+0x28>
 801be02:	4690      	mov	r8, r2
 801be04:	e7be      	b.n	801bd84 <__ieee754_sqrt+0xfc>
 801be06:	f7e4 fa69 	bl	80002dc <__adddf3>
 801be0a:	e9da 8900 	ldrd	r8, r9, [sl]
 801be0e:	4602      	mov	r2, r0
 801be10:	460b      	mov	r3, r1
 801be12:	4640      	mov	r0, r8
 801be14:	4649      	mov	r1, r9
 801be16:	f7e4 fe89 	bl	8000b2c <__aeabi_dcmplt>
 801be1a:	b120      	cbz	r0, 801be26 <__ieee754_sqrt+0x19e>
 801be1c:	1ca0      	adds	r0, r4, #2
 801be1e:	bf08      	it	eq
 801be20:	3601      	addeq	r6, #1
 801be22:	3402      	adds	r4, #2
 801be24:	e7df      	b.n	801bde6 <__ieee754_sqrt+0x15e>
 801be26:	1c63      	adds	r3, r4, #1
 801be28:	f023 0401 	bic.w	r4, r3, #1
 801be2c:	e7db      	b.n	801bde6 <__ieee754_sqrt+0x15e>
 801be2e:	bf00      	nop
 801be30:	7ff00000 	.word	0x7ff00000
 801be34:	20000028 	.word	0x20000028
 801be38:	20000020 	.word	0x20000020
 801be3c:	00000000 	.word	0x00000000

0801be40 <__kernel_cos>:
 801be40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be44:	ec57 6b10 	vmov	r6, r7, d0
 801be48:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801be4c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801be50:	ed8d 1b00 	vstr	d1, [sp]
 801be54:	d206      	bcs.n	801be64 <__kernel_cos+0x24>
 801be56:	4630      	mov	r0, r6
 801be58:	4639      	mov	r1, r7
 801be5a:	f7e4 fea5 	bl	8000ba8 <__aeabi_d2iz>
 801be5e:	2800      	cmp	r0, #0
 801be60:	f000 8088 	beq.w	801bf74 <__kernel_cos+0x134>
 801be64:	4632      	mov	r2, r6
 801be66:	463b      	mov	r3, r7
 801be68:	4630      	mov	r0, r6
 801be6a:	4639      	mov	r1, r7
 801be6c:	f7e4 fbec 	bl	8000648 <__aeabi_dmul>
 801be70:	4b51      	ldr	r3, [pc, #324]	@ (801bfb8 <__kernel_cos+0x178>)
 801be72:	2200      	movs	r2, #0
 801be74:	4604      	mov	r4, r0
 801be76:	460d      	mov	r5, r1
 801be78:	f7e4 fbe6 	bl	8000648 <__aeabi_dmul>
 801be7c:	a340      	add	r3, pc, #256	@ (adr r3, 801bf80 <__kernel_cos+0x140>)
 801be7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be82:	4682      	mov	sl, r0
 801be84:	468b      	mov	fp, r1
 801be86:	4620      	mov	r0, r4
 801be88:	4629      	mov	r1, r5
 801be8a:	f7e4 fbdd 	bl	8000648 <__aeabi_dmul>
 801be8e:	a33e      	add	r3, pc, #248	@ (adr r3, 801bf88 <__kernel_cos+0x148>)
 801be90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be94:	f7e4 fa22 	bl	80002dc <__adddf3>
 801be98:	4622      	mov	r2, r4
 801be9a:	462b      	mov	r3, r5
 801be9c:	f7e4 fbd4 	bl	8000648 <__aeabi_dmul>
 801bea0:	a33b      	add	r3, pc, #236	@ (adr r3, 801bf90 <__kernel_cos+0x150>)
 801bea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bea6:	f7e4 fa17 	bl	80002d8 <__aeabi_dsub>
 801beaa:	4622      	mov	r2, r4
 801beac:	462b      	mov	r3, r5
 801beae:	f7e4 fbcb 	bl	8000648 <__aeabi_dmul>
 801beb2:	a339      	add	r3, pc, #228	@ (adr r3, 801bf98 <__kernel_cos+0x158>)
 801beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beb8:	f7e4 fa10 	bl	80002dc <__adddf3>
 801bebc:	4622      	mov	r2, r4
 801bebe:	462b      	mov	r3, r5
 801bec0:	f7e4 fbc2 	bl	8000648 <__aeabi_dmul>
 801bec4:	a336      	add	r3, pc, #216	@ (adr r3, 801bfa0 <__kernel_cos+0x160>)
 801bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beca:	f7e4 fa05 	bl	80002d8 <__aeabi_dsub>
 801bece:	4622      	mov	r2, r4
 801bed0:	462b      	mov	r3, r5
 801bed2:	f7e4 fbb9 	bl	8000648 <__aeabi_dmul>
 801bed6:	a334      	add	r3, pc, #208	@ (adr r3, 801bfa8 <__kernel_cos+0x168>)
 801bed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bedc:	f7e4 f9fe 	bl	80002dc <__adddf3>
 801bee0:	4622      	mov	r2, r4
 801bee2:	462b      	mov	r3, r5
 801bee4:	f7e4 fbb0 	bl	8000648 <__aeabi_dmul>
 801bee8:	4622      	mov	r2, r4
 801beea:	462b      	mov	r3, r5
 801beec:	f7e4 fbac 	bl	8000648 <__aeabi_dmul>
 801bef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bef4:	4604      	mov	r4, r0
 801bef6:	460d      	mov	r5, r1
 801bef8:	4630      	mov	r0, r6
 801befa:	4639      	mov	r1, r7
 801befc:	f7e4 fba4 	bl	8000648 <__aeabi_dmul>
 801bf00:	460b      	mov	r3, r1
 801bf02:	4602      	mov	r2, r0
 801bf04:	4629      	mov	r1, r5
 801bf06:	4620      	mov	r0, r4
 801bf08:	f7e4 f9e6 	bl	80002d8 <__aeabi_dsub>
 801bf0c:	4b2b      	ldr	r3, [pc, #172]	@ (801bfbc <__kernel_cos+0x17c>)
 801bf0e:	4598      	cmp	r8, r3
 801bf10:	4606      	mov	r6, r0
 801bf12:	460f      	mov	r7, r1
 801bf14:	d810      	bhi.n	801bf38 <__kernel_cos+0xf8>
 801bf16:	4602      	mov	r2, r0
 801bf18:	460b      	mov	r3, r1
 801bf1a:	4650      	mov	r0, sl
 801bf1c:	4659      	mov	r1, fp
 801bf1e:	f7e4 f9db 	bl	80002d8 <__aeabi_dsub>
 801bf22:	460b      	mov	r3, r1
 801bf24:	4926      	ldr	r1, [pc, #152]	@ (801bfc0 <__kernel_cos+0x180>)
 801bf26:	4602      	mov	r2, r0
 801bf28:	2000      	movs	r0, #0
 801bf2a:	f7e4 f9d5 	bl	80002d8 <__aeabi_dsub>
 801bf2e:	ec41 0b10 	vmov	d0, r0, r1
 801bf32:	b003      	add	sp, #12
 801bf34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf38:	4b22      	ldr	r3, [pc, #136]	@ (801bfc4 <__kernel_cos+0x184>)
 801bf3a:	4921      	ldr	r1, [pc, #132]	@ (801bfc0 <__kernel_cos+0x180>)
 801bf3c:	4598      	cmp	r8, r3
 801bf3e:	bf8c      	ite	hi
 801bf40:	4d21      	ldrhi	r5, [pc, #132]	@ (801bfc8 <__kernel_cos+0x188>)
 801bf42:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801bf46:	2400      	movs	r4, #0
 801bf48:	4622      	mov	r2, r4
 801bf4a:	462b      	mov	r3, r5
 801bf4c:	2000      	movs	r0, #0
 801bf4e:	f7e4 f9c3 	bl	80002d8 <__aeabi_dsub>
 801bf52:	4622      	mov	r2, r4
 801bf54:	4680      	mov	r8, r0
 801bf56:	4689      	mov	r9, r1
 801bf58:	462b      	mov	r3, r5
 801bf5a:	4650      	mov	r0, sl
 801bf5c:	4659      	mov	r1, fp
 801bf5e:	f7e4 f9bb 	bl	80002d8 <__aeabi_dsub>
 801bf62:	4632      	mov	r2, r6
 801bf64:	463b      	mov	r3, r7
 801bf66:	f7e4 f9b7 	bl	80002d8 <__aeabi_dsub>
 801bf6a:	4602      	mov	r2, r0
 801bf6c:	460b      	mov	r3, r1
 801bf6e:	4640      	mov	r0, r8
 801bf70:	4649      	mov	r1, r9
 801bf72:	e7da      	b.n	801bf2a <__kernel_cos+0xea>
 801bf74:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801bfb0 <__kernel_cos+0x170>
 801bf78:	e7db      	b.n	801bf32 <__kernel_cos+0xf2>
 801bf7a:	bf00      	nop
 801bf7c:	f3af 8000 	nop.w
 801bf80:	be8838d4 	.word	0xbe8838d4
 801bf84:	bda8fae9 	.word	0xbda8fae9
 801bf88:	bdb4b1c4 	.word	0xbdb4b1c4
 801bf8c:	3e21ee9e 	.word	0x3e21ee9e
 801bf90:	809c52ad 	.word	0x809c52ad
 801bf94:	3e927e4f 	.word	0x3e927e4f
 801bf98:	19cb1590 	.word	0x19cb1590
 801bf9c:	3efa01a0 	.word	0x3efa01a0
 801bfa0:	16c15177 	.word	0x16c15177
 801bfa4:	3f56c16c 	.word	0x3f56c16c
 801bfa8:	5555554c 	.word	0x5555554c
 801bfac:	3fa55555 	.word	0x3fa55555
 801bfb0:	00000000 	.word	0x00000000
 801bfb4:	3ff00000 	.word	0x3ff00000
 801bfb8:	3fe00000 	.word	0x3fe00000
 801bfbc:	3fd33332 	.word	0x3fd33332
 801bfc0:	3ff00000 	.word	0x3ff00000
 801bfc4:	3fe90000 	.word	0x3fe90000
 801bfc8:	3fd20000 	.word	0x3fd20000
 801bfcc:	00000000 	.word	0x00000000

0801bfd0 <__kernel_sin>:
 801bfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfd4:	ec55 4b10 	vmov	r4, r5, d0
 801bfd8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801bfdc:	b085      	sub	sp, #20
 801bfde:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801bfe2:	ed8d 1b02 	vstr	d1, [sp, #8]
 801bfe6:	4680      	mov	r8, r0
 801bfe8:	d205      	bcs.n	801bff6 <__kernel_sin+0x26>
 801bfea:	4620      	mov	r0, r4
 801bfec:	4629      	mov	r1, r5
 801bfee:	f7e4 fddb 	bl	8000ba8 <__aeabi_d2iz>
 801bff2:	2800      	cmp	r0, #0
 801bff4:	d052      	beq.n	801c09c <__kernel_sin+0xcc>
 801bff6:	4622      	mov	r2, r4
 801bff8:	462b      	mov	r3, r5
 801bffa:	4620      	mov	r0, r4
 801bffc:	4629      	mov	r1, r5
 801bffe:	f7e4 fb23 	bl	8000648 <__aeabi_dmul>
 801c002:	4682      	mov	sl, r0
 801c004:	468b      	mov	fp, r1
 801c006:	4602      	mov	r2, r0
 801c008:	460b      	mov	r3, r1
 801c00a:	4620      	mov	r0, r4
 801c00c:	4629      	mov	r1, r5
 801c00e:	f7e4 fb1b 	bl	8000648 <__aeabi_dmul>
 801c012:	a342      	add	r3, pc, #264	@ (adr r3, 801c11c <__kernel_sin+0x14c>)
 801c014:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c018:	e9cd 0100 	strd	r0, r1, [sp]
 801c01c:	4650      	mov	r0, sl
 801c01e:	4659      	mov	r1, fp
 801c020:	f7e4 fb12 	bl	8000648 <__aeabi_dmul>
 801c024:	a33f      	add	r3, pc, #252	@ (adr r3, 801c124 <__kernel_sin+0x154>)
 801c026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c02a:	f7e4 f955 	bl	80002d8 <__aeabi_dsub>
 801c02e:	4652      	mov	r2, sl
 801c030:	465b      	mov	r3, fp
 801c032:	f7e4 fb09 	bl	8000648 <__aeabi_dmul>
 801c036:	a33d      	add	r3, pc, #244	@ (adr r3, 801c12c <__kernel_sin+0x15c>)
 801c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c03c:	f7e4 f94e 	bl	80002dc <__adddf3>
 801c040:	4652      	mov	r2, sl
 801c042:	465b      	mov	r3, fp
 801c044:	f7e4 fb00 	bl	8000648 <__aeabi_dmul>
 801c048:	a33a      	add	r3, pc, #232	@ (adr r3, 801c134 <__kernel_sin+0x164>)
 801c04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c04e:	f7e4 f943 	bl	80002d8 <__aeabi_dsub>
 801c052:	4652      	mov	r2, sl
 801c054:	465b      	mov	r3, fp
 801c056:	f7e4 faf7 	bl	8000648 <__aeabi_dmul>
 801c05a:	a338      	add	r3, pc, #224	@ (adr r3, 801c13c <__kernel_sin+0x16c>)
 801c05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c060:	f7e4 f93c 	bl	80002dc <__adddf3>
 801c064:	4606      	mov	r6, r0
 801c066:	460f      	mov	r7, r1
 801c068:	f1b8 0f00 	cmp.w	r8, #0
 801c06c:	d11b      	bne.n	801c0a6 <__kernel_sin+0xd6>
 801c06e:	4602      	mov	r2, r0
 801c070:	460b      	mov	r3, r1
 801c072:	4650      	mov	r0, sl
 801c074:	4659      	mov	r1, fp
 801c076:	f7e4 fae7 	bl	8000648 <__aeabi_dmul>
 801c07a:	a325      	add	r3, pc, #148	@ (adr r3, 801c110 <__kernel_sin+0x140>)
 801c07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c080:	f7e4 f92a 	bl	80002d8 <__aeabi_dsub>
 801c084:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c088:	f7e4 fade 	bl	8000648 <__aeabi_dmul>
 801c08c:	4602      	mov	r2, r0
 801c08e:	460b      	mov	r3, r1
 801c090:	4620      	mov	r0, r4
 801c092:	4629      	mov	r1, r5
 801c094:	f7e4 f922 	bl	80002dc <__adddf3>
 801c098:	4604      	mov	r4, r0
 801c09a:	460d      	mov	r5, r1
 801c09c:	ec45 4b10 	vmov	d0, r4, r5
 801c0a0:	b005      	add	sp, #20
 801c0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c0aa:	4b1b      	ldr	r3, [pc, #108]	@ (801c118 <__kernel_sin+0x148>)
 801c0ac:	2200      	movs	r2, #0
 801c0ae:	f7e4 facb 	bl	8000648 <__aeabi_dmul>
 801c0b2:	4632      	mov	r2, r6
 801c0b4:	4680      	mov	r8, r0
 801c0b6:	4689      	mov	r9, r1
 801c0b8:	463b      	mov	r3, r7
 801c0ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c0be:	f7e4 fac3 	bl	8000648 <__aeabi_dmul>
 801c0c2:	4602      	mov	r2, r0
 801c0c4:	460b      	mov	r3, r1
 801c0c6:	4640      	mov	r0, r8
 801c0c8:	4649      	mov	r1, r9
 801c0ca:	f7e4 f905 	bl	80002d8 <__aeabi_dsub>
 801c0ce:	4652      	mov	r2, sl
 801c0d0:	465b      	mov	r3, fp
 801c0d2:	f7e4 fab9 	bl	8000648 <__aeabi_dmul>
 801c0d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c0da:	f7e4 f8fd 	bl	80002d8 <__aeabi_dsub>
 801c0de:	a30c      	add	r3, pc, #48	@ (adr r3, 801c110 <__kernel_sin+0x140>)
 801c0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0e4:	4606      	mov	r6, r0
 801c0e6:	460f      	mov	r7, r1
 801c0e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c0ec:	f7e4 faac 	bl	8000648 <__aeabi_dmul>
 801c0f0:	4602      	mov	r2, r0
 801c0f2:	460b      	mov	r3, r1
 801c0f4:	4630      	mov	r0, r6
 801c0f6:	4639      	mov	r1, r7
 801c0f8:	f7e4 f8f0 	bl	80002dc <__adddf3>
 801c0fc:	4602      	mov	r2, r0
 801c0fe:	460b      	mov	r3, r1
 801c100:	4620      	mov	r0, r4
 801c102:	4629      	mov	r1, r5
 801c104:	f7e4 f8e8 	bl	80002d8 <__aeabi_dsub>
 801c108:	e7c6      	b.n	801c098 <__kernel_sin+0xc8>
 801c10a:	bf00      	nop
 801c10c:	f3af 8000 	nop.w
 801c110:	55555549 	.word	0x55555549
 801c114:	3fc55555 	.word	0x3fc55555
 801c118:	3fe00000 	.word	0x3fe00000
 801c11c:	5acfd57c 	.word	0x5acfd57c
 801c120:	3de5d93a 	.word	0x3de5d93a
 801c124:	8a2b9ceb 	.word	0x8a2b9ceb
 801c128:	3e5ae5e6 	.word	0x3e5ae5e6
 801c12c:	57b1fe7d 	.word	0x57b1fe7d
 801c130:	3ec71de3 	.word	0x3ec71de3
 801c134:	19c161d5 	.word	0x19c161d5
 801c138:	3f2a01a0 	.word	0x3f2a01a0
 801c13c:	1110f8a6 	.word	0x1110f8a6
 801c140:	3f811111 	.word	0x3f811111
 801c144:	00000000 	.word	0x00000000

0801c148 <__ieee754_rem_pio2>:
 801c148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c14c:	ec57 6b10 	vmov	r6, r7, d0
 801c150:	4bc5      	ldr	r3, [pc, #788]	@ (801c468 <__ieee754_rem_pio2+0x320>)
 801c152:	b08d      	sub	sp, #52	@ 0x34
 801c154:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801c158:	4598      	cmp	r8, r3
 801c15a:	4604      	mov	r4, r0
 801c15c:	9704      	str	r7, [sp, #16]
 801c15e:	d807      	bhi.n	801c170 <__ieee754_rem_pio2+0x28>
 801c160:	2200      	movs	r2, #0
 801c162:	2300      	movs	r3, #0
 801c164:	ed80 0b00 	vstr	d0, [r0]
 801c168:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801c16c:	2500      	movs	r5, #0
 801c16e:	e028      	b.n	801c1c2 <__ieee754_rem_pio2+0x7a>
 801c170:	4bbe      	ldr	r3, [pc, #760]	@ (801c46c <__ieee754_rem_pio2+0x324>)
 801c172:	4598      	cmp	r8, r3
 801c174:	d878      	bhi.n	801c268 <__ieee754_rem_pio2+0x120>
 801c176:	9b04      	ldr	r3, [sp, #16]
 801c178:	4dbd      	ldr	r5, [pc, #756]	@ (801c470 <__ieee754_rem_pio2+0x328>)
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	4630      	mov	r0, r6
 801c17e:	a3ac      	add	r3, pc, #688	@ (adr r3, 801c430 <__ieee754_rem_pio2+0x2e8>)
 801c180:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c184:	4639      	mov	r1, r7
 801c186:	dd38      	ble.n	801c1fa <__ieee754_rem_pio2+0xb2>
 801c188:	f7e4 f8a6 	bl	80002d8 <__aeabi_dsub>
 801c18c:	45a8      	cmp	r8, r5
 801c18e:	4606      	mov	r6, r0
 801c190:	460f      	mov	r7, r1
 801c192:	d01a      	beq.n	801c1ca <__ieee754_rem_pio2+0x82>
 801c194:	a3a8      	add	r3, pc, #672	@ (adr r3, 801c438 <__ieee754_rem_pio2+0x2f0>)
 801c196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c19a:	f7e4 f89d 	bl	80002d8 <__aeabi_dsub>
 801c19e:	4602      	mov	r2, r0
 801c1a0:	460b      	mov	r3, r1
 801c1a2:	4680      	mov	r8, r0
 801c1a4:	4689      	mov	r9, r1
 801c1a6:	4630      	mov	r0, r6
 801c1a8:	4639      	mov	r1, r7
 801c1aa:	f7e4 f895 	bl	80002d8 <__aeabi_dsub>
 801c1ae:	a3a2      	add	r3, pc, #648	@ (adr r3, 801c438 <__ieee754_rem_pio2+0x2f0>)
 801c1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1b4:	f7e4 f890 	bl	80002d8 <__aeabi_dsub>
 801c1b8:	e9c4 8900 	strd	r8, r9, [r4]
 801c1bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c1c0:	2501      	movs	r5, #1
 801c1c2:	4628      	mov	r0, r5
 801c1c4:	b00d      	add	sp, #52	@ 0x34
 801c1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1ca:	a39d      	add	r3, pc, #628	@ (adr r3, 801c440 <__ieee754_rem_pio2+0x2f8>)
 801c1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1d0:	f7e4 f882 	bl	80002d8 <__aeabi_dsub>
 801c1d4:	a39c      	add	r3, pc, #624	@ (adr r3, 801c448 <__ieee754_rem_pio2+0x300>)
 801c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1da:	4606      	mov	r6, r0
 801c1dc:	460f      	mov	r7, r1
 801c1de:	f7e4 f87b 	bl	80002d8 <__aeabi_dsub>
 801c1e2:	4602      	mov	r2, r0
 801c1e4:	460b      	mov	r3, r1
 801c1e6:	4680      	mov	r8, r0
 801c1e8:	4689      	mov	r9, r1
 801c1ea:	4630      	mov	r0, r6
 801c1ec:	4639      	mov	r1, r7
 801c1ee:	f7e4 f873 	bl	80002d8 <__aeabi_dsub>
 801c1f2:	a395      	add	r3, pc, #596	@ (adr r3, 801c448 <__ieee754_rem_pio2+0x300>)
 801c1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1f8:	e7dc      	b.n	801c1b4 <__ieee754_rem_pio2+0x6c>
 801c1fa:	f7e4 f86f 	bl	80002dc <__adddf3>
 801c1fe:	45a8      	cmp	r8, r5
 801c200:	4606      	mov	r6, r0
 801c202:	460f      	mov	r7, r1
 801c204:	d018      	beq.n	801c238 <__ieee754_rem_pio2+0xf0>
 801c206:	a38c      	add	r3, pc, #560	@ (adr r3, 801c438 <__ieee754_rem_pio2+0x2f0>)
 801c208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c20c:	f7e4 f866 	bl	80002dc <__adddf3>
 801c210:	4602      	mov	r2, r0
 801c212:	460b      	mov	r3, r1
 801c214:	4680      	mov	r8, r0
 801c216:	4689      	mov	r9, r1
 801c218:	4630      	mov	r0, r6
 801c21a:	4639      	mov	r1, r7
 801c21c:	f7e4 f85c 	bl	80002d8 <__aeabi_dsub>
 801c220:	a385      	add	r3, pc, #532	@ (adr r3, 801c438 <__ieee754_rem_pio2+0x2f0>)
 801c222:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c226:	f7e4 f859 	bl	80002dc <__adddf3>
 801c22a:	f04f 35ff 	mov.w	r5, #4294967295
 801c22e:	e9c4 8900 	strd	r8, r9, [r4]
 801c232:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c236:	e7c4      	b.n	801c1c2 <__ieee754_rem_pio2+0x7a>
 801c238:	a381      	add	r3, pc, #516	@ (adr r3, 801c440 <__ieee754_rem_pio2+0x2f8>)
 801c23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c23e:	f7e4 f84d 	bl	80002dc <__adddf3>
 801c242:	a381      	add	r3, pc, #516	@ (adr r3, 801c448 <__ieee754_rem_pio2+0x300>)
 801c244:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c248:	4606      	mov	r6, r0
 801c24a:	460f      	mov	r7, r1
 801c24c:	f7e4 f846 	bl	80002dc <__adddf3>
 801c250:	4602      	mov	r2, r0
 801c252:	460b      	mov	r3, r1
 801c254:	4680      	mov	r8, r0
 801c256:	4689      	mov	r9, r1
 801c258:	4630      	mov	r0, r6
 801c25a:	4639      	mov	r1, r7
 801c25c:	f7e4 f83c 	bl	80002d8 <__aeabi_dsub>
 801c260:	a379      	add	r3, pc, #484	@ (adr r3, 801c448 <__ieee754_rem_pio2+0x300>)
 801c262:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c266:	e7de      	b.n	801c226 <__ieee754_rem_pio2+0xde>
 801c268:	4b82      	ldr	r3, [pc, #520]	@ (801c474 <__ieee754_rem_pio2+0x32c>)
 801c26a:	4598      	cmp	r8, r3
 801c26c:	f200 80d1 	bhi.w	801c412 <__ieee754_rem_pio2+0x2ca>
 801c270:	f000 f966 	bl	801c540 <fabs>
 801c274:	ec57 6b10 	vmov	r6, r7, d0
 801c278:	a375      	add	r3, pc, #468	@ (adr r3, 801c450 <__ieee754_rem_pio2+0x308>)
 801c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c27e:	4630      	mov	r0, r6
 801c280:	4639      	mov	r1, r7
 801c282:	f7e4 f9e1 	bl	8000648 <__aeabi_dmul>
 801c286:	4b7c      	ldr	r3, [pc, #496]	@ (801c478 <__ieee754_rem_pio2+0x330>)
 801c288:	2200      	movs	r2, #0
 801c28a:	f7e4 f827 	bl	80002dc <__adddf3>
 801c28e:	f7e4 fc8b 	bl	8000ba8 <__aeabi_d2iz>
 801c292:	4605      	mov	r5, r0
 801c294:	f7e4 f96e 	bl	8000574 <__aeabi_i2d>
 801c298:	4602      	mov	r2, r0
 801c29a:	460b      	mov	r3, r1
 801c29c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c2a0:	a363      	add	r3, pc, #396	@ (adr r3, 801c430 <__ieee754_rem_pio2+0x2e8>)
 801c2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2a6:	f7e4 f9cf 	bl	8000648 <__aeabi_dmul>
 801c2aa:	4602      	mov	r2, r0
 801c2ac:	460b      	mov	r3, r1
 801c2ae:	4630      	mov	r0, r6
 801c2b0:	4639      	mov	r1, r7
 801c2b2:	f7e4 f811 	bl	80002d8 <__aeabi_dsub>
 801c2b6:	a360      	add	r3, pc, #384	@ (adr r3, 801c438 <__ieee754_rem_pio2+0x2f0>)
 801c2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2bc:	4682      	mov	sl, r0
 801c2be:	468b      	mov	fp, r1
 801c2c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c2c4:	f7e4 f9c0 	bl	8000648 <__aeabi_dmul>
 801c2c8:	2d1f      	cmp	r5, #31
 801c2ca:	4606      	mov	r6, r0
 801c2cc:	460f      	mov	r7, r1
 801c2ce:	dc0c      	bgt.n	801c2ea <__ieee754_rem_pio2+0x1a2>
 801c2d0:	4b6a      	ldr	r3, [pc, #424]	@ (801c47c <__ieee754_rem_pio2+0x334>)
 801c2d2:	1e6a      	subs	r2, r5, #1
 801c2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c2d8:	4543      	cmp	r3, r8
 801c2da:	d006      	beq.n	801c2ea <__ieee754_rem_pio2+0x1a2>
 801c2dc:	4632      	mov	r2, r6
 801c2de:	463b      	mov	r3, r7
 801c2e0:	4650      	mov	r0, sl
 801c2e2:	4659      	mov	r1, fp
 801c2e4:	f7e3 fff8 	bl	80002d8 <__aeabi_dsub>
 801c2e8:	e00e      	b.n	801c308 <__ieee754_rem_pio2+0x1c0>
 801c2ea:	463b      	mov	r3, r7
 801c2ec:	4632      	mov	r2, r6
 801c2ee:	4650      	mov	r0, sl
 801c2f0:	4659      	mov	r1, fp
 801c2f2:	f7e3 fff1 	bl	80002d8 <__aeabi_dsub>
 801c2f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 801c2fa:	9305      	str	r3, [sp, #20]
 801c2fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c300:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801c304:	2b10      	cmp	r3, #16
 801c306:	dc02      	bgt.n	801c30e <__ieee754_rem_pio2+0x1c6>
 801c308:	e9c4 0100 	strd	r0, r1, [r4]
 801c30c:	e039      	b.n	801c382 <__ieee754_rem_pio2+0x23a>
 801c30e:	a34c      	add	r3, pc, #304	@ (adr r3, 801c440 <__ieee754_rem_pio2+0x2f8>)
 801c310:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c318:	f7e4 f996 	bl	8000648 <__aeabi_dmul>
 801c31c:	4606      	mov	r6, r0
 801c31e:	460f      	mov	r7, r1
 801c320:	4602      	mov	r2, r0
 801c322:	460b      	mov	r3, r1
 801c324:	4650      	mov	r0, sl
 801c326:	4659      	mov	r1, fp
 801c328:	f7e3 ffd6 	bl	80002d8 <__aeabi_dsub>
 801c32c:	4602      	mov	r2, r0
 801c32e:	460b      	mov	r3, r1
 801c330:	4680      	mov	r8, r0
 801c332:	4689      	mov	r9, r1
 801c334:	4650      	mov	r0, sl
 801c336:	4659      	mov	r1, fp
 801c338:	f7e3 ffce 	bl	80002d8 <__aeabi_dsub>
 801c33c:	4632      	mov	r2, r6
 801c33e:	463b      	mov	r3, r7
 801c340:	f7e3 ffca 	bl	80002d8 <__aeabi_dsub>
 801c344:	a340      	add	r3, pc, #256	@ (adr r3, 801c448 <__ieee754_rem_pio2+0x300>)
 801c346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c34a:	4606      	mov	r6, r0
 801c34c:	460f      	mov	r7, r1
 801c34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c352:	f7e4 f979 	bl	8000648 <__aeabi_dmul>
 801c356:	4632      	mov	r2, r6
 801c358:	463b      	mov	r3, r7
 801c35a:	f7e3 ffbd 	bl	80002d8 <__aeabi_dsub>
 801c35e:	4602      	mov	r2, r0
 801c360:	460b      	mov	r3, r1
 801c362:	4606      	mov	r6, r0
 801c364:	460f      	mov	r7, r1
 801c366:	4640      	mov	r0, r8
 801c368:	4649      	mov	r1, r9
 801c36a:	f7e3 ffb5 	bl	80002d8 <__aeabi_dsub>
 801c36e:	9a05      	ldr	r2, [sp, #20]
 801c370:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c374:	1ad3      	subs	r3, r2, r3
 801c376:	2b31      	cmp	r3, #49	@ 0x31
 801c378:	dc20      	bgt.n	801c3bc <__ieee754_rem_pio2+0x274>
 801c37a:	e9c4 0100 	strd	r0, r1, [r4]
 801c37e:	46c2      	mov	sl, r8
 801c380:	46cb      	mov	fp, r9
 801c382:	e9d4 8900 	ldrd	r8, r9, [r4]
 801c386:	4650      	mov	r0, sl
 801c388:	4642      	mov	r2, r8
 801c38a:	464b      	mov	r3, r9
 801c38c:	4659      	mov	r1, fp
 801c38e:	f7e3 ffa3 	bl	80002d8 <__aeabi_dsub>
 801c392:	463b      	mov	r3, r7
 801c394:	4632      	mov	r2, r6
 801c396:	f7e3 ff9f 	bl	80002d8 <__aeabi_dsub>
 801c39a:	9b04      	ldr	r3, [sp, #16]
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c3a2:	f6bf af0e 	bge.w	801c1c2 <__ieee754_rem_pio2+0x7a>
 801c3a6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801c3aa:	6063      	str	r3, [r4, #4]
 801c3ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c3b0:	f8c4 8000 	str.w	r8, [r4]
 801c3b4:	60a0      	str	r0, [r4, #8]
 801c3b6:	60e3      	str	r3, [r4, #12]
 801c3b8:	426d      	negs	r5, r5
 801c3ba:	e702      	b.n	801c1c2 <__ieee754_rem_pio2+0x7a>
 801c3bc:	a326      	add	r3, pc, #152	@ (adr r3, 801c458 <__ieee754_rem_pio2+0x310>)
 801c3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c3c6:	f7e4 f93f 	bl	8000648 <__aeabi_dmul>
 801c3ca:	4606      	mov	r6, r0
 801c3cc:	460f      	mov	r7, r1
 801c3ce:	4602      	mov	r2, r0
 801c3d0:	460b      	mov	r3, r1
 801c3d2:	4640      	mov	r0, r8
 801c3d4:	4649      	mov	r1, r9
 801c3d6:	f7e3 ff7f 	bl	80002d8 <__aeabi_dsub>
 801c3da:	4602      	mov	r2, r0
 801c3dc:	460b      	mov	r3, r1
 801c3de:	4682      	mov	sl, r0
 801c3e0:	468b      	mov	fp, r1
 801c3e2:	4640      	mov	r0, r8
 801c3e4:	4649      	mov	r1, r9
 801c3e6:	f7e3 ff77 	bl	80002d8 <__aeabi_dsub>
 801c3ea:	4632      	mov	r2, r6
 801c3ec:	463b      	mov	r3, r7
 801c3ee:	f7e3 ff73 	bl	80002d8 <__aeabi_dsub>
 801c3f2:	a31b      	add	r3, pc, #108	@ (adr r3, 801c460 <__ieee754_rem_pio2+0x318>)
 801c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3f8:	4606      	mov	r6, r0
 801c3fa:	460f      	mov	r7, r1
 801c3fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c400:	f7e4 f922 	bl	8000648 <__aeabi_dmul>
 801c404:	4632      	mov	r2, r6
 801c406:	463b      	mov	r3, r7
 801c408:	f7e3 ff66 	bl	80002d8 <__aeabi_dsub>
 801c40c:	4606      	mov	r6, r0
 801c40e:	460f      	mov	r7, r1
 801c410:	e764      	b.n	801c2dc <__ieee754_rem_pio2+0x194>
 801c412:	4b1b      	ldr	r3, [pc, #108]	@ (801c480 <__ieee754_rem_pio2+0x338>)
 801c414:	4598      	cmp	r8, r3
 801c416:	d935      	bls.n	801c484 <__ieee754_rem_pio2+0x33c>
 801c418:	4632      	mov	r2, r6
 801c41a:	463b      	mov	r3, r7
 801c41c:	4630      	mov	r0, r6
 801c41e:	4639      	mov	r1, r7
 801c420:	f7e3 ff5a 	bl	80002d8 <__aeabi_dsub>
 801c424:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c428:	e9c4 0100 	strd	r0, r1, [r4]
 801c42c:	e69e      	b.n	801c16c <__ieee754_rem_pio2+0x24>
 801c42e:	bf00      	nop
 801c430:	54400000 	.word	0x54400000
 801c434:	3ff921fb 	.word	0x3ff921fb
 801c438:	1a626331 	.word	0x1a626331
 801c43c:	3dd0b461 	.word	0x3dd0b461
 801c440:	1a600000 	.word	0x1a600000
 801c444:	3dd0b461 	.word	0x3dd0b461
 801c448:	2e037073 	.word	0x2e037073
 801c44c:	3ba3198a 	.word	0x3ba3198a
 801c450:	6dc9c883 	.word	0x6dc9c883
 801c454:	3fe45f30 	.word	0x3fe45f30
 801c458:	2e000000 	.word	0x2e000000
 801c45c:	3ba3198a 	.word	0x3ba3198a
 801c460:	252049c1 	.word	0x252049c1
 801c464:	397b839a 	.word	0x397b839a
 801c468:	3fe921fb 	.word	0x3fe921fb
 801c46c:	4002d97b 	.word	0x4002d97b
 801c470:	3ff921fb 	.word	0x3ff921fb
 801c474:	413921fb 	.word	0x413921fb
 801c478:	3fe00000 	.word	0x3fe00000
 801c47c:	080224c4 	.word	0x080224c4
 801c480:	7fefffff 	.word	0x7fefffff
 801c484:	ea4f 5528 	mov.w	r5, r8, asr #20
 801c488:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801c48c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801c490:	4630      	mov	r0, r6
 801c492:	460f      	mov	r7, r1
 801c494:	f7e4 fb88 	bl	8000ba8 <__aeabi_d2iz>
 801c498:	f7e4 f86c 	bl	8000574 <__aeabi_i2d>
 801c49c:	4602      	mov	r2, r0
 801c49e:	460b      	mov	r3, r1
 801c4a0:	4630      	mov	r0, r6
 801c4a2:	4639      	mov	r1, r7
 801c4a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801c4a8:	f7e3 ff16 	bl	80002d8 <__aeabi_dsub>
 801c4ac:	4b22      	ldr	r3, [pc, #136]	@ (801c538 <__ieee754_rem_pio2+0x3f0>)
 801c4ae:	2200      	movs	r2, #0
 801c4b0:	f7e4 f8ca 	bl	8000648 <__aeabi_dmul>
 801c4b4:	460f      	mov	r7, r1
 801c4b6:	4606      	mov	r6, r0
 801c4b8:	f7e4 fb76 	bl	8000ba8 <__aeabi_d2iz>
 801c4bc:	f7e4 f85a 	bl	8000574 <__aeabi_i2d>
 801c4c0:	4602      	mov	r2, r0
 801c4c2:	460b      	mov	r3, r1
 801c4c4:	4630      	mov	r0, r6
 801c4c6:	4639      	mov	r1, r7
 801c4c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c4cc:	f7e3 ff04 	bl	80002d8 <__aeabi_dsub>
 801c4d0:	4b19      	ldr	r3, [pc, #100]	@ (801c538 <__ieee754_rem_pio2+0x3f0>)
 801c4d2:	2200      	movs	r2, #0
 801c4d4:	f7e4 f8b8 	bl	8000648 <__aeabi_dmul>
 801c4d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801c4dc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801c4e0:	f04f 0803 	mov.w	r8, #3
 801c4e4:	2600      	movs	r6, #0
 801c4e6:	2700      	movs	r7, #0
 801c4e8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801c4ec:	4632      	mov	r2, r6
 801c4ee:	463b      	mov	r3, r7
 801c4f0:	46c2      	mov	sl, r8
 801c4f2:	f108 38ff 	add.w	r8, r8, #4294967295
 801c4f6:	f7e4 fb0f 	bl	8000b18 <__aeabi_dcmpeq>
 801c4fa:	2800      	cmp	r0, #0
 801c4fc:	d1f4      	bne.n	801c4e8 <__ieee754_rem_pio2+0x3a0>
 801c4fe:	4b0f      	ldr	r3, [pc, #60]	@ (801c53c <__ieee754_rem_pio2+0x3f4>)
 801c500:	9301      	str	r3, [sp, #4]
 801c502:	2302      	movs	r3, #2
 801c504:	9300      	str	r3, [sp, #0]
 801c506:	462a      	mov	r2, r5
 801c508:	4653      	mov	r3, sl
 801c50a:	4621      	mov	r1, r4
 801c50c:	a806      	add	r0, sp, #24
 801c50e:	f000 f81f 	bl	801c550 <__kernel_rem_pio2>
 801c512:	9b04      	ldr	r3, [sp, #16]
 801c514:	2b00      	cmp	r3, #0
 801c516:	4605      	mov	r5, r0
 801c518:	f6bf ae53 	bge.w	801c1c2 <__ieee754_rem_pio2+0x7a>
 801c51c:	e9d4 2100 	ldrd	r2, r1, [r4]
 801c520:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c524:	e9c4 2300 	strd	r2, r3, [r4]
 801c528:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801c52c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c530:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801c534:	e740      	b.n	801c3b8 <__ieee754_rem_pio2+0x270>
 801c536:	bf00      	nop
 801c538:	41700000 	.word	0x41700000
 801c53c:	08022544 	.word	0x08022544

0801c540 <fabs>:
 801c540:	ec51 0b10 	vmov	r0, r1, d0
 801c544:	4602      	mov	r2, r0
 801c546:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c54a:	ec43 2b10 	vmov	d0, r2, r3
 801c54e:	4770      	bx	lr

0801c550 <__kernel_rem_pio2>:
 801c550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c554:	ed2d 8b02 	vpush	{d8}
 801c558:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801c55c:	f112 0f14 	cmn.w	r2, #20
 801c560:	9306      	str	r3, [sp, #24]
 801c562:	9104      	str	r1, [sp, #16]
 801c564:	4bbe      	ldr	r3, [pc, #760]	@ (801c860 <__kernel_rem_pio2+0x310>)
 801c566:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801c568:	9008      	str	r0, [sp, #32]
 801c56a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c56e:	9300      	str	r3, [sp, #0]
 801c570:	9b06      	ldr	r3, [sp, #24]
 801c572:	f103 33ff 	add.w	r3, r3, #4294967295
 801c576:	bfa8      	it	ge
 801c578:	1ed4      	subge	r4, r2, #3
 801c57a:	9305      	str	r3, [sp, #20]
 801c57c:	bfb2      	itee	lt
 801c57e:	2400      	movlt	r4, #0
 801c580:	2318      	movge	r3, #24
 801c582:	fb94 f4f3 	sdivge	r4, r4, r3
 801c586:	f06f 0317 	mvn.w	r3, #23
 801c58a:	fb04 3303 	mla	r3, r4, r3, r3
 801c58e:	eb03 0b02 	add.w	fp, r3, r2
 801c592:	9b00      	ldr	r3, [sp, #0]
 801c594:	9a05      	ldr	r2, [sp, #20]
 801c596:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801c850 <__kernel_rem_pio2+0x300>
 801c59a:	eb03 0802 	add.w	r8, r3, r2
 801c59e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801c5a0:	1aa7      	subs	r7, r4, r2
 801c5a2:	ae20      	add	r6, sp, #128	@ 0x80
 801c5a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801c5a8:	2500      	movs	r5, #0
 801c5aa:	4545      	cmp	r5, r8
 801c5ac:	dd13      	ble.n	801c5d6 <__kernel_rem_pio2+0x86>
 801c5ae:	9b06      	ldr	r3, [sp, #24]
 801c5b0:	aa20      	add	r2, sp, #128	@ 0x80
 801c5b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801c5b6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801c5ba:	f04f 0800 	mov.w	r8, #0
 801c5be:	9b00      	ldr	r3, [sp, #0]
 801c5c0:	4598      	cmp	r8, r3
 801c5c2:	dc31      	bgt.n	801c628 <__kernel_rem_pio2+0xd8>
 801c5c4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801c850 <__kernel_rem_pio2+0x300>
 801c5c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c5cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c5d0:	462f      	mov	r7, r5
 801c5d2:	2600      	movs	r6, #0
 801c5d4:	e01b      	b.n	801c60e <__kernel_rem_pio2+0xbe>
 801c5d6:	42ef      	cmn	r7, r5
 801c5d8:	d407      	bmi.n	801c5ea <__kernel_rem_pio2+0x9a>
 801c5da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801c5de:	f7e3 ffc9 	bl	8000574 <__aeabi_i2d>
 801c5e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 801c5e6:	3501      	adds	r5, #1
 801c5e8:	e7df      	b.n	801c5aa <__kernel_rem_pio2+0x5a>
 801c5ea:	ec51 0b18 	vmov	r0, r1, d8
 801c5ee:	e7f8      	b.n	801c5e2 <__kernel_rem_pio2+0x92>
 801c5f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c5f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801c5f8:	f7e4 f826 	bl	8000648 <__aeabi_dmul>
 801c5fc:	4602      	mov	r2, r0
 801c5fe:	460b      	mov	r3, r1
 801c600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c604:	f7e3 fe6a 	bl	80002dc <__adddf3>
 801c608:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c60c:	3601      	adds	r6, #1
 801c60e:	9b05      	ldr	r3, [sp, #20]
 801c610:	429e      	cmp	r6, r3
 801c612:	f1a7 0708 	sub.w	r7, r7, #8
 801c616:	ddeb      	ble.n	801c5f0 <__kernel_rem_pio2+0xa0>
 801c618:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c61c:	f108 0801 	add.w	r8, r8, #1
 801c620:	ecaa 7b02 	vstmia	sl!, {d7}
 801c624:	3508      	adds	r5, #8
 801c626:	e7ca      	b.n	801c5be <__kernel_rem_pio2+0x6e>
 801c628:	9b00      	ldr	r3, [sp, #0]
 801c62a:	f8dd 8000 	ldr.w	r8, [sp]
 801c62e:	aa0c      	add	r2, sp, #48	@ 0x30
 801c630:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c634:	930a      	str	r3, [sp, #40]	@ 0x28
 801c636:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801c638:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801c63c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c63e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801c642:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c644:	ab98      	add	r3, sp, #608	@ 0x260
 801c646:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801c64a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801c64e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c652:	ac0c      	add	r4, sp, #48	@ 0x30
 801c654:	ab70      	add	r3, sp, #448	@ 0x1c0
 801c656:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801c65a:	46a1      	mov	r9, r4
 801c65c:	46c2      	mov	sl, r8
 801c65e:	f1ba 0f00 	cmp.w	sl, #0
 801c662:	f1a5 0508 	sub.w	r5, r5, #8
 801c666:	dc77      	bgt.n	801c758 <__kernel_rem_pio2+0x208>
 801c668:	4658      	mov	r0, fp
 801c66a:	ed9d 0b02 	vldr	d0, [sp, #8]
 801c66e:	f000 fac7 	bl	801cc00 <scalbn>
 801c672:	ec57 6b10 	vmov	r6, r7, d0
 801c676:	2200      	movs	r2, #0
 801c678:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801c67c:	4630      	mov	r0, r6
 801c67e:	4639      	mov	r1, r7
 801c680:	f7e3 ffe2 	bl	8000648 <__aeabi_dmul>
 801c684:	ec41 0b10 	vmov	d0, r0, r1
 801c688:	f000 fb3a 	bl	801cd00 <floor>
 801c68c:	4b75      	ldr	r3, [pc, #468]	@ (801c864 <__kernel_rem_pio2+0x314>)
 801c68e:	ec51 0b10 	vmov	r0, r1, d0
 801c692:	2200      	movs	r2, #0
 801c694:	f7e3 ffd8 	bl	8000648 <__aeabi_dmul>
 801c698:	4602      	mov	r2, r0
 801c69a:	460b      	mov	r3, r1
 801c69c:	4630      	mov	r0, r6
 801c69e:	4639      	mov	r1, r7
 801c6a0:	f7e3 fe1a 	bl	80002d8 <__aeabi_dsub>
 801c6a4:	460f      	mov	r7, r1
 801c6a6:	4606      	mov	r6, r0
 801c6a8:	f7e4 fa7e 	bl	8000ba8 <__aeabi_d2iz>
 801c6ac:	9002      	str	r0, [sp, #8]
 801c6ae:	f7e3 ff61 	bl	8000574 <__aeabi_i2d>
 801c6b2:	4602      	mov	r2, r0
 801c6b4:	460b      	mov	r3, r1
 801c6b6:	4630      	mov	r0, r6
 801c6b8:	4639      	mov	r1, r7
 801c6ba:	f7e3 fe0d 	bl	80002d8 <__aeabi_dsub>
 801c6be:	f1bb 0f00 	cmp.w	fp, #0
 801c6c2:	4606      	mov	r6, r0
 801c6c4:	460f      	mov	r7, r1
 801c6c6:	dd6c      	ble.n	801c7a2 <__kernel_rem_pio2+0x252>
 801c6c8:	f108 31ff 	add.w	r1, r8, #4294967295
 801c6cc:	ab0c      	add	r3, sp, #48	@ 0x30
 801c6ce:	9d02      	ldr	r5, [sp, #8]
 801c6d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c6d4:	f1cb 0018 	rsb	r0, fp, #24
 801c6d8:	fa43 f200 	asr.w	r2, r3, r0
 801c6dc:	4415      	add	r5, r2
 801c6de:	4082      	lsls	r2, r0
 801c6e0:	1a9b      	subs	r3, r3, r2
 801c6e2:	aa0c      	add	r2, sp, #48	@ 0x30
 801c6e4:	9502      	str	r5, [sp, #8]
 801c6e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c6ea:	f1cb 0217 	rsb	r2, fp, #23
 801c6ee:	fa43 f902 	asr.w	r9, r3, r2
 801c6f2:	f1b9 0f00 	cmp.w	r9, #0
 801c6f6:	dd64      	ble.n	801c7c2 <__kernel_rem_pio2+0x272>
 801c6f8:	9b02      	ldr	r3, [sp, #8]
 801c6fa:	2200      	movs	r2, #0
 801c6fc:	3301      	adds	r3, #1
 801c6fe:	9302      	str	r3, [sp, #8]
 801c700:	4615      	mov	r5, r2
 801c702:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801c706:	4590      	cmp	r8, r2
 801c708:	f300 80b8 	bgt.w	801c87c <__kernel_rem_pio2+0x32c>
 801c70c:	f1bb 0f00 	cmp.w	fp, #0
 801c710:	dd07      	ble.n	801c722 <__kernel_rem_pio2+0x1d2>
 801c712:	f1bb 0f01 	cmp.w	fp, #1
 801c716:	f000 80bf 	beq.w	801c898 <__kernel_rem_pio2+0x348>
 801c71a:	f1bb 0f02 	cmp.w	fp, #2
 801c71e:	f000 80c6 	beq.w	801c8ae <__kernel_rem_pio2+0x35e>
 801c722:	f1b9 0f02 	cmp.w	r9, #2
 801c726:	d14c      	bne.n	801c7c2 <__kernel_rem_pio2+0x272>
 801c728:	4632      	mov	r2, r6
 801c72a:	463b      	mov	r3, r7
 801c72c:	494e      	ldr	r1, [pc, #312]	@ (801c868 <__kernel_rem_pio2+0x318>)
 801c72e:	2000      	movs	r0, #0
 801c730:	f7e3 fdd2 	bl	80002d8 <__aeabi_dsub>
 801c734:	4606      	mov	r6, r0
 801c736:	460f      	mov	r7, r1
 801c738:	2d00      	cmp	r5, #0
 801c73a:	d042      	beq.n	801c7c2 <__kernel_rem_pio2+0x272>
 801c73c:	4658      	mov	r0, fp
 801c73e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801c858 <__kernel_rem_pio2+0x308>
 801c742:	f000 fa5d 	bl	801cc00 <scalbn>
 801c746:	4630      	mov	r0, r6
 801c748:	4639      	mov	r1, r7
 801c74a:	ec53 2b10 	vmov	r2, r3, d0
 801c74e:	f7e3 fdc3 	bl	80002d8 <__aeabi_dsub>
 801c752:	4606      	mov	r6, r0
 801c754:	460f      	mov	r7, r1
 801c756:	e034      	b.n	801c7c2 <__kernel_rem_pio2+0x272>
 801c758:	4b44      	ldr	r3, [pc, #272]	@ (801c86c <__kernel_rem_pio2+0x31c>)
 801c75a:	2200      	movs	r2, #0
 801c75c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c760:	f7e3 ff72 	bl	8000648 <__aeabi_dmul>
 801c764:	f7e4 fa20 	bl	8000ba8 <__aeabi_d2iz>
 801c768:	f7e3 ff04 	bl	8000574 <__aeabi_i2d>
 801c76c:	4b40      	ldr	r3, [pc, #256]	@ (801c870 <__kernel_rem_pio2+0x320>)
 801c76e:	2200      	movs	r2, #0
 801c770:	4606      	mov	r6, r0
 801c772:	460f      	mov	r7, r1
 801c774:	f7e3 ff68 	bl	8000648 <__aeabi_dmul>
 801c778:	4602      	mov	r2, r0
 801c77a:	460b      	mov	r3, r1
 801c77c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c780:	f7e3 fdaa 	bl	80002d8 <__aeabi_dsub>
 801c784:	f7e4 fa10 	bl	8000ba8 <__aeabi_d2iz>
 801c788:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c78c:	f849 0b04 	str.w	r0, [r9], #4
 801c790:	4639      	mov	r1, r7
 801c792:	4630      	mov	r0, r6
 801c794:	f7e3 fda2 	bl	80002dc <__adddf3>
 801c798:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c79c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c7a0:	e75d      	b.n	801c65e <__kernel_rem_pio2+0x10e>
 801c7a2:	d107      	bne.n	801c7b4 <__kernel_rem_pio2+0x264>
 801c7a4:	f108 33ff 	add.w	r3, r8, #4294967295
 801c7a8:	aa0c      	add	r2, sp, #48	@ 0x30
 801c7aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c7ae:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801c7b2:	e79e      	b.n	801c6f2 <__kernel_rem_pio2+0x1a2>
 801c7b4:	4b2f      	ldr	r3, [pc, #188]	@ (801c874 <__kernel_rem_pio2+0x324>)
 801c7b6:	2200      	movs	r2, #0
 801c7b8:	f7e4 f9cc 	bl	8000b54 <__aeabi_dcmpge>
 801c7bc:	2800      	cmp	r0, #0
 801c7be:	d143      	bne.n	801c848 <__kernel_rem_pio2+0x2f8>
 801c7c0:	4681      	mov	r9, r0
 801c7c2:	2200      	movs	r2, #0
 801c7c4:	2300      	movs	r3, #0
 801c7c6:	4630      	mov	r0, r6
 801c7c8:	4639      	mov	r1, r7
 801c7ca:	f7e4 f9a5 	bl	8000b18 <__aeabi_dcmpeq>
 801c7ce:	2800      	cmp	r0, #0
 801c7d0:	f000 80bf 	beq.w	801c952 <__kernel_rem_pio2+0x402>
 801c7d4:	f108 33ff 	add.w	r3, r8, #4294967295
 801c7d8:	2200      	movs	r2, #0
 801c7da:	9900      	ldr	r1, [sp, #0]
 801c7dc:	428b      	cmp	r3, r1
 801c7de:	da6e      	bge.n	801c8be <__kernel_rem_pio2+0x36e>
 801c7e0:	2a00      	cmp	r2, #0
 801c7e2:	f000 8089 	beq.w	801c8f8 <__kernel_rem_pio2+0x3a8>
 801c7e6:	f108 38ff 	add.w	r8, r8, #4294967295
 801c7ea:	ab0c      	add	r3, sp, #48	@ 0x30
 801c7ec:	f1ab 0b18 	sub.w	fp, fp, #24
 801c7f0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801c7f4:	2b00      	cmp	r3, #0
 801c7f6:	d0f6      	beq.n	801c7e6 <__kernel_rem_pio2+0x296>
 801c7f8:	4658      	mov	r0, fp
 801c7fa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801c858 <__kernel_rem_pio2+0x308>
 801c7fe:	f000 f9ff 	bl	801cc00 <scalbn>
 801c802:	f108 0301 	add.w	r3, r8, #1
 801c806:	00da      	lsls	r2, r3, #3
 801c808:	9205      	str	r2, [sp, #20]
 801c80a:	ec55 4b10 	vmov	r4, r5, d0
 801c80e:	aa70      	add	r2, sp, #448	@ 0x1c0
 801c810:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801c86c <__kernel_rem_pio2+0x31c>
 801c814:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801c818:	4646      	mov	r6, r8
 801c81a:	f04f 0a00 	mov.w	sl, #0
 801c81e:	2e00      	cmp	r6, #0
 801c820:	f280 80cf 	bge.w	801c9c2 <__kernel_rem_pio2+0x472>
 801c824:	4644      	mov	r4, r8
 801c826:	2c00      	cmp	r4, #0
 801c828:	f2c0 80fd 	blt.w	801ca26 <__kernel_rem_pio2+0x4d6>
 801c82c:	4b12      	ldr	r3, [pc, #72]	@ (801c878 <__kernel_rem_pio2+0x328>)
 801c82e:	461f      	mov	r7, r3
 801c830:	ab70      	add	r3, sp, #448	@ 0x1c0
 801c832:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c836:	9306      	str	r3, [sp, #24]
 801c838:	f04f 0a00 	mov.w	sl, #0
 801c83c:	f04f 0b00 	mov.w	fp, #0
 801c840:	2600      	movs	r6, #0
 801c842:	eba8 0504 	sub.w	r5, r8, r4
 801c846:	e0e2      	b.n	801ca0e <__kernel_rem_pio2+0x4be>
 801c848:	f04f 0902 	mov.w	r9, #2
 801c84c:	e754      	b.n	801c6f8 <__kernel_rem_pio2+0x1a8>
 801c84e:	bf00      	nop
	...
 801c85c:	3ff00000 	.word	0x3ff00000
 801c860:	08022690 	.word	0x08022690
 801c864:	40200000 	.word	0x40200000
 801c868:	3ff00000 	.word	0x3ff00000
 801c86c:	3e700000 	.word	0x3e700000
 801c870:	41700000 	.word	0x41700000
 801c874:	3fe00000 	.word	0x3fe00000
 801c878:	08022650 	.word	0x08022650
 801c87c:	f854 3b04 	ldr.w	r3, [r4], #4
 801c880:	b945      	cbnz	r5, 801c894 <__kernel_rem_pio2+0x344>
 801c882:	b123      	cbz	r3, 801c88e <__kernel_rem_pio2+0x33e>
 801c884:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801c888:	f844 3c04 	str.w	r3, [r4, #-4]
 801c88c:	2301      	movs	r3, #1
 801c88e:	3201      	adds	r2, #1
 801c890:	461d      	mov	r5, r3
 801c892:	e738      	b.n	801c706 <__kernel_rem_pio2+0x1b6>
 801c894:	1acb      	subs	r3, r1, r3
 801c896:	e7f7      	b.n	801c888 <__kernel_rem_pio2+0x338>
 801c898:	f108 32ff 	add.w	r2, r8, #4294967295
 801c89c:	ab0c      	add	r3, sp, #48	@ 0x30
 801c89e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c8a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801c8a6:	a90c      	add	r1, sp, #48	@ 0x30
 801c8a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801c8ac:	e739      	b.n	801c722 <__kernel_rem_pio2+0x1d2>
 801c8ae:	f108 32ff 	add.w	r2, r8, #4294967295
 801c8b2:	ab0c      	add	r3, sp, #48	@ 0x30
 801c8b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c8b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c8bc:	e7f3      	b.n	801c8a6 <__kernel_rem_pio2+0x356>
 801c8be:	a90c      	add	r1, sp, #48	@ 0x30
 801c8c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801c8c4:	3b01      	subs	r3, #1
 801c8c6:	430a      	orrs	r2, r1
 801c8c8:	e787      	b.n	801c7da <__kernel_rem_pio2+0x28a>
 801c8ca:	3401      	adds	r4, #1
 801c8cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801c8d0:	2a00      	cmp	r2, #0
 801c8d2:	d0fa      	beq.n	801c8ca <__kernel_rem_pio2+0x37a>
 801c8d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c8d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801c8da:	eb0d 0503 	add.w	r5, sp, r3
 801c8de:	9b06      	ldr	r3, [sp, #24]
 801c8e0:	aa20      	add	r2, sp, #128	@ 0x80
 801c8e2:	4443      	add	r3, r8
 801c8e4:	f108 0701 	add.w	r7, r8, #1
 801c8e8:	3d98      	subs	r5, #152	@ 0x98
 801c8ea:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801c8ee:	4444      	add	r4, r8
 801c8f0:	42bc      	cmp	r4, r7
 801c8f2:	da04      	bge.n	801c8fe <__kernel_rem_pio2+0x3ae>
 801c8f4:	46a0      	mov	r8, r4
 801c8f6:	e6a2      	b.n	801c63e <__kernel_rem_pio2+0xee>
 801c8f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c8fa:	2401      	movs	r4, #1
 801c8fc:	e7e6      	b.n	801c8cc <__kernel_rem_pio2+0x37c>
 801c8fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c900:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801c904:	f7e3 fe36 	bl	8000574 <__aeabi_i2d>
 801c908:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801cbd0 <__kernel_rem_pio2+0x680>
 801c90c:	e8e6 0102 	strd	r0, r1, [r6], #8
 801c910:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c914:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c918:	46b2      	mov	sl, r6
 801c91a:	f04f 0800 	mov.w	r8, #0
 801c91e:	9b05      	ldr	r3, [sp, #20]
 801c920:	4598      	cmp	r8, r3
 801c922:	dd05      	ble.n	801c930 <__kernel_rem_pio2+0x3e0>
 801c924:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c928:	3701      	adds	r7, #1
 801c92a:	eca5 7b02 	vstmia	r5!, {d7}
 801c92e:	e7df      	b.n	801c8f0 <__kernel_rem_pio2+0x3a0>
 801c930:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801c934:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801c938:	f7e3 fe86 	bl	8000648 <__aeabi_dmul>
 801c93c:	4602      	mov	r2, r0
 801c93e:	460b      	mov	r3, r1
 801c940:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c944:	f7e3 fcca 	bl	80002dc <__adddf3>
 801c948:	f108 0801 	add.w	r8, r8, #1
 801c94c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c950:	e7e5      	b.n	801c91e <__kernel_rem_pio2+0x3ce>
 801c952:	f1cb 0000 	rsb	r0, fp, #0
 801c956:	ec47 6b10 	vmov	d0, r6, r7
 801c95a:	f000 f951 	bl	801cc00 <scalbn>
 801c95e:	ec55 4b10 	vmov	r4, r5, d0
 801c962:	4b9d      	ldr	r3, [pc, #628]	@ (801cbd8 <__kernel_rem_pio2+0x688>)
 801c964:	2200      	movs	r2, #0
 801c966:	4620      	mov	r0, r4
 801c968:	4629      	mov	r1, r5
 801c96a:	f7e4 f8f3 	bl	8000b54 <__aeabi_dcmpge>
 801c96e:	b300      	cbz	r0, 801c9b2 <__kernel_rem_pio2+0x462>
 801c970:	4b9a      	ldr	r3, [pc, #616]	@ (801cbdc <__kernel_rem_pio2+0x68c>)
 801c972:	2200      	movs	r2, #0
 801c974:	4620      	mov	r0, r4
 801c976:	4629      	mov	r1, r5
 801c978:	f7e3 fe66 	bl	8000648 <__aeabi_dmul>
 801c97c:	f7e4 f914 	bl	8000ba8 <__aeabi_d2iz>
 801c980:	4606      	mov	r6, r0
 801c982:	f7e3 fdf7 	bl	8000574 <__aeabi_i2d>
 801c986:	4b94      	ldr	r3, [pc, #592]	@ (801cbd8 <__kernel_rem_pio2+0x688>)
 801c988:	2200      	movs	r2, #0
 801c98a:	f7e3 fe5d 	bl	8000648 <__aeabi_dmul>
 801c98e:	460b      	mov	r3, r1
 801c990:	4602      	mov	r2, r0
 801c992:	4629      	mov	r1, r5
 801c994:	4620      	mov	r0, r4
 801c996:	f7e3 fc9f 	bl	80002d8 <__aeabi_dsub>
 801c99a:	f7e4 f905 	bl	8000ba8 <__aeabi_d2iz>
 801c99e:	ab0c      	add	r3, sp, #48	@ 0x30
 801c9a0:	f10b 0b18 	add.w	fp, fp, #24
 801c9a4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801c9a8:	f108 0801 	add.w	r8, r8, #1
 801c9ac:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801c9b0:	e722      	b.n	801c7f8 <__kernel_rem_pio2+0x2a8>
 801c9b2:	4620      	mov	r0, r4
 801c9b4:	4629      	mov	r1, r5
 801c9b6:	f7e4 f8f7 	bl	8000ba8 <__aeabi_d2iz>
 801c9ba:	ab0c      	add	r3, sp, #48	@ 0x30
 801c9bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801c9c0:	e71a      	b.n	801c7f8 <__kernel_rem_pio2+0x2a8>
 801c9c2:	ab0c      	add	r3, sp, #48	@ 0x30
 801c9c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801c9c8:	f7e3 fdd4 	bl	8000574 <__aeabi_i2d>
 801c9cc:	4622      	mov	r2, r4
 801c9ce:	462b      	mov	r3, r5
 801c9d0:	f7e3 fe3a 	bl	8000648 <__aeabi_dmul>
 801c9d4:	4652      	mov	r2, sl
 801c9d6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801c9da:	465b      	mov	r3, fp
 801c9dc:	4620      	mov	r0, r4
 801c9de:	4629      	mov	r1, r5
 801c9e0:	f7e3 fe32 	bl	8000648 <__aeabi_dmul>
 801c9e4:	3e01      	subs	r6, #1
 801c9e6:	4604      	mov	r4, r0
 801c9e8:	460d      	mov	r5, r1
 801c9ea:	e718      	b.n	801c81e <__kernel_rem_pio2+0x2ce>
 801c9ec:	9906      	ldr	r1, [sp, #24]
 801c9ee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801c9f2:	9106      	str	r1, [sp, #24]
 801c9f4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801c9f8:	f7e3 fe26 	bl	8000648 <__aeabi_dmul>
 801c9fc:	4602      	mov	r2, r0
 801c9fe:	460b      	mov	r3, r1
 801ca00:	4650      	mov	r0, sl
 801ca02:	4659      	mov	r1, fp
 801ca04:	f7e3 fc6a 	bl	80002dc <__adddf3>
 801ca08:	3601      	adds	r6, #1
 801ca0a:	4682      	mov	sl, r0
 801ca0c:	468b      	mov	fp, r1
 801ca0e:	9b00      	ldr	r3, [sp, #0]
 801ca10:	429e      	cmp	r6, r3
 801ca12:	dc01      	bgt.n	801ca18 <__kernel_rem_pio2+0x4c8>
 801ca14:	42b5      	cmp	r5, r6
 801ca16:	dae9      	bge.n	801c9ec <__kernel_rem_pio2+0x49c>
 801ca18:	ab48      	add	r3, sp, #288	@ 0x120
 801ca1a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801ca1e:	e9c5 ab00 	strd	sl, fp, [r5]
 801ca22:	3c01      	subs	r4, #1
 801ca24:	e6ff      	b.n	801c826 <__kernel_rem_pio2+0x2d6>
 801ca26:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801ca28:	2b02      	cmp	r3, #2
 801ca2a:	dc0b      	bgt.n	801ca44 <__kernel_rem_pio2+0x4f4>
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	dc39      	bgt.n	801caa4 <__kernel_rem_pio2+0x554>
 801ca30:	d05d      	beq.n	801caee <__kernel_rem_pio2+0x59e>
 801ca32:	9b02      	ldr	r3, [sp, #8]
 801ca34:	f003 0007 	and.w	r0, r3, #7
 801ca38:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801ca3c:	ecbd 8b02 	vpop	{d8}
 801ca40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca44:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801ca46:	2b03      	cmp	r3, #3
 801ca48:	d1f3      	bne.n	801ca32 <__kernel_rem_pio2+0x4e2>
 801ca4a:	9b05      	ldr	r3, [sp, #20]
 801ca4c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801ca50:	eb0d 0403 	add.w	r4, sp, r3
 801ca54:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801ca58:	4625      	mov	r5, r4
 801ca5a:	46c2      	mov	sl, r8
 801ca5c:	f1ba 0f00 	cmp.w	sl, #0
 801ca60:	f1a5 0508 	sub.w	r5, r5, #8
 801ca64:	dc6b      	bgt.n	801cb3e <__kernel_rem_pio2+0x5ee>
 801ca66:	4645      	mov	r5, r8
 801ca68:	2d01      	cmp	r5, #1
 801ca6a:	f1a4 0408 	sub.w	r4, r4, #8
 801ca6e:	f300 8087 	bgt.w	801cb80 <__kernel_rem_pio2+0x630>
 801ca72:	9c05      	ldr	r4, [sp, #20]
 801ca74:	ab48      	add	r3, sp, #288	@ 0x120
 801ca76:	441c      	add	r4, r3
 801ca78:	2000      	movs	r0, #0
 801ca7a:	2100      	movs	r1, #0
 801ca7c:	f1b8 0f01 	cmp.w	r8, #1
 801ca80:	f300 809c 	bgt.w	801cbbc <__kernel_rem_pio2+0x66c>
 801ca84:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801ca88:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801ca8c:	f1b9 0f00 	cmp.w	r9, #0
 801ca90:	f040 80a6 	bne.w	801cbe0 <__kernel_rem_pio2+0x690>
 801ca94:	9b04      	ldr	r3, [sp, #16]
 801ca96:	e9c3 7800 	strd	r7, r8, [r3]
 801ca9a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801ca9e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801caa2:	e7c6      	b.n	801ca32 <__kernel_rem_pio2+0x4e2>
 801caa4:	9d05      	ldr	r5, [sp, #20]
 801caa6:	ab48      	add	r3, sp, #288	@ 0x120
 801caa8:	441d      	add	r5, r3
 801caaa:	4644      	mov	r4, r8
 801caac:	2000      	movs	r0, #0
 801caae:	2100      	movs	r1, #0
 801cab0:	2c00      	cmp	r4, #0
 801cab2:	da35      	bge.n	801cb20 <__kernel_rem_pio2+0x5d0>
 801cab4:	f1b9 0f00 	cmp.w	r9, #0
 801cab8:	d038      	beq.n	801cb2c <__kernel_rem_pio2+0x5dc>
 801caba:	4602      	mov	r2, r0
 801cabc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cac0:	9c04      	ldr	r4, [sp, #16]
 801cac2:	e9c4 2300 	strd	r2, r3, [r4]
 801cac6:	4602      	mov	r2, r0
 801cac8:	460b      	mov	r3, r1
 801caca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801cace:	f7e3 fc03 	bl	80002d8 <__aeabi_dsub>
 801cad2:	ad4a      	add	r5, sp, #296	@ 0x128
 801cad4:	2401      	movs	r4, #1
 801cad6:	45a0      	cmp	r8, r4
 801cad8:	da2b      	bge.n	801cb32 <__kernel_rem_pio2+0x5e2>
 801cada:	f1b9 0f00 	cmp.w	r9, #0
 801cade:	d002      	beq.n	801cae6 <__kernel_rem_pio2+0x596>
 801cae0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cae4:	4619      	mov	r1, r3
 801cae6:	9b04      	ldr	r3, [sp, #16]
 801cae8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801caec:	e7a1      	b.n	801ca32 <__kernel_rem_pio2+0x4e2>
 801caee:	9c05      	ldr	r4, [sp, #20]
 801caf0:	ab48      	add	r3, sp, #288	@ 0x120
 801caf2:	441c      	add	r4, r3
 801caf4:	2000      	movs	r0, #0
 801caf6:	2100      	movs	r1, #0
 801caf8:	f1b8 0f00 	cmp.w	r8, #0
 801cafc:	da09      	bge.n	801cb12 <__kernel_rem_pio2+0x5c2>
 801cafe:	f1b9 0f00 	cmp.w	r9, #0
 801cb02:	d002      	beq.n	801cb0a <__kernel_rem_pio2+0x5ba>
 801cb04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cb08:	4619      	mov	r1, r3
 801cb0a:	9b04      	ldr	r3, [sp, #16]
 801cb0c:	e9c3 0100 	strd	r0, r1, [r3]
 801cb10:	e78f      	b.n	801ca32 <__kernel_rem_pio2+0x4e2>
 801cb12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801cb16:	f7e3 fbe1 	bl	80002dc <__adddf3>
 801cb1a:	f108 38ff 	add.w	r8, r8, #4294967295
 801cb1e:	e7eb      	b.n	801caf8 <__kernel_rem_pio2+0x5a8>
 801cb20:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801cb24:	f7e3 fbda 	bl	80002dc <__adddf3>
 801cb28:	3c01      	subs	r4, #1
 801cb2a:	e7c1      	b.n	801cab0 <__kernel_rem_pio2+0x560>
 801cb2c:	4602      	mov	r2, r0
 801cb2e:	460b      	mov	r3, r1
 801cb30:	e7c6      	b.n	801cac0 <__kernel_rem_pio2+0x570>
 801cb32:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801cb36:	f7e3 fbd1 	bl	80002dc <__adddf3>
 801cb3a:	3401      	adds	r4, #1
 801cb3c:	e7cb      	b.n	801cad6 <__kernel_rem_pio2+0x586>
 801cb3e:	ed95 7b00 	vldr	d7, [r5]
 801cb42:	ed8d 7b00 	vstr	d7, [sp]
 801cb46:	ed95 7b02 	vldr	d7, [r5, #8]
 801cb4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cb4e:	ec53 2b17 	vmov	r2, r3, d7
 801cb52:	ed8d 7b06 	vstr	d7, [sp, #24]
 801cb56:	f7e3 fbc1 	bl	80002dc <__adddf3>
 801cb5a:	4602      	mov	r2, r0
 801cb5c:	460b      	mov	r3, r1
 801cb5e:	4606      	mov	r6, r0
 801cb60:	460f      	mov	r7, r1
 801cb62:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cb66:	f7e3 fbb7 	bl	80002d8 <__aeabi_dsub>
 801cb6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cb6e:	f7e3 fbb5 	bl	80002dc <__adddf3>
 801cb72:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cb76:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801cb7a:	e9c5 6700 	strd	r6, r7, [r5]
 801cb7e:	e76d      	b.n	801ca5c <__kernel_rem_pio2+0x50c>
 801cb80:	ed94 7b00 	vldr	d7, [r4]
 801cb84:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801cb88:	ec51 0b17 	vmov	r0, r1, d7
 801cb8c:	4652      	mov	r2, sl
 801cb8e:	465b      	mov	r3, fp
 801cb90:	ed8d 7b00 	vstr	d7, [sp]
 801cb94:	f7e3 fba2 	bl	80002dc <__adddf3>
 801cb98:	4602      	mov	r2, r0
 801cb9a:	460b      	mov	r3, r1
 801cb9c:	4606      	mov	r6, r0
 801cb9e:	460f      	mov	r7, r1
 801cba0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cba4:	f7e3 fb98 	bl	80002d8 <__aeabi_dsub>
 801cba8:	4652      	mov	r2, sl
 801cbaa:	465b      	mov	r3, fp
 801cbac:	f7e3 fb96 	bl	80002dc <__adddf3>
 801cbb0:	3d01      	subs	r5, #1
 801cbb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801cbb6:	e9c4 6700 	strd	r6, r7, [r4]
 801cbba:	e755      	b.n	801ca68 <__kernel_rem_pio2+0x518>
 801cbbc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801cbc0:	f7e3 fb8c 	bl	80002dc <__adddf3>
 801cbc4:	f108 38ff 	add.w	r8, r8, #4294967295
 801cbc8:	e758      	b.n	801ca7c <__kernel_rem_pio2+0x52c>
 801cbca:	bf00      	nop
 801cbcc:	f3af 8000 	nop.w
	...
 801cbd8:	41700000 	.word	0x41700000
 801cbdc:	3e700000 	.word	0x3e700000
 801cbe0:	9b04      	ldr	r3, [sp, #16]
 801cbe2:	9a04      	ldr	r2, [sp, #16]
 801cbe4:	601f      	str	r7, [r3, #0]
 801cbe6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801cbea:	605c      	str	r4, [r3, #4]
 801cbec:	609d      	str	r5, [r3, #8]
 801cbee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801cbf2:	60d3      	str	r3, [r2, #12]
 801cbf4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cbf8:	6110      	str	r0, [r2, #16]
 801cbfa:	6153      	str	r3, [r2, #20]
 801cbfc:	e719      	b.n	801ca32 <__kernel_rem_pio2+0x4e2>
 801cbfe:	bf00      	nop

0801cc00 <scalbn>:
 801cc00:	b570      	push	{r4, r5, r6, lr}
 801cc02:	ec55 4b10 	vmov	r4, r5, d0
 801cc06:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801cc0a:	4606      	mov	r6, r0
 801cc0c:	462b      	mov	r3, r5
 801cc0e:	b991      	cbnz	r1, 801cc36 <scalbn+0x36>
 801cc10:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801cc14:	4323      	orrs	r3, r4
 801cc16:	d03d      	beq.n	801cc94 <scalbn+0x94>
 801cc18:	4b35      	ldr	r3, [pc, #212]	@ (801ccf0 <scalbn+0xf0>)
 801cc1a:	4620      	mov	r0, r4
 801cc1c:	4629      	mov	r1, r5
 801cc1e:	2200      	movs	r2, #0
 801cc20:	f7e3 fd12 	bl	8000648 <__aeabi_dmul>
 801cc24:	4b33      	ldr	r3, [pc, #204]	@ (801ccf4 <scalbn+0xf4>)
 801cc26:	429e      	cmp	r6, r3
 801cc28:	4604      	mov	r4, r0
 801cc2a:	460d      	mov	r5, r1
 801cc2c:	da0f      	bge.n	801cc4e <scalbn+0x4e>
 801cc2e:	a328      	add	r3, pc, #160	@ (adr r3, 801ccd0 <scalbn+0xd0>)
 801cc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc34:	e01e      	b.n	801cc74 <scalbn+0x74>
 801cc36:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801cc3a:	4291      	cmp	r1, r2
 801cc3c:	d10b      	bne.n	801cc56 <scalbn+0x56>
 801cc3e:	4622      	mov	r2, r4
 801cc40:	4620      	mov	r0, r4
 801cc42:	4629      	mov	r1, r5
 801cc44:	f7e3 fb4a 	bl	80002dc <__adddf3>
 801cc48:	4604      	mov	r4, r0
 801cc4a:	460d      	mov	r5, r1
 801cc4c:	e022      	b.n	801cc94 <scalbn+0x94>
 801cc4e:	460b      	mov	r3, r1
 801cc50:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801cc54:	3936      	subs	r1, #54	@ 0x36
 801cc56:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801cc5a:	4296      	cmp	r6, r2
 801cc5c:	dd0d      	ble.n	801cc7a <scalbn+0x7a>
 801cc5e:	2d00      	cmp	r5, #0
 801cc60:	a11d      	add	r1, pc, #116	@ (adr r1, 801ccd8 <scalbn+0xd8>)
 801cc62:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc66:	da02      	bge.n	801cc6e <scalbn+0x6e>
 801cc68:	a11d      	add	r1, pc, #116	@ (adr r1, 801cce0 <scalbn+0xe0>)
 801cc6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc6e:	a31a      	add	r3, pc, #104	@ (adr r3, 801ccd8 <scalbn+0xd8>)
 801cc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc74:	f7e3 fce8 	bl	8000648 <__aeabi_dmul>
 801cc78:	e7e6      	b.n	801cc48 <scalbn+0x48>
 801cc7a:	1872      	adds	r2, r6, r1
 801cc7c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801cc80:	428a      	cmp	r2, r1
 801cc82:	dcec      	bgt.n	801cc5e <scalbn+0x5e>
 801cc84:	2a00      	cmp	r2, #0
 801cc86:	dd08      	ble.n	801cc9a <scalbn+0x9a>
 801cc88:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801cc8c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801cc90:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801cc94:	ec45 4b10 	vmov	d0, r4, r5
 801cc98:	bd70      	pop	{r4, r5, r6, pc}
 801cc9a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801cc9e:	da08      	bge.n	801ccb2 <scalbn+0xb2>
 801cca0:	2d00      	cmp	r5, #0
 801cca2:	a10b      	add	r1, pc, #44	@ (adr r1, 801ccd0 <scalbn+0xd0>)
 801cca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cca8:	dac1      	bge.n	801cc2e <scalbn+0x2e>
 801ccaa:	a10f      	add	r1, pc, #60	@ (adr r1, 801cce8 <scalbn+0xe8>)
 801ccac:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ccb0:	e7bd      	b.n	801cc2e <scalbn+0x2e>
 801ccb2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ccb6:	3236      	adds	r2, #54	@ 0x36
 801ccb8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801ccbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ccc0:	4620      	mov	r0, r4
 801ccc2:	4b0d      	ldr	r3, [pc, #52]	@ (801ccf8 <scalbn+0xf8>)
 801ccc4:	4629      	mov	r1, r5
 801ccc6:	2200      	movs	r2, #0
 801ccc8:	e7d4      	b.n	801cc74 <scalbn+0x74>
 801ccca:	bf00      	nop
 801cccc:	f3af 8000 	nop.w
 801ccd0:	c2f8f359 	.word	0xc2f8f359
 801ccd4:	01a56e1f 	.word	0x01a56e1f
 801ccd8:	8800759c 	.word	0x8800759c
 801ccdc:	7e37e43c 	.word	0x7e37e43c
 801cce0:	8800759c 	.word	0x8800759c
 801cce4:	fe37e43c 	.word	0xfe37e43c
 801cce8:	c2f8f359 	.word	0xc2f8f359
 801ccec:	81a56e1f 	.word	0x81a56e1f
 801ccf0:	43500000 	.word	0x43500000
 801ccf4:	ffff3cb0 	.word	0xffff3cb0
 801ccf8:	3c900000 	.word	0x3c900000
 801ccfc:	00000000 	.word	0x00000000

0801cd00 <floor>:
 801cd00:	ec51 0b10 	vmov	r0, r1, d0
 801cd04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801cd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd0c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801cd10:	2e13      	cmp	r6, #19
 801cd12:	460c      	mov	r4, r1
 801cd14:	4605      	mov	r5, r0
 801cd16:	4680      	mov	r8, r0
 801cd18:	dc34      	bgt.n	801cd84 <floor+0x84>
 801cd1a:	2e00      	cmp	r6, #0
 801cd1c:	da17      	bge.n	801cd4e <floor+0x4e>
 801cd1e:	a332      	add	r3, pc, #200	@ (adr r3, 801cde8 <floor+0xe8>)
 801cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd24:	f7e3 fada 	bl	80002dc <__adddf3>
 801cd28:	2200      	movs	r2, #0
 801cd2a:	2300      	movs	r3, #0
 801cd2c:	f7e3 ff1c 	bl	8000b68 <__aeabi_dcmpgt>
 801cd30:	b150      	cbz	r0, 801cd48 <floor+0x48>
 801cd32:	2c00      	cmp	r4, #0
 801cd34:	da55      	bge.n	801cde2 <floor+0xe2>
 801cd36:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801cd3a:	432c      	orrs	r4, r5
 801cd3c:	2500      	movs	r5, #0
 801cd3e:	42ac      	cmp	r4, r5
 801cd40:	4c2b      	ldr	r4, [pc, #172]	@ (801cdf0 <floor+0xf0>)
 801cd42:	bf08      	it	eq
 801cd44:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801cd48:	4621      	mov	r1, r4
 801cd4a:	4628      	mov	r0, r5
 801cd4c:	e023      	b.n	801cd96 <floor+0x96>
 801cd4e:	4f29      	ldr	r7, [pc, #164]	@ (801cdf4 <floor+0xf4>)
 801cd50:	4137      	asrs	r7, r6
 801cd52:	ea01 0307 	and.w	r3, r1, r7
 801cd56:	4303      	orrs	r3, r0
 801cd58:	d01d      	beq.n	801cd96 <floor+0x96>
 801cd5a:	a323      	add	r3, pc, #140	@ (adr r3, 801cde8 <floor+0xe8>)
 801cd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd60:	f7e3 fabc 	bl	80002dc <__adddf3>
 801cd64:	2200      	movs	r2, #0
 801cd66:	2300      	movs	r3, #0
 801cd68:	f7e3 fefe 	bl	8000b68 <__aeabi_dcmpgt>
 801cd6c:	2800      	cmp	r0, #0
 801cd6e:	d0eb      	beq.n	801cd48 <floor+0x48>
 801cd70:	2c00      	cmp	r4, #0
 801cd72:	bfbe      	ittt	lt
 801cd74:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801cd78:	4133      	asrlt	r3, r6
 801cd7a:	18e4      	addlt	r4, r4, r3
 801cd7c:	ea24 0407 	bic.w	r4, r4, r7
 801cd80:	2500      	movs	r5, #0
 801cd82:	e7e1      	b.n	801cd48 <floor+0x48>
 801cd84:	2e33      	cmp	r6, #51	@ 0x33
 801cd86:	dd0a      	ble.n	801cd9e <floor+0x9e>
 801cd88:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801cd8c:	d103      	bne.n	801cd96 <floor+0x96>
 801cd8e:	4602      	mov	r2, r0
 801cd90:	460b      	mov	r3, r1
 801cd92:	f7e3 faa3 	bl	80002dc <__adddf3>
 801cd96:	ec41 0b10 	vmov	d0, r0, r1
 801cd9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd9e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801cda2:	f04f 37ff 	mov.w	r7, #4294967295
 801cda6:	40df      	lsrs	r7, r3
 801cda8:	4207      	tst	r7, r0
 801cdaa:	d0f4      	beq.n	801cd96 <floor+0x96>
 801cdac:	a30e      	add	r3, pc, #56	@ (adr r3, 801cde8 <floor+0xe8>)
 801cdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdb2:	f7e3 fa93 	bl	80002dc <__adddf3>
 801cdb6:	2200      	movs	r2, #0
 801cdb8:	2300      	movs	r3, #0
 801cdba:	f7e3 fed5 	bl	8000b68 <__aeabi_dcmpgt>
 801cdbe:	2800      	cmp	r0, #0
 801cdc0:	d0c2      	beq.n	801cd48 <floor+0x48>
 801cdc2:	2c00      	cmp	r4, #0
 801cdc4:	da0a      	bge.n	801cddc <floor+0xdc>
 801cdc6:	2e14      	cmp	r6, #20
 801cdc8:	d101      	bne.n	801cdce <floor+0xce>
 801cdca:	3401      	adds	r4, #1
 801cdcc:	e006      	b.n	801cddc <floor+0xdc>
 801cdce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801cdd2:	2301      	movs	r3, #1
 801cdd4:	40b3      	lsls	r3, r6
 801cdd6:	441d      	add	r5, r3
 801cdd8:	4545      	cmp	r5, r8
 801cdda:	d3f6      	bcc.n	801cdca <floor+0xca>
 801cddc:	ea25 0507 	bic.w	r5, r5, r7
 801cde0:	e7b2      	b.n	801cd48 <floor+0x48>
 801cde2:	2500      	movs	r5, #0
 801cde4:	462c      	mov	r4, r5
 801cde6:	e7af      	b.n	801cd48 <floor+0x48>
 801cde8:	8800759c 	.word	0x8800759c
 801cdec:	7e37e43c 	.word	0x7e37e43c
 801cdf0:	bff00000 	.word	0xbff00000
 801cdf4:	000fffff 	.word	0x000fffff

0801cdf8 <__cvt>:
 801cdf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cdfc:	ec57 6b10 	vmov	r6, r7, d0
 801ce00:	2f00      	cmp	r7, #0
 801ce02:	460c      	mov	r4, r1
 801ce04:	4619      	mov	r1, r3
 801ce06:	463b      	mov	r3, r7
 801ce08:	bfbb      	ittet	lt
 801ce0a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801ce0e:	461f      	movlt	r7, r3
 801ce10:	2300      	movge	r3, #0
 801ce12:	232d      	movlt	r3, #45	@ 0x2d
 801ce14:	700b      	strb	r3, [r1, #0]
 801ce16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ce18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801ce1c:	4691      	mov	r9, r2
 801ce1e:	f023 0820 	bic.w	r8, r3, #32
 801ce22:	bfbc      	itt	lt
 801ce24:	4632      	movlt	r2, r6
 801ce26:	4616      	movlt	r6, r2
 801ce28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801ce2c:	d005      	beq.n	801ce3a <__cvt+0x42>
 801ce2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801ce32:	d100      	bne.n	801ce36 <__cvt+0x3e>
 801ce34:	3401      	adds	r4, #1
 801ce36:	2102      	movs	r1, #2
 801ce38:	e000      	b.n	801ce3c <__cvt+0x44>
 801ce3a:	2103      	movs	r1, #3
 801ce3c:	ab03      	add	r3, sp, #12
 801ce3e:	9301      	str	r3, [sp, #4]
 801ce40:	ab02      	add	r3, sp, #8
 801ce42:	9300      	str	r3, [sp, #0]
 801ce44:	ec47 6b10 	vmov	d0, r6, r7
 801ce48:	4653      	mov	r3, sl
 801ce4a:	4622      	mov	r2, r4
 801ce4c:	f001 fa4c 	bl	801e2e8 <_dtoa_r>
 801ce50:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801ce54:	4605      	mov	r5, r0
 801ce56:	d119      	bne.n	801ce8c <__cvt+0x94>
 801ce58:	f019 0f01 	tst.w	r9, #1
 801ce5c:	d00e      	beq.n	801ce7c <__cvt+0x84>
 801ce5e:	eb00 0904 	add.w	r9, r0, r4
 801ce62:	2200      	movs	r2, #0
 801ce64:	2300      	movs	r3, #0
 801ce66:	4630      	mov	r0, r6
 801ce68:	4639      	mov	r1, r7
 801ce6a:	f7e3 fe55 	bl	8000b18 <__aeabi_dcmpeq>
 801ce6e:	b108      	cbz	r0, 801ce74 <__cvt+0x7c>
 801ce70:	f8cd 900c 	str.w	r9, [sp, #12]
 801ce74:	2230      	movs	r2, #48	@ 0x30
 801ce76:	9b03      	ldr	r3, [sp, #12]
 801ce78:	454b      	cmp	r3, r9
 801ce7a:	d31e      	bcc.n	801ceba <__cvt+0xc2>
 801ce7c:	9b03      	ldr	r3, [sp, #12]
 801ce7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ce80:	1b5b      	subs	r3, r3, r5
 801ce82:	4628      	mov	r0, r5
 801ce84:	6013      	str	r3, [r2, #0]
 801ce86:	b004      	add	sp, #16
 801ce88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801ce90:	eb00 0904 	add.w	r9, r0, r4
 801ce94:	d1e5      	bne.n	801ce62 <__cvt+0x6a>
 801ce96:	7803      	ldrb	r3, [r0, #0]
 801ce98:	2b30      	cmp	r3, #48	@ 0x30
 801ce9a:	d10a      	bne.n	801ceb2 <__cvt+0xba>
 801ce9c:	2200      	movs	r2, #0
 801ce9e:	2300      	movs	r3, #0
 801cea0:	4630      	mov	r0, r6
 801cea2:	4639      	mov	r1, r7
 801cea4:	f7e3 fe38 	bl	8000b18 <__aeabi_dcmpeq>
 801cea8:	b918      	cbnz	r0, 801ceb2 <__cvt+0xba>
 801ceaa:	f1c4 0401 	rsb	r4, r4, #1
 801ceae:	f8ca 4000 	str.w	r4, [sl]
 801ceb2:	f8da 3000 	ldr.w	r3, [sl]
 801ceb6:	4499      	add	r9, r3
 801ceb8:	e7d3      	b.n	801ce62 <__cvt+0x6a>
 801ceba:	1c59      	adds	r1, r3, #1
 801cebc:	9103      	str	r1, [sp, #12]
 801cebe:	701a      	strb	r2, [r3, #0]
 801cec0:	e7d9      	b.n	801ce76 <__cvt+0x7e>

0801cec2 <__exponent>:
 801cec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cec4:	2900      	cmp	r1, #0
 801cec6:	bfba      	itte	lt
 801cec8:	4249      	neglt	r1, r1
 801ceca:	232d      	movlt	r3, #45	@ 0x2d
 801cecc:	232b      	movge	r3, #43	@ 0x2b
 801cece:	2909      	cmp	r1, #9
 801ced0:	7002      	strb	r2, [r0, #0]
 801ced2:	7043      	strb	r3, [r0, #1]
 801ced4:	dd29      	ble.n	801cf2a <__exponent+0x68>
 801ced6:	f10d 0307 	add.w	r3, sp, #7
 801ceda:	461d      	mov	r5, r3
 801cedc:	270a      	movs	r7, #10
 801cede:	461a      	mov	r2, r3
 801cee0:	fbb1 f6f7 	udiv	r6, r1, r7
 801cee4:	fb07 1416 	mls	r4, r7, r6, r1
 801cee8:	3430      	adds	r4, #48	@ 0x30
 801ceea:	f802 4c01 	strb.w	r4, [r2, #-1]
 801ceee:	460c      	mov	r4, r1
 801cef0:	2c63      	cmp	r4, #99	@ 0x63
 801cef2:	f103 33ff 	add.w	r3, r3, #4294967295
 801cef6:	4631      	mov	r1, r6
 801cef8:	dcf1      	bgt.n	801cede <__exponent+0x1c>
 801cefa:	3130      	adds	r1, #48	@ 0x30
 801cefc:	1e94      	subs	r4, r2, #2
 801cefe:	f803 1c01 	strb.w	r1, [r3, #-1]
 801cf02:	1c41      	adds	r1, r0, #1
 801cf04:	4623      	mov	r3, r4
 801cf06:	42ab      	cmp	r3, r5
 801cf08:	d30a      	bcc.n	801cf20 <__exponent+0x5e>
 801cf0a:	f10d 0309 	add.w	r3, sp, #9
 801cf0e:	1a9b      	subs	r3, r3, r2
 801cf10:	42ac      	cmp	r4, r5
 801cf12:	bf88      	it	hi
 801cf14:	2300      	movhi	r3, #0
 801cf16:	3302      	adds	r3, #2
 801cf18:	4403      	add	r3, r0
 801cf1a:	1a18      	subs	r0, r3, r0
 801cf1c:	b003      	add	sp, #12
 801cf1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf20:	f813 6b01 	ldrb.w	r6, [r3], #1
 801cf24:	f801 6f01 	strb.w	r6, [r1, #1]!
 801cf28:	e7ed      	b.n	801cf06 <__exponent+0x44>
 801cf2a:	2330      	movs	r3, #48	@ 0x30
 801cf2c:	3130      	adds	r1, #48	@ 0x30
 801cf2e:	7083      	strb	r3, [r0, #2]
 801cf30:	70c1      	strb	r1, [r0, #3]
 801cf32:	1d03      	adds	r3, r0, #4
 801cf34:	e7f1      	b.n	801cf1a <__exponent+0x58>
	...

0801cf38 <_printf_float>:
 801cf38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf3c:	b08d      	sub	sp, #52	@ 0x34
 801cf3e:	460c      	mov	r4, r1
 801cf40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801cf44:	4616      	mov	r6, r2
 801cf46:	461f      	mov	r7, r3
 801cf48:	4605      	mov	r5, r0
 801cf4a:	f001 f8b7 	bl	801e0bc <_localeconv_r>
 801cf4e:	6803      	ldr	r3, [r0, #0]
 801cf50:	9304      	str	r3, [sp, #16]
 801cf52:	4618      	mov	r0, r3
 801cf54:	f7e3 f9b4 	bl	80002c0 <strlen>
 801cf58:	2300      	movs	r3, #0
 801cf5a:	930a      	str	r3, [sp, #40]	@ 0x28
 801cf5c:	f8d8 3000 	ldr.w	r3, [r8]
 801cf60:	9005      	str	r0, [sp, #20]
 801cf62:	3307      	adds	r3, #7
 801cf64:	f023 0307 	bic.w	r3, r3, #7
 801cf68:	f103 0208 	add.w	r2, r3, #8
 801cf6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 801cf70:	f8d4 b000 	ldr.w	fp, [r4]
 801cf74:	f8c8 2000 	str.w	r2, [r8]
 801cf78:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cf7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801cf80:	9307      	str	r3, [sp, #28]
 801cf82:	f8cd 8018 	str.w	r8, [sp, #24]
 801cf86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801cf8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cf8e:	4b9c      	ldr	r3, [pc, #624]	@ (801d200 <_printf_float+0x2c8>)
 801cf90:	f04f 32ff 	mov.w	r2, #4294967295
 801cf94:	f7e3 fdf2 	bl	8000b7c <__aeabi_dcmpun>
 801cf98:	bb70      	cbnz	r0, 801cff8 <_printf_float+0xc0>
 801cf9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cf9e:	4b98      	ldr	r3, [pc, #608]	@ (801d200 <_printf_float+0x2c8>)
 801cfa0:	f04f 32ff 	mov.w	r2, #4294967295
 801cfa4:	f7e3 fdcc 	bl	8000b40 <__aeabi_dcmple>
 801cfa8:	bb30      	cbnz	r0, 801cff8 <_printf_float+0xc0>
 801cfaa:	2200      	movs	r2, #0
 801cfac:	2300      	movs	r3, #0
 801cfae:	4640      	mov	r0, r8
 801cfb0:	4649      	mov	r1, r9
 801cfb2:	f7e3 fdbb 	bl	8000b2c <__aeabi_dcmplt>
 801cfb6:	b110      	cbz	r0, 801cfbe <_printf_float+0x86>
 801cfb8:	232d      	movs	r3, #45	@ 0x2d
 801cfba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cfbe:	4a91      	ldr	r2, [pc, #580]	@ (801d204 <_printf_float+0x2cc>)
 801cfc0:	4b91      	ldr	r3, [pc, #580]	@ (801d208 <_printf_float+0x2d0>)
 801cfc2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801cfc6:	bf94      	ite	ls
 801cfc8:	4690      	movls	r8, r2
 801cfca:	4698      	movhi	r8, r3
 801cfcc:	2303      	movs	r3, #3
 801cfce:	6123      	str	r3, [r4, #16]
 801cfd0:	f02b 0304 	bic.w	r3, fp, #4
 801cfd4:	6023      	str	r3, [r4, #0]
 801cfd6:	f04f 0900 	mov.w	r9, #0
 801cfda:	9700      	str	r7, [sp, #0]
 801cfdc:	4633      	mov	r3, r6
 801cfde:	aa0b      	add	r2, sp, #44	@ 0x2c
 801cfe0:	4621      	mov	r1, r4
 801cfe2:	4628      	mov	r0, r5
 801cfe4:	f000 f9d2 	bl	801d38c <_printf_common>
 801cfe8:	3001      	adds	r0, #1
 801cfea:	f040 808d 	bne.w	801d108 <_printf_float+0x1d0>
 801cfee:	f04f 30ff 	mov.w	r0, #4294967295
 801cff2:	b00d      	add	sp, #52	@ 0x34
 801cff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cff8:	4642      	mov	r2, r8
 801cffa:	464b      	mov	r3, r9
 801cffc:	4640      	mov	r0, r8
 801cffe:	4649      	mov	r1, r9
 801d000:	f7e3 fdbc 	bl	8000b7c <__aeabi_dcmpun>
 801d004:	b140      	cbz	r0, 801d018 <_printf_float+0xe0>
 801d006:	464b      	mov	r3, r9
 801d008:	2b00      	cmp	r3, #0
 801d00a:	bfbc      	itt	lt
 801d00c:	232d      	movlt	r3, #45	@ 0x2d
 801d00e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801d012:	4a7e      	ldr	r2, [pc, #504]	@ (801d20c <_printf_float+0x2d4>)
 801d014:	4b7e      	ldr	r3, [pc, #504]	@ (801d210 <_printf_float+0x2d8>)
 801d016:	e7d4      	b.n	801cfc2 <_printf_float+0x8a>
 801d018:	6863      	ldr	r3, [r4, #4]
 801d01a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801d01e:	9206      	str	r2, [sp, #24]
 801d020:	1c5a      	adds	r2, r3, #1
 801d022:	d13b      	bne.n	801d09c <_printf_float+0x164>
 801d024:	2306      	movs	r3, #6
 801d026:	6063      	str	r3, [r4, #4]
 801d028:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801d02c:	2300      	movs	r3, #0
 801d02e:	6022      	str	r2, [r4, #0]
 801d030:	9303      	str	r3, [sp, #12]
 801d032:	ab0a      	add	r3, sp, #40	@ 0x28
 801d034:	e9cd a301 	strd	sl, r3, [sp, #4]
 801d038:	ab09      	add	r3, sp, #36	@ 0x24
 801d03a:	9300      	str	r3, [sp, #0]
 801d03c:	6861      	ldr	r1, [r4, #4]
 801d03e:	ec49 8b10 	vmov	d0, r8, r9
 801d042:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801d046:	4628      	mov	r0, r5
 801d048:	f7ff fed6 	bl	801cdf8 <__cvt>
 801d04c:	9b06      	ldr	r3, [sp, #24]
 801d04e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d050:	2b47      	cmp	r3, #71	@ 0x47
 801d052:	4680      	mov	r8, r0
 801d054:	d129      	bne.n	801d0aa <_printf_float+0x172>
 801d056:	1cc8      	adds	r0, r1, #3
 801d058:	db02      	blt.n	801d060 <_printf_float+0x128>
 801d05a:	6863      	ldr	r3, [r4, #4]
 801d05c:	4299      	cmp	r1, r3
 801d05e:	dd41      	ble.n	801d0e4 <_printf_float+0x1ac>
 801d060:	f1aa 0a02 	sub.w	sl, sl, #2
 801d064:	fa5f fa8a 	uxtb.w	sl, sl
 801d068:	3901      	subs	r1, #1
 801d06a:	4652      	mov	r2, sl
 801d06c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801d070:	9109      	str	r1, [sp, #36]	@ 0x24
 801d072:	f7ff ff26 	bl	801cec2 <__exponent>
 801d076:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d078:	1813      	adds	r3, r2, r0
 801d07a:	2a01      	cmp	r2, #1
 801d07c:	4681      	mov	r9, r0
 801d07e:	6123      	str	r3, [r4, #16]
 801d080:	dc02      	bgt.n	801d088 <_printf_float+0x150>
 801d082:	6822      	ldr	r2, [r4, #0]
 801d084:	07d2      	lsls	r2, r2, #31
 801d086:	d501      	bpl.n	801d08c <_printf_float+0x154>
 801d088:	3301      	adds	r3, #1
 801d08a:	6123      	str	r3, [r4, #16]
 801d08c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801d090:	2b00      	cmp	r3, #0
 801d092:	d0a2      	beq.n	801cfda <_printf_float+0xa2>
 801d094:	232d      	movs	r3, #45	@ 0x2d
 801d096:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d09a:	e79e      	b.n	801cfda <_printf_float+0xa2>
 801d09c:	9a06      	ldr	r2, [sp, #24]
 801d09e:	2a47      	cmp	r2, #71	@ 0x47
 801d0a0:	d1c2      	bne.n	801d028 <_printf_float+0xf0>
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	d1c0      	bne.n	801d028 <_printf_float+0xf0>
 801d0a6:	2301      	movs	r3, #1
 801d0a8:	e7bd      	b.n	801d026 <_printf_float+0xee>
 801d0aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d0ae:	d9db      	bls.n	801d068 <_printf_float+0x130>
 801d0b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801d0b4:	d118      	bne.n	801d0e8 <_printf_float+0x1b0>
 801d0b6:	2900      	cmp	r1, #0
 801d0b8:	6863      	ldr	r3, [r4, #4]
 801d0ba:	dd0b      	ble.n	801d0d4 <_printf_float+0x19c>
 801d0bc:	6121      	str	r1, [r4, #16]
 801d0be:	b913      	cbnz	r3, 801d0c6 <_printf_float+0x18e>
 801d0c0:	6822      	ldr	r2, [r4, #0]
 801d0c2:	07d0      	lsls	r0, r2, #31
 801d0c4:	d502      	bpl.n	801d0cc <_printf_float+0x194>
 801d0c6:	3301      	adds	r3, #1
 801d0c8:	440b      	add	r3, r1
 801d0ca:	6123      	str	r3, [r4, #16]
 801d0cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 801d0ce:	f04f 0900 	mov.w	r9, #0
 801d0d2:	e7db      	b.n	801d08c <_printf_float+0x154>
 801d0d4:	b913      	cbnz	r3, 801d0dc <_printf_float+0x1a4>
 801d0d6:	6822      	ldr	r2, [r4, #0]
 801d0d8:	07d2      	lsls	r2, r2, #31
 801d0da:	d501      	bpl.n	801d0e0 <_printf_float+0x1a8>
 801d0dc:	3302      	adds	r3, #2
 801d0de:	e7f4      	b.n	801d0ca <_printf_float+0x192>
 801d0e0:	2301      	movs	r3, #1
 801d0e2:	e7f2      	b.n	801d0ca <_printf_float+0x192>
 801d0e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801d0e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d0ea:	4299      	cmp	r1, r3
 801d0ec:	db05      	blt.n	801d0fa <_printf_float+0x1c2>
 801d0ee:	6823      	ldr	r3, [r4, #0]
 801d0f0:	6121      	str	r1, [r4, #16]
 801d0f2:	07d8      	lsls	r0, r3, #31
 801d0f4:	d5ea      	bpl.n	801d0cc <_printf_float+0x194>
 801d0f6:	1c4b      	adds	r3, r1, #1
 801d0f8:	e7e7      	b.n	801d0ca <_printf_float+0x192>
 801d0fa:	2900      	cmp	r1, #0
 801d0fc:	bfd4      	ite	le
 801d0fe:	f1c1 0202 	rsble	r2, r1, #2
 801d102:	2201      	movgt	r2, #1
 801d104:	4413      	add	r3, r2
 801d106:	e7e0      	b.n	801d0ca <_printf_float+0x192>
 801d108:	6823      	ldr	r3, [r4, #0]
 801d10a:	055a      	lsls	r2, r3, #21
 801d10c:	d407      	bmi.n	801d11e <_printf_float+0x1e6>
 801d10e:	6923      	ldr	r3, [r4, #16]
 801d110:	4642      	mov	r2, r8
 801d112:	4631      	mov	r1, r6
 801d114:	4628      	mov	r0, r5
 801d116:	47b8      	blx	r7
 801d118:	3001      	adds	r0, #1
 801d11a:	d12b      	bne.n	801d174 <_printf_float+0x23c>
 801d11c:	e767      	b.n	801cfee <_printf_float+0xb6>
 801d11e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d122:	f240 80dd 	bls.w	801d2e0 <_printf_float+0x3a8>
 801d126:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d12a:	2200      	movs	r2, #0
 801d12c:	2300      	movs	r3, #0
 801d12e:	f7e3 fcf3 	bl	8000b18 <__aeabi_dcmpeq>
 801d132:	2800      	cmp	r0, #0
 801d134:	d033      	beq.n	801d19e <_printf_float+0x266>
 801d136:	4a37      	ldr	r2, [pc, #220]	@ (801d214 <_printf_float+0x2dc>)
 801d138:	2301      	movs	r3, #1
 801d13a:	4631      	mov	r1, r6
 801d13c:	4628      	mov	r0, r5
 801d13e:	47b8      	blx	r7
 801d140:	3001      	adds	r0, #1
 801d142:	f43f af54 	beq.w	801cfee <_printf_float+0xb6>
 801d146:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801d14a:	4543      	cmp	r3, r8
 801d14c:	db02      	blt.n	801d154 <_printf_float+0x21c>
 801d14e:	6823      	ldr	r3, [r4, #0]
 801d150:	07d8      	lsls	r0, r3, #31
 801d152:	d50f      	bpl.n	801d174 <_printf_float+0x23c>
 801d154:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d158:	4631      	mov	r1, r6
 801d15a:	4628      	mov	r0, r5
 801d15c:	47b8      	blx	r7
 801d15e:	3001      	adds	r0, #1
 801d160:	f43f af45 	beq.w	801cfee <_printf_float+0xb6>
 801d164:	f04f 0900 	mov.w	r9, #0
 801d168:	f108 38ff 	add.w	r8, r8, #4294967295
 801d16c:	f104 0a1a 	add.w	sl, r4, #26
 801d170:	45c8      	cmp	r8, r9
 801d172:	dc09      	bgt.n	801d188 <_printf_float+0x250>
 801d174:	6823      	ldr	r3, [r4, #0]
 801d176:	079b      	lsls	r3, r3, #30
 801d178:	f100 8103 	bmi.w	801d382 <_printf_float+0x44a>
 801d17c:	68e0      	ldr	r0, [r4, #12]
 801d17e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d180:	4298      	cmp	r0, r3
 801d182:	bfb8      	it	lt
 801d184:	4618      	movlt	r0, r3
 801d186:	e734      	b.n	801cff2 <_printf_float+0xba>
 801d188:	2301      	movs	r3, #1
 801d18a:	4652      	mov	r2, sl
 801d18c:	4631      	mov	r1, r6
 801d18e:	4628      	mov	r0, r5
 801d190:	47b8      	blx	r7
 801d192:	3001      	adds	r0, #1
 801d194:	f43f af2b 	beq.w	801cfee <_printf_float+0xb6>
 801d198:	f109 0901 	add.w	r9, r9, #1
 801d19c:	e7e8      	b.n	801d170 <_printf_float+0x238>
 801d19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	dc39      	bgt.n	801d218 <_printf_float+0x2e0>
 801d1a4:	4a1b      	ldr	r2, [pc, #108]	@ (801d214 <_printf_float+0x2dc>)
 801d1a6:	2301      	movs	r3, #1
 801d1a8:	4631      	mov	r1, r6
 801d1aa:	4628      	mov	r0, r5
 801d1ac:	47b8      	blx	r7
 801d1ae:	3001      	adds	r0, #1
 801d1b0:	f43f af1d 	beq.w	801cfee <_printf_float+0xb6>
 801d1b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801d1b8:	ea59 0303 	orrs.w	r3, r9, r3
 801d1bc:	d102      	bne.n	801d1c4 <_printf_float+0x28c>
 801d1be:	6823      	ldr	r3, [r4, #0]
 801d1c0:	07d9      	lsls	r1, r3, #31
 801d1c2:	d5d7      	bpl.n	801d174 <_printf_float+0x23c>
 801d1c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d1c8:	4631      	mov	r1, r6
 801d1ca:	4628      	mov	r0, r5
 801d1cc:	47b8      	blx	r7
 801d1ce:	3001      	adds	r0, #1
 801d1d0:	f43f af0d 	beq.w	801cfee <_printf_float+0xb6>
 801d1d4:	f04f 0a00 	mov.w	sl, #0
 801d1d8:	f104 0b1a 	add.w	fp, r4, #26
 801d1dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d1de:	425b      	negs	r3, r3
 801d1e0:	4553      	cmp	r3, sl
 801d1e2:	dc01      	bgt.n	801d1e8 <_printf_float+0x2b0>
 801d1e4:	464b      	mov	r3, r9
 801d1e6:	e793      	b.n	801d110 <_printf_float+0x1d8>
 801d1e8:	2301      	movs	r3, #1
 801d1ea:	465a      	mov	r2, fp
 801d1ec:	4631      	mov	r1, r6
 801d1ee:	4628      	mov	r0, r5
 801d1f0:	47b8      	blx	r7
 801d1f2:	3001      	adds	r0, #1
 801d1f4:	f43f aefb 	beq.w	801cfee <_printf_float+0xb6>
 801d1f8:	f10a 0a01 	add.w	sl, sl, #1
 801d1fc:	e7ee      	b.n	801d1dc <_printf_float+0x2a4>
 801d1fe:	bf00      	nop
 801d200:	7fefffff 	.word	0x7fefffff
 801d204:	080226a0 	.word	0x080226a0
 801d208:	080226a4 	.word	0x080226a4
 801d20c:	080226a8 	.word	0x080226a8
 801d210:	080226ac 	.word	0x080226ac
 801d214:	080226b0 	.word	0x080226b0
 801d218:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d21a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d21e:	4553      	cmp	r3, sl
 801d220:	bfa8      	it	ge
 801d222:	4653      	movge	r3, sl
 801d224:	2b00      	cmp	r3, #0
 801d226:	4699      	mov	r9, r3
 801d228:	dc36      	bgt.n	801d298 <_printf_float+0x360>
 801d22a:	f04f 0b00 	mov.w	fp, #0
 801d22e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d232:	f104 021a 	add.w	r2, r4, #26
 801d236:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d238:	9306      	str	r3, [sp, #24]
 801d23a:	eba3 0309 	sub.w	r3, r3, r9
 801d23e:	455b      	cmp	r3, fp
 801d240:	dc31      	bgt.n	801d2a6 <_printf_float+0x36e>
 801d242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d244:	459a      	cmp	sl, r3
 801d246:	dc3a      	bgt.n	801d2be <_printf_float+0x386>
 801d248:	6823      	ldr	r3, [r4, #0]
 801d24a:	07da      	lsls	r2, r3, #31
 801d24c:	d437      	bmi.n	801d2be <_printf_float+0x386>
 801d24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d250:	ebaa 0903 	sub.w	r9, sl, r3
 801d254:	9b06      	ldr	r3, [sp, #24]
 801d256:	ebaa 0303 	sub.w	r3, sl, r3
 801d25a:	4599      	cmp	r9, r3
 801d25c:	bfa8      	it	ge
 801d25e:	4699      	movge	r9, r3
 801d260:	f1b9 0f00 	cmp.w	r9, #0
 801d264:	dc33      	bgt.n	801d2ce <_printf_float+0x396>
 801d266:	f04f 0800 	mov.w	r8, #0
 801d26a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d26e:	f104 0b1a 	add.w	fp, r4, #26
 801d272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d274:	ebaa 0303 	sub.w	r3, sl, r3
 801d278:	eba3 0309 	sub.w	r3, r3, r9
 801d27c:	4543      	cmp	r3, r8
 801d27e:	f77f af79 	ble.w	801d174 <_printf_float+0x23c>
 801d282:	2301      	movs	r3, #1
 801d284:	465a      	mov	r2, fp
 801d286:	4631      	mov	r1, r6
 801d288:	4628      	mov	r0, r5
 801d28a:	47b8      	blx	r7
 801d28c:	3001      	adds	r0, #1
 801d28e:	f43f aeae 	beq.w	801cfee <_printf_float+0xb6>
 801d292:	f108 0801 	add.w	r8, r8, #1
 801d296:	e7ec      	b.n	801d272 <_printf_float+0x33a>
 801d298:	4642      	mov	r2, r8
 801d29a:	4631      	mov	r1, r6
 801d29c:	4628      	mov	r0, r5
 801d29e:	47b8      	blx	r7
 801d2a0:	3001      	adds	r0, #1
 801d2a2:	d1c2      	bne.n	801d22a <_printf_float+0x2f2>
 801d2a4:	e6a3      	b.n	801cfee <_printf_float+0xb6>
 801d2a6:	2301      	movs	r3, #1
 801d2a8:	4631      	mov	r1, r6
 801d2aa:	4628      	mov	r0, r5
 801d2ac:	9206      	str	r2, [sp, #24]
 801d2ae:	47b8      	blx	r7
 801d2b0:	3001      	adds	r0, #1
 801d2b2:	f43f ae9c 	beq.w	801cfee <_printf_float+0xb6>
 801d2b6:	9a06      	ldr	r2, [sp, #24]
 801d2b8:	f10b 0b01 	add.w	fp, fp, #1
 801d2bc:	e7bb      	b.n	801d236 <_printf_float+0x2fe>
 801d2be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d2c2:	4631      	mov	r1, r6
 801d2c4:	4628      	mov	r0, r5
 801d2c6:	47b8      	blx	r7
 801d2c8:	3001      	adds	r0, #1
 801d2ca:	d1c0      	bne.n	801d24e <_printf_float+0x316>
 801d2cc:	e68f      	b.n	801cfee <_printf_float+0xb6>
 801d2ce:	9a06      	ldr	r2, [sp, #24]
 801d2d0:	464b      	mov	r3, r9
 801d2d2:	4442      	add	r2, r8
 801d2d4:	4631      	mov	r1, r6
 801d2d6:	4628      	mov	r0, r5
 801d2d8:	47b8      	blx	r7
 801d2da:	3001      	adds	r0, #1
 801d2dc:	d1c3      	bne.n	801d266 <_printf_float+0x32e>
 801d2de:	e686      	b.n	801cfee <_printf_float+0xb6>
 801d2e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d2e4:	f1ba 0f01 	cmp.w	sl, #1
 801d2e8:	dc01      	bgt.n	801d2ee <_printf_float+0x3b6>
 801d2ea:	07db      	lsls	r3, r3, #31
 801d2ec:	d536      	bpl.n	801d35c <_printf_float+0x424>
 801d2ee:	2301      	movs	r3, #1
 801d2f0:	4642      	mov	r2, r8
 801d2f2:	4631      	mov	r1, r6
 801d2f4:	4628      	mov	r0, r5
 801d2f6:	47b8      	blx	r7
 801d2f8:	3001      	adds	r0, #1
 801d2fa:	f43f ae78 	beq.w	801cfee <_printf_float+0xb6>
 801d2fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d302:	4631      	mov	r1, r6
 801d304:	4628      	mov	r0, r5
 801d306:	47b8      	blx	r7
 801d308:	3001      	adds	r0, #1
 801d30a:	f43f ae70 	beq.w	801cfee <_printf_float+0xb6>
 801d30e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d312:	2200      	movs	r2, #0
 801d314:	2300      	movs	r3, #0
 801d316:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d31a:	f7e3 fbfd 	bl	8000b18 <__aeabi_dcmpeq>
 801d31e:	b9c0      	cbnz	r0, 801d352 <_printf_float+0x41a>
 801d320:	4653      	mov	r3, sl
 801d322:	f108 0201 	add.w	r2, r8, #1
 801d326:	4631      	mov	r1, r6
 801d328:	4628      	mov	r0, r5
 801d32a:	47b8      	blx	r7
 801d32c:	3001      	adds	r0, #1
 801d32e:	d10c      	bne.n	801d34a <_printf_float+0x412>
 801d330:	e65d      	b.n	801cfee <_printf_float+0xb6>
 801d332:	2301      	movs	r3, #1
 801d334:	465a      	mov	r2, fp
 801d336:	4631      	mov	r1, r6
 801d338:	4628      	mov	r0, r5
 801d33a:	47b8      	blx	r7
 801d33c:	3001      	adds	r0, #1
 801d33e:	f43f ae56 	beq.w	801cfee <_printf_float+0xb6>
 801d342:	f108 0801 	add.w	r8, r8, #1
 801d346:	45d0      	cmp	r8, sl
 801d348:	dbf3      	blt.n	801d332 <_printf_float+0x3fa>
 801d34a:	464b      	mov	r3, r9
 801d34c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801d350:	e6df      	b.n	801d112 <_printf_float+0x1da>
 801d352:	f04f 0800 	mov.w	r8, #0
 801d356:	f104 0b1a 	add.w	fp, r4, #26
 801d35a:	e7f4      	b.n	801d346 <_printf_float+0x40e>
 801d35c:	2301      	movs	r3, #1
 801d35e:	4642      	mov	r2, r8
 801d360:	e7e1      	b.n	801d326 <_printf_float+0x3ee>
 801d362:	2301      	movs	r3, #1
 801d364:	464a      	mov	r2, r9
 801d366:	4631      	mov	r1, r6
 801d368:	4628      	mov	r0, r5
 801d36a:	47b8      	blx	r7
 801d36c:	3001      	adds	r0, #1
 801d36e:	f43f ae3e 	beq.w	801cfee <_printf_float+0xb6>
 801d372:	f108 0801 	add.w	r8, r8, #1
 801d376:	68e3      	ldr	r3, [r4, #12]
 801d378:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d37a:	1a5b      	subs	r3, r3, r1
 801d37c:	4543      	cmp	r3, r8
 801d37e:	dcf0      	bgt.n	801d362 <_printf_float+0x42a>
 801d380:	e6fc      	b.n	801d17c <_printf_float+0x244>
 801d382:	f04f 0800 	mov.w	r8, #0
 801d386:	f104 0919 	add.w	r9, r4, #25
 801d38a:	e7f4      	b.n	801d376 <_printf_float+0x43e>

0801d38c <_printf_common>:
 801d38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d390:	4616      	mov	r6, r2
 801d392:	4698      	mov	r8, r3
 801d394:	688a      	ldr	r2, [r1, #8]
 801d396:	690b      	ldr	r3, [r1, #16]
 801d398:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d39c:	4293      	cmp	r3, r2
 801d39e:	bfb8      	it	lt
 801d3a0:	4613      	movlt	r3, r2
 801d3a2:	6033      	str	r3, [r6, #0]
 801d3a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d3a8:	4607      	mov	r7, r0
 801d3aa:	460c      	mov	r4, r1
 801d3ac:	b10a      	cbz	r2, 801d3b2 <_printf_common+0x26>
 801d3ae:	3301      	adds	r3, #1
 801d3b0:	6033      	str	r3, [r6, #0]
 801d3b2:	6823      	ldr	r3, [r4, #0]
 801d3b4:	0699      	lsls	r1, r3, #26
 801d3b6:	bf42      	ittt	mi
 801d3b8:	6833      	ldrmi	r3, [r6, #0]
 801d3ba:	3302      	addmi	r3, #2
 801d3bc:	6033      	strmi	r3, [r6, #0]
 801d3be:	6825      	ldr	r5, [r4, #0]
 801d3c0:	f015 0506 	ands.w	r5, r5, #6
 801d3c4:	d106      	bne.n	801d3d4 <_printf_common+0x48>
 801d3c6:	f104 0a19 	add.w	sl, r4, #25
 801d3ca:	68e3      	ldr	r3, [r4, #12]
 801d3cc:	6832      	ldr	r2, [r6, #0]
 801d3ce:	1a9b      	subs	r3, r3, r2
 801d3d0:	42ab      	cmp	r3, r5
 801d3d2:	dc26      	bgt.n	801d422 <_printf_common+0x96>
 801d3d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d3d8:	6822      	ldr	r2, [r4, #0]
 801d3da:	3b00      	subs	r3, #0
 801d3dc:	bf18      	it	ne
 801d3de:	2301      	movne	r3, #1
 801d3e0:	0692      	lsls	r2, r2, #26
 801d3e2:	d42b      	bmi.n	801d43c <_printf_common+0xb0>
 801d3e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d3e8:	4641      	mov	r1, r8
 801d3ea:	4638      	mov	r0, r7
 801d3ec:	47c8      	blx	r9
 801d3ee:	3001      	adds	r0, #1
 801d3f0:	d01e      	beq.n	801d430 <_printf_common+0xa4>
 801d3f2:	6823      	ldr	r3, [r4, #0]
 801d3f4:	6922      	ldr	r2, [r4, #16]
 801d3f6:	f003 0306 	and.w	r3, r3, #6
 801d3fa:	2b04      	cmp	r3, #4
 801d3fc:	bf02      	ittt	eq
 801d3fe:	68e5      	ldreq	r5, [r4, #12]
 801d400:	6833      	ldreq	r3, [r6, #0]
 801d402:	1aed      	subeq	r5, r5, r3
 801d404:	68a3      	ldr	r3, [r4, #8]
 801d406:	bf0c      	ite	eq
 801d408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d40c:	2500      	movne	r5, #0
 801d40e:	4293      	cmp	r3, r2
 801d410:	bfc4      	itt	gt
 801d412:	1a9b      	subgt	r3, r3, r2
 801d414:	18ed      	addgt	r5, r5, r3
 801d416:	2600      	movs	r6, #0
 801d418:	341a      	adds	r4, #26
 801d41a:	42b5      	cmp	r5, r6
 801d41c:	d11a      	bne.n	801d454 <_printf_common+0xc8>
 801d41e:	2000      	movs	r0, #0
 801d420:	e008      	b.n	801d434 <_printf_common+0xa8>
 801d422:	2301      	movs	r3, #1
 801d424:	4652      	mov	r2, sl
 801d426:	4641      	mov	r1, r8
 801d428:	4638      	mov	r0, r7
 801d42a:	47c8      	blx	r9
 801d42c:	3001      	adds	r0, #1
 801d42e:	d103      	bne.n	801d438 <_printf_common+0xac>
 801d430:	f04f 30ff 	mov.w	r0, #4294967295
 801d434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d438:	3501      	adds	r5, #1
 801d43a:	e7c6      	b.n	801d3ca <_printf_common+0x3e>
 801d43c:	18e1      	adds	r1, r4, r3
 801d43e:	1c5a      	adds	r2, r3, #1
 801d440:	2030      	movs	r0, #48	@ 0x30
 801d442:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d446:	4422      	add	r2, r4
 801d448:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d44c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d450:	3302      	adds	r3, #2
 801d452:	e7c7      	b.n	801d3e4 <_printf_common+0x58>
 801d454:	2301      	movs	r3, #1
 801d456:	4622      	mov	r2, r4
 801d458:	4641      	mov	r1, r8
 801d45a:	4638      	mov	r0, r7
 801d45c:	47c8      	blx	r9
 801d45e:	3001      	adds	r0, #1
 801d460:	d0e6      	beq.n	801d430 <_printf_common+0xa4>
 801d462:	3601      	adds	r6, #1
 801d464:	e7d9      	b.n	801d41a <_printf_common+0x8e>
	...

0801d468 <_printf_i>:
 801d468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d46c:	7e0f      	ldrb	r7, [r1, #24]
 801d46e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d470:	2f78      	cmp	r7, #120	@ 0x78
 801d472:	4691      	mov	r9, r2
 801d474:	4680      	mov	r8, r0
 801d476:	460c      	mov	r4, r1
 801d478:	469a      	mov	sl, r3
 801d47a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d47e:	d807      	bhi.n	801d490 <_printf_i+0x28>
 801d480:	2f62      	cmp	r7, #98	@ 0x62
 801d482:	d80a      	bhi.n	801d49a <_printf_i+0x32>
 801d484:	2f00      	cmp	r7, #0
 801d486:	f000 80d2 	beq.w	801d62e <_printf_i+0x1c6>
 801d48a:	2f58      	cmp	r7, #88	@ 0x58
 801d48c:	f000 80b9 	beq.w	801d602 <_printf_i+0x19a>
 801d490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d494:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d498:	e03a      	b.n	801d510 <_printf_i+0xa8>
 801d49a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d49e:	2b15      	cmp	r3, #21
 801d4a0:	d8f6      	bhi.n	801d490 <_printf_i+0x28>
 801d4a2:	a101      	add	r1, pc, #4	@ (adr r1, 801d4a8 <_printf_i+0x40>)
 801d4a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d4a8:	0801d501 	.word	0x0801d501
 801d4ac:	0801d515 	.word	0x0801d515
 801d4b0:	0801d491 	.word	0x0801d491
 801d4b4:	0801d491 	.word	0x0801d491
 801d4b8:	0801d491 	.word	0x0801d491
 801d4bc:	0801d491 	.word	0x0801d491
 801d4c0:	0801d515 	.word	0x0801d515
 801d4c4:	0801d491 	.word	0x0801d491
 801d4c8:	0801d491 	.word	0x0801d491
 801d4cc:	0801d491 	.word	0x0801d491
 801d4d0:	0801d491 	.word	0x0801d491
 801d4d4:	0801d615 	.word	0x0801d615
 801d4d8:	0801d53f 	.word	0x0801d53f
 801d4dc:	0801d5cf 	.word	0x0801d5cf
 801d4e0:	0801d491 	.word	0x0801d491
 801d4e4:	0801d491 	.word	0x0801d491
 801d4e8:	0801d637 	.word	0x0801d637
 801d4ec:	0801d491 	.word	0x0801d491
 801d4f0:	0801d53f 	.word	0x0801d53f
 801d4f4:	0801d491 	.word	0x0801d491
 801d4f8:	0801d491 	.word	0x0801d491
 801d4fc:	0801d5d7 	.word	0x0801d5d7
 801d500:	6833      	ldr	r3, [r6, #0]
 801d502:	1d1a      	adds	r2, r3, #4
 801d504:	681b      	ldr	r3, [r3, #0]
 801d506:	6032      	str	r2, [r6, #0]
 801d508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d50c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d510:	2301      	movs	r3, #1
 801d512:	e09d      	b.n	801d650 <_printf_i+0x1e8>
 801d514:	6833      	ldr	r3, [r6, #0]
 801d516:	6820      	ldr	r0, [r4, #0]
 801d518:	1d19      	adds	r1, r3, #4
 801d51a:	6031      	str	r1, [r6, #0]
 801d51c:	0606      	lsls	r6, r0, #24
 801d51e:	d501      	bpl.n	801d524 <_printf_i+0xbc>
 801d520:	681d      	ldr	r5, [r3, #0]
 801d522:	e003      	b.n	801d52c <_printf_i+0xc4>
 801d524:	0645      	lsls	r5, r0, #25
 801d526:	d5fb      	bpl.n	801d520 <_printf_i+0xb8>
 801d528:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d52c:	2d00      	cmp	r5, #0
 801d52e:	da03      	bge.n	801d538 <_printf_i+0xd0>
 801d530:	232d      	movs	r3, #45	@ 0x2d
 801d532:	426d      	negs	r5, r5
 801d534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d538:	4859      	ldr	r0, [pc, #356]	@ (801d6a0 <_printf_i+0x238>)
 801d53a:	230a      	movs	r3, #10
 801d53c:	e011      	b.n	801d562 <_printf_i+0xfa>
 801d53e:	6821      	ldr	r1, [r4, #0]
 801d540:	6833      	ldr	r3, [r6, #0]
 801d542:	0608      	lsls	r0, r1, #24
 801d544:	f853 5b04 	ldr.w	r5, [r3], #4
 801d548:	d402      	bmi.n	801d550 <_printf_i+0xe8>
 801d54a:	0649      	lsls	r1, r1, #25
 801d54c:	bf48      	it	mi
 801d54e:	b2ad      	uxthmi	r5, r5
 801d550:	2f6f      	cmp	r7, #111	@ 0x6f
 801d552:	4853      	ldr	r0, [pc, #332]	@ (801d6a0 <_printf_i+0x238>)
 801d554:	6033      	str	r3, [r6, #0]
 801d556:	bf14      	ite	ne
 801d558:	230a      	movne	r3, #10
 801d55a:	2308      	moveq	r3, #8
 801d55c:	2100      	movs	r1, #0
 801d55e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d562:	6866      	ldr	r6, [r4, #4]
 801d564:	60a6      	str	r6, [r4, #8]
 801d566:	2e00      	cmp	r6, #0
 801d568:	bfa2      	ittt	ge
 801d56a:	6821      	ldrge	r1, [r4, #0]
 801d56c:	f021 0104 	bicge.w	r1, r1, #4
 801d570:	6021      	strge	r1, [r4, #0]
 801d572:	b90d      	cbnz	r5, 801d578 <_printf_i+0x110>
 801d574:	2e00      	cmp	r6, #0
 801d576:	d04b      	beq.n	801d610 <_printf_i+0x1a8>
 801d578:	4616      	mov	r6, r2
 801d57a:	fbb5 f1f3 	udiv	r1, r5, r3
 801d57e:	fb03 5711 	mls	r7, r3, r1, r5
 801d582:	5dc7      	ldrb	r7, [r0, r7]
 801d584:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d588:	462f      	mov	r7, r5
 801d58a:	42bb      	cmp	r3, r7
 801d58c:	460d      	mov	r5, r1
 801d58e:	d9f4      	bls.n	801d57a <_printf_i+0x112>
 801d590:	2b08      	cmp	r3, #8
 801d592:	d10b      	bne.n	801d5ac <_printf_i+0x144>
 801d594:	6823      	ldr	r3, [r4, #0]
 801d596:	07df      	lsls	r7, r3, #31
 801d598:	d508      	bpl.n	801d5ac <_printf_i+0x144>
 801d59a:	6923      	ldr	r3, [r4, #16]
 801d59c:	6861      	ldr	r1, [r4, #4]
 801d59e:	4299      	cmp	r1, r3
 801d5a0:	bfde      	ittt	le
 801d5a2:	2330      	movle	r3, #48	@ 0x30
 801d5a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d5a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d5ac:	1b92      	subs	r2, r2, r6
 801d5ae:	6122      	str	r2, [r4, #16]
 801d5b0:	f8cd a000 	str.w	sl, [sp]
 801d5b4:	464b      	mov	r3, r9
 801d5b6:	aa03      	add	r2, sp, #12
 801d5b8:	4621      	mov	r1, r4
 801d5ba:	4640      	mov	r0, r8
 801d5bc:	f7ff fee6 	bl	801d38c <_printf_common>
 801d5c0:	3001      	adds	r0, #1
 801d5c2:	d14a      	bne.n	801d65a <_printf_i+0x1f2>
 801d5c4:	f04f 30ff 	mov.w	r0, #4294967295
 801d5c8:	b004      	add	sp, #16
 801d5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d5ce:	6823      	ldr	r3, [r4, #0]
 801d5d0:	f043 0320 	orr.w	r3, r3, #32
 801d5d4:	6023      	str	r3, [r4, #0]
 801d5d6:	4833      	ldr	r0, [pc, #204]	@ (801d6a4 <_printf_i+0x23c>)
 801d5d8:	2778      	movs	r7, #120	@ 0x78
 801d5da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d5de:	6823      	ldr	r3, [r4, #0]
 801d5e0:	6831      	ldr	r1, [r6, #0]
 801d5e2:	061f      	lsls	r7, r3, #24
 801d5e4:	f851 5b04 	ldr.w	r5, [r1], #4
 801d5e8:	d402      	bmi.n	801d5f0 <_printf_i+0x188>
 801d5ea:	065f      	lsls	r7, r3, #25
 801d5ec:	bf48      	it	mi
 801d5ee:	b2ad      	uxthmi	r5, r5
 801d5f0:	6031      	str	r1, [r6, #0]
 801d5f2:	07d9      	lsls	r1, r3, #31
 801d5f4:	bf44      	itt	mi
 801d5f6:	f043 0320 	orrmi.w	r3, r3, #32
 801d5fa:	6023      	strmi	r3, [r4, #0]
 801d5fc:	b11d      	cbz	r5, 801d606 <_printf_i+0x19e>
 801d5fe:	2310      	movs	r3, #16
 801d600:	e7ac      	b.n	801d55c <_printf_i+0xf4>
 801d602:	4827      	ldr	r0, [pc, #156]	@ (801d6a0 <_printf_i+0x238>)
 801d604:	e7e9      	b.n	801d5da <_printf_i+0x172>
 801d606:	6823      	ldr	r3, [r4, #0]
 801d608:	f023 0320 	bic.w	r3, r3, #32
 801d60c:	6023      	str	r3, [r4, #0]
 801d60e:	e7f6      	b.n	801d5fe <_printf_i+0x196>
 801d610:	4616      	mov	r6, r2
 801d612:	e7bd      	b.n	801d590 <_printf_i+0x128>
 801d614:	6833      	ldr	r3, [r6, #0]
 801d616:	6825      	ldr	r5, [r4, #0]
 801d618:	6961      	ldr	r1, [r4, #20]
 801d61a:	1d18      	adds	r0, r3, #4
 801d61c:	6030      	str	r0, [r6, #0]
 801d61e:	062e      	lsls	r6, r5, #24
 801d620:	681b      	ldr	r3, [r3, #0]
 801d622:	d501      	bpl.n	801d628 <_printf_i+0x1c0>
 801d624:	6019      	str	r1, [r3, #0]
 801d626:	e002      	b.n	801d62e <_printf_i+0x1c6>
 801d628:	0668      	lsls	r0, r5, #25
 801d62a:	d5fb      	bpl.n	801d624 <_printf_i+0x1bc>
 801d62c:	8019      	strh	r1, [r3, #0]
 801d62e:	2300      	movs	r3, #0
 801d630:	6123      	str	r3, [r4, #16]
 801d632:	4616      	mov	r6, r2
 801d634:	e7bc      	b.n	801d5b0 <_printf_i+0x148>
 801d636:	6833      	ldr	r3, [r6, #0]
 801d638:	1d1a      	adds	r2, r3, #4
 801d63a:	6032      	str	r2, [r6, #0]
 801d63c:	681e      	ldr	r6, [r3, #0]
 801d63e:	6862      	ldr	r2, [r4, #4]
 801d640:	2100      	movs	r1, #0
 801d642:	4630      	mov	r0, r6
 801d644:	f7e2 fdec 	bl	8000220 <memchr>
 801d648:	b108      	cbz	r0, 801d64e <_printf_i+0x1e6>
 801d64a:	1b80      	subs	r0, r0, r6
 801d64c:	6060      	str	r0, [r4, #4]
 801d64e:	6863      	ldr	r3, [r4, #4]
 801d650:	6123      	str	r3, [r4, #16]
 801d652:	2300      	movs	r3, #0
 801d654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d658:	e7aa      	b.n	801d5b0 <_printf_i+0x148>
 801d65a:	6923      	ldr	r3, [r4, #16]
 801d65c:	4632      	mov	r2, r6
 801d65e:	4649      	mov	r1, r9
 801d660:	4640      	mov	r0, r8
 801d662:	47d0      	blx	sl
 801d664:	3001      	adds	r0, #1
 801d666:	d0ad      	beq.n	801d5c4 <_printf_i+0x15c>
 801d668:	6823      	ldr	r3, [r4, #0]
 801d66a:	079b      	lsls	r3, r3, #30
 801d66c:	d413      	bmi.n	801d696 <_printf_i+0x22e>
 801d66e:	68e0      	ldr	r0, [r4, #12]
 801d670:	9b03      	ldr	r3, [sp, #12]
 801d672:	4298      	cmp	r0, r3
 801d674:	bfb8      	it	lt
 801d676:	4618      	movlt	r0, r3
 801d678:	e7a6      	b.n	801d5c8 <_printf_i+0x160>
 801d67a:	2301      	movs	r3, #1
 801d67c:	4632      	mov	r2, r6
 801d67e:	4649      	mov	r1, r9
 801d680:	4640      	mov	r0, r8
 801d682:	47d0      	blx	sl
 801d684:	3001      	adds	r0, #1
 801d686:	d09d      	beq.n	801d5c4 <_printf_i+0x15c>
 801d688:	3501      	adds	r5, #1
 801d68a:	68e3      	ldr	r3, [r4, #12]
 801d68c:	9903      	ldr	r1, [sp, #12]
 801d68e:	1a5b      	subs	r3, r3, r1
 801d690:	42ab      	cmp	r3, r5
 801d692:	dcf2      	bgt.n	801d67a <_printf_i+0x212>
 801d694:	e7eb      	b.n	801d66e <_printf_i+0x206>
 801d696:	2500      	movs	r5, #0
 801d698:	f104 0619 	add.w	r6, r4, #25
 801d69c:	e7f5      	b.n	801d68a <_printf_i+0x222>
 801d69e:	bf00      	nop
 801d6a0:	080226b2 	.word	0x080226b2
 801d6a4:	080226c3 	.word	0x080226c3

0801d6a8 <_scanf_float>:
 801d6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6ac:	b087      	sub	sp, #28
 801d6ae:	4617      	mov	r7, r2
 801d6b0:	9303      	str	r3, [sp, #12]
 801d6b2:	688b      	ldr	r3, [r1, #8]
 801d6b4:	1e5a      	subs	r2, r3, #1
 801d6b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801d6ba:	bf81      	itttt	hi
 801d6bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801d6c0:	eb03 0b05 	addhi.w	fp, r3, r5
 801d6c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801d6c8:	608b      	strhi	r3, [r1, #8]
 801d6ca:	680b      	ldr	r3, [r1, #0]
 801d6cc:	460a      	mov	r2, r1
 801d6ce:	f04f 0500 	mov.w	r5, #0
 801d6d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801d6d6:	f842 3b1c 	str.w	r3, [r2], #28
 801d6da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801d6de:	4680      	mov	r8, r0
 801d6e0:	460c      	mov	r4, r1
 801d6e2:	bf98      	it	ls
 801d6e4:	f04f 0b00 	movls.w	fp, #0
 801d6e8:	9201      	str	r2, [sp, #4]
 801d6ea:	4616      	mov	r6, r2
 801d6ec:	46aa      	mov	sl, r5
 801d6ee:	46a9      	mov	r9, r5
 801d6f0:	9502      	str	r5, [sp, #8]
 801d6f2:	68a2      	ldr	r2, [r4, #8]
 801d6f4:	b152      	cbz	r2, 801d70c <_scanf_float+0x64>
 801d6f6:	683b      	ldr	r3, [r7, #0]
 801d6f8:	781b      	ldrb	r3, [r3, #0]
 801d6fa:	2b4e      	cmp	r3, #78	@ 0x4e
 801d6fc:	d864      	bhi.n	801d7c8 <_scanf_float+0x120>
 801d6fe:	2b40      	cmp	r3, #64	@ 0x40
 801d700:	d83c      	bhi.n	801d77c <_scanf_float+0xd4>
 801d702:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801d706:	b2c8      	uxtb	r0, r1
 801d708:	280e      	cmp	r0, #14
 801d70a:	d93a      	bls.n	801d782 <_scanf_float+0xda>
 801d70c:	f1b9 0f00 	cmp.w	r9, #0
 801d710:	d003      	beq.n	801d71a <_scanf_float+0x72>
 801d712:	6823      	ldr	r3, [r4, #0]
 801d714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801d718:	6023      	str	r3, [r4, #0]
 801d71a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d71e:	f1ba 0f01 	cmp.w	sl, #1
 801d722:	f200 8117 	bhi.w	801d954 <_scanf_float+0x2ac>
 801d726:	9b01      	ldr	r3, [sp, #4]
 801d728:	429e      	cmp	r6, r3
 801d72a:	f200 8108 	bhi.w	801d93e <_scanf_float+0x296>
 801d72e:	2001      	movs	r0, #1
 801d730:	b007      	add	sp, #28
 801d732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d736:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801d73a:	2a0d      	cmp	r2, #13
 801d73c:	d8e6      	bhi.n	801d70c <_scanf_float+0x64>
 801d73e:	a101      	add	r1, pc, #4	@ (adr r1, 801d744 <_scanf_float+0x9c>)
 801d740:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d744:	0801d88b 	.word	0x0801d88b
 801d748:	0801d70d 	.word	0x0801d70d
 801d74c:	0801d70d 	.word	0x0801d70d
 801d750:	0801d70d 	.word	0x0801d70d
 801d754:	0801d8eb 	.word	0x0801d8eb
 801d758:	0801d8c3 	.word	0x0801d8c3
 801d75c:	0801d70d 	.word	0x0801d70d
 801d760:	0801d70d 	.word	0x0801d70d
 801d764:	0801d899 	.word	0x0801d899
 801d768:	0801d70d 	.word	0x0801d70d
 801d76c:	0801d70d 	.word	0x0801d70d
 801d770:	0801d70d 	.word	0x0801d70d
 801d774:	0801d70d 	.word	0x0801d70d
 801d778:	0801d851 	.word	0x0801d851
 801d77c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801d780:	e7db      	b.n	801d73a <_scanf_float+0x92>
 801d782:	290e      	cmp	r1, #14
 801d784:	d8c2      	bhi.n	801d70c <_scanf_float+0x64>
 801d786:	a001      	add	r0, pc, #4	@ (adr r0, 801d78c <_scanf_float+0xe4>)
 801d788:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801d78c:	0801d841 	.word	0x0801d841
 801d790:	0801d70d 	.word	0x0801d70d
 801d794:	0801d841 	.word	0x0801d841
 801d798:	0801d8d7 	.word	0x0801d8d7
 801d79c:	0801d70d 	.word	0x0801d70d
 801d7a0:	0801d7e9 	.word	0x0801d7e9
 801d7a4:	0801d827 	.word	0x0801d827
 801d7a8:	0801d827 	.word	0x0801d827
 801d7ac:	0801d827 	.word	0x0801d827
 801d7b0:	0801d827 	.word	0x0801d827
 801d7b4:	0801d827 	.word	0x0801d827
 801d7b8:	0801d827 	.word	0x0801d827
 801d7bc:	0801d827 	.word	0x0801d827
 801d7c0:	0801d827 	.word	0x0801d827
 801d7c4:	0801d827 	.word	0x0801d827
 801d7c8:	2b6e      	cmp	r3, #110	@ 0x6e
 801d7ca:	d809      	bhi.n	801d7e0 <_scanf_float+0x138>
 801d7cc:	2b60      	cmp	r3, #96	@ 0x60
 801d7ce:	d8b2      	bhi.n	801d736 <_scanf_float+0x8e>
 801d7d0:	2b54      	cmp	r3, #84	@ 0x54
 801d7d2:	d07b      	beq.n	801d8cc <_scanf_float+0x224>
 801d7d4:	2b59      	cmp	r3, #89	@ 0x59
 801d7d6:	d199      	bne.n	801d70c <_scanf_float+0x64>
 801d7d8:	2d07      	cmp	r5, #7
 801d7da:	d197      	bne.n	801d70c <_scanf_float+0x64>
 801d7dc:	2508      	movs	r5, #8
 801d7de:	e02c      	b.n	801d83a <_scanf_float+0x192>
 801d7e0:	2b74      	cmp	r3, #116	@ 0x74
 801d7e2:	d073      	beq.n	801d8cc <_scanf_float+0x224>
 801d7e4:	2b79      	cmp	r3, #121	@ 0x79
 801d7e6:	e7f6      	b.n	801d7d6 <_scanf_float+0x12e>
 801d7e8:	6821      	ldr	r1, [r4, #0]
 801d7ea:	05c8      	lsls	r0, r1, #23
 801d7ec:	d51b      	bpl.n	801d826 <_scanf_float+0x17e>
 801d7ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801d7f2:	6021      	str	r1, [r4, #0]
 801d7f4:	f109 0901 	add.w	r9, r9, #1
 801d7f8:	f1bb 0f00 	cmp.w	fp, #0
 801d7fc:	d003      	beq.n	801d806 <_scanf_float+0x15e>
 801d7fe:	3201      	adds	r2, #1
 801d800:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d804:	60a2      	str	r2, [r4, #8]
 801d806:	68a3      	ldr	r3, [r4, #8]
 801d808:	3b01      	subs	r3, #1
 801d80a:	60a3      	str	r3, [r4, #8]
 801d80c:	6923      	ldr	r3, [r4, #16]
 801d80e:	3301      	adds	r3, #1
 801d810:	6123      	str	r3, [r4, #16]
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	3b01      	subs	r3, #1
 801d816:	2b00      	cmp	r3, #0
 801d818:	607b      	str	r3, [r7, #4]
 801d81a:	f340 8087 	ble.w	801d92c <_scanf_float+0x284>
 801d81e:	683b      	ldr	r3, [r7, #0]
 801d820:	3301      	adds	r3, #1
 801d822:	603b      	str	r3, [r7, #0]
 801d824:	e765      	b.n	801d6f2 <_scanf_float+0x4a>
 801d826:	eb1a 0105 	adds.w	r1, sl, r5
 801d82a:	f47f af6f 	bne.w	801d70c <_scanf_float+0x64>
 801d82e:	6822      	ldr	r2, [r4, #0]
 801d830:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801d834:	6022      	str	r2, [r4, #0]
 801d836:	460d      	mov	r5, r1
 801d838:	468a      	mov	sl, r1
 801d83a:	f806 3b01 	strb.w	r3, [r6], #1
 801d83e:	e7e2      	b.n	801d806 <_scanf_float+0x15e>
 801d840:	6822      	ldr	r2, [r4, #0]
 801d842:	0610      	lsls	r0, r2, #24
 801d844:	f57f af62 	bpl.w	801d70c <_scanf_float+0x64>
 801d848:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801d84c:	6022      	str	r2, [r4, #0]
 801d84e:	e7f4      	b.n	801d83a <_scanf_float+0x192>
 801d850:	f1ba 0f00 	cmp.w	sl, #0
 801d854:	d10e      	bne.n	801d874 <_scanf_float+0x1cc>
 801d856:	f1b9 0f00 	cmp.w	r9, #0
 801d85a:	d10e      	bne.n	801d87a <_scanf_float+0x1d2>
 801d85c:	6822      	ldr	r2, [r4, #0]
 801d85e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801d862:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801d866:	d108      	bne.n	801d87a <_scanf_float+0x1d2>
 801d868:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801d86c:	6022      	str	r2, [r4, #0]
 801d86e:	f04f 0a01 	mov.w	sl, #1
 801d872:	e7e2      	b.n	801d83a <_scanf_float+0x192>
 801d874:	f1ba 0f02 	cmp.w	sl, #2
 801d878:	d055      	beq.n	801d926 <_scanf_float+0x27e>
 801d87a:	2d01      	cmp	r5, #1
 801d87c:	d002      	beq.n	801d884 <_scanf_float+0x1dc>
 801d87e:	2d04      	cmp	r5, #4
 801d880:	f47f af44 	bne.w	801d70c <_scanf_float+0x64>
 801d884:	3501      	adds	r5, #1
 801d886:	b2ed      	uxtb	r5, r5
 801d888:	e7d7      	b.n	801d83a <_scanf_float+0x192>
 801d88a:	f1ba 0f01 	cmp.w	sl, #1
 801d88e:	f47f af3d 	bne.w	801d70c <_scanf_float+0x64>
 801d892:	f04f 0a02 	mov.w	sl, #2
 801d896:	e7d0      	b.n	801d83a <_scanf_float+0x192>
 801d898:	b97d      	cbnz	r5, 801d8ba <_scanf_float+0x212>
 801d89a:	f1b9 0f00 	cmp.w	r9, #0
 801d89e:	f47f af38 	bne.w	801d712 <_scanf_float+0x6a>
 801d8a2:	6822      	ldr	r2, [r4, #0]
 801d8a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801d8a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801d8ac:	f040 8108 	bne.w	801dac0 <_scanf_float+0x418>
 801d8b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801d8b4:	6022      	str	r2, [r4, #0]
 801d8b6:	2501      	movs	r5, #1
 801d8b8:	e7bf      	b.n	801d83a <_scanf_float+0x192>
 801d8ba:	2d03      	cmp	r5, #3
 801d8bc:	d0e2      	beq.n	801d884 <_scanf_float+0x1dc>
 801d8be:	2d05      	cmp	r5, #5
 801d8c0:	e7de      	b.n	801d880 <_scanf_float+0x1d8>
 801d8c2:	2d02      	cmp	r5, #2
 801d8c4:	f47f af22 	bne.w	801d70c <_scanf_float+0x64>
 801d8c8:	2503      	movs	r5, #3
 801d8ca:	e7b6      	b.n	801d83a <_scanf_float+0x192>
 801d8cc:	2d06      	cmp	r5, #6
 801d8ce:	f47f af1d 	bne.w	801d70c <_scanf_float+0x64>
 801d8d2:	2507      	movs	r5, #7
 801d8d4:	e7b1      	b.n	801d83a <_scanf_float+0x192>
 801d8d6:	6822      	ldr	r2, [r4, #0]
 801d8d8:	0591      	lsls	r1, r2, #22
 801d8da:	f57f af17 	bpl.w	801d70c <_scanf_float+0x64>
 801d8de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801d8e2:	6022      	str	r2, [r4, #0]
 801d8e4:	f8cd 9008 	str.w	r9, [sp, #8]
 801d8e8:	e7a7      	b.n	801d83a <_scanf_float+0x192>
 801d8ea:	6822      	ldr	r2, [r4, #0]
 801d8ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801d8f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801d8f4:	d006      	beq.n	801d904 <_scanf_float+0x25c>
 801d8f6:	0550      	lsls	r0, r2, #21
 801d8f8:	f57f af08 	bpl.w	801d70c <_scanf_float+0x64>
 801d8fc:	f1b9 0f00 	cmp.w	r9, #0
 801d900:	f000 80de 	beq.w	801dac0 <_scanf_float+0x418>
 801d904:	0591      	lsls	r1, r2, #22
 801d906:	bf58      	it	pl
 801d908:	9902      	ldrpl	r1, [sp, #8]
 801d90a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801d90e:	bf58      	it	pl
 801d910:	eba9 0101 	subpl.w	r1, r9, r1
 801d914:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801d918:	bf58      	it	pl
 801d91a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801d91e:	6022      	str	r2, [r4, #0]
 801d920:	f04f 0900 	mov.w	r9, #0
 801d924:	e789      	b.n	801d83a <_scanf_float+0x192>
 801d926:	f04f 0a03 	mov.w	sl, #3
 801d92a:	e786      	b.n	801d83a <_scanf_float+0x192>
 801d92c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801d930:	4639      	mov	r1, r7
 801d932:	4640      	mov	r0, r8
 801d934:	4798      	blx	r3
 801d936:	2800      	cmp	r0, #0
 801d938:	f43f aedb 	beq.w	801d6f2 <_scanf_float+0x4a>
 801d93c:	e6e6      	b.n	801d70c <_scanf_float+0x64>
 801d93e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801d942:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d946:	463a      	mov	r2, r7
 801d948:	4640      	mov	r0, r8
 801d94a:	4798      	blx	r3
 801d94c:	6923      	ldr	r3, [r4, #16]
 801d94e:	3b01      	subs	r3, #1
 801d950:	6123      	str	r3, [r4, #16]
 801d952:	e6e8      	b.n	801d726 <_scanf_float+0x7e>
 801d954:	1e6b      	subs	r3, r5, #1
 801d956:	2b06      	cmp	r3, #6
 801d958:	d824      	bhi.n	801d9a4 <_scanf_float+0x2fc>
 801d95a:	2d02      	cmp	r5, #2
 801d95c:	d836      	bhi.n	801d9cc <_scanf_float+0x324>
 801d95e:	9b01      	ldr	r3, [sp, #4]
 801d960:	429e      	cmp	r6, r3
 801d962:	f67f aee4 	bls.w	801d72e <_scanf_float+0x86>
 801d966:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801d96a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d96e:	463a      	mov	r2, r7
 801d970:	4640      	mov	r0, r8
 801d972:	4798      	blx	r3
 801d974:	6923      	ldr	r3, [r4, #16]
 801d976:	3b01      	subs	r3, #1
 801d978:	6123      	str	r3, [r4, #16]
 801d97a:	e7f0      	b.n	801d95e <_scanf_float+0x2b6>
 801d97c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801d980:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801d984:	463a      	mov	r2, r7
 801d986:	4640      	mov	r0, r8
 801d988:	4798      	blx	r3
 801d98a:	6923      	ldr	r3, [r4, #16]
 801d98c:	3b01      	subs	r3, #1
 801d98e:	6123      	str	r3, [r4, #16]
 801d990:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d994:	fa5f fa8a 	uxtb.w	sl, sl
 801d998:	f1ba 0f02 	cmp.w	sl, #2
 801d99c:	d1ee      	bne.n	801d97c <_scanf_float+0x2d4>
 801d99e:	3d03      	subs	r5, #3
 801d9a0:	b2ed      	uxtb	r5, r5
 801d9a2:	1b76      	subs	r6, r6, r5
 801d9a4:	6823      	ldr	r3, [r4, #0]
 801d9a6:	05da      	lsls	r2, r3, #23
 801d9a8:	d530      	bpl.n	801da0c <_scanf_float+0x364>
 801d9aa:	055b      	lsls	r3, r3, #21
 801d9ac:	d511      	bpl.n	801d9d2 <_scanf_float+0x32a>
 801d9ae:	9b01      	ldr	r3, [sp, #4]
 801d9b0:	429e      	cmp	r6, r3
 801d9b2:	f67f aebc 	bls.w	801d72e <_scanf_float+0x86>
 801d9b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801d9ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d9be:	463a      	mov	r2, r7
 801d9c0:	4640      	mov	r0, r8
 801d9c2:	4798      	blx	r3
 801d9c4:	6923      	ldr	r3, [r4, #16]
 801d9c6:	3b01      	subs	r3, #1
 801d9c8:	6123      	str	r3, [r4, #16]
 801d9ca:	e7f0      	b.n	801d9ae <_scanf_float+0x306>
 801d9cc:	46aa      	mov	sl, r5
 801d9ce:	46b3      	mov	fp, r6
 801d9d0:	e7de      	b.n	801d990 <_scanf_float+0x2e8>
 801d9d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801d9d6:	6923      	ldr	r3, [r4, #16]
 801d9d8:	2965      	cmp	r1, #101	@ 0x65
 801d9da:	f103 33ff 	add.w	r3, r3, #4294967295
 801d9de:	f106 35ff 	add.w	r5, r6, #4294967295
 801d9e2:	6123      	str	r3, [r4, #16]
 801d9e4:	d00c      	beq.n	801da00 <_scanf_float+0x358>
 801d9e6:	2945      	cmp	r1, #69	@ 0x45
 801d9e8:	d00a      	beq.n	801da00 <_scanf_float+0x358>
 801d9ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801d9ee:	463a      	mov	r2, r7
 801d9f0:	4640      	mov	r0, r8
 801d9f2:	4798      	blx	r3
 801d9f4:	6923      	ldr	r3, [r4, #16]
 801d9f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801d9fa:	3b01      	subs	r3, #1
 801d9fc:	1eb5      	subs	r5, r6, #2
 801d9fe:	6123      	str	r3, [r4, #16]
 801da00:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801da04:	463a      	mov	r2, r7
 801da06:	4640      	mov	r0, r8
 801da08:	4798      	blx	r3
 801da0a:	462e      	mov	r6, r5
 801da0c:	6822      	ldr	r2, [r4, #0]
 801da0e:	f012 0210 	ands.w	r2, r2, #16
 801da12:	d001      	beq.n	801da18 <_scanf_float+0x370>
 801da14:	2000      	movs	r0, #0
 801da16:	e68b      	b.n	801d730 <_scanf_float+0x88>
 801da18:	7032      	strb	r2, [r6, #0]
 801da1a:	6823      	ldr	r3, [r4, #0]
 801da1c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801da20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801da24:	d11c      	bne.n	801da60 <_scanf_float+0x3b8>
 801da26:	9b02      	ldr	r3, [sp, #8]
 801da28:	454b      	cmp	r3, r9
 801da2a:	eba3 0209 	sub.w	r2, r3, r9
 801da2e:	d123      	bne.n	801da78 <_scanf_float+0x3d0>
 801da30:	9901      	ldr	r1, [sp, #4]
 801da32:	2200      	movs	r2, #0
 801da34:	4640      	mov	r0, r8
 801da36:	f002 fdcf 	bl	80205d8 <_strtod_r>
 801da3a:	9b03      	ldr	r3, [sp, #12]
 801da3c:	6821      	ldr	r1, [r4, #0]
 801da3e:	681b      	ldr	r3, [r3, #0]
 801da40:	f011 0f02 	tst.w	r1, #2
 801da44:	ec57 6b10 	vmov	r6, r7, d0
 801da48:	f103 0204 	add.w	r2, r3, #4
 801da4c:	d01f      	beq.n	801da8e <_scanf_float+0x3e6>
 801da4e:	9903      	ldr	r1, [sp, #12]
 801da50:	600a      	str	r2, [r1, #0]
 801da52:	681b      	ldr	r3, [r3, #0]
 801da54:	e9c3 6700 	strd	r6, r7, [r3]
 801da58:	68e3      	ldr	r3, [r4, #12]
 801da5a:	3301      	adds	r3, #1
 801da5c:	60e3      	str	r3, [r4, #12]
 801da5e:	e7d9      	b.n	801da14 <_scanf_float+0x36c>
 801da60:	9b04      	ldr	r3, [sp, #16]
 801da62:	2b00      	cmp	r3, #0
 801da64:	d0e4      	beq.n	801da30 <_scanf_float+0x388>
 801da66:	9905      	ldr	r1, [sp, #20]
 801da68:	230a      	movs	r3, #10
 801da6a:	3101      	adds	r1, #1
 801da6c:	4640      	mov	r0, r8
 801da6e:	f002 fe33 	bl	80206d8 <_strtol_r>
 801da72:	9b04      	ldr	r3, [sp, #16]
 801da74:	9e05      	ldr	r6, [sp, #20]
 801da76:	1ac2      	subs	r2, r0, r3
 801da78:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801da7c:	429e      	cmp	r6, r3
 801da7e:	bf28      	it	cs
 801da80:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801da84:	4910      	ldr	r1, [pc, #64]	@ (801dac8 <_scanf_float+0x420>)
 801da86:	4630      	mov	r0, r6
 801da88:	f000 fa18 	bl	801debc <siprintf>
 801da8c:	e7d0      	b.n	801da30 <_scanf_float+0x388>
 801da8e:	f011 0f04 	tst.w	r1, #4
 801da92:	9903      	ldr	r1, [sp, #12]
 801da94:	600a      	str	r2, [r1, #0]
 801da96:	d1dc      	bne.n	801da52 <_scanf_float+0x3aa>
 801da98:	681d      	ldr	r5, [r3, #0]
 801da9a:	4632      	mov	r2, r6
 801da9c:	463b      	mov	r3, r7
 801da9e:	4630      	mov	r0, r6
 801daa0:	4639      	mov	r1, r7
 801daa2:	f7e3 f86b 	bl	8000b7c <__aeabi_dcmpun>
 801daa6:	b128      	cbz	r0, 801dab4 <_scanf_float+0x40c>
 801daa8:	4808      	ldr	r0, [pc, #32]	@ (801dacc <_scanf_float+0x424>)
 801daaa:	f000 fb8d 	bl	801e1c8 <nanf>
 801daae:	ed85 0a00 	vstr	s0, [r5]
 801dab2:	e7d1      	b.n	801da58 <_scanf_float+0x3b0>
 801dab4:	4630      	mov	r0, r6
 801dab6:	4639      	mov	r1, r7
 801dab8:	f7e3 f8be 	bl	8000c38 <__aeabi_d2f>
 801dabc:	6028      	str	r0, [r5, #0]
 801dabe:	e7cb      	b.n	801da58 <_scanf_float+0x3b0>
 801dac0:	f04f 0900 	mov.w	r9, #0
 801dac4:	e629      	b.n	801d71a <_scanf_float+0x72>
 801dac6:	bf00      	nop
 801dac8:	080226d4 	.word	0x080226d4
 801dacc:	08022a6d 	.word	0x08022a6d

0801dad0 <std>:
 801dad0:	2300      	movs	r3, #0
 801dad2:	b510      	push	{r4, lr}
 801dad4:	4604      	mov	r4, r0
 801dad6:	e9c0 3300 	strd	r3, r3, [r0]
 801dada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dade:	6083      	str	r3, [r0, #8]
 801dae0:	8181      	strh	r1, [r0, #12]
 801dae2:	6643      	str	r3, [r0, #100]	@ 0x64
 801dae4:	81c2      	strh	r2, [r0, #14]
 801dae6:	6183      	str	r3, [r0, #24]
 801dae8:	4619      	mov	r1, r3
 801daea:	2208      	movs	r2, #8
 801daec:	305c      	adds	r0, #92	@ 0x5c
 801daee:	f000 fadd 	bl	801e0ac <memset>
 801daf2:	4b0d      	ldr	r3, [pc, #52]	@ (801db28 <std+0x58>)
 801daf4:	6263      	str	r3, [r4, #36]	@ 0x24
 801daf6:	4b0d      	ldr	r3, [pc, #52]	@ (801db2c <std+0x5c>)
 801daf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801dafa:	4b0d      	ldr	r3, [pc, #52]	@ (801db30 <std+0x60>)
 801dafc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801dafe:	4b0d      	ldr	r3, [pc, #52]	@ (801db34 <std+0x64>)
 801db00:	6323      	str	r3, [r4, #48]	@ 0x30
 801db02:	4b0d      	ldr	r3, [pc, #52]	@ (801db38 <std+0x68>)
 801db04:	6224      	str	r4, [r4, #32]
 801db06:	429c      	cmp	r4, r3
 801db08:	d006      	beq.n	801db18 <std+0x48>
 801db0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801db0e:	4294      	cmp	r4, r2
 801db10:	d002      	beq.n	801db18 <std+0x48>
 801db12:	33d0      	adds	r3, #208	@ 0xd0
 801db14:	429c      	cmp	r4, r3
 801db16:	d105      	bne.n	801db24 <std+0x54>
 801db18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801db1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db20:	f000 bb40 	b.w	801e1a4 <__retarget_lock_init_recursive>
 801db24:	bd10      	pop	{r4, pc}
 801db26:	bf00      	nop
 801db28:	0801defd 	.word	0x0801defd
 801db2c:	0801df1f 	.word	0x0801df1f
 801db30:	0801df57 	.word	0x0801df57
 801db34:	0801df7b 	.word	0x0801df7b
 801db38:	2001bda4 	.word	0x2001bda4

0801db3c <stdio_exit_handler>:
 801db3c:	4a02      	ldr	r2, [pc, #8]	@ (801db48 <stdio_exit_handler+0xc>)
 801db3e:	4903      	ldr	r1, [pc, #12]	@ (801db4c <stdio_exit_handler+0x10>)
 801db40:	4803      	ldr	r0, [pc, #12]	@ (801db50 <stdio_exit_handler+0x14>)
 801db42:	f000 b869 	b.w	801dc18 <_fwalk_sglue>
 801db46:	bf00      	nop
 801db48:	20000030 	.word	0x20000030
 801db4c:	08020d19 	.word	0x08020d19
 801db50:	20000040 	.word	0x20000040

0801db54 <cleanup_stdio>:
 801db54:	6841      	ldr	r1, [r0, #4]
 801db56:	4b0c      	ldr	r3, [pc, #48]	@ (801db88 <cleanup_stdio+0x34>)
 801db58:	4299      	cmp	r1, r3
 801db5a:	b510      	push	{r4, lr}
 801db5c:	4604      	mov	r4, r0
 801db5e:	d001      	beq.n	801db64 <cleanup_stdio+0x10>
 801db60:	f003 f8da 	bl	8020d18 <_fflush_r>
 801db64:	68a1      	ldr	r1, [r4, #8]
 801db66:	4b09      	ldr	r3, [pc, #36]	@ (801db8c <cleanup_stdio+0x38>)
 801db68:	4299      	cmp	r1, r3
 801db6a:	d002      	beq.n	801db72 <cleanup_stdio+0x1e>
 801db6c:	4620      	mov	r0, r4
 801db6e:	f003 f8d3 	bl	8020d18 <_fflush_r>
 801db72:	68e1      	ldr	r1, [r4, #12]
 801db74:	4b06      	ldr	r3, [pc, #24]	@ (801db90 <cleanup_stdio+0x3c>)
 801db76:	4299      	cmp	r1, r3
 801db78:	d004      	beq.n	801db84 <cleanup_stdio+0x30>
 801db7a:	4620      	mov	r0, r4
 801db7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db80:	f003 b8ca 	b.w	8020d18 <_fflush_r>
 801db84:	bd10      	pop	{r4, pc}
 801db86:	bf00      	nop
 801db88:	2001bda4 	.word	0x2001bda4
 801db8c:	2001be0c 	.word	0x2001be0c
 801db90:	2001be74 	.word	0x2001be74

0801db94 <global_stdio_init.part.0>:
 801db94:	b510      	push	{r4, lr}
 801db96:	4b0b      	ldr	r3, [pc, #44]	@ (801dbc4 <global_stdio_init.part.0+0x30>)
 801db98:	4c0b      	ldr	r4, [pc, #44]	@ (801dbc8 <global_stdio_init.part.0+0x34>)
 801db9a:	4a0c      	ldr	r2, [pc, #48]	@ (801dbcc <global_stdio_init.part.0+0x38>)
 801db9c:	601a      	str	r2, [r3, #0]
 801db9e:	4620      	mov	r0, r4
 801dba0:	2200      	movs	r2, #0
 801dba2:	2104      	movs	r1, #4
 801dba4:	f7ff ff94 	bl	801dad0 <std>
 801dba8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801dbac:	2201      	movs	r2, #1
 801dbae:	2109      	movs	r1, #9
 801dbb0:	f7ff ff8e 	bl	801dad0 <std>
 801dbb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801dbb8:	2202      	movs	r2, #2
 801dbba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbbe:	2112      	movs	r1, #18
 801dbc0:	f7ff bf86 	b.w	801dad0 <std>
 801dbc4:	2001bedc 	.word	0x2001bedc
 801dbc8:	2001bda4 	.word	0x2001bda4
 801dbcc:	0801db3d 	.word	0x0801db3d

0801dbd0 <__sfp_lock_acquire>:
 801dbd0:	4801      	ldr	r0, [pc, #4]	@ (801dbd8 <__sfp_lock_acquire+0x8>)
 801dbd2:	f000 bae8 	b.w	801e1a6 <__retarget_lock_acquire_recursive>
 801dbd6:	bf00      	nop
 801dbd8:	2001bee5 	.word	0x2001bee5

0801dbdc <__sfp_lock_release>:
 801dbdc:	4801      	ldr	r0, [pc, #4]	@ (801dbe4 <__sfp_lock_release+0x8>)
 801dbde:	f000 bae3 	b.w	801e1a8 <__retarget_lock_release_recursive>
 801dbe2:	bf00      	nop
 801dbe4:	2001bee5 	.word	0x2001bee5

0801dbe8 <__sinit>:
 801dbe8:	b510      	push	{r4, lr}
 801dbea:	4604      	mov	r4, r0
 801dbec:	f7ff fff0 	bl	801dbd0 <__sfp_lock_acquire>
 801dbf0:	6a23      	ldr	r3, [r4, #32]
 801dbf2:	b11b      	cbz	r3, 801dbfc <__sinit+0x14>
 801dbf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbf8:	f7ff bff0 	b.w	801dbdc <__sfp_lock_release>
 801dbfc:	4b04      	ldr	r3, [pc, #16]	@ (801dc10 <__sinit+0x28>)
 801dbfe:	6223      	str	r3, [r4, #32]
 801dc00:	4b04      	ldr	r3, [pc, #16]	@ (801dc14 <__sinit+0x2c>)
 801dc02:	681b      	ldr	r3, [r3, #0]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d1f5      	bne.n	801dbf4 <__sinit+0xc>
 801dc08:	f7ff ffc4 	bl	801db94 <global_stdio_init.part.0>
 801dc0c:	e7f2      	b.n	801dbf4 <__sinit+0xc>
 801dc0e:	bf00      	nop
 801dc10:	0801db55 	.word	0x0801db55
 801dc14:	2001bedc 	.word	0x2001bedc

0801dc18 <_fwalk_sglue>:
 801dc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dc1c:	4607      	mov	r7, r0
 801dc1e:	4688      	mov	r8, r1
 801dc20:	4614      	mov	r4, r2
 801dc22:	2600      	movs	r6, #0
 801dc24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dc28:	f1b9 0901 	subs.w	r9, r9, #1
 801dc2c:	d505      	bpl.n	801dc3a <_fwalk_sglue+0x22>
 801dc2e:	6824      	ldr	r4, [r4, #0]
 801dc30:	2c00      	cmp	r4, #0
 801dc32:	d1f7      	bne.n	801dc24 <_fwalk_sglue+0xc>
 801dc34:	4630      	mov	r0, r6
 801dc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dc3a:	89ab      	ldrh	r3, [r5, #12]
 801dc3c:	2b01      	cmp	r3, #1
 801dc3e:	d907      	bls.n	801dc50 <_fwalk_sglue+0x38>
 801dc40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dc44:	3301      	adds	r3, #1
 801dc46:	d003      	beq.n	801dc50 <_fwalk_sglue+0x38>
 801dc48:	4629      	mov	r1, r5
 801dc4a:	4638      	mov	r0, r7
 801dc4c:	47c0      	blx	r8
 801dc4e:	4306      	orrs	r6, r0
 801dc50:	3568      	adds	r5, #104	@ 0x68
 801dc52:	e7e9      	b.n	801dc28 <_fwalk_sglue+0x10>

0801dc54 <iprintf>:
 801dc54:	b40f      	push	{r0, r1, r2, r3}
 801dc56:	b507      	push	{r0, r1, r2, lr}
 801dc58:	4906      	ldr	r1, [pc, #24]	@ (801dc74 <iprintf+0x20>)
 801dc5a:	ab04      	add	r3, sp, #16
 801dc5c:	6808      	ldr	r0, [r1, #0]
 801dc5e:	f853 2b04 	ldr.w	r2, [r3], #4
 801dc62:	6881      	ldr	r1, [r0, #8]
 801dc64:	9301      	str	r3, [sp, #4]
 801dc66:	f002 febb 	bl	80209e0 <_vfiprintf_r>
 801dc6a:	b003      	add	sp, #12
 801dc6c:	f85d eb04 	ldr.w	lr, [sp], #4
 801dc70:	b004      	add	sp, #16
 801dc72:	4770      	bx	lr
 801dc74:	2000003c 	.word	0x2000003c

0801dc78 <putchar>:
 801dc78:	4b02      	ldr	r3, [pc, #8]	@ (801dc84 <putchar+0xc>)
 801dc7a:	4601      	mov	r1, r0
 801dc7c:	6818      	ldr	r0, [r3, #0]
 801dc7e:	6882      	ldr	r2, [r0, #8]
 801dc80:	f003 b8d4 	b.w	8020e2c <_putc_r>
 801dc84:	2000003c 	.word	0x2000003c

0801dc88 <_puts_r>:
 801dc88:	6a03      	ldr	r3, [r0, #32]
 801dc8a:	b570      	push	{r4, r5, r6, lr}
 801dc8c:	6884      	ldr	r4, [r0, #8]
 801dc8e:	4605      	mov	r5, r0
 801dc90:	460e      	mov	r6, r1
 801dc92:	b90b      	cbnz	r3, 801dc98 <_puts_r+0x10>
 801dc94:	f7ff ffa8 	bl	801dbe8 <__sinit>
 801dc98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dc9a:	07db      	lsls	r3, r3, #31
 801dc9c:	d405      	bmi.n	801dcaa <_puts_r+0x22>
 801dc9e:	89a3      	ldrh	r3, [r4, #12]
 801dca0:	0598      	lsls	r0, r3, #22
 801dca2:	d402      	bmi.n	801dcaa <_puts_r+0x22>
 801dca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dca6:	f000 fa7e 	bl	801e1a6 <__retarget_lock_acquire_recursive>
 801dcaa:	89a3      	ldrh	r3, [r4, #12]
 801dcac:	0719      	lsls	r1, r3, #28
 801dcae:	d502      	bpl.n	801dcb6 <_puts_r+0x2e>
 801dcb0:	6923      	ldr	r3, [r4, #16]
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	d135      	bne.n	801dd22 <_puts_r+0x9a>
 801dcb6:	4621      	mov	r1, r4
 801dcb8:	4628      	mov	r0, r5
 801dcba:	f000 f9a1 	bl	801e000 <__swsetup_r>
 801dcbe:	b380      	cbz	r0, 801dd22 <_puts_r+0x9a>
 801dcc0:	f04f 35ff 	mov.w	r5, #4294967295
 801dcc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dcc6:	07da      	lsls	r2, r3, #31
 801dcc8:	d405      	bmi.n	801dcd6 <_puts_r+0x4e>
 801dcca:	89a3      	ldrh	r3, [r4, #12]
 801dccc:	059b      	lsls	r3, r3, #22
 801dcce:	d402      	bmi.n	801dcd6 <_puts_r+0x4e>
 801dcd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dcd2:	f000 fa69 	bl	801e1a8 <__retarget_lock_release_recursive>
 801dcd6:	4628      	mov	r0, r5
 801dcd8:	bd70      	pop	{r4, r5, r6, pc}
 801dcda:	2b00      	cmp	r3, #0
 801dcdc:	da04      	bge.n	801dce8 <_puts_r+0x60>
 801dcde:	69a2      	ldr	r2, [r4, #24]
 801dce0:	429a      	cmp	r2, r3
 801dce2:	dc17      	bgt.n	801dd14 <_puts_r+0x8c>
 801dce4:	290a      	cmp	r1, #10
 801dce6:	d015      	beq.n	801dd14 <_puts_r+0x8c>
 801dce8:	6823      	ldr	r3, [r4, #0]
 801dcea:	1c5a      	adds	r2, r3, #1
 801dcec:	6022      	str	r2, [r4, #0]
 801dcee:	7019      	strb	r1, [r3, #0]
 801dcf0:	68a3      	ldr	r3, [r4, #8]
 801dcf2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801dcf6:	3b01      	subs	r3, #1
 801dcf8:	60a3      	str	r3, [r4, #8]
 801dcfa:	2900      	cmp	r1, #0
 801dcfc:	d1ed      	bne.n	801dcda <_puts_r+0x52>
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	da11      	bge.n	801dd26 <_puts_r+0x9e>
 801dd02:	4622      	mov	r2, r4
 801dd04:	210a      	movs	r1, #10
 801dd06:	4628      	mov	r0, r5
 801dd08:	f000 f93b 	bl	801df82 <__swbuf_r>
 801dd0c:	3001      	adds	r0, #1
 801dd0e:	d0d7      	beq.n	801dcc0 <_puts_r+0x38>
 801dd10:	250a      	movs	r5, #10
 801dd12:	e7d7      	b.n	801dcc4 <_puts_r+0x3c>
 801dd14:	4622      	mov	r2, r4
 801dd16:	4628      	mov	r0, r5
 801dd18:	f000 f933 	bl	801df82 <__swbuf_r>
 801dd1c:	3001      	adds	r0, #1
 801dd1e:	d1e7      	bne.n	801dcf0 <_puts_r+0x68>
 801dd20:	e7ce      	b.n	801dcc0 <_puts_r+0x38>
 801dd22:	3e01      	subs	r6, #1
 801dd24:	e7e4      	b.n	801dcf0 <_puts_r+0x68>
 801dd26:	6823      	ldr	r3, [r4, #0]
 801dd28:	1c5a      	adds	r2, r3, #1
 801dd2a:	6022      	str	r2, [r4, #0]
 801dd2c:	220a      	movs	r2, #10
 801dd2e:	701a      	strb	r2, [r3, #0]
 801dd30:	e7ee      	b.n	801dd10 <_puts_r+0x88>
	...

0801dd34 <puts>:
 801dd34:	4b02      	ldr	r3, [pc, #8]	@ (801dd40 <puts+0xc>)
 801dd36:	4601      	mov	r1, r0
 801dd38:	6818      	ldr	r0, [r3, #0]
 801dd3a:	f7ff bfa5 	b.w	801dc88 <_puts_r>
 801dd3e:	bf00      	nop
 801dd40:	2000003c 	.word	0x2000003c

0801dd44 <setbuf>:
 801dd44:	fab1 f281 	clz	r2, r1
 801dd48:	0952      	lsrs	r2, r2, #5
 801dd4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801dd4e:	0052      	lsls	r2, r2, #1
 801dd50:	f000 b800 	b.w	801dd54 <setvbuf>

0801dd54 <setvbuf>:
 801dd54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801dd58:	461d      	mov	r5, r3
 801dd5a:	4b57      	ldr	r3, [pc, #348]	@ (801deb8 <setvbuf+0x164>)
 801dd5c:	681f      	ldr	r7, [r3, #0]
 801dd5e:	4604      	mov	r4, r0
 801dd60:	460e      	mov	r6, r1
 801dd62:	4690      	mov	r8, r2
 801dd64:	b127      	cbz	r7, 801dd70 <setvbuf+0x1c>
 801dd66:	6a3b      	ldr	r3, [r7, #32]
 801dd68:	b913      	cbnz	r3, 801dd70 <setvbuf+0x1c>
 801dd6a:	4638      	mov	r0, r7
 801dd6c:	f7ff ff3c 	bl	801dbe8 <__sinit>
 801dd70:	f1b8 0f02 	cmp.w	r8, #2
 801dd74:	d006      	beq.n	801dd84 <setvbuf+0x30>
 801dd76:	f1b8 0f01 	cmp.w	r8, #1
 801dd7a:	f200 809a 	bhi.w	801deb2 <setvbuf+0x15e>
 801dd7e:	2d00      	cmp	r5, #0
 801dd80:	f2c0 8097 	blt.w	801deb2 <setvbuf+0x15e>
 801dd84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dd86:	07d9      	lsls	r1, r3, #31
 801dd88:	d405      	bmi.n	801dd96 <setvbuf+0x42>
 801dd8a:	89a3      	ldrh	r3, [r4, #12]
 801dd8c:	059a      	lsls	r2, r3, #22
 801dd8e:	d402      	bmi.n	801dd96 <setvbuf+0x42>
 801dd90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dd92:	f000 fa08 	bl	801e1a6 <__retarget_lock_acquire_recursive>
 801dd96:	4621      	mov	r1, r4
 801dd98:	4638      	mov	r0, r7
 801dd9a:	f002 ffbd 	bl	8020d18 <_fflush_r>
 801dd9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dda0:	b141      	cbz	r1, 801ddb4 <setvbuf+0x60>
 801dda2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dda6:	4299      	cmp	r1, r3
 801dda8:	d002      	beq.n	801ddb0 <setvbuf+0x5c>
 801ddaa:	4638      	mov	r0, r7
 801ddac:	f001 f860 	bl	801ee70 <_free_r>
 801ddb0:	2300      	movs	r3, #0
 801ddb2:	6363      	str	r3, [r4, #52]	@ 0x34
 801ddb4:	2300      	movs	r3, #0
 801ddb6:	61a3      	str	r3, [r4, #24]
 801ddb8:	6063      	str	r3, [r4, #4]
 801ddba:	89a3      	ldrh	r3, [r4, #12]
 801ddbc:	061b      	lsls	r3, r3, #24
 801ddbe:	d503      	bpl.n	801ddc8 <setvbuf+0x74>
 801ddc0:	6921      	ldr	r1, [r4, #16]
 801ddc2:	4638      	mov	r0, r7
 801ddc4:	f001 f854 	bl	801ee70 <_free_r>
 801ddc8:	89a3      	ldrh	r3, [r4, #12]
 801ddca:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 801ddce:	f023 0303 	bic.w	r3, r3, #3
 801ddd2:	f1b8 0f02 	cmp.w	r8, #2
 801ddd6:	81a3      	strh	r3, [r4, #12]
 801ddd8:	d061      	beq.n	801de9e <setvbuf+0x14a>
 801ddda:	ab01      	add	r3, sp, #4
 801dddc:	466a      	mov	r2, sp
 801ddde:	4621      	mov	r1, r4
 801dde0:	4638      	mov	r0, r7
 801dde2:	f002 ffc1 	bl	8020d68 <__swhatbuf_r>
 801dde6:	89a3      	ldrh	r3, [r4, #12]
 801dde8:	4318      	orrs	r0, r3
 801ddea:	81a0      	strh	r0, [r4, #12]
 801ddec:	bb2d      	cbnz	r5, 801de3a <setvbuf+0xe6>
 801ddee:	9d00      	ldr	r5, [sp, #0]
 801ddf0:	4628      	mov	r0, r5
 801ddf2:	f001 f887 	bl	801ef04 <malloc>
 801ddf6:	4606      	mov	r6, r0
 801ddf8:	2800      	cmp	r0, #0
 801ddfa:	d152      	bne.n	801dea2 <setvbuf+0x14e>
 801ddfc:	f8dd 9000 	ldr.w	r9, [sp]
 801de00:	45a9      	cmp	r9, r5
 801de02:	d140      	bne.n	801de86 <setvbuf+0x132>
 801de04:	f04f 35ff 	mov.w	r5, #4294967295
 801de08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de0c:	f043 0202 	orr.w	r2, r3, #2
 801de10:	81a2      	strh	r2, [r4, #12]
 801de12:	2200      	movs	r2, #0
 801de14:	60a2      	str	r2, [r4, #8]
 801de16:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 801de1a:	6022      	str	r2, [r4, #0]
 801de1c:	6122      	str	r2, [r4, #16]
 801de1e:	2201      	movs	r2, #1
 801de20:	6162      	str	r2, [r4, #20]
 801de22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801de24:	07d6      	lsls	r6, r2, #31
 801de26:	d404      	bmi.n	801de32 <setvbuf+0xde>
 801de28:	0598      	lsls	r0, r3, #22
 801de2a:	d402      	bmi.n	801de32 <setvbuf+0xde>
 801de2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801de2e:	f000 f9bb 	bl	801e1a8 <__retarget_lock_release_recursive>
 801de32:	4628      	mov	r0, r5
 801de34:	b003      	add	sp, #12
 801de36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801de3a:	2e00      	cmp	r6, #0
 801de3c:	d0d8      	beq.n	801ddf0 <setvbuf+0x9c>
 801de3e:	6a3b      	ldr	r3, [r7, #32]
 801de40:	b913      	cbnz	r3, 801de48 <setvbuf+0xf4>
 801de42:	4638      	mov	r0, r7
 801de44:	f7ff fed0 	bl	801dbe8 <__sinit>
 801de48:	f1b8 0f01 	cmp.w	r8, #1
 801de4c:	bf08      	it	eq
 801de4e:	89a3      	ldrheq	r3, [r4, #12]
 801de50:	6026      	str	r6, [r4, #0]
 801de52:	bf04      	itt	eq
 801de54:	f043 0301 	orreq.w	r3, r3, #1
 801de58:	81a3      	strheq	r3, [r4, #12]
 801de5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de5e:	f013 0208 	ands.w	r2, r3, #8
 801de62:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801de66:	d01e      	beq.n	801dea6 <setvbuf+0x152>
 801de68:	07d9      	lsls	r1, r3, #31
 801de6a:	bf41      	itttt	mi
 801de6c:	2200      	movmi	r2, #0
 801de6e:	426d      	negmi	r5, r5
 801de70:	60a2      	strmi	r2, [r4, #8]
 801de72:	61a5      	strmi	r5, [r4, #24]
 801de74:	bf58      	it	pl
 801de76:	60a5      	strpl	r5, [r4, #8]
 801de78:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801de7a:	07d2      	lsls	r2, r2, #31
 801de7c:	d401      	bmi.n	801de82 <setvbuf+0x12e>
 801de7e:	059b      	lsls	r3, r3, #22
 801de80:	d513      	bpl.n	801deaa <setvbuf+0x156>
 801de82:	2500      	movs	r5, #0
 801de84:	e7d5      	b.n	801de32 <setvbuf+0xde>
 801de86:	4648      	mov	r0, r9
 801de88:	f001 f83c 	bl	801ef04 <malloc>
 801de8c:	4606      	mov	r6, r0
 801de8e:	2800      	cmp	r0, #0
 801de90:	d0b8      	beq.n	801de04 <setvbuf+0xb0>
 801de92:	89a3      	ldrh	r3, [r4, #12]
 801de94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801de98:	81a3      	strh	r3, [r4, #12]
 801de9a:	464d      	mov	r5, r9
 801de9c:	e7cf      	b.n	801de3e <setvbuf+0xea>
 801de9e:	2500      	movs	r5, #0
 801dea0:	e7b2      	b.n	801de08 <setvbuf+0xb4>
 801dea2:	46a9      	mov	r9, r5
 801dea4:	e7f5      	b.n	801de92 <setvbuf+0x13e>
 801dea6:	60a2      	str	r2, [r4, #8]
 801dea8:	e7e6      	b.n	801de78 <setvbuf+0x124>
 801deaa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801deac:	f000 f97c 	bl	801e1a8 <__retarget_lock_release_recursive>
 801deb0:	e7e7      	b.n	801de82 <setvbuf+0x12e>
 801deb2:	f04f 35ff 	mov.w	r5, #4294967295
 801deb6:	e7bc      	b.n	801de32 <setvbuf+0xde>
 801deb8:	2000003c 	.word	0x2000003c

0801debc <siprintf>:
 801debc:	b40e      	push	{r1, r2, r3}
 801debe:	b500      	push	{lr}
 801dec0:	b09c      	sub	sp, #112	@ 0x70
 801dec2:	ab1d      	add	r3, sp, #116	@ 0x74
 801dec4:	9002      	str	r0, [sp, #8]
 801dec6:	9006      	str	r0, [sp, #24]
 801dec8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801decc:	4809      	ldr	r0, [pc, #36]	@ (801def4 <siprintf+0x38>)
 801dece:	9107      	str	r1, [sp, #28]
 801ded0:	9104      	str	r1, [sp, #16]
 801ded2:	4909      	ldr	r1, [pc, #36]	@ (801def8 <siprintf+0x3c>)
 801ded4:	f853 2b04 	ldr.w	r2, [r3], #4
 801ded8:	9105      	str	r1, [sp, #20]
 801deda:	6800      	ldr	r0, [r0, #0]
 801dedc:	9301      	str	r3, [sp, #4]
 801dede:	a902      	add	r1, sp, #8
 801dee0:	f002 fc58 	bl	8020794 <_svfiprintf_r>
 801dee4:	9b02      	ldr	r3, [sp, #8]
 801dee6:	2200      	movs	r2, #0
 801dee8:	701a      	strb	r2, [r3, #0]
 801deea:	b01c      	add	sp, #112	@ 0x70
 801deec:	f85d eb04 	ldr.w	lr, [sp], #4
 801def0:	b003      	add	sp, #12
 801def2:	4770      	bx	lr
 801def4:	2000003c 	.word	0x2000003c
 801def8:	ffff0208 	.word	0xffff0208

0801defc <__sread>:
 801defc:	b510      	push	{r4, lr}
 801defe:	460c      	mov	r4, r1
 801df00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df04:	f000 f900 	bl	801e108 <_read_r>
 801df08:	2800      	cmp	r0, #0
 801df0a:	bfab      	itete	ge
 801df0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801df0e:	89a3      	ldrhlt	r3, [r4, #12]
 801df10:	181b      	addge	r3, r3, r0
 801df12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801df16:	bfac      	ite	ge
 801df18:	6563      	strge	r3, [r4, #84]	@ 0x54
 801df1a:	81a3      	strhlt	r3, [r4, #12]
 801df1c:	bd10      	pop	{r4, pc}

0801df1e <__swrite>:
 801df1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df22:	461f      	mov	r7, r3
 801df24:	898b      	ldrh	r3, [r1, #12]
 801df26:	05db      	lsls	r3, r3, #23
 801df28:	4605      	mov	r5, r0
 801df2a:	460c      	mov	r4, r1
 801df2c:	4616      	mov	r6, r2
 801df2e:	d505      	bpl.n	801df3c <__swrite+0x1e>
 801df30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df34:	2302      	movs	r3, #2
 801df36:	2200      	movs	r2, #0
 801df38:	f000 f8d4 	bl	801e0e4 <_lseek_r>
 801df3c:	89a3      	ldrh	r3, [r4, #12]
 801df3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801df46:	81a3      	strh	r3, [r4, #12]
 801df48:	4632      	mov	r2, r6
 801df4a:	463b      	mov	r3, r7
 801df4c:	4628      	mov	r0, r5
 801df4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801df52:	f000 b8eb 	b.w	801e12c <_write_r>

0801df56 <__sseek>:
 801df56:	b510      	push	{r4, lr}
 801df58:	460c      	mov	r4, r1
 801df5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df5e:	f000 f8c1 	bl	801e0e4 <_lseek_r>
 801df62:	1c43      	adds	r3, r0, #1
 801df64:	89a3      	ldrh	r3, [r4, #12]
 801df66:	bf15      	itete	ne
 801df68:	6560      	strne	r0, [r4, #84]	@ 0x54
 801df6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801df6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801df72:	81a3      	strheq	r3, [r4, #12]
 801df74:	bf18      	it	ne
 801df76:	81a3      	strhne	r3, [r4, #12]
 801df78:	bd10      	pop	{r4, pc}

0801df7a <__sclose>:
 801df7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df7e:	f000 b8a1 	b.w	801e0c4 <_close_r>

0801df82 <__swbuf_r>:
 801df82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df84:	460e      	mov	r6, r1
 801df86:	4614      	mov	r4, r2
 801df88:	4605      	mov	r5, r0
 801df8a:	b118      	cbz	r0, 801df94 <__swbuf_r+0x12>
 801df8c:	6a03      	ldr	r3, [r0, #32]
 801df8e:	b90b      	cbnz	r3, 801df94 <__swbuf_r+0x12>
 801df90:	f7ff fe2a 	bl	801dbe8 <__sinit>
 801df94:	69a3      	ldr	r3, [r4, #24]
 801df96:	60a3      	str	r3, [r4, #8]
 801df98:	89a3      	ldrh	r3, [r4, #12]
 801df9a:	071a      	lsls	r2, r3, #28
 801df9c:	d501      	bpl.n	801dfa2 <__swbuf_r+0x20>
 801df9e:	6923      	ldr	r3, [r4, #16]
 801dfa0:	b943      	cbnz	r3, 801dfb4 <__swbuf_r+0x32>
 801dfa2:	4621      	mov	r1, r4
 801dfa4:	4628      	mov	r0, r5
 801dfa6:	f000 f82b 	bl	801e000 <__swsetup_r>
 801dfaa:	b118      	cbz	r0, 801dfb4 <__swbuf_r+0x32>
 801dfac:	f04f 37ff 	mov.w	r7, #4294967295
 801dfb0:	4638      	mov	r0, r7
 801dfb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dfb4:	6823      	ldr	r3, [r4, #0]
 801dfb6:	6922      	ldr	r2, [r4, #16]
 801dfb8:	1a98      	subs	r0, r3, r2
 801dfba:	6963      	ldr	r3, [r4, #20]
 801dfbc:	b2f6      	uxtb	r6, r6
 801dfbe:	4283      	cmp	r3, r0
 801dfc0:	4637      	mov	r7, r6
 801dfc2:	dc05      	bgt.n	801dfd0 <__swbuf_r+0x4e>
 801dfc4:	4621      	mov	r1, r4
 801dfc6:	4628      	mov	r0, r5
 801dfc8:	f002 fea6 	bl	8020d18 <_fflush_r>
 801dfcc:	2800      	cmp	r0, #0
 801dfce:	d1ed      	bne.n	801dfac <__swbuf_r+0x2a>
 801dfd0:	68a3      	ldr	r3, [r4, #8]
 801dfd2:	3b01      	subs	r3, #1
 801dfd4:	60a3      	str	r3, [r4, #8]
 801dfd6:	6823      	ldr	r3, [r4, #0]
 801dfd8:	1c5a      	adds	r2, r3, #1
 801dfda:	6022      	str	r2, [r4, #0]
 801dfdc:	701e      	strb	r6, [r3, #0]
 801dfde:	6962      	ldr	r2, [r4, #20]
 801dfe0:	1c43      	adds	r3, r0, #1
 801dfe2:	429a      	cmp	r2, r3
 801dfe4:	d004      	beq.n	801dff0 <__swbuf_r+0x6e>
 801dfe6:	89a3      	ldrh	r3, [r4, #12]
 801dfe8:	07db      	lsls	r3, r3, #31
 801dfea:	d5e1      	bpl.n	801dfb0 <__swbuf_r+0x2e>
 801dfec:	2e0a      	cmp	r6, #10
 801dfee:	d1df      	bne.n	801dfb0 <__swbuf_r+0x2e>
 801dff0:	4621      	mov	r1, r4
 801dff2:	4628      	mov	r0, r5
 801dff4:	f002 fe90 	bl	8020d18 <_fflush_r>
 801dff8:	2800      	cmp	r0, #0
 801dffa:	d0d9      	beq.n	801dfb0 <__swbuf_r+0x2e>
 801dffc:	e7d6      	b.n	801dfac <__swbuf_r+0x2a>
	...

0801e000 <__swsetup_r>:
 801e000:	b538      	push	{r3, r4, r5, lr}
 801e002:	4b29      	ldr	r3, [pc, #164]	@ (801e0a8 <__swsetup_r+0xa8>)
 801e004:	4605      	mov	r5, r0
 801e006:	6818      	ldr	r0, [r3, #0]
 801e008:	460c      	mov	r4, r1
 801e00a:	b118      	cbz	r0, 801e014 <__swsetup_r+0x14>
 801e00c:	6a03      	ldr	r3, [r0, #32]
 801e00e:	b90b      	cbnz	r3, 801e014 <__swsetup_r+0x14>
 801e010:	f7ff fdea 	bl	801dbe8 <__sinit>
 801e014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e018:	0719      	lsls	r1, r3, #28
 801e01a:	d422      	bmi.n	801e062 <__swsetup_r+0x62>
 801e01c:	06da      	lsls	r2, r3, #27
 801e01e:	d407      	bmi.n	801e030 <__swsetup_r+0x30>
 801e020:	2209      	movs	r2, #9
 801e022:	602a      	str	r2, [r5, #0]
 801e024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e028:	81a3      	strh	r3, [r4, #12]
 801e02a:	f04f 30ff 	mov.w	r0, #4294967295
 801e02e:	e033      	b.n	801e098 <__swsetup_r+0x98>
 801e030:	0758      	lsls	r0, r3, #29
 801e032:	d512      	bpl.n	801e05a <__swsetup_r+0x5a>
 801e034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e036:	b141      	cbz	r1, 801e04a <__swsetup_r+0x4a>
 801e038:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e03c:	4299      	cmp	r1, r3
 801e03e:	d002      	beq.n	801e046 <__swsetup_r+0x46>
 801e040:	4628      	mov	r0, r5
 801e042:	f000 ff15 	bl	801ee70 <_free_r>
 801e046:	2300      	movs	r3, #0
 801e048:	6363      	str	r3, [r4, #52]	@ 0x34
 801e04a:	89a3      	ldrh	r3, [r4, #12]
 801e04c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e050:	81a3      	strh	r3, [r4, #12]
 801e052:	2300      	movs	r3, #0
 801e054:	6063      	str	r3, [r4, #4]
 801e056:	6923      	ldr	r3, [r4, #16]
 801e058:	6023      	str	r3, [r4, #0]
 801e05a:	89a3      	ldrh	r3, [r4, #12]
 801e05c:	f043 0308 	orr.w	r3, r3, #8
 801e060:	81a3      	strh	r3, [r4, #12]
 801e062:	6923      	ldr	r3, [r4, #16]
 801e064:	b94b      	cbnz	r3, 801e07a <__swsetup_r+0x7a>
 801e066:	89a3      	ldrh	r3, [r4, #12]
 801e068:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e06c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e070:	d003      	beq.n	801e07a <__swsetup_r+0x7a>
 801e072:	4621      	mov	r1, r4
 801e074:	4628      	mov	r0, r5
 801e076:	f002 fe9d 	bl	8020db4 <__smakebuf_r>
 801e07a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e07e:	f013 0201 	ands.w	r2, r3, #1
 801e082:	d00a      	beq.n	801e09a <__swsetup_r+0x9a>
 801e084:	2200      	movs	r2, #0
 801e086:	60a2      	str	r2, [r4, #8]
 801e088:	6962      	ldr	r2, [r4, #20]
 801e08a:	4252      	negs	r2, r2
 801e08c:	61a2      	str	r2, [r4, #24]
 801e08e:	6922      	ldr	r2, [r4, #16]
 801e090:	b942      	cbnz	r2, 801e0a4 <__swsetup_r+0xa4>
 801e092:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e096:	d1c5      	bne.n	801e024 <__swsetup_r+0x24>
 801e098:	bd38      	pop	{r3, r4, r5, pc}
 801e09a:	0799      	lsls	r1, r3, #30
 801e09c:	bf58      	it	pl
 801e09e:	6962      	ldrpl	r2, [r4, #20]
 801e0a0:	60a2      	str	r2, [r4, #8]
 801e0a2:	e7f4      	b.n	801e08e <__swsetup_r+0x8e>
 801e0a4:	2000      	movs	r0, #0
 801e0a6:	e7f7      	b.n	801e098 <__swsetup_r+0x98>
 801e0a8:	2000003c 	.word	0x2000003c

0801e0ac <memset>:
 801e0ac:	4402      	add	r2, r0
 801e0ae:	4603      	mov	r3, r0
 801e0b0:	4293      	cmp	r3, r2
 801e0b2:	d100      	bne.n	801e0b6 <memset+0xa>
 801e0b4:	4770      	bx	lr
 801e0b6:	f803 1b01 	strb.w	r1, [r3], #1
 801e0ba:	e7f9      	b.n	801e0b0 <memset+0x4>

0801e0bc <_localeconv_r>:
 801e0bc:	4800      	ldr	r0, [pc, #0]	@ (801e0c0 <_localeconv_r+0x4>)
 801e0be:	4770      	bx	lr
 801e0c0:	2000017c 	.word	0x2000017c

0801e0c4 <_close_r>:
 801e0c4:	b538      	push	{r3, r4, r5, lr}
 801e0c6:	4d06      	ldr	r5, [pc, #24]	@ (801e0e0 <_close_r+0x1c>)
 801e0c8:	2300      	movs	r3, #0
 801e0ca:	4604      	mov	r4, r0
 801e0cc:	4608      	mov	r0, r1
 801e0ce:	602b      	str	r3, [r5, #0]
 801e0d0:	f7e6 fdd2 	bl	8004c78 <_close>
 801e0d4:	1c43      	adds	r3, r0, #1
 801e0d6:	d102      	bne.n	801e0de <_close_r+0x1a>
 801e0d8:	682b      	ldr	r3, [r5, #0]
 801e0da:	b103      	cbz	r3, 801e0de <_close_r+0x1a>
 801e0dc:	6023      	str	r3, [r4, #0]
 801e0de:	bd38      	pop	{r3, r4, r5, pc}
 801e0e0:	2001bee0 	.word	0x2001bee0

0801e0e4 <_lseek_r>:
 801e0e4:	b538      	push	{r3, r4, r5, lr}
 801e0e6:	4d07      	ldr	r5, [pc, #28]	@ (801e104 <_lseek_r+0x20>)
 801e0e8:	4604      	mov	r4, r0
 801e0ea:	4608      	mov	r0, r1
 801e0ec:	4611      	mov	r1, r2
 801e0ee:	2200      	movs	r2, #0
 801e0f0:	602a      	str	r2, [r5, #0]
 801e0f2:	461a      	mov	r2, r3
 801e0f4:	f7e6 fde7 	bl	8004cc6 <_lseek>
 801e0f8:	1c43      	adds	r3, r0, #1
 801e0fa:	d102      	bne.n	801e102 <_lseek_r+0x1e>
 801e0fc:	682b      	ldr	r3, [r5, #0]
 801e0fe:	b103      	cbz	r3, 801e102 <_lseek_r+0x1e>
 801e100:	6023      	str	r3, [r4, #0]
 801e102:	bd38      	pop	{r3, r4, r5, pc}
 801e104:	2001bee0 	.word	0x2001bee0

0801e108 <_read_r>:
 801e108:	b538      	push	{r3, r4, r5, lr}
 801e10a:	4d07      	ldr	r5, [pc, #28]	@ (801e128 <_read_r+0x20>)
 801e10c:	4604      	mov	r4, r0
 801e10e:	4608      	mov	r0, r1
 801e110:	4611      	mov	r1, r2
 801e112:	2200      	movs	r2, #0
 801e114:	602a      	str	r2, [r5, #0]
 801e116:	461a      	mov	r2, r3
 801e118:	f7e6 fd75 	bl	8004c06 <_read>
 801e11c:	1c43      	adds	r3, r0, #1
 801e11e:	d102      	bne.n	801e126 <_read_r+0x1e>
 801e120:	682b      	ldr	r3, [r5, #0]
 801e122:	b103      	cbz	r3, 801e126 <_read_r+0x1e>
 801e124:	6023      	str	r3, [r4, #0]
 801e126:	bd38      	pop	{r3, r4, r5, pc}
 801e128:	2001bee0 	.word	0x2001bee0

0801e12c <_write_r>:
 801e12c:	b538      	push	{r3, r4, r5, lr}
 801e12e:	4d07      	ldr	r5, [pc, #28]	@ (801e14c <_write_r+0x20>)
 801e130:	4604      	mov	r4, r0
 801e132:	4608      	mov	r0, r1
 801e134:	4611      	mov	r1, r2
 801e136:	2200      	movs	r2, #0
 801e138:	602a      	str	r2, [r5, #0]
 801e13a:	461a      	mov	r2, r3
 801e13c:	f7e6 fd80 	bl	8004c40 <_write>
 801e140:	1c43      	adds	r3, r0, #1
 801e142:	d102      	bne.n	801e14a <_write_r+0x1e>
 801e144:	682b      	ldr	r3, [r5, #0]
 801e146:	b103      	cbz	r3, 801e14a <_write_r+0x1e>
 801e148:	6023      	str	r3, [r4, #0]
 801e14a:	bd38      	pop	{r3, r4, r5, pc}
 801e14c:	2001bee0 	.word	0x2001bee0

0801e150 <__errno>:
 801e150:	4b01      	ldr	r3, [pc, #4]	@ (801e158 <__errno+0x8>)
 801e152:	6818      	ldr	r0, [r3, #0]
 801e154:	4770      	bx	lr
 801e156:	bf00      	nop
 801e158:	2000003c 	.word	0x2000003c

0801e15c <__libc_init_array>:
 801e15c:	b570      	push	{r4, r5, r6, lr}
 801e15e:	4d0d      	ldr	r5, [pc, #52]	@ (801e194 <__libc_init_array+0x38>)
 801e160:	4c0d      	ldr	r4, [pc, #52]	@ (801e198 <__libc_init_array+0x3c>)
 801e162:	1b64      	subs	r4, r4, r5
 801e164:	10a4      	asrs	r4, r4, #2
 801e166:	2600      	movs	r6, #0
 801e168:	42a6      	cmp	r6, r4
 801e16a:	d109      	bne.n	801e180 <__libc_init_array+0x24>
 801e16c:	4d0b      	ldr	r5, [pc, #44]	@ (801e19c <__libc_init_array+0x40>)
 801e16e:	4c0c      	ldr	r4, [pc, #48]	@ (801e1a0 <__libc_init_array+0x44>)
 801e170:	f003 fb14 	bl	802179c <_init>
 801e174:	1b64      	subs	r4, r4, r5
 801e176:	10a4      	asrs	r4, r4, #2
 801e178:	2600      	movs	r6, #0
 801e17a:	42a6      	cmp	r6, r4
 801e17c:	d105      	bne.n	801e18a <__libc_init_array+0x2e>
 801e17e:	bd70      	pop	{r4, r5, r6, pc}
 801e180:	f855 3b04 	ldr.w	r3, [r5], #4
 801e184:	4798      	blx	r3
 801e186:	3601      	adds	r6, #1
 801e188:	e7ee      	b.n	801e168 <__libc_init_array+0xc>
 801e18a:	f855 3b04 	ldr.w	r3, [r5], #4
 801e18e:	4798      	blx	r3
 801e190:	3601      	adds	r6, #1
 801e192:	e7f2      	b.n	801e17a <__libc_init_array+0x1e>
 801e194:	08022ad8 	.word	0x08022ad8
 801e198:	08022ad8 	.word	0x08022ad8
 801e19c:	08022ad8 	.word	0x08022ad8
 801e1a0:	08022adc 	.word	0x08022adc

0801e1a4 <__retarget_lock_init_recursive>:
 801e1a4:	4770      	bx	lr

0801e1a6 <__retarget_lock_acquire_recursive>:
 801e1a6:	4770      	bx	lr

0801e1a8 <__retarget_lock_release_recursive>:
 801e1a8:	4770      	bx	lr

0801e1aa <memcpy>:
 801e1aa:	440a      	add	r2, r1
 801e1ac:	4291      	cmp	r1, r2
 801e1ae:	f100 33ff 	add.w	r3, r0, #4294967295
 801e1b2:	d100      	bne.n	801e1b6 <memcpy+0xc>
 801e1b4:	4770      	bx	lr
 801e1b6:	b510      	push	{r4, lr}
 801e1b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e1bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e1c0:	4291      	cmp	r1, r2
 801e1c2:	d1f9      	bne.n	801e1b8 <memcpy+0xe>
 801e1c4:	bd10      	pop	{r4, pc}
	...

0801e1c8 <nanf>:
 801e1c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801e1d0 <nanf+0x8>
 801e1cc:	4770      	bx	lr
 801e1ce:	bf00      	nop
 801e1d0:	7fc00000 	.word	0x7fc00000

0801e1d4 <quorem>:
 801e1d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1d8:	6903      	ldr	r3, [r0, #16]
 801e1da:	690c      	ldr	r4, [r1, #16]
 801e1dc:	42a3      	cmp	r3, r4
 801e1de:	4607      	mov	r7, r0
 801e1e0:	db7e      	blt.n	801e2e0 <quorem+0x10c>
 801e1e2:	3c01      	subs	r4, #1
 801e1e4:	f101 0814 	add.w	r8, r1, #20
 801e1e8:	00a3      	lsls	r3, r4, #2
 801e1ea:	f100 0514 	add.w	r5, r0, #20
 801e1ee:	9300      	str	r3, [sp, #0]
 801e1f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e1f4:	9301      	str	r3, [sp, #4]
 801e1f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e1fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e1fe:	3301      	adds	r3, #1
 801e200:	429a      	cmp	r2, r3
 801e202:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e206:	fbb2 f6f3 	udiv	r6, r2, r3
 801e20a:	d32e      	bcc.n	801e26a <quorem+0x96>
 801e20c:	f04f 0a00 	mov.w	sl, #0
 801e210:	46c4      	mov	ip, r8
 801e212:	46ae      	mov	lr, r5
 801e214:	46d3      	mov	fp, sl
 801e216:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e21a:	b298      	uxth	r0, r3
 801e21c:	fb06 a000 	mla	r0, r6, r0, sl
 801e220:	0c02      	lsrs	r2, r0, #16
 801e222:	0c1b      	lsrs	r3, r3, #16
 801e224:	fb06 2303 	mla	r3, r6, r3, r2
 801e228:	f8de 2000 	ldr.w	r2, [lr]
 801e22c:	b280      	uxth	r0, r0
 801e22e:	b292      	uxth	r2, r2
 801e230:	1a12      	subs	r2, r2, r0
 801e232:	445a      	add	r2, fp
 801e234:	f8de 0000 	ldr.w	r0, [lr]
 801e238:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e23c:	b29b      	uxth	r3, r3
 801e23e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801e242:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801e246:	b292      	uxth	r2, r2
 801e248:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801e24c:	45e1      	cmp	r9, ip
 801e24e:	f84e 2b04 	str.w	r2, [lr], #4
 801e252:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801e256:	d2de      	bcs.n	801e216 <quorem+0x42>
 801e258:	9b00      	ldr	r3, [sp, #0]
 801e25a:	58eb      	ldr	r3, [r5, r3]
 801e25c:	b92b      	cbnz	r3, 801e26a <quorem+0x96>
 801e25e:	9b01      	ldr	r3, [sp, #4]
 801e260:	3b04      	subs	r3, #4
 801e262:	429d      	cmp	r5, r3
 801e264:	461a      	mov	r2, r3
 801e266:	d32f      	bcc.n	801e2c8 <quorem+0xf4>
 801e268:	613c      	str	r4, [r7, #16]
 801e26a:	4638      	mov	r0, r7
 801e26c:	f001 f9c4 	bl	801f5f8 <__mcmp>
 801e270:	2800      	cmp	r0, #0
 801e272:	db25      	blt.n	801e2c0 <quorem+0xec>
 801e274:	4629      	mov	r1, r5
 801e276:	2000      	movs	r0, #0
 801e278:	f858 2b04 	ldr.w	r2, [r8], #4
 801e27c:	f8d1 c000 	ldr.w	ip, [r1]
 801e280:	fa1f fe82 	uxth.w	lr, r2
 801e284:	fa1f f38c 	uxth.w	r3, ip
 801e288:	eba3 030e 	sub.w	r3, r3, lr
 801e28c:	4403      	add	r3, r0
 801e28e:	0c12      	lsrs	r2, r2, #16
 801e290:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801e294:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801e298:	b29b      	uxth	r3, r3
 801e29a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e29e:	45c1      	cmp	r9, r8
 801e2a0:	f841 3b04 	str.w	r3, [r1], #4
 801e2a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 801e2a8:	d2e6      	bcs.n	801e278 <quorem+0xa4>
 801e2aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e2ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e2b2:	b922      	cbnz	r2, 801e2be <quorem+0xea>
 801e2b4:	3b04      	subs	r3, #4
 801e2b6:	429d      	cmp	r5, r3
 801e2b8:	461a      	mov	r2, r3
 801e2ba:	d30b      	bcc.n	801e2d4 <quorem+0x100>
 801e2bc:	613c      	str	r4, [r7, #16]
 801e2be:	3601      	adds	r6, #1
 801e2c0:	4630      	mov	r0, r6
 801e2c2:	b003      	add	sp, #12
 801e2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2c8:	6812      	ldr	r2, [r2, #0]
 801e2ca:	3b04      	subs	r3, #4
 801e2cc:	2a00      	cmp	r2, #0
 801e2ce:	d1cb      	bne.n	801e268 <quorem+0x94>
 801e2d0:	3c01      	subs	r4, #1
 801e2d2:	e7c6      	b.n	801e262 <quorem+0x8e>
 801e2d4:	6812      	ldr	r2, [r2, #0]
 801e2d6:	3b04      	subs	r3, #4
 801e2d8:	2a00      	cmp	r2, #0
 801e2da:	d1ef      	bne.n	801e2bc <quorem+0xe8>
 801e2dc:	3c01      	subs	r4, #1
 801e2de:	e7ea      	b.n	801e2b6 <quorem+0xe2>
 801e2e0:	2000      	movs	r0, #0
 801e2e2:	e7ee      	b.n	801e2c2 <quorem+0xee>
 801e2e4:	0000      	movs	r0, r0
	...

0801e2e8 <_dtoa_r>:
 801e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2ec:	69c7      	ldr	r7, [r0, #28]
 801e2ee:	b099      	sub	sp, #100	@ 0x64
 801e2f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e2f4:	ec55 4b10 	vmov	r4, r5, d0
 801e2f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801e2fa:	9109      	str	r1, [sp, #36]	@ 0x24
 801e2fc:	4683      	mov	fp, r0
 801e2fe:	920e      	str	r2, [sp, #56]	@ 0x38
 801e300:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e302:	b97f      	cbnz	r7, 801e324 <_dtoa_r+0x3c>
 801e304:	2010      	movs	r0, #16
 801e306:	f000 fdfd 	bl	801ef04 <malloc>
 801e30a:	4602      	mov	r2, r0
 801e30c:	f8cb 001c 	str.w	r0, [fp, #28]
 801e310:	b920      	cbnz	r0, 801e31c <_dtoa_r+0x34>
 801e312:	4ba7      	ldr	r3, [pc, #668]	@ (801e5b0 <_dtoa_r+0x2c8>)
 801e314:	21ef      	movs	r1, #239	@ 0xef
 801e316:	48a7      	ldr	r0, [pc, #668]	@ (801e5b4 <_dtoa_r+0x2cc>)
 801e318:	f002 fe22 	bl	8020f60 <__assert_func>
 801e31c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801e320:	6007      	str	r7, [r0, #0]
 801e322:	60c7      	str	r7, [r0, #12]
 801e324:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e328:	6819      	ldr	r1, [r3, #0]
 801e32a:	b159      	cbz	r1, 801e344 <_dtoa_r+0x5c>
 801e32c:	685a      	ldr	r2, [r3, #4]
 801e32e:	604a      	str	r2, [r1, #4]
 801e330:	2301      	movs	r3, #1
 801e332:	4093      	lsls	r3, r2
 801e334:	608b      	str	r3, [r1, #8]
 801e336:	4658      	mov	r0, fp
 801e338:	f000 feda 	bl	801f0f0 <_Bfree>
 801e33c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e340:	2200      	movs	r2, #0
 801e342:	601a      	str	r2, [r3, #0]
 801e344:	1e2b      	subs	r3, r5, #0
 801e346:	bfb9      	ittee	lt
 801e348:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801e34c:	9303      	strlt	r3, [sp, #12]
 801e34e:	2300      	movge	r3, #0
 801e350:	6033      	strge	r3, [r6, #0]
 801e352:	9f03      	ldr	r7, [sp, #12]
 801e354:	4b98      	ldr	r3, [pc, #608]	@ (801e5b8 <_dtoa_r+0x2d0>)
 801e356:	bfbc      	itt	lt
 801e358:	2201      	movlt	r2, #1
 801e35a:	6032      	strlt	r2, [r6, #0]
 801e35c:	43bb      	bics	r3, r7
 801e35e:	d112      	bne.n	801e386 <_dtoa_r+0x9e>
 801e360:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e362:	f242 730f 	movw	r3, #9999	@ 0x270f
 801e366:	6013      	str	r3, [r2, #0]
 801e368:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e36c:	4323      	orrs	r3, r4
 801e36e:	f000 854d 	beq.w	801ee0c <_dtoa_r+0xb24>
 801e372:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e374:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801e5cc <_dtoa_r+0x2e4>
 801e378:	2b00      	cmp	r3, #0
 801e37a:	f000 854f 	beq.w	801ee1c <_dtoa_r+0xb34>
 801e37e:	f10a 0303 	add.w	r3, sl, #3
 801e382:	f000 bd49 	b.w	801ee18 <_dtoa_r+0xb30>
 801e386:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e38a:	2200      	movs	r2, #0
 801e38c:	ec51 0b17 	vmov	r0, r1, d7
 801e390:	2300      	movs	r3, #0
 801e392:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801e396:	f7e2 fbbf 	bl	8000b18 <__aeabi_dcmpeq>
 801e39a:	4680      	mov	r8, r0
 801e39c:	b158      	cbz	r0, 801e3b6 <_dtoa_r+0xce>
 801e39e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e3a0:	2301      	movs	r3, #1
 801e3a2:	6013      	str	r3, [r2, #0]
 801e3a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e3a6:	b113      	cbz	r3, 801e3ae <_dtoa_r+0xc6>
 801e3a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e3aa:	4b84      	ldr	r3, [pc, #528]	@ (801e5bc <_dtoa_r+0x2d4>)
 801e3ac:	6013      	str	r3, [r2, #0]
 801e3ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801e5d0 <_dtoa_r+0x2e8>
 801e3b2:	f000 bd33 	b.w	801ee1c <_dtoa_r+0xb34>
 801e3b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801e3ba:	aa16      	add	r2, sp, #88	@ 0x58
 801e3bc:	a917      	add	r1, sp, #92	@ 0x5c
 801e3be:	4658      	mov	r0, fp
 801e3c0:	f001 fa3a 	bl	801f838 <__d2b>
 801e3c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801e3c8:	4681      	mov	r9, r0
 801e3ca:	2e00      	cmp	r6, #0
 801e3cc:	d077      	beq.n	801e4be <_dtoa_r+0x1d6>
 801e3ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e3d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801e3d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e3d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e3dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801e3e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801e3e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801e3e8:	4619      	mov	r1, r3
 801e3ea:	2200      	movs	r2, #0
 801e3ec:	4b74      	ldr	r3, [pc, #464]	@ (801e5c0 <_dtoa_r+0x2d8>)
 801e3ee:	f7e1 ff73 	bl	80002d8 <__aeabi_dsub>
 801e3f2:	a369      	add	r3, pc, #420	@ (adr r3, 801e598 <_dtoa_r+0x2b0>)
 801e3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3f8:	f7e2 f926 	bl	8000648 <__aeabi_dmul>
 801e3fc:	a368      	add	r3, pc, #416	@ (adr r3, 801e5a0 <_dtoa_r+0x2b8>)
 801e3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e402:	f7e1 ff6b 	bl	80002dc <__adddf3>
 801e406:	4604      	mov	r4, r0
 801e408:	4630      	mov	r0, r6
 801e40a:	460d      	mov	r5, r1
 801e40c:	f7e2 f8b2 	bl	8000574 <__aeabi_i2d>
 801e410:	a365      	add	r3, pc, #404	@ (adr r3, 801e5a8 <_dtoa_r+0x2c0>)
 801e412:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e416:	f7e2 f917 	bl	8000648 <__aeabi_dmul>
 801e41a:	4602      	mov	r2, r0
 801e41c:	460b      	mov	r3, r1
 801e41e:	4620      	mov	r0, r4
 801e420:	4629      	mov	r1, r5
 801e422:	f7e1 ff5b 	bl	80002dc <__adddf3>
 801e426:	4604      	mov	r4, r0
 801e428:	460d      	mov	r5, r1
 801e42a:	f7e2 fbbd 	bl	8000ba8 <__aeabi_d2iz>
 801e42e:	2200      	movs	r2, #0
 801e430:	4607      	mov	r7, r0
 801e432:	2300      	movs	r3, #0
 801e434:	4620      	mov	r0, r4
 801e436:	4629      	mov	r1, r5
 801e438:	f7e2 fb78 	bl	8000b2c <__aeabi_dcmplt>
 801e43c:	b140      	cbz	r0, 801e450 <_dtoa_r+0x168>
 801e43e:	4638      	mov	r0, r7
 801e440:	f7e2 f898 	bl	8000574 <__aeabi_i2d>
 801e444:	4622      	mov	r2, r4
 801e446:	462b      	mov	r3, r5
 801e448:	f7e2 fb66 	bl	8000b18 <__aeabi_dcmpeq>
 801e44c:	b900      	cbnz	r0, 801e450 <_dtoa_r+0x168>
 801e44e:	3f01      	subs	r7, #1
 801e450:	2f16      	cmp	r7, #22
 801e452:	d851      	bhi.n	801e4f8 <_dtoa_r+0x210>
 801e454:	4b5b      	ldr	r3, [pc, #364]	@ (801e5c4 <_dtoa_r+0x2dc>)
 801e456:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e45e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e462:	f7e2 fb63 	bl	8000b2c <__aeabi_dcmplt>
 801e466:	2800      	cmp	r0, #0
 801e468:	d048      	beq.n	801e4fc <_dtoa_r+0x214>
 801e46a:	3f01      	subs	r7, #1
 801e46c:	2300      	movs	r3, #0
 801e46e:	9312      	str	r3, [sp, #72]	@ 0x48
 801e470:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e472:	1b9b      	subs	r3, r3, r6
 801e474:	1e5a      	subs	r2, r3, #1
 801e476:	bf44      	itt	mi
 801e478:	f1c3 0801 	rsbmi	r8, r3, #1
 801e47c:	2300      	movmi	r3, #0
 801e47e:	9208      	str	r2, [sp, #32]
 801e480:	bf54      	ite	pl
 801e482:	f04f 0800 	movpl.w	r8, #0
 801e486:	9308      	strmi	r3, [sp, #32]
 801e488:	2f00      	cmp	r7, #0
 801e48a:	db39      	blt.n	801e500 <_dtoa_r+0x218>
 801e48c:	9b08      	ldr	r3, [sp, #32]
 801e48e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801e490:	443b      	add	r3, r7
 801e492:	9308      	str	r3, [sp, #32]
 801e494:	2300      	movs	r3, #0
 801e496:	930a      	str	r3, [sp, #40]	@ 0x28
 801e498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e49a:	2b09      	cmp	r3, #9
 801e49c:	d864      	bhi.n	801e568 <_dtoa_r+0x280>
 801e49e:	2b05      	cmp	r3, #5
 801e4a0:	bfc4      	itt	gt
 801e4a2:	3b04      	subgt	r3, #4
 801e4a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801e4a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e4a8:	f1a3 0302 	sub.w	r3, r3, #2
 801e4ac:	bfcc      	ite	gt
 801e4ae:	2400      	movgt	r4, #0
 801e4b0:	2401      	movle	r4, #1
 801e4b2:	2b03      	cmp	r3, #3
 801e4b4:	d863      	bhi.n	801e57e <_dtoa_r+0x296>
 801e4b6:	e8df f003 	tbb	[pc, r3]
 801e4ba:	372a      	.short	0x372a
 801e4bc:	5535      	.short	0x5535
 801e4be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801e4c2:	441e      	add	r6, r3
 801e4c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801e4c8:	2b20      	cmp	r3, #32
 801e4ca:	bfc1      	itttt	gt
 801e4cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801e4d0:	409f      	lslgt	r7, r3
 801e4d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801e4d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 801e4da:	bfd6      	itet	le
 801e4dc:	f1c3 0320 	rsble	r3, r3, #32
 801e4e0:	ea47 0003 	orrgt.w	r0, r7, r3
 801e4e4:	fa04 f003 	lslle.w	r0, r4, r3
 801e4e8:	f7e2 f834 	bl	8000554 <__aeabi_ui2d>
 801e4ec:	2201      	movs	r2, #1
 801e4ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801e4f2:	3e01      	subs	r6, #1
 801e4f4:	9214      	str	r2, [sp, #80]	@ 0x50
 801e4f6:	e777      	b.n	801e3e8 <_dtoa_r+0x100>
 801e4f8:	2301      	movs	r3, #1
 801e4fa:	e7b8      	b.n	801e46e <_dtoa_r+0x186>
 801e4fc:	9012      	str	r0, [sp, #72]	@ 0x48
 801e4fe:	e7b7      	b.n	801e470 <_dtoa_r+0x188>
 801e500:	427b      	negs	r3, r7
 801e502:	930a      	str	r3, [sp, #40]	@ 0x28
 801e504:	2300      	movs	r3, #0
 801e506:	eba8 0807 	sub.w	r8, r8, r7
 801e50a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e50c:	e7c4      	b.n	801e498 <_dtoa_r+0x1b0>
 801e50e:	2300      	movs	r3, #0
 801e510:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e514:	2b00      	cmp	r3, #0
 801e516:	dc35      	bgt.n	801e584 <_dtoa_r+0x29c>
 801e518:	2301      	movs	r3, #1
 801e51a:	9300      	str	r3, [sp, #0]
 801e51c:	9307      	str	r3, [sp, #28]
 801e51e:	461a      	mov	r2, r3
 801e520:	920e      	str	r2, [sp, #56]	@ 0x38
 801e522:	e00b      	b.n	801e53c <_dtoa_r+0x254>
 801e524:	2301      	movs	r3, #1
 801e526:	e7f3      	b.n	801e510 <_dtoa_r+0x228>
 801e528:	2300      	movs	r3, #0
 801e52a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e52c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e52e:	18fb      	adds	r3, r7, r3
 801e530:	9300      	str	r3, [sp, #0]
 801e532:	3301      	adds	r3, #1
 801e534:	2b01      	cmp	r3, #1
 801e536:	9307      	str	r3, [sp, #28]
 801e538:	bfb8      	it	lt
 801e53a:	2301      	movlt	r3, #1
 801e53c:	f8db 001c 	ldr.w	r0, [fp, #28]
 801e540:	2100      	movs	r1, #0
 801e542:	2204      	movs	r2, #4
 801e544:	f102 0514 	add.w	r5, r2, #20
 801e548:	429d      	cmp	r5, r3
 801e54a:	d91f      	bls.n	801e58c <_dtoa_r+0x2a4>
 801e54c:	6041      	str	r1, [r0, #4]
 801e54e:	4658      	mov	r0, fp
 801e550:	f000 fd8e 	bl	801f070 <_Balloc>
 801e554:	4682      	mov	sl, r0
 801e556:	2800      	cmp	r0, #0
 801e558:	d13c      	bne.n	801e5d4 <_dtoa_r+0x2ec>
 801e55a:	4b1b      	ldr	r3, [pc, #108]	@ (801e5c8 <_dtoa_r+0x2e0>)
 801e55c:	4602      	mov	r2, r0
 801e55e:	f240 11af 	movw	r1, #431	@ 0x1af
 801e562:	e6d8      	b.n	801e316 <_dtoa_r+0x2e>
 801e564:	2301      	movs	r3, #1
 801e566:	e7e0      	b.n	801e52a <_dtoa_r+0x242>
 801e568:	2401      	movs	r4, #1
 801e56a:	2300      	movs	r3, #0
 801e56c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e56e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e570:	f04f 33ff 	mov.w	r3, #4294967295
 801e574:	9300      	str	r3, [sp, #0]
 801e576:	9307      	str	r3, [sp, #28]
 801e578:	2200      	movs	r2, #0
 801e57a:	2312      	movs	r3, #18
 801e57c:	e7d0      	b.n	801e520 <_dtoa_r+0x238>
 801e57e:	2301      	movs	r3, #1
 801e580:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e582:	e7f5      	b.n	801e570 <_dtoa_r+0x288>
 801e584:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e586:	9300      	str	r3, [sp, #0]
 801e588:	9307      	str	r3, [sp, #28]
 801e58a:	e7d7      	b.n	801e53c <_dtoa_r+0x254>
 801e58c:	3101      	adds	r1, #1
 801e58e:	0052      	lsls	r2, r2, #1
 801e590:	e7d8      	b.n	801e544 <_dtoa_r+0x25c>
 801e592:	bf00      	nop
 801e594:	f3af 8000 	nop.w
 801e598:	636f4361 	.word	0x636f4361
 801e59c:	3fd287a7 	.word	0x3fd287a7
 801e5a0:	8b60c8b3 	.word	0x8b60c8b3
 801e5a4:	3fc68a28 	.word	0x3fc68a28
 801e5a8:	509f79fb 	.word	0x509f79fb
 801e5ac:	3fd34413 	.word	0x3fd34413
 801e5b0:	080226e6 	.word	0x080226e6
 801e5b4:	080226fd 	.word	0x080226fd
 801e5b8:	7ff00000 	.word	0x7ff00000
 801e5bc:	080226b1 	.word	0x080226b1
 801e5c0:	3ff80000 	.word	0x3ff80000
 801e5c4:	080227f8 	.word	0x080227f8
 801e5c8:	08022755 	.word	0x08022755
 801e5cc:	080226e2 	.word	0x080226e2
 801e5d0:	080226b0 	.word	0x080226b0
 801e5d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e5d8:	6018      	str	r0, [r3, #0]
 801e5da:	9b07      	ldr	r3, [sp, #28]
 801e5dc:	2b0e      	cmp	r3, #14
 801e5de:	f200 80a4 	bhi.w	801e72a <_dtoa_r+0x442>
 801e5e2:	2c00      	cmp	r4, #0
 801e5e4:	f000 80a1 	beq.w	801e72a <_dtoa_r+0x442>
 801e5e8:	2f00      	cmp	r7, #0
 801e5ea:	dd33      	ble.n	801e654 <_dtoa_r+0x36c>
 801e5ec:	4bad      	ldr	r3, [pc, #692]	@ (801e8a4 <_dtoa_r+0x5bc>)
 801e5ee:	f007 020f 	and.w	r2, r7, #15
 801e5f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e5f6:	ed93 7b00 	vldr	d7, [r3]
 801e5fa:	05f8      	lsls	r0, r7, #23
 801e5fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 801e600:	ea4f 1427 	mov.w	r4, r7, asr #4
 801e604:	d516      	bpl.n	801e634 <_dtoa_r+0x34c>
 801e606:	4ba8      	ldr	r3, [pc, #672]	@ (801e8a8 <_dtoa_r+0x5c0>)
 801e608:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e60c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e610:	f7e2 f944 	bl	800089c <__aeabi_ddiv>
 801e614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e618:	f004 040f 	and.w	r4, r4, #15
 801e61c:	2603      	movs	r6, #3
 801e61e:	4da2      	ldr	r5, [pc, #648]	@ (801e8a8 <_dtoa_r+0x5c0>)
 801e620:	b954      	cbnz	r4, 801e638 <_dtoa_r+0x350>
 801e622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e62a:	f7e2 f937 	bl	800089c <__aeabi_ddiv>
 801e62e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e632:	e028      	b.n	801e686 <_dtoa_r+0x39e>
 801e634:	2602      	movs	r6, #2
 801e636:	e7f2      	b.n	801e61e <_dtoa_r+0x336>
 801e638:	07e1      	lsls	r1, r4, #31
 801e63a:	d508      	bpl.n	801e64e <_dtoa_r+0x366>
 801e63c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e640:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e644:	f7e2 f800 	bl	8000648 <__aeabi_dmul>
 801e648:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e64c:	3601      	adds	r6, #1
 801e64e:	1064      	asrs	r4, r4, #1
 801e650:	3508      	adds	r5, #8
 801e652:	e7e5      	b.n	801e620 <_dtoa_r+0x338>
 801e654:	f000 80d2 	beq.w	801e7fc <_dtoa_r+0x514>
 801e658:	427c      	negs	r4, r7
 801e65a:	4b92      	ldr	r3, [pc, #584]	@ (801e8a4 <_dtoa_r+0x5bc>)
 801e65c:	4d92      	ldr	r5, [pc, #584]	@ (801e8a8 <_dtoa_r+0x5c0>)
 801e65e:	f004 020f 	and.w	r2, r4, #15
 801e662:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e66a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e66e:	f7e1 ffeb 	bl	8000648 <__aeabi_dmul>
 801e672:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e676:	1124      	asrs	r4, r4, #4
 801e678:	2300      	movs	r3, #0
 801e67a:	2602      	movs	r6, #2
 801e67c:	2c00      	cmp	r4, #0
 801e67e:	f040 80b2 	bne.w	801e7e6 <_dtoa_r+0x4fe>
 801e682:	2b00      	cmp	r3, #0
 801e684:	d1d3      	bne.n	801e62e <_dtoa_r+0x346>
 801e686:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e688:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801e68c:	2b00      	cmp	r3, #0
 801e68e:	f000 80b7 	beq.w	801e800 <_dtoa_r+0x518>
 801e692:	4b86      	ldr	r3, [pc, #536]	@ (801e8ac <_dtoa_r+0x5c4>)
 801e694:	2200      	movs	r2, #0
 801e696:	4620      	mov	r0, r4
 801e698:	4629      	mov	r1, r5
 801e69a:	f7e2 fa47 	bl	8000b2c <__aeabi_dcmplt>
 801e69e:	2800      	cmp	r0, #0
 801e6a0:	f000 80ae 	beq.w	801e800 <_dtoa_r+0x518>
 801e6a4:	9b07      	ldr	r3, [sp, #28]
 801e6a6:	2b00      	cmp	r3, #0
 801e6a8:	f000 80aa 	beq.w	801e800 <_dtoa_r+0x518>
 801e6ac:	9b00      	ldr	r3, [sp, #0]
 801e6ae:	2b00      	cmp	r3, #0
 801e6b0:	dd37      	ble.n	801e722 <_dtoa_r+0x43a>
 801e6b2:	1e7b      	subs	r3, r7, #1
 801e6b4:	9304      	str	r3, [sp, #16]
 801e6b6:	4620      	mov	r0, r4
 801e6b8:	4b7d      	ldr	r3, [pc, #500]	@ (801e8b0 <_dtoa_r+0x5c8>)
 801e6ba:	2200      	movs	r2, #0
 801e6bc:	4629      	mov	r1, r5
 801e6be:	f7e1 ffc3 	bl	8000648 <__aeabi_dmul>
 801e6c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e6c6:	9c00      	ldr	r4, [sp, #0]
 801e6c8:	3601      	adds	r6, #1
 801e6ca:	4630      	mov	r0, r6
 801e6cc:	f7e1 ff52 	bl	8000574 <__aeabi_i2d>
 801e6d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e6d4:	f7e1 ffb8 	bl	8000648 <__aeabi_dmul>
 801e6d8:	4b76      	ldr	r3, [pc, #472]	@ (801e8b4 <_dtoa_r+0x5cc>)
 801e6da:	2200      	movs	r2, #0
 801e6dc:	f7e1 fdfe 	bl	80002dc <__adddf3>
 801e6e0:	4605      	mov	r5, r0
 801e6e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801e6e6:	2c00      	cmp	r4, #0
 801e6e8:	f040 808d 	bne.w	801e806 <_dtoa_r+0x51e>
 801e6ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e6f0:	4b71      	ldr	r3, [pc, #452]	@ (801e8b8 <_dtoa_r+0x5d0>)
 801e6f2:	2200      	movs	r2, #0
 801e6f4:	f7e1 fdf0 	bl	80002d8 <__aeabi_dsub>
 801e6f8:	4602      	mov	r2, r0
 801e6fa:	460b      	mov	r3, r1
 801e6fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e700:	462a      	mov	r2, r5
 801e702:	4633      	mov	r3, r6
 801e704:	f7e2 fa30 	bl	8000b68 <__aeabi_dcmpgt>
 801e708:	2800      	cmp	r0, #0
 801e70a:	f040 828b 	bne.w	801ec24 <_dtoa_r+0x93c>
 801e70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e712:	462a      	mov	r2, r5
 801e714:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801e718:	f7e2 fa08 	bl	8000b2c <__aeabi_dcmplt>
 801e71c:	2800      	cmp	r0, #0
 801e71e:	f040 8128 	bne.w	801e972 <_dtoa_r+0x68a>
 801e722:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801e726:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801e72a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	f2c0 815a 	blt.w	801e9e6 <_dtoa_r+0x6fe>
 801e732:	2f0e      	cmp	r7, #14
 801e734:	f300 8157 	bgt.w	801e9e6 <_dtoa_r+0x6fe>
 801e738:	4b5a      	ldr	r3, [pc, #360]	@ (801e8a4 <_dtoa_r+0x5bc>)
 801e73a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e73e:	ed93 7b00 	vldr	d7, [r3]
 801e742:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e744:	2b00      	cmp	r3, #0
 801e746:	ed8d 7b00 	vstr	d7, [sp]
 801e74a:	da03      	bge.n	801e754 <_dtoa_r+0x46c>
 801e74c:	9b07      	ldr	r3, [sp, #28]
 801e74e:	2b00      	cmp	r3, #0
 801e750:	f340 8101 	ble.w	801e956 <_dtoa_r+0x66e>
 801e754:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801e758:	4656      	mov	r6, sl
 801e75a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e75e:	4620      	mov	r0, r4
 801e760:	4629      	mov	r1, r5
 801e762:	f7e2 f89b 	bl	800089c <__aeabi_ddiv>
 801e766:	f7e2 fa1f 	bl	8000ba8 <__aeabi_d2iz>
 801e76a:	4680      	mov	r8, r0
 801e76c:	f7e1 ff02 	bl	8000574 <__aeabi_i2d>
 801e770:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e774:	f7e1 ff68 	bl	8000648 <__aeabi_dmul>
 801e778:	4602      	mov	r2, r0
 801e77a:	460b      	mov	r3, r1
 801e77c:	4620      	mov	r0, r4
 801e77e:	4629      	mov	r1, r5
 801e780:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801e784:	f7e1 fda8 	bl	80002d8 <__aeabi_dsub>
 801e788:	f806 4b01 	strb.w	r4, [r6], #1
 801e78c:	9d07      	ldr	r5, [sp, #28]
 801e78e:	eba6 040a 	sub.w	r4, r6, sl
 801e792:	42a5      	cmp	r5, r4
 801e794:	4602      	mov	r2, r0
 801e796:	460b      	mov	r3, r1
 801e798:	f040 8117 	bne.w	801e9ca <_dtoa_r+0x6e2>
 801e79c:	f7e1 fd9e 	bl	80002dc <__adddf3>
 801e7a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e7a4:	4604      	mov	r4, r0
 801e7a6:	460d      	mov	r5, r1
 801e7a8:	f7e2 f9de 	bl	8000b68 <__aeabi_dcmpgt>
 801e7ac:	2800      	cmp	r0, #0
 801e7ae:	f040 80f9 	bne.w	801e9a4 <_dtoa_r+0x6bc>
 801e7b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e7b6:	4620      	mov	r0, r4
 801e7b8:	4629      	mov	r1, r5
 801e7ba:	f7e2 f9ad 	bl	8000b18 <__aeabi_dcmpeq>
 801e7be:	b118      	cbz	r0, 801e7c8 <_dtoa_r+0x4e0>
 801e7c0:	f018 0f01 	tst.w	r8, #1
 801e7c4:	f040 80ee 	bne.w	801e9a4 <_dtoa_r+0x6bc>
 801e7c8:	4649      	mov	r1, r9
 801e7ca:	4658      	mov	r0, fp
 801e7cc:	f000 fc90 	bl	801f0f0 <_Bfree>
 801e7d0:	2300      	movs	r3, #0
 801e7d2:	7033      	strb	r3, [r6, #0]
 801e7d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e7d6:	3701      	adds	r7, #1
 801e7d8:	601f      	str	r7, [r3, #0]
 801e7da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	f000 831d 	beq.w	801ee1c <_dtoa_r+0xb34>
 801e7e2:	601e      	str	r6, [r3, #0]
 801e7e4:	e31a      	b.n	801ee1c <_dtoa_r+0xb34>
 801e7e6:	07e2      	lsls	r2, r4, #31
 801e7e8:	d505      	bpl.n	801e7f6 <_dtoa_r+0x50e>
 801e7ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e7ee:	f7e1 ff2b 	bl	8000648 <__aeabi_dmul>
 801e7f2:	3601      	adds	r6, #1
 801e7f4:	2301      	movs	r3, #1
 801e7f6:	1064      	asrs	r4, r4, #1
 801e7f8:	3508      	adds	r5, #8
 801e7fa:	e73f      	b.n	801e67c <_dtoa_r+0x394>
 801e7fc:	2602      	movs	r6, #2
 801e7fe:	e742      	b.n	801e686 <_dtoa_r+0x39e>
 801e800:	9c07      	ldr	r4, [sp, #28]
 801e802:	9704      	str	r7, [sp, #16]
 801e804:	e761      	b.n	801e6ca <_dtoa_r+0x3e2>
 801e806:	4b27      	ldr	r3, [pc, #156]	@ (801e8a4 <_dtoa_r+0x5bc>)
 801e808:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e80a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e80e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e812:	4454      	add	r4, sl
 801e814:	2900      	cmp	r1, #0
 801e816:	d053      	beq.n	801e8c0 <_dtoa_r+0x5d8>
 801e818:	4928      	ldr	r1, [pc, #160]	@ (801e8bc <_dtoa_r+0x5d4>)
 801e81a:	2000      	movs	r0, #0
 801e81c:	f7e2 f83e 	bl	800089c <__aeabi_ddiv>
 801e820:	4633      	mov	r3, r6
 801e822:	462a      	mov	r2, r5
 801e824:	f7e1 fd58 	bl	80002d8 <__aeabi_dsub>
 801e828:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e82c:	4656      	mov	r6, sl
 801e82e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e832:	f7e2 f9b9 	bl	8000ba8 <__aeabi_d2iz>
 801e836:	4605      	mov	r5, r0
 801e838:	f7e1 fe9c 	bl	8000574 <__aeabi_i2d>
 801e83c:	4602      	mov	r2, r0
 801e83e:	460b      	mov	r3, r1
 801e840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e844:	f7e1 fd48 	bl	80002d8 <__aeabi_dsub>
 801e848:	3530      	adds	r5, #48	@ 0x30
 801e84a:	4602      	mov	r2, r0
 801e84c:	460b      	mov	r3, r1
 801e84e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e852:	f806 5b01 	strb.w	r5, [r6], #1
 801e856:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e85a:	f7e2 f967 	bl	8000b2c <__aeabi_dcmplt>
 801e85e:	2800      	cmp	r0, #0
 801e860:	d171      	bne.n	801e946 <_dtoa_r+0x65e>
 801e862:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e866:	4911      	ldr	r1, [pc, #68]	@ (801e8ac <_dtoa_r+0x5c4>)
 801e868:	2000      	movs	r0, #0
 801e86a:	f7e1 fd35 	bl	80002d8 <__aeabi_dsub>
 801e86e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e872:	f7e2 f95b 	bl	8000b2c <__aeabi_dcmplt>
 801e876:	2800      	cmp	r0, #0
 801e878:	f040 8095 	bne.w	801e9a6 <_dtoa_r+0x6be>
 801e87c:	42a6      	cmp	r6, r4
 801e87e:	f43f af50 	beq.w	801e722 <_dtoa_r+0x43a>
 801e882:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e886:	4b0a      	ldr	r3, [pc, #40]	@ (801e8b0 <_dtoa_r+0x5c8>)
 801e888:	2200      	movs	r2, #0
 801e88a:	f7e1 fedd 	bl	8000648 <__aeabi_dmul>
 801e88e:	4b08      	ldr	r3, [pc, #32]	@ (801e8b0 <_dtoa_r+0x5c8>)
 801e890:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e894:	2200      	movs	r2, #0
 801e896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e89a:	f7e1 fed5 	bl	8000648 <__aeabi_dmul>
 801e89e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e8a2:	e7c4      	b.n	801e82e <_dtoa_r+0x546>
 801e8a4:	080227f8 	.word	0x080227f8
 801e8a8:	080227d0 	.word	0x080227d0
 801e8ac:	3ff00000 	.word	0x3ff00000
 801e8b0:	40240000 	.word	0x40240000
 801e8b4:	401c0000 	.word	0x401c0000
 801e8b8:	40140000 	.word	0x40140000
 801e8bc:	3fe00000 	.word	0x3fe00000
 801e8c0:	4631      	mov	r1, r6
 801e8c2:	4628      	mov	r0, r5
 801e8c4:	f7e1 fec0 	bl	8000648 <__aeabi_dmul>
 801e8c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e8cc:	9415      	str	r4, [sp, #84]	@ 0x54
 801e8ce:	4656      	mov	r6, sl
 801e8d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e8d4:	f7e2 f968 	bl	8000ba8 <__aeabi_d2iz>
 801e8d8:	4605      	mov	r5, r0
 801e8da:	f7e1 fe4b 	bl	8000574 <__aeabi_i2d>
 801e8de:	4602      	mov	r2, r0
 801e8e0:	460b      	mov	r3, r1
 801e8e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e8e6:	f7e1 fcf7 	bl	80002d8 <__aeabi_dsub>
 801e8ea:	3530      	adds	r5, #48	@ 0x30
 801e8ec:	f806 5b01 	strb.w	r5, [r6], #1
 801e8f0:	4602      	mov	r2, r0
 801e8f2:	460b      	mov	r3, r1
 801e8f4:	42a6      	cmp	r6, r4
 801e8f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e8fa:	f04f 0200 	mov.w	r2, #0
 801e8fe:	d124      	bne.n	801e94a <_dtoa_r+0x662>
 801e900:	4bac      	ldr	r3, [pc, #688]	@ (801ebb4 <_dtoa_r+0x8cc>)
 801e902:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e906:	f7e1 fce9 	bl	80002dc <__adddf3>
 801e90a:	4602      	mov	r2, r0
 801e90c:	460b      	mov	r3, r1
 801e90e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e912:	f7e2 f929 	bl	8000b68 <__aeabi_dcmpgt>
 801e916:	2800      	cmp	r0, #0
 801e918:	d145      	bne.n	801e9a6 <_dtoa_r+0x6be>
 801e91a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e91e:	49a5      	ldr	r1, [pc, #660]	@ (801ebb4 <_dtoa_r+0x8cc>)
 801e920:	2000      	movs	r0, #0
 801e922:	f7e1 fcd9 	bl	80002d8 <__aeabi_dsub>
 801e926:	4602      	mov	r2, r0
 801e928:	460b      	mov	r3, r1
 801e92a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e92e:	f7e2 f8fd 	bl	8000b2c <__aeabi_dcmplt>
 801e932:	2800      	cmp	r0, #0
 801e934:	f43f aef5 	beq.w	801e722 <_dtoa_r+0x43a>
 801e938:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801e93a:	1e73      	subs	r3, r6, #1
 801e93c:	9315      	str	r3, [sp, #84]	@ 0x54
 801e93e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e942:	2b30      	cmp	r3, #48	@ 0x30
 801e944:	d0f8      	beq.n	801e938 <_dtoa_r+0x650>
 801e946:	9f04      	ldr	r7, [sp, #16]
 801e948:	e73e      	b.n	801e7c8 <_dtoa_r+0x4e0>
 801e94a:	4b9b      	ldr	r3, [pc, #620]	@ (801ebb8 <_dtoa_r+0x8d0>)
 801e94c:	f7e1 fe7c 	bl	8000648 <__aeabi_dmul>
 801e950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e954:	e7bc      	b.n	801e8d0 <_dtoa_r+0x5e8>
 801e956:	d10c      	bne.n	801e972 <_dtoa_r+0x68a>
 801e958:	4b98      	ldr	r3, [pc, #608]	@ (801ebbc <_dtoa_r+0x8d4>)
 801e95a:	2200      	movs	r2, #0
 801e95c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e960:	f7e1 fe72 	bl	8000648 <__aeabi_dmul>
 801e964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e968:	f7e2 f8f4 	bl	8000b54 <__aeabi_dcmpge>
 801e96c:	2800      	cmp	r0, #0
 801e96e:	f000 8157 	beq.w	801ec20 <_dtoa_r+0x938>
 801e972:	2400      	movs	r4, #0
 801e974:	4625      	mov	r5, r4
 801e976:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e978:	43db      	mvns	r3, r3
 801e97a:	9304      	str	r3, [sp, #16]
 801e97c:	4656      	mov	r6, sl
 801e97e:	2700      	movs	r7, #0
 801e980:	4621      	mov	r1, r4
 801e982:	4658      	mov	r0, fp
 801e984:	f000 fbb4 	bl	801f0f0 <_Bfree>
 801e988:	2d00      	cmp	r5, #0
 801e98a:	d0dc      	beq.n	801e946 <_dtoa_r+0x65e>
 801e98c:	b12f      	cbz	r7, 801e99a <_dtoa_r+0x6b2>
 801e98e:	42af      	cmp	r7, r5
 801e990:	d003      	beq.n	801e99a <_dtoa_r+0x6b2>
 801e992:	4639      	mov	r1, r7
 801e994:	4658      	mov	r0, fp
 801e996:	f000 fbab 	bl	801f0f0 <_Bfree>
 801e99a:	4629      	mov	r1, r5
 801e99c:	4658      	mov	r0, fp
 801e99e:	f000 fba7 	bl	801f0f0 <_Bfree>
 801e9a2:	e7d0      	b.n	801e946 <_dtoa_r+0x65e>
 801e9a4:	9704      	str	r7, [sp, #16]
 801e9a6:	4633      	mov	r3, r6
 801e9a8:	461e      	mov	r6, r3
 801e9aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e9ae:	2a39      	cmp	r2, #57	@ 0x39
 801e9b0:	d107      	bne.n	801e9c2 <_dtoa_r+0x6da>
 801e9b2:	459a      	cmp	sl, r3
 801e9b4:	d1f8      	bne.n	801e9a8 <_dtoa_r+0x6c0>
 801e9b6:	9a04      	ldr	r2, [sp, #16]
 801e9b8:	3201      	adds	r2, #1
 801e9ba:	9204      	str	r2, [sp, #16]
 801e9bc:	2230      	movs	r2, #48	@ 0x30
 801e9be:	f88a 2000 	strb.w	r2, [sl]
 801e9c2:	781a      	ldrb	r2, [r3, #0]
 801e9c4:	3201      	adds	r2, #1
 801e9c6:	701a      	strb	r2, [r3, #0]
 801e9c8:	e7bd      	b.n	801e946 <_dtoa_r+0x65e>
 801e9ca:	4b7b      	ldr	r3, [pc, #492]	@ (801ebb8 <_dtoa_r+0x8d0>)
 801e9cc:	2200      	movs	r2, #0
 801e9ce:	f7e1 fe3b 	bl	8000648 <__aeabi_dmul>
 801e9d2:	2200      	movs	r2, #0
 801e9d4:	2300      	movs	r3, #0
 801e9d6:	4604      	mov	r4, r0
 801e9d8:	460d      	mov	r5, r1
 801e9da:	f7e2 f89d 	bl	8000b18 <__aeabi_dcmpeq>
 801e9de:	2800      	cmp	r0, #0
 801e9e0:	f43f aebb 	beq.w	801e75a <_dtoa_r+0x472>
 801e9e4:	e6f0      	b.n	801e7c8 <_dtoa_r+0x4e0>
 801e9e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e9e8:	2a00      	cmp	r2, #0
 801e9ea:	f000 80db 	beq.w	801eba4 <_dtoa_r+0x8bc>
 801e9ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e9f0:	2a01      	cmp	r2, #1
 801e9f2:	f300 80bf 	bgt.w	801eb74 <_dtoa_r+0x88c>
 801e9f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e9f8:	2a00      	cmp	r2, #0
 801e9fa:	f000 80b7 	beq.w	801eb6c <_dtoa_r+0x884>
 801e9fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801ea02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ea04:	4646      	mov	r6, r8
 801ea06:	9a08      	ldr	r2, [sp, #32]
 801ea08:	2101      	movs	r1, #1
 801ea0a:	441a      	add	r2, r3
 801ea0c:	4658      	mov	r0, fp
 801ea0e:	4498      	add	r8, r3
 801ea10:	9208      	str	r2, [sp, #32]
 801ea12:	f000 fc6b 	bl	801f2ec <__i2b>
 801ea16:	4605      	mov	r5, r0
 801ea18:	b15e      	cbz	r6, 801ea32 <_dtoa_r+0x74a>
 801ea1a:	9b08      	ldr	r3, [sp, #32]
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	dd08      	ble.n	801ea32 <_dtoa_r+0x74a>
 801ea20:	42b3      	cmp	r3, r6
 801ea22:	9a08      	ldr	r2, [sp, #32]
 801ea24:	bfa8      	it	ge
 801ea26:	4633      	movge	r3, r6
 801ea28:	eba8 0803 	sub.w	r8, r8, r3
 801ea2c:	1af6      	subs	r6, r6, r3
 801ea2e:	1ad3      	subs	r3, r2, r3
 801ea30:	9308      	str	r3, [sp, #32]
 801ea32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ea34:	b1f3      	cbz	r3, 801ea74 <_dtoa_r+0x78c>
 801ea36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ea38:	2b00      	cmp	r3, #0
 801ea3a:	f000 80b7 	beq.w	801ebac <_dtoa_r+0x8c4>
 801ea3e:	b18c      	cbz	r4, 801ea64 <_dtoa_r+0x77c>
 801ea40:	4629      	mov	r1, r5
 801ea42:	4622      	mov	r2, r4
 801ea44:	4658      	mov	r0, fp
 801ea46:	f000 fd11 	bl	801f46c <__pow5mult>
 801ea4a:	464a      	mov	r2, r9
 801ea4c:	4601      	mov	r1, r0
 801ea4e:	4605      	mov	r5, r0
 801ea50:	4658      	mov	r0, fp
 801ea52:	f000 fc61 	bl	801f318 <__multiply>
 801ea56:	4649      	mov	r1, r9
 801ea58:	9004      	str	r0, [sp, #16]
 801ea5a:	4658      	mov	r0, fp
 801ea5c:	f000 fb48 	bl	801f0f0 <_Bfree>
 801ea60:	9b04      	ldr	r3, [sp, #16]
 801ea62:	4699      	mov	r9, r3
 801ea64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ea66:	1b1a      	subs	r2, r3, r4
 801ea68:	d004      	beq.n	801ea74 <_dtoa_r+0x78c>
 801ea6a:	4649      	mov	r1, r9
 801ea6c:	4658      	mov	r0, fp
 801ea6e:	f000 fcfd 	bl	801f46c <__pow5mult>
 801ea72:	4681      	mov	r9, r0
 801ea74:	2101      	movs	r1, #1
 801ea76:	4658      	mov	r0, fp
 801ea78:	f000 fc38 	bl	801f2ec <__i2b>
 801ea7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ea7e:	4604      	mov	r4, r0
 801ea80:	2b00      	cmp	r3, #0
 801ea82:	f000 81cf 	beq.w	801ee24 <_dtoa_r+0xb3c>
 801ea86:	461a      	mov	r2, r3
 801ea88:	4601      	mov	r1, r0
 801ea8a:	4658      	mov	r0, fp
 801ea8c:	f000 fcee 	bl	801f46c <__pow5mult>
 801ea90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea92:	2b01      	cmp	r3, #1
 801ea94:	4604      	mov	r4, r0
 801ea96:	f300 8095 	bgt.w	801ebc4 <_dtoa_r+0x8dc>
 801ea9a:	9b02      	ldr	r3, [sp, #8]
 801ea9c:	2b00      	cmp	r3, #0
 801ea9e:	f040 8087 	bne.w	801ebb0 <_dtoa_r+0x8c8>
 801eaa2:	9b03      	ldr	r3, [sp, #12]
 801eaa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	f040 8089 	bne.w	801ebc0 <_dtoa_r+0x8d8>
 801eaae:	9b03      	ldr	r3, [sp, #12]
 801eab0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801eab4:	0d1b      	lsrs	r3, r3, #20
 801eab6:	051b      	lsls	r3, r3, #20
 801eab8:	b12b      	cbz	r3, 801eac6 <_dtoa_r+0x7de>
 801eaba:	9b08      	ldr	r3, [sp, #32]
 801eabc:	3301      	adds	r3, #1
 801eabe:	9308      	str	r3, [sp, #32]
 801eac0:	f108 0801 	add.w	r8, r8, #1
 801eac4:	2301      	movs	r3, #1
 801eac6:	930a      	str	r3, [sp, #40]	@ 0x28
 801eac8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eaca:	2b00      	cmp	r3, #0
 801eacc:	f000 81b0 	beq.w	801ee30 <_dtoa_r+0xb48>
 801ead0:	6923      	ldr	r3, [r4, #16]
 801ead2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ead6:	6918      	ldr	r0, [r3, #16]
 801ead8:	f000 fbbc 	bl	801f254 <__hi0bits>
 801eadc:	f1c0 0020 	rsb	r0, r0, #32
 801eae0:	9b08      	ldr	r3, [sp, #32]
 801eae2:	4418      	add	r0, r3
 801eae4:	f010 001f 	ands.w	r0, r0, #31
 801eae8:	d077      	beq.n	801ebda <_dtoa_r+0x8f2>
 801eaea:	f1c0 0320 	rsb	r3, r0, #32
 801eaee:	2b04      	cmp	r3, #4
 801eaf0:	dd6b      	ble.n	801ebca <_dtoa_r+0x8e2>
 801eaf2:	9b08      	ldr	r3, [sp, #32]
 801eaf4:	f1c0 001c 	rsb	r0, r0, #28
 801eaf8:	4403      	add	r3, r0
 801eafa:	4480      	add	r8, r0
 801eafc:	4406      	add	r6, r0
 801eafe:	9308      	str	r3, [sp, #32]
 801eb00:	f1b8 0f00 	cmp.w	r8, #0
 801eb04:	dd05      	ble.n	801eb12 <_dtoa_r+0x82a>
 801eb06:	4649      	mov	r1, r9
 801eb08:	4642      	mov	r2, r8
 801eb0a:	4658      	mov	r0, fp
 801eb0c:	f000 fd08 	bl	801f520 <__lshift>
 801eb10:	4681      	mov	r9, r0
 801eb12:	9b08      	ldr	r3, [sp, #32]
 801eb14:	2b00      	cmp	r3, #0
 801eb16:	dd05      	ble.n	801eb24 <_dtoa_r+0x83c>
 801eb18:	4621      	mov	r1, r4
 801eb1a:	461a      	mov	r2, r3
 801eb1c:	4658      	mov	r0, fp
 801eb1e:	f000 fcff 	bl	801f520 <__lshift>
 801eb22:	4604      	mov	r4, r0
 801eb24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801eb26:	2b00      	cmp	r3, #0
 801eb28:	d059      	beq.n	801ebde <_dtoa_r+0x8f6>
 801eb2a:	4621      	mov	r1, r4
 801eb2c:	4648      	mov	r0, r9
 801eb2e:	f000 fd63 	bl	801f5f8 <__mcmp>
 801eb32:	2800      	cmp	r0, #0
 801eb34:	da53      	bge.n	801ebde <_dtoa_r+0x8f6>
 801eb36:	1e7b      	subs	r3, r7, #1
 801eb38:	9304      	str	r3, [sp, #16]
 801eb3a:	4649      	mov	r1, r9
 801eb3c:	2300      	movs	r3, #0
 801eb3e:	220a      	movs	r2, #10
 801eb40:	4658      	mov	r0, fp
 801eb42:	f000 faf7 	bl	801f134 <__multadd>
 801eb46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eb48:	4681      	mov	r9, r0
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	f000 8172 	beq.w	801ee34 <_dtoa_r+0xb4c>
 801eb50:	2300      	movs	r3, #0
 801eb52:	4629      	mov	r1, r5
 801eb54:	220a      	movs	r2, #10
 801eb56:	4658      	mov	r0, fp
 801eb58:	f000 faec 	bl	801f134 <__multadd>
 801eb5c:	9b00      	ldr	r3, [sp, #0]
 801eb5e:	2b00      	cmp	r3, #0
 801eb60:	4605      	mov	r5, r0
 801eb62:	dc67      	bgt.n	801ec34 <_dtoa_r+0x94c>
 801eb64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb66:	2b02      	cmp	r3, #2
 801eb68:	dc41      	bgt.n	801ebee <_dtoa_r+0x906>
 801eb6a:	e063      	b.n	801ec34 <_dtoa_r+0x94c>
 801eb6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801eb6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801eb72:	e746      	b.n	801ea02 <_dtoa_r+0x71a>
 801eb74:	9b07      	ldr	r3, [sp, #28]
 801eb76:	1e5c      	subs	r4, r3, #1
 801eb78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eb7a:	42a3      	cmp	r3, r4
 801eb7c:	bfbf      	itttt	lt
 801eb7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801eb80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801eb82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801eb84:	1ae3      	sublt	r3, r4, r3
 801eb86:	bfb4      	ite	lt
 801eb88:	18d2      	addlt	r2, r2, r3
 801eb8a:	1b1c      	subge	r4, r3, r4
 801eb8c:	9b07      	ldr	r3, [sp, #28]
 801eb8e:	bfbc      	itt	lt
 801eb90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801eb92:	2400      	movlt	r4, #0
 801eb94:	2b00      	cmp	r3, #0
 801eb96:	bfb5      	itete	lt
 801eb98:	eba8 0603 	sublt.w	r6, r8, r3
 801eb9c:	9b07      	ldrge	r3, [sp, #28]
 801eb9e:	2300      	movlt	r3, #0
 801eba0:	4646      	movge	r6, r8
 801eba2:	e730      	b.n	801ea06 <_dtoa_r+0x71e>
 801eba4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801eba6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801eba8:	4646      	mov	r6, r8
 801ebaa:	e735      	b.n	801ea18 <_dtoa_r+0x730>
 801ebac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ebae:	e75c      	b.n	801ea6a <_dtoa_r+0x782>
 801ebb0:	2300      	movs	r3, #0
 801ebb2:	e788      	b.n	801eac6 <_dtoa_r+0x7de>
 801ebb4:	3fe00000 	.word	0x3fe00000
 801ebb8:	40240000 	.word	0x40240000
 801ebbc:	40140000 	.word	0x40140000
 801ebc0:	9b02      	ldr	r3, [sp, #8]
 801ebc2:	e780      	b.n	801eac6 <_dtoa_r+0x7de>
 801ebc4:	2300      	movs	r3, #0
 801ebc6:	930a      	str	r3, [sp, #40]	@ 0x28
 801ebc8:	e782      	b.n	801ead0 <_dtoa_r+0x7e8>
 801ebca:	d099      	beq.n	801eb00 <_dtoa_r+0x818>
 801ebcc:	9a08      	ldr	r2, [sp, #32]
 801ebce:	331c      	adds	r3, #28
 801ebd0:	441a      	add	r2, r3
 801ebd2:	4498      	add	r8, r3
 801ebd4:	441e      	add	r6, r3
 801ebd6:	9208      	str	r2, [sp, #32]
 801ebd8:	e792      	b.n	801eb00 <_dtoa_r+0x818>
 801ebda:	4603      	mov	r3, r0
 801ebdc:	e7f6      	b.n	801ebcc <_dtoa_r+0x8e4>
 801ebde:	9b07      	ldr	r3, [sp, #28]
 801ebe0:	9704      	str	r7, [sp, #16]
 801ebe2:	2b00      	cmp	r3, #0
 801ebe4:	dc20      	bgt.n	801ec28 <_dtoa_r+0x940>
 801ebe6:	9300      	str	r3, [sp, #0]
 801ebe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ebea:	2b02      	cmp	r3, #2
 801ebec:	dd1e      	ble.n	801ec2c <_dtoa_r+0x944>
 801ebee:	9b00      	ldr	r3, [sp, #0]
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	f47f aec0 	bne.w	801e976 <_dtoa_r+0x68e>
 801ebf6:	4621      	mov	r1, r4
 801ebf8:	2205      	movs	r2, #5
 801ebfa:	4658      	mov	r0, fp
 801ebfc:	f000 fa9a 	bl	801f134 <__multadd>
 801ec00:	4601      	mov	r1, r0
 801ec02:	4604      	mov	r4, r0
 801ec04:	4648      	mov	r0, r9
 801ec06:	f000 fcf7 	bl	801f5f8 <__mcmp>
 801ec0a:	2800      	cmp	r0, #0
 801ec0c:	f77f aeb3 	ble.w	801e976 <_dtoa_r+0x68e>
 801ec10:	4656      	mov	r6, sl
 801ec12:	2331      	movs	r3, #49	@ 0x31
 801ec14:	f806 3b01 	strb.w	r3, [r6], #1
 801ec18:	9b04      	ldr	r3, [sp, #16]
 801ec1a:	3301      	adds	r3, #1
 801ec1c:	9304      	str	r3, [sp, #16]
 801ec1e:	e6ae      	b.n	801e97e <_dtoa_r+0x696>
 801ec20:	9c07      	ldr	r4, [sp, #28]
 801ec22:	9704      	str	r7, [sp, #16]
 801ec24:	4625      	mov	r5, r4
 801ec26:	e7f3      	b.n	801ec10 <_dtoa_r+0x928>
 801ec28:	9b07      	ldr	r3, [sp, #28]
 801ec2a:	9300      	str	r3, [sp, #0]
 801ec2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ec2e:	2b00      	cmp	r3, #0
 801ec30:	f000 8104 	beq.w	801ee3c <_dtoa_r+0xb54>
 801ec34:	2e00      	cmp	r6, #0
 801ec36:	dd05      	ble.n	801ec44 <_dtoa_r+0x95c>
 801ec38:	4629      	mov	r1, r5
 801ec3a:	4632      	mov	r2, r6
 801ec3c:	4658      	mov	r0, fp
 801ec3e:	f000 fc6f 	bl	801f520 <__lshift>
 801ec42:	4605      	mov	r5, r0
 801ec44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ec46:	2b00      	cmp	r3, #0
 801ec48:	d05a      	beq.n	801ed00 <_dtoa_r+0xa18>
 801ec4a:	6869      	ldr	r1, [r5, #4]
 801ec4c:	4658      	mov	r0, fp
 801ec4e:	f000 fa0f 	bl	801f070 <_Balloc>
 801ec52:	4606      	mov	r6, r0
 801ec54:	b928      	cbnz	r0, 801ec62 <_dtoa_r+0x97a>
 801ec56:	4b84      	ldr	r3, [pc, #528]	@ (801ee68 <_dtoa_r+0xb80>)
 801ec58:	4602      	mov	r2, r0
 801ec5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801ec5e:	f7ff bb5a 	b.w	801e316 <_dtoa_r+0x2e>
 801ec62:	692a      	ldr	r2, [r5, #16]
 801ec64:	3202      	adds	r2, #2
 801ec66:	0092      	lsls	r2, r2, #2
 801ec68:	f105 010c 	add.w	r1, r5, #12
 801ec6c:	300c      	adds	r0, #12
 801ec6e:	f7ff fa9c 	bl	801e1aa <memcpy>
 801ec72:	2201      	movs	r2, #1
 801ec74:	4631      	mov	r1, r6
 801ec76:	4658      	mov	r0, fp
 801ec78:	f000 fc52 	bl	801f520 <__lshift>
 801ec7c:	f10a 0301 	add.w	r3, sl, #1
 801ec80:	9307      	str	r3, [sp, #28]
 801ec82:	9b00      	ldr	r3, [sp, #0]
 801ec84:	4453      	add	r3, sl
 801ec86:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ec88:	9b02      	ldr	r3, [sp, #8]
 801ec8a:	f003 0301 	and.w	r3, r3, #1
 801ec8e:	462f      	mov	r7, r5
 801ec90:	930a      	str	r3, [sp, #40]	@ 0x28
 801ec92:	4605      	mov	r5, r0
 801ec94:	9b07      	ldr	r3, [sp, #28]
 801ec96:	4621      	mov	r1, r4
 801ec98:	3b01      	subs	r3, #1
 801ec9a:	4648      	mov	r0, r9
 801ec9c:	9300      	str	r3, [sp, #0]
 801ec9e:	f7ff fa99 	bl	801e1d4 <quorem>
 801eca2:	4639      	mov	r1, r7
 801eca4:	9002      	str	r0, [sp, #8]
 801eca6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801ecaa:	4648      	mov	r0, r9
 801ecac:	f000 fca4 	bl	801f5f8 <__mcmp>
 801ecb0:	462a      	mov	r2, r5
 801ecb2:	9008      	str	r0, [sp, #32]
 801ecb4:	4621      	mov	r1, r4
 801ecb6:	4658      	mov	r0, fp
 801ecb8:	f000 fcba 	bl	801f630 <__mdiff>
 801ecbc:	68c2      	ldr	r2, [r0, #12]
 801ecbe:	4606      	mov	r6, r0
 801ecc0:	bb02      	cbnz	r2, 801ed04 <_dtoa_r+0xa1c>
 801ecc2:	4601      	mov	r1, r0
 801ecc4:	4648      	mov	r0, r9
 801ecc6:	f000 fc97 	bl	801f5f8 <__mcmp>
 801ecca:	4602      	mov	r2, r0
 801eccc:	4631      	mov	r1, r6
 801ecce:	4658      	mov	r0, fp
 801ecd0:	920e      	str	r2, [sp, #56]	@ 0x38
 801ecd2:	f000 fa0d 	bl	801f0f0 <_Bfree>
 801ecd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ecd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ecda:	9e07      	ldr	r6, [sp, #28]
 801ecdc:	ea43 0102 	orr.w	r1, r3, r2
 801ece0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ece2:	4319      	orrs	r1, r3
 801ece4:	d110      	bne.n	801ed08 <_dtoa_r+0xa20>
 801ece6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801ecea:	d029      	beq.n	801ed40 <_dtoa_r+0xa58>
 801ecec:	9b08      	ldr	r3, [sp, #32]
 801ecee:	2b00      	cmp	r3, #0
 801ecf0:	dd02      	ble.n	801ecf8 <_dtoa_r+0xa10>
 801ecf2:	9b02      	ldr	r3, [sp, #8]
 801ecf4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801ecf8:	9b00      	ldr	r3, [sp, #0]
 801ecfa:	f883 8000 	strb.w	r8, [r3]
 801ecfe:	e63f      	b.n	801e980 <_dtoa_r+0x698>
 801ed00:	4628      	mov	r0, r5
 801ed02:	e7bb      	b.n	801ec7c <_dtoa_r+0x994>
 801ed04:	2201      	movs	r2, #1
 801ed06:	e7e1      	b.n	801eccc <_dtoa_r+0x9e4>
 801ed08:	9b08      	ldr	r3, [sp, #32]
 801ed0a:	2b00      	cmp	r3, #0
 801ed0c:	db04      	blt.n	801ed18 <_dtoa_r+0xa30>
 801ed0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ed10:	430b      	orrs	r3, r1
 801ed12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ed14:	430b      	orrs	r3, r1
 801ed16:	d120      	bne.n	801ed5a <_dtoa_r+0xa72>
 801ed18:	2a00      	cmp	r2, #0
 801ed1a:	dded      	ble.n	801ecf8 <_dtoa_r+0xa10>
 801ed1c:	4649      	mov	r1, r9
 801ed1e:	2201      	movs	r2, #1
 801ed20:	4658      	mov	r0, fp
 801ed22:	f000 fbfd 	bl	801f520 <__lshift>
 801ed26:	4621      	mov	r1, r4
 801ed28:	4681      	mov	r9, r0
 801ed2a:	f000 fc65 	bl	801f5f8 <__mcmp>
 801ed2e:	2800      	cmp	r0, #0
 801ed30:	dc03      	bgt.n	801ed3a <_dtoa_r+0xa52>
 801ed32:	d1e1      	bne.n	801ecf8 <_dtoa_r+0xa10>
 801ed34:	f018 0f01 	tst.w	r8, #1
 801ed38:	d0de      	beq.n	801ecf8 <_dtoa_r+0xa10>
 801ed3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801ed3e:	d1d8      	bne.n	801ecf2 <_dtoa_r+0xa0a>
 801ed40:	9a00      	ldr	r2, [sp, #0]
 801ed42:	2339      	movs	r3, #57	@ 0x39
 801ed44:	7013      	strb	r3, [r2, #0]
 801ed46:	4633      	mov	r3, r6
 801ed48:	461e      	mov	r6, r3
 801ed4a:	3b01      	subs	r3, #1
 801ed4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801ed50:	2a39      	cmp	r2, #57	@ 0x39
 801ed52:	d052      	beq.n	801edfa <_dtoa_r+0xb12>
 801ed54:	3201      	adds	r2, #1
 801ed56:	701a      	strb	r2, [r3, #0]
 801ed58:	e612      	b.n	801e980 <_dtoa_r+0x698>
 801ed5a:	2a00      	cmp	r2, #0
 801ed5c:	dd07      	ble.n	801ed6e <_dtoa_r+0xa86>
 801ed5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801ed62:	d0ed      	beq.n	801ed40 <_dtoa_r+0xa58>
 801ed64:	9a00      	ldr	r2, [sp, #0]
 801ed66:	f108 0301 	add.w	r3, r8, #1
 801ed6a:	7013      	strb	r3, [r2, #0]
 801ed6c:	e608      	b.n	801e980 <_dtoa_r+0x698>
 801ed6e:	9b07      	ldr	r3, [sp, #28]
 801ed70:	9a07      	ldr	r2, [sp, #28]
 801ed72:	f803 8c01 	strb.w	r8, [r3, #-1]
 801ed76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ed78:	4293      	cmp	r3, r2
 801ed7a:	d028      	beq.n	801edce <_dtoa_r+0xae6>
 801ed7c:	4649      	mov	r1, r9
 801ed7e:	2300      	movs	r3, #0
 801ed80:	220a      	movs	r2, #10
 801ed82:	4658      	mov	r0, fp
 801ed84:	f000 f9d6 	bl	801f134 <__multadd>
 801ed88:	42af      	cmp	r7, r5
 801ed8a:	4681      	mov	r9, r0
 801ed8c:	f04f 0300 	mov.w	r3, #0
 801ed90:	f04f 020a 	mov.w	r2, #10
 801ed94:	4639      	mov	r1, r7
 801ed96:	4658      	mov	r0, fp
 801ed98:	d107      	bne.n	801edaa <_dtoa_r+0xac2>
 801ed9a:	f000 f9cb 	bl	801f134 <__multadd>
 801ed9e:	4607      	mov	r7, r0
 801eda0:	4605      	mov	r5, r0
 801eda2:	9b07      	ldr	r3, [sp, #28]
 801eda4:	3301      	adds	r3, #1
 801eda6:	9307      	str	r3, [sp, #28]
 801eda8:	e774      	b.n	801ec94 <_dtoa_r+0x9ac>
 801edaa:	f000 f9c3 	bl	801f134 <__multadd>
 801edae:	4629      	mov	r1, r5
 801edb0:	4607      	mov	r7, r0
 801edb2:	2300      	movs	r3, #0
 801edb4:	220a      	movs	r2, #10
 801edb6:	4658      	mov	r0, fp
 801edb8:	f000 f9bc 	bl	801f134 <__multadd>
 801edbc:	4605      	mov	r5, r0
 801edbe:	e7f0      	b.n	801eda2 <_dtoa_r+0xaba>
 801edc0:	9b00      	ldr	r3, [sp, #0]
 801edc2:	2b00      	cmp	r3, #0
 801edc4:	bfcc      	ite	gt
 801edc6:	461e      	movgt	r6, r3
 801edc8:	2601      	movle	r6, #1
 801edca:	4456      	add	r6, sl
 801edcc:	2700      	movs	r7, #0
 801edce:	4649      	mov	r1, r9
 801edd0:	2201      	movs	r2, #1
 801edd2:	4658      	mov	r0, fp
 801edd4:	f000 fba4 	bl	801f520 <__lshift>
 801edd8:	4621      	mov	r1, r4
 801edda:	4681      	mov	r9, r0
 801eddc:	f000 fc0c 	bl	801f5f8 <__mcmp>
 801ede0:	2800      	cmp	r0, #0
 801ede2:	dcb0      	bgt.n	801ed46 <_dtoa_r+0xa5e>
 801ede4:	d102      	bne.n	801edec <_dtoa_r+0xb04>
 801ede6:	f018 0f01 	tst.w	r8, #1
 801edea:	d1ac      	bne.n	801ed46 <_dtoa_r+0xa5e>
 801edec:	4633      	mov	r3, r6
 801edee:	461e      	mov	r6, r3
 801edf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801edf4:	2a30      	cmp	r2, #48	@ 0x30
 801edf6:	d0fa      	beq.n	801edee <_dtoa_r+0xb06>
 801edf8:	e5c2      	b.n	801e980 <_dtoa_r+0x698>
 801edfa:	459a      	cmp	sl, r3
 801edfc:	d1a4      	bne.n	801ed48 <_dtoa_r+0xa60>
 801edfe:	9b04      	ldr	r3, [sp, #16]
 801ee00:	3301      	adds	r3, #1
 801ee02:	9304      	str	r3, [sp, #16]
 801ee04:	2331      	movs	r3, #49	@ 0x31
 801ee06:	f88a 3000 	strb.w	r3, [sl]
 801ee0a:	e5b9      	b.n	801e980 <_dtoa_r+0x698>
 801ee0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ee0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801ee6c <_dtoa_r+0xb84>
 801ee12:	b11b      	cbz	r3, 801ee1c <_dtoa_r+0xb34>
 801ee14:	f10a 0308 	add.w	r3, sl, #8
 801ee18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ee1a:	6013      	str	r3, [r2, #0]
 801ee1c:	4650      	mov	r0, sl
 801ee1e:	b019      	add	sp, #100	@ 0x64
 801ee20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee26:	2b01      	cmp	r3, #1
 801ee28:	f77f ae37 	ble.w	801ea9a <_dtoa_r+0x7b2>
 801ee2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ee2e:	930a      	str	r3, [sp, #40]	@ 0x28
 801ee30:	2001      	movs	r0, #1
 801ee32:	e655      	b.n	801eae0 <_dtoa_r+0x7f8>
 801ee34:	9b00      	ldr	r3, [sp, #0]
 801ee36:	2b00      	cmp	r3, #0
 801ee38:	f77f aed6 	ble.w	801ebe8 <_dtoa_r+0x900>
 801ee3c:	4656      	mov	r6, sl
 801ee3e:	4621      	mov	r1, r4
 801ee40:	4648      	mov	r0, r9
 801ee42:	f7ff f9c7 	bl	801e1d4 <quorem>
 801ee46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801ee4a:	f806 8b01 	strb.w	r8, [r6], #1
 801ee4e:	9b00      	ldr	r3, [sp, #0]
 801ee50:	eba6 020a 	sub.w	r2, r6, sl
 801ee54:	4293      	cmp	r3, r2
 801ee56:	ddb3      	ble.n	801edc0 <_dtoa_r+0xad8>
 801ee58:	4649      	mov	r1, r9
 801ee5a:	2300      	movs	r3, #0
 801ee5c:	220a      	movs	r2, #10
 801ee5e:	4658      	mov	r0, fp
 801ee60:	f000 f968 	bl	801f134 <__multadd>
 801ee64:	4681      	mov	r9, r0
 801ee66:	e7ea      	b.n	801ee3e <_dtoa_r+0xb56>
 801ee68:	08022755 	.word	0x08022755
 801ee6c:	080226d9 	.word	0x080226d9

0801ee70 <_free_r>:
 801ee70:	b538      	push	{r3, r4, r5, lr}
 801ee72:	4605      	mov	r5, r0
 801ee74:	2900      	cmp	r1, #0
 801ee76:	d041      	beq.n	801eefc <_free_r+0x8c>
 801ee78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ee7c:	1f0c      	subs	r4, r1, #4
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	bfb8      	it	lt
 801ee82:	18e4      	addlt	r4, r4, r3
 801ee84:	f000 f8e8 	bl	801f058 <__malloc_lock>
 801ee88:	4a1d      	ldr	r2, [pc, #116]	@ (801ef00 <_free_r+0x90>)
 801ee8a:	6813      	ldr	r3, [r2, #0]
 801ee8c:	b933      	cbnz	r3, 801ee9c <_free_r+0x2c>
 801ee8e:	6063      	str	r3, [r4, #4]
 801ee90:	6014      	str	r4, [r2, #0]
 801ee92:	4628      	mov	r0, r5
 801ee94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ee98:	f000 b8e4 	b.w	801f064 <__malloc_unlock>
 801ee9c:	42a3      	cmp	r3, r4
 801ee9e:	d908      	bls.n	801eeb2 <_free_r+0x42>
 801eea0:	6820      	ldr	r0, [r4, #0]
 801eea2:	1821      	adds	r1, r4, r0
 801eea4:	428b      	cmp	r3, r1
 801eea6:	bf01      	itttt	eq
 801eea8:	6819      	ldreq	r1, [r3, #0]
 801eeaa:	685b      	ldreq	r3, [r3, #4]
 801eeac:	1809      	addeq	r1, r1, r0
 801eeae:	6021      	streq	r1, [r4, #0]
 801eeb0:	e7ed      	b.n	801ee8e <_free_r+0x1e>
 801eeb2:	461a      	mov	r2, r3
 801eeb4:	685b      	ldr	r3, [r3, #4]
 801eeb6:	b10b      	cbz	r3, 801eebc <_free_r+0x4c>
 801eeb8:	42a3      	cmp	r3, r4
 801eeba:	d9fa      	bls.n	801eeb2 <_free_r+0x42>
 801eebc:	6811      	ldr	r1, [r2, #0]
 801eebe:	1850      	adds	r0, r2, r1
 801eec0:	42a0      	cmp	r0, r4
 801eec2:	d10b      	bne.n	801eedc <_free_r+0x6c>
 801eec4:	6820      	ldr	r0, [r4, #0]
 801eec6:	4401      	add	r1, r0
 801eec8:	1850      	adds	r0, r2, r1
 801eeca:	4283      	cmp	r3, r0
 801eecc:	6011      	str	r1, [r2, #0]
 801eece:	d1e0      	bne.n	801ee92 <_free_r+0x22>
 801eed0:	6818      	ldr	r0, [r3, #0]
 801eed2:	685b      	ldr	r3, [r3, #4]
 801eed4:	6053      	str	r3, [r2, #4]
 801eed6:	4408      	add	r0, r1
 801eed8:	6010      	str	r0, [r2, #0]
 801eeda:	e7da      	b.n	801ee92 <_free_r+0x22>
 801eedc:	d902      	bls.n	801eee4 <_free_r+0x74>
 801eede:	230c      	movs	r3, #12
 801eee0:	602b      	str	r3, [r5, #0]
 801eee2:	e7d6      	b.n	801ee92 <_free_r+0x22>
 801eee4:	6820      	ldr	r0, [r4, #0]
 801eee6:	1821      	adds	r1, r4, r0
 801eee8:	428b      	cmp	r3, r1
 801eeea:	bf04      	itt	eq
 801eeec:	6819      	ldreq	r1, [r3, #0]
 801eeee:	685b      	ldreq	r3, [r3, #4]
 801eef0:	6063      	str	r3, [r4, #4]
 801eef2:	bf04      	itt	eq
 801eef4:	1809      	addeq	r1, r1, r0
 801eef6:	6021      	streq	r1, [r4, #0]
 801eef8:	6054      	str	r4, [r2, #4]
 801eefa:	e7ca      	b.n	801ee92 <_free_r+0x22>
 801eefc:	bd38      	pop	{r3, r4, r5, pc}
 801eefe:	bf00      	nop
 801ef00:	2001beec 	.word	0x2001beec

0801ef04 <malloc>:
 801ef04:	4b02      	ldr	r3, [pc, #8]	@ (801ef10 <malloc+0xc>)
 801ef06:	4601      	mov	r1, r0
 801ef08:	6818      	ldr	r0, [r3, #0]
 801ef0a:	f000 b825 	b.w	801ef58 <_malloc_r>
 801ef0e:	bf00      	nop
 801ef10:	2000003c 	.word	0x2000003c

0801ef14 <sbrk_aligned>:
 801ef14:	b570      	push	{r4, r5, r6, lr}
 801ef16:	4e0f      	ldr	r6, [pc, #60]	@ (801ef54 <sbrk_aligned+0x40>)
 801ef18:	460c      	mov	r4, r1
 801ef1a:	6831      	ldr	r1, [r6, #0]
 801ef1c:	4605      	mov	r5, r0
 801ef1e:	b911      	cbnz	r1, 801ef26 <sbrk_aligned+0x12>
 801ef20:	f002 f806 	bl	8020f30 <_sbrk_r>
 801ef24:	6030      	str	r0, [r6, #0]
 801ef26:	4621      	mov	r1, r4
 801ef28:	4628      	mov	r0, r5
 801ef2a:	f002 f801 	bl	8020f30 <_sbrk_r>
 801ef2e:	1c43      	adds	r3, r0, #1
 801ef30:	d103      	bne.n	801ef3a <sbrk_aligned+0x26>
 801ef32:	f04f 34ff 	mov.w	r4, #4294967295
 801ef36:	4620      	mov	r0, r4
 801ef38:	bd70      	pop	{r4, r5, r6, pc}
 801ef3a:	1cc4      	adds	r4, r0, #3
 801ef3c:	f024 0403 	bic.w	r4, r4, #3
 801ef40:	42a0      	cmp	r0, r4
 801ef42:	d0f8      	beq.n	801ef36 <sbrk_aligned+0x22>
 801ef44:	1a21      	subs	r1, r4, r0
 801ef46:	4628      	mov	r0, r5
 801ef48:	f001 fff2 	bl	8020f30 <_sbrk_r>
 801ef4c:	3001      	adds	r0, #1
 801ef4e:	d1f2      	bne.n	801ef36 <sbrk_aligned+0x22>
 801ef50:	e7ef      	b.n	801ef32 <sbrk_aligned+0x1e>
 801ef52:	bf00      	nop
 801ef54:	2001bee8 	.word	0x2001bee8

0801ef58 <_malloc_r>:
 801ef58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ef5c:	1ccd      	adds	r5, r1, #3
 801ef5e:	f025 0503 	bic.w	r5, r5, #3
 801ef62:	3508      	adds	r5, #8
 801ef64:	2d0c      	cmp	r5, #12
 801ef66:	bf38      	it	cc
 801ef68:	250c      	movcc	r5, #12
 801ef6a:	2d00      	cmp	r5, #0
 801ef6c:	4606      	mov	r6, r0
 801ef6e:	db01      	blt.n	801ef74 <_malloc_r+0x1c>
 801ef70:	42a9      	cmp	r1, r5
 801ef72:	d904      	bls.n	801ef7e <_malloc_r+0x26>
 801ef74:	230c      	movs	r3, #12
 801ef76:	6033      	str	r3, [r6, #0]
 801ef78:	2000      	movs	r0, #0
 801ef7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801f054 <_malloc_r+0xfc>
 801ef82:	f000 f869 	bl	801f058 <__malloc_lock>
 801ef86:	f8d8 3000 	ldr.w	r3, [r8]
 801ef8a:	461c      	mov	r4, r3
 801ef8c:	bb44      	cbnz	r4, 801efe0 <_malloc_r+0x88>
 801ef8e:	4629      	mov	r1, r5
 801ef90:	4630      	mov	r0, r6
 801ef92:	f7ff ffbf 	bl	801ef14 <sbrk_aligned>
 801ef96:	1c43      	adds	r3, r0, #1
 801ef98:	4604      	mov	r4, r0
 801ef9a:	d158      	bne.n	801f04e <_malloc_r+0xf6>
 801ef9c:	f8d8 4000 	ldr.w	r4, [r8]
 801efa0:	4627      	mov	r7, r4
 801efa2:	2f00      	cmp	r7, #0
 801efa4:	d143      	bne.n	801f02e <_malloc_r+0xd6>
 801efa6:	2c00      	cmp	r4, #0
 801efa8:	d04b      	beq.n	801f042 <_malloc_r+0xea>
 801efaa:	6823      	ldr	r3, [r4, #0]
 801efac:	4639      	mov	r1, r7
 801efae:	4630      	mov	r0, r6
 801efb0:	eb04 0903 	add.w	r9, r4, r3
 801efb4:	f001 ffbc 	bl	8020f30 <_sbrk_r>
 801efb8:	4581      	cmp	r9, r0
 801efba:	d142      	bne.n	801f042 <_malloc_r+0xea>
 801efbc:	6821      	ldr	r1, [r4, #0]
 801efbe:	1a6d      	subs	r5, r5, r1
 801efc0:	4629      	mov	r1, r5
 801efc2:	4630      	mov	r0, r6
 801efc4:	f7ff ffa6 	bl	801ef14 <sbrk_aligned>
 801efc8:	3001      	adds	r0, #1
 801efca:	d03a      	beq.n	801f042 <_malloc_r+0xea>
 801efcc:	6823      	ldr	r3, [r4, #0]
 801efce:	442b      	add	r3, r5
 801efd0:	6023      	str	r3, [r4, #0]
 801efd2:	f8d8 3000 	ldr.w	r3, [r8]
 801efd6:	685a      	ldr	r2, [r3, #4]
 801efd8:	bb62      	cbnz	r2, 801f034 <_malloc_r+0xdc>
 801efda:	f8c8 7000 	str.w	r7, [r8]
 801efde:	e00f      	b.n	801f000 <_malloc_r+0xa8>
 801efe0:	6822      	ldr	r2, [r4, #0]
 801efe2:	1b52      	subs	r2, r2, r5
 801efe4:	d420      	bmi.n	801f028 <_malloc_r+0xd0>
 801efe6:	2a0b      	cmp	r2, #11
 801efe8:	d917      	bls.n	801f01a <_malloc_r+0xc2>
 801efea:	1961      	adds	r1, r4, r5
 801efec:	42a3      	cmp	r3, r4
 801efee:	6025      	str	r5, [r4, #0]
 801eff0:	bf18      	it	ne
 801eff2:	6059      	strne	r1, [r3, #4]
 801eff4:	6863      	ldr	r3, [r4, #4]
 801eff6:	bf08      	it	eq
 801eff8:	f8c8 1000 	streq.w	r1, [r8]
 801effc:	5162      	str	r2, [r4, r5]
 801effe:	604b      	str	r3, [r1, #4]
 801f000:	4630      	mov	r0, r6
 801f002:	f000 f82f 	bl	801f064 <__malloc_unlock>
 801f006:	f104 000b 	add.w	r0, r4, #11
 801f00a:	1d23      	adds	r3, r4, #4
 801f00c:	f020 0007 	bic.w	r0, r0, #7
 801f010:	1ac2      	subs	r2, r0, r3
 801f012:	bf1c      	itt	ne
 801f014:	1a1b      	subne	r3, r3, r0
 801f016:	50a3      	strne	r3, [r4, r2]
 801f018:	e7af      	b.n	801ef7a <_malloc_r+0x22>
 801f01a:	6862      	ldr	r2, [r4, #4]
 801f01c:	42a3      	cmp	r3, r4
 801f01e:	bf0c      	ite	eq
 801f020:	f8c8 2000 	streq.w	r2, [r8]
 801f024:	605a      	strne	r2, [r3, #4]
 801f026:	e7eb      	b.n	801f000 <_malloc_r+0xa8>
 801f028:	4623      	mov	r3, r4
 801f02a:	6864      	ldr	r4, [r4, #4]
 801f02c:	e7ae      	b.n	801ef8c <_malloc_r+0x34>
 801f02e:	463c      	mov	r4, r7
 801f030:	687f      	ldr	r7, [r7, #4]
 801f032:	e7b6      	b.n	801efa2 <_malloc_r+0x4a>
 801f034:	461a      	mov	r2, r3
 801f036:	685b      	ldr	r3, [r3, #4]
 801f038:	42a3      	cmp	r3, r4
 801f03a:	d1fb      	bne.n	801f034 <_malloc_r+0xdc>
 801f03c:	2300      	movs	r3, #0
 801f03e:	6053      	str	r3, [r2, #4]
 801f040:	e7de      	b.n	801f000 <_malloc_r+0xa8>
 801f042:	230c      	movs	r3, #12
 801f044:	6033      	str	r3, [r6, #0]
 801f046:	4630      	mov	r0, r6
 801f048:	f000 f80c 	bl	801f064 <__malloc_unlock>
 801f04c:	e794      	b.n	801ef78 <_malloc_r+0x20>
 801f04e:	6005      	str	r5, [r0, #0]
 801f050:	e7d6      	b.n	801f000 <_malloc_r+0xa8>
 801f052:	bf00      	nop
 801f054:	2001beec 	.word	0x2001beec

0801f058 <__malloc_lock>:
 801f058:	4801      	ldr	r0, [pc, #4]	@ (801f060 <__malloc_lock+0x8>)
 801f05a:	f7ff b8a4 	b.w	801e1a6 <__retarget_lock_acquire_recursive>
 801f05e:	bf00      	nop
 801f060:	2001bee4 	.word	0x2001bee4

0801f064 <__malloc_unlock>:
 801f064:	4801      	ldr	r0, [pc, #4]	@ (801f06c <__malloc_unlock+0x8>)
 801f066:	f7ff b89f 	b.w	801e1a8 <__retarget_lock_release_recursive>
 801f06a:	bf00      	nop
 801f06c:	2001bee4 	.word	0x2001bee4

0801f070 <_Balloc>:
 801f070:	b570      	push	{r4, r5, r6, lr}
 801f072:	69c6      	ldr	r6, [r0, #28]
 801f074:	4604      	mov	r4, r0
 801f076:	460d      	mov	r5, r1
 801f078:	b976      	cbnz	r6, 801f098 <_Balloc+0x28>
 801f07a:	2010      	movs	r0, #16
 801f07c:	f7ff ff42 	bl	801ef04 <malloc>
 801f080:	4602      	mov	r2, r0
 801f082:	61e0      	str	r0, [r4, #28]
 801f084:	b920      	cbnz	r0, 801f090 <_Balloc+0x20>
 801f086:	4b18      	ldr	r3, [pc, #96]	@ (801f0e8 <_Balloc+0x78>)
 801f088:	4818      	ldr	r0, [pc, #96]	@ (801f0ec <_Balloc+0x7c>)
 801f08a:	216b      	movs	r1, #107	@ 0x6b
 801f08c:	f001 ff68 	bl	8020f60 <__assert_func>
 801f090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f094:	6006      	str	r6, [r0, #0]
 801f096:	60c6      	str	r6, [r0, #12]
 801f098:	69e6      	ldr	r6, [r4, #28]
 801f09a:	68f3      	ldr	r3, [r6, #12]
 801f09c:	b183      	cbz	r3, 801f0c0 <_Balloc+0x50>
 801f09e:	69e3      	ldr	r3, [r4, #28]
 801f0a0:	68db      	ldr	r3, [r3, #12]
 801f0a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f0a6:	b9b8      	cbnz	r0, 801f0d8 <_Balloc+0x68>
 801f0a8:	2101      	movs	r1, #1
 801f0aa:	fa01 f605 	lsl.w	r6, r1, r5
 801f0ae:	1d72      	adds	r2, r6, #5
 801f0b0:	0092      	lsls	r2, r2, #2
 801f0b2:	4620      	mov	r0, r4
 801f0b4:	f001 ff72 	bl	8020f9c <_calloc_r>
 801f0b8:	b160      	cbz	r0, 801f0d4 <_Balloc+0x64>
 801f0ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f0be:	e00e      	b.n	801f0de <_Balloc+0x6e>
 801f0c0:	2221      	movs	r2, #33	@ 0x21
 801f0c2:	2104      	movs	r1, #4
 801f0c4:	4620      	mov	r0, r4
 801f0c6:	f001 ff69 	bl	8020f9c <_calloc_r>
 801f0ca:	69e3      	ldr	r3, [r4, #28]
 801f0cc:	60f0      	str	r0, [r6, #12]
 801f0ce:	68db      	ldr	r3, [r3, #12]
 801f0d0:	2b00      	cmp	r3, #0
 801f0d2:	d1e4      	bne.n	801f09e <_Balloc+0x2e>
 801f0d4:	2000      	movs	r0, #0
 801f0d6:	bd70      	pop	{r4, r5, r6, pc}
 801f0d8:	6802      	ldr	r2, [r0, #0]
 801f0da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f0de:	2300      	movs	r3, #0
 801f0e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f0e4:	e7f7      	b.n	801f0d6 <_Balloc+0x66>
 801f0e6:	bf00      	nop
 801f0e8:	080226e6 	.word	0x080226e6
 801f0ec:	08022766 	.word	0x08022766

0801f0f0 <_Bfree>:
 801f0f0:	b570      	push	{r4, r5, r6, lr}
 801f0f2:	69c6      	ldr	r6, [r0, #28]
 801f0f4:	4605      	mov	r5, r0
 801f0f6:	460c      	mov	r4, r1
 801f0f8:	b976      	cbnz	r6, 801f118 <_Bfree+0x28>
 801f0fa:	2010      	movs	r0, #16
 801f0fc:	f7ff ff02 	bl	801ef04 <malloc>
 801f100:	4602      	mov	r2, r0
 801f102:	61e8      	str	r0, [r5, #28]
 801f104:	b920      	cbnz	r0, 801f110 <_Bfree+0x20>
 801f106:	4b09      	ldr	r3, [pc, #36]	@ (801f12c <_Bfree+0x3c>)
 801f108:	4809      	ldr	r0, [pc, #36]	@ (801f130 <_Bfree+0x40>)
 801f10a:	218f      	movs	r1, #143	@ 0x8f
 801f10c:	f001 ff28 	bl	8020f60 <__assert_func>
 801f110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f114:	6006      	str	r6, [r0, #0]
 801f116:	60c6      	str	r6, [r0, #12]
 801f118:	b13c      	cbz	r4, 801f12a <_Bfree+0x3a>
 801f11a:	69eb      	ldr	r3, [r5, #28]
 801f11c:	6862      	ldr	r2, [r4, #4]
 801f11e:	68db      	ldr	r3, [r3, #12]
 801f120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f124:	6021      	str	r1, [r4, #0]
 801f126:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f12a:	bd70      	pop	{r4, r5, r6, pc}
 801f12c:	080226e6 	.word	0x080226e6
 801f130:	08022766 	.word	0x08022766

0801f134 <__multadd>:
 801f134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f138:	690d      	ldr	r5, [r1, #16]
 801f13a:	4607      	mov	r7, r0
 801f13c:	460c      	mov	r4, r1
 801f13e:	461e      	mov	r6, r3
 801f140:	f101 0c14 	add.w	ip, r1, #20
 801f144:	2000      	movs	r0, #0
 801f146:	f8dc 3000 	ldr.w	r3, [ip]
 801f14a:	b299      	uxth	r1, r3
 801f14c:	fb02 6101 	mla	r1, r2, r1, r6
 801f150:	0c1e      	lsrs	r6, r3, #16
 801f152:	0c0b      	lsrs	r3, r1, #16
 801f154:	fb02 3306 	mla	r3, r2, r6, r3
 801f158:	b289      	uxth	r1, r1
 801f15a:	3001      	adds	r0, #1
 801f15c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f160:	4285      	cmp	r5, r0
 801f162:	f84c 1b04 	str.w	r1, [ip], #4
 801f166:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f16a:	dcec      	bgt.n	801f146 <__multadd+0x12>
 801f16c:	b30e      	cbz	r6, 801f1b2 <__multadd+0x7e>
 801f16e:	68a3      	ldr	r3, [r4, #8]
 801f170:	42ab      	cmp	r3, r5
 801f172:	dc19      	bgt.n	801f1a8 <__multadd+0x74>
 801f174:	6861      	ldr	r1, [r4, #4]
 801f176:	4638      	mov	r0, r7
 801f178:	3101      	adds	r1, #1
 801f17a:	f7ff ff79 	bl	801f070 <_Balloc>
 801f17e:	4680      	mov	r8, r0
 801f180:	b928      	cbnz	r0, 801f18e <__multadd+0x5a>
 801f182:	4602      	mov	r2, r0
 801f184:	4b0c      	ldr	r3, [pc, #48]	@ (801f1b8 <__multadd+0x84>)
 801f186:	480d      	ldr	r0, [pc, #52]	@ (801f1bc <__multadd+0x88>)
 801f188:	21ba      	movs	r1, #186	@ 0xba
 801f18a:	f001 fee9 	bl	8020f60 <__assert_func>
 801f18e:	6922      	ldr	r2, [r4, #16]
 801f190:	3202      	adds	r2, #2
 801f192:	f104 010c 	add.w	r1, r4, #12
 801f196:	0092      	lsls	r2, r2, #2
 801f198:	300c      	adds	r0, #12
 801f19a:	f7ff f806 	bl	801e1aa <memcpy>
 801f19e:	4621      	mov	r1, r4
 801f1a0:	4638      	mov	r0, r7
 801f1a2:	f7ff ffa5 	bl	801f0f0 <_Bfree>
 801f1a6:	4644      	mov	r4, r8
 801f1a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f1ac:	3501      	adds	r5, #1
 801f1ae:	615e      	str	r6, [r3, #20]
 801f1b0:	6125      	str	r5, [r4, #16]
 801f1b2:	4620      	mov	r0, r4
 801f1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1b8:	08022755 	.word	0x08022755
 801f1bc:	08022766 	.word	0x08022766

0801f1c0 <__s2b>:
 801f1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f1c4:	460c      	mov	r4, r1
 801f1c6:	4615      	mov	r5, r2
 801f1c8:	461f      	mov	r7, r3
 801f1ca:	2209      	movs	r2, #9
 801f1cc:	3308      	adds	r3, #8
 801f1ce:	4606      	mov	r6, r0
 801f1d0:	fb93 f3f2 	sdiv	r3, r3, r2
 801f1d4:	2100      	movs	r1, #0
 801f1d6:	2201      	movs	r2, #1
 801f1d8:	429a      	cmp	r2, r3
 801f1da:	db09      	blt.n	801f1f0 <__s2b+0x30>
 801f1dc:	4630      	mov	r0, r6
 801f1de:	f7ff ff47 	bl	801f070 <_Balloc>
 801f1e2:	b940      	cbnz	r0, 801f1f6 <__s2b+0x36>
 801f1e4:	4602      	mov	r2, r0
 801f1e6:	4b19      	ldr	r3, [pc, #100]	@ (801f24c <__s2b+0x8c>)
 801f1e8:	4819      	ldr	r0, [pc, #100]	@ (801f250 <__s2b+0x90>)
 801f1ea:	21d3      	movs	r1, #211	@ 0xd3
 801f1ec:	f001 feb8 	bl	8020f60 <__assert_func>
 801f1f0:	0052      	lsls	r2, r2, #1
 801f1f2:	3101      	adds	r1, #1
 801f1f4:	e7f0      	b.n	801f1d8 <__s2b+0x18>
 801f1f6:	9b08      	ldr	r3, [sp, #32]
 801f1f8:	6143      	str	r3, [r0, #20]
 801f1fa:	2d09      	cmp	r5, #9
 801f1fc:	f04f 0301 	mov.w	r3, #1
 801f200:	6103      	str	r3, [r0, #16]
 801f202:	dd16      	ble.n	801f232 <__s2b+0x72>
 801f204:	f104 0909 	add.w	r9, r4, #9
 801f208:	46c8      	mov	r8, r9
 801f20a:	442c      	add	r4, r5
 801f20c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f210:	4601      	mov	r1, r0
 801f212:	3b30      	subs	r3, #48	@ 0x30
 801f214:	220a      	movs	r2, #10
 801f216:	4630      	mov	r0, r6
 801f218:	f7ff ff8c 	bl	801f134 <__multadd>
 801f21c:	45a0      	cmp	r8, r4
 801f21e:	d1f5      	bne.n	801f20c <__s2b+0x4c>
 801f220:	f1a5 0408 	sub.w	r4, r5, #8
 801f224:	444c      	add	r4, r9
 801f226:	1b2d      	subs	r5, r5, r4
 801f228:	1963      	adds	r3, r4, r5
 801f22a:	42bb      	cmp	r3, r7
 801f22c:	db04      	blt.n	801f238 <__s2b+0x78>
 801f22e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f232:	340a      	adds	r4, #10
 801f234:	2509      	movs	r5, #9
 801f236:	e7f6      	b.n	801f226 <__s2b+0x66>
 801f238:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f23c:	4601      	mov	r1, r0
 801f23e:	3b30      	subs	r3, #48	@ 0x30
 801f240:	220a      	movs	r2, #10
 801f242:	4630      	mov	r0, r6
 801f244:	f7ff ff76 	bl	801f134 <__multadd>
 801f248:	e7ee      	b.n	801f228 <__s2b+0x68>
 801f24a:	bf00      	nop
 801f24c:	08022755 	.word	0x08022755
 801f250:	08022766 	.word	0x08022766

0801f254 <__hi0bits>:
 801f254:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801f258:	4603      	mov	r3, r0
 801f25a:	bf36      	itet	cc
 801f25c:	0403      	lslcc	r3, r0, #16
 801f25e:	2000      	movcs	r0, #0
 801f260:	2010      	movcc	r0, #16
 801f262:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801f266:	bf3c      	itt	cc
 801f268:	021b      	lslcc	r3, r3, #8
 801f26a:	3008      	addcc	r0, #8
 801f26c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f270:	bf3c      	itt	cc
 801f272:	011b      	lslcc	r3, r3, #4
 801f274:	3004      	addcc	r0, #4
 801f276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f27a:	bf3c      	itt	cc
 801f27c:	009b      	lslcc	r3, r3, #2
 801f27e:	3002      	addcc	r0, #2
 801f280:	2b00      	cmp	r3, #0
 801f282:	db05      	blt.n	801f290 <__hi0bits+0x3c>
 801f284:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801f288:	f100 0001 	add.w	r0, r0, #1
 801f28c:	bf08      	it	eq
 801f28e:	2020      	moveq	r0, #32
 801f290:	4770      	bx	lr

0801f292 <__lo0bits>:
 801f292:	6803      	ldr	r3, [r0, #0]
 801f294:	4602      	mov	r2, r0
 801f296:	f013 0007 	ands.w	r0, r3, #7
 801f29a:	d00b      	beq.n	801f2b4 <__lo0bits+0x22>
 801f29c:	07d9      	lsls	r1, r3, #31
 801f29e:	d421      	bmi.n	801f2e4 <__lo0bits+0x52>
 801f2a0:	0798      	lsls	r0, r3, #30
 801f2a2:	bf49      	itett	mi
 801f2a4:	085b      	lsrmi	r3, r3, #1
 801f2a6:	089b      	lsrpl	r3, r3, #2
 801f2a8:	2001      	movmi	r0, #1
 801f2aa:	6013      	strmi	r3, [r2, #0]
 801f2ac:	bf5c      	itt	pl
 801f2ae:	6013      	strpl	r3, [r2, #0]
 801f2b0:	2002      	movpl	r0, #2
 801f2b2:	4770      	bx	lr
 801f2b4:	b299      	uxth	r1, r3
 801f2b6:	b909      	cbnz	r1, 801f2bc <__lo0bits+0x2a>
 801f2b8:	0c1b      	lsrs	r3, r3, #16
 801f2ba:	2010      	movs	r0, #16
 801f2bc:	b2d9      	uxtb	r1, r3
 801f2be:	b909      	cbnz	r1, 801f2c4 <__lo0bits+0x32>
 801f2c0:	3008      	adds	r0, #8
 801f2c2:	0a1b      	lsrs	r3, r3, #8
 801f2c4:	0719      	lsls	r1, r3, #28
 801f2c6:	bf04      	itt	eq
 801f2c8:	091b      	lsreq	r3, r3, #4
 801f2ca:	3004      	addeq	r0, #4
 801f2cc:	0799      	lsls	r1, r3, #30
 801f2ce:	bf04      	itt	eq
 801f2d0:	089b      	lsreq	r3, r3, #2
 801f2d2:	3002      	addeq	r0, #2
 801f2d4:	07d9      	lsls	r1, r3, #31
 801f2d6:	d403      	bmi.n	801f2e0 <__lo0bits+0x4e>
 801f2d8:	085b      	lsrs	r3, r3, #1
 801f2da:	f100 0001 	add.w	r0, r0, #1
 801f2de:	d003      	beq.n	801f2e8 <__lo0bits+0x56>
 801f2e0:	6013      	str	r3, [r2, #0]
 801f2e2:	4770      	bx	lr
 801f2e4:	2000      	movs	r0, #0
 801f2e6:	4770      	bx	lr
 801f2e8:	2020      	movs	r0, #32
 801f2ea:	4770      	bx	lr

0801f2ec <__i2b>:
 801f2ec:	b510      	push	{r4, lr}
 801f2ee:	460c      	mov	r4, r1
 801f2f0:	2101      	movs	r1, #1
 801f2f2:	f7ff febd 	bl	801f070 <_Balloc>
 801f2f6:	4602      	mov	r2, r0
 801f2f8:	b928      	cbnz	r0, 801f306 <__i2b+0x1a>
 801f2fa:	4b05      	ldr	r3, [pc, #20]	@ (801f310 <__i2b+0x24>)
 801f2fc:	4805      	ldr	r0, [pc, #20]	@ (801f314 <__i2b+0x28>)
 801f2fe:	f240 1145 	movw	r1, #325	@ 0x145
 801f302:	f001 fe2d 	bl	8020f60 <__assert_func>
 801f306:	2301      	movs	r3, #1
 801f308:	6144      	str	r4, [r0, #20]
 801f30a:	6103      	str	r3, [r0, #16]
 801f30c:	bd10      	pop	{r4, pc}
 801f30e:	bf00      	nop
 801f310:	08022755 	.word	0x08022755
 801f314:	08022766 	.word	0x08022766

0801f318 <__multiply>:
 801f318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f31c:	4614      	mov	r4, r2
 801f31e:	690a      	ldr	r2, [r1, #16]
 801f320:	6923      	ldr	r3, [r4, #16]
 801f322:	429a      	cmp	r2, r3
 801f324:	bfa8      	it	ge
 801f326:	4623      	movge	r3, r4
 801f328:	460f      	mov	r7, r1
 801f32a:	bfa4      	itt	ge
 801f32c:	460c      	movge	r4, r1
 801f32e:	461f      	movge	r7, r3
 801f330:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801f334:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801f338:	68a3      	ldr	r3, [r4, #8]
 801f33a:	6861      	ldr	r1, [r4, #4]
 801f33c:	eb0a 0609 	add.w	r6, sl, r9
 801f340:	42b3      	cmp	r3, r6
 801f342:	b085      	sub	sp, #20
 801f344:	bfb8      	it	lt
 801f346:	3101      	addlt	r1, #1
 801f348:	f7ff fe92 	bl	801f070 <_Balloc>
 801f34c:	b930      	cbnz	r0, 801f35c <__multiply+0x44>
 801f34e:	4602      	mov	r2, r0
 801f350:	4b44      	ldr	r3, [pc, #272]	@ (801f464 <__multiply+0x14c>)
 801f352:	4845      	ldr	r0, [pc, #276]	@ (801f468 <__multiply+0x150>)
 801f354:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801f358:	f001 fe02 	bl	8020f60 <__assert_func>
 801f35c:	f100 0514 	add.w	r5, r0, #20
 801f360:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f364:	462b      	mov	r3, r5
 801f366:	2200      	movs	r2, #0
 801f368:	4543      	cmp	r3, r8
 801f36a:	d321      	bcc.n	801f3b0 <__multiply+0x98>
 801f36c:	f107 0114 	add.w	r1, r7, #20
 801f370:	f104 0214 	add.w	r2, r4, #20
 801f374:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801f378:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801f37c:	9302      	str	r3, [sp, #8]
 801f37e:	1b13      	subs	r3, r2, r4
 801f380:	3b15      	subs	r3, #21
 801f382:	f023 0303 	bic.w	r3, r3, #3
 801f386:	3304      	adds	r3, #4
 801f388:	f104 0715 	add.w	r7, r4, #21
 801f38c:	42ba      	cmp	r2, r7
 801f38e:	bf38      	it	cc
 801f390:	2304      	movcc	r3, #4
 801f392:	9301      	str	r3, [sp, #4]
 801f394:	9b02      	ldr	r3, [sp, #8]
 801f396:	9103      	str	r1, [sp, #12]
 801f398:	428b      	cmp	r3, r1
 801f39a:	d80c      	bhi.n	801f3b6 <__multiply+0x9e>
 801f39c:	2e00      	cmp	r6, #0
 801f39e:	dd03      	ble.n	801f3a8 <__multiply+0x90>
 801f3a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f3a4:	2b00      	cmp	r3, #0
 801f3a6:	d05b      	beq.n	801f460 <__multiply+0x148>
 801f3a8:	6106      	str	r6, [r0, #16]
 801f3aa:	b005      	add	sp, #20
 801f3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3b0:	f843 2b04 	str.w	r2, [r3], #4
 801f3b4:	e7d8      	b.n	801f368 <__multiply+0x50>
 801f3b6:	f8b1 a000 	ldrh.w	sl, [r1]
 801f3ba:	f1ba 0f00 	cmp.w	sl, #0
 801f3be:	d024      	beq.n	801f40a <__multiply+0xf2>
 801f3c0:	f104 0e14 	add.w	lr, r4, #20
 801f3c4:	46a9      	mov	r9, r5
 801f3c6:	f04f 0c00 	mov.w	ip, #0
 801f3ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f3ce:	f8d9 3000 	ldr.w	r3, [r9]
 801f3d2:	fa1f fb87 	uxth.w	fp, r7
 801f3d6:	b29b      	uxth	r3, r3
 801f3d8:	fb0a 330b 	mla	r3, sl, fp, r3
 801f3dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801f3e0:	f8d9 7000 	ldr.w	r7, [r9]
 801f3e4:	4463      	add	r3, ip
 801f3e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f3ea:	fb0a c70b 	mla	r7, sl, fp, ip
 801f3ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801f3f2:	b29b      	uxth	r3, r3
 801f3f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f3f8:	4572      	cmp	r2, lr
 801f3fa:	f849 3b04 	str.w	r3, [r9], #4
 801f3fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f402:	d8e2      	bhi.n	801f3ca <__multiply+0xb2>
 801f404:	9b01      	ldr	r3, [sp, #4]
 801f406:	f845 c003 	str.w	ip, [r5, r3]
 801f40a:	9b03      	ldr	r3, [sp, #12]
 801f40c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801f410:	3104      	adds	r1, #4
 801f412:	f1b9 0f00 	cmp.w	r9, #0
 801f416:	d021      	beq.n	801f45c <__multiply+0x144>
 801f418:	682b      	ldr	r3, [r5, #0]
 801f41a:	f104 0c14 	add.w	ip, r4, #20
 801f41e:	46ae      	mov	lr, r5
 801f420:	f04f 0a00 	mov.w	sl, #0
 801f424:	f8bc b000 	ldrh.w	fp, [ip]
 801f428:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801f42c:	fb09 770b 	mla	r7, r9, fp, r7
 801f430:	4457      	add	r7, sl
 801f432:	b29b      	uxth	r3, r3
 801f434:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f438:	f84e 3b04 	str.w	r3, [lr], #4
 801f43c:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f440:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f444:	f8be 3000 	ldrh.w	r3, [lr]
 801f448:	fb09 330a 	mla	r3, r9, sl, r3
 801f44c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801f450:	4562      	cmp	r2, ip
 801f452:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f456:	d8e5      	bhi.n	801f424 <__multiply+0x10c>
 801f458:	9f01      	ldr	r7, [sp, #4]
 801f45a:	51eb      	str	r3, [r5, r7]
 801f45c:	3504      	adds	r5, #4
 801f45e:	e799      	b.n	801f394 <__multiply+0x7c>
 801f460:	3e01      	subs	r6, #1
 801f462:	e79b      	b.n	801f39c <__multiply+0x84>
 801f464:	08022755 	.word	0x08022755
 801f468:	08022766 	.word	0x08022766

0801f46c <__pow5mult>:
 801f46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f470:	4615      	mov	r5, r2
 801f472:	f012 0203 	ands.w	r2, r2, #3
 801f476:	4607      	mov	r7, r0
 801f478:	460e      	mov	r6, r1
 801f47a:	d007      	beq.n	801f48c <__pow5mult+0x20>
 801f47c:	4c25      	ldr	r4, [pc, #148]	@ (801f514 <__pow5mult+0xa8>)
 801f47e:	3a01      	subs	r2, #1
 801f480:	2300      	movs	r3, #0
 801f482:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f486:	f7ff fe55 	bl	801f134 <__multadd>
 801f48a:	4606      	mov	r6, r0
 801f48c:	10ad      	asrs	r5, r5, #2
 801f48e:	d03d      	beq.n	801f50c <__pow5mult+0xa0>
 801f490:	69fc      	ldr	r4, [r7, #28]
 801f492:	b97c      	cbnz	r4, 801f4b4 <__pow5mult+0x48>
 801f494:	2010      	movs	r0, #16
 801f496:	f7ff fd35 	bl	801ef04 <malloc>
 801f49a:	4602      	mov	r2, r0
 801f49c:	61f8      	str	r0, [r7, #28]
 801f49e:	b928      	cbnz	r0, 801f4ac <__pow5mult+0x40>
 801f4a0:	4b1d      	ldr	r3, [pc, #116]	@ (801f518 <__pow5mult+0xac>)
 801f4a2:	481e      	ldr	r0, [pc, #120]	@ (801f51c <__pow5mult+0xb0>)
 801f4a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801f4a8:	f001 fd5a 	bl	8020f60 <__assert_func>
 801f4ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f4b0:	6004      	str	r4, [r0, #0]
 801f4b2:	60c4      	str	r4, [r0, #12]
 801f4b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801f4b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f4bc:	b94c      	cbnz	r4, 801f4d2 <__pow5mult+0x66>
 801f4be:	f240 2171 	movw	r1, #625	@ 0x271
 801f4c2:	4638      	mov	r0, r7
 801f4c4:	f7ff ff12 	bl	801f2ec <__i2b>
 801f4c8:	2300      	movs	r3, #0
 801f4ca:	f8c8 0008 	str.w	r0, [r8, #8]
 801f4ce:	4604      	mov	r4, r0
 801f4d0:	6003      	str	r3, [r0, #0]
 801f4d2:	f04f 0900 	mov.w	r9, #0
 801f4d6:	07eb      	lsls	r3, r5, #31
 801f4d8:	d50a      	bpl.n	801f4f0 <__pow5mult+0x84>
 801f4da:	4631      	mov	r1, r6
 801f4dc:	4622      	mov	r2, r4
 801f4de:	4638      	mov	r0, r7
 801f4e0:	f7ff ff1a 	bl	801f318 <__multiply>
 801f4e4:	4631      	mov	r1, r6
 801f4e6:	4680      	mov	r8, r0
 801f4e8:	4638      	mov	r0, r7
 801f4ea:	f7ff fe01 	bl	801f0f0 <_Bfree>
 801f4ee:	4646      	mov	r6, r8
 801f4f0:	106d      	asrs	r5, r5, #1
 801f4f2:	d00b      	beq.n	801f50c <__pow5mult+0xa0>
 801f4f4:	6820      	ldr	r0, [r4, #0]
 801f4f6:	b938      	cbnz	r0, 801f508 <__pow5mult+0x9c>
 801f4f8:	4622      	mov	r2, r4
 801f4fa:	4621      	mov	r1, r4
 801f4fc:	4638      	mov	r0, r7
 801f4fe:	f7ff ff0b 	bl	801f318 <__multiply>
 801f502:	6020      	str	r0, [r4, #0]
 801f504:	f8c0 9000 	str.w	r9, [r0]
 801f508:	4604      	mov	r4, r0
 801f50a:	e7e4      	b.n	801f4d6 <__pow5mult+0x6a>
 801f50c:	4630      	mov	r0, r6
 801f50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f512:	bf00      	nop
 801f514:	080227c0 	.word	0x080227c0
 801f518:	080226e6 	.word	0x080226e6
 801f51c:	08022766 	.word	0x08022766

0801f520 <__lshift>:
 801f520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f524:	460c      	mov	r4, r1
 801f526:	6849      	ldr	r1, [r1, #4]
 801f528:	6923      	ldr	r3, [r4, #16]
 801f52a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f52e:	68a3      	ldr	r3, [r4, #8]
 801f530:	4607      	mov	r7, r0
 801f532:	4691      	mov	r9, r2
 801f534:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f538:	f108 0601 	add.w	r6, r8, #1
 801f53c:	42b3      	cmp	r3, r6
 801f53e:	db0b      	blt.n	801f558 <__lshift+0x38>
 801f540:	4638      	mov	r0, r7
 801f542:	f7ff fd95 	bl	801f070 <_Balloc>
 801f546:	4605      	mov	r5, r0
 801f548:	b948      	cbnz	r0, 801f55e <__lshift+0x3e>
 801f54a:	4602      	mov	r2, r0
 801f54c:	4b28      	ldr	r3, [pc, #160]	@ (801f5f0 <__lshift+0xd0>)
 801f54e:	4829      	ldr	r0, [pc, #164]	@ (801f5f4 <__lshift+0xd4>)
 801f550:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801f554:	f001 fd04 	bl	8020f60 <__assert_func>
 801f558:	3101      	adds	r1, #1
 801f55a:	005b      	lsls	r3, r3, #1
 801f55c:	e7ee      	b.n	801f53c <__lshift+0x1c>
 801f55e:	2300      	movs	r3, #0
 801f560:	f100 0114 	add.w	r1, r0, #20
 801f564:	f100 0210 	add.w	r2, r0, #16
 801f568:	4618      	mov	r0, r3
 801f56a:	4553      	cmp	r3, sl
 801f56c:	db33      	blt.n	801f5d6 <__lshift+0xb6>
 801f56e:	6920      	ldr	r0, [r4, #16]
 801f570:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f574:	f104 0314 	add.w	r3, r4, #20
 801f578:	f019 091f 	ands.w	r9, r9, #31
 801f57c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f580:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f584:	d02b      	beq.n	801f5de <__lshift+0xbe>
 801f586:	f1c9 0e20 	rsb	lr, r9, #32
 801f58a:	468a      	mov	sl, r1
 801f58c:	2200      	movs	r2, #0
 801f58e:	6818      	ldr	r0, [r3, #0]
 801f590:	fa00 f009 	lsl.w	r0, r0, r9
 801f594:	4310      	orrs	r0, r2
 801f596:	f84a 0b04 	str.w	r0, [sl], #4
 801f59a:	f853 2b04 	ldr.w	r2, [r3], #4
 801f59e:	459c      	cmp	ip, r3
 801f5a0:	fa22 f20e 	lsr.w	r2, r2, lr
 801f5a4:	d8f3      	bhi.n	801f58e <__lshift+0x6e>
 801f5a6:	ebac 0304 	sub.w	r3, ip, r4
 801f5aa:	3b15      	subs	r3, #21
 801f5ac:	f023 0303 	bic.w	r3, r3, #3
 801f5b0:	3304      	adds	r3, #4
 801f5b2:	f104 0015 	add.w	r0, r4, #21
 801f5b6:	4584      	cmp	ip, r0
 801f5b8:	bf38      	it	cc
 801f5ba:	2304      	movcc	r3, #4
 801f5bc:	50ca      	str	r2, [r1, r3]
 801f5be:	b10a      	cbz	r2, 801f5c4 <__lshift+0xa4>
 801f5c0:	f108 0602 	add.w	r6, r8, #2
 801f5c4:	3e01      	subs	r6, #1
 801f5c6:	4638      	mov	r0, r7
 801f5c8:	612e      	str	r6, [r5, #16]
 801f5ca:	4621      	mov	r1, r4
 801f5cc:	f7ff fd90 	bl	801f0f0 <_Bfree>
 801f5d0:	4628      	mov	r0, r5
 801f5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f5d6:	f842 0f04 	str.w	r0, [r2, #4]!
 801f5da:	3301      	adds	r3, #1
 801f5dc:	e7c5      	b.n	801f56a <__lshift+0x4a>
 801f5de:	3904      	subs	r1, #4
 801f5e0:	f853 2b04 	ldr.w	r2, [r3], #4
 801f5e4:	f841 2f04 	str.w	r2, [r1, #4]!
 801f5e8:	459c      	cmp	ip, r3
 801f5ea:	d8f9      	bhi.n	801f5e0 <__lshift+0xc0>
 801f5ec:	e7ea      	b.n	801f5c4 <__lshift+0xa4>
 801f5ee:	bf00      	nop
 801f5f0:	08022755 	.word	0x08022755
 801f5f4:	08022766 	.word	0x08022766

0801f5f8 <__mcmp>:
 801f5f8:	690a      	ldr	r2, [r1, #16]
 801f5fa:	4603      	mov	r3, r0
 801f5fc:	6900      	ldr	r0, [r0, #16]
 801f5fe:	1a80      	subs	r0, r0, r2
 801f600:	b530      	push	{r4, r5, lr}
 801f602:	d10e      	bne.n	801f622 <__mcmp+0x2a>
 801f604:	3314      	adds	r3, #20
 801f606:	3114      	adds	r1, #20
 801f608:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801f60c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801f610:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801f614:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801f618:	4295      	cmp	r5, r2
 801f61a:	d003      	beq.n	801f624 <__mcmp+0x2c>
 801f61c:	d205      	bcs.n	801f62a <__mcmp+0x32>
 801f61e:	f04f 30ff 	mov.w	r0, #4294967295
 801f622:	bd30      	pop	{r4, r5, pc}
 801f624:	42a3      	cmp	r3, r4
 801f626:	d3f3      	bcc.n	801f610 <__mcmp+0x18>
 801f628:	e7fb      	b.n	801f622 <__mcmp+0x2a>
 801f62a:	2001      	movs	r0, #1
 801f62c:	e7f9      	b.n	801f622 <__mcmp+0x2a>
	...

0801f630 <__mdiff>:
 801f630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f634:	4689      	mov	r9, r1
 801f636:	4606      	mov	r6, r0
 801f638:	4611      	mov	r1, r2
 801f63a:	4648      	mov	r0, r9
 801f63c:	4614      	mov	r4, r2
 801f63e:	f7ff ffdb 	bl	801f5f8 <__mcmp>
 801f642:	1e05      	subs	r5, r0, #0
 801f644:	d112      	bne.n	801f66c <__mdiff+0x3c>
 801f646:	4629      	mov	r1, r5
 801f648:	4630      	mov	r0, r6
 801f64a:	f7ff fd11 	bl	801f070 <_Balloc>
 801f64e:	4602      	mov	r2, r0
 801f650:	b928      	cbnz	r0, 801f65e <__mdiff+0x2e>
 801f652:	4b3f      	ldr	r3, [pc, #252]	@ (801f750 <__mdiff+0x120>)
 801f654:	f240 2137 	movw	r1, #567	@ 0x237
 801f658:	483e      	ldr	r0, [pc, #248]	@ (801f754 <__mdiff+0x124>)
 801f65a:	f001 fc81 	bl	8020f60 <__assert_func>
 801f65e:	2301      	movs	r3, #1
 801f660:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f664:	4610      	mov	r0, r2
 801f666:	b003      	add	sp, #12
 801f668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f66c:	bfbc      	itt	lt
 801f66e:	464b      	movlt	r3, r9
 801f670:	46a1      	movlt	r9, r4
 801f672:	4630      	mov	r0, r6
 801f674:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f678:	bfba      	itte	lt
 801f67a:	461c      	movlt	r4, r3
 801f67c:	2501      	movlt	r5, #1
 801f67e:	2500      	movge	r5, #0
 801f680:	f7ff fcf6 	bl	801f070 <_Balloc>
 801f684:	4602      	mov	r2, r0
 801f686:	b918      	cbnz	r0, 801f690 <__mdiff+0x60>
 801f688:	4b31      	ldr	r3, [pc, #196]	@ (801f750 <__mdiff+0x120>)
 801f68a:	f240 2145 	movw	r1, #581	@ 0x245
 801f68e:	e7e3      	b.n	801f658 <__mdiff+0x28>
 801f690:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801f694:	6926      	ldr	r6, [r4, #16]
 801f696:	60c5      	str	r5, [r0, #12]
 801f698:	f109 0310 	add.w	r3, r9, #16
 801f69c:	f109 0514 	add.w	r5, r9, #20
 801f6a0:	f104 0e14 	add.w	lr, r4, #20
 801f6a4:	f100 0b14 	add.w	fp, r0, #20
 801f6a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801f6ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801f6b0:	9301      	str	r3, [sp, #4]
 801f6b2:	46d9      	mov	r9, fp
 801f6b4:	f04f 0c00 	mov.w	ip, #0
 801f6b8:	9b01      	ldr	r3, [sp, #4]
 801f6ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 801f6be:	f853 af04 	ldr.w	sl, [r3, #4]!
 801f6c2:	9301      	str	r3, [sp, #4]
 801f6c4:	fa1f f38a 	uxth.w	r3, sl
 801f6c8:	4619      	mov	r1, r3
 801f6ca:	b283      	uxth	r3, r0
 801f6cc:	1acb      	subs	r3, r1, r3
 801f6ce:	0c00      	lsrs	r0, r0, #16
 801f6d0:	4463      	add	r3, ip
 801f6d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801f6d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801f6da:	b29b      	uxth	r3, r3
 801f6dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801f6e0:	4576      	cmp	r6, lr
 801f6e2:	f849 3b04 	str.w	r3, [r9], #4
 801f6e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f6ea:	d8e5      	bhi.n	801f6b8 <__mdiff+0x88>
 801f6ec:	1b33      	subs	r3, r6, r4
 801f6ee:	3b15      	subs	r3, #21
 801f6f0:	f023 0303 	bic.w	r3, r3, #3
 801f6f4:	3415      	adds	r4, #21
 801f6f6:	3304      	adds	r3, #4
 801f6f8:	42a6      	cmp	r6, r4
 801f6fa:	bf38      	it	cc
 801f6fc:	2304      	movcc	r3, #4
 801f6fe:	441d      	add	r5, r3
 801f700:	445b      	add	r3, fp
 801f702:	461e      	mov	r6, r3
 801f704:	462c      	mov	r4, r5
 801f706:	4544      	cmp	r4, r8
 801f708:	d30e      	bcc.n	801f728 <__mdiff+0xf8>
 801f70a:	f108 0103 	add.w	r1, r8, #3
 801f70e:	1b49      	subs	r1, r1, r5
 801f710:	f021 0103 	bic.w	r1, r1, #3
 801f714:	3d03      	subs	r5, #3
 801f716:	45a8      	cmp	r8, r5
 801f718:	bf38      	it	cc
 801f71a:	2100      	movcc	r1, #0
 801f71c:	440b      	add	r3, r1
 801f71e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f722:	b191      	cbz	r1, 801f74a <__mdiff+0x11a>
 801f724:	6117      	str	r7, [r2, #16]
 801f726:	e79d      	b.n	801f664 <__mdiff+0x34>
 801f728:	f854 1b04 	ldr.w	r1, [r4], #4
 801f72c:	46e6      	mov	lr, ip
 801f72e:	0c08      	lsrs	r0, r1, #16
 801f730:	fa1c fc81 	uxtah	ip, ip, r1
 801f734:	4471      	add	r1, lr
 801f736:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801f73a:	b289      	uxth	r1, r1
 801f73c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801f740:	f846 1b04 	str.w	r1, [r6], #4
 801f744:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f748:	e7dd      	b.n	801f706 <__mdiff+0xd6>
 801f74a:	3f01      	subs	r7, #1
 801f74c:	e7e7      	b.n	801f71e <__mdiff+0xee>
 801f74e:	bf00      	nop
 801f750:	08022755 	.word	0x08022755
 801f754:	08022766 	.word	0x08022766

0801f758 <__ulp>:
 801f758:	b082      	sub	sp, #8
 801f75a:	ed8d 0b00 	vstr	d0, [sp]
 801f75e:	9a01      	ldr	r2, [sp, #4]
 801f760:	4b0f      	ldr	r3, [pc, #60]	@ (801f7a0 <__ulp+0x48>)
 801f762:	4013      	ands	r3, r2
 801f764:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801f768:	2b00      	cmp	r3, #0
 801f76a:	dc08      	bgt.n	801f77e <__ulp+0x26>
 801f76c:	425b      	negs	r3, r3
 801f76e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801f772:	ea4f 5223 	mov.w	r2, r3, asr #20
 801f776:	da04      	bge.n	801f782 <__ulp+0x2a>
 801f778:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801f77c:	4113      	asrs	r3, r2
 801f77e:	2200      	movs	r2, #0
 801f780:	e008      	b.n	801f794 <__ulp+0x3c>
 801f782:	f1a2 0314 	sub.w	r3, r2, #20
 801f786:	2b1e      	cmp	r3, #30
 801f788:	bfda      	itte	le
 801f78a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801f78e:	40da      	lsrle	r2, r3
 801f790:	2201      	movgt	r2, #1
 801f792:	2300      	movs	r3, #0
 801f794:	4619      	mov	r1, r3
 801f796:	4610      	mov	r0, r2
 801f798:	ec41 0b10 	vmov	d0, r0, r1
 801f79c:	b002      	add	sp, #8
 801f79e:	4770      	bx	lr
 801f7a0:	7ff00000 	.word	0x7ff00000

0801f7a4 <__b2d>:
 801f7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7a8:	6906      	ldr	r6, [r0, #16]
 801f7aa:	f100 0814 	add.w	r8, r0, #20
 801f7ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801f7b2:	1f37      	subs	r7, r6, #4
 801f7b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801f7b8:	4610      	mov	r0, r2
 801f7ba:	f7ff fd4b 	bl	801f254 <__hi0bits>
 801f7be:	f1c0 0320 	rsb	r3, r0, #32
 801f7c2:	280a      	cmp	r0, #10
 801f7c4:	600b      	str	r3, [r1, #0]
 801f7c6:	491b      	ldr	r1, [pc, #108]	@ (801f834 <__b2d+0x90>)
 801f7c8:	dc15      	bgt.n	801f7f6 <__b2d+0x52>
 801f7ca:	f1c0 0c0b 	rsb	ip, r0, #11
 801f7ce:	fa22 f30c 	lsr.w	r3, r2, ip
 801f7d2:	45b8      	cmp	r8, r7
 801f7d4:	ea43 0501 	orr.w	r5, r3, r1
 801f7d8:	bf34      	ite	cc
 801f7da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801f7de:	2300      	movcs	r3, #0
 801f7e0:	3015      	adds	r0, #21
 801f7e2:	fa02 f000 	lsl.w	r0, r2, r0
 801f7e6:	fa23 f30c 	lsr.w	r3, r3, ip
 801f7ea:	4303      	orrs	r3, r0
 801f7ec:	461c      	mov	r4, r3
 801f7ee:	ec45 4b10 	vmov	d0, r4, r5
 801f7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f7f6:	45b8      	cmp	r8, r7
 801f7f8:	bf3a      	itte	cc
 801f7fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801f7fe:	f1a6 0708 	subcc.w	r7, r6, #8
 801f802:	2300      	movcs	r3, #0
 801f804:	380b      	subs	r0, #11
 801f806:	d012      	beq.n	801f82e <__b2d+0x8a>
 801f808:	f1c0 0120 	rsb	r1, r0, #32
 801f80c:	fa23 f401 	lsr.w	r4, r3, r1
 801f810:	4082      	lsls	r2, r0
 801f812:	4322      	orrs	r2, r4
 801f814:	4547      	cmp	r7, r8
 801f816:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801f81a:	bf8c      	ite	hi
 801f81c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801f820:	2200      	movls	r2, #0
 801f822:	4083      	lsls	r3, r0
 801f824:	40ca      	lsrs	r2, r1
 801f826:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801f82a:	4313      	orrs	r3, r2
 801f82c:	e7de      	b.n	801f7ec <__b2d+0x48>
 801f82e:	ea42 0501 	orr.w	r5, r2, r1
 801f832:	e7db      	b.n	801f7ec <__b2d+0x48>
 801f834:	3ff00000 	.word	0x3ff00000

0801f838 <__d2b>:
 801f838:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f83c:	460f      	mov	r7, r1
 801f83e:	2101      	movs	r1, #1
 801f840:	ec59 8b10 	vmov	r8, r9, d0
 801f844:	4616      	mov	r6, r2
 801f846:	f7ff fc13 	bl	801f070 <_Balloc>
 801f84a:	4604      	mov	r4, r0
 801f84c:	b930      	cbnz	r0, 801f85c <__d2b+0x24>
 801f84e:	4602      	mov	r2, r0
 801f850:	4b23      	ldr	r3, [pc, #140]	@ (801f8e0 <__d2b+0xa8>)
 801f852:	4824      	ldr	r0, [pc, #144]	@ (801f8e4 <__d2b+0xac>)
 801f854:	f240 310f 	movw	r1, #783	@ 0x30f
 801f858:	f001 fb82 	bl	8020f60 <__assert_func>
 801f85c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f860:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f864:	b10d      	cbz	r5, 801f86a <__d2b+0x32>
 801f866:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f86a:	9301      	str	r3, [sp, #4]
 801f86c:	f1b8 0300 	subs.w	r3, r8, #0
 801f870:	d023      	beq.n	801f8ba <__d2b+0x82>
 801f872:	4668      	mov	r0, sp
 801f874:	9300      	str	r3, [sp, #0]
 801f876:	f7ff fd0c 	bl	801f292 <__lo0bits>
 801f87a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f87e:	b1d0      	cbz	r0, 801f8b6 <__d2b+0x7e>
 801f880:	f1c0 0320 	rsb	r3, r0, #32
 801f884:	fa02 f303 	lsl.w	r3, r2, r3
 801f888:	430b      	orrs	r3, r1
 801f88a:	40c2      	lsrs	r2, r0
 801f88c:	6163      	str	r3, [r4, #20]
 801f88e:	9201      	str	r2, [sp, #4]
 801f890:	9b01      	ldr	r3, [sp, #4]
 801f892:	61a3      	str	r3, [r4, #24]
 801f894:	2b00      	cmp	r3, #0
 801f896:	bf0c      	ite	eq
 801f898:	2201      	moveq	r2, #1
 801f89a:	2202      	movne	r2, #2
 801f89c:	6122      	str	r2, [r4, #16]
 801f89e:	b1a5      	cbz	r5, 801f8ca <__d2b+0x92>
 801f8a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801f8a4:	4405      	add	r5, r0
 801f8a6:	603d      	str	r5, [r7, #0]
 801f8a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801f8ac:	6030      	str	r0, [r6, #0]
 801f8ae:	4620      	mov	r0, r4
 801f8b0:	b003      	add	sp, #12
 801f8b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f8b6:	6161      	str	r1, [r4, #20]
 801f8b8:	e7ea      	b.n	801f890 <__d2b+0x58>
 801f8ba:	a801      	add	r0, sp, #4
 801f8bc:	f7ff fce9 	bl	801f292 <__lo0bits>
 801f8c0:	9b01      	ldr	r3, [sp, #4]
 801f8c2:	6163      	str	r3, [r4, #20]
 801f8c4:	3020      	adds	r0, #32
 801f8c6:	2201      	movs	r2, #1
 801f8c8:	e7e8      	b.n	801f89c <__d2b+0x64>
 801f8ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f8ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801f8d2:	6038      	str	r0, [r7, #0]
 801f8d4:	6918      	ldr	r0, [r3, #16]
 801f8d6:	f7ff fcbd 	bl	801f254 <__hi0bits>
 801f8da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f8de:	e7e5      	b.n	801f8ac <__d2b+0x74>
 801f8e0:	08022755 	.word	0x08022755
 801f8e4:	08022766 	.word	0x08022766

0801f8e8 <__ratio>:
 801f8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8ec:	b085      	sub	sp, #20
 801f8ee:	e9cd 1000 	strd	r1, r0, [sp]
 801f8f2:	a902      	add	r1, sp, #8
 801f8f4:	f7ff ff56 	bl	801f7a4 <__b2d>
 801f8f8:	9800      	ldr	r0, [sp, #0]
 801f8fa:	a903      	add	r1, sp, #12
 801f8fc:	ec55 4b10 	vmov	r4, r5, d0
 801f900:	f7ff ff50 	bl	801f7a4 <__b2d>
 801f904:	9b01      	ldr	r3, [sp, #4]
 801f906:	6919      	ldr	r1, [r3, #16]
 801f908:	9b00      	ldr	r3, [sp, #0]
 801f90a:	691b      	ldr	r3, [r3, #16]
 801f90c:	1ac9      	subs	r1, r1, r3
 801f90e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801f912:	1a9b      	subs	r3, r3, r2
 801f914:	ec5b ab10 	vmov	sl, fp, d0
 801f918:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801f91c:	2b00      	cmp	r3, #0
 801f91e:	bfce      	itee	gt
 801f920:	462a      	movgt	r2, r5
 801f922:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f926:	465a      	movle	r2, fp
 801f928:	462f      	mov	r7, r5
 801f92a:	46d9      	mov	r9, fp
 801f92c:	bfcc      	ite	gt
 801f92e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f932:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801f936:	464b      	mov	r3, r9
 801f938:	4652      	mov	r2, sl
 801f93a:	4620      	mov	r0, r4
 801f93c:	4639      	mov	r1, r7
 801f93e:	f7e0 ffad 	bl	800089c <__aeabi_ddiv>
 801f942:	ec41 0b10 	vmov	d0, r0, r1
 801f946:	b005      	add	sp, #20
 801f948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f94c <__copybits>:
 801f94c:	3901      	subs	r1, #1
 801f94e:	b570      	push	{r4, r5, r6, lr}
 801f950:	1149      	asrs	r1, r1, #5
 801f952:	6914      	ldr	r4, [r2, #16]
 801f954:	3101      	adds	r1, #1
 801f956:	f102 0314 	add.w	r3, r2, #20
 801f95a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f95e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f962:	1f05      	subs	r5, r0, #4
 801f964:	42a3      	cmp	r3, r4
 801f966:	d30c      	bcc.n	801f982 <__copybits+0x36>
 801f968:	1aa3      	subs	r3, r4, r2
 801f96a:	3b11      	subs	r3, #17
 801f96c:	f023 0303 	bic.w	r3, r3, #3
 801f970:	3211      	adds	r2, #17
 801f972:	42a2      	cmp	r2, r4
 801f974:	bf88      	it	hi
 801f976:	2300      	movhi	r3, #0
 801f978:	4418      	add	r0, r3
 801f97a:	2300      	movs	r3, #0
 801f97c:	4288      	cmp	r0, r1
 801f97e:	d305      	bcc.n	801f98c <__copybits+0x40>
 801f980:	bd70      	pop	{r4, r5, r6, pc}
 801f982:	f853 6b04 	ldr.w	r6, [r3], #4
 801f986:	f845 6f04 	str.w	r6, [r5, #4]!
 801f98a:	e7eb      	b.n	801f964 <__copybits+0x18>
 801f98c:	f840 3b04 	str.w	r3, [r0], #4
 801f990:	e7f4      	b.n	801f97c <__copybits+0x30>

0801f992 <__any_on>:
 801f992:	f100 0214 	add.w	r2, r0, #20
 801f996:	6900      	ldr	r0, [r0, #16]
 801f998:	114b      	asrs	r3, r1, #5
 801f99a:	4298      	cmp	r0, r3
 801f99c:	b510      	push	{r4, lr}
 801f99e:	db11      	blt.n	801f9c4 <__any_on+0x32>
 801f9a0:	dd0a      	ble.n	801f9b8 <__any_on+0x26>
 801f9a2:	f011 011f 	ands.w	r1, r1, #31
 801f9a6:	d007      	beq.n	801f9b8 <__any_on+0x26>
 801f9a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801f9ac:	fa24 f001 	lsr.w	r0, r4, r1
 801f9b0:	fa00 f101 	lsl.w	r1, r0, r1
 801f9b4:	428c      	cmp	r4, r1
 801f9b6:	d10b      	bne.n	801f9d0 <__any_on+0x3e>
 801f9b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f9bc:	4293      	cmp	r3, r2
 801f9be:	d803      	bhi.n	801f9c8 <__any_on+0x36>
 801f9c0:	2000      	movs	r0, #0
 801f9c2:	bd10      	pop	{r4, pc}
 801f9c4:	4603      	mov	r3, r0
 801f9c6:	e7f7      	b.n	801f9b8 <__any_on+0x26>
 801f9c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f9cc:	2900      	cmp	r1, #0
 801f9ce:	d0f5      	beq.n	801f9bc <__any_on+0x2a>
 801f9d0:	2001      	movs	r0, #1
 801f9d2:	e7f6      	b.n	801f9c2 <__any_on+0x30>

0801f9d4 <sulp>:
 801f9d4:	b570      	push	{r4, r5, r6, lr}
 801f9d6:	4604      	mov	r4, r0
 801f9d8:	460d      	mov	r5, r1
 801f9da:	ec45 4b10 	vmov	d0, r4, r5
 801f9de:	4616      	mov	r6, r2
 801f9e0:	f7ff feba 	bl	801f758 <__ulp>
 801f9e4:	ec51 0b10 	vmov	r0, r1, d0
 801f9e8:	b17e      	cbz	r6, 801fa0a <sulp+0x36>
 801f9ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801f9ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801f9f2:	2b00      	cmp	r3, #0
 801f9f4:	dd09      	ble.n	801fa0a <sulp+0x36>
 801f9f6:	051b      	lsls	r3, r3, #20
 801f9f8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801f9fc:	2400      	movs	r4, #0
 801f9fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801fa02:	4622      	mov	r2, r4
 801fa04:	462b      	mov	r3, r5
 801fa06:	f7e0 fe1f 	bl	8000648 <__aeabi_dmul>
 801fa0a:	ec41 0b10 	vmov	d0, r0, r1
 801fa0e:	bd70      	pop	{r4, r5, r6, pc}

0801fa10 <_strtod_l>:
 801fa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa14:	b09f      	sub	sp, #124	@ 0x7c
 801fa16:	460c      	mov	r4, r1
 801fa18:	9217      	str	r2, [sp, #92]	@ 0x5c
 801fa1a:	2200      	movs	r2, #0
 801fa1c:	921a      	str	r2, [sp, #104]	@ 0x68
 801fa1e:	9005      	str	r0, [sp, #20]
 801fa20:	f04f 0a00 	mov.w	sl, #0
 801fa24:	f04f 0b00 	mov.w	fp, #0
 801fa28:	460a      	mov	r2, r1
 801fa2a:	9219      	str	r2, [sp, #100]	@ 0x64
 801fa2c:	7811      	ldrb	r1, [r2, #0]
 801fa2e:	292b      	cmp	r1, #43	@ 0x2b
 801fa30:	d04a      	beq.n	801fac8 <_strtod_l+0xb8>
 801fa32:	d838      	bhi.n	801faa6 <_strtod_l+0x96>
 801fa34:	290d      	cmp	r1, #13
 801fa36:	d832      	bhi.n	801fa9e <_strtod_l+0x8e>
 801fa38:	2908      	cmp	r1, #8
 801fa3a:	d832      	bhi.n	801faa2 <_strtod_l+0x92>
 801fa3c:	2900      	cmp	r1, #0
 801fa3e:	d03b      	beq.n	801fab8 <_strtod_l+0xa8>
 801fa40:	2200      	movs	r2, #0
 801fa42:	920b      	str	r2, [sp, #44]	@ 0x2c
 801fa44:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801fa46:	782a      	ldrb	r2, [r5, #0]
 801fa48:	2a30      	cmp	r2, #48	@ 0x30
 801fa4a:	f040 80b3 	bne.w	801fbb4 <_strtod_l+0x1a4>
 801fa4e:	786a      	ldrb	r2, [r5, #1]
 801fa50:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801fa54:	2a58      	cmp	r2, #88	@ 0x58
 801fa56:	d16e      	bne.n	801fb36 <_strtod_l+0x126>
 801fa58:	9302      	str	r3, [sp, #8]
 801fa5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fa5c:	9301      	str	r3, [sp, #4]
 801fa5e:	ab1a      	add	r3, sp, #104	@ 0x68
 801fa60:	9300      	str	r3, [sp, #0]
 801fa62:	4a8e      	ldr	r2, [pc, #568]	@ (801fc9c <_strtod_l+0x28c>)
 801fa64:	9805      	ldr	r0, [sp, #20]
 801fa66:	ab1b      	add	r3, sp, #108	@ 0x6c
 801fa68:	a919      	add	r1, sp, #100	@ 0x64
 801fa6a:	f001 fb13 	bl	8021094 <__gethex>
 801fa6e:	f010 060f 	ands.w	r6, r0, #15
 801fa72:	4604      	mov	r4, r0
 801fa74:	d005      	beq.n	801fa82 <_strtod_l+0x72>
 801fa76:	2e06      	cmp	r6, #6
 801fa78:	d128      	bne.n	801facc <_strtod_l+0xbc>
 801fa7a:	3501      	adds	r5, #1
 801fa7c:	2300      	movs	r3, #0
 801fa7e:	9519      	str	r5, [sp, #100]	@ 0x64
 801fa80:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fa82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	f040 858e 	bne.w	80205a6 <_strtod_l+0xb96>
 801fa8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fa8c:	b1cb      	cbz	r3, 801fac2 <_strtod_l+0xb2>
 801fa8e:	4652      	mov	r2, sl
 801fa90:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801fa94:	ec43 2b10 	vmov	d0, r2, r3
 801fa98:	b01f      	add	sp, #124	@ 0x7c
 801fa9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa9e:	2920      	cmp	r1, #32
 801faa0:	d1ce      	bne.n	801fa40 <_strtod_l+0x30>
 801faa2:	3201      	adds	r2, #1
 801faa4:	e7c1      	b.n	801fa2a <_strtod_l+0x1a>
 801faa6:	292d      	cmp	r1, #45	@ 0x2d
 801faa8:	d1ca      	bne.n	801fa40 <_strtod_l+0x30>
 801faaa:	2101      	movs	r1, #1
 801faac:	910b      	str	r1, [sp, #44]	@ 0x2c
 801faae:	1c51      	adds	r1, r2, #1
 801fab0:	9119      	str	r1, [sp, #100]	@ 0x64
 801fab2:	7852      	ldrb	r2, [r2, #1]
 801fab4:	2a00      	cmp	r2, #0
 801fab6:	d1c5      	bne.n	801fa44 <_strtod_l+0x34>
 801fab8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801faba:	9419      	str	r4, [sp, #100]	@ 0x64
 801fabc:	2b00      	cmp	r3, #0
 801fabe:	f040 8570 	bne.w	80205a2 <_strtod_l+0xb92>
 801fac2:	4652      	mov	r2, sl
 801fac4:	465b      	mov	r3, fp
 801fac6:	e7e5      	b.n	801fa94 <_strtod_l+0x84>
 801fac8:	2100      	movs	r1, #0
 801faca:	e7ef      	b.n	801faac <_strtod_l+0x9c>
 801facc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801face:	b13a      	cbz	r2, 801fae0 <_strtod_l+0xd0>
 801fad0:	2135      	movs	r1, #53	@ 0x35
 801fad2:	a81c      	add	r0, sp, #112	@ 0x70
 801fad4:	f7ff ff3a 	bl	801f94c <__copybits>
 801fad8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801fada:	9805      	ldr	r0, [sp, #20]
 801fadc:	f7ff fb08 	bl	801f0f0 <_Bfree>
 801fae0:	3e01      	subs	r6, #1
 801fae2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801fae4:	2e04      	cmp	r6, #4
 801fae6:	d806      	bhi.n	801faf6 <_strtod_l+0xe6>
 801fae8:	e8df f006 	tbb	[pc, r6]
 801faec:	201d0314 	.word	0x201d0314
 801faf0:	14          	.byte	0x14
 801faf1:	00          	.byte	0x00
 801faf2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801faf6:	05e1      	lsls	r1, r4, #23
 801faf8:	bf48      	it	mi
 801fafa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801fafe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801fb02:	0d1b      	lsrs	r3, r3, #20
 801fb04:	051b      	lsls	r3, r3, #20
 801fb06:	2b00      	cmp	r3, #0
 801fb08:	d1bb      	bne.n	801fa82 <_strtod_l+0x72>
 801fb0a:	f7fe fb21 	bl	801e150 <__errno>
 801fb0e:	2322      	movs	r3, #34	@ 0x22
 801fb10:	6003      	str	r3, [r0, #0]
 801fb12:	e7b6      	b.n	801fa82 <_strtod_l+0x72>
 801fb14:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801fb18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801fb1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801fb20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801fb24:	e7e7      	b.n	801faf6 <_strtod_l+0xe6>
 801fb26:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801fca4 <_strtod_l+0x294>
 801fb2a:	e7e4      	b.n	801faf6 <_strtod_l+0xe6>
 801fb2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801fb30:	f04f 3aff 	mov.w	sl, #4294967295
 801fb34:	e7df      	b.n	801faf6 <_strtod_l+0xe6>
 801fb36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fb38:	1c5a      	adds	r2, r3, #1
 801fb3a:	9219      	str	r2, [sp, #100]	@ 0x64
 801fb3c:	785b      	ldrb	r3, [r3, #1]
 801fb3e:	2b30      	cmp	r3, #48	@ 0x30
 801fb40:	d0f9      	beq.n	801fb36 <_strtod_l+0x126>
 801fb42:	2b00      	cmp	r3, #0
 801fb44:	d09d      	beq.n	801fa82 <_strtod_l+0x72>
 801fb46:	2301      	movs	r3, #1
 801fb48:	9309      	str	r3, [sp, #36]	@ 0x24
 801fb4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fb4c:	930c      	str	r3, [sp, #48]	@ 0x30
 801fb4e:	2300      	movs	r3, #0
 801fb50:	9308      	str	r3, [sp, #32]
 801fb52:	930a      	str	r3, [sp, #40]	@ 0x28
 801fb54:	461f      	mov	r7, r3
 801fb56:	220a      	movs	r2, #10
 801fb58:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801fb5a:	7805      	ldrb	r5, [r0, #0]
 801fb5c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801fb60:	b2d9      	uxtb	r1, r3
 801fb62:	2909      	cmp	r1, #9
 801fb64:	d928      	bls.n	801fbb8 <_strtod_l+0x1a8>
 801fb66:	494e      	ldr	r1, [pc, #312]	@ (801fca0 <_strtod_l+0x290>)
 801fb68:	2201      	movs	r2, #1
 801fb6a:	f001 f9ad 	bl	8020ec8 <strncmp>
 801fb6e:	2800      	cmp	r0, #0
 801fb70:	d032      	beq.n	801fbd8 <_strtod_l+0x1c8>
 801fb72:	2000      	movs	r0, #0
 801fb74:	462a      	mov	r2, r5
 801fb76:	4681      	mov	r9, r0
 801fb78:	463d      	mov	r5, r7
 801fb7a:	4603      	mov	r3, r0
 801fb7c:	2a65      	cmp	r2, #101	@ 0x65
 801fb7e:	d001      	beq.n	801fb84 <_strtod_l+0x174>
 801fb80:	2a45      	cmp	r2, #69	@ 0x45
 801fb82:	d114      	bne.n	801fbae <_strtod_l+0x19e>
 801fb84:	b91d      	cbnz	r5, 801fb8e <_strtod_l+0x17e>
 801fb86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fb88:	4302      	orrs	r2, r0
 801fb8a:	d095      	beq.n	801fab8 <_strtod_l+0xa8>
 801fb8c:	2500      	movs	r5, #0
 801fb8e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801fb90:	1c62      	adds	r2, r4, #1
 801fb92:	9219      	str	r2, [sp, #100]	@ 0x64
 801fb94:	7862      	ldrb	r2, [r4, #1]
 801fb96:	2a2b      	cmp	r2, #43	@ 0x2b
 801fb98:	d077      	beq.n	801fc8a <_strtod_l+0x27a>
 801fb9a:	2a2d      	cmp	r2, #45	@ 0x2d
 801fb9c:	d07b      	beq.n	801fc96 <_strtod_l+0x286>
 801fb9e:	f04f 0c00 	mov.w	ip, #0
 801fba2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801fba6:	2909      	cmp	r1, #9
 801fba8:	f240 8082 	bls.w	801fcb0 <_strtod_l+0x2a0>
 801fbac:	9419      	str	r4, [sp, #100]	@ 0x64
 801fbae:	f04f 0800 	mov.w	r8, #0
 801fbb2:	e0a2      	b.n	801fcfa <_strtod_l+0x2ea>
 801fbb4:	2300      	movs	r3, #0
 801fbb6:	e7c7      	b.n	801fb48 <_strtod_l+0x138>
 801fbb8:	2f08      	cmp	r7, #8
 801fbba:	bfd5      	itete	le
 801fbbc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801fbbe:	9908      	ldrgt	r1, [sp, #32]
 801fbc0:	fb02 3301 	mlale	r3, r2, r1, r3
 801fbc4:	fb02 3301 	mlagt	r3, r2, r1, r3
 801fbc8:	f100 0001 	add.w	r0, r0, #1
 801fbcc:	bfd4      	ite	le
 801fbce:	930a      	strle	r3, [sp, #40]	@ 0x28
 801fbd0:	9308      	strgt	r3, [sp, #32]
 801fbd2:	3701      	adds	r7, #1
 801fbd4:	9019      	str	r0, [sp, #100]	@ 0x64
 801fbd6:	e7bf      	b.n	801fb58 <_strtod_l+0x148>
 801fbd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fbda:	1c5a      	adds	r2, r3, #1
 801fbdc:	9219      	str	r2, [sp, #100]	@ 0x64
 801fbde:	785a      	ldrb	r2, [r3, #1]
 801fbe0:	b37f      	cbz	r7, 801fc42 <_strtod_l+0x232>
 801fbe2:	4681      	mov	r9, r0
 801fbe4:	463d      	mov	r5, r7
 801fbe6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801fbea:	2b09      	cmp	r3, #9
 801fbec:	d912      	bls.n	801fc14 <_strtod_l+0x204>
 801fbee:	2301      	movs	r3, #1
 801fbf0:	e7c4      	b.n	801fb7c <_strtod_l+0x16c>
 801fbf2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fbf4:	1c5a      	adds	r2, r3, #1
 801fbf6:	9219      	str	r2, [sp, #100]	@ 0x64
 801fbf8:	785a      	ldrb	r2, [r3, #1]
 801fbfa:	3001      	adds	r0, #1
 801fbfc:	2a30      	cmp	r2, #48	@ 0x30
 801fbfe:	d0f8      	beq.n	801fbf2 <_strtod_l+0x1e2>
 801fc00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801fc04:	2b08      	cmp	r3, #8
 801fc06:	f200 84d3 	bhi.w	80205b0 <_strtod_l+0xba0>
 801fc0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fc0c:	930c      	str	r3, [sp, #48]	@ 0x30
 801fc0e:	4681      	mov	r9, r0
 801fc10:	2000      	movs	r0, #0
 801fc12:	4605      	mov	r5, r0
 801fc14:	3a30      	subs	r2, #48	@ 0x30
 801fc16:	f100 0301 	add.w	r3, r0, #1
 801fc1a:	d02a      	beq.n	801fc72 <_strtod_l+0x262>
 801fc1c:	4499      	add	r9, r3
 801fc1e:	eb00 0c05 	add.w	ip, r0, r5
 801fc22:	462b      	mov	r3, r5
 801fc24:	210a      	movs	r1, #10
 801fc26:	4563      	cmp	r3, ip
 801fc28:	d10d      	bne.n	801fc46 <_strtod_l+0x236>
 801fc2a:	1c69      	adds	r1, r5, #1
 801fc2c:	4401      	add	r1, r0
 801fc2e:	4428      	add	r0, r5
 801fc30:	2808      	cmp	r0, #8
 801fc32:	dc16      	bgt.n	801fc62 <_strtod_l+0x252>
 801fc34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fc36:	230a      	movs	r3, #10
 801fc38:	fb03 2300 	mla	r3, r3, r0, r2
 801fc3c:	930a      	str	r3, [sp, #40]	@ 0x28
 801fc3e:	2300      	movs	r3, #0
 801fc40:	e018      	b.n	801fc74 <_strtod_l+0x264>
 801fc42:	4638      	mov	r0, r7
 801fc44:	e7da      	b.n	801fbfc <_strtod_l+0x1ec>
 801fc46:	2b08      	cmp	r3, #8
 801fc48:	f103 0301 	add.w	r3, r3, #1
 801fc4c:	dc03      	bgt.n	801fc56 <_strtod_l+0x246>
 801fc4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801fc50:	434e      	muls	r6, r1
 801fc52:	960a      	str	r6, [sp, #40]	@ 0x28
 801fc54:	e7e7      	b.n	801fc26 <_strtod_l+0x216>
 801fc56:	2b10      	cmp	r3, #16
 801fc58:	bfde      	ittt	le
 801fc5a:	9e08      	ldrle	r6, [sp, #32]
 801fc5c:	434e      	mulle	r6, r1
 801fc5e:	9608      	strle	r6, [sp, #32]
 801fc60:	e7e1      	b.n	801fc26 <_strtod_l+0x216>
 801fc62:	280f      	cmp	r0, #15
 801fc64:	dceb      	bgt.n	801fc3e <_strtod_l+0x22e>
 801fc66:	9808      	ldr	r0, [sp, #32]
 801fc68:	230a      	movs	r3, #10
 801fc6a:	fb03 2300 	mla	r3, r3, r0, r2
 801fc6e:	9308      	str	r3, [sp, #32]
 801fc70:	e7e5      	b.n	801fc3e <_strtod_l+0x22e>
 801fc72:	4629      	mov	r1, r5
 801fc74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801fc76:	1c50      	adds	r0, r2, #1
 801fc78:	9019      	str	r0, [sp, #100]	@ 0x64
 801fc7a:	7852      	ldrb	r2, [r2, #1]
 801fc7c:	4618      	mov	r0, r3
 801fc7e:	460d      	mov	r5, r1
 801fc80:	e7b1      	b.n	801fbe6 <_strtod_l+0x1d6>
 801fc82:	f04f 0900 	mov.w	r9, #0
 801fc86:	2301      	movs	r3, #1
 801fc88:	e77d      	b.n	801fb86 <_strtod_l+0x176>
 801fc8a:	f04f 0c00 	mov.w	ip, #0
 801fc8e:	1ca2      	adds	r2, r4, #2
 801fc90:	9219      	str	r2, [sp, #100]	@ 0x64
 801fc92:	78a2      	ldrb	r2, [r4, #2]
 801fc94:	e785      	b.n	801fba2 <_strtod_l+0x192>
 801fc96:	f04f 0c01 	mov.w	ip, #1
 801fc9a:	e7f8      	b.n	801fc8e <_strtod_l+0x27e>
 801fc9c:	080228d8 	.word	0x080228d8
 801fca0:	080228c0 	.word	0x080228c0
 801fca4:	7ff00000 	.word	0x7ff00000
 801fca8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801fcaa:	1c51      	adds	r1, r2, #1
 801fcac:	9119      	str	r1, [sp, #100]	@ 0x64
 801fcae:	7852      	ldrb	r2, [r2, #1]
 801fcb0:	2a30      	cmp	r2, #48	@ 0x30
 801fcb2:	d0f9      	beq.n	801fca8 <_strtod_l+0x298>
 801fcb4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801fcb8:	2908      	cmp	r1, #8
 801fcba:	f63f af78 	bhi.w	801fbae <_strtod_l+0x19e>
 801fcbe:	3a30      	subs	r2, #48	@ 0x30
 801fcc0:	920e      	str	r2, [sp, #56]	@ 0x38
 801fcc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801fcc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 801fcc6:	f04f 080a 	mov.w	r8, #10
 801fcca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801fccc:	1c56      	adds	r6, r2, #1
 801fcce:	9619      	str	r6, [sp, #100]	@ 0x64
 801fcd0:	7852      	ldrb	r2, [r2, #1]
 801fcd2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801fcd6:	f1be 0f09 	cmp.w	lr, #9
 801fcda:	d939      	bls.n	801fd50 <_strtod_l+0x340>
 801fcdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801fcde:	1a76      	subs	r6, r6, r1
 801fce0:	2e08      	cmp	r6, #8
 801fce2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801fce6:	dc03      	bgt.n	801fcf0 <_strtod_l+0x2e0>
 801fce8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801fcea:	4588      	cmp	r8, r1
 801fcec:	bfa8      	it	ge
 801fcee:	4688      	movge	r8, r1
 801fcf0:	f1bc 0f00 	cmp.w	ip, #0
 801fcf4:	d001      	beq.n	801fcfa <_strtod_l+0x2ea>
 801fcf6:	f1c8 0800 	rsb	r8, r8, #0
 801fcfa:	2d00      	cmp	r5, #0
 801fcfc:	d14e      	bne.n	801fd9c <_strtod_l+0x38c>
 801fcfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801fd00:	4308      	orrs	r0, r1
 801fd02:	f47f aebe 	bne.w	801fa82 <_strtod_l+0x72>
 801fd06:	2b00      	cmp	r3, #0
 801fd08:	f47f aed6 	bne.w	801fab8 <_strtod_l+0xa8>
 801fd0c:	2a69      	cmp	r2, #105	@ 0x69
 801fd0e:	d028      	beq.n	801fd62 <_strtod_l+0x352>
 801fd10:	dc25      	bgt.n	801fd5e <_strtod_l+0x34e>
 801fd12:	2a49      	cmp	r2, #73	@ 0x49
 801fd14:	d025      	beq.n	801fd62 <_strtod_l+0x352>
 801fd16:	2a4e      	cmp	r2, #78	@ 0x4e
 801fd18:	f47f aece 	bne.w	801fab8 <_strtod_l+0xa8>
 801fd1c:	499b      	ldr	r1, [pc, #620]	@ (801ff8c <_strtod_l+0x57c>)
 801fd1e:	a819      	add	r0, sp, #100	@ 0x64
 801fd20:	f001 fbda 	bl	80214d8 <__match>
 801fd24:	2800      	cmp	r0, #0
 801fd26:	f43f aec7 	beq.w	801fab8 <_strtod_l+0xa8>
 801fd2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fd2c:	781b      	ldrb	r3, [r3, #0]
 801fd2e:	2b28      	cmp	r3, #40	@ 0x28
 801fd30:	d12e      	bne.n	801fd90 <_strtod_l+0x380>
 801fd32:	4997      	ldr	r1, [pc, #604]	@ (801ff90 <_strtod_l+0x580>)
 801fd34:	aa1c      	add	r2, sp, #112	@ 0x70
 801fd36:	a819      	add	r0, sp, #100	@ 0x64
 801fd38:	f001 fbe2 	bl	8021500 <__hexnan>
 801fd3c:	2805      	cmp	r0, #5
 801fd3e:	d127      	bne.n	801fd90 <_strtod_l+0x380>
 801fd40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801fd42:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801fd46:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801fd4a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801fd4e:	e698      	b.n	801fa82 <_strtod_l+0x72>
 801fd50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801fd52:	fb08 2101 	mla	r1, r8, r1, r2
 801fd56:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801fd5a:	920e      	str	r2, [sp, #56]	@ 0x38
 801fd5c:	e7b5      	b.n	801fcca <_strtod_l+0x2ba>
 801fd5e:	2a6e      	cmp	r2, #110	@ 0x6e
 801fd60:	e7da      	b.n	801fd18 <_strtod_l+0x308>
 801fd62:	498c      	ldr	r1, [pc, #560]	@ (801ff94 <_strtod_l+0x584>)
 801fd64:	a819      	add	r0, sp, #100	@ 0x64
 801fd66:	f001 fbb7 	bl	80214d8 <__match>
 801fd6a:	2800      	cmp	r0, #0
 801fd6c:	f43f aea4 	beq.w	801fab8 <_strtod_l+0xa8>
 801fd70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fd72:	4989      	ldr	r1, [pc, #548]	@ (801ff98 <_strtod_l+0x588>)
 801fd74:	3b01      	subs	r3, #1
 801fd76:	a819      	add	r0, sp, #100	@ 0x64
 801fd78:	9319      	str	r3, [sp, #100]	@ 0x64
 801fd7a:	f001 fbad 	bl	80214d8 <__match>
 801fd7e:	b910      	cbnz	r0, 801fd86 <_strtod_l+0x376>
 801fd80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fd82:	3301      	adds	r3, #1
 801fd84:	9319      	str	r3, [sp, #100]	@ 0x64
 801fd86:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801ffa8 <_strtod_l+0x598>
 801fd8a:	f04f 0a00 	mov.w	sl, #0
 801fd8e:	e678      	b.n	801fa82 <_strtod_l+0x72>
 801fd90:	4882      	ldr	r0, [pc, #520]	@ (801ff9c <_strtod_l+0x58c>)
 801fd92:	f001 f8dd 	bl	8020f50 <nan>
 801fd96:	ec5b ab10 	vmov	sl, fp, d0
 801fd9a:	e672      	b.n	801fa82 <_strtod_l+0x72>
 801fd9c:	eba8 0309 	sub.w	r3, r8, r9
 801fda0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fda2:	9309      	str	r3, [sp, #36]	@ 0x24
 801fda4:	2f00      	cmp	r7, #0
 801fda6:	bf08      	it	eq
 801fda8:	462f      	moveq	r7, r5
 801fdaa:	2d10      	cmp	r5, #16
 801fdac:	462c      	mov	r4, r5
 801fdae:	bfa8      	it	ge
 801fdb0:	2410      	movge	r4, #16
 801fdb2:	f7e0 fbcf 	bl	8000554 <__aeabi_ui2d>
 801fdb6:	2d09      	cmp	r5, #9
 801fdb8:	4682      	mov	sl, r0
 801fdba:	468b      	mov	fp, r1
 801fdbc:	dc13      	bgt.n	801fde6 <_strtod_l+0x3d6>
 801fdbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fdc0:	2b00      	cmp	r3, #0
 801fdc2:	f43f ae5e 	beq.w	801fa82 <_strtod_l+0x72>
 801fdc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fdc8:	dd78      	ble.n	801febc <_strtod_l+0x4ac>
 801fdca:	2b16      	cmp	r3, #22
 801fdcc:	dc5f      	bgt.n	801fe8e <_strtod_l+0x47e>
 801fdce:	4974      	ldr	r1, [pc, #464]	@ (801ffa0 <_strtod_l+0x590>)
 801fdd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801fdd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fdd8:	4652      	mov	r2, sl
 801fdda:	465b      	mov	r3, fp
 801fddc:	f7e0 fc34 	bl	8000648 <__aeabi_dmul>
 801fde0:	4682      	mov	sl, r0
 801fde2:	468b      	mov	fp, r1
 801fde4:	e64d      	b.n	801fa82 <_strtod_l+0x72>
 801fde6:	4b6e      	ldr	r3, [pc, #440]	@ (801ffa0 <_strtod_l+0x590>)
 801fde8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801fdec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801fdf0:	f7e0 fc2a 	bl	8000648 <__aeabi_dmul>
 801fdf4:	4682      	mov	sl, r0
 801fdf6:	9808      	ldr	r0, [sp, #32]
 801fdf8:	468b      	mov	fp, r1
 801fdfa:	f7e0 fbab 	bl	8000554 <__aeabi_ui2d>
 801fdfe:	4602      	mov	r2, r0
 801fe00:	460b      	mov	r3, r1
 801fe02:	4650      	mov	r0, sl
 801fe04:	4659      	mov	r1, fp
 801fe06:	f7e0 fa69 	bl	80002dc <__adddf3>
 801fe0a:	2d0f      	cmp	r5, #15
 801fe0c:	4682      	mov	sl, r0
 801fe0e:	468b      	mov	fp, r1
 801fe10:	ddd5      	ble.n	801fdbe <_strtod_l+0x3ae>
 801fe12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe14:	1b2c      	subs	r4, r5, r4
 801fe16:	441c      	add	r4, r3
 801fe18:	2c00      	cmp	r4, #0
 801fe1a:	f340 8096 	ble.w	801ff4a <_strtod_l+0x53a>
 801fe1e:	f014 030f 	ands.w	r3, r4, #15
 801fe22:	d00a      	beq.n	801fe3a <_strtod_l+0x42a>
 801fe24:	495e      	ldr	r1, [pc, #376]	@ (801ffa0 <_strtod_l+0x590>)
 801fe26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801fe2a:	4652      	mov	r2, sl
 801fe2c:	465b      	mov	r3, fp
 801fe2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe32:	f7e0 fc09 	bl	8000648 <__aeabi_dmul>
 801fe36:	4682      	mov	sl, r0
 801fe38:	468b      	mov	fp, r1
 801fe3a:	f034 040f 	bics.w	r4, r4, #15
 801fe3e:	d073      	beq.n	801ff28 <_strtod_l+0x518>
 801fe40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801fe44:	dd48      	ble.n	801fed8 <_strtod_l+0x4c8>
 801fe46:	2400      	movs	r4, #0
 801fe48:	46a0      	mov	r8, r4
 801fe4a:	940a      	str	r4, [sp, #40]	@ 0x28
 801fe4c:	46a1      	mov	r9, r4
 801fe4e:	9a05      	ldr	r2, [sp, #20]
 801fe50:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801ffa8 <_strtod_l+0x598>
 801fe54:	2322      	movs	r3, #34	@ 0x22
 801fe56:	6013      	str	r3, [r2, #0]
 801fe58:	f04f 0a00 	mov.w	sl, #0
 801fe5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fe5e:	2b00      	cmp	r3, #0
 801fe60:	f43f ae0f 	beq.w	801fa82 <_strtod_l+0x72>
 801fe64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801fe66:	9805      	ldr	r0, [sp, #20]
 801fe68:	f7ff f942 	bl	801f0f0 <_Bfree>
 801fe6c:	9805      	ldr	r0, [sp, #20]
 801fe6e:	4649      	mov	r1, r9
 801fe70:	f7ff f93e 	bl	801f0f0 <_Bfree>
 801fe74:	9805      	ldr	r0, [sp, #20]
 801fe76:	4641      	mov	r1, r8
 801fe78:	f7ff f93a 	bl	801f0f0 <_Bfree>
 801fe7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fe7e:	9805      	ldr	r0, [sp, #20]
 801fe80:	f7ff f936 	bl	801f0f0 <_Bfree>
 801fe84:	9805      	ldr	r0, [sp, #20]
 801fe86:	4621      	mov	r1, r4
 801fe88:	f7ff f932 	bl	801f0f0 <_Bfree>
 801fe8c:	e5f9      	b.n	801fa82 <_strtod_l+0x72>
 801fe8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fe90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801fe94:	4293      	cmp	r3, r2
 801fe96:	dbbc      	blt.n	801fe12 <_strtod_l+0x402>
 801fe98:	4c41      	ldr	r4, [pc, #260]	@ (801ffa0 <_strtod_l+0x590>)
 801fe9a:	f1c5 050f 	rsb	r5, r5, #15
 801fe9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801fea2:	4652      	mov	r2, sl
 801fea4:	465b      	mov	r3, fp
 801fea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801feaa:	f7e0 fbcd 	bl	8000648 <__aeabi_dmul>
 801feae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801feb0:	1b5d      	subs	r5, r3, r5
 801feb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801feb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801feba:	e78f      	b.n	801fddc <_strtod_l+0x3cc>
 801febc:	3316      	adds	r3, #22
 801febe:	dba8      	blt.n	801fe12 <_strtod_l+0x402>
 801fec0:	4b37      	ldr	r3, [pc, #220]	@ (801ffa0 <_strtod_l+0x590>)
 801fec2:	eba9 0808 	sub.w	r8, r9, r8
 801fec6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801feca:	e9d8 2300 	ldrd	r2, r3, [r8]
 801fece:	4650      	mov	r0, sl
 801fed0:	4659      	mov	r1, fp
 801fed2:	f7e0 fce3 	bl	800089c <__aeabi_ddiv>
 801fed6:	e783      	b.n	801fde0 <_strtod_l+0x3d0>
 801fed8:	4b32      	ldr	r3, [pc, #200]	@ (801ffa4 <_strtod_l+0x594>)
 801feda:	9308      	str	r3, [sp, #32]
 801fedc:	2300      	movs	r3, #0
 801fede:	1124      	asrs	r4, r4, #4
 801fee0:	4650      	mov	r0, sl
 801fee2:	4659      	mov	r1, fp
 801fee4:	461e      	mov	r6, r3
 801fee6:	2c01      	cmp	r4, #1
 801fee8:	dc21      	bgt.n	801ff2e <_strtod_l+0x51e>
 801feea:	b10b      	cbz	r3, 801fef0 <_strtod_l+0x4e0>
 801feec:	4682      	mov	sl, r0
 801feee:	468b      	mov	fp, r1
 801fef0:	492c      	ldr	r1, [pc, #176]	@ (801ffa4 <_strtod_l+0x594>)
 801fef2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801fef6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801fefa:	4652      	mov	r2, sl
 801fefc:	465b      	mov	r3, fp
 801fefe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ff02:	f7e0 fba1 	bl	8000648 <__aeabi_dmul>
 801ff06:	4b28      	ldr	r3, [pc, #160]	@ (801ffa8 <_strtod_l+0x598>)
 801ff08:	460a      	mov	r2, r1
 801ff0a:	400b      	ands	r3, r1
 801ff0c:	4927      	ldr	r1, [pc, #156]	@ (801ffac <_strtod_l+0x59c>)
 801ff0e:	428b      	cmp	r3, r1
 801ff10:	4682      	mov	sl, r0
 801ff12:	d898      	bhi.n	801fe46 <_strtod_l+0x436>
 801ff14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801ff18:	428b      	cmp	r3, r1
 801ff1a:	bf86      	itte	hi
 801ff1c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801ffb0 <_strtod_l+0x5a0>
 801ff20:	f04f 3aff 	movhi.w	sl, #4294967295
 801ff24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801ff28:	2300      	movs	r3, #0
 801ff2a:	9308      	str	r3, [sp, #32]
 801ff2c:	e07a      	b.n	8020024 <_strtod_l+0x614>
 801ff2e:	07e2      	lsls	r2, r4, #31
 801ff30:	d505      	bpl.n	801ff3e <_strtod_l+0x52e>
 801ff32:	9b08      	ldr	r3, [sp, #32]
 801ff34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff38:	f7e0 fb86 	bl	8000648 <__aeabi_dmul>
 801ff3c:	2301      	movs	r3, #1
 801ff3e:	9a08      	ldr	r2, [sp, #32]
 801ff40:	3208      	adds	r2, #8
 801ff42:	3601      	adds	r6, #1
 801ff44:	1064      	asrs	r4, r4, #1
 801ff46:	9208      	str	r2, [sp, #32]
 801ff48:	e7cd      	b.n	801fee6 <_strtod_l+0x4d6>
 801ff4a:	d0ed      	beq.n	801ff28 <_strtod_l+0x518>
 801ff4c:	4264      	negs	r4, r4
 801ff4e:	f014 020f 	ands.w	r2, r4, #15
 801ff52:	d00a      	beq.n	801ff6a <_strtod_l+0x55a>
 801ff54:	4b12      	ldr	r3, [pc, #72]	@ (801ffa0 <_strtod_l+0x590>)
 801ff56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ff5a:	4650      	mov	r0, sl
 801ff5c:	4659      	mov	r1, fp
 801ff5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff62:	f7e0 fc9b 	bl	800089c <__aeabi_ddiv>
 801ff66:	4682      	mov	sl, r0
 801ff68:	468b      	mov	fp, r1
 801ff6a:	1124      	asrs	r4, r4, #4
 801ff6c:	d0dc      	beq.n	801ff28 <_strtod_l+0x518>
 801ff6e:	2c1f      	cmp	r4, #31
 801ff70:	dd20      	ble.n	801ffb4 <_strtod_l+0x5a4>
 801ff72:	2400      	movs	r4, #0
 801ff74:	46a0      	mov	r8, r4
 801ff76:	940a      	str	r4, [sp, #40]	@ 0x28
 801ff78:	46a1      	mov	r9, r4
 801ff7a:	9a05      	ldr	r2, [sp, #20]
 801ff7c:	2322      	movs	r3, #34	@ 0x22
 801ff7e:	f04f 0a00 	mov.w	sl, #0
 801ff82:	f04f 0b00 	mov.w	fp, #0
 801ff86:	6013      	str	r3, [r2, #0]
 801ff88:	e768      	b.n	801fe5c <_strtod_l+0x44c>
 801ff8a:	bf00      	nop
 801ff8c:	080226ad 	.word	0x080226ad
 801ff90:	080228c4 	.word	0x080228c4
 801ff94:	080226a5 	.word	0x080226a5
 801ff98:	080226dc 	.word	0x080226dc
 801ff9c:	08022a6d 	.word	0x08022a6d
 801ffa0:	080227f8 	.word	0x080227f8
 801ffa4:	080227d0 	.word	0x080227d0
 801ffa8:	7ff00000 	.word	0x7ff00000
 801ffac:	7ca00000 	.word	0x7ca00000
 801ffb0:	7fefffff 	.word	0x7fefffff
 801ffb4:	f014 0310 	ands.w	r3, r4, #16
 801ffb8:	bf18      	it	ne
 801ffba:	236a      	movne	r3, #106	@ 0x6a
 801ffbc:	4ea9      	ldr	r6, [pc, #676]	@ (8020264 <_strtod_l+0x854>)
 801ffbe:	9308      	str	r3, [sp, #32]
 801ffc0:	4650      	mov	r0, sl
 801ffc2:	4659      	mov	r1, fp
 801ffc4:	2300      	movs	r3, #0
 801ffc6:	07e2      	lsls	r2, r4, #31
 801ffc8:	d504      	bpl.n	801ffd4 <_strtod_l+0x5c4>
 801ffca:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ffce:	f7e0 fb3b 	bl	8000648 <__aeabi_dmul>
 801ffd2:	2301      	movs	r3, #1
 801ffd4:	1064      	asrs	r4, r4, #1
 801ffd6:	f106 0608 	add.w	r6, r6, #8
 801ffda:	d1f4      	bne.n	801ffc6 <_strtod_l+0x5b6>
 801ffdc:	b10b      	cbz	r3, 801ffe2 <_strtod_l+0x5d2>
 801ffde:	4682      	mov	sl, r0
 801ffe0:	468b      	mov	fp, r1
 801ffe2:	9b08      	ldr	r3, [sp, #32]
 801ffe4:	b1b3      	cbz	r3, 8020014 <_strtod_l+0x604>
 801ffe6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801ffea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801ffee:	2b00      	cmp	r3, #0
 801fff0:	4659      	mov	r1, fp
 801fff2:	dd0f      	ble.n	8020014 <_strtod_l+0x604>
 801fff4:	2b1f      	cmp	r3, #31
 801fff6:	dd55      	ble.n	80200a4 <_strtod_l+0x694>
 801fff8:	2b34      	cmp	r3, #52	@ 0x34
 801fffa:	bfde      	ittt	le
 801fffc:	f04f 33ff 	movle.w	r3, #4294967295
 8020000:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8020004:	4093      	lslle	r3, r2
 8020006:	f04f 0a00 	mov.w	sl, #0
 802000a:	bfcc      	ite	gt
 802000c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8020010:	ea03 0b01 	andle.w	fp, r3, r1
 8020014:	2200      	movs	r2, #0
 8020016:	2300      	movs	r3, #0
 8020018:	4650      	mov	r0, sl
 802001a:	4659      	mov	r1, fp
 802001c:	f7e0 fd7c 	bl	8000b18 <__aeabi_dcmpeq>
 8020020:	2800      	cmp	r0, #0
 8020022:	d1a6      	bne.n	801ff72 <_strtod_l+0x562>
 8020024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020026:	9300      	str	r3, [sp, #0]
 8020028:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802002a:	9805      	ldr	r0, [sp, #20]
 802002c:	462b      	mov	r3, r5
 802002e:	463a      	mov	r2, r7
 8020030:	f7ff f8c6 	bl	801f1c0 <__s2b>
 8020034:	900a      	str	r0, [sp, #40]	@ 0x28
 8020036:	2800      	cmp	r0, #0
 8020038:	f43f af05 	beq.w	801fe46 <_strtod_l+0x436>
 802003c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802003e:	2a00      	cmp	r2, #0
 8020040:	eba9 0308 	sub.w	r3, r9, r8
 8020044:	bfa8      	it	ge
 8020046:	2300      	movge	r3, #0
 8020048:	9312      	str	r3, [sp, #72]	@ 0x48
 802004a:	2400      	movs	r4, #0
 802004c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8020050:	9316      	str	r3, [sp, #88]	@ 0x58
 8020052:	46a0      	mov	r8, r4
 8020054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020056:	9805      	ldr	r0, [sp, #20]
 8020058:	6859      	ldr	r1, [r3, #4]
 802005a:	f7ff f809 	bl	801f070 <_Balloc>
 802005e:	4681      	mov	r9, r0
 8020060:	2800      	cmp	r0, #0
 8020062:	f43f aef4 	beq.w	801fe4e <_strtod_l+0x43e>
 8020066:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020068:	691a      	ldr	r2, [r3, #16]
 802006a:	3202      	adds	r2, #2
 802006c:	f103 010c 	add.w	r1, r3, #12
 8020070:	0092      	lsls	r2, r2, #2
 8020072:	300c      	adds	r0, #12
 8020074:	f7fe f899 	bl	801e1aa <memcpy>
 8020078:	ec4b ab10 	vmov	d0, sl, fp
 802007c:	9805      	ldr	r0, [sp, #20]
 802007e:	aa1c      	add	r2, sp, #112	@ 0x70
 8020080:	a91b      	add	r1, sp, #108	@ 0x6c
 8020082:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8020086:	f7ff fbd7 	bl	801f838 <__d2b>
 802008a:	901a      	str	r0, [sp, #104]	@ 0x68
 802008c:	2800      	cmp	r0, #0
 802008e:	f43f aede 	beq.w	801fe4e <_strtod_l+0x43e>
 8020092:	9805      	ldr	r0, [sp, #20]
 8020094:	2101      	movs	r1, #1
 8020096:	f7ff f929 	bl	801f2ec <__i2b>
 802009a:	4680      	mov	r8, r0
 802009c:	b948      	cbnz	r0, 80200b2 <_strtod_l+0x6a2>
 802009e:	f04f 0800 	mov.w	r8, #0
 80200a2:	e6d4      	b.n	801fe4e <_strtod_l+0x43e>
 80200a4:	f04f 32ff 	mov.w	r2, #4294967295
 80200a8:	fa02 f303 	lsl.w	r3, r2, r3
 80200ac:	ea03 0a0a 	and.w	sl, r3, sl
 80200b0:	e7b0      	b.n	8020014 <_strtod_l+0x604>
 80200b2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80200b4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80200b6:	2d00      	cmp	r5, #0
 80200b8:	bfab      	itete	ge
 80200ba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80200bc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80200be:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80200c0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80200c2:	bfac      	ite	ge
 80200c4:	18ef      	addge	r7, r5, r3
 80200c6:	1b5e      	sublt	r6, r3, r5
 80200c8:	9b08      	ldr	r3, [sp, #32]
 80200ca:	1aed      	subs	r5, r5, r3
 80200cc:	4415      	add	r5, r2
 80200ce:	4b66      	ldr	r3, [pc, #408]	@ (8020268 <_strtod_l+0x858>)
 80200d0:	3d01      	subs	r5, #1
 80200d2:	429d      	cmp	r5, r3
 80200d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80200d8:	da50      	bge.n	802017c <_strtod_l+0x76c>
 80200da:	1b5b      	subs	r3, r3, r5
 80200dc:	2b1f      	cmp	r3, #31
 80200de:	eba2 0203 	sub.w	r2, r2, r3
 80200e2:	f04f 0101 	mov.w	r1, #1
 80200e6:	dc3d      	bgt.n	8020164 <_strtod_l+0x754>
 80200e8:	fa01 f303 	lsl.w	r3, r1, r3
 80200ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 80200ee:	2300      	movs	r3, #0
 80200f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80200f2:	18bd      	adds	r5, r7, r2
 80200f4:	9b08      	ldr	r3, [sp, #32]
 80200f6:	42af      	cmp	r7, r5
 80200f8:	4416      	add	r6, r2
 80200fa:	441e      	add	r6, r3
 80200fc:	463b      	mov	r3, r7
 80200fe:	bfa8      	it	ge
 8020100:	462b      	movge	r3, r5
 8020102:	42b3      	cmp	r3, r6
 8020104:	bfa8      	it	ge
 8020106:	4633      	movge	r3, r6
 8020108:	2b00      	cmp	r3, #0
 802010a:	bfc2      	ittt	gt
 802010c:	1aed      	subgt	r5, r5, r3
 802010e:	1af6      	subgt	r6, r6, r3
 8020110:	1aff      	subgt	r7, r7, r3
 8020112:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020114:	2b00      	cmp	r3, #0
 8020116:	dd16      	ble.n	8020146 <_strtod_l+0x736>
 8020118:	4641      	mov	r1, r8
 802011a:	9805      	ldr	r0, [sp, #20]
 802011c:	461a      	mov	r2, r3
 802011e:	f7ff f9a5 	bl	801f46c <__pow5mult>
 8020122:	4680      	mov	r8, r0
 8020124:	2800      	cmp	r0, #0
 8020126:	d0ba      	beq.n	802009e <_strtod_l+0x68e>
 8020128:	4601      	mov	r1, r0
 802012a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802012c:	9805      	ldr	r0, [sp, #20]
 802012e:	f7ff f8f3 	bl	801f318 <__multiply>
 8020132:	900e      	str	r0, [sp, #56]	@ 0x38
 8020134:	2800      	cmp	r0, #0
 8020136:	f43f ae8a 	beq.w	801fe4e <_strtod_l+0x43e>
 802013a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802013c:	9805      	ldr	r0, [sp, #20]
 802013e:	f7fe ffd7 	bl	801f0f0 <_Bfree>
 8020142:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020144:	931a      	str	r3, [sp, #104]	@ 0x68
 8020146:	2d00      	cmp	r5, #0
 8020148:	dc1d      	bgt.n	8020186 <_strtod_l+0x776>
 802014a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802014c:	2b00      	cmp	r3, #0
 802014e:	dd23      	ble.n	8020198 <_strtod_l+0x788>
 8020150:	4649      	mov	r1, r9
 8020152:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020154:	9805      	ldr	r0, [sp, #20]
 8020156:	f7ff f989 	bl	801f46c <__pow5mult>
 802015a:	4681      	mov	r9, r0
 802015c:	b9e0      	cbnz	r0, 8020198 <_strtod_l+0x788>
 802015e:	f04f 0900 	mov.w	r9, #0
 8020162:	e674      	b.n	801fe4e <_strtod_l+0x43e>
 8020164:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8020168:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 802016c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8020170:	35e2      	adds	r5, #226	@ 0xe2
 8020172:	fa01 f305 	lsl.w	r3, r1, r5
 8020176:	9310      	str	r3, [sp, #64]	@ 0x40
 8020178:	9113      	str	r1, [sp, #76]	@ 0x4c
 802017a:	e7ba      	b.n	80200f2 <_strtod_l+0x6e2>
 802017c:	2300      	movs	r3, #0
 802017e:	9310      	str	r3, [sp, #64]	@ 0x40
 8020180:	2301      	movs	r3, #1
 8020182:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020184:	e7b5      	b.n	80200f2 <_strtod_l+0x6e2>
 8020186:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020188:	9805      	ldr	r0, [sp, #20]
 802018a:	462a      	mov	r2, r5
 802018c:	f7ff f9c8 	bl	801f520 <__lshift>
 8020190:	901a      	str	r0, [sp, #104]	@ 0x68
 8020192:	2800      	cmp	r0, #0
 8020194:	d1d9      	bne.n	802014a <_strtod_l+0x73a>
 8020196:	e65a      	b.n	801fe4e <_strtod_l+0x43e>
 8020198:	2e00      	cmp	r6, #0
 802019a:	dd07      	ble.n	80201ac <_strtod_l+0x79c>
 802019c:	4649      	mov	r1, r9
 802019e:	9805      	ldr	r0, [sp, #20]
 80201a0:	4632      	mov	r2, r6
 80201a2:	f7ff f9bd 	bl	801f520 <__lshift>
 80201a6:	4681      	mov	r9, r0
 80201a8:	2800      	cmp	r0, #0
 80201aa:	d0d8      	beq.n	802015e <_strtod_l+0x74e>
 80201ac:	2f00      	cmp	r7, #0
 80201ae:	dd08      	ble.n	80201c2 <_strtod_l+0x7b2>
 80201b0:	4641      	mov	r1, r8
 80201b2:	9805      	ldr	r0, [sp, #20]
 80201b4:	463a      	mov	r2, r7
 80201b6:	f7ff f9b3 	bl	801f520 <__lshift>
 80201ba:	4680      	mov	r8, r0
 80201bc:	2800      	cmp	r0, #0
 80201be:	f43f ae46 	beq.w	801fe4e <_strtod_l+0x43e>
 80201c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80201c4:	9805      	ldr	r0, [sp, #20]
 80201c6:	464a      	mov	r2, r9
 80201c8:	f7ff fa32 	bl	801f630 <__mdiff>
 80201cc:	4604      	mov	r4, r0
 80201ce:	2800      	cmp	r0, #0
 80201d0:	f43f ae3d 	beq.w	801fe4e <_strtod_l+0x43e>
 80201d4:	68c3      	ldr	r3, [r0, #12]
 80201d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80201d8:	2300      	movs	r3, #0
 80201da:	60c3      	str	r3, [r0, #12]
 80201dc:	4641      	mov	r1, r8
 80201de:	f7ff fa0b 	bl	801f5f8 <__mcmp>
 80201e2:	2800      	cmp	r0, #0
 80201e4:	da46      	bge.n	8020274 <_strtod_l+0x864>
 80201e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80201e8:	ea53 030a 	orrs.w	r3, r3, sl
 80201ec:	d16c      	bne.n	80202c8 <_strtod_l+0x8b8>
 80201ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80201f2:	2b00      	cmp	r3, #0
 80201f4:	d168      	bne.n	80202c8 <_strtod_l+0x8b8>
 80201f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80201fa:	0d1b      	lsrs	r3, r3, #20
 80201fc:	051b      	lsls	r3, r3, #20
 80201fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020202:	d961      	bls.n	80202c8 <_strtod_l+0x8b8>
 8020204:	6963      	ldr	r3, [r4, #20]
 8020206:	b913      	cbnz	r3, 802020e <_strtod_l+0x7fe>
 8020208:	6923      	ldr	r3, [r4, #16]
 802020a:	2b01      	cmp	r3, #1
 802020c:	dd5c      	ble.n	80202c8 <_strtod_l+0x8b8>
 802020e:	4621      	mov	r1, r4
 8020210:	2201      	movs	r2, #1
 8020212:	9805      	ldr	r0, [sp, #20]
 8020214:	f7ff f984 	bl	801f520 <__lshift>
 8020218:	4641      	mov	r1, r8
 802021a:	4604      	mov	r4, r0
 802021c:	f7ff f9ec 	bl	801f5f8 <__mcmp>
 8020220:	2800      	cmp	r0, #0
 8020222:	dd51      	ble.n	80202c8 <_strtod_l+0x8b8>
 8020224:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020228:	9a08      	ldr	r2, [sp, #32]
 802022a:	0d1b      	lsrs	r3, r3, #20
 802022c:	051b      	lsls	r3, r3, #20
 802022e:	2a00      	cmp	r2, #0
 8020230:	d06b      	beq.n	802030a <_strtod_l+0x8fa>
 8020232:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020236:	d868      	bhi.n	802030a <_strtod_l+0x8fa>
 8020238:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 802023c:	f67f ae9d 	bls.w	801ff7a <_strtod_l+0x56a>
 8020240:	4b0a      	ldr	r3, [pc, #40]	@ (802026c <_strtod_l+0x85c>)
 8020242:	4650      	mov	r0, sl
 8020244:	4659      	mov	r1, fp
 8020246:	2200      	movs	r2, #0
 8020248:	f7e0 f9fe 	bl	8000648 <__aeabi_dmul>
 802024c:	4b08      	ldr	r3, [pc, #32]	@ (8020270 <_strtod_l+0x860>)
 802024e:	400b      	ands	r3, r1
 8020250:	4682      	mov	sl, r0
 8020252:	468b      	mov	fp, r1
 8020254:	2b00      	cmp	r3, #0
 8020256:	f47f ae05 	bne.w	801fe64 <_strtod_l+0x454>
 802025a:	9a05      	ldr	r2, [sp, #20]
 802025c:	2322      	movs	r3, #34	@ 0x22
 802025e:	6013      	str	r3, [r2, #0]
 8020260:	e600      	b.n	801fe64 <_strtod_l+0x454>
 8020262:	bf00      	nop
 8020264:	080228f0 	.word	0x080228f0
 8020268:	fffffc02 	.word	0xfffffc02
 802026c:	39500000 	.word	0x39500000
 8020270:	7ff00000 	.word	0x7ff00000
 8020274:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020278:	d165      	bne.n	8020346 <_strtod_l+0x936>
 802027a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802027c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020280:	b35a      	cbz	r2, 80202da <_strtod_l+0x8ca>
 8020282:	4a9f      	ldr	r2, [pc, #636]	@ (8020500 <_strtod_l+0xaf0>)
 8020284:	4293      	cmp	r3, r2
 8020286:	d12b      	bne.n	80202e0 <_strtod_l+0x8d0>
 8020288:	9b08      	ldr	r3, [sp, #32]
 802028a:	4651      	mov	r1, sl
 802028c:	b303      	cbz	r3, 80202d0 <_strtod_l+0x8c0>
 802028e:	4b9d      	ldr	r3, [pc, #628]	@ (8020504 <_strtod_l+0xaf4>)
 8020290:	465a      	mov	r2, fp
 8020292:	4013      	ands	r3, r2
 8020294:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8020298:	f04f 32ff 	mov.w	r2, #4294967295
 802029c:	d81b      	bhi.n	80202d6 <_strtod_l+0x8c6>
 802029e:	0d1b      	lsrs	r3, r3, #20
 80202a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80202a4:	fa02 f303 	lsl.w	r3, r2, r3
 80202a8:	4299      	cmp	r1, r3
 80202aa:	d119      	bne.n	80202e0 <_strtod_l+0x8d0>
 80202ac:	4b96      	ldr	r3, [pc, #600]	@ (8020508 <_strtod_l+0xaf8>)
 80202ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80202b0:	429a      	cmp	r2, r3
 80202b2:	d102      	bne.n	80202ba <_strtod_l+0x8aa>
 80202b4:	3101      	adds	r1, #1
 80202b6:	f43f adca 	beq.w	801fe4e <_strtod_l+0x43e>
 80202ba:	4b92      	ldr	r3, [pc, #584]	@ (8020504 <_strtod_l+0xaf4>)
 80202bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80202be:	401a      	ands	r2, r3
 80202c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80202c4:	f04f 0a00 	mov.w	sl, #0
 80202c8:	9b08      	ldr	r3, [sp, #32]
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d1b8      	bne.n	8020240 <_strtod_l+0x830>
 80202ce:	e5c9      	b.n	801fe64 <_strtod_l+0x454>
 80202d0:	f04f 33ff 	mov.w	r3, #4294967295
 80202d4:	e7e8      	b.n	80202a8 <_strtod_l+0x898>
 80202d6:	4613      	mov	r3, r2
 80202d8:	e7e6      	b.n	80202a8 <_strtod_l+0x898>
 80202da:	ea53 030a 	orrs.w	r3, r3, sl
 80202de:	d0a1      	beq.n	8020224 <_strtod_l+0x814>
 80202e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80202e2:	b1db      	cbz	r3, 802031c <_strtod_l+0x90c>
 80202e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80202e6:	4213      	tst	r3, r2
 80202e8:	d0ee      	beq.n	80202c8 <_strtod_l+0x8b8>
 80202ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80202ec:	9a08      	ldr	r2, [sp, #32]
 80202ee:	4650      	mov	r0, sl
 80202f0:	4659      	mov	r1, fp
 80202f2:	b1bb      	cbz	r3, 8020324 <_strtod_l+0x914>
 80202f4:	f7ff fb6e 	bl	801f9d4 <sulp>
 80202f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80202fc:	ec53 2b10 	vmov	r2, r3, d0
 8020300:	f7df ffec 	bl	80002dc <__adddf3>
 8020304:	4682      	mov	sl, r0
 8020306:	468b      	mov	fp, r1
 8020308:	e7de      	b.n	80202c8 <_strtod_l+0x8b8>
 802030a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 802030e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8020312:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8020316:	f04f 3aff 	mov.w	sl, #4294967295
 802031a:	e7d5      	b.n	80202c8 <_strtod_l+0x8b8>
 802031c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802031e:	ea13 0f0a 	tst.w	r3, sl
 8020322:	e7e1      	b.n	80202e8 <_strtod_l+0x8d8>
 8020324:	f7ff fb56 	bl	801f9d4 <sulp>
 8020328:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802032c:	ec53 2b10 	vmov	r2, r3, d0
 8020330:	f7df ffd2 	bl	80002d8 <__aeabi_dsub>
 8020334:	2200      	movs	r2, #0
 8020336:	2300      	movs	r3, #0
 8020338:	4682      	mov	sl, r0
 802033a:	468b      	mov	fp, r1
 802033c:	f7e0 fbec 	bl	8000b18 <__aeabi_dcmpeq>
 8020340:	2800      	cmp	r0, #0
 8020342:	d0c1      	beq.n	80202c8 <_strtod_l+0x8b8>
 8020344:	e619      	b.n	801ff7a <_strtod_l+0x56a>
 8020346:	4641      	mov	r1, r8
 8020348:	4620      	mov	r0, r4
 802034a:	f7ff facd 	bl	801f8e8 <__ratio>
 802034e:	ec57 6b10 	vmov	r6, r7, d0
 8020352:	2200      	movs	r2, #0
 8020354:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8020358:	4630      	mov	r0, r6
 802035a:	4639      	mov	r1, r7
 802035c:	f7e0 fbf0 	bl	8000b40 <__aeabi_dcmple>
 8020360:	2800      	cmp	r0, #0
 8020362:	d06f      	beq.n	8020444 <_strtod_l+0xa34>
 8020364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020366:	2b00      	cmp	r3, #0
 8020368:	d17a      	bne.n	8020460 <_strtod_l+0xa50>
 802036a:	f1ba 0f00 	cmp.w	sl, #0
 802036e:	d158      	bne.n	8020422 <_strtod_l+0xa12>
 8020370:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020372:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020376:	2b00      	cmp	r3, #0
 8020378:	d15a      	bne.n	8020430 <_strtod_l+0xa20>
 802037a:	4b64      	ldr	r3, [pc, #400]	@ (802050c <_strtod_l+0xafc>)
 802037c:	2200      	movs	r2, #0
 802037e:	4630      	mov	r0, r6
 8020380:	4639      	mov	r1, r7
 8020382:	f7e0 fbd3 	bl	8000b2c <__aeabi_dcmplt>
 8020386:	2800      	cmp	r0, #0
 8020388:	d159      	bne.n	802043e <_strtod_l+0xa2e>
 802038a:	4630      	mov	r0, r6
 802038c:	4639      	mov	r1, r7
 802038e:	4b60      	ldr	r3, [pc, #384]	@ (8020510 <_strtod_l+0xb00>)
 8020390:	2200      	movs	r2, #0
 8020392:	f7e0 f959 	bl	8000648 <__aeabi_dmul>
 8020396:	4606      	mov	r6, r0
 8020398:	460f      	mov	r7, r1
 802039a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 802039e:	9606      	str	r6, [sp, #24]
 80203a0:	9307      	str	r3, [sp, #28]
 80203a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80203a6:	4d57      	ldr	r5, [pc, #348]	@ (8020504 <_strtod_l+0xaf4>)
 80203a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80203ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80203ae:	401d      	ands	r5, r3
 80203b0:	4b58      	ldr	r3, [pc, #352]	@ (8020514 <_strtod_l+0xb04>)
 80203b2:	429d      	cmp	r5, r3
 80203b4:	f040 80b2 	bne.w	802051c <_strtod_l+0xb0c>
 80203b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80203ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80203be:	ec4b ab10 	vmov	d0, sl, fp
 80203c2:	f7ff f9c9 	bl	801f758 <__ulp>
 80203c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80203ca:	ec51 0b10 	vmov	r0, r1, d0
 80203ce:	f7e0 f93b 	bl	8000648 <__aeabi_dmul>
 80203d2:	4652      	mov	r2, sl
 80203d4:	465b      	mov	r3, fp
 80203d6:	f7df ff81 	bl	80002dc <__adddf3>
 80203da:	460b      	mov	r3, r1
 80203dc:	4949      	ldr	r1, [pc, #292]	@ (8020504 <_strtod_l+0xaf4>)
 80203de:	4a4e      	ldr	r2, [pc, #312]	@ (8020518 <_strtod_l+0xb08>)
 80203e0:	4019      	ands	r1, r3
 80203e2:	4291      	cmp	r1, r2
 80203e4:	4682      	mov	sl, r0
 80203e6:	d942      	bls.n	802046e <_strtod_l+0xa5e>
 80203e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80203ea:	4b47      	ldr	r3, [pc, #284]	@ (8020508 <_strtod_l+0xaf8>)
 80203ec:	429a      	cmp	r2, r3
 80203ee:	d103      	bne.n	80203f8 <_strtod_l+0x9e8>
 80203f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80203f2:	3301      	adds	r3, #1
 80203f4:	f43f ad2b 	beq.w	801fe4e <_strtod_l+0x43e>
 80203f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8020508 <_strtod_l+0xaf8>
 80203fc:	f04f 3aff 	mov.w	sl, #4294967295
 8020400:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020402:	9805      	ldr	r0, [sp, #20]
 8020404:	f7fe fe74 	bl	801f0f0 <_Bfree>
 8020408:	9805      	ldr	r0, [sp, #20]
 802040a:	4649      	mov	r1, r9
 802040c:	f7fe fe70 	bl	801f0f0 <_Bfree>
 8020410:	9805      	ldr	r0, [sp, #20]
 8020412:	4641      	mov	r1, r8
 8020414:	f7fe fe6c 	bl	801f0f0 <_Bfree>
 8020418:	9805      	ldr	r0, [sp, #20]
 802041a:	4621      	mov	r1, r4
 802041c:	f7fe fe68 	bl	801f0f0 <_Bfree>
 8020420:	e618      	b.n	8020054 <_strtod_l+0x644>
 8020422:	f1ba 0f01 	cmp.w	sl, #1
 8020426:	d103      	bne.n	8020430 <_strtod_l+0xa20>
 8020428:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802042a:	2b00      	cmp	r3, #0
 802042c:	f43f ada5 	beq.w	801ff7a <_strtod_l+0x56a>
 8020430:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80204e0 <_strtod_l+0xad0>
 8020434:	4f35      	ldr	r7, [pc, #212]	@ (802050c <_strtod_l+0xafc>)
 8020436:	ed8d 7b06 	vstr	d7, [sp, #24]
 802043a:	2600      	movs	r6, #0
 802043c:	e7b1      	b.n	80203a2 <_strtod_l+0x992>
 802043e:	4f34      	ldr	r7, [pc, #208]	@ (8020510 <_strtod_l+0xb00>)
 8020440:	2600      	movs	r6, #0
 8020442:	e7aa      	b.n	802039a <_strtod_l+0x98a>
 8020444:	4b32      	ldr	r3, [pc, #200]	@ (8020510 <_strtod_l+0xb00>)
 8020446:	4630      	mov	r0, r6
 8020448:	4639      	mov	r1, r7
 802044a:	2200      	movs	r2, #0
 802044c:	f7e0 f8fc 	bl	8000648 <__aeabi_dmul>
 8020450:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020452:	4606      	mov	r6, r0
 8020454:	460f      	mov	r7, r1
 8020456:	2b00      	cmp	r3, #0
 8020458:	d09f      	beq.n	802039a <_strtod_l+0x98a>
 802045a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 802045e:	e7a0      	b.n	80203a2 <_strtod_l+0x992>
 8020460:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80204e8 <_strtod_l+0xad8>
 8020464:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020468:	ec57 6b17 	vmov	r6, r7, d7
 802046c:	e799      	b.n	80203a2 <_strtod_l+0x992>
 802046e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8020472:	9b08      	ldr	r3, [sp, #32]
 8020474:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020478:	2b00      	cmp	r3, #0
 802047a:	d1c1      	bne.n	8020400 <_strtod_l+0x9f0>
 802047c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020480:	0d1b      	lsrs	r3, r3, #20
 8020482:	051b      	lsls	r3, r3, #20
 8020484:	429d      	cmp	r5, r3
 8020486:	d1bb      	bne.n	8020400 <_strtod_l+0x9f0>
 8020488:	4630      	mov	r0, r6
 802048a:	4639      	mov	r1, r7
 802048c:	f7e0 fc24 	bl	8000cd8 <__aeabi_d2lz>
 8020490:	f7e0 f8ac 	bl	80005ec <__aeabi_l2d>
 8020494:	4602      	mov	r2, r0
 8020496:	460b      	mov	r3, r1
 8020498:	4630      	mov	r0, r6
 802049a:	4639      	mov	r1, r7
 802049c:	f7df ff1c 	bl	80002d8 <__aeabi_dsub>
 80204a0:	460b      	mov	r3, r1
 80204a2:	4602      	mov	r2, r0
 80204a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80204a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80204ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80204ae:	ea46 060a 	orr.w	r6, r6, sl
 80204b2:	431e      	orrs	r6, r3
 80204b4:	d06f      	beq.n	8020596 <_strtod_l+0xb86>
 80204b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80204f0 <_strtod_l+0xae0>)
 80204b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204bc:	f7e0 fb36 	bl	8000b2c <__aeabi_dcmplt>
 80204c0:	2800      	cmp	r0, #0
 80204c2:	f47f accf 	bne.w	801fe64 <_strtod_l+0x454>
 80204c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80204f8 <_strtod_l+0xae8>)
 80204c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80204d0:	f7e0 fb4a 	bl	8000b68 <__aeabi_dcmpgt>
 80204d4:	2800      	cmp	r0, #0
 80204d6:	d093      	beq.n	8020400 <_strtod_l+0x9f0>
 80204d8:	e4c4      	b.n	801fe64 <_strtod_l+0x454>
 80204da:	bf00      	nop
 80204dc:	f3af 8000 	nop.w
 80204e0:	00000000 	.word	0x00000000
 80204e4:	bff00000 	.word	0xbff00000
 80204e8:	00000000 	.word	0x00000000
 80204ec:	3ff00000 	.word	0x3ff00000
 80204f0:	94a03595 	.word	0x94a03595
 80204f4:	3fdfffff 	.word	0x3fdfffff
 80204f8:	35afe535 	.word	0x35afe535
 80204fc:	3fe00000 	.word	0x3fe00000
 8020500:	000fffff 	.word	0x000fffff
 8020504:	7ff00000 	.word	0x7ff00000
 8020508:	7fefffff 	.word	0x7fefffff
 802050c:	3ff00000 	.word	0x3ff00000
 8020510:	3fe00000 	.word	0x3fe00000
 8020514:	7fe00000 	.word	0x7fe00000
 8020518:	7c9fffff 	.word	0x7c9fffff
 802051c:	9b08      	ldr	r3, [sp, #32]
 802051e:	b323      	cbz	r3, 802056a <_strtod_l+0xb5a>
 8020520:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8020524:	d821      	bhi.n	802056a <_strtod_l+0xb5a>
 8020526:	a328      	add	r3, pc, #160	@ (adr r3, 80205c8 <_strtod_l+0xbb8>)
 8020528:	e9d3 2300 	ldrd	r2, r3, [r3]
 802052c:	4630      	mov	r0, r6
 802052e:	4639      	mov	r1, r7
 8020530:	f7e0 fb06 	bl	8000b40 <__aeabi_dcmple>
 8020534:	b1a0      	cbz	r0, 8020560 <_strtod_l+0xb50>
 8020536:	4639      	mov	r1, r7
 8020538:	4630      	mov	r0, r6
 802053a:	f7e0 fb5d 	bl	8000bf8 <__aeabi_d2uiz>
 802053e:	2801      	cmp	r0, #1
 8020540:	bf38      	it	cc
 8020542:	2001      	movcc	r0, #1
 8020544:	f7e0 f806 	bl	8000554 <__aeabi_ui2d>
 8020548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802054a:	4606      	mov	r6, r0
 802054c:	460f      	mov	r7, r1
 802054e:	b9fb      	cbnz	r3, 8020590 <_strtod_l+0xb80>
 8020550:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020554:	9014      	str	r0, [sp, #80]	@ 0x50
 8020556:	9315      	str	r3, [sp, #84]	@ 0x54
 8020558:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 802055c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8020560:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020562:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8020566:	1b5b      	subs	r3, r3, r5
 8020568:	9311      	str	r3, [sp, #68]	@ 0x44
 802056a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802056e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8020572:	f7ff f8f1 	bl	801f758 <__ulp>
 8020576:	4650      	mov	r0, sl
 8020578:	ec53 2b10 	vmov	r2, r3, d0
 802057c:	4659      	mov	r1, fp
 802057e:	f7e0 f863 	bl	8000648 <__aeabi_dmul>
 8020582:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8020586:	f7df fea9 	bl	80002dc <__adddf3>
 802058a:	4682      	mov	sl, r0
 802058c:	468b      	mov	fp, r1
 802058e:	e770      	b.n	8020472 <_strtod_l+0xa62>
 8020590:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8020594:	e7e0      	b.n	8020558 <_strtod_l+0xb48>
 8020596:	a30e      	add	r3, pc, #56	@ (adr r3, 80205d0 <_strtod_l+0xbc0>)
 8020598:	e9d3 2300 	ldrd	r2, r3, [r3]
 802059c:	f7e0 fac6 	bl	8000b2c <__aeabi_dcmplt>
 80205a0:	e798      	b.n	80204d4 <_strtod_l+0xac4>
 80205a2:	2300      	movs	r3, #0
 80205a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80205a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80205a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80205aa:	6013      	str	r3, [r2, #0]
 80205ac:	f7ff ba6d 	b.w	801fa8a <_strtod_l+0x7a>
 80205b0:	2a65      	cmp	r2, #101	@ 0x65
 80205b2:	f43f ab66 	beq.w	801fc82 <_strtod_l+0x272>
 80205b6:	2a45      	cmp	r2, #69	@ 0x45
 80205b8:	f43f ab63 	beq.w	801fc82 <_strtod_l+0x272>
 80205bc:	2301      	movs	r3, #1
 80205be:	f7ff bb9e 	b.w	801fcfe <_strtod_l+0x2ee>
 80205c2:	bf00      	nop
 80205c4:	f3af 8000 	nop.w
 80205c8:	ffc00000 	.word	0xffc00000
 80205cc:	41dfffff 	.word	0x41dfffff
 80205d0:	94a03595 	.word	0x94a03595
 80205d4:	3fcfffff 	.word	0x3fcfffff

080205d8 <_strtod_r>:
 80205d8:	4b01      	ldr	r3, [pc, #4]	@ (80205e0 <_strtod_r+0x8>)
 80205da:	f7ff ba19 	b.w	801fa10 <_strtod_l>
 80205de:	bf00      	nop
 80205e0:	2000008c 	.word	0x2000008c

080205e4 <_strtol_l.constprop.0>:
 80205e4:	2b24      	cmp	r3, #36	@ 0x24
 80205e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80205ea:	4686      	mov	lr, r0
 80205ec:	4690      	mov	r8, r2
 80205ee:	d801      	bhi.n	80205f4 <_strtol_l.constprop.0+0x10>
 80205f0:	2b01      	cmp	r3, #1
 80205f2:	d106      	bne.n	8020602 <_strtol_l.constprop.0+0x1e>
 80205f4:	f7fd fdac 	bl	801e150 <__errno>
 80205f8:	2316      	movs	r3, #22
 80205fa:	6003      	str	r3, [r0, #0]
 80205fc:	2000      	movs	r0, #0
 80205fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020602:	4834      	ldr	r0, [pc, #208]	@ (80206d4 <_strtol_l.constprop.0+0xf0>)
 8020604:	460d      	mov	r5, r1
 8020606:	462a      	mov	r2, r5
 8020608:	f815 4b01 	ldrb.w	r4, [r5], #1
 802060c:	5d06      	ldrb	r6, [r0, r4]
 802060e:	f016 0608 	ands.w	r6, r6, #8
 8020612:	d1f8      	bne.n	8020606 <_strtol_l.constprop.0+0x22>
 8020614:	2c2d      	cmp	r4, #45	@ 0x2d
 8020616:	d12d      	bne.n	8020674 <_strtol_l.constprop.0+0x90>
 8020618:	782c      	ldrb	r4, [r5, #0]
 802061a:	2601      	movs	r6, #1
 802061c:	1c95      	adds	r5, r2, #2
 802061e:	f033 0210 	bics.w	r2, r3, #16
 8020622:	d109      	bne.n	8020638 <_strtol_l.constprop.0+0x54>
 8020624:	2c30      	cmp	r4, #48	@ 0x30
 8020626:	d12a      	bne.n	802067e <_strtol_l.constprop.0+0x9a>
 8020628:	782a      	ldrb	r2, [r5, #0]
 802062a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802062e:	2a58      	cmp	r2, #88	@ 0x58
 8020630:	d125      	bne.n	802067e <_strtol_l.constprop.0+0x9a>
 8020632:	786c      	ldrb	r4, [r5, #1]
 8020634:	2310      	movs	r3, #16
 8020636:	3502      	adds	r5, #2
 8020638:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802063c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020640:	2200      	movs	r2, #0
 8020642:	fbbc f9f3 	udiv	r9, ip, r3
 8020646:	4610      	mov	r0, r2
 8020648:	fb03 ca19 	mls	sl, r3, r9, ip
 802064c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8020650:	2f09      	cmp	r7, #9
 8020652:	d81b      	bhi.n	802068c <_strtol_l.constprop.0+0xa8>
 8020654:	463c      	mov	r4, r7
 8020656:	42a3      	cmp	r3, r4
 8020658:	dd27      	ble.n	80206aa <_strtol_l.constprop.0+0xc6>
 802065a:	1c57      	adds	r7, r2, #1
 802065c:	d007      	beq.n	802066e <_strtol_l.constprop.0+0x8a>
 802065e:	4581      	cmp	r9, r0
 8020660:	d320      	bcc.n	80206a4 <_strtol_l.constprop.0+0xc0>
 8020662:	d101      	bne.n	8020668 <_strtol_l.constprop.0+0x84>
 8020664:	45a2      	cmp	sl, r4
 8020666:	db1d      	blt.n	80206a4 <_strtol_l.constprop.0+0xc0>
 8020668:	fb00 4003 	mla	r0, r0, r3, r4
 802066c:	2201      	movs	r2, #1
 802066e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020672:	e7eb      	b.n	802064c <_strtol_l.constprop.0+0x68>
 8020674:	2c2b      	cmp	r4, #43	@ 0x2b
 8020676:	bf04      	itt	eq
 8020678:	782c      	ldrbeq	r4, [r5, #0]
 802067a:	1c95      	addeq	r5, r2, #2
 802067c:	e7cf      	b.n	802061e <_strtol_l.constprop.0+0x3a>
 802067e:	2b00      	cmp	r3, #0
 8020680:	d1da      	bne.n	8020638 <_strtol_l.constprop.0+0x54>
 8020682:	2c30      	cmp	r4, #48	@ 0x30
 8020684:	bf0c      	ite	eq
 8020686:	2308      	moveq	r3, #8
 8020688:	230a      	movne	r3, #10
 802068a:	e7d5      	b.n	8020638 <_strtol_l.constprop.0+0x54>
 802068c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8020690:	2f19      	cmp	r7, #25
 8020692:	d801      	bhi.n	8020698 <_strtol_l.constprop.0+0xb4>
 8020694:	3c37      	subs	r4, #55	@ 0x37
 8020696:	e7de      	b.n	8020656 <_strtol_l.constprop.0+0x72>
 8020698:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802069c:	2f19      	cmp	r7, #25
 802069e:	d804      	bhi.n	80206aa <_strtol_l.constprop.0+0xc6>
 80206a0:	3c57      	subs	r4, #87	@ 0x57
 80206a2:	e7d8      	b.n	8020656 <_strtol_l.constprop.0+0x72>
 80206a4:	f04f 32ff 	mov.w	r2, #4294967295
 80206a8:	e7e1      	b.n	802066e <_strtol_l.constprop.0+0x8a>
 80206aa:	1c53      	adds	r3, r2, #1
 80206ac:	d108      	bne.n	80206c0 <_strtol_l.constprop.0+0xdc>
 80206ae:	2322      	movs	r3, #34	@ 0x22
 80206b0:	f8ce 3000 	str.w	r3, [lr]
 80206b4:	4660      	mov	r0, ip
 80206b6:	f1b8 0f00 	cmp.w	r8, #0
 80206ba:	d0a0      	beq.n	80205fe <_strtol_l.constprop.0+0x1a>
 80206bc:	1e69      	subs	r1, r5, #1
 80206be:	e006      	b.n	80206ce <_strtol_l.constprop.0+0xea>
 80206c0:	b106      	cbz	r6, 80206c4 <_strtol_l.constprop.0+0xe0>
 80206c2:	4240      	negs	r0, r0
 80206c4:	f1b8 0f00 	cmp.w	r8, #0
 80206c8:	d099      	beq.n	80205fe <_strtol_l.constprop.0+0x1a>
 80206ca:	2a00      	cmp	r2, #0
 80206cc:	d1f6      	bne.n	80206bc <_strtol_l.constprop.0+0xd8>
 80206ce:	f8c8 1000 	str.w	r1, [r8]
 80206d2:	e794      	b.n	80205fe <_strtol_l.constprop.0+0x1a>
 80206d4:	08022919 	.word	0x08022919

080206d8 <_strtol_r>:
 80206d8:	f7ff bf84 	b.w	80205e4 <_strtol_l.constprop.0>

080206dc <__ssputs_r>:
 80206dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80206e0:	688e      	ldr	r6, [r1, #8]
 80206e2:	461f      	mov	r7, r3
 80206e4:	42be      	cmp	r6, r7
 80206e6:	680b      	ldr	r3, [r1, #0]
 80206e8:	4682      	mov	sl, r0
 80206ea:	460c      	mov	r4, r1
 80206ec:	4690      	mov	r8, r2
 80206ee:	d82d      	bhi.n	802074c <__ssputs_r+0x70>
 80206f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80206f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80206f8:	d026      	beq.n	8020748 <__ssputs_r+0x6c>
 80206fa:	6965      	ldr	r5, [r4, #20]
 80206fc:	6909      	ldr	r1, [r1, #16]
 80206fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020702:	eba3 0901 	sub.w	r9, r3, r1
 8020706:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802070a:	1c7b      	adds	r3, r7, #1
 802070c:	444b      	add	r3, r9
 802070e:	106d      	asrs	r5, r5, #1
 8020710:	429d      	cmp	r5, r3
 8020712:	bf38      	it	cc
 8020714:	461d      	movcc	r5, r3
 8020716:	0553      	lsls	r3, r2, #21
 8020718:	d527      	bpl.n	802076a <__ssputs_r+0x8e>
 802071a:	4629      	mov	r1, r5
 802071c:	f7fe fc1c 	bl	801ef58 <_malloc_r>
 8020720:	4606      	mov	r6, r0
 8020722:	b360      	cbz	r0, 802077e <__ssputs_r+0xa2>
 8020724:	6921      	ldr	r1, [r4, #16]
 8020726:	464a      	mov	r2, r9
 8020728:	f7fd fd3f 	bl	801e1aa <memcpy>
 802072c:	89a3      	ldrh	r3, [r4, #12]
 802072e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8020732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020736:	81a3      	strh	r3, [r4, #12]
 8020738:	6126      	str	r6, [r4, #16]
 802073a:	6165      	str	r5, [r4, #20]
 802073c:	444e      	add	r6, r9
 802073e:	eba5 0509 	sub.w	r5, r5, r9
 8020742:	6026      	str	r6, [r4, #0]
 8020744:	60a5      	str	r5, [r4, #8]
 8020746:	463e      	mov	r6, r7
 8020748:	42be      	cmp	r6, r7
 802074a:	d900      	bls.n	802074e <__ssputs_r+0x72>
 802074c:	463e      	mov	r6, r7
 802074e:	6820      	ldr	r0, [r4, #0]
 8020750:	4632      	mov	r2, r6
 8020752:	4641      	mov	r1, r8
 8020754:	f000 fb9e 	bl	8020e94 <memmove>
 8020758:	68a3      	ldr	r3, [r4, #8]
 802075a:	1b9b      	subs	r3, r3, r6
 802075c:	60a3      	str	r3, [r4, #8]
 802075e:	6823      	ldr	r3, [r4, #0]
 8020760:	4433      	add	r3, r6
 8020762:	6023      	str	r3, [r4, #0]
 8020764:	2000      	movs	r0, #0
 8020766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802076a:	462a      	mov	r2, r5
 802076c:	f000 ff75 	bl	802165a <_realloc_r>
 8020770:	4606      	mov	r6, r0
 8020772:	2800      	cmp	r0, #0
 8020774:	d1e0      	bne.n	8020738 <__ssputs_r+0x5c>
 8020776:	6921      	ldr	r1, [r4, #16]
 8020778:	4650      	mov	r0, sl
 802077a:	f7fe fb79 	bl	801ee70 <_free_r>
 802077e:	230c      	movs	r3, #12
 8020780:	f8ca 3000 	str.w	r3, [sl]
 8020784:	89a3      	ldrh	r3, [r4, #12]
 8020786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802078a:	81a3      	strh	r3, [r4, #12]
 802078c:	f04f 30ff 	mov.w	r0, #4294967295
 8020790:	e7e9      	b.n	8020766 <__ssputs_r+0x8a>
	...

08020794 <_svfiprintf_r>:
 8020794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020798:	4698      	mov	r8, r3
 802079a:	898b      	ldrh	r3, [r1, #12]
 802079c:	061b      	lsls	r3, r3, #24
 802079e:	b09d      	sub	sp, #116	@ 0x74
 80207a0:	4607      	mov	r7, r0
 80207a2:	460d      	mov	r5, r1
 80207a4:	4614      	mov	r4, r2
 80207a6:	d510      	bpl.n	80207ca <_svfiprintf_r+0x36>
 80207a8:	690b      	ldr	r3, [r1, #16]
 80207aa:	b973      	cbnz	r3, 80207ca <_svfiprintf_r+0x36>
 80207ac:	2140      	movs	r1, #64	@ 0x40
 80207ae:	f7fe fbd3 	bl	801ef58 <_malloc_r>
 80207b2:	6028      	str	r0, [r5, #0]
 80207b4:	6128      	str	r0, [r5, #16]
 80207b6:	b930      	cbnz	r0, 80207c6 <_svfiprintf_r+0x32>
 80207b8:	230c      	movs	r3, #12
 80207ba:	603b      	str	r3, [r7, #0]
 80207bc:	f04f 30ff 	mov.w	r0, #4294967295
 80207c0:	b01d      	add	sp, #116	@ 0x74
 80207c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207c6:	2340      	movs	r3, #64	@ 0x40
 80207c8:	616b      	str	r3, [r5, #20]
 80207ca:	2300      	movs	r3, #0
 80207cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80207ce:	2320      	movs	r3, #32
 80207d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80207d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80207d8:	2330      	movs	r3, #48	@ 0x30
 80207da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8020978 <_svfiprintf_r+0x1e4>
 80207de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80207e2:	f04f 0901 	mov.w	r9, #1
 80207e6:	4623      	mov	r3, r4
 80207e8:	469a      	mov	sl, r3
 80207ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80207ee:	b10a      	cbz	r2, 80207f4 <_svfiprintf_r+0x60>
 80207f0:	2a25      	cmp	r2, #37	@ 0x25
 80207f2:	d1f9      	bne.n	80207e8 <_svfiprintf_r+0x54>
 80207f4:	ebba 0b04 	subs.w	fp, sl, r4
 80207f8:	d00b      	beq.n	8020812 <_svfiprintf_r+0x7e>
 80207fa:	465b      	mov	r3, fp
 80207fc:	4622      	mov	r2, r4
 80207fe:	4629      	mov	r1, r5
 8020800:	4638      	mov	r0, r7
 8020802:	f7ff ff6b 	bl	80206dc <__ssputs_r>
 8020806:	3001      	adds	r0, #1
 8020808:	f000 80a7 	beq.w	802095a <_svfiprintf_r+0x1c6>
 802080c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802080e:	445a      	add	r2, fp
 8020810:	9209      	str	r2, [sp, #36]	@ 0x24
 8020812:	f89a 3000 	ldrb.w	r3, [sl]
 8020816:	2b00      	cmp	r3, #0
 8020818:	f000 809f 	beq.w	802095a <_svfiprintf_r+0x1c6>
 802081c:	2300      	movs	r3, #0
 802081e:	f04f 32ff 	mov.w	r2, #4294967295
 8020822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020826:	f10a 0a01 	add.w	sl, sl, #1
 802082a:	9304      	str	r3, [sp, #16]
 802082c:	9307      	str	r3, [sp, #28]
 802082e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020832:	931a      	str	r3, [sp, #104]	@ 0x68
 8020834:	4654      	mov	r4, sl
 8020836:	2205      	movs	r2, #5
 8020838:	f814 1b01 	ldrb.w	r1, [r4], #1
 802083c:	484e      	ldr	r0, [pc, #312]	@ (8020978 <_svfiprintf_r+0x1e4>)
 802083e:	f7df fcef 	bl	8000220 <memchr>
 8020842:	9a04      	ldr	r2, [sp, #16]
 8020844:	b9d8      	cbnz	r0, 802087e <_svfiprintf_r+0xea>
 8020846:	06d0      	lsls	r0, r2, #27
 8020848:	bf44      	itt	mi
 802084a:	2320      	movmi	r3, #32
 802084c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020850:	0711      	lsls	r1, r2, #28
 8020852:	bf44      	itt	mi
 8020854:	232b      	movmi	r3, #43	@ 0x2b
 8020856:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802085a:	f89a 3000 	ldrb.w	r3, [sl]
 802085e:	2b2a      	cmp	r3, #42	@ 0x2a
 8020860:	d015      	beq.n	802088e <_svfiprintf_r+0xfa>
 8020862:	9a07      	ldr	r2, [sp, #28]
 8020864:	4654      	mov	r4, sl
 8020866:	2000      	movs	r0, #0
 8020868:	f04f 0c0a 	mov.w	ip, #10
 802086c:	4621      	mov	r1, r4
 802086e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020872:	3b30      	subs	r3, #48	@ 0x30
 8020874:	2b09      	cmp	r3, #9
 8020876:	d94b      	bls.n	8020910 <_svfiprintf_r+0x17c>
 8020878:	b1b0      	cbz	r0, 80208a8 <_svfiprintf_r+0x114>
 802087a:	9207      	str	r2, [sp, #28]
 802087c:	e014      	b.n	80208a8 <_svfiprintf_r+0x114>
 802087e:	eba0 0308 	sub.w	r3, r0, r8
 8020882:	fa09 f303 	lsl.w	r3, r9, r3
 8020886:	4313      	orrs	r3, r2
 8020888:	9304      	str	r3, [sp, #16]
 802088a:	46a2      	mov	sl, r4
 802088c:	e7d2      	b.n	8020834 <_svfiprintf_r+0xa0>
 802088e:	9b03      	ldr	r3, [sp, #12]
 8020890:	1d19      	adds	r1, r3, #4
 8020892:	681b      	ldr	r3, [r3, #0]
 8020894:	9103      	str	r1, [sp, #12]
 8020896:	2b00      	cmp	r3, #0
 8020898:	bfbb      	ittet	lt
 802089a:	425b      	neglt	r3, r3
 802089c:	f042 0202 	orrlt.w	r2, r2, #2
 80208a0:	9307      	strge	r3, [sp, #28]
 80208a2:	9307      	strlt	r3, [sp, #28]
 80208a4:	bfb8      	it	lt
 80208a6:	9204      	strlt	r2, [sp, #16]
 80208a8:	7823      	ldrb	r3, [r4, #0]
 80208aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80208ac:	d10a      	bne.n	80208c4 <_svfiprintf_r+0x130>
 80208ae:	7863      	ldrb	r3, [r4, #1]
 80208b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80208b2:	d132      	bne.n	802091a <_svfiprintf_r+0x186>
 80208b4:	9b03      	ldr	r3, [sp, #12]
 80208b6:	1d1a      	adds	r2, r3, #4
 80208b8:	681b      	ldr	r3, [r3, #0]
 80208ba:	9203      	str	r2, [sp, #12]
 80208bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80208c0:	3402      	adds	r4, #2
 80208c2:	9305      	str	r3, [sp, #20]
 80208c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8020988 <_svfiprintf_r+0x1f4>
 80208c8:	7821      	ldrb	r1, [r4, #0]
 80208ca:	2203      	movs	r2, #3
 80208cc:	4650      	mov	r0, sl
 80208ce:	f7df fca7 	bl	8000220 <memchr>
 80208d2:	b138      	cbz	r0, 80208e4 <_svfiprintf_r+0x150>
 80208d4:	9b04      	ldr	r3, [sp, #16]
 80208d6:	eba0 000a 	sub.w	r0, r0, sl
 80208da:	2240      	movs	r2, #64	@ 0x40
 80208dc:	4082      	lsls	r2, r0
 80208de:	4313      	orrs	r3, r2
 80208e0:	3401      	adds	r4, #1
 80208e2:	9304      	str	r3, [sp, #16]
 80208e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80208e8:	4824      	ldr	r0, [pc, #144]	@ (802097c <_svfiprintf_r+0x1e8>)
 80208ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80208ee:	2206      	movs	r2, #6
 80208f0:	f7df fc96 	bl	8000220 <memchr>
 80208f4:	2800      	cmp	r0, #0
 80208f6:	d036      	beq.n	8020966 <_svfiprintf_r+0x1d2>
 80208f8:	4b21      	ldr	r3, [pc, #132]	@ (8020980 <_svfiprintf_r+0x1ec>)
 80208fa:	bb1b      	cbnz	r3, 8020944 <_svfiprintf_r+0x1b0>
 80208fc:	9b03      	ldr	r3, [sp, #12]
 80208fe:	3307      	adds	r3, #7
 8020900:	f023 0307 	bic.w	r3, r3, #7
 8020904:	3308      	adds	r3, #8
 8020906:	9303      	str	r3, [sp, #12]
 8020908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802090a:	4433      	add	r3, r6
 802090c:	9309      	str	r3, [sp, #36]	@ 0x24
 802090e:	e76a      	b.n	80207e6 <_svfiprintf_r+0x52>
 8020910:	fb0c 3202 	mla	r2, ip, r2, r3
 8020914:	460c      	mov	r4, r1
 8020916:	2001      	movs	r0, #1
 8020918:	e7a8      	b.n	802086c <_svfiprintf_r+0xd8>
 802091a:	2300      	movs	r3, #0
 802091c:	3401      	adds	r4, #1
 802091e:	9305      	str	r3, [sp, #20]
 8020920:	4619      	mov	r1, r3
 8020922:	f04f 0c0a 	mov.w	ip, #10
 8020926:	4620      	mov	r0, r4
 8020928:	f810 2b01 	ldrb.w	r2, [r0], #1
 802092c:	3a30      	subs	r2, #48	@ 0x30
 802092e:	2a09      	cmp	r2, #9
 8020930:	d903      	bls.n	802093a <_svfiprintf_r+0x1a6>
 8020932:	2b00      	cmp	r3, #0
 8020934:	d0c6      	beq.n	80208c4 <_svfiprintf_r+0x130>
 8020936:	9105      	str	r1, [sp, #20]
 8020938:	e7c4      	b.n	80208c4 <_svfiprintf_r+0x130>
 802093a:	fb0c 2101 	mla	r1, ip, r1, r2
 802093e:	4604      	mov	r4, r0
 8020940:	2301      	movs	r3, #1
 8020942:	e7f0      	b.n	8020926 <_svfiprintf_r+0x192>
 8020944:	ab03      	add	r3, sp, #12
 8020946:	9300      	str	r3, [sp, #0]
 8020948:	462a      	mov	r2, r5
 802094a:	4b0e      	ldr	r3, [pc, #56]	@ (8020984 <_svfiprintf_r+0x1f0>)
 802094c:	a904      	add	r1, sp, #16
 802094e:	4638      	mov	r0, r7
 8020950:	f7fc faf2 	bl	801cf38 <_printf_float>
 8020954:	1c42      	adds	r2, r0, #1
 8020956:	4606      	mov	r6, r0
 8020958:	d1d6      	bne.n	8020908 <_svfiprintf_r+0x174>
 802095a:	89ab      	ldrh	r3, [r5, #12]
 802095c:	065b      	lsls	r3, r3, #25
 802095e:	f53f af2d 	bmi.w	80207bc <_svfiprintf_r+0x28>
 8020962:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020964:	e72c      	b.n	80207c0 <_svfiprintf_r+0x2c>
 8020966:	ab03      	add	r3, sp, #12
 8020968:	9300      	str	r3, [sp, #0]
 802096a:	462a      	mov	r2, r5
 802096c:	4b05      	ldr	r3, [pc, #20]	@ (8020984 <_svfiprintf_r+0x1f0>)
 802096e:	a904      	add	r1, sp, #16
 8020970:	4638      	mov	r0, r7
 8020972:	f7fc fd79 	bl	801d468 <_printf_i>
 8020976:	e7ed      	b.n	8020954 <_svfiprintf_r+0x1c0>
 8020978:	08022a19 	.word	0x08022a19
 802097c:	08022a23 	.word	0x08022a23
 8020980:	0801cf39 	.word	0x0801cf39
 8020984:	080206dd 	.word	0x080206dd
 8020988:	08022a1f 	.word	0x08022a1f

0802098c <__sfputc_r>:
 802098c:	6893      	ldr	r3, [r2, #8]
 802098e:	3b01      	subs	r3, #1
 8020990:	2b00      	cmp	r3, #0
 8020992:	b410      	push	{r4}
 8020994:	6093      	str	r3, [r2, #8]
 8020996:	da08      	bge.n	80209aa <__sfputc_r+0x1e>
 8020998:	6994      	ldr	r4, [r2, #24]
 802099a:	42a3      	cmp	r3, r4
 802099c:	db01      	blt.n	80209a2 <__sfputc_r+0x16>
 802099e:	290a      	cmp	r1, #10
 80209a0:	d103      	bne.n	80209aa <__sfputc_r+0x1e>
 80209a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80209a6:	f7fd baec 	b.w	801df82 <__swbuf_r>
 80209aa:	6813      	ldr	r3, [r2, #0]
 80209ac:	1c58      	adds	r0, r3, #1
 80209ae:	6010      	str	r0, [r2, #0]
 80209b0:	7019      	strb	r1, [r3, #0]
 80209b2:	4608      	mov	r0, r1
 80209b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80209b8:	4770      	bx	lr

080209ba <__sfputs_r>:
 80209ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80209bc:	4606      	mov	r6, r0
 80209be:	460f      	mov	r7, r1
 80209c0:	4614      	mov	r4, r2
 80209c2:	18d5      	adds	r5, r2, r3
 80209c4:	42ac      	cmp	r4, r5
 80209c6:	d101      	bne.n	80209cc <__sfputs_r+0x12>
 80209c8:	2000      	movs	r0, #0
 80209ca:	e007      	b.n	80209dc <__sfputs_r+0x22>
 80209cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80209d0:	463a      	mov	r2, r7
 80209d2:	4630      	mov	r0, r6
 80209d4:	f7ff ffda 	bl	802098c <__sfputc_r>
 80209d8:	1c43      	adds	r3, r0, #1
 80209da:	d1f3      	bne.n	80209c4 <__sfputs_r+0xa>
 80209dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080209e0 <_vfiprintf_r>:
 80209e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209e4:	460d      	mov	r5, r1
 80209e6:	b09d      	sub	sp, #116	@ 0x74
 80209e8:	4614      	mov	r4, r2
 80209ea:	4698      	mov	r8, r3
 80209ec:	4606      	mov	r6, r0
 80209ee:	b118      	cbz	r0, 80209f8 <_vfiprintf_r+0x18>
 80209f0:	6a03      	ldr	r3, [r0, #32]
 80209f2:	b90b      	cbnz	r3, 80209f8 <_vfiprintf_r+0x18>
 80209f4:	f7fd f8f8 	bl	801dbe8 <__sinit>
 80209f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80209fa:	07d9      	lsls	r1, r3, #31
 80209fc:	d405      	bmi.n	8020a0a <_vfiprintf_r+0x2a>
 80209fe:	89ab      	ldrh	r3, [r5, #12]
 8020a00:	059a      	lsls	r2, r3, #22
 8020a02:	d402      	bmi.n	8020a0a <_vfiprintf_r+0x2a>
 8020a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020a06:	f7fd fbce 	bl	801e1a6 <__retarget_lock_acquire_recursive>
 8020a0a:	89ab      	ldrh	r3, [r5, #12]
 8020a0c:	071b      	lsls	r3, r3, #28
 8020a0e:	d501      	bpl.n	8020a14 <_vfiprintf_r+0x34>
 8020a10:	692b      	ldr	r3, [r5, #16]
 8020a12:	b99b      	cbnz	r3, 8020a3c <_vfiprintf_r+0x5c>
 8020a14:	4629      	mov	r1, r5
 8020a16:	4630      	mov	r0, r6
 8020a18:	f7fd faf2 	bl	801e000 <__swsetup_r>
 8020a1c:	b170      	cbz	r0, 8020a3c <_vfiprintf_r+0x5c>
 8020a1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020a20:	07dc      	lsls	r4, r3, #31
 8020a22:	d504      	bpl.n	8020a2e <_vfiprintf_r+0x4e>
 8020a24:	f04f 30ff 	mov.w	r0, #4294967295
 8020a28:	b01d      	add	sp, #116	@ 0x74
 8020a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a2e:	89ab      	ldrh	r3, [r5, #12]
 8020a30:	0598      	lsls	r0, r3, #22
 8020a32:	d4f7      	bmi.n	8020a24 <_vfiprintf_r+0x44>
 8020a34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020a36:	f7fd fbb7 	bl	801e1a8 <__retarget_lock_release_recursive>
 8020a3a:	e7f3      	b.n	8020a24 <_vfiprintf_r+0x44>
 8020a3c:	2300      	movs	r3, #0
 8020a3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020a40:	2320      	movs	r3, #32
 8020a42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020a46:	f8cd 800c 	str.w	r8, [sp, #12]
 8020a4a:	2330      	movs	r3, #48	@ 0x30
 8020a4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8020bfc <_vfiprintf_r+0x21c>
 8020a50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020a54:	f04f 0901 	mov.w	r9, #1
 8020a58:	4623      	mov	r3, r4
 8020a5a:	469a      	mov	sl, r3
 8020a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020a60:	b10a      	cbz	r2, 8020a66 <_vfiprintf_r+0x86>
 8020a62:	2a25      	cmp	r2, #37	@ 0x25
 8020a64:	d1f9      	bne.n	8020a5a <_vfiprintf_r+0x7a>
 8020a66:	ebba 0b04 	subs.w	fp, sl, r4
 8020a6a:	d00b      	beq.n	8020a84 <_vfiprintf_r+0xa4>
 8020a6c:	465b      	mov	r3, fp
 8020a6e:	4622      	mov	r2, r4
 8020a70:	4629      	mov	r1, r5
 8020a72:	4630      	mov	r0, r6
 8020a74:	f7ff ffa1 	bl	80209ba <__sfputs_r>
 8020a78:	3001      	adds	r0, #1
 8020a7a:	f000 80a7 	beq.w	8020bcc <_vfiprintf_r+0x1ec>
 8020a7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020a80:	445a      	add	r2, fp
 8020a82:	9209      	str	r2, [sp, #36]	@ 0x24
 8020a84:	f89a 3000 	ldrb.w	r3, [sl]
 8020a88:	2b00      	cmp	r3, #0
 8020a8a:	f000 809f 	beq.w	8020bcc <_vfiprintf_r+0x1ec>
 8020a8e:	2300      	movs	r3, #0
 8020a90:	f04f 32ff 	mov.w	r2, #4294967295
 8020a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020a98:	f10a 0a01 	add.w	sl, sl, #1
 8020a9c:	9304      	str	r3, [sp, #16]
 8020a9e:	9307      	str	r3, [sp, #28]
 8020aa0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020aa4:	931a      	str	r3, [sp, #104]	@ 0x68
 8020aa6:	4654      	mov	r4, sl
 8020aa8:	2205      	movs	r2, #5
 8020aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020aae:	4853      	ldr	r0, [pc, #332]	@ (8020bfc <_vfiprintf_r+0x21c>)
 8020ab0:	f7df fbb6 	bl	8000220 <memchr>
 8020ab4:	9a04      	ldr	r2, [sp, #16]
 8020ab6:	b9d8      	cbnz	r0, 8020af0 <_vfiprintf_r+0x110>
 8020ab8:	06d1      	lsls	r1, r2, #27
 8020aba:	bf44      	itt	mi
 8020abc:	2320      	movmi	r3, #32
 8020abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020ac2:	0713      	lsls	r3, r2, #28
 8020ac4:	bf44      	itt	mi
 8020ac6:	232b      	movmi	r3, #43	@ 0x2b
 8020ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020acc:	f89a 3000 	ldrb.w	r3, [sl]
 8020ad0:	2b2a      	cmp	r3, #42	@ 0x2a
 8020ad2:	d015      	beq.n	8020b00 <_vfiprintf_r+0x120>
 8020ad4:	9a07      	ldr	r2, [sp, #28]
 8020ad6:	4654      	mov	r4, sl
 8020ad8:	2000      	movs	r0, #0
 8020ada:	f04f 0c0a 	mov.w	ip, #10
 8020ade:	4621      	mov	r1, r4
 8020ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020ae4:	3b30      	subs	r3, #48	@ 0x30
 8020ae6:	2b09      	cmp	r3, #9
 8020ae8:	d94b      	bls.n	8020b82 <_vfiprintf_r+0x1a2>
 8020aea:	b1b0      	cbz	r0, 8020b1a <_vfiprintf_r+0x13a>
 8020aec:	9207      	str	r2, [sp, #28]
 8020aee:	e014      	b.n	8020b1a <_vfiprintf_r+0x13a>
 8020af0:	eba0 0308 	sub.w	r3, r0, r8
 8020af4:	fa09 f303 	lsl.w	r3, r9, r3
 8020af8:	4313      	orrs	r3, r2
 8020afa:	9304      	str	r3, [sp, #16]
 8020afc:	46a2      	mov	sl, r4
 8020afe:	e7d2      	b.n	8020aa6 <_vfiprintf_r+0xc6>
 8020b00:	9b03      	ldr	r3, [sp, #12]
 8020b02:	1d19      	adds	r1, r3, #4
 8020b04:	681b      	ldr	r3, [r3, #0]
 8020b06:	9103      	str	r1, [sp, #12]
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	bfbb      	ittet	lt
 8020b0c:	425b      	neglt	r3, r3
 8020b0e:	f042 0202 	orrlt.w	r2, r2, #2
 8020b12:	9307      	strge	r3, [sp, #28]
 8020b14:	9307      	strlt	r3, [sp, #28]
 8020b16:	bfb8      	it	lt
 8020b18:	9204      	strlt	r2, [sp, #16]
 8020b1a:	7823      	ldrb	r3, [r4, #0]
 8020b1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8020b1e:	d10a      	bne.n	8020b36 <_vfiprintf_r+0x156>
 8020b20:	7863      	ldrb	r3, [r4, #1]
 8020b22:	2b2a      	cmp	r3, #42	@ 0x2a
 8020b24:	d132      	bne.n	8020b8c <_vfiprintf_r+0x1ac>
 8020b26:	9b03      	ldr	r3, [sp, #12]
 8020b28:	1d1a      	adds	r2, r3, #4
 8020b2a:	681b      	ldr	r3, [r3, #0]
 8020b2c:	9203      	str	r2, [sp, #12]
 8020b2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020b32:	3402      	adds	r4, #2
 8020b34:	9305      	str	r3, [sp, #20]
 8020b36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8020c0c <_vfiprintf_r+0x22c>
 8020b3a:	7821      	ldrb	r1, [r4, #0]
 8020b3c:	2203      	movs	r2, #3
 8020b3e:	4650      	mov	r0, sl
 8020b40:	f7df fb6e 	bl	8000220 <memchr>
 8020b44:	b138      	cbz	r0, 8020b56 <_vfiprintf_r+0x176>
 8020b46:	9b04      	ldr	r3, [sp, #16]
 8020b48:	eba0 000a 	sub.w	r0, r0, sl
 8020b4c:	2240      	movs	r2, #64	@ 0x40
 8020b4e:	4082      	lsls	r2, r0
 8020b50:	4313      	orrs	r3, r2
 8020b52:	3401      	adds	r4, #1
 8020b54:	9304      	str	r3, [sp, #16]
 8020b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020b5a:	4829      	ldr	r0, [pc, #164]	@ (8020c00 <_vfiprintf_r+0x220>)
 8020b5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020b60:	2206      	movs	r2, #6
 8020b62:	f7df fb5d 	bl	8000220 <memchr>
 8020b66:	2800      	cmp	r0, #0
 8020b68:	d03f      	beq.n	8020bea <_vfiprintf_r+0x20a>
 8020b6a:	4b26      	ldr	r3, [pc, #152]	@ (8020c04 <_vfiprintf_r+0x224>)
 8020b6c:	bb1b      	cbnz	r3, 8020bb6 <_vfiprintf_r+0x1d6>
 8020b6e:	9b03      	ldr	r3, [sp, #12]
 8020b70:	3307      	adds	r3, #7
 8020b72:	f023 0307 	bic.w	r3, r3, #7
 8020b76:	3308      	adds	r3, #8
 8020b78:	9303      	str	r3, [sp, #12]
 8020b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b7c:	443b      	add	r3, r7
 8020b7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b80:	e76a      	b.n	8020a58 <_vfiprintf_r+0x78>
 8020b82:	fb0c 3202 	mla	r2, ip, r2, r3
 8020b86:	460c      	mov	r4, r1
 8020b88:	2001      	movs	r0, #1
 8020b8a:	e7a8      	b.n	8020ade <_vfiprintf_r+0xfe>
 8020b8c:	2300      	movs	r3, #0
 8020b8e:	3401      	adds	r4, #1
 8020b90:	9305      	str	r3, [sp, #20]
 8020b92:	4619      	mov	r1, r3
 8020b94:	f04f 0c0a 	mov.w	ip, #10
 8020b98:	4620      	mov	r0, r4
 8020b9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020b9e:	3a30      	subs	r2, #48	@ 0x30
 8020ba0:	2a09      	cmp	r2, #9
 8020ba2:	d903      	bls.n	8020bac <_vfiprintf_r+0x1cc>
 8020ba4:	2b00      	cmp	r3, #0
 8020ba6:	d0c6      	beq.n	8020b36 <_vfiprintf_r+0x156>
 8020ba8:	9105      	str	r1, [sp, #20]
 8020baa:	e7c4      	b.n	8020b36 <_vfiprintf_r+0x156>
 8020bac:	fb0c 2101 	mla	r1, ip, r1, r2
 8020bb0:	4604      	mov	r4, r0
 8020bb2:	2301      	movs	r3, #1
 8020bb4:	e7f0      	b.n	8020b98 <_vfiprintf_r+0x1b8>
 8020bb6:	ab03      	add	r3, sp, #12
 8020bb8:	9300      	str	r3, [sp, #0]
 8020bba:	462a      	mov	r2, r5
 8020bbc:	4b12      	ldr	r3, [pc, #72]	@ (8020c08 <_vfiprintf_r+0x228>)
 8020bbe:	a904      	add	r1, sp, #16
 8020bc0:	4630      	mov	r0, r6
 8020bc2:	f7fc f9b9 	bl	801cf38 <_printf_float>
 8020bc6:	4607      	mov	r7, r0
 8020bc8:	1c78      	adds	r0, r7, #1
 8020bca:	d1d6      	bne.n	8020b7a <_vfiprintf_r+0x19a>
 8020bcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020bce:	07d9      	lsls	r1, r3, #31
 8020bd0:	d405      	bmi.n	8020bde <_vfiprintf_r+0x1fe>
 8020bd2:	89ab      	ldrh	r3, [r5, #12]
 8020bd4:	059a      	lsls	r2, r3, #22
 8020bd6:	d402      	bmi.n	8020bde <_vfiprintf_r+0x1fe>
 8020bd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020bda:	f7fd fae5 	bl	801e1a8 <__retarget_lock_release_recursive>
 8020bde:	89ab      	ldrh	r3, [r5, #12]
 8020be0:	065b      	lsls	r3, r3, #25
 8020be2:	f53f af1f 	bmi.w	8020a24 <_vfiprintf_r+0x44>
 8020be6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020be8:	e71e      	b.n	8020a28 <_vfiprintf_r+0x48>
 8020bea:	ab03      	add	r3, sp, #12
 8020bec:	9300      	str	r3, [sp, #0]
 8020bee:	462a      	mov	r2, r5
 8020bf0:	4b05      	ldr	r3, [pc, #20]	@ (8020c08 <_vfiprintf_r+0x228>)
 8020bf2:	a904      	add	r1, sp, #16
 8020bf4:	4630      	mov	r0, r6
 8020bf6:	f7fc fc37 	bl	801d468 <_printf_i>
 8020bfa:	e7e4      	b.n	8020bc6 <_vfiprintf_r+0x1e6>
 8020bfc:	08022a19 	.word	0x08022a19
 8020c00:	08022a23 	.word	0x08022a23
 8020c04:	0801cf39 	.word	0x0801cf39
 8020c08:	080209bb 	.word	0x080209bb
 8020c0c:	08022a1f 	.word	0x08022a1f

08020c10 <__sflush_r>:
 8020c10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020c18:	0716      	lsls	r6, r2, #28
 8020c1a:	4605      	mov	r5, r0
 8020c1c:	460c      	mov	r4, r1
 8020c1e:	d454      	bmi.n	8020cca <__sflush_r+0xba>
 8020c20:	684b      	ldr	r3, [r1, #4]
 8020c22:	2b00      	cmp	r3, #0
 8020c24:	dc02      	bgt.n	8020c2c <__sflush_r+0x1c>
 8020c26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8020c28:	2b00      	cmp	r3, #0
 8020c2a:	dd48      	ble.n	8020cbe <__sflush_r+0xae>
 8020c2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020c2e:	2e00      	cmp	r6, #0
 8020c30:	d045      	beq.n	8020cbe <__sflush_r+0xae>
 8020c32:	2300      	movs	r3, #0
 8020c34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8020c38:	682f      	ldr	r7, [r5, #0]
 8020c3a:	6a21      	ldr	r1, [r4, #32]
 8020c3c:	602b      	str	r3, [r5, #0]
 8020c3e:	d030      	beq.n	8020ca2 <__sflush_r+0x92>
 8020c40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020c42:	89a3      	ldrh	r3, [r4, #12]
 8020c44:	0759      	lsls	r1, r3, #29
 8020c46:	d505      	bpl.n	8020c54 <__sflush_r+0x44>
 8020c48:	6863      	ldr	r3, [r4, #4]
 8020c4a:	1ad2      	subs	r2, r2, r3
 8020c4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020c4e:	b10b      	cbz	r3, 8020c54 <__sflush_r+0x44>
 8020c50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020c52:	1ad2      	subs	r2, r2, r3
 8020c54:	2300      	movs	r3, #0
 8020c56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020c58:	6a21      	ldr	r1, [r4, #32]
 8020c5a:	4628      	mov	r0, r5
 8020c5c:	47b0      	blx	r6
 8020c5e:	1c43      	adds	r3, r0, #1
 8020c60:	89a3      	ldrh	r3, [r4, #12]
 8020c62:	d106      	bne.n	8020c72 <__sflush_r+0x62>
 8020c64:	6829      	ldr	r1, [r5, #0]
 8020c66:	291d      	cmp	r1, #29
 8020c68:	d82b      	bhi.n	8020cc2 <__sflush_r+0xb2>
 8020c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8020d14 <__sflush_r+0x104>)
 8020c6c:	410a      	asrs	r2, r1
 8020c6e:	07d6      	lsls	r6, r2, #31
 8020c70:	d427      	bmi.n	8020cc2 <__sflush_r+0xb2>
 8020c72:	2200      	movs	r2, #0
 8020c74:	6062      	str	r2, [r4, #4]
 8020c76:	04d9      	lsls	r1, r3, #19
 8020c78:	6922      	ldr	r2, [r4, #16]
 8020c7a:	6022      	str	r2, [r4, #0]
 8020c7c:	d504      	bpl.n	8020c88 <__sflush_r+0x78>
 8020c7e:	1c42      	adds	r2, r0, #1
 8020c80:	d101      	bne.n	8020c86 <__sflush_r+0x76>
 8020c82:	682b      	ldr	r3, [r5, #0]
 8020c84:	b903      	cbnz	r3, 8020c88 <__sflush_r+0x78>
 8020c86:	6560      	str	r0, [r4, #84]	@ 0x54
 8020c88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020c8a:	602f      	str	r7, [r5, #0]
 8020c8c:	b1b9      	cbz	r1, 8020cbe <__sflush_r+0xae>
 8020c8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020c92:	4299      	cmp	r1, r3
 8020c94:	d002      	beq.n	8020c9c <__sflush_r+0x8c>
 8020c96:	4628      	mov	r0, r5
 8020c98:	f7fe f8ea 	bl	801ee70 <_free_r>
 8020c9c:	2300      	movs	r3, #0
 8020c9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8020ca0:	e00d      	b.n	8020cbe <__sflush_r+0xae>
 8020ca2:	2301      	movs	r3, #1
 8020ca4:	4628      	mov	r0, r5
 8020ca6:	47b0      	blx	r6
 8020ca8:	4602      	mov	r2, r0
 8020caa:	1c50      	adds	r0, r2, #1
 8020cac:	d1c9      	bne.n	8020c42 <__sflush_r+0x32>
 8020cae:	682b      	ldr	r3, [r5, #0]
 8020cb0:	2b00      	cmp	r3, #0
 8020cb2:	d0c6      	beq.n	8020c42 <__sflush_r+0x32>
 8020cb4:	2b1d      	cmp	r3, #29
 8020cb6:	d001      	beq.n	8020cbc <__sflush_r+0xac>
 8020cb8:	2b16      	cmp	r3, #22
 8020cba:	d11e      	bne.n	8020cfa <__sflush_r+0xea>
 8020cbc:	602f      	str	r7, [r5, #0]
 8020cbe:	2000      	movs	r0, #0
 8020cc0:	e022      	b.n	8020d08 <__sflush_r+0xf8>
 8020cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020cc6:	b21b      	sxth	r3, r3
 8020cc8:	e01b      	b.n	8020d02 <__sflush_r+0xf2>
 8020cca:	690f      	ldr	r7, [r1, #16]
 8020ccc:	2f00      	cmp	r7, #0
 8020cce:	d0f6      	beq.n	8020cbe <__sflush_r+0xae>
 8020cd0:	0793      	lsls	r3, r2, #30
 8020cd2:	680e      	ldr	r6, [r1, #0]
 8020cd4:	bf08      	it	eq
 8020cd6:	694b      	ldreq	r3, [r1, #20]
 8020cd8:	600f      	str	r7, [r1, #0]
 8020cda:	bf18      	it	ne
 8020cdc:	2300      	movne	r3, #0
 8020cde:	eba6 0807 	sub.w	r8, r6, r7
 8020ce2:	608b      	str	r3, [r1, #8]
 8020ce4:	f1b8 0f00 	cmp.w	r8, #0
 8020ce8:	dde9      	ble.n	8020cbe <__sflush_r+0xae>
 8020cea:	6a21      	ldr	r1, [r4, #32]
 8020cec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8020cee:	4643      	mov	r3, r8
 8020cf0:	463a      	mov	r2, r7
 8020cf2:	4628      	mov	r0, r5
 8020cf4:	47b0      	blx	r6
 8020cf6:	2800      	cmp	r0, #0
 8020cf8:	dc08      	bgt.n	8020d0c <__sflush_r+0xfc>
 8020cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020d02:	81a3      	strh	r3, [r4, #12]
 8020d04:	f04f 30ff 	mov.w	r0, #4294967295
 8020d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020d0c:	4407      	add	r7, r0
 8020d0e:	eba8 0800 	sub.w	r8, r8, r0
 8020d12:	e7e7      	b.n	8020ce4 <__sflush_r+0xd4>
 8020d14:	dfbffffe 	.word	0xdfbffffe

08020d18 <_fflush_r>:
 8020d18:	b538      	push	{r3, r4, r5, lr}
 8020d1a:	690b      	ldr	r3, [r1, #16]
 8020d1c:	4605      	mov	r5, r0
 8020d1e:	460c      	mov	r4, r1
 8020d20:	b913      	cbnz	r3, 8020d28 <_fflush_r+0x10>
 8020d22:	2500      	movs	r5, #0
 8020d24:	4628      	mov	r0, r5
 8020d26:	bd38      	pop	{r3, r4, r5, pc}
 8020d28:	b118      	cbz	r0, 8020d32 <_fflush_r+0x1a>
 8020d2a:	6a03      	ldr	r3, [r0, #32]
 8020d2c:	b90b      	cbnz	r3, 8020d32 <_fflush_r+0x1a>
 8020d2e:	f7fc ff5b 	bl	801dbe8 <__sinit>
 8020d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d0f3      	beq.n	8020d22 <_fflush_r+0xa>
 8020d3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8020d3c:	07d0      	lsls	r0, r2, #31
 8020d3e:	d404      	bmi.n	8020d4a <_fflush_r+0x32>
 8020d40:	0599      	lsls	r1, r3, #22
 8020d42:	d402      	bmi.n	8020d4a <_fflush_r+0x32>
 8020d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020d46:	f7fd fa2e 	bl	801e1a6 <__retarget_lock_acquire_recursive>
 8020d4a:	4628      	mov	r0, r5
 8020d4c:	4621      	mov	r1, r4
 8020d4e:	f7ff ff5f 	bl	8020c10 <__sflush_r>
 8020d52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020d54:	07da      	lsls	r2, r3, #31
 8020d56:	4605      	mov	r5, r0
 8020d58:	d4e4      	bmi.n	8020d24 <_fflush_r+0xc>
 8020d5a:	89a3      	ldrh	r3, [r4, #12]
 8020d5c:	059b      	lsls	r3, r3, #22
 8020d5e:	d4e1      	bmi.n	8020d24 <_fflush_r+0xc>
 8020d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020d62:	f7fd fa21 	bl	801e1a8 <__retarget_lock_release_recursive>
 8020d66:	e7dd      	b.n	8020d24 <_fflush_r+0xc>

08020d68 <__swhatbuf_r>:
 8020d68:	b570      	push	{r4, r5, r6, lr}
 8020d6a:	460c      	mov	r4, r1
 8020d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d70:	2900      	cmp	r1, #0
 8020d72:	b096      	sub	sp, #88	@ 0x58
 8020d74:	4615      	mov	r5, r2
 8020d76:	461e      	mov	r6, r3
 8020d78:	da0d      	bge.n	8020d96 <__swhatbuf_r+0x2e>
 8020d7a:	89a3      	ldrh	r3, [r4, #12]
 8020d7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8020d80:	f04f 0100 	mov.w	r1, #0
 8020d84:	bf14      	ite	ne
 8020d86:	2340      	movne	r3, #64	@ 0x40
 8020d88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8020d8c:	2000      	movs	r0, #0
 8020d8e:	6031      	str	r1, [r6, #0]
 8020d90:	602b      	str	r3, [r5, #0]
 8020d92:	b016      	add	sp, #88	@ 0x58
 8020d94:	bd70      	pop	{r4, r5, r6, pc}
 8020d96:	466a      	mov	r2, sp
 8020d98:	f000 f8a8 	bl	8020eec <_fstat_r>
 8020d9c:	2800      	cmp	r0, #0
 8020d9e:	dbec      	blt.n	8020d7a <__swhatbuf_r+0x12>
 8020da0:	9901      	ldr	r1, [sp, #4]
 8020da2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8020da6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8020daa:	4259      	negs	r1, r3
 8020dac:	4159      	adcs	r1, r3
 8020dae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020db2:	e7eb      	b.n	8020d8c <__swhatbuf_r+0x24>

08020db4 <__smakebuf_r>:
 8020db4:	898b      	ldrh	r3, [r1, #12]
 8020db6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020db8:	079d      	lsls	r5, r3, #30
 8020dba:	4606      	mov	r6, r0
 8020dbc:	460c      	mov	r4, r1
 8020dbe:	d507      	bpl.n	8020dd0 <__smakebuf_r+0x1c>
 8020dc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8020dc4:	6023      	str	r3, [r4, #0]
 8020dc6:	6123      	str	r3, [r4, #16]
 8020dc8:	2301      	movs	r3, #1
 8020dca:	6163      	str	r3, [r4, #20]
 8020dcc:	b003      	add	sp, #12
 8020dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020dd0:	ab01      	add	r3, sp, #4
 8020dd2:	466a      	mov	r2, sp
 8020dd4:	f7ff ffc8 	bl	8020d68 <__swhatbuf_r>
 8020dd8:	9f00      	ldr	r7, [sp, #0]
 8020dda:	4605      	mov	r5, r0
 8020ddc:	4639      	mov	r1, r7
 8020dde:	4630      	mov	r0, r6
 8020de0:	f7fe f8ba 	bl	801ef58 <_malloc_r>
 8020de4:	b948      	cbnz	r0, 8020dfa <__smakebuf_r+0x46>
 8020de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020dea:	059a      	lsls	r2, r3, #22
 8020dec:	d4ee      	bmi.n	8020dcc <__smakebuf_r+0x18>
 8020dee:	f023 0303 	bic.w	r3, r3, #3
 8020df2:	f043 0302 	orr.w	r3, r3, #2
 8020df6:	81a3      	strh	r3, [r4, #12]
 8020df8:	e7e2      	b.n	8020dc0 <__smakebuf_r+0xc>
 8020dfa:	89a3      	ldrh	r3, [r4, #12]
 8020dfc:	6020      	str	r0, [r4, #0]
 8020dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020e02:	81a3      	strh	r3, [r4, #12]
 8020e04:	9b01      	ldr	r3, [sp, #4]
 8020e06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8020e0a:	b15b      	cbz	r3, 8020e24 <__smakebuf_r+0x70>
 8020e0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020e10:	4630      	mov	r0, r6
 8020e12:	f000 f87d 	bl	8020f10 <_isatty_r>
 8020e16:	b128      	cbz	r0, 8020e24 <__smakebuf_r+0x70>
 8020e18:	89a3      	ldrh	r3, [r4, #12]
 8020e1a:	f023 0303 	bic.w	r3, r3, #3
 8020e1e:	f043 0301 	orr.w	r3, r3, #1
 8020e22:	81a3      	strh	r3, [r4, #12]
 8020e24:	89a3      	ldrh	r3, [r4, #12]
 8020e26:	431d      	orrs	r5, r3
 8020e28:	81a5      	strh	r5, [r4, #12]
 8020e2a:	e7cf      	b.n	8020dcc <__smakebuf_r+0x18>

08020e2c <_putc_r>:
 8020e2c:	b570      	push	{r4, r5, r6, lr}
 8020e2e:	460d      	mov	r5, r1
 8020e30:	4614      	mov	r4, r2
 8020e32:	4606      	mov	r6, r0
 8020e34:	b118      	cbz	r0, 8020e3e <_putc_r+0x12>
 8020e36:	6a03      	ldr	r3, [r0, #32]
 8020e38:	b90b      	cbnz	r3, 8020e3e <_putc_r+0x12>
 8020e3a:	f7fc fed5 	bl	801dbe8 <__sinit>
 8020e3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020e40:	07d8      	lsls	r0, r3, #31
 8020e42:	d405      	bmi.n	8020e50 <_putc_r+0x24>
 8020e44:	89a3      	ldrh	r3, [r4, #12]
 8020e46:	0599      	lsls	r1, r3, #22
 8020e48:	d402      	bmi.n	8020e50 <_putc_r+0x24>
 8020e4a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020e4c:	f7fd f9ab 	bl	801e1a6 <__retarget_lock_acquire_recursive>
 8020e50:	68a3      	ldr	r3, [r4, #8]
 8020e52:	3b01      	subs	r3, #1
 8020e54:	2b00      	cmp	r3, #0
 8020e56:	60a3      	str	r3, [r4, #8]
 8020e58:	da05      	bge.n	8020e66 <_putc_r+0x3a>
 8020e5a:	69a2      	ldr	r2, [r4, #24]
 8020e5c:	4293      	cmp	r3, r2
 8020e5e:	db12      	blt.n	8020e86 <_putc_r+0x5a>
 8020e60:	b2eb      	uxtb	r3, r5
 8020e62:	2b0a      	cmp	r3, #10
 8020e64:	d00f      	beq.n	8020e86 <_putc_r+0x5a>
 8020e66:	6823      	ldr	r3, [r4, #0]
 8020e68:	1c5a      	adds	r2, r3, #1
 8020e6a:	6022      	str	r2, [r4, #0]
 8020e6c:	701d      	strb	r5, [r3, #0]
 8020e6e:	b2ed      	uxtb	r5, r5
 8020e70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020e72:	07da      	lsls	r2, r3, #31
 8020e74:	d405      	bmi.n	8020e82 <_putc_r+0x56>
 8020e76:	89a3      	ldrh	r3, [r4, #12]
 8020e78:	059b      	lsls	r3, r3, #22
 8020e7a:	d402      	bmi.n	8020e82 <_putc_r+0x56>
 8020e7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020e7e:	f7fd f993 	bl	801e1a8 <__retarget_lock_release_recursive>
 8020e82:	4628      	mov	r0, r5
 8020e84:	bd70      	pop	{r4, r5, r6, pc}
 8020e86:	4629      	mov	r1, r5
 8020e88:	4622      	mov	r2, r4
 8020e8a:	4630      	mov	r0, r6
 8020e8c:	f7fd f879 	bl	801df82 <__swbuf_r>
 8020e90:	4605      	mov	r5, r0
 8020e92:	e7ed      	b.n	8020e70 <_putc_r+0x44>

08020e94 <memmove>:
 8020e94:	4288      	cmp	r0, r1
 8020e96:	b510      	push	{r4, lr}
 8020e98:	eb01 0402 	add.w	r4, r1, r2
 8020e9c:	d902      	bls.n	8020ea4 <memmove+0x10>
 8020e9e:	4284      	cmp	r4, r0
 8020ea0:	4623      	mov	r3, r4
 8020ea2:	d807      	bhi.n	8020eb4 <memmove+0x20>
 8020ea4:	1e43      	subs	r3, r0, #1
 8020ea6:	42a1      	cmp	r1, r4
 8020ea8:	d008      	beq.n	8020ebc <memmove+0x28>
 8020eaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020eae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020eb2:	e7f8      	b.n	8020ea6 <memmove+0x12>
 8020eb4:	4402      	add	r2, r0
 8020eb6:	4601      	mov	r1, r0
 8020eb8:	428a      	cmp	r2, r1
 8020eba:	d100      	bne.n	8020ebe <memmove+0x2a>
 8020ebc:	bd10      	pop	{r4, pc}
 8020ebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020ec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020ec6:	e7f7      	b.n	8020eb8 <memmove+0x24>

08020ec8 <strncmp>:
 8020ec8:	b510      	push	{r4, lr}
 8020eca:	b16a      	cbz	r2, 8020ee8 <strncmp+0x20>
 8020ecc:	3901      	subs	r1, #1
 8020ece:	1884      	adds	r4, r0, r2
 8020ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020ed4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8020ed8:	429a      	cmp	r2, r3
 8020eda:	d103      	bne.n	8020ee4 <strncmp+0x1c>
 8020edc:	42a0      	cmp	r0, r4
 8020ede:	d001      	beq.n	8020ee4 <strncmp+0x1c>
 8020ee0:	2a00      	cmp	r2, #0
 8020ee2:	d1f5      	bne.n	8020ed0 <strncmp+0x8>
 8020ee4:	1ad0      	subs	r0, r2, r3
 8020ee6:	bd10      	pop	{r4, pc}
 8020ee8:	4610      	mov	r0, r2
 8020eea:	e7fc      	b.n	8020ee6 <strncmp+0x1e>

08020eec <_fstat_r>:
 8020eec:	b538      	push	{r3, r4, r5, lr}
 8020eee:	4d07      	ldr	r5, [pc, #28]	@ (8020f0c <_fstat_r+0x20>)
 8020ef0:	2300      	movs	r3, #0
 8020ef2:	4604      	mov	r4, r0
 8020ef4:	4608      	mov	r0, r1
 8020ef6:	4611      	mov	r1, r2
 8020ef8:	602b      	str	r3, [r5, #0]
 8020efa:	f7e3 fec9 	bl	8004c90 <_fstat>
 8020efe:	1c43      	adds	r3, r0, #1
 8020f00:	d102      	bne.n	8020f08 <_fstat_r+0x1c>
 8020f02:	682b      	ldr	r3, [r5, #0]
 8020f04:	b103      	cbz	r3, 8020f08 <_fstat_r+0x1c>
 8020f06:	6023      	str	r3, [r4, #0]
 8020f08:	bd38      	pop	{r3, r4, r5, pc}
 8020f0a:	bf00      	nop
 8020f0c:	2001bee0 	.word	0x2001bee0

08020f10 <_isatty_r>:
 8020f10:	b538      	push	{r3, r4, r5, lr}
 8020f12:	4d06      	ldr	r5, [pc, #24]	@ (8020f2c <_isatty_r+0x1c>)
 8020f14:	2300      	movs	r3, #0
 8020f16:	4604      	mov	r4, r0
 8020f18:	4608      	mov	r0, r1
 8020f1a:	602b      	str	r3, [r5, #0]
 8020f1c:	f7e3 fec8 	bl	8004cb0 <_isatty>
 8020f20:	1c43      	adds	r3, r0, #1
 8020f22:	d102      	bne.n	8020f2a <_isatty_r+0x1a>
 8020f24:	682b      	ldr	r3, [r5, #0]
 8020f26:	b103      	cbz	r3, 8020f2a <_isatty_r+0x1a>
 8020f28:	6023      	str	r3, [r4, #0]
 8020f2a:	bd38      	pop	{r3, r4, r5, pc}
 8020f2c:	2001bee0 	.word	0x2001bee0

08020f30 <_sbrk_r>:
 8020f30:	b538      	push	{r3, r4, r5, lr}
 8020f32:	4d06      	ldr	r5, [pc, #24]	@ (8020f4c <_sbrk_r+0x1c>)
 8020f34:	2300      	movs	r3, #0
 8020f36:	4604      	mov	r4, r0
 8020f38:	4608      	mov	r0, r1
 8020f3a:	602b      	str	r3, [r5, #0]
 8020f3c:	f7e3 fed0 	bl	8004ce0 <_sbrk>
 8020f40:	1c43      	adds	r3, r0, #1
 8020f42:	d102      	bne.n	8020f4a <_sbrk_r+0x1a>
 8020f44:	682b      	ldr	r3, [r5, #0]
 8020f46:	b103      	cbz	r3, 8020f4a <_sbrk_r+0x1a>
 8020f48:	6023      	str	r3, [r4, #0]
 8020f4a:	bd38      	pop	{r3, r4, r5, pc}
 8020f4c:	2001bee0 	.word	0x2001bee0

08020f50 <nan>:
 8020f50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8020f58 <nan+0x8>
 8020f54:	4770      	bx	lr
 8020f56:	bf00      	nop
 8020f58:	00000000 	.word	0x00000000
 8020f5c:	7ff80000 	.word	0x7ff80000

08020f60 <__assert_func>:
 8020f60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020f62:	4614      	mov	r4, r2
 8020f64:	461a      	mov	r2, r3
 8020f66:	4b09      	ldr	r3, [pc, #36]	@ (8020f8c <__assert_func+0x2c>)
 8020f68:	681b      	ldr	r3, [r3, #0]
 8020f6a:	4605      	mov	r5, r0
 8020f6c:	68d8      	ldr	r0, [r3, #12]
 8020f6e:	b954      	cbnz	r4, 8020f86 <__assert_func+0x26>
 8020f70:	4b07      	ldr	r3, [pc, #28]	@ (8020f90 <__assert_func+0x30>)
 8020f72:	461c      	mov	r4, r3
 8020f74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020f78:	9100      	str	r1, [sp, #0]
 8020f7a:	462b      	mov	r3, r5
 8020f7c:	4905      	ldr	r1, [pc, #20]	@ (8020f94 <__assert_func+0x34>)
 8020f7e:	f000 fba7 	bl	80216d0 <fiprintf>
 8020f82:	f000 fbb7 	bl	80216f4 <abort>
 8020f86:	4b04      	ldr	r3, [pc, #16]	@ (8020f98 <__assert_func+0x38>)
 8020f88:	e7f4      	b.n	8020f74 <__assert_func+0x14>
 8020f8a:	bf00      	nop
 8020f8c:	2000003c 	.word	0x2000003c
 8020f90:	08022a6d 	.word	0x08022a6d
 8020f94:	08022a3f 	.word	0x08022a3f
 8020f98:	08022a32 	.word	0x08022a32

08020f9c <_calloc_r>:
 8020f9c:	b570      	push	{r4, r5, r6, lr}
 8020f9e:	fba1 5402 	umull	r5, r4, r1, r2
 8020fa2:	b93c      	cbnz	r4, 8020fb4 <_calloc_r+0x18>
 8020fa4:	4629      	mov	r1, r5
 8020fa6:	f7fd ffd7 	bl	801ef58 <_malloc_r>
 8020faa:	4606      	mov	r6, r0
 8020fac:	b928      	cbnz	r0, 8020fba <_calloc_r+0x1e>
 8020fae:	2600      	movs	r6, #0
 8020fb0:	4630      	mov	r0, r6
 8020fb2:	bd70      	pop	{r4, r5, r6, pc}
 8020fb4:	220c      	movs	r2, #12
 8020fb6:	6002      	str	r2, [r0, #0]
 8020fb8:	e7f9      	b.n	8020fae <_calloc_r+0x12>
 8020fba:	462a      	mov	r2, r5
 8020fbc:	4621      	mov	r1, r4
 8020fbe:	f7fd f875 	bl	801e0ac <memset>
 8020fc2:	e7f5      	b.n	8020fb0 <_calloc_r+0x14>

08020fc4 <rshift>:
 8020fc4:	6903      	ldr	r3, [r0, #16]
 8020fc6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8020fca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020fce:	ea4f 1261 	mov.w	r2, r1, asr #5
 8020fd2:	f100 0414 	add.w	r4, r0, #20
 8020fd6:	dd45      	ble.n	8021064 <rshift+0xa0>
 8020fd8:	f011 011f 	ands.w	r1, r1, #31
 8020fdc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8020fe0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8020fe4:	d10c      	bne.n	8021000 <rshift+0x3c>
 8020fe6:	f100 0710 	add.w	r7, r0, #16
 8020fea:	4629      	mov	r1, r5
 8020fec:	42b1      	cmp	r1, r6
 8020fee:	d334      	bcc.n	802105a <rshift+0x96>
 8020ff0:	1a9b      	subs	r3, r3, r2
 8020ff2:	009b      	lsls	r3, r3, #2
 8020ff4:	1eea      	subs	r2, r5, #3
 8020ff6:	4296      	cmp	r6, r2
 8020ff8:	bf38      	it	cc
 8020ffa:	2300      	movcc	r3, #0
 8020ffc:	4423      	add	r3, r4
 8020ffe:	e015      	b.n	802102c <rshift+0x68>
 8021000:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021004:	f1c1 0820 	rsb	r8, r1, #32
 8021008:	40cf      	lsrs	r7, r1
 802100a:	f105 0e04 	add.w	lr, r5, #4
 802100e:	46a1      	mov	r9, r4
 8021010:	4576      	cmp	r6, lr
 8021012:	46f4      	mov	ip, lr
 8021014:	d815      	bhi.n	8021042 <rshift+0x7e>
 8021016:	1a9a      	subs	r2, r3, r2
 8021018:	0092      	lsls	r2, r2, #2
 802101a:	3a04      	subs	r2, #4
 802101c:	3501      	adds	r5, #1
 802101e:	42ae      	cmp	r6, r5
 8021020:	bf38      	it	cc
 8021022:	2200      	movcc	r2, #0
 8021024:	18a3      	adds	r3, r4, r2
 8021026:	50a7      	str	r7, [r4, r2]
 8021028:	b107      	cbz	r7, 802102c <rshift+0x68>
 802102a:	3304      	adds	r3, #4
 802102c:	1b1a      	subs	r2, r3, r4
 802102e:	42a3      	cmp	r3, r4
 8021030:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021034:	bf08      	it	eq
 8021036:	2300      	moveq	r3, #0
 8021038:	6102      	str	r2, [r0, #16]
 802103a:	bf08      	it	eq
 802103c:	6143      	streq	r3, [r0, #20]
 802103e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021042:	f8dc c000 	ldr.w	ip, [ip]
 8021046:	fa0c fc08 	lsl.w	ip, ip, r8
 802104a:	ea4c 0707 	orr.w	r7, ip, r7
 802104e:	f849 7b04 	str.w	r7, [r9], #4
 8021052:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021056:	40cf      	lsrs	r7, r1
 8021058:	e7da      	b.n	8021010 <rshift+0x4c>
 802105a:	f851 cb04 	ldr.w	ip, [r1], #4
 802105e:	f847 cf04 	str.w	ip, [r7, #4]!
 8021062:	e7c3      	b.n	8020fec <rshift+0x28>
 8021064:	4623      	mov	r3, r4
 8021066:	e7e1      	b.n	802102c <rshift+0x68>

08021068 <__hexdig_fun>:
 8021068:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 802106c:	2b09      	cmp	r3, #9
 802106e:	d802      	bhi.n	8021076 <__hexdig_fun+0xe>
 8021070:	3820      	subs	r0, #32
 8021072:	b2c0      	uxtb	r0, r0
 8021074:	4770      	bx	lr
 8021076:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802107a:	2b05      	cmp	r3, #5
 802107c:	d801      	bhi.n	8021082 <__hexdig_fun+0x1a>
 802107e:	3847      	subs	r0, #71	@ 0x47
 8021080:	e7f7      	b.n	8021072 <__hexdig_fun+0xa>
 8021082:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8021086:	2b05      	cmp	r3, #5
 8021088:	d801      	bhi.n	802108e <__hexdig_fun+0x26>
 802108a:	3827      	subs	r0, #39	@ 0x27
 802108c:	e7f1      	b.n	8021072 <__hexdig_fun+0xa>
 802108e:	2000      	movs	r0, #0
 8021090:	4770      	bx	lr
	...

08021094 <__gethex>:
 8021094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021098:	b085      	sub	sp, #20
 802109a:	468a      	mov	sl, r1
 802109c:	9302      	str	r3, [sp, #8]
 802109e:	680b      	ldr	r3, [r1, #0]
 80210a0:	9001      	str	r0, [sp, #4]
 80210a2:	4690      	mov	r8, r2
 80210a4:	1c9c      	adds	r4, r3, #2
 80210a6:	46a1      	mov	r9, r4
 80210a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80210ac:	2830      	cmp	r0, #48	@ 0x30
 80210ae:	d0fa      	beq.n	80210a6 <__gethex+0x12>
 80210b0:	eba9 0303 	sub.w	r3, r9, r3
 80210b4:	f1a3 0b02 	sub.w	fp, r3, #2
 80210b8:	f7ff ffd6 	bl	8021068 <__hexdig_fun>
 80210bc:	4605      	mov	r5, r0
 80210be:	2800      	cmp	r0, #0
 80210c0:	d168      	bne.n	8021194 <__gethex+0x100>
 80210c2:	49a0      	ldr	r1, [pc, #640]	@ (8021344 <__gethex+0x2b0>)
 80210c4:	2201      	movs	r2, #1
 80210c6:	4648      	mov	r0, r9
 80210c8:	f7ff fefe 	bl	8020ec8 <strncmp>
 80210cc:	4607      	mov	r7, r0
 80210ce:	2800      	cmp	r0, #0
 80210d0:	d167      	bne.n	80211a2 <__gethex+0x10e>
 80210d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80210d6:	4626      	mov	r6, r4
 80210d8:	f7ff ffc6 	bl	8021068 <__hexdig_fun>
 80210dc:	2800      	cmp	r0, #0
 80210de:	d062      	beq.n	80211a6 <__gethex+0x112>
 80210e0:	4623      	mov	r3, r4
 80210e2:	7818      	ldrb	r0, [r3, #0]
 80210e4:	2830      	cmp	r0, #48	@ 0x30
 80210e6:	4699      	mov	r9, r3
 80210e8:	f103 0301 	add.w	r3, r3, #1
 80210ec:	d0f9      	beq.n	80210e2 <__gethex+0x4e>
 80210ee:	f7ff ffbb 	bl	8021068 <__hexdig_fun>
 80210f2:	fab0 f580 	clz	r5, r0
 80210f6:	096d      	lsrs	r5, r5, #5
 80210f8:	f04f 0b01 	mov.w	fp, #1
 80210fc:	464a      	mov	r2, r9
 80210fe:	4616      	mov	r6, r2
 8021100:	3201      	adds	r2, #1
 8021102:	7830      	ldrb	r0, [r6, #0]
 8021104:	f7ff ffb0 	bl	8021068 <__hexdig_fun>
 8021108:	2800      	cmp	r0, #0
 802110a:	d1f8      	bne.n	80210fe <__gethex+0x6a>
 802110c:	498d      	ldr	r1, [pc, #564]	@ (8021344 <__gethex+0x2b0>)
 802110e:	2201      	movs	r2, #1
 8021110:	4630      	mov	r0, r6
 8021112:	f7ff fed9 	bl	8020ec8 <strncmp>
 8021116:	2800      	cmp	r0, #0
 8021118:	d13f      	bne.n	802119a <__gethex+0x106>
 802111a:	b944      	cbnz	r4, 802112e <__gethex+0x9a>
 802111c:	1c74      	adds	r4, r6, #1
 802111e:	4622      	mov	r2, r4
 8021120:	4616      	mov	r6, r2
 8021122:	3201      	adds	r2, #1
 8021124:	7830      	ldrb	r0, [r6, #0]
 8021126:	f7ff ff9f 	bl	8021068 <__hexdig_fun>
 802112a:	2800      	cmp	r0, #0
 802112c:	d1f8      	bne.n	8021120 <__gethex+0x8c>
 802112e:	1ba4      	subs	r4, r4, r6
 8021130:	00a7      	lsls	r7, r4, #2
 8021132:	7833      	ldrb	r3, [r6, #0]
 8021134:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8021138:	2b50      	cmp	r3, #80	@ 0x50
 802113a:	d13e      	bne.n	80211ba <__gethex+0x126>
 802113c:	7873      	ldrb	r3, [r6, #1]
 802113e:	2b2b      	cmp	r3, #43	@ 0x2b
 8021140:	d033      	beq.n	80211aa <__gethex+0x116>
 8021142:	2b2d      	cmp	r3, #45	@ 0x2d
 8021144:	d034      	beq.n	80211b0 <__gethex+0x11c>
 8021146:	1c71      	adds	r1, r6, #1
 8021148:	2400      	movs	r4, #0
 802114a:	7808      	ldrb	r0, [r1, #0]
 802114c:	f7ff ff8c 	bl	8021068 <__hexdig_fun>
 8021150:	1e43      	subs	r3, r0, #1
 8021152:	b2db      	uxtb	r3, r3
 8021154:	2b18      	cmp	r3, #24
 8021156:	d830      	bhi.n	80211ba <__gethex+0x126>
 8021158:	f1a0 0210 	sub.w	r2, r0, #16
 802115c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021160:	f7ff ff82 	bl	8021068 <__hexdig_fun>
 8021164:	f100 3cff 	add.w	ip, r0, #4294967295
 8021168:	fa5f fc8c 	uxtb.w	ip, ip
 802116c:	f1bc 0f18 	cmp.w	ip, #24
 8021170:	f04f 030a 	mov.w	r3, #10
 8021174:	d91e      	bls.n	80211b4 <__gethex+0x120>
 8021176:	b104      	cbz	r4, 802117a <__gethex+0xe6>
 8021178:	4252      	negs	r2, r2
 802117a:	4417      	add	r7, r2
 802117c:	f8ca 1000 	str.w	r1, [sl]
 8021180:	b1ed      	cbz	r5, 80211be <__gethex+0x12a>
 8021182:	f1bb 0f00 	cmp.w	fp, #0
 8021186:	bf0c      	ite	eq
 8021188:	2506      	moveq	r5, #6
 802118a:	2500      	movne	r5, #0
 802118c:	4628      	mov	r0, r5
 802118e:	b005      	add	sp, #20
 8021190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021194:	2500      	movs	r5, #0
 8021196:	462c      	mov	r4, r5
 8021198:	e7b0      	b.n	80210fc <__gethex+0x68>
 802119a:	2c00      	cmp	r4, #0
 802119c:	d1c7      	bne.n	802112e <__gethex+0x9a>
 802119e:	4627      	mov	r7, r4
 80211a0:	e7c7      	b.n	8021132 <__gethex+0x9e>
 80211a2:	464e      	mov	r6, r9
 80211a4:	462f      	mov	r7, r5
 80211a6:	2501      	movs	r5, #1
 80211a8:	e7c3      	b.n	8021132 <__gethex+0x9e>
 80211aa:	2400      	movs	r4, #0
 80211ac:	1cb1      	adds	r1, r6, #2
 80211ae:	e7cc      	b.n	802114a <__gethex+0xb6>
 80211b0:	2401      	movs	r4, #1
 80211b2:	e7fb      	b.n	80211ac <__gethex+0x118>
 80211b4:	fb03 0002 	mla	r0, r3, r2, r0
 80211b8:	e7ce      	b.n	8021158 <__gethex+0xc4>
 80211ba:	4631      	mov	r1, r6
 80211bc:	e7de      	b.n	802117c <__gethex+0xe8>
 80211be:	eba6 0309 	sub.w	r3, r6, r9
 80211c2:	3b01      	subs	r3, #1
 80211c4:	4629      	mov	r1, r5
 80211c6:	2b07      	cmp	r3, #7
 80211c8:	dc0a      	bgt.n	80211e0 <__gethex+0x14c>
 80211ca:	9801      	ldr	r0, [sp, #4]
 80211cc:	f7fd ff50 	bl	801f070 <_Balloc>
 80211d0:	4604      	mov	r4, r0
 80211d2:	b940      	cbnz	r0, 80211e6 <__gethex+0x152>
 80211d4:	4b5c      	ldr	r3, [pc, #368]	@ (8021348 <__gethex+0x2b4>)
 80211d6:	4602      	mov	r2, r0
 80211d8:	21e4      	movs	r1, #228	@ 0xe4
 80211da:	485c      	ldr	r0, [pc, #368]	@ (802134c <__gethex+0x2b8>)
 80211dc:	f7ff fec0 	bl	8020f60 <__assert_func>
 80211e0:	3101      	adds	r1, #1
 80211e2:	105b      	asrs	r3, r3, #1
 80211e4:	e7ef      	b.n	80211c6 <__gethex+0x132>
 80211e6:	f100 0a14 	add.w	sl, r0, #20
 80211ea:	2300      	movs	r3, #0
 80211ec:	4655      	mov	r5, sl
 80211ee:	469b      	mov	fp, r3
 80211f0:	45b1      	cmp	r9, r6
 80211f2:	d337      	bcc.n	8021264 <__gethex+0x1d0>
 80211f4:	f845 bb04 	str.w	fp, [r5], #4
 80211f8:	eba5 050a 	sub.w	r5, r5, sl
 80211fc:	10ad      	asrs	r5, r5, #2
 80211fe:	6125      	str	r5, [r4, #16]
 8021200:	4658      	mov	r0, fp
 8021202:	f7fe f827 	bl	801f254 <__hi0bits>
 8021206:	016d      	lsls	r5, r5, #5
 8021208:	f8d8 6000 	ldr.w	r6, [r8]
 802120c:	1a2d      	subs	r5, r5, r0
 802120e:	42b5      	cmp	r5, r6
 8021210:	dd54      	ble.n	80212bc <__gethex+0x228>
 8021212:	1bad      	subs	r5, r5, r6
 8021214:	4629      	mov	r1, r5
 8021216:	4620      	mov	r0, r4
 8021218:	f7fe fbbb 	bl	801f992 <__any_on>
 802121c:	4681      	mov	r9, r0
 802121e:	b178      	cbz	r0, 8021240 <__gethex+0x1ac>
 8021220:	1e6b      	subs	r3, r5, #1
 8021222:	1159      	asrs	r1, r3, #5
 8021224:	f003 021f 	and.w	r2, r3, #31
 8021228:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 802122c:	f04f 0901 	mov.w	r9, #1
 8021230:	fa09 f202 	lsl.w	r2, r9, r2
 8021234:	420a      	tst	r2, r1
 8021236:	d003      	beq.n	8021240 <__gethex+0x1ac>
 8021238:	454b      	cmp	r3, r9
 802123a:	dc36      	bgt.n	80212aa <__gethex+0x216>
 802123c:	f04f 0902 	mov.w	r9, #2
 8021240:	4629      	mov	r1, r5
 8021242:	4620      	mov	r0, r4
 8021244:	f7ff febe 	bl	8020fc4 <rshift>
 8021248:	442f      	add	r7, r5
 802124a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802124e:	42bb      	cmp	r3, r7
 8021250:	da42      	bge.n	80212d8 <__gethex+0x244>
 8021252:	9801      	ldr	r0, [sp, #4]
 8021254:	4621      	mov	r1, r4
 8021256:	f7fd ff4b 	bl	801f0f0 <_Bfree>
 802125a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802125c:	2300      	movs	r3, #0
 802125e:	6013      	str	r3, [r2, #0]
 8021260:	25a3      	movs	r5, #163	@ 0xa3
 8021262:	e793      	b.n	802118c <__gethex+0xf8>
 8021264:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8021268:	2a2e      	cmp	r2, #46	@ 0x2e
 802126a:	d012      	beq.n	8021292 <__gethex+0x1fe>
 802126c:	2b20      	cmp	r3, #32
 802126e:	d104      	bne.n	802127a <__gethex+0x1e6>
 8021270:	f845 bb04 	str.w	fp, [r5], #4
 8021274:	f04f 0b00 	mov.w	fp, #0
 8021278:	465b      	mov	r3, fp
 802127a:	7830      	ldrb	r0, [r6, #0]
 802127c:	9303      	str	r3, [sp, #12]
 802127e:	f7ff fef3 	bl	8021068 <__hexdig_fun>
 8021282:	9b03      	ldr	r3, [sp, #12]
 8021284:	f000 000f 	and.w	r0, r0, #15
 8021288:	4098      	lsls	r0, r3
 802128a:	ea4b 0b00 	orr.w	fp, fp, r0
 802128e:	3304      	adds	r3, #4
 8021290:	e7ae      	b.n	80211f0 <__gethex+0x15c>
 8021292:	45b1      	cmp	r9, r6
 8021294:	d8ea      	bhi.n	802126c <__gethex+0x1d8>
 8021296:	492b      	ldr	r1, [pc, #172]	@ (8021344 <__gethex+0x2b0>)
 8021298:	9303      	str	r3, [sp, #12]
 802129a:	2201      	movs	r2, #1
 802129c:	4630      	mov	r0, r6
 802129e:	f7ff fe13 	bl	8020ec8 <strncmp>
 80212a2:	9b03      	ldr	r3, [sp, #12]
 80212a4:	2800      	cmp	r0, #0
 80212a6:	d1e1      	bne.n	802126c <__gethex+0x1d8>
 80212a8:	e7a2      	b.n	80211f0 <__gethex+0x15c>
 80212aa:	1ea9      	subs	r1, r5, #2
 80212ac:	4620      	mov	r0, r4
 80212ae:	f7fe fb70 	bl	801f992 <__any_on>
 80212b2:	2800      	cmp	r0, #0
 80212b4:	d0c2      	beq.n	802123c <__gethex+0x1a8>
 80212b6:	f04f 0903 	mov.w	r9, #3
 80212ba:	e7c1      	b.n	8021240 <__gethex+0x1ac>
 80212bc:	da09      	bge.n	80212d2 <__gethex+0x23e>
 80212be:	1b75      	subs	r5, r6, r5
 80212c0:	4621      	mov	r1, r4
 80212c2:	9801      	ldr	r0, [sp, #4]
 80212c4:	462a      	mov	r2, r5
 80212c6:	f7fe f92b 	bl	801f520 <__lshift>
 80212ca:	1b7f      	subs	r7, r7, r5
 80212cc:	4604      	mov	r4, r0
 80212ce:	f100 0a14 	add.w	sl, r0, #20
 80212d2:	f04f 0900 	mov.w	r9, #0
 80212d6:	e7b8      	b.n	802124a <__gethex+0x1b6>
 80212d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80212dc:	42bd      	cmp	r5, r7
 80212de:	dd6f      	ble.n	80213c0 <__gethex+0x32c>
 80212e0:	1bed      	subs	r5, r5, r7
 80212e2:	42ae      	cmp	r6, r5
 80212e4:	dc34      	bgt.n	8021350 <__gethex+0x2bc>
 80212e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80212ea:	2b02      	cmp	r3, #2
 80212ec:	d022      	beq.n	8021334 <__gethex+0x2a0>
 80212ee:	2b03      	cmp	r3, #3
 80212f0:	d024      	beq.n	802133c <__gethex+0x2a8>
 80212f2:	2b01      	cmp	r3, #1
 80212f4:	d115      	bne.n	8021322 <__gethex+0x28e>
 80212f6:	42ae      	cmp	r6, r5
 80212f8:	d113      	bne.n	8021322 <__gethex+0x28e>
 80212fa:	2e01      	cmp	r6, #1
 80212fc:	d10b      	bne.n	8021316 <__gethex+0x282>
 80212fe:	9a02      	ldr	r2, [sp, #8]
 8021300:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021304:	6013      	str	r3, [r2, #0]
 8021306:	2301      	movs	r3, #1
 8021308:	6123      	str	r3, [r4, #16]
 802130a:	f8ca 3000 	str.w	r3, [sl]
 802130e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021310:	2562      	movs	r5, #98	@ 0x62
 8021312:	601c      	str	r4, [r3, #0]
 8021314:	e73a      	b.n	802118c <__gethex+0xf8>
 8021316:	1e71      	subs	r1, r6, #1
 8021318:	4620      	mov	r0, r4
 802131a:	f7fe fb3a 	bl	801f992 <__any_on>
 802131e:	2800      	cmp	r0, #0
 8021320:	d1ed      	bne.n	80212fe <__gethex+0x26a>
 8021322:	9801      	ldr	r0, [sp, #4]
 8021324:	4621      	mov	r1, r4
 8021326:	f7fd fee3 	bl	801f0f0 <_Bfree>
 802132a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802132c:	2300      	movs	r3, #0
 802132e:	6013      	str	r3, [r2, #0]
 8021330:	2550      	movs	r5, #80	@ 0x50
 8021332:	e72b      	b.n	802118c <__gethex+0xf8>
 8021334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021336:	2b00      	cmp	r3, #0
 8021338:	d1f3      	bne.n	8021322 <__gethex+0x28e>
 802133a:	e7e0      	b.n	80212fe <__gethex+0x26a>
 802133c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802133e:	2b00      	cmp	r3, #0
 8021340:	d1dd      	bne.n	80212fe <__gethex+0x26a>
 8021342:	e7ee      	b.n	8021322 <__gethex+0x28e>
 8021344:	080228c0 	.word	0x080228c0
 8021348:	08022755 	.word	0x08022755
 802134c:	08022a6e 	.word	0x08022a6e
 8021350:	1e6f      	subs	r7, r5, #1
 8021352:	f1b9 0f00 	cmp.w	r9, #0
 8021356:	d130      	bne.n	80213ba <__gethex+0x326>
 8021358:	b127      	cbz	r7, 8021364 <__gethex+0x2d0>
 802135a:	4639      	mov	r1, r7
 802135c:	4620      	mov	r0, r4
 802135e:	f7fe fb18 	bl	801f992 <__any_on>
 8021362:	4681      	mov	r9, r0
 8021364:	117a      	asrs	r2, r7, #5
 8021366:	2301      	movs	r3, #1
 8021368:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 802136c:	f007 071f 	and.w	r7, r7, #31
 8021370:	40bb      	lsls	r3, r7
 8021372:	4213      	tst	r3, r2
 8021374:	4629      	mov	r1, r5
 8021376:	4620      	mov	r0, r4
 8021378:	bf18      	it	ne
 802137a:	f049 0902 	orrne.w	r9, r9, #2
 802137e:	f7ff fe21 	bl	8020fc4 <rshift>
 8021382:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8021386:	1b76      	subs	r6, r6, r5
 8021388:	2502      	movs	r5, #2
 802138a:	f1b9 0f00 	cmp.w	r9, #0
 802138e:	d047      	beq.n	8021420 <__gethex+0x38c>
 8021390:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021394:	2b02      	cmp	r3, #2
 8021396:	d015      	beq.n	80213c4 <__gethex+0x330>
 8021398:	2b03      	cmp	r3, #3
 802139a:	d017      	beq.n	80213cc <__gethex+0x338>
 802139c:	2b01      	cmp	r3, #1
 802139e:	d109      	bne.n	80213b4 <__gethex+0x320>
 80213a0:	f019 0f02 	tst.w	r9, #2
 80213a4:	d006      	beq.n	80213b4 <__gethex+0x320>
 80213a6:	f8da 3000 	ldr.w	r3, [sl]
 80213aa:	ea49 0903 	orr.w	r9, r9, r3
 80213ae:	f019 0f01 	tst.w	r9, #1
 80213b2:	d10e      	bne.n	80213d2 <__gethex+0x33e>
 80213b4:	f045 0510 	orr.w	r5, r5, #16
 80213b8:	e032      	b.n	8021420 <__gethex+0x38c>
 80213ba:	f04f 0901 	mov.w	r9, #1
 80213be:	e7d1      	b.n	8021364 <__gethex+0x2d0>
 80213c0:	2501      	movs	r5, #1
 80213c2:	e7e2      	b.n	802138a <__gethex+0x2f6>
 80213c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80213c6:	f1c3 0301 	rsb	r3, r3, #1
 80213ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80213cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80213ce:	2b00      	cmp	r3, #0
 80213d0:	d0f0      	beq.n	80213b4 <__gethex+0x320>
 80213d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80213d6:	f104 0314 	add.w	r3, r4, #20
 80213da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80213de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80213e2:	f04f 0c00 	mov.w	ip, #0
 80213e6:	4618      	mov	r0, r3
 80213e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80213ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 80213f0:	d01b      	beq.n	802142a <__gethex+0x396>
 80213f2:	3201      	adds	r2, #1
 80213f4:	6002      	str	r2, [r0, #0]
 80213f6:	2d02      	cmp	r5, #2
 80213f8:	f104 0314 	add.w	r3, r4, #20
 80213fc:	d13c      	bne.n	8021478 <__gethex+0x3e4>
 80213fe:	f8d8 2000 	ldr.w	r2, [r8]
 8021402:	3a01      	subs	r2, #1
 8021404:	42b2      	cmp	r2, r6
 8021406:	d109      	bne.n	802141c <__gethex+0x388>
 8021408:	1171      	asrs	r1, r6, #5
 802140a:	2201      	movs	r2, #1
 802140c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021410:	f006 061f 	and.w	r6, r6, #31
 8021414:	fa02 f606 	lsl.w	r6, r2, r6
 8021418:	421e      	tst	r6, r3
 802141a:	d13a      	bne.n	8021492 <__gethex+0x3fe>
 802141c:	f045 0520 	orr.w	r5, r5, #32
 8021420:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021422:	601c      	str	r4, [r3, #0]
 8021424:	9b02      	ldr	r3, [sp, #8]
 8021426:	601f      	str	r7, [r3, #0]
 8021428:	e6b0      	b.n	802118c <__gethex+0xf8>
 802142a:	4299      	cmp	r1, r3
 802142c:	f843 cc04 	str.w	ip, [r3, #-4]
 8021430:	d8d9      	bhi.n	80213e6 <__gethex+0x352>
 8021432:	68a3      	ldr	r3, [r4, #8]
 8021434:	459b      	cmp	fp, r3
 8021436:	db17      	blt.n	8021468 <__gethex+0x3d4>
 8021438:	6861      	ldr	r1, [r4, #4]
 802143a:	9801      	ldr	r0, [sp, #4]
 802143c:	3101      	adds	r1, #1
 802143e:	f7fd fe17 	bl	801f070 <_Balloc>
 8021442:	4681      	mov	r9, r0
 8021444:	b918      	cbnz	r0, 802144e <__gethex+0x3ba>
 8021446:	4b1a      	ldr	r3, [pc, #104]	@ (80214b0 <__gethex+0x41c>)
 8021448:	4602      	mov	r2, r0
 802144a:	2184      	movs	r1, #132	@ 0x84
 802144c:	e6c5      	b.n	80211da <__gethex+0x146>
 802144e:	6922      	ldr	r2, [r4, #16]
 8021450:	3202      	adds	r2, #2
 8021452:	f104 010c 	add.w	r1, r4, #12
 8021456:	0092      	lsls	r2, r2, #2
 8021458:	300c      	adds	r0, #12
 802145a:	f7fc fea6 	bl	801e1aa <memcpy>
 802145e:	4621      	mov	r1, r4
 8021460:	9801      	ldr	r0, [sp, #4]
 8021462:	f7fd fe45 	bl	801f0f0 <_Bfree>
 8021466:	464c      	mov	r4, r9
 8021468:	6923      	ldr	r3, [r4, #16]
 802146a:	1c5a      	adds	r2, r3, #1
 802146c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021470:	6122      	str	r2, [r4, #16]
 8021472:	2201      	movs	r2, #1
 8021474:	615a      	str	r2, [r3, #20]
 8021476:	e7be      	b.n	80213f6 <__gethex+0x362>
 8021478:	6922      	ldr	r2, [r4, #16]
 802147a:	455a      	cmp	r2, fp
 802147c:	dd0b      	ble.n	8021496 <__gethex+0x402>
 802147e:	2101      	movs	r1, #1
 8021480:	4620      	mov	r0, r4
 8021482:	f7ff fd9f 	bl	8020fc4 <rshift>
 8021486:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802148a:	3701      	adds	r7, #1
 802148c:	42bb      	cmp	r3, r7
 802148e:	f6ff aee0 	blt.w	8021252 <__gethex+0x1be>
 8021492:	2501      	movs	r5, #1
 8021494:	e7c2      	b.n	802141c <__gethex+0x388>
 8021496:	f016 061f 	ands.w	r6, r6, #31
 802149a:	d0fa      	beq.n	8021492 <__gethex+0x3fe>
 802149c:	4453      	add	r3, sl
 802149e:	f1c6 0620 	rsb	r6, r6, #32
 80214a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80214a6:	f7fd fed5 	bl	801f254 <__hi0bits>
 80214aa:	42b0      	cmp	r0, r6
 80214ac:	dbe7      	blt.n	802147e <__gethex+0x3ea>
 80214ae:	e7f0      	b.n	8021492 <__gethex+0x3fe>
 80214b0:	08022755 	.word	0x08022755

080214b4 <L_shift>:
 80214b4:	f1c2 0208 	rsb	r2, r2, #8
 80214b8:	0092      	lsls	r2, r2, #2
 80214ba:	b570      	push	{r4, r5, r6, lr}
 80214bc:	f1c2 0620 	rsb	r6, r2, #32
 80214c0:	6843      	ldr	r3, [r0, #4]
 80214c2:	6804      	ldr	r4, [r0, #0]
 80214c4:	fa03 f506 	lsl.w	r5, r3, r6
 80214c8:	432c      	orrs	r4, r5
 80214ca:	40d3      	lsrs	r3, r2
 80214cc:	6004      	str	r4, [r0, #0]
 80214ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80214d2:	4288      	cmp	r0, r1
 80214d4:	d3f4      	bcc.n	80214c0 <L_shift+0xc>
 80214d6:	bd70      	pop	{r4, r5, r6, pc}

080214d8 <__match>:
 80214d8:	b530      	push	{r4, r5, lr}
 80214da:	6803      	ldr	r3, [r0, #0]
 80214dc:	3301      	adds	r3, #1
 80214de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80214e2:	b914      	cbnz	r4, 80214ea <__match+0x12>
 80214e4:	6003      	str	r3, [r0, #0]
 80214e6:	2001      	movs	r0, #1
 80214e8:	bd30      	pop	{r4, r5, pc}
 80214ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80214ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80214f2:	2d19      	cmp	r5, #25
 80214f4:	bf98      	it	ls
 80214f6:	3220      	addls	r2, #32
 80214f8:	42a2      	cmp	r2, r4
 80214fa:	d0f0      	beq.n	80214de <__match+0x6>
 80214fc:	2000      	movs	r0, #0
 80214fe:	e7f3      	b.n	80214e8 <__match+0x10>

08021500 <__hexnan>:
 8021500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021504:	680b      	ldr	r3, [r1, #0]
 8021506:	6801      	ldr	r1, [r0, #0]
 8021508:	115e      	asrs	r6, r3, #5
 802150a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802150e:	f013 031f 	ands.w	r3, r3, #31
 8021512:	b087      	sub	sp, #28
 8021514:	bf18      	it	ne
 8021516:	3604      	addne	r6, #4
 8021518:	2500      	movs	r5, #0
 802151a:	1f37      	subs	r7, r6, #4
 802151c:	4682      	mov	sl, r0
 802151e:	4690      	mov	r8, r2
 8021520:	9301      	str	r3, [sp, #4]
 8021522:	f846 5c04 	str.w	r5, [r6, #-4]
 8021526:	46b9      	mov	r9, r7
 8021528:	463c      	mov	r4, r7
 802152a:	9502      	str	r5, [sp, #8]
 802152c:	46ab      	mov	fp, r5
 802152e:	784a      	ldrb	r2, [r1, #1]
 8021530:	1c4b      	adds	r3, r1, #1
 8021532:	9303      	str	r3, [sp, #12]
 8021534:	b342      	cbz	r2, 8021588 <__hexnan+0x88>
 8021536:	4610      	mov	r0, r2
 8021538:	9105      	str	r1, [sp, #20]
 802153a:	9204      	str	r2, [sp, #16]
 802153c:	f7ff fd94 	bl	8021068 <__hexdig_fun>
 8021540:	2800      	cmp	r0, #0
 8021542:	d151      	bne.n	80215e8 <__hexnan+0xe8>
 8021544:	9a04      	ldr	r2, [sp, #16]
 8021546:	9905      	ldr	r1, [sp, #20]
 8021548:	2a20      	cmp	r2, #32
 802154a:	d818      	bhi.n	802157e <__hexnan+0x7e>
 802154c:	9b02      	ldr	r3, [sp, #8]
 802154e:	459b      	cmp	fp, r3
 8021550:	dd13      	ble.n	802157a <__hexnan+0x7a>
 8021552:	454c      	cmp	r4, r9
 8021554:	d206      	bcs.n	8021564 <__hexnan+0x64>
 8021556:	2d07      	cmp	r5, #7
 8021558:	dc04      	bgt.n	8021564 <__hexnan+0x64>
 802155a:	462a      	mov	r2, r5
 802155c:	4649      	mov	r1, r9
 802155e:	4620      	mov	r0, r4
 8021560:	f7ff ffa8 	bl	80214b4 <L_shift>
 8021564:	4544      	cmp	r4, r8
 8021566:	d952      	bls.n	802160e <__hexnan+0x10e>
 8021568:	2300      	movs	r3, #0
 802156a:	f1a4 0904 	sub.w	r9, r4, #4
 802156e:	f844 3c04 	str.w	r3, [r4, #-4]
 8021572:	f8cd b008 	str.w	fp, [sp, #8]
 8021576:	464c      	mov	r4, r9
 8021578:	461d      	mov	r5, r3
 802157a:	9903      	ldr	r1, [sp, #12]
 802157c:	e7d7      	b.n	802152e <__hexnan+0x2e>
 802157e:	2a29      	cmp	r2, #41	@ 0x29
 8021580:	d157      	bne.n	8021632 <__hexnan+0x132>
 8021582:	3102      	adds	r1, #2
 8021584:	f8ca 1000 	str.w	r1, [sl]
 8021588:	f1bb 0f00 	cmp.w	fp, #0
 802158c:	d051      	beq.n	8021632 <__hexnan+0x132>
 802158e:	454c      	cmp	r4, r9
 8021590:	d206      	bcs.n	80215a0 <__hexnan+0xa0>
 8021592:	2d07      	cmp	r5, #7
 8021594:	dc04      	bgt.n	80215a0 <__hexnan+0xa0>
 8021596:	462a      	mov	r2, r5
 8021598:	4649      	mov	r1, r9
 802159a:	4620      	mov	r0, r4
 802159c:	f7ff ff8a 	bl	80214b4 <L_shift>
 80215a0:	4544      	cmp	r4, r8
 80215a2:	d936      	bls.n	8021612 <__hexnan+0x112>
 80215a4:	f1a8 0204 	sub.w	r2, r8, #4
 80215a8:	4623      	mov	r3, r4
 80215aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80215ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80215b2:	429f      	cmp	r7, r3
 80215b4:	d2f9      	bcs.n	80215aa <__hexnan+0xaa>
 80215b6:	1b3b      	subs	r3, r7, r4
 80215b8:	f023 0303 	bic.w	r3, r3, #3
 80215bc:	3304      	adds	r3, #4
 80215be:	3401      	adds	r4, #1
 80215c0:	3e03      	subs	r6, #3
 80215c2:	42b4      	cmp	r4, r6
 80215c4:	bf88      	it	hi
 80215c6:	2304      	movhi	r3, #4
 80215c8:	4443      	add	r3, r8
 80215ca:	2200      	movs	r2, #0
 80215cc:	f843 2b04 	str.w	r2, [r3], #4
 80215d0:	429f      	cmp	r7, r3
 80215d2:	d2fb      	bcs.n	80215cc <__hexnan+0xcc>
 80215d4:	683b      	ldr	r3, [r7, #0]
 80215d6:	b91b      	cbnz	r3, 80215e0 <__hexnan+0xe0>
 80215d8:	4547      	cmp	r7, r8
 80215da:	d128      	bne.n	802162e <__hexnan+0x12e>
 80215dc:	2301      	movs	r3, #1
 80215de:	603b      	str	r3, [r7, #0]
 80215e0:	2005      	movs	r0, #5
 80215e2:	b007      	add	sp, #28
 80215e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215e8:	3501      	adds	r5, #1
 80215ea:	2d08      	cmp	r5, #8
 80215ec:	f10b 0b01 	add.w	fp, fp, #1
 80215f0:	dd06      	ble.n	8021600 <__hexnan+0x100>
 80215f2:	4544      	cmp	r4, r8
 80215f4:	d9c1      	bls.n	802157a <__hexnan+0x7a>
 80215f6:	2300      	movs	r3, #0
 80215f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80215fc:	2501      	movs	r5, #1
 80215fe:	3c04      	subs	r4, #4
 8021600:	6822      	ldr	r2, [r4, #0]
 8021602:	f000 000f 	and.w	r0, r0, #15
 8021606:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802160a:	6020      	str	r0, [r4, #0]
 802160c:	e7b5      	b.n	802157a <__hexnan+0x7a>
 802160e:	2508      	movs	r5, #8
 8021610:	e7b3      	b.n	802157a <__hexnan+0x7a>
 8021612:	9b01      	ldr	r3, [sp, #4]
 8021614:	2b00      	cmp	r3, #0
 8021616:	d0dd      	beq.n	80215d4 <__hexnan+0xd4>
 8021618:	f1c3 0320 	rsb	r3, r3, #32
 802161c:	f04f 32ff 	mov.w	r2, #4294967295
 8021620:	40da      	lsrs	r2, r3
 8021622:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8021626:	4013      	ands	r3, r2
 8021628:	f846 3c04 	str.w	r3, [r6, #-4]
 802162c:	e7d2      	b.n	80215d4 <__hexnan+0xd4>
 802162e:	3f04      	subs	r7, #4
 8021630:	e7d0      	b.n	80215d4 <__hexnan+0xd4>
 8021632:	2004      	movs	r0, #4
 8021634:	e7d5      	b.n	80215e2 <__hexnan+0xe2>

08021636 <__ascii_mbtowc>:
 8021636:	b082      	sub	sp, #8
 8021638:	b901      	cbnz	r1, 802163c <__ascii_mbtowc+0x6>
 802163a:	a901      	add	r1, sp, #4
 802163c:	b142      	cbz	r2, 8021650 <__ascii_mbtowc+0x1a>
 802163e:	b14b      	cbz	r3, 8021654 <__ascii_mbtowc+0x1e>
 8021640:	7813      	ldrb	r3, [r2, #0]
 8021642:	600b      	str	r3, [r1, #0]
 8021644:	7812      	ldrb	r2, [r2, #0]
 8021646:	1e10      	subs	r0, r2, #0
 8021648:	bf18      	it	ne
 802164a:	2001      	movne	r0, #1
 802164c:	b002      	add	sp, #8
 802164e:	4770      	bx	lr
 8021650:	4610      	mov	r0, r2
 8021652:	e7fb      	b.n	802164c <__ascii_mbtowc+0x16>
 8021654:	f06f 0001 	mvn.w	r0, #1
 8021658:	e7f8      	b.n	802164c <__ascii_mbtowc+0x16>

0802165a <_realloc_r>:
 802165a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802165e:	4680      	mov	r8, r0
 8021660:	4615      	mov	r5, r2
 8021662:	460c      	mov	r4, r1
 8021664:	b921      	cbnz	r1, 8021670 <_realloc_r+0x16>
 8021666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802166a:	4611      	mov	r1, r2
 802166c:	f7fd bc74 	b.w	801ef58 <_malloc_r>
 8021670:	b92a      	cbnz	r2, 802167e <_realloc_r+0x24>
 8021672:	f7fd fbfd 	bl	801ee70 <_free_r>
 8021676:	2400      	movs	r4, #0
 8021678:	4620      	mov	r0, r4
 802167a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802167e:	f000 f840 	bl	8021702 <_malloc_usable_size_r>
 8021682:	4285      	cmp	r5, r0
 8021684:	4606      	mov	r6, r0
 8021686:	d802      	bhi.n	802168e <_realloc_r+0x34>
 8021688:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802168c:	d8f4      	bhi.n	8021678 <_realloc_r+0x1e>
 802168e:	4629      	mov	r1, r5
 8021690:	4640      	mov	r0, r8
 8021692:	f7fd fc61 	bl	801ef58 <_malloc_r>
 8021696:	4607      	mov	r7, r0
 8021698:	2800      	cmp	r0, #0
 802169a:	d0ec      	beq.n	8021676 <_realloc_r+0x1c>
 802169c:	42b5      	cmp	r5, r6
 802169e:	462a      	mov	r2, r5
 80216a0:	4621      	mov	r1, r4
 80216a2:	bf28      	it	cs
 80216a4:	4632      	movcs	r2, r6
 80216a6:	f7fc fd80 	bl	801e1aa <memcpy>
 80216aa:	4621      	mov	r1, r4
 80216ac:	4640      	mov	r0, r8
 80216ae:	f7fd fbdf 	bl	801ee70 <_free_r>
 80216b2:	463c      	mov	r4, r7
 80216b4:	e7e0      	b.n	8021678 <_realloc_r+0x1e>

080216b6 <__ascii_wctomb>:
 80216b6:	4603      	mov	r3, r0
 80216b8:	4608      	mov	r0, r1
 80216ba:	b141      	cbz	r1, 80216ce <__ascii_wctomb+0x18>
 80216bc:	2aff      	cmp	r2, #255	@ 0xff
 80216be:	d904      	bls.n	80216ca <__ascii_wctomb+0x14>
 80216c0:	228a      	movs	r2, #138	@ 0x8a
 80216c2:	601a      	str	r2, [r3, #0]
 80216c4:	f04f 30ff 	mov.w	r0, #4294967295
 80216c8:	4770      	bx	lr
 80216ca:	700a      	strb	r2, [r1, #0]
 80216cc:	2001      	movs	r0, #1
 80216ce:	4770      	bx	lr

080216d0 <fiprintf>:
 80216d0:	b40e      	push	{r1, r2, r3}
 80216d2:	b503      	push	{r0, r1, lr}
 80216d4:	4601      	mov	r1, r0
 80216d6:	ab03      	add	r3, sp, #12
 80216d8:	4805      	ldr	r0, [pc, #20]	@ (80216f0 <fiprintf+0x20>)
 80216da:	f853 2b04 	ldr.w	r2, [r3], #4
 80216de:	6800      	ldr	r0, [r0, #0]
 80216e0:	9301      	str	r3, [sp, #4]
 80216e2:	f7ff f97d 	bl	80209e0 <_vfiprintf_r>
 80216e6:	b002      	add	sp, #8
 80216e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80216ec:	b003      	add	sp, #12
 80216ee:	4770      	bx	lr
 80216f0:	2000003c 	.word	0x2000003c

080216f4 <abort>:
 80216f4:	b508      	push	{r3, lr}
 80216f6:	2006      	movs	r0, #6
 80216f8:	f000 f834 	bl	8021764 <raise>
 80216fc:	2001      	movs	r0, #1
 80216fe:	f7e3 fa77 	bl	8004bf0 <_exit>

08021702 <_malloc_usable_size_r>:
 8021702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021706:	1f18      	subs	r0, r3, #4
 8021708:	2b00      	cmp	r3, #0
 802170a:	bfbc      	itt	lt
 802170c:	580b      	ldrlt	r3, [r1, r0]
 802170e:	18c0      	addlt	r0, r0, r3
 8021710:	4770      	bx	lr

08021712 <_raise_r>:
 8021712:	291f      	cmp	r1, #31
 8021714:	b538      	push	{r3, r4, r5, lr}
 8021716:	4605      	mov	r5, r0
 8021718:	460c      	mov	r4, r1
 802171a:	d904      	bls.n	8021726 <_raise_r+0x14>
 802171c:	2316      	movs	r3, #22
 802171e:	6003      	str	r3, [r0, #0]
 8021720:	f04f 30ff 	mov.w	r0, #4294967295
 8021724:	bd38      	pop	{r3, r4, r5, pc}
 8021726:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8021728:	b112      	cbz	r2, 8021730 <_raise_r+0x1e>
 802172a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802172e:	b94b      	cbnz	r3, 8021744 <_raise_r+0x32>
 8021730:	4628      	mov	r0, r5
 8021732:	f000 f831 	bl	8021798 <_getpid_r>
 8021736:	4622      	mov	r2, r4
 8021738:	4601      	mov	r1, r0
 802173a:	4628      	mov	r0, r5
 802173c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021740:	f000 b818 	b.w	8021774 <_kill_r>
 8021744:	2b01      	cmp	r3, #1
 8021746:	d00a      	beq.n	802175e <_raise_r+0x4c>
 8021748:	1c59      	adds	r1, r3, #1
 802174a:	d103      	bne.n	8021754 <_raise_r+0x42>
 802174c:	2316      	movs	r3, #22
 802174e:	6003      	str	r3, [r0, #0]
 8021750:	2001      	movs	r0, #1
 8021752:	e7e7      	b.n	8021724 <_raise_r+0x12>
 8021754:	2100      	movs	r1, #0
 8021756:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802175a:	4620      	mov	r0, r4
 802175c:	4798      	blx	r3
 802175e:	2000      	movs	r0, #0
 8021760:	e7e0      	b.n	8021724 <_raise_r+0x12>
	...

08021764 <raise>:
 8021764:	4b02      	ldr	r3, [pc, #8]	@ (8021770 <raise+0xc>)
 8021766:	4601      	mov	r1, r0
 8021768:	6818      	ldr	r0, [r3, #0]
 802176a:	f7ff bfd2 	b.w	8021712 <_raise_r>
 802176e:	bf00      	nop
 8021770:	2000003c 	.word	0x2000003c

08021774 <_kill_r>:
 8021774:	b538      	push	{r3, r4, r5, lr}
 8021776:	4d07      	ldr	r5, [pc, #28]	@ (8021794 <_kill_r+0x20>)
 8021778:	2300      	movs	r3, #0
 802177a:	4604      	mov	r4, r0
 802177c:	4608      	mov	r0, r1
 802177e:	4611      	mov	r1, r2
 8021780:	602b      	str	r3, [r5, #0]
 8021782:	f7e3 fa25 	bl	8004bd0 <_kill>
 8021786:	1c43      	adds	r3, r0, #1
 8021788:	d102      	bne.n	8021790 <_kill_r+0x1c>
 802178a:	682b      	ldr	r3, [r5, #0]
 802178c:	b103      	cbz	r3, 8021790 <_kill_r+0x1c>
 802178e:	6023      	str	r3, [r4, #0]
 8021790:	bd38      	pop	{r3, r4, r5, pc}
 8021792:	bf00      	nop
 8021794:	2001bee0 	.word	0x2001bee0

08021798 <_getpid_r>:
 8021798:	f7e3 ba12 	b.w	8004bc0 <_getpid>

0802179c <_init>:
 802179c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802179e:	bf00      	nop
 80217a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80217a2:	bc08      	pop	{r3}
 80217a4:	469e      	mov	lr, r3
 80217a6:	4770      	bx	lr

080217a8 <_fini>:
 80217a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80217aa:	bf00      	nop
 80217ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80217ae:	bc08      	pop	{r3}
 80217b0:	469e      	mov	lr, r3
 80217b2:	4770      	bx	lr
