
BF01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000216ac  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001318  08021890  08021890  00022890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022ba8  08022ba8  000241f8  2**0
                  CONTENTS
  4 .ARM          00000008  08022ba8  08022ba8  00023ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022bb0  08022bb0  000241f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022bb0  08022bb0  00023bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08022bb4  08022bb4  00023bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  08022bb8  00024000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001bcf8  200001f8  08022db0  000241f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001bef0  08022db0  00024ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000241f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ce3  00000000  00000000  00024228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000408a  00000000  00000000  00038f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0003cf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010e0  00000000  00000000  0003e638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002859a  00000000  00000000  0003f718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d161  00000000  00000000  00067cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6c24  00000000  00000000  00084e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ba37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000740c  00000000  00000000  0015ba7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00162e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08021874 	.word	0x08021874

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	08021874 	.word	0x08021874

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8000d54:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000d58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	d002      	beq.n	8000d7a <LL_ADC_SetGainCompensation+0x36>
 8000d74:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d78:	e000      	b.n	8000d7c <LL_ADC_SetGainCompensation+0x38>
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	611a      	str	r2, [r3, #16]
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b087      	sub	sp, #28
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3330      	adds	r3, #48	@ 0x30
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	0a1b      	lsrs	r3, r3, #8
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	f003 030c 	and.w	r3, r3, #12
 8000daa:	4413      	add	r3, r2
 8000dac:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	f003 031f 	and.w	r3, r3, #31
 8000db8:	211f      	movs	r1, #31
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	0e9b      	lsrs	r3, r3, #26
 8000dc6:	f003 011f 	and.w	r1, r3, #31
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	f003 031f 	and.w	r3, r3, #31
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000dda:	bf00      	nop
 8000ddc:	371c      	adds	r7, #28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b087      	sub	sp, #28
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3314      	adds	r3, #20
 8000df6:	461a      	mov	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	0e5b      	lsrs	r3, r3, #25
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	4413      	add	r3, r2
 8000e04:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	0d1b      	lsrs	r3, r3, #20
 8000e0e:	f003 031f 	and.w	r3, r3, #31
 8000e12:	2107      	movs	r1, #7
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	0d1b      	lsrs	r3, r3, #20
 8000e20:	f003 031f 	and.w	r3, r3, #31
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e30:	bf00      	nop
 8000e32:	371c      	adds	r7, #28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e54:	43db      	mvns	r3, r3
 8000e56:	401a      	ands	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0318 	and.w	r3, r3, #24
 8000e5e:	4908      	ldr	r1, [pc, #32]	@ (8000e80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e60:	40d9      	lsrs	r1, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	400b      	ands	r3, r1
 8000e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	0007ffff 	.word	0x0007ffff

08000e84 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000e96:	f023 0303 	bic.w	r3, r3, #3
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	611a      	str	r2, [r3, #16]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000ebe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	6093      	str	r3, [r2, #8]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ee2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ee6:	d101      	bne.n	8000eec <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000f0a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f0e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f36:	d101      	bne.n	8000f3c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f5a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f5e:	f043 0201 	orr.w	r2, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f82:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f86:	f043 0202 	orr.w	r2, r3, #2
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d101      	bne.n	8000fb2 <LL_ADC_IsEnabled+0x18>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <LL_ADC_IsEnabled+0x1a>
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000fd2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(const ADC_TypeDef *ADCx)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001002:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001006:	d101      	bne.n	800100c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800102a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800102e:	f043 0204 	orr.w	r2, r3, #4
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(const ADC_TypeDef *ADCx)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	b29b      	uxth	r3, r3
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(const ADC_TypeDef *ADCx)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b04      	cmp	r3, #4
 800106e:	d101      	bne.n	8001074 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2204      	movs	r2, #4
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_ADC_ClearFlag_EOS>:
  * @rmtoll ISR      EOS            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2208      	movs	r2, #8
 80010a8:	601a      	str	r2, [r3, #0]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 80010c0:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <LL_RCC_SetADCClockSource+0x44>)
 80010c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	0c1b      	lsrs	r3, r3, #16
 80010ca:	f003 031f 	and.w	r3, r3, #31
 80010ce:	2103      	movs	r1, #3
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	401a      	ands	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	b2d9      	uxtb	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	0c1b      	lsrs	r3, r3, #16
 80010e0:	f003 031f 	and.w	r3, r3, #31
 80010e4:	fa01 f303 	lsl.w	r3, r1, r3
 80010e8:	4904      	ldr	r1, [pc, #16]	@ (80010fc <LL_RCC_SetADCClockSource+0x44>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40021000 	.word	0x40021000

08001100 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800110a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800110c:	4907      	ldr	r1, [pc, #28]	@ (800112c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4313      	orrs	r3, r2
 8001112:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001116:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4013      	ands	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	40021000 	.word	0x40021000

08001130 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	@ 0x50
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001136:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001142:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]
 8001152:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001154:	f107 0318 	add.w	r3, r7, #24
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	463b      	mov	r3, r7
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_PLL);
 8001172:	4840      	ldr	r0, [pc, #256]	@ (8001274 <MX_ADC1_Init+0x144>)
 8001174:	f7ff ffa0 	bl	80010b8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 8001178:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800117c:	f7ff ffc0 	bl	8001100 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001180:	2002      	movs	r0, #2
 8001182:	f7ff ffbd 	bl	8001100 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PB12   ------> ADC1_IN11
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8001186:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800118a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800118c:	2303      	movs	r3, #3
 800118e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	463b      	mov	r3, r7
 8001196:	4619      	mov	r1, r3
 8001198:	4837      	ldr	r0, [pc, #220]	@ (8001278 <MX_ADC1_Init+0x148>)
 800119a:	f019 fad4 	bl	801a746 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800119e:	2300      	movs	r3, #0
 80011a0:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80011a2:	2300      	movs	r3, #0
 80011a4:	647b      	str	r3, [r7, #68]	@ 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80011aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80011b4:	f019 f90c 	bl	801a3d0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80011cc:	2300      	movs	r3, #0
 80011ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80011d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011d4:	4619      	mov	r1, r3
 80011d6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80011da:	f019 f91f 	bl	801a41c <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC1, 0);
 80011de:	2100      	movs	r1, #0
 80011e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80011e4:	f7ff fdae 	bl	8000d44 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80011e8:	2100      	movs	r1, #0
 80011ea:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80011ee:	f7ff fe49 	bl	8000e84 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV4;
 80011f2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80011f6:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80011fc:	f107 0318 	add.w	r3, r7, #24
 8001200:	4619      	mov	r1, r3
 8001202:	481e      	ldr	r0, [pc, #120]	@ (800127c <MX_ADC1_Init+0x14c>)
 8001204:	f019 f880 	bl	801a308 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8001208:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800120c:	f7ff fe4f 	bl	8000eae <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8001210:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001214:	f7ff fe71 	bl	8000efa <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001218:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <MX_ADC1_Init+0x150>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	099b      	lsrs	r3, r3, #6
 800121e:	4a19      	ldr	r2, [pc, #100]	@ (8001284 <MX_ADC1_Init+0x154>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	099a      	lsrs	r2, r3, #6
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	461a      	mov	r2, r3
 8001230:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <MX_ADC1_Init+0x158>)
 8001232:	fba3 2302 	umull	r2, r3, r3, r2
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 800123a:	e002      	b.n	8001242 <MX_ADC1_Init+0x112>
  {
    wait_loop_index--;
 800123c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800123e:	3b01      	subs	r3, #1
 8001240:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 8001242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f9      	bne.n	800123c <MX_ADC1_Init+0x10c>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_11);
 8001248:	4a10      	ldr	r2, [pc, #64]	@ (800128c <MX_ADC1_Init+0x15c>)
 800124a:	2106      	movs	r1, #6
 800124c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001250:	f7ff fd9d 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_24CYCLES_5);
 8001254:	2203      	movs	r2, #3
 8001256:	490d      	ldr	r1, [pc, #52]	@ (800128c <MX_ADC1_Init+0x15c>)
 8001258:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800125c:	f7ff fdc3 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SINGLE_ENDED);
 8001260:	227f      	movs	r2, #127	@ 0x7f
 8001262:	490a      	ldr	r1, [pc, #40]	@ (800128c <MX_ADC1_Init+0x15c>)
 8001264:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001268:	f7ff fde8 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	3750      	adds	r7, #80	@ 0x50
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	001c0001 	.word	0x001c0001
 8001278:	48000400 	.word	0x48000400
 800127c:	50000300 	.word	0x50000300
 8001280:	20000004 	.word	0x20000004
 8001284:	053e2d63 	.word	0x053e2d63
 8001288:	cccccccd 	.word	0xcccccccd
 800128c:	2e300800 	.word	0x2e300800

08001290 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b090      	sub	sp, #64	@ 0x40
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001296:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80012a2:	f107 0318 	add.w	r3, r7, #24
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	463b      	mov	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
 80012c2:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_PLL);
 80012c4:	486a      	ldr	r0, [pc, #424]	@ (8001470 <MX_ADC2_Init+0x1e0>)
 80012c6:	f7ff fef7 	bl	80010b8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 80012ca:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012ce:	f7ff ff17 	bl	8001100 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80012d2:	2001      	movs	r0, #1
 80012d4:	f7ff ff14 	bl	8001100 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80012d8:	2004      	movs	r0, #4
 80012da:	f7ff ff11 	bl	8001100 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PA6   ------> ADC2_IN3
  PA7   ------> ADC2_IN4
  PC4   ------> ADC2_IN5
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80012de:	2340      	movs	r3, #64	@ 0x40
 80012e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f2:	f019 fa28 	bl	801a746 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80012f6:	2380      	movs	r3, #128	@ 0x80
 80012f8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80012fa:	2303      	movs	r3, #3
 80012fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	463b      	mov	r3, r7
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130a:	f019 fa1c 	bl	801a746 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800130e:	2310      	movs	r3, #16
 8001310:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131a:	463b      	mov	r3, r7
 800131c:	4619      	mov	r1, r3
 800131e:	4855      	ldr	r0, [pc, #340]	@ (8001474 <MX_ADC2_Init+0x1e4>)
 8001320:	f019 fa11 	bl	801a746 <LL_GPIO_Init>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001324:	2300      	movs	r3, #0
 8001326:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001328:	2300      	movs	r3, #0
 800132a:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800132c:	2300      	movs	r3, #0
 800132e:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8001330:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001334:	4619      	mov	r1, r3
 8001336:	4850      	ldr	r0, [pc, #320]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001338:	f019 f84a 	bl	801a3d0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS;
 8001340:	2305      	movs	r3, #5
 8001342:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 8001344:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001348:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800134e:	2300      	movs	r3, #0
 8001350:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	4619      	mov	r1, r3
 800135c:	4846      	ldr	r0, [pc, #280]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 800135e:	f019 f85d 	bl	801a41c <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC2, 0);
 8001362:	2100      	movs	r1, #0
 8001364:	4844      	ldr	r0, [pc, #272]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001366:	f7ff fced 	bl	8000d44 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC2, LL_ADC_OVS_DISABLE);
 800136a:	2100      	movs	r1, #0
 800136c:	4842      	ldr	r0, [pc, #264]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 800136e:	f7ff fd89 	bl	8000e84 <LL_ADC_SetOverSamplingScope>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8001372:	4841      	ldr	r0, [pc, #260]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001374:	f7ff fd9b 	bl	8000eae <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8001378:	483f      	ldr	r0, [pc, #252]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 800137a:	f7ff fdbe 	bl	8000efa <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800137e:	4b3f      	ldr	r3, [pc, #252]	@ (800147c <MX_ADC2_Init+0x1ec>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	099b      	lsrs	r3, r3, #6
 8001384:	4a3e      	ldr	r2, [pc, #248]	@ (8001480 <MX_ADC2_Init+0x1f0>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	099a      	lsrs	r2, r3, #6
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	461a      	mov	r2, r3
 8001396:	4b3b      	ldr	r3, [pc, #236]	@ (8001484 <MX_ADC2_Init+0x1f4>)
 8001398:	fba3 2302 	umull	r2, r3, r3, r2
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while(wait_loop_index != 0)
 80013a0:	e002      	b.n	80013a8 <MX_ADC2_Init+0x118>
  {
    wait_loop_index--;
 80013a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013a4:	3b01      	subs	r3, #1
 80013a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while(wait_loop_index != 0)
 80013a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f9      	bne.n	80013a2 <MX_ADC2_Init+0x112>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 80013ae:	4a36      	ldr	r2, [pc, #216]	@ (8001488 <MX_ADC2_Init+0x1f8>)
 80013b0:	2106      	movs	r1, #6
 80013b2:	4831      	ldr	r0, [pc, #196]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 80013b4:	f7ff fceb 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80013b8:	2202      	movs	r2, #2
 80013ba:	4933      	ldr	r1, [pc, #204]	@ (8001488 <MX_ADC2_Init+0x1f8>)
 80013bc:	482e      	ldr	r0, [pc, #184]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 80013be:	f7ff fd12 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 80013c2:	227f      	movs	r2, #127	@ 0x7f
 80013c4:	4930      	ldr	r1, [pc, #192]	@ (8001488 <MX_ADC2_Init+0x1f8>)
 80013c6:	482c      	ldr	r0, [pc, #176]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 80013c8:	f7ff fd38 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_4);
 80013cc:	4a2e      	ldr	r2, [pc, #184]	@ (8001488 <MX_ADC2_Init+0x1f8>)
 80013ce:	210c      	movs	r1, #12
 80013d0:	4829      	ldr	r0, [pc, #164]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 80013d2:	f7ff fcdc 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80013d6:	2202      	movs	r2, #2
 80013d8:	492b      	ldr	r1, [pc, #172]	@ (8001488 <MX_ADC2_Init+0x1f8>)
 80013da:	4827      	ldr	r0, [pc, #156]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 80013dc:	f7ff fd03 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 80013e0:	227f      	movs	r2, #127	@ 0x7f
 80013e2:	4929      	ldr	r1, [pc, #164]	@ (8001488 <MX_ADC2_Init+0x1f8>)
 80013e4:	4824      	ldr	r0, [pc, #144]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 80013e6:	f7ff fd29 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_5);
 80013ea:	4a28      	ldr	r2, [pc, #160]	@ (800148c <MX_ADC2_Init+0x1fc>)
 80013ec:	2112      	movs	r1, #18
 80013ee:	4822      	ldr	r0, [pc, #136]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 80013f0:	f7ff fccd 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80013f4:	2202      	movs	r2, #2
 80013f6:	4925      	ldr	r1, [pc, #148]	@ (800148c <MX_ADC2_Init+0x1fc>)
 80013f8:	481f      	ldr	r0, [pc, #124]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 80013fa:	f7ff fcf4 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_5, LL_ADC_SINGLE_ENDED);
 80013fe:	227f      	movs	r2, #127	@ 0x7f
 8001400:	4922      	ldr	r1, [pc, #136]	@ (800148c <MX_ADC2_Init+0x1fc>)
 8001402:	481d      	ldr	r0, [pc, #116]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001404:	f7ff fd1a 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_5);
 8001408:	4a20      	ldr	r2, [pc, #128]	@ (800148c <MX_ADC2_Init+0x1fc>)
 800140a:	2118      	movs	r1, #24
 800140c:	481a      	ldr	r0, [pc, #104]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 800140e:	f7ff fcbe 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 8001412:	2202      	movs	r2, #2
 8001414:	491d      	ldr	r1, [pc, #116]	@ (800148c <MX_ADC2_Init+0x1fc>)
 8001416:	4818      	ldr	r0, [pc, #96]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001418:	f7ff fce5 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_5, LL_ADC_SINGLE_ENDED);
 800141c:	227f      	movs	r2, #127	@ 0x7f
 800141e:	491b      	ldr	r1, [pc, #108]	@ (800148c <MX_ADC2_Init+0x1fc>)
 8001420:	4815      	ldr	r0, [pc, #84]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001422:	f7ff fd0b 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_3);
 8001426:	4a1a      	ldr	r2, [pc, #104]	@ (8001490 <MX_ADC2_Init+0x200>)
 8001428:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800142c:	4812      	ldr	r0, [pc, #72]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 800142e:	f7ff fcae 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 8001432:	2202      	movs	r2, #2
 8001434:	4916      	ldr	r1, [pc, #88]	@ (8001490 <MX_ADC2_Init+0x200>)
 8001436:	4810      	ldr	r0, [pc, #64]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001438:	f7ff fcd5 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 800143c:	227f      	movs	r2, #127	@ 0x7f
 800143e:	4914      	ldr	r1, [pc, #80]	@ (8001490 <MX_ADC2_Init+0x200>)
 8001440:	480d      	ldr	r0, [pc, #52]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001442:	f7ff fcfb 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_3);
 8001446:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <MX_ADC2_Init+0x200>)
 8001448:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800144c:	480a      	ldr	r0, [pc, #40]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 800144e:	f7ff fc9e 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 8001452:	2202      	movs	r2, #2
 8001454:	490e      	ldr	r1, [pc, #56]	@ (8001490 <MX_ADC2_Init+0x200>)
 8001456:	4808      	ldr	r0, [pc, #32]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001458:	f7ff fcc5 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 800145c:	227f      	movs	r2, #127	@ 0x7f
 800145e:	490c      	ldr	r1, [pc, #48]	@ (8001490 <MX_ADC2_Init+0x200>)
 8001460:	4805      	ldr	r0, [pc, #20]	@ (8001478 <MX_ADC2_Init+0x1e8>)
 8001462:	f7ff fceb 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	3740      	adds	r7, #64	@ 0x40
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	001c0001 	.word	0x001c0001
 8001474:	48000800 	.word	0x48000800
 8001478:	50000100 	.word	0x50000100
 800147c:	20000004 	.word	0x20000004
 8001480:	053e2d63 	.word	0x053e2d63
 8001484:	cccccccd 	.word	0xcccccccd
 8001488:	10c00010 	.word	0x10c00010
 800148c:	14f00020 	.word	0x14f00020
 8001490:	0c900008 	.word	0x0c900008

08001494 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b094      	sub	sp, #80	@ 0x50
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800149a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80014a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80014b8:	f107 0318 	add.w	r3, r7, #24
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c6:	463b      	mov	r3, r7
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
 80014d4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC345_CLKSOURCE_PLL);
 80014d6:	4843      	ldr	r0, [pc, #268]	@ (80015e4 <MX_ADC3_Init+0x150>)
 80014d8:	f7ff fdee 	bl	80010b8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC345);
 80014dc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80014e0:	f7ff fe0e 	bl	8001100 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80014e4:	2002      	movs	r0, #2
 80014e6:	f7ff fe0b 	bl	8001100 <LL_AHB2_GRP1_EnableClock>
  /**ADC3 GPIO Configuration
  PB1   ------> ADC3_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80014ea:	2302      	movs	r3, #2
 80014ec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80014ee:	2303      	movs	r3, #3
 80014f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	463b      	mov	r3, r7
 80014f8:	4619      	mov	r1, r3
 80014fa:	483b      	ldr	r0, [pc, #236]	@ (80015e8 <MX_ADC3_Init+0x154>)
 80014fc:	f019 f923 	bl	801a746 <LL_GPIO_Init>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001500:	2300      	movs	r3, #0
 8001502:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001504:	2300      	movs	r3, #0
 8001506:	647b      	str	r3, [r7, #68]	@ 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001508:	2300      	movs	r3, #0
 800150a:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_ADC_Init(ADC3, &ADC_InitStruct);
 800150c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001510:	4619      	mov	r1, r3
 8001512:	4836      	ldr	r0, [pc, #216]	@ (80015ec <MX_ADC3_Init+0x158>)
 8001514:	f018 ff5c 	bl	801a3d0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 800151c:	2301      	movs	r3, #1
 800151e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 8001520:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001524:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001526:	2300      	movs	r3, #0
 8001528:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800152a:	2300      	movs	r3, #0
 800152c:	63bb      	str	r3, [r7, #56]	@ 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800152e:	2300      	movs	r3, #0
 8001530:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_ADC_REG_Init(ADC3, &ADC_REG_InitStruct);
 8001532:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001536:	4619      	mov	r1, r3
 8001538:	482c      	ldr	r0, [pc, #176]	@ (80015ec <MX_ADC3_Init+0x158>)
 800153a:	f018 ff6f 	bl	801a41c <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC3, 0);
 800153e:	2100      	movs	r1, #0
 8001540:	482a      	ldr	r0, [pc, #168]	@ (80015ec <MX_ADC3_Init+0x158>)
 8001542:	f7ff fbff 	bl	8000d44 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC3, LL_ADC_OVS_DISABLE);
 8001546:	2100      	movs	r1, #0
 8001548:	4828      	ldr	r0, [pc, #160]	@ (80015ec <MX_ADC3_Init+0x158>)
 800154a:	f7ff fc9b 	bl	8000e84 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV4;
 800154e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001552:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 8001558:	f107 0318 	add.w	r3, r7, #24
 800155c:	4619      	mov	r1, r3
 800155e:	4824      	ldr	r0, [pc, #144]	@ (80015f0 <MX_ADC3_Init+0x15c>)
 8001560:	f018 fed2 	bl	801a308 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC3);
 8001564:	4821      	ldr	r0, [pc, #132]	@ (80015ec <MX_ADC3_Init+0x158>)
 8001566:	f7ff fca2 	bl	8000eae <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC3);
 800156a:	4820      	ldr	r0, [pc, #128]	@ (80015ec <MX_ADC3_Init+0x158>)
 800156c:	f7ff fcc5 	bl	8000efa <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001570:	4b20      	ldr	r3, [pc, #128]	@ (80015f4 <MX_ADC3_Init+0x160>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	099b      	lsrs	r3, r3, #6
 8001576:	4a20      	ldr	r2, [pc, #128]	@ (80015f8 <MX_ADC3_Init+0x164>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	099a      	lsrs	r2, r3, #6
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	461a      	mov	r2, r3
 8001588:	4b1c      	ldr	r3, [pc, #112]	@ (80015fc <MX_ADC3_Init+0x168>)
 800158a:	fba3 2302 	umull	r2, r3, r3, r2
 800158e:	08db      	lsrs	r3, r3, #3
 8001590:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 8001592:	e002      	b.n	800159a <MX_ADC3_Init+0x106>
  {
    wait_loop_index--;
 8001594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001596:	3b01      	subs	r3, #1
 8001598:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 800159a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f9      	bne.n	8001594 <MX_ADC3_Init+0x100>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80015a0:	4a17      	ldr	r2, [pc, #92]	@ (8001600 <MX_ADC3_Init+0x16c>)
 80015a2:	2106      	movs	r1, #6
 80015a4:	4811      	ldr	r0, [pc, #68]	@ (80015ec <MX_ADC3_Init+0x158>)
 80015a6:	f7ff fbf2 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80015aa:	2202      	movs	r2, #2
 80015ac:	4914      	ldr	r1, [pc, #80]	@ (8001600 <MX_ADC3_Init+0x16c>)
 80015ae:	480f      	ldr	r0, [pc, #60]	@ (80015ec <MX_ADC3_Init+0x158>)
 80015b0:	f7ff fc19 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80015b4:	227f      	movs	r2, #127	@ 0x7f
 80015b6:	4912      	ldr	r1, [pc, #72]	@ (8001600 <MX_ADC3_Init+0x16c>)
 80015b8:	480c      	ldr	r0, [pc, #48]	@ (80015ec <MX_ADC3_Init+0x158>)
 80015ba:	f7ff fc3f 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 80015be:	4a10      	ldr	r2, [pc, #64]	@ (8001600 <MX_ADC3_Init+0x16c>)
 80015c0:	210c      	movs	r1, #12
 80015c2:	480a      	ldr	r0, [pc, #40]	@ (80015ec <MX_ADC3_Init+0x158>)
 80015c4:	f7ff fbe3 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80015c8:	2202      	movs	r2, #2
 80015ca:	490d      	ldr	r1, [pc, #52]	@ (8001600 <MX_ADC3_Init+0x16c>)
 80015cc:	4807      	ldr	r0, [pc, #28]	@ (80015ec <MX_ADC3_Init+0x158>)
 80015ce:	f7ff fc0a 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80015d2:	227f      	movs	r2, #127	@ 0x7f
 80015d4:	490a      	ldr	r1, [pc, #40]	@ (8001600 <MX_ADC3_Init+0x16c>)
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <MX_ADC3_Init+0x158>)
 80015d8:	f7ff fc30 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3750      	adds	r7, #80	@ 0x50
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	001e0001 	.word	0x001e0001
 80015e8:	48000400 	.word	0x48000400
 80015ec:	50000400 	.word	0x50000400
 80015f0:	50000700 	.word	0x50000700
 80015f4:	20000004 	.word	0x20000004
 80015f8:	053e2d63 	.word	0x053e2d63
 80015fc:	cccccccd 	.word	0xcccccccd
 8001600:	04300002 	.word	0x04300002

08001604 <ADC1_Calibration>:
#define ADC_CONVERT_DATA_BUFFR_SIZE	((uint32_t)3)

uint16_t adcConvertData[ADC_CONVERT_DATA_BUFFR_SIZE];

void ADC1_Calibration(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC1) != 0) return;
 8001608:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800160c:	f7ff fc61 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d11f      	bne.n	8001656 <ADC1_Calibration+0x52>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC1) != 1) return;
 8001616:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800161a:	f7ff fc82 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 800161e:	4603      	mov	r3, r0
 8001620:	2b01      	cmp	r3, #1
 8001622:	d11a      	bne.n	800165a <ADC1_Calibration+0x56>
	if(LL_ADC_IsEnabled(ADC1) != 0){
 8001624:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001628:	f7ff fcb7 	bl	8000f9a <LL_ADC_IsEnabled>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <ADC1_Calibration+0x36>
		LL_ADC_Disable(ADC1);
 8001632:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001636:	f7ff fc9c 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC1,LL_ADC_SINGLE_ENDED);
 800163a:	217f      	movs	r1, #127	@ 0x7f
 800163c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001640:	f7ff fcbe 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC1)==1);
 8001644:	bf00      	nop
 8001646:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800164a:	f7ff fcd2 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 800164e:	4603      	mov	r3, r0
 8001650:	2b01      	cmp	r3, #1
 8001652:	d0f8      	beq.n	8001646 <ADC1_Calibration+0x42>
 8001654:	e002      	b.n	800165c <ADC1_Calibration+0x58>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC1) != 0) return;
 8001656:	bf00      	nop
 8001658:	e000      	b.n	800165c <ADC1_Calibration+0x58>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC1) != 1) return;
 800165a:	bf00      	nop
}
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <ADC2_Calibration>:

void ADC2_Calibration(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC2) != 0) return;
 8001664:	4812      	ldr	r0, [pc, #72]	@ (80016b0 <ADC2_Calibration+0x50>)
 8001666:	f7ff fc34 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d11a      	bne.n	80016a6 <ADC2_Calibration+0x46>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC2) != 1) return;
 8001670:	480f      	ldr	r0, [pc, #60]	@ (80016b0 <ADC2_Calibration+0x50>)
 8001672:	f7ff fc56 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 8001676:	4603      	mov	r3, r0
 8001678:	2b01      	cmp	r3, #1
 800167a:	d116      	bne.n	80016aa <ADC2_Calibration+0x4a>
	if(LL_ADC_IsEnabled(ADC2) != 0){
 800167c:	480c      	ldr	r0, [pc, #48]	@ (80016b0 <ADC2_Calibration+0x50>)
 800167e:	f7ff fc8c 	bl	8000f9a <LL_ADC_IsEnabled>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <ADC2_Calibration+0x2e>
		LL_ADC_Disable(ADC2);
 8001688:	4809      	ldr	r0, [pc, #36]	@ (80016b0 <ADC2_Calibration+0x50>)
 800168a:	f7ff fc72 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC2,LL_ADC_SINGLE_ENDED);
 800168e:	217f      	movs	r1, #127	@ 0x7f
 8001690:	4807      	ldr	r0, [pc, #28]	@ (80016b0 <ADC2_Calibration+0x50>)
 8001692:	f7ff fc95 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC2)==1);
 8001696:	bf00      	nop
 8001698:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <ADC2_Calibration+0x50>)
 800169a:	f7ff fcaa 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d0f9      	beq.n	8001698 <ADC2_Calibration+0x38>
 80016a4:	e002      	b.n	80016ac <ADC2_Calibration+0x4c>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC2) != 0) return;
 80016a6:	bf00      	nop
 80016a8:	e000      	b.n	80016ac <ADC2_Calibration+0x4c>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC2) != 1) return;
 80016aa:	bf00      	nop
}
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	50000100 	.word	0x50000100

080016b4 <ADC3_Calibration>:

void ADC3_Calibration(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC3) != 0) return;
 80016b8:	4812      	ldr	r0, [pc, #72]	@ (8001704 <ADC3_Calibration+0x50>)
 80016ba:	f7ff fc0a 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d11a      	bne.n	80016fa <ADC3_Calibration+0x46>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC3) != 1) return;
 80016c4:	480f      	ldr	r0, [pc, #60]	@ (8001704 <ADC3_Calibration+0x50>)
 80016c6:	f7ff fc2c 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d116      	bne.n	80016fe <ADC3_Calibration+0x4a>
	if(LL_ADC_IsEnabled(ADC3) != 0){
 80016d0:	480c      	ldr	r0, [pc, #48]	@ (8001704 <ADC3_Calibration+0x50>)
 80016d2:	f7ff fc62 	bl	8000f9a <LL_ADC_IsEnabled>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <ADC3_Calibration+0x2e>
		LL_ADC_Disable(ADC3);
 80016dc:	4809      	ldr	r0, [pc, #36]	@ (8001704 <ADC3_Calibration+0x50>)
 80016de:	f7ff fc48 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC3,LL_ADC_SINGLE_ENDED);
 80016e2:	217f      	movs	r1, #127	@ 0x7f
 80016e4:	4807      	ldr	r0, [pc, #28]	@ (8001704 <ADC3_Calibration+0x50>)
 80016e6:	f7ff fc6b 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC3)==1);
 80016ea:	bf00      	nop
 80016ec:	4805      	ldr	r0, [pc, #20]	@ (8001704 <ADC3_Calibration+0x50>)
 80016ee:	f7ff fc80 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d0f9      	beq.n	80016ec <ADC3_Calibration+0x38>
 80016f8:	e002      	b.n	8001700 <ADC3_Calibration+0x4c>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC3) != 0) return;
 80016fa:	bf00      	nop
 80016fc:	e000      	b.n	8001700 <ADC3_Calibration+0x4c>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC3) != 1) return;
 80016fe:	bf00      	nop
}
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	50000400 	.word	0x50000400

08001708 <ADC3_Start>:

void ADC3_Start(void){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  ADC3_Calibration();
 800170c:	f7ff ffd2 	bl	80016b4 <ADC3_Calibration>
	LL_ADC_Enable(ADC3);
 8001710:	4802      	ldr	r0, [pc, #8]	@ (800171c <ADC3_Start+0x14>)
 8001712:	f7ff fc1a 	bl	8000f4a <LL_ADC_Enable>
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	50000400 	.word	0x50000400

08001720 <ADC2_Start>:

void ADC2_Start(void){
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  ADC2_Calibration();
 8001724:	f7ff ff9c 	bl	8001660 <ADC2_Calibration>
	LL_ADC_Enable(ADC2);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <ADC2_Start+0x14>)
 800172a:	f7ff fc0e 	bl	8000f4a <LL_ADC_Enable>
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	50000100 	.word	0x50000100

08001738 <ADC1_Start>:

void ADC1_Start(void){
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  ADC1_Calibration();
 800173c:	f7ff ff62 	bl	8001604 <ADC1_Calibration>
	LL_ADC_Enable(ADC1);
 8001740:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001744:	f7ff fc01 	bl	8000f4a <LL_ADC_Enable>
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <GetSensor_FL>:

uint16_t GetSensor_FL(void){
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC3);
 8001750:	4809      	ldr	r0, [pc, #36]	@ (8001778 <GetSensor_FL+0x2c>)
 8001752:	f7ff fc62 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC3)==0);
 8001756:	bf00      	nop
 8001758:	4807      	ldr	r0, [pc, #28]	@ (8001778 <GetSensor_FL+0x2c>)
 800175a:	f7ff fc7f 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f9      	beq.n	8001758 <GetSensor_FL+0xc>
	LL_ADC_ClearFlag_EOC(ADC3);
 8001764:	4804      	ldr	r0, [pc, #16]	@ (8001778 <GetSensor_FL+0x2c>)
 8001766:	f7ff fc8c 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC3);
 800176a:	4803      	ldr	r0, [pc, #12]	@ (8001778 <GetSensor_FL+0x2c>)
 800176c:	f7ff fc69 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	50000400 	.word	0x50000400

0800177c <ADC3_clearEOS>:

void ADC3_clearEOS(void){
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	LL_ADC_ClearFlag_EOS(ADC3);
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <ADC3_clearEOS+0x10>)
 8001782:	f7ff fc8b 	bl	800109c <LL_ADC_ClearFlag_EOS>
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	50000400 	.word	0x50000400

08001790 <ADC2_clearEOS>:

void ADC2_clearEOS(void){
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	LL_ADC_ClearFlag_EOS(ADC2);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <ADC2_clearEOS+0x10>)
 8001796:	f7ff fc81 	bl	800109c <LL_ADC_ClearFlag_EOS>
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	50000100 	.word	0x50000100

080017a4 <ADC1_clearEOS>:

void ADC1_clearEOS(void){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	LL_ADC_ClearFlag_EOS(ADC1);
 80017a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80017ac:	f7ff fc76 	bl	800109c <LL_ADC_ClearFlag_EOS>
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <GetSensor_SL>:


uint16_t GetSensor_SL(void){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC2);
 80017b8:	4809      	ldr	r0, [pc, #36]	@ (80017e0 <GetSensor_SL+0x2c>)
 80017ba:	f7ff fc2e 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC2)==0);
 80017be:	bf00      	nop
 80017c0:	4807      	ldr	r0, [pc, #28]	@ (80017e0 <GetSensor_SL+0x2c>)
 80017c2:	f7ff fc4b 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f9      	beq.n	80017c0 <GetSensor_SL+0xc>
	LL_ADC_ClearFlag_EOC(ADC2);
 80017cc:	4804      	ldr	r0, [pc, #16]	@ (80017e0 <GetSensor_SL+0x2c>)
 80017ce:	f7ff fc58 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC2);
 80017d2:	4803      	ldr	r0, [pc, #12]	@ (80017e0 <GetSensor_SL+0x2c>)
 80017d4:	f7ff fc35 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	50000100 	.word	0x50000100

080017e4 <GetSensor_SR>:

uint16_t GetSensor_SR(void){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC2);
 80017e8:	4809      	ldr	r0, [pc, #36]	@ (8001810 <GetSensor_SR+0x2c>)
 80017ea:	f7ff fc16 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC2)==0);
 80017ee:	bf00      	nop
 80017f0:	4807      	ldr	r0, [pc, #28]	@ (8001810 <GetSensor_SR+0x2c>)
 80017f2:	f7ff fc33 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f9      	beq.n	80017f0 <GetSensor_SR+0xc>
	LL_ADC_ClearFlag_EOC(ADC2);
 80017fc:	4804      	ldr	r0, [pc, #16]	@ (8001810 <GetSensor_SR+0x2c>)
 80017fe:	f7ff fc40 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC2);
 8001802:	4803      	ldr	r0, [pc, #12]	@ (8001810 <GetSensor_SR+0x2c>)
 8001804:	f7ff fc1d 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	50000100 	.word	0x50000100

08001814 <GetSensor_FR>:

uint16_t GetSensor_FR(void){
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC2);
 8001818:	4809      	ldr	r0, [pc, #36]	@ (8001840 <GetSensor_FR+0x2c>)
 800181a:	f7ff fbfe 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC2)==0);
 800181e:	bf00      	nop
 8001820:	4807      	ldr	r0, [pc, #28]	@ (8001840 <GetSensor_FR+0x2c>)
 8001822:	f7ff fc1b 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f9      	beq.n	8001820 <GetSensor_FR+0xc>
	LL_ADC_ClearFlag_EOC(ADC2);
 800182c:	4804      	ldr	r0, [pc, #16]	@ (8001840 <GetSensor_FR+0x2c>)
 800182e:	f7ff fc28 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC2);
 8001832:	4803      	ldr	r0, [pc, #12]	@ (8001840 <GetSensor_FR+0x2c>)
 8001834:	f7ff fc05 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	50000100 	.word	0x50000100

08001844 <GetBatVal>:

uint16_t GetBatVal(void){
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 8001848:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800184c:	f7ff fbe5 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC1)==0);
 8001850:	bf00      	nop
 8001852:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001856:	f7ff fc01 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f8      	beq.n	8001852 <GetBatVal+0xe>
	LL_ADC_ClearFlag_EOC(ADC1);
 8001860:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001864:	f7ff fc0d 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC1);
 8001868:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800186c:	f7ff fbe9 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187c:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <__NVIC_GetPriorityGrouping+0x18>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 0307 	and.w	r3, r3, #7
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	db0b      	blt.n	80018be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	f003 021f 	and.w	r2, r3, #31
 80018ac:	4907      	ldr	r1, [pc, #28]	@ (80018cc <__NVIC_EnableIRQ+0x38>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	2001      	movs	r0, #1
 80018b6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e100 	.word	0xe000e100

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	@ (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	@ (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	@ 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
         );
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	@ 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <LL_AHB1_GRP1_EnableClock>:
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001994:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001996:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001998:	4907      	ldr	r1, [pc, #28]	@ (80019b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4313      	orrs	r3, r2
 800199e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80019a0:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4013      	ands	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019aa:	68fb      	ldr	r3, [r7, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	40021000 	.word	0x40021000

080019bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 80019c0:	2004      	movs	r0, #4
 80019c2:	f7ff ffe3 	bl	800198c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f7ff ffe0 	bl	800198c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019cc:	f7ff ff54 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ffa4 	bl	8001924 <NVIC_EncodePriority>
 80019dc:	4603      	mov	r3, r0
 80019de:	4619      	mov	r1, r3
 80019e0:	200d      	movs	r0, #13
 80019e2:	f7ff ff75 	bl	80018d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80019e6:	200d      	movs	r0, #13
 80019e8:	f7ff ff54 	bl	8001894 <__NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019ec:	f7ff ff44 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ff94 	bl	8001924 <NVIC_EncodePriority>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4619      	mov	r1, r3
 8001a00:	200e      	movs	r0, #14
 8001a02:	f7ff ff65 	bl	80018d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a06:	200e      	movs	r0, #14
 8001a08:	f7ff ff44 	bl	8001894 <__NVIC_EnableIRQ>

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <FLASH_Lock>:

#define sta_add_127 0x0807F800
#define end_add_127 0x0807FFFF

__STATIC_INLINE void FLASH_Lock(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8001a14:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <FLASH_Lock+0x1c>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	4a04      	ldr	r2, [pc, #16]	@ (8001a2c <FLASH_Lock+0x1c>)
 8001a1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a1e:	6153      	str	r3, [r2, #20]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40022000 	.word	0x40022000

08001a30 <FLASH_Unlock>:

__STATIC_INLINE void FLASH_Unlock(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
	FLASH->KEYR = FLASH_KEY1;
 8001a34:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <FLASH_Unlock+0x1c>)
 8001a36:	4a06      	ldr	r2, [pc, #24]	@ (8001a50 <FLASH_Unlock+0x20>)
 8001a38:	609a      	str	r2, [r3, #8]
	FLASH->KEYR = FLASH_KEY2;
 8001a3a:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <FLASH_Unlock+0x1c>)
 8001a3c:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <FLASH_Unlock+0x24>)
 8001a3e:	609a      	str	r2, [r3, #8]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	45670123 	.word	0x45670123
 8001a54:	cdef89ab 	.word	0xcdef89ab

08001a58 <FLASH_WaitBusy>:
#define FLASH_TYPEPROGRAM_BYTE	0x00000000U

//#define FLASH

void FLASH_WaitBusy(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
	while(((FLASH->SR & FLASH_SR_BSY)== FLASH_SR_BSY)==1);
 8001a5c:	bf00      	nop
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <FLASH_WaitBusy+0x20>)
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a6a:	d0f8      	beq.n	8001a5e <FLASH_WaitBusy+0x6>
//	while((FLASH->SR & FLASH_SR_BSY)== FLASH_SR_BSY);
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	40022000 	.word	0x40022000

08001a7c <FLASH_Erase>:

void FLASH_Erase(uint8_t page)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
	FLASH_WaitBusy();
 8001a86:	f7ff ffe7 	bl	8001a58 <FLASH_WaitBusy>

	FLASH->SR &= 0x00000000;	//error clear?
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
	FLASH->CR &= FLASH_TYPEPROGRAM_BYTE;
 8001a94:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	615a      	str	r2, [r3, #20]
	FLASH->CR |= (FLASH_CR_BKER);	//set bank2
 8001a9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001aa4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001aa8:	6153      	str	r3, [r2, #20]
	FLASH->CR |= FLASH_CR_PER;
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6153      	str	r3, [r2, #20]
	FLASH->CR |= (FLASH_CR_PNB & (page<<3));
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	f403 737e 	and.w	r3, r3, #1016	@ 0x3f8
 8001ac2:	4907      	ldr	r1, [pc, #28]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	614b      	str	r3, [r1, #20]
	FLASH->CR |= FLASH_CR_STRT;
 8001ac8:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	4a04      	ldr	r2, [pc, #16]	@ (8001ae0 <FLASH_Erase+0x64>)
 8001ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad2:	6153      	str	r3, [r2, #20]
	FLASH_WaitBusy();
 8001ad4:	f7ff ffc0 	bl	8001a58 <FLASH_WaitBusy>
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40022000 	.word	0x40022000

08001ae4 <FLASH_WriteByte>:

void FLASH_WriteByte(uint32_t address, uint64_t data)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	e9c7 2300 	strd	r2, r3, [r7]
	uint32_t data2 = (uint32_t)(data >> 32);
 8001af0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	000a      	movs	r2, r1
 8001afe:	2300      	movs	r3, #0
 8001b00:	4613      	mov	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]
	FLASH_WaitBusy();
 8001b04:	f7ff ffa8 	bl	8001a58 <FLASH_WaitBusy>
	FLASH->SR &= 0x00000000;	//error clear
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <FLASH_WriteByte+0x6c>)
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <FLASH_WriteByte+0x6c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
	FLASH->CR &= FLASH_TYPEPROGRAM_BYTE;
 8001b12:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <FLASH_WriteByte+0x6c>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <FLASH_WriteByte+0x6c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	615a      	str	r2, [r3, #20]
	FLASH->CR |= FLASH_CR_PG;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <FLASH_WriteByte+0x6c>)
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	4a0b      	ldr	r2, [pc, #44]	@ (8001b50 <FLASH_WriteByte+0x6c>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6153      	str	r3, [r2, #20]

	*(__IO uint32_t*)address = (uint32_t)data;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	601a      	str	r2, [r3, #0]
	*(__IO uint32_t*)(address+4) = data2;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3304      	adds	r3, #4
 8001b32:	461a      	mov	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	6013      	str	r3, [r2, #0]
	FLASH_WaitBusy();
 8001b38:	f7ff ff8e 	bl	8001a58 <FLASH_WaitBusy>

	FLASH->CR &= ~(FLASH_CR_PG);
 8001b3c:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <FLASH_WriteByte+0x6c>)
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	4a03      	ldr	r2, [pc, #12]	@ (8001b50 <FLASH_WriteByte+0x6c>)
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	6153      	str	r3, [r2, #20]
}
 8001b48:	bf00      	nop
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40022000 	.word	0x40022000

08001b54 <FLASH_WriteData>:

void FLASH_WriteData(uint8_t page,uint32_t address, uint64_t* data, uint32_t size)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	4603      	mov	r3, r0
 8001b62:	73fb      	strb	r3, [r7, #15]
	FLASH_Unlock();
 8001b64:	f7ff ff64 	bl	8001a30 <FLASH_Unlock>

	FLASH_Erase(page);
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff86 	bl	8001a7c <FLASH_Erase>

	do {
		FLASH_WriteByte(address, *data);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	68b8      	ldr	r0, [r7, #8]
 8001b78:	f7ff ffb4 	bl	8001ae4 <FLASH_WriteByte>
		address+=8;
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	3308      	adds	r3, #8
 8001b80:	60bb      	str	r3, [r7, #8]
		data++;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3308      	adds	r3, #8
 8001b86:	607b      	str	r3, [r7, #4]
		size -=8;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	3b08      	subs	r3, #8
 8001b8c:	603b      	str	r3, [r7, #0]
	}while(size > 0);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1ed      	bne.n	8001b70 <FLASH_WriteData+0x1c>

	FLASH_Lock();
 8001b94:	f7ff ff3c 	bl	8001a10 <FLASH_Lock>
}
 8001b98:	bf00      	nop
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <FLASH_ReadData>:

void FLASH_ReadData(uint32_t address, uint64_t* data, uint32_t size)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint8_t*)address,size);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	68b8      	ldr	r0, [r7, #8]
 8001bb4:	f01c fb65 	bl	801e282 <memcpy>
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <LL_AHB2_GRP1_EnableClock>:
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bc8:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001bca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bcc:	4907      	ldr	r1, [pc, #28]	@ (8001bec <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001bd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40021000 	.word	0x40021000

08001bf0 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	4013      	ands	r3, r2
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d101      	bne.n	8001c0c <LL_GPIO_IsInputPinSet+0x1c>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <LL_GPIO_IsInputPinSet+0x1e>
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	619a      	str	r2, [r3, #24]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
 8001c68:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001c6a:	2004      	movs	r0, #4
 8001c6c:	f7ff ffa8 	bl	8001bc0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f7ff ffa5 	bl	8001bc0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001c76:	2002      	movs	r0, #2
 8001c78:	f7ff ffa2 	bl	8001bc0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(BATT_LED_GPIO_Port, BATT_LED_Pin);
 8001c7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c80:	4893      	ldr	r0, [pc, #588]	@ (8001ed0 <MX_GPIO_Init+0x27c>)
 8001c82:	f7ff ffd8 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 8001c86:	2104      	movs	r1, #4
 8001c88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c8c:	f7ff ffd3 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SEN_RF_GPIO_Port, SEN_RF_Pin);
 8001c90:	2108      	movs	r1, #8
 8001c92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c96:	f7ff ffce 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SEN_R_GPIO_Port, SEN_R_Pin);
 8001c9a:	2110      	movs	r1, #16
 8001c9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca0:	f7ff ffc9 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED3_GPIO_Port, LED3_Pin);
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	488b      	ldr	r0, [pc, #556]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001ca8:	f7ff ffc5 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8001cac:	2104      	movs	r1, #4
 8001cae:	4889      	ldr	r0, [pc, #548]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001cb0:	f7ff ffc1 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8001cb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cb8:	4886      	ldr	r0, [pc, #536]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001cba:	f7ff ffbc 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SEN_L_GPIO_Port, SEN_L_Pin);
 8001cbe:	2140      	movs	r1, #64	@ 0x40
 8001cc0:	4883      	ldr	r0, [pc, #524]	@ (8001ed0 <MX_GPIO_Init+0x27c>)
 8001cc2:	f7ff ffb8 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SEN_LF_GPIO_Port, SEN_LF_Pin);
 8001cc6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cce:	f7ff ffb2 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED0_GPIO_Port, LED0_Pin);
 8001cd2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cda:	f7ff ffac 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MOT0_GPIO_Port, MOT0_Pin);
 8001cde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ce2:	487b      	ldr	r0, [pc, #492]	@ (8001ed0 <MX_GPIO_Init+0x27c>)
 8001ce4:	f7ff ffa7 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MOT1_GPIO_Port, MOT1_Pin);
 8001ce8:	2110      	movs	r1, #16
 8001cea:	487a      	ldr	r0, [pc, #488]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001cec:	f7ff ffa3 	bl	8001c36 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(CS_gyro_GPIO_Port, CS_gyro_Pin);
 8001cf0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cf4:	4877      	ldr	r0, [pc, #476]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001cf6:	f7ff ff90 	bl	8001c1a <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SW0_Pin;
 8001cfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cfe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001d00:	2300      	movs	r3, #0
 8001d02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001d04:	2302      	movs	r3, #2
 8001d06:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 8001d08:	463b      	mov	r3, r7
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4870      	ldr	r0, [pc, #448]	@ (8001ed0 <MX_GPIO_Init+0x27c>)
 8001d0e:	f018 fd1a 	bl	801a746 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW1_Pin;
 8001d12:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d16:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001d20:	463b      	mov	r3, r7
 8001d22:	4619      	mov	r1, r3
 8001d24:	486a      	ldr	r0, [pc, #424]	@ (8001ed0 <MX_GPIO_Init+0x27c>)
 8001d26:	f018 fd0e 	bl	801a746 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BATT_LED_Pin;
 8001d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d30:	2301      	movs	r3, #1
 8001d32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BATT_LED_GPIO_Port, &GPIO_InitStruct);
 8001d40:	463b      	mov	r3, r7
 8001d42:	4619      	mov	r1, r3
 8001d44:	4862      	ldr	r0, [pc, #392]	@ (8001ed0 <MX_GPIO_Init+0x27c>)
 8001d46:	f018 fcfe 	bl	801a746 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001d5e:	463b      	mov	r3, r7
 8001d60:	4619      	mov	r1, r3
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d66:	f018 fcee 	bl	801a746 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SEN_RF_Pin;
 8001d6a:	2308      	movs	r3, #8
 8001d6c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN_RF_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	463b      	mov	r3, r7
 8001d80:	4619      	mov	r1, r3
 8001d82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d86:	f018 fcde 	bl	801a746 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SEN_R_Pin;
 8001d8a:	2310      	movs	r3, #16
 8001d8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN_R_GPIO_Port, &GPIO_InitStruct);
 8001d9e:	463b      	mov	r3, r7
 8001da0:	4619      	mov	r1, r3
 8001da2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da6:	f018 fcce 	bl	801a746 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED3_Pin;
 8001daa:	2301      	movs	r3, #1
 8001dac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dae:	2301      	movs	r3, #1
 8001db0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4844      	ldr	r0, [pc, #272]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001dc4:	f018 fcbf 	bl	801a746 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 8001dc8:	2304      	movs	r3, #4
 8001dca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001ddc:	463b      	mov	r3, r7
 8001dde:	4619      	mov	r1, r3
 8001de0:	483c      	ldr	r0, [pc, #240]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001de2:	f018 fcb0 	bl	801a746 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 8001de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dec:	2301      	movs	r3, #1
 8001dee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4834      	ldr	r0, [pc, #208]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001e02:	f018 fca0 	bl	801a746 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_gyro_Pin;
 8001e06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_gyro_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	4619      	mov	r1, r3
 8001e20:	482c      	ldr	r0, [pc, #176]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001e22:	f018 fc90 	bl	801a746 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SEN_L_Pin;
 8001e26:	2340      	movs	r3, #64	@ 0x40
 8001e28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN_L_GPIO_Port, &GPIO_InitStruct);
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4824      	ldr	r0, [pc, #144]	@ (8001ed0 <MX_GPIO_Init+0x27c>)
 8001e40:	f018 fc81 	bl	801a746 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SEN_LF_Pin;
 8001e44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e48:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN_LF_GPIO_Port, &GPIO_InitStruct);
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e62:	f018 fc70 	bl	801a746 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED0_Pin;
 8001e66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e6a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e84:	f018 fc5f 	bl	801a746 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOT0_Pin;
 8001e88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MOT0_GPIO_Port, &GPIO_InitStruct);
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480b      	ldr	r0, [pc, #44]	@ (8001ed0 <MX_GPIO_Init+0x27c>)
 8001ea4:	f018 fc4f 	bl	801a746 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOT1_Pin;
 8001ea8:	2310      	movs	r3, #16
 8001eaa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001eac:	2301      	movs	r3, #1
 8001eae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MOT1_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4804      	ldr	r0, [pc, #16]	@ (8001ed4 <MX_GPIO_Init+0x280>)
 8001ec2:	f018 fc40 	bl	801a746 <LL_GPIO_Init>

}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	48000800 	.word	0x48000800
 8001ed4:	48000400 	.word	0x48000400

08001ed8 <SetLED>:

/* USER CODE BEGIN 2 */
void SetLED(uint8_t data){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
	if((data&0x01)==0x01){ 	LL_GPIO_SetOutputPin(LED0_GPIO_Port,LED0_Pin);
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d006      	beq.n	8001efa <SetLED+0x22>
 8001eec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef4:	f7ff fe91 	bl	8001c1a <LL_GPIO_SetOutputPin>
 8001ef8:	e005      	b.n	8001f06 <SetLED+0x2e>
	}else{					LL_GPIO_ResetOutputPin(LED0_GPIO_Port,LED0_Pin);
 8001efa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001efe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f02:	f7ff fe98 	bl	8001c36 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x02)==0x02){ 	LL_GPIO_SetOutputPin(LED1_GPIO_Port,LED1_Pin);
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <SetLED+0x44>
 8001f10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f14:	481c      	ldr	r0, [pc, #112]	@ (8001f88 <SetLED+0xb0>)
 8001f16:	f7ff fe80 	bl	8001c1a <LL_GPIO_SetOutputPin>
 8001f1a:	e004      	b.n	8001f26 <SetLED+0x4e>
	}else{					LL_GPIO_ResetOutputPin(LED1_GPIO_Port,LED1_Pin);
 8001f1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f20:	4819      	ldr	r0, [pc, #100]	@ (8001f88 <SetLED+0xb0>)
 8001f22:	f7ff fe88 	bl	8001c36 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x04)==0x04){ 	LL_GPIO_SetOutputPin(LED2_GPIO_Port,LED2_Pin);
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <SetLED+0x62>
 8001f30:	2104      	movs	r1, #4
 8001f32:	4815      	ldr	r0, [pc, #84]	@ (8001f88 <SetLED+0xb0>)
 8001f34:	f7ff fe71 	bl	8001c1a <LL_GPIO_SetOutputPin>
 8001f38:	e003      	b.n	8001f42 <SetLED+0x6a>
	}else{					LL_GPIO_ResetOutputPin(LED2_GPIO_Port,LED2_Pin);
 8001f3a:	2104      	movs	r1, #4
 8001f3c:	4812      	ldr	r0, [pc, #72]	@ (8001f88 <SetLED+0xb0>)
 8001f3e:	f7ff fe7a 	bl	8001c36 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x08)==0x08){ 	LL_GPIO_SetOutputPin(LED3_GPIO_Port,LED3_Pin);
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d004      	beq.n	8001f56 <SetLED+0x7e>
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	480e      	ldr	r0, [pc, #56]	@ (8001f88 <SetLED+0xb0>)
 8001f50:	f7ff fe63 	bl	8001c1a <LL_GPIO_SetOutputPin>
 8001f54:	e003      	b.n	8001f5e <SetLED+0x86>
	}else{					LL_GPIO_ResetOutputPin(LED3_GPIO_Port,LED3_Pin);
 8001f56:	2101      	movs	r1, #1
 8001f58:	480b      	ldr	r0, [pc, #44]	@ (8001f88 <SetLED+0xb0>)
 8001f5a:	f7ff fe6c 	bl	8001c36 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x10)==0x10){ 	LL_GPIO_SetOutputPin(LED4_GPIO_Port,LED4_Pin);
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <SetLED+0x9c>
 8001f68:	2104      	movs	r1, #4
 8001f6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f6e:	f7ff fe54 	bl	8001c1a <LL_GPIO_SetOutputPin>
	}else{					LL_GPIO_ResetOutputPin(LED4_GPIO_Port,LED4_Pin);
	}
}
 8001f72:	e004      	b.n	8001f7e <SetLED+0xa6>
	}else{					LL_GPIO_ResetOutputPin(LED4_GPIO_Port,LED4_Pin);
 8001f74:	2104      	movs	r1, #4
 8001f76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f7a:	f7ff fe5c 	bl	8001c36 <LL_GPIO_ResetOutputPin>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	48000400 	.word	0x48000400

08001f8c <SetBatLED>:

void SetBatLED(uint8_t data){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(BATT_LED_GPIO_Port,BATT_LED_Pin);
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d105      	bne.n	8001fa8 <SetBatLED+0x1c>
 8001f9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fa0:	4806      	ldr	r0, [pc, #24]	@ (8001fbc <SetBatLED+0x30>)
 8001fa2:	f7ff fe3a 	bl	8001c1a <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(BATT_LED_GPIO_Port,BATT_LED_Pin);
}
 8001fa6:	e004      	b.n	8001fb2 <SetBatLED+0x26>
	else			LL_GPIO_ResetOutputPin(BATT_LED_GPIO_Port,BATT_LED_Pin);
 8001fa8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fac:	4803      	ldr	r0, [pc, #12]	@ (8001fbc <SetBatLED+0x30>)
 8001fae:	f7ff fe42 	bl	8001c36 <LL_GPIO_ResetOutputPin>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	48000800 	.word	0x48000800

08001fc0 <SW_IsOn_0>:

int8_t SW_IsOn_0(void){//virtical
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(SW0_GPIO_Port,SW0_Pin);
 8001fc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fc8:	4803      	ldr	r0, [pc, #12]	@ (8001fd8 <SW_IsOn_0+0x18>)
 8001fca:	f7ff fe11 	bl	8001bf0 <LL_GPIO_IsInputPinSet>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	b25b      	sxtb	r3, r3
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	48000800 	.word	0x48000800

08001fdc <SW_IsOn_1>:

int8_t SW_IsOn_1(void){//horizontal
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(SW1_GPIO_Port,SW1_Pin);
 8001fe0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fe4:	4803      	ldr	r0, [pc, #12]	@ (8001ff4 <SW_IsOn_1+0x18>)
 8001fe6:	f7ff fe03 	bl	8001bf0 <LL_GPIO_IsInputPinSet>
 8001fea:	4603      	mov	r3, r0
 8001fec:	b25b      	sxtb	r3, r3
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	48000800 	.word	0x48000800

08001ff8 <Set_SenFL>:

void Set_SenFL(uint8_t data){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN_LF_GPIO_Port,SEN_LF_Pin);
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d106      	bne.n	8002016 <Set_SenFL+0x1e>
 8002008:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800200c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002010:	f7ff fe03 	bl	8001c1a <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN_LF_GPIO_Port,SEN_LF_Pin);
}
 8002014:	e005      	b.n	8002022 <Set_SenFL+0x2a>
	else			LL_GPIO_ResetOutputPin(SEN_LF_GPIO_Port,SEN_LF_Pin);
 8002016:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800201a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800201e:	f7ff fe0a 	bl	8001c36 <LL_GPIO_ResetOutputPin>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <Set_SenSL>:

void Set_SenSL(uint8_t data){
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN_L_GPIO_Port,SEN_L_Pin);
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d104      	bne.n	8002046 <Set_SenSL+0x1a>
 800203c:	2140      	movs	r1, #64	@ 0x40
 800203e:	4806      	ldr	r0, [pc, #24]	@ (8002058 <Set_SenSL+0x2c>)
 8002040:	f7ff fdeb 	bl	8001c1a <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN_L_GPIO_Port,SEN_L_Pin);
}
 8002044:	e003      	b.n	800204e <Set_SenSL+0x22>
	else			LL_GPIO_ResetOutputPin(SEN_L_GPIO_Port,SEN_L_Pin);
 8002046:	2140      	movs	r1, #64	@ 0x40
 8002048:	4803      	ldr	r0, [pc, #12]	@ (8002058 <Set_SenSL+0x2c>)
 800204a:	f7ff fdf4 	bl	8001c36 <LL_GPIO_ResetOutputPin>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	48000800 	.word	0x48000800

0800205c <Set_SenSR>:

void Set_SenSR(uint8_t data){
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN_R_GPIO_Port,SEN_R_Pin);
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d105      	bne.n	8002078 <Set_SenSR+0x1c>
 800206c:	2110      	movs	r1, #16
 800206e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002072:	f7ff fdd2 	bl	8001c1a <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN_R_GPIO_Port,SEN_R_Pin);
}
 8002076:	e004      	b.n	8002082 <Set_SenSR+0x26>
	else			LL_GPIO_ResetOutputPin(SEN_R_GPIO_Port,SEN_R_Pin);
 8002078:	2110      	movs	r1, #16
 800207a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800207e:	f7ff fdda 	bl	8001c36 <LL_GPIO_ResetOutputPin>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <Set_SenFR>:

void Set_SenFR(uint8_t data){
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN_RF_GPIO_Port,SEN_RF_Pin);
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d105      	bne.n	80020a6 <Set_SenFR+0x1c>
 800209a:	2108      	movs	r1, #8
 800209c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a0:	f7ff fdbb 	bl	8001c1a <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN_RF_GPIO_Port,SEN_RF_Pin);
}
 80020a4:	e004      	b.n	80020b0 <Set_SenFR+0x26>
	else			LL_GPIO_ResetOutputPin(SEN_RF_GPIO_Port,SEN_RF_Pin);
 80020a6:	2108      	movs	r1, #8
 80020a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ac:	f7ff fdc3 	bl	8001c36 <LL_GPIO_ResetOutputPin>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <Set_MOT0>:

void Set_MOT0(uint8_t data){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(MOT0_GPIO_Port,MOT0_Pin);
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d105      	bne.n	80020d4 <Set_MOT0+0x1c>
 80020c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020cc:	4806      	ldr	r0, [pc, #24]	@ (80020e8 <Set_MOT0+0x30>)
 80020ce:	f7ff fda4 	bl	8001c1a <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(MOT0_GPIO_Port,MOT0_Pin);
}
 80020d2:	e004      	b.n	80020de <Set_MOT0+0x26>
	else			LL_GPIO_ResetOutputPin(MOT0_GPIO_Port,MOT0_Pin);
 80020d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020d8:	4803      	ldr	r0, [pc, #12]	@ (80020e8 <Set_MOT0+0x30>)
 80020da:	f7ff fdac 	bl	8001c36 <LL_GPIO_ResetOutputPin>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	48000800 	.word	0x48000800

080020ec <Set_MOT1>:

void Set_MOT1(uint8_t data){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(MOT1_GPIO_Port,MOT1_Pin);
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d104      	bne.n	8002106 <Set_MOT1+0x1a>
 80020fc:	2110      	movs	r1, #16
 80020fe:	4806      	ldr	r0, [pc, #24]	@ (8002118 <Set_MOT1+0x2c>)
 8002100:	f7ff fd8b 	bl	8001c1a <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(MOT1_GPIO_Port,MOT1_Pin);
}
 8002104:	e003      	b.n	800210e <Set_MOT1+0x22>
	else			LL_GPIO_ResetOutputPin(MOT1_GPIO_Port,MOT1_Pin);
 8002106:	2110      	movs	r1, #16
 8002108:	4803      	ldr	r0, [pc, #12]	@ (8002118 <Set_MOT1+0x2c>)
 800210a:	f7ff fd94 	bl	8001c36 <LL_GPIO_ResetOutputPin>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	48000400 	.word	0x48000400

0800211c <__NVIC_SetPriorityGrouping>:
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800212c:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002138:	4013      	ands	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800214c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214e:	4a04      	ldr	r2, [pc, #16]	@ (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	60d3      	str	r3, [r2, #12]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <LL_RCC_HSI_Enable>:
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <LL_RCC_HSI_Enable+0x1c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a04      	ldr	r2, [pc, #16]	@ (8002180 <LL_RCC_HSI_Enable+0x1c>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002172:	6013      	str	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000

08002184 <LL_RCC_HSI_IsReady>:
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002188:	4b07      	ldr	r3, [pc, #28]	@ (80021a8 <LL_RCC_HSI_IsReady+0x24>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002194:	d101      	bne.n	800219a <LL_RCC_HSI_IsReady+0x16>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_RCC_HSI_IsReady+0x18>
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000

080021ac <LL_RCC_HSI_SetCalibTrimming>:
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80021b4:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	061b      	lsls	r3, r3, #24
 80021c0:	4904      	ldr	r1, [pc, #16]	@ (80021d4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000

080021d8 <LL_RCC_SetSysClkSource>:
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <LL_RCC_SetSysClkSource+0x24>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f023 0203 	bic.w	r2, r3, #3
 80021e8:	4904      	ldr	r1, [pc, #16]	@ (80021fc <LL_RCC_SetSysClkSource+0x24>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	608b      	str	r3, [r1, #8]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	40021000 	.word	0x40021000

08002200 <LL_RCC_GetSysClkSource>:
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002204:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <LL_RCC_GetSysClkSource+0x18>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 030c 	and.w	r3, r3, #12
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000

0800221c <LL_RCC_SetAHBPrescaler>:
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002224:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <LL_RCC_SetAHBPrescaler+0x24>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800222c:	4904      	ldr	r1, [pc, #16]	@ (8002240 <LL_RCC_SetAHBPrescaler+0x24>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	40021000 	.word	0x40021000

08002244 <LL_RCC_SetAPB1Prescaler>:
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <LL_RCC_SetAPB1Prescaler+0x24>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002254:	4904      	ldr	r1, [pc, #16]	@ (8002268 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4313      	orrs	r3, r2
 800225a:	608b      	str	r3, [r1, #8]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	40021000 	.word	0x40021000

0800226c <LL_RCC_SetAPB2Prescaler>:
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002274:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800227c:	4904      	ldr	r1, [pc, #16]	@ (8002290 <LL_RCC_SetAPB2Prescaler+0x24>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4313      	orrs	r3, r2
 8002282:	608b      	str	r3, [r1, #8]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40021000 	.word	0x40021000

08002294 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <LL_RCC_PLL_Enable+0x1c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a04      	ldr	r2, [pc, #16]	@ (80022b0 <LL_RCC_PLL_Enable+0x1c>)
 800229e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000

080022b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80022b8:	4b07      	ldr	r3, [pc, #28]	@ (80022d8 <LL_RCC_PLL_IsReady+0x24>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022c4:	d101      	bne.n	80022ca <LL_RCC_PLL_IsReady+0x16>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <LL_RCC_PLL_IsReady+0x18>
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000

080022dc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80022ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	68f9      	ldr	r1, [r7, #12]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	4311      	orrs	r1, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	0212      	lsls	r2, r2, #8
 80022fc:	4311      	orrs	r1, r2
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	4904      	ldr	r1, [pc, #16]	@ (8002314 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8002304:	4313      	orrs	r3, r2
 8002306:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	40021000 	.word	0x40021000
 8002318:	f9ff800c 	.word	0xf9ff800c

0800231c <LL_RCC_PLL_ConfigDomain_ADC>:
  *         @arg @ref LL_RCC_PLLP_DIV_30
  *         @arg @ref LL_RCC_PLLP_DIV_31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_ADC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLPDIV,
 800232a:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <LL_RCC_PLL_ConfigDomain_ADC+0x38>)
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <LL_RCC_PLL_ConfigDomain_ADC+0x3c>)
 8002330:	4013      	ands	r3, r2
 8002332:	68f9      	ldr	r1, [r7, #12]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	4311      	orrs	r1, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	0212      	lsls	r2, r2, #8
 800233c:	4311      	orrs	r1, r2
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	4904      	ldr	r1, [pc, #16]	@ (8002354 <LL_RCC_PLL_ConfigDomain_ADC+0x38>)
 8002344:	4313      	orrs	r3, r2
 8002346:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLP);
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40021000 	.word	0x40021000
 8002358:	07ff800c 	.word	0x07ff800c

0800235c <LL_RCC_PLL_EnableDomain_ADC>:
  * @brief  Enable PLL output mapped on ADC domain clock
  * @rmtoll PLLCFGR      PLLPEN        LL_RCC_PLL_EnableDomain_ADC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_ADC(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN);
 8002360:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <LL_RCC_PLL_EnableDomain_ADC+0x1c>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a04      	ldr	r2, [pc, #16]	@ (8002378 <LL_RCC_PLL_EnableDomain_ADC+0x1c>)
 8002366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800236a:	60d3      	str	r3, [r2, #12]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000

0800237c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8002380:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a04      	ldr	r2, [pc, #16]	@ (8002398 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800238a:	60d3      	str	r3, [r2, #12]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000

0800239c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80023a4:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80023a8:	4907      	ldr	r1, [pc, #28]	@ (80023c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80023b0:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023b2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4013      	ands	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ba:	68fb      	ldr	r3, [r7, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	40021000 	.word	0x40021000

080023cc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80023d4:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023d8:	4907      	ldr	r1, [pc, #28]	@ (80023f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4313      	orrs	r3, r2
 80023de:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023e0:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4013      	ands	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ea:	68fb      	ldr	r3, [r7, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	40021000 	.word	0x40021000

080023fc <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <LL_FLASH_SetLatency+0x24>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 020f 	bic.w	r2, r3, #15
 800240c:	4904      	ldr	r1, [pc, #16]	@ (8002420 <LL_FLASH_SetLatency+0x24>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40022000 	.word	0x40022000

08002424 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002428:	4b04      	ldr	r3, [pc, #16]	@ (800243c <LL_FLASH_GetLatency+0x18>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 030f 	and.w	r3, r3, #15
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40022000 	.word	0x40022000

08002440 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <LL_PWR_EnableRange1BoostMode+0x20>)
 8002446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800244a:	4a05      	ldr	r2, [pc, #20]	@ (8002460 <LL_PWR_EnableRange1BoostMode+0x20>)
 800244c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002450:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40007000 	.word	0x40007000

08002464 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002468:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4a04      	ldr	r2, [pc, #16]	@ (8002480 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800246e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002472:	6093      	str	r3, [r2, #8]
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40007000 	.word	0x40007000

08002484 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void __io_putchar(uint8_t ch){
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
	USART_TransmitByte(ch);
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	4618      	mov	r0, r3
 8002492:	f003 fef1 	bl	8006278 <USART_TransmitByte>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80024a4:	2001      	movs	r0, #1
 80024a6:	f7ff ff91 	bl	80023cc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80024aa:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80024ae:	f7ff ff75 	bl	800239c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b2:	2003      	movs	r0, #3
 80024b4:	f7ff fe32 	bl	800211c <__NVIC_SetPriorityGrouping>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_PWR_DisableUCPDDeadBattery();
 80024b8:	f7ff ffd4 	bl	8002464 <LL_PWR_DisableUCPDDeadBattery>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024bc:	f000 f868 	bl	8002590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024c0:	f7ff fbc8 	bl	8001c54 <MX_GPIO_Init>
  MX_DMA_Init();
 80024c4:	f7ff fa7a 	bl	80019bc <MX_DMA_Init>
  MX_ADC1_Init();
 80024c8:	f7fe fe32 	bl	8001130 <MX_ADC1_Init>
  MX_ADC2_Init();
 80024cc:	f7fe fee0 	bl	8001290 <MX_ADC2_Init>
  MX_ADC3_Init();
 80024d0:	f7fe ffe0 	bl	8001494 <MX_ADC3_Init>
  MX_SPI2_Init();
 80024d4:	f002 f884 	bl	80045e0 <MX_SPI2_Init>
  MX_TIM1_Init();
 80024d8:	f003 f83a 	bl	8005550 <MX_TIM1_Init>
  MX_TIM2_Init();
 80024dc:	f003 f8dc 	bl	8005698 <MX_TIM2_Init>
  MX_TIM3_Init();
 80024e0:	f003 f94a 	bl	8005778 <MX_TIM3_Init>
  MX_TIM5_Init();
 80024e4:	f003 f9f4 	bl	80058d0 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80024e8:	f003 fe3a 	bl	8006160 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80024ec:	f003 f9b0 	bl	8005850 <MX_TIM4_Init>
  MX_TIM6_Init();
 80024f0:	f003 fa78 	bl	80059e4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80024f4:	f003 faae 	bl	8005a54 <MX_TIM7_Init>
  MX_TIM8_Init();
 80024f8:	f003 fae4 	bl	8005ac4 <MX_TIM8_Init>
  MX_TIM15_Init();
 80024fc:	f003 fb86 	bl	8005c0c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  SetLED(0x0E);
 8002500:	200e      	movs	r0, #14
 8002502:	f7ff fce9 	bl	8001ed8 <SetLED>
  LL_mDelay(200);
 8002506:	20c8      	movs	r0, #200	@ 0xc8
 8002508:	f019 fb1c 	bl	801bb44 <LL_mDelay>
  SetLED(0x00);
 800250c:	2000      	movs	r0, #0
 800250e:	f7ff fce3 	bl	8001ed8 <SetLED>
  LL_mDelay(200);
 8002512:	20c8      	movs	r0, #200	@ 0xc8
 8002514:	f019 fb16 	bl	801bb44 <LL_mDelay>
  SetLED(0x0E);
 8002518:	200e      	movs	r0, #14
 800251a:	f7ff fcdd 	bl	8001ed8 <SetLED>
  LL_mDelay(200);
 800251e:	20c8      	movs	r0, #200	@ 0xc8
 8002520:	f019 fb10 	bl	801bb44 <LL_mDelay>
  SetLED(0x00);
 8002524:	2000      	movs	r0, #0
 8002526:	f7ff fcd7 	bl	8001ed8 <SetLED>

  Communication_Initialize();
 800252a:	f003 fe97 	bl	800625c <Communication_Initialize>
  HAL_init();
 800252e:	f007 fb85 	bl	8009c3c <HAL_init>
  ICM_42688_whoami();
 8002532:	f007 f9b9 	bl	80098a8 <ICM_42688_whoami>
  CTRL_clrNowData();
 8002536:	f003 fff5 	bl	8006524 <CTRL_clrNowData>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800253a:	f7ff fd4f 	bl	8001fdc <SW_IsOn_1>
 800253e:	4603      	mov	r3, r0
 8002540:	2b01      	cmp	r3, #1
 8002542:	d004      	beq.n	800254e <main+0xae>
 8002544:	f007 fea4 	bl	800a290 <CountUP_mode>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <main+0xc0>
		MODE_inc();								// モードを1つ進める
 800254e:	f007 fe2b 	bl	800a1a8 <MODE_inc>
		LL_mDelay(200);			// SWが離されるまで
 8002552:	20c8      	movs	r0, #200	@ 0xc8
 8002554:	f019 faf6 	bl	801bb44 <LL_mDelay>
		printf("mode selecting\r\n");
 8002558:	480c      	ldr	r0, [pc, #48]	@ (800258c <main+0xec>)
 800255a:	f01b fc57 	bl	801de0c <puts>
 800255e:	e00e      	b.n	800257e <main+0xde>
	}
	else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 8002560:	f7ff fd2e 	bl	8001fc0 <SW_IsOn_0>
 8002564:	4603      	mov	r3, r0
 8002566:	2b01      	cmp	r3, #1
 8002568:	d004      	beq.n	8002574 <main+0xd4>
 800256a:	f009 fda2 	bl	800c0b2 <MODE_CheckExe>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <main+0xde>
//		else if ( SW_ON == SW_EXE_PIN ){
		MODE_exe();								// モード�?
 8002574:	f009 fb8a 	bl	800bc8c <MODE_exe>
		LL_mDelay(200);			// SWが離されるまで
 8002578:	20c8      	movs	r0, #200	@ 0xc8
 800257a:	f019 fae3 	bl	801bb44 <LL_mDelay>
	}
    LL_mDelay(100);
 800257e:	2064      	movs	r0, #100	@ 0x64
 8002580:	f019 fae0 	bl	801bb44 <LL_mDelay>
  Get_Sen_Nowdata();
 8002584:	f010 fe34 	bl	80131f0 <Get_Sen_Nowdata>
      if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 8002588:	e7d7      	b.n	800253a <main+0x9a>
 800258a:	bf00      	nop
 800258c:	08021890 	.word	0x08021890

08002590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8002596:	2004      	movs	r0, #4
 8002598:	f7ff ff30 	bl	80023fc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 800259c:	bf00      	nop
 800259e:	f7ff ff41 	bl	8002424 <LL_FLASH_GetLatency>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d1fa      	bne.n	800259e <SystemClock_Config+0xe>
  {
  }
  LL_PWR_EnableRange1BoostMode();
 80025a8:	f7ff ff4a 	bl	8002440 <LL_PWR_EnableRange1BoostMode>
  LL_RCC_HSI_Enable();
 80025ac:	f7ff fdda 	bl	8002164 <LL_RCC_HSI_Enable>
   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80025b0:	bf00      	nop
 80025b2:	f7ff fde7 	bl	8002184 <LL_RCC_HSI_IsReady>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d1fa      	bne.n	80025b2 <SystemClock_Config+0x22>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 80025bc:	2040      	movs	r0, #64	@ 0x40
 80025be:	f7ff fdf5 	bl	80021ac <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 85, LL_RCC_PLLR_DIV_2);
 80025c2:	2300      	movs	r3, #0
 80025c4:	2255      	movs	r2, #85	@ 0x55
 80025c6:	2130      	movs	r1, #48	@ 0x30
 80025c8:	2002      	movs	r0, #2
 80025ca:	f7ff fe87 	bl	80022dc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_ADC(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 85, LL_RCC_PLLP_DIV_4);
 80025ce:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80025d2:	2255      	movs	r2, #85	@ 0x55
 80025d4:	2130      	movs	r1, #48	@ 0x30
 80025d6:	2002      	movs	r0, #2
 80025d8:	f7ff fea0 	bl	800231c <LL_RCC_PLL_ConfigDomain_ADC>
  LL_RCC_PLL_EnableDomain_SYS();
 80025dc:	f7ff fece 	bl	800237c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_EnableDomain_ADC();
 80025e0:	f7ff febc 	bl	800235c <LL_RCC_PLL_EnableDomain_ADC>
  LL_RCC_PLL_Enable();
 80025e4:	f7ff fe56 	bl	8002294 <LL_RCC_PLL_Enable>
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80025e8:	bf00      	nop
 80025ea:	f7ff fe63 	bl	80022b4 <LL_RCC_PLL_IsReady>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d1fa      	bne.n	80025ea <SystemClock_Config+0x5a>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80025f4:	2003      	movs	r0, #3
 80025f6:	f7ff fdef 	bl	80021d8 <LL_RCC_SetSysClkSource>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 80025fa:	2080      	movs	r0, #128	@ 0x80
 80025fc:	f7ff fe0e 	bl	800221c <LL_RCC_SetAHBPrescaler>
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002600:	bf00      	nop
 8002602:	f7ff fdfd 	bl	8002200 <LL_RCC_GetSysClkSource>
 8002606:	4603      	mov	r3, r0
 8002608:	2b0c      	cmp	r3, #12
 800260a:	d1fa      	bne.n	8002602 <SystemClock_Config+0x72>
  {
  }

  /* Insure 1us transition state at intermediate medium speed clock*/
  for (__IO uint32_t i = (170 >> 1); i !=0; i--);
 800260c:	2355      	movs	r3, #85	@ 0x55
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	e002      	b.n	8002618 <SystemClock_Config+0x88>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3b01      	subs	r3, #1
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f9      	bne.n	8002612 <SystemClock_Config+0x82>

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800261e:	2000      	movs	r0, #0
 8002620:	f7ff fdfc 	bl	800221c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002624:	2000      	movs	r0, #0
 8002626:	f7ff fe0d 	bl	8002244 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800262a:	2000      	movs	r0, #0
 800262c:	f7ff fe1e 	bl	800226c <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(170000000);
 8002630:	4804      	ldr	r0, [pc, #16]	@ (8002644 <SystemClock_Config+0xb4>)
 8002632:	f019 fa79 	bl	801bb28 <LL_Init1msTick>

  LL_SetSystemCoreClock(170000000);
 8002636:	4803      	ldr	r0, [pc, #12]	@ (8002644 <SystemClock_Config+0xb4>)
 8002638:	f019 faac 	bl	801bb94 <LL_SetSystemCoreClock>
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	0a21fe80 	.word	0x0a21fe80

08002648 <PARAM_getGain>:
			//速度kp,速度ki,速度kd,	角速度kp,角速度ki,角速度kd,	角度kp,角度ki,	壁kp,壁kd
			{ 8.0,3.0,0.05,	50.0,8.0,0.5,	0.0,0.0,	0.0125,0.00125,}
	};

const stGAIN* PARAM_getGain( enPARAM_MODE en_mode )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
	const stGAIN* p_adr;
	
	switch( en_mode ){
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	2b13      	cmp	r3, #19
 8002656:	dc2b      	bgt.n	80026b0 <PARAM_getGain+0x68>
 8002658:	2b0f      	cmp	r3, #15
 800265a:	da1e      	bge.n	800269a <PARAM_getGain+0x52>
 800265c:	2b07      	cmp	r3, #7
 800265e:	dc02      	bgt.n	8002666 <PARAM_getGain+0x1e>
 8002660:	2b00      	cmp	r3, #0
 8002662:	dc04      	bgt.n	800266e <PARAM_getGain+0x26>
 8002664:	e024      	b.n	80026b0 <PARAM_getGain+0x68>
 8002666:	3b0a      	subs	r3, #10
 8002668:	2b02      	cmp	r3, #2
 800266a:	d821      	bhi.n	80026b0 <PARAM_getGain+0x68>
 800266c:	e00a      	b.n	8002684 <PARAM_getGain+0x3c>
//		case PARAM_BACK_DEC:											// 減速中(後進)
		case PARAM_SKEW_ACC:											// 加速中(斜め)
		case PARAM_SKEW_CONST:											// 等速中(斜め)
		case PARAM_SKEW_DEC:											// 減速中(斜め)
		case PARAM_HIT_WALL:											// 壁あて制御
			p_adr = &f_StGainData[en_Speed_st];
 800266e:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <PARAM_getGain+0x90>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4a17      	ldr	r2, [pc, #92]	@ (80026dc <PARAM_getGain+0x94>)
 800267e:	4413      	add	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
			break;
 8002682:	e023      	b.n	80026cc <PARAM_getGain+0x84>
			
		case PARAM_ACC_TRUN:											// 加速中(超地信旋回)
		case PARAM_CONST_TRUN:											// 等速中(超地信旋回)
		case PARAM_DEC_TRUN:											// 減速中(超地信旋回)
			p_adr = &f_TurnGainData[en_Speed_trun];
 8002684:	4b16      	ldr	r3, [pc, #88]	@ (80026e0 <PARAM_getGain+0x98>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4a14      	ldr	r2, [pc, #80]	@ (80026e4 <PARAM_getGain+0x9c>)
 8002694:	4413      	add	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
			break;
 8002698:	e018      	b.n	80026cc <PARAM_getGain+0x84>
		case PARAM_ENTRY_SLA:											// スラローム前の前進動作(スラローム)
		case PARAM_ACC_SLA:											// 加速中(スラローム)
		case PARAM_CONST_SLA:											// 等速中(スラローム)
		case PARAM_DEC_SLA:											// 減速中(スラローム)
		case PARAM_EXIT_SLA:											// スラローム後の前進動作(スラローム)
			p_adr = &f_SlaGainData[en_Speed_sla];
 800269a:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <PARAM_getGain+0xa0>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4a10      	ldr	r2, [pc, #64]	@ (80026ec <PARAM_getGain+0xa4>)
 80026aa:	4413      	add	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
			break;
 80026ae:	e00d      	b.n	80026cc <PARAM_getGain+0x84>
		
		default:														// Err、とりあえず・・・（メモリ破壊を防ぐため）
			printf("設定したゲインタイプがありません \n\r");
 80026b0:	480f      	ldr	r0, [pc, #60]	@ (80026f0 <PARAM_getGain+0xa8>)
 80026b2:	f01b fb3b 	bl	801dd2c <iprintf>
			p_adr = &f_SlaGainData[en_Speed_sla];
 80026b6:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <PARAM_getGain+0xa0>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4a09      	ldr	r2, [pc, #36]	@ (80026ec <PARAM_getGain+0xa4>)
 80026c6:	4413      	add	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
			break;
 80026ca:	bf00      	nop
	}
	
	return p_adr;
 80026cc:	68fb      	ldr	r3, [r7, #12]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000000 	.word	0x20000000
 80026dc:	0802201c 	.word	0x0802201c
 80026e0:	20000001 	.word	0x20000001
 80026e4:	080220e4 	.word	0x080220e4
 80026e8:	20000002 	.word	0x20000002
 80026ec:	080221ac 	.word	0x080221ac
 80026f0:	080218a0 	.word	0x080218a0

080026f4 <PARAM_setSpeedType>:
			break;
	}
}

void PARAM_setSpeedType( enPARAM_MODE en_mode, enPARAM_MOVE_SPEED en_speed )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	460a      	mov	r2, r1
 80026fe:	71fb      	strb	r3, [r7, #7]
 8002700:	4613      	mov	r3, r2
 8002702:	71bb      	strb	r3, [r7, #6]
	switch( en_mode ){
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	2b17      	cmp	r3, #23
 8002708:	d00e      	beq.n	8002728 <PARAM_setSpeedType+0x34>
 800270a:	2b17      	cmp	r3, #23
 800270c:	dc10      	bgt.n	8002730 <PARAM_setSpeedType+0x3c>
 800270e:	2b15      	cmp	r3, #21
 8002710:	d002      	beq.n	8002718 <PARAM_setSpeedType+0x24>
 8002712:	2b16      	cmp	r3, #22
 8002714:	d004      	beq.n	8002720 <PARAM_setSpeedType+0x2c>
 8002716:	e00b      	b.n	8002730 <PARAM_setSpeedType+0x3c>
		
		case PARAM_ST:
			en_Speed_st = en_speed;
 8002718:	4a09      	ldr	r2, [pc, #36]	@ (8002740 <PARAM_setSpeedType+0x4c>)
 800271a:	79bb      	ldrb	r3, [r7, #6]
 800271c:	7013      	strb	r3, [r2, #0]
			break;
 800271e:	e00b      	b.n	8002738 <PARAM_setSpeedType+0x44>
		
		case PARAM_TRUN:
			en_Speed_trun = en_speed;
 8002720:	4a08      	ldr	r2, [pc, #32]	@ (8002744 <PARAM_setSpeedType+0x50>)
 8002722:	79bb      	ldrb	r3, [r7, #6]
 8002724:	7013      	strb	r3, [r2, #0]
			break;
 8002726:	e007      	b.n	8002738 <PARAM_setSpeedType+0x44>
		
		case PARAM_SLA:
			en_Speed_sla = en_speed;
 8002728:	4a07      	ldr	r2, [pc, #28]	@ (8002748 <PARAM_setSpeedType+0x54>)
 800272a:	79bb      	ldrb	r3, [r7, #6]
 800272c:	7013      	strb	r3, [r2, #0]
			break;
 800272e:	e003      	b.n	8002738 <PARAM_setSpeedType+0x44>
			
		default:
			printf("Can't find parameter type \n\r");
 8002730:	4806      	ldr	r0, [pc, #24]	@ (800274c <PARAM_setSpeedType+0x58>)
 8002732:	f01b fafb 	bl	801dd2c <iprintf>
			break;
 8002736:	bf00      	nop
	}
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000000 	.word	0x20000000
 8002744:	20000001 	.word	0x20000001
 8002748:	20000002 	.word	0x20000002
 800274c:	080218d4 	.word	0x080218d4

08002750 <PARAM_getSpeed>:

const stSPEED* PARAM_getSpeed( enPARAM_MODE en_mode )
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
	const stSPEED* p_adr;
	
	switch( en_mode ){
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	2b17      	cmp	r3, #23
 800275e:	bf8c      	ite	hi
 8002760:	2201      	movhi	r2, #1
 8002762:	2200      	movls	r2, #0
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	2a00      	cmp	r2, #0
 8002768:	d13f      	bne.n	80027ea <PARAM_getSpeed+0x9a>
 800276a:	2201      	movs	r2, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	4a27      	ldr	r2, [pc, #156]	@ (8002810 <PARAM_getSpeed+0xc0>)
 8002772:	401a      	ands	r2, r3
 8002774:	2a00      	cmp	r2, #0
 8002776:	bf14      	ite	ne
 8002778:	2201      	movne	r2, #1
 800277a:	2200      	moveq	r2, #0
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	2a00      	cmp	r2, #0
 8002780:	d112      	bne.n	80027a8 <PARAM_getSpeed+0x58>
 8002782:	4a24      	ldr	r2, [pc, #144]	@ (8002814 <PARAM_getSpeed+0xc4>)
 8002784:	401a      	ands	r2, r3
 8002786:	2a00      	cmp	r2, #0
 8002788:	bf14      	ite	ne
 800278a:	2201      	movne	r2, #1
 800278c:	2200      	moveq	r2, #0
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	2a00      	cmp	r2, #0
 8002792:	d11f      	bne.n	80027d4 <PARAM_getSpeed+0x84>
 8002794:	4a20      	ldr	r2, [pc, #128]	@ (8002818 <PARAM_getSpeed+0xc8>)
 8002796:	401a      	ands	r2, r3
 8002798:	2a00      	cmp	r2, #0
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10b      	bne.n	80027be <PARAM_getSpeed+0x6e>
 80027a6:	e020      	b.n	80027ea <PARAM_getSpeed+0x9a>
//		case PARAM_BACK_DEC:											// 減速中(後進)
		case PARAM_SKEW_ACC:											// 加速中(斜め)
		case PARAM_SKEW_CONST:											// 等速中(斜め)
		case PARAM_SKEW_DEC:											// 減速中(斜め)
		case PARAM_HIT_WALL:											// 壁あて制御
			p_adr = &f_StSpeedData[en_Speed_st];
 80027a8:	4b1c      	ldr	r3, [pc, #112]	@ (800281c <PARAM_getSpeed+0xcc>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002820 <PARAM_getSpeed+0xd0>)
 80027b8:	4413      	add	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
			break;
 80027bc:	e023      	b.n	8002806 <PARAM_getSpeed+0xb6>
			
		case PARAM_TRUN:												// 旋回
		case PARAM_ACC_TRUN:											// 加速中(超地信旋回)
		case PARAM_CONST_TRUN:											// 等速中(超地信旋回)
		case PARAM_DEC_TRUN:											// 減速中(超地信旋回)
			p_adr = &f_TurnSpeedData[en_Speed_trun];
 80027be:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <PARAM_getSpeed+0xd4>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4a16      	ldr	r2, [pc, #88]	@ (8002828 <PARAM_getSpeed+0xd8>)
 80027ce:	4413      	add	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
			break;
 80027d2:	e018      	b.n	8002806 <PARAM_getSpeed+0xb6>
		case PARAM_ENTRY_SLA:											// スラローム前の前進動作(スラローム)
		case PARAM_ACC_SLA:											// 加速中(スラローム)
		case PARAM_CONST_SLA:											// 等速中(スラローム)
		case PARAM_DEC_SLA:											// 減速中(スラローム)
		case PARAM_EXIT_SLA:											// スラローム後の前進動作(スラローム)
			p_adr = &f_SlaSpeedData[en_Speed_sla];
 80027d4:	4b15      	ldr	r3, [pc, #84]	@ (800282c <PARAM_getSpeed+0xdc>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	4613      	mov	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4413      	add	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4a13      	ldr	r2, [pc, #76]	@ (8002830 <PARAM_getSpeed+0xe0>)
 80027e4:	4413      	add	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
			break;
 80027e8:	e00d      	b.n	8002806 <PARAM_getSpeed+0xb6>

		default:														// Err、とりあえず・・・（メモリ破壊を防ぐため）
			printf("Can't find speed type \n\r");
 80027ea:	4812      	ldr	r0, [pc, #72]	@ (8002834 <PARAM_getSpeed+0xe4>)
 80027ec:	f01b fa9e 	bl	801dd2c <iprintf>
			p_adr = &f_SlaSpeedData[en_Speed_sla];
 80027f0:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <PARAM_getSpeed+0xdc>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	461a      	mov	r2, r3
 80027f6:	4613      	mov	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002830 <PARAM_getSpeed+0xe0>)
 8002800:	4413      	add	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
			break;
 8002804:	bf00      	nop
	}
	
	return p_adr;
 8002806:	68fb      	ldr	r3, [r7, #12]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	002000fe 	.word	0x002000fe
 8002814:	008f8000 	.word	0x008f8000
 8002818:	00401c00 	.word	0x00401c00
 800281c:	20000000 	.word	0x20000000
 8002820:	08021eb4 	.word	0x08021eb4
 8002824:	20000001 	.word	0x20000001
 8002828:	08021f2c 	.word	0x08021f2c
 800282c:	20000002 	.word	0x20000002
 8002830:	08021fa4 	.word	0x08021fa4
 8002834:	080218f4 	.word	0x080218f4

08002838 <PARAM_makeSra>:
	return p_adr;
}
*/

void PARAM_makeSra( float f_speed, float f_angAcc, float f_g , float f_jerkAngle, enSLA_TYPE en_mode)
{
 8002838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800283c:	b0a6      	sub	sp, #152	@ 0x98
 800283e:	af00      	add	r7, sp, #0
 8002840:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
 8002844:	edc7 0a0c 	vstr	s1, [r7, #48]	@ 0x30
 8002848:	ed87 1a0b 	vstr	s2, [r7, #44]	@ 0x2c
 800284c:	edc7 1a0a 	vstr	s3, [r7, #40]	@ 0x28
 8002850:	4603      	mov	r3, r0
 8002852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	float	f_start_x;					// 開始x位置 [mm]
	float	f_start_y;					// 開始y位置 [mm]
	float	f_final_x;					// 最終x位置 [mm]
	float	f_final_y;					// 最終y位置 [mm]
	float	f_final_ang;				// 角減速時の最終角度 [rad]	
	float	f_maxAngleV		= 0;		// 最大角速度[rad/s]
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	677b      	str	r3, [r7, #116]	@ 0x74
	float	f_timeAcc		= 0;		// 加速時間[s]
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	673b      	str	r3, [r7, #112]	@ 0x70
	float	f_accAngle		= 0;		// 加速角度[rad]
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float	f_timeConst		= 0;		// 等速時間[s]
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	66bb      	str	r3, [r7, #104]	@ 0x68
	float	f_constAngle	= 0;		// 等速角度[rad]
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	667b      	str	r3, [r7, #100]	@ 0x64
	float	f_ang			= 0;		// 演算用、角度 [rad]
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	663b      	str	r3, [r7, #96]	@ 0x60
	float	f_time			= 0;		// 演算用、時間 [s]
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float	f_x;						// 演算用x位置 [mm]
	float	f_y;						// 演算用y位置 [mm]
	uint16_t	i = 0;						// ループ用
 8002880:	2300      	movs	r3, #0
 8002882:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
	stSLA* 	p_adr = &st_Sla[en_mode];		// 記録する走行データ
 8002886:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4a35      	ldr	r2, [pc, #212]	@ (8002968 <PARAM_makeSra+0x130>)
 8002894:	4413      	add	r3, r2
 8002896:	65bb      	str	r3, [r7, #88]	@ 0x58

	float	f_jerkAngleTime		= 0;
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	657b      	str	r3, [r7, #84]	@ 0x54
	float	f_jerkAngleSpeed	= 0;
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	653b      	str	r3, [r7, #80]	@ 0x50
	float	f_jerkAccAccAngle	= 0;
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float	f_jerkAccDecAngle	= 0;
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	64bb      	str	r3, [r7, #72]	@ 0x48
	float	f_jerkDecDecAngle	= 0;
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	647b      	str	r3, [r7, #68]	@ 0x44
	float	f_DecConstAngle	= 0;
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	643b      	str	r3, [r7, #64]	@ 0x40
	float	f_jerkDecAccAngle	= 0;
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// スラロームに応じた設定値からスラロームに必要なパラメータを演算する 
	switch(en_mode){
 80028c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d864      	bhi.n	8002994 <PARAM_makeSra+0x15c>
 80028ca:	a201      	add	r2, pc, #4	@ (adr r2, 80028d0 <PARAM_makeSra+0x98>)
 80028cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d0:	080028e1 	.word	0x080028e1
 80028d4:	08002903 	.word	0x08002903
 80028d8:	08002947 	.word	0x08002947
 80028dc:	08002925 	.word	0x08002925

		case SLA_90:
			f_start_x   = HALF_BLOCK;
 80028e0:	4b22      	ldr	r3, [pc, #136]	@ (800296c <PARAM_makeSra+0x134>)
 80028e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			f_start_y   = 0.0f;
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			f_final_x   = BLOCK;
 80028ee:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <PARAM_makeSra+0x138>)
 80028f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			f_final_y   = HALF_BLOCK;
 80028f4:	4b1d      	ldr	r3, [pc, #116]	@ (800296c <PARAM_makeSra+0x134>)
 80028f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			f_final_ang = 90.0f * DEG_TO_RAD;
 80028fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002974 <PARAM_makeSra+0x13c>)
 80028fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			break;
 8002900:	e049      	b.n	8002996 <PARAM_makeSra+0x15e>

		case SLA_45:
			f_start_x   = HALF_BLOCK;
 8002902:	4b1a      	ldr	r3, [pc, #104]	@ (800296c <PARAM_makeSra+0x134>)
 8002904:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			f_start_y   = 0.0f;
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			f_final_x   = BLOCK * 0.75f;
 8002910:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <PARAM_makeSra+0x140>)
 8002912:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			f_final_y   = BLOCK * 0.75f;
 8002916:	4b18      	ldr	r3, [pc, #96]	@ (8002978 <PARAM_makeSra+0x140>)
 8002918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			f_final_ang = 45.0f * DEG_TO_RAD;
 800291c:	4b17      	ldr	r3, [pc, #92]	@ (800297c <PARAM_makeSra+0x144>)
 800291e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			break;
 8002922:	e038      	b.n	8002996 <PARAM_makeSra+0x15e>
			
		case SLA_N90:
			f_start_x   = HALF_BLOCK * 0.5f * 1.4142f;
 8002924:	4b16      	ldr	r3, [pc, #88]	@ (8002980 <PARAM_makeSra+0x148>)
 8002926:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			f_start_y   = 0.0f;
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			f_final_x   = HALF_BLOCK * 1.4142f;
 8002932:	4b14      	ldr	r3, [pc, #80]	@ (8002984 <PARAM_makeSra+0x14c>)
 8002934:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			f_final_y   = HALF_BLOCK * 0.5f * 1.4142f;
 8002938:	4b11      	ldr	r3, [pc, #68]	@ (8002980 <PARAM_makeSra+0x148>)
 800293a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			f_final_ang = 90.0f * DEG_TO_RAD;
 800293e:	4b0d      	ldr	r3, [pc, #52]	@ (8002974 <PARAM_makeSra+0x13c>)
 8002940:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			break;
 8002944:	e027      	b.n	8002996 <PARAM_makeSra+0x15e>
			
		case SLA_135:
			f_start_x   = HALF_BLOCK;
 8002946:	4b09      	ldr	r3, [pc, #36]	@ (800296c <PARAM_makeSra+0x134>)
 8002948:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			f_start_y   = 0.0f;
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			f_final_x   = BLOCK * 1.25f;
 8002954:	4b0c      	ldr	r3, [pc, #48]	@ (8002988 <PARAM_makeSra+0x150>)
 8002956:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			f_final_y   = BLOCK * 0.25;
 800295a:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <PARAM_makeSra+0x154>)
 800295c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			f_final_ang = 135.0f * DEG_TO_RAD;
 8002960:	4b0b      	ldr	r3, [pc, #44]	@ (8002990 <PARAM_makeSra+0x158>)
 8002962:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			break;
 8002966:	e016      	b.n	8002996 <PARAM_makeSra+0x15e>
 8002968:	20000218 	.word	0x20000218
 800296c:	3d3851ec 	.word	0x3d3851ec
 8002970:	3db851ec 	.word	0x3db851ec
 8002974:	3fc90ff9 	.word	0x3fc90ff9
 8002978:	3d8a3d71 	.word	0x3d8a3d71
 800297c:	3f490ff9 	.word	0x3f490ff9
 8002980:	3d02552a 	.word	0x3d02552a
 8002984:	3d82552a 	.word	0x3d82552a
 8002988:	3de66667 	.word	0x3de66667
 800298c:	3cb851ec 	.word	0x3cb851ec
 8002990:	4016cbfb 	.word	0x4016cbfb

		default:
			break;
 8002994:	bf00      	nop
	}

	// caluculate acc and dec angle speed 
	f_maxAngleV			= f_g / f_speed;							// max angle speed[rad/s] (omega[rad/s] = g[m/s^2] / v[m/s] )
 8002996:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800299a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800299e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029a2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	f_jerkAngleTime		= f_angAcc/ f_jerkAngle;
 80029a6:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80029aa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80029ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029b2:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	f_jerkAngleSpeed	= 0.5 * f_jerkAngle * f_jerkAngleTime * f_jerkAngleTime;
 80029b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029b8:	f7fd fdee 	bl	8000598 <__aeabi_f2d>
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	4be5      	ldr	r3, [pc, #916]	@ (8002d58 <PARAM_makeSra+0x520>)
 80029c2:	f7fd fe41 	bl	8000648 <__aeabi_dmul>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4614      	mov	r4, r2
 80029cc:	461d      	mov	r5, r3
 80029ce:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80029d0:	f7fd fde2 	bl	8000598 <__aeabi_f2d>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4620      	mov	r0, r4
 80029da:	4629      	mov	r1, r5
 80029dc:	f7fd fe34 	bl	8000648 <__aeabi_dmul>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4614      	mov	r4, r2
 80029e6:	461d      	mov	r5, r3
 80029e8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80029ea:	f7fd fdd5 	bl	8000598 <__aeabi_f2d>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4620      	mov	r0, r4
 80029f4:	4629      	mov	r1, r5
 80029f6:	f7fd fe27 	bl	8000648 <__aeabi_dmul>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	f7fe f919 	bl	8000c38 <__aeabi_d2f>
 8002a06:	4603      	mov	r3, r0
 8002a08:	653b      	str	r3, [r7, #80]	@ 0x50
	f_timeAcc			= (f_maxAngleV- f_jerkAngleSpeed * 2.0) / f_angAcc;					// acc time[s]
 8002a0a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002a0c:	f7fd fdc4 	bl	8000598 <__aeabi_f2d>
 8002a10:	4604      	mov	r4, r0
 8002a12:	460d      	mov	r5, r1
 8002a14:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002a16:	f7fd fdbf 	bl	8000598 <__aeabi_f2d>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	f7fd fc5d 	bl	80002dc <__adddf3>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4620      	mov	r0, r4
 8002a28:	4629      	mov	r1, r5
 8002a2a:	f7fd fc55 	bl	80002d8 <__aeabi_dsub>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4614      	mov	r4, r2
 8002a34:	461d      	mov	r5, r3
 8002a36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a38:	f7fd fdae 	bl	8000598 <__aeabi_f2d>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4620      	mov	r0, r4
 8002a42:	4629      	mov	r1, r5
 8002a44:	f7fd ff2a 	bl	800089c <__aeabi_ddiv>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f7fe f8f2 	bl	8000c38 <__aeabi_d2f>
 8002a54:	4603      	mov	r3, r0
 8002a56:	673b      	str	r3, [r7, #112]	@ 0x70
	f_jerkAccAccAngle	= 1.0 / 6.0 * f_jerkAngle * f_jerkAngleTime * f_jerkAngleTime * f_jerkAngleTime + 0.0 * f_jerkAngleTime;
 8002a58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a5a:	f7fd fd9d 	bl	8000598 <__aeabi_f2d>
 8002a5e:	a3bc      	add	r3, pc, #752	@ (adr r3, 8002d50 <PARAM_makeSra+0x518>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f7fd fdf0 	bl	8000648 <__aeabi_dmul>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4614      	mov	r4, r2
 8002a6e:	461d      	mov	r5, r3
 8002a70:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002a72:	f7fd fd91 	bl	8000598 <__aeabi_f2d>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	f7fd fde3 	bl	8000648 <__aeabi_dmul>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4614      	mov	r4, r2
 8002a88:	461d      	mov	r5, r3
 8002a8a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002a8c:	f7fd fd84 	bl	8000598 <__aeabi_f2d>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4620      	mov	r0, r4
 8002a96:	4629      	mov	r1, r5
 8002a98:	f7fd fdd6 	bl	8000648 <__aeabi_dmul>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4614      	mov	r4, r2
 8002aa2:	461d      	mov	r5, r3
 8002aa4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002aa6:	f7fd fd77 	bl	8000598 <__aeabi_f2d>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4620      	mov	r0, r4
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	f7fd fdc9 	bl	8000648 <__aeabi_dmul>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4614      	mov	r4, r2
 8002abc:	461d      	mov	r5, r3
 8002abe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002ac0:	f7fd fd6a 	bl	8000598 <__aeabi_f2d>
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	f7fd fdbc 	bl	8000648 <__aeabi_dmul>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	f7fd fc00 	bl	80002dc <__adddf3>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7fe f8a8 	bl	8000c38 <__aeabi_d2f>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
	f_accAngle			= 0.5 * f_angAcc * f_timeAcc * f_timeAcc + f_jerkAngleSpeed * f_timeAcc;	// acc angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
 8002aec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002aee:	f7fd fd53 	bl	8000598 <__aeabi_f2d>
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	4b98      	ldr	r3, [pc, #608]	@ (8002d58 <PARAM_makeSra+0x520>)
 8002af8:	f7fd fda6 	bl	8000648 <__aeabi_dmul>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4614      	mov	r4, r2
 8002b02:	461d      	mov	r5, r3
 8002b04:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002b06:	f7fd fd47 	bl	8000598 <__aeabi_f2d>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4620      	mov	r0, r4
 8002b10:	4629      	mov	r1, r5
 8002b12:	f7fd fd99 	bl	8000648 <__aeabi_dmul>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4614      	mov	r4, r2
 8002b1c:	461d      	mov	r5, r3
 8002b1e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002b20:	f7fd fd3a 	bl	8000598 <__aeabi_f2d>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4620      	mov	r0, r4
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	f7fd fd8c 	bl	8000648 <__aeabi_dmul>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4614      	mov	r4, r2
 8002b36:	461d      	mov	r5, r3
 8002b38:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002b3c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b44:	ee17 0a90 	vmov	r0, s15
 8002b48:	f7fd fd26 	bl	8000598 <__aeabi_f2d>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4620      	mov	r0, r4
 8002b52:	4629      	mov	r1, r5
 8002b54:	f7fd fbc2 	bl	80002dc <__adddf3>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f7fe f86a 	bl	8000c38 <__aeabi_d2f>
 8002b64:	4603      	mov	r3, r0
 8002b66:	66fb      	str	r3, [r7, #108]	@ 0x6c
	f_jerkAccDecAngle	= 1.0 / 6.0 * f_jerkAngle* (-1.0) * f_jerkAngleTime * f_jerkAngleTime * f_jerkAngleTime 
 8002b68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b6a:	f7fd fd15 	bl	8000598 <__aeabi_f2d>
 8002b6e:	a378      	add	r3, pc, #480	@ (adr r3, 8002d50 <PARAM_makeSra+0x518>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f7fd fd68 	bl	8000648 <__aeabi_dmul>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4690      	mov	r8, r2
 8002b7e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8002b82:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002b84:	f7fd fd08 	bl	8000598 <__aeabi_f2d>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4640      	mov	r0, r8
 8002b8e:	4649      	mov	r1, r9
 8002b90:	f7fd fd5a 	bl	8000648 <__aeabi_dmul>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4614      	mov	r4, r2
 8002b9a:	461d      	mov	r5, r3
 8002b9c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002b9e:	f7fd fcfb 	bl	8000598 <__aeabi_f2d>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	4629      	mov	r1, r5
 8002baa:	f7fd fd4d 	bl	8000648 <__aeabi_dmul>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4614      	mov	r4, r2
 8002bb4:	461d      	mov	r5, r3
 8002bb6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002bb8:	f7fd fcee 	bl	8000598 <__aeabi_f2d>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	f7fd fd40 	bl	8000648 <__aeabi_dmul>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4614      	mov	r4, r2
 8002bce:	461d      	mov	r5, r3
							+ (f_maxAngleV-f_jerkAngleSpeed) * f_jerkAngleTime + 1.0/2.0*f_angAcc*f_jerkAngleTime*f_jerkAngleTime;
 8002bd0:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002bd4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002bd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bdc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be4:	ee17 0a90 	vmov	r0, s15
 8002be8:	f7fd fcd6 	bl	8000598 <__aeabi_f2d>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	f7fd fb72 	bl	80002dc <__adddf3>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4690      	mov	r8, r2
 8002bfe:	4699      	mov	r9, r3
 8002c00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c02:	f7fd fcc9 	bl	8000598 <__aeabi_f2d>
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	4b53      	ldr	r3, [pc, #332]	@ (8002d58 <PARAM_makeSra+0x520>)
 8002c0c:	f7fd fd1c 	bl	8000648 <__aeabi_dmul>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4614      	mov	r4, r2
 8002c16:	461d      	mov	r5, r3
 8002c18:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002c1a:	f7fd fcbd 	bl	8000598 <__aeabi_f2d>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4620      	mov	r0, r4
 8002c24:	4629      	mov	r1, r5
 8002c26:	f7fd fd0f 	bl	8000648 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4614      	mov	r4, r2
 8002c30:	461d      	mov	r5, r3
 8002c32:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002c34:	f7fd fcb0 	bl	8000598 <__aeabi_f2d>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	4629      	mov	r1, r5
 8002c40:	f7fd fd02 	bl	8000648 <__aeabi_dmul>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4640      	mov	r0, r8
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	f7fd fb46 	bl	80002dc <__adddf3>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
	f_jerkAccDecAngle	= 1.0 / 6.0 * f_jerkAngle* (-1.0) * f_jerkAngleTime * f_jerkAngleTime * f_jerkAngleTime 
 8002c54:	4610      	mov	r0, r2
 8002c56:	4619      	mov	r1, r3
 8002c58:	f7fd ffee 	bl	8000c38 <__aeabi_d2f>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
//	f_constAngle		= f_final_ang - (f_jerkAccAccAngle+f_accAngle+f_jerkAccDecAngle)* 2.0;				// const angle[rad] (theta[rad] = Totalangle - (acc angle + dec angle) )
//	f_timeConst			= f_constAngle / f_maxAngleV;				// max angle speed time[s]( t[s] = theta[rad] / omega[rad/s] )
	f_jerkDecDecAngle	= 1.0 / 6.0 * f_jerkAngle* (-1.0) * f_jerkAngleTime * f_jerkAngleTime * f_jerkAngleTime + f_maxAngleV * f_jerkAngleTime ;
 8002c60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c62:	f7fd fc99 	bl	8000598 <__aeabi_f2d>
 8002c66:	a33a      	add	r3, pc, #232	@ (adr r3, 8002d50 <PARAM_makeSra+0x518>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f7fd fcec 	bl	8000648 <__aeabi_dmul>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4692      	mov	sl, r2
 8002c76:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8002c7a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002c7c:	f7fd fc8c 	bl	8000598 <__aeabi_f2d>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4650      	mov	r0, sl
 8002c86:	4659      	mov	r1, fp
 8002c88:	f7fd fcde 	bl	8000648 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4614      	mov	r4, r2
 8002c92:	461d      	mov	r5, r3
 8002c94:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002c96:	f7fd fc7f 	bl	8000598 <__aeabi_f2d>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	f7fd fcd1 	bl	8000648 <__aeabi_dmul>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4614      	mov	r4, r2
 8002cac:	461d      	mov	r5, r3
 8002cae:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002cb0:	f7fd fc72 	bl	8000598 <__aeabi_f2d>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4620      	mov	r0, r4
 8002cba:	4629      	mov	r1, r5
 8002cbc:	f7fd fcc4 	bl	8000648 <__aeabi_dmul>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4614      	mov	r4, r2
 8002cc6:	461d      	mov	r5, r3
 8002cc8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002ccc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd4:	ee17 0a90 	vmov	r0, s15
 8002cd8:	f7fd fc5e 	bl	8000598 <__aeabi_f2d>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	f7fd fafa 	bl	80002dc <__adddf3>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4610      	mov	r0, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	f7fd ffa2 	bl	8000c38 <__aeabi_d2f>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	647b      	str	r3, [r7, #68]	@ 0x44
	f_DecConstAngle		= 0.5 * f_angAcc*(-1.0) * f_timeAcc * f_timeAcc + (f_maxAngleV-f_jerkAngleSpeed) * f_timeAcc;
 8002cf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cfa:	f7fd fc4d 	bl	8000598 <__aeabi_f2d>
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	4b15      	ldr	r3, [pc, #84]	@ (8002d58 <PARAM_makeSra+0x520>)
 8002d04:	f7fd fca0 	bl	8000648 <__aeabi_dmul>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	61ba      	str	r2, [r7, #24]
 8002d0e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002d16:	f7fd fc3f 	bl	8000598 <__aeabi_f2d>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d22:	f7fd fc91 	bl	8000648 <__aeabi_dmul>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4614      	mov	r4, r2
 8002d2c:	461d      	mov	r5, r3
 8002d2e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002d30:	f7fd fc32 	bl	8000598 <__aeabi_f2d>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4620      	mov	r0, r4
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	f7fd fc84 	bl	8000648 <__aeabi_dmul>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4614      	mov	r4, r2
 8002d46:	461d      	mov	r5, r3
 8002d48:	e008      	b.n	8002d5c <PARAM_makeSra+0x524>
 8002d4a:	bf00      	nop
 8002d4c:	f3af 8000 	nop.w
 8002d50:	55555555 	.word	0x55555555
 8002d54:	3fc55555 	.word	0x3fc55555
 8002d58:	3fe00000 	.word	0x3fe00000
 8002d5c:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002d60:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002d64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d68:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d70:	ee17 0a90 	vmov	r0, s15
 8002d74:	f7fd fc10 	bl	8000598 <__aeabi_f2d>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	4629      	mov	r1, r5
 8002d80:	f7fd faac 	bl	80002dc <__adddf3>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f7fd ff54 	bl	8000c38 <__aeabi_d2f>
 8002d90:	4603      	mov	r3, r0
 8002d92:	643b      	str	r3, [r7, #64]	@ 0x40
	f_jerkDecAccAngle	= 1.0 / 6.0 * f_jerkAngle * f_jerkAngleTime * f_jerkAngleTime * f_jerkAngleTime + f_jerkAngleSpeed * f_jerkAngleTime 
 8002d94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d96:	f7fd fbff 	bl	8000598 <__aeabi_f2d>
 8002d9a:	a3df      	add	r3, pc, #892	@ (adr r3, 8003118 <PARAM_makeSra+0x8e0>)
 8002d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da0:	f7fd fc52 	bl	8000648 <__aeabi_dmul>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4614      	mov	r4, r2
 8002daa:	461d      	mov	r5, r3
 8002dac:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002dae:	f7fd fbf3 	bl	8000598 <__aeabi_f2d>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4620      	mov	r0, r4
 8002db8:	4629      	mov	r1, r5
 8002dba:	f7fd fc45 	bl	8000648 <__aeabi_dmul>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4614      	mov	r4, r2
 8002dc4:	461d      	mov	r5, r3
 8002dc6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002dc8:	f7fd fbe6 	bl	8000598 <__aeabi_f2d>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	f7fd fc38 	bl	8000648 <__aeabi_dmul>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4614      	mov	r4, r2
 8002dde:	461d      	mov	r5, r3
 8002de0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002de2:	f7fd fbd9 	bl	8000598 <__aeabi_f2d>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4620      	mov	r0, r4
 8002dec:	4629      	mov	r1, r5
 8002dee:	f7fd fc2b 	bl	8000648 <__aeabi_dmul>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4614      	mov	r4, r2
 8002df8:	461d      	mov	r5, r3
 8002dfa:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002dfe:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e06:	ee17 0a90 	vmov	r0, s15
 8002e0a:	f7fd fbc5 	bl	8000598 <__aeabi_f2d>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4620      	mov	r0, r4
 8002e14:	4629      	mov	r1, r5
 8002e16:	f7fd fa61 	bl	80002dc <__adddf3>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4614      	mov	r4, r2
 8002e20:	461d      	mov	r5, r3
							+ 1.0/2.0*f_angAcc*(-1.0)*f_jerkAngleTime*f_jerkAngleTime;
 8002e22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e24:	f7fd fbb8 	bl	8000598 <__aeabi_f2d>
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	4bbc      	ldr	r3, [pc, #752]	@ (8003120 <PARAM_makeSra+0x8e8>)
 8002e2e:	f7fd fc0b 	bl	8000648 <__aeabi_dmul>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	613a      	str	r2, [r7, #16]
 8002e38:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002e40:	f7fd fbaa 	bl	8000598 <__aeabi_f2d>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e4c:	f7fd fbfc 	bl	8000648 <__aeabi_dmul>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4690      	mov	r8, r2
 8002e56:	4699      	mov	r9, r3
 8002e58:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002e5a:	f7fd fb9d 	bl	8000598 <__aeabi_f2d>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4640      	mov	r0, r8
 8002e64:	4649      	mov	r1, r9
 8002e66:	f7fd fbef 	bl	8000648 <__aeabi_dmul>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4620      	mov	r0, r4
 8002e70:	4629      	mov	r1, r5
 8002e72:	f7fd fa33 	bl	80002dc <__adddf3>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
	f_jerkDecAccAngle	= 1.0 / 6.0 * f_jerkAngle * f_jerkAngleTime * f_jerkAngleTime * f_jerkAngleTime + f_jerkAngleSpeed * f_jerkAngleTime 
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f7fd fedb 	bl	8000c38 <__aeabi_d2f>
 8002e82:	4603      	mov	r3, r0
 8002e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
	f_constAngle		= f_final_ang - (f_jerkAccAccAngle+f_accAngle+f_jerkAccDecAngle +f_jerkDecDecAngle+f_DecConstAngle+f_jerkDecAccAngle) ;				// const angle[rad] (theta[rad] = Totalangle - (acc angle + dec angle) )
 8002e86:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002e8a:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002e8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e92:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002e96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e9a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ea2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002ea6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eaa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb2:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8002eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eba:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	f_timeConst			= f_constAngle / f_maxAngleV;
 8002ebe:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8002ec2:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eca:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

	// -------------------------------- 
	// sla end position 
	// -------------------------------- 
	// start position 
	f_x		= f_start_x;
 8002ece:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ed2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	f_y		= f_start_y;
 8002ed6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002eda:	67fb      	str	r3, [r7, #124]	@ 0x7c

	// jerk ACC acc
	for( i=0; i<(uint16_t)(f_jerkAngleTime*1000); i++ ){
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8002ee2:	e085      	b.n	8002ff0 <PARAM_makeSra+0x7b8>
		f_time	=  0.001f * (float)i;								// time[s]
 8002ee4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002ee8:	ee07 3a90 	vmov	s15, r3
 8002eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef0:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8003128 <PARAM_makeSra+0x8f0>
 8002ef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ef8:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
//		f_ang	=  0.5f * f_angAcc * f_time * f_time;				// angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
		f_ang	= 1.0 / 6.0 * f_jerkAngle * f_time * f_time * f_time;
 8002efc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002efe:	f7fd fb4b 	bl	8000598 <__aeabi_f2d>
 8002f02:	a385      	add	r3, pc, #532	@ (adr r3, 8003118 <PARAM_makeSra+0x8e0>)
 8002f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f08:	f7fd fb9e 	bl	8000648 <__aeabi_dmul>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4614      	mov	r4, r2
 8002f12:	461d      	mov	r5, r3
 8002f14:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002f16:	f7fd fb3f 	bl	8000598 <__aeabi_f2d>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4620      	mov	r0, r4
 8002f20:	4629      	mov	r1, r5
 8002f22:	f7fd fb91 	bl	8000648 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4614      	mov	r4, r2
 8002f2c:	461d      	mov	r5, r3
 8002f2e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002f30:	f7fd fb32 	bl	8000598 <__aeabi_f2d>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4620      	mov	r0, r4
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	f7fd fb84 	bl	8000648 <__aeabi_dmul>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4614      	mov	r4, r2
 8002f46:	461d      	mov	r5, r3
 8002f48:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002f4a:	f7fd fb25 	bl	8000598 <__aeabi_f2d>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4620      	mov	r0, r4
 8002f54:	4629      	mov	r1, r5
 8002f56:	f7fd fb77 	bl	8000648 <__aeabi_dmul>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4610      	mov	r0, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	f7fd fe69 	bl	8000c38 <__aeabi_d2f>
 8002f66:	4603      	mov	r3, r0
 8002f68:	663b      	str	r3, [r7, #96]	@ 0x60
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;			// Xposition[m]
 8002f6a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002f6c:	f7fd fb14 	bl	8000598 <__aeabi_f2d>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	ec43 2b10 	vmov	d0, r2, r3
 8002f78:	f018 fe9e 	bl	801bcb8 <sin>
 8002f7c:	ec53 2b10 	vmov	r2, r3, d0
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	f7fd fe58 	bl	8000c38 <__aeabi_d2f>
 8002f88:	ee07 0a10 	vmov	s14, r0
 8002f8c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f94:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8003128 <PARAM_makeSra+0x8f0>
 8002f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f9c:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa4:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;			// Yposition[m]
 8002fa8:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002faa:	f7fd faf5 	bl	8000598 <__aeabi_f2d>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	ec43 2b10 	vmov	d0, r2, r3
 8002fb6:	f018 fe2b 	bl	801bc10 <cos>
 8002fba:	ec53 2b10 	vmov	r2, r3, d0
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f7fd fe39 	bl	8000c38 <__aeabi_d2f>
 8002fc6:	ee07 0a10 	vmov	s14, r0
 8002fca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003128 <PARAM_makeSra+0x8f0>
 8002fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fda:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8002fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe2:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	for( i=0; i<(uint16_t)(f_jerkAngleTime*1000); i++ ){
 8002fe6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002fea:	3301      	adds	r3, #1
 8002fec:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8002ff0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002ff4:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003124 <PARAM_makeSra+0x8ec>
 8002ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003000:	ee17 3a90 	vmov	r3, s15
 8003004:	b29b      	uxth	r3, r3
 8003006:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 800300a:	429a      	cmp	r2, r3
 800300c:	f4ff af6a 	bcc.w	8002ee4 <PARAM_makeSra+0x6ac>
	}
	// ACC 
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 8003010:	2300      	movs	r3, #0
 8003012:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8003016:	e06a      	b.n	80030ee <PARAM_makeSra+0x8b6>
	
		f_time	=  0.001f * (float)i;								// time[s]
 8003018:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800301c:	ee07 3a90 	vmov	s15, r3
 8003020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003024:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8003128 <PARAM_makeSra+0x8f0>
 8003028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800302c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		f_ang	= f_jerkAccAccAngle + 0.5f * f_angAcc * f_time * f_time+ f_jerkAngleSpeed*f_time;				// angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
 8003030:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003034:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003038:	ee27 7a87 	vmul.f32	s14, s15, s14
 800303c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003044:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800304c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003054:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8003058:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800305c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003064:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;			// Xposition[m]
 8003068:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800306a:	f7fd fa95 	bl	8000598 <__aeabi_f2d>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	ec43 2b10 	vmov	d0, r2, r3
 8003076:	f018 fe1f 	bl	801bcb8 <sin>
 800307a:	ec53 2b10 	vmov	r2, r3, d0
 800307e:	4610      	mov	r0, r2
 8003080:	4619      	mov	r1, r3
 8003082:	f7fd fdd9 	bl	8000c38 <__aeabi_d2f>
 8003086:	ee07 0a10 	vmov	s14, r0
 800308a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800308e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003092:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8003128 <PARAM_makeSra+0x8f0>
 8003096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800309a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800309e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a2:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;			// Yposition[m]
 80030a6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80030a8:	f7fd fa76 	bl	8000598 <__aeabi_f2d>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	ec43 2b10 	vmov	d0, r2, r3
 80030b4:	f018 fdac 	bl	801bc10 <cos>
 80030b8:	ec53 2b10 	vmov	r2, r3, d0
 80030bc:	4610      	mov	r0, r2
 80030be:	4619      	mov	r1, r3
 80030c0:	f7fd fdba 	bl	8000c38 <__aeabi_d2f>
 80030c4:	ee07 0a10 	vmov	s14, r0
 80030c8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80030cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d0:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003128 <PARAM_makeSra+0x8f0>
 80030d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d8:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80030dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e0:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 80030e4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80030e8:	3301      	adds	r3, #1
 80030ea:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80030ee:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80030f2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003124 <PARAM_makeSra+0x8ec>
 80030f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030fe:	ee17 3a90 	vmov	r3, s15
 8003102:	b29b      	uxth	r3, r3
 8003104:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8003108:	429a      	cmp	r2, r3
 800310a:	d385      	bcc.n	8003018 <PARAM_makeSra+0x7e0>
	}
	//jerk ACC dec
	for( i=0; i<(uint16_t)(f_jerkAngleTime*1000); i++ ){
 800310c:	2300      	movs	r3, #0
 800310e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8003112:	e0ea      	b.n	80032ea <PARAM_makeSra+0xab2>
 8003114:	f3af 8000 	nop.w
 8003118:	55555555 	.word	0x55555555
 800311c:	3fc55555 	.word	0x3fc55555
 8003120:	3fe00000 	.word	0x3fe00000
 8003124:	447a0000 	.word	0x447a0000
 8003128:	3a83126f 	.word	0x3a83126f
		f_time	=  0.001f * (float)i;								// time[s]
 800312c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8003130:	ee07 3a90 	vmov	s15, r3
 8003134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003138:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8003128 <PARAM_makeSra+0x8f0>
 800313c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003140:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
//		f_ang	=  0.5f * f_angAcc * f_time * f_time;				// angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
		f_ang	= f_jerkAccAccAngle + f_accAngle + 1.0 / 6.0 * f_jerkAngle * (-1.0) * f_time * f_time * f_time + (f_maxAngleV-f_jerkAngleSpeed) * f_time + 1.0/2.0*f_angAcc*f_time*f_time;
 8003144:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003148:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800314c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003150:	ee17 0a90 	vmov	r0, s15
 8003154:	f7fd fa20 	bl	8000598 <__aeabi_f2d>
 8003158:	4604      	mov	r4, r0
 800315a:	460d      	mov	r5, r1
 800315c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800315e:	f7fd fa1b 	bl	8000598 <__aeabi_f2d>
 8003162:	f20f 4334 	addw	r3, pc, #1076	@ 0x434
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	f7fd fa6d 	bl	8000648 <__aeabi_dmul>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	60ba      	str	r2, [r7, #8]
 8003174:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800317c:	f7fd fa0c 	bl	8000598 <__aeabi_f2d>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003188:	f7fd fa5e 	bl	8000648 <__aeabi_dmul>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4690      	mov	r8, r2
 8003192:	4699      	mov	r9, r3
 8003194:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003196:	f7fd f9ff 	bl	8000598 <__aeabi_f2d>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4640      	mov	r0, r8
 80031a0:	4649      	mov	r1, r9
 80031a2:	f7fd fa51 	bl	8000648 <__aeabi_dmul>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4690      	mov	r8, r2
 80031ac:	4699      	mov	r9, r3
 80031ae:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80031b0:	f7fd f9f2 	bl	8000598 <__aeabi_f2d>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4640      	mov	r0, r8
 80031ba:	4649      	mov	r1, r9
 80031bc:	f7fd fa44 	bl	8000648 <__aeabi_dmul>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4620      	mov	r0, r4
 80031c6:	4629      	mov	r1, r5
 80031c8:	f7fd f888 	bl	80002dc <__adddf3>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4614      	mov	r4, r2
 80031d2:	461d      	mov	r5, r3
 80031d4:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80031d8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80031dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031e0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80031e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e8:	ee17 0a90 	vmov	r0, s15
 80031ec:	f7fd f9d4 	bl	8000598 <__aeabi_f2d>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4620      	mov	r0, r4
 80031f6:	4629      	mov	r1, r5
 80031f8:	f7fd f870 	bl	80002dc <__adddf3>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4614      	mov	r4, r2
 8003202:	461d      	mov	r5, r3
 8003204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003206:	f7fd f9c7 	bl	8000598 <__aeabi_f2d>
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	4be4      	ldr	r3, [pc, #912]	@ (80035a0 <PARAM_makeSra+0xd68>)
 8003210:	f7fd fa1a 	bl	8000648 <__aeabi_dmul>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4690      	mov	r8, r2
 800321a:	4699      	mov	r9, r3
 800321c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800321e:	f7fd f9bb 	bl	8000598 <__aeabi_f2d>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4640      	mov	r0, r8
 8003228:	4649      	mov	r1, r9
 800322a:	f7fd fa0d 	bl	8000648 <__aeabi_dmul>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4690      	mov	r8, r2
 8003234:	4699      	mov	r9, r3
 8003236:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003238:	f7fd f9ae 	bl	8000598 <__aeabi_f2d>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4640      	mov	r0, r8
 8003242:	4649      	mov	r1, r9
 8003244:	f7fd fa00 	bl	8000648 <__aeabi_dmul>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4620      	mov	r0, r4
 800324e:	4629      	mov	r1, r5
 8003250:	f7fd f844 	bl	80002dc <__adddf3>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4610      	mov	r0, r2
 800325a:	4619      	mov	r1, r3
 800325c:	f7fd fcec 	bl	8000c38 <__aeabi_d2f>
 8003260:	4603      	mov	r3, r0
 8003262:	663b      	str	r3, [r7, #96]	@ 0x60
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;			// Xposition[m]
 8003264:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003266:	f7fd f997 	bl	8000598 <__aeabi_f2d>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	ec43 2b10 	vmov	d0, r2, r3
 8003272:	f018 fd21 	bl	801bcb8 <sin>
 8003276:	ec53 2b10 	vmov	r2, r3, d0
 800327a:	4610      	mov	r0, r2
 800327c:	4619      	mov	r1, r3
 800327e:	f7fd fcdb 	bl	8000c38 <__aeabi_d2f>
 8003282:	ee07 0a10 	vmov	s14, r0
 8003286:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800328a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328e:	ed9f 7ac6 	vldr	s14, [pc, #792]	@ 80035a8 <PARAM_makeSra+0xd70>
 8003292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003296:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800329a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800329e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;			// Yposition[m]
 80032a2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80032a4:	f7fd f978 	bl	8000598 <__aeabi_f2d>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	ec43 2b10 	vmov	d0, r2, r3
 80032b0:	f018 fcae 	bl	801bc10 <cos>
 80032b4:	ec53 2b10 	vmov	r2, r3, d0
 80032b8:	4610      	mov	r0, r2
 80032ba:	4619      	mov	r1, r3
 80032bc:	f7fd fcbc 	bl	8000c38 <__aeabi_d2f>
 80032c0:	ee07 0a10 	vmov	s14, r0
 80032c4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80032c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032cc:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 80035a8 <PARAM_makeSra+0xd70>
 80032d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032d4:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80032d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032dc:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	for( i=0; i<(uint16_t)(f_jerkAngleTime*1000); i++ ){
 80032e0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80032e4:	3301      	adds	r3, #1
 80032e6:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80032ea:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80032ee:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80035a4 <PARAM_makeSra+0xd6c>
 80032f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032fa:	ee17 3a90 	vmov	r3, s15
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8003304:	429a      	cmp	r2, r3
 8003306:	f4ff af11 	bcc.w	800312c <PARAM_makeSra+0x8f4>
	}
	// CONST 
	for( i=0; i<(uint16_t)(f_timeConst*1000); i++ ){				// [msec]
 800330a:	2300      	movs	r3, #0
 800330c:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8003310:	e062      	b.n	80033d8 <PARAM_makeSra+0xba0>
	
		f_time	 = 0.001f * (float)i;							// time[s]
 8003312:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331e:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 80035a8 <PARAM_makeSra+0xd70>
 8003322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003326:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		f_ang	 = f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle + f_maxAngleV * f_time;			// angle[rad] (theta[rad] = omega[rad/s] * t[s] )
 800332a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800332e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003332:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003336:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800333a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800333e:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8003342:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003346:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800334a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;		// Xposition[m]
 8003352:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003354:	f7fd f920 	bl	8000598 <__aeabi_f2d>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	ec43 2b10 	vmov	d0, r2, r3
 8003360:	f018 fcaa 	bl	801bcb8 <sin>
 8003364:	ec53 2b10 	vmov	r2, r3, d0
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	f7fd fc64 	bl	8000c38 <__aeabi_d2f>
 8003370:	ee07 0a10 	vmov	s14, r0
 8003374:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337c:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80035a8 <PARAM_makeSra+0xd70>
 8003380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003384:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800338c:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;		// Yposition[m]
 8003390:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003392:	f7fd f901 	bl	8000598 <__aeabi_f2d>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	ec43 2b10 	vmov	d0, r2, r3
 800339e:	f018 fc37 	bl	801bc10 <cos>
 80033a2:	ec53 2b10 	vmov	r2, r3, d0
 80033a6:	4610      	mov	r0, r2
 80033a8:	4619      	mov	r1, r3
 80033aa:	f7fd fc45 	bl	8000c38 <__aeabi_d2f>
 80033ae:	ee07 0a10 	vmov	s14, r0
 80033b2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80033b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ba:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 80035a8 <PARAM_makeSra+0xd70>
 80033be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c2:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80033c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ca:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	for( i=0; i<(uint16_t)(f_timeConst*1000); i++ ){				// [msec]
 80033ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80033d2:	3301      	adds	r3, #1
 80033d4:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80033d8:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80033dc:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 80035a4 <PARAM_makeSra+0xd6c>
 80033e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033e8:	ee17 3a90 	vmov	r3, s15
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d38d      	bcc.n	8003312 <PARAM_makeSra+0xada>
	}
	//jerk DEC dec
	for( i=0; i<(uint16_t)(f_jerkAngleTime*1000); i++ ){				// [msec]
 80033f6:	2300      	movs	r3, #0
 80033f8:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80033fc:	e0b5      	b.n	800356a <PARAM_makeSra+0xd32>
	
		f_time	 = 0.001f * (float)i;							// time[s]
 80033fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340a:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80035a8 <PARAM_makeSra+0xd70>
 800340e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003412:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		f_ang	 = f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle  + f_constAngle + 1.0 / 6.0 * f_jerkAngle*(-1.0) * f_time * f_time * f_time + f_maxAngleV * f_time;			// angle[rad] (theta[rad] = omega[rad/s] * t[s] )
 8003416:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800341a:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800341e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003422:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003426:	ee37 7a27 	vadd.f32	s14, s14, s15
 800342a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800342e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003432:	ee17 0a90 	vmov	r0, s15
 8003436:	f7fd f8af 	bl	8000598 <__aeabi_f2d>
 800343a:	4604      	mov	r4, r0
 800343c:	460d      	mov	r5, r1
 800343e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003440:	f7fd f8aa 	bl	8000598 <__aeabi_f2d>
 8003444:	a354      	add	r3, pc, #336	@ (adr r3, 8003598 <PARAM_makeSra+0xd60>)
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	f7fd f8fd 	bl	8000648 <__aeabi_dmul>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	603a      	str	r2, [r7, #0]
 8003454:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800345c:	f7fd f89c 	bl	8000598 <__aeabi_f2d>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003468:	f7fd f8ee 	bl	8000648 <__aeabi_dmul>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4690      	mov	r8, r2
 8003472:	4699      	mov	r9, r3
 8003474:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003476:	f7fd f88f 	bl	8000598 <__aeabi_f2d>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4640      	mov	r0, r8
 8003480:	4649      	mov	r1, r9
 8003482:	f7fd f8e1 	bl	8000648 <__aeabi_dmul>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4690      	mov	r8, r2
 800348c:	4699      	mov	r9, r3
 800348e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003490:	f7fd f882 	bl	8000598 <__aeabi_f2d>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4640      	mov	r0, r8
 800349a:	4649      	mov	r1, r9
 800349c:	f7fd f8d4 	bl	8000648 <__aeabi_dmul>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4620      	mov	r0, r4
 80034a6:	4629      	mov	r1, r5
 80034a8:	f7fc ff18 	bl	80002dc <__adddf3>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4614      	mov	r4, r2
 80034b2:	461d      	mov	r5, r3
 80034b4:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80034b8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80034bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c0:	ee17 0a90 	vmov	r0, s15
 80034c4:	f7fd f868 	bl	8000598 <__aeabi_f2d>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4620      	mov	r0, r4
 80034ce:	4629      	mov	r1, r5
 80034d0:	f7fc ff04 	bl	80002dc <__adddf3>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	f7fd fbac 	bl	8000c38 <__aeabi_d2f>
 80034e0:	4603      	mov	r3, r0
 80034e2:	663b      	str	r3, [r7, #96]	@ 0x60
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;		// Xposition[m]
 80034e4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80034e6:	f7fd f857 	bl	8000598 <__aeabi_f2d>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	ec43 2b10 	vmov	d0, r2, r3
 80034f2:	f018 fbe1 	bl	801bcb8 <sin>
 80034f6:	ec53 2b10 	vmov	r2, r3, d0
 80034fa:	4610      	mov	r0, r2
 80034fc:	4619      	mov	r1, r3
 80034fe:	f7fd fb9b 	bl	8000c38 <__aeabi_d2f>
 8003502:	ee07 0a10 	vmov	s14, r0
 8003506:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800350a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80035a8 <PARAM_makeSra+0xd70>
 8003512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003516:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800351a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800351e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;		// Yposition[m]
 8003522:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003524:	f7fd f838 	bl	8000598 <__aeabi_f2d>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	ec43 2b10 	vmov	d0, r2, r3
 8003530:	f018 fb6e 	bl	801bc10 <cos>
 8003534:	ec53 2b10 	vmov	r2, r3, d0
 8003538:	4610      	mov	r0, r2
 800353a:	4619      	mov	r1, r3
 800353c:	f7fd fb7c 	bl	8000c38 <__aeabi_d2f>
 8003540:	ee07 0a10 	vmov	s14, r0
 8003544:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80035a8 <PARAM_makeSra+0xd70>
 8003550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003554:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8003558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800355c:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	for( i=0; i<(uint16_t)(f_jerkAngleTime*1000); i++ ){				// [msec]
 8003560:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8003564:	3301      	adds	r3, #1
 8003566:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 800356a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800356e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80035a4 <PARAM_makeSra+0xd6c>
 8003572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800357a:	ee17 3a90 	vmov	r3, s15
 800357e:	b29b      	uxth	r3, r3
 8003580:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8003584:	429a      	cmp	r2, r3
 8003586:	f4ff af3a 	bcc.w	80033fe <PARAM_makeSra+0xbc6>
	}
	// DEC
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 800358a:	2300      	movs	r3, #0
 800358c:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8003590:	e08b      	b.n	80036aa <PARAM_makeSra+0xe72>
 8003592:	bf00      	nop
 8003594:	f3af 8000 	nop.w
 8003598:	55555555 	.word	0x55555555
 800359c:	3fc55555 	.word	0x3fc55555
 80035a0:	3fe00000 	.word	0x3fe00000
 80035a4:	447a0000 	.word	0x447a0000
 80035a8:	3a83126f 	.word	0x3a83126f
	
		f_time	 = 0.001f * (float)i;							// time[s]
 80035ac:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80035b0:	ee07 3a90 	vmov	s15, r3
 80035b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b8:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 80035a8 <PARAM_makeSra+0xd70>
 80035bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035c0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		f_ang	 = f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle + f_constAngle + f_jerkDecDecAngle + 0.5f * f_angAcc * f_time * f_time + (f_maxAngleV-f_jerkAngleSpeed) * f_time;	// angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
 80035c4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80035c8:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80035cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035d0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80035d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035d8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80035dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035e0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80035e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035e8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80035ec:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80035f0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80035f4:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80035f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035fc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003604:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003608:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 800360c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003610:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003614:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800361c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003620:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;		// Xposition[m]
 8003624:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003626:	f7fc ffb7 	bl	8000598 <__aeabi_f2d>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	ec43 2b10 	vmov	d0, r2, r3
 8003632:	f018 fb41 	bl	801bcb8 <sin>
 8003636:	ec53 2b10 	vmov	r2, r3, d0
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	f7fd fafb 	bl	8000c38 <__aeabi_d2f>
 8003642:	ee07 0a10 	vmov	s14, r0
 8003646:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800364a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364e:	ed1f 7a2a 	vldr	s14, [pc, #-168]	@ 80035a8 <PARAM_makeSra+0xd70>
 8003652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003656:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800365a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800365e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;		// Yposition[m]
 8003662:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003664:	f7fc ff98 	bl	8000598 <__aeabi_f2d>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	ec43 2b10 	vmov	d0, r2, r3
 8003670:	f018 face 	bl	801bc10 <cos>
 8003674:	ec53 2b10 	vmov	r2, r3, d0
 8003678:	4610      	mov	r0, r2
 800367a:	4619      	mov	r1, r3
 800367c:	f7fd fadc 	bl	8000c38 <__aeabi_d2f>
 8003680:	ee07 0a10 	vmov	s14, r0
 8003684:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368c:	ed1f 7a3a 	vldr	s14, [pc, #-232]	@ 80035a8 <PARAM_makeSra+0xd70>
 8003690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003694:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8003698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800369c:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 80036a0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80036a4:	3301      	adds	r3, #1
 80036a6:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80036aa:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80036ae:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80035a4 <PARAM_makeSra+0xd6c>
 80036b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ba:	ee17 3a90 	vmov	r3, s15
 80036be:	b29b      	uxth	r3, r3
 80036c0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80036c4:	429a      	cmp	r2, r3
 80036c6:	f4ff af71 	bcc.w	80035ac <PARAM_makeSra+0xd74>
	}
	//jerk DEC acc
	for( i=0; i<(uint16_t)(f_jerkAngleTime*1000); i++ ){				// [msec]
 80036ca:	2300      	movs	r3, #0
 80036cc:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80036d0:	e109      	b.n	80038e6 <PARAM_makeSra+0x10ae>
	
		f_time	 = 0.001f * (float)i;							// time[s]
 80036d2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036de:	ed1f 7a4e 	vldr	s14, [pc, #-312]	@ 80035a8 <PARAM_makeSra+0xd70>
 80036e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036e6:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		f_ang	 = f_jerkAccAccAngle + f_accAngle*2.0 + f_jerkAccDecAngle + f_constAngle + f_jerkDecDecAngle + 1.0 / 6.0 * f_jerkAngle * f_time * f_time * f_time + f_jerkAngleSpeed * f_time + 1.0/2.0*(-1.0)*f_angAcc*f_time*f_time;			// angle[rad] (theta[rad] = omega[rad/s] * t[s] )
 80036ea:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80036ec:	f7fc ff54 	bl	8000598 <__aeabi_f2d>
 80036f0:	4604      	mov	r4, r0
 80036f2:	460d      	mov	r5, r1
 80036f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80036f6:	f7fc ff4f 	bl	8000598 <__aeabi_f2d>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	f7fc fded 	bl	80002dc <__adddf3>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4620      	mov	r0, r4
 8003708:	4629      	mov	r1, r5
 800370a:	f7fc fde7 	bl	80002dc <__adddf3>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4614      	mov	r4, r2
 8003714:	461d      	mov	r5, r3
 8003716:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003718:	f7fc ff3e 	bl	8000598 <__aeabi_f2d>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4620      	mov	r0, r4
 8003722:	4629      	mov	r1, r5
 8003724:	f7fc fdda 	bl	80002dc <__adddf3>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4614      	mov	r4, r2
 800372e:	461d      	mov	r5, r3
 8003730:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003732:	f7fc ff31 	bl	8000598 <__aeabi_f2d>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4620      	mov	r0, r4
 800373c:	4629      	mov	r1, r5
 800373e:	f7fc fdcd 	bl	80002dc <__adddf3>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4614      	mov	r4, r2
 8003748:	461d      	mov	r5, r3
 800374a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800374c:	f7fc ff24 	bl	8000598 <__aeabi_f2d>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4620      	mov	r0, r4
 8003756:	4629      	mov	r1, r5
 8003758:	f7fc fdc0 	bl	80002dc <__adddf3>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4614      	mov	r4, r2
 8003762:	461d      	mov	r5, r3
 8003764:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003766:	f7fc ff17 	bl	8000598 <__aeabi_f2d>
 800376a:	f20f 4348 	addw	r3, pc, #1096	@ 0x448
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f7fc ff69 	bl	8000648 <__aeabi_dmul>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4690      	mov	r8, r2
 800377c:	4699      	mov	r9, r3
 800377e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003780:	f7fc ff0a 	bl	8000598 <__aeabi_f2d>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4640      	mov	r0, r8
 800378a:	4649      	mov	r1, r9
 800378c:	f7fc ff5c 	bl	8000648 <__aeabi_dmul>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4690      	mov	r8, r2
 8003796:	4699      	mov	r9, r3
 8003798:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800379a:	f7fc fefd 	bl	8000598 <__aeabi_f2d>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4640      	mov	r0, r8
 80037a4:	4649      	mov	r1, r9
 80037a6:	f7fc ff4f 	bl	8000648 <__aeabi_dmul>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4690      	mov	r8, r2
 80037b0:	4699      	mov	r9, r3
 80037b2:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80037b4:	f7fc fef0 	bl	8000598 <__aeabi_f2d>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4640      	mov	r0, r8
 80037be:	4649      	mov	r1, r9
 80037c0:	f7fc ff42 	bl	8000648 <__aeabi_dmul>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4620      	mov	r0, r4
 80037ca:	4629      	mov	r1, r5
 80037cc:	f7fc fd86 	bl	80002dc <__adddf3>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4614      	mov	r4, r2
 80037d6:	461d      	mov	r5, r3
 80037d8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80037dc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80037e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e4:	ee17 0a90 	vmov	r0, s15
 80037e8:	f7fc fed6 	bl	8000598 <__aeabi_f2d>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4620      	mov	r0, r4
 80037f2:	4629      	mov	r1, r5
 80037f4:	f7fc fd72 	bl	80002dc <__adddf3>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4614      	mov	r4, r2
 80037fe:	461d      	mov	r5, r3
 8003800:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003802:	f7fc fec9 	bl	8000598 <__aeabi_f2d>
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	4bd1      	ldr	r3, [pc, #836]	@ (8003b50 <PARAM_makeSra+0x1318>)
 800380c:	f7fc ff1c 	bl	8000648 <__aeabi_dmul>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4690      	mov	r8, r2
 8003816:	4699      	mov	r9, r3
 8003818:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800381a:	f7fc febd 	bl	8000598 <__aeabi_f2d>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4640      	mov	r0, r8
 8003824:	4649      	mov	r1, r9
 8003826:	f7fc ff0f 	bl	8000648 <__aeabi_dmul>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4690      	mov	r8, r2
 8003830:	4699      	mov	r9, r3
 8003832:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003834:	f7fc feb0 	bl	8000598 <__aeabi_f2d>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4640      	mov	r0, r8
 800383e:	4649      	mov	r1, r9
 8003840:	f7fc ff02 	bl	8000648 <__aeabi_dmul>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4620      	mov	r0, r4
 800384a:	4629      	mov	r1, r5
 800384c:	f7fc fd46 	bl	80002dc <__adddf3>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4610      	mov	r0, r2
 8003856:	4619      	mov	r1, r3
 8003858:	f7fd f9ee 	bl	8000c38 <__aeabi_d2f>
 800385c:	4603      	mov	r3, r0
 800385e:	663b      	str	r3, [r7, #96]	@ 0x60
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;		// Xposition[m]
 8003860:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003862:	f7fc fe99 	bl	8000598 <__aeabi_f2d>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	ec43 2b10 	vmov	d0, r2, r3
 800386e:	f018 fa23 	bl	801bcb8 <sin>
 8003872:	ec53 2b10 	vmov	r2, r3, d0
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	f7fd f9dd 	bl	8000c38 <__aeabi_d2f>
 800387e:	ee07 0a10 	vmov	s14, r0
 8003882:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388a:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8003b54 <PARAM_makeSra+0x131c>
 800388e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003892:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800389a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;		// Yposition[m]
 800389e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80038a0:	f7fc fe7a 	bl	8000598 <__aeabi_f2d>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	ec43 2b10 	vmov	d0, r2, r3
 80038ac:	f018 f9b0 	bl	801bc10 <cos>
 80038b0:	ec53 2b10 	vmov	r2, r3, d0
 80038b4:	4610      	mov	r0, r2
 80038b6:	4619      	mov	r1, r3
 80038b8:	f7fd f9be 	bl	8000c38 <__aeabi_d2f>
 80038bc:	ee07 0a10 	vmov	s14, r0
 80038c0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80038c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c8:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8003b54 <PARAM_makeSra+0x131c>
 80038cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038d0:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80038d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038d8:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	for( i=0; i<(uint16_t)(f_jerkAngleTime*1000); i++ ){				// [msec]
 80038dc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80038e0:	3301      	adds	r3, #1
 80038e2:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80038e6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80038ea:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8003b58 <PARAM_makeSra+0x1320>
 80038ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038f6:	ee17 3a90 	vmov	r3, s15
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8003900:	429a      	cmp	r2, r3
 8003902:	f4ff aee6 	bcc.w	80036d2 <PARAM_makeSra+0xe9a>
	}

	// ---------------------------- 
	//  sla parameter  
	// ---------------------------- 
	p_adr->f_sla_speed				= f_speed;
 8003906:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003908:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800390a:	601a      	str	r2, [r3, #0]
	printf("enter speed %5.2f\n\r",f_speed);
 800390c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800390e:	f7fc fe43 	bl	8000598 <__aeabi_f2d>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4891      	ldr	r0, [pc, #580]	@ (8003b5c <PARAM_makeSra+0x1324>)
 8003918:	f01a fa08 	bl	801dd2c <iprintf>
	p_adr->f_sla_angJerk			= f_jerkAngle;
 800391c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800391e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003920:	605a      	str	r2, [r3, #4]
	printf("f_jerkAngle %5.2f\n\r",f_jerkAngle);
 8003922:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003924:	f7fc fe38 	bl	8000598 <__aeabi_f2d>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	488c      	ldr	r0, [pc, #560]	@ (8003b60 <PARAM_makeSra+0x1328>)
 800392e:	f01a f9fd 	bl	801dd2c <iprintf>
	p_adr->f_sla_angAcc				= f_angAcc;// * RAD_TO_DEG ;
 8003932:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003936:	609a      	str	r2, [r3, #8]
	printf("f_angAcc %5.2f\n\r", f_angAcc);
 8003938:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800393a:	f7fc fe2d 	bl	8000598 <__aeabi_f2d>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4888      	ldr	r0, [pc, #544]	@ (8003b64 <PARAM_makeSra+0x132c>)
 8003944:	f01a f9f2 	bl	801dd2c <iprintf>
	p_adr->f_sla_angvel				= f_maxAngleV;// * RAD_TO_DEG;
 8003948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800394a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800394c:	60da      	str	r2, [r3, #12]
	printf("f_maxAngleV %5.2f\n\r",f_maxAngleV);
 800394e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8003950:	f7fc fe22 	bl	8000598 <__aeabi_f2d>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4883      	ldr	r0, [pc, #524]	@ (8003b68 <PARAM_makeSra+0x1330>)
 800395a:	f01a f9e7 	bl	801dd2c <iprintf>
	p_adr->f_sla_ang_Total			= f_final_ang;// * RAD_TO_DEG;
 800395e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003960:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44
	printf("f_final_ang %5.2f\n\r",f_final_ang);
 8003966:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800396a:	f7fc fe15 	bl	8000598 <__aeabi_f2d>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	487e      	ldr	r0, [pc, #504]	@ (8003b6c <PARAM_makeSra+0x1334>)
 8003974:	f01a f9da 	bl	801dd2c <iprintf>

	p_adr->f_sla_angS_Jerk			= f_jerkAngleSpeed;
 8003978:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800397a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800397c:	621a      	str	r2, [r3, #32]
	printf("f_jerkAngleSpeed %5.2f\n\r",f_jerkAngleSpeed);
 800397e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003980:	f7fc fe0a 	bl	8000598 <__aeabi_f2d>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4879      	ldr	r0, [pc, #484]	@ (8003b70 <PARAM_makeSra+0x1338>)
 800398a:	f01a f9cf 	bl	801dd2c <iprintf>

	printf("time\n\r");
 800398e:	4879      	ldr	r0, [pc, #484]	@ (8003b74 <PARAM_makeSra+0x133c>)
 8003990:	f01a f9cc 	bl	801dd2c <iprintf>
	p_adr->us_sla_jerkAngaccTime	= (uint16_t)( f_jerkAngleTime * 1000.0f );
 8003994:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003998:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8003b58 <PARAM_makeSra+0x1320>
 800399c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039a4:	ee17 3a90 	vmov	r3, s15
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039ac:	831a      	strh	r2, [r3, #24]
	printf("f_jerkAngleTime %7.5f\n\r",(f_jerkAngleTime * 1000.0f));
 80039ae:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80039b2:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8003b58 <PARAM_makeSra+0x1320>
 80039b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039ba:	ee17 0a90 	vmov	r0, s15
 80039be:	f7fc fdeb 	bl	8000598 <__aeabi_f2d>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	486c      	ldr	r0, [pc, #432]	@ (8003b78 <PARAM_makeSra+0x1340>)
 80039c8:	f01a f9b0 	bl	801dd2c <iprintf>
	p_adr->us_sla_accAngvelTime		= (uint16_t)( f_timeAcc * 1000.0f );
 80039cc:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80039d0:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8003b58 <PARAM_makeSra+0x1320>
 80039d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039dc:	ee17 3a90 	vmov	r3, s15
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039e4:	835a      	strh	r2, [r3, #26]
	printf("f_timeAcc %7.5f\n\r",(f_timeAcc * 1000.0f));
 80039e6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80039ea:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8003b58 <PARAM_makeSra+0x1320>
 80039ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039f2:	ee17 0a90 	vmov	r0, s15
 80039f6:	f7fc fdcf 	bl	8000598 <__aeabi_f2d>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	485f      	ldr	r0, [pc, #380]	@ (8003b7c <PARAM_makeSra+0x1344>)
 8003a00:	f01a f994 	bl	801dd2c <iprintf>
	p_adr->us_sla_constAngvelTime	= (uint16_t)( f_timeConst * 1000.0f );
 8003a04:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003a08:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8003b58 <PARAM_makeSra+0x1320>
 8003a0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a14:	ee17 3a90 	vmov	r3, s15
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a1c:	839a      	strh	r2, [r3, #28]
	printf("f_timeConst %7.5f\n\r",(f_timeConst * 1000.0f));
 8003a1e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003a22:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003b58 <PARAM_makeSra+0x1320>
 8003a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a2a:	ee17 0a90 	vmov	r0, s15
 8003a2e:	f7fc fdb3 	bl	8000598 <__aeabi_f2d>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4852      	ldr	r0, [pc, #328]	@ (8003b80 <PARAM_makeSra+0x1348>)
 8003a38:	f01a f978 	bl	801dd2c <iprintf>

	printf("angle\n\r");
 8003a3c:	4851      	ldr	r0, [pc, #324]	@ (8003b84 <PARAM_makeSra+0x134c>)
 8003a3e:	f01a f975 	bl	801dd2c <iprintf>
	p_adr->f_sla_ang_AccAccJerk	= f_jerkAccAccAngle;
 8003a42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a46:	625a      	str	r2, [r3, #36]	@ 0x24
	printf("f_jerkAccAccAngle %5.2f\n\r",f_jerkAccAccAngle);
 8003a48:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003a4a:	f7fc fda5 	bl	8000598 <__aeabi_f2d>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	484d      	ldr	r0, [pc, #308]	@ (8003b88 <PARAM_makeSra+0x1350>)
 8003a54:	f01a f96a 	bl	801dd2c <iprintf>
	p_adr->f_sla_ang_AccConst	= f_accAngle;
 8003a58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a5a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a5c:	629a      	str	r2, [r3, #40]	@ 0x28
	printf("f_accAngle %5.2f\n\r",f_accAngle);
 8003a5e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003a60:	f7fc fd9a 	bl	8000598 <__aeabi_f2d>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4848      	ldr	r0, [pc, #288]	@ (8003b8c <PARAM_makeSra+0x1354>)
 8003a6a:	f01a f95f 	bl	801dd2c <iprintf>
	p_adr->f_sla_ang_AccDecJerk	= f_jerkAccDecAngle;
 8003a6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a72:	62da      	str	r2, [r3, #44]	@ 0x2c
	printf("f_jerkAccDecAngle %5.2f\n\r",f_jerkAccDecAngle);
 8003a74:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003a76:	f7fc fd8f 	bl	8000598 <__aeabi_f2d>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4844      	ldr	r0, [pc, #272]	@ (8003b90 <PARAM_makeSra+0x1358>)
 8003a80:	f01a f954 	bl	801dd2c <iprintf>
	printf("f_constAngle %5.2f\n\r",f_constAngle);
 8003a84:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003a86:	f7fc fd87 	bl	8000598 <__aeabi_f2d>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4841      	ldr	r0, [pc, #260]	@ (8003b94 <PARAM_makeSra+0x135c>)
 8003a90:	f01a f94c 	bl	801dd2c <iprintf>
	p_adr->f_sla_ang_DecDecJerk	= f_jerkDecDecAngle;
 8003a94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a98:	631a      	str	r2, [r3, #48]	@ 0x30
	printf("f_jerkDecDecAngle %5.2f\n\r",f_jerkDecDecAngle);
 8003a9a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003a9c:	f7fc fd7c 	bl	8000598 <__aeabi_f2d>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	483c      	ldr	r0, [pc, #240]	@ (8003b98 <PARAM_makeSra+0x1360>)
 8003aa6:	f01a f941 	bl	801dd2c <iprintf>
	p_adr->f_sla_ang_DecConst	= f_accAngle;
 8003aaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003aae:	635a      	str	r2, [r3, #52]	@ 0x34
	printf("f_accAngle(dec) %5.2f\n\r",f_accAngle);
 8003ab0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003ab2:	f7fc fd71 	bl	8000598 <__aeabi_f2d>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4838      	ldr	r0, [pc, #224]	@ (8003b9c <PARAM_makeSra+0x1364>)
 8003abc:	f01a f936 	bl	801dd2c <iprintf>
	p_adr->f_sla_ang_DecAccJerk	= f_jerkDecAccAngle;
 8003ac0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ac2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ac4:	639a      	str	r2, [r3, #56]	@ 0x38
	printf("f_jerkDecAccAngle %5.2f\n\r",f_jerkDecAccAngle);
 8003ac6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003ac8:	f7fc fd66 	bl	8000598 <__aeabi_f2d>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4833      	ldr	r0, [pc, #204]	@ (8003ba0 <PARAM_makeSra+0x1368>)
 8003ad2:	f01a f92b 	bl	801dd2c <iprintf>

	printf("angleend\n\r");
 8003ad6:	4833      	ldr	r0, [pc, #204]	@ (8003ba4 <PARAM_makeSra+0x136c>)
 8003ad8:	f01a f928 	bl	801dd2c <iprintf>
	printf("f_ang_AccJerkEnd %5.2f\n\r",f_jerkAccAccAngle);
 8003adc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003ade:	f7fc fd5b 	bl	8000598 <__aeabi_f2d>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4830      	ldr	r0, [pc, #192]	@ (8003ba8 <PARAM_makeSra+0x1370>)
 8003ae8:	f01a f920 	bl	801dd2c <iprintf>
	printf("f_ang_AccConstEnd %5.2f\n\r",f_jerkAccAccAngle + f_accAngle);
 8003aec:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003af0:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af8:	ee17 0a90 	vmov	r0, s15
 8003afc:	f7fc fd4c 	bl	8000598 <__aeabi_f2d>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4829      	ldr	r0, [pc, #164]	@ (8003bac <PARAM_makeSra+0x1374>)
 8003b06:	f01a f911 	bl	801dd2c <iprintf>
	p_adr->f_sla_ang_AccEnd	= f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle;
 8003b0a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003b0e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003b12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b16:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b20:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	printf("f_ang_AccEnd %5.2f\n\r",f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle);
 8003b24:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003b28:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b30:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b38:	ee17 0a90 	vmov	r0, s15
 8003b3c:	f7fc fd2c 	bl	8000598 <__aeabi_f2d>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	481a      	ldr	r0, [pc, #104]	@ (8003bb0 <PARAM_makeSra+0x1378>)
 8003b46:	f01a f8f1 	bl	801dd2c <iprintf>
 8003b4a:	e037      	b.n	8003bbc <PARAM_makeSra+0x1384>
 8003b4c:	f3af 8000 	nop.w
 8003b50:	bfe00000 	.word	0xbfe00000
 8003b54:	3a83126f 	.word	0x3a83126f
 8003b58:	447a0000 	.word	0x447a0000
 8003b5c:	08021910 	.word	0x08021910
 8003b60:	08021924 	.word	0x08021924
 8003b64:	08021938 	.word	0x08021938
 8003b68:	0802194c 	.word	0x0802194c
 8003b6c:	08021960 	.word	0x08021960
 8003b70:	08021974 	.word	0x08021974
 8003b74:	08021990 	.word	0x08021990
 8003b78:	08021998 	.word	0x08021998
 8003b7c:	080219b0 	.word	0x080219b0
 8003b80:	080219c4 	.word	0x080219c4
 8003b84:	080219d8 	.word	0x080219d8
 8003b88:	080219e0 	.word	0x080219e0
 8003b8c:	080219fc 	.word	0x080219fc
 8003b90:	08021a10 	.word	0x08021a10
 8003b94:	08021a2c 	.word	0x08021a2c
 8003b98:	08021a44 	.word	0x08021a44
 8003b9c:	08021a60 	.word	0x08021a60
 8003ba0:	08021a78 	.word	0x08021a78
 8003ba4:	08021a94 	.word	0x08021a94
 8003ba8:	08021aa0 	.word	0x08021aa0
 8003bac:	08021abc 	.word	0x08021abc
 8003bb0:	08021ad8 	.word	0x08021ad8
 8003bb4:	55555555 	.word	0x55555555
 8003bb8:	3fc55555 	.word	0x3fc55555
	p_adr->f_sla_ang_ConstEnd = f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle + f_constAngle;
 8003bbc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003bc0:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bc8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bd0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bda:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	printf("f_ang_ConstEnd %5.2f\n\r",f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle + f_constAngle);
 8003bde:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003be2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003be6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bea:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bf2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bfa:	ee17 0a90 	vmov	r0, s15
 8003bfe:	f7fc fccb 	bl	8000598 <__aeabi_f2d>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4873      	ldr	r0, [pc, #460]	@ (8003dd4 <PARAM_makeSra+0x159c>)
 8003c08:	f01a f890 	bl	801dd2c <iprintf>
	printf("f_ang_DecJerkEnd %5.2f\n\r",f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle + f_constAngle + f_jerkDecDecAngle);
 8003c0c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003c10:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003c14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c18:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003c1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c20:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003c24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c28:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c30:	ee17 0a90 	vmov	r0, s15
 8003c34:	f7fc fcb0 	bl	8000598 <__aeabi_f2d>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4866      	ldr	r0, [pc, #408]	@ (8003dd8 <PARAM_makeSra+0x15a0>)
 8003c3e:	f01a f875 	bl	801dd2c <iprintf>
	printf("f_ang_DecConstEnd %5.2f\n\r",f_jerkAccAccAngle + f_accAngle + f_jerkAccDecAngle + f_constAngle + f_jerkDecDecAngle + f_accAngle);
 8003c42:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003c46:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003c4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c4e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003c52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c56:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c5e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003c62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c66:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c6e:	ee17 0a90 	vmov	r0, s15
 8003c72:	f7fc fc91 	bl	8000598 <__aeabi_f2d>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4858      	ldr	r0, [pc, #352]	@ (8003ddc <PARAM_makeSra+0x15a4>)
 8003c7c:	f01a f856 	bl	801dd2c <iprintf>
	printf("total %5.2f\n\r",f_jerkDecDecAngle+f_accAngle+f_jerkDecAccAngle);
 8003c80:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003c84:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c8c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c94:	ee17 0a90 	vmov	r0, s15
 8003c98:	f7fc fc7e 	bl	8000598 <__aeabi_f2d>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	484f      	ldr	r0, [pc, #316]	@ (8003de0 <PARAM_makeSra+0x15a8>)
 8003ca2:	f01a f843 	bl	801dd2c <iprintf>

	
	// calaculate enter and exit length 
	switch(en_mode){
 8003ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d86e      	bhi.n	8003d8c <PARAM_makeSra+0x1554>
 8003cae:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb4 <PARAM_makeSra+0x147c>)
 8003cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb4:	08003cc5 	.word	0x08003cc5
 8003cb8:	08003ceb 	.word	0x08003ceb
 8003cbc:	08003d4f 	.word	0x08003d4f
 8003cc0:	08003d29 	.word	0x08003d29
		case SLA_90:
			p_adr->f_sla_escapeLen = f_final_x - f_x ;
 8003cc4:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8003cc8:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cd2:	edc3 7a05 	vstr	s15, [r3, #20]
			p_adr->f_sla_entryLen  = f_final_y - f_y ;
 8003cd6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003cda:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ce2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ce4:	edc3 7a04 	vstr	s15, [r3, #16]
			break;
 8003ce8:	e051      	b.n	8003d8e <PARAM_makeSra+0x1556>

		case SLA_45:
			p_adr->f_sla_escapeLen = 1.4142f * ( f_final_x - f_x );
 8003cea:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8003cee:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cf6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8003de4 <PARAM_makeSra+0x15ac>
 8003cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d00:	edc3 7a05 	vstr	s15, [r3, #20]
			p_adr->f_sla_entryLen  = f_final_y - f_y - ( f_final_x - f_x );
 8003d04:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003d08:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003d0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d10:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8003d14:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003d18:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d22:	edc3 7a04 	vstr	s15, [r3, #16]
			break;
 8003d26:	e032      	b.n	8003d8e <PARAM_makeSra+0x1556>

		case SLA_N90:
			p_adr->f_sla_escapeLen = f_final_x - f_x;
 8003d28:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8003d2c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003d30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d36:	edc3 7a05 	vstr	s15, [r3, #20]
			p_adr->f_sla_entryLen  = f_final_y - f_y;
 8003d3a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003d3e:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d48:	edc3 7a04 	vstr	s15, [r3, #16]
			break;
 8003d4c:	e01f      	b.n	8003d8e <PARAM_makeSra+0x1556>

		case SLA_135:
			p_adr->f_sla_escapeLen = 1.4142f * ( f_final_x - f_x );
 8003d4e:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8003d52:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d5a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003de4 <PARAM_makeSra+0x15ac>
 8003d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d64:	edc3 7a05 	vstr	s15, [r3, #20]
			p_adr->f_sla_entryLen  = f_final_y - f_y + ( f_final_x - f_x );
 8003d68:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003d6c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003d70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d74:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8003d78:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003d7c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d86:	edc3 7a04 	vstr	s15, [r3, #16]
			break;
 8003d8a:	e000      	b.n	8003d8e <PARAM_makeSra+0x1556>

		default:
			break;
 8003d8c:	bf00      	nop
	}
	printf("entry %6.4f\n\r",f_final_x - f_x);
 8003d8e:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8003d92:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d9a:	ee17 0a90 	vmov	r0, s15
 8003d9e:	f7fc fbfb 	bl	8000598 <__aeabi_f2d>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4810      	ldr	r0, [pc, #64]	@ (8003de8 <PARAM_makeSra+0x15b0>)
 8003da8:	f019 ffc0 	bl	801dd2c <iprintf>
	printf("escape %6.4f\n\r",f_final_y - f_y);
 8003dac:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003db0:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003db8:	ee17 0a90 	vmov	r0, s15
 8003dbc:	f7fc fbec 	bl	8000598 <__aeabi_f2d>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4809      	ldr	r0, [pc, #36]	@ (8003dec <PARAM_makeSra+0x15b4>)
 8003dc6:	f019 ffb1 	bl	801dd2c <iprintf>
}
 8003dca:	bf00      	nop
 8003dcc:	3798      	adds	r7, #152	@ 0x98
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dd4:	08021af0 	.word	0x08021af0
 8003dd8:	08021b08 	.word	0x08021b08
 8003ddc:	08021b24 	.word	0x08021b24
 8003de0:	08021b40 	.word	0x08021b40
 8003de4:	3fb50481 	.word	0x3fb50481
 8003de8:	08021b50 	.word	0x08021b50
 8003dec:	08021b60 	.word	0x08021b60

08003df0 <PARAM_getSra>:

stSLA* PARAM_getSra( enSLA_TYPE en_mode )
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	71fb      	strb	r3, [r7, #7]
	return &st_Sla[en_mode];
 8003dfa:	79fa      	ldrb	r2, [r7, #7]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4a03      	ldr	r2, [pc, #12]	@ (8003e14 <PARAM_getSra+0x24>)
 8003e06:	4413      	add	r3, r2
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	20000218 	.word	0x20000218

08003e18 <InitQueue>:
	}
	printf("\n");
}

//キューの初期化
void InitQueue(queue_t* pQueue) {
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
	int i;
	//キューの中身を0埋め
	for (i = 0; i <= SIZE - 1; i++) {
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	e013      	b.n	8003e4e <InitQueue+0x36>
		pQueue->data[i].x =  0 ;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
		pQueue->data[i].y =  0 ;
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	2200      	movs	r2, #0
 8003e3a:	705a      	strb	r2, [r3, #1]
		pQueue->data[i].step =  0 ;
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	2200      	movs	r2, #0
 8003e46:	805a      	strh	r2, [r3, #2]
	for (i = 0; i <= SIZE - 1; i++) {
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e52:	dde8      	ble.n	8003e26 <InitQueue+0xe>
	}
	//初期化
	pQueue->head = 0;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	pQueue->tail = 0;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	pQueue->flag = EMPTY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
//	PrintQueue(pQueue);
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <EnQueue>:


//enqueue関数
void EnQueue(queue_t* pQueue, stPOSITION value) {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
//	Printf("enQ(%d)\n", value);
	//キューがFullの処理
	if (pQueue->flag == FULL) {
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d103      	bne.n	8003e94 <EnQueue+0x1c>
		printf("Full\n");
 8003e8c:	4817      	ldr	r0, [pc, #92]	@ (8003eec <EnQueue+0x74>)
 8003e8e:	f019 ffbd 	bl	801de0c <puts>
		return;
 8003e92:	e028      	b.n	8003ee6 <EnQueue+0x6e>
	}
	//キューがFullでないので、enqueue操作
	pQueue->data[pQueue->tail] = value;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6839      	ldr	r1, [r7, #0]
 8003e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	//リングバッファのため、tailが配列の終端だったら0にする
	if (pQueue->tail == SIZE - 1) {
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003ea8:	2b3f      	cmp	r3, #63	@ 0x3f
 8003eaa:	d104      	bne.n	8003eb6 <EnQueue+0x3e>
		pQueue->tail = 0;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 8003eb4:	e006      	b.n	8003ec4 <EnQueue+0x4c>
		//終端でなければ、tailをインクリメント
	}
	else {
		pQueue->tail++;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	}
	//フラグの更新
	if (pQueue->tail == pQueue->head) {
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d104      	bne.n	8003ede <EnQueue+0x66>
		pQueue->flag = FULL;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8003edc:	e003      	b.n	8003ee6 <EnQueue+0x6e>
	}
	else {
		pQueue->flag = AVAILABLE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	}
//	PrintQueue(pQueue);
}
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	08021b74 	.word	0x08021b74

08003ef0 <DeQueue>:

//dequeue関数
stPOSITION DeQueue(queue_t* pQueue) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
//	printf("deQ\n");
	stPOSITION dequeue;
	//キューがEmptyの処理
	if (pQueue->flag == EMPTY) {
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10b      	bne.n	8003f1a <DeQueue+0x2a>
		printf("Empty\n");
 8003f02:	482c      	ldr	r0, [pc, #176]	@ (8003fb4 <DeQueue+0xc4>)
 8003f04:	f019 ff82 	bl	801de0c <puts>
		dequeue.x = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	723b      	strb	r3, [r7, #8]
		dequeue.y = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	727b      	strb	r3, [r7, #9]
		dequeue.step = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	817b      	strh	r3, [r7, #10]
		return  dequeue ;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e041      	b.n	8003f9e <DeQueue+0xae>
	}
	dequeue = pQueue->data[pQueue->head];
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f26:	60bb      	str	r3, [r7, #8]
	//キューがEmptyでなければ、dequeue操作
	pQueue->data[pQueue->head].x =  0 ;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2100      	movs	r1, #0
 8003f32:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	pQueue->data[pQueue->head].y =  0 ;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	2200      	movs	r2, #0
 8003f44:	705a      	strb	r2, [r3, #1]
	pQueue->data[pQueue->head].step =  0 ;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	2200      	movs	r2, #0
 8003f54:	805a      	strh	r2, [r3, #2]
	//リングバッファのため、headが配列の終端だったら0にする
	if (pQueue->head == SIZE - 1) {
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f5e:	d104      	bne.n	8003f6a <DeQueue+0x7a>
		pQueue->head = 0;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003f68:	e006      	b.n	8003f78 <DeQueue+0x88>
		//終端でなければ、headをインクリメント
	}
	else {
		pQueue->head++;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	}
	//フラグの更新
	if (pQueue->tail == pQueue->head) {
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d104      	bne.n	8003f92 <DeQueue+0xa2>
		pQueue->flag = EMPTY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8003f90:	e003      	b.n	8003f9a <DeQueue+0xaa>
	}
	else {
		pQueue->flag = AVAILABLE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	}
//	PrintQueue(pQueue);

	return dequeue;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	60fb      	str	r3, [r7, #12]
}
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	89ba      	ldrh	r2, [r7, #12]
 8003fa2:	f362 030f 	bfi	r3, r2, #0, #16
 8003fa6:	89fa      	ldrh	r2, [r7, #14]
 8003fa8:	f362 431f 	bfi	r3, r2, #16, #16
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	08021b7c 	.word	0x08021b7c

08003fb8 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ff8 <LL_DMA_EnableChannel+0x40>)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	4413      	add	r3, r2
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4908      	ldr	r1, [pc, #32]	@ (8003ff8 <LL_DMA_EnableChannel+0x40>)
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	440a      	add	r2, r1
 8003fdc:	7812      	ldrb	r2, [r2, #0]
 8003fde:	4611      	mov	r1, r2
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	6013      	str	r3, [r2, #0]
}
 8003fea:	bf00      	nop
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	08022274 	.word	0x08022274

08003ffc <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800400a:	4a0c      	ldr	r2, [pc, #48]	@ (800403c <LL_DMA_DisableChannel+0x40>)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	4413      	add	r3, r2
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4908      	ldr	r1, [pc, #32]	@ (800403c <LL_DMA_DisableChannel+0x40>)
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	440a      	add	r2, r1
 8004020:	7812      	ldrb	r2, [r2, #0]
 8004022:	4611      	mov	r1, r2
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	440a      	add	r2, r1
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	6013      	str	r3, [r2, #0]
}
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	08022274 	.word	0x08022274

08004040 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004050:	4a0e      	ldr	r2, [pc, #56]	@ (800408c <LL_DMA_SetDataTransferDirection+0x4c>)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4413      	add	r3, r2
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	4413      	add	r3, r2
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004064:	f023 0310 	bic.w	r3, r3, #16
 8004068:	4908      	ldr	r1, [pc, #32]	@ (800408c <LL_DMA_SetDataTransferDirection+0x4c>)
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	440a      	add	r2, r1
 800406e:	7812      	ldrb	r2, [r2, #0]
 8004070:	4611      	mov	r1, r2
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	440a      	add	r2, r1
 8004076:	4611      	mov	r1, r2
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	08022274 	.word	0x08022274

08004090 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 80040a0:	4a0d      	ldr	r2, [pc, #52]	@ (80040d8 <LL_DMA_SetMode+0x48>)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4413      	add	r3, r2
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	4413      	add	r3, r2
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f023 0220 	bic.w	r2, r3, #32
 80040b4:	4908      	ldr	r1, [pc, #32]	@ (80040d8 <LL_DMA_SetMode+0x48>)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	440b      	add	r3, r1
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	4619      	mov	r1, r3
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	440b      	add	r3, r1
 80040c2:	4619      	mov	r1, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]
             Mode);
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	08022274 	.word	0x08022274

080040dc <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 80040ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004124 <LL_DMA_SetPeriphIncMode+0x48>)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4413      	add	r3, r2
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	4413      	add	r3, r2
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004100:	4908      	ldr	r1, [pc, #32]	@ (8004124 <LL_DMA_SetPeriphIncMode+0x48>)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	440b      	add	r3, r1
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	4619      	mov	r1, r3
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	440b      	add	r3, r1
 800410e:	4619      	mov	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8004116:	bf00      	nop
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	08022274 	.word	0x08022274

08004128 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8004138:	4a0d      	ldr	r2, [pc, #52]	@ (8004170 <LL_DMA_SetMemoryIncMode+0x48>)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4413      	add	r3, r2
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	4413      	add	r3, r2
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800414c:	4908      	ldr	r1, [pc, #32]	@ (8004170 <LL_DMA_SetMemoryIncMode+0x48>)
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	440b      	add	r3, r1
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	4619      	mov	r1, r3
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	440b      	add	r3, r1
 800415a:	4619      	mov	r1, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	08022274 	.word	0x08022274

08004174 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8004184:	4a0d      	ldr	r2, [pc, #52]	@ (80041bc <LL_DMA_SetPeriphSize+0x48>)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	4413      	add	r3, r2
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	4413      	add	r3, r2
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004198:	4908      	ldr	r1, [pc, #32]	@ (80041bc <LL_DMA_SetPeriphSize+0x48>)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	440b      	add	r3, r1
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	4619      	mov	r1, r3
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	440b      	add	r3, r1
 80041a6:	4619      	mov	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	08022274 	.word	0x08022274

080041c0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 80041d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004208 <LL_DMA_SetMemorySize+0x48>)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	4413      	add	r3, r2
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	4413      	add	r3, r2
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041e4:	4908      	ldr	r1, [pc, #32]	@ (8004208 <LL_DMA_SetMemorySize+0x48>)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	440b      	add	r3, r1
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	4619      	mov	r1, r3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	440b      	add	r3, r1
 80041f2:	4619      	mov	r1, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	08022274 	.word	0x08022274

0800420c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 800421c:	4a0d      	ldr	r2, [pc, #52]	@ (8004254 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4413      	add	r3, r2
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	4413      	add	r3, r2
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004230:	4908      	ldr	r1, [pc, #32]	@ (8004254 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	440b      	add	r3, r1
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	4619      	mov	r1, r3
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	440b      	add	r3, r1
 800423e:	4619      	mov	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4313      	orrs	r3, r2
 8004244:	600b      	str	r3, [r1, #0]
             Priority);
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	08022274 	.word	0x08022274

08004258 <LL_DMA_SetDataLength>:
  *         (*) Not on all G4 devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8004268:	4a0d      	ldr	r2, [pc, #52]	@ (80042a0 <LL_DMA_SetDataLength+0x48>)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4413      	add	r3, r2
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	4413      	add	r3, r2
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	0c1b      	lsrs	r3, r3, #16
 800427a:	041b      	lsls	r3, r3, #16
 800427c:	4908      	ldr	r1, [pc, #32]	@ (80042a0 <LL_DMA_SetDataLength+0x48>)
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	440a      	add	r2, r1
 8004282:	7812      	ldrb	r2, [r2, #0]
 8004284:	4611      	mov	r1, r2
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	440a      	add	r2, r1
 800428a:	4611      	mov	r1, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	4313      	orrs	r3, r2
 8004290:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	08022274 	.word	0x08022274

080042a4 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	617b      	str	r3, [r7, #20]

  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	2b10      	cmp	r3, #16
 80042ba:	d114      	bne.n	80042e6 <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, SrcAddress);
 80042bc:	4a17      	ldr	r2, [pc, #92]	@ (800431c <LL_DMA_ConfigAddresses+0x78>)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	4413      	add	r3, r2
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	4413      	add	r3, r2
 80042ca:	461a      	mov	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, DstAddress);
 80042d0:	4a12      	ldr	r2, [pc, #72]	@ (800431c <LL_DMA_ConfigAddresses+0x78>)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4413      	add	r3, r2
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	4413      	add	r3, r2
 80042de:	461a      	mov	r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
  }
}
 80042e4:	e013      	b.n	800430e <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
 80042e6:	4a0d      	ldr	r2, [pc, #52]	@ (800431c <LL_DMA_ConfigAddresses+0x78>)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4413      	add	r3, r2
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	4413      	add	r3, r2
 80042f4:	461a      	mov	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
 80042fa:	4a08      	ldr	r2, [pc, #32]	@ (800431c <LL_DMA_ConfigAddresses+0x78>)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4413      	add	r3, r2
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	4413      	add	r3, r2
 8004308:	461a      	mov	r2, r3
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	60d3      	str	r3, [r2, #12]
}
 800430e:	bf00      	nop
 8004310:	371c      	adds	r7, #28
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	08022274 	.word	0x08022274

08004320 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	0a9b      	lsrs	r3, r3, #10
 8004330:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8004334:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004348:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800435e:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	430a      	orrs	r2, r1
 8004366:	601a      	str	r2, [r3, #0]
}
 8004368:	bf00      	nop
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8004382:	4a0c      	ldr	r2, [pc, #48]	@ (80043b4 <LL_DMA_EnableIT_TC+0x40>)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	4413      	add	r3, r2
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4413      	add	r3, r2
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4908      	ldr	r1, [pc, #32]	@ (80043b4 <LL_DMA_EnableIT_TC+0x40>)
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	440a      	add	r2, r1
 8004398:	7812      	ldrb	r2, [r2, #0]
 800439a:	4611      	mov	r1, r2
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	440a      	add	r2, r1
 80043a0:	f043 0302 	orr.w	r3, r3, #2
 80043a4:	6013      	str	r3, [r2, #0]
}
 80043a6:	bf00      	nop
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	08022274 	.word	0x08022274

080043b8 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TEIE);
 80043c6:	4a0c      	ldr	r2, [pc, #48]	@ (80043f8 <LL_DMA_EnableIT_TE+0x40>)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	4413      	add	r3, r2
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4908      	ldr	r1, [pc, #32]	@ (80043f8 <LL_DMA_EnableIT_TE+0x40>)
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	440a      	add	r2, r1
 80043dc:	7812      	ldrb	r2, [r2, #0]
 80043de:	4611      	mov	r1, r2
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	440a      	add	r2, r1
 80043e4:	f043 0308 	orr.w	r3, r3, #8
 80043e8:	6013      	str	r3, [r2, #0]
}
 80043ea:	bf00      	nop
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	08022274 	.word	0x08022274

080043fc <LL_AHB2_GRP1_EnableClock>:
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004404:	4b08      	ldr	r3, [pc, #32]	@ (8004428 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004408:	4907      	ldr	r1, [pc, #28]	@ (8004428 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4313      	orrs	r3, r2
 800440e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004410:	4b05      	ldr	r3, [pc, #20]	@ (8004428 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004412:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4013      	ands	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800441a:	68fb      	ldr	r3, [r7, #12]
}
 800441c:	bf00      	nop
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	40021000 	.word	0x40021000

0800442c <LL_APB1_GRP1_EnableClock>:
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004434:	4b08      	ldr	r3, [pc, #32]	@ (8004458 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004436:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004438:	4907      	ldr	r1, [pc, #28]	@ (8004458 <LL_APB1_GRP1_EnableClock+0x2c>)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4313      	orrs	r3, r2
 800443e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004440:	4b05      	ldr	r3, [pc, #20]	@ (8004458 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004442:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4013      	ands	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800444a:	68fb      	ldr	r3, [r7, #12]
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	40021000 	.word	0x40021000

0800445c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	601a      	str	r2, [r3, #0]
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448c:	2b40      	cmp	r3, #64	@ 0x40
 800448e:	d101      	bne.n	8004494 <LL_SPI_IsEnabled+0x18>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <LL_SPI_IsEnabled+0x1a>
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f023 0210 	bic.w	r2, r3, #16
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	605a      	str	r2, [r3, #4]
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <LL_SPI_SetRxFIFOThreshold>:
  *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
  *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	605a      	str	r2, [r3, #4]
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f023 0208 	bic.w	r2, r3, #8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	605a      	str	r2, [r3, #4]
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <LL_SPI_EnableDMAReq_RX>:
  * @rmtoll CR2          RXDMAEN       LL_SPI_EnableDMAReq_RX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_RX(SPI_TypeDef *SPIx)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f043 0201 	orr.w	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	605a      	str	r2, [r3, #4]
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <LL_SPI_EnableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_EnableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f043 0202 	orr.w	r2, r3, #2
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	605a      	str	r2, [r3, #4]
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	330c      	adds	r3, #12
}
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	330c      	adds	r3, #12
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	b2db      	uxtb	r3, r3
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <LL_GPIO_SetOutputPin>:
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	619a      	str	r2, [r3, #24]
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <LL_GPIO_ResetOutputPin>:
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b090      	sub	sp, #64	@ 0x40
 80045e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80045e6:	f107 0318 	add.w	r3, r7, #24
 80045ea:	2228      	movs	r2, #40	@ 0x28
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f019 fdc8 	bl	801e184 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f4:	463b      	mov	r3, r7
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	605a      	str	r2, [r3, #4]
 80045fc:	609a      	str	r2, [r3, #8]
 80045fe:	60da      	str	r2, [r3, #12]
 8004600:	611a      	str	r2, [r3, #16]
 8004602:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8004604:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004608:	f7ff ff10 	bl	800442c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800460c:	2002      	movs	r0, #2
 800460e:	f7ff fef5 	bl	80043fc <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8004612:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004616:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004618:	2302      	movs	r3, #2
 800461a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800461c:	2300      	movs	r3, #0
 800461e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004624:	2300      	movs	r3, #0
 8004626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004628:	2305      	movs	r3, #5
 800462a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800462c:	463b      	mov	r3, r7
 800462e:	4619      	mov	r1, r3
 8004630:	484f      	ldr	r0, [pc, #316]	@ (8004770 <MX_SPI2_Init+0x190>)
 8004632:	f016 f888 	bl	801a746 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8004636:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800463a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800463c:	2302      	movs	r3, #2
 800463e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004640:	2300      	movs	r3, #0
 8004642:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800464c:	2305      	movs	r3, #5
 800464e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004650:	463b      	mov	r3, r7
 8004652:	4619      	mov	r1, r3
 8004654:	4846      	ldr	r0, [pc, #280]	@ (8004770 <MX_SPI2_Init+0x190>)
 8004656:	f016 f876 	bl	801a746 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800465a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800465e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004660:	2302      	movs	r3, #2
 8004662:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004664:	2300      	movs	r3, #0
 8004666:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800466c:	2300      	movs	r3, #0
 800466e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004670:	2305      	movs	r3, #5
 8004672:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004674:	463b      	mov	r3, r7
 8004676:	4619      	mov	r1, r3
 8004678:	483d      	ldr	r0, [pc, #244]	@ (8004770 <MX_SPI2_Init+0x190>)
 800467a:	f016 f864 	bl	801a746 <LL_GPIO_Init>

  /* SPI2 DMA Init */

  /* SPI2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_SPI2_RX);
 800467e:	220c      	movs	r2, #12
 8004680:	2102      	movs	r1, #2
 8004682:	483c      	ldr	r0, [pc, #240]	@ (8004774 <MX_SPI2_Init+0x194>)
 8004684:	f7ff fe4c 	bl	8004320 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8004688:	2200      	movs	r2, #0
 800468a:	2102      	movs	r1, #2
 800468c:	4839      	ldr	r0, [pc, #228]	@ (8004774 <MX_SPI2_Init+0x194>)
 800468e:	f7ff fcd7 	bl	8004040 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8004692:	2200      	movs	r2, #0
 8004694:	2102      	movs	r1, #2
 8004696:	4837      	ldr	r0, [pc, #220]	@ (8004774 <MX_SPI2_Init+0x194>)
 8004698:	f7ff fdb8 	bl	800420c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 800469c:	2200      	movs	r2, #0
 800469e:	2102      	movs	r1, #2
 80046a0:	4834      	ldr	r0, [pc, #208]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046a2:	f7ff fcf5 	bl	8004090 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 80046a6:	2200      	movs	r2, #0
 80046a8:	2102      	movs	r1, #2
 80046aa:	4832      	ldr	r0, [pc, #200]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046ac:	f7ff fd16 	bl	80040dc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 80046b0:	2280      	movs	r2, #128	@ 0x80
 80046b2:	2102      	movs	r1, #2
 80046b4:	482f      	ldr	r0, [pc, #188]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046b6:	f7ff fd37 	bl	8004128 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 80046ba:	2200      	movs	r2, #0
 80046bc:	2102      	movs	r1, #2
 80046be:	482d      	ldr	r0, [pc, #180]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046c0:	f7ff fd58 	bl	8004174 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 80046c4:	2200      	movs	r2, #0
 80046c6:	2102      	movs	r1, #2
 80046c8:	482a      	ldr	r0, [pc, #168]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046ca:	f7ff fd79 	bl	80041c0 <LL_DMA_SetMemorySize>

  /* SPI2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMAMUX_REQ_SPI2_TX);
 80046ce:	220d      	movs	r2, #13
 80046d0:	2103      	movs	r1, #3
 80046d2:	4828      	ldr	r0, [pc, #160]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046d4:	f7ff fe24 	bl	8004320 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80046d8:	2210      	movs	r2, #16
 80046da:	2103      	movs	r1, #3
 80046dc:	4825      	ldr	r0, [pc, #148]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046de:	f7ff fcaf 	bl	8004040 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 80046e2:	2200      	movs	r2, #0
 80046e4:	2103      	movs	r1, #3
 80046e6:	4823      	ldr	r0, [pc, #140]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046e8:	f7ff fd90 	bl	800420c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 80046ec:	2200      	movs	r2, #0
 80046ee:	2103      	movs	r1, #3
 80046f0:	4820      	ldr	r0, [pc, #128]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046f2:	f7ff fccd 	bl	8004090 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 80046f6:	2200      	movs	r2, #0
 80046f8:	2103      	movs	r1, #3
 80046fa:	481e      	ldr	r0, [pc, #120]	@ (8004774 <MX_SPI2_Init+0x194>)
 80046fc:	f7ff fcee 	bl	80040dc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 8004700:	2280      	movs	r2, #128	@ 0x80
 8004702:	2103      	movs	r1, #3
 8004704:	481b      	ldr	r0, [pc, #108]	@ (8004774 <MX_SPI2_Init+0x194>)
 8004706:	f7ff fd0f 	bl	8004128 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 800470a:	2200      	movs	r2, #0
 800470c:	2103      	movs	r1, #3
 800470e:	4819      	ldr	r0, [pc, #100]	@ (8004774 <MX_SPI2_Init+0x194>)
 8004710:	f7ff fd30 	bl	8004174 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 8004714:	2200      	movs	r2, #0
 8004716:	2103      	movs	r1, #3
 8004718:	4816      	ldr	r0, [pc, #88]	@ (8004774 <MX_SPI2_Init+0x194>)
 800471a:	f7ff fd51 	bl	80041c0 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800471e:	2300      	movs	r3, #0
 8004720:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004722:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8004726:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004728:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800472c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800472e:	2302      	movs	r3, #2
 8004730:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004732:	2301      	movs	r3, #1
 8004734:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004736:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800473a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 800473c:	2320      	movs	r3, #32
 800473e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004740:	2300      	movs	r3, #0
 8004742:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004744:	2300      	movs	r3, #0
 8004746:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8004748:	2307      	movs	r3, #7
 800474a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800474c:	f107 0318 	add.w	r3, r7, #24
 8004750:	4619      	mov	r1, r3
 8004752:	4809      	ldr	r0, [pc, #36]	@ (8004778 <MX_SPI2_Init+0x198>)
 8004754:	f016 fb44 	bl	801ade0 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8004758:	2100      	movs	r1, #0
 800475a:	4807      	ldr	r0, [pc, #28]	@ (8004778 <MX_SPI2_Init+0x198>)
 800475c:	f7ff fea1 	bl	80044a2 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8004760:	4805      	ldr	r0, [pc, #20]	@ (8004778 <MX_SPI2_Init+0x198>)
 8004762:	f7ff fec4 	bl	80044ee <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004766:	bf00      	nop
 8004768:	3740      	adds	r7, #64	@ 0x40
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	48000400 	.word	0x48000400
 8004774:	40020000 	.word	0x40020000
 8004778:	40003800 	.word	0x40003800

0800477c <DMA1_Channel3_Init>:
/* USER CODE BEGIN 1 */
//uint8_t rx_flag = 0;
//uint8_t tx_flag = 0;

void DMA1_Channel3_Init(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_3);
 8004780:	2102      	movs	r1, #2
 8004782:	4806      	ldr	r0, [pc, #24]	@ (800479c <DMA1_Channel3_Init+0x20>)
 8004784:	f7ff fdf6 	bl	8004374 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1,LL_DMA_CHANNEL_3);
 8004788:	2102      	movs	r1, #2
 800478a:	4804      	ldr	r0, [pc, #16]	@ (800479c <DMA1_Channel3_Init+0x20>)
 800478c:	f7ff fe14 	bl	80043b8 <LL_DMA_EnableIT_TE>
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_3);
 8004790:	2102      	movs	r1, #2
 8004792:	4802      	ldr	r0, [pc, #8]	@ (800479c <DMA1_Channel3_Init+0x20>)
 8004794:	f7ff fc32 	bl	8003ffc <LL_DMA_DisableChannel>
}
 8004798:	bf00      	nop
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40020000 	.word	0x40020000

080047a0 <DMA1_Channel4_Init>:

void DMA1_Channel4_Init(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_4);
 80047a4:	2103      	movs	r1, #3
 80047a6:	4806      	ldr	r0, [pc, #24]	@ (80047c0 <DMA1_Channel4_Init+0x20>)
 80047a8:	f7ff fde4 	bl	8004374 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1,LL_DMA_CHANNEL_4);
 80047ac:	2103      	movs	r1, #3
 80047ae:	4804      	ldr	r0, [pc, #16]	@ (80047c0 <DMA1_Channel4_Init+0x20>)
 80047b0:	f7ff fe02 	bl	80043b8 <LL_DMA_EnableIT_TE>
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_4);
 80047b4:	2103      	movs	r1, #3
 80047b6:	4802      	ldr	r0, [pc, #8]	@ (80047c0 <DMA1_Channel4_Init+0x20>)
 80047b8:	f7ff fc20 	bl	8003ffc <LL_DMA_DisableChannel>
}
 80047bc:	bf00      	nop
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40020000 	.word	0x40020000

080047c4 <SPI2_Start>:

uint8_t SPI2ReciveData[SPI2_DATA_BUFFR_SIZE];
uint8_t SPI2TransmitData[SPI2_DATA_BUFFR_SIZE];

void SPI2_Start(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
	LL_SPI_SetRxFIFOThreshold(SPI2, LL_SPI_RX_FIFO_TH_QUARTER);
 80047c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80047cc:	4808      	ldr	r0, [pc, #32]	@ (80047f0 <SPI2_Start+0x2c>)
 80047ce:	f7ff fe7b 	bl	80044c8 <LL_SPI_SetRxFIFOThreshold>
	DMA1_Channel3_Init();
 80047d2:	f7ff ffd3 	bl	800477c <DMA1_Channel3_Init>
	DMA1_Channel4_Init();
 80047d6:	f7ff ffe3 	bl	80047a0 <DMA1_Channel4_Init>
	LL_SPI_EnableDMAReq_RX(SPI2);
 80047da:	4805      	ldr	r0, [pc, #20]	@ (80047f0 <SPI2_Start+0x2c>)
 80047dc:	f7ff feaa 	bl	8004534 <LL_SPI_EnableDMAReq_RX>
	LL_SPI_EnableDMAReq_TX(SPI2);
 80047e0:	4803      	ldr	r0, [pc, #12]	@ (80047f0 <SPI2_Start+0x2c>)
 80047e2:	f7ff feb7 	bl	8004554 <LL_SPI_EnableDMAReq_TX>

	LL_SPI_Enable(SPI2);
 80047e6:	4802      	ldr	r0, [pc, #8]	@ (80047f0 <SPI2_Start+0x2c>)
 80047e8:	f7ff fe38 	bl	800445c <LL_SPI_Enable>
}
 80047ec:	bf00      	nop
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40003800 	.word	0x40003800

080047f4 <SPI2_DMA_Communication>:

void SPI2_DMA_Communication(uint8_t length)
{
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	4603      	mov	r3, r0
 80047fc:	71fb      	strb	r3, [r7, #7]
  LL_GPIO_ResetOutputPin(CS_gyro_GPIO_Port, CS_gyro_Pin);
 80047fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004802:	4822      	ldr	r0, [pc, #136]	@ (800488c <SPI2_DMA_Communication+0x98>)
 8004804:	f7ff fede 	bl	80045c4 <LL_GPIO_ResetOutputPin>

	if( LL_SPI_IsActiveFlag_RXNE(SPI2) == SET)LL_SPI_ReceiveData8(SPI2);
 8004808:	4821      	ldr	r0, [pc, #132]	@ (8004890 <SPI2_DMA_Communication+0x9c>)
 800480a:	f7ff fe80 	bl	800450e <LL_SPI_IsActiveFlag_RXNE>
 800480e:	4603      	mov	r3, r0
 8004810:	2b01      	cmp	r3, #1
 8004812:	d102      	bne.n	800481a <SPI2_DMA_Communication+0x26>
 8004814:	481e      	ldr	r0, [pc, #120]	@ (8004890 <SPI2_DMA_Communication+0x9c>)
 8004816:	f7ff feb9 	bl	800458c <LL_SPI_ReceiveData8>
	if( LL_SPI_IsEnabled(SPI2) == RESET) LL_SPI_Enable(SPI2);
 800481a:	481d      	ldr	r0, [pc, #116]	@ (8004890 <SPI2_DMA_Communication+0x9c>)
 800481c:	f7ff fe2e 	bl	800447c <LL_SPI_IsEnabled>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d102      	bne.n	800482c <SPI2_DMA_Communication+0x38>
 8004826:	481a      	ldr	r0, [pc, #104]	@ (8004890 <SPI2_DMA_Communication+0x9c>)
 8004828:	f7ff fe18 	bl	800445c <LL_SPI_Enable>

	LL_DMA_ConfigAddresses(DMA1,LL_DMA_CHANNEL_4,(uint32_t)SPI2TransmitData,
 800482c:	4c19      	ldr	r4, [pc, #100]	@ (8004894 <SPI2_DMA_Communication+0xa0>)
 800482e:	4818      	ldr	r0, [pc, #96]	@ (8004890 <SPI2_DMA_Communication+0x9c>)
 8004830:	f7ff fea0 	bl	8004574 <LL_SPI_DMA_GetRegAddr>
 8004834:	4603      	mov	r3, r0
 8004836:	2210      	movs	r2, #16
 8004838:	9200      	str	r2, [sp, #0]
 800483a:	4622      	mov	r2, r4
 800483c:	2103      	movs	r1, #3
 800483e:	4816      	ldr	r0, [pc, #88]	@ (8004898 <SPI2_DMA_Communication+0xa4>)
 8004840:	f7ff fd30 	bl	80042a4 <LL_DMA_ConfigAddresses>
							LL_SPI_DMA_GetRegAddr(SPI2),LL_DMA_DIRECTION_MEMORY_TO_PERIPH);

	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_4,length);
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	461a      	mov	r2, r3
 8004848:	2103      	movs	r1, #3
 800484a:	4813      	ldr	r0, [pc, #76]	@ (8004898 <SPI2_DMA_Communication+0xa4>)
 800484c:	f7ff fd04 	bl	8004258 <LL_DMA_SetDataLength>

	LL_DMA_ConfigAddresses(DMA1,LL_DMA_CHANNEL_3,LL_SPI_DMA_GetRegAddr(SPI2),
 8004850:	480f      	ldr	r0, [pc, #60]	@ (8004890 <SPI2_DMA_Communication+0x9c>)
 8004852:	f7ff fe8f 	bl	8004574 <LL_SPI_DMA_GetRegAddr>
 8004856:	4602      	mov	r2, r0
 8004858:	4910      	ldr	r1, [pc, #64]	@ (800489c <SPI2_DMA_Communication+0xa8>)
 800485a:	2300      	movs	r3, #0
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	460b      	mov	r3, r1
 8004860:	2102      	movs	r1, #2
 8004862:	480d      	ldr	r0, [pc, #52]	@ (8004898 <SPI2_DMA_Communication+0xa4>)
 8004864:	f7ff fd1e 	bl	80042a4 <LL_DMA_ConfigAddresses>
							(uint32_t)SPI2ReciveData,LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_3,length);
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	461a      	mov	r2, r3
 800486c:	2102      	movs	r1, #2
 800486e:	480a      	ldr	r0, [pc, #40]	@ (8004898 <SPI2_DMA_Communication+0xa4>)
 8004870:	f7ff fcf2 	bl	8004258 <LL_DMA_SetDataLength>

	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_4);
 8004874:	2103      	movs	r1, #3
 8004876:	4808      	ldr	r0, [pc, #32]	@ (8004898 <SPI2_DMA_Communication+0xa4>)
 8004878:	f7ff fb9e 	bl	8003fb8 <LL_DMA_EnableChannel>
	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_3);
 800487c:	2102      	movs	r1, #2
 800487e:	4806      	ldr	r0, [pc, #24]	@ (8004898 <SPI2_DMA_Communication+0xa4>)
 8004880:	f7ff fb9a 	bl	8003fb8 <LL_DMA_EnableChannel>
	while(rx_flag != 1);
	rx_flag = 0;
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);
	LL_GPIO_SetOutputPin(GPIOx,CS_Pin);
*/
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	bd90      	pop	{r4, r7, pc}
 800488c:	48000400 	.word	0x48000400
 8004890:	40003800 	.word	0x40003800
 8004894:	2000033c 	.word	0x2000033c
 8004898:	40020000 	.word	0x40020000
 800489c:	20000338 	.word	0x20000338

080048a0 <SPI2_DMA1_ReceiveComplete_Callback>:

void SPI2_DMA1_ReceiveComplete_Callback(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_3);
 80048a4:	2102      	movs	r1, #2
 80048a6:	4805      	ldr	r0, [pc, #20]	@ (80048bc <SPI2_DMA1_ReceiveComplete_Callback+0x1c>)
 80048a8:	f7ff fba8 	bl	8003ffc <LL_DMA_DisableChannel>
	LL_GPIO_SetOutputPin(CS_gyro_GPIO_Port, CS_gyro_Pin);
 80048ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80048b0:	4803      	ldr	r0, [pc, #12]	@ (80048c0 <SPI2_DMA1_ReceiveComplete_Callback+0x20>)
 80048b2:	f7ff fe79 	bl	80045a8 <LL_GPIO_SetOutputPin>
//	rx_flag = 1;
}
 80048b6:	bf00      	nop
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40020000 	.word	0x40020000
 80048c0:	48000400 	.word	0x48000400

080048c4 <SPI2_DMA1_TransmitComplete_Callback>:

void SPI2_DMA1_TransmitComplete_Callback(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_4);
 80048c8:	2103      	movs	r1, #3
 80048ca:	4802      	ldr	r0, [pc, #8]	@ (80048d4 <SPI2_DMA1_TransmitComplete_Callback+0x10>)
 80048cc:	f7ff fb96 	bl	8003ffc <LL_DMA_DisableChannel>
//	tx_flag = 1;
}
 80048d0:	bf00      	nop
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40020000 	.word	0x40020000

080048d8 <Get_SPI2ReciveData>:

uint8_t Get_SPI2ReciveData(uint8_t num){
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	71fb      	strb	r3, [r7, #7]
	return SPI2ReciveData[num];
 80048e2:	79fb      	ldrb	r3, [r7, #7]
 80048e4:	4a03      	ldr	r2, [pc, #12]	@ (80048f4 <Get_SPI2ReciveData+0x1c>)
 80048e6:	5cd3      	ldrb	r3, [r2, r3]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	20000338 	.word	0x20000338

080048f8 <SetSPI2TransmitData>:

void SetSPI2TransmitData(uint8_t num, uint8_t data){
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	460a      	mov	r2, r1
 8004902:	71fb      	strb	r3, [r7, #7]
 8004904:	4613      	mov	r3, r2
 8004906:	71bb      	strb	r3, [r7, #6]
	SPI2TransmitData[num] = data;
 8004908:	79fb      	ldrb	r3, [r7, #7]
 800490a:	4904      	ldr	r1, [pc, #16]	@ (800491c <SetSPI2TransmitData+0x24>)
 800490c:	79ba      	ldrb	r2, [r7, #6]
 800490e:	54ca      	strb	r2, [r1, r3]
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	2000033c 	.word	0x2000033c

08004920 <LL_DMA_IsActiveFlag_TC3>:
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004934:	d101      	bne.n	800493a <LL_DMA_IsActiveFlag_TC3+0x1a>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <LL_DMA_IsActiveFlag_TC3+0x1c>
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <LL_DMA_IsActiveFlag_TC4>:
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800495c:	d101      	bne.n	8004962 <LL_DMA_IsActiveFlag_TC4+0x1a>
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <LL_DMA_IsActiveFlag_TC4+0x1c>
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <LL_DMA_ClearFlag_GI3>:
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800497e:	605a      	str	r2, [r3, #4]
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <LL_DMA_ClearFlag_GI4>:
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800499a:	605a      	str	r2, [r3, #4]
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f06f 0201 	mvn.w	r2, #1
 80049b6:	611a      	str	r2, [r3, #16]
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049ea:	b480      	push	{r7}
 80049ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80049ee:	bf00      	nop
 80049f0:	e7fd      	b.n	80049ee <NMI_Handler+0x4>

080049f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049f2:	b480      	push	{r7}
 80049f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049f6:	bf00      	nop
 80049f8:	e7fd      	b.n	80049f6 <HardFault_Handler+0x4>

080049fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049fa:	b480      	push	{r7}
 80049fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049fe:	bf00      	nop
 8004a00:	e7fd      	b.n	80049fe <MemManage_Handler+0x4>

08004a02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a02:	b480      	push	{r7}
 8004a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a06:	bf00      	nop
 8004a08:	e7fd      	b.n	8004a06 <BusFault_Handler+0x4>

08004a0a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a0e:	bf00      	nop
 8004a10:	e7fd      	b.n	8004a0e <UsageFault_Handler+0x4>

08004a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a12:	b480      	push	{r7}
 8004a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a16:	bf00      	nop
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a32:	bf00      	nop
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a40:	bf00      	nop
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
	...

08004a4c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
  if(LL_DMA_IsActiveFlag_TC3(DMA1) == 1){
 8004a50:	4806      	ldr	r0, [pc, #24]	@ (8004a6c <DMA1_Channel3_IRQHandler+0x20>)
 8004a52:	f7ff ff65 	bl	8004920 <LL_DMA_IsActiveFlag_TC3>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d104      	bne.n	8004a66 <DMA1_Channel3_IRQHandler+0x1a>
		LL_DMA_ClearFlag_GI3(DMA1);
 8004a5c:	4803      	ldr	r0, [pc, #12]	@ (8004a6c <DMA1_Channel3_IRQHandler+0x20>)
 8004a5e:	f7ff ff87 	bl	8004970 <LL_DMA_ClearFlag_GI3>
//    LL_DMA_ClearFlag_TC3(DMA1);
		SPI2_DMA1_ReceiveComplete_Callback();
 8004a62:	f7ff ff1d 	bl	80048a0 <SPI2_DMA1_ReceiveComplete_Callback>
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40020000 	.word	0x40020000

08004a70 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
  if(LL_DMA_IsActiveFlag_TC4(DMA1) == 1){
 8004a74:	4806      	ldr	r0, [pc, #24]	@ (8004a90 <DMA1_Channel4_IRQHandler+0x20>)
 8004a76:	f7ff ff67 	bl	8004948 <LL_DMA_IsActiveFlag_TC4>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d104      	bne.n	8004a8a <DMA1_Channel4_IRQHandler+0x1a>
		LL_DMA_ClearFlag_GI4(DMA1);
 8004a80:	4803      	ldr	r0, [pc, #12]	@ (8004a90 <DMA1_Channel4_IRQHandler+0x20>)
 8004a82:	f7ff ff83 	bl	800498c <LL_DMA_ClearFlag_GI4>
//    LL_DMA_ClearFlag_TC4(DMA1);
	  SPI2_DMA1_TransmitComplete_Callback();
 8004a86:	f7ff ff1d 	bl	80048c4 <SPI2_DMA1_TransmitComplete_Callback>
  /* USER CODE END DMA1_Channel4_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004a8a:	bf00      	nop
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40020000 	.word	0x40020000

08004a94 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
  if ( LL_TIM_IsActiveFlag_UPDATE(TIM15)==1){
 8004a98:	4806      	ldr	r0, [pc, #24]	@ (8004ab4 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8004a9a:	f7ff ff93 	bl	80049c4 <LL_TIM_IsActiveFlag_UPDATE>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d104      	bne.n	8004aae <TIM1_BRK_TIM15_IRQHandler+0x1a>
		LL_TIM_ClearFlag_UPDATE(TIM15);
 8004aa4:	4803      	ldr	r0, [pc, #12]	@ (8004ab4 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8004aa6:	f7ff ff7f 	bl	80049a8 <LL_TIM_ClearFlag_UPDATE>
    BAT_Pol();
 8004aaa:	f00d ffd1 	bl	8012a50 <BAT_Pol>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40014000 	.word	0x40014000

08004ab8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  if ( LL_TIM_IsActiveFlag_UPDATE(TIM4)==1){
 8004abc:	4807      	ldr	r0, [pc, #28]	@ (8004adc <TIM4_IRQHandler+0x24>)
 8004abe:	f7ff ff81 	bl	80049c4 <LL_TIM_IsActiveFlag_UPDATE>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d106      	bne.n	8004ad6 <TIM4_IRQHandler+0x1e>
		LL_TIM_ClearFlag_UPDATE(TIM4);
 8004ac8:	4804      	ldr	r0, [pc, #16]	@ (8004adc <TIM4_IRQHandler+0x24>)
 8004aca:	f7ff ff6d 	bl	80049a8 <LL_TIM_ClearFlag_UPDATE>
    INTC_sys();
 8004ace:	f001 fc6b 	bl	80063a8 <INTC_sys>
    log_interrupt ();
 8004ad2:	f005 f9ad 	bl	8009e30 <log_interrupt>
  }
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004ad6:	bf00      	nop
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	40000800 	.word	0x40000800

08004ae0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  static uint8_t i = 0;
	if ( LL_TIM_IsActiveFlag_UPDATE(TIM6)==1){
 8004ae4:	4817      	ldr	r0, [pc, #92]	@ (8004b44 <TIM6_DAC_IRQHandler+0x64>)
 8004ae6:	f7ff ff6d 	bl	80049c4 <LL_TIM_IsActiveFlag_UPDATE>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d127      	bne.n	8004b40 <TIM6_DAC_IRQHandler+0x60>
		LL_TIM_ClearFlag_UPDATE(TIM6);
 8004af0:	4814      	ldr	r0, [pc, #80]	@ (8004b44 <TIM6_DAC_IRQHandler+0x64>)
 8004af2:	f7ff ff59 	bl	80049a8 <LL_TIM_ClearFlag_UPDATE>
	
    switch(i){
 8004af6:	4b14      	ldr	r3, [pc, #80]	@ (8004b48 <TIM6_DAC_IRQHandler+0x68>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d813      	bhi.n	8004b26 <TIM6_DAC_IRQHandler+0x46>
 8004afe:	a201      	add	r2, pc, #4	@ (adr r2, 8004b04 <TIM6_DAC_IRQHandler+0x24>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b27 	.word	0x08004b27
 8004b08:	08004b27 	.word	0x08004b27
 8004b0c:	08004b15 	.word	0x08004b15
 8004b10:	08004b1d 	.word	0x08004b1d
      case 0:
        break;
      case 1:
        break;
      case 2:
        ICM_42688_GyroRead_DMA(0x26);
 8004b14:	2026      	movs	r0, #38	@ 0x26
 8004b16:	f004 ff5f 	bl	80099d8 <ICM_42688_GyroRead_DMA>
        break;
 8004b1a:	e004      	b.n	8004b26 <TIM6_DAC_IRQHandler+0x46>
      case 3:
        ICM_42688_GyroData();
 8004b1c:	f004 ff6a 	bl	80099f4 <ICM_42688_GyroData>
        GYRO_Pol();
 8004b20:	f005 f814 	bl	8009b4c <GYRO_Pol>
        break;
 8004b24:	bf00      	nop
    }
    i = (i+1)%4;
 8004b26:	4b08      	ldr	r3, [pc, #32]	@ (8004b48 <TIM6_DAC_IRQHandler+0x68>)
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	425a      	negs	r2, r3
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	f002 0203 	and.w	r2, r2, #3
 8004b36:	bf58      	it	pl
 8004b38:	4253      	negpl	r3, r2
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	4b02      	ldr	r3, [pc, #8]	@ (8004b48 <TIM6_DAC_IRQHandler+0x68>)
 8004b3e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004b40:	bf00      	nop
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40001000 	.word	0x40001000
 8004b48:	2000033f 	.word	0x2000033f

08004b4c <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */
  static uint8_t i = 0;

	if ( LL_TIM_IsActiveFlag_UPDATE(TIM7)==1){
 8004b50:	4819      	ldr	r0, [pc, #100]	@ (8004bb8 <TIM7_DAC_IRQHandler+0x6c>)
 8004b52:	f7ff ff37 	bl	80049c4 <LL_TIM_IsActiveFlag_UPDATE>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d12a      	bne.n	8004bb2 <TIM7_DAC_IRQHandler+0x66>
		LL_TIM_ClearFlag_UPDATE(TIM7);
 8004b5c:	4816      	ldr	r0, [pc, #88]	@ (8004bb8 <TIM7_DAC_IRQHandler+0x6c>)
 8004b5e:	f7ff ff23 	bl	80049a8 <LL_TIM_ClearFlag_UPDATE>
	
    switch(i){
 8004b62:	4b16      	ldr	r3, [pc, #88]	@ (8004bbc <TIM7_DAC_IRQHandler+0x70>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d816      	bhi.n	8004b98 <TIM7_DAC_IRQHandler+0x4c>
 8004b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b70 <TIM7_DAC_IRQHandler+0x24>)
 8004b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b70:	08004b81 	.word	0x08004b81
 8004b74:	08004b87 	.word	0x08004b87
 8004b78:	08004b8d 	.word	0x08004b8d
 8004b7c:	08004b93 	.word	0x08004b93
      case 0:
        DIST_Pol_FL();
 8004b80:	f00e fa58 	bl	8013034 <DIST_Pol_FL>
        break;
 8004b84:	e008      	b.n	8004b98 <TIM7_DAC_IRQHandler+0x4c>
      case 1:
        DIST_Pol_SR();
 8004b86:	f00e fafd 	bl	8013184 <DIST_Pol_SR>
        break;
 8004b8a:	e005      	b.n	8004b98 <TIM7_DAC_IRQHandler+0x4c>
      case 2:
        DIST_Pol_SL();
 8004b8c:	f00e fac2 	bl	8013114 <DIST_Pol_SL>
        break;
 8004b90:	e002      	b.n	8004b98 <TIM7_DAC_IRQHandler+0x4c>
      case 3:
        DIST_Pol_FR();
 8004b92:	f00e fa87 	bl	80130a4 <DIST_Pol_FR>
        break;
 8004b96:	bf00      	nop
    }
    i = (i+1)%4;
 8004b98:	4b08      	ldr	r3, [pc, #32]	@ (8004bbc <TIM7_DAC_IRQHandler+0x70>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	425a      	negs	r2, r3
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	f002 0203 	and.w	r2, r2, #3
 8004ba8:	bf58      	it	pl
 8004baa:	4253      	negpl	r3, r2
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	4b03      	ldr	r3, [pc, #12]	@ (8004bbc <TIM7_DAC_IRQHandler+0x70>)
 8004bb0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM7_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8004bb2:	bf00      	nop
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40001400 	.word	0x40001400
 8004bbc:	20000340 	.word	0x20000340

08004bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  return 1;
 8004bc4:	2301      	movs	r3, #1
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <_kill>:

int _kill(int pid, int sig)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004bda:	f019 fb25 	bl	801e228 <__errno>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2216      	movs	r2, #22
 8004be2:	601a      	str	r2, [r3, #0]
  return -1;
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <_exit>:

void _exit (int status)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7ff ffe7 	bl	8004bd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004c02:	bf00      	nop
 8004c04:	e7fd      	b.n	8004c02 <_exit+0x12>

08004c06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b086      	sub	sp, #24
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	e00a      	b.n	8004c2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004c18:	f3af 8000 	nop.w
 8004c1c:	4601      	mov	r1, r0
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	60ba      	str	r2, [r7, #8]
 8004c24:	b2ca      	uxtb	r2, r1
 8004c26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	dbf0      	blt.n	8004c18 <_read+0x12>
  }

  return len;
 8004c36:	687b      	ldr	r3, [r7, #4]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	e009      	b.n	8004c66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	60ba      	str	r2, [r7, #8]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fd fc12 	bl	8002484 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	3301      	adds	r3, #1
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	dbf1      	blt.n	8004c52 <_write+0x12>
  }
  return len;
 8004c6e:	687b      	ldr	r3, [r7, #4]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <_close>:

int _close(int file)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ca0:	605a      	str	r2, [r3, #4]
  return 0;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <_isatty>:

int _isatty(int file)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004cb8:	2301      	movs	r3, #1
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b085      	sub	sp, #20
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ce8:	4a14      	ldr	r2, [pc, #80]	@ (8004d3c <_sbrk+0x5c>)
 8004cea:	4b15      	ldr	r3, [pc, #84]	@ (8004d40 <_sbrk+0x60>)
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cf4:	4b13      	ldr	r3, [pc, #76]	@ (8004d44 <_sbrk+0x64>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004cfc:	4b11      	ldr	r3, [pc, #68]	@ (8004d44 <_sbrk+0x64>)
 8004cfe:	4a12      	ldr	r2, [pc, #72]	@ (8004d48 <_sbrk+0x68>)
 8004d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d02:	4b10      	ldr	r3, [pc, #64]	@ (8004d44 <_sbrk+0x64>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d207      	bcs.n	8004d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d10:	f019 fa8a 	bl	801e228 <__errno>
 8004d14:	4603      	mov	r3, r0
 8004d16:	220c      	movs	r2, #12
 8004d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1e:	e009      	b.n	8004d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d20:	4b08      	ldr	r3, [pc, #32]	@ (8004d44 <_sbrk+0x64>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d26:	4b07      	ldr	r3, [pc, #28]	@ (8004d44 <_sbrk+0x64>)
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	4a05      	ldr	r2, [pc, #20]	@ (8004d44 <_sbrk+0x64>)
 8004d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d32:	68fb      	ldr	r3, [r7, #12]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20020000 	.word	0x20020000
 8004d40:	00000400 	.word	0x00000400
 8004d44:	20000344 	.word	0x20000344
 8004d48:	2001bef0 	.word	0x2001bef0

08004d4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004d50:	4b06      	ldr	r3, [pc, #24]	@ (8004d6c <SystemInit+0x20>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d56:	4a05      	ldr	r2, [pc, #20]	@ (8004d6c <SystemInit+0x20>)
 8004d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d60:	bf00      	nop
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	e000ed00 	.word	0xe000ed00

08004d70 <__NVIC_GetPriorityGrouping>:
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d74:	4b04      	ldr	r3, [pc, #16]	@ (8004d88 <__NVIC_GetPriorityGrouping+0x18>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	0a1b      	lsrs	r3, r3, #8
 8004d7a:	f003 0307 	and.w	r3, r3, #7
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	e000ed00 	.word	0xe000ed00

08004d8c <__NVIC_EnableIRQ>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	db0b      	blt.n	8004db6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	f003 021f 	and.w	r2, r3, #31
 8004da4:	4907      	ldr	r1, [pc, #28]	@ (8004dc4 <__NVIC_EnableIRQ+0x38>)
 8004da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	2001      	movs	r0, #1
 8004dae:	fa00 f202 	lsl.w	r2, r0, r2
 8004db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	e000e100 	.word	0xe000e100

08004dc8 <__NVIC_SetPriority>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	6039      	str	r1, [r7, #0]
 8004dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	db0a      	blt.n	8004df2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	490c      	ldr	r1, [pc, #48]	@ (8004e14 <__NVIC_SetPriority+0x4c>)
 8004de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de6:	0112      	lsls	r2, r2, #4
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	440b      	add	r3, r1
 8004dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004df0:	e00a      	b.n	8004e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	4908      	ldr	r1, [pc, #32]	@ (8004e18 <__NVIC_SetPriority+0x50>)
 8004df8:	79fb      	ldrb	r3, [r7, #7]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	3b04      	subs	r3, #4
 8004e00:	0112      	lsls	r2, r2, #4
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	440b      	add	r3, r1
 8004e06:	761a      	strb	r2, [r3, #24]
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	e000e100 	.word	0xe000e100
 8004e18:	e000ed00 	.word	0xe000ed00

08004e1c <NVIC_EncodePriority>:
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b089      	sub	sp, #36	@ 0x24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f1c3 0307 	rsb	r3, r3, #7
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	bf28      	it	cs
 8004e3a:	2304      	movcs	r3, #4
 8004e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	3304      	adds	r3, #4
 8004e42:	2b06      	cmp	r3, #6
 8004e44:	d902      	bls.n	8004e4c <NVIC_EncodePriority+0x30>
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	3b03      	subs	r3, #3
 8004e4a:	e000      	b.n	8004e4e <NVIC_EncodePriority+0x32>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e50:	f04f 32ff 	mov.w	r2, #4294967295
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43da      	mvns	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	401a      	ands	r2, r3
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e64:	f04f 31ff 	mov.w	r1, #4294967295
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6e:	43d9      	mvns	r1, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e74:	4313      	orrs	r3, r2
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3724      	adds	r7, #36	@ 0x24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <LL_AHB2_GRP1_EnableClock>:
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004e8c:	4b08      	ldr	r3, [pc, #32]	@ (8004eb0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004e8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e90:	4907      	ldr	r1, [pc, #28]	@ (8004eb0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004e98:	4b05      	ldr	r3, [pc, #20]	@ (8004eb0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004e9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
}
 8004ea4:	bf00      	nop
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	40021000 	.word	0x40021000

08004eb4 <LL_APB1_GRP1_EnableClock>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004ebc:	4b08      	ldr	r3, [pc, #32]	@ (8004ee0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004ebe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004ec0:	4907      	ldr	r1, [pc, #28]	@ (8004ee0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004ec8:	4b05      	ldr	r3, [pc, #20]	@ (8004ee0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004eca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
}
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	40021000 	.word	0x40021000

08004ee4 <LL_APB2_GRP1_EnableClock>:
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004eec:	4b08      	ldr	r3, [pc, #32]	@ (8004f10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004eee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004ef0:	4907      	ldr	r1, [pc, #28]	@ (8004f10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004ef8:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004efa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4013      	ands	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004f02:	68fb      	ldr	r3, [r7, #12]
}
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	40021000 	.word	0x40021000

08004f14 <LL_TIM_EnableCounter>:
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f043 0201 	orr.w	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	601a      	str	r2, [r3, #0]
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <LL_TIM_EnableARRPreload>:
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	601a      	str	r2, [r3, #0]
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <LL_TIM_DisableARRPreload>:
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	601a      	str	r2, [r3, #0]
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <LL_TIM_SetCounter>:
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <LL_TIM_GetCounter>:
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <LL_TIM_CC_EnableChannel>:
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1a      	ldr	r2, [r3, #32]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <LL_TIM_OC_DisableFast>:
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d02e      	beq.n	800503a <LL_TIM_OC_DisableFast+0x6e>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d029      	beq.n	8005036 <LL_TIM_OC_DisableFast+0x6a>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b10      	cmp	r3, #16
 8004fe6:	d024      	beq.n	8005032 <LL_TIM_OC_DisableFast+0x66>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b40      	cmp	r3, #64	@ 0x40
 8004fec:	d01f      	beq.n	800502e <LL_TIM_OC_DisableFast+0x62>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ff4:	d019      	beq.n	800502a <LL_TIM_OC_DisableFast+0x5e>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ffc:	d013      	beq.n	8005026 <LL_TIM_OC_DisableFast+0x5a>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005004:	d00d      	beq.n	8005022 <LL_TIM_OC_DisableFast+0x56>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800500c:	d007      	beq.n	800501e <LL_TIM_OC_DisableFast+0x52>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005014:	d101      	bne.n	800501a <LL_TIM_OC_DisableFast+0x4e>
 8005016:	2308      	movs	r3, #8
 8005018:	e010      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 800501a:	2309      	movs	r3, #9
 800501c:	e00e      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 800501e:	2307      	movs	r3, #7
 8005020:	e00c      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 8005022:	2306      	movs	r3, #6
 8005024:	e00a      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 8005026:	2305      	movs	r3, #5
 8005028:	e008      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 800502a:	2304      	movs	r3, #4
 800502c:	e006      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 800502e:	2303      	movs	r3, #3
 8005030:	e004      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 8005032:	2302      	movs	r3, #2
 8005034:	e002      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <LL_TIM_OC_DisableFast+0x70>
 800503a:	2300      	movs	r3, #0
 800503c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3318      	adds	r3, #24
 8005042:	4619      	mov	r1, r3
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	4a0b      	ldr	r2, [pc, #44]	@ (8005074 <LL_TIM_OC_DisableFast+0xa8>)
 8005048:	5cd3      	ldrb	r3, [r2, r3]
 800504a:	440b      	add	r3, r1
 800504c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	4908      	ldr	r1, [pc, #32]	@ (8005078 <LL_TIM_OC_DisableFast+0xac>)
 8005056:	5ccb      	ldrb	r3, [r1, r3]
 8005058:	4619      	mov	r1, r3
 800505a:	2304      	movs	r3, #4
 800505c:	408b      	lsls	r3, r1
 800505e:	43db      	mvns	r3, r3
 8005060:	401a      	ands	r2, r3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	601a      	str	r2, [r3, #0]
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	08022294 	.word	0x08022294
 8005078:	080222a0 	.word	0x080222a0

0800507c <LL_TIM_OC_EnablePreload>:
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d02e      	beq.n	80050ea <LL_TIM_OC_EnablePreload+0x6e>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b04      	cmp	r3, #4
 8005090:	d029      	beq.n	80050e6 <LL_TIM_OC_EnablePreload+0x6a>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b10      	cmp	r3, #16
 8005096:	d024      	beq.n	80050e2 <LL_TIM_OC_EnablePreload+0x66>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b40      	cmp	r3, #64	@ 0x40
 800509c:	d01f      	beq.n	80050de <LL_TIM_OC_EnablePreload+0x62>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050a4:	d019      	beq.n	80050da <LL_TIM_OC_EnablePreload+0x5e>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ac:	d013      	beq.n	80050d6 <LL_TIM_OC_EnablePreload+0x5a>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b4:	d00d      	beq.n	80050d2 <LL_TIM_OC_EnablePreload+0x56>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050bc:	d007      	beq.n	80050ce <LL_TIM_OC_EnablePreload+0x52>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050c4:	d101      	bne.n	80050ca <LL_TIM_OC_EnablePreload+0x4e>
 80050c6:	2308      	movs	r3, #8
 80050c8:	e010      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050ca:	2309      	movs	r3, #9
 80050cc:	e00e      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050ce:	2307      	movs	r3, #7
 80050d0:	e00c      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050d2:	2306      	movs	r3, #6
 80050d4:	e00a      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050d6:	2305      	movs	r3, #5
 80050d8:	e008      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050da:	2304      	movs	r3, #4
 80050dc:	e006      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050de:	2303      	movs	r3, #3
 80050e0:	e004      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e002      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <LL_TIM_OC_EnablePreload+0x70>
 80050ea:	2300      	movs	r3, #0
 80050ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3318      	adds	r3, #24
 80050f2:	4619      	mov	r1, r3
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
 80050f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005120 <LL_TIM_OC_EnablePreload+0xa4>)
 80050f8:	5cd3      	ldrb	r3, [r2, r3]
 80050fa:	440b      	add	r3, r1
 80050fc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	4907      	ldr	r1, [pc, #28]	@ (8005124 <LL_TIM_OC_EnablePreload+0xa8>)
 8005106:	5ccb      	ldrb	r3, [r1, r3]
 8005108:	4619      	mov	r1, r3
 800510a:	2308      	movs	r3, #8
 800510c:	408b      	lsls	r3, r1
 800510e:	431a      	orrs	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	601a      	str	r2, [r3, #0]
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	08022294 	.word	0x08022294
 8005124:	080222a0 	.word	0x080222a0

08005128 <LL_TIM_OC_SetCompareCH1>:
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <LL_TIM_OC_SetCompareCH2>:
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <LL_TIM_IC_SetActiveInput>:
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d02e      	beq.n	80051d0 <LL_TIM_IC_SetActiveInput+0x70>
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b04      	cmp	r3, #4
 8005176:	d029      	beq.n	80051cc <LL_TIM_IC_SetActiveInput+0x6c>
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b10      	cmp	r3, #16
 800517c:	d024      	beq.n	80051c8 <LL_TIM_IC_SetActiveInput+0x68>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b40      	cmp	r3, #64	@ 0x40
 8005182:	d01f      	beq.n	80051c4 <LL_TIM_IC_SetActiveInput+0x64>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800518a:	d019      	beq.n	80051c0 <LL_TIM_IC_SetActiveInput+0x60>
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005192:	d013      	beq.n	80051bc <LL_TIM_IC_SetActiveInput+0x5c>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800519a:	d00d      	beq.n	80051b8 <LL_TIM_IC_SetActiveInput+0x58>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051a2:	d007      	beq.n	80051b4 <LL_TIM_IC_SetActiveInput+0x54>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051aa:	d101      	bne.n	80051b0 <LL_TIM_IC_SetActiveInput+0x50>
 80051ac:	2308      	movs	r3, #8
 80051ae:	e010      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051b0:	2309      	movs	r3, #9
 80051b2:	e00e      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051b4:	2307      	movs	r3, #7
 80051b6:	e00c      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051b8:	2306      	movs	r3, #6
 80051ba:	e00a      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051bc:	2305      	movs	r3, #5
 80051be:	e008      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051c0:	2304      	movs	r3, #4
 80051c2:	e006      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051c4:	2303      	movs	r3, #3
 80051c6:	e004      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e002      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e000      	b.n	80051d2 <LL_TIM_IC_SetActiveInput+0x72>
 80051d0:	2300      	movs	r3, #0
 80051d2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3318      	adds	r3, #24
 80051d8:	4619      	mov	r1, r3
 80051da:	7dfb      	ldrb	r3, [r7, #23]
 80051dc:	4a0e      	ldr	r2, [pc, #56]	@ (8005218 <LL_TIM_IC_SetActiveInput+0xb8>)
 80051de:	5cd3      	ldrb	r3, [r2, r3]
 80051e0:	440b      	add	r3, r1
 80051e2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
 80051ea:	490c      	ldr	r1, [pc, #48]	@ (800521c <LL_TIM_IC_SetActiveInput+0xbc>)
 80051ec:	5ccb      	ldrb	r3, [r1, r3]
 80051ee:	4619      	mov	r1, r3
 80051f0:	2303      	movs	r3, #3
 80051f2:	408b      	lsls	r3, r1
 80051f4:	43db      	mvns	r3, r3
 80051f6:	401a      	ands	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	0c1b      	lsrs	r3, r3, #16
 80051fc:	7df9      	ldrb	r1, [r7, #23]
 80051fe:	4807      	ldr	r0, [pc, #28]	@ (800521c <LL_TIM_IC_SetActiveInput+0xbc>)
 8005200:	5c41      	ldrb	r1, [r0, r1]
 8005202:	408b      	lsls	r3, r1
 8005204:	431a      	orrs	r2, r3
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	601a      	str	r2, [r3, #0]
}
 800520a:	bf00      	nop
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	08022294 	.word	0x08022294
 800521c:	080222ac 	.word	0x080222ac

08005220 <LL_TIM_IC_SetPrescaler>:
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d02e      	beq.n	8005290 <LL_TIM_IC_SetPrescaler+0x70>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b04      	cmp	r3, #4
 8005236:	d029      	beq.n	800528c <LL_TIM_IC_SetPrescaler+0x6c>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b10      	cmp	r3, #16
 800523c:	d024      	beq.n	8005288 <LL_TIM_IC_SetPrescaler+0x68>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b40      	cmp	r3, #64	@ 0x40
 8005242:	d01f      	beq.n	8005284 <LL_TIM_IC_SetPrescaler+0x64>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800524a:	d019      	beq.n	8005280 <LL_TIM_IC_SetPrescaler+0x60>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005252:	d013      	beq.n	800527c <LL_TIM_IC_SetPrescaler+0x5c>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800525a:	d00d      	beq.n	8005278 <LL_TIM_IC_SetPrescaler+0x58>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005262:	d007      	beq.n	8005274 <LL_TIM_IC_SetPrescaler+0x54>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526a:	d101      	bne.n	8005270 <LL_TIM_IC_SetPrescaler+0x50>
 800526c:	2308      	movs	r3, #8
 800526e:	e010      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 8005270:	2309      	movs	r3, #9
 8005272:	e00e      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 8005274:	2307      	movs	r3, #7
 8005276:	e00c      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 8005278:	2306      	movs	r3, #6
 800527a:	e00a      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 800527c:	2305      	movs	r3, #5
 800527e:	e008      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 8005280:	2304      	movs	r3, #4
 8005282:	e006      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 8005284:	2303      	movs	r3, #3
 8005286:	e004      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 8005288:	2302      	movs	r3, #2
 800528a:	e002      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 800528c:	2301      	movs	r3, #1
 800528e:	e000      	b.n	8005292 <LL_TIM_IC_SetPrescaler+0x72>
 8005290:	2300      	movs	r3, #0
 8005292:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3318      	adds	r3, #24
 8005298:	4619      	mov	r1, r3
 800529a:	7dfb      	ldrb	r3, [r7, #23]
 800529c:	4a0e      	ldr	r2, [pc, #56]	@ (80052d8 <LL_TIM_IC_SetPrescaler+0xb8>)
 800529e:	5cd3      	ldrb	r3, [r2, r3]
 80052a0:	440b      	add	r3, r1
 80052a2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
 80052aa:	490c      	ldr	r1, [pc, #48]	@ (80052dc <LL_TIM_IC_SetPrescaler+0xbc>)
 80052ac:	5ccb      	ldrb	r3, [r1, r3]
 80052ae:	4619      	mov	r1, r3
 80052b0:	230c      	movs	r3, #12
 80052b2:	408b      	lsls	r3, r1
 80052b4:	43db      	mvns	r3, r3
 80052b6:	401a      	ands	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	0c1b      	lsrs	r3, r3, #16
 80052bc:	7df9      	ldrb	r1, [r7, #23]
 80052be:	4807      	ldr	r0, [pc, #28]	@ (80052dc <LL_TIM_IC_SetPrescaler+0xbc>)
 80052c0:	5c41      	ldrb	r1, [r0, r1]
 80052c2:	408b      	lsls	r3, r1
 80052c4:	431a      	orrs	r2, r3
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	601a      	str	r2, [r3, #0]
}
 80052ca:	bf00      	nop
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	08022294 	.word	0x08022294
 80052dc:	080222ac 	.word	0x080222ac

080052e0 <LL_TIM_IC_SetFilter>:
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d02e      	beq.n	8005350 <LL_TIM_IC_SetFilter+0x70>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d029      	beq.n	800534c <LL_TIM_IC_SetFilter+0x6c>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b10      	cmp	r3, #16
 80052fc:	d024      	beq.n	8005348 <LL_TIM_IC_SetFilter+0x68>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b40      	cmp	r3, #64	@ 0x40
 8005302:	d01f      	beq.n	8005344 <LL_TIM_IC_SetFilter+0x64>
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800530a:	d019      	beq.n	8005340 <LL_TIM_IC_SetFilter+0x60>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005312:	d013      	beq.n	800533c <LL_TIM_IC_SetFilter+0x5c>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800531a:	d00d      	beq.n	8005338 <LL_TIM_IC_SetFilter+0x58>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005322:	d007      	beq.n	8005334 <LL_TIM_IC_SetFilter+0x54>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800532a:	d101      	bne.n	8005330 <LL_TIM_IC_SetFilter+0x50>
 800532c:	2308      	movs	r3, #8
 800532e:	e010      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 8005330:	2309      	movs	r3, #9
 8005332:	e00e      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 8005334:	2307      	movs	r3, #7
 8005336:	e00c      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 8005338:	2306      	movs	r3, #6
 800533a:	e00a      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 800533c:	2305      	movs	r3, #5
 800533e:	e008      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 8005340:	2304      	movs	r3, #4
 8005342:	e006      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 8005344:	2303      	movs	r3, #3
 8005346:	e004      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 8005348:	2302      	movs	r3, #2
 800534a:	e002      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <LL_TIM_IC_SetFilter+0x72>
 8005350:	2300      	movs	r3, #0
 8005352:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3318      	adds	r3, #24
 8005358:	4619      	mov	r1, r3
 800535a:	7dfb      	ldrb	r3, [r7, #23]
 800535c:	4a0e      	ldr	r2, [pc, #56]	@ (8005398 <LL_TIM_IC_SetFilter+0xb8>)
 800535e:	5cd3      	ldrb	r3, [r2, r3]
 8005360:	440b      	add	r3, r1
 8005362:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	7dfb      	ldrb	r3, [r7, #23]
 800536a:	490c      	ldr	r1, [pc, #48]	@ (800539c <LL_TIM_IC_SetFilter+0xbc>)
 800536c:	5ccb      	ldrb	r3, [r1, r3]
 800536e:	4619      	mov	r1, r3
 8005370:	23f0      	movs	r3, #240	@ 0xf0
 8005372:	408b      	lsls	r3, r1
 8005374:	43db      	mvns	r3, r3
 8005376:	401a      	ands	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	0c1b      	lsrs	r3, r3, #16
 800537c:	7df9      	ldrb	r1, [r7, #23]
 800537e:	4807      	ldr	r0, [pc, #28]	@ (800539c <LL_TIM_IC_SetFilter+0xbc>)
 8005380:	5c41      	ldrb	r1, [r0, r1]
 8005382:	408b      	lsls	r3, r1
 8005384:	431a      	orrs	r2, r3
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	601a      	str	r2, [r3, #0]
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	08022294 	.word	0x08022294
 800539c:	080222ac 	.word	0x080222ac

080053a0 <LL_TIM_IC_SetPolarity>:
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d02e      	beq.n	8005410 <LL_TIM_IC_SetPolarity+0x70>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d029      	beq.n	800540c <LL_TIM_IC_SetPolarity+0x6c>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b10      	cmp	r3, #16
 80053bc:	d024      	beq.n	8005408 <LL_TIM_IC_SetPolarity+0x68>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b40      	cmp	r3, #64	@ 0x40
 80053c2:	d01f      	beq.n	8005404 <LL_TIM_IC_SetPolarity+0x64>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ca:	d019      	beq.n	8005400 <LL_TIM_IC_SetPolarity+0x60>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053d2:	d013      	beq.n	80053fc <LL_TIM_IC_SetPolarity+0x5c>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053da:	d00d      	beq.n	80053f8 <LL_TIM_IC_SetPolarity+0x58>
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053e2:	d007      	beq.n	80053f4 <LL_TIM_IC_SetPolarity+0x54>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ea:	d101      	bne.n	80053f0 <LL_TIM_IC_SetPolarity+0x50>
 80053ec:	2308      	movs	r3, #8
 80053ee:	e010      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 80053f0:	2309      	movs	r3, #9
 80053f2:	e00e      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 80053f4:	2307      	movs	r3, #7
 80053f6:	e00c      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 80053f8:	2306      	movs	r3, #6
 80053fa:	e00a      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 80053fc:	2305      	movs	r3, #5
 80053fe:	e008      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 8005400:	2304      	movs	r3, #4
 8005402:	e006      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 8005404:	2303      	movs	r3, #3
 8005406:	e004      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 8005408:	2302      	movs	r3, #2
 800540a:	e002      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <LL_TIM_IC_SetPolarity+0x72>
 8005410:	2300      	movs	r3, #0
 8005412:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a1a      	ldr	r2, [r3, #32]
 8005418:	7dfb      	ldrb	r3, [r7, #23]
 800541a:	490b      	ldr	r1, [pc, #44]	@ (8005448 <LL_TIM_IC_SetPolarity+0xa8>)
 800541c:	5ccb      	ldrb	r3, [r1, r3]
 800541e:	4619      	mov	r1, r3
 8005420:	230a      	movs	r3, #10
 8005422:	408b      	lsls	r3, r1
 8005424:	43db      	mvns	r3, r3
 8005426:	401a      	ands	r2, r3
 8005428:	7dfb      	ldrb	r3, [r7, #23]
 800542a:	4907      	ldr	r1, [pc, #28]	@ (8005448 <LL_TIM_IC_SetPolarity+0xa8>)
 800542c:	5ccb      	ldrb	r3, [r1, r3]
 800542e:	4619      	mov	r1, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	408b      	lsls	r3, r1
 8005434:	431a      	orrs	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	080222b8 	.word	0x080222b8

0800544c <LL_TIM_SetClockSource>:
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800545e:	f023 0307 	bic.w	r3, r3, #7
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	609a      	str	r2, [r3, #8]
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <LL_TIM_SetEncoderMode>:
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005488:	f023 0307 	bic.w	r3, r3, #7
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	609a      	str	r2, [r3, #8]
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <LL_TIM_SetTriggerOutput>:
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80054b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	605a      	str	r2, [r3, #4]
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <LL_TIM_SetTriggerOutput2>:
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	605a      	str	r2, [r3, #4]
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <LL_TIM_DisableMasterSlaveMode>:
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	609a      	str	r2, [r3, #8]
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <LL_TIM_EnableAllOutputs>:
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551c:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f043 0201 	orr.w	r2, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	60da      	str	r2, [r3, #12]
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08c      	sub	sp, #48	@ 0x30
 8005554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005556:	f107 031c 	add.w	r3, r7, #28
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	605a      	str	r2, [r3, #4]
 8005560:	609a      	str	r2, [r3, #8]
 8005562:	60da      	str	r2, [r3, #12]
 8005564:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	605a      	str	r2, [r3, #4]
 800556e:	609a      	str	r2, [r3, #8]
 8005570:	60da      	str	r2, [r3, #12]
 8005572:	611a      	str	r2, [r3, #16]
 8005574:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8005576:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800557a:	f7ff fcb3 	bl	8004ee4 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800557e:	2001      	movs	r0, #1
 8005580:	f7ff fc80 	bl	8004e84 <LL_AHB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA9   ------> TIM1_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8005584:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005588:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800558a:	2302      	movs	r3, #2
 800558c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005592:	2300      	movs	r3, #0
 8005594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800559a:	2306      	movs	r3, #6
 800559c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800559e:	1d3b      	adds	r3, r7, #4
 80055a0:	4619      	mov	r1, r3
 80055a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80055a6:	f015 f8ce 	bl	801a746 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80055aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80055b0:	2302      	movs	r3, #2
 80055b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80055c0:	2306      	movs	r3, #6
 80055c2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055c4:	1d3b      	adds	r3, r7, #4
 80055c6:	4619      	mov	r1, r3
 80055c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80055cc:	f015 f8bb 	bl	801a746 <LL_GPIO_Init>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80055d0:	f7ff fbce 	bl	8004d70 <__NVIC_GetPriorityGrouping>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2200      	movs	r2, #0
 80055d8:	2100      	movs	r1, #0
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff fc1e 	bl	8004e1c <NVIC_EncodePriority>
 80055e0:	4603      	mov	r3, r0
 80055e2:	4619      	mov	r1, r3
 80055e4:	2018      	movs	r0, #24
 80055e6:	f7ff fbef 	bl	8004dc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80055ea:	2018      	movs	r0, #24
 80055ec:	f7ff fbce 	bl	8004d8c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80055f4:	2300      	movs	r3, #0
 80055f6:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 80055f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80055fc:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80055fe:	2300      	movs	r3, #0
 8005600:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_InitStruct.RepetitionCounter = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8005606:	f107 031c 	add.w	r3, r7, #28
 800560a:	4619      	mov	r1, r3
 800560c:	4821      	ldr	r0, [pc, #132]	@ (8005694 <MX_TIM1_Init+0x144>)
 800560e:	f015 fcd5 	bl	801afbc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8005612:	4820      	ldr	r0, [pc, #128]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005614:	f7ff fc9e 	bl	8004f54 <LL_TIM_DisableARRPreload>
  LL_TIM_SetEncoderMode(TIM1, LL_TIM_ENCODERMODE_X4_TI12);
 8005618:	2103      	movs	r1, #3
 800561a:	481e      	ldr	r0, [pc, #120]	@ (8005694 <MX_TIM1_Init+0x144>)
 800561c:	f7ff ff2b 	bl	8005476 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8005620:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005624:	2101      	movs	r1, #1
 8005626:	481b      	ldr	r0, [pc, #108]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005628:	f7ff fd9a 	bl	8005160 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 800562c:	2200      	movs	r2, #0
 800562e:	2101      	movs	r1, #1
 8005630:	4818      	ldr	r0, [pc, #96]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005632:	f7ff fdf5 	bl	8005220 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8005636:	2200      	movs	r2, #0
 8005638:	2101      	movs	r1, #1
 800563a:	4816      	ldr	r0, [pc, #88]	@ (8005694 <MX_TIM1_Init+0x144>)
 800563c:	f7ff fe50 	bl	80052e0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8005640:	2200      	movs	r2, #0
 8005642:	2101      	movs	r1, #1
 8005644:	4813      	ldr	r0, [pc, #76]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005646:	f7ff feab 	bl	80053a0 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800564a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800564e:	2110      	movs	r1, #16
 8005650:	4810      	ldr	r0, [pc, #64]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005652:	f7ff fd85 	bl	8005160 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8005656:	2200      	movs	r2, #0
 8005658:	2110      	movs	r1, #16
 800565a:	480e      	ldr	r0, [pc, #56]	@ (8005694 <MX_TIM1_Init+0x144>)
 800565c:	f7ff fde0 	bl	8005220 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8005660:	2200      	movs	r2, #0
 8005662:	2110      	movs	r1, #16
 8005664:	480b      	ldr	r0, [pc, #44]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005666:	f7ff fe3b 	bl	80052e0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800566a:	2200      	movs	r2, #0
 800566c:	2110      	movs	r1, #16
 800566e:	4809      	ldr	r0, [pc, #36]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005670:	f7ff fe96 	bl	80053a0 <LL_TIM_IC_SetPolarity>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8005674:	2100      	movs	r1, #0
 8005676:	4807      	ldr	r0, [pc, #28]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005678:	f7ff ff12 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 800567c:	2100      	movs	r1, #0
 800567e:	4805      	ldr	r0, [pc, #20]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005680:	f7ff ff23 	bl	80054ca <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8005684:	4803      	ldr	r0, [pc, #12]	@ (8005694 <MX_TIM1_Init+0x144>)
 8005686:	f7ff ff33 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800568a:	bf00      	nop
 800568c:	3730      	adds	r7, #48	@ 0x30
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40012c00 	.word	0x40012c00

08005698 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b094      	sub	sp, #80	@ 0x50
 800569c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800569e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	605a      	str	r2, [r3, #4]
 80056a8:	609a      	str	r2, [r3, #8]
 80056aa:	60da      	str	r2, [r3, #12]
 80056ac:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80056ae:	f107 031c 	add.w	r3, r7, #28
 80056b2:	2220      	movs	r2, #32
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f018 fd64 	bl	801e184 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056bc:	1d3b      	adds	r3, r7, #4
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	605a      	str	r2, [r3, #4]
 80056c4:	609a      	str	r2, [r3, #8]
 80056c6:	60da      	str	r2, [r3, #12]
 80056c8:	611a      	str	r2, [r3, #16]
 80056ca:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80056cc:	2001      	movs	r0, #1
 80056ce:	f7ff fbf1 	bl	8004eb4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80056d6:	2300      	movs	r3, #0
 80056d8:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 1699;
 80056da:	f240 63a3 	movw	r3, #1699	@ 0x6a3
 80056de:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80056e0:	2300      	movs	r3, #0
 80056e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80056e4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80056e8:	4619      	mov	r1, r3
 80056ea:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80056ee:	f015 fc65 	bl	801afbc <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 80056f2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80056f6:	f7ff fc1d 	bl	8004f34 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 80056fa:	2110      	movs	r1, #16
 80056fc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005700:	f7ff fcbc 	bl	800507c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005704:	2360      	movs	r3, #96	@ 0x60
 8005706:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005708:	2300      	movs	r3, #0
 800570a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800570c:	2300      	movs	r3, #0
 800570e:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005714:	2300      	movs	r3, #0
 8005716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8005718:	f107 031c 	add.w	r3, r7, #28
 800571c:	461a      	mov	r2, r3
 800571e:	2110      	movs	r1, #16
 8005720:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005724:	f015 fcec 	bl	801b100 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8005728:	2110      	movs	r1, #16
 800572a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800572e:	f7ff fc4d 	bl	8004fcc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8005732:	2100      	movs	r1, #0
 8005734:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005738:	f7ff feb2 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800573c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005740:	f7ff fed6 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8005744:	2002      	movs	r0, #2
 8005746:	f7ff fb9d 	bl	8004e84 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800574a:	2308      	movs	r3, #8
 800574c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800574e:	2302      	movs	r3, #2
 8005750:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005756:	2300      	movs	r3, #0
 8005758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800575a:	2300      	movs	r3, #0
 800575c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800575e:	2301      	movs	r3, #1
 8005760:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005762:	1d3b      	adds	r3, r7, #4
 8005764:	4619      	mov	r1, r3
 8005766:	4803      	ldr	r0, [pc, #12]	@ (8005774 <MX_TIM2_Init+0xdc>)
 8005768:	f014 ffed 	bl	801a746 <LL_GPIO_Init>

}
 800576c:	bf00      	nop
 800576e:	3750      	adds	r7, #80	@ 0x50
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	48000400 	.word	0x48000400

08005778 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b094      	sub	sp, #80	@ 0x50
 800577c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800577e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	605a      	str	r2, [r3, #4]
 8005788:	609a      	str	r2, [r3, #8]
 800578a:	60da      	str	r2, [r3, #12]
 800578c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800578e:	f107 031c 	add.w	r3, r7, #28
 8005792:	2220      	movs	r2, #32
 8005794:	2100      	movs	r1, #0
 8005796:	4618      	mov	r0, r3
 8005798:	f018 fcf4 	bl	801e184 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800579c:	1d3b      	adds	r3, r7, #4
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	605a      	str	r2, [r3, #4]
 80057a4:	609a      	str	r2, [r3, #8]
 80057a6:	60da      	str	r2, [r3, #12]
 80057a8:	611a      	str	r2, [r3, #16]
 80057aa:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80057ac:	2002      	movs	r0, #2
 80057ae:	f7ff fb81 	bl	8004eb4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80057b6:	2300      	movs	r3, #0
 80057b8:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 1699;
 80057ba:	f240 63a3 	movw	r3, #1699	@ 0x6a3
 80057be:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80057c0:	2300      	movs	r3, #0
 80057c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80057c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80057c8:	4619      	mov	r1, r3
 80057ca:	481f      	ldr	r0, [pc, #124]	@ (8005848 <MX_TIM3_Init+0xd0>)
 80057cc:	f015 fbf6 	bl	801afbc <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 80057d0:	481d      	ldr	r0, [pc, #116]	@ (8005848 <MX_TIM3_Init+0xd0>)
 80057d2:	f7ff fbaf 	bl	8004f34 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 80057d6:	2110      	movs	r1, #16
 80057d8:	481b      	ldr	r0, [pc, #108]	@ (8005848 <MX_TIM3_Init+0xd0>)
 80057da:	f7ff fc4f 	bl	800507c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80057de:	2360      	movs	r3, #96	@ 0x60
 80057e0:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80057e2:	2300      	movs	r3, #0
 80057e4:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80057ee:	2300      	movs	r3, #0
 80057f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80057f2:	f107 031c 	add.w	r3, r7, #28
 80057f6:	461a      	mov	r2, r3
 80057f8:	2110      	movs	r1, #16
 80057fa:	4813      	ldr	r0, [pc, #76]	@ (8005848 <MX_TIM3_Init+0xd0>)
 80057fc:	f015 fc80 	bl	801b100 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8005800:	2110      	movs	r1, #16
 8005802:	4811      	ldr	r0, [pc, #68]	@ (8005848 <MX_TIM3_Init+0xd0>)
 8005804:	f7ff fbe2 	bl	8004fcc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8005808:	2100      	movs	r1, #0
 800580a:	480f      	ldr	r0, [pc, #60]	@ (8005848 <MX_TIM3_Init+0xd0>)
 800580c:	f7ff fe48 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8005810:	480d      	ldr	r0, [pc, #52]	@ (8005848 <MX_TIM3_Init+0xd0>)
 8005812:	f7ff fe6d 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8005816:	2002      	movs	r0, #2
 8005818:	f7ff fb34 	bl	8004e84 <LL_AHB2_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800581c:	2320      	movs	r3, #32
 800581e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005820:	2302      	movs	r3, #2
 8005822:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005828:	2300      	movs	r3, #0
 800582a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8005830:	2302      	movs	r3, #2
 8005832:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005834:	1d3b      	adds	r3, r7, #4
 8005836:	4619      	mov	r1, r3
 8005838:	4804      	ldr	r0, [pc, #16]	@ (800584c <MX_TIM3_Init+0xd4>)
 800583a:	f014 ff84 	bl	801a746 <LL_GPIO_Init>

}
 800583e:	bf00      	nop
 8005840:	3750      	adds	r7, #80	@ 0x50
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	40000400 	.word	0x40000400
 800584c:	48000400 	.word	0x48000400

08005850 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005856:	1d3b      	adds	r3, r7, #4
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	605a      	str	r2, [r3, #4]
 800585e:	609a      	str	r2, [r3, #8]
 8005860:	60da      	str	r2, [r3, #12]
 8005862:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8005864:	2004      	movs	r0, #4
 8005866:	f7ff fb25 	bl	8004eb4 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800586a:	f7ff fa81 	bl	8004d70 <__NVIC_GetPriorityGrouping>
 800586e:	4603      	mov	r3, r0
 8005870:	2200      	movs	r2, #0
 8005872:	2100      	movs	r1, #0
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fad1 	bl	8004e1c <NVIC_EncodePriority>
 800587a:	4603      	mov	r3, r0
 800587c:	4619      	mov	r1, r3
 800587e:	201e      	movs	r0, #30
 8005880:	f7ff faa2 	bl	8004dc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8005884:	201e      	movs	r0, #30
 8005886:	f7ff fa81 	bl	8004d8c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 169;
 800588a:	23a9      	movs	r3, #169	@ 0xa9
 800588c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800588e:	2300      	movs	r3, #0
 8005890:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8005892:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8005896:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005898:	2300      	movs	r3, #0
 800589a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 800589c:	1d3b      	adds	r3, r7, #4
 800589e:	4619      	mov	r1, r3
 80058a0:	480a      	ldr	r0, [pc, #40]	@ (80058cc <MX_TIM4_Init+0x7c>)
 80058a2:	f015 fb8b 	bl	801afbc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80058a6:	4809      	ldr	r0, [pc, #36]	@ (80058cc <MX_TIM4_Init+0x7c>)
 80058a8:	f7ff fb54 	bl	8004f54 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 80058ac:	2100      	movs	r1, #0
 80058ae:	4807      	ldr	r0, [pc, #28]	@ (80058cc <MX_TIM4_Init+0x7c>)
 80058b0:	f7ff fdcc 	bl	800544c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 80058b4:	2100      	movs	r1, #0
 80058b6:	4805      	ldr	r0, [pc, #20]	@ (80058cc <MX_TIM4_Init+0x7c>)
 80058b8:	f7ff fdf2 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80058bc:	4803      	ldr	r0, [pc, #12]	@ (80058cc <MX_TIM4_Init+0x7c>)
 80058be:	f7ff fe17 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80058c2:	bf00      	nop
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40000800 	.word	0x40000800

080058d0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08c      	sub	sp, #48	@ 0x30
 80058d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80058d6:	f107 031c 	add.w	r3, r7, #28
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	605a      	str	r2, [r3, #4]
 80058e0:	609a      	str	r2, [r3, #8]
 80058e2:	60da      	str	r2, [r3, #12]
 80058e4:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058e6:	1d3b      	adds	r3, r7, #4
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	605a      	str	r2, [r3, #4]
 80058ee:	609a      	str	r2, [r3, #8]
 80058f0:	60da      	str	r2, [r3, #12]
 80058f2:	611a      	str	r2, [r3, #16]
 80058f4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80058f6:	2008      	movs	r0, #8
 80058f8:	f7ff fadc 	bl	8004eb4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80058fc:	2001      	movs	r0, #1
 80058fe:	f7ff fac1 	bl	8004e84 <LL_AHB2_GRP1_EnableClock>
  /**TIM5 GPIO Configuration
  PA0   ------> TIM5_CH1
  PA1   ------> TIM5_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8005902:	2301      	movs	r3, #1
 8005904:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005906:	2302      	movs	r3, #2
 8005908:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800590e:	2300      	movs	r3, #0
 8005910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8005916:	2302      	movs	r3, #2
 8005918:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800591a:	1d3b      	adds	r3, r7, #4
 800591c:	4619      	mov	r1, r3
 800591e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005922:	f014 ff10 	bl	801a746 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8005926:	2302      	movs	r3, #2
 8005928:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800592a:	2302      	movs	r3, #2
 800592c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005932:	2300      	movs	r3, #0
 8005934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005936:	2300      	movs	r3, #0
 8005938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800593a:	2302      	movs	r3, #2
 800593c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800593e:	1d3b      	adds	r3, r7, #4
 8005940:	4619      	mov	r1, r3
 8005942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005946:	f014 fefe 	bl	801a746 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800594e:	2300      	movs	r3, #0
 8005950:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8005952:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005956:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005958:	2300      	movs	r3, #0
 800595a:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 800595c:	f107 031c 	add.w	r3, r7, #28
 8005960:	4619      	mov	r1, r3
 8005962:	481f      	ldr	r0, [pc, #124]	@ (80059e0 <MX_TIM5_Init+0x110>)
 8005964:	f015 fb2a 	bl	801afbc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8005968:	481d      	ldr	r0, [pc, #116]	@ (80059e0 <MX_TIM5_Init+0x110>)
 800596a:	f7ff faf3 	bl	8004f54 <LL_TIM_DisableARRPreload>
  LL_TIM_SetEncoderMode(TIM5, LL_TIM_ENCODERMODE_X4_TI12);
 800596e:	2103      	movs	r1, #3
 8005970:	481b      	ldr	r0, [pc, #108]	@ (80059e0 <MX_TIM5_Init+0x110>)
 8005972:	f7ff fd80 	bl	8005476 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM5, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8005976:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800597a:	2101      	movs	r1, #1
 800597c:	4818      	ldr	r0, [pc, #96]	@ (80059e0 <MX_TIM5_Init+0x110>)
 800597e:	f7ff fbef 	bl	8005160 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM5, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8005982:	2200      	movs	r2, #0
 8005984:	2101      	movs	r1, #1
 8005986:	4816      	ldr	r0, [pc, #88]	@ (80059e0 <MX_TIM5_Init+0x110>)
 8005988:	f7ff fc4a 	bl	8005220 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM5, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 800598c:	2200      	movs	r2, #0
 800598e:	2101      	movs	r1, #1
 8005990:	4813      	ldr	r0, [pc, #76]	@ (80059e0 <MX_TIM5_Init+0x110>)
 8005992:	f7ff fca5 	bl	80052e0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM5, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8005996:	2200      	movs	r2, #0
 8005998:	2101      	movs	r1, #1
 800599a:	4811      	ldr	r0, [pc, #68]	@ (80059e0 <MX_TIM5_Init+0x110>)
 800599c:	f7ff fd00 	bl	80053a0 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM5, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80059a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80059a4:	2110      	movs	r1, #16
 80059a6:	480e      	ldr	r0, [pc, #56]	@ (80059e0 <MX_TIM5_Init+0x110>)
 80059a8:	f7ff fbda 	bl	8005160 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM5, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 80059ac:	2200      	movs	r2, #0
 80059ae:	2110      	movs	r1, #16
 80059b0:	480b      	ldr	r0, [pc, #44]	@ (80059e0 <MX_TIM5_Init+0x110>)
 80059b2:	f7ff fc35 	bl	8005220 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM5, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 80059b6:	2200      	movs	r2, #0
 80059b8:	2110      	movs	r1, #16
 80059ba:	4809      	ldr	r0, [pc, #36]	@ (80059e0 <MX_TIM5_Init+0x110>)
 80059bc:	f7ff fc90 	bl	80052e0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM5, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 80059c0:	2200      	movs	r2, #0
 80059c2:	2110      	movs	r1, #16
 80059c4:	4806      	ldr	r0, [pc, #24]	@ (80059e0 <MX_TIM5_Init+0x110>)
 80059c6:	f7ff fceb 	bl	80053a0 <LL_TIM_IC_SetPolarity>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 80059ca:	2100      	movs	r1, #0
 80059cc:	4804      	ldr	r0, [pc, #16]	@ (80059e0 <MX_TIM5_Init+0x110>)
 80059ce:	f7ff fd67 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 80059d2:	4803      	ldr	r0, [pc, #12]	@ (80059e0 <MX_TIM5_Init+0x110>)
 80059d4:	f7ff fd8c 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80059d8:	bf00      	nop
 80059da:	3730      	adds	r7, #48	@ 0x30
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40000c00 	.word	0x40000c00

080059e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80059ea:	1d3b      	adds	r3, r7, #4
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	609a      	str	r2, [r3, #8]
 80059f4:	60da      	str	r2, [r3, #12]
 80059f6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 80059f8:	2010      	movs	r0, #16
 80059fa:	f7ff fa5b 	bl	8004eb4 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80059fe:	f7ff f9b7 	bl	8004d70 <__NVIC_GetPriorityGrouping>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2200      	movs	r2, #0
 8005a06:	2100      	movs	r1, #0
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7ff fa07 	bl	8004e1c <NVIC_EncodePriority>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	4619      	mov	r1, r3
 8005a12:	2036      	movs	r0, #54	@ 0x36
 8005a14:	f7ff f9d8 	bl	8004dc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005a18:	2036      	movs	r0, #54	@ 0x36
 8005a1a:	f7ff f9b7 	bl	8004d8c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 169;
 8005a1e:	23a9      	movs	r3, #169	@ 0xa9
 8005a20:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 249;
 8005a26:	23f9      	movs	r3, #249	@ 0xf9
 8005a28:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8005a2a:	1d3b      	adds	r3, r7, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4808      	ldr	r0, [pc, #32]	@ (8005a50 <MX_TIM6_Init+0x6c>)
 8005a30:	f015 fac4 	bl	801afbc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8005a34:	4806      	ldr	r0, [pc, #24]	@ (8005a50 <MX_TIM6_Init+0x6c>)
 8005a36:	f7ff fa8d 	bl	8004f54 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	4804      	ldr	r0, [pc, #16]	@ (8005a50 <MX_TIM6_Init+0x6c>)
 8005a3e:	f7ff fd2f 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8005a42:	4803      	ldr	r0, [pc, #12]	@ (8005a50 <MX_TIM6_Init+0x6c>)
 8005a44:	f7ff fd54 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005a48:	bf00      	nop
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	40001000 	.word	0x40001000

08005a54 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005a5a:	1d3b      	adds	r3, r7, #4
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	605a      	str	r2, [r3, #4]
 8005a62:	609a      	str	r2, [r3, #8]
 8005a64:	60da      	str	r2, [r3, #12]
 8005a66:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8005a68:	2020      	movs	r0, #32
 8005a6a:	f7ff fa23 	bl	8004eb4 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005a6e:	f7ff f97f 	bl	8004d70 <__NVIC_GetPriorityGrouping>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2200      	movs	r2, #0
 8005a76:	2100      	movs	r1, #0
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff f9cf 	bl	8004e1c <NVIC_EncodePriority>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	4619      	mov	r1, r3
 8005a82:	2037      	movs	r0, #55	@ 0x37
 8005a84:	f7ff f9a0 	bl	8004dc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8005a88:	2037      	movs	r0, #55	@ 0x37
 8005a8a:	f7ff f97f 	bl	8004d8c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 169;
 8005a8e:	23a9      	movs	r3, #169	@ 0xa9
 8005a90:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 249;
 8005a96:	23f9      	movs	r3, #249	@ 0xf9
 8005a98:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8005a9a:	1d3b      	adds	r3, r7, #4
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4808      	ldr	r0, [pc, #32]	@ (8005ac0 <MX_TIM7_Init+0x6c>)
 8005aa0:	f015 fa8c 	bl	801afbc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 8005aa4:	4806      	ldr	r0, [pc, #24]	@ (8005ac0 <MX_TIM7_Init+0x6c>)
 8005aa6:	f7ff fa55 	bl	8004f54 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8005aaa:	2100      	movs	r1, #0
 8005aac:	4804      	ldr	r0, [pc, #16]	@ (8005ac0 <MX_TIM7_Init+0x6c>)
 8005aae:	f7ff fcf7 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8005ab2:	4803      	ldr	r0, [pc, #12]	@ (8005ac0 <MX_TIM7_Init+0x6c>)
 8005ab4:	f7ff fd1c 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005ab8:	bf00      	nop
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40001400 	.word	0x40001400

08005ac4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b0a0      	sub	sp, #128	@ 0x80
 8005ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005aca:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	605a      	str	r2, [r3, #4]
 8005ad4:	609a      	str	r2, [r3, #8]
 8005ad6:	60da      	str	r2, [r3, #12]
 8005ad8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005ada:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005ade:	2220      	movs	r2, #32
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f018 fb4e 	bl	801e184 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8005ae8:	f107 031c 	add.w	r3, r7, #28
 8005aec:	2230      	movs	r2, #48	@ 0x30
 8005aee:	2100      	movs	r1, #0
 8005af0:	4618      	mov	r0, r3
 8005af2:	f018 fb47 	bl	801e184 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005af6:	1d3b      	adds	r3, r7, #4
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	605a      	str	r2, [r3, #4]
 8005afe:	609a      	str	r2, [r3, #8]
 8005b00:	60da      	str	r2, [r3, #12]
 8005b02:	611a      	str	r2, [r3, #16]
 8005b04:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8005b06:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005b0a:	f7ff f9eb 	bl	8004ee4 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005b14:	2300      	movs	r3, #0
 8005b16:	673b      	str	r3, [r7, #112]	@ 0x70
  TIM_InitStruct.Autoreload = 1699;
 8005b18:	f240 63a3 	movw	r3, #1699	@ 0x6a3
 8005b1c:	677b      	str	r3, [r7, #116]	@ 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	67bb      	str	r3, [r7, #120]	@ 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	67fb      	str	r3, [r7, #124]	@ 0x7c
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8005b26:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4836      	ldr	r0, [pc, #216]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005b2e:	f015 fa45 	bl	801afbc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 8005b32:	4835      	ldr	r0, [pc, #212]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005b34:	f7ff fa0e 	bl	8004f54 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH1);
 8005b38:	2101      	movs	r1, #1
 8005b3a:	4833      	ldr	r0, [pc, #204]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005b3c:	f7ff fa9e 	bl	800507c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005b40:	2360      	movs	r3, #96	@ 0x60
 8005b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005b44:	2300      	movs	r3, #0
 8005b46:	653b      	str	r3, [r7, #80]	@ 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	657b      	str	r3, [r7, #84]	@ 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005b50:	2300      	movs	r3, #0
 8005b52:	65fb      	str	r3, [r7, #92]	@ 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005b54:	2300      	movs	r3, #0
 8005b56:	663b      	str	r3, [r7, #96]	@ 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	667b      	str	r3, [r7, #100]	@ 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	66bb      	str	r3, [r7, #104]	@ 0x68
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005b60:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005b64:	461a      	mov	r2, r3
 8005b66:	2101      	movs	r1, #1
 8005b68:	4827      	ldr	r0, [pc, #156]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005b6a:	f015 fac9 	bl	801b100 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH1);
 8005b6e:	2101      	movs	r1, #1
 8005b70:	4825      	ldr	r0, [pc, #148]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005b72:	f7ff fa2b 	bl	8004fcc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 8005b76:	2100      	movs	r1, #0
 8005b78:	4823      	ldr	r0, [pc, #140]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005b7a:	f7ff fc91 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM8, LL_TIM_TRGO2_RESET);
 8005b7e:	2100      	movs	r1, #0
 8005b80:	4821      	ldr	r0, [pc, #132]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005b82:	f7ff fca2 	bl	80054ca <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8005b86:	4820      	ldr	r0, [pc, #128]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005b88:	f7ff fcb2 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8005b90:	2300      	movs	r3, #0
 8005b92:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8005b94:	2300      	movs	r3, #0
 8005b96:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	857b      	strh	r3, [r7, #42]	@ 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8005ba2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	633b      	str	r3, [r7, #48]	@ 0x30
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8005bac:	2300      	movs	r3, #0
 8005bae:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8005bb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8005bc6:	f107 031c 	add.w	r3, r7, #28
 8005bca:	4619      	mov	r1, r3
 8005bcc:	480e      	ldr	r0, [pc, #56]	@ (8005c08 <MX_TIM8_Init+0x144>)
 8005bce:	f015 faf7 	bl	801b1c0 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8005bd2:	2001      	movs	r0, #1
 8005bd4:	f7ff f956 	bl	8004e84 <LL_AHB2_GRP1_EnableClock>
    /**TIM8 GPIO Configuration
    PA15     ------> TIM8_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8005bd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005bde:	2302      	movs	r3, #2
 8005be0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8005bee:	2302      	movs	r3, #2
 8005bf0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bf2:	1d3b      	adds	r3, r7, #4
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005bfa:	f014 fda4 	bl	801a746 <LL_GPIO_Init>

}
 8005bfe:	bf00      	nop
 8005c00:	3780      	adds	r7, #128	@ 0x80
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	40013400 	.word	0x40013400

08005c0c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005c12:	1d3b      	adds	r3, r7, #4
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	605a      	str	r2, [r3, #4]
 8005c1a:	609a      	str	r2, [r3, #8]
 8005c1c:	60da      	str	r2, [r3, #12]
 8005c1e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM15);
 8005c20:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005c24:	f7ff f95e 	bl	8004ee4 <LL_APB2_GRP1_EnableClock>

  /* TIM15 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005c28:	f7ff f8a2 	bl	8004d70 <__NVIC_GetPriorityGrouping>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2100      	movs	r1, #0
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff f8f2 	bl	8004e1c <NVIC_EncodePriority>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	2018      	movs	r0, #24
 8005c3e:	f7ff f8c3 	bl	8004dc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005c42:	2018      	movs	r0, #24
 8005c44:	f7ff f8a2 	bl	8004d8c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  TIM_InitStruct.Prescaler = 169;
 8005c48:	23a9      	movs	r3, #169	@ 0xa9
 8005c4a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 9999;
 8005c50:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c54:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005c56:	2300      	movs	r3, #0
 8005c58:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM15, &TIM_InitStruct);
 8005c5e:	1d3b      	adds	r3, r7, #4
 8005c60:	4619      	mov	r1, r3
 8005c62:	480a      	ldr	r0, [pc, #40]	@ (8005c8c <MX_TIM15_Init+0x80>)
 8005c64:	f015 f9aa 	bl	801afbc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM15);
 8005c68:	4808      	ldr	r0, [pc, #32]	@ (8005c8c <MX_TIM15_Init+0x80>)
 8005c6a:	f7ff f973 	bl	8004f54 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM15, LL_TIM_CLOCKSOURCE_INTERNAL);
 8005c6e:	2100      	movs	r1, #0
 8005c70:	4806      	ldr	r0, [pc, #24]	@ (8005c8c <MX_TIM15_Init+0x80>)
 8005c72:	f7ff fbeb 	bl	800544c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM15, LL_TIM_TRGO_RESET);
 8005c76:	2100      	movs	r1, #0
 8005c78:	4804      	ldr	r0, [pc, #16]	@ (8005c8c <MX_TIM15_Init+0x80>)
 8005c7a:	f7ff fc11 	bl	80054a0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM15);
 8005c7e:	4803      	ldr	r0, [pc, #12]	@ (8005c8c <MX_TIM15_Init+0x80>)
 8005c80:	f7ff fc36 	bl	80054f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8005c84:	bf00      	nop
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40014000 	.word	0x40014000

08005c90 <TIMER_init>:

/* USER CODE BEGIN 1 */
void TIMER_init(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
  //sensor gyro
  LL_TIM_EnableIT_UPDATE(TIM6);
 8005c94:	481c      	ldr	r0, [pc, #112]	@ (8005d08 <TIMER_init+0x78>)
 8005c96:	f7ff fc4b 	bl	8005530 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 8005c9a:	481b      	ldr	r0, [pc, #108]	@ (8005d08 <TIMER_init+0x78>)
 8005c9c:	f7ff f93a 	bl	8004f14 <LL_TIM_EnableCounter>
  //wall sensor
  LL_TIM_EnableIT_UPDATE(TIM7);
 8005ca0:	481a      	ldr	r0, [pc, #104]	@ (8005d0c <TIMER_init+0x7c>)
 8005ca2:	f7ff fc45 	bl	8005530 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM7);
 8005ca6:	4819      	ldr	r0, [pc, #100]	@ (8005d0c <TIMER_init+0x7c>)
 8005ca8:	f7ff f934 	bl	8004f14 <LL_TIM_EnableCounter>
  //batt_LV
  LL_TIM_EnableIT_UPDATE(TIM15);
 8005cac:	4818      	ldr	r0, [pc, #96]	@ (8005d10 <TIMER_init+0x80>)
 8005cae:	f7ff fc3f 	bl	8005530 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM15);
 8005cb2:	4817      	ldr	r0, [pc, #92]	@ (8005d10 <TIMER_init+0x80>)
 8005cb4:	f7ff f92e 	bl	8004f14 <LL_TIM_EnableCounter>

  //encoder
  LL_TIM_EnableCounter(TIM1);
 8005cb8:	4816      	ldr	r0, [pc, #88]	@ (8005d14 <TIMER_init+0x84>)
 8005cba:	f7ff f92b 	bl	8004f14 <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM5);
 8005cbe:	4816      	ldr	r0, [pc, #88]	@ (8005d18 <TIMER_init+0x88>)
 8005cc0:	f7ff f928 	bl	8004f14 <LL_TIM_EnableCounter>
  //motor
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8005cc4:	2110      	movs	r1, #16
 8005cc6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005cca:	f7ff f96d 	bl	8004fa8 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM2);
 8005cce:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005cd2:	f7ff f91f 	bl	8004f14 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH2);
 8005cd6:	2110      	movs	r1, #16
 8005cd8:	4810      	ldr	r0, [pc, #64]	@ (8005d1c <TIMER_init+0x8c>)
 8005cda:	f7ff f965 	bl	8004fa8 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM3);
 8005cde:	480f      	ldr	r0, [pc, #60]	@ (8005d1c <TIMER_init+0x8c>)
 8005ce0:	f7ff f918 	bl	8004f14 <LL_TIM_EnableCounter>
  //fan
  LL_TIM_EnableAllOutputs(TIM8);
 8005ce4:	480e      	ldr	r0, [pc, #56]	@ (8005d20 <TIMER_init+0x90>)
 8005ce6:	f7ff fc13 	bl	8005510 <LL_TIM_EnableAllOutputs>
  LL_TIM_CC_EnableChannel(TIM8, LL_TIM_CHANNEL_CH1);
 8005cea:	2101      	movs	r1, #1
 8005cec:	480c      	ldr	r0, [pc, #48]	@ (8005d20 <TIMER_init+0x90>)
 8005cee:	f7ff f95b 	bl	8004fa8 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM8);
 8005cf2:	480b      	ldr	r0, [pc, #44]	@ (8005d20 <TIMER_init+0x90>)
 8005cf4:	f7ff f90e 	bl	8004f14 <LL_TIM_EnableCounter>
  //ctrl
  LL_TIM_EnableIT_UPDATE(TIM4);
 8005cf8:	480a      	ldr	r0, [pc, #40]	@ (8005d24 <TIMER_init+0x94>)
 8005cfa:	f7ff fc19 	bl	8005530 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM4);
 8005cfe:	4809      	ldr	r0, [pc, #36]	@ (8005d24 <TIMER_init+0x94>)
 8005d00:	f7ff f908 	bl	8004f14 <LL_TIM_EnableCounter>
}
 8005d04:	bf00      	nop
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	40001000 	.word	0x40001000
 8005d0c:	40001400 	.word	0x40001400
 8005d10:	40014000 	.word	0x40014000
 8005d14:	40012c00 	.word	0x40012c00
 8005d18:	40000c00 	.word	0x40000c00
 8005d1c:	40000400 	.word	0x40000400
 8005d20:	40013400 	.word	0x40013400
 8005d24:	40000800 	.word	0x40000800

08005d28 <Enable_TIM2>:

void Enable_TIM2(void){
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
  LL_TIM_EnableCounter(TIM2);
 8005d2c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005d30:	f7ff f8f0 	bl	8004f14 <LL_TIM_EnableCounter>
}
 8005d34:	bf00      	nop
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <Enable_TIM3>:

void Disable_TIM2(void){
  LL_TIM_DisableCounter(TIM2);
}

void Enable_TIM3(void){
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  LL_TIM_EnableCounter(TIM3);
 8005d3c:	4802      	ldr	r0, [pc, #8]	@ (8005d48 <Enable_TIM3+0x10>)
 8005d3e:	f7ff f8e9 	bl	8004f14 <LL_TIM_EnableCounter>
}
 8005d42:	bf00      	nop
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	40000400 	.word	0x40000400
 8005d4c:	00000000 	.word	0x00000000

08005d50 <Set_DutyTIM2>:

void Disable_TIM5(void){
  LL_TIM_DisableCounter(TIM5);
}

void Set_DutyTIM2(uint16_t duty){
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	4603      	mov	r3, r0
 8005d58:	80fb      	strh	r3, [r7, #6]
  uint16_t compare = (float)duty/1000.0*1699.0;
 8005d5a:	88fb      	ldrh	r3, [r7, #6]
 8005d5c:	ee07 3a90 	vmov	s15, r3
 8005d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d64:	ee17 0a90 	vmov	r0, s15
 8005d68:	f7fa fc16 	bl	8000598 <__aeabi_f2d>
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	4b15      	ldr	r3, [pc, #84]	@ (8005dc8 <Set_DutyTIM2+0x78>)
 8005d72:	f7fa fd93 	bl	800089c <__aeabi_ddiv>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	a310      	add	r3, pc, #64	@ (adr r3, 8005dc0 <Set_DutyTIM2+0x70>)
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	f7fa fc60 	bl	8000648 <__aeabi_dmul>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	4619      	mov	r1, r3
 8005d90:	f7fa ff32 	bl	8000bf8 <__aeabi_d2uiz>
 8005d94:	4603      	mov	r3, r0
 8005d96:	81fb      	strh	r3, [r7, #14]
  if(compare>1699){
 8005d98:	89fb      	ldrh	r3, [r7, #14]
 8005d9a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d902      	bls.n	8005da8 <Set_DutyTIM2+0x58>
    compare = 1699;
 8005da2:	f240 63a3 	movw	r3, #1699	@ 0x6a3
 8005da6:	81fb      	strh	r3, [r7, #14]
  }
  LL_TIM_OC_SetCompareCH2(TIM2,compare);
 8005da8:	89fb      	ldrh	r3, [r7, #14]
 8005daa:	4619      	mov	r1, r3
 8005dac:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8005db0:	f7ff f9c8 	bl	8005144 <LL_TIM_OC_SetCompareCH2>
}
 8005db4:	bf00      	nop
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	f3af 8000 	nop.w
 8005dc0:	00000000 	.word	0x00000000
 8005dc4:	409a8c00 	.word	0x409a8c00
 8005dc8:	408f4000 	.word	0x408f4000
 8005dcc:	00000000 	.word	0x00000000

08005dd0 <Set_DutyTIM3>:

void Set_DutyTIM3(uint16_t duty){
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	80fb      	strh	r3, [r7, #6]
  uint16_t compare = (float)duty/1000.0*1699.0;
 8005dda:	88fb      	ldrh	r3, [r7, #6]
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de4:	ee17 0a90 	vmov	r0, s15
 8005de8:	f7fa fbd6 	bl	8000598 <__aeabi_f2d>
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	4b15      	ldr	r3, [pc, #84]	@ (8005e48 <Set_DutyTIM3+0x78>)
 8005df2:	f7fa fd53 	bl	800089c <__aeabi_ddiv>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	a310      	add	r3, pc, #64	@ (adr r3, 8005e40 <Set_DutyTIM3+0x70>)
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f7fa fc20 	bl	8000648 <__aeabi_dmul>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	4619      	mov	r1, r3
 8005e10:	f7fa fef2 	bl	8000bf8 <__aeabi_d2uiz>
 8005e14:	4603      	mov	r3, r0
 8005e16:	81fb      	strh	r3, [r7, #14]
  if(compare>1699){
 8005e18:	89fb      	ldrh	r3, [r7, #14]
 8005e1a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d902      	bls.n	8005e28 <Set_DutyTIM3+0x58>
    compare = 1699;
 8005e22:	f240 63a3 	movw	r3, #1699	@ 0x6a3
 8005e26:	81fb      	strh	r3, [r7, #14]
  }
  LL_TIM_OC_SetCompareCH2(TIM3,compare);
 8005e28:	89fb      	ldrh	r3, [r7, #14]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4807      	ldr	r0, [pc, #28]	@ (8005e4c <Set_DutyTIM3+0x7c>)
 8005e2e:	f7ff f989 	bl	8005144 <LL_TIM_OC_SetCompareCH2>
}
 8005e32:	bf00      	nop
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	f3af 8000 	nop.w
 8005e40:	00000000 	.word	0x00000000
 8005e44:	409a8c00 	.word	0x409a8c00
 8005e48:	408f4000 	.word	0x408f4000
 8005e4c:	40000400 	.word	0x40000400

08005e50 <Clear_CounterTIM1>:
{
  LL_TIM_SetCounter(TIM3,0);
}

void Clear_CounterTIM1(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  LL_TIM_SetCounter(TIM1,ENC_RESET_VAL);
 8005e54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e58:	4802      	ldr	r0, [pc, #8]	@ (8005e64 <Clear_CounterTIM1+0x14>)
 8005e5a:	f7ff f88b 	bl	8004f74 <LL_TIM_SetCounter>
}
 8005e5e:	bf00      	nop
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40012c00 	.word	0x40012c00

08005e68 <Clear_CounterTIM5>:

void Clear_CounterTIM5(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
  LL_TIM_SetCounter(TIM5,ENC_RESET_VAL);
 8005e6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e70:	4802      	ldr	r0, [pc, #8]	@ (8005e7c <Clear_CounterTIM5+0x14>)
 8005e72:	f7ff f87f 	bl	8004f74 <LL_TIM_SetCounter>
}
 8005e76:	bf00      	nop
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40000c00 	.word	0x40000c00

08005e80 <Set_DutyTIM8>:

void Disable_TIM8(void){
  LL_TIM_DisableCounter(TIM8);
}

void Set_DutyTIM8(uint16_t duty){
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	4603      	mov	r3, r0
 8005e88:	80fb      	strh	r3, [r7, #6]
  uint16_t compare = (float)duty/1000.0*1699.0;
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	ee07 3a90 	vmov	s15, r3
 8005e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e94:	ee17 0a90 	vmov	r0, s15
 8005e98:	f7fa fb7e 	bl	8000598 <__aeabi_f2d>
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	4b15      	ldr	r3, [pc, #84]	@ (8005ef8 <Set_DutyTIM8+0x78>)
 8005ea2:	f7fa fcfb 	bl	800089c <__aeabi_ddiv>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4610      	mov	r0, r2
 8005eac:	4619      	mov	r1, r3
 8005eae:	a310      	add	r3, pc, #64	@ (adr r3, 8005ef0 <Set_DutyTIM8+0x70>)
 8005eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb4:	f7fa fbc8 	bl	8000648 <__aeabi_dmul>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	f7fa fe9a 	bl	8000bf8 <__aeabi_d2uiz>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	81fb      	strh	r3, [r7, #14]
  if(compare>1699){
 8005ec8:	89fb      	ldrh	r3, [r7, #14]
 8005eca:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d902      	bls.n	8005ed8 <Set_DutyTIM8+0x58>
    compare = 1699;
 8005ed2:	f240 63a3 	movw	r3, #1699	@ 0x6a3
 8005ed6:	81fb      	strh	r3, [r7, #14]
  }
  LL_TIM_OC_SetCompareCH1(TIM8,compare);
 8005ed8:	89fb      	ldrh	r3, [r7, #14]
 8005eda:	4619      	mov	r1, r3
 8005edc:	4807      	ldr	r0, [pc, #28]	@ (8005efc <Set_DutyTIM8+0x7c>)
 8005ede:	f7ff f923 	bl	8005128 <LL_TIM_OC_SetCompareCH1>
}
 8005ee2:	bf00      	nop
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	f3af 8000 	nop.w
 8005ef0:	00000000 	.word	0x00000000
 8005ef4:	409a8c00 	.word	0x409a8c00
 8005ef8:	408f4000 	.word	0x408f4000
 8005efc:	40013400 	.word	0x40013400

08005f00 <Get_CounterTIM1>:

uint16_t Get_CounterTIM1(void){
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  return LL_TIM_GetCounter(TIM1);
 8005f04:	4803      	ldr	r0, [pc, #12]	@ (8005f14 <Get_CounterTIM1+0x14>)
 8005f06:	f7ff f843 	bl	8004f90 <LL_TIM_GetCounter>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	b29b      	uxth	r3, r3
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	40012c00 	.word	0x40012c00

08005f18 <Get_CounterTIM5>:

uint16_t Get_CounterTIM5(void){
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
  return LL_TIM_GetCounter(TIM5);
 8005f1c:	4803      	ldr	r0, [pc, #12]	@ (8005f2c <Get_CounterTIM5+0x14>)
 8005f1e:	f7ff f837 	bl	8004f90 <LL_TIM_GetCounter>
 8005f22:	4603      	mov	r3, r0
 8005f24:	b29b      	uxth	r3, r3
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	40000c00 	.word	0x40000c00

08005f30 <LL_RCC_SetUSARTClockSource>:
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8005f38:	4b09      	ldr	r3, [pc, #36]	@ (8005f60 <LL_RCC_SetUSARTClockSource+0x30>)
 8005f3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	0c1b      	lsrs	r3, r3, #16
 8005f42:	43db      	mvns	r3, r3
 8005f44:	401a      	ands	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	4905      	ldr	r1, [pc, #20]	@ (8005f60 <LL_RCC_SetUSARTClockSource+0x30>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	40021000 	.word	0x40021000

08005f64 <LL_AHB2_GRP1_EnableClock>:
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005f6c:	4b08      	ldr	r3, [pc, #32]	@ (8005f90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005f6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f70:	4907      	ldr	r1, [pc, #28]	@ (8005f90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005f78:	4b05      	ldr	r3, [pc, #20]	@ (8005f90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005f7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005f82:	68fb      	ldr	r3, [r7, #12]
}
 8005f84:	bf00      	nop
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	40021000 	.word	0x40021000

08005f94 <LL_APB2_GRP1_EnableClock>:
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005f9c:	4b08      	ldr	r3, [pc, #32]	@ (8005fc0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005f9e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005fa0:	4907      	ldr	r1, [pc, #28]	@ (8005fc0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005fa8:	4b05      	ldr	r3, [pc, #20]	@ (8005fc0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005faa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4013      	ands	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	40021000 	.word	0x40021000

08005fc4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f043 0201 	orr.w	r2, r3, #1
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	601a      	str	r2, [r3, #0]
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8006004:	b480      	push	{r7}
 8006006:	b089      	sub	sp, #36	@ 0x24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3308      	adds	r3, #8
 8006012:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	60bb      	str	r3, [r7, #8]
   return(result);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	075b      	lsls	r3, r3, #29
 8006026:	4313      	orrs	r3, r2
 8006028:	61fb      	str	r3, [r7, #28]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3308      	adds	r3, #8
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	61ba      	str	r2, [r7, #24]
 8006032:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006034:	6979      	ldr	r1, [r7, #20]
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	e841 2300 	strex	r3, r2, [r1]
 800603c:	613b      	str	r3, [r7, #16]
   return(result);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1e4      	bne.n	800600e <LL_USART_SetTXFIFOThreshold+0xa>
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	3724      	adds	r7, #36	@ 0x24
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8006052:	b480      	push	{r7}
 8006054:	b089      	sub	sp, #36	@ 0x24
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3308      	adds	r3, #8
 8006060:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	60bb      	str	r3, [r7, #8]
   return(result);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	065b      	lsls	r3, r3, #25
 8006074:	4313      	orrs	r3, r2
 8006076:	61fb      	str	r3, [r7, #28]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3308      	adds	r3, #8
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	61ba      	str	r2, [r7, #24]
 8006080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006082:	6979      	ldr	r1, [r7, #20]
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	613b      	str	r3, [r7, #16]
   return(result);
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1e4      	bne.n	800605c <LL_USART_SetRXFIFOThreshold+0xa>
}
 8006092:	bf00      	nop
 8006094:	bf00      	nop
 8006096:	3724      	adds	r7, #36	@ 0x24
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	609a      	str	r2, [r3, #8]
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060dc:	2b80      	cmp	r3, #128	@ 0x80
 80060de:	d101      	bne.n	80060e4 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80060e0:	2301      	movs	r3, #1
 80060e2:	e000      	b.n	80060e6 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006102:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006106:	d101      	bne.n	800610c <LL_USART_IsActiveFlag_TEACK+0x1a>
 8006108:	2301      	movs	r3, #1
 800610a:	e000      	b.n	800610e <LL_USART_IsActiveFlag_TEACK+0x1c>
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800612a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800612e:	d101      	bne.n	8006134 <LL_USART_IsActiveFlag_REACK+0x1a>
 8006130:	2301      	movs	r3, #1
 8006132:	e000      	b.n	8006136 <LL_USART_IsActiveFlag_REACK+0x1c>
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	460b      	mov	r3, r1
 800614c:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800614e:	78fa      	ldrb	r2, [r7, #3]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08e      	sub	sp, #56	@ 0x38
 8006164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8006166:	f107 0318 	add.w	r3, r7, #24
 800616a:	2220      	movs	r2, #32
 800616c:	2100      	movs	r1, #0
 800616e:	4618      	mov	r0, r3
 8006170:	f018 f808 	bl	801e184 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006174:	463b      	mov	r3, r7
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	605a      	str	r2, [r3, #4]
 800617c:	609a      	str	r2, [r3, #8]
 800617e:	60da      	str	r2, [r3, #12]
 8006180:	611a      	str	r2, [r3, #16]
 8006182:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 8006184:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8006188:	f7ff fed2 	bl	8005f30 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800618c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006190:	f7ff ff00 	bl	8005f94 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006194:	2002      	movs	r0, #2
 8006196:	f7ff fee5 	bl	8005f64 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800619a:	2340      	movs	r3, #64	@ 0x40
 800619c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800619e:	2302      	movs	r3, #2
 80061a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80061aa:	2300      	movs	r3, #0
 80061ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80061ae:	2307      	movs	r3, #7
 80061b0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061b2:	463b      	mov	r3, r7
 80061b4:	4619      	mov	r1, r3
 80061b6:	4827      	ldr	r0, [pc, #156]	@ (8006254 <MX_USART1_UART_Init+0xf4>)
 80061b8:	f014 fac5 	bl	801a746 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80061bc:	2380      	movs	r3, #128	@ 0x80
 80061be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80061c0:	2302      	movs	r3, #2
 80061c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80061c4:	2300      	movs	r3, #0
 80061c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80061cc:	2300      	movs	r3, #0
 80061ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80061d0:	2307      	movs	r3, #7
 80061d2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061d4:	463b      	mov	r3, r7
 80061d6:	4619      	mov	r1, r3
 80061d8:	481e      	ldr	r0, [pc, #120]	@ (8006254 <MX_USART1_UART_Init+0xf4>)
 80061da:	f014 fab4 	bl	801a746 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80061de:	2300      	movs	r3, #0
 80061e0:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.BaudRate = 921600;
 80061e2:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 80061e6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80061e8:	2300      	movs	r3, #0
 80061ea:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80061ec:	2300      	movs	r3, #0
 80061ee:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80061f0:	2300      	movs	r3, #0
 80061f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80061f4:	230c      	movs	r3, #12
 80061f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80061f8:	2300      	movs	r3, #0
 80061fa:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80061fc:	2300      	movs	r3, #0
 80061fe:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8006200:	f107 0318 	add.w	r3, r7, #24
 8006204:	4619      	mov	r1, r3
 8006206:	4814      	ldr	r0, [pc, #80]	@ (8006258 <MX_USART1_UART_Init+0xf8>)
 8006208:	f015 fbee 	bl	801b9e8 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 800620c:	2100      	movs	r1, #0
 800620e:	4812      	ldr	r0, [pc, #72]	@ (8006258 <MX_USART1_UART_Init+0xf8>)
 8006210:	f7ff fef8 	bl	8006004 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8006214:	2100      	movs	r1, #0
 8006216:	4810      	ldr	r0, [pc, #64]	@ (8006258 <MX_USART1_UART_Init+0xf8>)
 8006218:	f7ff ff1b 	bl	8006052 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 800621c:	480e      	ldr	r0, [pc, #56]	@ (8006258 <MX_USART1_UART_Init+0xf8>)
 800621e:	f7ff fee1 	bl	8005fe4 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 8006222:	480d      	ldr	r0, [pc, #52]	@ (8006258 <MX_USART1_UART_Init+0xf8>)
 8006224:	f7ff ff3c 	bl	80060a0 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 8006228:	480b      	ldr	r0, [pc, #44]	@ (8006258 <MX_USART1_UART_Init+0xf8>)
 800622a:	f7ff fecb 	bl	8005fc4 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 800622e:	bf00      	nop
 8006230:	4809      	ldr	r0, [pc, #36]	@ (8006258 <MX_USART1_UART_Init+0xf8>)
 8006232:	f7ff ff5e 	bl	80060f2 <LL_USART_IsActiveFlag_TEACK>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0f9      	beq.n	8006230 <MX_USART1_UART_Init+0xd0>
 800623c:	4806      	ldr	r0, [pc, #24]	@ (8006258 <MX_USART1_UART_Init+0xf8>)
 800623e:	f7ff ff6c 	bl	800611a <LL_USART_IsActiveFlag_REACK>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0f3      	beq.n	8006230 <MX_USART1_UART_Init+0xd0>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006248:	bf00      	nop
 800624a:	bf00      	nop
 800624c:	3738      	adds	r7, #56	@ 0x38
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	48000400 	.word	0x48000400
 8006258:	40013800 	.word	0x40013800

0800625c <Communication_Initialize>:

/* USER CODE BEGIN 1 */
void Communication_Initialize(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
    setbuf(stdout,NULL);
 8006260:	4b04      	ldr	r3, [pc, #16]	@ (8006274 <Communication_Initialize+0x18>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	2100      	movs	r1, #0
 8006268:	4618      	mov	r0, r3
 800626a:	f017 fdd7 	bl	801de1c <setbuf>
}
 800626e:	bf00      	nop
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	2000003c 	.word	0x2000003c

08006278 <USART_TransmitByte>:

void USART_TransmitByte(uint8_t ch){
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	4603      	mov	r3, r0
 8006280:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART1,ch);
 8006282:	79fb      	ldrb	r3, [r7, #7]
 8006284:	4619      	mov	r1, r3
 8006286:	4807      	ldr	r0, [pc, #28]	@ (80062a4 <USART_TransmitByte+0x2c>)
 8006288:	f7ff ff5b 	bl	8006142 <LL_USART_TransmitData8>
	while(LL_USART_IsActiveFlag_TXE(USART1)==0);
 800628c:	bf00      	nop
 800628e:	4805      	ldr	r0, [pc, #20]	@ (80062a4 <USART_TransmitByte+0x2c>)
 8006290:	f7ff ff1c 	bl	80060cc <LL_USART_IsActiveFlag_TXE_TXFNF>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f9      	beq.n	800628e <USART_TransmitByte+0x16>
}
 800629a:	bf00      	nop
 800629c:	bf00      	nop
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	40013800 	.word	0x40013800

080062a8 <Get_NowSpeed>:
float	EscapeWait;

uint8_t	uc_DistControl;	//スラロームの前距離を伸ばして処理している箇所　意外と効いてる可能性あり


float Get_NowSpeed(void){
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
	return f_NowSpeed;
 80062ac:	4b04      	ldr	r3, [pc, #16]	@ (80062c0 <Get_NowSpeed+0x18>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	ee07 3a90 	vmov	s15, r3
}
 80062b4:	eeb0 0a67 	vmov.f32	s0, s15
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	20000370 	.word	0x20000370

080062c4 <Get_NowDist>:

float Get_NowDist(void){
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
	return f_NowDist;
 80062c8:	4b04      	ldr	r3, [pc, #16]	@ (80062dc <Get_NowDist+0x18>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	ee07 3a90 	vmov	s15, r3
}
 80062d0:	eeb0 0a67 	vmov.f32	s0, s15
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	20000394 	.word	0x20000394

080062e0 <Get_TrgtDist>:

float Get_TrgtDist(void){
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
	return f_TrgtDist;
 80062e4:	4b04      	ldr	r3, [pc, #16]	@ (80062f8 <Get_TrgtDist+0x18>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	ee07 3a90 	vmov	s15, r3
}
 80062ec:	eeb0 0a67 	vmov.f32	s0, s15
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	20000390 	.word	0x20000390

080062fc <Get_TrgtSpeed>:

float Get_TrgtSpeed(void){
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
	return f_TrgtSpeed;
 8006300:	4b04      	ldr	r3, [pc, #16]	@ (8006314 <Get_TrgtSpeed+0x18>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	ee07 3a90 	vmov	s15, r3
}
 8006308:	eeb0 0a67 	vmov.f32	s0, s15
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	20000374 	.word	0x20000374

08006318 <Set_TrgtSpeed>:

void Set_TrgtSpeed(float speed){
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	ed87 0a01 	vstr	s0, [r7, #4]
	f_TrgtSpeed = speed;
 8006322:	4a04      	ldr	r2, [pc, #16]	@ (8006334 <Set_TrgtSpeed+0x1c>)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6013      	str	r3, [r2, #0]
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	20000374 	.word	0x20000374

08006338 <Get_NowDistR>:

float Get_NowDistR(void){
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
	return f_NowDistR;
 800633c:	4b04      	ldr	r3, [pc, #16]	@ (8006350 <Get_NowDistR+0x18>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	ee07 3a90 	vmov	s15, r3
}
 8006344:	eeb0 0a67 	vmov.f32	s0, s15
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	20000398 	.word	0x20000398

08006354 <Get_NowAngle>:

float Get_NowAngle(void){
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
	return f_NowAngle;
 8006358:	4b04      	ldr	r3, [pc, #16]	@ (800636c <Get_NowAngle+0x18>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	ee07 3a90 	vmov	s15, r3
}
 8006360:	eeb0 0a67 	vmov.f32	s0, s15
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	200003d0 	.word	0x200003d0

08006370 <Get_TrgtAngle>:

float Get_TrgtAngle(void){
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
	return f_TrgtAngle;
 8006374:	4b04      	ldr	r3, [pc, #16]	@ (8006388 <Get_TrgtAngle+0x18>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	ee07 3a90 	vmov	s15, r3
}
 800637c:	eeb0 0a67 	vmov.f32	s0, s15
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	200003d4 	.word	0x200003d4

0800638c <Get_TrgtAngleS>:

float Get_TrgtAngleS(void){
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
	return f_TrgtAngleS;
 8006390:	4b04      	ldr	r3, [pc, #16]	@ (80063a4 <Get_TrgtAngleS+0x18>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	ee07 3a90 	vmov	s15, r3
}
 8006398:	eeb0 0a67 	vmov.f32	s0, s15
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	200003bc 	.word	0x200003bc

080063a8 <INTC_sys>:

void INTC_sys(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
	Msec_in++;					// msec
 80063ac:	4b14      	ldr	r3, [pc, #80]	@ (8006400 <INTC_sys+0x58>)
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3301      	adds	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	4b12      	ldr	r3, [pc, #72]	@ (8006400 <INTC_sys+0x58>)
 80063b8:	801a      	strh	r2, [r3, #0]
	if( Msec_in > 999 ){		// msec → sec
 80063ba:	4b11      	ldr	r3, [pc, #68]	@ (8006400 <INTC_sys+0x58>)
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063c4:	d309      	bcc.n	80063da <INTC_sys+0x32>
		Msec_in  = 0;
 80063c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006400 <INTC_sys+0x58>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	801a      	strh	r2, [r3, #0]
		Sec_in++;
 80063cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006404 <INTC_sys+0x5c>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	3301      	adds	r3, #1
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006404 <INTC_sys+0x5c>)
 80063d8:	701a      	strb	r2, [r3, #0]
	}
	if( Sec_in > 59 ){			// sec → min
 80063da:	4b0a      	ldr	r3, [pc, #40]	@ (8006404 <INTC_sys+0x5c>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b3b      	cmp	r3, #59	@ 0x3b
 80063e2:	d909      	bls.n	80063f8 <INTC_sys+0x50>
		Sec_in = 0;
 80063e4:	4b07      	ldr	r3, [pc, #28]	@ (8006404 <INTC_sys+0x5c>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	701a      	strb	r2, [r3, #0]
		Min_in++;
 80063ea:	4b07      	ldr	r3, [pc, #28]	@ (8006408 <INTC_sys+0x60>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	3301      	adds	r3, #1
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	4b04      	ldr	r3, [pc, #16]	@ (8006408 <INTC_sys+0x60>)
 80063f6:	701a      	strb	r2, [r3, #0]
	}

	CTRL_pol();
 80063f8:	f002 f912 	bl	8008620 <CTRL_pol>
}
 80063fc:	bf00      	nop
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20000214 	.word	0x20000214
 8006404:	20000216 	.word	0x20000216
 8006408:	20000217 	.word	0x20000217

0800640c <CTRL_sta>:

void CTRL_sta( void )
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
	uc_CtrlFlag = TRUE;
 8006410:	4b03      	ldr	r3, [pc, #12]	@ (8006420 <CTRL_sta+0x14>)
 8006412:	2201      	movs	r2, #1
 8006414:	701a      	strb	r2, [r3, #0]
}
 8006416:	bf00      	nop
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	20000348 	.word	0x20000348

08006424 <CTRL_stop>:

void CTRL_stop( void )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
	uc_CtrlFlag = FALSE;
 8006428:	4b05      	ldr	r3, [pc, #20]	@ (8006440 <CTRL_stop+0x1c>)
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
	DCM_brakeMot( DCM_R );		// ブレーキ
 800642e:	2000      	movs	r0, #0
 8006430:	f003 f988 	bl	8009744 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 8006434:	2001      	movs	r0, #1
 8006436:	f003 f985 	bl	8009744 <DCM_brakeMot>
}
 800643a:	bf00      	nop
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000348 	.word	0x20000348

08006444 <CTRL_clrData>:

void CTRL_clrData( void )
{
 8006444:	b480      	push	{r7}
 8006446:	af00      	add	r7, sp, #0
	f_NowAngle		= 0;						// [角度制御]   現在角度					（1[msec]毎に更新される）
	s_GyroVal		= 0;						// ジャイロ値クリア
	f_GyroNowAngle	= 0;							// ジャイロ値クリア
*/
	/* 目標値 */
	f_TrgtSpeed		= 0;						// [速度制御]   目標移動速度 [mm/s]			（1[msec]毎に更新される）
 8006448:	4b17      	ldr	r3, [pc, #92]	@ (80064a8 <CTRL_clrData+0x64>)
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	601a      	str	r2, [r3, #0]
	f_TrgtDist 		= 0;						// [距離制御]   目標移動距離				（1[msec]毎に更新される）
 8006450:	4b16      	ldr	r3, [pc, #88]	@ (80064ac <CTRL_clrData+0x68>)
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	601a      	str	r2, [r3, #0]
	f_TrgtAngleS	= 0;							// [角速度制御] 目標角速度 [rad/s]			（1[msec]毎に更新される）
 8006458:	4b15      	ldr	r3, [pc, #84]	@ (80064b0 <CTRL_clrData+0x6c>)
 800645a:	f04f 0200 	mov.w	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
	f_TrgtAngle		= 0;						// [角度制御]   目標角度					（1[msec]毎に更新される）
 8006460:	4b14      	ldr	r3, [pc, #80]	@ (80064b4 <CTRL_clrData+0x70>)
 8006462:	f04f 0200 	mov.w	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
	/* 制御データ */
//	f_SpeedErrSum	= 0;
//	f_DistErrSum 	= 0;						// [距離制御]   距離積分制御のサム値			（1[msec]毎に更新される）
//	f_AngleSErrSum	= 0;
//	f_AngleErrSum 	= 0;						// [角度制御]   角度積分制御のサム値			（1[msec]毎に更新される）
	f_ErrSpeedBuf	= 0;
 8006468:	4b13      	ldr	r3, [pc, #76]	@ (80064b8 <CTRL_clrData+0x74>)
 800646a:	f04f 0200 	mov.w	r2, #0
 800646e:	601a      	str	r2, [r3, #0]
	f_ErrDistBuf	= 0;						// [壁制御]     距離センサーエラー値のバッファ		（1[msec]毎に更新される）
 8006470:	4b12      	ldr	r3, [pc, #72]	@ (80064bc <CTRL_clrData+0x78>)
 8006472:	f04f 0200 	mov.w	r2, #0
 8006476:	601a      	str	r2, [r3, #0]
	f_ErrAngleSBuf  = 0;
 8006478:	4b11      	ldr	r3, [pc, #68]	@ (80064c0 <CTRL_clrData+0x7c>)
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	601a      	str	r2, [r3, #0]
	l_FrontSen_vErr		=0;
 8006480:	4b10      	ldr	r3, [pc, #64]	@ (80064c4 <CTRL_clrData+0x80>)
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
	l_FrontSen_OmegaErr		=0;
 8006486:	4b10      	ldr	r3, [pc, #64]	@ (80064c8 <CTRL_clrData+0x84>)
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
	f_ErrFrontSen_vBuf	= 0;
 800648c:	4b0f      	ldr	r3, [pc, #60]	@ (80064cc <CTRL_clrData+0x88>)
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
	f_ErrFrontSen_OmegaBuf	= 0;
 8006494:	4b0e      	ldr	r3, [pc, #56]	@ (80064d0 <CTRL_clrData+0x8c>)
 8006496:	f04f 0200 	mov.w	r2, #0
 800649a:	601a      	str	r2, [r3, #0]
}
 800649c:	bf00      	nop
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	20000374 	.word	0x20000374
 80064ac:	20000390 	.word	0x20000390
 80064b0:	200003bc 	.word	0x200003bc
 80064b4:	200003d4 	.word	0x200003d4
 80064b8:	20000378 	.word	0x20000378
 80064bc:	200003e0 	.word	0x200003e0
 80064c0:	200003c0 	.word	0x200003c0
 80064c4:	200003e4 	.word	0x200003e4
 80064c8:	200003e8 	.word	0x200003e8
 80064cc:	200003ec 	.word	0x200003ec
 80064d0:	200003f0 	.word	0x200003f0

080064d4 <CTRL_clrAngleErrSum>:

void CTRL_clrAngleErrSum(void){
 80064d4:	b480      	push	{r7}
 80064d6:	af00      	add	r7, sp, #0
	f_AngleErrSum = 0.0;
 80064d8:	4b06      	ldr	r3, [pc, #24]	@ (80064f4 <CTRL_clrAngleErrSum+0x20>)
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	601a      	str	r2, [r3, #0]
	f_AngleSErrSum = 0.0;
 80064e0:	4b05      	ldr	r3, [pc, #20]	@ (80064f8 <CTRL_clrAngleErrSum+0x24>)
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]
}
 80064e8:	bf00      	nop
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	200003d8 	.word	0x200003d8
 80064f8:	200003c4 	.word	0x200003c4

080064fc <CTRL_clrSpeedErrSum>:

void CTRL_clrSpeedErrSum(void){
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
	f_SpeedErrSum	= 0;
 8006500:	4b06      	ldr	r3, [pc, #24]	@ (800651c <CTRL_clrSpeedErrSum+0x20>)
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	601a      	str	r2, [r3, #0]
	f_DistErrSum 	= 0;
 8006508:	4b05      	ldr	r3, [pc, #20]	@ (8006520 <CTRL_clrSpeedErrSum+0x24>)
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	601a      	str	r2, [r3, #0]
}
 8006510:	bf00      	nop
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	2000037c 	.word	0x2000037c
 8006520:	200003a0 	.word	0x200003a0

08006524 <CTRL_clrNowData>:

void CTRL_clrNowData(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
	ENC_clr();
 8006528:	f003 f96a 	bl	8009800 <ENC_clr>
	l_CntR			= 0;						// カウンタクリア
 800652c:	4b11      	ldr	r3, [pc, #68]	@ (8006574 <CTRL_clrNowData+0x50>)
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
	l_CntL			= 0;						// カウンタクリア
 8006532:	4b11      	ldr	r3, [pc, #68]	@ (8006578 <CTRL_clrNowData+0x54>)
 8006534:	2200      	movs	r2, #0
 8006536:	601a      	str	r2, [r3, #0]

	/* 現在値 */
	f_NowDist 		= 0;						// 移動距離リセット
 8006538:	4b10      	ldr	r3, [pc, #64]	@ (800657c <CTRL_clrNowData+0x58>)
 800653a:	f04f 0200 	mov.w	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
	f_NowDistR 		= 0;
 8006540:	4b0f      	ldr	r3, [pc, #60]	@ (8006580 <CTRL_clrNowData+0x5c>)
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	601a      	str	r2, [r3, #0]
	f_NowDistL 		= 0;
 8006548:	4b0e      	ldr	r3, [pc, #56]	@ (8006584 <CTRL_clrNowData+0x60>)
 800654a:	f04f 0200 	mov.w	r2, #0
 800654e:	601a      	str	r2, [r3, #0]
	f_NowSpeed		= 0;						// [速度制御]   現在の速度 [mm/s]			（1[msec]毎に更新される）
 8006550:	4b0d      	ldr	r3, [pc, #52]	@ (8006588 <CTRL_clrNowData+0x64>)
 8006552:	f04f 0200 	mov.w	r2, #0
 8006556:	601a      	str	r2, [r3, #0]
	f_NowAngle		= 0;						// [角度制御]   現在角度					（1[msec]毎に更新される）
 8006558:	4b0c      	ldr	r3, [pc, #48]	@ (800658c <CTRL_clrNowData+0x68>)
 800655a:	f04f 0200 	mov.w	r2, #0
 800655e:	601a      	str	r2, [r3, #0]
	s_GyroVal		= 0;						// ジャイロ値クリア
 8006560:	4b0b      	ldr	r3, [pc, #44]	@ (8006590 <CTRL_clrNowData+0x6c>)
 8006562:	2200      	movs	r2, #0
 8006564:	801a      	strh	r2, [r3, #0]
	f_GyroNowAngle	= 0;							// ジャイロ値クリア
 8006566:	4b0b      	ldr	r3, [pc, #44]	@ (8006594 <CTRL_clrNowData+0x70>)
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	601a      	str	r2, [r3, #0]
}
 800656e:	bf00      	nop
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	2000034c 	.word	0x2000034c
 8006578:	20000350 	.word	0x20000350
 800657c:	20000394 	.word	0x20000394
 8006580:	20000398 	.word	0x20000398
 8006584:	2000039c 	.word	0x2000039c
 8006588:	20000370 	.word	0x20000370
 800658c:	200003d0 	.word	0x200003d0
 8006590:	20000402 	.word	0x20000402
 8006594:	20000404 	.word	0x20000404

08006598 <CTRL_setNowData_Err>:

void CTRL_setNowData_Err(/*float trgtDist, */float trgtAngle)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	ed87 0a01 	vstr	s0, [r7, #4]
	ENC_clr();
 80065a2:	f003 f92d 	bl	8009800 <ENC_clr>
	l_CntR			= 0;						// カウンタクリア
 80065a6:	4b15      	ldr	r3, [pc, #84]	@ (80065fc <CTRL_setNowData_Err+0x64>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]
	l_CntL			= 0;						// カウンタクリア
 80065ac:	4b14      	ldr	r3, [pc, #80]	@ (8006600 <CTRL_setNowData_Err+0x68>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]

	/* 現在値 */
	f_NowDist 		= 0;//f_NowDist - trgtDist;//本来こっちにしたいが妥協						// 移動距離リセット
 80065b2:	4b14      	ldr	r3, [pc, #80]	@ (8006604 <CTRL_setNowData_Err+0x6c>)
 80065b4:	f04f 0200 	mov.w	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
	f_NowDistR 		= 0;
 80065ba:	4b13      	ldr	r3, [pc, #76]	@ (8006608 <CTRL_setNowData_Err+0x70>)
 80065bc:	f04f 0200 	mov.w	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]
	f_NowDistL 		= 0;
 80065c2:	4b12      	ldr	r3, [pc, #72]	@ (800660c <CTRL_setNowData_Err+0x74>)
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	601a      	str	r2, [r3, #0]
	f_NowSpeed		= 0;						// [速度制御]   現在の速度 [mm/s]			（1[msec]毎に更新される）
 80065ca:	4b11      	ldr	r3, [pc, #68]	@ (8006610 <CTRL_setNowData_Err+0x78>)
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]
	f_NowAngle		= f_NowAngle - trgtAngle;						// [角度制御]   現在角度					（1[msec]毎に更新される）
 80065d2:	4b10      	ldr	r3, [pc, #64]	@ (8006614 <CTRL_setNowData_Err+0x7c>)
 80065d4:	ed93 7a00 	vldr	s14, [r3]
 80065d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80065dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006614 <CTRL_setNowData_Err+0x7c>)
 80065e2:	edc3 7a00 	vstr	s15, [r3]
	s_GyroVal		= 0;						// ジャイロ値クリア
 80065e6:	4b0c      	ldr	r3, [pc, #48]	@ (8006618 <CTRL_setNowData_Err+0x80>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	801a      	strh	r2, [r3, #0]
	f_GyroNowAngle	= 0;							// ジャイロ値クリア
 80065ec:	4b0b      	ldr	r3, [pc, #44]	@ (800661c <CTRL_setNowData_Err+0x84>)
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
}
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	2000034c 	.word	0x2000034c
 8006600:	20000350 	.word	0x20000350
 8006604:	20000394 	.word	0x20000394
 8006608:	20000398 	.word	0x20000398
 800660c:	2000039c 	.word	0x2000039c
 8006610:	20000370 	.word	0x20000370
 8006614:	200003d0 	.word	0x200003d0
 8006618:	20000402 	.word	0x20000402
 800661c:	20000404 	.word	0x20000404

08006620 <CTRL_setData>:

void CTRL_setData( stCTRL_DATA* p_data )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
	/* 制御方法 */
	en_Type					= p_data->en_ctrl_type;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	781a      	ldrb	r2, [r3, #0]
 800662c:	4b31      	ldr	r3, [pc, #196]	@ (80066f4 <CTRL_setData+0xd4>)
 800662e:	701a      	strb	r2, [r3, #0]

	f_Jerk					= p_data->f_ctrl_jerk;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	4a30      	ldr	r2, [pc, #192]	@ (80066f8 <CTRL_setData+0xd8>)
 8006636:	6013      	str	r3, [r2, #0]

	f_TrgtAcc				= p_data->f_ctrl_nowAcc;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	4a2f      	ldr	r2, [pc, #188]	@ (80066fc <CTRL_setData+0xdc>)
 800663e:	6013      	str	r3, [r2, #0]
	f_BaseAcc				= p_data->f_ctrl_nowAcc;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	4a2e      	ldr	r2, [pc, #184]	@ (8006700 <CTRL_setData+0xe0>)
 8006646:	6013      	str	r3, [r2, #0]
	f_LastAcc				= p_data->f_ctrl_trgtAcc;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	4a2d      	ldr	r2, [pc, #180]	@ (8006704 <CTRL_setData+0xe4>)
 800664e:	6013      	str	r3, [r2, #0]

	/* 速度制御 */
//	f_TrgtAcc 				= p_data->f_ctrl_acc;
	f_TrgtSpeed				= p_data->f_ctrl_now;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	4a2c      	ldr	r2, [pc, #176]	@ (8006708 <CTRL_setData+0xe8>)
 8006656:	6013      	str	r3, [r2, #0]
	f_BaseSpeed				= p_data->f_ctrl_now;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	4a2b      	ldr	r2, [pc, #172]	@ (800670c <CTRL_setData+0xec>)
 800665e:	6013      	str	r3, [r2, #0]
	f_LastSpeed				= p_data->f_ctrl_trgt;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	4a2a      	ldr	r2, [pc, #168]	@ (8006710 <CTRL_setData+0xf0>)
 8006666:	6013      	str	r3, [r2, #0]

	/* 距離制御 */
	f_TrgtDist				= p_data->f_ctrl_nowDist;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	4a29      	ldr	r2, [pc, #164]	@ (8006714 <CTRL_setData+0xf4>)
 800666e:	6013      	str	r3, [r2, #0]
	f_BaseDist 				= p_data->f_ctrl_nowDist;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	4a28      	ldr	r2, [pc, #160]	@ (8006718 <CTRL_setData+0xf8>)
 8006676:	6013      	str	r3, [r2, #0]
	f_LastDist 				= p_data->f_ctrl_dist;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	4a27      	ldr	r2, [pc, #156]	@ (800671c <CTRL_setData+0xfc>)
 800667e:	6013      	str	r3, [r2, #0]

	//角加速度
	f_JerkAngle				= p_data->f_ctrl_jerkAngle;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006684:	4a26      	ldr	r2, [pc, #152]	@ (8006720 <CTRL_setData+0x100>)
 8006686:	6013      	str	r3, [r2, #0]
	f_TrgtAccAngle			= p_data->f_ctrl_nowAccAngle;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668c:	4a25      	ldr	r2, [pc, #148]	@ (8006724 <CTRL_setData+0x104>)
 800668e:	6013      	str	r3, [r2, #0]
	f_BaseAccAngle			= p_data->f_ctrl_nowAccAngle;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006694:	4a24      	ldr	r2, [pc, #144]	@ (8006728 <CTRL_setData+0x108>)
 8006696:	6013      	str	r3, [r2, #0]
	f_LastAccAngle			= p_data->f_ctrl_trgtAccAngle;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669c:	4a23      	ldr	r2, [pc, #140]	@ (800672c <CTRL_setData+0x10c>)
 800669e:	6013      	str	r3, [r2, #0]

	/* 角速度制御 */
//	f_AccAngleS 			= p_data->f_ctrl_accAngleS;
	f_TrgtAngleS			= p_data->f_ctrl_nowAngleS;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a4:	4a22      	ldr	r2, [pc, #136]	@ (8006730 <CTRL_setData+0x110>)
 80066a6:	6013      	str	r3, [r2, #0]
	f_BaseAngleS			= p_data->f_ctrl_nowAngleS;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ac:	4a21      	ldr	r2, [pc, #132]	@ (8006734 <CTRL_setData+0x114>)
 80066ae:	6013      	str	r3, [r2, #0]
	f_LastAngleS			= p_data->f_ctrl_trgtAngleS;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b4:	4a20      	ldr	r2, [pc, #128]	@ (8006738 <CTRL_setData+0x118>)
 80066b6:	6013      	str	r3, [r2, #0]

	/* 角度制御 */
	f_TrgtAngle				= p_data->f_ctrl_nowAngle;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066bc:	4a1f      	ldr	r2, [pc, #124]	@ (800673c <CTRL_setData+0x11c>)
 80066be:	6013      	str	r3, [r2, #0]
	f_BaseAngle 			= p_data->f_ctrl_nowAngle;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c4:	4a1e      	ldr	r2, [pc, #120]	@ (8006740 <CTRL_setData+0x120>)
 80066c6:	6013      	str	r3, [r2, #0]
	f_LastAngle 			= p_data->f_ctrl_angle;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006744 <CTRL_setData+0x124>)
 80066ce:	6013      	str	r3, [r2, #0]

	f_Time 					= 0;
 80066d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006748 <CTRL_setData+0x128>)
 80066d2:	f04f 0200 	mov.w	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]
	f_TrgtTime				= p_data->f_ctrl_time;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	4a1b      	ldr	r2, [pc, #108]	@ (800674c <CTRL_setData+0x12c>)
 80066de:	6013      	str	r3, [r2, #0]

	EscapeWait			= 0;
 80066e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006750 <CTRL_setData+0x130>)
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]

	CTRL_sta();				// 制御開始
 80066e8:	f7ff fe90 	bl	800640c <CTRL_sta>

}
 80066ec:	bf00      	nop
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	200003fa 	.word	0x200003fa
 80066f8:	20000358 	.word	0x20000358
 80066fc:	20000360 	.word	0x20000360
 8006700:	2000035c 	.word	0x2000035c
 8006704:	20000364 	.word	0x20000364
 8006708:	20000374 	.word	0x20000374
 800670c:	20000368 	.word	0x20000368
 8006710:	2000036c 	.word	0x2000036c
 8006714:	20000390 	.word	0x20000390
 8006718:	20000388 	.word	0x20000388
 800671c:	2000038c 	.word	0x2000038c
 8006720:	200003a4 	.word	0x200003a4
 8006724:	200003ac 	.word	0x200003ac
 8006728:	200003a8 	.word	0x200003a8
 800672c:	200003b0 	.word	0x200003b0
 8006730:	200003bc 	.word	0x200003bc
 8006734:	200003b4 	.word	0x200003b4
 8006738:	200003b8 	.word	0x200003b8
 800673c:	200003d4 	.word	0x200003d4
 8006740:	200003c8 	.word	0x200003c8
 8006744:	200003cc 	.word	0x200003cc
 8006748:	20000354 	.word	0x20000354
 800674c:	20000008 	.word	0x20000008
 8006750:	200003fc 	.word	0x200003fc
 8006754:	00000000 	.word	0x00000000

08006758 <CTRL_refNow>:

void CTRL_refNow( void )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
	float f_speedR		= 0;							// 右モータ現在速度 [mm/s]
 800675e:	f04f 0300 	mov.w	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
	float f_speedL		= 0;							// 左モータ現在速度 [mm/s]
 8006764:	f04f 0300 	mov.w	r3, #0
 8006768:	60bb      	str	r3, [r7, #8]
	float f_r 			= F_CNT2MM(l_CntR);				// 右モータの進んだ距離 [mm]
 800676a:	4b51      	ldr	r3, [pc, #324]	@ (80068b0 <CTRL_refNow+0x158>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006776:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80068b4 <CTRL_refNow+0x15c>
 800677a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800677e:	edc7 7a01 	vstr	s15, [r7, #4]
	float f_l 			= F_CNT2MM(l_CntL);				// 左モータの進んだ距離 [mm]
 8006782:	4b4d      	ldr	r3, [pc, #308]	@ (80068b8 <CTRL_refNow+0x160>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	ee07 3a90 	vmov	s15, r3
 800678a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800678e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80068b4 <CTRL_refNow+0x15c>
 8006792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006796:	edc7 7a00 	vstr	s15, [r7]

	/* 速度更新 */
	f_speedR = f_r * 1000.0;								// 右モータ速度 [mm/s] ( 移動距離[カウント] * 1パルスの移動量(0.0509[mm]) * 1000(msec→sec) 
 800679a:	edd7 7a01 	vldr	s15, [r7, #4]
 800679e:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80068bc <CTRL_refNow+0x164>
 80067a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067a6:	edc7 7a03 	vstr	s15, [r7, #12]
	f_speedL = f_l * 1000.0;								// 左モータ速度 [mm/s] ( 移動距離[カウント] * 1パルスの移動量(0.0509[mm]) * 1000(msec→sec) 
 80067aa:	edd7 7a00 	vldr	s15, [r7]
 80067ae:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80068bc <CTRL_refNow+0x164>
 80067b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067b6:	edc7 7a02 	vstr	s15, [r7, #8]
	f_NowSpeed  = ( f_speedR + f_speedL ) / 2;			// マウス（進行方向中心軸） [1mm/s] 
 80067ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80067be:	edd7 7a02 	vldr	s15, [r7, #8]
 80067c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80067c6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80067ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067ce:	4b3c      	ldr	r3, [pc, #240]	@ (80068c0 <CTRL_refNow+0x168>)
 80067d0:	edc3 7a00 	vstr	s15, [r3]
	
	/*motor AngleS*/
	f_MotorR_AngleS	= f_speedR *GEAR_RATIO*2.0/TIRE_D;
 80067d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80067d8:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80068c4 <CTRL_refNow+0x16c>
 80067dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067e0:	ee17 0a90 	vmov	r0, s15
 80067e4:	f7f9 fed8 	bl	8000598 <__aeabi_f2d>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	f7f9 fd76 	bl	80002dc <__adddf3>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4610      	mov	r0, r2
 80067f6:	4619      	mov	r1, r3
 80067f8:	a32b      	add	r3, pc, #172	@ (adr r3, 80068a8 <CTRL_refNow+0x150>)
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f7fa f84d 	bl	800089c <__aeabi_ddiv>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4610      	mov	r0, r2
 8006808:	4619      	mov	r1, r3
 800680a:	f7fa fa15 	bl	8000c38 <__aeabi_d2f>
 800680e:	4603      	mov	r3, r0
 8006810:	4a2d      	ldr	r2, [pc, #180]	@ (80068c8 <CTRL_refNow+0x170>)
 8006812:	6013      	str	r3, [r2, #0]
	f_MotorL_AngleS = f_speedL *GEAR_RATIO*2.0/TIRE_D;
 8006814:	edd7 7a02 	vldr	s15, [r7, #8]
 8006818:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80068c4 <CTRL_refNow+0x16c>
 800681c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006820:	ee17 0a90 	vmov	r0, s15
 8006824:	f7f9 feb8 	bl	8000598 <__aeabi_f2d>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	f7f9 fd56 	bl	80002dc <__adddf3>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	4610      	mov	r0, r2
 8006836:	4619      	mov	r1, r3
 8006838:	a31b      	add	r3, pc, #108	@ (adr r3, 80068a8 <CTRL_refNow+0x150>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f7fa f82d 	bl	800089c <__aeabi_ddiv>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4610      	mov	r0, r2
 8006848:	4619      	mov	r1, r3
 800684a:	f7fa f9f5 	bl	8000c38 <__aeabi_d2f>
 800684e:	4603      	mov	r3, r0
 8006850:	4a1e      	ldr	r2, [pc, #120]	@ (80068cc <CTRL_refNow+0x174>)
 8006852:	6013      	str	r3, [r2, #0]

	/* 距離更新 */
	f_NowDistR += f_r;									// カウント更新
 8006854:	4b1e      	ldr	r3, [pc, #120]	@ (80068d0 <CTRL_refNow+0x178>)
 8006856:	ed93 7a00 	vldr	s14, [r3]
 800685a:	edd7 7a01 	vldr	s15, [r7, #4]
 800685e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006862:	4b1b      	ldr	r3, [pc, #108]	@ (80068d0 <CTRL_refNow+0x178>)
 8006864:	edc3 7a00 	vstr	s15, [r3]
	f_NowDistL += f_l;									// カウント更新
 8006868:	4b1a      	ldr	r3, [pc, #104]	@ (80068d4 <CTRL_refNow+0x17c>)
 800686a:	ed93 7a00 	vldr	s14, [r3]
 800686e:	edd7 7a00 	vldr	s15, [r7]
 8006872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006876:	4b17      	ldr	r3, [pc, #92]	@ (80068d4 <CTRL_refNow+0x17c>)
 8006878:	edc3 7a00 	vstr	s15, [r3]
	f_NowDist  = ( f_NowDistR + f_NowDistL ) / 2.0;		// 平均値更新
 800687c:	4b14      	ldr	r3, [pc, #80]	@ (80068d0 <CTRL_refNow+0x178>)
 800687e:	ed93 7a00 	vldr	s14, [r3]
 8006882:	4b14      	ldr	r3, [pc, #80]	@ (80068d4 <CTRL_refNow+0x17c>)
 8006884:	edd3 7a00 	vldr	s15, [r3]
 8006888:	ee37 7a27 	vadd.f32	s14, s14, s15
 800688c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006890:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006894:	4b10      	ldr	r3, [pc, #64]	@ (80068d8 <CTRL_refNow+0x180>)
 8006896:	edc3 7a00 	vstr	s15, [r3]
//	f_NowDist  += (f_r + f_l) / 2.0; 	//setNowdataの残り　うまく行かないため上に戻し
}
 800689a:	bf00      	nop
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	f3af 8000 	nop.w
 80068a8:	e0000000 	.word	0xe0000000
 80068ac:	3f89be4c 	.word	0x3f89be4c
 80068b0:	2000034c 	.word	0x2000034c
 80068b4:	3721c00b 	.word	0x3721c00b
 80068b8:	20000350 	.word	0x20000350
 80068bc:	447a0000 	.word	0x447a0000
 80068c0:	20000370 	.word	0x20000370
 80068c4:	40940000 	.word	0x40940000
 80068c8:	20000380 	.word	0x20000380
 80068cc:	20000384 	.word	0x20000384
 80068d0:	20000398 	.word	0x20000398
 80068d4:	2000039c 	.word	0x2000039c
 80068d8:	20000394 	.word	0x20000394
 80068dc:	00000000 	.word	0x00000000

080068e0 <CTRL_refTarget>:

void CTRL_refTarget( void )
{
 80068e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80068e4:	af00      	add	r7, sp, #0
	/* mode */
	switch( en_Type ){
 80068e6:	4bb8      	ldr	r3, [pc, #736]	@ (8006bc8 <CTRL_refTarget+0x2e8>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b0e      	cmp	r3, #14
 80068ec:	f201 814e 	bhi.w	8007b8c <CTRL_refTarget+0x12ac>
 80068f0:	a201      	add	r2, pc, #4	@ (adr r2, 80068f8 <CTRL_refTarget+0x18>)
 80068f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f6:	bf00      	nop
 80068f8:	08006935 	.word	0x08006935
 80068fc:	08006a5b 	.word	0x08006a5b
 8006900:	08006a67 	.word	0x08006a67
 8006904:	08006935 	.word	0x08006935
 8006908:	08006a5b 	.word	0x08006a5b
 800690c:	08006a67 	.word	0x08006a67
 8006910:	08007b8d 	.word	0x08007b8d
 8006914:	08006c01 	.word	0x08006c01
 8006918:	08006e1d 	.word	0x08006e1d
 800691c:	08006e29 	.word	0x08006e29
 8006920:	08007113 	.word	0x08007113
 8006924:	080071e5 	.word	0x080071e5
 8006928:	0800754b 	.word	0x0800754b
 800692c:	08007769 	.word	0x08007769
 8006930:	08007ae3 	.word	0x08007ae3

		/* acc(straight) */
		case CTRL_ACC:
		case CTRL_SKEW_ACC:
			f_TrgtAcc += f_Jerk*0.001;
 8006934:	4ba5      	ldr	r3, [pc, #660]	@ (8006bcc <CTRL_refTarget+0x2ec>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	f7f9 fe2d 	bl	8000598 <__aeabi_f2d>
 800693e:	4604      	mov	r4, r0
 8006940:	460d      	mov	r5, r1
 8006942:	4ba3      	ldr	r3, [pc, #652]	@ (8006bd0 <CTRL_refTarget+0x2f0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4618      	mov	r0, r3
 8006948:	f7f9 fe26 	bl	8000598 <__aeabi_f2d>
 800694c:	a39c      	add	r3, pc, #624	@ (adr r3, 8006bc0 <CTRL_refTarget+0x2e0>)
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	f7f9 fe79 	bl	8000648 <__aeabi_dmul>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4620      	mov	r0, r4
 800695c:	4629      	mov	r1, r5
 800695e:	f7f9 fcbd 	bl	80002dc <__adddf3>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4610      	mov	r0, r2
 8006968:	4619      	mov	r1, r3
 800696a:	f7fa f965 	bl	8000c38 <__aeabi_d2f>
 800696e:	4603      	mov	r3, r0
 8006970:	4a96      	ldr	r2, [pc, #600]	@ (8006bcc <CTRL_refTarget+0x2ec>)
 8006972:	6013      	str	r3, [r2, #0]

			if(f_BaseAcc > 0){
 8006974:	4b97      	ldr	r3, [pc, #604]	@ (8006bd4 <CTRL_refTarget+0x2f4>)
 8006976:	edd3 7a00 	vldr	s15, [r3]
 800697a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800697e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006982:	dd0c      	ble.n	800699e <CTRL_refTarget+0xbe>
				if(f_TrgtAcc < 0.0){
 8006984:	4b91      	ldr	r3, [pc, #580]	@ (8006bcc <CTRL_refTarget+0x2ec>)
 8006986:	edd3 7a00 	vldr	s15, [r3]
 800698a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800698e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006992:	d513      	bpl.n	80069bc <CTRL_refTarget+0xdc>
					f_TrgtAcc = 0.0;
 8006994:	4b8d      	ldr	r3, [pc, #564]	@ (8006bcc <CTRL_refTarget+0x2ec>)
 8006996:	f04f 0200 	mov.w	r2, #0
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	e00e      	b.n	80069bc <CTRL_refTarget+0xdc>
				}
			}else{
				if(f_TrgtAcc > f_LastAcc){
 800699e:	4b8b      	ldr	r3, [pc, #556]	@ (8006bcc <CTRL_refTarget+0x2ec>)
 80069a0:	ed93 7a00 	vldr	s14, [r3]
 80069a4:	4b8c      	ldr	r3, [pc, #560]	@ (8006bd8 <CTRL_refTarget+0x2f8>)
 80069a6:	edd3 7a00 	vldr	s15, [r3]
 80069aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b2:	dd03      	ble.n	80069bc <CTRL_refTarget+0xdc>
					f_TrgtAcc = f_LastAcc;
 80069b4:	4b88      	ldr	r3, [pc, #544]	@ (8006bd8 <CTRL_refTarget+0x2f8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a84      	ldr	r2, [pc, #528]	@ (8006bcc <CTRL_refTarget+0x2ec>)
 80069ba:	6013      	str	r3, [r2, #0]
				}
			}

			if( f_TrgtSpeed < (f_LastSpeed -(f_TrgtAcc * 0.001)) ){								// 加速目標更新区間
 80069bc:	4b87      	ldr	r3, [pc, #540]	@ (8006bdc <CTRL_refTarget+0x2fc>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7f9 fde9 	bl	8000598 <__aeabi_f2d>
 80069c6:	4604      	mov	r4, r0
 80069c8:	460d      	mov	r5, r1
 80069ca:	4b85      	ldr	r3, [pc, #532]	@ (8006be0 <CTRL_refTarget+0x300>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7f9 fde2 	bl	8000598 <__aeabi_f2d>
 80069d4:	4680      	mov	r8, r0
 80069d6:	4689      	mov	r9, r1
 80069d8:	4b7c      	ldr	r3, [pc, #496]	@ (8006bcc <CTRL_refTarget+0x2ec>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4618      	mov	r0, r3
 80069de:	f7f9 fddb 	bl	8000598 <__aeabi_f2d>
 80069e2:	a377      	add	r3, pc, #476	@ (adr r3, 8006bc0 <CTRL_refTarget+0x2e0>)
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	f7f9 fe2e 	bl	8000648 <__aeabi_dmul>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4640      	mov	r0, r8
 80069f2:	4649      	mov	r1, r9
 80069f4:	f7f9 fc70 	bl	80002d8 <__aeabi_dsub>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4620      	mov	r0, r4
 80069fe:	4629      	mov	r1, r5
 8006a00:	f7fa f894 	bl	8000b2c <__aeabi_dcmplt>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d021      	beq.n	8006a4e <CTRL_refTarget+0x16e>
//			if( f_TrgtSpeed < f_LastSpeed ){
				f_TrgtSpeed += f_TrgtAcc * 0.001;									// 目標速度
 8006a0a:	4b74      	ldr	r3, [pc, #464]	@ (8006bdc <CTRL_refTarget+0x2fc>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7f9 fdc2 	bl	8000598 <__aeabi_f2d>
 8006a14:	4604      	mov	r4, r0
 8006a16:	460d      	mov	r5, r1
 8006a18:	4b6c      	ldr	r3, [pc, #432]	@ (8006bcc <CTRL_refTarget+0x2ec>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7f9 fdbb 	bl	8000598 <__aeabi_f2d>
 8006a22:	a367      	add	r3, pc, #412	@ (adr r3, 8006bc0 <CTRL_refTarget+0x2e0>)
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	f7f9 fe0e 	bl	8000648 <__aeabi_dmul>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4620      	mov	r0, r4
 8006a32:	4629      	mov	r1, r5
 8006a34:	f7f9 fc52 	bl	80002dc <__adddf3>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4619      	mov	r1, r3
 8006a40:	f7fa f8fa 	bl	8000c38 <__aeabi_d2f>
 8006a44:	4603      	mov	r3, r0
 8006a46:	4a65      	ldr	r2, [pc, #404]	@ (8006bdc <CTRL_refTarget+0x2fc>)
 8006a48:	6013      	str	r3, [r2, #0]
			}
			else{
				f_TrgtSpeed = f_LastSpeed;
			}

			break;
 8006a4a:	f001 b8a0 	b.w	8007b8e <CTRL_refTarget+0x12ae>
				f_TrgtSpeed = f_LastSpeed;
 8006a4e:	4b64      	ldr	r3, [pc, #400]	@ (8006be0 <CTRL_refTarget+0x300>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a62      	ldr	r2, [pc, #392]	@ (8006bdc <CTRL_refTarget+0x2fc>)
 8006a54:	6013      	str	r3, [r2, #0]
			break;
 8006a56:	f001 b89a 	b.w	8007b8e <CTRL_refTarget+0x12ae>

		/* const(straight) */
		case CTRL_CONST:
		case CTRL_SKEW_CONST:
			f_TrgtSpeed = f_BaseSpeed;														// 目標速度
 8006a5a:	4b62      	ldr	r3, [pc, #392]	@ (8006be4 <CTRL_refTarget+0x304>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a5f      	ldr	r2, [pc, #380]	@ (8006bdc <CTRL_refTarget+0x2fc>)
 8006a60:	6013      	str	r3, [r2, #0]
			break;
 8006a62:	f001 b894 	b.w	8007b8e <CTRL_refTarget+0x12ae>

		/* dec(straight) */
		case CTRL_DEC:
		case CTRL_SKEW_DEC:
			f_TrgtAcc += f_Jerk*0.001;
 8006a66:	4b59      	ldr	r3, [pc, #356]	@ (8006bcc <CTRL_refTarget+0x2ec>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7f9 fd94 	bl	8000598 <__aeabi_f2d>
 8006a70:	4604      	mov	r4, r0
 8006a72:	460d      	mov	r5, r1
 8006a74:	4b56      	ldr	r3, [pc, #344]	@ (8006bd0 <CTRL_refTarget+0x2f0>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7f9 fd8d 	bl	8000598 <__aeabi_f2d>
 8006a7e:	a350      	add	r3, pc, #320	@ (adr r3, 8006bc0 <CTRL_refTarget+0x2e0>)
 8006a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a84:	f7f9 fde0 	bl	8000648 <__aeabi_dmul>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	4629      	mov	r1, r5
 8006a90:	f7f9 fc24 	bl	80002dc <__adddf3>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4610      	mov	r0, r2
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	f7fa f8cc 	bl	8000c38 <__aeabi_d2f>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	4a4a      	ldr	r2, [pc, #296]	@ (8006bcc <CTRL_refTarget+0x2ec>)
 8006aa4:	6013      	str	r3, [r2, #0]

			if(f_BaseAcc < 0){
 8006aa6:	4b4b      	ldr	r3, [pc, #300]	@ (8006bd4 <CTRL_refTarget+0x2f4>)
 8006aa8:	edd3 7a00 	vldr	s15, [r3]
 8006aac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab4:	d50c      	bpl.n	8006ad0 <CTRL_refTarget+0x1f0>
				if(f_TrgtAcc > 0.0){
 8006ab6:	4b45      	ldr	r3, [pc, #276]	@ (8006bcc <CTRL_refTarget+0x2ec>)
 8006ab8:	edd3 7a00 	vldr	s15, [r3]
 8006abc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac4:	dd13      	ble.n	8006aee <CTRL_refTarget+0x20e>
					f_TrgtAcc = 0.0;
 8006ac6:	4b41      	ldr	r3, [pc, #260]	@ (8006bcc <CTRL_refTarget+0x2ec>)
 8006ac8:	f04f 0200 	mov.w	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	e00e      	b.n	8006aee <CTRL_refTarget+0x20e>
				}
			}else{
				if(f_TrgtAcc < f_LastAcc){
 8006ad0:	4b3e      	ldr	r3, [pc, #248]	@ (8006bcc <CTRL_refTarget+0x2ec>)
 8006ad2:	ed93 7a00 	vldr	s14, [r3]
 8006ad6:	4b40      	ldr	r3, [pc, #256]	@ (8006bd8 <CTRL_refTarget+0x2f8>)
 8006ad8:	edd3 7a00 	vldr	s15, [r3]
 8006adc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae4:	d503      	bpl.n	8006aee <CTRL_refTarget+0x20e>
					f_TrgtAcc = f_LastAcc;
 8006ae6:	4b3c      	ldr	r3, [pc, #240]	@ (8006bd8 <CTRL_refTarget+0x2f8>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a38      	ldr	r2, [pc, #224]	@ (8006bcc <CTRL_refTarget+0x2ec>)
 8006aec:	6013      	str	r3, [r2, #0]
				}
			}

			/* speed CTRL + position CTRL */
			if( f_TrgtSpeed > (f_LastSpeed +(f_TrgtAcc * 0.001))){								// 減速目標更新区間
 8006aee:	4b3b      	ldr	r3, [pc, #236]	@ (8006bdc <CTRL_refTarget+0x2fc>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7f9 fd50 	bl	8000598 <__aeabi_f2d>
 8006af8:	4604      	mov	r4, r0
 8006afa:	460d      	mov	r5, r1
 8006afc:	4b38      	ldr	r3, [pc, #224]	@ (8006be0 <CTRL_refTarget+0x300>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7f9 fd49 	bl	8000598 <__aeabi_f2d>
 8006b06:	4680      	mov	r8, r0
 8006b08:	4689      	mov	r9, r1
 8006b0a:	4b30      	ldr	r3, [pc, #192]	@ (8006bcc <CTRL_refTarget+0x2ec>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7f9 fd42 	bl	8000598 <__aeabi_f2d>
 8006b14:	a32a      	add	r3, pc, #168	@ (adr r3, 8006bc0 <CTRL_refTarget+0x2e0>)
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	f7f9 fd95 	bl	8000648 <__aeabi_dmul>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	4640      	mov	r0, r8
 8006b24:	4649      	mov	r1, r9
 8006b26:	f7f9 fbd9 	bl	80002dc <__adddf3>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4620      	mov	r0, r4
 8006b30:	4629      	mov	r1, r5
 8006b32:	f7fa f819 	bl	8000b68 <__aeabi_dcmpgt>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d057      	beq.n	8006bec <CTRL_refTarget+0x30c>
//			if( f_TrgtSpeed > f_LastSpeed){								// 減速目標更新区間
				f_TrgtSpeed += f_TrgtAcc * 0.001;									// 目標速度
 8006b3c:	4b27      	ldr	r3, [pc, #156]	@ (8006bdc <CTRL_refTarget+0x2fc>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7f9 fd29 	bl	8000598 <__aeabi_f2d>
 8006b46:	4604      	mov	r4, r0
 8006b48:	460d      	mov	r5, r1
 8006b4a:	4b20      	ldr	r3, [pc, #128]	@ (8006bcc <CTRL_refTarget+0x2ec>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7f9 fd22 	bl	8000598 <__aeabi_f2d>
 8006b54:	a31a      	add	r3, pc, #104	@ (adr r3, 8006bc0 <CTRL_refTarget+0x2e0>)
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	f7f9 fd75 	bl	8000648 <__aeabi_dmul>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4620      	mov	r0, r4
 8006b64:	4629      	mov	r1, r5
 8006b66:	f7f9 fbb9 	bl	80002dc <__adddf3>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4610      	mov	r0, r2
 8006b70:	4619      	mov	r1, r3
 8006b72:	f7fa f861 	bl	8000c38 <__aeabi_d2f>
 8006b76:	4603      	mov	r3, r0
 8006b78:	4a18      	ldr	r2, [pc, #96]	@ (8006bdc <CTRL_refTarget+0x2fc>)
 8006b7a:	6013      	str	r3, [r2, #0]
				f_TrgtDist  += f_TrgtSpeed * 0.001;		// 目標距離
 8006b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8006be8 <CTRL_refTarget+0x308>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7f9 fd09 	bl	8000598 <__aeabi_f2d>
 8006b86:	4604      	mov	r4, r0
 8006b88:	460d      	mov	r5, r1
 8006b8a:	4b14      	ldr	r3, [pc, #80]	@ (8006bdc <CTRL_refTarget+0x2fc>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7f9 fd02 	bl	8000598 <__aeabi_f2d>
 8006b94:	a30a      	add	r3, pc, #40	@ (adr r3, 8006bc0 <CTRL_refTarget+0x2e0>)
 8006b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9a:	f7f9 fd55 	bl	8000648 <__aeabi_dmul>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	f7f9 fb99 	bl	80002dc <__adddf3>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4610      	mov	r0, r2
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	f7fa f841 	bl	8000c38 <__aeabi_d2f>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	4a0b      	ldr	r2, [pc, #44]	@ (8006be8 <CTRL_refTarget+0x308>)
 8006bba:	6013      	str	r3, [r2, #0]
			/* position CTRL */
			else{
				f_TrgtSpeed = f_LastSpeed;
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 8006bbc:	f000 bfe7 	b.w	8007b8e <CTRL_refTarget+0x12ae>
 8006bc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8006bc4:	3f50624d 	.word	0x3f50624d
 8006bc8:	200003fa 	.word	0x200003fa
 8006bcc:	20000360 	.word	0x20000360
 8006bd0:	20000358 	.word	0x20000358
 8006bd4:	2000035c 	.word	0x2000035c
 8006bd8:	20000364 	.word	0x20000364
 8006bdc:	20000374 	.word	0x20000374
 8006be0:	2000036c 	.word	0x2000036c
 8006be4:	20000368 	.word	0x20000368
 8006be8:	20000390 	.word	0x20000390
				f_TrgtSpeed = f_LastSpeed;
 8006bec:	4bb0      	ldr	r3, [pc, #704]	@ (8006eb0 <CTRL_refTarget+0x5d0>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4ab0      	ldr	r2, [pc, #704]	@ (8006eb4 <CTRL_refTarget+0x5d4>)
 8006bf2:	6013      	str	r3, [r2, #0]
				f_TrgtDist  = f_LastDist;													// 目標距離
 8006bf4:	4bb0      	ldr	r3, [pc, #704]	@ (8006eb8 <CTRL_refTarget+0x5d8>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4ab0      	ldr	r2, [pc, #704]	@ (8006ebc <CTRL_refTarget+0x5dc>)
 8006bfa:	6013      	str	r3, [r2, #0]
			break;
 8006bfc:	f000 bfc7 	b.w	8007b8e <CTRL_refTarget+0x12ae>

		/* acc(Turn) */
		case CTRL_ACC_TRUN:
			f_TrgtAccAngle += f_JerkAngle*0.001;
 8006c00:	4baf      	ldr	r3, [pc, #700]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7f9 fcc7 	bl	8000598 <__aeabi_f2d>
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	460d      	mov	r5, r1
 8006c0e:	4bad      	ldr	r3, [pc, #692]	@ (8006ec4 <CTRL_refTarget+0x5e4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7f9 fcc0 	bl	8000598 <__aeabi_f2d>
 8006c18:	a3a3      	add	r3, pc, #652	@ (adr r3, 8006ea8 <CTRL_refTarget+0x5c8>)
 8006c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1e:	f7f9 fd13 	bl	8000648 <__aeabi_dmul>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	4620      	mov	r0, r4
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f7f9 fb57 	bl	80002dc <__adddf3>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	4610      	mov	r0, r2
 8006c34:	4619      	mov	r1, r3
 8006c36:	f7f9 ffff 	bl	8000c38 <__aeabi_d2f>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	4aa0      	ldr	r2, [pc, #640]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006c3e:	6013      	str	r3, [r2, #0]

			/* CCW  hidari*/
			if( f_LastAngle > 0 ){
 8006c40:	4ba1      	ldr	r3, [pc, #644]	@ (8006ec8 <CTRL_refTarget+0x5e8>)
 8006c42:	edd3 7a00 	vldr	s15, [r3]
 8006c46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c4e:	dd72      	ble.n	8006d36 <CTRL_refTarget+0x456>
				if(f_BaseAccAngle > 0){
 8006c50:	4b9e      	ldr	r3, [pc, #632]	@ (8006ecc <CTRL_refTarget+0x5ec>)
 8006c52:	edd3 7a00 	vldr	s15, [r3]
 8006c56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5e:	dd0c      	ble.n	8006c7a <CTRL_refTarget+0x39a>
					if(f_TrgtAccAngle < 0.0){
 8006c60:	4b97      	ldr	r3, [pc, #604]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006c62:	edd3 7a00 	vldr	s15, [r3]
 8006c66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c6e:	d513      	bpl.n	8006c98 <CTRL_refTarget+0x3b8>
						f_TrgtAccAngle = 0.0;
 8006c70:	4b93      	ldr	r3, [pc, #588]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006c72:	f04f 0200 	mov.w	r2, #0
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	e00e      	b.n	8006c98 <CTRL_refTarget+0x3b8>
					}
				}else{
					if(f_TrgtAccAngle > f_LastAccAngle){
 8006c7a:	4b91      	ldr	r3, [pc, #580]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006c7c:	ed93 7a00 	vldr	s14, [r3]
 8006c80:	4b93      	ldr	r3, [pc, #588]	@ (8006ed0 <CTRL_refTarget+0x5f0>)
 8006c82:	edd3 7a00 	vldr	s15, [r3]
 8006c86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c8e:	dd03      	ble.n	8006c98 <CTRL_refTarget+0x3b8>
						f_TrgtAccAngle = f_LastAccAngle;
 8006c90:	4b8f      	ldr	r3, [pc, #572]	@ (8006ed0 <CTRL_refTarget+0x5f0>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a8a      	ldr	r2, [pc, #552]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006c96:	6013      	str	r3, [r2, #0]
					}
				}

				if ( f_TrgtAngleS < (f_LastAngleS -(f_TrgtAccAngle * 0.001)) ){
 8006c98:	4b8e      	ldr	r3, [pc, #568]	@ (8006ed4 <CTRL_refTarget+0x5f4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7f9 fc7b 	bl	8000598 <__aeabi_f2d>
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	460d      	mov	r5, r1
 8006ca6:	4b8c      	ldr	r3, [pc, #560]	@ (8006ed8 <CTRL_refTarget+0x5f8>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7f9 fc74 	bl	8000598 <__aeabi_f2d>
 8006cb0:	4680      	mov	r8, r0
 8006cb2:	4689      	mov	r9, r1
 8006cb4:	4b82      	ldr	r3, [pc, #520]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7f9 fc6d 	bl	8000598 <__aeabi_f2d>
 8006cbe:	a37a      	add	r3, pc, #488	@ (adr r3, 8006ea8 <CTRL_refTarget+0x5c8>)
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	f7f9 fcc0 	bl	8000648 <__aeabi_dmul>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4640      	mov	r0, r8
 8006cce:	4649      	mov	r1, r9
 8006cd0:	f7f9 fb02 	bl	80002d8 <__aeabi_dsub>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4620      	mov	r0, r4
 8006cda:	4629      	mov	r1, r5
 8006cdc:	f7f9 ff26 	bl	8000b2c <__aeabi_dcmplt>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d021      	beq.n	8006d2a <CTRL_refTarget+0x44a>
					f_TrgtAngleS += f_TrgtAccAngle * 0.001;									// 目標角速度
 8006ce6:	4b7b      	ldr	r3, [pc, #492]	@ (8006ed4 <CTRL_refTarget+0x5f4>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7f9 fc54 	bl	8000598 <__aeabi_f2d>
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	460d      	mov	r5, r1
 8006cf4:	4b72      	ldr	r3, [pc, #456]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7f9 fc4d 	bl	8000598 <__aeabi_f2d>
 8006cfe:	a36a      	add	r3, pc, #424	@ (adr r3, 8006ea8 <CTRL_refTarget+0x5c8>)
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	f7f9 fca0 	bl	8000648 <__aeabi_dmul>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	4629      	mov	r1, r5
 8006d10:	f7f9 fae4 	bl	80002dc <__adddf3>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4610      	mov	r0, r2
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	f7f9 ff8c 	bl	8000c38 <__aeabi_d2f>
 8006d20:	4603      	mov	r3, r0
 8006d22:	4a6c      	ldr	r2, [pc, #432]	@ (8006ed4 <CTRL_refTarget+0x5f4>)
 8006d24:	6013      	str	r3, [r2, #0]
				}
				else{
					f_TrgtAngleS = f_LastAngleS;
				}
			}
			break;
 8006d26:	f000 bf32 	b.w	8007b8e <CTRL_refTarget+0x12ae>
					f_TrgtAngleS = f_LastAngleS;
 8006d2a:	4b6b      	ldr	r3, [pc, #428]	@ (8006ed8 <CTRL_refTarget+0x5f8>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a69      	ldr	r2, [pc, #420]	@ (8006ed4 <CTRL_refTarget+0x5f4>)
 8006d30:	6013      	str	r3, [r2, #0]
			break;
 8006d32:	f000 bf2c 	b.w	8007b8e <CTRL_refTarget+0x12ae>
				if(f_BaseAccAngle < 0){
 8006d36:	4b65      	ldr	r3, [pc, #404]	@ (8006ecc <CTRL_refTarget+0x5ec>)
 8006d38:	edd3 7a00 	vldr	s15, [r3]
 8006d3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d44:	d50c      	bpl.n	8006d60 <CTRL_refTarget+0x480>
					if(f_TrgtAccAngle > 0.0){
 8006d46:	4b5e      	ldr	r3, [pc, #376]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006d48:	edd3 7a00 	vldr	s15, [r3]
 8006d4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d54:	dd13      	ble.n	8006d7e <CTRL_refTarget+0x49e>
						f_TrgtAccAngle = 0.0;
 8006d56:	4b5a      	ldr	r3, [pc, #360]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	e00e      	b.n	8006d7e <CTRL_refTarget+0x49e>
					if(f_TrgtAccAngle < f_LastAccAngle){
 8006d60:	4b57      	ldr	r3, [pc, #348]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006d62:	ed93 7a00 	vldr	s14, [r3]
 8006d66:	4b5a      	ldr	r3, [pc, #360]	@ (8006ed0 <CTRL_refTarget+0x5f0>)
 8006d68:	edd3 7a00 	vldr	s15, [r3]
 8006d6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d74:	d503      	bpl.n	8006d7e <CTRL_refTarget+0x49e>
						f_TrgtAccAngle = f_LastAccAngle;
 8006d76:	4b56      	ldr	r3, [pc, #344]	@ (8006ed0 <CTRL_refTarget+0x5f0>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a51      	ldr	r2, [pc, #324]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006d7c:	6013      	str	r3, [r2, #0]
				if( f_TrgtAngleS > (f_LastAngleS +(f_TrgtAccAngle * 0.001)) ){
 8006d7e:	4b55      	ldr	r3, [pc, #340]	@ (8006ed4 <CTRL_refTarget+0x5f4>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7f9 fc08 	bl	8000598 <__aeabi_f2d>
 8006d88:	4604      	mov	r4, r0
 8006d8a:	460d      	mov	r5, r1
 8006d8c:	4b52      	ldr	r3, [pc, #328]	@ (8006ed8 <CTRL_refTarget+0x5f8>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7f9 fc01 	bl	8000598 <__aeabi_f2d>
 8006d96:	4680      	mov	r8, r0
 8006d98:	4689      	mov	r9, r1
 8006d9a:	4b49      	ldr	r3, [pc, #292]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7f9 fbfa 	bl	8000598 <__aeabi_f2d>
 8006da4:	a340      	add	r3, pc, #256	@ (adr r3, 8006ea8 <CTRL_refTarget+0x5c8>)
 8006da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006daa:	f7f9 fc4d 	bl	8000648 <__aeabi_dmul>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4640      	mov	r0, r8
 8006db4:	4649      	mov	r1, r9
 8006db6:	f7f9 fa91 	bl	80002dc <__adddf3>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	f7f9 fed1 	bl	8000b68 <__aeabi_dcmpgt>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d021      	beq.n	8006e10 <CTRL_refTarget+0x530>
					f_TrgtAngleS += f_TrgtAccAngle * 0.001;									// 目標角速度
 8006dcc:	4b41      	ldr	r3, [pc, #260]	@ (8006ed4 <CTRL_refTarget+0x5f4>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7f9 fbe1 	bl	8000598 <__aeabi_f2d>
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	460d      	mov	r5, r1
 8006dda:	4b39      	ldr	r3, [pc, #228]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7f9 fbda 	bl	8000598 <__aeabi_f2d>
 8006de4:	a330      	add	r3, pc, #192	@ (adr r3, 8006ea8 <CTRL_refTarget+0x5c8>)
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	f7f9 fc2d 	bl	8000648 <__aeabi_dmul>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	4620      	mov	r0, r4
 8006df4:	4629      	mov	r1, r5
 8006df6:	f7f9 fa71 	bl	80002dc <__adddf3>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4610      	mov	r0, r2
 8006e00:	4619      	mov	r1, r3
 8006e02:	f7f9 ff19 	bl	8000c38 <__aeabi_d2f>
 8006e06:	4603      	mov	r3, r0
 8006e08:	4a32      	ldr	r2, [pc, #200]	@ (8006ed4 <CTRL_refTarget+0x5f4>)
 8006e0a:	6013      	str	r3, [r2, #0]
			break;
 8006e0c:	f000 bebf 	b.w	8007b8e <CTRL_refTarget+0x12ae>
					f_TrgtAngleS = f_LastAngleS;
 8006e10:	4b31      	ldr	r3, [pc, #196]	@ (8006ed8 <CTRL_refTarget+0x5f8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a2f      	ldr	r2, [pc, #188]	@ (8006ed4 <CTRL_refTarget+0x5f4>)
 8006e16:	6013      	str	r3, [r2, #0]
			break;
 8006e18:	f000 beb9 	b.w	8007b8e <CTRL_refTarget+0x12ae>

		/* const(Turn) */
		case CTRL_CONST_TRUN:
			f_TrgtAngleS =f_BaseAngleS;
 8006e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8006edc <CTRL_refTarget+0x5fc>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a2c      	ldr	r2, [pc, #176]	@ (8006ed4 <CTRL_refTarget+0x5f4>)
 8006e22:	6013      	str	r3, [r2, #0]
			break;
 8006e24:	f000 beb3 	b.w	8007b8e <CTRL_refTarget+0x12ae>

		/* dec(Turn) */
		case CTRL_DEC_TRUN:
			f_TrgtAccAngle += f_JerkAngle*0.001;
 8006e28:	4b25      	ldr	r3, [pc, #148]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7f9 fbb3 	bl	8000598 <__aeabi_f2d>
 8006e32:	4604      	mov	r4, r0
 8006e34:	460d      	mov	r5, r1
 8006e36:	4b23      	ldr	r3, [pc, #140]	@ (8006ec4 <CTRL_refTarget+0x5e4>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7f9 fbac 	bl	8000598 <__aeabi_f2d>
 8006e40:	a319      	add	r3, pc, #100	@ (adr r3, 8006ea8 <CTRL_refTarget+0x5c8>)
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	f7f9 fbff 	bl	8000648 <__aeabi_dmul>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4620      	mov	r0, r4
 8006e50:	4629      	mov	r1, r5
 8006e52:	f7f9 fa43 	bl	80002dc <__adddf3>
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	f7f9 feeb 	bl	8000c38 <__aeabi_d2f>
 8006e62:	4603      	mov	r3, r0
 8006e64:	4a16      	ldr	r2, [pc, #88]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006e66:	6013      	str	r3, [r2, #0]

			/* CCW */
			if( f_LastAngle > 0 ){
 8006e68:	4b17      	ldr	r3, [pc, #92]	@ (8006ec8 <CTRL_refTarget+0x5e8>)
 8006e6a:	edd3 7a00 	vldr	s15, [r3]
 8006e6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e76:	f340 80b5 	ble.w	8006fe4 <CTRL_refTarget+0x704>
				if(f_BaseAccAngle < 0){
 8006e7a:	4b14      	ldr	r3, [pc, #80]	@ (8006ecc <CTRL_refTarget+0x5ec>)
 8006e7c:	edd3 7a00 	vldr	s15, [r3]
 8006e80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e88:	d52a      	bpl.n	8006ee0 <CTRL_refTarget+0x600>
					if(f_TrgtAccAngle > 0.0){
 8006e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006e8c:	edd3 7a00 	vldr	s15, [r3]
 8006e90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e98:	dd31      	ble.n	8006efe <CTRL_refTarget+0x61e>
						f_TrgtAccAngle = 0.0;
 8006e9a:	4b09      	ldr	r3, [pc, #36]	@ (8006ec0 <CTRL_refTarget+0x5e0>)
 8006e9c:	f04f 0200 	mov.w	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	e02c      	b.n	8006efe <CTRL_refTarget+0x61e>
 8006ea4:	f3af 8000 	nop.w
 8006ea8:	d2f1a9fc 	.word	0xd2f1a9fc
 8006eac:	3f50624d 	.word	0x3f50624d
 8006eb0:	2000036c 	.word	0x2000036c
 8006eb4:	20000374 	.word	0x20000374
 8006eb8:	2000038c 	.word	0x2000038c
 8006ebc:	20000390 	.word	0x20000390
 8006ec0:	200003ac 	.word	0x200003ac
 8006ec4:	200003a4 	.word	0x200003a4
 8006ec8:	200003cc 	.word	0x200003cc
 8006ecc:	200003a8 	.word	0x200003a8
 8006ed0:	200003b0 	.word	0x200003b0
 8006ed4:	200003bc 	.word	0x200003bc
 8006ed8:	200003b8 	.word	0x200003b8
 8006edc:	200003b4 	.word	0x200003b4
					}
				}else{
					if(f_TrgtAccAngle < f_LastAccAngle){
 8006ee0:	4bb5      	ldr	r3, [pc, #724]	@ (80071b8 <CTRL_refTarget+0x8d8>)
 8006ee2:	ed93 7a00 	vldr	s14, [r3]
 8006ee6:	4bb5      	ldr	r3, [pc, #724]	@ (80071bc <CTRL_refTarget+0x8dc>)
 8006ee8:	edd3 7a00 	vldr	s15, [r3]
 8006eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef4:	d503      	bpl.n	8006efe <CTRL_refTarget+0x61e>
						f_TrgtAccAngle = f_LastAccAngle;
 8006ef6:	4bb1      	ldr	r3, [pc, #708]	@ (80071bc <CTRL_refTarget+0x8dc>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4aaf      	ldr	r2, [pc, #700]	@ (80071b8 <CTRL_refTarget+0x8d8>)
 8006efc:	6013      	str	r3, [r2, #0]
					}
				}

				/* Angle speed CTRL + Angle CTRL */
				if( f_TrgtAngleS > (f_LastAngleS +(f_TrgtAccAngle * 0.001)) ){						// 減速目標更新区間
 8006efe:	4bb0      	ldr	r3, [pc, #704]	@ (80071c0 <CTRL_refTarget+0x8e0>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7f9 fb48 	bl	8000598 <__aeabi_f2d>
 8006f08:	4604      	mov	r4, r0
 8006f0a:	460d      	mov	r5, r1
 8006f0c:	4bad      	ldr	r3, [pc, #692]	@ (80071c4 <CTRL_refTarget+0x8e4>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7f9 fb41 	bl	8000598 <__aeabi_f2d>
 8006f16:	4680      	mov	r8, r0
 8006f18:	4689      	mov	r9, r1
 8006f1a:	4ba7      	ldr	r3, [pc, #668]	@ (80071b8 <CTRL_refTarget+0x8d8>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7f9 fb3a 	bl	8000598 <__aeabi_f2d>
 8006f24:	a3a2      	add	r3, pc, #648	@ (adr r3, 80071b0 <CTRL_refTarget+0x8d0>)
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	f7f9 fb8d 	bl	8000648 <__aeabi_dmul>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	4640      	mov	r0, r8
 8006f34:	4649      	mov	r1, r9
 8006f36:	f7f9 f9d1 	bl	80002dc <__adddf3>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4620      	mov	r0, r4
 8006f40:	4629      	mov	r1, r5
 8006f42:	f7f9 fe11 	bl	8000b68 <__aeabi_dcmpgt>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d041      	beq.n	8006fd0 <CTRL_refTarget+0x6f0>
					f_TrgtAngleS += f_TrgtAccAngle * 0.001;							// 目標角速度
 8006f4c:	4b9c      	ldr	r3, [pc, #624]	@ (80071c0 <CTRL_refTarget+0x8e0>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7f9 fb21 	bl	8000598 <__aeabi_f2d>
 8006f56:	4604      	mov	r4, r0
 8006f58:	460d      	mov	r5, r1
 8006f5a:	4b97      	ldr	r3, [pc, #604]	@ (80071b8 <CTRL_refTarget+0x8d8>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7f9 fb1a 	bl	8000598 <__aeabi_f2d>
 8006f64:	a392      	add	r3, pc, #584	@ (adr r3, 80071b0 <CTRL_refTarget+0x8d0>)
 8006f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6a:	f7f9 fb6d 	bl	8000648 <__aeabi_dmul>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4620      	mov	r0, r4
 8006f74:	4629      	mov	r1, r5
 8006f76:	f7f9 f9b1 	bl	80002dc <__adddf3>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4610      	mov	r0, r2
 8006f80:	4619      	mov	r1, r3
 8006f82:	f7f9 fe59 	bl	8000c38 <__aeabi_d2f>
 8006f86:	4603      	mov	r3, r0
 8006f88:	4a8d      	ldr	r2, [pc, #564]	@ (80071c0 <CTRL_refTarget+0x8e0>)
 8006f8a:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  += f_TrgtAngleS * 0.001;	// 目標角度
 8006f8c:	4b8e      	ldr	r3, [pc, #568]	@ (80071c8 <CTRL_refTarget+0x8e8>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7f9 fb01 	bl	8000598 <__aeabi_f2d>
 8006f96:	4604      	mov	r4, r0
 8006f98:	460d      	mov	r5, r1
 8006f9a:	4b89      	ldr	r3, [pc, #548]	@ (80071c0 <CTRL_refTarget+0x8e0>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7f9 fafa 	bl	8000598 <__aeabi_f2d>
 8006fa4:	a382      	add	r3, pc, #520	@ (adr r3, 80071b0 <CTRL_refTarget+0x8d0>)
 8006fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006faa:	f7f9 fb4d 	bl	8000648 <__aeabi_dmul>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	f7f9 f991 	bl	80002dc <__adddf3>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	f7f9 fe39 	bl	8000c38 <__aeabi_d2f>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	4a7f      	ldr	r2, [pc, #508]	@ (80071c8 <CTRL_refTarget+0x8e8>)
 8006fca:	6013      	str	r3, [r2, #0]
				else{
					f_TrgtAngleS = f_LastAngleS;
					f_TrgtAngle  = f_LastAngle;													// 目標距離
				}
			}
			break;
 8006fcc:	f000 bddf 	b.w	8007b8e <CTRL_refTarget+0x12ae>
					f_TrgtAngleS = f_LastAngleS;
 8006fd0:	4b7c      	ldr	r3, [pc, #496]	@ (80071c4 <CTRL_refTarget+0x8e4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a7a      	ldr	r2, [pc, #488]	@ (80071c0 <CTRL_refTarget+0x8e0>)
 8006fd6:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 8006fd8:	4b7c      	ldr	r3, [pc, #496]	@ (80071cc <CTRL_refTarget+0x8ec>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a7a      	ldr	r2, [pc, #488]	@ (80071c8 <CTRL_refTarget+0x8e8>)
 8006fde:	6013      	str	r3, [r2, #0]
			break;
 8006fe0:	f000 bdd5 	b.w	8007b8e <CTRL_refTarget+0x12ae>
				if(f_BaseAccAngle > 0){
 8006fe4:	4b7a      	ldr	r3, [pc, #488]	@ (80071d0 <CTRL_refTarget+0x8f0>)
 8006fe6:	edd3 7a00 	vldr	s15, [r3]
 8006fea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff2:	dd0c      	ble.n	800700e <CTRL_refTarget+0x72e>
					if(f_TrgtAccAngle < 0.0){
 8006ff4:	4b70      	ldr	r3, [pc, #448]	@ (80071b8 <CTRL_refTarget+0x8d8>)
 8006ff6:	edd3 7a00 	vldr	s15, [r3]
 8006ffa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007002:	d513      	bpl.n	800702c <CTRL_refTarget+0x74c>
						f_TrgtAccAngle = 0.0;
 8007004:	4b6c      	ldr	r3, [pc, #432]	@ (80071b8 <CTRL_refTarget+0x8d8>)
 8007006:	f04f 0200 	mov.w	r2, #0
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	e00e      	b.n	800702c <CTRL_refTarget+0x74c>
					if(f_TrgtAccAngle > f_LastAccAngle){
 800700e:	4b6a      	ldr	r3, [pc, #424]	@ (80071b8 <CTRL_refTarget+0x8d8>)
 8007010:	ed93 7a00 	vldr	s14, [r3]
 8007014:	4b69      	ldr	r3, [pc, #420]	@ (80071bc <CTRL_refTarget+0x8dc>)
 8007016:	edd3 7a00 	vldr	s15, [r3]
 800701a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800701e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007022:	dd03      	ble.n	800702c <CTRL_refTarget+0x74c>
						f_TrgtAccAngle = f_LastAccAngle;
 8007024:	4b65      	ldr	r3, [pc, #404]	@ (80071bc <CTRL_refTarget+0x8dc>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a63      	ldr	r2, [pc, #396]	@ (80071b8 <CTRL_refTarget+0x8d8>)
 800702a:	6013      	str	r3, [r2, #0]
				if( f_TrgtAngleS < (f_LastAngleS +(f_TrgtAccAngle * 0.001))){						// 減速目標更新区間
 800702c:	4b64      	ldr	r3, [pc, #400]	@ (80071c0 <CTRL_refTarget+0x8e0>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4618      	mov	r0, r3
 8007032:	f7f9 fab1 	bl	8000598 <__aeabi_f2d>
 8007036:	4604      	mov	r4, r0
 8007038:	460d      	mov	r5, r1
 800703a:	4b62      	ldr	r3, [pc, #392]	@ (80071c4 <CTRL_refTarget+0x8e4>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4618      	mov	r0, r3
 8007040:	f7f9 faaa 	bl	8000598 <__aeabi_f2d>
 8007044:	4680      	mov	r8, r0
 8007046:	4689      	mov	r9, r1
 8007048:	4b5b      	ldr	r3, [pc, #364]	@ (80071b8 <CTRL_refTarget+0x8d8>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4618      	mov	r0, r3
 800704e:	f7f9 faa3 	bl	8000598 <__aeabi_f2d>
 8007052:	a357      	add	r3, pc, #348	@ (adr r3, 80071b0 <CTRL_refTarget+0x8d0>)
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	f7f9 faf6 	bl	8000648 <__aeabi_dmul>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4640      	mov	r0, r8
 8007062:	4649      	mov	r1, r9
 8007064:	f7f9 f93a 	bl	80002dc <__adddf3>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	4620      	mov	r0, r4
 800706e:	4629      	mov	r1, r5
 8007070:	f7f9 fd5c 	bl	8000b2c <__aeabi_dcmplt>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d041      	beq.n	80070fe <CTRL_refTarget+0x81e>
					f_TrgtAngleS += f_TrgtAccAngle * 0.001;							// 目標角速度
 800707a:	4b51      	ldr	r3, [pc, #324]	@ (80071c0 <CTRL_refTarget+0x8e0>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4618      	mov	r0, r3
 8007080:	f7f9 fa8a 	bl	8000598 <__aeabi_f2d>
 8007084:	4604      	mov	r4, r0
 8007086:	460d      	mov	r5, r1
 8007088:	4b4b      	ldr	r3, [pc, #300]	@ (80071b8 <CTRL_refTarget+0x8d8>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4618      	mov	r0, r3
 800708e:	f7f9 fa83 	bl	8000598 <__aeabi_f2d>
 8007092:	a347      	add	r3, pc, #284	@ (adr r3, 80071b0 <CTRL_refTarget+0x8d0>)
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	f7f9 fad6 	bl	8000648 <__aeabi_dmul>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	4620      	mov	r0, r4
 80070a2:	4629      	mov	r1, r5
 80070a4:	f7f9 f91a 	bl	80002dc <__adddf3>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4610      	mov	r0, r2
 80070ae:	4619      	mov	r1, r3
 80070b0:	f7f9 fdc2 	bl	8000c38 <__aeabi_d2f>
 80070b4:	4603      	mov	r3, r0
 80070b6:	4a42      	ldr	r2, [pc, #264]	@ (80071c0 <CTRL_refTarget+0x8e0>)
 80070b8:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  += f_TrgtAngleS * 0.001;	// 目標角度
 80070ba:	4b43      	ldr	r3, [pc, #268]	@ (80071c8 <CTRL_refTarget+0x8e8>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4618      	mov	r0, r3
 80070c0:	f7f9 fa6a 	bl	8000598 <__aeabi_f2d>
 80070c4:	4604      	mov	r4, r0
 80070c6:	460d      	mov	r5, r1
 80070c8:	4b3d      	ldr	r3, [pc, #244]	@ (80071c0 <CTRL_refTarget+0x8e0>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7f9 fa63 	bl	8000598 <__aeabi_f2d>
 80070d2:	a337      	add	r3, pc, #220	@ (adr r3, 80071b0 <CTRL_refTarget+0x8d0>)
 80070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d8:	f7f9 fab6 	bl	8000648 <__aeabi_dmul>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	4620      	mov	r0, r4
 80070e2:	4629      	mov	r1, r5
 80070e4:	f7f9 f8fa 	bl	80002dc <__adddf3>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4610      	mov	r0, r2
 80070ee:	4619      	mov	r1, r3
 80070f0:	f7f9 fda2 	bl	8000c38 <__aeabi_d2f>
 80070f4:	4603      	mov	r3, r0
 80070f6:	4a34      	ldr	r2, [pc, #208]	@ (80071c8 <CTRL_refTarget+0x8e8>)
 80070f8:	6013      	str	r3, [r2, #0]
			break;
 80070fa:	f000 bd48 	b.w	8007b8e <CTRL_refTarget+0x12ae>
					f_TrgtAngleS = f_LastAngleS;
 80070fe:	4b31      	ldr	r3, [pc, #196]	@ (80071c4 <CTRL_refTarget+0x8e4>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a2f      	ldr	r2, [pc, #188]	@ (80071c0 <CTRL_refTarget+0x8e0>)
 8007104:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 8007106:	4b31      	ldr	r3, [pc, #196]	@ (80071cc <CTRL_refTarget+0x8ec>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a2f      	ldr	r2, [pc, #188]	@ (80071c8 <CTRL_refTarget+0x8e8>)
 800710c:	6013      	str	r3, [r2, #0]
			break;
 800710e:	f000 bd3e 	b.w	8007b8e <CTRL_refTarget+0x12ae>

		/* entry(sla) */
		case CTRL_ENTRY_SLA:
			f_TrgtSpeed = f_BaseSpeed;
 8007112:	4b30      	ldr	r3, [pc, #192]	@ (80071d4 <CTRL_refTarget+0x8f4>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a30      	ldr	r2, [pc, #192]	@ (80071d8 <CTRL_refTarget+0x8f8>)
 8007118:	6013      	str	r3, [r2, #0]
			if( f_TrgtDist <= f_LastDist - (f_TrgtSpeed * 0.001) ){
 800711a:	4b30      	ldr	r3, [pc, #192]	@ (80071dc <CTRL_refTarget+0x8fc>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4618      	mov	r0, r3
 8007120:	f7f9 fa3a 	bl	8000598 <__aeabi_f2d>
 8007124:	4604      	mov	r4, r0
 8007126:	460d      	mov	r5, r1
 8007128:	4b2d      	ldr	r3, [pc, #180]	@ (80071e0 <CTRL_refTarget+0x900>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4618      	mov	r0, r3
 800712e:	f7f9 fa33 	bl	8000598 <__aeabi_f2d>
 8007132:	4680      	mov	r8, r0
 8007134:	4689      	mov	r9, r1
 8007136:	4b28      	ldr	r3, [pc, #160]	@ (80071d8 <CTRL_refTarget+0x8f8>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4618      	mov	r0, r3
 800713c:	f7f9 fa2c 	bl	8000598 <__aeabi_f2d>
 8007140:	a31b      	add	r3, pc, #108	@ (adr r3, 80071b0 <CTRL_refTarget+0x8d0>)
 8007142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007146:	f7f9 fa7f 	bl	8000648 <__aeabi_dmul>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4640      	mov	r0, r8
 8007150:	4649      	mov	r1, r9
 8007152:	f7f9 f8c1 	bl	80002d8 <__aeabi_dsub>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4620      	mov	r0, r4
 800715c:	4629      	mov	r1, r5
 800715e:	f7f9 fcef 	bl	8000b40 <__aeabi_dcmple>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <CTRL_refTarget+0x88c>
				f_TrgtDist  += f_TrgtSpeed * 0.001;								// 目標距離
			}
			break;
 8007168:	f000 bd11 	b.w	8007b8e <CTRL_refTarget+0x12ae>
				f_TrgtDist  += f_TrgtSpeed * 0.001;								// 目標距離
 800716c:	4b1b      	ldr	r3, [pc, #108]	@ (80071dc <CTRL_refTarget+0x8fc>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4618      	mov	r0, r3
 8007172:	f7f9 fa11 	bl	8000598 <__aeabi_f2d>
 8007176:	4604      	mov	r4, r0
 8007178:	460d      	mov	r5, r1
 800717a:	4b17      	ldr	r3, [pc, #92]	@ (80071d8 <CTRL_refTarget+0x8f8>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f7f9 fa0a 	bl	8000598 <__aeabi_f2d>
 8007184:	a30a      	add	r3, pc, #40	@ (adr r3, 80071b0 <CTRL_refTarget+0x8d0>)
 8007186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718a:	f7f9 fa5d 	bl	8000648 <__aeabi_dmul>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	4620      	mov	r0, r4
 8007194:	4629      	mov	r1, r5
 8007196:	f7f9 f8a1 	bl	80002dc <__adddf3>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	4610      	mov	r0, r2
 80071a0:	4619      	mov	r1, r3
 80071a2:	f7f9 fd49 	bl	8000c38 <__aeabi_d2f>
 80071a6:	4603      	mov	r3, r0
 80071a8:	4a0c      	ldr	r2, [pc, #48]	@ (80071dc <CTRL_refTarget+0x8fc>)
 80071aa:	6013      	str	r3, [r2, #0]
			break;
 80071ac:	f000 bcef 	b.w	8007b8e <CTRL_refTarget+0x12ae>
 80071b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80071b4:	3f50624d 	.word	0x3f50624d
 80071b8:	200003ac 	.word	0x200003ac
 80071bc:	200003b0 	.word	0x200003b0
 80071c0:	200003bc 	.word	0x200003bc
 80071c4:	200003b8 	.word	0x200003b8
 80071c8:	200003d4 	.word	0x200003d4
 80071cc:	200003cc 	.word	0x200003cc
 80071d0:	200003a8 	.word	0x200003a8
 80071d4:	20000368 	.word	0x20000368
 80071d8:	20000374 	.word	0x20000374
 80071dc:	20000390 	.word	0x20000390
 80071e0:	2000038c 	.word	0x2000038c

		/* acc(スラローム) */
		case CTRL_ACC_SLA:
			f_TrgtSpeed = f_BaseSpeed;
 80071e4:	4ba6      	ldr	r3, [pc, #664]	@ (8007480 <CTRL_refTarget+0xba0>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4aa6      	ldr	r2, [pc, #664]	@ (8007484 <CTRL_refTarget+0xba4>)
 80071ea:	6013      	str	r3, [r2, #0]
			f_TrgtAccAngle += f_JerkAngle*0.001;
 80071ec:	4ba6      	ldr	r3, [pc, #664]	@ (8007488 <CTRL_refTarget+0xba8>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7f9 f9d1 	bl	8000598 <__aeabi_f2d>
 80071f6:	4604      	mov	r4, r0
 80071f8:	460d      	mov	r5, r1
 80071fa:	4ba4      	ldr	r3, [pc, #656]	@ (800748c <CTRL_refTarget+0xbac>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f7f9 f9ca 	bl	8000598 <__aeabi_f2d>
 8007204:	a39c      	add	r3, pc, #624	@ (adr r3, 8007478 <CTRL_refTarget+0xb98>)
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	f7f9 fa1d 	bl	8000648 <__aeabi_dmul>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4620      	mov	r0, r4
 8007214:	4629      	mov	r1, r5
 8007216:	f7f9 f861 	bl	80002dc <__adddf3>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4610      	mov	r0, r2
 8007220:	4619      	mov	r1, r3
 8007222:	f7f9 fd09 	bl	8000c38 <__aeabi_d2f>
 8007226:	4603      	mov	r3, r0
 8007228:	4a97      	ldr	r2, [pc, #604]	@ (8007488 <CTRL_refTarget+0xba8>)
 800722a:	6013      	str	r3, [r2, #0]

			/* CCW */
			if( f_LastAngle > 0 ){
 800722c:	4b98      	ldr	r3, [pc, #608]	@ (8007490 <CTRL_refTarget+0xbb0>)
 800722e:	edd3 7a00 	vldr	s15, [r3]
 8007232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723a:	f340 8091 	ble.w	8007360 <CTRL_refTarget+0xa80>
				if(f_BaseAccAngle > 0){
 800723e:	4b95      	ldr	r3, [pc, #596]	@ (8007494 <CTRL_refTarget+0xbb4>)
 8007240:	edd3 7a00 	vldr	s15, [r3]
 8007244:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800724c:	dd0c      	ble.n	8007268 <CTRL_refTarget+0x988>
					if(f_TrgtAccAngle < 0.0){
 800724e:	4b8e      	ldr	r3, [pc, #568]	@ (8007488 <CTRL_refTarget+0xba8>)
 8007250:	edd3 7a00 	vldr	s15, [r3]
 8007254:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725c:	d513      	bpl.n	8007286 <CTRL_refTarget+0x9a6>
						f_TrgtAccAngle = 0.0;
 800725e:	4b8a      	ldr	r3, [pc, #552]	@ (8007488 <CTRL_refTarget+0xba8>)
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	e00e      	b.n	8007286 <CTRL_refTarget+0x9a6>
					}
				}else{
					if(f_TrgtAccAngle > f_LastAccAngle){
 8007268:	4b87      	ldr	r3, [pc, #540]	@ (8007488 <CTRL_refTarget+0xba8>)
 800726a:	ed93 7a00 	vldr	s14, [r3]
 800726e:	4b8a      	ldr	r3, [pc, #552]	@ (8007498 <CTRL_refTarget+0xbb8>)
 8007270:	edd3 7a00 	vldr	s15, [r3]
 8007274:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800727c:	dd03      	ble.n	8007286 <CTRL_refTarget+0x9a6>
						f_TrgtAccAngle = f_LastAccAngle;
 800727e:	4b86      	ldr	r3, [pc, #536]	@ (8007498 <CTRL_refTarget+0xbb8>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a81      	ldr	r2, [pc, #516]	@ (8007488 <CTRL_refTarget+0xba8>)
 8007284:	6013      	str	r3, [r2, #0]
					}
				}

				if( f_TrgtAngleS < (f_LastAngleS +(f_TrgtAccAngle * 0.001))){
 8007286:	4b85      	ldr	r3, [pc, #532]	@ (800749c <CTRL_refTarget+0xbbc>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4618      	mov	r0, r3
 800728c:	f7f9 f984 	bl	8000598 <__aeabi_f2d>
 8007290:	4604      	mov	r4, r0
 8007292:	460d      	mov	r5, r1
 8007294:	4b82      	ldr	r3, [pc, #520]	@ (80074a0 <CTRL_refTarget+0xbc0>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4618      	mov	r0, r3
 800729a:	f7f9 f97d 	bl	8000598 <__aeabi_f2d>
 800729e:	4680      	mov	r8, r0
 80072a0:	4689      	mov	r9, r1
 80072a2:	4b79      	ldr	r3, [pc, #484]	@ (8007488 <CTRL_refTarget+0xba8>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7f9 f976 	bl	8000598 <__aeabi_f2d>
 80072ac:	a372      	add	r3, pc, #456	@ (adr r3, 8007478 <CTRL_refTarget+0xb98>)
 80072ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b2:	f7f9 f9c9 	bl	8000648 <__aeabi_dmul>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	4640      	mov	r0, r8
 80072bc:	4649      	mov	r1, r9
 80072be:	f7f9 f80d 	bl	80002dc <__adddf3>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4620      	mov	r0, r4
 80072c8:	4629      	mov	r1, r5
 80072ca:	f7f9 fc2f 	bl	8000b2c <__aeabi_dcmplt>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d040      	beq.n	8007356 <CTRL_refTarget+0xa76>
					f_TrgtAngleS += f_TrgtAccAngle * 0.001;							// 目標角速度
 80072d4:	4b71      	ldr	r3, [pc, #452]	@ (800749c <CTRL_refTarget+0xbbc>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4618      	mov	r0, r3
 80072da:	f7f9 f95d 	bl	8000598 <__aeabi_f2d>
 80072de:	4604      	mov	r4, r0
 80072e0:	460d      	mov	r5, r1
 80072e2:	4b69      	ldr	r3, [pc, #420]	@ (8007488 <CTRL_refTarget+0xba8>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7f9 f956 	bl	8000598 <__aeabi_f2d>
 80072ec:	a362      	add	r3, pc, #392	@ (adr r3, 8007478 <CTRL_refTarget+0xb98>)
 80072ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f2:	f7f9 f9a9 	bl	8000648 <__aeabi_dmul>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	4620      	mov	r0, r4
 80072fc:	4629      	mov	r1, r5
 80072fe:	f7f8 ffed 	bl	80002dc <__adddf3>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4610      	mov	r0, r2
 8007308:	4619      	mov	r1, r3
 800730a:	f7f9 fc95 	bl	8000c38 <__aeabi_d2f>
 800730e:	4603      	mov	r3, r0
 8007310:	4a62      	ldr	r2, [pc, #392]	@ (800749c <CTRL_refTarget+0xbbc>)
 8007312:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  += f_TrgtAngleS * 0.001;	// 目標角度
 8007314:	4b63      	ldr	r3, [pc, #396]	@ (80074a4 <CTRL_refTarget+0xbc4>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4618      	mov	r0, r3
 800731a:	f7f9 f93d 	bl	8000598 <__aeabi_f2d>
 800731e:	4604      	mov	r4, r0
 8007320:	460d      	mov	r5, r1
 8007322:	4b5e      	ldr	r3, [pc, #376]	@ (800749c <CTRL_refTarget+0xbbc>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4618      	mov	r0, r3
 8007328:	f7f9 f936 	bl	8000598 <__aeabi_f2d>
 800732c:	a352      	add	r3, pc, #328	@ (adr r3, 8007478 <CTRL_refTarget+0xb98>)
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	f7f9 f989 	bl	8000648 <__aeabi_dmul>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4620      	mov	r0, r4
 800733c:	4629      	mov	r1, r5
 800733e:	f7f8 ffcd 	bl	80002dc <__adddf3>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	4610      	mov	r0, r2
 8007348:	4619      	mov	r1, r3
 800734a:	f7f9 fc75 	bl	8000c38 <__aeabi_d2f>
 800734e:	4603      	mov	r3, r0
 8007350:	4a54      	ldr	r2, [pc, #336]	@ (80074a4 <CTRL_refTarget+0xbc4>)
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	e0ac      	b.n	80074b0 <CTRL_refTarget+0xbd0>
//					printf("%5.2f %5.2f %5.4f %5.2f %5.2f\n\r",f_TrgtAngleS,f_AccAngleS,f_Time,f_TrgtAngle,f_LastAngleS);
				}
				else{
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 8007356:	4b4e      	ldr	r3, [pc, #312]	@ (8007490 <CTRL_refTarget+0xbb0>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a52      	ldr	r2, [pc, #328]	@ (80074a4 <CTRL_refTarget+0xbc4>)
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	e0a7      	b.n	80074b0 <CTRL_refTarget+0xbd0>
				}
			}
			/* CW */
			else{
				if(f_BaseAccAngle < 0){
 8007360:	4b4c      	ldr	r3, [pc, #304]	@ (8007494 <CTRL_refTarget+0xbb4>)
 8007362:	edd3 7a00 	vldr	s15, [r3]
 8007366:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800736a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800736e:	d50c      	bpl.n	800738a <CTRL_refTarget+0xaaa>
					if(f_TrgtAccAngle > 0.0){
 8007370:	4b45      	ldr	r3, [pc, #276]	@ (8007488 <CTRL_refTarget+0xba8>)
 8007372:	edd3 7a00 	vldr	s15, [r3]
 8007376:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800737a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737e:	dd13      	ble.n	80073a8 <CTRL_refTarget+0xac8>
						f_TrgtAccAngle = 0.0;
 8007380:	4b41      	ldr	r3, [pc, #260]	@ (8007488 <CTRL_refTarget+0xba8>)
 8007382:	f04f 0200 	mov.w	r2, #0
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	e00e      	b.n	80073a8 <CTRL_refTarget+0xac8>
					}
				}else{
					if(f_TrgtAccAngle < f_LastAccAngle){
 800738a:	4b3f      	ldr	r3, [pc, #252]	@ (8007488 <CTRL_refTarget+0xba8>)
 800738c:	ed93 7a00 	vldr	s14, [r3]
 8007390:	4b41      	ldr	r3, [pc, #260]	@ (8007498 <CTRL_refTarget+0xbb8>)
 8007392:	edd3 7a00 	vldr	s15, [r3]
 8007396:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800739a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739e:	d503      	bpl.n	80073a8 <CTRL_refTarget+0xac8>
						f_TrgtAccAngle = f_LastAccAngle;
 80073a0:	4b3d      	ldr	r3, [pc, #244]	@ (8007498 <CTRL_refTarget+0xbb8>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a38      	ldr	r2, [pc, #224]	@ (8007488 <CTRL_refTarget+0xba8>)
 80073a6:	6013      	str	r3, [r2, #0]
					}
				}

				if( f_TrgtAngleS > (f_LastAngleS -(f_TrgtAccAngle * 0.001)) ){
 80073a8:	4b3c      	ldr	r3, [pc, #240]	@ (800749c <CTRL_refTarget+0xbbc>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7f9 f8f3 	bl	8000598 <__aeabi_f2d>
 80073b2:	4604      	mov	r4, r0
 80073b4:	460d      	mov	r5, r1
 80073b6:	4b3a      	ldr	r3, [pc, #232]	@ (80074a0 <CTRL_refTarget+0xbc0>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7f9 f8ec 	bl	8000598 <__aeabi_f2d>
 80073c0:	4680      	mov	r8, r0
 80073c2:	4689      	mov	r9, r1
 80073c4:	4b30      	ldr	r3, [pc, #192]	@ (8007488 <CTRL_refTarget+0xba8>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7f9 f8e5 	bl	8000598 <__aeabi_f2d>
 80073ce:	a32a      	add	r3, pc, #168	@ (adr r3, 8007478 <CTRL_refTarget+0xb98>)
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d4:	f7f9 f938 	bl	8000648 <__aeabi_dmul>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	4640      	mov	r0, r8
 80073de:	4649      	mov	r1, r9
 80073e0:	f7f8 ff7a 	bl	80002d8 <__aeabi_dsub>
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	4620      	mov	r0, r4
 80073ea:	4629      	mov	r1, r5
 80073ec:	f7f9 fbbc 	bl	8000b68 <__aeabi_dcmpgt>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d058      	beq.n	80074a8 <CTRL_refTarget+0xbc8>
					f_TrgtAngleS += f_TrgtAccAngle * 0.001;							// 目標角速度
 80073f6:	4b29      	ldr	r3, [pc, #164]	@ (800749c <CTRL_refTarget+0xbbc>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7f9 f8cc 	bl	8000598 <__aeabi_f2d>
 8007400:	4604      	mov	r4, r0
 8007402:	460d      	mov	r5, r1
 8007404:	4b20      	ldr	r3, [pc, #128]	@ (8007488 <CTRL_refTarget+0xba8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4618      	mov	r0, r3
 800740a:	f7f9 f8c5 	bl	8000598 <__aeabi_f2d>
 800740e:	a31a      	add	r3, pc, #104	@ (adr r3, 8007478 <CTRL_refTarget+0xb98>)
 8007410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007414:	f7f9 f918 	bl	8000648 <__aeabi_dmul>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	4620      	mov	r0, r4
 800741e:	4629      	mov	r1, r5
 8007420:	f7f8 ff5c 	bl	80002dc <__adddf3>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	4610      	mov	r0, r2
 800742a:	4619      	mov	r1, r3
 800742c:	f7f9 fc04 	bl	8000c38 <__aeabi_d2f>
 8007430:	4603      	mov	r3, r0
 8007432:	4a1a      	ldr	r2, [pc, #104]	@ (800749c <CTRL_refTarget+0xbbc>)
 8007434:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  += f_TrgtAngleS * 0.001;	// 目標角度
 8007436:	4b1b      	ldr	r3, [pc, #108]	@ (80074a4 <CTRL_refTarget+0xbc4>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4618      	mov	r0, r3
 800743c:	f7f9 f8ac 	bl	8000598 <__aeabi_f2d>
 8007440:	4604      	mov	r4, r0
 8007442:	460d      	mov	r5, r1
 8007444:	4b15      	ldr	r3, [pc, #84]	@ (800749c <CTRL_refTarget+0xbbc>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4618      	mov	r0, r3
 800744a:	f7f9 f8a5 	bl	8000598 <__aeabi_f2d>
 800744e:	a30a      	add	r3, pc, #40	@ (adr r3, 8007478 <CTRL_refTarget+0xb98>)
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f7f9 f8f8 	bl	8000648 <__aeabi_dmul>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	4620      	mov	r0, r4
 800745e:	4629      	mov	r1, r5
 8007460:	f7f8 ff3c 	bl	80002dc <__adddf3>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	4610      	mov	r0, r2
 800746a:	4619      	mov	r1, r3
 800746c:	f7f9 fbe4 	bl	8000c38 <__aeabi_d2f>
 8007470:	4603      	mov	r3, r0
 8007472:	4a0c      	ldr	r2, [pc, #48]	@ (80074a4 <CTRL_refTarget+0xbc4>)
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	e01b      	b.n	80074b0 <CTRL_refTarget+0xbd0>
 8007478:	d2f1a9fc 	.word	0xd2f1a9fc
 800747c:	3f50624d 	.word	0x3f50624d
 8007480:	20000368 	.word	0x20000368
 8007484:	20000374 	.word	0x20000374
 8007488:	200003ac 	.word	0x200003ac
 800748c:	200003a4 	.word	0x200003a4
 8007490:	200003cc 	.word	0x200003cc
 8007494:	200003a8 	.word	0x200003a8
 8007498:	200003b0 	.word	0x200003b0
 800749c:	200003bc 	.word	0x200003bc
 80074a0:	200003b8 	.word	0x200003b8
 80074a4:	200003d4 	.word	0x200003d4
//					printf("%5.2f %5.2f %5.4f %5.2f %5.2f\n\r",f_TrgtAngleS,f_AccAngleS,f_Time,f_TrgtAngle,f_LastAngleS);
				}
				else{
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 80074a8:	4ba5      	ldr	r3, [pc, #660]	@ (8007740 <CTRL_refTarget+0xe60>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4aa5      	ldr	r2, [pc, #660]	@ (8007744 <CTRL_refTarget+0xe64>)
 80074ae:	6013      	str	r3, [r2, #0]
				}
			}

			/* Position CTRL */
			if( f_LastDist > (f_TrgtDist - (f_TrgtSpeed * 0.001)) ){						// 目標更新区間
 80074b0:	4ba5      	ldr	r3, [pc, #660]	@ (8007748 <CTRL_refTarget+0xe68>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7f9 f86f 	bl	8000598 <__aeabi_f2d>
 80074ba:	4604      	mov	r4, r0
 80074bc:	460d      	mov	r5, r1
 80074be:	4ba3      	ldr	r3, [pc, #652]	@ (800774c <CTRL_refTarget+0xe6c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7f9 f868 	bl	8000598 <__aeabi_f2d>
 80074c8:	4680      	mov	r8, r0
 80074ca:	4689      	mov	r9, r1
 80074cc:	4ba0      	ldr	r3, [pc, #640]	@ (8007750 <CTRL_refTarget+0xe70>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7f9 f861 	bl	8000598 <__aeabi_f2d>
 80074d6:	a398      	add	r3, pc, #608	@ (adr r3, 8007738 <CTRL_refTarget+0xe58>)
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	f7f9 f8b4 	bl	8000648 <__aeabi_dmul>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4640      	mov	r0, r8
 80074e6:	4649      	mov	r1, r9
 80074e8:	f7f8 fef6 	bl	80002d8 <__aeabi_dsub>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	4620      	mov	r0, r4
 80074f2:	4629      	mov	r1, r5
 80074f4:	f7f9 fb38 	bl	8000b68 <__aeabi_dcmpgt>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d020      	beq.n	8007540 <CTRL_refTarget+0xc60>
				f_TrgtDist  += f_TrgtSpeed * 0.001;							// 目標位置
 80074fe:	4b93      	ldr	r3, [pc, #588]	@ (800774c <CTRL_refTarget+0xe6c>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4618      	mov	r0, r3
 8007504:	f7f9 f848 	bl	8000598 <__aeabi_f2d>
 8007508:	4604      	mov	r4, r0
 800750a:	460d      	mov	r5, r1
 800750c:	4b90      	ldr	r3, [pc, #576]	@ (8007750 <CTRL_refTarget+0xe70>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4618      	mov	r0, r3
 8007512:	f7f9 f841 	bl	8000598 <__aeabi_f2d>
 8007516:	a388      	add	r3, pc, #544	@ (adr r3, 8007738 <CTRL_refTarget+0xe58>)
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	f7f9 f894 	bl	8000648 <__aeabi_dmul>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	4620      	mov	r0, r4
 8007526:	4629      	mov	r1, r5
 8007528:	f7f8 fed8 	bl	80002dc <__adddf3>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	4610      	mov	r0, r2
 8007532:	4619      	mov	r1, r3
 8007534:	f7f9 fb80 	bl	8000c38 <__aeabi_d2f>
 8007538:	4603      	mov	r3, r0
 800753a:	4a84      	ldr	r2, [pc, #528]	@ (800774c <CTRL_refTarget+0xe6c>)
 800753c:	6013      	str	r3, [r2, #0]
			}
			else{
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 800753e:	e326      	b.n	8007b8e <CTRL_refTarget+0x12ae>
				f_TrgtDist  = f_LastDist;													// 目標距離
 8007540:	4b81      	ldr	r3, [pc, #516]	@ (8007748 <CTRL_refTarget+0xe68>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a81      	ldr	r2, [pc, #516]	@ (800774c <CTRL_refTarget+0xe6c>)
 8007546:	6013      	str	r3, [r2, #0]
			break;
 8007548:	e321      	b.n	8007b8e <CTRL_refTarget+0x12ae>

		/* const(sla) */
		case CTRL_CONST_SLA:
			f_TrgtSpeed = f_BaseSpeed;
 800754a:	4b82      	ldr	r3, [pc, #520]	@ (8007754 <CTRL_refTarget+0xe74>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a80      	ldr	r2, [pc, #512]	@ (8007750 <CTRL_refTarget+0xe70>)
 8007550:	6013      	str	r3, [r2, #0]
			f_TrgtAngleS = f_BaseAngleS;							// 目標角速度
 8007552:	4b81      	ldr	r3, [pc, #516]	@ (8007758 <CTRL_refTarget+0xe78>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a81      	ldr	r2, [pc, #516]	@ (800775c <CTRL_refTarget+0xe7c>)
 8007558:	6013      	str	r3, [r2, #0]

			/* CCW */
			if( f_LastAngle > 0 ){
 800755a:	4b79      	ldr	r3, [pc, #484]	@ (8007740 <CTRL_refTarget+0xe60>)
 800755c:	edd3 7a00 	vldr	s15, [r3]
 8007560:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007568:	dd4c      	ble.n	8007604 <CTRL_refTarget+0xd24>
				if( f_TrgtAngle < (f_LastAngleS +(f_TrgtAccAngle * 0.001)) ){
 800756a:	4b76      	ldr	r3, [pc, #472]	@ (8007744 <CTRL_refTarget+0xe64>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4618      	mov	r0, r3
 8007570:	f7f9 f812 	bl	8000598 <__aeabi_f2d>
 8007574:	4604      	mov	r4, r0
 8007576:	460d      	mov	r5, r1
 8007578:	4b79      	ldr	r3, [pc, #484]	@ (8007760 <CTRL_refTarget+0xe80>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4618      	mov	r0, r3
 800757e:	f7f9 f80b 	bl	8000598 <__aeabi_f2d>
 8007582:	4680      	mov	r8, r0
 8007584:	4689      	mov	r9, r1
 8007586:	4b77      	ldr	r3, [pc, #476]	@ (8007764 <CTRL_refTarget+0xe84>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4618      	mov	r0, r3
 800758c:	f7f9 f804 	bl	8000598 <__aeabi_f2d>
 8007590:	a369      	add	r3, pc, #420	@ (adr r3, 8007738 <CTRL_refTarget+0xe58>)
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	f7f9 f857 	bl	8000648 <__aeabi_dmul>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	4640      	mov	r0, r8
 80075a0:	4649      	mov	r1, r9
 80075a2:	f7f8 fe9b 	bl	80002dc <__adddf3>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4620      	mov	r0, r4
 80075ac:	4629      	mov	r1, r5
 80075ae:	f7f9 fabd 	bl	8000b2c <__aeabi_dcmplt>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d020      	beq.n	80075fa <CTRL_refTarget+0xd1a>
					f_TrgtAngle	+= f_TrgtAngleS * 0.001;			// 目標角度
 80075b8:	4b62      	ldr	r3, [pc, #392]	@ (8007744 <CTRL_refTarget+0xe64>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4618      	mov	r0, r3
 80075be:	f7f8 ffeb 	bl	8000598 <__aeabi_f2d>
 80075c2:	4604      	mov	r4, r0
 80075c4:	460d      	mov	r5, r1
 80075c6:	4b65      	ldr	r3, [pc, #404]	@ (800775c <CTRL_refTarget+0xe7c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7f8 ffe4 	bl	8000598 <__aeabi_f2d>
 80075d0:	a359      	add	r3, pc, #356	@ (adr r3, 8007738 <CTRL_refTarget+0xe58>)
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	f7f9 f837 	bl	8000648 <__aeabi_dmul>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	4620      	mov	r0, r4
 80075e0:	4629      	mov	r1, r5
 80075e2:	f7f8 fe7b 	bl	80002dc <__adddf3>
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	4610      	mov	r0, r2
 80075ec:	4619      	mov	r1, r3
 80075ee:	f7f9 fb23 	bl	8000c38 <__aeabi_d2f>
 80075f2:	4603      	mov	r3, r0
 80075f4:	4a53      	ldr	r2, [pc, #332]	@ (8007744 <CTRL_refTarget+0xe64>)
 80075f6:	6013      	str	r3, [r2, #0]
 80075f8:	e050      	b.n	800769c <CTRL_refTarget+0xdbc>
				}
				else{
					f_TrgtAngle  = f_LastAngle;									// 目標角度
 80075fa:	4b51      	ldr	r3, [pc, #324]	@ (8007740 <CTRL_refTarget+0xe60>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a51      	ldr	r2, [pc, #324]	@ (8007744 <CTRL_refTarget+0xe64>)
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	e04b      	b.n	800769c <CTRL_refTarget+0xdbc>
				}
			}
			/* CW */
			else{
				if( f_TrgtAngle > (f_LastAngleS -(f_TrgtAccAngle * 0.001)) ){
 8007604:	4b4f      	ldr	r3, [pc, #316]	@ (8007744 <CTRL_refTarget+0xe64>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4618      	mov	r0, r3
 800760a:	f7f8 ffc5 	bl	8000598 <__aeabi_f2d>
 800760e:	4604      	mov	r4, r0
 8007610:	460d      	mov	r5, r1
 8007612:	4b53      	ldr	r3, [pc, #332]	@ (8007760 <CTRL_refTarget+0xe80>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4618      	mov	r0, r3
 8007618:	f7f8 ffbe 	bl	8000598 <__aeabi_f2d>
 800761c:	4680      	mov	r8, r0
 800761e:	4689      	mov	r9, r1
 8007620:	4b50      	ldr	r3, [pc, #320]	@ (8007764 <CTRL_refTarget+0xe84>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4618      	mov	r0, r3
 8007626:	f7f8 ffb7 	bl	8000598 <__aeabi_f2d>
 800762a:	a343      	add	r3, pc, #268	@ (adr r3, 8007738 <CTRL_refTarget+0xe58>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f7f9 f80a 	bl	8000648 <__aeabi_dmul>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	4640      	mov	r0, r8
 800763a:	4649      	mov	r1, r9
 800763c:	f7f8 fe4c 	bl	80002d8 <__aeabi_dsub>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4620      	mov	r0, r4
 8007646:	4629      	mov	r1, r5
 8007648:	f7f9 fa8e 	bl	8000b68 <__aeabi_dcmpgt>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d020      	beq.n	8007694 <CTRL_refTarget+0xdb4>
					f_TrgtAngle	+=f_TrgtAngleS * 0.001;			// 目標角度
 8007652:	4b3c      	ldr	r3, [pc, #240]	@ (8007744 <CTRL_refTarget+0xe64>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4618      	mov	r0, r3
 8007658:	f7f8 ff9e 	bl	8000598 <__aeabi_f2d>
 800765c:	4604      	mov	r4, r0
 800765e:	460d      	mov	r5, r1
 8007660:	4b3e      	ldr	r3, [pc, #248]	@ (800775c <CTRL_refTarget+0xe7c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4618      	mov	r0, r3
 8007666:	f7f8 ff97 	bl	8000598 <__aeabi_f2d>
 800766a:	a333      	add	r3, pc, #204	@ (adr r3, 8007738 <CTRL_refTarget+0xe58>)
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	f7f8 ffea 	bl	8000648 <__aeabi_dmul>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	4620      	mov	r0, r4
 800767a:	4629      	mov	r1, r5
 800767c:	f7f8 fe2e 	bl	80002dc <__adddf3>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4610      	mov	r0, r2
 8007686:	4619      	mov	r1, r3
 8007688:	f7f9 fad6 	bl	8000c38 <__aeabi_d2f>
 800768c:	4603      	mov	r3, r0
 800768e:	4a2d      	ldr	r2, [pc, #180]	@ (8007744 <CTRL_refTarget+0xe64>)
 8007690:	6013      	str	r3, [r2, #0]
 8007692:	e003      	b.n	800769c <CTRL_refTarget+0xdbc>
				}
				else{
					f_TrgtAngle  = f_LastAngle;									// 目標角度
 8007694:	4b2a      	ldr	r3, [pc, #168]	@ (8007740 <CTRL_refTarget+0xe60>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a2a      	ldr	r2, [pc, #168]	@ (8007744 <CTRL_refTarget+0xe64>)
 800769a:	6013      	str	r3, [r2, #0]
				}
			}

			/* Position CTRL */
			if( f_LastDist > (f_TrgtDist - (f_TrgtSpeed * 0.001)) ){						// 目標更新区間
 800769c:	4b2a      	ldr	r3, [pc, #168]	@ (8007748 <CTRL_refTarget+0xe68>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7f8 ff79 	bl	8000598 <__aeabi_f2d>
 80076a6:	4604      	mov	r4, r0
 80076a8:	460d      	mov	r5, r1
 80076aa:	4b28      	ldr	r3, [pc, #160]	@ (800774c <CTRL_refTarget+0xe6c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7f8 ff72 	bl	8000598 <__aeabi_f2d>
 80076b4:	4680      	mov	r8, r0
 80076b6:	4689      	mov	r9, r1
 80076b8:	4b25      	ldr	r3, [pc, #148]	@ (8007750 <CTRL_refTarget+0xe70>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4618      	mov	r0, r3
 80076be:	f7f8 ff6b 	bl	8000598 <__aeabi_f2d>
 80076c2:	a31d      	add	r3, pc, #116	@ (adr r3, 8007738 <CTRL_refTarget+0xe58>)
 80076c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c8:	f7f8 ffbe 	bl	8000648 <__aeabi_dmul>
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	4640      	mov	r0, r8
 80076d2:	4649      	mov	r1, r9
 80076d4:	f7f8 fe00 	bl	80002d8 <__aeabi_dsub>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4620      	mov	r0, r4
 80076de:	4629      	mov	r1, r5
 80076e0:	f7f9 fa42 	bl	8000b68 <__aeabi_dcmpgt>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d020      	beq.n	800772c <CTRL_refTarget+0xe4c>
				f_TrgtDist  += f_TrgtSpeed * 0.001;							// 目標位置
 80076ea:	4b18      	ldr	r3, [pc, #96]	@ (800774c <CTRL_refTarget+0xe6c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7f8 ff52 	bl	8000598 <__aeabi_f2d>
 80076f4:	4604      	mov	r4, r0
 80076f6:	460d      	mov	r5, r1
 80076f8:	4b15      	ldr	r3, [pc, #84]	@ (8007750 <CTRL_refTarget+0xe70>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7f8 ff4b 	bl	8000598 <__aeabi_f2d>
 8007702:	a30d      	add	r3, pc, #52	@ (adr r3, 8007738 <CTRL_refTarget+0xe58>)
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	f7f8 ff9e 	bl	8000648 <__aeabi_dmul>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4620      	mov	r0, r4
 8007712:	4629      	mov	r1, r5
 8007714:	f7f8 fde2 	bl	80002dc <__adddf3>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	4610      	mov	r0, r2
 800771e:	4619      	mov	r1, r3
 8007720:	f7f9 fa8a 	bl	8000c38 <__aeabi_d2f>
 8007724:	4603      	mov	r3, r0
 8007726:	4a09      	ldr	r2, [pc, #36]	@ (800774c <CTRL_refTarget+0xe6c>)
 8007728:	6013      	str	r3, [r2, #0]
			}
			else{
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 800772a:	e230      	b.n	8007b8e <CTRL_refTarget+0x12ae>
				f_TrgtDist  = f_LastDist;													// 目標距離
 800772c:	4b06      	ldr	r3, [pc, #24]	@ (8007748 <CTRL_refTarget+0xe68>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a06      	ldr	r2, [pc, #24]	@ (800774c <CTRL_refTarget+0xe6c>)
 8007732:	6013      	str	r3, [r2, #0]
			break;
 8007734:	e22b      	b.n	8007b8e <CTRL_refTarget+0x12ae>
 8007736:	bf00      	nop
 8007738:	d2f1a9fc 	.word	0xd2f1a9fc
 800773c:	3f50624d 	.word	0x3f50624d
 8007740:	200003cc 	.word	0x200003cc
 8007744:	200003d4 	.word	0x200003d4
 8007748:	2000038c 	.word	0x2000038c
 800774c:	20000390 	.word	0x20000390
 8007750:	20000374 	.word	0x20000374
 8007754:	20000368 	.word	0x20000368
 8007758:	200003b4 	.word	0x200003b4
 800775c:	200003bc 	.word	0x200003bc
 8007760:	200003b8 	.word	0x200003b8
 8007764:	200003ac 	.word	0x200003ac

		/* dec(sla) */
		case CTRL_DEC_SLA:
			f_TrgtSpeed = f_BaseSpeed;
 8007768:	4ba9      	ldr	r3, [pc, #676]	@ (8007a10 <CTRL_refTarget+0x1130>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4aa9      	ldr	r2, [pc, #676]	@ (8007a14 <CTRL_refTarget+0x1134>)
 800776e:	6013      	str	r3, [r2, #0]
			f_TrgtAccAngle += f_JerkAngle*0.001;
 8007770:	4ba9      	ldr	r3, [pc, #676]	@ (8007a18 <CTRL_refTarget+0x1138>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4618      	mov	r0, r3
 8007776:	f7f8 ff0f 	bl	8000598 <__aeabi_f2d>
 800777a:	4604      	mov	r4, r0
 800777c:	460d      	mov	r5, r1
 800777e:	4ba7      	ldr	r3, [pc, #668]	@ (8007a1c <CTRL_refTarget+0x113c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4618      	mov	r0, r3
 8007784:	f7f8 ff08 	bl	8000598 <__aeabi_f2d>
 8007788:	a39f      	add	r3, pc, #636	@ (adr r3, 8007a08 <CTRL_refTarget+0x1128>)
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	f7f8 ff5b 	bl	8000648 <__aeabi_dmul>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	4620      	mov	r0, r4
 8007798:	4629      	mov	r1, r5
 800779a:	f7f8 fd9f 	bl	80002dc <__adddf3>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	4610      	mov	r0, r2
 80077a4:	4619      	mov	r1, r3
 80077a6:	f7f9 fa47 	bl	8000c38 <__aeabi_d2f>
 80077aa:	4603      	mov	r3, r0
 80077ac:	4a9a      	ldr	r2, [pc, #616]	@ (8007a18 <CTRL_refTarget+0x1138>)
 80077ae:	6013      	str	r3, [r2, #0]

			/* CCW */
			if( f_LastAngle > 0 ){
 80077b0:	4b9b      	ldr	r3, [pc, #620]	@ (8007a20 <CTRL_refTarget+0x1140>)
 80077b2:	edd3 7a00 	vldr	s15, [r3]
 80077b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077be:	f340 8095 	ble.w	80078ec <CTRL_refTarget+0x100c>
				if(f_BaseAccAngle < 0){
 80077c2:	4b98      	ldr	r3, [pc, #608]	@ (8007a24 <CTRL_refTarget+0x1144>)
 80077c4:	edd3 7a00 	vldr	s15, [r3]
 80077c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d0:	d50c      	bpl.n	80077ec <CTRL_refTarget+0xf0c>
					if(f_TrgtAccAngle > 0.0){
 80077d2:	4b91      	ldr	r3, [pc, #580]	@ (8007a18 <CTRL_refTarget+0x1138>)
 80077d4:	edd3 7a00 	vldr	s15, [r3]
 80077d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e0:	dd13      	ble.n	800780a <CTRL_refTarget+0xf2a>
						f_TrgtAccAngle = 0.0;
 80077e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007a18 <CTRL_refTarget+0x1138>)
 80077e4:	f04f 0200 	mov.w	r2, #0
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	e00e      	b.n	800780a <CTRL_refTarget+0xf2a>
					}
				}else{
					if(f_TrgtAccAngle < f_LastAccAngle){
 80077ec:	4b8a      	ldr	r3, [pc, #552]	@ (8007a18 <CTRL_refTarget+0x1138>)
 80077ee:	ed93 7a00 	vldr	s14, [r3]
 80077f2:	4b8d      	ldr	r3, [pc, #564]	@ (8007a28 <CTRL_refTarget+0x1148>)
 80077f4:	edd3 7a00 	vldr	s15, [r3]
 80077f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007800:	d503      	bpl.n	800780a <CTRL_refTarget+0xf2a>
						f_TrgtAccAngle = f_LastAccAngle;
 8007802:	4b89      	ldr	r3, [pc, #548]	@ (8007a28 <CTRL_refTarget+0x1148>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a84      	ldr	r2, [pc, #528]	@ (8007a18 <CTRL_refTarget+0x1138>)
 8007808:	6013      	str	r3, [r2, #0]
					}
				}

				if( f_TrgtAngleS > (f_LastAngleS -(f_TrgtAccAngle * 0.001)) ){
 800780a:	4b88      	ldr	r3, [pc, #544]	@ (8007a2c <CTRL_refTarget+0x114c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4618      	mov	r0, r3
 8007810:	f7f8 fec2 	bl	8000598 <__aeabi_f2d>
 8007814:	4604      	mov	r4, r0
 8007816:	460d      	mov	r5, r1
 8007818:	4b85      	ldr	r3, [pc, #532]	@ (8007a30 <CTRL_refTarget+0x1150>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4618      	mov	r0, r3
 800781e:	f7f8 febb 	bl	8000598 <__aeabi_f2d>
 8007822:	4680      	mov	r8, r0
 8007824:	4689      	mov	r9, r1
 8007826:	4b7c      	ldr	r3, [pc, #496]	@ (8007a18 <CTRL_refTarget+0x1138>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4618      	mov	r0, r3
 800782c:	f7f8 feb4 	bl	8000598 <__aeabi_f2d>
 8007830:	a375      	add	r3, pc, #468	@ (adr r3, 8007a08 <CTRL_refTarget+0x1128>)
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	f7f8 ff07 	bl	8000648 <__aeabi_dmul>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	4640      	mov	r0, r8
 8007840:	4649      	mov	r1, r9
 8007842:	f7f8 fd49 	bl	80002d8 <__aeabi_dsub>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	4620      	mov	r0, r4
 800784c:	4629      	mov	r1, r5
 800784e:	f7f9 f98b 	bl	8000b68 <__aeabi_dcmpgt>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d040      	beq.n	80078da <CTRL_refTarget+0xffa>
					f_TrgtAngleS += f_TrgtAccAngle * 0.001;							// 目標角速度
 8007858:	4b74      	ldr	r3, [pc, #464]	@ (8007a2c <CTRL_refTarget+0x114c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4618      	mov	r0, r3
 800785e:	f7f8 fe9b 	bl	8000598 <__aeabi_f2d>
 8007862:	4604      	mov	r4, r0
 8007864:	460d      	mov	r5, r1
 8007866:	4b6c      	ldr	r3, [pc, #432]	@ (8007a18 <CTRL_refTarget+0x1138>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4618      	mov	r0, r3
 800786c:	f7f8 fe94 	bl	8000598 <__aeabi_f2d>
 8007870:	a365      	add	r3, pc, #404	@ (adr r3, 8007a08 <CTRL_refTarget+0x1128>)
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	f7f8 fee7 	bl	8000648 <__aeabi_dmul>
 800787a:	4602      	mov	r2, r0
 800787c:	460b      	mov	r3, r1
 800787e:	4620      	mov	r0, r4
 8007880:	4629      	mov	r1, r5
 8007882:	f7f8 fd2b 	bl	80002dc <__adddf3>
 8007886:	4602      	mov	r2, r0
 8007888:	460b      	mov	r3, r1
 800788a:	4610      	mov	r0, r2
 800788c:	4619      	mov	r1, r3
 800788e:	f7f9 f9d3 	bl	8000c38 <__aeabi_d2f>
 8007892:	4603      	mov	r3, r0
 8007894:	4a65      	ldr	r2, [pc, #404]	@ (8007a2c <CTRL_refTarget+0x114c>)
 8007896:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  += f_TrgtAngleS * 0.001;	// 目標角度
 8007898:	4b66      	ldr	r3, [pc, #408]	@ (8007a34 <CTRL_refTarget+0x1154>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4618      	mov	r0, r3
 800789e:	f7f8 fe7b 	bl	8000598 <__aeabi_f2d>
 80078a2:	4604      	mov	r4, r0
 80078a4:	460d      	mov	r5, r1
 80078a6:	4b61      	ldr	r3, [pc, #388]	@ (8007a2c <CTRL_refTarget+0x114c>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7f8 fe74 	bl	8000598 <__aeabi_f2d>
 80078b0:	a355      	add	r3, pc, #340	@ (adr r3, 8007a08 <CTRL_refTarget+0x1128>)
 80078b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b6:	f7f8 fec7 	bl	8000648 <__aeabi_dmul>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	4620      	mov	r0, r4
 80078c0:	4629      	mov	r1, r5
 80078c2:	f7f8 fd0b 	bl	80002dc <__adddf3>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	4610      	mov	r0, r2
 80078cc:	4619      	mov	r1, r3
 80078ce:	f7f9 f9b3 	bl	8000c38 <__aeabi_d2f>
 80078d2:	4603      	mov	r3, r0
 80078d4:	4a57      	ldr	r2, [pc, #348]	@ (8007a34 <CTRL_refTarget+0x1154>)
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	e0b6      	b.n	8007a48 <CTRL_refTarget+0x1168>
				}
				else{
					f_TrgtAngleS = 0.0;
 80078da:	4b54      	ldr	r3, [pc, #336]	@ (8007a2c <CTRL_refTarget+0x114c>)
 80078dc:	f04f 0200 	mov.w	r2, #0
 80078e0:	601a      	str	r2, [r3, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 80078e2:	4b4f      	ldr	r3, [pc, #316]	@ (8007a20 <CTRL_refTarget+0x1140>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a53      	ldr	r2, [pc, #332]	@ (8007a34 <CTRL_refTarget+0x1154>)
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	e0ad      	b.n	8007a48 <CTRL_refTarget+0x1168>
				}
			}
			/*CW*/
			else{
				if(f_BaseAccAngle > 0){
 80078ec:	4b4d      	ldr	r3, [pc, #308]	@ (8007a24 <CTRL_refTarget+0x1144>)
 80078ee:	edd3 7a00 	vldr	s15, [r3]
 80078f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80078f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fa:	dd0c      	ble.n	8007916 <CTRL_refTarget+0x1036>
					if(f_TrgtAccAngle < 0.0){
 80078fc:	4b46      	ldr	r3, [pc, #280]	@ (8007a18 <CTRL_refTarget+0x1138>)
 80078fe:	edd3 7a00 	vldr	s15, [r3]
 8007902:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800790a:	d513      	bpl.n	8007934 <CTRL_refTarget+0x1054>
						f_TrgtAccAngle = 0.0;
 800790c:	4b42      	ldr	r3, [pc, #264]	@ (8007a18 <CTRL_refTarget+0x1138>)
 800790e:	f04f 0200 	mov.w	r2, #0
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	e00e      	b.n	8007934 <CTRL_refTarget+0x1054>
					}
				}else{
					if(f_TrgtAccAngle > f_LastAccAngle){
 8007916:	4b40      	ldr	r3, [pc, #256]	@ (8007a18 <CTRL_refTarget+0x1138>)
 8007918:	ed93 7a00 	vldr	s14, [r3]
 800791c:	4b42      	ldr	r3, [pc, #264]	@ (8007a28 <CTRL_refTarget+0x1148>)
 800791e:	edd3 7a00 	vldr	s15, [r3]
 8007922:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800792a:	dd03      	ble.n	8007934 <CTRL_refTarget+0x1054>
						f_TrgtAccAngle = f_LastAccAngle;
 800792c:	4b3e      	ldr	r3, [pc, #248]	@ (8007a28 <CTRL_refTarget+0x1148>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a39      	ldr	r2, [pc, #228]	@ (8007a18 <CTRL_refTarget+0x1138>)
 8007932:	6013      	str	r3, [r2, #0]
					}
				}

				if( f_TrgtAngleS < (f_LastAngleS +(f_TrgtAccAngle * 0.001)) ){
 8007934:	4b3d      	ldr	r3, [pc, #244]	@ (8007a2c <CTRL_refTarget+0x114c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4618      	mov	r0, r3
 800793a:	f7f8 fe2d 	bl	8000598 <__aeabi_f2d>
 800793e:	4604      	mov	r4, r0
 8007940:	460d      	mov	r5, r1
 8007942:	4b3b      	ldr	r3, [pc, #236]	@ (8007a30 <CTRL_refTarget+0x1150>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4618      	mov	r0, r3
 8007948:	f7f8 fe26 	bl	8000598 <__aeabi_f2d>
 800794c:	4680      	mov	r8, r0
 800794e:	4689      	mov	r9, r1
 8007950:	4b31      	ldr	r3, [pc, #196]	@ (8007a18 <CTRL_refTarget+0x1138>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4618      	mov	r0, r3
 8007956:	f7f8 fe1f 	bl	8000598 <__aeabi_f2d>
 800795a:	a32b      	add	r3, pc, #172	@ (adr r3, 8007a08 <CTRL_refTarget+0x1128>)
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	f7f8 fe72 	bl	8000648 <__aeabi_dmul>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4640      	mov	r0, r8
 800796a:	4649      	mov	r1, r9
 800796c:	f7f8 fcb6 	bl	80002dc <__adddf3>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4620      	mov	r0, r4
 8007976:	4629      	mov	r1, r5
 8007978:	f7f9 f8d8 	bl	8000b2c <__aeabi_dcmplt>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d05a      	beq.n	8007a38 <CTRL_refTarget+0x1158>
					f_TrgtAngleS += f_TrgtAccAngle * 0.001;							// 目標角速度
 8007982:	4b2a      	ldr	r3, [pc, #168]	@ (8007a2c <CTRL_refTarget+0x114c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4618      	mov	r0, r3
 8007988:	f7f8 fe06 	bl	8000598 <__aeabi_f2d>
 800798c:	4604      	mov	r4, r0
 800798e:	460d      	mov	r5, r1
 8007990:	4b21      	ldr	r3, [pc, #132]	@ (8007a18 <CTRL_refTarget+0x1138>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4618      	mov	r0, r3
 8007996:	f7f8 fdff 	bl	8000598 <__aeabi_f2d>
 800799a:	a31b      	add	r3, pc, #108	@ (adr r3, 8007a08 <CTRL_refTarget+0x1128>)
 800799c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a0:	f7f8 fe52 	bl	8000648 <__aeabi_dmul>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4620      	mov	r0, r4
 80079aa:	4629      	mov	r1, r5
 80079ac:	f7f8 fc96 	bl	80002dc <__adddf3>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	4610      	mov	r0, r2
 80079b6:	4619      	mov	r1, r3
 80079b8:	f7f9 f93e 	bl	8000c38 <__aeabi_d2f>
 80079bc:	4603      	mov	r3, r0
 80079be:	4a1b      	ldr	r2, [pc, #108]	@ (8007a2c <CTRL_refTarget+0x114c>)
 80079c0:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  += f_TrgtAngleS * 0.001;	// 目標角度
 80079c2:	4b1c      	ldr	r3, [pc, #112]	@ (8007a34 <CTRL_refTarget+0x1154>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7f8 fde6 	bl	8000598 <__aeabi_f2d>
 80079cc:	4604      	mov	r4, r0
 80079ce:	460d      	mov	r5, r1
 80079d0:	4b16      	ldr	r3, [pc, #88]	@ (8007a2c <CTRL_refTarget+0x114c>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7f8 fddf 	bl	8000598 <__aeabi_f2d>
 80079da:	a30b      	add	r3, pc, #44	@ (adr r3, 8007a08 <CTRL_refTarget+0x1128>)
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	f7f8 fe32 	bl	8000648 <__aeabi_dmul>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4620      	mov	r0, r4
 80079ea:	4629      	mov	r1, r5
 80079ec:	f7f8 fc76 	bl	80002dc <__adddf3>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	4610      	mov	r0, r2
 80079f6:	4619      	mov	r1, r3
 80079f8:	f7f9 f91e 	bl	8000c38 <__aeabi_d2f>
 80079fc:	4603      	mov	r3, r0
 80079fe:	4a0d      	ldr	r2, [pc, #52]	@ (8007a34 <CTRL_refTarget+0x1154>)
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	e021      	b.n	8007a48 <CTRL_refTarget+0x1168>
 8007a04:	f3af 8000 	nop.w
 8007a08:	d2f1a9fc 	.word	0xd2f1a9fc
 8007a0c:	3f50624d 	.word	0x3f50624d
 8007a10:	20000368 	.word	0x20000368
 8007a14:	20000374 	.word	0x20000374
 8007a18:	200003ac 	.word	0x200003ac
 8007a1c:	200003a4 	.word	0x200003a4
 8007a20:	200003cc 	.word	0x200003cc
 8007a24:	200003a8 	.word	0x200003a8
 8007a28:	200003b0 	.word	0x200003b0
 8007a2c:	200003bc 	.word	0x200003bc
 8007a30:	200003b8 	.word	0x200003b8
 8007a34:	200003d4 	.word	0x200003d4
				}
				else{
					f_TrgtAngleS = 0.0;
 8007a38:	4b59      	ldr	r3, [pc, #356]	@ (8007ba0 <CTRL_refTarget+0x12c0>)
 8007a3a:	f04f 0200 	mov.w	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 8007a40:	4b58      	ldr	r3, [pc, #352]	@ (8007ba4 <CTRL_refTarget+0x12c4>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a58      	ldr	r2, [pc, #352]	@ (8007ba8 <CTRL_refTarget+0x12c8>)
 8007a46:	6013      	str	r3, [r2, #0]
				}
			}

			/* Position CTRL */
			if( f_LastDist > (f_TrgtDist - (f_TrgtSpeed * 0.001)) ){						// 目標更新区間
 8007a48:	4b58      	ldr	r3, [pc, #352]	@ (8007bac <CTRL_refTarget+0x12cc>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7f8 fda3 	bl	8000598 <__aeabi_f2d>
 8007a52:	4604      	mov	r4, r0
 8007a54:	460d      	mov	r5, r1
 8007a56:	4b56      	ldr	r3, [pc, #344]	@ (8007bb0 <CTRL_refTarget+0x12d0>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7f8 fd9c 	bl	8000598 <__aeabi_f2d>
 8007a60:	4680      	mov	r8, r0
 8007a62:	4689      	mov	r9, r1
 8007a64:	4b53      	ldr	r3, [pc, #332]	@ (8007bb4 <CTRL_refTarget+0x12d4>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7f8 fd95 	bl	8000598 <__aeabi_f2d>
 8007a6e:	a34a      	add	r3, pc, #296	@ (adr r3, 8007b98 <CTRL_refTarget+0x12b8>)
 8007a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a74:	f7f8 fde8 	bl	8000648 <__aeabi_dmul>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4640      	mov	r0, r8
 8007a7e:	4649      	mov	r1, r9
 8007a80:	f7f8 fc2a 	bl	80002d8 <__aeabi_dsub>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4620      	mov	r0, r4
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	f7f9 f86c 	bl	8000b68 <__aeabi_dcmpgt>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d020      	beq.n	8007ad8 <CTRL_refTarget+0x11f8>
				f_TrgtDist  += f_TrgtSpeed * 0.001;							// 目標位置
 8007a96:	4b46      	ldr	r3, [pc, #280]	@ (8007bb0 <CTRL_refTarget+0x12d0>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7f8 fd7c 	bl	8000598 <__aeabi_f2d>
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	460d      	mov	r5, r1
 8007aa4:	4b43      	ldr	r3, [pc, #268]	@ (8007bb4 <CTRL_refTarget+0x12d4>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7f8 fd75 	bl	8000598 <__aeabi_f2d>
 8007aae:	a33a      	add	r3, pc, #232	@ (adr r3, 8007b98 <CTRL_refTarget+0x12b8>)
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	f7f8 fdc8 	bl	8000648 <__aeabi_dmul>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4620      	mov	r0, r4
 8007abe:	4629      	mov	r1, r5
 8007ac0:	f7f8 fc0c 	bl	80002dc <__adddf3>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4610      	mov	r0, r2
 8007aca:	4619      	mov	r1, r3
 8007acc:	f7f9 f8b4 	bl	8000c38 <__aeabi_d2f>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	4a37      	ldr	r2, [pc, #220]	@ (8007bb0 <CTRL_refTarget+0x12d0>)
 8007ad4:	6013      	str	r3, [r2, #0]
			}
			else{
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 8007ad6:	e05a      	b.n	8007b8e <CTRL_refTarget+0x12ae>
				f_TrgtDist  = f_LastDist;													// 目標距離
 8007ad8:	4b34      	ldr	r3, [pc, #208]	@ (8007bac <CTRL_refTarget+0x12cc>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a34      	ldr	r2, [pc, #208]	@ (8007bb0 <CTRL_refTarget+0x12d0>)
 8007ade:	6013      	str	r3, [r2, #0]
			break;
 8007ae0:	e055      	b.n	8007b8e <CTRL_refTarget+0x12ae>

		/* escape(sla) */
		case CTRL_EXIT_SLA:
			f_TrgtSpeed = f_BaseSpeed;
 8007ae2:	4b35      	ldr	r3, [pc, #212]	@ (8007bb8 <CTRL_refTarget+0x12d8>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a33      	ldr	r2, [pc, #204]	@ (8007bb4 <CTRL_refTarget+0x12d4>)
 8007ae8:	6013      	str	r3, [r2, #0]
			f_TrgtAngleS = 0;
 8007aea:	4b2d      	ldr	r3, [pc, #180]	@ (8007ba0 <CTRL_refTarget+0x12c0>)
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
			if( f_TrgtDist <= (f_LastDist -f_TrgtSpeed * 0.001)){
 8007af2:	4b2f      	ldr	r3, [pc, #188]	@ (8007bb0 <CTRL_refTarget+0x12d0>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7f8 fd4e 	bl	8000598 <__aeabi_f2d>
 8007afc:	4604      	mov	r4, r0
 8007afe:	460d      	mov	r5, r1
 8007b00:	4b2a      	ldr	r3, [pc, #168]	@ (8007bac <CTRL_refTarget+0x12cc>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7f8 fd47 	bl	8000598 <__aeabi_f2d>
 8007b0a:	4680      	mov	r8, r0
 8007b0c:	4689      	mov	r9, r1
 8007b0e:	4b29      	ldr	r3, [pc, #164]	@ (8007bb4 <CTRL_refTarget+0x12d4>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7f8 fd40 	bl	8000598 <__aeabi_f2d>
 8007b18:	a31f      	add	r3, pc, #124	@ (adr r3, 8007b98 <CTRL_refTarget+0x12b8>)
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	f7f8 fd93 	bl	8000648 <__aeabi_dmul>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4640      	mov	r0, r8
 8007b28:	4649      	mov	r1, r9
 8007b2a:	f7f8 fbd5 	bl	80002d8 <__aeabi_dsub>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4620      	mov	r0, r4
 8007b34:	4629      	mov	r1, r5
 8007b36:	f7f9 f803 	bl	8000b40 <__aeabi_dcmple>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d020      	beq.n	8007b82 <CTRL_refTarget+0x12a2>
				f_TrgtDist  += f_TrgtSpeed * 0.001;								// 目標距離
 8007b40:	4b1b      	ldr	r3, [pc, #108]	@ (8007bb0 <CTRL_refTarget+0x12d0>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7f8 fd27 	bl	8000598 <__aeabi_f2d>
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	460d      	mov	r5, r1
 8007b4e:	4b19      	ldr	r3, [pc, #100]	@ (8007bb4 <CTRL_refTarget+0x12d4>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7f8 fd20 	bl	8000598 <__aeabi_f2d>
 8007b58:	a30f      	add	r3, pc, #60	@ (adr r3, 8007b98 <CTRL_refTarget+0x12b8>)
 8007b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5e:	f7f8 fd73 	bl	8000648 <__aeabi_dmul>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4620      	mov	r0, r4
 8007b68:	4629      	mov	r1, r5
 8007b6a:	f7f8 fbb7 	bl	80002dc <__adddf3>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	460b      	mov	r3, r1
 8007b72:	4610      	mov	r0, r2
 8007b74:	4619      	mov	r1, r3
 8007b76:	f7f9 f85f 	bl	8000c38 <__aeabi_d2f>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8007bb0 <CTRL_refTarget+0x12d0>)
 8007b7e:	6013      	str	r3, [r2, #0]
			}
			else{
				f_TrgtDist  = f_LastDist;														// 目標距離
			}
			break;
 8007b80:	e005      	b.n	8007b8e <CTRL_refTarget+0x12ae>
				f_TrgtDist  = f_LastDist;														// 目標距離
 8007b82:	4b0a      	ldr	r3, [pc, #40]	@ (8007bac <CTRL_refTarget+0x12cc>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a0a      	ldr	r2, [pc, #40]	@ (8007bb0 <CTRL_refTarget+0x12d0>)
 8007b88:	6013      	str	r3, [r2, #0]
			break;
 8007b8a:	e000      	b.n	8007b8e <CTRL_refTarget+0x12ae>

		/* etc */
		default:
			break;
 8007b8c:	bf00      	nop
	}
}
 8007b8e:	bf00      	nop
 8007b90:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007b94:	f3af 8000 	nop.w
 8007b98:	d2f1a9fc 	.word	0xd2f1a9fc
 8007b9c:	3f50624d 	.word	0x3f50624d
 8007ba0:	200003bc 	.word	0x200003bc
 8007ba4:	200003cc 	.word	0x200003cc
 8007ba8:	200003d4 	.word	0x200003d4
 8007bac:	2000038c 	.word	0x2000038c
 8007bb0:	20000390 	.word	0x20000390
 8007bb4:	20000374 	.word	0x20000374
 8007bb8:	20000368 	.word	0x20000368

08007bbc <Chg_ParamID>:

enPARAM_MODE Chg_ParamID( enCTRL_TYPE en_type )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	71fb      	strb	r3, [r7, #7]
	switch( en_type ){
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	2b0e      	cmp	r3, #14
 8007bca:	d83f      	bhi.n	8007c4c <Chg_ParamID+0x90>
 8007bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd4 <Chg_ParamID+0x18>)
 8007bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd2:	bf00      	nop
 8007bd4:	08007c11 	.word	0x08007c11
 8007bd8:	08007c15 	.word	0x08007c15
 8007bdc:	08007c19 	.word	0x08007c19
 8007be0:	08007c21 	.word	0x08007c21
 8007be4:	08007c25 	.word	0x08007c25
 8007be8:	08007c29 	.word	0x08007c29
 8007bec:	08007c1d 	.word	0x08007c1d
 8007bf0:	08007c2d 	.word	0x08007c2d
 8007bf4:	08007c31 	.word	0x08007c31
 8007bf8:	08007c35 	.word	0x08007c35
 8007bfc:	08007c39 	.word	0x08007c39
 8007c00:	08007c3d 	.word	0x08007c3d
 8007c04:	08007c41 	.word	0x08007c41
 8007c08:	08007c45 	.word	0x08007c45
 8007c0c:	08007c49 	.word	0x08007c49
		case CTRL_ACC:			return PARAM_ACC;				// 加速中(直進)
 8007c10:	2301      	movs	r3, #1
 8007c12:	e01c      	b.n	8007c4e <Chg_ParamID+0x92>
		case CTRL_CONST:		return PARAM_CONST;				// 等速中(直進)
 8007c14:	2302      	movs	r3, #2
 8007c16:	e01a      	b.n	8007c4e <Chg_ParamID+0x92>
		case CTRL_DEC:			return PARAM_DEC;				// 減速中(直進)
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e018      	b.n	8007c4e <Chg_ParamID+0x92>
		case CTRL_HIT_WALL:		return PARAM_HIT_WALL;			// 壁あて制御
 8007c1c:	2307      	movs	r3, #7
 8007c1e:	e016      	b.n	8007c4e <Chg_ParamID+0x92>
//		case DCMC_BACK_ACC:		return PARAM_BACK_ACC;			// 加速中(後進)
//		case DCMC_BACK_CONST:		return PARAM_BACK_CONST;		// 等速中(後進)
//		case DCMC_BACK_DEC:		return PARAM_BACK_DEC;			// 減速中(後進)
		case CTRL_SKEW_ACC:		return PARAM_SKEW_ACC;			// 加速中(直進)
 8007c20:	2304      	movs	r3, #4
 8007c22:	e014      	b.n	8007c4e <Chg_ParamID+0x92>
		case CTRL_SKEW_CONST:		return PARAM_SKEW_CONST;		// 等速中(直進)
 8007c24:	2305      	movs	r3, #5
 8007c26:	e012      	b.n	8007c4e <Chg_ParamID+0x92>
		case CTRL_SKEW_DEC:		return PARAM_SKEW_DEC;			// 減速中(直進)
 8007c28:	2306      	movs	r3, #6
 8007c2a:	e010      	b.n	8007c4e <Chg_ParamID+0x92>
		case CTRL_ACC_TRUN:		return PARAM_ACC_TRUN;			// 加速中(超地信旋回)
 8007c2c:	230a      	movs	r3, #10
 8007c2e:	e00e      	b.n	8007c4e <Chg_ParamID+0x92>
		case CTRL_CONST_TRUN:		return PARAM_CONST_TRUN;		// 等速中(超地信旋回)
 8007c30:	230b      	movs	r3, #11
 8007c32:	e00c      	b.n	8007c4e <Chg_ParamID+0x92>
		case CTRL_DEC_TRUN:		return PARAM_DEC_TRUN;			// 減速中(超地信旋回)
 8007c34:	230c      	movs	r3, #12
 8007c36:	e00a      	b.n	8007c4e <Chg_ParamID+0x92>
		case CTRL_ENTRY_SLA:		return PARAM_ENTRY_SLA;		// スラローム前の前進動作(スラローム)
 8007c38:	230f      	movs	r3, #15
 8007c3a:	e008      	b.n	8007c4e <Chg_ParamID+0x92>
		case CTRL_ACC_SLA:		return PARAM_ACC_SLA;			// 加速中(スラローム)
 8007c3c:	2310      	movs	r3, #16
 8007c3e:	e006      	b.n	8007c4e <Chg_ParamID+0x92>
		case CTRL_CONST_SLA:		return PARAM_CONST_SLA;		// 等速中(スラローム)
 8007c40:	2311      	movs	r3, #17
 8007c42:	e004      	b.n	8007c4e <Chg_ParamID+0x92>
		case CTRL_DEC_SLA:		return PARAM_DEC_SLA;			// 減速中(スラローム)
 8007c44:	2312      	movs	r3, #18
 8007c46:	e002      	b.n	8007c4e <Chg_ParamID+0x92>
		case CTRL_EXIT_SLA:		return PARAM_EXIT_SLA;			// スラローム後の前進動作(スラローム)
 8007c48:	2313      	movs	r3, #19
 8007c4a:	e000      	b.n	8007c4e <Chg_ParamID+0x92>
		default:			return PARAM_NC;
 8007c4c:	23ff      	movs	r3, #255	@ 0xff
	}
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop

08007c5c <CTRL_getFF_speed>:

void CTRL_getFF_speed( float* p_err )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
	/* 動作モードに応じる */
	switch( en_Type ){
 8007c64:	4b21      	ldr	r3, [pc, #132]	@ (8007cec <CTRL_getFF_speed+0x90>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b0e      	cmp	r3, #14
 8007c6a:	bf8c      	ite	hi
 8007c6c:	2201      	movhi	r2, #1
 8007c6e:	2200      	movls	r2, #0
 8007c70:	b2d2      	uxtb	r2, r2
 8007c72:	2a00      	cmp	r2, #0
 8007c74:	d12f      	bne.n	8007cd6 <CTRL_getFF_speed+0x7a>
 8007c76:	2201      	movs	r2, #1
 8007c78:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7c:	f245 5212 	movw	r2, #21778	@ 0x5512
 8007c80:	401a      	ands	r2, r3
 8007c82:	2a00      	cmp	r2, #0
 8007c84:	bf14      	ite	ne
 8007c86:	2201      	movne	r2, #1
 8007c88:	2200      	moveq	r2, #0
 8007c8a:	b2d2      	uxtb	r2, r2
 8007c8c:	2a00      	cmp	r2, #0
 8007c8e:	d118      	bne.n	8007cc2 <CTRL_getFF_speed+0x66>
 8007c90:	f242 2264 	movw	r2, #8804	@ 0x2264
 8007c94:	401a      	ands	r2, r3
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	bf14      	ite	ne
 8007c9a:	2201      	movne	r2, #1
 8007c9c:	2200      	moveq	r2, #0
 8007c9e:	b2d2      	uxtb	r2, r2
 8007ca0:	2a00      	cmp	r2, #0
 8007ca2:	d113      	bne.n	8007ccc <CTRL_getFF_speed+0x70>
 8007ca4:	f640 0289 	movw	r2, #2185	@ 0x889
 8007ca8:	401a      	ands	r2, r3
 8007caa:	2a00      	cmp	r2, #0
 8007cac:	bf14      	ite	ne
 8007cae:	2301      	movne	r3, #1
 8007cb0:	2300      	moveq	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00e      	beq.n	8007cd6 <CTRL_getFF_speed+0x7a>
		// 加速 
		case CTRL_ACC:
		case CTRL_SKEW_ACC:
		case CTRL_ACC_TRUN:
		case CTRL_ACC_SLA:
			*p_err = f_TrgtAcc;
 8007cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf0 <CTRL_getFF_speed+0x94>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	601a      	str	r2, [r3, #0]
			break;
 8007cc0:	e00e      	b.n	8007ce0 <CTRL_getFF_speed+0x84>
		case CTRL_SKEW_CONST:
		case CTRL_CONST_TRUN:
		case CTRL_ENTRY_SLA:
		case CTRL_EXIT_SLA:
		case CTRL_CONST_SLA:
			*p_err = 0;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f04f 0200 	mov.w	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]
			break;
 8007cca:	e009      	b.n	8007ce0 <CTRL_getFF_speed+0x84>
		case CTRL_DEC:
		case CTRL_SKEW_DEC:
		case CTRL_DEC_TRUN:
		case CTRL_DEC_SLA:
		case CTRL_HIT_WALL:
			*p_err = f_TrgtAcc;
 8007ccc:	4b08      	ldr	r3, [pc, #32]	@ (8007cf0 <CTRL_getFF_speed+0x94>)
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	601a      	str	r2, [r3, #0]
			break;
 8007cd4:	e004      	b.n	8007ce0 <CTRL_getFF_speed+0x84>

		// 加速以外 
		default:
			*p_err = 0;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f04f 0200 	mov.w	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]
			break;										// 何もしない
 8007cde:	bf00      	nop
	}

}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	200003fa 	.word	0x200003fa
 8007cf0:	20000360 	.word	0x20000360

08007cf4 <CTRL_getFF_angle>:

void CTRL_getFF_angle( float* p_err )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	/* 動作モードに応じる */
	switch( en_Type ){
 8007cfc:	4b38      	ldr	r3, [pc, #224]	@ (8007de0 <CTRL_getFF_angle+0xec>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2b0e      	cmp	r3, #14
 8007d02:	bf8c      	ite	hi
 8007d04:	2201      	movhi	r2, #1
 8007d06:	2200      	movls	r2, #0
 8007d08:	b2d2      	uxtb	r2, r2
 8007d0a:	2a00      	cmp	r2, #0
 8007d0c:	d15e      	bne.n	8007dcc <CTRL_getFF_angle+0xd8>
 8007d0e:	2201      	movs	r2, #1
 8007d10:	fa02 f303 	lsl.w	r3, r2, r3
 8007d14:	f245 5212 	movw	r2, #21778	@ 0x5512
 8007d18:	401a      	ands	r2, r3
 8007d1a:	2a00      	cmp	r2, #0
 8007d1c:	bf14      	ite	ne
 8007d1e:	2201      	movne	r2, #1
 8007d20:	2200      	moveq	r2, #0
 8007d22:	b2d2      	uxtb	r2, r2
 8007d24:	2a00      	cmp	r2, #0
 8007d26:	d128      	bne.n	8007d7a <CTRL_getFF_angle+0x86>
 8007d28:	f242 2224 	movw	r2, #8740	@ 0x2224
 8007d2c:	401a      	ands	r2, r3
 8007d2e:	2a00      	cmp	r2, #0
 8007d30:	bf14      	ite	ne
 8007d32:	2201      	movne	r2, #1
 8007d34:	2200      	moveq	r2, #0
 8007d36:	b2d2      	uxtb	r2, r2
 8007d38:	2a00      	cmp	r2, #0
 8007d3a:	d123      	bne.n	8007d84 <CTRL_getFF_angle+0x90>
 8007d3c:	f640 0289 	movw	r2, #2185	@ 0x889
 8007d40:	401a      	ands	r2, r3
 8007d42:	2a00      	cmp	r2, #0
 8007d44:	bf14      	ite	ne
 8007d46:	2301      	movne	r3, #1
 8007d48:	2300      	moveq	r3, #0
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d03d      	beq.n	8007dcc <CTRL_getFF_angle+0xd8>
		// 加速 
		case CTRL_ACC:
		case CTRL_SKEW_ACC:
		case CTRL_ACC_TRUN:
		case CTRL_ACC_SLA:
			*p_err =FABS(f_TrgtAccAngle);
 8007d50:	4b24      	ldr	r3, [pc, #144]	@ (8007de4 <CTRL_getFF_angle+0xf0>)
 8007d52:	edd3 7a00 	vldr	s15, [r3]
 8007d56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d5e:	db03      	blt.n	8007d68 <CTRL_getFF_angle+0x74>
 8007d60:	4b20      	ldr	r3, [pc, #128]	@ (8007de4 <CTRL_getFF_angle+0xf0>)
 8007d62:	edd3 7a00 	vldr	s15, [r3]
 8007d66:	e004      	b.n	8007d72 <CTRL_getFF_angle+0x7e>
 8007d68:	4b1e      	ldr	r3, [pc, #120]	@ (8007de4 <CTRL_getFF_angle+0xf0>)
 8007d6a:	edd3 7a00 	vldr	s15, [r3]
 8007d6e:	eef1 7a67 	vneg.f32	s15, s15
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	edc3 7a00 	vstr	s15, [r3]
			break;
 8007d78:	e02d      	b.n	8007dd6 <CTRL_getFF_angle+0xe2>
		case CTRL_SKEW_CONST:
		case CTRL_CONST_TRUN:
		case CTRL_ENTRY_SLA:
		case CTRL_EXIT_SLA:
		case CTRL_CONST_SLA:
			*p_err = 0;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	601a      	str	r2, [r3, #0]
			break;
 8007d82:	e028      	b.n	8007dd6 <CTRL_getFF_angle+0xe2>

		case CTRL_DEC:
		case CTRL_SKEW_DEC:
		case CTRL_DEC_TRUN:
		case CTRL_DEC_SLA:
			*p_err = FABS(f_TrgtAccAngle) *(-1.0);
 8007d84:	4b17      	ldr	r3, [pc, #92]	@ (8007de4 <CTRL_getFF_angle+0xf0>)
 8007d86:	edd3 7a00 	vldr	s15, [r3]
 8007d8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d92:	db02      	blt.n	8007d9a <CTRL_getFF_angle+0xa6>
 8007d94:	4b13      	ldr	r3, [pc, #76]	@ (8007de4 <CTRL_getFF_angle+0xf0>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	e006      	b.n	8007da8 <CTRL_getFF_angle+0xb4>
 8007d9a:	4b12      	ldr	r3, [pc, #72]	@ (8007de4 <CTRL_getFF_angle+0xf0>)
 8007d9c:	edd3 7a00 	vldr	s15, [r3]
 8007da0:	eef1 7a67 	vneg.f32	s15, s15
 8007da4:	ee17 3a90 	vmov	r3, s15
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7f8 fbf5 	bl	8000598 <__aeabi_f2d>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4610      	mov	r0, r2
 8007db4:	4619      	mov	r1, r3
 8007db6:	f7f8 ff3f 	bl	8000c38 <__aeabi_d2f>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	ee07 3a90 	vmov	s15, r3
 8007dc0:	eef1 7a67 	vneg.f32	s15, s15
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	edc3 7a00 	vstr	s15, [r3]
			break;
 8007dca:	e004      	b.n	8007dd6 <CTRL_getFF_angle+0xe2>

		// 加速以外 
		default:
			*p_err = 0;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f04f 0200 	mov.w	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]
			break;										// 何もしない
 8007dd4:	bf00      	nop
	}

}
 8007dd6:	bf00      	nop
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	200003fa 	.word	0x200003fa
 8007de4:	200003ac 	.word	0x200003ac

08007de8 <CTRL_getSpeedFB>:

void CTRL_getSpeedFB( float* p_err )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
	float		f_speedErr;					// [速度制御] 速度偏差
	float		f_kp = 0.0f;
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	617b      	str	r3, [r7, #20]
	float		f_ki = 0.0f;
 8007df6:	f04f 0300 	mov.w	r3, #0
 8007dfa:	613b      	str	r3, [r7, #16]
	float		f_kd = 0.0f;
 8007dfc:	f04f 0300 	mov.w	r3, #0
 8007e00:	60fb      	str	r3, [r7, #12]
	/* 速度制御 */
	f_speedErr  = f_TrgtSpeed - f_NowSpeed;					// 速度偏差[mm/s]
 8007e02:	4b35      	ldr	r3, [pc, #212]	@ (8007ed8 <CTRL_getSpeedFB+0xf0>)
 8007e04:	ed93 7a00 	vldr	s14, [r3]
 8007e08:	4b34      	ldr	r3, [pc, #208]	@ (8007edc <CTRL_getSpeedFB+0xf4>)
 8007e0a:	edd3 7a00 	vldr	s15, [r3]
 8007e0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e12:	edc7 7a02 	vstr	s15, [r7, #8]
/*	f_kp = f_FB_speed_kp;
	f_ki = f_FB_speed_ki;
	f_kd = f_FB_speed_kd;
*/
	f_kp = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_speed_kp;
 8007e16:	4b32      	ldr	r3, [pc, #200]	@ (8007ee0 <CTRL_getSpeedFB+0xf8>)
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7ff fece 	bl	8007bbc <Chg_ParamID>
 8007e20:	4603      	mov	r3, r0
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fa fc10 	bl	8002648 <PARAM_getGain>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	617b      	str	r3, [r7, #20]
	f_ki = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_speed_ki;
 8007e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8007ee0 <CTRL_getSpeedFB+0xf8>)
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff fec2 	bl	8007bbc <Chg_ParamID>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fa fc04 	bl	8002648 <PARAM_getGain>
 8007e40:	4603      	mov	r3, r0
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	613b      	str	r3, [r7, #16]
	f_kd = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_speed_kd;
 8007e46:	4b26      	ldr	r3, [pc, #152]	@ (8007ee0 <CTRL_getSpeedFB+0xf8>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff feb6 	bl	8007bbc <Chg_ParamID>
 8007e50:	4603      	mov	r3, r0
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fa fbf8 	bl	8002648 <PARAM_getGain>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	60fb      	str	r3, [r7, #12]
	/* I成分演算 */
	f_SpeedErrSum += f_speedErr;// * f_ki;			// I成分更新
 8007e5e:	4b21      	ldr	r3, [pc, #132]	@ (8007ee4 <CTRL_getSpeedFB+0xfc>)
 8007e60:	ed93 7a00 	vldr	s14, [r3]
 8007e64:	edd7 7a02 	vldr	s15, [r7, #8]
 8007e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ee4 <CTRL_getSpeedFB+0xfc>)
 8007e6e:	edc3 7a00 	vstr	s15, [r3]
	if( f_SpeedErrSum > 10.0 ){
 8007e72:	4b1c      	ldr	r3, [pc, #112]	@ (8007ee4 <CTRL_getSpeedFB+0xfc>)
 8007e74:	edd3 7a00 	vldr	s15, [r3]
 8007e78:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8007e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e84:	dd02      	ble.n	8007e8c <CTRL_getSpeedFB+0xa4>
		f_SpeedErrSum = 10.0;			// 上限リミッター
 8007e86:	4b17      	ldr	r3, [pc, #92]	@ (8007ee4 <CTRL_getSpeedFB+0xfc>)
 8007e88:	4a17      	ldr	r2, [pc, #92]	@ (8007ee8 <CTRL_getSpeedFB+0x100>)
 8007e8a:	601a      	str	r2, [r3, #0]
	}

	*p_err = f_speedErr * f_kp + f_SpeedErrSum* f_ki + ( f_speedErr - f_ErrSpeedBuf ) * f_kd;				// PI制御量算出
 8007e8c:	ed97 7a02 	vldr	s14, [r7, #8]
 8007e90:	edd7 7a05 	vldr	s15, [r7, #20]
 8007e94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e98:	4b12      	ldr	r3, [pc, #72]	@ (8007ee4 <CTRL_getSpeedFB+0xfc>)
 8007e9a:	edd3 6a00 	vldr	s13, [r3]
 8007e9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007ea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ea6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007eaa:	4b10      	ldr	r3, [pc, #64]	@ (8007eec <CTRL_getSpeedFB+0x104>)
 8007eac:	edd3 7a00 	vldr	s15, [r3]
 8007eb0:	edd7 6a02 	vldr	s13, [r7, #8]
 8007eb4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007eb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8007ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	edc3 7a00 	vstr	s15, [r3]

	f_ErrSpeedBuf = f_speedErr;		// 偏差をバッファリング	
 8007eca:	4a08      	ldr	r2, [pc, #32]	@ (8007eec <CTRL_getSpeedFB+0x104>)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	6013      	str	r3, [r2, #0]
/*	if((f_speedErr>1.5)||(f_speedErr<-1.5)){
		Failsafe_flag();
	}
*/
}
 8007ed0:	bf00      	nop
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	20000374 	.word	0x20000374
 8007edc:	20000370 	.word	0x20000370
 8007ee0:	200003fa 	.word	0x200003fa
 8007ee4:	2000037c 	.word	0x2000037c
 8007ee8:	41200000 	.word	0x41200000
 8007eec:	20000378 	.word	0x20000378

08007ef0 <CTRL_getAngleSpeedFB>:

void CTRL_getAngleSpeedFB( float* p_err )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	ed2d 8b02 	vpush	{d8}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
	float f_err;					// [入力] ジャイロセンサーエラー値､
	float f_kp = 0.0f;				// 比例ゲイン
 8007efc:	f04f 0300 	mov.w	r3, #0
 8007f00:	617b      	str	r3, [r7, #20]
	float f_ki = 0.0f;
 8007f02:	f04f 0300 	mov.w	r3, #0
 8007f06:	613b      	str	r3, [r7, #16]
	float f_kd = 0.0f;
 8007f08:	f04f 0300 	mov.w	r3, #0
 8007f0c:	60fb      	str	r3, [r7, #12]


	f_err = f_TrgtAngleS - GYRO_getSpeedErr();			// 目標角度 - ジャイロセンサ[deg/s]
 8007f0e:	4b4a      	ldr	r3, [pc, #296]	@ (8008038 <CTRL_getAngleSpeedFB+0x148>)
 8007f10:	ed93 8a00 	vldr	s16, [r3]
 8007f14:	f001 fdb0 	bl	8009a78 <GYRO_getSpeedErr>
 8007f18:	eef0 7a40 	vmov.f32	s15, s0
 8007f1c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007f20:	edc7 7a02 	vstr	s15, [r7, #8]
/*	f_kp = f_FB_angleS_kp;
	f_ki = f_FB_angleS_ki;
	f_kd = f_FB_angleS_kd;
*/
	f_kp = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_angleS_kp;
 8007f24:	4b45      	ldr	r3, [pc, #276]	@ (800803c <CTRL_getAngleSpeedFB+0x14c>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7ff fe47 	bl	8007bbc <Chg_ParamID>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fa fb89 	bl	8002648 <PARAM_getGain>
 8007f36:	4603      	mov	r3, r0
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	617b      	str	r3, [r7, #20]
	f_ki = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_angleS_ki;
 8007f3c:	4b3f      	ldr	r3, [pc, #252]	@ (800803c <CTRL_getAngleSpeedFB+0x14c>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7ff fe3b 	bl	8007bbc <Chg_ParamID>
 8007f46:	4603      	mov	r3, r0
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fa fb7d 	bl	8002648 <PARAM_getGain>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	613b      	str	r3, [r7, #16]
	f_kd = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_angleS_kd;
 8007f54:	4b39      	ldr	r3, [pc, #228]	@ (800803c <CTRL_getAngleSpeedFB+0x14c>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff fe2f 	bl	8007bbc <Chg_ParamID>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7fa fb71 	bl	8002648 <PARAM_getGain>
 8007f66:	4603      	mov	r3, r0
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	60fb      	str	r3, [r7, #12]

	f_AngleSErrSum += f_err;//*f_ki;
 8007f6c:	4b34      	ldr	r3, [pc, #208]	@ (8008040 <CTRL_getAngleSpeedFB+0x150>)
 8007f6e:	ed93 7a00 	vldr	s14, [r3]
 8007f72:	edd7 7a02 	vldr	s15, [r7, #8]
 8007f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f7a:	4b31      	ldr	r3, [pc, #196]	@ (8008040 <CTRL_getAngleSpeedFB+0x150>)
 8007f7c:	edc3 7a00 	vstr	s15, [r3]

	if(f_AngleSErrSum > 50.0){
 8007f80:	4b2f      	ldr	r3, [pc, #188]	@ (8008040 <CTRL_getAngleSpeedFB+0x150>)
 8007f82:	edd3 7a00 	vldr	s15, [r3]
 8007f86:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008044 <CTRL_getAngleSpeedFB+0x154>
 8007f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f92:	dd03      	ble.n	8007f9c <CTRL_getAngleSpeedFB+0xac>
		f_AngleSErrSum = 50.0;			//上限リミッター
 8007f94:	4b2a      	ldr	r3, [pc, #168]	@ (8008040 <CTRL_getAngleSpeedFB+0x150>)
 8007f96:	4a2c      	ldr	r2, [pc, #176]	@ (8008048 <CTRL_getAngleSpeedFB+0x158>)
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	e00c      	b.n	8007fb6 <CTRL_getAngleSpeedFB+0xc6>
	}
	else if(f_AngleSErrSum <-50.0){
 8007f9c:	4b28      	ldr	r3, [pc, #160]	@ (8008040 <CTRL_getAngleSpeedFB+0x150>)
 8007f9e:	edd3 7a00 	vldr	s15, [r3]
 8007fa2:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800804c <CTRL_getAngleSpeedFB+0x15c>
 8007fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fae:	d502      	bpl.n	8007fb6 <CTRL_getAngleSpeedFB+0xc6>
		f_AngleSErrSum = -50.0;
 8007fb0:	4b23      	ldr	r3, [pc, #140]	@ (8008040 <CTRL_getAngleSpeedFB+0x150>)
 8007fb2:	4a27      	ldr	r2, [pc, #156]	@ (8008050 <CTRL_getAngleSpeedFB+0x160>)
 8007fb4:	601a      	str	r2, [r3, #0]
	}

	*p_err = f_err * f_kp + f_AngleSErrSum*f_ki + ( f_err - f_ErrAngleSBuf ) * f_kd;		// PID制御
 8007fb6:	ed97 7a02 	vldr	s14, [r7, #8]
 8007fba:	edd7 7a05 	vldr	s15, [r7, #20]
 8007fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8008040 <CTRL_getAngleSpeedFB+0x150>)
 8007fc4:	edd3 6a00 	vldr	s13, [r3]
 8007fc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8007fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8008054 <CTRL_getAngleSpeedFB+0x164>)
 8007fd6:	edd3 7a00 	vldr	s15, [r3]
 8007fda:	edd7 6a02 	vldr	s13, [r7, #8]
 8007fde:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007fe2:	edd7 7a03 	vldr	s15, [r7, #12]
 8007fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	edc3 7a00 	vstr	s15, [r3]

	f_ErrAngleSBuf = f_err;		// 偏差をバッファリング	
 8007ff4:	4a17      	ldr	r2, [pc, #92]	@ (8008054 <CTRL_getAngleSpeedFB+0x164>)
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	6013      	str	r3, [r2, #0]
	if((f_err>30.0)||(f_err<-30.0)){
 8007ffa:	edd7 7a02 	vldr	s15, [r7, #8]
 8007ffe:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800800a:	dc09      	bgt.n	8008020 <CTRL_getAngleSpeedFB+0x130>
 800800c:	edd7 7a02 	vldr	s15, [r7, #8]
 8008010:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8008014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800801c:	d400      	bmi.n	8008020 <CTRL_getAngleSpeedFB+0x130>
		if(!(en_Type == CTRL_HIT_WALL)){
			Failsafe_flag();
		}
	}
}
 800801e:	e005      	b.n	800802c <CTRL_getAngleSpeedFB+0x13c>
		if(!(en_Type == CTRL_HIT_WALL)){
 8008020:	4b06      	ldr	r3, [pc, #24]	@ (800803c <CTRL_getAngleSpeedFB+0x14c>)
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	2b06      	cmp	r3, #6
 8008026:	d001      	beq.n	800802c <CTRL_getAngleSpeedFB+0x13c>
			Failsafe_flag();
 8008028:	f001 fb42 	bl	80096b0 <Failsafe_flag>
}
 800802c:	bf00      	nop
 800802e:	3718      	adds	r7, #24
 8008030:	46bd      	mov	sp, r7
 8008032:	ecbd 8b02 	vpop	{d8}
 8008036:	bd80      	pop	{r7, pc}
 8008038:	200003bc 	.word	0x200003bc
 800803c:	200003fa 	.word	0x200003fa
 8008040:	200003c4 	.word	0x200003c4
 8008044:	42480000 	.word	0x42480000
 8008048:	42480000 	.word	0x42480000
 800804c:	c2480000 	.word	0xc2480000
 8008050:	c2480000 	.word	0xc2480000
 8008054:	200003c0 	.word	0x200003c0

08008058 <CTRL_getAngleFB>:

void CTRL_getAngleFB( float* p_err )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	ed2d 8b02 	vpush	{d8}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
    float f_err;                    // [入力] 角度偏差[deg]
    float f_kp = 0.0f;              // 比例ゲイン
 8008064:	f04f 0300 	mov.w	r3, #0
 8008068:	617b      	str	r3, [r7, #20]
    float f_ki = 0.0f;
 800806a:	f04f 0300 	mov.w	r3, #0
 800806e:	613b      	str	r3, [r7, #16]

    f_err = f_TrgtAngle - GYRO_getNowAngle();          // 現在角度[deg]
 8008070:	4b2f      	ldr	r3, [pc, #188]	@ (8008130 <CTRL_getAngleFB+0xd8>)
 8008072:	ed93 8a00 	vldr	s16, [r3]
 8008076:	f001 fd4b 	bl	8009b10 <GYRO_getNowAngle>
 800807a:	eef0 7a40 	vmov.f32	s15, s0
 800807e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8008082:	edc7 7a03 	vstr	s15, [r7, #12]
/*    f_kp = f_FB_angle_kp;
    f_ki = f_FB_angle_ki;
*/
	f_kp = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_angle_kp;
 8008086:	4b2b      	ldr	r3, [pc, #172]	@ (8008134 <CTRL_getAngleFB+0xdc>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	4618      	mov	r0, r3
 800808c:	f7ff fd96 	bl	8007bbc <Chg_ParamID>
 8008090:	4603      	mov	r3, r0
 8008092:	4618      	mov	r0, r3
 8008094:	f7fa fad8 	bl	8002648 <PARAM_getGain>
 8008098:	4603      	mov	r3, r0
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	617b      	str	r3, [r7, #20]
	f_ki = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_angle_ki;
 800809e:	4b25      	ldr	r3, [pc, #148]	@ (8008134 <CTRL_getAngleFB+0xdc>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff fd8a 	bl	8007bbc <Chg_ParamID>
 80080a8:	4603      	mov	r3, r0
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fa facc 	bl	8002648 <PARAM_getGain>
 80080b0:	4603      	mov	r3, r0
 80080b2:	69db      	ldr	r3, [r3, #28]
 80080b4:	613b      	str	r3, [r7, #16]

    f_AngleErrSum += f_err;//*f_ki;
 80080b6:	4b20      	ldr	r3, [pc, #128]	@ (8008138 <CTRL_getAngleFB+0xe0>)
 80080b8:	ed93 7a00 	vldr	s14, [r3]
 80080bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80080c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080c4:	4b1c      	ldr	r3, [pc, #112]	@ (8008138 <CTRL_getAngleFB+0xe0>)
 80080c6:	edc3 7a00 	vstr	s15, [r3]
    if(f_AngleErrSum > 100.0){
 80080ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008138 <CTRL_getAngleFB+0xe0>)
 80080cc:	edd3 7a00 	vldr	s15, [r3]
 80080d0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800813c <CTRL_getAngleFB+0xe4>
 80080d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080dc:	dd03      	ble.n	80080e6 <CTRL_getAngleFB+0x8e>
        f_AngleErrSum = 100.0;           //上限リミッター
 80080de:	4b16      	ldr	r3, [pc, #88]	@ (8008138 <CTRL_getAngleFB+0xe0>)
 80080e0:	4a17      	ldr	r2, [pc, #92]	@ (8008140 <CTRL_getAngleFB+0xe8>)
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	e00c      	b.n	8008100 <CTRL_getAngleFB+0xa8>
    }
    else if(f_AngleErrSum <-100.0){
 80080e6:	4b14      	ldr	r3, [pc, #80]	@ (8008138 <CTRL_getAngleFB+0xe0>)
 80080e8:	edd3 7a00 	vldr	s15, [r3]
 80080ec:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8008144 <CTRL_getAngleFB+0xec>
 80080f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f8:	d502      	bpl.n	8008100 <CTRL_getAngleFB+0xa8>
        f_AngleErrSum = -100.0;
 80080fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008138 <CTRL_getAngleFB+0xe0>)
 80080fc:	4a12      	ldr	r2, [pc, #72]	@ (8008148 <CTRL_getAngleFB+0xf0>)
 80080fe:	601a      	str	r2, [r3, #0]
    }
    *p_err = f_err * f_kp + f_AngleErrSum*f_ki;        // PID制御｡
 8008100:	ed97 7a03 	vldr	s14, [r7, #12]
 8008104:	edd7 7a05 	vldr	s15, [r7, #20]
 8008108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800810c:	4b0a      	ldr	r3, [pc, #40]	@ (8008138 <CTRL_getAngleFB+0xe0>)
 800810e:	edd3 6a00 	vldr	s13, [r3]
 8008112:	edd7 7a04 	vldr	s15, [r7, #16]
 8008116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800811a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	edc3 7a00 	vstr	s15, [r3]

}
 8008124:	bf00      	nop
 8008126:	3718      	adds	r7, #24
 8008128:	46bd      	mov	sp, r7
 800812a:	ecbd 8b02 	vpop	{d8}
 800812e:	bd80      	pop	{r7, pc}
 8008130:	200003d4 	.word	0x200003d4
 8008134:	200003fa 	.word	0x200003fa
 8008138:	200003d8 	.word	0x200003d8
 800813c:	42c80000 	.word	0x42c80000
 8008140:	42c80000 	.word	0x42c80000
 8008144:	c2c80000 	.word	0xc2c80000
 8008148:	c2c80000 	.word	0xc2c80000

0800814c <CTRL_getSenFB>:


void CTRL_getSenFB( float* p_err )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	float f_err 	= 0;
 8008154:	f04f 0300 	mov.w	r3, #0
 8008158:	617b      	str	r3, [r7, #20]
	float f_kp 		= 0.0f;				// 比例ゲイン
 800815a:	f04f 0300 	mov.w	r3, #0
 800815e:	613b      	str	r3, [r7, #16]
	float f_kd 		= 0.0f;				// 微分ゲイン
 8008160:	f04f 0300 	mov.w	r3, #0
 8008164:	60fb      	str	r3, [r7, #12]
	float gyro		= 0.0f;
 8008166:	f04f 0300 	mov.w	r3, #0
 800816a:	60bb      	str	r3, [r7, #8]

	/* 直進時 */
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC )||
 800816c:	4b3a      	ldr	r3, [pc, #232]	@ (8008258 <CTRL_getSenFB+0x10c>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00f      	beq.n	8008194 <CTRL_getSenFB+0x48>
 8008174:	4b38      	ldr	r3, [pc, #224]	@ (8008258 <CTRL_getSenFB+0x10c>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d00b      	beq.n	8008194 <CTRL_getSenFB+0x48>
 800817c:	4b36      	ldr	r3, [pc, #216]	@ (8008258 <CTRL_getSenFB+0x10c>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	2b02      	cmp	r3, #2
 8008182:	d007      	beq.n	8008194 <CTRL_getSenFB+0x48>
			 ( en_Type == CTRL_ENTRY_SLA ) || ( en_Type == CTRL_EXIT_SLA ) ){
 8008184:	4b34      	ldr	r3, [pc, #208]	@ (8008258 <CTRL_getSenFB+0x10c>)
 8008186:	781b      	ldrb	r3, [r3, #0]
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC )||
 8008188:	2b0a      	cmp	r3, #10
 800818a:	d003      	beq.n	8008194 <CTRL_getSenFB+0x48>
			 ( en_Type == CTRL_ENTRY_SLA ) || ( en_Type == CTRL_EXIT_SLA ) ){
 800818c:	4b32      	ldr	r3, [pc, #200]	@ (8008258 <CTRL_getSenFB+0x10c>)
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	2b0e      	cmp	r3, #14
 8008192:	d13c      	bne.n	800820e <CTRL_getSenFB+0xc2>
/*
		f_kp = f_FB_wall_kp;
		f_kd = f_FB_wall_kd;
*/
		f_kp = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_wall_kp;
 8008194:	4b30      	ldr	r3, [pc, #192]	@ (8008258 <CTRL_getSenFB+0x10c>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	4618      	mov	r0, r3
 800819a:	f7ff fd0f 	bl	8007bbc <Chg_ParamID>
 800819e:	4603      	mov	r3, r0
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fa fa51 	bl	8002648 <PARAM_getGain>
 80081a6:	4603      	mov	r3, r0
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	613b      	str	r3, [r7, #16]
		f_kd = PARAM_getGain(Chg_ParamID(en_Type))->f_FB_wall_kd;
 80081ac:	4b2a      	ldr	r3, [pc, #168]	@ (8008258 <CTRL_getSenFB+0x10c>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff fd03 	bl	8007bbc <Chg_ParamID>
 80081b6:	4603      	mov	r3, r0
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fa fa45 	bl	8002648 <PARAM_getGain>
 80081be:	4603      	mov	r3, r0
 80081c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c2:	60fb      	str	r3, [r7, #12]

		/* 偏差取得 */
		DIST_getErr( &l_WallErr );
 80081c4:	4825      	ldr	r0, [pc, #148]	@ (800825c <CTRL_getSenFB+0x110>)
 80081c6:	f00a fd53 	bl	8012c70 <DIST_getErr>
		f_err = (float)l_WallErr;
 80081ca:	4b24      	ldr	r3, [pc, #144]	@ (800825c <CTRL_getSenFB+0x110>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	ee07 3a90 	vmov	s15, r3
 80081d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081d6:	edc7 7a05 	vstr	s15, [r7, #20]

		/* PD制御 */

		f_ErrDistBuf = f_err;		// 偏差をバッファリング
 80081da:	4a21      	ldr	r2, [pc, #132]	@ (8008260 <CTRL_getSenFB+0x114>)
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	6013      	str	r3, [r2, #0]

//		*p_err = (f_err * f_kp + ( f_err - f_ErrDistBuf ) * f_kd)*f_NowSpeed*0.001;		// PD制御
		*p_err = f_err * f_kp + ( f_err - f_ErrDistBuf ) * f_kd;
 80081e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80081e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80081e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80081ec:	4b1c      	ldr	r3, [pc, #112]	@ (8008260 <CTRL_getSenFB+0x114>)
 80081ee:	edd3 7a00 	vldr	s15, [r3]
 80081f2:	edd7 6a05 	vldr	s13, [r7, #20]
 80081f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80081fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80081fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	edc3 7a00 	vstr	s15, [r3]
 800820c:	e01f      	b.n	800824e <CTRL_getSenFB+0x102>
	}
	else if( ( en_Type == CTRL_SKEW_ACC ) || ( en_Type == CTRL_SKEW_CONST ) || ( en_Type == CTRL_SKEW_DEC ) ){
 800820e:	4b12      	ldr	r3, [pc, #72]	@ (8008258 <CTRL_getSenFB+0x10c>)
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	2b03      	cmp	r3, #3
 8008214:	d007      	beq.n	8008226 <CTRL_getSenFB+0xda>
 8008216:	4b10      	ldr	r3, [pc, #64]	@ (8008258 <CTRL_getSenFB+0x10c>)
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	2b04      	cmp	r3, #4
 800821c:	d003      	beq.n	8008226 <CTRL_getSenFB+0xda>
 800821e:	4b0e      	ldr	r3, [pc, #56]	@ (8008258 <CTRL_getSenFB+0x10c>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	2b05      	cmp	r3, #5
 8008224:	d10e      	bne.n	8008244 <CTRL_getSenFB+0xf8>

		DIST_getErrSkew( &l_WallErr );
 8008226:	480d      	ldr	r0, [pc, #52]	@ (800825c <CTRL_getSenFB+0x110>)
 8008228:	f00a feb8 	bl	8012f9c <DIST_getErrSkew>
		f_err = (float)l_WallErr;
 800822c:	4b0b      	ldr	r3, [pc, #44]	@ (800825c <CTRL_getSenFB+0x110>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	ee07 3a90 	vmov	s15, r3
 8008234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008238:	edc7 7a05 	vstr	s15, [r7, #20]

//		*p_err = f_err * f_kp + ( f_err - f_ErrDistBuf ) * f_kd;		// PD制御
//		*p_err = f_err*f_NowSpeed*0.001;
		*p_err = f_err;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	e004      	b.n	800824e <CTRL_getSenFB+0x102>
	}
	else {
		*p_err = 0;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f04f 0200 	mov.w	r2, #0
 800824a:	601a      	str	r2, [r3, #0]
	}

}
 800824c:	bf00      	nop
 800824e:	bf00      	nop
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	200003fa 	.word	0x200003fa
 800825c:	200003dc 	.word	0x200003dc
 8008260:	200003e0 	.word	0x200003e0

08008264 <CTRL_get_frontwall_v_FB>:

void CTRL_get_frontwall_v_FB( float* p_err)
{
 8008264:	b590      	push	{r4, r7, lr}
 8008266:	b089      	sub	sp, #36	@ 0x24
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
	float f_v_err 	= 0;
 800826c:	f04f 0300 	mov.w	r3, #0
 8008270:	61fb      	str	r3, [r7, #28]
	float f_omega_err 	= 0;
 8008272:	f04f 0300 	mov.w	r3, #0
 8008276:	61bb      	str	r3, [r7, #24]
	float f_v_kp 		= 0.0f;				// 比例ゲイン
 8008278:	f04f 0300 	mov.w	r3, #0
 800827c:	617b      	str	r3, [r7, #20]
	float f_v_ki 		= 0.0f;				// 比例ゲイン
 800827e:	f04f 0300 	mov.w	r3, #0
 8008282:	613b      	str	r3, [r7, #16]
	float f_v_kd 		= 0.0f;				// 微分ゲイン
 8008284:	f04f 0300 	mov.w	r3, #0
 8008288:	60fb      	str	r3, [r7, #12]
	float gyro		= 0.0f;
 800828a:	f04f 0300 	mov.w	r3, #0
 800828e:	60bb      	str	r3, [r7, #8]

	/* 前壁制御 */
	if( en_Type == CTRL_FRONT_WALL ){
 8008290:	4b30      	ldr	r3, [pc, #192]	@ (8008354 <CTRL_get_frontwall_v_FB+0xf0>)
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	2b0f      	cmp	r3, #15
 8008296:	d159      	bne.n	800834c <CTRL_get_frontwall_v_FB+0xe8>

		f_v_kp = FB_FRONT_WALL_V_KP;
 8008298:	4b2f      	ldr	r3, [pc, #188]	@ (8008358 <CTRL_get_frontwall_v_FB+0xf4>)
 800829a:	617b      	str	r3, [r7, #20]
		f_v_ki = FB_FRONT_WALL_V_KI;
 800829c:	f04f 0300 	mov.w	r3, #0
 80082a0:	613b      	str	r3, [r7, #16]
		f_v_kd = FB_FRONT_WALL_V_KD;
 80082a2:	4b2e      	ldr	r3, [pc, #184]	@ (800835c <CTRL_get_frontwall_v_FB+0xf8>)
 80082a4:	60fb      	str	r3, [r7, #12]

		if( en_Type == CTRL_FRONT_WALL){
 80082a6:	4b2b      	ldr	r3, [pc, #172]	@ (8008354 <CTRL_get_frontwall_v_FB+0xf0>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b0f      	cmp	r3, #15
 80082ac:	d14e      	bne.n	800834c <CTRL_get_frontwall_v_FB+0xe8>
			l_FrontSen_vErr = ((L_FRONT_REF+FRONT_WALL_MINUS) - DIST_getNowVal( DIST_SEN_L_FRONT )) + ((R_FRONT_REF+FRONT_WALL_MINUS) - DIST_getNowVal( DIST_SEN_R_FRONT ));
 80082ae:	2001      	movs	r0, #1
 80082b0:	f00a fcc6 	bl	8012c40 <DIST_getNowVal>
 80082b4:	4603      	mov	r3, r0
 80082b6:	f5c3 742c 	rsb	r4, r3, #688	@ 0x2b0
 80082ba:	2000      	movs	r0, #0
 80082bc:	f00a fcc0 	bl	8012c40 <DIST_getNowVal>
 80082c0:	4603      	mov	r3, r0
 80082c2:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80082c6:	3306      	adds	r3, #6
 80082c8:	4423      	add	r3, r4
 80082ca:	4a25      	ldr	r2, [pc, #148]	@ (8008360 <CTRL_get_frontwall_v_FB+0xfc>)
 80082cc:	6013      	str	r3, [r2, #0]
			f_v_err = (float)l_FrontSen_vErr;
 80082ce:	4b24      	ldr	r3, [pc, #144]	@ (8008360 <CTRL_get_frontwall_v_FB+0xfc>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	ee07 3a90 	vmov	s15, r3
 80082d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082da:	edc7 7a07 	vstr	s15, [r7, #28]
	
			/* PD制御 */
			f_ErrFrontSen_vBuf = f_v_err;		// 偏差をバッファリング
 80082de:	4a21      	ldr	r2, [pc, #132]	@ (8008364 <CTRL_get_frontwall_v_FB+0x100>)
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	6013      	str	r3, [r2, #0]

			*p_err = f_v_err * f_v_kp + ( f_v_err - f_ErrFrontSen_vBuf ) * f_v_kd;		// PD制御
 80082e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80082e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80082ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082f0:	4b1c      	ldr	r3, [pc, #112]	@ (8008364 <CTRL_get_frontwall_v_FB+0x100>)
 80082f2:	edd3 7a00 	vldr	s15, [r3]
 80082f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80082fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80082fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8008302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	edc3 7a00 	vstr	s15, [r3]
			if(*p_err < - 0.5)*p_err = -0.5;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	edd3 7a00 	vldr	s15, [r3]
 8008316:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800831a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800831e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008322:	d504      	bpl.n	800832e <CTRL_get_frontwall_v_FB+0xca>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 800832a:	601a      	str	r2, [r3, #0]
			else if(*p_err > 0.5)*p_err = 0.5;
		}
	}

}
 800832c:	e00e      	b.n	800834c <CTRL_get_frontwall_v_FB+0xe8>
			else if(*p_err > 0.5)*p_err = 0.5;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	edd3 7a00 	vldr	s15, [r3]
 8008334:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800833c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008340:	dc00      	bgt.n	8008344 <CTRL_get_frontwall_v_FB+0xe0>
}
 8008342:	e003      	b.n	800834c <CTRL_get_frontwall_v_FB+0xe8>
			else if(*p_err > 0.5)*p_err = 0.5;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800834a:	601a      	str	r2, [r3, #0]
}
 800834c:	bf00      	nop
 800834e:	3724      	adds	r7, #36	@ 0x24
 8008350:	46bd      	mov	sp, r7
 8008352:	bd90      	pop	{r4, r7, pc}
 8008354:	200003fa 	.word	0x200003fa
 8008358:	3a83126f 	.word	0x3a83126f
 800835c:	38d1b717 	.word	0x38d1b717
 8008360:	200003e4 	.word	0x200003e4
 8008364:	200003ec 	.word	0x200003ec

08008368 <CTRL_get_frontwall_omega_FB>:

void CTRL_get_frontwall_omega_FB( float* p_err)
{
 8008368:	b590      	push	{r4, r7, lr}
 800836a:	b089      	sub	sp, #36	@ 0x24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
	float f_omega_err 	= 0;
 8008370:	f04f 0300 	mov.w	r3, #0
 8008374:	61fb      	str	r3, [r7, #28]
	
	float f_omega_kp 		= 0.0f;				// 比例ゲイン
 8008376:	f04f 0300 	mov.w	r3, #0
 800837a:	61bb      	str	r3, [r7, #24]
	float f_omega_ki 		= 0.0f;				// 比例ゲイン
 800837c:	f04f 0300 	mov.w	r3, #0
 8008380:	617b      	str	r3, [r7, #20]
	float f_omega_kd 		= 0.0f;				// 微分ゲイン
 8008382:	f04f 0300 	mov.w	r3, #0
 8008386:	613b      	str	r3, [r7, #16]
	float gyro		= 0.0f;
 8008388:	f04f 0300 	mov.w	r3, #0
 800838c:	60fb      	str	r3, [r7, #12]

	/* 前壁制御 */
	if( en_Type == CTRL_FRONT_WALL ){
 800838e:	4b2a      	ldr	r3, [pc, #168]	@ (8008438 <CTRL_get_frontwall_omega_FB+0xd0>)
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	2b0f      	cmp	r3, #15
 8008394:	d14c      	bne.n	8008430 <CTRL_get_frontwall_omega_FB+0xc8>
		f_omega_kp = FB_FRONT_WALL_OMEGA_KP;
 8008396:	4b29      	ldr	r3, [pc, #164]	@ (800843c <CTRL_get_frontwall_omega_FB+0xd4>)
 8008398:	61bb      	str	r3, [r7, #24]
		f_omega_ki = FB_FRONT_WALL_OMEGA_KI;
 800839a:	f04f 0300 	mov.w	r3, #0
 800839e:	617b      	str	r3, [r7, #20]
		f_omega_kd = FB_FRONT_WALL_OMEGA_KD;
 80083a0:	4b27      	ldr	r3, [pc, #156]	@ (8008440 <CTRL_get_frontwall_omega_FB+0xd8>)
 80083a2:	613b      	str	r3, [r7, #16]

		if( en_Type == CTRL_FRONT_WALL){	
 80083a4:	4b24      	ldr	r3, [pc, #144]	@ (8008438 <CTRL_get_frontwall_omega_FB+0xd0>)
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	2b0f      	cmp	r3, #15
 80083aa:	d141      	bne.n	8008430 <CTRL_get_frontwall_omega_FB+0xc8>
			l_FrontSen_OmegaErr = (DIST_getNowVal( DIST_SEN_L_FRONT )- (L_FRONT_REF+FRONT_WALL_MINUS)) + 
 80083ac:	2001      	movs	r0, #1
 80083ae:	f00a fc47 	bl	8012c40 <DIST_getNowVal>
 80083b2:	4603      	mov	r3, r0
 80083b4:	f5a3 742c 	sub.w	r4, r3, #688	@ 0x2b0
									((R_FRONT_REF+FRONT_WALL_MINUS) - DIST_getNowVal( DIST_SEN_R_FRONT ));
 80083b8:	2000      	movs	r0, #0
 80083ba:	f00a fc41 	bl	8012c40 <DIST_getNowVal>
 80083be:	4603      	mov	r3, r0
 80083c0:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80083c4:	3306      	adds	r3, #6
			l_FrontSen_OmegaErr = (DIST_getNowVal( DIST_SEN_L_FRONT )- (L_FRONT_REF+FRONT_WALL_MINUS)) + 
 80083c6:	4423      	add	r3, r4
 80083c8:	4a1e      	ldr	r2, [pc, #120]	@ (8008444 <CTRL_get_frontwall_omega_FB+0xdc>)
 80083ca:	6013      	str	r3, [r2, #0]
			if(l_FrontSen_OmegaErr > 500)l_FrontSen_OmegaErr = 500;
 80083cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008444 <CTRL_get_frontwall_omega_FB+0xdc>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80083d4:	dd03      	ble.n	80083de <CTRL_get_frontwall_omega_FB+0x76>
 80083d6:	4b1b      	ldr	r3, [pc, #108]	@ (8008444 <CTRL_get_frontwall_omega_FB+0xdc>)
 80083d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80083dc:	601a      	str	r2, [r3, #0]
			if(l_FrontSen_OmegaErr < -500)l_FrontSen_OmegaErr = -500;
 80083de:	4b19      	ldr	r3, [pc, #100]	@ (8008444 <CTRL_get_frontwall_omega_FB+0xdc>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80083e6:	da02      	bge.n	80083ee <CTRL_get_frontwall_omega_FB+0x86>
 80083e8:	4b16      	ldr	r3, [pc, #88]	@ (8008444 <CTRL_get_frontwall_omega_FB+0xdc>)
 80083ea:	4a17      	ldr	r2, [pc, #92]	@ (8008448 <CTRL_get_frontwall_omega_FB+0xe0>)
 80083ec:	601a      	str	r2, [r3, #0]
			f_omega_err = (float)l_FrontSen_OmegaErr;
 80083ee:	4b15      	ldr	r3, [pc, #84]	@ (8008444 <CTRL_get_frontwall_omega_FB+0xdc>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	ee07 3a90 	vmov	s15, r3
 80083f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083fa:	edc7 7a07 	vstr	s15, [r7, #28]
	
			/* PD制御 */
			f_ErrFrontSen_OmegaBuf = f_omega_err;		// 偏差をバッファリング
 80083fe:	4a13      	ldr	r2, [pc, #76]	@ (800844c <CTRL_get_frontwall_omega_FB+0xe4>)
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	6013      	str	r3, [r2, #0]

			*p_err =f_omega_err * f_omega_kp + ( f_omega_err - f_ErrFrontSen_OmegaBuf ) * f_omega_kd;		// PD制御
 8008404:	ed97 7a07 	vldr	s14, [r7, #28]
 8008408:	edd7 7a06 	vldr	s15, [r7, #24]
 800840c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008410:	4b0e      	ldr	r3, [pc, #56]	@ (800844c <CTRL_get_frontwall_omega_FB+0xe4>)
 8008412:	edd3 7a00 	vldr	s15, [r3]
 8008416:	edd7 6a07 	vldr	s13, [r7, #28]
 800841a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800841e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	edc3 7a00 	vstr	s15, [r3]
		}
	}

}
 8008430:	bf00      	nop
 8008432:	3724      	adds	r7, #36	@ 0x24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd90      	pop	{r4, r7, pc}
 8008438:	200003fa 	.word	0x200003fa
 800843c:	3f666666 	.word	0x3f666666
 8008440:	3e99999a 	.word	0x3e99999a
 8008444:	200003e8 	.word	0x200003e8
 8008448:	fffffe0c 	.word	0xfffffe0c
 800844c:	200003f0 	.word	0x200003f0

08008450 <CTRL_getFloorFriction>:

void CTRL_getFloorFriction(float* p_err){
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
	float tread;
	if(( en_Type == CTRL_ACC_TRUN) || (en_Type == CTRL_CONST_TRUN)||( en_Type == CTRL_DEC_TRUN )){
 8008458:	4b1a      	ldr	r3, [pc, #104]	@ (80084c4 <CTRL_getFloorFriction+0x74>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	2b07      	cmp	r3, #7
 800845e:	d007      	beq.n	8008470 <CTRL_getFloorFriction+0x20>
 8008460:	4b18      	ldr	r3, [pc, #96]	@ (80084c4 <CTRL_getFloorFriction+0x74>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b08      	cmp	r3, #8
 8008466:	d003      	beq.n	8008470 <CTRL_getFloorFriction+0x20>
 8008468:	4b16      	ldr	r3, [pc, #88]	@ (80084c4 <CTRL_getFloorFriction+0x74>)
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b09      	cmp	r3, #9
 800846e:	d102      	bne.n	8008476 <CTRL_getFloorFriction+0x26>
		tread = TREAD_IMAGIN;
 8008470:	4b15      	ldr	r3, [pc, #84]	@ (80084c8 <CTRL_getFloorFriction+0x78>)
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	e001      	b.n	800847a <CTRL_getFloorFriction+0x2a>
	}else{
		tread = TREAD;
 8008476:	4b15      	ldr	r3, [pc, #84]	@ (80084cc <CTRL_getFloorFriction+0x7c>)
 8008478:	60fb      	str	r3, [r7, #12]
			*p_err = 0;
		}
	}
*/
//	else{
		if(f_TrgtAngleS<0){
 800847a:	4b15      	ldr	r3, [pc, #84]	@ (80084d0 <CTRL_getFloorFriction+0x80>)
 800847c:	edd3 7a00 	vldr	s15, [r3]
 8008480:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008488:	d504      	bpl.n	8008494 <CTRL_getFloorFriction+0x44>
	//			*p_err = (-1)*0.35/1000.0 + (-1)*0.45/1000.0+f_TrgtAngleS*tread/2/PI/109.0;
			else
				*p_err = (-1.0)*0.37/1000.0;
			}
*/
			*p_err = 0.0;//(-1.0)*0.2/1000.0;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f04f 0200 	mov.w	r2, #0
 8008490:	601a      	str	r2, [r3, #0]
/*	if(*p_err>0.0014)
		*p_err = 0.0014;
	if(*p_err<-0.0014)
		*p_err = -0.0014;
*/
}
 8008492:	e010      	b.n	80084b6 <CTRL_getFloorFriction+0x66>
		else if(f_TrgtAngleS>0){
 8008494:	4b0e      	ldr	r3, [pc, #56]	@ (80084d0 <CTRL_getFloorFriction+0x80>)
 8008496:	edd3 7a00 	vldr	s15, [r3]
 800849a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800849e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084a2:	dd04      	ble.n	80084ae <CTRL_getFloorFriction+0x5e>
			*p_err = 0.0;//0.2/1000.0;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f04f 0200 	mov.w	r2, #0
 80084aa:	601a      	str	r2, [r3, #0]
}
 80084ac:	e003      	b.n	80084b6 <CTRL_getFloorFriction+0x66>
			*p_err = 0;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f04f 0200 	mov.w	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]
}
 80084b6:	bf00      	nop
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	200003fa 	.word	0x200003fa
 80084c8:	3d178d50 	.word	0x3d178d50
 80084cc:	3d0f5c29 	.word	0x3d0f5c29
 80084d0:	200003bc 	.word	0x200003bc

080084d4 <CTRL_outMot>:

void CTRL_outMot( float f_duty10_R, float f_duty10_L )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	ed87 0a01 	vstr	s0, [r7, #4]
 80084de:	edc7 0a00 	vstr	s1, [r7]
	float	f_temp;			// 計算用

	/* 電圧に応じてPWM出力を変更する */
	f_duty10_R = f_duty10_R*1000.0;
 80084e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80084e6:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8008618 <CTRL_outMot+0x144>
 80084ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80084ee:	edc7 7a01 	vstr	s15, [r7, #4]
	f_duty10_L = f_duty10_L*1000.0;
 80084f2:	edd7 7a00 	vldr	s15, [r7]
 80084f6:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8008618 <CTRL_outMot+0x144>
 80084fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80084fe:	edc7 7a00 	vstr	s15, [r7]

	/* 右モータ */
	if( 25 < f_duty10_R ){									// 前進
 8008502:	edd7 7a01 	vldr	s15, [r7, #4]
 8008506:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800850a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800850e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008512:	dd0e      	ble.n	8008532 <CTRL_outMot+0x5e>
		DCM_setDirCcw( DCM_R );
 8008514:	2000      	movs	r0, #0
 8008516:	f001 f902 	bl	800971e <DCM_setDirCcw>
		DCM_setPwmDuty( DCM_R, (uint16_t)f_duty10_R );
 800851a:	edd7 7a01 	vldr	s15, [r7, #4]
 800851e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008522:	ee17 3a90 	vmov	r3, s15
 8008526:	b29b      	uxth	r3, r3
 8008528:	4619      	mov	r1, r3
 800852a:	2000      	movs	r0, #0
 800852c:	f001 f938 	bl	80097a0 <DCM_setPwmDuty>
 8008530:	e02a      	b.n	8008588 <CTRL_outMot+0xb4>
	}
	else if( f_duty10_R < -25 ){							// 後退
 8008532:	edd7 7a01 	vldr	s15, [r7, #4]
 8008536:	eebb 7a09 	vmov.f32	s14, #185	@ 0xc1c80000 -25.0
 800853a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800853e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008542:	d51e      	bpl.n	8008582 <CTRL_outMot+0xae>
		f_temp = f_duty10_R * -1.0;
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7f8 f827 	bl	8000598 <__aeabi_f2d>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	4610      	mov	r0, r2
 8008550:	4619      	mov	r1, r3
 8008552:	f7f8 fb71 	bl	8000c38 <__aeabi_d2f>
 8008556:	4603      	mov	r3, r0
 8008558:	ee07 3a90 	vmov	s15, r3
 800855c:	eef1 7a67 	vneg.f32	s15, s15
 8008560:	edc7 7a03 	vstr	s15, [r7, #12]
		DCM_setDirCw( DCM_R );
 8008564:	2000      	movs	r0, #0
 8008566:	f001 f8c7 	bl	80096f8 <DCM_setDirCw>
		DCM_setPwmDuty( DCM_R, (uint16_t)f_temp );
 800856a:	edd7 7a03 	vldr	s15, [r7, #12]
 800856e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008572:	ee17 3a90 	vmov	r3, s15
 8008576:	b29b      	uxth	r3, r3
 8008578:	4619      	mov	r1, r3
 800857a:	2000      	movs	r0, #0
 800857c:	f001 f910 	bl	80097a0 <DCM_setPwmDuty>
 8008580:	e002      	b.n	8008588 <CTRL_outMot+0xb4>
	}
	else{
		DCM_brakeMot( DCM_R );								// ブレーキ
 8008582:	2000      	movs	r0, #0
 8008584:	f001 f8de 	bl	8009744 <DCM_brakeMot>
	}

	/* 左モータ */
	if( 25 < f_duty10_L ){									// 前進
 8008588:	edd7 7a00 	vldr	s15, [r7]
 800858c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8008590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008598:	dd0e      	ble.n	80085b8 <CTRL_outMot+0xe4>
		DCM_setDirCw( DCM_L );
 800859a:	2001      	movs	r0, #1
 800859c:	f001 f8ac 	bl	80096f8 <DCM_setDirCw>
		DCM_setPwmDuty( DCM_L, (uint16_t)f_duty10_L );
 80085a0:	edd7 7a00 	vldr	s15, [r7]
 80085a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085a8:	ee17 3a90 	vmov	r3, s15
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	4619      	mov	r1, r3
 80085b0:	2001      	movs	r0, #1
 80085b2:	f001 f8f5 	bl	80097a0 <DCM_setPwmDuty>
		DCM_setPwmDuty( DCM_L, (uint16_t)f_temp );
	}
	else{
		DCM_brakeMot( DCM_L );								// ブレーキ
	}
}
 80085b6:	e02a      	b.n	800860e <CTRL_outMot+0x13a>
	else if( f_duty10_L < -25 ){							// 後退
 80085b8:	edd7 7a00 	vldr	s15, [r7]
 80085bc:	eebb 7a09 	vmov.f32	s14, #185	@ 0xc1c80000 -25.0
 80085c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c8:	d51e      	bpl.n	8008608 <CTRL_outMot+0x134>
		f_temp = f_duty10_L * -1.0;
 80085ca:	6838      	ldr	r0, [r7, #0]
 80085cc:	f7f7 ffe4 	bl	8000598 <__aeabi_f2d>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4610      	mov	r0, r2
 80085d6:	4619      	mov	r1, r3
 80085d8:	f7f8 fb2e 	bl	8000c38 <__aeabi_d2f>
 80085dc:	4603      	mov	r3, r0
 80085de:	ee07 3a90 	vmov	s15, r3
 80085e2:	eef1 7a67 	vneg.f32	s15, s15
 80085e6:	edc7 7a03 	vstr	s15, [r7, #12]
		DCM_setDirCcw( DCM_L );
 80085ea:	2001      	movs	r0, #1
 80085ec:	f001 f897 	bl	800971e <DCM_setDirCcw>
		DCM_setPwmDuty( DCM_L, (uint16_t)f_temp );
 80085f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80085f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085f8:	ee17 3a90 	vmov	r3, s15
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	4619      	mov	r1, r3
 8008600:	2001      	movs	r0, #1
 8008602:	f001 f8cd 	bl	80097a0 <DCM_setPwmDuty>
}
 8008606:	e002      	b.n	800860e <CTRL_outMot+0x13a>
		DCM_brakeMot( DCM_L );								// ブレーキ
 8008608:	2001      	movs	r0, #1
 800860a:	f001 f89b 	bl	8009744 <DCM_brakeMot>
}
 800860e:	bf00      	nop
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	447a0000 	.word	0x447a0000
 800861c:	00000000 	.word	0x00000000

08008620 <CTRL_pol>:

void CTRL_pol( void )
{
 8008620:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008624:	b090      	sub	sp, #64	@ 0x40
 8008626:	af00      	add	r7, sp, #0
	float f_feedFoard_speed		= 0;		// [制御] フィードフォワード速度制御
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	627b      	str	r3, [r7, #36]	@ 0x24
	float f_feedFoard_angle		= 0;		// [制御] フィードフォワード角度制御
 800862e:	f04f 0300 	mov.w	r3, #0
 8008632:	623b      	str	r3, [r7, #32]
	float f_speedCtrl			= 0;		// [制御] 速度制御量
 8008634:	f04f 0300 	mov.w	r3, #0
 8008638:	61fb      	str	r3, [r7, #28]
	float f_angleSpeedCtrl			= 0;	// [制御] 角速度制御量
 800863a:	f04f 0300 	mov.w	r3, #0
 800863e:	61bb      	str	r3, [r7, #24]
	float f_angleCtrl			= 0;		// [制御] 角度制御量
 8008640:	f04f 0300 	mov.w	r3, #0
 8008644:	617b      	str	r3, [r7, #20]
	float f_distSenCtrl			= 0;		// [制御] 距離センサー制御量
 8008646:	f04f 0300 	mov.w	r3, #0
 800864a:	613b      	str	r3, [r7, #16]
	float f_frontwall_v_Ctrl		= 0;
 800864c:	f04f 0300 	mov.w	r3, #0
 8008650:	60fb      	str	r3, [r7, #12]
	float f_frontwall_omega_Ctrl	= 0;
 8008652:	f04f 0300 	mov.w	r3, #0
 8008656:	60bb      	str	r3, [r7, #8]
	float f_floorfriction		= 0;
 8008658:	f04f 0300 	mov.w	r3, #0
 800865c:	607b      	str	r3, [r7, #4]
	float f_duty10_R;						// [出力] 右モータPWM-DUTY比[0.1%]
	float f_duty10_L;						// [出力] 左モータPWM-DUTY比[0.1%]

	float TR = 0.0;
 800865e:	f04f 0300 	mov.w	r3, #0
 8008662:	62bb      	str	r3, [r7, #40]	@ 0x28
	float TL = 0.0;
 8008664:	f04f 0300 	mov.w	r3, #0
 8008668:	637b      	str	r3, [r7, #52]	@ 0x34
	float Ir = 0.0;
 800866a:	f04f 0300 	mov.w	r3, #0
 800866e:	633b      	str	r3, [r7, #48]	@ 0x30
	float Il = 0.0;
 8008670:	f04f 0300 	mov.w	r3, #0
 8008674:	62fb      	str	r3, [r7, #44]	@ 0x2c

	ENC_GetDiv( &l_CntR, &l_CntL );					// 移動量[カウント値]を取得
 8008676:	49b4      	ldr	r1, [pc, #720]	@ (8008948 <CTRL_pol+0x328>)
 8008678:	48b4      	ldr	r0, [pc, #720]	@ (800894c <CTRL_pol+0x32c>)
 800867a:	f001 f8dc 	bl	8009836 <ENC_GetDiv>
	//add get_motor_omega(l_CntR,l_CntL);
	CTRL_refNow();									// 制御に使用する値を現在の状態に更新
 800867e:	f7fe f86b 	bl	8006758 <CTRL_refNow>
	CTRL_refTarget();								// 制御に使用する値を目標値に更新
 8008682:	f7fe f92d 	bl	80068e0 <CTRL_refTarget>

	/* 制御を行うかのチェック */
	if( uc_CtrlFlag != TRUE ){
 8008686:	4bb2      	ldr	r3, [pc, #712]	@ (8008950 <CTRL_pol+0x330>)
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	2b01      	cmp	r3, #1
 800868c:	f040 87f8 	bne.w	8009680 <CTRL_pol+0x1060>
		 return;		// 制御無効状態
	}
	if(SW_ON == SW_IsOn_0()){
 8008690:	f7f9 fc96 	bl	8001fc0 <SW_IsOn_0>
 8008694:	4603      	mov	r3, r0
 8008696:	2b01      	cmp	r3, #1
 8008698:	d101      	bne.n	800869e <CTRL_pol+0x7e>
		Failsafe_flag();
 800869a:	f001 f809 	bl	80096b0 <Failsafe_flag>
	}

	/* 制御不能 */
	if (SYS_isOutOfCtrl() == TRUE ){
 800869e:	f001 f81f 	bl	80096e0 <SYS_isOutOfCtrl>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d019      	beq.n	80086dc <CTRL_pol+0xbc>

		f_DistErrSum = 0;				// 累積偏差クリア
 80086a8:	4baa      	ldr	r3, [pc, #680]	@ (8008954 <CTRL_pol+0x334>)
 80086aa:	f04f 0200 	mov.w	r2, #0
 80086ae:	601a      	str	r2, [r3, #0]
		f_NowDist = f_LastDist;			// 強制的に最終目標位置に変更
 80086b0:	4ba9      	ldr	r3, [pc, #676]	@ (8008958 <CTRL_pol+0x338>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4aa9      	ldr	r2, [pc, #676]	@ (800895c <CTRL_pol+0x33c>)
 80086b6:	6013      	str	r3, [r2, #0]
		f_NowAngle = f_LastAngle;		// 強制的に最終目標時間に変更
 80086b8:	4ba9      	ldr	r3, [pc, #676]	@ (8008960 <CTRL_pol+0x340>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4aa9      	ldr	r2, [pc, #676]	@ (8008964 <CTRL_pol+0x344>)
 80086be:	6013      	str	r3, [r2, #0]
		f_Time = f_TrgtTime;			// 強制的に最終目標時間に変更
 80086c0:	4ba9      	ldr	r3, [pc, #676]	@ (8008968 <CTRL_pol+0x348>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4aa9      	ldr	r2, [pc, #676]	@ (800896c <CTRL_pol+0x34c>)
 80086c6:	6013      	str	r3, [r2, #0]

	 	CTRL_stop();				// 制御停止
 80086c8:	f7fd feac 	bl	8006424 <CTRL_stop>
		CTRL_clrData();					// データクリア
 80086cc:	f7fd feba 	bl	8006444 <CTRL_clrData>
		DCM_brakeMot( DCM_R );			// ブレーキ
 80086d0:	2000      	movs	r0, #0
 80086d2:	f001 f837 	bl	8009744 <DCM_brakeMot>
		DCM_brakeMot( DCM_L );			// ブレーキ
 80086d6:	2001      	movs	r0, #1
 80086d8:	f001 f834 	bl	8009744 <DCM_brakeMot>
/*	ENC_GetDiv( &l_CntR, &l_CntL );					// 移動量[カウント値]を取得
	//add get_motor_omega(l_CntR,l_CntL);
	CTRL_refNow();									// 制御に使用する値を現在の状態に更新
	CTRL_refTarget();								// 制御に使用する値を目標値に更新
*/
	f_NowAngle = GYRO_getNowAngle();					// 現在角度[deg]
 80086dc:	f001 fa18 	bl	8009b10 <GYRO_getNowAngle>
 80086e0:	eef0 7a40 	vmov.f32	s15, s0
 80086e4:	4b9f      	ldr	r3, [pc, #636]	@ (8008964 <CTRL_pol+0x344>)
 80086e6:	edc3 7a00 	vstr	s15, [r3]

	/* 制御値取得 */
	CTRL_getFF_speed( &f_feedFoard_speed );					// [制御] フィードフォワード
 80086ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7ff fab4 	bl	8007c5c <CTRL_getFF_speed>
	CTRL_getFF_angle( &f_feedFoard_angle );					// [制御] フィードフォワード
 80086f4:	f107 0320 	add.w	r3, r7, #32
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7ff fafb 	bl	8007cf4 <CTRL_getFF_angle>
	CTRL_getSpeedFB( &f_speedCtrl );				// [制御] 速度
 80086fe:	f107 031c 	add.w	r3, r7, #28
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff fb70 	bl	8007de8 <CTRL_getSpeedFB>
	CTRL_getAngleSpeedFB( &f_angleSpeedCtrl );		// [制御] 角速度
 8008708:	f107 0318 	add.w	r3, r7, #24
 800870c:	4618      	mov	r0, r3
 800870e:	f7ff fbef 	bl	8007ef0 <CTRL_getAngleSpeedFB>
	CTRL_getAngleFB( &f_angleCtrl );		//angle ctrl
 8008712:	f107 0314 	add.w	r3, r7, #20
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff fc9e 	bl	8008058 <CTRL_getAngleFB>
	CTRL_getSenFB( &f_distSenCtrl );				// [制御] 壁
 800871c:	f107 0310 	add.w	r3, r7, #16
 8008720:	4618      	mov	r0, r3
 8008722:	f7ff fd13 	bl	800814c <CTRL_getSenFB>
	CTRL_getFloorFriction( &f_floorfriction );
 8008726:	1d3b      	adds	r3, r7, #4
 8008728:	4618      	mov	r0, r3
 800872a:	f7ff fe91 	bl	8008450 <CTRL_getFloorFriction>
	CTRL_get_frontwall_v_FB( &f_frontwall_v_Ctrl);
 800872e:	f107 030c 	add.w	r3, r7, #12
 8008732:	4618      	mov	r0, r3
 8008734:	f7ff fd96 	bl	8008264 <CTRL_get_frontwall_v_FB>
	CTRL_get_frontwall_omega_FB( &f_frontwall_omega_Ctrl);
 8008738:	f107 0308 	add.w	r3, r7, #8
 800873c:	4618      	mov	r0, r3
 800873e:	f7ff fe13 	bl	8008368 <CTRL_get_frontwall_omega_FB>

	/* 直進制御 */
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC ) ||( en_Type == CTRL_ENTRY_SLA ) || ( en_Type == CTRL_EXIT_SLA ) ||
 8008742:	4b8b      	ldr	r3, [pc, #556]	@ (8008970 <CTRL_pol+0x350>)
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d01c      	beq.n	8008784 <CTRL_pol+0x164>
 800874a:	4b89      	ldr	r3, [pc, #548]	@ (8008970 <CTRL_pol+0x350>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d018      	beq.n	8008784 <CTRL_pol+0x164>
 8008752:	4b87      	ldr	r3, [pc, #540]	@ (8008970 <CTRL_pol+0x350>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	2b02      	cmp	r3, #2
 8008758:	d014      	beq.n	8008784 <CTRL_pol+0x164>
 800875a:	4b85      	ldr	r3, [pc, #532]	@ (8008970 <CTRL_pol+0x350>)
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	2b0a      	cmp	r3, #10
 8008760:	d010      	beq.n	8008784 <CTRL_pol+0x164>
 8008762:	4b83      	ldr	r3, [pc, #524]	@ (8008970 <CTRL_pol+0x350>)
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	2b0e      	cmp	r3, #14
 8008768:	d00c      	beq.n	8008784 <CTRL_pol+0x164>
		( en_Type == CTRL_SKEW_ACC ) || ( en_Type == CTRL_SKEW_CONST ) || ( en_Type == CTRL_SKEW_DEC )
 800876a:	4b81      	ldr	r3, [pc, #516]	@ (8008970 <CTRL_pol+0x350>)
 800876c:	781b      	ldrb	r3, [r3, #0]
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC ) ||( en_Type == CTRL_ENTRY_SLA ) || ( en_Type == CTRL_EXIT_SLA ) ||
 800876e:	2b03      	cmp	r3, #3
 8008770:	d008      	beq.n	8008784 <CTRL_pol+0x164>
		( en_Type == CTRL_SKEW_ACC ) || ( en_Type == CTRL_SKEW_CONST ) || ( en_Type == CTRL_SKEW_DEC )
 8008772:	4b7f      	ldr	r3, [pc, #508]	@ (8008970 <CTRL_pol+0x350>)
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	2b04      	cmp	r3, #4
 8008778:	d004      	beq.n	8008784 <CTRL_pol+0x164>
 800877a:	4b7d      	ldr	r3, [pc, #500]	@ (8008970 <CTRL_pol+0x350>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b05      	cmp	r3, #5
 8008780:	f040 80fe 	bne.w	8008980 <CTRL_pol+0x360>
	){
		TR = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.0)+(TIRE_D/2.0/TREAD)*(INERTIA*(f_feedFoard_angle + f_angleSpeedCtrl+ f_distSenCtrl)))/GEAR_RATIO;
 8008784:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8008788:	edd7 7a07 	vldr	s15, [r7, #28]
 800878c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008790:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8008974 <CTRL_pol+0x354>
 8008794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008798:	ee17 0a90 	vmov	r0, s15
 800879c:	f7f7 fefc 	bl	8000598 <__aeabi_f2d>
 80087a0:	f04f 0200 	mov.w	r2, #0
 80087a4:	f04f 0300 	mov.w	r3, #0
 80087a8:	f7f7 fd98 	bl	80002dc <__adddf3>
 80087ac:	4602      	mov	r2, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	4610      	mov	r0, r2
 80087b2:	4619      	mov	r1, r3
 80087b4:	a35e      	add	r3, pc, #376	@ (adr r3, 8008930 <CTRL_pol+0x310>)
 80087b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ba:	f7f7 ff45 	bl	8000648 <__aeabi_dmul>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4614      	mov	r4, r2
 80087c4:	461d      	mov	r5, r3
 80087c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80087ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80087ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80087d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087da:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8008978 <CTRL_pol+0x358>
 80087de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087e2:	ee17 0a90 	vmov	r0, s15
 80087e6:	f7f7 fed7 	bl	8000598 <__aeabi_f2d>
 80087ea:	a353      	add	r3, pc, #332	@ (adr r3, 8008938 <CTRL_pol+0x318>)
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	f7f7 ff2a 	bl	8000648 <__aeabi_dmul>
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	4620      	mov	r0, r4
 80087fa:	4629      	mov	r1, r5
 80087fc:	f7f7 fd6e 	bl	80002dc <__adddf3>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	4610      	mov	r0, r2
 8008806:	4619      	mov	r1, r3
 8008808:	f04f 0200 	mov.w	r2, #0
 800880c:	4b5b      	ldr	r3, [pc, #364]	@ (800897c <CTRL_pol+0x35c>)
 800880e:	f7f8 f845 	bl	800089c <__aeabi_ddiv>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	4610      	mov	r0, r2
 8008818:	4619      	mov	r1, r3
 800881a:	f7f8 fa0d 	bl	8000c38 <__aeabi_d2f>
 800881e:	4603      	mov	r3, r0
 8008820:	62bb      	str	r3, [r7, #40]	@ 0x28
		TL = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.0)-(TIRE_D/2.0/TREAD)*(INERTIA*(f_feedFoard_angle + f_angleSpeedCtrl+ f_distSenCtrl)))/GEAR_RATIO;
 8008822:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8008826:	edd7 7a07 	vldr	s15, [r7, #28]
 800882a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800882e:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8008974 <CTRL_pol+0x354>
 8008832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008836:	ee17 0a90 	vmov	r0, s15
 800883a:	f7f7 fead 	bl	8000598 <__aeabi_f2d>
 800883e:	f04f 0200 	mov.w	r2, #0
 8008842:	f04f 0300 	mov.w	r3, #0
 8008846:	f7f7 fd49 	bl	80002dc <__adddf3>
 800884a:	4602      	mov	r2, r0
 800884c:	460b      	mov	r3, r1
 800884e:	4610      	mov	r0, r2
 8008850:	4619      	mov	r1, r3
 8008852:	a337      	add	r3, pc, #220	@ (adr r3, 8008930 <CTRL_pol+0x310>)
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	f7f7 fef6 	bl	8000648 <__aeabi_dmul>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	4614      	mov	r4, r2
 8008862:	461d      	mov	r5, r3
 8008864:	ed97 7a08 	vldr	s14, [r7, #32]
 8008868:	edd7 7a06 	vldr	s15, [r7, #24]
 800886c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008870:	edd7 7a04 	vldr	s15, [r7, #16]
 8008874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008878:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8008978 <CTRL_pol+0x358>
 800887c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008880:	ee17 0a90 	vmov	r0, s15
 8008884:	f7f7 fe88 	bl	8000598 <__aeabi_f2d>
 8008888:	a32b      	add	r3, pc, #172	@ (adr r3, 8008938 <CTRL_pol+0x318>)
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	f7f7 fedb 	bl	8000648 <__aeabi_dmul>
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	4620      	mov	r0, r4
 8008898:	4629      	mov	r1, r5
 800889a:	f7f7 fd1d 	bl	80002d8 <__aeabi_dsub>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4610      	mov	r0, r2
 80088a4:	4619      	mov	r1, r3
 80088a6:	f04f 0200 	mov.w	r2, #0
 80088aa:	4b34      	ldr	r3, [pc, #208]	@ (800897c <CTRL_pol+0x35c>)
 80088ac:	f7f7 fff6 	bl	800089c <__aeabi_ddiv>
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	4610      	mov	r0, r2
 80088b6:	4619      	mov	r1, r3
 80088b8:	f7f8 f9be 	bl	8000c38 <__aeabi_d2f>
 80088bc:	4603      	mov	r3, r0
 80088be:	637b      	str	r3, [r7, #52]	@ 0x34
		Ir = (TR+0.0/1000.0)/TORQUE_CONSTANT;
 80088c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088c2:	f7f7 fe69 	bl	8000598 <__aeabi_f2d>
 80088c6:	f04f 0200 	mov.w	r2, #0
 80088ca:	f04f 0300 	mov.w	r3, #0
 80088ce:	f7f7 fd05 	bl	80002dc <__adddf3>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	4610      	mov	r0, r2
 80088d8:	4619      	mov	r1, r3
 80088da:	a319      	add	r3, pc, #100	@ (adr r3, 8008940 <CTRL_pol+0x320>)
 80088dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e0:	f7f7 ffdc 	bl	800089c <__aeabi_ddiv>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4610      	mov	r0, r2
 80088ea:	4619      	mov	r1, r3
 80088ec:	f7f8 f9a4 	bl	8000c38 <__aeabi_d2f>
 80088f0:	4603      	mov	r3, r0
 80088f2:	633b      	str	r3, [r7, #48]	@ 0x30
		Il = (TL+0.0/1000.0)/TORQUE_CONSTANT;
 80088f4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80088f6:	f7f7 fe4f 	bl	8000598 <__aeabi_f2d>
 80088fa:	f04f 0200 	mov.w	r2, #0
 80088fe:	f04f 0300 	mov.w	r3, #0
 8008902:	f7f7 fceb 	bl	80002dc <__adddf3>
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	4610      	mov	r0, r2
 800890c:	4619      	mov	r1, r3
 800890e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008940 <CTRL_pol+0x320>)
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	f7f7 ffc2 	bl	800089c <__aeabi_ddiv>
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	4610      	mov	r0, r2
 800891e:	4619      	mov	r1, r3
 8008920:	f7f8 f98a 	bl	8000c38 <__aeabi_d2f>
 8008924:	4603      	mov	r3, r0
 8008926:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008928:	f000 bd30 	b.w	800938c <CTRL_pol+0xd6c>
 800892c:	f3af 8000 	nop.w
 8008930:	e0000000 	.word	0xe0000000
 8008934:	3f69be4c 	.word	0x3f69be4c
 8008938:	58a4d7d5 	.word	0x58a4d7d5
 800893c:	3fc6fc32 	.word	0x3fc6fc32
 8008940:	a0000000 	.word	0xa0000000
 8008944:	3f3adea8 	.word	0x3f3adea8
 8008948:	20000350 	.word	0x20000350
 800894c:	2000034c 	.word	0x2000034c
 8008950:	20000348 	.word	0x20000348
 8008954:	200003a0 	.word	0x200003a0
 8008958:	2000038c 	.word	0x2000038c
 800895c:	20000394 	.word	0x20000394
 8008960:	200003cc 	.word	0x200003cc
 8008964:	200003d0 	.word	0x200003d0
 8008968:	20000008 	.word	0x20000008
 800896c:	20000354 	.word	0x20000354
 8008970:	200003fa 	.word	0x200003fa
 8008974:	3caf4f0e 	.word	0x3caf4f0e
 8008978:	376ae18b 	.word	0x376ae18b
 800897c:	40128000 	.word	0x40128000
	}

	/* 壁あて制御 */
	else if( en_Type == CTRL_HIT_WALL ){
 8008980:	4b9b      	ldr	r3, [pc, #620]	@ (8008bf0 <CTRL_pol+0x5d0>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	2b06      	cmp	r3, #6
 8008986:	d137      	bne.n	80089f8 <CTRL_pol+0x3d8>
		TR = (TIRE_D/2.0/2.0)*(WEIGHT*(-1.0)*(300.0 * FF_HIT_BALANCE_R/1000.0 ));		
 8008988:	4b9a      	ldr	r3, [pc, #616]	@ (8008bf4 <CTRL_pol+0x5d4>)
 800898a:	62bb      	str	r3, [r7, #40]	@ 0x28
		TL = (TIRE_D/2.0/2.0)*(WEIGHT*(-1.0)*(300.0 * FF_HIT_BALANCE_R/1000.0 ));
 800898c:	4b99      	ldr	r3, [pc, #612]	@ (8008bf4 <CTRL_pol+0x5d4>)
 800898e:	637b      	str	r3, [r7, #52]	@ 0x34
		Ir = (TR-0.0255/1000.0)/TORQUE_CONSTANT;
 8008990:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008992:	f7f7 fe01 	bl	8000598 <__aeabi_f2d>
 8008996:	a38c      	add	r3, pc, #560	@ (adr r3, 8008bc8 <CTRL_pol+0x5a8>)
 8008998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899c:	f7f7 fc9c 	bl	80002d8 <__aeabi_dsub>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4610      	mov	r0, r2
 80089a6:	4619      	mov	r1, r3
 80089a8:	a389      	add	r3, pc, #548	@ (adr r3, 8008bd0 <CTRL_pol+0x5b0>)
 80089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ae:	f7f7 ff75 	bl	800089c <__aeabi_ddiv>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4610      	mov	r0, r2
 80089b8:	4619      	mov	r1, r3
 80089ba:	f7f8 f93d 	bl	8000c38 <__aeabi_d2f>
 80089be:	4603      	mov	r3, r0
 80089c0:	633b      	str	r3, [r7, #48]	@ 0x30
		Il = (TL-0.0255/1000.0)/TORQUE_CONSTANT;
 80089c2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80089c4:	f7f7 fde8 	bl	8000598 <__aeabi_f2d>
 80089c8:	a37f      	add	r3, pc, #508	@ (adr r3, 8008bc8 <CTRL_pol+0x5a8>)
 80089ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ce:	f7f7 fc83 	bl	80002d8 <__aeabi_dsub>
 80089d2:	4602      	mov	r2, r0
 80089d4:	460b      	mov	r3, r1
 80089d6:	4610      	mov	r0, r2
 80089d8:	4619      	mov	r1, r3
 80089da:	a37d      	add	r3, pc, #500	@ (adr r3, 8008bd0 <CTRL_pol+0x5b0>)
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	f7f7 ff5c 	bl	800089c <__aeabi_ddiv>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	4610      	mov	r0, r2
 80089ea:	4619      	mov	r1, r3
 80089ec:	f7f8 f924 	bl	8000c38 <__aeabi_d2f>
 80089f0:	4603      	mov	r3, r0
 80089f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089f4:	f000 bcca 	b.w	800938c <CTRL_pol+0xd6c>
	}

	/* スラローム制御 */
	else if( ( en_Type == CTRL_ACC_SLA ) || (en_Type == CTRL_CONST_SLA)||( en_Type == CTRL_DEC_SLA ) ){
 80089f8:	4b7d      	ldr	r3, [pc, #500]	@ (8008bf0 <CTRL_pol+0x5d0>)
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	2b0b      	cmp	r3, #11
 80089fe:	d008      	beq.n	8008a12 <CTRL_pol+0x3f2>
 8008a00:	4b7b      	ldr	r3, [pc, #492]	@ (8008bf0 <CTRL_pol+0x5d0>)
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	2b0c      	cmp	r3, #12
 8008a06:	d004      	beq.n	8008a12 <CTRL_pol+0x3f2>
 8008a08:	4b79      	ldr	r3, [pc, #484]	@ (8008bf0 <CTRL_pol+0x5d0>)
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	2b0d      	cmp	r3, #13
 8008a0e:	f040 81fe 	bne.w	8008e0e <CTRL_pol+0x7ee>
		/* 左旋回 */
		if( f_LastAngle > 0 ){
 8008a12:	4b79      	ldr	r3, [pc, #484]	@ (8008bf8 <CTRL_pol+0x5d8>)
 8008a14:	edd3 7a00 	vldr	s15, [r3]
 8008a18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a20:	f340 80f2 	ble.w	8008c08 <CTRL_pol+0x5e8>
			TR = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.0)+(TIRE_D/2.0/TREAD)*(INERTIA*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)/*+f_floorfriction*/))/GEAR_RATIO;
 8008a24:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8008a28:	edd7 7a07 	vldr	s15, [r7, #28]
 8008a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a30:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8008c04 <CTRL_pol+0x5e4>
 8008a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a38:	ee17 0a90 	vmov	r0, s15
 8008a3c:	f7f7 fdac 	bl	8000598 <__aeabi_f2d>
 8008a40:	f04f 0200 	mov.w	r2, #0
 8008a44:	f04f 0300 	mov.w	r3, #0
 8008a48:	f7f7 fc48 	bl	80002dc <__adddf3>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	460b      	mov	r3, r1
 8008a50:	4610      	mov	r0, r2
 8008a52:	4619      	mov	r1, r3
 8008a54:	a360      	add	r3, pc, #384	@ (adr r3, 8008bd8 <CTRL_pol+0x5b8>)
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	f7f7 fdf5 	bl	8000648 <__aeabi_dmul>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4614      	mov	r4, r2
 8008a64:	461d      	mov	r5, r3
 8008a66:	ed97 7a08 	vldr	s14, [r7, #32]
 8008a6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8008a6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a72:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a7a:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8008bfc <CTRL_pol+0x5dc>
 8008a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a82:	ee17 0a90 	vmov	r0, s15
 8008a86:	f7f7 fd87 	bl	8000598 <__aeabi_f2d>
 8008a8a:	a355      	add	r3, pc, #340	@ (adr r3, 8008be0 <CTRL_pol+0x5c0>)
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	f7f7 fdda 	bl	8000648 <__aeabi_dmul>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	4620      	mov	r0, r4
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	f7f7 fc1e 	bl	80002dc <__adddf3>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	f04f 0200 	mov.w	r2, #0
 8008aac:	4b54      	ldr	r3, [pc, #336]	@ (8008c00 <CTRL_pol+0x5e0>)
 8008aae:	f7f7 fef5 	bl	800089c <__aeabi_ddiv>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	4619      	mov	r1, r3
 8008aba:	f7f8 f8bd 	bl	8000c38 <__aeabi_d2f>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
			TL = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.0)-(TIRE_D/2.0/TREAD)*(INERTIA*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)/*+f_floorfriction*/))/GEAR_RATIO;
 8008ac2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8008ac6:	edd7 7a07 	vldr	s15, [r7, #28]
 8008aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ace:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8008c04 <CTRL_pol+0x5e4>
 8008ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ad6:	ee17 0a90 	vmov	r0, s15
 8008ada:	f7f7 fd5d 	bl	8000598 <__aeabi_f2d>
 8008ade:	f04f 0200 	mov.w	r2, #0
 8008ae2:	f04f 0300 	mov.w	r3, #0
 8008ae6:	f7f7 fbf9 	bl	80002dc <__adddf3>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	4610      	mov	r0, r2
 8008af0:	4619      	mov	r1, r3
 8008af2:	a339      	add	r3, pc, #228	@ (adr r3, 8008bd8 <CTRL_pol+0x5b8>)
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	f7f7 fda6 	bl	8000648 <__aeabi_dmul>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4614      	mov	r4, r2
 8008b02:	461d      	mov	r5, r3
 8008b04:	ed97 7a08 	vldr	s14, [r7, #32]
 8008b08:	edd7 7a06 	vldr	s15, [r7, #24]
 8008b0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008b10:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b18:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8008bfc <CTRL_pol+0x5dc>
 8008b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b20:	ee17 0a90 	vmov	r0, s15
 8008b24:	f7f7 fd38 	bl	8000598 <__aeabi_f2d>
 8008b28:	a32d      	add	r3, pc, #180	@ (adr r3, 8008be0 <CTRL_pol+0x5c0>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	f7f7 fd8b 	bl	8000648 <__aeabi_dmul>
 8008b32:	4602      	mov	r2, r0
 8008b34:	460b      	mov	r3, r1
 8008b36:	4620      	mov	r0, r4
 8008b38:	4629      	mov	r1, r5
 8008b3a:	f7f7 fbcd 	bl	80002d8 <__aeabi_dsub>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	4610      	mov	r0, r2
 8008b44:	4619      	mov	r1, r3
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8008c00 <CTRL_pol+0x5e0>)
 8008b4c:	f7f7 fea6 	bl	800089c <__aeabi_ddiv>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4610      	mov	r0, r2
 8008b56:	4619      	mov	r1, r3
 8008b58:	f7f8 f86e 	bl	8000c38 <__aeabi_d2f>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	637b      	str	r3, [r7, #52]	@ 0x34
			Ir = (TR+0.06/1000.0)/TORQUE_CONSTANT;
 8008b60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b62:	f7f7 fd19 	bl	8000598 <__aeabi_f2d>
 8008b66:	a320      	add	r3, pc, #128	@ (adr r3, 8008be8 <CTRL_pol+0x5c8>)
 8008b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6c:	f7f7 fbb6 	bl	80002dc <__adddf3>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	4610      	mov	r0, r2
 8008b76:	4619      	mov	r1, r3
 8008b78:	a315      	add	r3, pc, #84	@ (adr r3, 8008bd0 <CTRL_pol+0x5b0>)
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	f7f7 fe8d 	bl	800089c <__aeabi_ddiv>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4610      	mov	r0, r2
 8008b88:	4619      	mov	r1, r3
 8008b8a:	f7f8 f855 	bl	8000c38 <__aeabi_d2f>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	633b      	str	r3, [r7, #48]	@ 0x30
			Il = (TL-0.06/1000.0)/TORQUE_CONSTANT;
 8008b92:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008b94:	f7f7 fd00 	bl	8000598 <__aeabi_f2d>
 8008b98:	a313      	add	r3, pc, #76	@ (adr r3, 8008be8 <CTRL_pol+0x5c8>)
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f7f7 fb9b 	bl	80002d8 <__aeabi_dsub>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	4619      	mov	r1, r3
 8008baa:	a309      	add	r3, pc, #36	@ (adr r3, 8008bd0 <CTRL_pol+0x5b0>)
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	f7f7 fe74 	bl	800089c <__aeabi_ddiv>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4610      	mov	r0, r2
 8008bba:	4619      	mov	r1, r3
 8008bbc:	f7f8 f83c 	bl	8000c38 <__aeabi_d2f>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if( f_LastAngle > 0 ){
 8008bc4:	e3e2      	b.n	800938c <CTRL_pol+0xd6c>
 8008bc6:	bf00      	nop
 8008bc8:	a821f299 	.word	0xa821f299
 8008bcc:	3efabd1a 	.word	0x3efabd1a
 8008bd0:	a0000000 	.word	0xa0000000
 8008bd4:	3f3adea8 	.word	0x3f3adea8
 8008bd8:	e0000000 	.word	0xe0000000
 8008bdc:	3f69be4c 	.word	0x3f69be4c
 8008be0:	58a4d7d5 	.word	0x58a4d7d5
 8008be4:	3fc6fc32 	.word	0x3fc6fc32
 8008be8:	4d551d68 	.word	0x4d551d68
 8008bec:	3f0f7510 	.word	0x3f0f7510
 8008bf0:	200003fa 	.word	0x200003fa
 8008bf4:	b7a93d2a 	.word	0xb7a93d2a
 8008bf8:	200003cc 	.word	0x200003cc
 8008bfc:	376ae18b 	.word	0x376ae18b
 8008c00:	40128000 	.word	0x40128000
 8008c04:	3caf4f0e 	.word	0x3caf4f0e
		}
		/*右旋回 */
		else{			
			TR = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.0)+(TIRE_D/2.0/TREAD)*(INERTIA*(f_feedFoard_angle*(-1.0) + f_angleSpeedCtrl+f_angleCtrl)/*+f_floorfriction*/))/GEAR_RATIO;
 8008c08:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8008c0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8008c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c14:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8008c04 <CTRL_pol+0x5e4>
 8008c18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c1c:	ee17 0a90 	vmov	r0, s15
 8008c20:	f7f7 fcba 	bl	8000598 <__aeabi_f2d>
 8008c24:	f04f 0200 	mov.w	r2, #0
 8008c28:	f04f 0300 	mov.w	r3, #0
 8008c2c:	f7f7 fb56 	bl	80002dc <__adddf3>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	4610      	mov	r0, r2
 8008c36:	4619      	mov	r1, r3
 8008c38:	a3b9      	add	r3, pc, #740	@ (adr r3, 8008f20 <CTRL_pol+0x900>)
 8008c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3e:	f7f7 fd03 	bl	8000648 <__aeabi_dmul>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	4690      	mov	r8, r2
 8008c48:	4699      	mov	r9, r3
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7f7 fca3 	bl	8000598 <__aeabi_f2d>
 8008c52:	4604      	mov	r4, r0
 8008c54:	460d      	mov	r5, r1
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7f7 fc9d 	bl	8000598 <__aeabi_f2d>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4620      	mov	r0, r4
 8008c64:	4629      	mov	r1, r5
 8008c66:	f7f7 fb37 	bl	80002d8 <__aeabi_dsub>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4614      	mov	r4, r2
 8008c70:	461d      	mov	r5, r3
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7f7 fc8f 	bl	8000598 <__aeabi_f2d>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	4620      	mov	r0, r4
 8008c80:	4629      	mov	r1, r5
 8008c82:	f7f7 fb2b 	bl	80002dc <__adddf3>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	a3a6      	add	r3, pc, #664	@ (adr r3, 8008f28 <CTRL_pol+0x908>)
 8008c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c94:	f7f7 fcd8 	bl	8000648 <__aeabi_dmul>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	a3a3      	add	r3, pc, #652	@ (adr r3, 8008f30 <CTRL_pol+0x910>)
 8008ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca6:	f7f7 fccf 	bl	8000648 <__aeabi_dmul>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4640      	mov	r0, r8
 8008cb0:	4649      	mov	r1, r9
 8008cb2:	f7f7 fb13 	bl	80002dc <__adddf3>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	460b      	mov	r3, r1
 8008cba:	4610      	mov	r0, r2
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	f04f 0200 	mov.w	r2, #0
 8008cc2:	4ba1      	ldr	r3, [pc, #644]	@ (8008f48 <CTRL_pol+0x928>)
 8008cc4:	f7f7 fdea 	bl	800089c <__aeabi_ddiv>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4619      	mov	r1, r3
 8008cd0:	f7f7 ffb2 	bl	8000c38 <__aeabi_d2f>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
			TL = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.0)-(TIRE_D/2.0/TREAD)*(INERTIA*(f_feedFoard_angle*(-1.0) + f_angleSpeedCtrl+f_angleCtrl)/*+f_floorfriction*/))/GEAR_RATIO;
 8008cd8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8008cdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8008ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ce4:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8008f4c <CTRL_pol+0x92c>
 8008ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008cec:	ee17 0a90 	vmov	r0, s15
 8008cf0:	f7f7 fc52 	bl	8000598 <__aeabi_f2d>
 8008cf4:	f04f 0200 	mov.w	r2, #0
 8008cf8:	f04f 0300 	mov.w	r3, #0
 8008cfc:	f7f7 faee 	bl	80002dc <__adddf3>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4610      	mov	r0, r2
 8008d06:	4619      	mov	r1, r3
 8008d08:	a385      	add	r3, pc, #532	@ (adr r3, 8008f20 <CTRL_pol+0x900>)
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f7f7 fc9b 	bl	8000648 <__aeabi_dmul>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	4690      	mov	r8, r2
 8008d18:	4699      	mov	r9, r3
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7f7 fc3b 	bl	8000598 <__aeabi_f2d>
 8008d22:	4604      	mov	r4, r0
 8008d24:	460d      	mov	r5, r1
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7f7 fc35 	bl	8000598 <__aeabi_f2d>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	460b      	mov	r3, r1
 8008d32:	4620      	mov	r0, r4
 8008d34:	4629      	mov	r1, r5
 8008d36:	f7f7 facf 	bl	80002d8 <__aeabi_dsub>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	4614      	mov	r4, r2
 8008d40:	461d      	mov	r5, r3
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7f7 fc27 	bl	8000598 <__aeabi_f2d>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4620      	mov	r0, r4
 8008d50:	4629      	mov	r1, r5
 8008d52:	f7f7 fac3 	bl	80002dc <__adddf3>
 8008d56:	4602      	mov	r2, r0
 8008d58:	460b      	mov	r3, r1
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	a372      	add	r3, pc, #456	@ (adr r3, 8008f28 <CTRL_pol+0x908>)
 8008d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d64:	f7f7 fc70 	bl	8000648 <__aeabi_dmul>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	4619      	mov	r1, r3
 8008d70:	a36f      	add	r3, pc, #444	@ (adr r3, 8008f30 <CTRL_pol+0x910>)
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	f7f7 fc67 	bl	8000648 <__aeabi_dmul>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4640      	mov	r0, r8
 8008d80:	4649      	mov	r1, r9
 8008d82:	f7f7 faa9 	bl	80002d8 <__aeabi_dsub>
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	4610      	mov	r0, r2
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	f04f 0200 	mov.w	r2, #0
 8008d92:	4b6d      	ldr	r3, [pc, #436]	@ (8008f48 <CTRL_pol+0x928>)
 8008d94:	f7f7 fd82 	bl	800089c <__aeabi_ddiv>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4619      	mov	r1, r3
 8008da0:	f7f7 ff4a 	bl	8000c38 <__aeabi_d2f>
 8008da4:	4603      	mov	r3, r0
 8008da6:	637b      	str	r3, [r7, #52]	@ 0x34
			Ir = (TR-0.06/1000.0)/TORQUE_CONSTANT;
 8008da8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008daa:	f7f7 fbf5 	bl	8000598 <__aeabi_f2d>
 8008dae:	a362      	add	r3, pc, #392	@ (adr r3, 8008f38 <CTRL_pol+0x918>)
 8008db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db4:	f7f7 fa90 	bl	80002d8 <__aeabi_dsub>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	a35f      	add	r3, pc, #380	@ (adr r3, 8008f40 <CTRL_pol+0x920>)
 8008dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc6:	f7f7 fd69 	bl	800089c <__aeabi_ddiv>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	4610      	mov	r0, r2
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	f7f7 ff31 	bl	8000c38 <__aeabi_d2f>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	633b      	str	r3, [r7, #48]	@ 0x30
			Il = (TL+0.06/1000.0)/TORQUE_CONSTANT;
 8008dda:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008ddc:	f7f7 fbdc 	bl	8000598 <__aeabi_f2d>
 8008de0:	a355      	add	r3, pc, #340	@ (adr r3, 8008f38 <CTRL_pol+0x918>)
 8008de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de6:	f7f7 fa79 	bl	80002dc <__adddf3>
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4610      	mov	r0, r2
 8008df0:	4619      	mov	r1, r3
 8008df2:	a353      	add	r3, pc, #332	@ (adr r3, 8008f40 <CTRL_pol+0x920>)
 8008df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df8:	f7f7 fd50 	bl	800089c <__aeabi_ddiv>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4610      	mov	r0, r2
 8008e02:	4619      	mov	r1, r3
 8008e04:	f7f7 ff18 	bl	8000c38 <__aeabi_d2f>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if( f_LastAngle > 0 ){
 8008e0c:	e2be      	b.n	800938c <CTRL_pol+0xd6c>
		}
	}

	else if( en_Type == CTRL_FRONT_WALL){
 8008e0e:	4b50      	ldr	r3, [pc, #320]	@ (8008f50 <CTRL_pol+0x930>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b0f      	cmp	r3, #15
 8008e14:	f040 80a2 	bne.w	8008f5c <CTRL_pol+0x93c>
		TR = ((TIRE_D/2.0/2.0)*(WEIGHT*f_frontwall_v_Ctrl)+(TIRE_D/2.0/TREAD)*(INERTIA*f_frontwall_omega_Ctrl))/GEAR_RATIO;
 8008e18:	edd7 7a03 	vldr	s15, [r7, #12]
 8008e1c:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8008f4c <CTRL_pol+0x92c>
 8008e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e24:	ee17 0a90 	vmov	r0, s15
 8008e28:	f7f7 fbb6 	bl	8000598 <__aeabi_f2d>
 8008e2c:	a33c      	add	r3, pc, #240	@ (adr r3, 8008f20 <CTRL_pol+0x900>)
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	f7f7 fc09 	bl	8000648 <__aeabi_dmul>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4614      	mov	r4, r2
 8008e3c:	461d      	mov	r5, r3
 8008e3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8008e42:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8008f54 <CTRL_pol+0x934>
 8008e46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e4a:	ee17 0a90 	vmov	r0, s15
 8008e4e:	f7f7 fba3 	bl	8000598 <__aeabi_f2d>
 8008e52:	a337      	add	r3, pc, #220	@ (adr r3, 8008f30 <CTRL_pol+0x910>)
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	f7f7 fbf6 	bl	8000648 <__aeabi_dmul>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4620      	mov	r0, r4
 8008e62:	4629      	mov	r1, r5
 8008e64:	f7f7 fa3a 	bl	80002dc <__adddf3>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4619      	mov	r1, r3
 8008e70:	f04f 0200 	mov.w	r2, #0
 8008e74:	4b34      	ldr	r3, [pc, #208]	@ (8008f48 <CTRL_pol+0x928>)
 8008e76:	f7f7 fd11 	bl	800089c <__aeabi_ddiv>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4610      	mov	r0, r2
 8008e80:	4619      	mov	r1, r3
 8008e82:	f7f7 fed9 	bl	8000c38 <__aeabi_d2f>
 8008e86:	4603      	mov	r3, r0
 8008e88:	62bb      	str	r3, [r7, #40]	@ 0x28
		TL = ((TIRE_D/2.0/2.0)*(WEIGHT*f_frontwall_v_Ctrl)-(TIRE_D/2.0/TREAD)*(INERTIA*f_frontwall_omega_Ctrl))/GEAR_RATIO;
 8008e8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8008e8e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008f4c <CTRL_pol+0x92c>
 8008e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e96:	ee17 0a90 	vmov	r0, s15
 8008e9a:	f7f7 fb7d 	bl	8000598 <__aeabi_f2d>
 8008e9e:	a320      	add	r3, pc, #128	@ (adr r3, 8008f20 <CTRL_pol+0x900>)
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f7f7 fbd0 	bl	8000648 <__aeabi_dmul>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	4614      	mov	r4, r2
 8008eae:	461d      	mov	r5, r3
 8008eb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8008eb4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8008f54 <CTRL_pol+0x934>
 8008eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ebc:	ee17 0a90 	vmov	r0, s15
 8008ec0:	f7f7 fb6a 	bl	8000598 <__aeabi_f2d>
 8008ec4:	a31a      	add	r3, pc, #104	@ (adr r3, 8008f30 <CTRL_pol+0x910>)
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	f7f7 fbbd 	bl	8000648 <__aeabi_dmul>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	f7f7 f9ff 	bl	80002d8 <__aeabi_dsub>
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	4610      	mov	r0, r2
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	f04f 0200 	mov.w	r2, #0
 8008ee6:	4b18      	ldr	r3, [pc, #96]	@ (8008f48 <CTRL_pol+0x928>)
 8008ee8:	f7f7 fcd8 	bl	800089c <__aeabi_ddiv>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	f7f7 fea0 	bl	8000c38 <__aeabi_d2f>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	637b      	str	r3, [r7, #52]	@ 0x34
		Ir = (TR)/TORQUE_CONSTANT;
 8008efc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8008f00:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8008f58 <CTRL_pol+0x938>
 8008f04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f08:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		Il = (TL)/TORQUE_CONSTANT;
 8008f0c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8008f10:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8008f58 <CTRL_pol+0x938>
 8008f14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f18:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8008f1c:	e236      	b.n	800938c <CTRL_pol+0xd6c>
 8008f1e:	bf00      	nop
 8008f20:	e0000000 	.word	0xe0000000
 8008f24:	3f69be4c 	.word	0x3f69be4c
 8008f28:	60000000 	.word	0x60000000
 8008f2c:	3eed5c31 	.word	0x3eed5c31
 8008f30:	58a4d7d5 	.word	0x58a4d7d5
 8008f34:	3fc6fc32 	.word	0x3fc6fc32
 8008f38:	4d551d68 	.word	0x4d551d68
 8008f3c:	3f0f7510 	.word	0x3f0f7510
 8008f40:	a0000000 	.word	0xa0000000
 8008f44:	3f3adea8 	.word	0x3f3adea8
 8008f48:	40128000 	.word	0x40128000
 8008f4c:	3caf4f0e 	.word	0x3caf4f0e
 8008f50:	200003fa 	.word	0x200003fa
 8008f54:	376ae18b 	.word	0x376ae18b
 8008f58:	39d6f545 	.word	0x39d6f545
	}

	/* 超信地旋回 */
	else{
		/* 左旋回 */
		if( f_LastAngle > 0 ){			
 8008f5c:	4b78      	ldr	r3, [pc, #480]	@ (8009140 <CTRL_pol+0xb20>)
 8008f5e:	edd3 7a00 	vldr	s15, [r3]
 8008f62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f6a:	f340 80f1 	ble.w	8009150 <CTRL_pol+0xb30>
			TR = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.0)+(TIRE_D/2.0/TREAD_IMAGIN)*(INERTIA*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8008f6e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8008f72:	edd7 7a07 	vldr	s15, [r7, #28]
 8008f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f7a:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 800914c <CTRL_pol+0xb2c>
 8008f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f82:	ee17 0a90 	vmov	r0, s15
 8008f86:	f7f7 fb07 	bl	8000598 <__aeabi_f2d>
 8008f8a:	f04f 0200 	mov.w	r2, #0
 8008f8e:	f04f 0300 	mov.w	r3, #0
 8008f92:	f7f7 f9a3 	bl	80002dc <__adddf3>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	a360      	add	r3, pc, #384	@ (adr r3, 8009120 <CTRL_pol+0xb00>)
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	f7f7 fb50 	bl	8000648 <__aeabi_dmul>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	4614      	mov	r4, r2
 8008fae:	461d      	mov	r5, r3
 8008fb0:	ed97 7a08 	vldr	s14, [r7, #32]
 8008fb4:	edd7 7a06 	vldr	s15, [r7, #24]
 8008fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008fbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8008fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fc4:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8009144 <CTRL_pol+0xb24>
 8008fc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008fcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8008fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fd4:	ee17 0a90 	vmov	r0, s15
 8008fd8:	f7f7 fade 	bl	8000598 <__aeabi_f2d>
 8008fdc:	a352      	add	r3, pc, #328	@ (adr r3, 8009128 <CTRL_pol+0xb08>)
 8008fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe2:	f7f7 fb31 	bl	8000648 <__aeabi_dmul>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4620      	mov	r0, r4
 8008fec:	4629      	mov	r1, r5
 8008fee:	f7f7 f975 	bl	80002dc <__adddf3>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	f04f 0200 	mov.w	r2, #0
 8008ffe:	4b52      	ldr	r3, [pc, #328]	@ (8009148 <CTRL_pol+0xb28>)
 8009000:	f7f7 fc4c 	bl	800089c <__aeabi_ddiv>
 8009004:	4602      	mov	r2, r0
 8009006:	460b      	mov	r3, r1
 8009008:	4610      	mov	r0, r2
 800900a:	4619      	mov	r1, r3
 800900c:	f7f7 fe14 	bl	8000c38 <__aeabi_d2f>
 8009010:	4603      	mov	r3, r0
 8009012:	62bb      	str	r3, [r7, #40]	@ 0x28
			TL = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.0)-(TIRE_D/2.0/TREAD_IMAGIN)*(INERTIA*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8009014:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8009018:	edd7 7a07 	vldr	s15, [r7, #28]
 800901c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009020:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800914c <CTRL_pol+0xb2c>
 8009024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009028:	ee17 0a90 	vmov	r0, s15
 800902c:	f7f7 fab4 	bl	8000598 <__aeabi_f2d>
 8009030:	f04f 0200 	mov.w	r2, #0
 8009034:	f04f 0300 	mov.w	r3, #0
 8009038:	f7f7 f950 	bl	80002dc <__adddf3>
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	4610      	mov	r0, r2
 8009042:	4619      	mov	r1, r3
 8009044:	a336      	add	r3, pc, #216	@ (adr r3, 8009120 <CTRL_pol+0xb00>)
 8009046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904a:	f7f7 fafd 	bl	8000648 <__aeabi_dmul>
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	4614      	mov	r4, r2
 8009054:	461d      	mov	r5, r3
 8009056:	ed97 7a08 	vldr	s14, [r7, #32]
 800905a:	edd7 7a06 	vldr	s15, [r7, #24]
 800905e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009062:	edd7 7a05 	vldr	s15, [r7, #20]
 8009066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800906a:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8009144 <CTRL_pol+0xb24>
 800906e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009072:	edd7 7a01 	vldr	s15, [r7, #4]
 8009076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800907a:	ee17 0a90 	vmov	r0, s15
 800907e:	f7f7 fa8b 	bl	8000598 <__aeabi_f2d>
 8009082:	a329      	add	r3, pc, #164	@ (adr r3, 8009128 <CTRL_pol+0xb08>)
 8009084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009088:	f7f7 fade 	bl	8000648 <__aeabi_dmul>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	4620      	mov	r0, r4
 8009092:	4629      	mov	r1, r5
 8009094:	f7f7 f920 	bl	80002d8 <__aeabi_dsub>
 8009098:	4602      	mov	r2, r0
 800909a:	460b      	mov	r3, r1
 800909c:	4610      	mov	r0, r2
 800909e:	4619      	mov	r1, r3
 80090a0:	f04f 0200 	mov.w	r2, #0
 80090a4:	4b28      	ldr	r3, [pc, #160]	@ (8009148 <CTRL_pol+0xb28>)
 80090a6:	f7f7 fbf9 	bl	800089c <__aeabi_ddiv>
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	4610      	mov	r0, r2
 80090b0:	4619      	mov	r1, r3
 80090b2:	f7f7 fdc1 	bl	8000c38 <__aeabi_d2f>
 80090b6:	4603      	mov	r3, r0
 80090b8:	637b      	str	r3, [r7, #52]	@ 0x34
			Ir = (TR+0.01/1000.0)/TORQUE_CONSTANT;
 80090ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090bc:	f7f7 fa6c 	bl	8000598 <__aeabi_f2d>
 80090c0:	a31b      	add	r3, pc, #108	@ (adr r3, 8009130 <CTRL_pol+0xb10>)
 80090c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c6:	f7f7 f909 	bl	80002dc <__adddf3>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	4610      	mov	r0, r2
 80090d0:	4619      	mov	r1, r3
 80090d2:	a319      	add	r3, pc, #100	@ (adr r3, 8009138 <CTRL_pol+0xb18>)
 80090d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d8:	f7f7 fbe0 	bl	800089c <__aeabi_ddiv>
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4610      	mov	r0, r2
 80090e2:	4619      	mov	r1, r3
 80090e4:	f7f7 fda8 	bl	8000c38 <__aeabi_d2f>
 80090e8:	4603      	mov	r3, r0
 80090ea:	633b      	str	r3, [r7, #48]	@ 0x30
			Il = (TL-0.01/1000.0)/TORQUE_CONSTANT;
 80090ec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80090ee:	f7f7 fa53 	bl	8000598 <__aeabi_f2d>
 80090f2:	a30f      	add	r3, pc, #60	@ (adr r3, 8009130 <CTRL_pol+0xb10>)
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	f7f7 f8ee 	bl	80002d8 <__aeabi_dsub>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4610      	mov	r0, r2
 8009102:	4619      	mov	r1, r3
 8009104:	a30c      	add	r3, pc, #48	@ (adr r3, 8009138 <CTRL_pol+0xb18>)
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	f7f7 fbc7 	bl	800089c <__aeabi_ddiv>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4610      	mov	r0, r2
 8009114:	4619      	mov	r1, r3
 8009116:	f7f7 fd8f 	bl	8000c38 <__aeabi_d2f>
 800911a:	4603      	mov	r3, r0
 800911c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800911e:	e135      	b.n	800938c <CTRL_pol+0xd6c>
 8009120:	e0000000 	.word	0xe0000000
 8009124:	3f69be4c 	.word	0x3f69be4c
 8009128:	c6536e52 	.word	0xc6536e52
 800912c:	3fc5be21 	.word	0x3fc5be21
 8009130:	88e368f1 	.word	0x88e368f1
 8009134:	3ee4f8b5 	.word	0x3ee4f8b5
 8009138:	a0000000 	.word	0xa0000000
 800913c:	3f3adea8 	.word	0x3f3adea8
 8009140:	200003cc 	.word	0x200003cc
 8009144:	376ae18b 	.word	0x376ae18b
 8009148:	40128000 	.word	0x40128000
 800914c:	3caf4f0e 	.word	0x3caf4f0e
		}
		/* 右旋回 */
		else{			
			TR = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.0)+(TIRE_D/2.0/TREAD_IMAGIN)*(INERTIA*(f_feedFoard_angle*(-1.0) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8009150:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8009154:	edd7 7a07 	vldr	s15, [r7, #28]
 8009158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800915c:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 800914c <CTRL_pol+0xb2c>
 8009160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009164:	ee17 0a90 	vmov	r0, s15
 8009168:	f7f7 fa16 	bl	8000598 <__aeabi_f2d>
 800916c:	f04f 0200 	mov.w	r2, #0
 8009170:	f04f 0300 	mov.w	r3, #0
 8009174:	f7f7 f8b2 	bl	80002dc <__adddf3>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4610      	mov	r0, r2
 800917e:	4619      	mov	r1, r3
 8009180:	a3f7      	add	r3, pc, #988	@ (adr r3, 8009560 <CTRL_pol+0xf40>)
 8009182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009186:	f7f7 fa5f 	bl	8000648 <__aeabi_dmul>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4690      	mov	r8, r2
 8009190:	4699      	mov	r9, r3
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	4618      	mov	r0, r3
 8009196:	f7f7 f9ff 	bl	8000598 <__aeabi_f2d>
 800919a:	4604      	mov	r4, r0
 800919c:	460d      	mov	r5, r1
 800919e:	6a3b      	ldr	r3, [r7, #32]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7f7 f9f9 	bl	8000598 <__aeabi_f2d>
 80091a6:	4602      	mov	r2, r0
 80091a8:	460b      	mov	r3, r1
 80091aa:	4620      	mov	r0, r4
 80091ac:	4629      	mov	r1, r5
 80091ae:	f7f7 f893 	bl	80002d8 <__aeabi_dsub>
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	4614      	mov	r4, r2
 80091b8:	461d      	mov	r5, r3
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	4618      	mov	r0, r3
 80091be:	f7f7 f9eb 	bl	8000598 <__aeabi_f2d>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	4620      	mov	r0, r4
 80091c8:	4629      	mov	r1, r5
 80091ca:	f7f7 f887 	bl	80002dc <__adddf3>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	4610      	mov	r0, r2
 80091d4:	4619      	mov	r1, r3
 80091d6:	a3e4      	add	r3, pc, #912	@ (adr r3, 8009568 <CTRL_pol+0xf48>)
 80091d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091dc:	f7f7 fa34 	bl	8000648 <__aeabi_dmul>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4614      	mov	r4, r2
 80091e6:	461d      	mov	r5, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7f7 f9d4 	bl	8000598 <__aeabi_f2d>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4620      	mov	r0, r4
 80091f6:	4629      	mov	r1, r5
 80091f8:	f7f7 f870 	bl	80002dc <__adddf3>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	4610      	mov	r0, r2
 8009202:	4619      	mov	r1, r3
 8009204:	a3da      	add	r3, pc, #872	@ (adr r3, 8009570 <CTRL_pol+0xf50>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f7 fa1d 	bl	8000648 <__aeabi_dmul>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	4640      	mov	r0, r8
 8009214:	4649      	mov	r1, r9
 8009216:	f7f7 f861 	bl	80002dc <__adddf3>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4610      	mov	r0, r2
 8009220:	4619      	mov	r1, r3
 8009222:	f04f 0200 	mov.w	r2, #0
 8009226:	4bda      	ldr	r3, [pc, #872]	@ (8009590 <CTRL_pol+0xf70>)
 8009228:	f7f7 fb38 	bl	800089c <__aeabi_ddiv>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	4610      	mov	r0, r2
 8009232:	4619      	mov	r1, r3
 8009234:	f7f7 fd00 	bl	8000c38 <__aeabi_d2f>
 8009238:	4603      	mov	r3, r0
 800923a:	62bb      	str	r3, [r7, #40]	@ 0x28
			TL = ((TIRE_D/2.0/2.0)*((WEIGHT*(f_feedFoard_speed + f_speedCtrl))+0.0)-(TIRE_D/2.0/TREAD_IMAGIN)*(INERTIA*(f_feedFoard_angle*(-1.0) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 800923c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8009240:	edd7 7a07 	vldr	s15, [r7, #28]
 8009244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009248:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8009594 <CTRL_pol+0xf74>
 800924c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009250:	ee17 0a90 	vmov	r0, s15
 8009254:	f7f7 f9a0 	bl	8000598 <__aeabi_f2d>
 8009258:	f04f 0200 	mov.w	r2, #0
 800925c:	f04f 0300 	mov.w	r3, #0
 8009260:	f7f7 f83c 	bl	80002dc <__adddf3>
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	4610      	mov	r0, r2
 800926a:	4619      	mov	r1, r3
 800926c:	a3bc      	add	r3, pc, #752	@ (adr r3, 8009560 <CTRL_pol+0xf40>)
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	f7f7 f9e9 	bl	8000648 <__aeabi_dmul>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	4690      	mov	r8, r2
 800927c:	4699      	mov	r9, r3
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	4618      	mov	r0, r3
 8009282:	f7f7 f989 	bl	8000598 <__aeabi_f2d>
 8009286:	4604      	mov	r4, r0
 8009288:	460d      	mov	r5, r1
 800928a:	6a3b      	ldr	r3, [r7, #32]
 800928c:	4618      	mov	r0, r3
 800928e:	f7f7 f983 	bl	8000598 <__aeabi_f2d>
 8009292:	4602      	mov	r2, r0
 8009294:	460b      	mov	r3, r1
 8009296:	4620      	mov	r0, r4
 8009298:	4629      	mov	r1, r5
 800929a:	f7f7 f81d 	bl	80002d8 <__aeabi_dsub>
 800929e:	4602      	mov	r2, r0
 80092a0:	460b      	mov	r3, r1
 80092a2:	4614      	mov	r4, r2
 80092a4:	461d      	mov	r5, r3
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7f7 f975 	bl	8000598 <__aeabi_f2d>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4620      	mov	r0, r4
 80092b4:	4629      	mov	r1, r5
 80092b6:	f7f7 f811 	bl	80002dc <__adddf3>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	4610      	mov	r0, r2
 80092c0:	4619      	mov	r1, r3
 80092c2:	a3a9      	add	r3, pc, #676	@ (adr r3, 8009568 <CTRL_pol+0xf48>)
 80092c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c8:	f7f7 f9be 	bl	8000648 <__aeabi_dmul>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4614      	mov	r4, r2
 80092d2:	461d      	mov	r5, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7f7 f95e 	bl	8000598 <__aeabi_f2d>
 80092dc:	4602      	mov	r2, r0
 80092de:	460b      	mov	r3, r1
 80092e0:	4620      	mov	r0, r4
 80092e2:	4629      	mov	r1, r5
 80092e4:	f7f6 fffa 	bl	80002dc <__adddf3>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	4610      	mov	r0, r2
 80092ee:	4619      	mov	r1, r3
 80092f0:	a39f      	add	r3, pc, #636	@ (adr r3, 8009570 <CTRL_pol+0xf50>)
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	f7f7 f9a7 	bl	8000648 <__aeabi_dmul>
 80092fa:	4602      	mov	r2, r0
 80092fc:	460b      	mov	r3, r1
 80092fe:	4640      	mov	r0, r8
 8009300:	4649      	mov	r1, r9
 8009302:	f7f6 ffe9 	bl	80002d8 <__aeabi_dsub>
 8009306:	4602      	mov	r2, r0
 8009308:	460b      	mov	r3, r1
 800930a:	4610      	mov	r0, r2
 800930c:	4619      	mov	r1, r3
 800930e:	f04f 0200 	mov.w	r2, #0
 8009312:	4b9f      	ldr	r3, [pc, #636]	@ (8009590 <CTRL_pol+0xf70>)
 8009314:	f7f7 fac2 	bl	800089c <__aeabi_ddiv>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4610      	mov	r0, r2
 800931e:	4619      	mov	r1, r3
 8009320:	f7f7 fc8a 	bl	8000c38 <__aeabi_d2f>
 8009324:	4603      	mov	r3, r0
 8009326:	637b      	str	r3, [r7, #52]	@ 0x34
			Ir = (TR-0.01/1000.0)/TORQUE_CONSTANT;
 8009328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800932a:	f7f7 f935 	bl	8000598 <__aeabi_f2d>
 800932e:	a392      	add	r3, pc, #584	@ (adr r3, 8009578 <CTRL_pol+0xf58>)
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	f7f6 ffd0 	bl	80002d8 <__aeabi_dsub>
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	4610      	mov	r0, r2
 800933e:	4619      	mov	r1, r3
 8009340:	a38f      	add	r3, pc, #572	@ (adr r3, 8009580 <CTRL_pol+0xf60>)
 8009342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009346:	f7f7 faa9 	bl	800089c <__aeabi_ddiv>
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	4610      	mov	r0, r2
 8009350:	4619      	mov	r1, r3
 8009352:	f7f7 fc71 	bl	8000c38 <__aeabi_d2f>
 8009356:	4603      	mov	r3, r0
 8009358:	633b      	str	r3, [r7, #48]	@ 0x30
			Il = (TL+0.01/1000.0)/TORQUE_CONSTANT;
 800935a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800935c:	f7f7 f91c 	bl	8000598 <__aeabi_f2d>
 8009360:	a385      	add	r3, pc, #532	@ (adr r3, 8009578 <CTRL_pol+0xf58>)
 8009362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009366:	f7f6 ffb9 	bl	80002dc <__adddf3>
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	4610      	mov	r0, r2
 8009370:	4619      	mov	r1, r3
 8009372:	a383      	add	r3, pc, #524	@ (adr r3, 8009580 <CTRL_pol+0xf60>)
 8009374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009378:	f7f7 fa90 	bl	800089c <__aeabi_ddiv>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4610      	mov	r0, r2
 8009382:	4619      	mov	r1, r3
 8009384:	f7f7 fc58 	bl	8000c38 <__aeabi_d2f>
 8009388:	4603      	mov	r3, r0
 800938a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
	}
	f_duty10_R = FF_BALANCE_R*(MOTOR_REGISTER*Ir+f_MotorR_AngleS*60.0/(2.0*PI)* TORQUE_CONSTANT*(PI*2.0)/60.0)/get_battLv();	
 800938c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8009390:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8009598 <CTRL_pol+0xf78>
 8009394:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009398:	ee17 0a90 	vmov	r0, s15
 800939c:	f7f7 f8fc 	bl	8000598 <__aeabi_f2d>
 80093a0:	4604      	mov	r4, r0
 80093a2:	460d      	mov	r5, r1
 80093a4:	4b7d      	ldr	r3, [pc, #500]	@ (800959c <CTRL_pol+0xf7c>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7f7 f8f5 	bl	8000598 <__aeabi_f2d>
 80093ae:	f04f 0200 	mov.w	r2, #0
 80093b2:	4b7b      	ldr	r3, [pc, #492]	@ (80095a0 <CTRL_pol+0xf80>)
 80093b4:	f7f7 f948 	bl	8000648 <__aeabi_dmul>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	4610      	mov	r0, r2
 80093be:	4619      	mov	r1, r3
 80093c0:	a371      	add	r3, pc, #452	@ (adr r3, 8009588 <CTRL_pol+0xf68>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f7f7 fa69 	bl	800089c <__aeabi_ddiv>
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	4610      	mov	r0, r2
 80093d0:	4619      	mov	r1, r3
 80093d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009580 <CTRL_pol+0xf60>)
 80093d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d8:	f7f7 f936 	bl	8000648 <__aeabi_dmul>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	4610      	mov	r0, r2
 80093e2:	4619      	mov	r1, r3
 80093e4:	a368      	add	r3, pc, #416	@ (adr r3, 8009588 <CTRL_pol+0xf68>)
 80093e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ea:	f7f7 f92d 	bl	8000648 <__aeabi_dmul>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4610      	mov	r0, r2
 80093f4:	4619      	mov	r1, r3
 80093f6:	f04f 0200 	mov.w	r2, #0
 80093fa:	4b69      	ldr	r3, [pc, #420]	@ (80095a0 <CTRL_pol+0xf80>)
 80093fc:	f7f7 fa4e 	bl	800089c <__aeabi_ddiv>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	4620      	mov	r0, r4
 8009406:	4629      	mov	r1, r5
 8009408:	f7f6 ff68 	bl	80002dc <__adddf3>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4614      	mov	r4, r2
 8009412:	461d      	mov	r5, r3
 8009414:	f009 fb84 	bl	8012b20 <get_battLv>
 8009418:	ee10 3a10 	vmov	r3, s0
 800941c:	4618      	mov	r0, r3
 800941e:	f7f7 f8bb 	bl	8000598 <__aeabi_f2d>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4620      	mov	r0, r4
 8009428:	4629      	mov	r1, r5
 800942a:	f7f7 fa37 	bl	800089c <__aeabi_ddiv>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	4610      	mov	r0, r2
 8009434:	4619      	mov	r1, r3
 8009436:	f7f7 fbff 	bl	8000c38 <__aeabi_d2f>
 800943a:	4603      	mov	r3, r0
 800943c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	f_duty10_L = FF_BALANCE_L*(MOTOR_REGISTER*Il+f_MotorL_AngleS*60.0/(2.0*PI)* TORQUE_CONSTANT*(PI*2.0)/60.0)/get_battLv();	
 800943e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8009442:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8009598 <CTRL_pol+0xf78>
 8009446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800944a:	ee17 0a90 	vmov	r0, s15
 800944e:	f7f7 f8a3 	bl	8000598 <__aeabi_f2d>
 8009452:	4604      	mov	r4, r0
 8009454:	460d      	mov	r5, r1
 8009456:	4b53      	ldr	r3, [pc, #332]	@ (80095a4 <CTRL_pol+0xf84>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4618      	mov	r0, r3
 800945c:	f7f7 f89c 	bl	8000598 <__aeabi_f2d>
 8009460:	f04f 0200 	mov.w	r2, #0
 8009464:	4b4e      	ldr	r3, [pc, #312]	@ (80095a0 <CTRL_pol+0xf80>)
 8009466:	f7f7 f8ef 	bl	8000648 <__aeabi_dmul>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	4610      	mov	r0, r2
 8009470:	4619      	mov	r1, r3
 8009472:	a345      	add	r3, pc, #276	@ (adr r3, 8009588 <CTRL_pol+0xf68>)
 8009474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009478:	f7f7 fa10 	bl	800089c <__aeabi_ddiv>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4610      	mov	r0, r2
 8009482:	4619      	mov	r1, r3
 8009484:	a33e      	add	r3, pc, #248	@ (adr r3, 8009580 <CTRL_pol+0xf60>)
 8009486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948a:	f7f7 f8dd 	bl	8000648 <__aeabi_dmul>
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	4610      	mov	r0, r2
 8009494:	4619      	mov	r1, r3
 8009496:	a33c      	add	r3, pc, #240	@ (adr r3, 8009588 <CTRL_pol+0xf68>)
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	f7f7 f8d4 	bl	8000648 <__aeabi_dmul>
 80094a0:	4602      	mov	r2, r0
 80094a2:	460b      	mov	r3, r1
 80094a4:	4610      	mov	r0, r2
 80094a6:	4619      	mov	r1, r3
 80094a8:	f04f 0200 	mov.w	r2, #0
 80094ac:	4b3c      	ldr	r3, [pc, #240]	@ (80095a0 <CTRL_pol+0xf80>)
 80094ae:	f7f7 f9f5 	bl	800089c <__aeabi_ddiv>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	4620      	mov	r0, r4
 80094b8:	4629      	mov	r1, r5
 80094ba:	f7f6 ff0f 	bl	80002dc <__adddf3>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4614      	mov	r4, r2
 80094c4:	461d      	mov	r5, r3
 80094c6:	f009 fb2b 	bl	8012b20 <get_battLv>
 80094ca:	ee10 3a10 	vmov	r3, s0
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7f7 f862 	bl	8000598 <__aeabi_f2d>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4620      	mov	r0, r4
 80094da:	4629      	mov	r1, r5
 80094dc:	f7f7 f9de 	bl	800089c <__aeabi_ddiv>
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	4610      	mov	r0, r2
 80094e6:	4619      	mov	r1, r3
 80094e8:	f7f7 fba6 	bl	8000c38 <__aeabi_d2f>
 80094ec:	4603      	mov	r3, r0
 80094ee:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(f_duty10_R>1){
 80094f0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80094f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009500:	dd02      	ble.n	8009508 <CTRL_pol+0xee8>
		f_duty10_R = 1.0;
 8009502:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009506:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}
	if(f_duty10_R<-1){
 8009508:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800950c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009518:	d501      	bpl.n	800951e <CTRL_pol+0xefe>
		f_duty10_R = -1.0;
 800951a:	4b23      	ldr	r3, [pc, #140]	@ (80095a8 <CTRL_pol+0xf88>)
 800951c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}
	if(f_duty10_L>1){
 800951e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8009522:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800952a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800952e:	dd02      	ble.n	8009536 <CTRL_pol+0xf16>
		f_duty10_L = 1.0;
 8009530:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009534:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
	if(f_duty10_L<-1){
 8009536:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800953a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800953e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009546:	d501      	bpl.n	800954c <CTRL_pol+0xf2c>
		f_duty10_L = -1.0;
 8009548:	4b17      	ldr	r3, [pc, #92]	@ (80095a8 <CTRL_pol+0xf88>)
 800954a:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	Duty_L = f_duty10_L;
 800954c:	4a17      	ldr	r2, [pc, #92]	@ (80095ac <CTRL_pol+0xf8c>)
 800954e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009550:	6013      	str	r3, [r2, #0]
	Duty_R = f_duty10_R;
 8009552:	4a17      	ldr	r2, [pc, #92]	@ (80095b0 <CTRL_pol+0xf90>)
 8009554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009556:	6013      	str	r3, [r2, #0]

	TempLog1 = TL*1000.0;//f_AngleSErrSum;//TR;//f_floorfriction;//f_duty10_R;
 8009558:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800955c:	e02c      	b.n	80095b8 <CTRL_pol+0xf98>
 800955e:	bf00      	nop
 8009560:	e0000000 	.word	0xe0000000
 8009564:	3f69be4c 	.word	0x3f69be4c
 8009568:	60000000 	.word	0x60000000
 800956c:	3eed5c31 	.word	0x3eed5c31
 8009570:	c6536e52 	.word	0xc6536e52
 8009574:	3fc5be21 	.word	0x3fc5be21
 8009578:	88e368f1 	.word	0x88e368f1
 800957c:	3ee4f8b5 	.word	0x3ee4f8b5
 8009580:	a0000000 	.word	0xa0000000
 8009584:	3f3adea8 	.word	0x3f3adea8
 8009588:	00000000 	.word	0x00000000
 800958c:	401921fa 	.word	0x401921fa
 8009590:	40128000 	.word	0x40128000
 8009594:	3caf4f0e 	.word	0x3caf4f0e
 8009598:	40133333 	.word	0x40133333
 800959c:	20000380 	.word	0x20000380
 80095a0:	404e0000 	.word	0x404e0000
 80095a4:	20000384 	.word	0x20000384
 80095a8:	bf800000 	.word	0xbf800000
 80095ac:	20017b20 	.word	0x20017b20
 80095b0:	20017b24 	.word	0x20017b24
 80095b4:	447a0000 	.word	0x447a0000
 80095b8:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 80095b4 <CTRL_pol+0xf94>
 80095bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095c0:	4b35      	ldr	r3, [pc, #212]	@ (8009698 <CTRL_pol+0x1078>)
 80095c2:	edc3 7a00 	vstr	s15, [r3]
	TempLog2 = f_feedFoard_speed;//f_angleSpeedCtrl;//TL;//f_duty10_L;
 80095c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c8:	4a34      	ldr	r2, [pc, #208]	@ (800969c <CTRL_pol+0x107c>)
 80095ca:	6013      	str	r3, [r2, #0]
	TempLog3 = f_speedCtrl;//f_floorfriction;//f_feedFoard_angle*(-1.0);
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	4a34      	ldr	r2, [pc, #208]	@ (80096a0 <CTRL_pol+0x1080>)
 80095d0:	6013      	str	r3, [r2, #0]
	TempLog4 = f_duty10_L;//f_SpeedErrSum;//f_floorfriction;//INERTIA*(f_feedFoard_angle*(-1.0) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction * 1000000.0;
 80095d2:	4a34      	ldr	r2, [pc, #208]	@ (80096a4 <CTRL_pol+0x1084>)
 80095d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d6:	6013      	str	r3, [r2, #0]

	EscapeWait = EscapeWait+0.001;
 80095d8:	4b33      	ldr	r3, [pc, #204]	@ (80096a8 <CTRL_pol+0x1088>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4618      	mov	r0, r3
 80095de:	f7f6 ffdb 	bl	8000598 <__aeabi_f2d>
 80095e2:	a32b      	add	r3, pc, #172	@ (adr r3, 8009690 <CTRL_pol+0x1070>)
 80095e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e8:	f7f6 fe78 	bl	80002dc <__adddf3>
 80095ec:	4602      	mov	r2, r0
 80095ee:	460b      	mov	r3, r1
 80095f0:	4610      	mov	r0, r2
 80095f2:	4619      	mov	r1, r3
 80095f4:	f7f7 fb20 	bl	8000c38 <__aeabi_d2f>
 80095f8:	4603      	mov	r3, r0
 80095fa:	4a2b      	ldr	r2, [pc, #172]	@ (80096a8 <CTRL_pol+0x1088>)
 80095fc:	6013      	str	r3, [r2, #0]
	CTRL_outMot( f_duty10_R, f_duty10_L );				// モータへ出力
 80095fe:	edd7 0a0e 	vldr	s1, [r7, #56]	@ 0x38
 8009602:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8009606:	f7fe ff65 	bl	80084d4 <CTRL_outMot>

	f_Time += 0.001;
 800960a:	4b28      	ldr	r3, [pc, #160]	@ (80096ac <CTRL_pol+0x108c>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4618      	mov	r0, r3
 8009610:	f7f6 ffc2 	bl	8000598 <__aeabi_f2d>
 8009614:	a31e      	add	r3, pc, #120	@ (adr r3, 8009690 <CTRL_pol+0x1070>)
 8009616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961a:	f7f6 fe5f 	bl	80002dc <__adddf3>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	4610      	mov	r0, r2
 8009624:	4619      	mov	r1, r3
 8009626:	f7f7 fb07 	bl	8000c38 <__aeabi_d2f>
 800962a:	4603      	mov	r3, r0
 800962c:	4a1f      	ldr	r2, [pc, #124]	@ (80096ac <CTRL_pol+0x108c>)
 800962e:	6013      	str	r3, [r2, #0]

	/* 壁切れチェック */
	if( MOT_getWallEdgeType() == MOT_WALL_EDGE_RIGHT ){
 8009630:	f009 f900 	bl	8012834 <MOT_getWallEdgeType>
 8009634:	4603      	mov	r3, r0
 8009636:	2b01      	cmp	r3, #1
 8009638:	d10e      	bne.n	8009658 <CTRL_pol+0x1038>

		/* 壁抜け */
		if( DIST_isWall_R_SIDE() == FALSE ){
 800963a:	f009 fe0f 	bl	801325c <DIST_isWall_R_SIDE>
 800963e:	4603      	mov	r3, r0
 8009640:	f083 0301 	eor.w	r3, r3, #1
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d01b      	beq.n	8009682 <CTRL_pol+0x1062>
			SetLED(0x10);
 800964a:	2010      	movs	r0, #16
 800964c:	f7f8 fc44 	bl	8001ed8 <SetLED>
			MOT_setWallEdge( TRUE );		// 壁の切れ目を検知
 8009650:	2001      	movs	r0, #1
 8009652:	f009 f8fb 	bl	801284c <MOT_setWallEdge>
 8009656:	e014      	b.n	8009682 <CTRL_pol+0x1062>
		}
	}
	else if( MOT_getWallEdgeType() == MOT_WALL_EDGE_LEFT ){
 8009658:	f009 f8ec 	bl	8012834 <MOT_getWallEdgeType>
 800965c:	4603      	mov	r3, r0
 800965e:	2b02      	cmp	r3, #2
 8009660:	d10f      	bne.n	8009682 <CTRL_pol+0x1062>

		/* 壁抜け */
		if( DIST_isWall_L_SIDE() == FALSE ){
 8009662:	f009 fe11 	bl	8013288 <DIST_isWall_L_SIDE>
 8009666:	4603      	mov	r3, r0
 8009668:	f083 0301 	eor.w	r3, r3, #1
 800966c:	b2db      	uxtb	r3, r3
 800966e:	2b00      	cmp	r3, #0
 8009670:	d007      	beq.n	8009682 <CTRL_pol+0x1062>
			SetLED(0x01);
 8009672:	2001      	movs	r0, #1
 8009674:	f7f8 fc30 	bl	8001ed8 <SetLED>
			MOT_setWallEdge( TRUE );		// 壁の切れ目を検知
 8009678:	2001      	movs	r0, #1
 800967a:	f009 f8e7 	bl	801284c <MOT_setWallEdge>
 800967e:	e000      	b.n	8009682 <CTRL_pol+0x1062>
		 return;		// 制御無効状態
 8009680:	bf00      	nop
		}
	}
}
 8009682:	3740      	adds	r7, #64	@ 0x40
 8009684:	46bd      	mov	sp, r7
 8009686:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800968a:	bf00      	nop
 800968c:	f3af 8000 	nop.w
 8009690:	d2f1a9fc 	.word	0xd2f1a9fc
 8009694:	3f50624d 	.word	0x3f50624d
 8009698:	20017b10 	.word	0x20017b10
 800969c:	20017b14 	.word	0x20017b14
 80096a0:	20017b18 	.word	0x20017b18
 80096a4:	20017b1c 	.word	0x20017b1c
 80096a8:	200003fc 	.word	0x200003fc
 80096ac:	20000354 	.word	0x20000354

080096b0 <Failsafe_flag>:

void Failsafe_flag(void)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	af00      	add	r7, sp, #0
	bl_Failsafe = TRUE;
 80096b4:	4b03      	ldr	r3, [pc, #12]	@ (80096c4 <Failsafe_flag+0x14>)
 80096b6:	2201      	movs	r2, #1
 80096b8:	701a      	strb	r2, [r3, #0]
	SetLED(0x1F);
 80096ba:	201f      	movs	r0, #31
 80096bc:	f7f8 fc0c 	bl	8001ed8 <SetLED>
}
 80096c0:	bf00      	nop
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	200003f9 	.word	0x200003f9

080096c8 <Failsafe_flag_off>:

void Failsafe_flag_off(void)
{
 80096c8:	b480      	push	{r7}
 80096ca:	af00      	add	r7, sp, #0
	bl_Failsafe = FALSE;
 80096cc:	4b03      	ldr	r3, [pc, #12]	@ (80096dc <Failsafe_flag_off+0x14>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	701a      	strb	r2, [r3, #0]
}
 80096d2:	bf00      	nop
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	200003f9 	.word	0x200003f9

080096e0 <SYS_isOutOfCtrl>:

bool SYS_isOutOfCtrl( void )
{
 80096e0:	b480      	push	{r7}
 80096e2:	af00      	add	r7, sp, #0
	return bl_Failsafe;
 80096e4:	4b03      	ldr	r3, [pc, #12]	@ (80096f4 <SYS_isOutOfCtrl+0x14>)
 80096e6:	781b      	ldrb	r3, [r3, #0]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	200003f9 	.word	0x200003f9

080096f8 <DCM_setDirCw>:
 */

#include "hal/DCM.h"

void DCM_setDirCw( enDCM_ID en_id )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	4603      	mov	r3, r0
 8009700:	71fb      	strb	r3, [r7, #7]
	/* 回転方向設定 */
	if( en_id == DCM_R ){			// 右
 8009702:	79fb      	ldrb	r3, [r7, #7]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d103      	bne.n	8009710 <DCM_setDirCw+0x18>
		Set_MOT1(1);	//tmp
 8009708:	2001      	movs	r0, #1
 800970a:	f7f8 fcef 	bl	80020ec <Set_MOT1>
	}
	else{							// 左
		Set_MOT0(0);	//tmp

	}
}
 800970e:	e002      	b.n	8009716 <DCM_setDirCw+0x1e>
		Set_MOT0(0);	//tmp
 8009710:	2000      	movs	r0, #0
 8009712:	f7f8 fcd1 	bl	80020b8 <Set_MOT0>
}
 8009716:	bf00      	nop
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <DCM_setDirCcw>:

void DCM_setDirCcw( enDCM_ID en_id )
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	4603      	mov	r3, r0
 8009726:	71fb      	strb	r3, [r7, #7]
	/* 回転方向設定 */
	if( en_id == DCM_R ){			// 右
 8009728:	79fb      	ldrb	r3, [r7, #7]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d103      	bne.n	8009736 <DCM_setDirCcw+0x18>
		Set_MOT1(0);	//tmp
 800972e:	2000      	movs	r0, #0
 8009730:	f7f8 fcdc 	bl	80020ec <Set_MOT1>
	}
	else{							// 左
		Set_MOT0(1);	//tmp
	}
}
 8009734:	e002      	b.n	800973c <DCM_setDirCcw+0x1e>
		Set_MOT0(1);	//tmp
 8009736:	2001      	movs	r0, #1
 8009738:	f7f8 fcbe 	bl	80020b8 <Set_MOT0>
}
 800973c:	bf00      	nop
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <DCM_brakeMot>:

void DCM_brakeMot( enDCM_ID en_id )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	71fb      	strb	r3, [r7, #7]
	/* 停止設定 */
	if( en_id == DCM_R ){			// 右
 800974e:	79fb      	ldrb	r3, [r7, #7]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d103      	bne.n	800975c <DCM_brakeMot+0x18>
		Set_DutyTIM3(0);
 8009754:	2000      	movs	r0, #0
 8009756:	f7fc fb3b 	bl	8005dd0 <Set_DutyTIM3>
	}
	else{							// 左
		Set_DutyTIM2(0);
	}
}
 800975a:	e002      	b.n	8009762 <DCM_brakeMot+0x1e>
		Set_DutyTIM2(0);
 800975c:	2000      	movs	r0, #0
 800975e:	f7fc faf7 	bl	8005d50 <Set_DutyTIM2>
}
 8009762:	bf00      	nop
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <DCM_staMot>:

void DCM_staMot( enDCM_ID en_id )
{	
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	4603      	mov	r3, r0
 8009772:	71fb      	strb	r3, [r7, #7]
	/* タイマスタート */
	if( en_id == DCM_R ){			// 右
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d102      	bne.n	8009780 <DCM_staMot+0x16>
		Enable_TIM3();
 800977a:	f7fc fadd 	bl	8005d38 <Enable_TIM3>
	}
	else{							// 左
	   Enable_TIM2();
	}
}
 800977e:	e001      	b.n	8009784 <DCM_staMot+0x1a>
	   Enable_TIM2();
 8009780:	f7fc fad2 	bl	8005d28 <Enable_TIM2>
}
 8009784:	bf00      	nop
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <DCM_staMotAll>:

void DCM_staMotAll( void )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	af00      	add	r7, sp, #0
	DCM_staMot(DCM_R);									// 右モータON
 8009790:	2000      	movs	r0, #0
 8009792:	f7ff ffea 	bl	800976a <DCM_staMot>
	DCM_staMot(DCM_L);									// 左モータON
 8009796:	2001      	movs	r0, #1
 8009798:	f7ff ffe7 	bl	800976a <DCM_staMot>
}
 800979c:	bf00      	nop
 800979e:	bd80      	pop	{r7, pc}

080097a0 <DCM_setPwmDuty>:

void DCM_setPwmDuty( enDCM_ID en_id, uint16_t us_duty10 )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	4603      	mov	r3, r0
 80097a8:	460a      	mov	r2, r1
 80097aa:	71fb      	strb	r3, [r7, #7]
 80097ac:	4613      	mov	r3, r2
 80097ae:	80bb      	strh	r3, [r7, #4]
	/* PWM設定 */
	if( en_id == DCM_R ){				// 右
 80097b0:	79fb      	ldrb	r3, [r7, #7]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d110      	bne.n	80097d8 <DCM_setPwmDuty+0x38>

		if( 0 == us_duty10 ){			// Duty0%設定
 80097b6:	88bb      	ldrh	r3, [r7, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d104      	bne.n	80097c6 <DCM_setPwmDuty+0x26>
			DCM_brakeMot( en_id );
 80097bc:	79fb      	ldrb	r3, [r7, #7]
 80097be:	4618      	mov	r0, r3
 80097c0:	f7ff ffc0 	bl	8009744 <DCM_brakeMot>
		else{
			Set_DutyTIM2(us_duty10);
			DCM_staMot( en_id );		// 回転開始
		}
	}
}
 80097c4:	e018      	b.n	80097f8 <DCM_setPwmDuty+0x58>
			Set_DutyTIM3(us_duty10);
 80097c6:	88bb      	ldrh	r3, [r7, #4]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fc fb01 	bl	8005dd0 <Set_DutyTIM3>
			DCM_staMot( en_id );		// 回転開始
 80097ce:	79fb      	ldrb	r3, [r7, #7]
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7ff ffca 	bl	800976a <DCM_staMot>
}
 80097d6:	e00f      	b.n	80097f8 <DCM_setPwmDuty+0x58>
		if( 0 == us_duty10 ){			// Duty0%
 80097d8:	88bb      	ldrh	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d104      	bne.n	80097e8 <DCM_setPwmDuty+0x48>
			DCM_brakeMot( en_id );
 80097de:	79fb      	ldrb	r3, [r7, #7]
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7ff ffaf 	bl	8009744 <DCM_brakeMot>
}
 80097e6:	e007      	b.n	80097f8 <DCM_setPwmDuty+0x58>
			Set_DutyTIM2(us_duty10);
 80097e8:	88bb      	ldrh	r3, [r7, #4]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fc fab0 	bl	8005d50 <Set_DutyTIM2>
			DCM_staMot( en_id );		// 回転開始
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7ff ffb9 	bl	800976a <DCM_staMot>
}
 80097f8:	bf00      	nop
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <ENC_clr>:


#include "hal/encoder.h"

void ENC_clr( void )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	af00      	add	r7, sp, #0
	Clear_CounterTIM5();
 8009804:	f7fc fb30 	bl	8005e68 <Clear_CounterTIM5>
	Clear_CounterTIM1();
 8009808:	f7fc fb22 	bl	8005e50 <Clear_CounterTIM1>
}
 800980c:	bf00      	nop
 800980e:	bd80      	pop	{r7, pc}

08009810 <Get_encoder_value>:

uint16_t Get_encoder_value(en_ENDIR dir)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	4603      	mov	r3, r0
 8009818:	71fb      	strb	r3, [r7, #7]
	if(dir == EN_L) return Get_CounterTIM1();
 800981a:	79fb      	ldrb	r3, [r7, #7]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d103      	bne.n	8009828 <Get_encoder_value+0x18>
 8009820:	f7fc fb6e 	bl	8005f00 <Get_CounterTIM1>
 8009824:	4603      	mov	r3, r0
 8009826:	e002      	b.n	800982e <Get_encoder_value+0x1e>
	else return Get_CounterTIM5();
 8009828:	f7fc fb76 	bl	8005f18 <Get_CounterTIM5>
 800982c:	4603      	mov	r3, r0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <ENC_GetDiv>:

void ENC_GetDiv( int32_t* p_r, int32_t* p_l )
{
 8009836:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
	int64_t l_cntR = (int64_t) Get_CounterTIM5();
 8009842:	f7fc fb69 	bl	8005f18 <Get_CounterTIM5>
 8009846:	4603      	mov	r3, r0
 8009848:	b29b      	uxth	r3, r3
 800984a:	2200      	movs	r2, #0
 800984c:	4698      	mov	r8, r3
 800984e:	4691      	mov	r9, r2
 8009850:	e9c7 8904 	strd	r8, r9, [r7, #16]
	int64_t l_cntL = (int64_t) Get_CounterTIM1();
 8009854:	f7fc fb54 	bl	8005f00 <Get_CounterTIM1>
 8009858:	4603      	mov	r3, r0
 800985a:	b29b      	uxth	r3, r3
 800985c:	2200      	movs	r2, #0
 800985e:	461c      	mov	r4, r3
 8009860:	4615      	mov	r5, r2
 8009862:	e9c7 4502 	strd	r4, r5, [r7, #8]

	ENC_clr();
 8009866:	f7ff ffcb 	bl	8009800 <ENC_clr>

	*p_r = ENC_RESET_VAL - l_cntR;		// 右モータ
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 8009870:	461a      	mov	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	601a      	str	r2, [r3, #0]
	*p_l = l_cntL - ENC_RESET_VAL;		// 左モータ
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800987c:	461a      	mov	r2, r3
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	601a      	str	r2, [r3, #0]
}
 8009882:	bf00      	nop
 8009884:	3718      	adds	r7, #24
 8009886:	46bd      	mov	sp, r7
 8009888:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800988c <Get_s_gyro>:
int16_t s_GyroValBuf[8];								// ジャイロセンサのバッファ値
float  f_GyroNowAngle;		 						// ジャイロセンサの現在角度
int32_t  l_GyroRef; 									// ジャイロセンサの基準値

uint16_t Get_s_gyro(void)
{
 800988c:	b480      	push	{r7}
 800988e:	af00      	add	r7, sp, #0
	return s_GyroVal;
 8009890:	4b04      	ldr	r3, [pc, #16]	@ (80098a4 <Get_s_gyro+0x18>)
 8009892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009896:	b29b      	uxth	r3, r3
}
 8009898:	4618      	mov	r0, r3
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20000402 	.word	0x20000402

080098a8 <ICM_42688_whoami>:
void ICM_42688_whoami(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
	SetSPI2TransmitData(0,(0x0F | 0x80));
 80098ac:	218f      	movs	r1, #143	@ 0x8f
 80098ae:	2000      	movs	r0, #0
 80098b0:	f7fb f822 	bl	80048f8 <SetSPI2TransmitData>
	SetSPI2TransmitData(1, 0x00);
 80098b4:	2100      	movs	r1, #0
 80098b6:	2001      	movs	r0, #1
 80098b8:	f7fb f81e 	bl	80048f8 <SetSPI2TransmitData>
	SPI2_DMA_Communication(2);
 80098bc:	2002      	movs	r0, #2
 80098be:	f7fa ff99 	bl	80047f4 <SPI2_DMA_Communication>
	printf("who am i = %x\r\n",Get_SPI2ReciveData(1));
 80098c2:	2001      	movs	r0, #1
 80098c4:	f7fb f808 	bl	80048d8 <Get_SPI2ReciveData>
 80098c8:	4603      	mov	r3, r0
 80098ca:	4619      	mov	r1, r3
 80098cc:	4802      	ldr	r0, [pc, #8]	@ (80098d8 <ICM_42688_whoami+0x30>)
 80098ce:	f014 fa2d 	bl	801dd2c <iprintf>

}
 80098d2:	bf00      	nop
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	08021b84 	.word	0x08021b84

080098dc <ICM_42688_WriteByte>:

void ICM_42688_WriteByte(uint8_t reg,uint8_t data)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	4603      	mov	r3, r0
 80098e4:	460a      	mov	r2, r1
 80098e6:	71fb      	strb	r3, [r7, #7]
 80098e8:	4613      	mov	r3, r2
 80098ea:	71bb      	strb	r3, [r7, #6]
	SetSPI2TransmitData(0, reg);
 80098ec:	79fb      	ldrb	r3, [r7, #7]
 80098ee:	4619      	mov	r1, r3
 80098f0:	2000      	movs	r0, #0
 80098f2:	f7fb f801 	bl	80048f8 <SetSPI2TransmitData>
	SetSPI2TransmitData(1, data);
 80098f6:	79bb      	ldrb	r3, [r7, #6]
 80098f8:	4619      	mov	r1, r3
 80098fa:	2001      	movs	r0, #1
 80098fc:	f7fa fffc 	bl	80048f8 <SetSPI2TransmitData>

	SPI2_DMA_Communication(2);
 8009900:	2002      	movs	r0, #2
 8009902:	f7fa ff77 	bl	80047f4 <SPI2_DMA_Communication>
}
 8009906:	bf00      	nop
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <ICM_42688_ReadByte>:

void ICM_42688_ReadByte(uint8_t reg,uint8_t length)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	4603      	mov	r3, r0
 8009916:	460a      	mov	r2, r1
 8009918:	71fb      	strb	r3, [r7, #7]
 800991a:	4613      	mov	r3, r2
 800991c:	71bb      	strb	r3, [r7, #6]
	SetSPI2TransmitData(0,(reg | 0x80));
 800991e:	79fb      	ldrb	r3, [r7, #7]
 8009920:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009924:	b2db      	uxtb	r3, r3
 8009926:	4619      	mov	r1, r3
 8009928:	2000      	movs	r0, #0
 800992a:	f7fa ffe5 	bl	80048f8 <SetSPI2TransmitData>
	SetSPI2TransmitData(1,0x00);
 800992e:	2100      	movs	r1, #0
 8009930:	2001      	movs	r0, #1
 8009932:	f7fa ffe1 	bl	80048f8 <SetSPI2TransmitData>
	SetSPI2TransmitData(2,0x00);
 8009936:	2100      	movs	r1, #0
 8009938:	2002      	movs	r0, #2
 800993a:	f7fa ffdd 	bl	80048f8 <SetSPI2TransmitData>

	SPI2_DMA_Communication(3);
 800993e:	2003      	movs	r0, #3
 8009940:	f7fa ff58 	bl	80047f4 <SPI2_DMA_Communication>
}
 8009944:	bf00      	nop
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <ICM_42688_init>:


void ICM_42688_init(void)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
	ICM_42688_WriteByte(reg27,0x18);
	LL_mDelay(1);
	ICM_42688_WriteByte(reg28,0x18);
	LL_mDelay(1);
*/
	uint8_t reg16 = 0x10;	//CTRL1_XL
 8009952:	2310      	movs	r3, #16
 8009954:	71fb      	strb	r3, [r7, #7]
	uint8_t reg17 = 0x11;	//CTRL2_G
 8009956:	2311      	movs	r3, #17
 8009958:	71bb      	strb	r3, [r7, #6]
	uint8_t reg18 = 0x12;	//CTRL3_C
 800995a:	2312      	movs	r3, #18
 800995c:	717b      	strb	r3, [r7, #5]
	uint8_t reg24 = 0x18;	//CTRL9_XL
 800995e:	2318      	movs	r3, #24
 8009960:	713b      	strb	r3, [r7, #4]
	uint8_t reg19 = 0x13;	//CTRL4_C
 8009962:	2313      	movs	r3, #19
 8009964:	70fb      	strb	r3, [r7, #3]
	uint8_t reg23 = 0x17;	//CTRL8_XL
 8009966:	2317      	movs	r3, #23
 8009968:	70bb      	strb	r3, [r7, #2]
	uint8_t reg112 = 0x70;	//CTRL1_OIS
 800996a:	2370      	movs	r3, #112	@ 0x70
 800996c:	707b      	strb	r3, [r7, #1]


	ICM_42688_WriteByte(reg18,0x81);
 800996e:	797b      	ldrb	r3, [r7, #5]
 8009970:	2181      	movs	r1, #129	@ 0x81
 8009972:	4618      	mov	r0, r3
 8009974:	f7ff ffb2 	bl	80098dc <ICM_42688_WriteByte>
	LL_mDelay(400);
 8009978:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800997c:	f012 f8e2 	bl	801bb44 <LL_mDelay>
	ICM_42688_WriteByte(reg24,0xE2);
 8009980:	793b      	ldrb	r3, [r7, #4]
 8009982:	21e2      	movs	r1, #226	@ 0xe2
 8009984:	4618      	mov	r0, r3
 8009986:	f7ff ffa9 	bl	80098dc <ICM_42688_WriteByte>
	LL_mDelay(50);
 800998a:	2032      	movs	r0, #50	@ 0x32
 800998c:	f012 f8da 	bl	801bb44 <LL_mDelay>
	ICM_42688_WriteByte(reg19,0x06);
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	2106      	movs	r1, #6
 8009994:	4618      	mov	r0, r3
 8009996:	f7ff ffa1 	bl	80098dc <ICM_42688_WriteByte>
	LL_mDelay(50);
 800999a:	2032      	movs	r0, #50	@ 0x32
 800999c:	f012 f8d2 	bl	801bb44 <LL_mDelay>
	ICM_42688_WriteByte(reg23,0x06);
 80099a0:	78bb      	ldrb	r3, [r7, #2]
 80099a2:	2106      	movs	r1, #6
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7ff ff99 	bl	80098dc <ICM_42688_WriteByte>
	LL_mDelay(50);
 80099aa:	2032      	movs	r0, #50	@ 0x32
 80099ac:	f012 f8ca 	bl	801bb44 <LL_mDelay>
	ICM_42688_WriteByte(reg112,0xA9);
 80099b0:	787b      	ldrb	r3, [r7, #1]
 80099b2:	21a9      	movs	r1, #169	@ 0xa9
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7ff ff91 	bl	80098dc <ICM_42688_WriteByte>
	LL_mDelay(50);
 80099ba:	2032      	movs	r0, #50	@ 0x32
 80099bc:	f012 f8c2 	bl	801bb44 <LL_mDelay>
	ICM_42688_WriteByte(reg17,0xA1);
 80099c0:	79bb      	ldrb	r3, [r7, #6]
 80099c2:	21a1      	movs	r1, #161	@ 0xa1
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7ff ff89 	bl	80098dc <ICM_42688_WriteByte>
	LL_mDelay(1);
 80099ca:	2001      	movs	r0, #1
 80099cc:	f012 f8ba 	bl	801bb44 <LL_mDelay>
	ICM_42688_WriteByte(reg17,0x81);
	LL_mDelay(1);
	ICM_42688_WriteByte(reg18,0x04);
	LL_mDelay(1);
*/
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <ICM_42688_GyroRead_DMA>:

void ICM_42688_GyroRead_DMA(uint8_t reg) //reg 29 2A
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	71fb      	strb	r3, [r7, #7]
	ICM_42688_ReadByte(reg,3);
 80099e2:	79fb      	ldrb	r3, [r7, #7]
 80099e4:	2103      	movs	r1, #3
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7ff ff91 	bl	800990e <ICM_42688_ReadByte>
}
 80099ec:	bf00      	nop
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <ICM_42688_GyroData>:

void ICM_42688_GyroData(void)
{
 80099f4:	b598      	push	{r3, r4, r7, lr}
 80099f6:	af00      	add	r7, sp, #0
	s_GyroVal=((uint16_t)Get_SPI2ReciveData(2)<<8|Get_SPI2ReciveData(1));
 80099f8:	2002      	movs	r0, #2
 80099fa:	f7fa ff6d 	bl	80048d8 <Get_SPI2ReciveData>
 80099fe:	4603      	mov	r3, r0
 8009a00:	021b      	lsls	r3, r3, #8
 8009a02:	b21c      	sxth	r4, r3
 8009a04:	2001      	movs	r0, #1
 8009a06:	f7fa ff67 	bl	80048d8 <Get_SPI2ReciveData>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	b21b      	sxth	r3, r3
 8009a0e:	4323      	orrs	r3, r4
 8009a10:	b21a      	sxth	r2, r3
 8009a12:	4b02      	ldr	r3, [pc, #8]	@ (8009a1c <ICM_42688_GyroData+0x28>)
 8009a14:	801a      	strh	r2, [r3, #0]
}
 8009a16:	bf00      	nop
 8009a18:	bd98      	pop	{r3, r4, r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20000402 	.word	0x20000402

08009a20 <GYRO_SetRef>:

void GYRO_SetRef( void )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
	uint16_t i;
	int32_t ul_ref = 0;
 8009a26:	2300      	movs	r3, #0
 8009a28:	603b      	str	r3, [r7, #0]

	/* データサンプリング */
	for( i=0; i<GYRO_REF_NUM; i++){			// 100回サンプリングした平均値を基準の値とする。
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	80fb      	strh	r3, [r7, #6]
 8009a2e:	e00c      	b.n	8009a4a <GYRO_SetRef+0x2a>
		ul_ref += (int32_t)s_GyroVal;
 8009a30:	4b0e      	ldr	r3, [pc, #56]	@ (8009a6c <GYRO_SetRef+0x4c>)
 8009a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a36:	461a      	mov	r2, r3
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	603b      	str	r3, [r7, #0]
		LL_mDelay(1);
 8009a3e:	2001      	movs	r0, #1
 8009a40:	f012 f880 	bl	801bb44 <LL_mDelay>
	for( i=0; i<GYRO_REF_NUM; i++){			// 100回サンプリングした平均値を基準の値とする。
 8009a44:	88fb      	ldrh	r3, [r7, #6]
 8009a46:	3301      	adds	r3, #1
 8009a48:	80fb      	strh	r3, [r7, #6]
 8009a4a:	88fb      	ldrh	r3, [r7, #6]
 8009a4c:	2bc7      	cmp	r3, #199	@ 0xc7
 8009a4e:	d9ef      	bls.n	8009a30 <GYRO_SetRef+0x10>
	}

	/* 基準値算出（平均値） */
	l_GyroRef = (int32_t)((ul_ref) / GYRO_REF_NUM) ;		
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	4a07      	ldr	r2, [pc, #28]	@ (8009a70 <GYRO_SetRef+0x50>)
 8009a54:	fb82 1203 	smull	r1, r2, r2, r3
 8009a58:	1192      	asrs	r2, r2, #6
 8009a5a:	17db      	asrs	r3, r3, #31
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	4a05      	ldr	r2, [pc, #20]	@ (8009a74 <GYRO_SetRef+0x54>)
 8009a60:	6013      	str	r3, [r2, #0]
}
 8009a62:	bf00      	nop
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	20000402 	.word	0x20000402
 8009a70:	51eb851f 	.word	0x51eb851f
 8009a74:	20000408 	.word	0x20000408

08009a78 <GYRO_getSpeedErr>:

float GYRO_getSpeedErr( void )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
	int32_t  l_val = (int32_t)s_GyroVal;				
 8009a7e:	4b20      	ldr	r3, [pc, #128]	@ (8009b00 <GYRO_getSpeedErr+0x88>)
 8009a80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a84:	60fb      	str	r3, [r7, #12]
	int32_t  l_err = l_val - l_GyroRef;
 8009a86:	4b1f      	ldr	r3, [pc, #124]	@ (8009b04 <GYRO_getSpeedErr+0x8c>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	1ad3      	subs	r3, r2, r3
 8009a8e:	60bb      	str	r3, [r7, #8]
	float f_res;

	/* 角速度の偏差算出 */
//	if( ( l_err < -0.01 * 100 ) || ( 0.01 * 100 < l_err ) ){
//		f_res = (float)l_err *140.0  * DEG_TO_RAD;// / 1000.0;
	f_res = (float)s_GyroVal/1000.0 *140.0 * DEG_TO_RAD;// / 1000.0;
 8009a90:	4b1b      	ldr	r3, [pc, #108]	@ (8009b00 <GYRO_getSpeedErr+0x88>)
 8009a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a96:	ee07 3a90 	vmov	s15, r3
 8009a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a9e:	ee17 0a90 	vmov	r0, s15
 8009aa2:	f7f6 fd79 	bl	8000598 <__aeabi_f2d>
 8009aa6:	f04f 0200 	mov.w	r2, #0
 8009aaa:	4b17      	ldr	r3, [pc, #92]	@ (8009b08 <GYRO_getSpeedErr+0x90>)
 8009aac:	f7f6 fef6 	bl	800089c <__aeabi_ddiv>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	f04f 0200 	mov.w	r2, #0
 8009abc:	4b13      	ldr	r3, [pc, #76]	@ (8009b0c <GYRO_getSpeedErr+0x94>)
 8009abe:	f7f6 fdc3 	bl	8000648 <__aeabi_dmul>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	4619      	mov	r1, r3
 8009aca:	a30b      	add	r3, pc, #44	@ (adr r3, 8009af8 <GYRO_getSpeedErr+0x80>)
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	f7f6 fdba 	bl	8000648 <__aeabi_dmul>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	4610      	mov	r0, r2
 8009ada:	4619      	mov	r1, r3
 8009adc:	f7f7 f8ac 	bl	8000c38 <__aeabi_d2f>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	607b      	str	r3, [r7, #4]
//	}
/*	else{
		f_res = 0;									// [deg/s]
	}
*/
	return f_res;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	ee07 3a90 	vmov	s15, r3
}
 8009aea:	eeb0 0a67 	vmov.f32	s0, s15
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	f3af 8000 	nop.w
 8009af8:	60000000 	.word	0x60000000
 8009afc:	3f91df49 	.word	0x3f91df49
 8009b00:	20000402 	.word	0x20000402
 8009b04:	20000408 	.word	0x20000408
 8009b08:	408f4000 	.word	0x408f4000
 8009b0c:	40618000 	.word	0x40618000

08009b10 <GYRO_getNowAngle>:

float GYRO_getNowAngle( void )
{
 8009b10:	b480      	push	{r7}
 8009b12:	af00      	add	r7, sp, #0
	return f_GyroNowAngle;
 8009b14:	4b04      	ldr	r3, [pc, #16]	@ (8009b28 <GYRO_getNowAngle+0x18>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	ee07 3a90 	vmov	s15, r3
}
 8009b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr
 8009b28:	20000404 	.word	0x20000404

08009b2c <GYRO_getRef>:

float GYRO_getRef( void )
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	af00      	add	r7, sp, #0
	return l_GyroRef;
 8009b30:	4b05      	ldr	r3, [pc, #20]	@ (8009b48 <GYRO_getRef+0x1c>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	ee07 3a90 	vmov	s15, r3
 8009b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8009b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	20000408 	.word	0x20000408

08009b4c <GYRO_Pol>:

void GYRO_Pol( void )
{
 8009b4c:	b5b0      	push	{r4, r5, r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
	float f_speed;

	/* 現在の角度を更新する */
	f_speed = GYRO_getSpeedErr();			// 角速度取得 (0.001sec毎の角速度)
 8009b52:	f7ff ff91 	bl	8009a78 <GYRO_getSpeedErr>
 8009b56:	ed87 0a01 	vstr	s0, [r7, #4]
	f_GyroNowAngle += f_speed / 1000.0;		// 角度設定   (0.001sec毎に加算するため)
 8009b5a:	4b22      	ldr	r3, [pc, #136]	@ (8009be4 <GYRO_Pol+0x98>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7f6 fd1a 	bl	8000598 <__aeabi_f2d>
 8009b64:	4604      	mov	r4, r0
 8009b66:	460d      	mov	r5, r1
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7f6 fd15 	bl	8000598 <__aeabi_f2d>
 8009b6e:	f04f 0200 	mov.w	r2, #0
 8009b72:	4b1d      	ldr	r3, [pc, #116]	@ (8009be8 <GYRO_Pol+0x9c>)
 8009b74:	f7f6 fe92 	bl	800089c <__aeabi_ddiv>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	4629      	mov	r1, r5
 8009b80:	f7f6 fbac 	bl	80002dc <__adddf3>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	4610      	mov	r0, r2
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	f7f7 f854 	bl	8000c38 <__aeabi_d2f>
 8009b90:	4603      	mov	r3, r0
 8009b92:	4a14      	ldr	r2, [pc, #80]	@ (8009be4 <GYRO_Pol+0x98>)
 8009b94:	6013      	str	r3, [r2, #0]

	/* エラーチェック */
	if( bl_ErrChk == TRUE ){
 8009b96:	4b15      	ldr	r3, [pc, #84]	@ (8009bec <GYRO_Pol+0xa0>)
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d01d      	beq.n	8009bda <GYRO_Pol+0x8e>

		f_ErrChkAngle += f_speed/1000.0;		// 角度設定   (0.001sec毎に加算するため)
 8009b9e:	4b14      	ldr	r3, [pc, #80]	@ (8009bf0 <GYRO_Pol+0xa4>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7f6 fcf8 	bl	8000598 <__aeabi_f2d>
 8009ba8:	4604      	mov	r4, r0
 8009baa:	460d      	mov	r5, r1
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7f6 fcf3 	bl	8000598 <__aeabi_f2d>
 8009bb2:	f04f 0200 	mov.w	r2, #0
 8009bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8009be8 <GYRO_Pol+0x9c>)
 8009bb8:	f7f6 fe70 	bl	800089c <__aeabi_ddiv>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	f7f6 fb8a 	bl	80002dc <__adddf3>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4610      	mov	r0, r2
 8009bce:	4619      	mov	r1, r3
 8009bd0:	f7f7 f832 	bl	8000c38 <__aeabi_d2f>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	4a06      	ldr	r2, [pc, #24]	@ (8009bf0 <GYRO_Pol+0xa4>)
 8009bd8:	6013      	str	r3, [r2, #0]

			Failsafe_flag();
		}
*/
	}
}
 8009bda:	bf00      	nop
 8009bdc:	3708      	adds	r7, #8
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bdb0      	pop	{r4, r5, r7, pc}
 8009be2:	bf00      	nop
 8009be4:	20000404 	.word	0x20000404
 8009be8:	408f4000 	.word	0x408f4000
 8009bec:	200003f8 	.word	0x200003f8
 8009bf0:	200003f4 	.word	0x200003f4

08009bf4 <GYRO_staErrChkAngle>:
//	f_NowAccel = Accel_getSpeedErr();			// 加速度取得 (0.001sec毎の加速度)

}

void GYRO_staErrChkAngle( void )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	af00      	add	r7, sp, #0
	f_ErrChkAngle = 0;
 8009bf8:	4b05      	ldr	r3, [pc, #20]	@ (8009c10 <GYRO_staErrChkAngle+0x1c>)
 8009bfa:	f04f 0200 	mov.w	r2, #0
 8009bfe:	601a      	str	r2, [r3, #0]
	bl_ErrChk = TRUE;
 8009c00:	4b04      	ldr	r3, [pc, #16]	@ (8009c14 <GYRO_staErrChkAngle+0x20>)
 8009c02:	2201      	movs	r2, #1
 8009c04:	701a      	strb	r2, [r3, #0]

}
 8009c06:	bf00      	nop
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	200003f4 	.word	0x200003f4
 8009c14:	200003f8 	.word	0x200003f8

08009c18 <GYRO_endErrChkAngle>:

void GYRO_endErrChkAngle( void )
{
 8009c18:	b480      	push	{r7}
 8009c1a:	af00      	add	r7, sp, #0
	f_ErrChkAngle = 0;
 8009c1c:	4b05      	ldr	r3, [pc, #20]	@ (8009c34 <GYRO_endErrChkAngle+0x1c>)
 8009c1e:	f04f 0200 	mov.w	r2, #0
 8009c22:	601a      	str	r2, [r3, #0]
	bl_ErrChk = FALSE;
 8009c24:	4b04      	ldr	r3, [pc, #16]	@ (8009c38 <GYRO_endErrChkAngle+0x20>)
 8009c26:	2200      	movs	r2, #0
 8009c28:	701a      	strb	r2, [r3, #0]

}
 8009c2a:	bf00      	nop
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	200003f4 	.word	0x200003f4
 8009c38:	200003f8 	.word	0x200003f8

08009c3c <HAL_init>:
#include "hal/init.h"



void HAL_init( void )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	af00      	add	r7, sp, #0
	TIME_init();
 8009c40:	f000 f840 	bl	8009cc4 <TIME_init>
	/* ジャイロセンサ */
	f_GyroNowAngle = 0;			// ジャイロセンサの現在角度(0にしても探索他は動くが、宴会とかtestrunとかは動かない)修正済みと思われる
 8009c44:	4b1a      	ldr	r3, [pc, #104]	@ (8009cb0 <HAL_init+0x74>)
 8009c46:	f04f 0200 	mov.w	r2, #0
 8009c4a:	601a      	str	r2, [r3, #0]
	l_GyroRef  = 0;				// ジャイロセンサの基準値
 8009c4c:	4b19      	ldr	r3, [pc, #100]	@ (8009cb4 <HAL_init+0x78>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	601a      	str	r2, [r3, #0]

	f_ErrChkAngle = 0;
 8009c52:	4b19      	ldr	r3, [pc, #100]	@ (8009cb8 <HAL_init+0x7c>)
 8009c54:	f04f 0200 	mov.w	r2, #0
 8009c58:	601a      	str	r2, [r3, #0]
	bl_ErrChk = FALSE;
 8009c5a:	4b18      	ldr	r3, [pc, #96]	@ (8009cbc <HAL_init+0x80>)
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	701a      	strb	r2, [r3, #0]
	DIST_init();
 8009c60:	f008 ffa4 	bl	8012bac <DIST_init>
	MAP_Goal_init();
 8009c64:	f00c ff9a 	bl	8016b9c <MAP_Goal_init>
  	ADC3_Start();
 8009c68:	f7f7 fd4e 	bl	8001708 <ADC3_Start>
  	ADC2_Start();
 8009c6c:	f7f7 fd58 	bl	8001720 <ADC2_Start>
  	ADC1_Start();
 8009c70:	f7f7 fd62 	bl	8001738 <ADC1_Start>
	LL_mDelay(10);
 8009c74:	200a      	movs	r0, #10
 8009c76:	f011 ff65 	bl	801bb44 <LL_mDelay>

  	SPI2_Start();
 8009c7a:	f7fa fda3 	bl	80047c4 <SPI2_Start>
  	ICM_42688_init();
 8009c7e:	f7ff fe65 	bl	800994c <ICM_42688_init>
  	ICM_42688_whoami();
 8009c82:	f7ff fe11 	bl	80098a8 <ICM_42688_whoami>
	ICM_42688_whoami();
 8009c86:	f7ff fe0f 	bl	80098a8 <ICM_42688_whoami>
	LL_mDelay(30);
 8009c8a:	201e      	movs	r0, #30
 8009c8c:	f011 ff5a 	bl	801bb44 <LL_mDelay>
	TIMER_init();
 8009c90:	f7fb fffe 	bl	8005c90 <TIMER_init>
	SYS_start();
 8009c94:	f000 fa1c 	bl	800a0d0 <SYS_start>
	MAP_init();
 8009c98:	f00c ff5a 	bl	8016b50 <MAP_init>
	GYRO_SetRef();
 8009c9c:	f7ff fec0 	bl	8009a20 <GYRO_SetRef>
	printf("Goal X %d Goal Y %d \r\n",GOAL_MAP_X_DEF,GOAL_MAP_Y_DEF);
 8009ca0:	2209      	movs	r2, #9
 8009ca2:	2114      	movs	r1, #20
 8009ca4:	4806      	ldr	r0, [pc, #24]	@ (8009cc0 <HAL_init+0x84>)
 8009ca6:	f014 f841 	bl	801dd2c <iprintf>
}
 8009caa:	bf00      	nop
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20000404 	.word	0x20000404
 8009cb4:	20000408 	.word	0x20000408
 8009cb8:	200003f4 	.word	0x200003f4
 8009cbc:	200003f8 	.word	0x200003f8
 8009cc0:	08021b94 	.word	0x08021b94

08009cc4 <TIME_init>:

void TIME_init( void )
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	af00      	add	r7, sp, #0
	/* 初期化 */
	Msec_in = 0;		// 内部時計[msec]
 8009cc8:	4b06      	ldr	r3, [pc, #24]	@ (8009ce4 <TIME_init+0x20>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	801a      	strh	r2, [r3, #0]
	Sec_in  = 0;		// 内部時計[sec]
 8009cce:	4b06      	ldr	r3, [pc, #24]	@ (8009ce8 <TIME_init+0x24>)
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	701a      	strb	r2, [r3, #0]
	Min_in  = 0;		// 内部時計[min]
 8009cd4:	4b05      	ldr	r3, [pc, #20]	@ (8009cec <TIME_init+0x28>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	701a      	strb	r2, [r3, #0]
}
 8009cda:	bf00      	nop
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr
 8009ce4:	20000214 	.word	0x20000214
 8009ce8:	20000216 	.word	0x20000216
 8009cec:	20000217 	.word	0x20000217

08009cf0 <log_in2>:
			float log3,float log4,
			float log5,float log6,
			float log7,float log8,
			float log9,float log10,
			float log11,float log12)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b08d      	sub	sp, #52	@ 0x34
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 8009cfa:	edc7 0a0a 	vstr	s1, [r7, #40]	@ 0x28
 8009cfe:	ed87 1a09 	vstr	s2, [r7, #36]	@ 0x24
 8009d02:	edc7 1a08 	vstr	s3, [r7, #32]
 8009d06:	ed87 2a07 	vstr	s4, [r7, #28]
 8009d0a:	edc7 2a06 	vstr	s5, [r7, #24]
 8009d0e:	ed87 3a05 	vstr	s6, [r7, #20]
 8009d12:	edc7 3a04 	vstr	s7, [r7, #16]
 8009d16:	ed87 4a03 	vstr	s8, [r7, #12]
 8009d1a:	edc7 4a02 	vstr	s9, [r7, #8]
 8009d1e:	ed87 5a01 	vstr	s10, [r7, #4]
 8009d22:	edc7 5a00 	vstr	s11, [r7]
	if((b_logflag == TRUE)&&(log_count < log_num)){
 8009d26:	4b34      	ldr	r3, [pc, #208]	@ (8009df8 <log_in2+0x108>)
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d05e      	beq.n	8009dec <log_in2+0xfc>
 8009d2e:	4b33      	ldr	r3, [pc, #204]	@ (8009dfc <log_in2+0x10c>)
 8009d30:	881b      	ldrh	r3, [r3, #0]
 8009d32:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009d36:	d259      	bcs.n	8009dec <log_in2+0xfc>
		Log_1[log_count] = log1;
 8009d38:	4b30      	ldr	r3, [pc, #192]	@ (8009dfc <log_in2+0x10c>)
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	4a30      	ldr	r2, [pc, #192]	@ (8009e00 <log_in2+0x110>)
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4413      	add	r3, r2
 8009d42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d44:	601a      	str	r2, [r3, #0]
		Log_2[log_count] = log2;
 8009d46:	4b2d      	ldr	r3, [pc, #180]	@ (8009dfc <log_in2+0x10c>)
 8009d48:	881b      	ldrh	r3, [r3, #0]
 8009d4a:	4a2e      	ldr	r2, [pc, #184]	@ (8009e04 <log_in2+0x114>)
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	4413      	add	r3, r2
 8009d50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d52:	601a      	str	r2, [r3, #0]
		Log_3[log_count] = log3;
 8009d54:	4b29      	ldr	r3, [pc, #164]	@ (8009dfc <log_in2+0x10c>)
 8009d56:	881b      	ldrh	r3, [r3, #0]
 8009d58:	4a2b      	ldr	r2, [pc, #172]	@ (8009e08 <log_in2+0x118>)
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4413      	add	r3, r2
 8009d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d60:	601a      	str	r2, [r3, #0]
		Log_4[log_count] = log4;
 8009d62:	4b26      	ldr	r3, [pc, #152]	@ (8009dfc <log_in2+0x10c>)
 8009d64:	881b      	ldrh	r3, [r3, #0]
 8009d66:	4a29      	ldr	r2, [pc, #164]	@ (8009e0c <log_in2+0x11c>)
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4413      	add	r3, r2
 8009d6c:	6a3a      	ldr	r2, [r7, #32]
 8009d6e:	601a      	str	r2, [r3, #0]
		Log_5[log_count] = log5;
 8009d70:	4b22      	ldr	r3, [pc, #136]	@ (8009dfc <log_in2+0x10c>)
 8009d72:	881b      	ldrh	r3, [r3, #0]
 8009d74:	4a26      	ldr	r2, [pc, #152]	@ (8009e10 <log_in2+0x120>)
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	69fa      	ldr	r2, [r7, #28]
 8009d7c:	601a      	str	r2, [r3, #0]
		Log_6[log_count] = log6;
 8009d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8009dfc <log_in2+0x10c>)
 8009d80:	881b      	ldrh	r3, [r3, #0]
 8009d82:	4a24      	ldr	r2, [pc, #144]	@ (8009e14 <log_in2+0x124>)
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	69ba      	ldr	r2, [r7, #24]
 8009d8a:	601a      	str	r2, [r3, #0]
		Log_7[log_count] = log7;
 8009d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8009dfc <log_in2+0x10c>)
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	4a21      	ldr	r2, [pc, #132]	@ (8009e18 <log_in2+0x128>)
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	697a      	ldr	r2, [r7, #20]
 8009d98:	601a      	str	r2, [r3, #0]
		Log_8[log_count] = log8;
 8009d9a:	4b18      	ldr	r3, [pc, #96]	@ (8009dfc <log_in2+0x10c>)
 8009d9c:	881b      	ldrh	r3, [r3, #0]
 8009d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8009e1c <log_in2+0x12c>)
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	693a      	ldr	r2, [r7, #16]
 8009da6:	601a      	str	r2, [r3, #0]
		Log_9[log_count] = log9;
 8009da8:	4b14      	ldr	r3, [pc, #80]	@ (8009dfc <log_in2+0x10c>)
 8009daa:	881b      	ldrh	r3, [r3, #0]
 8009dac:	4a1c      	ldr	r2, [pc, #112]	@ (8009e20 <log_in2+0x130>)
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	601a      	str	r2, [r3, #0]
		Log_10[log_count] = log10;
 8009db6:	4b11      	ldr	r3, [pc, #68]	@ (8009dfc <log_in2+0x10c>)
 8009db8:	881b      	ldrh	r3, [r3, #0]
 8009dba:	4a1a      	ldr	r2, [pc, #104]	@ (8009e24 <log_in2+0x134>)
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	601a      	str	r2, [r3, #0]
		Log_11[log_count] = log11;
 8009dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8009dfc <log_in2+0x10c>)
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	4a17      	ldr	r2, [pc, #92]	@ (8009e28 <log_in2+0x138>)
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	601a      	str	r2, [r3, #0]
		Log_12[log_count] = log12;
 8009dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8009dfc <log_in2+0x10c>)
 8009dd4:	881b      	ldrh	r3, [r3, #0]
 8009dd6:	4a15      	ldr	r2, [pc, #84]	@ (8009e2c <log_in2+0x13c>)
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	601a      	str	r2, [r3, #0]
//		Log_13[log_count] = log13;
//		Log_14[log_count] = log14;

		log_count++;
 8009de0:	4b06      	ldr	r3, [pc, #24]	@ (8009dfc <log_in2+0x10c>)
 8009de2:	881b      	ldrh	r3, [r3, #0]
 8009de4:	3301      	adds	r3, #1
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	4b04      	ldr	r3, [pc, #16]	@ (8009dfc <log_in2+0x10c>)
 8009dea:	801a      	strh	r2, [r3, #0]
	}
}
 8009dec:	bf00      	nop
 8009dee:	3734      	adds	r7, #52	@ 0x34
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr
 8009df8:	20017b0e 	.word	0x20017b0e
 8009dfc:	20017b0c 	.word	0x20017b0c
 8009e00:	2000040c 	.word	0x2000040c
 8009e04:	2000234c 	.word	0x2000234c
 8009e08:	2000428c 	.word	0x2000428c
 8009e0c:	200061cc 	.word	0x200061cc
 8009e10:	2000810c 	.word	0x2000810c
 8009e14:	2000a04c 	.word	0x2000a04c
 8009e18:	2000bf8c 	.word	0x2000bf8c
 8009e1c:	2000decc 	.word	0x2000decc
 8009e20:	2000fe0c 	.word	0x2000fe0c
 8009e24:	20011d4c 	.word	0x20011d4c
 8009e28:	20013c8c 	.word	0x20013c8c
 8009e2c:	20015bcc 	.word	0x20015bcc

08009e30 <log_interrupt>:

void log_interrupt ( void )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	ed2d 8b08 	vpush	{d8-d11}
 8009e36:	af00      	add	r7, sp, #0
	log_in2(GYRO_getSpeedErr(), Get_TrgtAngleS(),
 8009e38:	f7ff fe1e 	bl	8009a78 <GYRO_getSpeedErr>
 8009e3c:	eeb0 8a40 	vmov.f32	s16, s0
 8009e40:	f7fc faa4 	bl	800638c <Get_TrgtAngleS>
 8009e44:	eef0 8a40 	vmov.f32	s17, s0
 8009e48:	f7fc fa84 	bl	8006354 <Get_NowAngle>
 8009e4c:	eeb0 9a40 	vmov.f32	s18, s0
 8009e50:	f7fc fa8e 	bl	8006370 <Get_TrgtAngle>
 8009e54:	eef0 9a40 	vmov.f32	s19, s0
 8009e58:	f7fc fa26 	bl	80062a8 <Get_NowSpeed>
 8009e5c:	eeb0 aa40 	vmov.f32	s20, s0
 8009e60:	f7fc fa4c 	bl	80062fc <Get_TrgtSpeed>
 8009e64:	eef0 aa40 	vmov.f32	s21, s0
 8009e68:	f7fc fa2c 	bl	80062c4 <Get_NowDist>
 8009e6c:	eeb0 ba40 	vmov.f32	s22, s0
 8009e70:	f7fc fa36 	bl	80062e0 <Get_TrgtDist>
 8009e74:	eef0 3a40 	vmov.f32	s7, s0
 8009e78:	4b14      	ldr	r3, [pc, #80]	@ (8009ecc <log_interrupt+0x9c>)
 8009e7a:	edd3 7a00 	vldr	s15, [r3]
 8009e7e:	4b14      	ldr	r3, [pc, #80]	@ (8009ed0 <log_interrupt+0xa0>)
 8009e80:	ed93 7a00 	vldr	s14, [r3]
 8009e84:	4b13      	ldr	r3, [pc, #76]	@ (8009ed4 <log_interrupt+0xa4>)
 8009e86:	edd3 6a00 	vldr	s13, [r3]
 8009e8a:	4b13      	ldr	r3, [pc, #76]	@ (8009ed8 <log_interrupt+0xa8>)
 8009e8c:	ed93 6a00 	vldr	s12, [r3]
 8009e90:	eef0 5a46 	vmov.f32	s11, s12
 8009e94:	eeb0 5a66 	vmov.f32	s10, s13
 8009e98:	eef0 4a47 	vmov.f32	s9, s14
 8009e9c:	eeb0 4a67 	vmov.f32	s8, s15
 8009ea0:	eeb0 3a4b 	vmov.f32	s6, s22
 8009ea4:	eef0 2a6a 	vmov.f32	s5, s21
 8009ea8:	eeb0 2a4a 	vmov.f32	s4, s20
 8009eac:	eef0 1a69 	vmov.f32	s3, s19
 8009eb0:	eeb0 1a49 	vmov.f32	s2, s18
 8009eb4:	eef0 0a68 	vmov.f32	s1, s17
 8009eb8:	eeb0 0a48 	vmov.f32	s0, s16
 8009ebc:	f7ff ff18 	bl	8009cf0 <log_in2>
			Get_NowAngle(),Get_TrgtAngle(),
			Get_NowSpeed(), Get_TrgtSpeed(),
			Get_NowDist(), Get_TrgtDist(),TempLog1,TempLog2,TempLog3,TempLog4);

}
 8009ec0:	bf00      	nop
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	ecbd 8b08 	vpop	{d8-d11}
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	20017b10 	.word	0x20017b10
 8009ed0:	20017b14 	.word	0x20017b14
 8009ed4:	20017b18 	.word	0x20017b18
 8009ed8:	20017b1c 	.word	0x20017b1c

08009edc <log_flag_on>:

void log_flag_on(void)
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
	b_logflag = TRUE;
 8009ee0:	4b03      	ldr	r3, [pc, #12]	@ (8009ef0 <log_flag_on+0x14>)
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	701a      	strb	r2, [r3, #0]
}
 8009ee6:	bf00      	nop
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	20017b0e 	.word	0x20017b0e

08009ef4 <log_flag_off>:

void log_flag_off(void)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	af00      	add	r7, sp, #0
	b_logflag = FALSE;
 8009ef8:	4b03      	ldr	r3, [pc, #12]	@ (8009f08 <log_flag_off+0x14>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	701a      	strb	r2, [r3, #0]
}
 8009efe:	bf00      	nop
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr
 8009f08:	20017b0e 	.word	0x20017b0e

08009f0c <log_read2>:

void log_read2(void)
{
 8009f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f10:	b0a8      	sub	sp, #160	@ 0xa0
 8009f12:	af16      	add	r7, sp, #88	@ 0x58
	int16_t i=0;
 8009f14:	2300      	movs	r3, #0
 8009f16:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	while(i<log_num){
 8009f1a:	e0b3      	b.n	800a084 <log_read2+0x178>
		(float)Log_1[i]/1000.0,(float)Log_2[i]/1000.0,(float)Log_3[i]/1000.0,(float)Log_4[i]/1000.0,(float)Log_5[i]/1000.0,
		(float)Log_6[i]/1000.0,(float)Log_7[i]/1000.0,(float)Log_8[i]/1000.0,(float)Log_9[i]/1000.0,(float)Log_10[i]/1000.0,
		(float)Log_11[i]/1000.0,(float)Log_12[i]/1000.0,(float)Log_13[i]/1000.0,(float)Log_14[i]/1000.0);
*/
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009f1c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009f20:	4a5e      	ldr	r2, [pc, #376]	@ (800a09c <log_read2+0x190>)
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4413      	add	r3, r2
 8009f26:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7f6 fb35 	bl	8000598 <__aeabi_f2d>
 8009f2e:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009f32:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009f36:	4a5a      	ldr	r2, [pc, #360]	@ (800a0a0 <log_read2+0x194>)
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7f6 fb2a 	bl	8000598 <__aeabi_f2d>
 8009f44:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009f48:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009f4c:	4a55      	ldr	r2, [pc, #340]	@ (800a0a4 <log_read2+0x198>)
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4413      	add	r3, r2
 8009f52:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7f6 fb1f 	bl	8000598 <__aeabi_f2d>
 8009f5a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009f5e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009f62:	4a51      	ldr	r2, [pc, #324]	@ (800a0a8 <log_read2+0x19c>)
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7f6 fb14 	bl	8000598 <__aeabi_f2d>
 8009f70:	e9c7 0108 	strd	r0, r1, [r7, #32]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009f74:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009f78:	4a4c      	ldr	r2, [pc, #304]	@ (800a0ac <log_read2+0x1a0>)
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4413      	add	r3, r2
 8009f7e:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7f6 fb09 	bl	8000598 <__aeabi_f2d>
 8009f86:	e9c7 0106 	strd	r0, r1, [r7, #24]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009f8a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009f8e:	4a48      	ldr	r2, [pc, #288]	@ (800a0b0 <log_read2+0x1a4>)
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7f6 fafe 	bl	8000598 <__aeabi_f2d>
 8009f9c:	e9c7 0104 	strd	r0, r1, [r7, #16]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009fa0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009fa4:	4a43      	ldr	r2, [pc, #268]	@ (800a0b4 <log_read2+0x1a8>)
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7f6 faf3 	bl	8000598 <__aeabi_f2d>
 8009fb2:	e9c7 0102 	strd	r0, r1, [r7, #8]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009fb6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009fba:	4a3f      	ldr	r2, [pc, #252]	@ (800a0b8 <log_read2+0x1ac>)
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4413      	add	r3, r2
 8009fc0:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7f6 fae8 	bl	8000598 <__aeabi_f2d>
 8009fc8:	e9c7 0100 	strd	r0, r1, [r7]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009fcc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009fd0:	4a3a      	ldr	r2, [pc, #232]	@ (800a0bc <log_read2+0x1b0>)
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7f6 fadd 	bl	8000598 <__aeabi_f2d>
 8009fde:	4682      	mov	sl, r0
 8009fe0:	468b      	mov	fp, r1
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009fe2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009fe6:	4a36      	ldr	r2, [pc, #216]	@ (800a0c0 <log_read2+0x1b4>)
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	4413      	add	r3, r2
 8009fec:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7f6 fad2 	bl	8000598 <__aeabi_f2d>
 8009ff4:	4680      	mov	r8, r0
 8009ff6:	4689      	mov	r9, r1
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 8009ff8:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009ffc:	4a31      	ldr	r2, [pc, #196]	@ (800a0c4 <log_read2+0x1b8>)
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 800a004:	4618      	mov	r0, r3
 800a006:	f7f6 fac7 	bl	8000598 <__aeabi_f2d>
 800a00a:	4604      	mov	r4, r0
 800a00c:	460d      	mov	r5, r1
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i],Log_11[i],Log_12[i]);
 800a00e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800a012:	4a2d      	ldr	r2, [pc, #180]	@ (800a0c8 <log_read2+0x1bc>)
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7f6 fabc 	bl	8000598 <__aeabi_f2d>
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 800a028:	e9cd 4512 	strd	r4, r5, [sp, #72]	@ 0x48
 800a02c:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
 800a030:	e9cd ab0e 	strd	sl, fp, [sp, #56]	@ 0x38
 800a034:	ed97 7b00 	vldr	d7, [r7]
 800a038:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a03c:	ed97 7b02 	vldr	d7, [r7, #8]
 800a040:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a044:	ed97 7b04 	vldr	d7, [r7, #16]
 800a048:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a04c:	ed97 7b06 	vldr	d7, [r7, #24]
 800a050:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a054:	ed97 7b08 	vldr	d7, [r7, #32]
 800a058:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a05c:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800a060:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a064:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800a068:	ed8d 7b00 	vstr	d7, [sp]
 800a06c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a070:	4816      	ldr	r0, [pc, #88]	@ (800a0cc <log_read2+0x1c0>)
 800a072:	f013 fe5b 	bl	801dd2c <iprintf>
		
		i++;
 800a076:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	3301      	adds	r3, #1
 800a07e:	b29b      	uxth	r3, r3
 800a080:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	while(i<log_num){
 800a084:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800a088:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800a08c:	f6ff af46 	blt.w	8009f1c <log_read2+0x10>
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
		i++;
	}
*/
}
 800a090:	bf00      	nop
 800a092:	bf00      	nop
 800a094:	3748      	adds	r7, #72	@ 0x48
 800a096:	46bd      	mov	sp, r7
 800a098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a09c:	2000040c 	.word	0x2000040c
 800a0a0:	2000234c 	.word	0x2000234c
 800a0a4:	2000428c 	.word	0x2000428c
 800a0a8:	200061cc 	.word	0x200061cc
 800a0ac:	2000810c 	.word	0x2000810c
 800a0b0:	2000a04c 	.word	0x2000a04c
 800a0b4:	2000bf8c 	.word	0x2000bf8c
 800a0b8:	2000decc 	.word	0x2000decc
 800a0bc:	2000fe0c 	.word	0x2000fe0c
 800a0c0:	20011d4c 	.word	0x20011d4c
 800a0c4:	20013c8c 	.word	0x20013c8c
 800a0c8:	20015bcc 	.word	0x20015bcc
 800a0cc:	08021bac 	.word	0x08021bac

0800a0d0 <SYS_start>:
uint8_t		WallHitFlag = 0; //0 = not wall_hit

extern uint8_t			SLA_Count;

void SYS_start( void )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	af00      	add	r7, sp, #0
	/* タイトル表示 */
	printf(" ------------------------------\r\n");
 800a0d4:	4825      	ldr	r0, [pc, #148]	@ (800a16c <SYS_start+0x9c>)
 800a0d6:	f013 fe99 	bl	801de0c <puts>
	printf(" | Robo Name  : hankyo2       |\r\n");
 800a0da:	4825      	ldr	r0, [pc, #148]	@ (800a170 <SYS_start+0xa0>)
 800a0dc:	f013 fe96 	bl	801de0c <puts>
	printf(" | Developer  : sho sato      |\r\n");
 800a0e0:	4824      	ldr	r0, [pc, #144]	@ (800a174 <SYS_start+0xa4>)
 800a0e2:	f013 fe93 	bl	801de0c <puts>
	printf(" | Version    : ver1          |\r\n");
 800a0e6:	4824      	ldr	r0, [pc, #144]	@ (800a178 <SYS_start+0xa8>)
 800a0e8:	f013 fe90 	bl	801de0c <puts>
	printf(" | Project By : RT Corporation|\r\n");
 800a0ec:	4823      	ldr	r0, [pc, #140]	@ (800a17c <SYS_start+0xac>)
 800a0ee:	f013 fe8d 	bl	801de0c <puts>
	printf(" ------------------------------\r\n");	
 800a0f2:	481e      	ldr	r0, [pc, #120]	@ (800a16c <SYS_start+0x9c>)
 800a0f4:	f013 fe8a 	bl	801de0c <puts>

	printf("\r\n turn 45 \r\r");
 800a0f8:	4821      	ldr	r0, [pc, #132]	@ (800a180 <SYS_start+0xb0>)
 800a0fa:	f013 fe17 	bl	801dd2c <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 2.00f,3000*PI, SLA_45 );
 800a0fe:	2001      	movs	r0, #1
 800a100:	eddf 1a20 	vldr	s3, [pc, #128]	@ 800a184 <SYS_start+0xb4>
 800a104:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800a108:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 800a188 <SYS_start+0xb8>
 800a10c:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800a18c <SYS_start+0xbc>
 800a110:	f7f8 fb92 	bl	8002838 <PARAM_makeSra>
	printf("\r\n turn 90 \r\r");		
 800a114:	481e      	ldr	r0, [pc, #120]	@ (800a190 <SYS_start+0xc0>)
 800a116:	f013 fe09 	bl	801dd2c <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 3.50f,3000*PI,  SLA_90 );	
 800a11a:	2000      	movs	r0, #0
 800a11c:	eddf 1a19 	vldr	s3, [pc, #100]	@ 800a184 <SYS_start+0xb4>
 800a120:	eeb0 1a0c 	vmov.f32	s2, #12	@ 0x40600000  3.5
 800a124:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 800a194 <SYS_start+0xc4>
 800a128:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800a18c <SYS_start+0xbc>
 800a12c:	f7f8 fb84 	bl	8002838 <PARAM_makeSra>
//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f, SLA_90 );
	printf("\r\n turn 135 \r\r");	
 800a130:	4819      	ldr	r0, [pc, #100]	@ (800a198 <SYS_start+0xc8>)
 800a132:	f013 fdfb 	bl	801dd2c <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 4.00f,3000*PI,  SLA_135 );	
 800a136:	2002      	movs	r0, #2
 800a138:	eddf 1a12 	vldr	s3, [pc, #72]	@ 800a184 <SYS_start+0xb4>
 800a13c:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 800a140:	eddf 0a14 	vldr	s1, [pc, #80]	@ 800a194 <SYS_start+0xc4>
 800a144:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 800a18c <SYS_start+0xbc>
 800a148:	f7f8 fb76 	bl	8002838 <PARAM_makeSra>
	printf("\r\n turn N90 \r\r");	
 800a14c:	4813      	ldr	r0, [pc, #76]	@ (800a19c <SYS_start+0xcc>)
 800a14e:	f013 fded 	bl	801dd2c <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 300.0f, 5.00f,3500*PI,  SLA_N90 );		
 800a152:	2003      	movs	r0, #3
 800a154:	eddf 1a12 	vldr	s3, [pc, #72]	@ 800a1a0 <SYS_start+0xd0>
 800a158:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 800a15c:	eddf 0a11 	vldr	s1, [pc, #68]	@ 800a1a4 <SYS_start+0xd4>
 800a160:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800a18c <SYS_start+0xbc>
 800a164:	f7f8 fb68 	bl	8002838 <PARAM_makeSra>
	printf("\r\n turn 135 \r\r");	
	PARAM_makeSra( 0.5, 750.0f, 10.00f,3000*PI,  SLA_135 );	
	printf("\r\n turn N90 \r\r");	
	PARAM_makeSra( 0.5, 800.0f, 11.00f,3000*PI,  SLA_N90 );	
*/
}
 800a168:	bf00      	nop
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	08021bf8 	.word	0x08021bf8
 800a170:	08021c1c 	.word	0x08021c1c
 800a174:	08021c40 	.word	0x08021c40
 800a178:	08021c64 	.word	0x08021c64
 800a17c:	08021c88 	.word	0x08021c88
 800a180:	08021cac 	.word	0x08021cac
 800a184:	46134315 	.word	0x46134315
 800a188:	43160000 	.word	0x43160000
 800a18c:	3e99999a 	.word	0x3e99999a
 800a190:	08021cbc 	.word	0x08021cbc
 800a194:	43480000 	.word	0x43480000
 800a198:	08021ccc 	.word	0x08021ccc
 800a19c:	08021cdc 	.word	0x08021cdc
 800a1a0:	462bce43 	.word	0x462bce43
 800a1a4:	43960000 	.word	0x43960000

0800a1a8 <MODE_inc>:

void MODE_inc( void )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	af00      	add	r7, sp, #0
	en_Mode++;		// モードを�?�?
 800a1ac:	4b35      	ldr	r3, [pc, #212]	@ (800a284 <MODE_inc+0xdc>)
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	b2da      	uxtb	r2, r3
 800a1b4:	4b33      	ldr	r3, [pc, #204]	@ (800a284 <MODE_inc+0xdc>)
 800a1b6:	701a      	strb	r2, [r3, #0]

	/* 最大値チェ�?ク */
	if( MODE_MAX == en_Mode ){
 800a1b8:	4b32      	ldr	r3, [pc, #200]	@ (800a284 <MODE_inc+0xdc>)
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	2b08      	cmp	r3, #8
 800a1be:	d102      	bne.n	800a1c6 <MODE_inc+0x1e>
		en_Mode = MODE_0;
 800a1c0:	4b30      	ldr	r3, [pc, #192]	@ (800a284 <MODE_inc+0xdc>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	701a      	strb	r2, [r3, #0]
	}

	/* モード表示 */
	switch( en_Mode ){
 800a1c6:	4b2f      	ldr	r3, [pc, #188]	@ (800a284 <MODE_inc+0xdc>)
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	2b07      	cmp	r3, #7
 800a1cc:	d857      	bhi.n	800a27e <MODE_inc+0xd6>
 800a1ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d4 <MODE_inc+0x2c>)
 800a1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d4:	0800a1f5 	.word	0x0800a1f5
 800a1d8:	0800a201 	.word	0x0800a201
 800a1dc:	0800a213 	.word	0x0800a213
 800a1e0:	0800a225 	.word	0x0800a225
 800a1e4:	0800a237 	.word	0x0800a237
 800a1e8:	0800a249 	.word	0x0800a249
 800a1ec:	0800a25b 	.word	0x0800a25b
 800a1f0:	0800a26d 	.word	0x0800a26d

		case MODE_0:
			SetLED(0x00 | NowModeLed);
 800a1f4:	4b24      	ldr	r3, [pc, #144]	@ (800a288 <MODE_inc+0xe0>)
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7f7 fe6d 	bl	8001ed8 <SetLED>
			break;
 800a1fe:	e03f      	b.n	800a280 <MODE_inc+0xd8>

		case MODE_1:
			SetLED((0x01<<1) | NowModeLed);
 800a200:	4b21      	ldr	r3, [pc, #132]	@ (800a288 <MODE_inc+0xe0>)
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	f043 0302 	orr.w	r3, r3, #2
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7f7 fe64 	bl	8001ed8 <SetLED>
			break;
 800a210:	e036      	b.n	800a280 <MODE_inc+0xd8>

		case MODE_2:
			SetLED((0x02<<1) | NowModeLed);
 800a212:	4b1d      	ldr	r3, [pc, #116]	@ (800a288 <MODE_inc+0xe0>)
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	f043 0304 	orr.w	r3, r3, #4
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7f7 fe5b 	bl	8001ed8 <SetLED>
			break;
 800a222:	e02d      	b.n	800a280 <MODE_inc+0xd8>

		case MODE_3:
			SetLED((0x03<<1) | NowModeLed);
 800a224:	4b18      	ldr	r3, [pc, #96]	@ (800a288 <MODE_inc+0xe0>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	f043 0306 	orr.w	r3, r3, #6
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	4618      	mov	r0, r3
 800a230:	f7f7 fe52 	bl	8001ed8 <SetLED>
			break;
 800a234:	e024      	b.n	800a280 <MODE_inc+0xd8>

		case MODE_4:
			SetLED((0x04<<1) | NowModeLed);
 800a236:	4b14      	ldr	r3, [pc, #80]	@ (800a288 <MODE_inc+0xe0>)
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	f043 0308 	orr.w	r3, r3, #8
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	4618      	mov	r0, r3
 800a242:	f7f7 fe49 	bl	8001ed8 <SetLED>
			break;
 800a246:	e01b      	b.n	800a280 <MODE_inc+0xd8>

		case MODE_5:
			SetLED((0x05<<1) | NowModeLed);
 800a248:	4b0f      	ldr	r3, [pc, #60]	@ (800a288 <MODE_inc+0xe0>)
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	f043 030a 	orr.w	r3, r3, #10
 800a250:	b2db      	uxtb	r3, r3
 800a252:	4618      	mov	r0, r3
 800a254:	f7f7 fe40 	bl	8001ed8 <SetLED>
			break;
 800a258:	e012      	b.n	800a280 <MODE_inc+0xd8>

		case MODE_6:
			SetLED((0x06<<1) | NowModeLed);
 800a25a:	4b0b      	ldr	r3, [pc, #44]	@ (800a288 <MODE_inc+0xe0>)
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	f043 030c 	orr.w	r3, r3, #12
 800a262:	b2db      	uxtb	r3, r3
 800a264:	4618      	mov	r0, r3
 800a266:	f7f7 fe37 	bl	8001ed8 <SetLED>
			break;
 800a26a:	e009      	b.n	800a280 <MODE_inc+0xd8>

		case MODE_7:
			SetLED((0x07<<1) | NowModeLed);
 800a26c:	4b06      	ldr	r3, [pc, #24]	@ (800a288 <MODE_inc+0xe0>)
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	f043 030e 	orr.w	r3, r3, #14
 800a274:	b2db      	uxtb	r3, r3
 800a276:	4618      	mov	r0, r3
 800a278:	f7f7 fe2e 	bl	8001ed8 <SetLED>
			break;
 800a27c:	e000      	b.n	800a280 <MODE_inc+0xd8>

		default:
			break;
 800a27e:	bf00      	nop
	}
}
 800a280:	bf00      	nop
 800a282:	bd80      	pop	{r7, pc}
 800a284:	20017b28 	.word	0x20017b28
 800a288:	2000000c 	.word	0x2000000c
 800a28c:	00000000 	.word	0x00000000

0800a290 <CountUP_mode>:

bool CountUP_mode(void){
 800a290:	b580      	push	{r7, lr}
 800a292:	af00      	add	r7, sp, #0
	if(Get_NowDistR()>0.01){
 800a294:	f7fc f850 	bl	8006338 <Get_NowDistR>
 800a298:	ee10 3a10 	vmov	r3, s0
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7f6 f97b 	bl	8000598 <__aeabi_f2d>
 800a2a2:	a307      	add	r3, pc, #28	@ (adr r3, 800a2c0 <CountUP_mode+0x30>)
 800a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a8:	f7f6 fc5e 	bl	8000b68 <__aeabi_dcmpgt>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d003      	beq.n	800a2ba <CountUP_mode+0x2a>
    CTRL_clrNowData();
 800a2b2:	f7fc f937 	bl	8006524 <CTRL_clrNowData>
    return TRUE;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e000      	b.n	800a2bc <CountUP_mode+0x2c>
  }else{
    return FALSE;
 800a2ba:	2300      	movs	r3, #0
  }
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	47ae147b 	.word	0x47ae147b
 800a2c4:	3f847ae1 	.word	0x3f847ae1

0800a2c8 <MODE_speed_parameter>:
	float				trgt_speed,
	float				sla_sp_90,
	float				sla_sp_45,
	float				sla_sp_135,
	float				sla_sp_N90
){
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	ed87 0a04 	vstr	s0, [r7, #16]
 800a2d4:	edc7 0a03 	vstr	s1, [r7, #12]
 800a2d8:	ed87 1a02 	vstr	s2, [r7, #8]
 800a2dc:	edc7 1a01 	vstr	s3, [r7, #4]
 800a2e0:	ed87 2a00 	vstr	s4, [r7]
 800a2e4:	75fb      	strb	r3, [r7, #23]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	75bb      	strb	r3, [r7, #22]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	757b      	strb	r3, [r7, #21]
	PARAM_setSpeedType( PARAM_ST,   speed_para );							// [直進] 速度普�?
 800a2ee:	7dfb      	ldrb	r3, [r7, #23]
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	2015      	movs	r0, #21
 800a2f4:	f7f8 f9fe 	bl	80026f4 <PARAM_setSpeedType>
	PARAM_setSpeedType( PARAM_TRUN, turn_para );							// [旋回] 速度普�?
 800a2f8:	7dbb      	ldrb	r3, [r7, #22]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	2016      	movs	r0, #22
 800a2fe:	f7f8 f9f9 	bl	80026f4 <PARAM_setSpeedType>
	PARAM_setSpeedType( PARAM_SLA,  sla_para );							// [スラ] 速度普�?
 800a302:	7d7b      	ldrb	r3, [r7, #21]
 800a304:	4619      	mov	r1, r3
 800a306:	2017      	movs	r0, #23
 800a308:	f7f8 f9f4 	bl	80026f4 <PARAM_setSpeedType>
	MOT_setTrgtSpeed(trgt_speed);
 800a30c:	ed97 0a04 	vldr	s0, [r7, #16]
 800a310:	f006 ff62 	bl	80111d8 <MOT_setTrgtSpeed>
	MOT_setSlaStaSpeed( sla_sp_90, SLA_90);							// スラロー�?開始速度設�?
 800a314:	2000      	movs	r0, #0
 800a316:	ed97 0a03 	vldr	s0, [r7, #12]
 800a31a:	f006 fefb 	bl	8011114 <MOT_setSlaStaSpeed>
	MOT_setSlaStaSpeed( sla_sp_45, SLA_45);
 800a31e:	2001      	movs	r0, #1
 800a320:	ed97 0a02 	vldr	s0, [r7, #8]
 800a324:	f006 fef6 	bl	8011114 <MOT_setSlaStaSpeed>
	MOT_setSlaStaSpeed( sla_sp_135, SLA_135);
 800a328:	2002      	movs	r0, #2
 800a32a:	ed97 0a01 	vldr	s0, [r7, #4]
 800a32e:	f006 fef1 	bl	8011114 <MOT_setSlaStaSpeed>
	MOT_setSlaStaSpeed( sla_sp_N90, SLA_N90);
 800a332:	2003      	movs	r0, #3
 800a334:	ed97 0a00 	vldr	s0, [r7]
 800a338:	f006 feec 	bl	8011114 <MOT_setSlaStaSpeed>
		
}
 800a33c:	bf00      	nop
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <MODE_exe_m0>:

void MODE_exe_m0( void )
{
 800a344:	b5b0      	push	{r4, r5, r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;
	GYRO_SetRef();
 800a34a:	f7ff fb69 	bl	8009a20 <GYRO_SetRef>

	CTRL_clrData();
 800a34e:	f7fc f879 	bl	8006444 <CTRL_clrData>
	CTRL_clrAngleErrSum();
 800a352:	f7fc f8bf 	bl	80064d4 <CTRL_clrAngleErrSum>
	CTRL_clrSpeedErrSum();
 800a356:	f7fc f8d1 	bl	80064fc <CTRL_clrSpeedErrSum>
	CTRL_clrNowData();
 800a35a:	f7fc f8e3 	bl	8006524 <CTRL_clrNowData>
	/* モード表示 */
	switch( en_Mode ){
 800a35e:	4be7      	ldr	r3, [pc, #924]	@ (800a6fc <MODE_exe_m0+0x3b8>)
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	2b07      	cmp	r3, #7
 800a364:	f200 81c6 	bhi.w	800a6f4 <MODE_exe_m0+0x3b0>
 800a368:	a201      	add	r2, pc, #4	@ (adr r2, 800a370 <MODE_exe_m0+0x2c>)
 800a36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36e:	bf00      	nop
 800a370:	0800a391 	.word	0x0800a391
 800a374:	0800a415 	.word	0x0800a415
 800a378:	0800a457 	.word	0x0800a457
 800a37c:	0800a463 	.word	0x0800a463
 800a380:	0800a489 	.word	0x0800a489
 800a384:	0800a503 	.word	0x0800a503
 800a388:	0800a68d 	.word	0x0800a68d
 800a38c:	0800a6ed 	.word	0x0800a6ed

		case MODE_0:
			SetLED(0x0e);
 800a390:	200e      	movs	r0, #14
 800a392:	f7f7 fda1 	bl	8001ed8 <SetLED>
			CTRL_clrNowData();
 800a396:	f7fc f8c5 	bl	8006524 <CTRL_clrNowData>
			CTRL_clrData();
 800a39a:	f7fc f853 	bl	8006444 <CTRL_clrData>
//			LL_TIM_EnableIT_UPDATE(TIM4);
//			LL_TIM_EnableCounter(TIM4);
			printf("\n");
 800a39e:	200a      	movs	r0, #10
 800a3a0:	f013 fcd6 	bl	801dd50 <putchar>
			LL_mDelay(1000);
 800a3a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a3a8:	f011 fbcc 	bl	801bb44 <LL_mDelay>
			GYRO_SetRef();
 800a3ac:	f7ff fb38 	bl	8009a20 <GYRO_SetRef>
			while(1){
				printf("gyro%5.2f ref%5.2f ",
					GYRO_getNowAngle(),GYRO_getRef()
 800a3b0:	f7ff fbae 	bl	8009b10 <GYRO_getNowAngle>
 800a3b4:	ee10 3a10 	vmov	r3, s0
				printf("gyro%5.2f ref%5.2f ",
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7f6 f8ed 	bl	8000598 <__aeabi_f2d>
 800a3be:	4604      	mov	r4, r0
 800a3c0:	460d      	mov	r5, r1
					GYRO_getNowAngle(),GYRO_getRef()
 800a3c2:	f7ff fbb3 	bl	8009b2c <GYRO_getRef>
 800a3c6:	ee10 3a10 	vmov	r3, s0
				printf("gyro%5.2f ref%5.2f ",
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7f6 f8e4 	bl	8000598 <__aeabi_f2d>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	e9cd 2300 	strd	r2, r3, [sp]
 800a3d8:	4622      	mov	r2, r4
 800a3da:	462b      	mov	r3, r5
 800a3dc:	48c8      	ldr	r0, [pc, #800]	@ (800a700 <MODE_exe_m0+0x3bc>)
 800a3de:	f013 fca5 	bl	801dd2c <iprintf>
				);
				printf("err %5.2f ",GYRO_getSpeedErr());
 800a3e2:	f7ff fb49 	bl	8009a78 <GYRO_getSpeedErr>
 800a3e6:	ee10 3a10 	vmov	r3, s0
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7f6 f8d4 	bl	8000598 <__aeabi_f2d>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	48c3      	ldr	r0, [pc, #780]	@ (800a704 <MODE_exe_m0+0x3c0>)
 800a3f6:	f013 fc99 	bl	801dd2c <iprintf>
				printf("s_val%x\r",Get_s_gyro());
 800a3fa:	f7ff fa47 	bl	800988c <Get_s_gyro>
 800a3fe:	4603      	mov	r3, r0
 800a400:	4619      	mov	r1, r3
 800a402:	48c1      	ldr	r0, [pc, #772]	@ (800a708 <MODE_exe_m0+0x3c4>)
 800a404:	f013 fc92 	bl	801dd2c <iprintf>
				LL_mDelay( 500 );
 800a408:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a40c:	f011 fb9a 	bl	801bb44 <LL_mDelay>
				printf("gyro%5.2f ref%5.2f ",
 800a410:	bf00      	nop
 800a412:	e7cd      	b.n	800a3b0 <MODE_exe_m0+0x6c>
			}
			break;

		case MODE_1:
			SetLED(0x0e);
 800a414:	200e      	movs	r0, #14
 800a416:	f7f7 fd5f 	bl	8001ed8 <SetLED>
			printf("\n");
 800a41a:	200a      	movs	r0, #10
 800a41c:	f013 fc98 	bl	801dd50 <putchar>
			LL_mDelay(1000);
 800a420:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a424:	f011 fb8e 	bl	801bb44 <LL_mDelay>
			SetLED(0x00);
 800a428:	2000      	movs	r0, #0
 800a42a:	f7f7 fd55 	bl	8001ed8 <SetLED>
			while(1){
				printf("  ENC_R%5d ENC_L%5d \r", 
					Get_encoder_value(EN_R),Get_encoder_value(EN_L)
 800a42e:	2001      	movs	r0, #1
 800a430:	f7ff f9ee 	bl	8009810 <Get_encoder_value>
 800a434:	4603      	mov	r3, r0
				printf("  ENC_R%5d ENC_L%5d \r", 
 800a436:	461c      	mov	r4, r3
					Get_encoder_value(EN_R),Get_encoder_value(EN_L)
 800a438:	2000      	movs	r0, #0
 800a43a:	f7ff f9e9 	bl	8009810 <Get_encoder_value>
 800a43e:	4603      	mov	r3, r0
				printf("  ENC_R%5d ENC_L%5d \r", 
 800a440:	461a      	mov	r2, r3
 800a442:	4621      	mov	r1, r4
 800a444:	48b1      	ldr	r0, [pc, #708]	@ (800a70c <MODE_exe_m0+0x3c8>)
 800a446:	f013 fc71 	bl	801dd2c <iprintf>
				);
				LL_mDelay( 500 );
 800a44a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a44e:	f011 fb79 	bl	801bb44 <LL_mDelay>
				printf("  ENC_R%5d ENC_L%5d \r", 
 800a452:	bf00      	nop
 800a454:	e7eb      	b.n	800a42e <MODE_exe_m0+0xea>
			}
			break;

		case MODE_2:
			SetLED(0x0e);
 800a456:	200e      	movs	r0, #14
 800a458:	f7f7 fd3e 	bl	8001ed8 <SetLED>
			log_read2();
 800a45c:	f7ff fd56 	bl	8009f0c <log_read2>
			break;
 800a460:	e149      	b.n	800a6f6 <MODE_exe_m0+0x3b2>

		case MODE_3:
			SetLED(0x0e);
 800a462:	200e      	movs	r0, #14
 800a464:	f7f7 fd38 	bl	8001ed8 <SetLED>
			log_flag_on();
 800a468:	f7ff fd38 	bl	8009edc <log_flag_on>
			LL_mDelay(2000);
			DCM_setPwmDuty( DCM_R, 0 );
			DCM_setPwmDuty( DCM_L, 0 );
*/
			
			Set_DutyTIM8(600);
 800a46c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800a470:	f7fb fd06 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(10000);
 800a474:	f242 7010 	movw	r0, #10000	@ 0x2710
 800a478:	f011 fb64 	bl	801bb44 <LL_mDelay>
			log_flag_off();
 800a47c:	f7ff fd3a 	bl	8009ef4 <log_flag_off>
			SetLED(0x0e);
 800a480:	200e      	movs	r0, #14
 800a482:	f7f7 fd29 	bl	8001ed8 <SetLED>
			break;
 800a486:	e136      	b.n	800a6f6 <MODE_exe_m0+0x3b2>

		case MODE_4:
			SetLED(0x0e);
 800a488:	200e      	movs	r0, #14
 800a48a:	f7f7 fd25 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_SLOW,PARAM_VERY_SLOW,PARAM_VERY_SLOW,SEARCH_SPEED,
 800a48e:	ed9f 2aa0 	vldr	s4, [pc, #640]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a492:	eddf 1a9f 	vldr	s3, [pc, #636]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a496:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a49a:	eddf 0a9d 	vldr	s1, [pc, #628]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a49e:	ed9f 0a9c 	vldr	s0, [pc, #624]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	f7ff ff0e 	bl	800a2c8 <MODE_speed_parameter>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );							// [スラ] 速度普�?
*/
//			printf("mode %d\n\r",MOT_getStType( 2.0, 0.0, MOT_GO_ST_NORMAL));
//			MOT_getStType( 2.0, 0.0, MOT_GO_ST_NORMAL );

			SetLED(0x00);
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	f7f7 fd13 	bl	8001ed8 <SetLED>
			LL_mDelay(500);
 800a4b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a4b6:	f011 fb45 	bl	801bb44 <LL_mDelay>
			CTRL_clrData();
 800a4ba:	f7fb ffc3 	bl	8006444 <CTRL_clrData>
			CTRL_clrAngleErrSum();
 800a4be:	f7fc f809 	bl	80064d4 <CTRL_clrAngleErrSum>
			CTRL_clrSpeedErrSum();
 800a4c2:	f7fc f81b 	bl	80064fc <CTRL_clrSpeedErrSum>
			CTRL_clrNowData();
 800a4c6:	f7fc f82d 	bl	8006524 <CTRL_clrNowData>
			log_flag_on();
 800a4ca:	f7ff fd07 	bl	8009edc <log_flag_on>
			LL_mDelay(10);
 800a4ce:	200a      	movs	r0, #10
 800a4d0:	f011 fb38 	bl	801bb44 <LL_mDelay>

			MOT_goBlock_FinSpeed(0.5, SEARCH_SPEED);
 800a4d4:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a4d8:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800a4dc:	f005 f94e 	bl	800f77c <MOT_goBlock_FinSpeed>
//			MOT_goBlock_Const(1);
			MOT_goSla(MOT_R90S, PARAM_getSra( SLA_90 ));
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	f7f9 fc85 	bl	8003df0 <PARAM_getSra>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	f006 fefc 	bl	80112e8 <MOT_goSla>
			MOT_goBlock_FinSpeed(0.5, 0);
 800a4f0:	eddf 0a88 	vldr	s1, [pc, #544]	@ 800a714 <MODE_exe_m0+0x3d0>
 800a4f4:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800a4f8:	f005 f940 	bl	800f77c <MOT_goBlock_FinSpeed>
/*
//			MOT_setTrgtSpeed(SEARCH_SPEED/4.0);		// 目標速度
			MOT_goBlock_FinSpeed(6.0,0);
			MOT_setTrgtSpeed(SEARCH_SPEED);		// 目標速度
*/
			log_flag_off();
 800a4fc:	f7ff fcfa 	bl	8009ef4 <log_flag_off>
			break;
 800a500:	e0f9      	b.n	800a6f6 <MODE_exe_m0+0x3b2>

		case MODE_5:
			SetLED(0x0e);
 800a502:	200e      	movs	r0, #14
 800a504:	f7f7 fce8 	bl	8001ed8 <SetLED>

			printf("\r\n turn 45 \r\r");
 800a508:	4883      	ldr	r0, [pc, #524]	@ (800a718 <MODE_exe_m0+0x3d4>)
 800a50a:	f013 fc0f 	bl	801dd2c <iprintf>
			PARAM_makeSra( 0.5, 550.0f, 7.50f,3000*PI,  SLA_45 );
 800a50e:	2001      	movs	r0, #1
 800a510:	eddf 1a82 	vldr	s3, [pc, #520]	@ 800a71c <MODE_exe_m0+0x3d8>
 800a514:	eeb1 1a0e 	vmov.f32	s2, #30	@ 0x40f00000  7.5
 800a518:	eddf 0a81 	vldr	s1, [pc, #516]	@ 800a720 <MODE_exe_m0+0x3dc>
 800a51c:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800a520:	f7f8 f98a 	bl	8002838 <PARAM_makeSra>
			printf("\r\n turn 90 \r\r");		
 800a524:	487f      	ldr	r0, [pc, #508]	@ (800a724 <MODE_exe_m0+0x3e0>)
 800a526:	f013 fc01 	bl	801dd2c <iprintf>
			PARAM_makeSra( 0.5, 700.0f, 10.00f,3000*PI,  SLA_90 );	
 800a52a:	2000      	movs	r0, #0
 800a52c:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 800a71c <MODE_exe_m0+0x3d8>
 800a530:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800a534:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 800a728 <MODE_exe_m0+0x3e4>
 800a538:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800a53c:	f7f8 f97c 	bl	8002838 <PARAM_makeSra>
		//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
			printf("\r\n turn 135 \r\r");	
 800a540:	487a      	ldr	r0, [pc, #488]	@ (800a72c <MODE_exe_m0+0x3e8>)
 800a542:	f013 fbf3 	bl	801dd2c <iprintf>
			PARAM_makeSra( 0.5, 750.0f, 10.00f,3000*PI,  SLA_135 );	
 800a546:	2002      	movs	r0, #2
 800a548:	eddf 1a74 	vldr	s3, [pc, #464]	@ 800a71c <MODE_exe_m0+0x3d8>
 800a54c:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800a550:	eddf 0a77 	vldr	s1, [pc, #476]	@ 800a730 <MODE_exe_m0+0x3ec>
 800a554:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800a558:	f7f8 f96e 	bl	8002838 <PARAM_makeSra>
			printf("\r\n turn N90 \r\r");	
 800a55c:	4875      	ldr	r0, [pc, #468]	@ (800a734 <MODE_exe_m0+0x3f0>)
 800a55e:	f013 fbe5 	bl	801dd2c <iprintf>
			PARAM_makeSra( 0.5, 800.0f, 11.00f,3000*PI,  SLA_N90 );	
 800a562:	2003      	movs	r0, #3
 800a564:	eddf 1a6d 	vldr	s3, [pc, #436]	@ 800a71c <MODE_exe_m0+0x3d8>
 800a568:	eeb2 1a06 	vmov.f32	s2, #38	@ 0x41300000  11.0
 800a56c:	eddf 0a72 	vldr	s1, [pc, #456]	@ 800a738 <MODE_exe_m0+0x3f4>
 800a570:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800a574:	f7f8 f960 	bl	8002838 <PARAM_makeSra>
			MODE_speed_parameter(PARAM_VERY_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*4.0,
 800a578:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800a57c:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800a580:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800a584:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800a588:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 800a73c <MODE_exe_m0+0x3f8>
 800a58c:	2202      	movs	r2, #2
 800a58e:	2100      	movs	r1, #0
 800a590:	2004      	movs	r0, #4
 800a592:	f7ff fe99 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5, SLA_N90);
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							// [直進] 速度普�?
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							// [旋回] 速度普�?
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							// [スラ] 速度普�?
*/
			SetLED(0x00);
 800a596:	2000      	movs	r0, #0
 800a598:	f7f7 fc9e 	bl	8001ed8 <SetLED>
			LL_mDelay(500);
 800a59c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a5a0:	f011 fad0 	bl	801bb44 <LL_mDelay>
			CTRL_clrData();
 800a5a4:	f7fb ff4e 	bl	8006444 <CTRL_clrData>
			CTRL_clrAngleErrSum();
 800a5a8:	f7fb ff94 	bl	80064d4 <CTRL_clrAngleErrSum>
			CTRL_clrSpeedErrSum();
 800a5ac:	f7fb ffa6 	bl	80064fc <CTRL_clrSpeedErrSum>
			CTRL_clrNowData();
 800a5b0:	f7fb ffb8 	bl	8006524 <CTRL_clrNowData>
			Set_DutyTIM8(600);
 800a5b4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800a5b8:	f7fb fc62 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);
 800a5bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800a5c0:	f011 fac0 	bl	801bb44 <LL_mDelay>
			log_flag_on();
 800a5c4:	f7ff fc8a 	bl	8009edc <log_flag_on>
			MOT_goSkewBlock_FinSpeed(0.5, 0.5);
			MOT_goSla(MOT_R90S_N, PARAM_getSra( SLA_N90 ));
			MOT_goSkewBlock_FinSpeed(0.5, 0);
*/

			MOT_goBlock_FinSpeed(0.5, 0.5);
 800a5c8:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800a5cc:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800a5d0:	f005 f8d4 	bl	800f77c <MOT_goBlock_FinSpeed>
			MOT_goSla(MOT_R135S_S2N, PARAM_getSra( SLA_135 ));
 800a5d4:	2002      	movs	r0, #2
 800a5d6:	f7f9 fc0b 	bl	8003df0 <PARAM_getSra>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	4619      	mov	r1, r3
 800a5de:	2008      	movs	r0, #8
 800a5e0:	f006 fe82 	bl	80112e8 <MOT_goSla>
			MOT_goSkewBlock_FinSpeed(0.5, 0);
 800a5e4:	eddf 0a4b 	vldr	s1, [pc, #300]	@ 800a714 <MODE_exe_m0+0x3d0>
 800a5e8:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800a5ec:	f005 f8d8 	bl	800f7a0 <MOT_goSkewBlock_FinSpeed>

			log_flag_off();
 800a5f0:	f7ff fc80 	bl	8009ef4 <log_flag_off>

			Set_DutyTIM8(0);
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	f7fb fc43 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);
 800a5fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800a5fe:	f011 faa1 	bl	801bb44 <LL_mDelay>

			PARAM_makeSra( (float)SEARCH_SPEED, 100.0f, 2.50f,3000*PI,  SLA_45 );
 800a602:	2001      	movs	r0, #1
 800a604:	eddf 1a45 	vldr	s3, [pc, #276]	@ 800a71c <MODE_exe_m0+0x3d8>
 800a608:	eeb0 1a04 	vmov.f32	s2, #4	@ 0x40200000  2.5
 800a60c:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 800a740 <MODE_exe_m0+0x3fc>
 800a610:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a614:	f7f8 f910 	bl	8002838 <PARAM_makeSra>
			printf("\r\n turn 90 \r\r");		
 800a618:	4842      	ldr	r0, [pc, #264]	@ (800a724 <MODE_exe_m0+0x3e0>)
 800a61a:	f013 fb87 	bl	801dd2c <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 3.50f,3000*PI,  SLA_90 );	
 800a61e:	2000      	movs	r0, #0
 800a620:	eddf 1a3e 	vldr	s3, [pc, #248]	@ 800a71c <MODE_exe_m0+0x3d8>
 800a624:	eeb0 1a0c 	vmov.f32	s2, #12	@ 0x40600000  3.5
 800a628:	eddf 0a46 	vldr	s1, [pc, #280]	@ 800a744 <MODE_exe_m0+0x400>
 800a62c:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a630:	f7f8 f902 	bl	8002838 <PARAM_makeSra>
		//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
			printf("\r\n turn 135 \r\r");	
 800a634:	483d      	ldr	r0, [pc, #244]	@ (800a72c <MODE_exe_m0+0x3e8>)
 800a636:	f013 fb79 	bl	801dd2c <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 4.00f,3000*PI,  SLA_135 );	
 800a63a:	2002      	movs	r0, #2
 800a63c:	eddf 1a37 	vldr	s3, [pc, #220]	@ 800a71c <MODE_exe_m0+0x3d8>
 800a640:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 800a644:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 800a744 <MODE_exe_m0+0x400>
 800a648:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a64c:	f7f8 f8f4 	bl	8002838 <PARAM_makeSra>
			printf("\r\n turn N90 \r\r");	
 800a650:	4838      	ldr	r0, [pc, #224]	@ (800a734 <MODE_exe_m0+0x3f0>)
 800a652:	f013 fb6b 	bl	801dd2c <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 300.0f, 4.00f,3000*PI,  SLA_N90 );		
 800a656:	2003      	movs	r0, #3
 800a658:	eddf 1a30 	vldr	s3, [pc, #192]	@ 800a71c <MODE_exe_m0+0x3d8>
 800a65c:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 800a660:	eddf 0a39 	vldr	s1, [pc, #228]	@ 800a748 <MODE_exe_m0+0x404>
 800a664:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a668:	f7f8 f8e6 	bl	8002838 <PARAM_makeSra>
			MODE_speed_parameter(PARAM_VERY_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED,
 800a66c:	ed9f 2a28 	vldr	s4, [pc, #160]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a670:	eddf 1a27 	vldr	s3, [pc, #156]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a674:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a678:	eddf 0a25 	vldr	s1, [pc, #148]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a67c:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a680:	2202      	movs	r2, #2
 800a682:	2100      	movs	r1, #0
 800a684:	2004      	movs	r0, #4
 800a686:	f7ff fe1f 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_45);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);
*/
			break;
 800a68a:	e034      	b.n	800a6f6 <MODE_exe_m0+0x3b2>

		case MODE_6:
			SetLED(0x0e);
 800a68c:	200e      	movs	r0, #14
 800a68e:	f7f7 fc23 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_SLOW,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED,
 800a692:	ed9f 2a1f 	vldr	s4, [pc, #124]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a696:	eddf 1a1e 	vldr	s3, [pc, #120]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a69a:	ed9f 1a1d 	vldr	s2, [pc, #116]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a69e:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a6a2:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	2001      	movs	r0, #1
 800a6ac:	f7ff fe0c 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							// [直進] 速度普�?
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							// [旋回] 速度普�?
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							// [スラ] 速度普�?
*/
			SetLED(0x00);
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	f7f7 fc11 	bl	8001ed8 <SetLED>
			LL_mDelay(500);
 800a6b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a6ba:	f011 fa43 	bl	801bb44 <LL_mDelay>
			CTRL_clrData();
 800a6be:	f7fb fec1 	bl	8006444 <CTRL_clrData>
			CTRL_clrAngleErrSum();
 800a6c2:	f7fb ff07 	bl	80064d4 <CTRL_clrAngleErrSum>
			CTRL_clrSpeedErrSum();
 800a6c6:	f7fb ff19 	bl	80064fc <CTRL_clrSpeedErrSum>
			CTRL_clrNowData();
 800a6ca:	f7fb ff2b 	bl	8006524 <CTRL_clrNowData>
			log_flag_on();
 800a6ce:	f7ff fc05 	bl	8009edc <log_flag_on>

			MOT_setTrgtSpeed( SEARCH_SPEED );
 800a6d2:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800a710 <MODE_exe_m0+0x3cc>
 800a6d6:	f006 fd7f 	bl	80111d8 <MOT_setTrgtSpeed>
			MOT_goBlock_FinSpeed(15.0, 0);
 800a6da:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 800a714 <MODE_exe_m0+0x3d0>
 800a6de:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800a6e2:	f005 f84b 	bl	800f77c <MOT_goBlock_FinSpeed>
/*
			MOT_goBlock_FinSpeed(0.5, SEARCH_SPEED);
			MOT_goSla(MOT_R135S_S2N, PARAM_getSra( SLA_135 ));
			MOT_goSkewBlock_FinSpeed(0.5, 0);
*/
			log_flag_off();
 800a6e6:	f7ff fc05 	bl	8009ef4 <log_flag_off>
			break;
 800a6ea:	e004      	b.n	800a6f6 <MODE_exe_m0+0x3b2>

		case MODE_7:
			SetLED(0x0e);
 800a6ec:	200e      	movs	r0, #14
 800a6ee:	f7f7 fbf3 	bl	8001ed8 <SetLED>
			//cant use
			break;
 800a6f2:	e000      	b.n	800a6f6 <MODE_exe_m0+0x3b2>

		default:
			break;
 800a6f4:	bf00      	nop
	}
}
 800a6f6:	bf00      	nop
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bdb0      	pop	{r4, r5, r7, pc}
 800a6fc:	20017b28 	.word	0x20017b28
 800a700:	08021cec 	.word	0x08021cec
 800a704:	08021d00 	.word	0x08021d00
 800a708:	08021d0c 	.word	0x08021d0c
 800a70c:	08021d18 	.word	0x08021d18
 800a710:	3e99999a 	.word	0x3e99999a
 800a714:	00000000 	.word	0x00000000
 800a718:	08021cac 	.word	0x08021cac
 800a71c:	46134315 	.word	0x46134315
 800a720:	44098000 	.word	0x44098000
 800a724:	08021cbc 	.word	0x08021cbc
 800a728:	442f0000 	.word	0x442f0000
 800a72c:	08021ccc 	.word	0x08021ccc
 800a730:	443b8000 	.word	0x443b8000
 800a734:	08021cdc 	.word	0x08021cdc
 800a738:	44480000 	.word	0x44480000
 800a73c:	3f99999a 	.word	0x3f99999a
 800a740:	42c80000 	.word	0x42c80000
 800a744:	43480000 	.word	0x43480000
 800a748:	43960000 	.word	0x43960000

0800a74c <MODE_exe_m1>:

void MODE_exe_m1( void )
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b086      	sub	sp, #24
 800a750:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 800a752:	f04f 0200 	mov.w	r2, #0
 800a756:	f04f 0300 	mov.w	r3, #0
 800a75a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	GYRO_SetRef();
 800a75e:	f7ff f95f 	bl	8009a20 <GYRO_SetRef>
	CTRL_clrData();
 800a762:	f7fb fe6f 	bl	8006444 <CTRL_clrData>
	CTRL_clrAngleErrSum();
 800a766:	f7fb feb5 	bl	80064d4 <CTRL_clrAngleErrSum>
	CTRL_clrSpeedErrSum();
 800a76a:	f7fb fec7 	bl	80064fc <CTRL_clrSpeedErrSum>
	CTRL_clrNowData();
 800a76e:	f7fb fed9 	bl	8006524 <CTRL_clrNowData>

	switch( en_Mode ){
 800a772:	4b30      	ldr	r3, [pc, #192]	@ (800a834 <MODE_exe_m1+0xe8>)
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	2b07      	cmp	r3, #7
 800a778:	d857      	bhi.n	800a82a <MODE_exe_m1+0xde>
 800a77a:	a201      	add	r2, pc, #4	@ (adr r2, 800a780 <MODE_exe_m1+0x34>)
 800a77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a780:	0800a7a1 	.word	0x0800a7a1
 800a784:	0800a7a9 	.word	0x0800a7a9
 800a788:	0800a7b5 	.word	0x0800a7b5
 800a78c:	0800a7c1 	.word	0x0800a7c1
 800a790:	0800a7cd 	.word	0x0800a7cd
 800a794:	0800a7d9 	.word	0x0800a7d9
 800a798:	0800a81b 	.word	0x0800a81b
 800a79c:	0800a823 	.word	0x0800a823

		case MODE_0:
			SetLED(0x0e);
 800a7a0:	200e      	movs	r0, #14
 800a7a2:	f7f7 fb99 	bl	8001ed8 <SetLED>
			break;
 800a7a6:	e041      	b.n	800a82c <MODE_exe_m1+0xe0>

		case MODE_1:
			SetLED(0x0e);
 800a7a8:	200e      	movs	r0, #14
 800a7aa:	f7f7 fb95 	bl	8001ed8 <SetLED>
			Map_Erase();
 800a7ae:	f00c f9b7 	bl	8016b20 <Map_Erase>
			break;
 800a7b2:	e03b      	b.n	800a82c <MODE_exe_m1+0xe0>

		case MODE_2:
			SetLED(0x0e);
 800a7b4:	200e      	movs	r0, #14
 800a7b6:	f7f7 fb8f 	bl	8001ed8 <SetLED>
			MAP_showLog();
 800a7ba:	f00c fa23 	bl	8016c04 <MAP_showLog>
			break;
 800a7be:	e035      	b.n	800a82c <MODE_exe_m1+0xe0>

		case MODE_3:
			SetLED(0x0e);
 800a7c0:	200e      	movs	r0, #14
 800a7c2:	f7f7 fb89 	bl	8001ed8 <SetLED>
			Map_Copy();
 800a7c6:	f00c f985 	bl	8016ad4 <Map_Copy>
			break;
 800a7ca:	e02f      	b.n	800a82c <MODE_exe_m1+0xe0>

		case MODE_4:
			SetLED(0x0e);
 800a7cc:	200e      	movs	r0, #14
 800a7ce:	f7f7 fb83 	bl	8001ed8 <SetLED>
			Map_Write();
 800a7d2:	f00c f96b 	bl	8016aac <Map_Write>
			break;
 800a7d6:	e029      	b.n	800a82c <MODE_exe_m1+0xe0>

		case MODE_5:
			SetLED(0x0e);
 800a7d8:	200e      	movs	r0, #14
 800a7da:	f7f7 fb7d 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800a7de:	2200      	movs	r2, #0
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	f00c f9ec 	bl	8016bc0 <MAP_setPos>
			MAP_Goalsize(1);
 800a7e8:	2001      	movs	r0, #1
 800a7ea:	f00d feb9 	bl	8018560 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	2109      	movs	r1, #9
 800a7f2:	2014      	movs	r0, #20
 800a7f4:	f00c ffa8 	bl	8017748 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800a7f8:	1dfb      	adds	r3, r7, #7
 800a7fa:	9301      	str	r3, [sp, #4]
 800a7fc:	2309      	movs	r3, #9
 800a7fe:	9300      	str	r3, [sp, #0]
 800a800:	2314      	movs	r3, #20
 800a802:	2200      	movs	r2, #0
 800a804:	2100      	movs	r1, #0
 800a806:	2000      	movs	r0, #0
 800a808:	f009 fd46 	bl	8014298 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800a80c:	f009 ff9c 	bl	8014748 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800a810:	f00a f916 	bl	8014a40 <MAP_makeSkewCmdList>
			MAP_showCmdLog();
 800a814:	f009 fcf0 	bl	80141f8 <MAP_showCmdLog>
			break;
 800a818:	e008      	b.n	800a82c <MODE_exe_m1+0xe0>

		case MODE_6:
			SetLED(0x0e);
 800a81a:	200e      	movs	r0, #14
 800a81c:	f7f7 fb5c 	bl	8001ed8 <SetLED>
			break;
 800a820:	e004      	b.n	800a82c <MODE_exe_m1+0xe0>

		case MODE_7:
			SetLED(0x0e);
 800a822:	200e      	movs	r0, #14
 800a824:	f7f7 fb58 	bl	8001ed8 <SetLED>
			//cant use
			break;
 800a828:	e000      	b.n	800a82c <MODE_exe_m1+0xe0>

		default:
			break;
 800a82a:	bf00      	nop
	}
}
 800a82c:	bf00      	nop
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	20017b28 	.word	0x20017b28

0800a838 <MODE_exe_m2>:

void MODE_exe_m2( void )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 800a83e:	f04f 0200 	mov.w	r2, #0
 800a842:	f04f 0300 	mov.w	r3, #0
 800a846:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Min_in = 0;
 800a84a:	4bbc      	ldr	r3, [pc, #752]	@ (800ab3c <MODE_exe_m2+0x304>)
 800a84c:	2200      	movs	r2, #0
 800a84e:	701a      	strb	r2, [r3, #0]
	Sec_in = 0;
 800a850:	4bbb      	ldr	r3, [pc, #748]	@ (800ab40 <MODE_exe_m2+0x308>)
 800a852:	2200      	movs	r2, #0
 800a854:	701a      	strb	r2, [r3, #0]
	Msec_in = 0;
 800a856:	4bbb      	ldr	r3, [pc, #748]	@ (800ab44 <MODE_exe_m2+0x30c>)
 800a858:	2200      	movs	r2, #0
 800a85a:	801a      	strh	r2, [r3, #0]

	GYRO_SetRef();
 800a85c:	f7ff f8e0 	bl	8009a20 <GYRO_SetRef>
	CTRL_clrData();
 800a860:	f7fb fdf0 	bl	8006444 <CTRL_clrData>
	CTRL_clrAngleErrSum();
 800a864:	f7fb fe36 	bl	80064d4 <CTRL_clrAngleErrSum>
	CTRL_clrSpeedErrSum();
 800a868:	f7fb fe48 	bl	80064fc <CTRL_clrSpeedErrSum>
	CTRL_clrNowData();
 800a86c:	f7fb fe5a 	bl	8006524 <CTRL_clrNowData>

	switch( en_Mode ){
 800a870:	4bb5      	ldr	r3, [pc, #724]	@ (800ab48 <MODE_exe_m2+0x310>)
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	2b07      	cmp	r3, #7
 800a876:	f200 82b7 	bhi.w	800ade8 <MODE_exe_m2+0x5b0>
 800a87a:	a201      	add	r2, pc, #4	@ (adr r2, 800a880 <MODE_exe_m2+0x48>)
 800a87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a880:	0800a8a1 	.word	0x0800a8a1
 800a884:	0800a977 	.word	0x0800a977
 800a888:	0800aa55 	.word	0x0800aa55
 800a88c:	0800ab2b 	.word	0x0800ab2b
 800a890:	0800ab33 	.word	0x0800ab33
 800a894:	0800ab51 	.word	0x0800ab51
 800a898:	0800ac27 	.word	0x0800ac27
 800a89c:	0800ade1 	.word	0x0800ade1

		case MODE_0://only adachi
			SetLED(0x0e);
 800a8a0:	200e      	movs	r0, #14
 800a8a2:	f7f7 fb19 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_SLOW,PARAM_VERY_SLOW,PARAM_VERY_SLOW,SEARCH_SPEED,
 800a8a6:	ed9f 2aa9 	vldr	s4, [pc, #676]	@ 800ab4c <MODE_exe_m2+0x314>
 800a8aa:	eddf 1aa8 	vldr	s3, [pc, #672]	@ 800ab4c <MODE_exe_m2+0x314>
 800a8ae:	ed9f 1aa7 	vldr	s2, [pc, #668]	@ 800ab4c <MODE_exe_m2+0x314>
 800a8b2:	eddf 0aa6 	vldr	s1, [pc, #664]	@ 800ab4c <MODE_exe_m2+0x314>
 800a8b6:	ed9f 0aa5 	vldr	s0, [pc, #660]	@ 800ab4c <MODE_exe_m2+0x314>
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	2100      	movs	r1, #0
 800a8be:	2000      	movs	r0, #0
 800a8c0:	f7ff fd02 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);						
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );							
*/
			SetLED(0x00);
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	f7f7 fb07 	bl	8001ed8 <SetLED>
			LL_mDelay(100);
 800a8ca:	2064      	movs	r0, #100	@ 0x64
 800a8cc:	f011 f93a 	bl	801bb44 <LL_mDelay>
			MAP_Goalsize(1);
 800a8d0:	2001      	movs	r0, #1
 800a8d2:	f00d fe45 	bl	8018560 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );						
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	2100      	movs	r1, #0
 800a8da:	2000      	movs	r0, #0
 800a8dc:	f00c f970 	bl	8016bc0 <MAP_setPos>

			MAP_searchGoal(GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, SEARCH, SEARCH_SLA );			
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2109      	movs	r1, #9
 800a8e6:	2014      	movs	r0, #20
 800a8e8:	f00e fe88 	bl	80195fc <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800a8ec:	f7f7 fb76 	bl	8001fdc <SW_IsOn_1>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d006      	beq.n	800a904 <MODE_exe_m2+0xcc>
 800a8f6:	f7fe fef3 	bl	80096e0 <SYS_isOutOfCtrl>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d101      	bne.n	800a904 <MODE_exe_m2+0xcc>
			else{
				Map_Write();
 800a900:	f00c f8d4 	bl	8016aac <Map_Write>
			}
			
			SetLED(0x0e);
 800a904:	200e      	movs	r0, #14
 800a906:	f7f7 fae7 	bl	8001ed8 <SetLED>
			MAP_Goalsize(1);
 800a90a:	2001      	movs	r0, #1
 800a90c:	f00d fe28 	bl	8018560 <MAP_Goalsize>
			SetLED(0x00);
 800a910:	2000      	movs	r0, #0
 800a912:	f7f7 fae1 	bl	8001ed8 <SetLED>

			MAP_searchGoal( 0, 0, SEARCH, SEARCH_SLA );
 800a916:	2301      	movs	r3, #1
 800a918:	2200      	movs	r2, #0
 800a91a:	2100      	movs	r1, #0
 800a91c:	2000      	movs	r0, #0
 800a91e:	f00e fe6d 	bl	80195fc <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800a922:	f7f7 fb5b 	bl	8001fdc <SW_IsOn_1>
 800a926:	4603      	mov	r3, r0
 800a928:	2b01      	cmp	r3, #1
 800a92a:	f000 825f 	beq.w	800adec <MODE_exe_m2+0x5b4>
 800a92e:	f7fe fed7 	bl	80096e0 <SYS_isOutOfCtrl>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	f040 8259 	bne.w	800adec <MODE_exe_m2+0x5b4>
			else{
				Map_Write();
 800a93a:	f00c f8b7 	bl	8016aac <Map_Write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800a93e:	2200      	movs	r2, #0
 800a940:	2100      	movs	r1, #0
 800a942:	2000      	movs	r0, #0
 800a944:	f00c f93c 	bl	8016bc0 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800a948:	2201      	movs	r2, #1
 800a94a:	2109      	movs	r1, #9
 800a94c:	2014      	movs	r0, #20
 800a94e:	f00c fefb 	bl	8017748 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800a952:	1dfb      	adds	r3, r7, #7
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	2309      	movs	r3, #9
 800a958:	9300      	str	r3, [sp, #0]
 800a95a:	2314      	movs	r3, #20
 800a95c:	2200      	movs	r2, #0
 800a95e:	2100      	movs	r1, #0
 800a960:	2000      	movs	r0, #0
 800a962:	f009 fc99 	bl	8014298 <MAP_makeCmdList>
				MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800a966:	f009 feef 	bl	8014748 <MAP_makeSlaCmdList>
				MAP_makeSkewCmdList();
 800a96a:	f00a f869 	bl	8014a40 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800a96e:	2000      	movs	r0, #0
 800a970:	f7f7 fab2 	bl	8001ed8 <SetLED>
			}
			break;
 800a974:	e23a      	b.n	800adec <MODE_exe_m2+0x5b4>

		case MODE_1://adachi and known 
			SetLED(0x0e);
 800a976:	200e      	movs	r0, #14
 800a978:	f7f7 faae 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_SLOW,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED,
 800a97c:	ed9f 2a73 	vldr	s4, [pc, #460]	@ 800ab4c <MODE_exe_m2+0x314>
 800a980:	eddf 1a72 	vldr	s3, [pc, #456]	@ 800ab4c <MODE_exe_m2+0x314>
 800a984:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 800ab4c <MODE_exe_m2+0x314>
 800a988:	eddf 0a70 	vldr	s1, [pc, #448]	@ 800ab4c <MODE_exe_m2+0x314>
 800a98c:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 800ab4c <MODE_exe_m2+0x314>
 800a990:	2201      	movs	r2, #1
 800a992:	2100      	movs	r1, #0
 800a994:	2001      	movs	r0, #1
 800a996:	f7ff fc97 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);						
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );	
*/					
			SetLED(0x00);
 800a99a:	2000      	movs	r0, #0
 800a99c:	f7f7 fa9c 	bl	8001ed8 <SetLED>
			LL_mDelay(100);
 800a9a0:	2064      	movs	r0, #100	@ 0x64
 800a9a2:	f011 f8cf 	bl	801bb44 <LL_mDelay>
			MAP_Goalsize(1);
 800a9a6:	2001      	movs	r0, #1
 800a9a8:	f00d fdda 	bl	8018560 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	f00c f905 	bl	8016bc0 <MAP_setPos>

			MAP_searchGoalKnown(GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, SEARCH, SEARCH_SLA );			
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	2109      	movs	r1, #9
 800a9bc:	2014      	movs	r0, #20
 800a9be:	f00e ff75 	bl	80198ac <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800a9c2:	f7f7 fb0b 	bl	8001fdc <SW_IsOn_1>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d006      	beq.n	800a9da <MODE_exe_m2+0x1a2>
 800a9cc:	f7fe fe88 	bl	80096e0 <SYS_isOutOfCtrl>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d101      	bne.n	800a9da <MODE_exe_m2+0x1a2>
			else{
				Map_Write();
 800a9d6:	f00c f869 	bl	8016aac <Map_Write>
			}
			
			SetLED(0x0e);
 800a9da:	200e      	movs	r0, #14
 800a9dc:	f7f7 fa7c 	bl	8001ed8 <SetLED>
			MAP_Goalsize(1);
 800a9e0:	2001      	movs	r0, #1
 800a9e2:	f00d fdbd 	bl	8018560 <MAP_Goalsize>
			SetLED(0x00);
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	f7f7 fa76 	bl	8001ed8 <SetLED>
			log_flag_on();
 800a9ec:	f7ff fa76 	bl	8009edc <log_flag_on>
			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SLA );
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	f00e ff58 	bl	80198ac <MAP_searchGoalKnown>
//			MAP_searchGoal( 0, 0, SEARCH, SEARCH_RETURN );
			log_flag_off();
 800a9fc:	f7ff fa7a 	bl	8009ef4 <log_flag_off>
			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800aa00:	f7f7 faec 	bl	8001fdc <SW_IsOn_1>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	f000 81f2 	beq.w	800adf0 <MODE_exe_m2+0x5b8>
 800aa0c:	f7fe fe68 	bl	80096e0 <SYS_isOutOfCtrl>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f040 81ec 	bne.w	800adf0 <MODE_exe_m2+0x5b8>
			else{
				Map_Write();
 800aa18:	f00c f848 	bl	8016aac <Map_Write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	2100      	movs	r1, #0
 800aa20:	2000      	movs	r0, #0
 800aa22:	f00c f8cd 	bl	8016bc0 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800aa26:	2201      	movs	r2, #1
 800aa28:	2109      	movs	r1, #9
 800aa2a:	2014      	movs	r0, #20
 800aa2c:	f00c fe8c 	bl	8017748 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800aa30:	1dfb      	adds	r3, r7, #7
 800aa32:	9301      	str	r3, [sp, #4]
 800aa34:	2309      	movs	r3, #9
 800aa36:	9300      	str	r3, [sp, #0]
 800aa38:	2314      	movs	r3, #20
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	2000      	movs	r0, #0
 800aa40:	f009 fc2a 	bl	8014298 <MAP_makeCmdList>
				MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800aa44:	f009 fe80 	bl	8014748 <MAP_makeSlaCmdList>
				MAP_makeSkewCmdList();
 800aa48:	f009 fffa 	bl	8014a40 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	f7f7 fa43 	bl	8001ed8 <SetLED>
			}
			break;
 800aa52:	e1cd      	b.n	800adf0 <MODE_exe_m2+0x5b8>

		case MODE_2://adachi and known and return (cancel return now) 
			SetLED(0x0e);
 800aa54:	200e      	movs	r0, #14
 800aa56:	f7f7 fa3f 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_SLOW,PARAM_VERY_SLOW,PARAM_VERY_SLOW,SEARCH_SPEED,
 800aa5a:	ed9f 2a3c 	vldr	s4, [pc, #240]	@ 800ab4c <MODE_exe_m2+0x314>
 800aa5e:	eddf 1a3b 	vldr	s3, [pc, #236]	@ 800ab4c <MODE_exe_m2+0x314>
 800aa62:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 800ab4c <MODE_exe_m2+0x314>
 800aa66:	eddf 0a39 	vldr	s1, [pc, #228]	@ 800ab4c <MODE_exe_m2+0x314>
 800aa6a:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800ab4c <MODE_exe_m2+0x314>
 800aa6e:	2200      	movs	r2, #0
 800aa70:	2100      	movs	r1, #0
 800aa72:	2001      	movs	r0, #1
 800aa74:	f7ff fc28 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );	
*/						
			SetLED(0x00);
 800aa78:	2000      	movs	r0, #0
 800aa7a:	f7f7 fa2d 	bl	8001ed8 <SetLED>
			LL_mDelay(100);
 800aa7e:	2064      	movs	r0, #100	@ 0x64
 800aa80:	f011 f860 	bl	801bb44 <LL_mDelay>
//			PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
			MAP_Goalsize(1);
 800aa84:	2001      	movs	r0, #1
 800aa86:	f00d fd6b 	bl	8018560 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	2000      	movs	r0, #0
 800aa90:	f00c f896 	bl	8016bc0 <MAP_setPos>

			MAP_searchGoalKnown(GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, SEARCH, SEARCH_SLA );			
 800aa94:	2301      	movs	r3, #1
 800aa96:	2200      	movs	r2, #0
 800aa98:	2109      	movs	r1, #9
 800aa9a:	2014      	movs	r0, #20
 800aa9c:	f00e ff06 	bl	80198ac <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800aaa0:	f7f7 fa9c 	bl	8001fdc <SW_IsOn_1>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d006      	beq.n	800aab8 <MODE_exe_m2+0x280>
 800aaaa:	f7fe fe19 	bl	80096e0 <SYS_isOutOfCtrl>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <MODE_exe_m2+0x280>
			else{
				Map_Write();
 800aab4:	f00b fffa 	bl	8016aac <Map_Write>
			}
			
			SetLED(0x0e);
 800aab8:	200e      	movs	r0, #14
 800aaba:	f7f7 fa0d 	bl	8001ed8 <SetLED>
			MAP_Goalsize(1);
 800aabe:	2001      	movs	r0, #1
 800aac0:	f00d fd4e 	bl	8018560 <MAP_Goalsize>
			SetLED(0x00);
 800aac4:	2000      	movs	r0, #0
 800aac6:	f7f7 fa07 	bl	8001ed8 <SetLED>

			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SLA );
 800aaca:	2301      	movs	r3, #1
 800aacc:	2200      	movs	r2, #0
 800aace:	2100      	movs	r1, #0
 800aad0:	2000      	movs	r0, #0
 800aad2:	f00e feeb 	bl	80198ac <MAP_searchGoalKnown>
//			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_RETURN );

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800aad6:	f7f7 fa81 	bl	8001fdc <SW_IsOn_1>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b01      	cmp	r3, #1
 800aade:	f000 8189 	beq.w	800adf4 <MODE_exe_m2+0x5bc>
 800aae2:	f7fe fdfd 	bl	80096e0 <SYS_isOutOfCtrl>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f040 8183 	bne.w	800adf4 <MODE_exe_m2+0x5bc>
			else{
				Map_Write();
 800aaee:	f00b ffdd 	bl	8016aac <Map_Write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	f00c f862 	bl	8016bc0 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800aafc:	2201      	movs	r2, #1
 800aafe:	2109      	movs	r1, #9
 800ab00:	2014      	movs	r0, #20
 800ab02:	f00c fe21 	bl	8017748 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800ab06:	1dfb      	adds	r3, r7, #7
 800ab08:	9301      	str	r3, [sp, #4]
 800ab0a:	2309      	movs	r3, #9
 800ab0c:	9300      	str	r3, [sp, #0]
 800ab0e:	2314      	movs	r3, #20
 800ab10:	2200      	movs	r2, #0
 800ab12:	2100      	movs	r1, #0
 800ab14:	2000      	movs	r0, #0
 800ab16:	f009 fbbf 	bl	8014298 <MAP_makeCmdList>
				MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800ab1a:	f009 fe15 	bl	8014748 <MAP_makeSlaCmdList>
				MAP_makeSkewCmdList();
 800ab1e:	f009 ff8f 	bl	8014a40 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800ab22:	2000      	movs	r0, #0
 800ab24:	f7f7 f9d8 	bl	8001ed8 <SetLED>
			}
			break;
 800ab28:	e164      	b.n	800adf4 <MODE_exe_m2+0x5bc>

		case MODE_3:
			SetLED(0x0e);
 800ab2a:	200e      	movs	r0, #14
 800ab2c:	f7f7 f9d4 	bl	8001ed8 <SetLED>
			
			break;
 800ab30:	e163      	b.n	800adfa <MODE_exe_m2+0x5c2>

		case MODE_4:
			SetLED(0x0e);
 800ab32:	200e      	movs	r0, #14
 800ab34:	f7f7 f9d0 	bl	8001ed8 <SetLED>

			break;
 800ab38:	e15f      	b.n	800adfa <MODE_exe_m2+0x5c2>
 800ab3a:	bf00      	nop
 800ab3c:	20000217 	.word	0x20000217
 800ab40:	20000216 	.word	0x20000216
 800ab44:	20000214 	.word	0x20000214
 800ab48:	20017b28 	.word	0x20017b28
 800ab4c:	3e99999a 	.word	0x3e99999a

		case MODE_5://test search
			SetLED(0x0e);
 800ab50:	200e      	movs	r0, #14
 800ab52:	f7f7 f9c1 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_SLOW,PARAM_VERY_SLOW,PARAM_VERY_SLOW,SEARCH_SPEED,
 800ab56:	ed1f 2a03 	vldr	s4, [pc, #-12]	@ 800ab4c <MODE_exe_m2+0x314>
 800ab5a:	ed5f 1a04 	vldr	s3, [pc, #-16]	@ 800ab4c <MODE_exe_m2+0x314>
 800ab5e:	ed1f 1a05 	vldr	s2, [pc, #-20]	@ 800ab4c <MODE_exe_m2+0x314>
 800ab62:	ed5f 0a06 	vldr	s1, [pc, #-24]	@ 800ab4c <MODE_exe_m2+0x314>
 800ab66:	ed1f 0a07 	vldr	s0, [pc, #-28]	@ 800ab4c <MODE_exe_m2+0x314>
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	2100      	movs	r1, #0
 800ab6e:	2000      	movs	r0, #0
 800ab70:	f7ff fbaa 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );							
*/			SetLED(0x00);
 800ab74:	2000      	movs	r0, #0
 800ab76:	f7f7 f9af 	bl	8001ed8 <SetLED>
			LL_mDelay(100);
 800ab7a:	2064      	movs	r0, #100	@ 0x64
 800ab7c:	f010 ffe2 	bl	801bb44 <LL_mDelay>
//			PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
			MAP_Goalsize(1);
 800ab80:	2001      	movs	r0, #1
 800ab82:	f00d fced 	bl	8018560 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 800ab86:	2200      	movs	r2, #0
 800ab88:	2100      	movs	r1, #0
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	f00c f818 	bl	8016bc0 <MAP_setPos>

			MAP_searchGoalKnown(2, 0, SEARCH, SEARCH_SLA );			
 800ab90:	2301      	movs	r3, #1
 800ab92:	2200      	movs	r2, #0
 800ab94:	2100      	movs	r1, #0
 800ab96:	2002      	movs	r0, #2
 800ab98:	f00e fe88 	bl	80198ac <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800ab9c:	f7f7 fa1e 	bl	8001fdc <SW_IsOn_1>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d006      	beq.n	800abb4 <MODE_exe_m2+0x37c>
 800aba6:	f7fe fd9b 	bl	80096e0 <SYS_isOutOfCtrl>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d101      	bne.n	800abb4 <MODE_exe_m2+0x37c>
			else{
				Map_Write();
 800abb0:	f00b ff7c 	bl	8016aac <Map_Write>
			}
			
			SetLED(0x0e);
 800abb4:	200e      	movs	r0, #14
 800abb6:	f7f7 f98f 	bl	8001ed8 <SetLED>
			MAP_Goalsize(1);
 800abba:	2001      	movs	r0, #1
 800abbc:	f00d fcd0 	bl	8018560 <MAP_Goalsize>
			SetLED(0x00);
 800abc0:	2000      	movs	r0, #0
 800abc2:	f7f7 f989 	bl	8001ed8 <SetLED>

			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SLA );
 800abc6:	2301      	movs	r3, #1
 800abc8:	2200      	movs	r2, #0
 800abca:	2100      	movs	r1, #0
 800abcc:	2000      	movs	r0, #0
 800abce:	f00e fe6d 	bl	80198ac <MAP_searchGoalKnown>
//			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_RETURN );

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800abd2:	f7f7 fa03 	bl	8001fdc <SW_IsOn_1>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b01      	cmp	r3, #1
 800abda:	f000 810d 	beq.w	800adf8 <MODE_exe_m2+0x5c0>
 800abde:	f7fe fd7f 	bl	80096e0 <SYS_isOutOfCtrl>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f040 8107 	bne.w	800adf8 <MODE_exe_m2+0x5c0>
			else{
				Map_Write();
 800abea:	f00b ff5f 	bl	8016aac <Map_Write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800abee:	2200      	movs	r2, #0
 800abf0:	2100      	movs	r1, #0
 800abf2:	2000      	movs	r0, #0
 800abf4:	f00b ffe4 	bl	8016bc0 <MAP_setPos>
				MAP_makeContourMap_run( 2, 0, BEST_WAY );					// 等高線�?�ップを作る
 800abf8:	2201      	movs	r2, #1
 800abfa:	2100      	movs	r1, #0
 800abfc:	2002      	movs	r0, #2
 800abfe:	f00c fda3 	bl	8017748 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH,2, 0, &en_endDir2 );		// ドライブコマンド作�??
 800ac02:	1dfb      	adds	r3, r7, #7
 800ac04:	9301      	str	r3, [sp, #4]
 800ac06:	2300      	movs	r3, #0
 800ac08:	9300      	str	r3, [sp, #0]
 800ac0a:	2302      	movs	r3, #2
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	2100      	movs	r1, #0
 800ac10:	2000      	movs	r0, #0
 800ac12:	f009 fb41 	bl	8014298 <MAP_makeCmdList>
				MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800ac16:	f009 fd97 	bl	8014748 <MAP_makeSlaCmdList>
				MAP_makeSkewCmdList();
 800ac1a:	f009 ff11 	bl	8014a40 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800ac1e:	2000      	movs	r0, #0
 800ac20:	f7f7 f95a 	bl	8001ed8 <SetLED>
			}
			break;
 800ac24:	e0e8      	b.n	800adf8 <MODE_exe_m2+0x5c0>

		case MODE_6://test
			printf("\r\n turn 45 \r\r");
 800ac26:	4877      	ldr	r0, [pc, #476]	@ (800ae04 <MODE_exe_m2+0x5cc>)
 800ac28:	f013 f880 	bl	801dd2c <iprintf>
			PARAM_makeSra( 0.5, 550.0f, 7.50f,3000*PI,  SLA_45 );
 800ac2c:	2001      	movs	r0, #1
 800ac2e:	eddf 1a76 	vldr	s3, [pc, #472]	@ 800ae08 <MODE_exe_m2+0x5d0>
 800ac32:	eeb1 1a0e 	vmov.f32	s2, #30	@ 0x40f00000  7.5
 800ac36:	eddf 0a75 	vldr	s1, [pc, #468]	@ 800ae0c <MODE_exe_m2+0x5d4>
 800ac3a:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800ac3e:	f7f7 fdfb 	bl	8002838 <PARAM_makeSra>
			printf("\r\n turn 90 \r\r");		
 800ac42:	4873      	ldr	r0, [pc, #460]	@ (800ae10 <MODE_exe_m2+0x5d8>)
 800ac44:	f013 f872 	bl	801dd2c <iprintf>
			PARAM_makeSra( 0.5, 700.0f, 10.00f,3000*PI,  SLA_90 );	
 800ac48:	2000      	movs	r0, #0
 800ac4a:	eddf 1a6f 	vldr	s3, [pc, #444]	@ 800ae08 <MODE_exe_m2+0x5d0>
 800ac4e:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800ac52:	eddf 0a70 	vldr	s1, [pc, #448]	@ 800ae14 <MODE_exe_m2+0x5dc>
 800ac56:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800ac5a:	f7f7 fded 	bl	8002838 <PARAM_makeSra>
		//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
			printf("\r\n turn 135 \r\r");	
 800ac5e:	486e      	ldr	r0, [pc, #440]	@ (800ae18 <MODE_exe_m2+0x5e0>)
 800ac60:	f013 f864 	bl	801dd2c <iprintf>
			PARAM_makeSra( 0.5, 750.0f, 10.00f,3000*PI,  SLA_135 );	
 800ac64:	2002      	movs	r0, #2
 800ac66:	eddf 1a68 	vldr	s3, [pc, #416]	@ 800ae08 <MODE_exe_m2+0x5d0>
 800ac6a:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800ac6e:	eddf 0a6b 	vldr	s1, [pc, #428]	@ 800ae1c <MODE_exe_m2+0x5e4>
 800ac72:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800ac76:	f7f7 fddf 	bl	8002838 <PARAM_makeSra>
			printf("\r\n turn N90 \r\r");	
 800ac7a:	4869      	ldr	r0, [pc, #420]	@ (800ae20 <MODE_exe_m2+0x5e8>)
 800ac7c:	f013 f856 	bl	801dd2c <iprintf>
			PARAM_makeSra( 0.5, 800.0f, 11.00f,3000*PI,  SLA_N90 );	
 800ac80:	2003      	movs	r0, #3
 800ac82:	eddf 1a61 	vldr	s3, [pc, #388]	@ 800ae08 <MODE_exe_m2+0x5d0>
 800ac86:	eeb2 1a06 	vmov.f32	s2, #38	@ 0x41300000  11.0
 800ac8a:	eddf 0a66 	vldr	s1, [pc, #408]	@ 800ae24 <MODE_exe_m2+0x5ec>
 800ac8e:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800ac92:	f7f7 fdd1 	bl	8002838 <PARAM_makeSra>

			Map_Copy();
 800ac96:	f00b ff1d 	bl	8016ad4 <Map_Copy>

			GYRO_SetRef();
 800ac9a:	f7fe fec1 	bl	8009a20 <GYRO_SetRef>
			CTRL_clrData();
 800ac9e:	f7fb fbd1 	bl	8006444 <CTRL_clrData>
			CTRL_clrAngleErrSum();
 800aca2:	f7fb fc17 	bl	80064d4 <CTRL_clrAngleErrSum>
			CTRL_clrSpeedErrSum();
 800aca6:	f7fb fc29 	bl	80064fc <CTRL_clrSpeedErrSum>
			CTRL_clrNowData();
 800acaa:	f7fb fc3b 	bl	8006524 <CTRL_clrNowData>
			SetLED(0x0e);
 800acae:	200e      	movs	r0, #14
 800acb0:	f7f7 f912 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*4.0,
 800acb4:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800acb8:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800acbc:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800acc0:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800acc4:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 800ae28 <MODE_exe_m2+0x5f0>
 800acc8:	2202      	movs	r2, #2
 800acca:	2100      	movs	r1, #0
 800accc:	2003      	movs	r0, #3
 800acce:	f7ff fafb 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5 , SLA_N90);								
			PARAM_setSpeedType( PARAM_ST,   PARAM_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );										
*/
			SetLED(0x00);
 800acd2:	2000      	movs	r0, #0
 800acd4:	f7f7 f900 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800acd8:	2200      	movs	r2, #0
 800acda:	2100      	movs	r1, #0
 800acdc:	2000      	movs	r0, #0
 800acde:	f00b ff6f 	bl	8016bc0 <MAP_setPos>
			MAP_Goalsize(1);
 800ace2:	2001      	movs	r0, #1
 800ace4:	f00d fc3c 	bl	8018560 <MAP_Goalsize>
			MAP_makeContourMap_run( 2, 0, BEST_WAY );					// 等高線�?�ップを作る
 800ace8:	2201      	movs	r2, #1
 800acea:	2100      	movs	r1, #0
 800acec:	2002      	movs	r0, #2
 800acee:	f00c fd2b 	bl	8017748 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH,  2, 0, &en_endDir2 );		// ドライブコマンド作�??
 800acf2:	1dfb      	adds	r3, r7, #7
 800acf4:	9301      	str	r3, [sp, #4]
 800acf6:	2300      	movs	r3, #0
 800acf8:	9300      	str	r3, [sp, #0]
 800acfa:	2302      	movs	r3, #2
 800acfc:	2200      	movs	r2, #0
 800acfe:	2100      	movs	r1, #0
 800ad00:	2000      	movs	r0, #0
 800ad02:	f009 fac9 	bl	8014298 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800ad06:	f009 fd1f 	bl	8014748 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800ad0a:	f009 fe99 	bl	8014a40 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800ad0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ad12:	f010 ff17 	bl	801bb44 <LL_mDelay>
			Set_DutyTIM8(600);
 800ad16:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800ad1a:	f7fb f8b1 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);			
 800ad1e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800ad22:	f010 ff0f 	bl	801bb44 <LL_mDelay>

			log_flag_on();										
 800ad26:	f7ff f8d9 	bl	8009edc <log_flag_on>
			MAP_drive( MAP_DRIVE_SKEW );
 800ad2a:	2002      	movs	r0, #2
 800ad2c:	f00a fe3e 	bl	80159ac <MAP_drive>
			log_flag_off();
 800ad30:	f7ff f8e0 	bl	8009ef4 <log_flag_off>
			Set_DutyTIM8(0);
 800ad34:	2000      	movs	r0, #0
 800ad36:	f7fb f8a3 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800ad3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ad3e:	f010 ff01 	bl	801bb44 <LL_mDelay>
			MOT_turn(MOT_R180);
 800ad42:	2002      	movs	r0, #2
 800ad44:	f004 ff44 	bl	800fbd0 <MOT_turn>
			MAP_actGoalLED();
 800ad48:	f00d fbd4 	bl	80184f4 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	f7fb f897 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800ad52:	f7fe fcb9 	bl	80096c8 <Failsafe_flag_off>

			PARAM_makeSra( (float)SEARCH_SPEED, 100.0f, 2.50f,3000*PI,  SLA_45 );
 800ad56:	2001      	movs	r0, #1
 800ad58:	eddf 1a2b 	vldr	s3, [pc, #172]	@ 800ae08 <MODE_exe_m2+0x5d0>
 800ad5c:	eeb0 1a04 	vmov.f32	s2, #4	@ 0x40200000  2.5
 800ad60:	eddf 0a32 	vldr	s1, [pc, #200]	@ 800ae2c <MODE_exe_m2+0x5f4>
 800ad64:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 800ae30 <MODE_exe_m2+0x5f8>
 800ad68:	f7f7 fd66 	bl	8002838 <PARAM_makeSra>
			printf("\r\n turn 90 \r\r");		
 800ad6c:	4828      	ldr	r0, [pc, #160]	@ (800ae10 <MODE_exe_m2+0x5d8>)
 800ad6e:	f012 ffdd 	bl	801dd2c <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 3.50f,3000*PI,  SLA_90 );	
 800ad72:	2000      	movs	r0, #0
 800ad74:	eddf 1a24 	vldr	s3, [pc, #144]	@ 800ae08 <MODE_exe_m2+0x5d0>
 800ad78:	eeb0 1a0c 	vmov.f32	s2, #12	@ 0x40600000  3.5
 800ad7c:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 800ae34 <MODE_exe_m2+0x5fc>
 800ad80:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800ae30 <MODE_exe_m2+0x5f8>
 800ad84:	f7f7 fd58 	bl	8002838 <PARAM_makeSra>
		//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
			printf("\r\n turn 135 \r\r");	
 800ad88:	4823      	ldr	r0, [pc, #140]	@ (800ae18 <MODE_exe_m2+0x5e0>)
 800ad8a:	f012 ffcf 	bl	801dd2c <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 4.00f,3000*PI,  SLA_135 );	
 800ad8e:	2002      	movs	r0, #2
 800ad90:	eddf 1a1d 	vldr	s3, [pc, #116]	@ 800ae08 <MODE_exe_m2+0x5d0>
 800ad94:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 800ad98:	eddf 0a26 	vldr	s1, [pc, #152]	@ 800ae34 <MODE_exe_m2+0x5fc>
 800ad9c:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 800ae30 <MODE_exe_m2+0x5f8>
 800ada0:	f7f7 fd4a 	bl	8002838 <PARAM_makeSra>
			printf("\r\n turn N90 \r\r");	
 800ada4:	481e      	ldr	r0, [pc, #120]	@ (800ae20 <MODE_exe_m2+0x5e8>)
 800ada6:	f012 ffc1 	bl	801dd2c <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 300.0f, 4.00f,3000*PI,  SLA_N90 );		
 800adaa:	2003      	movs	r0, #3
 800adac:	eddf 1a16 	vldr	s3, [pc, #88]	@ 800ae08 <MODE_exe_m2+0x5d0>
 800adb0:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 800adb4:	eddf 0a20 	vldr	s1, [pc, #128]	@ 800ae38 <MODE_exe_m2+0x600>
 800adb8:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800ae30 <MODE_exe_m2+0x5f8>
 800adbc:	f7f7 fd3c 	bl	8002838 <PARAM_makeSra>
			MODE_speed_parameter(PARAM_VERY_SLOW,PARAM_VERY_SLOW,PARAM_VERY_SLOW,SEARCH_SPEED,
 800adc0:	ed9f 2a1b 	vldr	s4, [pc, #108]	@ 800ae30 <MODE_exe_m2+0x5f8>
 800adc4:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 800ae30 <MODE_exe_m2+0x5f8>
 800adc8:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 800ae30 <MODE_exe_m2+0x5f8>
 800adcc:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800ae30 <MODE_exe_m2+0x5f8>
 800add0:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800ae30 <MODE_exe_m2+0x5f8>
 800add4:	2200      	movs	r2, #0
 800add6:	2100      	movs	r1, #0
 800add8:	2000      	movs	r0, #0
 800adda:	f7ff fa75 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_45);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);
*/
			break;
 800adde:	e00c      	b.n	800adfa <MODE_exe_m2+0x5c2>

		case MODE_7:
			SetLED(0x0e);
 800ade0:	200e      	movs	r0, #14
 800ade2:	f7f7 f879 	bl	8001ed8 <SetLED>
			//cant use
			break;
 800ade6:	e008      	b.n	800adfa <MODE_exe_m2+0x5c2>

		default:
			break;
 800ade8:	bf00      	nop
 800adea:	e006      	b.n	800adfa <MODE_exe_m2+0x5c2>
			break;
 800adec:	bf00      	nop
 800adee:	e004      	b.n	800adfa <MODE_exe_m2+0x5c2>
			break;
 800adf0:	bf00      	nop
 800adf2:	e002      	b.n	800adfa <MODE_exe_m2+0x5c2>
			break;
 800adf4:	bf00      	nop
 800adf6:	e000      	b.n	800adfa <MODE_exe_m2+0x5c2>
			break;
 800adf8:	bf00      	nop
	}
}
 800adfa:	bf00      	nop
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	08021cac 	.word	0x08021cac
 800ae08:	46134315 	.word	0x46134315
 800ae0c:	44098000 	.word	0x44098000
 800ae10:	08021cbc 	.word	0x08021cbc
 800ae14:	442f0000 	.word	0x442f0000
 800ae18:	08021ccc 	.word	0x08021ccc
 800ae1c:	443b8000 	.word	0x443b8000
 800ae20:	08021cdc 	.word	0x08021cdc
 800ae24:	44480000 	.word	0x44480000
 800ae28:	3f99999a 	.word	0x3f99999a
 800ae2c:	42c80000 	.word	0x42c80000
 800ae30:	3e99999a 	.word	0x3e99999a
 800ae34:	43480000 	.word	0x43480000
 800ae38:	43960000 	.word	0x43960000

0800ae3c <MODE_exe_m3>:

void MODE_exe_m3( void )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 800ae42:	f04f 0200 	mov.w	r2, #0
 800ae46:	f04f 0300 	mov.w	r3, #0
 800ae4a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	Map_Copy();
 800ae4e:	f00b fe41 	bl	8016ad4 <Map_Copy>

	GYRO_SetRef();
 800ae52:	f7fe fde5 	bl	8009a20 <GYRO_SetRef>
	CTRL_clrData();
 800ae56:	f7fb faf5 	bl	8006444 <CTRL_clrData>
	CTRL_clrAngleErrSum();
 800ae5a:	f7fb fb3b 	bl	80064d4 <CTRL_clrAngleErrSum>
	CTRL_clrSpeedErrSum();
 800ae5e:	f7fb fb4d 	bl	80064fc <CTRL_clrSpeedErrSum>
	CTRL_clrNowData();
 800ae62:	f7fb fb5f 	bl	8006524 <CTRL_clrNowData>

	switch( en_Mode ){
 800ae66:	4bd9      	ldr	r3, [pc, #868]	@ (800b1cc <MODE_exe_m3+0x390>)
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	2b07      	cmp	r3, #7
 800ae6c:	f200 825e 	bhi.w	800b32c <MODE_exe_m3+0x4f0>
 800ae70:	a201      	add	r2, pc, #4	@ (adr r2, 800ae78 <MODE_exe_m3+0x3c>)
 800ae72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae76:	bf00      	nop
 800ae78:	0800ae99 	.word	0x0800ae99
 800ae7c:	0800af3b 	.word	0x0800af3b
 800ae80:	0800afdd 	.word	0x0800afdd
 800ae84:	0800b07f 	.word	0x0800b07f
 800ae88:	0800b129 	.word	0x0800b129
 800ae8c:	0800b1dd 	.word	0x0800b1dd
 800ae90:	0800b27f 	.word	0x0800b27f
 800ae94:	0800b325 	.word	0x0800b325

		case MODE_0:
			SetLED(0x0e);
 800ae98:	200e      	movs	r0, #14
 800ae9a:	f7f7 f81d 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_SLOW,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED*4.0,
 800ae9e:	ed9f 2ace 	vldr	s4, [pc, #824]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800aea2:	eddf 1acd 	vldr	s3, [pc, #820]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800aea6:	ed9f 1acc 	vldr	s2, [pc, #816]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800aeaa:	eddf 0acb 	vldr	s1, [pc, #812]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800aeae:	ed9f 0ac8 	vldr	s0, [pc, #800]	@ 800b1d0 <MODE_exe_m3+0x394>
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	2001      	movs	r0, #1
 800aeb8:	f7ff fa06 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
*/			SetLED(0x00);
 800aebc:	2000      	movs	r0, #0
 800aebe:	f7f7 f80b 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800aec2:	2200      	movs	r2, #0
 800aec4:	2100      	movs	r1, #0
 800aec6:	2000      	movs	r0, #0
 800aec8:	f00b fe7a 	bl	8016bc0 <MAP_setPos>
			MAP_Goalsize(1);
 800aecc:	2001      	movs	r0, #1
 800aece:	f00d fb47 	bl	8018560 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800aed2:	2201      	movs	r2, #1
 800aed4:	2109      	movs	r1, #9
 800aed6:	2014      	movs	r0, #20
 800aed8:	f00c fc36 	bl	8017748 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800aedc:	1dfb      	adds	r3, r7, #7
 800aede:	9301      	str	r3, [sp, #4]
 800aee0:	2309      	movs	r3, #9
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	2314      	movs	r3, #20
 800aee6:	2200      	movs	r2, #0
 800aee8:	2100      	movs	r1, #0
 800aeea:	2000      	movs	r0, #0
 800aeec:	f009 f9d4 	bl	8014298 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800aef0:	f009 fc2a 	bl	8014748 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800aef4:	f009 fda4 	bl	8014a40 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800aef8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800aefc:	f010 fe22 	bl	801bb44 <LL_mDelay>
			Set_DutyTIM8(600);
 800af00:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800af04:	f7fa ffbc 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);
 800af08:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800af0c:	f010 fe1a 	bl	801bb44 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SLA );													
 800af10:	2001      	movs	r0, #1
 800af12:	f00a fd4b 	bl	80159ac <MAP_drive>
			Set_DutyTIM8(0);
 800af16:	2000      	movs	r0, #0
 800af18:	f7fa ffb2 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800af1c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800af20:	f010 fe10 	bl	801bb44 <LL_mDelay>
			MOT_turn(MOT_R180);
 800af24:	2002      	movs	r0, #2
 800af26:	f004 fe53 	bl	800fbd0 <MOT_turn>
			MAP_actGoalLED();
 800af2a:	f00d fae3 	bl	80184f4 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800af2e:	2000      	movs	r0, #0
 800af30:	f7fa ffa6 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800af34:	f7fe fbc8 	bl	80096c8 <Failsafe_flag_off>
			break;
 800af38:	e1f9      	b.n	800b32e <MODE_exe_m3+0x4f2>

		case MODE_1:
			SetLED(0x0e);
 800af3a:	200e      	movs	r0, #14
 800af3c:	f7f6 ffcc 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_SLOW,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED*5.0,
 800af40:	ed9f 2aa5 	vldr	s4, [pc, #660]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800af44:	eddf 1aa4 	vldr	s3, [pc, #656]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800af48:	ed9f 1aa3 	vldr	s2, [pc, #652]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800af4c:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800af50:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 800af54:	2201      	movs	r2, #1
 800af56:	2100      	movs	r1, #0
 800af58:	2001      	movs	r0, #1
 800af5a:	f7ff f9b5 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );								
*/			SetLED(0x00);
 800af5e:	2000      	movs	r0, #0
 800af60:	f7f6 ffba 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800af64:	2200      	movs	r2, #0
 800af66:	2100      	movs	r1, #0
 800af68:	2000      	movs	r0, #0
 800af6a:	f00b fe29 	bl	8016bc0 <MAP_setPos>
			MAP_Goalsize(1);
 800af6e:	2001      	movs	r0, #1
 800af70:	f00d faf6 	bl	8018560 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800af74:	2201      	movs	r2, #1
 800af76:	2109      	movs	r1, #9
 800af78:	2014      	movs	r0, #20
 800af7a:	f00c fbe5 	bl	8017748 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800af7e:	1dfb      	adds	r3, r7, #7
 800af80:	9301      	str	r3, [sp, #4]
 800af82:	2309      	movs	r3, #9
 800af84:	9300      	str	r3, [sp, #0]
 800af86:	2314      	movs	r3, #20
 800af88:	2200      	movs	r2, #0
 800af8a:	2100      	movs	r1, #0
 800af8c:	2000      	movs	r0, #0
 800af8e:	f009 f983 	bl	8014298 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800af92:	f009 fbd9 	bl	8014748 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800af96:	f009 fd53 	bl	8014a40 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800af9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800af9e:	f010 fdd1 	bl	801bb44 <LL_mDelay>
			Set_DutyTIM8(600);
 800afa2:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800afa6:	f7fa ff6b 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800afaa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800afae:	f010 fdc9 	bl	801bb44 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SLA );
 800afb2:	2001      	movs	r0, #1
 800afb4:	f00a fcfa 	bl	80159ac <MAP_drive>
			Set_DutyTIM8(0);
 800afb8:	2000      	movs	r0, #0
 800afba:	f7fa ff61 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800afbe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800afc2:	f010 fdbf 	bl	801bb44 <LL_mDelay>
			MOT_turn(MOT_R180);
 800afc6:	2002      	movs	r0, #2
 800afc8:	f004 fe02 	bl	800fbd0 <MOT_turn>
			MAP_actGoalLED();
 800afcc:	f00d fa92 	bl	80184f4 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800afd0:	2000      	movs	r0, #0
 800afd2:	f7fa ff55 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800afd6:	f7fe fb77 	bl	80096c8 <Failsafe_flag_off>
			break;
 800afda:	e1a8      	b.n	800b32e <MODE_exe_m3+0x4f2>

		case MODE_2:
			SetLED(0x0e);
 800afdc:	200e      	movs	r0, #14
 800afde:	f7f6 ff7b 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_NORMAL,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED*6.0,
 800afe2:	ed9f 2a7d 	vldr	s4, [pc, #500]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800afe6:	eddf 1a7c 	vldr	s3, [pc, #496]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800afea:	ed9f 1a7b 	vldr	s2, [pc, #492]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800afee:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800aff2:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 800b1d4 <MODE_exe_m3+0x398>
 800aff6:	2201      	movs	r2, #1
 800aff8:	2100      	movs	r1, #0
 800affa:	2002      	movs	r0, #2
 800affc:	f7ff f964 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );								
*/			SetLED(0x00);
 800b000:	2000      	movs	r0, #0
 800b002:	f7f6 ff69 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b006:	2200      	movs	r2, #0
 800b008:	2100      	movs	r1, #0
 800b00a:	2000      	movs	r0, #0
 800b00c:	f00b fdd8 	bl	8016bc0 <MAP_setPos>
			MAP_Goalsize(1);
 800b010:	2001      	movs	r0, #1
 800b012:	f00d faa5 	bl	8018560 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b016:	2201      	movs	r2, #1
 800b018:	2109      	movs	r1, #9
 800b01a:	2014      	movs	r0, #20
 800b01c:	f00c fb94 	bl	8017748 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b020:	1dfb      	adds	r3, r7, #7
 800b022:	9301      	str	r3, [sp, #4]
 800b024:	2309      	movs	r3, #9
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	2314      	movs	r3, #20
 800b02a:	2200      	movs	r2, #0
 800b02c:	2100      	movs	r1, #0
 800b02e:	2000      	movs	r0, #0
 800b030:	f009 f932 	bl	8014298 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b034:	f009 fb88 	bl	8014748 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800b038:	f009 fd02 	bl	8014a40 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800b03c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b040:	f010 fd80 	bl	801bb44 <LL_mDelay>
			Set_DutyTIM8(600);
 800b044:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b048:	f7fa ff1a 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);												
 800b04c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b050:	f010 fd78 	bl	801bb44 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SLA );
 800b054:	2001      	movs	r0, #1
 800b056:	f00a fca9 	bl	80159ac <MAP_drive>
			Set_DutyTIM8(0);
 800b05a:	2000      	movs	r0, #0
 800b05c:	f7fa ff10 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b060:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b064:	f010 fd6e 	bl	801bb44 <LL_mDelay>
			MOT_turn(MOT_R180);
 800b068:	2002      	movs	r0, #2
 800b06a:	f004 fdb1 	bl	800fbd0 <MOT_turn>
			MAP_actGoalLED();
 800b06e:	f00d fa41 	bl	80184f4 <MAP_actGoalLED>
			Set_DutyTIM8(0);			
 800b072:	2000      	movs	r0, #0
 800b074:	f7fa ff04 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b078:	f7fe fb26 	bl	80096c8 <Failsafe_flag_off>
			break;
 800b07c:	e157      	b.n	800b32e <MODE_exe_m3+0x4f2>

		case MODE_3:
			SetLED(0x0e);
 800b07e:	200e      	movs	r0, #14
 800b080:	f7f6 ff2a 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_SLOW,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED*4.0,
 800b084:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800b088:	eddf 1a53 	vldr	s3, [pc, #332]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800b08c:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800b090:	eddf 0a51 	vldr	s1, [pc, #324]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800b094:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 800b1d0 <MODE_exe_m3+0x394>
 800b098:	2201      	movs	r2, #1
 800b09a:	2100      	movs	r1, #0
 800b09c:	2001      	movs	r0, #1
 800b09e:	f7ff f913 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);						
			PARAM_setSpeedType( PARAM_ST,   PARAM_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );								
*/			SetLED(0x00);
 800b0a2:	2000      	movs	r0, #0
 800b0a4:	f7f6 ff18 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	f00b fd87 	bl	8016bc0 <MAP_setPos>
			MAP_Goalsize(1);
 800b0b2:	2001      	movs	r0, #1
 800b0b4:	f00d fa54 	bl	8018560 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	2109      	movs	r1, #9
 800b0bc:	2014      	movs	r0, #20
 800b0be:	f00c fb43 	bl	8017748 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b0c2:	1dfb      	adds	r3, r7, #7
 800b0c4:	9301      	str	r3, [sp, #4]
 800b0c6:	2309      	movs	r3, #9
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	2314      	movs	r3, #20
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	f009 f8e1 	bl	8014298 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b0d6:	f009 fb37 	bl	8014748 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800b0da:	f009 fcb1 	bl	8014a40 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800b0de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b0e2:	f010 fd2f 	bl	801bb44 <LL_mDelay>
			Set_DutyTIM8(600);
 800b0e6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b0ea:	f7fa fec9 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);		
 800b0ee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b0f2:	f010 fd27 	bl	801bb44 <LL_mDelay>
			
			log_flag_on();
 800b0f6:	f7fe fef1 	bl	8009edc <log_flag_on>
			MAP_drive( MAP_DRIVE_SKEW );
 800b0fa:	2002      	movs	r0, #2
 800b0fc:	f00a fc56 	bl	80159ac <MAP_drive>

			log_flag_off();
 800b100:	f7fe fef8 	bl	8009ef4 <log_flag_off>
			Set_DutyTIM8(0);
 800b104:	2000      	movs	r0, #0
 800b106:	f7fa febb 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b10a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b10e:	f010 fd19 	bl	801bb44 <LL_mDelay>
			MOT_turn(MOT_R180);
 800b112:	2002      	movs	r0, #2
 800b114:	f004 fd5c 	bl	800fbd0 <MOT_turn>
			MAP_actGoalLED();
 800b118:	f00d f9ec 	bl	80184f4 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800b11c:	2000      	movs	r0, #0
 800b11e:	f7fa feaf 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b122:	f7fe fad1 	bl	80096c8 <Failsafe_flag_off>
			break;
 800b126:	e102      	b.n	800b32e <MODE_exe_m3+0x4f2>

		case MODE_4:
			SetLED(0x0e);
 800b128:	200e      	movs	r0, #14
 800b12a:	f7f6 fed5 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_SLOW,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED*5.0,
 800b12e:	ed9f 2a2a 	vldr	s4, [pc, #168]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800b132:	eddf 1a29 	vldr	s3, [pc, #164]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800b136:	ed9f 1a28 	vldr	s2, [pc, #160]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800b13a:	eddf 0a27 	vldr	s1, [pc, #156]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800b13e:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 800b142:	2201      	movs	r2, #1
 800b144:	2100      	movs	r1, #0
 800b146:	2001      	movs	r0, #1
 800b148:	f7ff f8be 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );										
*/			SetLED(0x00);
 800b14c:	2000      	movs	r0, #0
 800b14e:	f7f6 fec3 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b152:	2200      	movs	r2, #0
 800b154:	2100      	movs	r1, #0
 800b156:	2000      	movs	r0, #0
 800b158:	f00b fd32 	bl	8016bc0 <MAP_setPos>
			MAP_Goalsize(1);
 800b15c:	2001      	movs	r0, #1
 800b15e:	f00d f9ff 	bl	8018560 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b162:	2201      	movs	r2, #1
 800b164:	2109      	movs	r1, #9
 800b166:	2014      	movs	r0, #20
 800b168:	f00c faee 	bl	8017748 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b16c:	1dfb      	adds	r3, r7, #7
 800b16e:	9301      	str	r3, [sp, #4]
 800b170:	2309      	movs	r3, #9
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	2314      	movs	r3, #20
 800b176:	2200      	movs	r2, #0
 800b178:	2100      	movs	r1, #0
 800b17a:	2000      	movs	r0, #0
 800b17c:	f009 f88c 	bl	8014298 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b180:	f009 fae2 	bl	8014748 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800b184:	f009 fc5c 	bl	8014a40 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800b188:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b18c:	f010 fcda 	bl	801bb44 <LL_mDelay>
			Set_DutyTIM8(600);
 800b190:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b194:	f7fa fe74 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800b198:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b19c:	f010 fcd2 	bl	801bb44 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800b1a0:	2002      	movs	r0, #2
 800b1a2:	f00a fc03 	bl	80159ac <MAP_drive>
			Set_DutyTIM8(0);
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	f7fa fe6a 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b1ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b1b0:	f010 fcc8 	bl	801bb44 <LL_mDelay>
			MOT_turn(MOT_R180);
 800b1b4:	2002      	movs	r0, #2
 800b1b6:	f004 fd0b 	bl	800fbd0 <MOT_turn>
			MAP_actGoalLED();
 800b1ba:	f00d f99b 	bl	80184f4 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800b1be:	2000      	movs	r0, #0
 800b1c0:	f7fa fe5e 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b1c4:	f7fe fa80 	bl	80096c8 <Failsafe_flag_off>
			break;
 800b1c8:	e0b1      	b.n	800b32e <MODE_exe_m3+0x4f2>
 800b1ca:	bf00      	nop
 800b1cc:	20017b28 	.word	0x20017b28
 800b1d0:	3f99999a 	.word	0x3f99999a
 800b1d4:	3fe66666 	.word	0x3fe66666
 800b1d8:	3e99999a 	.word	0x3e99999a

		case MODE_5:
			SetLED(0x0e);
 800b1dc:	200e      	movs	r0, #14
 800b1de:	f7f6 fe7b 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_FAST,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED*6.0,
 800b1e2:	ed1f 2a03 	vldr	s4, [pc, #-12]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800b1e6:	ed5f 1a04 	vldr	s3, [pc, #-16]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800b1ea:	ed1f 1a05 	vldr	s2, [pc, #-20]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800b1ee:	ed5f 0a06 	vldr	s1, [pc, #-24]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800b1f2:	ed1f 0a08 	vldr	s0, [pc, #-32]	@ 800b1d4 <MODE_exe_m3+0x398>
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	2003      	movs	r0, #3
 800b1fc:	f7ff f864 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );									
*/			SetLED(0x00);
 800b200:	2000      	movs	r0, #0
 800b202:	f7f6 fe69 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b206:	2200      	movs	r2, #0
 800b208:	2100      	movs	r1, #0
 800b20a:	2000      	movs	r0, #0
 800b20c:	f00b fcd8 	bl	8016bc0 <MAP_setPos>
			MAP_Goalsize(1);
 800b210:	2001      	movs	r0, #1
 800b212:	f00d f9a5 	bl	8018560 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b216:	2201      	movs	r2, #1
 800b218:	2109      	movs	r1, #9
 800b21a:	2014      	movs	r0, #20
 800b21c:	f00c fa94 	bl	8017748 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b220:	1dfb      	adds	r3, r7, #7
 800b222:	9301      	str	r3, [sp, #4]
 800b224:	2309      	movs	r3, #9
 800b226:	9300      	str	r3, [sp, #0]
 800b228:	2314      	movs	r3, #20
 800b22a:	2200      	movs	r2, #0
 800b22c:	2100      	movs	r1, #0
 800b22e:	2000      	movs	r0, #0
 800b230:	f009 f832 	bl	8014298 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b234:	f009 fa88 	bl	8014748 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800b238:	f009 fc02 	bl	8014a40 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800b23c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b240:	f010 fc80 	bl	801bb44 <LL_mDelay>
			Set_DutyTIM8(600);
 800b244:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b248:	f7fa fe1a 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800b24c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b250:	f010 fc78 	bl	801bb44 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800b254:	2002      	movs	r0, #2
 800b256:	f00a fba9 	bl	80159ac <MAP_drive>
			Set_DutyTIM8(0);
 800b25a:	2000      	movs	r0, #0
 800b25c:	f7fa fe10 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b260:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b264:	f010 fc6e 	bl	801bb44 <LL_mDelay>
			MOT_turn(MOT_R180);
 800b268:	2002      	movs	r0, #2
 800b26a:	f004 fcb1 	bl	800fbd0 <MOT_turn>
			MAP_actGoalLED();
 800b26e:	f00d f941 	bl	80184f4 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800b272:	2000      	movs	r0, #0
 800b274:	f7fa fe04 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b278:	f7fe fa26 	bl	80096c8 <Failsafe_flag_off>
			break;
 800b27c:	e057      	b.n	800b32e <MODE_exe_m3+0x4f2>

		case MODE_6:
			SetLED(0x0e);
 800b27e:	200e      	movs	r0, #14
 800b280:	f7f6 fe2a 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_SLOW,PARAM_VERY_SLOW,PARAM_SLOW,SEARCH_SPEED*5.0,
 800b284:	ed1f 2a2c 	vldr	s4, [pc, #-176]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800b288:	ed5f 1a2d 	vldr	s3, [pc, #-180]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800b28c:	ed1f 1a2e 	vldr	s2, [pc, #-184]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800b290:	ed5f 0a2f 	vldr	s1, [pc, #-188]	@ 800b1d8 <MODE_exe_m3+0x39c>
 800b294:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 800b298:	2201      	movs	r2, #1
 800b29a:	2100      	movs	r1, #0
 800b29c:	2001      	movs	r0, #1
 800b29e:	f7ff f813 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );									
*/			SetLED(0x00);
 800b2a2:	2000      	movs	r0, #0
 800b2a4:	f7f6 fe18 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	f00b fc87 	bl	8016bc0 <MAP_setPos>

			MAP_Goal_init();
 800b2b2:	f00b fc73 	bl	8016b9c <MAP_Goal_init>
			MAP_makeContourMap_dijkstra_modoki(GOAL_MAP_X_DEF,GOAL_MAP_Y_DEF, BEST_WAY);
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	2109      	movs	r1, #9
 800b2ba:	2014      	movs	r0, #20
 800b2bc:	f00e fd0a 	bl	8019cd4 <MAP_makeContourMap_dijkstra_modoki>
			MAP_Goalsize(1);
 800b2c0:	2001      	movs	r0, #1
 800b2c2:	f00d f94d 	bl	8018560 <MAP_Goalsize>
	
			MAP_makeCmdList_dijkstra_modoki(0, 0, NORTH, GOAL_MAP_X_DEF,GOAL_MAP_Y_DEF, &en_endDir2);		// ドライブコマンド作成
 800b2c6:	1dfb      	adds	r3, r7, #7
 800b2c8:	9301      	str	r3, [sp, #4]
 800b2ca:	2309      	movs	r3, #9
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	2314      	movs	r3, #20
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	f00b f96d 	bl	80165b4 <MAP_makeCmdList_dijkstra_modoki>
			MAP_makeSlaCmdList();													// スラロームコマンド作成
 800b2da:	f009 fa35 	bl	8014748 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();
 800b2de:	f009 fbaf 	bl	8014a40 <MAP_makeSkewCmdList>

			LL_mDelay(500);
 800b2e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b2e6:	f010 fc2d 	bl	801bb44 <LL_mDelay>
			Set_DutyTIM8(600);
 800b2ea:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b2ee:	f7fa fdc7 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800b2f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b2f6:	f010 fc25 	bl	801bb44 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800b2fa:	2002      	movs	r0, #2
 800b2fc:	f00a fb56 	bl	80159ac <MAP_drive>
			Set_DutyTIM8(0);
 800b300:	2000      	movs	r0, #0
 800b302:	f7fa fdbd 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b306:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b30a:	f010 fc1b 	bl	801bb44 <LL_mDelay>
			MOT_turn(MOT_R180);
 800b30e:	2002      	movs	r0, #2
 800b310:	f004 fc5e 	bl	800fbd0 <MOT_turn>
			MAP_actGoalLED();
 800b314:	f00d f8ee 	bl	80184f4 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800b318:	2000      	movs	r0, #0
 800b31a:	f7fa fdb1 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b31e:	f7fe f9d3 	bl	80096c8 <Failsafe_flag_off>

			break;
 800b322:	e004      	b.n	800b32e <MODE_exe_m3+0x4f2>

		case MODE_7:
			SetLED(0x0e);
 800b324:	200e      	movs	r0, #14
 800b326:	f7f6 fdd7 	bl	8001ed8 <SetLED>
			//cant use
			break;
 800b32a:	e000      	b.n	800b32e <MODE_exe_m3+0x4f2>

		default:
			break;
 800b32c:	bf00      	nop
	}
}
 800b32e:	bf00      	nop
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop

0800b338 <MODE_exe_m4>:

void MODE_exe_m4( void )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 800b33e:	f04f 0200 	mov.w	r2, #0
 800b342:	f04f 0300 	mov.w	r3, #0
 800b346:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Min_in = 0;
 800b34a:	4bc4      	ldr	r3, [pc, #784]	@ (800b65c <MODE_exe_m4+0x324>)
 800b34c:	2200      	movs	r2, #0
 800b34e:	701a      	strb	r2, [r3, #0]
	Sec_in = 0;
 800b350:	4bc3      	ldr	r3, [pc, #780]	@ (800b660 <MODE_exe_m4+0x328>)
 800b352:	2200      	movs	r2, #0
 800b354:	701a      	strb	r2, [r3, #0]
	Msec_in = 0;
 800b356:	4bc3      	ldr	r3, [pc, #780]	@ (800b664 <MODE_exe_m4+0x32c>)
 800b358:	2200      	movs	r2, #0
 800b35a:	801a      	strh	r2, [r3, #0]

	GYRO_SetRef();
 800b35c:	f7fe fb60 	bl	8009a20 <GYRO_SetRef>
	CTRL_clrData();
 800b360:	f7fb f870 	bl	8006444 <CTRL_clrData>
	CTRL_clrAngleErrSum();
 800b364:	f7fb f8b6 	bl	80064d4 <CTRL_clrAngleErrSum>
	CTRL_clrSpeedErrSum();
 800b368:	f7fb f8c8 	bl	80064fc <CTRL_clrSpeedErrSum>
	CTRL_clrNowData();
 800b36c:	f7fb f8da 	bl	8006524 <CTRL_clrNowData>

	switch( en_Mode ){
 800b370:	4bbd      	ldr	r3, [pc, #756]	@ (800b668 <MODE_exe_m4+0x330>)
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	2b07      	cmp	r3, #7
 800b376:	f200 8166 	bhi.w	800b646 <MODE_exe_m4+0x30e>
 800b37a:	a201      	add	r2, pc, #4	@ (adr r2, 800b380 <MODE_exe_m4+0x48>)
 800b37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b380:	0800b3a1 	.word	0x0800b3a1
 800b384:	0800b477 	.word	0x0800b477
 800b388:	0800b54d 	.word	0x0800b54d
 800b38c:	0800b61f 	.word	0x0800b61f
 800b390:	0800b627 	.word	0x0800b627
 800b394:	0800b62f 	.word	0x0800b62f
 800b398:	0800b637 	.word	0x0800b637
 800b39c:	0800b63f 	.word	0x0800b63f

		case MODE_0:
			SetLED(0x0e);
 800b3a0:	200e      	movs	r0, #14
 800b3a2:	f7f6 fd99 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_SLOW,PARAM_VERY_SLOW,PARAM_VERY_SLOW,SEARCH_SPEED,
 800b3a6:	ed9f 2ab1 	vldr	s4, [pc, #708]	@ 800b66c <MODE_exe_m4+0x334>
 800b3aa:	eddf 1ab0 	vldr	s3, [pc, #704]	@ 800b66c <MODE_exe_m4+0x334>
 800b3ae:	ed9f 1aaf 	vldr	s2, [pc, #700]	@ 800b66c <MODE_exe_m4+0x334>
 800b3b2:	eddf 0aae 	vldr	s1, [pc, #696]	@ 800b66c <MODE_exe_m4+0x334>
 800b3b6:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 800b66c <MODE_exe_m4+0x334>
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	2100      	movs	r1, #0
 800b3be:	2000      	movs	r0, #0
 800b3c0:	f7fe ff82 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );								
*/			SetLED(0x00);
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	f7f6 fd87 	bl	8001ed8 <SetLED>
			LL_mDelay(100);
 800b3ca:	2064      	movs	r0, #100	@ 0x64
 800b3cc:	f010 fbba 	bl	801bb44 <LL_mDelay>
			MAP_Goalsize(1);
 800b3d0:	2001      	movs	r0, #1
 800b3d2:	f00d f8c5 	bl	8018560 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );						
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	2100      	movs	r1, #0
 800b3da:	2000      	movs	r0, #0
 800b3dc:	f00b fbf0 	bl	8016bc0 <MAP_setPos>

			MAP_searchGoal(GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, SEARCH, SEARCH_SLA );			
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	2109      	movs	r1, #9
 800b3e6:	2014      	movs	r0, #20
 800b3e8:	f00e f908 	bl	80195fc <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800b3ec:	f7f6 fdf6 	bl	8001fdc <SW_IsOn_1>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d006      	beq.n	800b404 <MODE_exe_m4+0xcc>
 800b3f6:	f7fe f973 	bl	80096e0 <SYS_isOutOfCtrl>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d101      	bne.n	800b404 <MODE_exe_m4+0xcc>
			else{
				Map_Write();
 800b400:	f00b fb54 	bl	8016aac <Map_Write>
			}
			
			SetLED(0x0e);
 800b404:	200e      	movs	r0, #14
 800b406:	f7f6 fd67 	bl	8001ed8 <SetLED>
			MAP_Goalsize(1);
 800b40a:	2001      	movs	r0, #1
 800b40c:	f00d f8a8 	bl	8018560 <MAP_Goalsize>
			SetLED(0x00);
 800b410:	2000      	movs	r0, #0
 800b412:	f7f6 fd61 	bl	8001ed8 <SetLED>

			MAP_searchGoal( 0, 0, SEARCH, SEARCH_SLA );
 800b416:	2301      	movs	r3, #1
 800b418:	2200      	movs	r2, #0
 800b41a:	2100      	movs	r1, #0
 800b41c:	2000      	movs	r0, #0
 800b41e:	f00e f8ed 	bl	80195fc <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800b422:	f7f6 fddb 	bl	8001fdc <SW_IsOn_1>
 800b426:	4603      	mov	r3, r0
 800b428:	2b01      	cmp	r3, #1
 800b42a:	f000 810e 	beq.w	800b64a <MODE_exe_m4+0x312>
 800b42e:	f7fe f957 	bl	80096e0 <SYS_isOutOfCtrl>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	f040 8108 	bne.w	800b64a <MODE_exe_m4+0x312>
			else{
				Map_Write();
 800b43a:	f00b fb37 	bl	8016aac <Map_Write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800b43e:	2200      	movs	r2, #0
 800b440:	2100      	movs	r1, #0
 800b442:	2000      	movs	r0, #0
 800b444:	f00b fbbc 	bl	8016bc0 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b448:	2201      	movs	r2, #1
 800b44a:	2109      	movs	r1, #9
 800b44c:	2014      	movs	r0, #20
 800b44e:	f00c f97b 	bl	8017748 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b452:	1dfb      	adds	r3, r7, #7
 800b454:	9301      	str	r3, [sp, #4]
 800b456:	2309      	movs	r3, #9
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	2314      	movs	r3, #20
 800b45c:	2200      	movs	r2, #0
 800b45e:	2100      	movs	r1, #0
 800b460:	2000      	movs	r0, #0
 800b462:	f008 ff19 	bl	8014298 <MAP_makeCmdList>
				MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b466:	f009 f96f 	bl	8014748 <MAP_makeSlaCmdList>
				MAP_makeSkewCmdList();
 800b46a:	f009 fae9 	bl	8014a40 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800b46e:	2000      	movs	r0, #0
 800b470:	f7f6 fd32 	bl	8001ed8 <SetLED>
			}
			break;
 800b474:	e0e9      	b.n	800b64a <MODE_exe_m4+0x312>

		case MODE_1:
			SetLED(0x0e);
 800b476:	200e      	movs	r0, #14
 800b478:	f7f6 fd2e 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_SLOW,PARAM_VERY_SLOW,PARAM_VERY_SLOW,SEARCH_SPEED,
 800b47c:	ed9f 2a7b 	vldr	s4, [pc, #492]	@ 800b66c <MODE_exe_m4+0x334>
 800b480:	eddf 1a7a 	vldr	s3, [pc, #488]	@ 800b66c <MODE_exe_m4+0x334>
 800b484:	ed9f 1a79 	vldr	s2, [pc, #484]	@ 800b66c <MODE_exe_m4+0x334>
 800b488:	eddf 0a78 	vldr	s1, [pc, #480]	@ 800b66c <MODE_exe_m4+0x334>
 800b48c:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 800b66c <MODE_exe_m4+0x334>
 800b490:	2200      	movs	r2, #0
 800b492:	2100      	movs	r1, #0
 800b494:	2000      	movs	r0, #0
 800b496:	f7fe ff17 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );							
*/			SetLED(0x00);
 800b49a:	2000      	movs	r0, #0
 800b49c:	f7f6 fd1c 	bl	8001ed8 <SetLED>
			LL_mDelay(100);
 800b4a0:	2064      	movs	r0, #100	@ 0x64
 800b4a2:	f010 fb4f 	bl	801bb44 <LL_mDelay>
			MAP_Goalsize(1);
 800b4a6:	2001      	movs	r0, #1
 800b4a8:	f00d f85a 	bl	8018560 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	f00b fb85 	bl	8016bc0 <MAP_setPos>

			MAP_searchGoalKnown(GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, SEARCH, SEARCH_SLA );			
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	2109      	movs	r1, #9
 800b4bc:	2014      	movs	r0, #20
 800b4be:	f00e f9f5 	bl	80198ac <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800b4c2:	f7f6 fd8b 	bl	8001fdc <SW_IsOn_1>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d006      	beq.n	800b4da <MODE_exe_m4+0x1a2>
 800b4cc:	f7fe f908 	bl	80096e0 <SYS_isOutOfCtrl>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <MODE_exe_m4+0x1a2>
			else{
				Map_Write();
 800b4d6:	f00b fae9 	bl	8016aac <Map_Write>
			}
			
			SetLED(0x0e);
 800b4da:	200e      	movs	r0, #14
 800b4dc:	f7f6 fcfc 	bl	8001ed8 <SetLED>
			MAP_Goalsize(1);
 800b4e0:	2001      	movs	r0, #1
 800b4e2:	f00d f83d 	bl	8018560 <MAP_Goalsize>
			SetLED(0x00);
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	f7f6 fcf6 	bl	8001ed8 <SetLED>

			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SLA );
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	f00e f9da 	bl	80198ac <MAP_searchGoalKnown>
//			MAP_searchGoal( 0, 0, SEARCH, SEARCH_RETURN );

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800b4f8:	f7f6 fd70 	bl	8001fdc <SW_IsOn_1>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	f000 80a5 	beq.w	800b64e <MODE_exe_m4+0x316>
 800b504:	f7fe f8ec 	bl	80096e0 <SYS_isOutOfCtrl>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f040 809f 	bne.w	800b64e <MODE_exe_m4+0x316>
			else{
				Map_Write();
 800b510:	f00b facc 	bl	8016aac <Map_Write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800b514:	2200      	movs	r2, #0
 800b516:	2100      	movs	r1, #0
 800b518:	2000      	movs	r0, #0
 800b51a:	f00b fb51 	bl	8016bc0 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b51e:	2201      	movs	r2, #1
 800b520:	2109      	movs	r1, #9
 800b522:	2014      	movs	r0, #20
 800b524:	f00c f910 	bl	8017748 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b528:	1dfb      	adds	r3, r7, #7
 800b52a:	9301      	str	r3, [sp, #4]
 800b52c:	2309      	movs	r3, #9
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	2314      	movs	r3, #20
 800b532:	2200      	movs	r2, #0
 800b534:	2100      	movs	r1, #0
 800b536:	2000      	movs	r0, #0
 800b538:	f008 feae 	bl	8014298 <MAP_makeCmdList>
				MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b53c:	f009 f904 	bl	8014748 <MAP_makeSlaCmdList>
				MAP_makeSkewCmdList();
 800b540:	f009 fa7e 	bl	8014a40 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800b544:	2000      	movs	r0, #0
 800b546:	f7f6 fcc7 	bl	8001ed8 <SetLED>
			}
			break;
 800b54a:	e080      	b.n	800b64e <MODE_exe_m4+0x316>

		case MODE_2:
			SetLED(0x0e);
 800b54c:	200e      	movs	r0, #14
 800b54e:	f7f6 fcc3 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_SLOW,PARAM_VERY_SLOW,PARAM_VERY_SLOW,SEARCH_SPEED,
 800b552:	ed9f 2a46 	vldr	s4, [pc, #280]	@ 800b66c <MODE_exe_m4+0x334>
 800b556:	eddf 1a45 	vldr	s3, [pc, #276]	@ 800b66c <MODE_exe_m4+0x334>
 800b55a:	ed9f 1a44 	vldr	s2, [pc, #272]	@ 800b66c <MODE_exe_m4+0x334>
 800b55e:	eddf 0a43 	vldr	s1, [pc, #268]	@ 800b66c <MODE_exe_m4+0x334>
 800b562:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 800b66c <MODE_exe_m4+0x334>
 800b566:	2200      	movs	r2, #0
 800b568:	2100      	movs	r1, #0
 800b56a:	2000      	movs	r0, #0
 800b56c:	f7fe feac 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_135);
			MOT_setSlaStaSpeed( SEARCH_SPEED , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );							
*/			SetLED(0x00);
 800b570:	2000      	movs	r0, #0
 800b572:	f7f6 fcb1 	bl	8001ed8 <SetLED>
			LL_mDelay(100);
 800b576:	2064      	movs	r0, #100	@ 0x64
 800b578:	f010 fae4 	bl	801bb44 <LL_mDelay>
//			PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
			MAP_Goalsize(1);
 800b57c:	2001      	movs	r0, #1
 800b57e:	f00c ffef 	bl	8018560 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 800b582:	2200      	movs	r2, #0
 800b584:	2100      	movs	r1, #0
 800b586:	2000      	movs	r0, #0
 800b588:	f00b fb1a 	bl	8016bc0 <MAP_setPos>

			MAP_searchGoalKnown(GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, SEARCH, SEARCH_SLA );			
 800b58c:	2301      	movs	r3, #1
 800b58e:	2200      	movs	r2, #0
 800b590:	2109      	movs	r1, #9
 800b592:	2014      	movs	r0, #20
 800b594:	f00e f98a 	bl	80198ac <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800b598:	f7f6 fd20 	bl	8001fdc <SW_IsOn_1>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d006      	beq.n	800b5b0 <MODE_exe_m4+0x278>
 800b5a2:	f7fe f89d 	bl	80096e0 <SYS_isOutOfCtrl>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d101      	bne.n	800b5b0 <MODE_exe_m4+0x278>
			else{
				Map_Write();
 800b5ac:	f00b fa7e 	bl	8016aac <Map_Write>
			}
			
			SetLED(0x0e);
 800b5b0:	200e      	movs	r0, #14
 800b5b2:	f7f6 fc91 	bl	8001ed8 <SetLED>
			MAP_Goalsize(1);
 800b5b6:	2001      	movs	r0, #1
 800b5b8:	f00c ffd2 	bl	8018560 <MAP_Goalsize>
			SetLED(0x00);
 800b5bc:	2000      	movs	r0, #0
 800b5be:	f7f6 fc8b 	bl	8001ed8 <SetLED>

			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SLA );
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	f00e f96f 	bl	80198ac <MAP_searchGoalKnown>
//			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_RETURN );

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800b5ce:	f7f6 fd05 	bl	8001fdc <SW_IsOn_1>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d03c      	beq.n	800b652 <MODE_exe_m4+0x31a>
 800b5d8:	f7fe f882 	bl	80096e0 <SYS_isOutOfCtrl>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d137      	bne.n	800b652 <MODE_exe_m4+0x31a>
			else{
				Map_Write();
 800b5e2:	f00b fa63 	bl	8016aac <Map_Write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	2000      	movs	r0, #0
 800b5ec:	f00b fae8 	bl	8016bc0 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	2109      	movs	r1, #9
 800b5f4:	2014      	movs	r0, #20
 800b5f6:	f00c f8a7 	bl	8017748 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b5fa:	1dfb      	adds	r3, r7, #7
 800b5fc:	9301      	str	r3, [sp, #4]
 800b5fe:	2309      	movs	r3, #9
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	2314      	movs	r3, #20
 800b604:	2200      	movs	r2, #0
 800b606:	2100      	movs	r1, #0
 800b608:	2000      	movs	r0, #0
 800b60a:	f008 fe45 	bl	8014298 <MAP_makeCmdList>
				MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b60e:	f009 f89b 	bl	8014748 <MAP_makeSlaCmdList>
				MAP_makeSkewCmdList();
 800b612:	f009 fa15 	bl	8014a40 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800b616:	2000      	movs	r0, #0
 800b618:	f7f6 fc5e 	bl	8001ed8 <SetLED>
			}
			break;
 800b61c:	e019      	b.n	800b652 <MODE_exe_m4+0x31a>

		case MODE_3:
			SetLED(0x0e);
 800b61e:	200e      	movs	r0, #14
 800b620:	f7f6 fc5a 	bl	8001ed8 <SetLED>
			
			break;
 800b624:	e016      	b.n	800b654 <MODE_exe_m4+0x31c>

		case MODE_4:
			SetLED(0x0e);
 800b626:	200e      	movs	r0, #14
 800b628:	f7f6 fc56 	bl	8001ed8 <SetLED>
			break;
 800b62c:	e012      	b.n	800b654 <MODE_exe_m4+0x31c>

		case MODE_5:
			SetLED(0x0e);
 800b62e:	200e      	movs	r0, #14
 800b630:	f7f6 fc52 	bl	8001ed8 <SetLED>
			break;
 800b634:	e00e      	b.n	800b654 <MODE_exe_m4+0x31c>

		case MODE_6:
			SetLED(0x0e);
 800b636:	200e      	movs	r0, #14
 800b638:	f7f6 fc4e 	bl	8001ed8 <SetLED>
			break;
 800b63c:	e00a      	b.n	800b654 <MODE_exe_m4+0x31c>

		case MODE_7:
			SetLED(0x0e);
 800b63e:	200e      	movs	r0, #14
 800b640:	f7f6 fc4a 	bl	8001ed8 <SetLED>
			//cant use
			break;
 800b644:	e006      	b.n	800b654 <MODE_exe_m4+0x31c>

		default:
			break;
 800b646:	bf00      	nop
 800b648:	e004      	b.n	800b654 <MODE_exe_m4+0x31c>
			break;
 800b64a:	bf00      	nop
 800b64c:	e002      	b.n	800b654 <MODE_exe_m4+0x31c>
			break;
 800b64e:	bf00      	nop
 800b650:	e000      	b.n	800b654 <MODE_exe_m4+0x31c>
			break;
 800b652:	bf00      	nop
	}
}
 800b654:	bf00      	nop
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	20000217 	.word	0x20000217
 800b660:	20000216 	.word	0x20000216
 800b664:	20000214 	.word	0x20000214
 800b668:	20017b28 	.word	0x20017b28
 800b66c:	3e99999a 	.word	0x3e99999a

0800b670 <MODE_exe_m5>:

void MODE_exe_m5( void )
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 800b676:	f04f 0200 	mov.w	r2, #0
 800b67a:	f04f 0300 	mov.w	r3, #0
 800b67e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	printf("\r\n turn 45 \r\r");
 800b682:	48d2      	ldr	r0, [pc, #840]	@ (800b9cc <MODE_exe_m5+0x35c>)
 800b684:	f012 fb52 	bl	801dd2c <iprintf>
	PARAM_makeSra( 0.5, 550.0f, 7.50f,3000*PI,  SLA_45 );
 800b688:	2001      	movs	r0, #1
 800b68a:	eddf 1ad1 	vldr	s3, [pc, #836]	@ 800b9d0 <MODE_exe_m5+0x360>
 800b68e:	eeb1 1a0e 	vmov.f32	s2, #30	@ 0x40f00000  7.5
 800b692:	eddf 0ad0 	vldr	s1, [pc, #832]	@ 800b9d4 <MODE_exe_m5+0x364>
 800b696:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800b69a:	f7f7 f8cd 	bl	8002838 <PARAM_makeSra>
	printf("\r\n turn 90 \r\r");		
 800b69e:	48ce      	ldr	r0, [pc, #824]	@ (800b9d8 <MODE_exe_m5+0x368>)
 800b6a0:	f012 fb44 	bl	801dd2c <iprintf>
	PARAM_makeSra( 0.5, 700.0f, 10.00f,3000*PI,  SLA_90 );	
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	eddf 1aca 	vldr	s3, [pc, #808]	@ 800b9d0 <MODE_exe_m5+0x360>
 800b6aa:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800b6ae:	eddf 0acb 	vldr	s1, [pc, #812]	@ 800b9dc <MODE_exe_m5+0x36c>
 800b6b2:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800b6b6:	f7f7 f8bf 	bl	8002838 <PARAM_makeSra>
//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
	printf("\r\n turn 135 \r\r");	
 800b6ba:	48c9      	ldr	r0, [pc, #804]	@ (800b9e0 <MODE_exe_m5+0x370>)
 800b6bc:	f012 fb36 	bl	801dd2c <iprintf>
	PARAM_makeSra( 0.5, 750.0f, 10.00f,3000*PI,  SLA_135 );	
 800b6c0:	2002      	movs	r0, #2
 800b6c2:	eddf 1ac3 	vldr	s3, [pc, #780]	@ 800b9d0 <MODE_exe_m5+0x360>
 800b6c6:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800b6ca:	eddf 0ac6 	vldr	s1, [pc, #792]	@ 800b9e4 <MODE_exe_m5+0x374>
 800b6ce:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800b6d2:	f7f7 f8b1 	bl	8002838 <PARAM_makeSra>
	printf("\r\n turn N90 \r\r");	
 800b6d6:	48c4      	ldr	r0, [pc, #784]	@ (800b9e8 <MODE_exe_m5+0x378>)
 800b6d8:	f012 fb28 	bl	801dd2c <iprintf>
	PARAM_makeSra( 0.5, 800.0f, 11.00f,3000*PI,  SLA_N90 );	
 800b6dc:	2003      	movs	r0, #3
 800b6de:	eddf 1abc 	vldr	s3, [pc, #752]	@ 800b9d0 <MODE_exe_m5+0x360>
 800b6e2:	eeb2 1a06 	vmov.f32	s2, #38	@ 0x41300000  11.0
 800b6e6:	eddf 0ac1 	vldr	s1, [pc, #772]	@ 800b9ec <MODE_exe_m5+0x37c>
 800b6ea:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800b6ee:	f7f7 f8a3 	bl	8002838 <PARAM_makeSra>

	Map_Copy();
 800b6f2:	f00b f9ef 	bl	8016ad4 <Map_Copy>

	GYRO_SetRef();
 800b6f6:	f7fe f993 	bl	8009a20 <GYRO_SetRef>
	CTRL_clrData();
 800b6fa:	f7fa fea3 	bl	8006444 <CTRL_clrData>
	CTRL_clrAngleErrSum();
 800b6fe:	f7fa fee9 	bl	80064d4 <CTRL_clrAngleErrSum>
	CTRL_clrSpeedErrSum();
 800b702:	f7fa fefb 	bl	80064fc <CTRL_clrSpeedErrSum>
	CTRL_clrNowData();
 800b706:	f7fa ff0d 	bl	8006524 <CTRL_clrNowData>

	switch( en_Mode ){
 800b70a:	4bb9      	ldr	r3, [pc, #740]	@ (800b9f0 <MODE_exe_m5+0x380>)
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	2b07      	cmp	r3, #7
 800b710:	f200 826d 	bhi.w	800bbee <MODE_exe_m5+0x57e>
 800b714:	a201      	add	r2, pc, #4	@ (adr r2, 800b71c <MODE_exe_m5+0xac>)
 800b716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71a:	bf00      	nop
 800b71c:	0800b73d 	.word	0x0800b73d
 800b720:	0800b7df 	.word	0x0800b7df
 800b724:	0800b881 	.word	0x0800b881
 800b728:	0800b923 	.word	0x0800b923
 800b72c:	0800b9fd 	.word	0x0800b9fd
 800b730:	0800ba9f 	.word	0x0800ba9f
 800b734:	0800bb41 	.word	0x0800bb41
 800b738:	0800bbe7 	.word	0x0800bbe7

		case MODE_0:
			SetLED(0x0e);
 800b73c:	200e      	movs	r0, #14
 800b73e:	f7f6 fbcb 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*4.0,
 800b742:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800b746:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800b74a:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800b74e:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800b752:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 800b9f4 <MODE_exe_m5+0x384>
 800b756:	2202      	movs	r2, #2
 800b758:	2100      	movs	r1, #0
 800b75a:	2003      	movs	r0, #3
 800b75c:	f7fe fdb4 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5 , SLA_135);
			MOT_setSlaStaSpeed( 0.5 , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
*/			SetLED(0x00);	
 800b760:	2000      	movs	r0, #0
 800b762:	f7f6 fbb9 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b766:	2200      	movs	r2, #0
 800b768:	2100      	movs	r1, #0
 800b76a:	2000      	movs	r0, #0
 800b76c:	f00b fa28 	bl	8016bc0 <MAP_setPos>
			MAP_Goalsize(1);
 800b770:	2001      	movs	r0, #1
 800b772:	f00c fef5 	bl	8018560 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b776:	2201      	movs	r2, #1
 800b778:	2109      	movs	r1, #9
 800b77a:	2014      	movs	r0, #20
 800b77c:	f00b ffe4 	bl	8017748 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b780:	1dfb      	adds	r3, r7, #7
 800b782:	9301      	str	r3, [sp, #4]
 800b784:	2309      	movs	r3, #9
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	2314      	movs	r3, #20
 800b78a:	2200      	movs	r2, #0
 800b78c:	2100      	movs	r1, #0
 800b78e:	2000      	movs	r0, #0
 800b790:	f008 fd82 	bl	8014298 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b794:	f008 ffd8 	bl	8014748 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800b798:	f009 f952 	bl	8014a40 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800b79c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b7a0:	f010 f9d0 	bl	801bb44 <LL_mDelay>
			Set_DutyTIM8(600);
 800b7a4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b7a8:	f7fa fb6a 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);	
 800b7ac:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b7b0:	f010 f9c8 	bl	801bb44 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SLA );												
 800b7b4:	2001      	movs	r0, #1
 800b7b6:	f00a f8f9 	bl	80159ac <MAP_drive>
			Set_DutyTIM8(0);
 800b7ba:	2000      	movs	r0, #0
 800b7bc:	f7fa fb60 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b7c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b7c4:	f010 f9be 	bl	801bb44 <LL_mDelay>
			MOT_turn(MOT_R180);
 800b7c8:	2002      	movs	r0, #2
 800b7ca:	f004 fa01 	bl	800fbd0 <MOT_turn>
			MAP_actGoalLED();
 800b7ce:	f00c fe91 	bl	80184f4 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800b7d2:	2000      	movs	r0, #0
 800b7d4:	f7fa fb54 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b7d8:	f7fd ff76 	bl	80096c8 <Failsafe_flag_off>
			break;
 800b7dc:	e208      	b.n	800bbf0 <MODE_exe_m5+0x580>

		case MODE_1:
			SetLED(0x0e);
 800b7de:	200e      	movs	r0, #14
 800b7e0:	f7f6 fb7a 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*5.0,
 800b7e4:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800b7e8:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800b7ec:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800b7f0:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800b7f4:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 800b7f8:	2202      	movs	r2, #2
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	2003      	movs	r0, #3
 800b7fe:	f7fe fd63 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5 , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
*/								
			SetLED(0x00);
 800b802:	2000      	movs	r0, #0
 800b804:	f7f6 fb68 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b808:	2200      	movs	r2, #0
 800b80a:	2100      	movs	r1, #0
 800b80c:	2000      	movs	r0, #0
 800b80e:	f00b f9d7 	bl	8016bc0 <MAP_setPos>
			MAP_Goalsize(1);
 800b812:	2001      	movs	r0, #1
 800b814:	f00c fea4 	bl	8018560 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b818:	2201      	movs	r2, #1
 800b81a:	2109      	movs	r1, #9
 800b81c:	2014      	movs	r0, #20
 800b81e:	f00b ff93 	bl	8017748 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b822:	1dfb      	adds	r3, r7, #7
 800b824:	9301      	str	r3, [sp, #4]
 800b826:	2309      	movs	r3, #9
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	2314      	movs	r3, #20
 800b82c:	2200      	movs	r2, #0
 800b82e:	2100      	movs	r1, #0
 800b830:	2000      	movs	r0, #0
 800b832:	f008 fd31 	bl	8014298 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b836:	f008 ff87 	bl	8014748 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800b83a:	f009 f901 	bl	8014a40 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800b83e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b842:	f010 f97f 	bl	801bb44 <LL_mDelay>
			Set_DutyTIM8(600);
 800b846:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b84a:	f7fa fb19 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800b84e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b852:	f010 f977 	bl	801bb44 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SLA );
 800b856:	2001      	movs	r0, #1
 800b858:	f00a f8a8 	bl	80159ac <MAP_drive>
			Set_DutyTIM8(0);
 800b85c:	2000      	movs	r0, #0
 800b85e:	f7fa fb0f 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b862:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b866:	f010 f96d 	bl	801bb44 <LL_mDelay>
			MOT_turn(MOT_R180);
 800b86a:	2002      	movs	r0, #2
 800b86c:	f004 f9b0 	bl	800fbd0 <MOT_turn>
			MAP_actGoalLED();
 800b870:	f00c fe40 	bl	80184f4 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800b874:	2000      	movs	r0, #0
 800b876:	f7fa fb03 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b87a:	f7fd ff25 	bl	80096c8 <Failsafe_flag_off>
			break;
 800b87e:	e1b7      	b.n	800bbf0 <MODE_exe_m5+0x580>

		case MODE_2:
			SetLED(0x0e);
 800b880:	200e      	movs	r0, #14
 800b882:	f7f6 fb29 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*6.0,
 800b886:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800b88a:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800b88e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800b892:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800b896:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 800b9f8 <MODE_exe_m5+0x388>
 800b89a:	2202      	movs	r2, #2
 800b89c:	2100      	movs	r1, #0
 800b89e:	2003      	movs	r0, #3
 800b8a0:	f7fe fd12 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5 , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
*/								
			SetLED(0x00);
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	f7f6 fb17 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	f00b f986 	bl	8016bc0 <MAP_setPos>
			MAP_Goalsize(1);
 800b8b4:	2001      	movs	r0, #1
 800b8b6:	f00c fe53 	bl	8018560 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	2109      	movs	r1, #9
 800b8be:	2014      	movs	r0, #20
 800b8c0:	f00b ff42 	bl	8017748 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b8c4:	1dfb      	adds	r3, r7, #7
 800b8c6:	9301      	str	r3, [sp, #4]
 800b8c8:	2309      	movs	r3, #9
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	2314      	movs	r3, #20
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	f008 fce0 	bl	8014298 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b8d8:	f008 ff36 	bl	8014748 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800b8dc:	f009 f8b0 	bl	8014a40 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800b8e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b8e4:	f010 f92e 	bl	801bb44 <LL_mDelay>
			Set_DutyTIM8(600);
 800b8e8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b8ec:	f7fa fac8 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);												
 800b8f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b8f4:	f010 f926 	bl	801bb44 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SLA );
 800b8f8:	2001      	movs	r0, #1
 800b8fa:	f00a f857 	bl	80159ac <MAP_drive>
			Set_DutyTIM8(0);
 800b8fe:	2000      	movs	r0, #0
 800b900:	f7fa fabe 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b904:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b908:	f010 f91c 	bl	801bb44 <LL_mDelay>
			MOT_turn(MOT_R180);
 800b90c:	2002      	movs	r0, #2
 800b90e:	f004 f95f 	bl	800fbd0 <MOT_turn>
			MAP_actGoalLED();
 800b912:	f00c fdef 	bl	80184f4 <MAP_actGoalLED>
			Set_DutyTIM8(0);			
 800b916:	2000      	movs	r0, #0
 800b918:	f7fa fab2 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b91c:	f7fd fed4 	bl	80096c8 <Failsafe_flag_off>
			break;
 800b920:	e166      	b.n	800bbf0 <MODE_exe_m5+0x580>

		case MODE_3:
			SetLED(0x0e);
 800b922:	200e      	movs	r0, #14
 800b924:	f7f6 fad8 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*4.0,
 800b928:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800b92c:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800b930:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800b934:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800b938:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 800b9f4 <MODE_exe_m5+0x384>
 800b93c:	2202      	movs	r2, #2
 800b93e:	2100      	movs	r1, #0
 800b940:	2003      	movs	r0, #3
 800b942:	f7fe fcc1 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5 , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
*/								
			SetLED(0x00);
 800b946:	2000      	movs	r0, #0
 800b948:	f7f6 fac6 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800b94c:	2200      	movs	r2, #0
 800b94e:	2100      	movs	r1, #0
 800b950:	2000      	movs	r0, #0
 800b952:	f00b f935 	bl	8016bc0 <MAP_setPos>
			MAP_Goalsize(1);
 800b956:	2001      	movs	r0, #1
 800b958:	f00c fe02 	bl	8018560 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800b95c:	2201      	movs	r2, #1
 800b95e:	2109      	movs	r1, #9
 800b960:	2014      	movs	r0, #20
 800b962:	f00b fef1 	bl	8017748 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800b966:	1dfb      	adds	r3, r7, #7
 800b968:	9301      	str	r3, [sp, #4]
 800b96a:	2309      	movs	r3, #9
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	2314      	movs	r3, #20
 800b970:	2200      	movs	r2, #0
 800b972:	2100      	movs	r1, #0
 800b974:	2000      	movs	r0, #0
 800b976:	f008 fc8f 	bl	8014298 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800b97a:	f008 fee5 	bl	8014748 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800b97e:	f009 f85f 	bl	8014a40 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800b982:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b986:	f010 f8dd 	bl	801bb44 <LL_mDelay>
			Set_DutyTIM8(600);
 800b98a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800b98e:	f7fa fa77 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);			
 800b992:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b996:	f010 f8d5 	bl	801bb44 <LL_mDelay>

			log_flag_on();										
 800b99a:	f7fe fa9f 	bl	8009edc <log_flag_on>
			MAP_drive( MAP_DRIVE_SKEW );
 800b99e:	2002      	movs	r0, #2
 800b9a0:	f00a f804 	bl	80159ac <MAP_drive>
			log_flag_off();
 800b9a4:	f7fe faa6 	bl	8009ef4 <log_flag_off>
			Set_DutyTIM8(0);
 800b9a8:	2000      	movs	r0, #0
 800b9aa:	f7fa fa69 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800b9ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b9b2:	f010 f8c7 	bl	801bb44 <LL_mDelay>
			MOT_turn(MOT_R180);
 800b9b6:	2002      	movs	r0, #2
 800b9b8:	f004 f90a 	bl	800fbd0 <MOT_turn>
			MAP_actGoalLED();
 800b9bc:	f00c fd9a 	bl	80184f4 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	f7fa fa5d 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800b9c6:	f7fd fe7f 	bl	80096c8 <Failsafe_flag_off>
			break;
 800b9ca:	e111      	b.n	800bbf0 <MODE_exe_m5+0x580>
 800b9cc:	08021cac 	.word	0x08021cac
 800b9d0:	46134315 	.word	0x46134315
 800b9d4:	44098000 	.word	0x44098000
 800b9d8:	08021cbc 	.word	0x08021cbc
 800b9dc:	442f0000 	.word	0x442f0000
 800b9e0:	08021ccc 	.word	0x08021ccc
 800b9e4:	443b8000 	.word	0x443b8000
 800b9e8:	08021cdc 	.word	0x08021cdc
 800b9ec:	44480000 	.word	0x44480000
 800b9f0:	20017b28 	.word	0x20017b28
 800b9f4:	3f99999a 	.word	0x3f99999a
 800b9f8:	3fe66666 	.word	0x3fe66666

		case MODE_4:
			SetLED(0x0e);
 800b9fc:	200e      	movs	r0, #14
 800b9fe:	f7f6 fa6b 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*5.0,
 800ba02:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800ba06:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800ba0a:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800ba0e:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800ba12:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 800ba16:	2202      	movs	r2, #2
 800ba18:	2100      	movs	r1, #0
 800ba1a:	2004      	movs	r0, #4
 800ba1c:	f7fe fc54 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5 , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
*/							
			SetLED(0x00);
 800ba20:	2000      	movs	r0, #0
 800ba22:	f7f6 fa59 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800ba26:	2200      	movs	r2, #0
 800ba28:	2100      	movs	r1, #0
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	f00b f8c8 	bl	8016bc0 <MAP_setPos>
			MAP_Goalsize(1);
 800ba30:	2001      	movs	r0, #1
 800ba32:	f00c fd95 	bl	8018560 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800ba36:	2201      	movs	r2, #1
 800ba38:	2109      	movs	r1, #9
 800ba3a:	2014      	movs	r0, #20
 800ba3c:	f00b fe84 	bl	8017748 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800ba40:	1dfb      	adds	r3, r7, #7
 800ba42:	9301      	str	r3, [sp, #4]
 800ba44:	2309      	movs	r3, #9
 800ba46:	9300      	str	r3, [sp, #0]
 800ba48:	2314      	movs	r3, #20
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	2000      	movs	r0, #0
 800ba50:	f008 fc22 	bl	8014298 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800ba54:	f008 fe78 	bl	8014748 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800ba58:	f008 fff2 	bl	8014a40 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800ba5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ba60:	f010 f870 	bl	801bb44 <LL_mDelay>
			Set_DutyTIM8(600);
 800ba64:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800ba68:	f7fa fa0a 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800ba6c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800ba70:	f010 f868 	bl	801bb44 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800ba74:	2002      	movs	r0, #2
 800ba76:	f009 ff99 	bl	80159ac <MAP_drive>
			Set_DutyTIM8(0);
 800ba7a:	2000      	movs	r0, #0
 800ba7c:	f7fa fa00 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800ba80:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ba84:	f010 f85e 	bl	801bb44 <LL_mDelay>
			MOT_turn(MOT_R180);
 800ba88:	2002      	movs	r0, #2
 800ba8a:	f004 f8a1 	bl	800fbd0 <MOT_turn>
			MAP_actGoalLED();
 800ba8e:	f00c fd31 	bl	80184f4 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800ba92:	2000      	movs	r0, #0
 800ba94:	f7fa f9f4 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800ba98:	f7fd fe16 	bl	80096c8 <Failsafe_flag_off>
			break;
 800ba9c:	e0a8      	b.n	800bbf0 <MODE_exe_m5+0x580>

		case MODE_5:
			SetLED(0x0e);
 800ba9e:	200e      	movs	r0, #14
 800baa0:	f7f6 fa1a 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*6.0,
 800baa4:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800baa8:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800baac:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800bab0:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800bab4:	ed1f 0a30 	vldr	s0, [pc, #-192]	@ 800b9f8 <MODE_exe_m5+0x388>
 800bab8:	2202      	movs	r2, #2
 800baba:	2100      	movs	r1, #0
 800babc:	2004      	movs	r0, #4
 800babe:	f7fe fc03 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5 , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
*/										
			SetLED(0x00);
 800bac2:	2000      	movs	r0, #0
 800bac4:	f7f6 fa08 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800bac8:	2200      	movs	r2, #0
 800baca:	2100      	movs	r1, #0
 800bacc:	2000      	movs	r0, #0
 800bace:	f00b f877 	bl	8016bc0 <MAP_setPos>
			MAP_Goalsize(1);
 800bad2:	2001      	movs	r0, #1
 800bad4:	f00c fd44 	bl	8018560 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, BEST_WAY );					// 等高線�?�ップを作る
 800bad8:	2201      	movs	r2, #1
 800bada:	2109      	movs	r1, #9
 800badc:	2014      	movs	r0, #20
 800bade:	f00b fe33 	bl	8017748 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_DEF, GOAL_MAP_Y_DEF, &en_endDir2 );		// ドライブコマンド作�??
 800bae2:	1dfb      	adds	r3, r7, #7
 800bae4:	9301      	str	r3, [sp, #4]
 800bae6:	2309      	movs	r3, #9
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	2314      	movs	r3, #20
 800baec:	2200      	movs	r2, #0
 800baee:	2100      	movs	r1, #0
 800baf0:	2000      	movs	r0, #0
 800baf2:	f008 fbd1 	bl	8014298 <MAP_makeCmdList>
			MAP_makeSlaCmdList();													// スラロー�?コマンド作�??
 800baf6:	f008 fe27 	bl	8014748 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();													
 800bafa:	f008 ffa1 	bl	8014a40 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800bafe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bb02:	f010 f81f 	bl	801bb44 <LL_mDelay>
			Set_DutyTIM8(600);
 800bb06:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800bb0a:	f7fa f9b9 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800bb0e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800bb12:	f010 f817 	bl	801bb44 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800bb16:	2002      	movs	r0, #2
 800bb18:	f009 ff48 	bl	80159ac <MAP_drive>
			Set_DutyTIM8(0);
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	f7fa f9af 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800bb22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bb26:	f010 f80d 	bl	801bb44 <LL_mDelay>
			MOT_turn(MOT_R180);
 800bb2a:	2002      	movs	r0, #2
 800bb2c:	f004 f850 	bl	800fbd0 <MOT_turn>
			MAP_actGoalLED();
 800bb30:	f00c fce0 	bl	80184f4 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800bb34:	2000      	movs	r0, #0
 800bb36:	f7fa f9a3 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800bb3a:	f7fd fdc5 	bl	80096c8 <Failsafe_flag_off>
			break;
 800bb3e:	e057      	b.n	800bbf0 <MODE_exe_m5+0x580>

		case MODE_6:
			SetLED(0x0e);
 800bb40:	200e      	movs	r0, #14
 800bb42:	f7f6 f9c9 	bl	8001ed8 <SetLED>
			MODE_speed_parameter(PARAM_VERY_FAST,PARAM_VERY_SLOW,PARAM_NORMAL,SEARCH_SPEED*6.0,
 800bb46:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800bb4a:	eef6 1a00 	vmov.f32	s3, #96	@ 0x3f000000  0.5
 800bb4e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800bb52:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800bb56:	ed1f 0a58 	vldr	s0, [pc, #-352]	@ 800b9f8 <MODE_exe_m5+0x388>
 800bb5a:	2202      	movs	r2, #2
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	2004      	movs	r0, #4
 800bb60:	f7fe fbb2 	bl	800a2c8 <MODE_speed_parameter>
			MOT_setSlaStaSpeed( 0.5 , SLA_N90);							
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
*/									
			SetLED(0x00);
 800bb64:	2000      	movs	r0, #0
 800bb66:	f7f6 f9b7 	bl	8001ed8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	2100      	movs	r1, #0
 800bb6e:	2000      	movs	r0, #0
 800bb70:	f00b f826 	bl	8016bc0 <MAP_setPos>

			MAP_Goal_init();
 800bb74:	f00b f812 	bl	8016b9c <MAP_Goal_init>
			MAP_makeContourMap_dijkstra_modoki(GOAL_MAP_X_DEF,GOAL_MAP_Y_DEF, BEST_WAY);
 800bb78:	2201      	movs	r2, #1
 800bb7a:	2109      	movs	r1, #9
 800bb7c:	2014      	movs	r0, #20
 800bb7e:	f00e f8a9 	bl	8019cd4 <MAP_makeContourMap_dijkstra_modoki>
			MAP_Goalsize(1);
 800bb82:	2001      	movs	r0, #1
 800bb84:	f00c fcec 	bl	8018560 <MAP_Goalsize>
	
			MAP_makeCmdList_dijkstra_modoki(0, 0, NORTH, GOAL_MAP_X_DEF,GOAL_MAP_Y_DEF, &en_endDir2);		// ドライブコマンド作成
 800bb88:	1dfb      	adds	r3, r7, #7
 800bb8a:	9301      	str	r3, [sp, #4]
 800bb8c:	2309      	movs	r3, #9
 800bb8e:	9300      	str	r3, [sp, #0]
 800bb90:	2314      	movs	r3, #20
 800bb92:	2200      	movs	r2, #0
 800bb94:	2100      	movs	r1, #0
 800bb96:	2000      	movs	r0, #0
 800bb98:	f00a fd0c 	bl	80165b4 <MAP_makeCmdList_dijkstra_modoki>
			MAP_makeSlaCmdList();													// スラロームコマンド作成
 800bb9c:	f008 fdd4 	bl	8014748 <MAP_makeSlaCmdList>
			MAP_makeSkewCmdList();
 800bba0:	f008 ff4e 	bl	8014a40 <MAP_makeSkewCmdList>

			LL_mDelay(500);
 800bba4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bba8:	f00f ffcc 	bl	801bb44 <LL_mDelay>
			Set_DutyTIM8(600);
 800bbac:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800bbb0:	f7fa f966 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800bbb4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800bbb8:	f00f ffc4 	bl	801bb44 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800bbbc:	2002      	movs	r0, #2
 800bbbe:	f009 fef5 	bl	80159ac <MAP_drive>
			Set_DutyTIM8(0);
 800bbc2:	2000      	movs	r0, #0
 800bbc4:	f7fa f95c 	bl	8005e80 <Set_DutyTIM8>
			LL_mDelay(500);
 800bbc8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bbcc:	f00f ffba 	bl	801bb44 <LL_mDelay>
			MOT_turn(MOT_R180);
 800bbd0:	2002      	movs	r0, #2
 800bbd2:	f003 fffd 	bl	800fbd0 <MOT_turn>
			MAP_actGoalLED();
 800bbd6:	f00c fc8d 	bl	80184f4 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800bbda:	2000      	movs	r0, #0
 800bbdc:	f7fa f950 	bl	8005e80 <Set_DutyTIM8>
			Failsafe_flag_off();
 800bbe0:	f7fd fd72 	bl	80096c8 <Failsafe_flag_off>
			break;
 800bbe4:	e004      	b.n	800bbf0 <MODE_exe_m5+0x580>

		case MODE_7:
			SetLED(0x0e);
 800bbe6:	200e      	movs	r0, #14
 800bbe8:	f7f6 f976 	bl	8001ed8 <SetLED>
			//cant use
			break;
 800bbec:	e000      	b.n	800bbf0 <MODE_exe_m5+0x580>

		default:
			break;
 800bbee:	bf00      	nop
	}
	printf("\r\n turn 45 \r\r");
 800bbf0:	481d      	ldr	r0, [pc, #116]	@ (800bc68 <MODE_exe_m5+0x5f8>)
 800bbf2:	f012 f89b 	bl	801dd2c <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 100.0f, 2.50f,3000*PI,  SLA_45 );
 800bbf6:	2001      	movs	r0, #1
 800bbf8:	eddf 1a1c 	vldr	s3, [pc, #112]	@ 800bc6c <MODE_exe_m5+0x5fc>
 800bbfc:	eeb0 1a04 	vmov.f32	s2, #4	@ 0x40200000  2.5
 800bc00:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 800bc70 <MODE_exe_m5+0x600>
 800bc04:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800bc74 <MODE_exe_m5+0x604>
 800bc08:	f7f6 fe16 	bl	8002838 <PARAM_makeSra>
	printf("\r\n turn 90 \r\r");		
 800bc0c:	481a      	ldr	r0, [pc, #104]	@ (800bc78 <MODE_exe_m5+0x608>)
 800bc0e:	f012 f88d 	bl	801dd2c <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 3.50f,3000*PI,  SLA_90 );	
 800bc12:	2000      	movs	r0, #0
 800bc14:	eddf 1a15 	vldr	s3, [pc, #84]	@ 800bc6c <MODE_exe_m5+0x5fc>
 800bc18:	eeb0 1a0c 	vmov.f32	s2, #12	@ 0x40600000  3.5
 800bc1c:	eddf 0a17 	vldr	s1, [pc, #92]	@ 800bc7c <MODE_exe_m5+0x60c>
 800bc20:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 800bc74 <MODE_exe_m5+0x604>
 800bc24:	f7f6 fe08 	bl	8002838 <PARAM_makeSra>
//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f,3000*PI,  SLA_90 );
	printf("\r\n turn 135 \r\r");	
 800bc28:	4815      	ldr	r0, [pc, #84]	@ (800bc80 <MODE_exe_m5+0x610>)
 800bc2a:	f012 f87f 	bl	801dd2c <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 4.00f,3000*PI,  SLA_135 );	
 800bc2e:	2002      	movs	r0, #2
 800bc30:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 800bc6c <MODE_exe_m5+0x5fc>
 800bc34:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 800bc38:	eddf 0a10 	vldr	s1, [pc, #64]	@ 800bc7c <MODE_exe_m5+0x60c>
 800bc3c:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800bc74 <MODE_exe_m5+0x604>
 800bc40:	f7f6 fdfa 	bl	8002838 <PARAM_makeSra>
	printf("\r\n turn N90 \r\r");	
 800bc44:	480f      	ldr	r0, [pc, #60]	@ (800bc84 <MODE_exe_m5+0x614>)
 800bc46:	f012 f871 	bl	801dd2c <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 300.0f, 4.00f,3000*PI,  SLA_N90 );	
 800bc4a:	2003      	movs	r0, #3
 800bc4c:	eddf 1a07 	vldr	s3, [pc, #28]	@ 800bc6c <MODE_exe_m5+0x5fc>
 800bc50:	eeb1 1a00 	vmov.f32	s2, #16	@ 0x40800000  4.0
 800bc54:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 800bc88 <MODE_exe_m5+0x618>
 800bc58:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800bc74 <MODE_exe_m5+0x604>
 800bc5c:	f7f6 fdec 	bl	8002838 <PARAM_makeSra>
}
 800bc60:	bf00      	nop
 800bc62:	3710      	adds	r7, #16
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	08021cac 	.word	0x08021cac
 800bc6c:	46134315 	.word	0x46134315
 800bc70:	42c80000 	.word	0x42c80000
 800bc74:	3e99999a 	.word	0x3e99999a
 800bc78:	08021cbc 	.word	0x08021cbc
 800bc7c:	43480000 	.word	0x43480000
 800bc80:	08021ccc 	.word	0x08021ccc
 800bc84:	08021cdc 	.word	0x08021cdc
 800bc88:	43960000 	.word	0x43960000

0800bc8c <MODE_exe>:


void MODE_exe( void )
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	af00      	add	r7, sp, #0
//	uint16_t *read;
	enMAP_HEAD_DIR		en_endDir;

	NowModeLed = MODELED_1;
 800bc90:	4bc1      	ldr	r3, [pc, #772]	@ (800bf98 <MODE_exe+0x30c>)
 800bc92:	2201      	movs	r2, #1
 800bc94:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	LL_mDelay(300);
 800bc96:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bc9a:	f00f ff53 	bl	801bb44 <LL_mDelay>
	GYRO_SetRef();
 800bc9e:	f7fd febf 	bl	8009a20 <GYRO_SetRef>
	ENC_clr();
 800bca2:	f7fd fdad 	bl	8009800 <ENC_clr>
	Failsafe_flag_off();
 800bca6:	f7fd fd0f 	bl	80096c8 <Failsafe_flag_off>
//	log_flag_on();	

	switch( en_Mode ){
 800bcaa:	4bbc      	ldr	r3, [pc, #752]	@ (800bf9c <MODE_exe+0x310>)
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	2b07      	cmp	r3, #7
 800bcb0:	f200 81a0 	bhi.w	800bff4 <MODE_exe+0x368>
 800bcb4:	a201      	add	r2, pc, #4	@ (adr r2, 800bcbc <MODE_exe+0x30>)
 800bcb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcba:	bf00      	nop
 800bcbc:	0800bcdd 	.word	0x0800bcdd
 800bcc0:	0800bd59 	.word	0x0800bd59
 800bcc4:	0800bdd5 	.word	0x0800bdd5
 800bcc8:	0800be51 	.word	0x0800be51
 800bccc:	0800becd 	.word	0x0800becd
 800bcd0:	0800bf55 	.word	0x0800bf55
 800bcd4:	0800bfe5 	.word	0x0800bfe5
 800bcd8:	0800bfed 	.word	0x0800bfed

		case MODE_0://tune	
			SetLED(0x0e);
 800bcdc:	200e      	movs	r0, #14
 800bcde:	f7f6 f8fb 	bl	8001ed8 <SetLED>
			en_Mode = MODE_0;	
 800bce2:	4bae      	ldr	r3, [pc, #696]	@ (800bf9c <MODE_exe+0x310>)
 800bce4:	2200      	movs	r2, #0
 800bce6:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800bce8:	2064      	movs	r0, #100	@ 0x64
 800bcea:	f00f ff2b 	bl	801bb44 <LL_mDelay>
			SetLED(0x00);
 800bcee:	2000      	movs	r0, #0
 800bcf0:	f7f6 f8f2 	bl	8001ed8 <SetLED>
			NowModeLed = MODELED_2;
 800bcf4:	4ba8      	ldr	r3, [pc, #672]	@ (800bf98 <MODE_exe+0x30c>)
 800bcf6:	2210      	movs	r2, #16
 800bcf8:	701a      	strb	r2, [r3, #0]
			while(1){
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bcfa:	f7f6 f96f 	bl	8001fdc <SW_IsOn_1>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d004      	beq.n	800bd0e <MODE_exe+0x82>
 800bd04:	f7fe fac4 	bl	800a290 <CountUP_mode>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d008      	beq.n	800bd20 <MODE_exe+0x94>
					MODE_inc();								
 800bd0e:	f7fe fa4b 	bl	800a1a8 <MODE_inc>
					LL_mDelay(200);			
 800bd12:	20c8      	movs	r0, #200	@ 0xc8
 800bd14:	f00f ff16 	bl	801bb44 <LL_mDelay>
					printf("mode selecting_0\r\n");
 800bd18:	48a1      	ldr	r0, [pc, #644]	@ (800bfa0 <MODE_exe+0x314>)
 800bd1a:	f012 f877 	bl	801de0c <puts>
 800bd1e:	e01a      	b.n	800bd56 <MODE_exe+0xca>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800bd20:	f7f6 f94e 	bl	8001fc0 <SW_IsOn_0>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d004      	beq.n	800bd34 <MODE_exe+0xa8>
 800bd2a:	f000 f9c2 	bl	800c0b2 <MODE_CheckExe>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d0e2      	beq.n	800bcfa <MODE_exe+0x6e>
					MODE_exe_m0();								
 800bd34:	f7fe fb06 	bl	800a344 <MODE_exe_m0>
					LL_mDelay(200);				
 800bd38:	20c8      	movs	r0, #200	@ 0xc8
 800bd3a:	f00f ff03 	bl	801bb44 <LL_mDelay>
					if (en_Mode == MODE_7){
 800bd3e:	4b97      	ldr	r3, [pc, #604]	@ (800bf9c <MODE_exe+0x310>)
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	2b07      	cmp	r3, #7
 800bd44:	d1d9      	bne.n	800bcfa <MODE_exe+0x6e>
						NowModeLed = MODELED_1;
 800bd46:	4b94      	ldr	r3, [pc, #592]	@ (800bf98 <MODE_exe+0x30c>)
 800bd48:	2201      	movs	r2, #1
 800bd4a:	701a      	strb	r2, [r3, #0]
						break;
 800bd4c:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_0;
 800bd4e:	4b93      	ldr	r3, [pc, #588]	@ (800bf9c <MODE_exe+0x310>)
 800bd50:	2200      	movs	r2, #0
 800bd52:	701a      	strb	r2, [r3, #0]
			break;
 800bd54:	e14f      	b.n	800bff6 <MODE_exe+0x36a>
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bd56:	e7d0      	b.n	800bcfa <MODE_exe+0x6e>

		case MODE_1://flash
			SetLED(0x0e);
 800bd58:	200e      	movs	r0, #14
 800bd5a:	f7f6 f8bd 	bl	8001ed8 <SetLED>
			en_Mode = MODE_0;	
 800bd5e:	4b8f      	ldr	r3, [pc, #572]	@ (800bf9c <MODE_exe+0x310>)
 800bd60:	2200      	movs	r2, #0
 800bd62:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800bd64:	2064      	movs	r0, #100	@ 0x64
 800bd66:	f00f feed 	bl	801bb44 <LL_mDelay>
			SetLED(0x00);
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	f7f6 f8b4 	bl	8001ed8 <SetLED>
			NowModeLed = MODELED_2;
 800bd70:	4b89      	ldr	r3, [pc, #548]	@ (800bf98 <MODE_exe+0x30c>)
 800bd72:	2210      	movs	r2, #16
 800bd74:	701a      	strb	r2, [r3, #0]
			while(1){
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bd76:	f7f6 f931 	bl	8001fdc <SW_IsOn_1>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d004      	beq.n	800bd8a <MODE_exe+0xfe>
 800bd80:	f7fe fa86 	bl	800a290 <CountUP_mode>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d008      	beq.n	800bd9c <MODE_exe+0x110>
					MODE_inc();								
 800bd8a:	f7fe fa0d 	bl	800a1a8 <MODE_inc>
					LL_mDelay(200);			
 800bd8e:	20c8      	movs	r0, #200	@ 0xc8
 800bd90:	f00f fed8 	bl	801bb44 <LL_mDelay>
					printf("mode selecting_1\r\n");
 800bd94:	4883      	ldr	r0, [pc, #524]	@ (800bfa4 <MODE_exe+0x318>)
 800bd96:	f012 f839 	bl	801de0c <puts>
 800bd9a:	e01a      	b.n	800bdd2 <MODE_exe+0x146>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800bd9c:	f7f6 f910 	bl	8001fc0 <SW_IsOn_0>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d004      	beq.n	800bdb0 <MODE_exe+0x124>
 800bda6:	f000 f984 	bl	800c0b2 <MODE_CheckExe>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d0e2      	beq.n	800bd76 <MODE_exe+0xea>
					MODE_exe_m1();								
 800bdb0:	f7fe fccc 	bl	800a74c <MODE_exe_m1>
					LL_mDelay(200);				
 800bdb4:	20c8      	movs	r0, #200	@ 0xc8
 800bdb6:	f00f fec5 	bl	801bb44 <LL_mDelay>
					if (en_Mode == MODE_7){
 800bdba:	4b78      	ldr	r3, [pc, #480]	@ (800bf9c <MODE_exe+0x310>)
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	2b07      	cmp	r3, #7
 800bdc0:	d1d9      	bne.n	800bd76 <MODE_exe+0xea>
						NowModeLed = MODELED_1;
 800bdc2:	4b75      	ldr	r3, [pc, #468]	@ (800bf98 <MODE_exe+0x30c>)
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	701a      	strb	r2, [r3, #0]
						break;
 800bdc8:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_1;
 800bdca:	4b74      	ldr	r3, [pc, #464]	@ (800bf9c <MODE_exe+0x310>)
 800bdcc:	2201      	movs	r2, #1
 800bdce:	701a      	strb	r2, [r3, #0]
			break;
 800bdd0:	e111      	b.n	800bff6 <MODE_exe+0x36a>
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bdd2:	e7d0      	b.n	800bd76 <MODE_exe+0xea>

		case MODE_2://search wall hit
			SetLED(0x0e);
 800bdd4:	200e      	movs	r0, #14
 800bdd6:	f7f6 f87f 	bl	8001ed8 <SetLED>
			en_Mode = MODE_0;	
 800bdda:	4b70      	ldr	r3, [pc, #448]	@ (800bf9c <MODE_exe+0x310>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800bde0:	2064      	movs	r0, #100	@ 0x64
 800bde2:	f00f feaf 	bl	801bb44 <LL_mDelay>
			SetLED(0x00);
 800bde6:	2000      	movs	r0, #0
 800bde8:	f7f6 f876 	bl	8001ed8 <SetLED>
			NowModeLed = MODELED_2;
 800bdec:	4b6a      	ldr	r3, [pc, #424]	@ (800bf98 <MODE_exe+0x30c>)
 800bdee:	2210      	movs	r2, #16
 800bdf0:	701a      	strb	r2, [r3, #0]
			while(1){
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bdf2:	f7f6 f8f3 	bl	8001fdc <SW_IsOn_1>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d004      	beq.n	800be06 <MODE_exe+0x17a>
 800bdfc:	f7fe fa48 	bl	800a290 <CountUP_mode>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d008      	beq.n	800be18 <MODE_exe+0x18c>
					MODE_inc();								
 800be06:	f7fe f9cf 	bl	800a1a8 <MODE_inc>
					LL_mDelay(200);			
 800be0a:	20c8      	movs	r0, #200	@ 0xc8
 800be0c:	f00f fe9a 	bl	801bb44 <LL_mDelay>
					printf("mode selecting_1\r\n");
 800be10:	4864      	ldr	r0, [pc, #400]	@ (800bfa4 <MODE_exe+0x318>)
 800be12:	f011 fffb 	bl	801de0c <puts>
 800be16:	e01a      	b.n	800be4e <MODE_exe+0x1c2>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800be18:	f7f6 f8d2 	bl	8001fc0 <SW_IsOn_0>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d004      	beq.n	800be2c <MODE_exe+0x1a0>
 800be22:	f000 f946 	bl	800c0b2 <MODE_CheckExe>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d0e2      	beq.n	800bdf2 <MODE_exe+0x166>
					MODE_exe_m2();								
 800be2c:	f7fe fd04 	bl	800a838 <MODE_exe_m2>
					LL_mDelay(200);				
 800be30:	20c8      	movs	r0, #200	@ 0xc8
 800be32:	f00f fe87 	bl	801bb44 <LL_mDelay>
					if (en_Mode == MODE_7){
 800be36:	4b59      	ldr	r3, [pc, #356]	@ (800bf9c <MODE_exe+0x310>)
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	2b07      	cmp	r3, #7
 800be3c:	d1d9      	bne.n	800bdf2 <MODE_exe+0x166>
						NowModeLed = MODELED_1;
 800be3e:	4b56      	ldr	r3, [pc, #344]	@ (800bf98 <MODE_exe+0x30c>)
 800be40:	2201      	movs	r2, #1
 800be42:	701a      	strb	r2, [r3, #0]
						break;
 800be44:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_2;
 800be46:	4b55      	ldr	r3, [pc, #340]	@ (800bf9c <MODE_exe+0x310>)
 800be48:	2202      	movs	r2, #2
 800be4a:	701a      	strb	r2, [r3, #0]
			break;
 800be4c:	e0d3      	b.n	800bff6 <MODE_exe+0x36a>
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800be4e:	e7d0      	b.n	800bdf2 <MODE_exe+0x166>

		case MODE_3://drive
			SetLED(0x0e);
 800be50:	200e      	movs	r0, #14
 800be52:	f7f6 f841 	bl	8001ed8 <SetLED>
			en_Mode = MODE_0;	
 800be56:	4b51      	ldr	r3, [pc, #324]	@ (800bf9c <MODE_exe+0x310>)
 800be58:	2200      	movs	r2, #0
 800be5a:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800be5c:	2064      	movs	r0, #100	@ 0x64
 800be5e:	f00f fe71 	bl	801bb44 <LL_mDelay>
			SetLED(0x00);
 800be62:	2000      	movs	r0, #0
 800be64:	f7f6 f838 	bl	8001ed8 <SetLED>
			NowModeLed = MODELED_2;
 800be68:	4b4b      	ldr	r3, [pc, #300]	@ (800bf98 <MODE_exe+0x30c>)
 800be6a:	2210      	movs	r2, #16
 800be6c:	701a      	strb	r2, [r3, #0]
			while(1){
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800be6e:	f7f6 f8b5 	bl	8001fdc <SW_IsOn_1>
 800be72:	4603      	mov	r3, r0
 800be74:	2b01      	cmp	r3, #1
 800be76:	d004      	beq.n	800be82 <MODE_exe+0x1f6>
 800be78:	f7fe fa0a 	bl	800a290 <CountUP_mode>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d008      	beq.n	800be94 <MODE_exe+0x208>
					MODE_inc();								
 800be82:	f7fe f991 	bl	800a1a8 <MODE_inc>
					LL_mDelay(200);			
 800be86:	20c8      	movs	r0, #200	@ 0xc8
 800be88:	f00f fe5c 	bl	801bb44 <LL_mDelay>
					printf("mode selecting_1\r\n");
 800be8c:	4845      	ldr	r0, [pc, #276]	@ (800bfa4 <MODE_exe+0x318>)
 800be8e:	f011 ffbd 	bl	801de0c <puts>
 800be92:	e01a      	b.n	800beca <MODE_exe+0x23e>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800be94:	f7f6 f894 	bl	8001fc0 <SW_IsOn_0>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d004      	beq.n	800bea8 <MODE_exe+0x21c>
 800be9e:	f000 f908 	bl	800c0b2 <MODE_CheckExe>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d0e2      	beq.n	800be6e <MODE_exe+0x1e2>
					MODE_exe_m3();								
 800bea8:	f7fe ffc8 	bl	800ae3c <MODE_exe_m3>
					LL_mDelay(200);				
 800beac:	20c8      	movs	r0, #200	@ 0xc8
 800beae:	f00f fe49 	bl	801bb44 <LL_mDelay>
					if (en_Mode == MODE_7){
 800beb2:	4b3a      	ldr	r3, [pc, #232]	@ (800bf9c <MODE_exe+0x310>)
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	2b07      	cmp	r3, #7
 800beb8:	d1d9      	bne.n	800be6e <MODE_exe+0x1e2>
						NowModeLed = MODELED_1;
 800beba:	4b37      	ldr	r3, [pc, #220]	@ (800bf98 <MODE_exe+0x30c>)
 800bebc:	2201      	movs	r2, #1
 800bebe:	701a      	strb	r2, [r3, #0]
						break;
 800bec0:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_3;
 800bec2:	4b36      	ldr	r3, [pc, #216]	@ (800bf9c <MODE_exe+0x310>)
 800bec4:	2203      	movs	r2, #3
 800bec6:	701a      	strb	r2, [r3, #0]
			break;
 800bec8:	e095      	b.n	800bff6 <MODE_exe+0x36a>
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800beca:	e7d0      	b.n	800be6e <MODE_exe+0x1e2>

		case MODE_4: // wall hit search
			SetLED(0x0e);
 800becc:	200e      	movs	r0, #14
 800bece:	f7f6 f803 	bl	8001ed8 <SetLED>
			en_Mode = MODE_0;	
 800bed2:	4b32      	ldr	r3, [pc, #200]	@ (800bf9c <MODE_exe+0x310>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800bed8:	2064      	movs	r0, #100	@ 0x64
 800beda:	f00f fe33 	bl	801bb44 <LL_mDelay>
			SetLED(0x00);
 800bede:	2000      	movs	r0, #0
 800bee0:	f7f5 fffa 	bl	8001ed8 <SetLED>
			NowModeLed = MODELED_2;
 800bee4:	4b2c      	ldr	r3, [pc, #176]	@ (800bf98 <MODE_exe+0x30c>)
 800bee6:	2210      	movs	r2, #16
 800bee8:	701a      	strb	r2, [r3, #0]
			WallHitFlag = 1;
 800beea:	4b2f      	ldr	r3, [pc, #188]	@ (800bfa8 <MODE_exe+0x31c>)
 800beec:	2201      	movs	r2, #1
 800beee:	701a      	strb	r2, [r3, #0]
			while(1){
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bef0:	f7f6 f874 	bl	8001fdc <SW_IsOn_1>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d004      	beq.n	800bf04 <MODE_exe+0x278>
 800befa:	f7fe f9c9 	bl	800a290 <CountUP_mode>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d008      	beq.n	800bf16 <MODE_exe+0x28a>
					MODE_inc();								
 800bf04:	f7fe f950 	bl	800a1a8 <MODE_inc>
					LL_mDelay(200);			
 800bf08:	20c8      	movs	r0, #200	@ 0xc8
 800bf0a:	f00f fe1b 	bl	801bb44 <LL_mDelay>
					printf("mode selecting_1\r\n");
 800bf0e:	4825      	ldr	r0, [pc, #148]	@ (800bfa4 <MODE_exe+0x318>)
 800bf10:	f011 ff7c 	bl	801de0c <puts>
 800bf14:	e01d      	b.n	800bf52 <MODE_exe+0x2c6>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800bf16:	f7f6 f853 	bl	8001fc0 <SW_IsOn_0>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d004      	beq.n	800bf2a <MODE_exe+0x29e>
 800bf20:	f000 f8c7 	bl	800c0b2 <MODE_CheckExe>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d0e2      	beq.n	800bef0 <MODE_exe+0x264>
					MODE_exe_m4();								
 800bf2a:	f7ff fa05 	bl	800b338 <MODE_exe_m4>
					LL_mDelay(200);				
 800bf2e:	20c8      	movs	r0, #200	@ 0xc8
 800bf30:	f00f fe08 	bl	801bb44 <LL_mDelay>
					if (en_Mode == MODE_7){
 800bf34:	4b19      	ldr	r3, [pc, #100]	@ (800bf9c <MODE_exe+0x310>)
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	2b07      	cmp	r3, #7
 800bf3a:	d1d9      	bne.n	800bef0 <MODE_exe+0x264>
						NowModeLed = MODELED_1;
 800bf3c:	4b16      	ldr	r3, [pc, #88]	@ (800bf98 <MODE_exe+0x30c>)
 800bf3e:	2201      	movs	r2, #1
 800bf40:	701a      	strb	r2, [r3, #0]
						WallHitFlag = 0;
 800bf42:	4b19      	ldr	r3, [pc, #100]	@ (800bfa8 <MODE_exe+0x31c>)
 800bf44:	2200      	movs	r2, #0
 800bf46:	701a      	strb	r2, [r3, #0]
						break;
 800bf48:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_4;
 800bf4a:	4b14      	ldr	r3, [pc, #80]	@ (800bf9c <MODE_exe+0x310>)
 800bf4c:	2204      	movs	r2, #4
 800bf4e:	701a      	strb	r2, [r3, #0]
			break;
 800bf50:	e051      	b.n	800bff6 <MODE_exe+0x36a>
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bf52:	e7cd      	b.n	800bef0 <MODE_exe+0x264>

		case MODE_5:
			SetLED(0x0e);
 800bf54:	200e      	movs	r0, #14
 800bf56:	f7f5 ffbf 	bl	8001ed8 <SetLED>
			en_Mode = MODE_0;	
 800bf5a:	4b10      	ldr	r3, [pc, #64]	@ (800bf9c <MODE_exe+0x310>)
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800bf60:	2064      	movs	r0, #100	@ 0x64
 800bf62:	f00f fdef 	bl	801bb44 <LL_mDelay>
			SetLED(0x00);
 800bf66:	2000      	movs	r0, #0
 800bf68:	f7f5 ffb6 	bl	8001ed8 <SetLED>
			NowModeLed = MODELED_2;
 800bf6c:	4b0a      	ldr	r3, [pc, #40]	@ (800bf98 <MODE_exe+0x30c>)
 800bf6e:	2210      	movs	r2, #16
 800bf70:	701a      	strb	r2, [r3, #0]
			while(1){
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bf72:	f7f6 f833 	bl	8001fdc <SW_IsOn_1>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d004      	beq.n	800bf86 <MODE_exe+0x2fa>
 800bf7c:	f7fe f988 	bl	800a290 <CountUP_mode>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d012      	beq.n	800bfac <MODE_exe+0x320>
					MODE_inc();								
 800bf86:	f7fe f90f 	bl	800a1a8 <MODE_inc>
					LL_mDelay(200);			
 800bf8a:	20c8      	movs	r0, #200	@ 0xc8
 800bf8c:	f00f fdda 	bl	801bb44 <LL_mDelay>
					printf("mode selecting_1\r\n");
 800bf90:	4804      	ldr	r0, [pc, #16]	@ (800bfa4 <MODE_exe+0x318>)
 800bf92:	f011 ff3b 	bl	801de0c <puts>
 800bf96:	e024      	b.n	800bfe2 <MODE_exe+0x356>
 800bf98:	2000000c 	.word	0x2000000c
 800bf9c:	20017b28 	.word	0x20017b28
 800bfa0:	08021d30 	.word	0x08021d30
 800bfa4:	08021d44 	.word	0x08021d44
 800bfa8:	20017b29 	.word	0x20017b29
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800bfac:	f7f6 f808 	bl	8001fc0 <SW_IsOn_0>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d004      	beq.n	800bfc0 <MODE_exe+0x334>
 800bfb6:	f000 f87c 	bl	800c0b2 <MODE_CheckExe>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d0d8      	beq.n	800bf72 <MODE_exe+0x2e6>
					MODE_exe_m5();								
 800bfc0:	f7ff fb56 	bl	800b670 <MODE_exe_m5>
					LL_mDelay(200);				
 800bfc4:	20c8      	movs	r0, #200	@ 0xc8
 800bfc6:	f00f fdbd 	bl	801bb44 <LL_mDelay>
					if (en_Mode == MODE_7){
 800bfca:	4b0c      	ldr	r3, [pc, #48]	@ (800bffc <MODE_exe+0x370>)
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	2b07      	cmp	r3, #7
 800bfd0:	d1cf      	bne.n	800bf72 <MODE_exe+0x2e6>
						NowModeLed = MODELED_1;
 800bfd2:	4b0b      	ldr	r3, [pc, #44]	@ (800c000 <MODE_exe+0x374>)
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	701a      	strb	r2, [r3, #0]
						break;
 800bfd8:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_5;
 800bfda:	4b08      	ldr	r3, [pc, #32]	@ (800bffc <MODE_exe+0x370>)
 800bfdc:	2205      	movs	r2, #5
 800bfde:	701a      	strb	r2, [r3, #0]
			break;
 800bfe0:	e009      	b.n	800bff6 <MODE_exe+0x36a>
				if (( SW_IsOn_1() == SW_ON)||CountUP_mode()){
 800bfe2:	e7c6      	b.n	800bf72 <MODE_exe+0x2e6>

		case MODE_6:
			SetLED(0x0e);
 800bfe4:	200e      	movs	r0, #14
 800bfe6:	f7f5 ff77 	bl	8001ed8 <SetLED>

			break;
 800bfea:	e004      	b.n	800bff6 <MODE_exe+0x36a>

		case MODE_7:
			SetLED(0x0e);
 800bfec:	200e      	movs	r0, #14
 800bfee:	f7f5 ff73 	bl	8001ed8 <SetLED>
			
			break;
 800bff2:	e000      	b.n	800bff6 <MODE_exe+0x36a>


		default:
			break;
 800bff4:	bf00      	nop
	}
}
 800bff6:	bf00      	nop
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	20017b28 	.word	0x20017b28
 800c000:	2000000c 	.word	0x2000000c

0800c004 <MODE_DistRightCheck>:

bool MODE_DistRightCheck(void)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
	int16_t s_rightval;
	bool bl_check;

	s_rightval = DIST_getNowVal(DIST_SEN_R_FRONT);
 800c00a:	2000      	movs	r0, #0
 800c00c:	f006 fe18 	bl	8012c40 <DIST_getNowVal>
 800c010:	4603      	mov	r3, r0
 800c012:	80bb      	strh	r3, [r7, #4]

	if( s_rightval >= 300 ){
 800c014:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c018:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c01c:	db02      	blt.n	800c024 <MODE_DistRightCheck+0x20>
		bl_check=TRUE;
 800c01e:	2301      	movs	r3, #1
 800c020:	71fb      	strb	r3, [r7, #7]
 800c022:	e001      	b.n	800c028 <MODE_DistRightCheck+0x24>
	}
	else{
		bl_check=FALSE;
 800c024:	2300      	movs	r3, #0
 800c026:	71fb      	strb	r3, [r7, #7]
	}

	return bl_check;
 800c028:	79fb      	ldrb	r3, [r7, #7]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <MODE_DistLeftCheck>:

bool MODE_DistLeftCheck(void){
 800c032:	b580      	push	{r7, lr}
 800c034:	b082      	sub	sp, #8
 800c036:	af00      	add	r7, sp, #0

	int16_t 	s_leftval;
	bool	bl_check;

	s_leftval 	= DIST_getNowVal(DIST_SEN_L_FRONT);
 800c038:	2001      	movs	r0, #1
 800c03a:	f006 fe01 	bl	8012c40 <DIST_getNowVal>
 800c03e:	4603      	mov	r3, r0
 800c040:	80bb      	strh	r3, [r7, #4]

	if( s_leftval >= 200 ){
 800c042:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c046:	2bc7      	cmp	r3, #199	@ 0xc7
 800c048:	dd02      	ble.n	800c050 <MODE_DistLeftCheck+0x1e>
		bl_check = TRUE;
 800c04a:	2301      	movs	r3, #1
 800c04c:	71fb      	strb	r3, [r7, #7]
 800c04e:	e001      	b.n	800c054 <MODE_DistLeftCheck+0x22>

	}else{
		bl_check = FALSE;
 800c050:	2300      	movs	r3, #0
 800c052:	71fb      	strb	r3, [r7, #7]

	}

	return bl_check;
 800c054:	79fb      	ldrb	r3, [r7, #7]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3708      	adds	r7, #8
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <MODE_setWaitCheck>:

bool MODE_setWaitCheck(void){
 800c05e:	b580      	push	{r7, lr}
 800c060:	b082      	sub	sp, #8
 800c062:	af00      	add	r7, sp, #0

	bool bl_check;

	if( TRUE == MODE_DistRightCheck() ){	// 右�?け検知
 800c064:	f7ff ffce 	bl	800c004 <MODE_DistRightCheck>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d002      	beq.n	800c074 <MODE_setWaitCheck+0x16>
		SetLED(0x08);
 800c06e:	2008      	movs	r0, #8
 800c070:	f7f5 ff32 	bl	8001ed8 <SetLED>
	}
	if( TRUE == MODE_DistLeftCheck() ){		// 左�?け検知
 800c074:	f7ff ffdd 	bl	800c032 <MODE_DistLeftCheck>
 800c078:	4603      	mov	r3, r0
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d002      	beq.n	800c084 <MODE_setWaitCheck+0x26>
		SetLED(0x02);
 800c07e:	2002      	movs	r0, #2
 800c080:	f7f5 ff2a 	bl	8001ed8 <SetLED>
	}

	if( ( TRUE == MODE_DistRightCheck() ) && ( TRUE == MODE_DistLeftCheck() ) ){
 800c084:	f7ff ffbe 	bl	800c004 <MODE_DistRightCheck>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00a      	beq.n	800c0a4 <MODE_setWaitCheck+0x46>
 800c08e:	f7ff ffd0 	bl	800c032 <MODE_DistLeftCheck>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d005      	beq.n	800c0a4 <MODE_setWaitCheck+0x46>
		SetLED(0x0e);
 800c098:	200e      	movs	r0, #14
 800c09a:	f7f5 ff1d 	bl	8001ed8 <SetLED>
		bl_check = TRUE;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	71fb      	strb	r3, [r7, #7]
 800c0a2:	e001      	b.n	800c0a8 <MODE_setWaitCheck+0x4a>

	}else{
		bl_check = FALSE;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	71fb      	strb	r3, [r7, #7]
	}
	return bl_check;
 800c0a8:	79fb      	ldrb	r3, [r7, #7]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3708      	adds	r7, #8
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <MODE_CheckExe>:

bool MODE_CheckExe(void){
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b082      	sub	sp, #8
 800c0b6:	af00      	add	r7, sp, #0

	bool bl_check;

	if( TRUE == MODE_setWaitCheck() ){
 800c0b8:	f7ff ffd1 	bl	800c05e <MODE_setWaitCheck>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d018      	beq.n	800c0f4 <MODE_CheckExe+0x42>
		LL_mDelay(500);
 800c0c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c0c6:	f00f fd3d 	bl	801bb44 <LL_mDelay>

		if( FALSE == MODE_setWaitCheck() ){
 800c0ca:	f7ff ffc8 	bl	800c05e <MODE_setWaitCheck>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	f083 0301 	eor.w	r3, r3, #1
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d009      	beq.n	800c0ee <MODE_CheckExe+0x3c>
			SetLED(0x00);
 800c0da:	2000      	movs	r0, #0
 800c0dc:	f7f5 fefc 	bl	8001ed8 <SetLED>
			LL_mDelay(1000);
 800c0e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c0e4:	f00f fd2e 	bl	801bb44 <LL_mDelay>
			bl_check = TRUE;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	71fb      	strb	r3, [r7, #7]
 800c0ec:	e004      	b.n	800c0f8 <MODE_CheckExe+0x46>

		}else{
			bl_check = FALSE;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	71fb      	strb	r3, [r7, #7]
 800c0f2:	e001      	b.n	800c0f8 <MODE_CheckExe+0x46>

		}

	}else{

		bl_check = FALSE;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	71fb      	strb	r3, [r7, #7]
	}

	return bl_check;
 800c0f8:	79fb      	ldrb	r3, [r7, #7]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <MOT_getAcc1>:
en_TURNTYPE		en_TurnType;



float MOT_getAcc1( void )
{
 800c102:	b580      	push	{r7, lr}
 800c104:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_ST )->f_speed_acc;
 800c106:	2015      	movs	r0, #21
 800c108:	f7f6 fb22 	bl	8002750 <PARAM_getSpeed>
 800c10c:	4603      	mov	r3, r0
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	ee07 3a90 	vmov	s15, r3
}
 800c114:	eeb0 0a67 	vmov.f32	s0, s15
 800c118:	bd80      	pop	{r7, pc}

0800c11a <MOT_getAcc3>:

float MOT_getAcc3( void )
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_ST )->f_speed_dec;
 800c11e:	2015      	movs	r0, #21
 800c120:	f7f6 fb16 	bl	8002750 <PARAM_getSpeed>
 800c124:	4603      	mov	r3, r0
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	ee07 3a90 	vmov	s15, r3
}
 800c12c:	eeb0 0a67 	vmov.f32	s0, s15
 800c130:	bd80      	pop	{r7, pc}

0800c132 <MOT_getJerk>:

float MOT_getJerk( void )
{
 800c132:	b580      	push	{r7, lr}
 800c134:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_ST )->f_speed_jerk;
 800c136:	2015      	movs	r0, #21
 800c138:	f7f6 fb0a 	bl	8002750 <PARAM_getSpeed>
 800c13c:	4603      	mov	r3, r0
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	ee07 3a90 	vmov	s15, r3
}
 800c144:	eeb0 0a67 	vmov.f32	s0, s15
 800c148:	bd80      	pop	{r7, pc}
	...

0800c14c <MOT_goBlock_AccConstDec>:

void MOT_goBlock_AccConstDec( float f_fin, enMOT_ST_TYPE en_type, enMOT_GO_ST_TYPE en_goType )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b092      	sub	sp, #72	@ 0x48
 800c150:	af00      	add	r7, sp, #0
 800c152:	ed87 0a01 	vstr	s0, [r7, #4]
 800c156:	4603      	mov	r3, r0
 800c158:	460a      	mov	r2, r1
 800c15a:	70fb      	strb	r3, [r7, #3]
 800c15c:	4613      	mov	r3, r2
 800c15e:	70bb      	strb	r3, [r7, #2]
	stCTRL_DATA		st_data;					// CTRLdata
	GYRO_staErrChkAngle();
 800c160:	f7fd fd48 	bl	8009bf4 <GYRO_staErrChkAngle>
	/*      motion      */
	/* ================ */
	/* ------ */
	/*  acc+jerk   */
	/* ------ */
	if( ( en_type != MOT_CONST_DEC ) && ( en_type != MOT_CONST_DEC_CUSTOM ) ){
 800c164:	78fb      	ldrb	r3, [r7, #3]
 800c166:	2b05      	cmp	r3, #5
 800c168:	f000 8141 	beq.w	800c3ee <MOT_goBlock_AccConstDec+0x2a2>
 800c16c:	78fb      	ldrb	r3, [r7, #3]
 800c16e:	2b06      	cmp	r3, #6
 800c170:	f000 813d 	beq.w	800c3ee <MOT_goBlock_AccConstDec+0x2a2>

		if( MOT_GO_ST_NORMAL == en_goType ){
 800c174:	78bb      	ldrb	r3, [r7, #2]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d102      	bne.n	800c180 <MOT_goBlock_AccConstDec+0x34>
			st_data.en_ctrl_type		= CTRL_ACC;
 800c17a:	2300      	movs	r3, #0
 800c17c:	723b      	strb	r3, [r7, #8]
 800c17e:	e001      	b.n	800c184 <MOT_goBlock_AccConstDec+0x38>
		}
		else{
			st_data.en_ctrl_type		= CTRL_SKEW_ACC;
 800c180:	2303      	movs	r3, #3
 800c182:	723b      	strb	r3, [r7, #8]
		}
		st_data.f_ctrl_jerk			= st_Info.f_mot_jerk;
 800c184:	4bbb      	ldr	r3, [pc, #748]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	613b      	str	r3, [r7, #16]
		st_data.f_ctrl_trgtAcc		= st_Info.f_mot_trgtAcc1;		// 加速度指定
 800c18a:	4bba      	ldr	r3, [pc, #744]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	61bb      	str	r3, [r7, #24]
		st_data.f_ctrl_nowAcc		= 0;
 800c190:	f04f 0300 	mov.w	r3, #0
 800c194:	617b      	str	r3, [r7, #20]
		st_data.f_ctrl_now			= st_Info.f_mot_now;		// 現在速度
 800c196:	4bb7      	ldr	r3, [pc, #732]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c198:	69db      	ldr	r3, [r3, #28]
 800c19a:	61fb      	str	r3, [r7, #28]
		st_data.f_ctrl_trgt			= st_Info.f_mot_now+st_Info.f_mot_accjerk_v;		// 目標速度
 800c19c:	4bb5      	ldr	r3, [pc, #724]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c19e:	ed93 7a07 	vldr	s14, [r3, #28]
 800c1a2:	4bb4      	ldr	r3, [pc, #720]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c1a4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800c1a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1ac:	edc7 7a08 	vstr	s15, [r7, #32]
		st_data.f_ctrl_nowDist		= 0;				// 進んでいない
 800c1b0:	f04f 0300 	mov.w	r3, #0
 800c1b4:	627b      	str	r3, [r7, #36]	@ 0x24
		st_data.f_ctrl_dist			= st_Info.f_mot_l1_accjerk;			// 加速距離
 800c1b6:	4baf      	ldr	r3, [pc, #700]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c1b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1ba:	62bb      	str	r3, [r7, #40]	@ 0x28
		st_data.f_ctrl_jerkAngle		= 0;
 800c1bc:	f04f 0300 	mov.w	r3, #0
 800c1c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		st_data.f_ctrl_nowAccAngle		= 0;
 800c1c2:	f04f 0300 	mov.w	r3, #0
 800c1c6:	633b      	str	r3, [r7, #48]	@ 0x30
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c1c8:	f04f 0300 	mov.w	r3, #0
 800c1cc:	637b      	str	r3, [r7, #52]	@ 0x34
		st_data.f_ctrl_nowAngleS		= 0;				// 現在角速度
 800c1ce:	f04f 0300 	mov.w	r3, #0
 800c1d2:	63bb      	str	r3, [r7, #56]	@ 0x38
		st_data.f_ctrl_trgtAngleS		= 0;				// 目標角度
 800c1d4:	f04f 0300 	mov.w	r3, #0
 800c1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		st_data.f_ctrl_nowAngle		= 0;				// 現在角度
 800c1da:	f04f 0300 	mov.w	r3, #0
 800c1de:	643b      	str	r3, [r7, #64]	@ 0x40
		st_data.f_ctrl_angle			= 0;				// 目標角度
 800c1e0:	f04f 0300 	mov.w	r3, #0
 800c1e4:	647b      	str	r3, [r7, #68]	@ 0x44
		st_data.f_ctrl_time 			= 0;				// 目標時間 [sec] ← 指定しない
 800c1e6:	f04f 0300 	mov.w	r3, #0
 800c1ea:	60fb      	str	r3, [r7, #12]
		CTRL_clrData();								// 設定データをクリア
 800c1ec:	f7fa f92a 	bl	8006444 <CTRL_clrData>
		CTRL_clrSpeedErrSum();
 800c1f0:	f7fa f984 	bl	80064fc <CTRL_clrSpeedErrSum>
		CTRL_setData( &st_data );						// データセット
 800c1f4:	f107 0308 	add.w	r3, r7, #8
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7fa fa11 	bl	8006620 <CTRL_setData>
		DCM_staMotAll();							// モータON
 800c1fe:	f7fd fac5 	bl	800978c <DCM_staMotAll>
		while( Get_NowDist() < st_Info.f_mot_l1_accjerk ){					// 指定距離到達待ち
 800c202:	e00f      	b.n	800c224 <MOT_goBlock_AccConstDec+0xd8>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c204:	f7fd fa6c 	bl	80096e0 <SYS_isOutOfCtrl>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d008      	beq.n	800c220 <MOT_goBlock_AccConstDec+0xd4>
				CTRL_stop();
 800c20e:	f7fa f909 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c212:	2000      	movs	r0, #0
 800c214:	f7fd fa96 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c218:	2001      	movs	r0, #1
 800c21a:	f7fd fa93 	bl	8009744 <DCM_brakeMot>
				break;
 800c21e:	e00d      	b.n	800c23c <MOT_goBlock_AccConstDec+0xf0>
			}				
			MOT_setWallEdgeDist();
 800c220:	f006 fb24 	bl	801286c <MOT_setWallEdgeDist>
		while( Get_NowDist() < st_Info.f_mot_l1_accjerk ){					// 指定距離到達待ち
 800c224:	f7fa f84e 	bl	80062c4 <Get_NowDist>
 800c228:	eeb0 7a40 	vmov.f32	s14, s0
 800c22c:	4b91      	ldr	r3, [pc, #580]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c22e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800c232:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c23a:	d4e3      	bmi.n	800c204 <MOT_goBlock_AccConstDec+0xb8>

		}
		//acc
		st_data.f_ctrl_jerk			= 0;
 800c23c:	f04f 0300 	mov.w	r3, #0
 800c240:	613b      	str	r3, [r7, #16]
		st_data.f_ctrl_trgtAcc		= st_Info.f_mot_trgtAcc1;		// 加速度指定
 800c242:	4b8c      	ldr	r3, [pc, #560]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	61bb      	str	r3, [r7, #24]
		st_data.f_ctrl_nowAcc		= st_Info.f_mot_trgtAcc1;
 800c248:	4b8a      	ldr	r3, [pc, #552]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c24a:	689b      	ldr	r3, [r3, #8]
 800c24c:	617b      	str	r3, [r7, #20]
		st_data.f_ctrl_now			= st_Info.f_mot_now+st_Info.f_mot_accjerk_v;		// 現在速度
 800c24e:	4b89      	ldr	r3, [pc, #548]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c250:	ed93 7a07 	vldr	s14, [r3, #28]
 800c254:	4b87      	ldr	r3, [pc, #540]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c256:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800c25a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c25e:	edc7 7a07 	vstr	s15, [r7, #28]
		st_data.f_ctrl_trgt			= st_Info.f_mot_trgt - st_Info.f_mot_accjerk_v;		// 目標速度
 800c262:	4b84      	ldr	r3, [pc, #528]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c264:	ed93 7a08 	vldr	s14, [r3, #32]
 800c268:	4b82      	ldr	r3, [pc, #520]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c26a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800c26e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c272:	edc7 7a08 	vstr	s15, [r7, #32]
		st_data.f_ctrl_nowDist		= st_Info.f_mot_l1_accjerk;				// 進んでいない
 800c276:	4b7f      	ldr	r3, [pc, #508]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c27a:	627b      	str	r3, [r7, #36]	@ 0x24
		st_data.f_ctrl_dist			= st_Info.f_mot_l1_accjerk+st_Info.f_mot_l1_accconst;			// 加速距離
 800c27c:	4b7d      	ldr	r3, [pc, #500]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c27e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800c282:	4b7c      	ldr	r3, [pc, #496]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c284:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800c288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c28c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		st_data.f_ctrl_jerkAngle		= 0;
 800c290:	f04f 0300 	mov.w	r3, #0
 800c294:	62fb      	str	r3, [r7, #44]	@ 0x2c
		st_data.f_ctrl_nowAccAngle		= 0;
 800c296:	f04f 0300 	mov.w	r3, #0
 800c29a:	633b      	str	r3, [r7, #48]	@ 0x30
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c29c:	f04f 0300 	mov.w	r3, #0
 800c2a0:	637b      	str	r3, [r7, #52]	@ 0x34
		st_data.f_ctrl_nowAngleS		= 0;				// 現在角速度
 800c2a2:	f04f 0300 	mov.w	r3, #0
 800c2a6:	63bb      	str	r3, [r7, #56]	@ 0x38
		st_data.f_ctrl_trgtAngleS		= 0;				// 目標角度
 800c2a8:	f04f 0300 	mov.w	r3, #0
 800c2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
		st_data.f_ctrl_nowAngle		= 0;				// 現在角度
 800c2ae:	f04f 0300 	mov.w	r3, #0
 800c2b2:	643b      	str	r3, [r7, #64]	@ 0x40
		st_data.f_ctrl_angle			= 0;				// 目標角度
 800c2b4:	f04f 0300 	mov.w	r3, #0
 800c2b8:	647b      	str	r3, [r7, #68]	@ 0x44
		st_data.f_ctrl_time 			= 0;				// 目標時間 [sec] ← 指定しない
 800c2ba:	f04f 0300 	mov.w	r3, #0
 800c2be:	60fb      	str	r3, [r7, #12]
//		CTRL_clrData();								// 設定データをクリア
		CTRL_setData( &st_data );						// データセット
 800c2c0:	f107 0308 	add.w	r3, r7, #8
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7fa f9ab 	bl	8006620 <CTRL_setData>
		DCM_staMotAll();							// モータON
 800c2ca:	f7fd fa5f 	bl	800978c <DCM_staMotAll>
		while( Get_NowDist() < (st_Info.f_mot_l1_accjerk + st_Info.f_mot_l1_accconst)){					// 指定距離到達待ち
 800c2ce:	e00f      	b.n	800c2f0 <MOT_goBlock_AccConstDec+0x1a4>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c2d0:	f7fd fa06 	bl	80096e0 <SYS_isOutOfCtrl>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d008      	beq.n	800c2ec <MOT_goBlock_AccConstDec+0x1a0>
				CTRL_stop();
 800c2da:	f7fa f8a3 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c2de:	2000      	movs	r0, #0
 800c2e0:	f7fd fa30 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c2e4:	2001      	movs	r0, #1
 800c2e6:	f7fd fa2d 	bl	8009744 <DCM_brakeMot>
				break;
 800c2ea:	e012      	b.n	800c312 <MOT_goBlock_AccConstDec+0x1c6>
			}				
			MOT_setWallEdgeDist();
 800c2ec:	f006 fabe 	bl	801286c <MOT_setWallEdgeDist>
		while( Get_NowDist() < (st_Info.f_mot_l1_accjerk + st_Info.f_mot_l1_accconst)){					// 指定距離到達待ち
 800c2f0:	f7f9 ffe8 	bl	80062c4 <Get_NowDist>
 800c2f4:	eef0 6a40 	vmov.f32	s13, s0
 800c2f8:	4b5e      	ldr	r3, [pc, #376]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c2fa:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800c2fe:	4b5d      	ldr	r3, [pc, #372]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c300:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800c304:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c308:	eef4 6ae7 	vcmpe.f32	s13, s15
 800c30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c310:	d4de      	bmi.n	800c2d0 <MOT_goBlock_AccConstDec+0x184>

		}
		//acc - jerk
		st_data.f_ctrl_jerk			= st_Info.f_mot_jerk*(-1.0);
 800c312:	4b58      	ldr	r3, [pc, #352]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	4618      	mov	r0, r3
 800c318:	f7f4 f93e 	bl	8000598 <__aeabi_f2d>
 800c31c:	4602      	mov	r2, r0
 800c31e:	460b      	mov	r3, r1
 800c320:	4610      	mov	r0, r2
 800c322:	4619      	mov	r1, r3
 800c324:	f7f4 fc88 	bl	8000c38 <__aeabi_d2f>
 800c328:	4603      	mov	r3, r0
 800c32a:	ee07 3a90 	vmov	s15, r3
 800c32e:	eef1 7a67 	vneg.f32	s15, s15
 800c332:	edc7 7a04 	vstr	s15, [r7, #16]
		st_data.f_ctrl_trgtAcc		= 0;		// 加速度指定
 800c336:	f04f 0300 	mov.w	r3, #0
 800c33a:	61bb      	str	r3, [r7, #24]
		st_data.f_ctrl_nowAcc		= st_Info.f_mot_trgtAcc1;
 800c33c:	4b4d      	ldr	r3, [pc, #308]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	617b      	str	r3, [r7, #20]
		st_data.f_ctrl_now			= st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v;		// 現在速度
 800c342:	4b4c      	ldr	r3, [pc, #304]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c344:	ed93 7a08 	vldr	s14, [r3, #32]
 800c348:	4b4a      	ldr	r3, [pc, #296]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c34a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800c34e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c352:	edc7 7a07 	vstr	s15, [r7, #28]
		st_data.f_ctrl_trgt			= st_Info.f_mot_trgt;		// 目標速度
 800c356:	4b47      	ldr	r3, [pc, #284]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c358:	6a1b      	ldr	r3, [r3, #32]
 800c35a:	623b      	str	r3, [r7, #32]
		st_data.f_ctrl_nowDist		= st_Info.f_mot_l1_accjerk + st_Info.f_mot_l1_accconst;				
 800c35c:	4b45      	ldr	r3, [pc, #276]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c35e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800c362:	4b44      	ldr	r3, [pc, #272]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c364:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800c368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c36c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		st_data.f_ctrl_dist			= st_Info.f_mot_l1;			// 加速距離
 800c370:	4b40      	ldr	r3, [pc, #256]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c374:	62bb      	str	r3, [r7, #40]	@ 0x28
		st_data.f_ctrl_jerkAngle		= 0;
 800c376:	f04f 0300 	mov.w	r3, #0
 800c37a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		st_data.f_ctrl_nowAccAngle		= 0;
 800c37c:	f04f 0300 	mov.w	r3, #0
 800c380:	633b      	str	r3, [r7, #48]	@ 0x30
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c382:	f04f 0300 	mov.w	r3, #0
 800c386:	637b      	str	r3, [r7, #52]	@ 0x34
		st_data.f_ctrl_nowAngleS		= 0;				// 現在角速度
 800c388:	f04f 0300 	mov.w	r3, #0
 800c38c:	63bb      	str	r3, [r7, #56]	@ 0x38
		st_data.f_ctrl_trgtAngleS		= 0;				// 目標角度
 800c38e:	f04f 0300 	mov.w	r3, #0
 800c392:	63fb      	str	r3, [r7, #60]	@ 0x3c
		st_data.f_ctrl_nowAngle		= 0;				// 現在角度
 800c394:	f04f 0300 	mov.w	r3, #0
 800c398:	643b      	str	r3, [r7, #64]	@ 0x40
		st_data.f_ctrl_angle			= 0;				// 目標角度
 800c39a:	f04f 0300 	mov.w	r3, #0
 800c39e:	647b      	str	r3, [r7, #68]	@ 0x44
		st_data.f_ctrl_time 			= 0;				// 目標時間 [sec] ← 指定しない
 800c3a0:	f04f 0300 	mov.w	r3, #0
 800c3a4:	60fb      	str	r3, [r7, #12]
//		CTRL_clrData();								// 設定データをクリア
		CTRL_setData( &st_data );						// データセット
 800c3a6:	f107 0308 	add.w	r3, r7, #8
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7fa f938 	bl	8006620 <CTRL_setData>
		DCM_staMotAll();							// モータON
 800c3b0:	f7fd f9ec 	bl	800978c <DCM_staMotAll>
		while( Get_NowDist() < st_Info.f_mot_l1 ){					// 指定距離到達待ち
 800c3b4:	e00f      	b.n	800c3d6 <MOT_goBlock_AccConstDec+0x28a>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c3b6:	f7fd f993 	bl	80096e0 <SYS_isOutOfCtrl>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d008      	beq.n	800c3d2 <MOT_goBlock_AccConstDec+0x286>
				CTRL_stop();
 800c3c0:	f7fa f830 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	f7fd f9bd 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c3ca:	2001      	movs	r0, #1
 800c3cc:	f7fd f9ba 	bl	8009744 <DCM_brakeMot>
				break;
 800c3d0:	e00d      	b.n	800c3ee <MOT_goBlock_AccConstDec+0x2a2>
			}				
			MOT_setWallEdgeDist();
 800c3d2:	f006 fa4b 	bl	801286c <MOT_setWallEdgeDist>
		while( Get_NowDist() < st_Info.f_mot_l1 ){					// 指定距離到達待ち
 800c3d6:	f7f9 ff75 	bl	80062c4 <Get_NowDist>
 800c3da:	eeb0 7a40 	vmov.f32	s14, s0
 800c3de:	4b25      	ldr	r3, [pc, #148]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c3e0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800c3e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ec:	d4e3      	bmi.n	800c3b6 <MOT_goBlock_AccConstDec+0x26a>
	}

	/* ------ */
	/*  const */
	/* ------ */
	if( MOT_GO_ST_NORMAL == en_goType ){
 800c3ee:	78bb      	ldrb	r3, [r7, #2]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d102      	bne.n	800c3fa <MOT_goBlock_AccConstDec+0x2ae>
		st_data.en_ctrl_type		= CTRL_CONST;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	723b      	strb	r3, [r7, #8]
 800c3f8:	e001      	b.n	800c3fe <MOT_goBlock_AccConstDec+0x2b2>
	}
	else{
		st_data.en_ctrl_type		= CTRL_SKEW_CONST;
 800c3fa:	2304      	movs	r3, #4
 800c3fc:	723b      	strb	r3, [r7, #8]
	}
	st_data.f_ctrl_jerk			= 0;
 800c3fe:	f04f 0300 	mov.w	r3, #0
 800c402:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;		// 加速度指定
 800c404:	f04f 0300 	mov.w	r3, #0
 800c408:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 800c40a:	f04f 0300 	mov.w	r3, #0
 800c40e:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_Info.f_mot_trgt;			// 現在速度
 800c410:	4b18      	ldr	r3, [pc, #96]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c412:	6a1b      	ldr	r3, [r3, #32]
 800c414:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_Info.f_mot_trgt;			// 目標速度
 800c416:	4b17      	ldr	r3, [pc, #92]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c418:	6a1b      	ldr	r3, [r3, #32]
 800c41a:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= st_Info.f_mot_l1;				// 現在位置
 800c41c:	4b15      	ldr	r3, [pc, #84]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c41e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c420:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= st_Info.f_mot_l1_2;			// 等速完了位置
 800c422:	4b14      	ldr	r3, [pc, #80]	@ (800c474 <MOT_goBlock_AccConstDec+0x328>)
 800c424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c426:	62bb      	str	r3, [r7, #40]	@ 0x28
	st_data.f_ctrl_jerkAngle		= 0;
 800c428:	f04f 0300 	mov.w	r3, #0
 800c42c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= 0;
 800c42e:	f04f 0300 	mov.w	r3, #0
 800c432:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c434:	f04f 0300 	mov.w	r3, #0
 800c438:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= 0;					// 現在角速度
 800c43a:	f04f 0300 	mov.w	r3, #0
 800c43e:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS		= 0;					// 目標角度
 800c440:	f04f 0300 	mov.w	r3, #0
 800c444:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle		= 0;					// 現在角度
 800c446:	f04f 0300 	mov.w	r3, #0
 800c44a:	643b      	str	r3, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= 0;					// 目標角度
 800c44c:	f04f 0300 	mov.w	r3, #0
 800c450:	647b      	str	r3, [r7, #68]	@ 0x44
	st_data.f_ctrl_time 			= 0;					// 目標時間 [sec] ← 指定しない
 800c452:	f04f 0300 	mov.w	r3, #0
 800c456:	60fb      	str	r3, [r7, #12]
	if( ( en_type == MOT_CONST_DEC ) || ( en_type == MOT_CONST_DEC_CUSTOM ) ){
 800c458:	78fb      	ldrb	r3, [r7, #3]
 800c45a:	2b05      	cmp	r3, #5
 800c45c:	d002      	beq.n	800c464 <MOT_goBlock_AccConstDec+0x318>
 800c45e:	78fb      	ldrb	r3, [r7, #3]
 800c460:	2b06      	cmp	r3, #6
 800c462:	d101      	bne.n	800c468 <MOT_goBlock_AccConstDec+0x31c>
		CTRL_clrData();										// 設定データをクリア
 800c464:	f7f9 ffee 	bl	8006444 <CTRL_clrData>
	}
	CTRL_setData( &st_data );						// データセット
 800c468:	f107 0308 	add.w	r3, r7, #8
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fa f8d7 	bl	8006620 <CTRL_setData>
	while( Get_NowDist() < st_Info.f_mot_l1_2 ){				// 指定距離到達待ち
 800c472:	e011      	b.n	800c498 <MOT_goBlock_AccConstDec+0x34c>
 800c474:	20017b2c 	.word	0x20017b2c
		if( SYS_isOutOfCtrl() == TRUE ){
 800c478:	f7fd f932 	bl	80096e0 <SYS_isOutOfCtrl>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d008      	beq.n	800c494 <MOT_goBlock_AccConstDec+0x348>
			CTRL_stop();
 800c482:	f7f9 ffcf 	bl	8006424 <CTRL_stop>
			DCM_brakeMot( DCM_R );		
 800c486:	2000      	movs	r0, #0
 800c488:	f7fd f95c 	bl	8009744 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		
 800c48c:	2001      	movs	r0, #1
 800c48e:	f7fd f959 	bl	8009744 <DCM_brakeMot>
			break;
 800c492:	e00d      	b.n	800c4b0 <MOT_goBlock_AccConstDec+0x364>
		}				
		MOT_setWallEdgeDist();
 800c494:	f006 f9ea 	bl	801286c <MOT_setWallEdgeDist>
	while( Get_NowDist() < st_Info.f_mot_l1_2 ){				// 指定距離到達待ち
 800c498:	f7f9 ff14 	bl	80062c4 <Get_NowDist>
 800c49c:	eeb0 7a40 	vmov.f32	s14, s0
 800c4a0:	4bc2      	ldr	r3, [pc, #776]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c4a2:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800c4a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ae:	d4e3      	bmi.n	800c478 <MOT_goBlock_AccConstDec+0x32c>
	}

	/* ------ */
	/*  dec - jerk  */
	/* ------ */
	if( ( en_type != MOT_ACC_CONST ) && ( en_type != MOT_ACC_CONST_CUSTOM ) ){
 800c4b0:	78fb      	ldrb	r3, [r7, #3]
 800c4b2:	2b03      	cmp	r3, #3
 800c4b4:	f000 81a8 	beq.w	800c808 <MOT_goBlock_AccConstDec+0x6bc>
 800c4b8:	78fb      	ldrb	r3, [r7, #3]
 800c4ba:	2b04      	cmp	r3, #4
 800c4bc:	f000 81a4 	beq.w	800c808 <MOT_goBlock_AccConstDec+0x6bc>

		if( MOT_GO_ST_NORMAL == en_goType ){
 800c4c0:	78bb      	ldrb	r3, [r7, #2]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d102      	bne.n	800c4cc <MOT_goBlock_AccConstDec+0x380>
			st_data.en_ctrl_type		= CTRL_DEC;
 800c4c6:	2302      	movs	r3, #2
 800c4c8:	723b      	strb	r3, [r7, #8]
 800c4ca:	e001      	b.n	800c4d0 <MOT_goBlock_AccConstDec+0x384>
		}
		else{
			st_data.en_ctrl_type		= CTRL_SKEW_DEC;
 800c4cc:	2305      	movs	r3, #5
 800c4ce:	723b      	strb	r3, [r7, #8]
		}
		st_data.f_ctrl_jerk			= st_Info.f_mot_jerk*(-1.0) ;
 800c4d0:	4bb6      	ldr	r3, [pc, #728]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7f4 f85f 	bl	8000598 <__aeabi_f2d>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	460b      	mov	r3, r1
 800c4de:	4610      	mov	r0, r2
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	f7f4 fba9 	bl	8000c38 <__aeabi_d2f>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	ee07 3a90 	vmov	s15, r3
 800c4ec:	eef1 7a67 	vneg.f32	s15, s15
 800c4f0:	edc7 7a04 	vstr	s15, [r7, #16]
		st_data.f_ctrl_trgtAcc		= st_Info.f_mot_trgtAcc3*(-1.0);		// 減速
 800c4f4:	4bad      	ldr	r3, [pc, #692]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7f4 f84d 	bl	8000598 <__aeabi_f2d>
 800c4fe:	4602      	mov	r2, r0
 800c500:	460b      	mov	r3, r1
 800c502:	4610      	mov	r0, r2
 800c504:	4619      	mov	r1, r3
 800c506:	f7f4 fb97 	bl	8000c38 <__aeabi_d2f>
 800c50a:	4603      	mov	r3, r0
 800c50c:	ee07 3a90 	vmov	s15, r3
 800c510:	eef1 7a67 	vneg.f32	s15, s15
 800c514:	edc7 7a06 	vstr	s15, [r7, #24]
		st_data.f_ctrl_nowAcc		= 0;
 800c518:	f04f 0300 	mov.w	r3, #0
 800c51c:	617b      	str	r3, [r7, #20]
		st_data.f_ctrl_now			= st_Info.f_mot_trgt;			// 現在速度
 800c51e:	4ba3      	ldr	r3, [pc, #652]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c520:	6a1b      	ldr	r3, [r3, #32]
 800c522:	61fb      	str	r3, [r7, #28]
		st_data.f_ctrl_trgt			= st_Info.f_mot_trgt - st_Info.f_mot_decjerk_v;			// 最終速度
 800c524:	4ba1      	ldr	r3, [pc, #644]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c526:	ed93 7a08 	vldr	s14, [r3, #32]
 800c52a:	4ba0      	ldr	r3, [pc, #640]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c52c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c530:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c534:	edc7 7a08 	vstr	s15, [r7, #32]
		st_data.f_ctrl_nowDist		= st_Info.f_mot_l1_2;			// 等速完了位置
 800c538:	4b9c      	ldr	r3, [pc, #624]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c53a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c53c:	627b      	str	r3, [r7, #36]	@ 0x24
		st_data.f_ctrl_dist			= st_Info.f_mot_l1_2 + st_Info.f_mot_l3_decjerk;			// 全移動完了位置
 800c53e:	4b9b      	ldr	r3, [pc, #620]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c540:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800c544:	4b99      	ldr	r3, [pc, #612]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c546:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800c54a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c54e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		st_data.f_ctrl_jerkAngle		= 0;
 800c552:	f04f 0300 	mov.w	r3, #0
 800c556:	62fb      	str	r3, [r7, #44]	@ 0x2c
		st_data.f_ctrl_nowAccAngle		= 0;
 800c558:	f04f 0300 	mov.w	r3, #0
 800c55c:	633b      	str	r3, [r7, #48]	@ 0x30
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c55e:	f04f 0300 	mov.w	r3, #0
 800c562:	637b      	str	r3, [r7, #52]	@ 0x34
		st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 800c564:	f04f 0300 	mov.w	r3, #0
 800c568:	63bb      	str	r3, [r7, #56]	@ 0x38
		st_data.f_ctrl_trgtAngleS		= 0;						// 目標角度
 800c56a:	f04f 0300 	mov.w	r3, #0
 800c56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 800c570:	f04f 0300 	mov.w	r3, #0
 800c574:	643b      	str	r3, [r7, #64]	@ 0x40
		st_data.f_ctrl_angle			= 0;						// 目標角度
 800c576:	f04f 0300 	mov.w	r3, #0
 800c57a:	647b      	str	r3, [r7, #68]	@ 0x44
		st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c57c:	f04f 0300 	mov.w	r3, #0
 800c580:	60fb      	str	r3, [r7, #12]
		CTRL_setData( &st_data );							// データセット
 800c582:	f107 0308 	add.w	r3, r7, #8
 800c586:	4618      	mov	r0, r3
 800c588:	f7fa f84a 	bl	8006620 <CTRL_setData>
		while( Get_NowDist() < ( st_Info.f_mot_l1_2 + st_Info.f_mot_l3_decjerk ) ){		// 指定距離到達待ち
 800c58c:	e00f      	b.n	800c5ae <MOT_goBlock_AccConstDec+0x462>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c58e:	f7fd f8a7 	bl	80096e0 <SYS_isOutOfCtrl>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d008      	beq.n	800c5aa <MOT_goBlock_AccConstDec+0x45e>
				CTRL_stop();
 800c598:	f7f9 ff44 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c59c:	2000      	movs	r0, #0
 800c59e:	f7fd f8d1 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c5a2:	2001      	movs	r0, #1
 800c5a4:	f7fd f8ce 	bl	8009744 <DCM_brakeMot>
				break;
 800c5a8:	e012      	b.n	800c5d0 <MOT_goBlock_AccConstDec+0x484>
			}				
			MOT_setWallEdgeDist();
 800c5aa:	f006 f95f 	bl	801286c <MOT_setWallEdgeDist>
		while( Get_NowDist() < ( st_Info.f_mot_l1_2 + st_Info.f_mot_l3_decjerk ) ){		// 指定距離到達待ち
 800c5ae:	f7f9 fe89 	bl	80062c4 <Get_NowDist>
 800c5b2:	eef0 6a40 	vmov.f32	s13, s0
 800c5b6:	4b7d      	ldr	r3, [pc, #500]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c5b8:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800c5bc:	4b7b      	ldr	r3, [pc, #492]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c5be:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800c5c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5c6:	eef4 6ae7 	vcmpe.f32	s13, s15
 800c5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ce:	d4de      	bmi.n	800c58e <MOT_goBlock_AccConstDec+0x442>

		}

		//dec
		st_data.f_ctrl_jerk			= 0 ;
 800c5d0:	f04f 0300 	mov.w	r3, #0
 800c5d4:	613b      	str	r3, [r7, #16]
		st_data.f_ctrl_trgtAcc		= st_Info.f_mot_trgtAcc3*(-1.0);		// 減速
 800c5d6:	4b75      	ldr	r3, [pc, #468]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7f3 ffdc 	bl	8000598 <__aeabi_f2d>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4610      	mov	r0, r2
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	f7f4 fb26 	bl	8000c38 <__aeabi_d2f>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	ee07 3a90 	vmov	s15, r3
 800c5f2:	eef1 7a67 	vneg.f32	s15, s15
 800c5f6:	edc7 7a06 	vstr	s15, [r7, #24]
		st_data.f_ctrl_nowAcc		= st_Info.f_mot_trgtAcc3*(-1.0);
 800c5fa:	4b6c      	ldr	r3, [pc, #432]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c5fc:	68db      	ldr	r3, [r3, #12]
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7f3 ffca 	bl	8000598 <__aeabi_f2d>
 800c604:	4602      	mov	r2, r0
 800c606:	460b      	mov	r3, r1
 800c608:	4610      	mov	r0, r2
 800c60a:	4619      	mov	r1, r3
 800c60c:	f7f4 fb14 	bl	8000c38 <__aeabi_d2f>
 800c610:	4603      	mov	r3, r0
 800c612:	ee07 3a90 	vmov	s15, r3
 800c616:	eef1 7a67 	vneg.f32	s15, s15
 800c61a:	edc7 7a05 	vstr	s15, [r7, #20]
		st_data.f_ctrl_now			= st_Info.f_mot_trgt - st_Info.f_mot_decjerk_v;			// 現在速度
 800c61e:	4b63      	ldr	r3, [pc, #396]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c620:	ed93 7a08 	vldr	s14, [r3, #32]
 800c624:	4b61      	ldr	r3, [pc, #388]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c626:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c62a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c62e:	edc7 7a07 	vstr	s15, [r7, #28]
		st_data.f_ctrl_trgt			= st_Info.f_mot_last + st_Info.f_mot_decjerk_v;			// 最終速度
 800c632:	4b5e      	ldr	r3, [pc, #376]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c634:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800c638:	4b5c      	ldr	r3, [pc, #368]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c63a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c63e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c642:	edc7 7a08 	vstr	s15, [r7, #32]
		st_data.f_ctrl_nowDist		= st_Info.f_mot_l1_2 + st_Info.f_mot_l3_decjerk;			// 等速完了位置
 800c646:	4b59      	ldr	r3, [pc, #356]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c648:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800c64c:	4b57      	ldr	r3, [pc, #348]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c64e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800c652:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c656:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		st_data.f_ctrl_dist			= st_Info.f_mot_l1_2 + st_Info.f_mot_l3_decjerk+st_Info.f_mot_l3_decconst;			// 全移動完了位置
 800c65a:	4b54      	ldr	r3, [pc, #336]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c65c:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800c660:	4b52      	ldr	r3, [pc, #328]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c662:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800c666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c66a:	4b50      	ldr	r3, [pc, #320]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c66c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800c670:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c674:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		st_data.f_ctrl_jerkAngle		= 0;
 800c678:	f04f 0300 	mov.w	r3, #0
 800c67c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		st_data.f_ctrl_nowAccAngle		= 0;
 800c67e:	f04f 0300 	mov.w	r3, #0
 800c682:	633b      	str	r3, [r7, #48]	@ 0x30
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c684:	f04f 0300 	mov.w	r3, #0
 800c688:	637b      	str	r3, [r7, #52]	@ 0x34
		st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 800c68a:	f04f 0300 	mov.w	r3, #0
 800c68e:	63bb      	str	r3, [r7, #56]	@ 0x38
		st_data.f_ctrl_trgtAngleS		= 0;						// 目標角度
 800c690:	f04f 0300 	mov.w	r3, #0
 800c694:	63fb      	str	r3, [r7, #60]	@ 0x3c
		st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 800c696:	f04f 0300 	mov.w	r3, #0
 800c69a:	643b      	str	r3, [r7, #64]	@ 0x40
		st_data.f_ctrl_angle			= 0;						// 目標角度
 800c69c:	f04f 0300 	mov.w	r3, #0
 800c6a0:	647b      	str	r3, [r7, #68]	@ 0x44
		st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c6a2:	f04f 0300 	mov.w	r3, #0
 800c6a6:	60fb      	str	r3, [r7, #12]
		CTRL_setData( &st_data );							// データセット
 800c6a8:	f107 0308 	add.w	r3, r7, #8
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7f9 ffb7 	bl	8006620 <CTRL_setData>
		while( Get_NowDist() < ( st_Info.f_mot_l1_2 + st_Info.f_mot_l3_decjerk+st_Info.f_mot_l3_decconst ) ){		// 指定距離到達待ち
 800c6b2:	e00f      	b.n	800c6d4 <MOT_goBlock_AccConstDec+0x588>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c6b4:	f7fd f814 	bl	80096e0 <SYS_isOutOfCtrl>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d008      	beq.n	800c6d0 <MOT_goBlock_AccConstDec+0x584>
				CTRL_stop();
 800c6be:	f7f9 feb1 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c6c2:	2000      	movs	r0, #0
 800c6c4:	f7fd f83e 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c6c8:	2001      	movs	r0, #1
 800c6ca:	f7fd f83b 	bl	8009744 <DCM_brakeMot>
				break;
 800c6ce:	e017      	b.n	800c700 <MOT_goBlock_AccConstDec+0x5b4>
			}				
			MOT_setWallEdgeDist();
 800c6d0:	f006 f8cc 	bl	801286c <MOT_setWallEdgeDist>
		while( Get_NowDist() < ( st_Info.f_mot_l1_2 + st_Info.f_mot_l3_decjerk+st_Info.f_mot_l3_decconst ) ){		// 指定距離到達待ち
 800c6d4:	f7f9 fdf6 	bl	80062c4 <Get_NowDist>
 800c6d8:	eef0 6a40 	vmov.f32	s13, s0
 800c6dc:	4b33      	ldr	r3, [pc, #204]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c6de:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800c6e2:	4b32      	ldr	r3, [pc, #200]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c6e4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800c6e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c6ec:	4b2f      	ldr	r3, [pc, #188]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c6ee:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800c6f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6f6:	eef4 6ae7 	vcmpe.f32	s13, s15
 800c6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6fe:	d4d9      	bmi.n	800c6b4 <MOT_goBlock_AccConstDec+0x568>

		}

		//dec + accjerk
		st_data.f_ctrl_jerk			= st_Info.f_mot_jerk ;
 800c700:	4b2a      	ldr	r3, [pc, #168]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	613b      	str	r3, [r7, #16]
		st_data.f_ctrl_trgtAcc		= 0;		// 減速
 800c706:	f04f 0300 	mov.w	r3, #0
 800c70a:	61bb      	str	r3, [r7, #24]
		st_data.f_ctrl_nowAcc		= st_Info.f_mot_trgtAcc3*(-1.0);
 800c70c:	4b27      	ldr	r3, [pc, #156]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	4618      	mov	r0, r3
 800c712:	f7f3 ff41 	bl	8000598 <__aeabi_f2d>
 800c716:	4602      	mov	r2, r0
 800c718:	460b      	mov	r3, r1
 800c71a:	4610      	mov	r0, r2
 800c71c:	4619      	mov	r1, r3
 800c71e:	f7f4 fa8b 	bl	8000c38 <__aeabi_d2f>
 800c722:	4603      	mov	r3, r0
 800c724:	ee07 3a90 	vmov	s15, r3
 800c728:	eef1 7a67 	vneg.f32	s15, s15
 800c72c:	edc7 7a05 	vstr	s15, [r7, #20]
		st_data.f_ctrl_now			= st_Info.f_mot_last + st_Info.f_mot_decjerk_v;			// 現在速度
 800c730:	4b1e      	ldr	r3, [pc, #120]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c732:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800c736:	4b1d      	ldr	r3, [pc, #116]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c738:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800c73c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c740:	edc7 7a07 	vstr	s15, [r7, #28]
		st_data.f_ctrl_trgt			= st_Info.f_mot_last;			// 最終速度
 800c744:	4b19      	ldr	r3, [pc, #100]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c748:	623b      	str	r3, [r7, #32]
		st_data.f_ctrl_nowDist		= st_Info.f_mot_l1_2 + st_Info.f_mot_l3_decjerk+st_Info.f_mot_l3_decconst;			// 等速完了位置
 800c74a:	4b18      	ldr	r3, [pc, #96]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c74c:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800c750:	4b16      	ldr	r3, [pc, #88]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c752:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800c756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c75a:	4b14      	ldr	r3, [pc, #80]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c75c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800c760:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c764:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		st_data.f_ctrl_dist			= st_Info.f_mot_dist;			// 全移動完了位置
 800c768:	4b10      	ldr	r3, [pc, #64]	@ (800c7ac <MOT_goBlock_AccConstDec+0x660>)
 800c76a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c76c:	62bb      	str	r3, [r7, #40]	@ 0x28
		st_data.f_ctrl_jerkAngle		= 0;
 800c76e:	f04f 0300 	mov.w	r3, #0
 800c772:	62fb      	str	r3, [r7, #44]	@ 0x2c
		st_data.f_ctrl_nowAccAngle		= 0;
 800c774:	f04f 0300 	mov.w	r3, #0
 800c778:	633b      	str	r3, [r7, #48]	@ 0x30
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c77a:	f04f 0300 	mov.w	r3, #0
 800c77e:	637b      	str	r3, [r7, #52]	@ 0x34
		st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 800c780:	f04f 0300 	mov.w	r3, #0
 800c784:	63bb      	str	r3, [r7, #56]	@ 0x38
		st_data.f_ctrl_trgtAngleS		= 0;						// 目標角度
 800c786:	f04f 0300 	mov.w	r3, #0
 800c78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 800c78c:	f04f 0300 	mov.w	r3, #0
 800c790:	643b      	str	r3, [r7, #64]	@ 0x40
		st_data.f_ctrl_angle			= 0;						// 目標角度
 800c792:	f04f 0300 	mov.w	r3, #0
 800c796:	647b      	str	r3, [r7, #68]	@ 0x44
		st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c798:	f04f 0300 	mov.w	r3, #0
 800c79c:	60fb      	str	r3, [r7, #12]
		CTRL_setData( &st_data );							// データセット
 800c79e:	f107 0308 	add.w	r3, r7, #8
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7f9 ff3c 	bl	8006620 <CTRL_setData>
		while( Get_NowDist() < ( st_Info.f_mot_dist ) ){		// 指定距離到達待ち
 800c7a8:	e020      	b.n	800c7ec <MOT_goBlock_AccConstDec+0x6a0>
 800c7aa:	bf00      	nop
 800c7ac:	20017b2c 	.word	0x20017b2c
			if( SYS_isOutOfCtrl() == TRUE ){
 800c7b0:	f7fc ff96 	bl	80096e0 <SYS_isOutOfCtrl>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d008      	beq.n	800c7cc <MOT_goBlock_AccConstDec+0x680>
				CTRL_stop();
 800c7ba:	f7f9 fe33 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c7be:	2000      	movs	r0, #0
 800c7c0:	f7fc ffc0 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c7c4:	2001      	movs	r0, #1
 800c7c6:	f7fc ffbd 	bl	8009744 <DCM_brakeMot>
				break;
 800c7ca:	e01d      	b.n	800c808 <MOT_goBlock_AccConstDec+0x6bc>
			}				
			MOT_setWallEdgeDist();
 800c7cc:	f006 f84e 	bl	801286c <MOT_setWallEdgeDist>

			if((EscapeWait>2.0)&&(SearchFlag == TRUE))break;
 800c7d0:	4b85      	ldr	r3, [pc, #532]	@ (800c9e8 <MOT_goBlock_AccConstDec+0x89c>)
 800c7d2:	edd3 7a00 	vldr	s15, [r3]
 800c7d6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800c7da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7e2:	dd03      	ble.n	800c7ec <MOT_goBlock_AccConstDec+0x6a0>
 800c7e4:	4b81      	ldr	r3, [pc, #516]	@ (800c9ec <MOT_goBlock_AccConstDec+0x8a0>)
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d10c      	bne.n	800c806 <MOT_goBlock_AccConstDec+0x6ba>
		while( Get_NowDist() < ( st_Info.f_mot_dist ) ){		// 指定距離到達待ち
 800c7ec:	f7f9 fd6a 	bl	80062c4 <Get_NowDist>
 800c7f0:	eeb0 7a40 	vmov.f32	s14, s0
 800c7f4:	4b7e      	ldr	r3, [pc, #504]	@ (800c9f0 <MOT_goBlock_AccConstDec+0x8a4>)
 800c7f6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800c7fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c802:	d4d5      	bmi.n	800c7b0 <MOT_goBlock_AccConstDec+0x664>
 800c804:	e000      	b.n	800c808 <MOT_goBlock_AccConstDec+0x6bc>
			if((EscapeWait>2.0)&&(SearchFlag == TRUE))break;
 800c806:	bf00      	nop

	/* -------------------- */
	/*  const walledge      */
	/* -------------------- */
	/* not found edge */
	if( ( en_WallEdge != MOT_WALL_EDGE_NONE ) && ( bl_IsWallEdge == FALSE )  ){
 800c808:	4b7a      	ldr	r3, [pc, #488]	@ (800c9f4 <MOT_goBlock_AccConstDec+0x8a8>)
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d067      	beq.n	800c8e0 <MOT_goBlock_AccConstDec+0x794>
 800c810:	4b79      	ldr	r3, [pc, #484]	@ (800c9f8 <MOT_goBlock_AccConstDec+0x8ac>)
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	f083 0301 	eor.w	r3, r3, #1
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d060      	beq.n	800c8e0 <MOT_goBlock_AccConstDec+0x794>
		st_data.en_ctrl_type			= CTRL_CONST;
 800c81e:	2301      	movs	r3, #1
 800c820:	723b      	strb	r3, [r7, #8]
		st_data.f_ctrl_jerk			= 0;
 800c822:	f04f 0300 	mov.w	r3, #0
 800c826:	613b      	str	r3, [r7, #16]
		st_data.f_ctrl_trgtAcc		= 0;		// 加速度指定
 800c828:	f04f 0300 	mov.w	r3, #0
 800c82c:	61bb      	str	r3, [r7, #24]
		st_data.f_ctrl_nowAcc		= 0;
 800c82e:	f04f 0300 	mov.w	r3, #0
 800c832:	617b      	str	r3, [r7, #20]
		st_data.f_ctrl_now			= st_Info.f_mot_last;			// 現在速度
 800c834:	4b6e      	ldr	r3, [pc, #440]	@ (800c9f0 <MOT_goBlock_AccConstDec+0x8a4>)
 800c836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c838:	61fb      	str	r3, [r7, #28]
		st_data.f_ctrl_trgt			= st_Info.f_mot_last;			// 目標速度
 800c83a:	4b6d      	ldr	r3, [pc, #436]	@ (800c9f0 <MOT_goBlock_AccConstDec+0x8a4>)
 800c83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c83e:	623b      	str	r3, [r7, #32]
		st_data.f_ctrl_nowDist		= Get_NowDist();				// 現在位置
 800c840:	f7f9 fd40 	bl	80062c4 <Get_NowDist>
 800c844:	eef0 7a40 	vmov.f32	s15, s0
 800c848:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		st_data.f_ctrl_dist			= Get_NowDist() + 0.045f;	// 等速完了位置（90.0f：壁切れをどこまで救うかの距離）、ここではf_NowDistをクリアしてはいけない。
 800c84c:	f7f9 fd3a 	bl	80062c4 <Get_NowDist>
 800c850:	eef0 7a40 	vmov.f32	s15, s0
 800c854:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800c9fc <MOT_goBlock_AccConstDec+0x8b0>
 800c858:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c85c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		st_data.f_ctrl_jerkAngle		= 0;
 800c860:	f04f 0300 	mov.w	r3, #0
 800c864:	62fb      	str	r3, [r7, #44]	@ 0x2c
		st_data.f_ctrl_nowAccAngle		= 0;
 800c866:	f04f 0300 	mov.w	r3, #0
 800c86a:	633b      	str	r3, [r7, #48]	@ 0x30
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c86c:	f04f 0300 	mov.w	r3, #0
 800c870:	637b      	str	r3, [r7, #52]	@ 0x34
		st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 800c872:	f04f 0300 	mov.w	r3, #0
 800c876:	63bb      	str	r3, [r7, #56]	@ 0x38
		st_data.f_ctrl_trgtAngleS	= 0;						// 目標角度
 800c878:	f04f 0300 	mov.w	r3, #0
 800c87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 800c87e:	f04f 0300 	mov.w	r3, #0
 800c882:	643b      	str	r3, [r7, #64]	@ 0x40
		st_data.f_ctrl_angle			= 0;						// 目標角度
 800c884:	f04f 0300 	mov.w	r3, #0
 800c888:	647b      	str	r3, [r7, #68]	@ 0x44
		st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c88a:	f04f 0300 	mov.w	r3, #0
 800c88e:	60fb      	str	r3, [r7, #12]
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 800c890:	f7f9 fdd8 	bl	8006444 <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 800c894:	f107 0308 	add.w	r3, r7, #8
 800c898:	4618      	mov	r0, r3
 800c89a:	f7f9 fec1 	bl	8006620 <CTRL_setData>
		while( Get_NowDist() < st_data.f_ctrl_dist ){				// 指定距離到達待ち
 800c89e:	e012      	b.n	800c8c6 <MOT_goBlock_AccConstDec+0x77a>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c8a0:	f7fc ff1e 	bl	80096e0 <SYS_isOutOfCtrl>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d008      	beq.n	800c8bc <MOT_goBlock_AccConstDec+0x770>
				CTRL_stop();
 800c8aa:	f7f9 fdbb 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c8ae:	2000      	movs	r0, #0
 800c8b0:	f7fc ff48 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c8b4:	2001      	movs	r0, #1
 800c8b6:	f7fc ff45 	bl	8009744 <DCM_brakeMot>
				break;
 800c8ba:	e011      	b.n	800c8e0 <MOT_goBlock_AccConstDec+0x794>
			}				
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 800c8bc:	f006 f81a 	bl	80128f4 <MOT_setWallEdgeDist_LoopWait>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d10b      	bne.n	800c8de <MOT_goBlock_AccConstDec+0x792>
		while( Get_NowDist() < st_data.f_ctrl_dist ){				// 指定距離到達待ち
 800c8c6:	f7f9 fcfd 	bl	80062c4 <Get_NowDist>
 800c8ca:	eeb0 7a40 	vmov.f32	s14, s0
 800c8ce:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800c8d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8da:	d4e1      	bmi.n	800c8a0 <MOT_goBlock_AccConstDec+0x754>
 800c8dc:	e000      	b.n	800c8e0 <MOT_goBlock_AccConstDec+0x794>
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 800c8de:	bf00      	nop
		}
	}
	/* straight for edge */
	if( ( MOT_GO_ST_NORMAL == en_goType ) &&				// 直進時に追加動作が必要な場合にしか実施しない
 800c8e0:	78bb      	ldrb	r3, [r7, #2]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d15e      	bne.n	800c9a4 <MOT_goBlock_AccConstDec+0x858>
		( f_WallEdgeAddDist != 0.0f ) &&
 800c8e6:	4b46      	ldr	r3, [pc, #280]	@ (800ca00 <MOT_goBlock_AccConstDec+0x8b4>)
 800c8e8:	edd3 7a00 	vldr	s15, [r3]
	if( ( MOT_GO_ST_NORMAL == en_goType ) &&				// 直進時に追加動作が必要な場合にしか実施しない
 800c8ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8f4:	d056      	beq.n	800c9a4 <MOT_goBlock_AccConstDec+0x858>
		( f_WallEdgeAddDist != 0.0f ) &&
 800c8f6:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c902:	d04f      	beq.n	800c9a4 <MOT_goBlock_AccConstDec+0x858>
		( f_fin != 0.0f )
	){
		st_data.en_ctrl_type			= CTRL_CONST;
 800c904:	2301      	movs	r3, #1
 800c906:	723b      	strb	r3, [r7, #8]
		st_data.f_ctrl_jerk			= 0;
 800c908:	f04f 0300 	mov.w	r3, #0
 800c90c:	613b      	str	r3, [r7, #16]
		st_data.f_ctrl_trgtAcc		= 0;		// 加速度指定
 800c90e:	f04f 0300 	mov.w	r3, #0
 800c912:	61bb      	str	r3, [r7, #24]
		st_data.f_ctrl_nowAcc		= 0;
 800c914:	f04f 0300 	mov.w	r3, #0
 800c918:	617b      	str	r3, [r7, #20]
		st_data.f_ctrl_now			= st_Info.f_mot_last;			// 現在速度
 800c91a:	4b35      	ldr	r3, [pc, #212]	@ (800c9f0 <MOT_goBlock_AccConstDec+0x8a4>)
 800c91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c91e:	61fb      	str	r3, [r7, #28]
		st_data.f_ctrl_trgt			= st_Info.f_mot_last;			// 目標速度
 800c920:	4b33      	ldr	r3, [pc, #204]	@ (800c9f0 <MOT_goBlock_AccConstDec+0x8a4>)
 800c922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c924:	623b      	str	r3, [r7, #32]
		st_data.f_ctrl_nowDist		= 0;						// 現在位置
 800c926:	f04f 0300 	mov.w	r3, #0
 800c92a:	627b      	str	r3, [r7, #36]	@ 0x24
		st_data.f_ctrl_dist			= f_WallEdgeAddDist;		// 等速完了位置
 800c92c:	4b34      	ldr	r3, [pc, #208]	@ (800ca00 <MOT_goBlock_AccConstDec+0x8b4>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	62bb      	str	r3, [r7, #40]	@ 0x28
		st_data.f_ctrl_jerkAngle		= 0;
 800c932:	f04f 0300 	mov.w	r3, #0
 800c936:	62fb      	str	r3, [r7, #44]	@ 0x2c
		st_data.f_ctrl_nowAccAngle		= 0;
 800c938:	f04f 0300 	mov.w	r3, #0
 800c93c:	633b      	str	r3, [r7, #48]	@ 0x30
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800c93e:	f04f 0300 	mov.w	r3, #0
 800c942:	637b      	str	r3, [r7, #52]	@ 0x34
		st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 800c944:	f04f 0300 	mov.w	r3, #0
 800c948:	63bb      	str	r3, [r7, #56]	@ 0x38
		st_data.f_ctrl_trgtAngleS	= 0;						// 目標角度
 800c94a:	f04f 0300 	mov.w	r3, #0
 800c94e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 800c950:	f04f 0300 	mov.w	r3, #0
 800c954:	643b      	str	r3, [r7, #64]	@ 0x40
		st_data.f_ctrl_angle			= 0;						// 目標角度
 800c956:	f04f 0300 	mov.w	r3, #0
 800c95a:	647b      	str	r3, [r7, #68]	@ 0x44
		st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c95c:	f04f 0300 	mov.w	r3, #0
 800c960:	60fb      	str	r3, [r7, #12]
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 800c962:	f7f9 fd6f 	bl	8006444 <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 800c966:	f107 0308 	add.w	r3, r7, #8
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7f9 fe58 	bl	8006620 <CTRL_setData>
		while( Get_NowDist() < st_data.f_ctrl_dist ){			// 指定距離到達待ち
 800c970:	e00d      	b.n	800c98e <MOT_goBlock_AccConstDec+0x842>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c972:	f7fc feb5 	bl	80096e0 <SYS_isOutOfCtrl>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d008      	beq.n	800c98e <MOT_goBlock_AccConstDec+0x842>
				CTRL_stop();
 800c97c:	f7f9 fd52 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c980:	2000      	movs	r0, #0
 800c982:	f7fc fedf 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c986:	2001      	movs	r0, #1
 800c988:	f7fc fedc 	bl	8009744 <DCM_brakeMot>
				break;
 800c98c:	e00a      	b.n	800c9a4 <MOT_goBlock_AccConstDec+0x858>
		while( Get_NowDist() < st_data.f_ctrl_dist ){			// 指定距離到達待ち
 800c98e:	f7f9 fc99 	bl	80062c4 <Get_NowDist>
 800c992:	eeb0 7a40 	vmov.f32	s14, s0
 800c996:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800c99a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a2:	d4e6      	bmi.n	800c972 <MOT_goBlock_AccConstDec+0x826>
			}				
		}
	}

	/* stop */
	if( 0.0f == f_fin ){
 800c9a4:	edd7 7a01 	vldr	s15, [r7, #4]
 800c9a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9b0:	d10a      	bne.n	800c9c8 <MOT_goBlock_AccConstDec+0x87c>
		LL_mDelay(100);			
 800c9b2:	2064      	movs	r0, #100	@ 0x64
 800c9b4:	f00f f8c6 	bl	801bb44 <LL_mDelay>
	 	CTRL_stop();				
 800c9b8:	f7f9 fd34 	bl	8006424 <CTRL_stop>
		DCM_brakeMot( DCM_R );	
 800c9bc:	2000      	movs	r0, #0
 800c9be:	f7fc fec1 	bl	8009744 <DCM_brakeMot>
		DCM_brakeMot( DCM_L );	
 800c9c2:	2001      	movs	r0, #1
 800c9c4:	f7fc febe 	bl	8009744 <DCM_brakeMot>
	}

	f_MotNowSpeed = f_fin;		
 800c9c8:	4a0e      	ldr	r2, [pc, #56]	@ (800ca04 <MOT_goBlock_AccConstDec+0x8b8>)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6013      	str	r3, [r2, #0]
	GYRO_endErrChkAngle();
 800c9ce:	f7fd f923 	bl	8009c18 <GYRO_endErrChkAngle>
//	CTRL_clrNowData();
	CTRL_setNowData_Err(/*st_data.f_dist,*/st_data.f_ctrl_angle);
 800c9d2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800c9d6:	eeb0 0a67 	vmov.f32	s0, s15
 800c9da:	f7f9 fddd 	bl	8006598 <CTRL_setNowData_Err>
}
 800c9de:	bf00      	nop
 800c9e0:	3748      	adds	r7, #72	@ 0x48
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	200003fc 	.word	0x200003fc
 800c9ec:	2001bda0 	.word	0x2001bda0
 800c9f0:	20017b2c 	.word	0x20017b2c
 800c9f4:	20017be4 	.word	0x20017be4
 800c9f8:	20017be5 	.word	0x20017be5
 800c9fc:	3d3851ec 	.word	0x3d3851ec
 800ca00:	20017be8 	.word	0x20017be8
 800ca04:	20017bcc 	.word	0x20017bcc

0800ca08 <MOT_setData_ACC_CONST_DEC>:

void MOT_setData_ACC_CONST_DEC( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800ca08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca0c:	b08e      	sub	sp, #56	@ 0x38
 800ca0e:	af02      	add	r7, sp, #8
 800ca10:	ed87 0a07 	vstr	s0, [r7, #28]
 800ca14:	edc7 0a06 	vstr	s1, [r7, #24]
 800ca18:	4603      	mov	r3, r0
 800ca1a:	75fb      	strb	r3, [r7, #23]
	float			f_1blockDist;				// 1区画の距離[m]

	float			f_accTime;

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800ca1c:	7dfb      	ldrb	r3, [r7, #23]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d104      	bne.n	800ca2c <MOT_setData_ACC_CONST_DEC+0x24>
		f_1blockDist = BLOCK;
 800ca22:	4b01      	ldr	r3, [pc, #4]	@ (800ca28 <MOT_setData_ACC_CONST_DEC+0x20>)
 800ca24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca26:	e003      	b.n	800ca30 <MOT_setData_ACC_CONST_DEC+0x28>
 800ca28:	3db851ec 	.word	0x3db851ec
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800ca2c:	4bd0      	ldr	r3, [pc, #832]	@ (800cd70 <MOT_setData_ACC_CONST_DEC+0x368>)
 800ca2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}
	//jerk
	st_Info.f_mot_jerk		= MOT_getJerk();
 800ca30:	f7ff fb7f 	bl	800c132 <MOT_getJerk>
 800ca34:	eef0 7a40 	vmov.f32	s15, s0
 800ca38:	4bce      	ldr	r3, [pc, #824]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800ca3a:	edc3 7a01 	vstr	s15, [r3, #4]

	/* 加速度 */
	st_Info.f_mot_trgtAcc1 		= MOT_getAcc1();								// 加速度1[mm/s^2]
 800ca3e:	f7ff fb60 	bl	800c102 <MOT_getAcc1>
 800ca42:	eef0 7a40 	vmov.f32	s15, s0
 800ca46:	4bcb      	ldr	r3, [pc, #812]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800ca48:	edc3 7a02 	vstr	s15, [r3, #8]
	st_Info.f_mot_trgtAcc3 		= MOT_getAcc3();								// 加速度3[mm/s^2]
 800ca4c:	f7ff fb65 	bl	800c11a <MOT_getAcc3>
 800ca50:	eef0 7a40 	vmov.f32	s15, s0
 800ca54:	4bc7      	ldr	r3, [pc, #796]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800ca56:	edc3 7a03 	vstr	s15, [r3, #12]

	/* 速度 */
	st_Info.f_mot_now		= f_MotNowSpeed;								// 現在速度
 800ca5a:	4bc7      	ldr	r3, [pc, #796]	@ (800cd78 <MOT_setData_ACC_CONST_DEC+0x370>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4ac5      	ldr	r2, [pc, #788]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800ca60:	61d3      	str	r3, [r2, #28]
	st_Info.f_mot_trgt		= f_MotTrgtSpeed;								// 目標速度
 800ca62:	4bc6      	ldr	r3, [pc, #792]	@ (800cd7c <MOT_setData_ACC_CONST_DEC+0x374>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4ac3      	ldr	r2, [pc, #780]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800ca68:	6213      	str	r3, [r2, #32]
	st_Info.f_mot_last		= f_fin;									// 最終速度
 800ca6a:	4ac2      	ldr	r2, [pc, #776]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	6253      	str	r3, [r2, #36]	@ 0x24

	/* 距離 */
	st_Info.f_mot_dist		= f_num * f_1blockDist;	
 800ca70:	ed97 7a07 	vldr	s14, [r7, #28]
 800ca74:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ca78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca7c:	4bbd      	ldr	r3, [pc, #756]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800ca7e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	f_accTime	= st_Info.f_mot_trgtAcc1/st_Info.f_mot_jerk;
 800ca82:	4bbc      	ldr	r3, [pc, #752]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800ca84:	edd3 6a02 	vldr	s13, [r3, #8]
 800ca88:	4bba      	ldr	r3, [pc, #744]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800ca8a:	ed93 7a01 	vldr	s14, [r3, #4]
 800ca8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca92:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	st_Info.f_mot_accjerk_v	= 1.0/2.0*st_Info.f_mot_jerk*f_accTime*f_accTime;//加速度到達時の速度
 800ca96:	4bb7      	ldr	r3, [pc, #732]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7f3 fd7c 	bl	8000598 <__aeabi_f2d>
 800caa0:	f04f 0200 	mov.w	r2, #0
 800caa4:	4bb6      	ldr	r3, [pc, #728]	@ (800cd80 <MOT_setData_ACC_CONST_DEC+0x378>)
 800caa6:	f7f3 fdcf 	bl	8000648 <__aeabi_dmul>
 800caaa:	4602      	mov	r2, r0
 800caac:	460b      	mov	r3, r1
 800caae:	4614      	mov	r4, r2
 800cab0:	461d      	mov	r5, r3
 800cab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cab4:	f7f3 fd70 	bl	8000598 <__aeabi_f2d>
 800cab8:	4602      	mov	r2, r0
 800caba:	460b      	mov	r3, r1
 800cabc:	4620      	mov	r0, r4
 800cabe:	4629      	mov	r1, r5
 800cac0:	f7f3 fdc2 	bl	8000648 <__aeabi_dmul>
 800cac4:	4602      	mov	r2, r0
 800cac6:	460b      	mov	r3, r1
 800cac8:	4614      	mov	r4, r2
 800caca:	461d      	mov	r5, r3
 800cacc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cace:	f7f3 fd63 	bl	8000598 <__aeabi_f2d>
 800cad2:	4602      	mov	r2, r0
 800cad4:	460b      	mov	r3, r1
 800cad6:	4620      	mov	r0, r4
 800cad8:	4629      	mov	r1, r5
 800cada:	f7f3 fdb5 	bl	8000648 <__aeabi_dmul>
 800cade:	4602      	mov	r2, r0
 800cae0:	460b      	mov	r3, r1
 800cae2:	4610      	mov	r0, r2
 800cae4:	4619      	mov	r1, r3
 800cae6:	f7f4 f8a7 	bl	8000c38 <__aeabi_d2f>
 800caea:	4603      	mov	r3, r0
 800caec:	4aa1      	ldr	r2, [pc, #644]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800caee:	6293      	str	r3, [r2, #40]	@ 0x28
	st_Info.f_mot_decjerk_v = st_Info.f_mot_accjerk_v;
 800caf0:	4ba0      	ldr	r3, [pc, #640]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800caf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caf4:	4a9f      	ldr	r2, [pc, #636]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800caf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

	printf("1 %f,%f\r\n",st_Info.f_mot_accjerk_v,st_Info.f_mot_decjerk_v);
 800caf8:	4b9e      	ldr	r3, [pc, #632]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cafa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7f3 fd4b 	bl	8000598 <__aeabi_f2d>
 800cb02:	4604      	mov	r4, r0
 800cb04:	460d      	mov	r5, r1
 800cb06:	4b9b      	ldr	r3, [pc, #620]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cb08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7f3 fd44 	bl	8000598 <__aeabi_f2d>
 800cb10:	4602      	mov	r2, r0
 800cb12:	460b      	mov	r3, r1
 800cb14:	e9cd 2300 	strd	r2, r3, [sp]
 800cb18:	4622      	mov	r2, r4
 800cb1a:	462b      	mov	r3, r5
 800cb1c:	4899      	ldr	r0, [pc, #612]	@ (800cd84 <MOT_setData_ACC_CONST_DEC+0x37c>)
 800cb1e:	f011 f905 	bl	801dd2c <iprintf>
	printf("1 %f,%f\r\n",f_MotTrgtSpeed,f_MotNowSpeed);
 800cb22:	4b96      	ldr	r3, [pc, #600]	@ (800cd7c <MOT_setData_ACC_CONST_DEC+0x374>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7f3 fd36 	bl	8000598 <__aeabi_f2d>
 800cb2c:	4604      	mov	r4, r0
 800cb2e:	460d      	mov	r5, r1
 800cb30:	4b91      	ldr	r3, [pc, #580]	@ (800cd78 <MOT_setData_ACC_CONST_DEC+0x370>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7f3 fd2f 	bl	8000598 <__aeabi_f2d>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	e9cd 2300 	strd	r2, r3, [sp]
 800cb42:	4622      	mov	r2, r4
 800cb44:	462b      	mov	r3, r5
 800cb46:	488f      	ldr	r0, [pc, #572]	@ (800cd84 <MOT_setData_ACC_CONST_DEC+0x37c>)
 800cb48:	f011 f8f0 	bl	801dd2c <iprintf>
	if(fabsf(f_MotTrgtSpeed - f_MotNowSpeed) > 0.05){
 800cb4c:	4b8b      	ldr	r3, [pc, #556]	@ (800cd7c <MOT_setData_ACC_CONST_DEC+0x374>)
 800cb4e:	ed93 7a00 	vldr	s14, [r3]
 800cb52:	4b89      	ldr	r3, [pc, #548]	@ (800cd78 <MOT_setData_ACC_CONST_DEC+0x370>)
 800cb54:	edd3 7a00 	vldr	s15, [r3]
 800cb58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb5c:	eef0 7ae7 	vabs.f32	s15, s15
 800cb60:	ee17 0a90 	vmov	r0, s15
 800cb64:	f7f3 fd18 	bl	8000598 <__aeabi_f2d>
 800cb68:	a37d      	add	r3, pc, #500	@ (adr r3, 800cd60 <MOT_setData_ACC_CONST_DEC+0x358>)
 800cb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6e:	f7f3 fffb 	bl	8000b68 <__aeabi_dcmpgt>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	f000 812f 	beq.w	800cdd8 <MOT_setData_ACC_CONST_DEC+0x3d0>
		st_Info.f_mot_l1_accjerk	= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;//加速度に到達するまでの距離											// 移動距離[m]
 800cb7a:	4b7e      	ldr	r3, [pc, #504]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7f3 fd0a 	bl	8000598 <__aeabi_f2d>
 800cb84:	a378      	add	r3, pc, #480	@ (adr r3, 800cd68 <MOT_setData_ACC_CONST_DEC+0x360>)
 800cb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8a:	f7f3 fd5d 	bl	8000648 <__aeabi_dmul>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	460b      	mov	r3, r1
 800cb92:	4614      	mov	r4, r2
 800cb94:	461d      	mov	r5, r3
 800cb96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb98:	f7f3 fcfe 	bl	8000598 <__aeabi_f2d>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	460b      	mov	r3, r1
 800cba0:	4620      	mov	r0, r4
 800cba2:	4629      	mov	r1, r5
 800cba4:	f7f3 fd50 	bl	8000648 <__aeabi_dmul>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	460b      	mov	r3, r1
 800cbac:	4614      	mov	r4, r2
 800cbae:	461d      	mov	r5, r3
 800cbb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbb2:	f7f3 fcf1 	bl	8000598 <__aeabi_f2d>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	460b      	mov	r3, r1
 800cbba:	4620      	mov	r0, r4
 800cbbc:	4629      	mov	r1, r5
 800cbbe:	f7f3 fd43 	bl	8000648 <__aeabi_dmul>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	4614      	mov	r4, r2
 800cbc8:	461d      	mov	r5, r3
 800cbca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbcc:	f7f3 fce4 	bl	8000598 <__aeabi_f2d>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	4629      	mov	r1, r5
 800cbd8:	f7f3 fd36 	bl	8000648 <__aeabi_dmul>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	460b      	mov	r3, r1
 800cbe0:	4614      	mov	r4, r2
 800cbe2:	461d      	mov	r5, r3
 800cbe4:	4b64      	ldr	r3, [pc, #400]	@ (800cd78 <MOT_setData_ACC_CONST_DEC+0x370>)
 800cbe6:	ed93 7a00 	vldr	s14, [r3]
 800cbea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800cbee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbf2:	ee17 0a90 	vmov	r0, s15
 800cbf6:	f7f3 fccf 	bl	8000598 <__aeabi_f2d>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	4620      	mov	r0, r4
 800cc00:	4629      	mov	r1, r5
 800cc02:	f7f3 fb6b 	bl	80002dc <__adddf3>
 800cc06:	4602      	mov	r2, r0
 800cc08:	460b      	mov	r3, r1
 800cc0a:	4610      	mov	r0, r2
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	f7f4 f813 	bl	8000c38 <__aeabi_d2f>
 800cc12:	4603      	mov	r3, r0
 800cc14:	4a57      	ldr	r2, [pc, #348]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cc16:	6393      	str	r3, [r2, #56]	@ 0x38
		st_Info.f_mot_l1_decjerk	= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + (st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)*f_accTime 
 800cc18:	4b56      	ldr	r3, [pc, #344]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7f3 fcbb 	bl	8000598 <__aeabi_f2d>
 800cc22:	a351      	add	r3, pc, #324	@ (adr r3, 800cd68 <MOT_setData_ACC_CONST_DEC+0x360>)
 800cc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc28:	f7f3 fd0e 	bl	8000648 <__aeabi_dmul>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	460b      	mov	r3, r1
 800cc30:	4690      	mov	r8, r2
 800cc32:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800cc36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc38:	f7f3 fcae 	bl	8000598 <__aeabi_f2d>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	460b      	mov	r3, r1
 800cc40:	4640      	mov	r0, r8
 800cc42:	4649      	mov	r1, r9
 800cc44:	f7f3 fd00 	bl	8000648 <__aeabi_dmul>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	4614      	mov	r4, r2
 800cc4e:	461d      	mov	r5, r3
 800cc50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc52:	f7f3 fca1 	bl	8000598 <__aeabi_f2d>
 800cc56:	4602      	mov	r2, r0
 800cc58:	460b      	mov	r3, r1
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	4629      	mov	r1, r5
 800cc5e:	f7f3 fcf3 	bl	8000648 <__aeabi_dmul>
 800cc62:	4602      	mov	r2, r0
 800cc64:	460b      	mov	r3, r1
 800cc66:	4614      	mov	r4, r2
 800cc68:	461d      	mov	r5, r3
 800cc6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc6c:	f7f3 fc94 	bl	8000598 <__aeabi_f2d>
 800cc70:	4602      	mov	r2, r0
 800cc72:	460b      	mov	r3, r1
 800cc74:	4620      	mov	r0, r4
 800cc76:	4629      	mov	r1, r5
 800cc78:	f7f3 fce6 	bl	8000648 <__aeabi_dmul>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	460b      	mov	r3, r1
 800cc80:	4614      	mov	r4, r2
 800cc82:	461d      	mov	r5, r3
 800cc84:	4b3b      	ldr	r3, [pc, #236]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cc86:	ed93 7a08 	vldr	s14, [r3, #32]
 800cc8a:	4b3a      	ldr	r3, [pc, #232]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cc8c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800cc90:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cc94:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800cc98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc9c:	ee17 0a90 	vmov	r0, s15
 800cca0:	f7f3 fc7a 	bl	8000598 <__aeabi_f2d>
 800cca4:	4602      	mov	r2, r0
 800cca6:	460b      	mov	r3, r1
 800cca8:	4620      	mov	r0, r4
 800ccaa:	4629      	mov	r1, r5
 800ccac:	f7f3 fb16 	bl	80002dc <__adddf3>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	4690      	mov	r8, r2
 800ccb6:	4699      	mov	r9, r3
										+ 1.0/2.0*st_Info.f_mot_trgtAcc1*f_accTime*f_accTime;
 800ccb8:	4b2e      	ldr	r3, [pc, #184]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7f3 fc6b 	bl	8000598 <__aeabi_f2d>
 800ccc2:	f04f 0200 	mov.w	r2, #0
 800ccc6:	4b2e      	ldr	r3, [pc, #184]	@ (800cd80 <MOT_setData_ACC_CONST_DEC+0x378>)
 800ccc8:	f7f3 fcbe 	bl	8000648 <__aeabi_dmul>
 800cccc:	4602      	mov	r2, r0
 800ccce:	460b      	mov	r3, r1
 800ccd0:	4614      	mov	r4, r2
 800ccd2:	461d      	mov	r5, r3
 800ccd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccd6:	f7f3 fc5f 	bl	8000598 <__aeabi_f2d>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	460b      	mov	r3, r1
 800ccde:	4620      	mov	r0, r4
 800cce0:	4629      	mov	r1, r5
 800cce2:	f7f3 fcb1 	bl	8000648 <__aeabi_dmul>
 800cce6:	4602      	mov	r2, r0
 800cce8:	460b      	mov	r3, r1
 800ccea:	4614      	mov	r4, r2
 800ccec:	461d      	mov	r5, r3
 800ccee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccf0:	f7f3 fc52 	bl	8000598 <__aeabi_f2d>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	4629      	mov	r1, r5
 800ccfc:	f7f3 fca4 	bl	8000648 <__aeabi_dmul>
 800cd00:	4602      	mov	r2, r0
 800cd02:	460b      	mov	r3, r1
 800cd04:	4640      	mov	r0, r8
 800cd06:	4649      	mov	r1, r9
 800cd08:	f7f3 fae8 	bl	80002dc <__adddf3>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	460b      	mov	r3, r1
 800cd10:	4610      	mov	r0, r2
 800cd12:	4619      	mov	r1, r3
 800cd14:	f7f3 ff90 	bl	8000c38 <__aeabi_d2f>
 800cd18:	4603      	mov	r3, r0
		st_Info.f_mot_l1_decjerk	= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + (st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)*f_accTime 
 800cd1a:	4a16      	ldr	r2, [pc, #88]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cd1c:	6413      	str	r3, [r2, #64]	@ 0x40
		st_Info.f_mot_l1_accconst	= ((f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)*(f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)
 800cd1e:	4b17      	ldr	r3, [pc, #92]	@ (800cd7c <MOT_setData_ACC_CONST_DEC+0x374>)
 800cd20:	ed93 7a00 	vldr	s14, [r3]
 800cd24:	4b13      	ldr	r3, [pc, #76]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cd26:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800cd2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cd2e:	4b13      	ldr	r3, [pc, #76]	@ (800cd7c <MOT_setData_ACC_CONST_DEC+0x374>)
 800cd30:	edd3 6a00 	vldr	s13, [r3]
 800cd34:	4b0f      	ldr	r3, [pc, #60]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cd36:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800cd3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800cd3e:	ee27 7a27 	vmul.f32	s14, s14, s15
										-(f_MotNowSpeed+st_Info.f_mot_accjerk_v)*(f_MotNowSpeed+st_Info.f_mot_accjerk_v))
 800cd42:	4b0c      	ldr	r3, [pc, #48]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cd44:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800cd48:	4b0b      	ldr	r3, [pc, #44]	@ (800cd78 <MOT_setData_ACC_CONST_DEC+0x370>)
 800cd4a:	edd3 7a00 	vldr	s15, [r3]
 800cd4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800cd52:	4b08      	ldr	r3, [pc, #32]	@ (800cd74 <MOT_setData_ACC_CONST_DEC+0x36c>)
 800cd54:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 800cd58:	e016      	b.n	800cd88 <MOT_setData_ACC_CONST_DEC+0x380>
 800cd5a:	bf00      	nop
 800cd5c:	f3af 8000 	nop.w
 800cd60:	9999999a 	.word	0x9999999a
 800cd64:	3fa99999 	.word	0x3fa99999
 800cd68:	55555555 	.word	0x55555555
 800cd6c:	3fc55555 	.word	0x3fc55555
 800cd70:	3e0255b0 	.word	0x3e0255b0
 800cd74:	20017b2c 	.word	0x20017b2c
 800cd78:	20017bcc 	.word	0x20017bcc
 800cd7c:	20017bd0 	.word	0x20017bd0
 800cd80:	3fe00000 	.word	0x3fe00000
 800cd84:	08021d58 	.word	0x08021d58
 800cd88:	4bbb      	ldr	r3, [pc, #748]	@ (800d078 <MOT_setData_ACC_CONST_DEC+0x670>)
 800cd8a:	edd3 7a00 	vldr	s15, [r3]
 800cd8e:	ee76 7a27 	vadd.f32	s15, s12, s15
 800cd92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd96:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd9a:	ee17 0a90 	vmov	r0, s15
 800cd9e:	f7f3 fbfb 	bl	8000598 <__aeabi_f2d>
 800cda2:	4604      	mov	r4, r0
 800cda4:	460d      	mov	r5, r1
										/( st_Info.f_mot_trgtAcc1 * 2.0 );
 800cda6:	4bb5      	ldr	r3, [pc, #724]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7f3 fbf4 	bl	8000598 <__aeabi_f2d>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	f7f3 fa92 	bl	80002dc <__adddf3>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	460b      	mov	r3, r1
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	4629      	mov	r1, r5
 800cdc0:	f7f3 fd6c 	bl	800089c <__aeabi_ddiv>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	4610      	mov	r0, r2
 800cdca:	4619      	mov	r1, r3
 800cdcc:	f7f3 ff34 	bl	8000c38 <__aeabi_d2f>
 800cdd0:	4603      	mov	r3, r0
		st_Info.f_mot_l1_accconst	= ((f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)*(f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)
 800cdd2:	4aaa      	ldr	r2, [pc, #680]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800cdd4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800cdd6:	e00f      	b.n	800cdf8 <MOT_setData_ACC_CONST_DEC+0x3f0>
	}else{
		st_Info.f_mot_l1_accjerk	= 0.0;//加速度に到達するまでの距離											// 移動距離[m]
 800cdd8:	4ba8      	ldr	r3, [pc, #672]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800cdda:	f04f 0200 	mov.w	r2, #0
 800cdde:	639a      	str	r2, [r3, #56]	@ 0x38
		st_Info.f_mot_l1_decjerk	= 0.0;
 800cde0:	4ba6      	ldr	r3, [pc, #664]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800cde2:	f04f 0200 	mov.w	r2, #0
 800cde6:	641a      	str	r2, [r3, #64]	@ 0x40
		st_Info.f_mot_l1_accconst	= 0.0;
 800cde8:	4ba4      	ldr	r3, [pc, #656]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800cdea:	f04f 0200 	mov.w	r2, #0
 800cdee:	63da      	str	r2, [r3, #60]	@ 0x3c
		st_Info.f_mot_accjerk_v		= 0.0;
 800cdf0:	4ba2      	ldr	r3, [pc, #648]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800cdf2:	f04f 0200 	mov.w	r2, #0
 800cdf6:	629a      	str	r2, [r3, #40]	@ 0x28
	}
	st_Info.f_mot_l1	= st_Info.f_mot_l1_accjerk + st_Info.f_mot_l1_decjerk + st_Info.f_mot_l1_accconst;
 800cdf8:	4ba0      	ldr	r3, [pc, #640]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800cdfa:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800cdfe:	4b9f      	ldr	r3, [pc, #636]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800ce00:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800ce04:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ce08:	4b9c      	ldr	r3, [pc, #624]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800ce0a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800ce0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce12:	4b9a      	ldr	r3, [pc, #616]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800ce14:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
//	st_Info.f_l1		= ( f_MotTrgtSpeed * f_MotTrgtSpeed - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_acc1 * 2.0 );			// 第1移動距離[m]

	if((f_MotTrgtSpeed - f_fin) != 0){
 800ce18:	4b99      	ldr	r3, [pc, #612]	@ (800d080 <MOT_setData_ACC_CONST_DEC+0x678>)
 800ce1a:	ed93 7a00 	vldr	s14, [r3]
 800ce1e:	edd7 7a06 	vldr	s15, [r7, #24]
 800ce22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce26:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ce2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce2e:	f000 812b 	beq.w	800d088 <MOT_setData_ACC_CONST_DEC+0x680>
		st_Info.f_mot_l3_decjerk	= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + st_Info.f_mot_trgt*f_accTime;
 800ce32:	4b92      	ldr	r3, [pc, #584]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7f3 fbae 	bl	8000598 <__aeabi_f2d>
 800ce3c:	a38c      	add	r3, pc, #560	@ (adr r3, 800d070 <MOT_setData_ACC_CONST_DEC+0x668>)
 800ce3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce42:	f7f3 fc01 	bl	8000648 <__aeabi_dmul>
 800ce46:	4602      	mov	r2, r0
 800ce48:	460b      	mov	r3, r1
 800ce4a:	60ba      	str	r2, [r7, #8]
 800ce4c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800ce50:	60fb      	str	r3, [r7, #12]
 800ce52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce54:	f7f3 fba0 	bl	8000598 <__aeabi_f2d>
 800ce58:	4602      	mov	r2, r0
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ce60:	f7f3 fbf2 	bl	8000648 <__aeabi_dmul>
 800ce64:	4602      	mov	r2, r0
 800ce66:	460b      	mov	r3, r1
 800ce68:	4614      	mov	r4, r2
 800ce6a:	461d      	mov	r5, r3
 800ce6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce6e:	f7f3 fb93 	bl	8000598 <__aeabi_f2d>
 800ce72:	4602      	mov	r2, r0
 800ce74:	460b      	mov	r3, r1
 800ce76:	4620      	mov	r0, r4
 800ce78:	4629      	mov	r1, r5
 800ce7a:	f7f3 fbe5 	bl	8000648 <__aeabi_dmul>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	460b      	mov	r3, r1
 800ce82:	4614      	mov	r4, r2
 800ce84:	461d      	mov	r5, r3
 800ce86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce88:	f7f3 fb86 	bl	8000598 <__aeabi_f2d>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	460b      	mov	r3, r1
 800ce90:	4620      	mov	r0, r4
 800ce92:	4629      	mov	r1, r5
 800ce94:	f7f3 fbd8 	bl	8000648 <__aeabi_dmul>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	460b      	mov	r3, r1
 800ce9c:	4614      	mov	r4, r2
 800ce9e:	461d      	mov	r5, r3
 800cea0:	4b76      	ldr	r3, [pc, #472]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800cea2:	ed93 7a08 	vldr	s14, [r3, #32]
 800cea6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800ceaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceae:	ee17 0a90 	vmov	r0, s15
 800ceb2:	f7f3 fb71 	bl	8000598 <__aeabi_f2d>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	460b      	mov	r3, r1
 800ceba:	4620      	mov	r0, r4
 800cebc:	4629      	mov	r1, r5
 800cebe:	f7f3 fa0d 	bl	80002dc <__adddf3>
 800cec2:	4602      	mov	r2, r0
 800cec4:	460b      	mov	r3, r1
 800cec6:	4610      	mov	r0, r2
 800cec8:	4619      	mov	r1, r3
 800ceca:	f7f3 feb5 	bl	8000c38 <__aeabi_d2f>
 800cece:	4603      	mov	r3, r0
 800ced0:	4a6a      	ldr	r2, [pc, #424]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800ced2:	6493      	str	r3, [r2, #72]	@ 0x48
		st_Info.f_mot_l3_accjerk	= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + (f_fin+st_Info.f_mot_decjerk_v)*f_accTime 
 800ced4:	4b69      	ldr	r3, [pc, #420]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7f3 fb5d 	bl	8000598 <__aeabi_f2d>
 800cede:	a364      	add	r3, pc, #400	@ (adr r3, 800d070 <MOT_setData_ACC_CONST_DEC+0x668>)
 800cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee4:	f7f3 fbb0 	bl	8000648 <__aeabi_dmul>
 800cee8:	4602      	mov	r2, r0
 800ceea:	460b      	mov	r3, r1
 800ceec:	4614      	mov	r4, r2
 800ceee:	461d      	mov	r5, r3
 800cef0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cef2:	f7f3 fb51 	bl	8000598 <__aeabi_f2d>
 800cef6:	4602      	mov	r2, r0
 800cef8:	460b      	mov	r3, r1
 800cefa:	4620      	mov	r0, r4
 800cefc:	4629      	mov	r1, r5
 800cefe:	f7f3 fba3 	bl	8000648 <__aeabi_dmul>
 800cf02:	4602      	mov	r2, r0
 800cf04:	460b      	mov	r3, r1
 800cf06:	4614      	mov	r4, r2
 800cf08:	461d      	mov	r5, r3
 800cf0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf0c:	f7f3 fb44 	bl	8000598 <__aeabi_f2d>
 800cf10:	4602      	mov	r2, r0
 800cf12:	460b      	mov	r3, r1
 800cf14:	4620      	mov	r0, r4
 800cf16:	4629      	mov	r1, r5
 800cf18:	f7f3 fb96 	bl	8000648 <__aeabi_dmul>
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	460b      	mov	r3, r1
 800cf20:	4614      	mov	r4, r2
 800cf22:	461d      	mov	r5, r3
 800cf24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf26:	f7f3 fb37 	bl	8000598 <__aeabi_f2d>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	4620      	mov	r0, r4
 800cf30:	4629      	mov	r1, r5
 800cf32:	f7f3 fb89 	bl	8000648 <__aeabi_dmul>
 800cf36:	4602      	mov	r2, r0
 800cf38:	460b      	mov	r3, r1
 800cf3a:	4614      	mov	r4, r2
 800cf3c:	461d      	mov	r5, r3
 800cf3e:	4b4f      	ldr	r3, [pc, #316]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800cf40:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800cf44:	edd7 7a06 	vldr	s15, [r7, #24]
 800cf48:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cf4c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800cf50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf54:	ee17 0a90 	vmov	r0, s15
 800cf58:	f7f3 fb1e 	bl	8000598 <__aeabi_f2d>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	460b      	mov	r3, r1
 800cf60:	4620      	mov	r0, r4
 800cf62:	4629      	mov	r1, r5
 800cf64:	f7f3 f9ba 	bl	80002dc <__adddf3>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	4614      	mov	r4, r2
 800cf6e:	461d      	mov	r5, r3
										+ 1.0/2.0*st_Info.f_mot_trgtAcc3*(-1.0)*f_accTime*f_accTime;//減速は加速度同様にする前提処理
 800cf70:	4b42      	ldr	r3, [pc, #264]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	4618      	mov	r0, r3
 800cf76:	f7f3 fb0f 	bl	8000598 <__aeabi_f2d>
 800cf7a:	f04f 0200 	mov.w	r2, #0
 800cf7e:	4b41      	ldr	r3, [pc, #260]	@ (800d084 <MOT_setData_ACC_CONST_DEC+0x67c>)
 800cf80:	f7f3 fb62 	bl	8000648 <__aeabi_dmul>
 800cf84:	4602      	mov	r2, r0
 800cf86:	460b      	mov	r3, r1
 800cf88:	603a      	str	r2, [r7, #0]
 800cf8a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800cf8e:	607b      	str	r3, [r7, #4]
 800cf90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf92:	f7f3 fb01 	bl	8000598 <__aeabi_f2d>
 800cf96:	4602      	mov	r2, r0
 800cf98:	460b      	mov	r3, r1
 800cf9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf9e:	f7f3 fb53 	bl	8000648 <__aeabi_dmul>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	4690      	mov	r8, r2
 800cfa8:	4699      	mov	r9, r3
 800cfaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfac:	f7f3 faf4 	bl	8000598 <__aeabi_f2d>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	4640      	mov	r0, r8
 800cfb6:	4649      	mov	r1, r9
 800cfb8:	f7f3 fb46 	bl	8000648 <__aeabi_dmul>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	4629      	mov	r1, r5
 800cfc4:	f7f3 f98a 	bl	80002dc <__adddf3>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	4610      	mov	r0, r2
 800cfce:	4619      	mov	r1, r3
 800cfd0:	f7f3 fe32 	bl	8000c38 <__aeabi_d2f>
 800cfd4:	4603      	mov	r3, r0
		st_Info.f_mot_l3_accjerk	= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + (f_fin+st_Info.f_mot_decjerk_v)*f_accTime 
 800cfd6:	4a29      	ldr	r2, [pc, #164]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800cfd8:	6513      	str	r3, [r2, #80]	@ 0x50
		st_Info.f_mot_l3_decconst	= ( (f_fin+st_Info.f_mot_decjerk_v) * (f_fin+st_Info.f_mot_decjerk_v)
 800cfda:	4b28      	ldr	r3, [pc, #160]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800cfdc:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800cfe0:	edd7 7a06 	vldr	s15, [r7, #24]
 800cfe4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cfe8:	4b24      	ldr	r3, [pc, #144]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800cfea:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800cfee:	edd7 7a06 	vldr	s15, [r7, #24]
 800cff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cff6:	ee27 7a27 	vmul.f32	s14, s14, s15
										- (f_MotTrgtSpeed-st_Info.f_mot_decjerk_v) * (f_MotTrgtSpeed-st_Info.f_mot_decjerk_v) ) 
 800cffa:	4b21      	ldr	r3, [pc, #132]	@ (800d080 <MOT_setData_ACC_CONST_DEC+0x678>)
 800cffc:	edd3 6a00 	vldr	s13, [r3]
 800d000:	4b1e      	ldr	r3, [pc, #120]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800d002:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d006:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d00a:	4b1d      	ldr	r3, [pc, #116]	@ (800d080 <MOT_setData_ACC_CONST_DEC+0x678>)
 800d00c:	ed93 6a00 	vldr	s12, [r3]
 800d010:	4b1a      	ldr	r3, [pc, #104]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800d012:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d016:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d01a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d01e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d022:	ee17 0a90 	vmov	r0, s15
 800d026:	f7f3 fab7 	bl	8000598 <__aeabi_f2d>
 800d02a:	4604      	mov	r4, r0
 800d02c:	460d      	mov	r5, r1
										/ ( st_Info.f_mot_trgtAcc3 * (-1.0 ) * 2.0 );
 800d02e:	4b13      	ldr	r3, [pc, #76]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	4618      	mov	r0, r3
 800d034:	f7f3 fab0 	bl	8000598 <__aeabi_f2d>
 800d038:	4602      	mov	r2, r0
 800d03a:	460b      	mov	r3, r1
 800d03c:	4692      	mov	sl, r2
 800d03e:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 800d042:	4652      	mov	r2, sl
 800d044:	465b      	mov	r3, fp
 800d046:	4650      	mov	r0, sl
 800d048:	4659      	mov	r1, fp
 800d04a:	f7f3 f947 	bl	80002dc <__adddf3>
 800d04e:	4602      	mov	r2, r0
 800d050:	460b      	mov	r3, r1
 800d052:	4620      	mov	r0, r4
 800d054:	4629      	mov	r1, r5
 800d056:	f7f3 fc21 	bl	800089c <__aeabi_ddiv>
 800d05a:	4602      	mov	r2, r0
 800d05c:	460b      	mov	r3, r1
 800d05e:	4610      	mov	r0, r2
 800d060:	4619      	mov	r1, r3
 800d062:	f7f3 fde9 	bl	8000c38 <__aeabi_d2f>
 800d066:	4603      	mov	r3, r0
		st_Info.f_mot_l3_decconst	= ( (f_fin+st_Info.f_mot_decjerk_v) * (f_fin+st_Info.f_mot_decjerk_v)
 800d068:	4a04      	ldr	r2, [pc, #16]	@ (800d07c <MOT_setData_ACC_CONST_DEC+0x674>)
 800d06a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d06c:	e01c      	b.n	800d0a8 <MOT_setData_ACC_CONST_DEC+0x6a0>
 800d06e:	bf00      	nop
 800d070:	55555555 	.word	0x55555555
 800d074:	3fc55555 	.word	0x3fc55555
 800d078:	20017bcc 	.word	0x20017bcc
 800d07c:	20017b2c 	.word	0x20017b2c
 800d080:	20017bd0 	.word	0x20017bd0
 800d084:	3fe00000 	.word	0x3fe00000
	}else{
		st_Info.f_mot_l3_decjerk	= 0.0;
 800d088:	4b21      	ldr	r3, [pc, #132]	@ (800d110 <MOT_setData_ACC_CONST_DEC+0x708>)
 800d08a:	f04f 0200 	mov.w	r2, #0
 800d08e:	649a      	str	r2, [r3, #72]	@ 0x48
		st_Info.f_mot_l3_accjerk	= 0.0;
 800d090:	4b1f      	ldr	r3, [pc, #124]	@ (800d110 <MOT_setData_ACC_CONST_DEC+0x708>)
 800d092:	f04f 0200 	mov.w	r2, #0
 800d096:	651a      	str	r2, [r3, #80]	@ 0x50
		st_Info.f_mot_l3_decconst	= 0.0;
 800d098:	4b1d      	ldr	r3, [pc, #116]	@ (800d110 <MOT_setData_ACC_CONST_DEC+0x708>)
 800d09a:	f04f 0200 	mov.w	r2, #0
 800d09e:	64da      	str	r2, [r3, #76]	@ 0x4c
		st_Info.f_mot_decjerk_v		= 0.0;
 800d0a0:	4b1b      	ldr	r3, [pc, #108]	@ (800d110 <MOT_setData_ACC_CONST_DEC+0x708>)
 800d0a2:	f04f 0200 	mov.w	r2, #0
 800d0a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	f_l3				=  st_Info.f_mot_l3_decjerk + st_Info.f_mot_l3_accjerk + st_Info.f_mot_l3_decconst;	
 800d0a8:	4b19      	ldr	r3, [pc, #100]	@ (800d110 <MOT_setData_ACC_CONST_DEC+0x708>)
 800d0aa:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800d0ae:	4b18      	ldr	r3, [pc, #96]	@ (800d110 <MOT_setData_ACC_CONST_DEC+0x708>)
 800d0b0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800d0b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d0b8:	4b15      	ldr	r3, [pc, #84]	@ (800d110 <MOT_setData_ACC_CONST_DEC+0x708>)
 800d0ba:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800d0be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
//	f_l3			= ( f_fin * f_fin - f_MotTrgtSpeed * f_MotTrgtSpeed ) / ( ( st_Info.f_acc3 * -1.0 ) * 2.0 );			// 第3移動距離[m]
	st_Info.f_mot_l1_2		= st_Info.f_mot_dist - f_l3;											// 第1+2移動距離[m]
 800d0c6:	4b12      	ldr	r3, [pc, #72]	@ (800d110 <MOT_setData_ACC_CONST_DEC+0x708>)
 800d0c8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800d0cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d0d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0d4:	4b0e      	ldr	r3, [pc, #56]	@ (800d110 <MOT_setData_ACC_CONST_DEC+0x708>)
 800d0d6:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

	printf("1 %f,%f\r\n",st_Info.f_mot_accjerk_v,st_Info.f_mot_decjerk_v);
 800d0da:	4b0d      	ldr	r3, [pc, #52]	@ (800d110 <MOT_setData_ACC_CONST_DEC+0x708>)
 800d0dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7f3 fa5a 	bl	8000598 <__aeabi_f2d>
 800d0e4:	4604      	mov	r4, r0
 800d0e6:	460d      	mov	r5, r1
 800d0e8:	4b09      	ldr	r3, [pc, #36]	@ (800d110 <MOT_setData_ACC_CONST_DEC+0x708>)
 800d0ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f7f3 fa53 	bl	8000598 <__aeabi_f2d>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	e9cd 2300 	strd	r2, r3, [sp]
 800d0fa:	4622      	mov	r2, r4
 800d0fc:	462b      	mov	r3, r5
 800d0fe:	4805      	ldr	r0, [pc, #20]	@ (800d114 <MOT_setData_ACC_CONST_DEC+0x70c>)
 800d100:	f010 fe14 	bl	801dd2c <iprintf>
//	printf("1 %f,%f\r",st_Info.f_trgt,st_Info.f_l1);
}
 800d104:	bf00      	nop
 800d106:	3730      	adds	r7, #48	@ 0x30
 800d108:	46bd      	mov	sp, r7
 800d10a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d10e:	bf00      	nop
 800d110:	20017b2c 	.word	0x20017b2c
 800d114:	08021d58 	.word	0x08021d58

0800d118 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM>:

void MOT_setData_MOT_ACC_CONST_DEC_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800d118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d11c:	b094      	sub	sp, #80	@ 0x50
 800d11e:	af00      	add	r7, sp, #0
 800d120:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
 800d124:	edc7 0a0e 	vstr	s1, [r7, #56]	@ 0x38
 800d128:	4603      	mov	r3, r0
 800d12a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	float			f_1blockDist;				// 1区画の距離[m]

	float			f_accTime;

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800d12e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d132:	2b00      	cmp	r3, #0
 800d134:	d104      	bne.n	800d140 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x28>
		f_1blockDist = BLOCK;
 800d136:	4b01      	ldr	r3, [pc, #4]	@ (800d13c <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x24>)
 800d138:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d13a:	e003      	b.n	800d144 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2c>
 800d13c:	3db851ec 	.word	0x3db851ec
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800d140:	4bd3      	ldr	r3, [pc, #844]	@ (800d490 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x378>)
 800d142:	64fb      	str	r3, [r7, #76]	@ 0x4c
	}
	//jerk
	st_Info.f_mot_jerk		= MOT_getJerk();
 800d144:	f7fe fff5 	bl	800c132 <MOT_getJerk>
 800d148:	eef0 7a40 	vmov.f32	s15, s0
 800d14c:	4bd1      	ldr	r3, [pc, #836]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d14e:	edc3 7a01 	vstr	s15, [r3, #4]

	/* 加速度 */
	st_Info.f_mot_trgtAcc1 		= MOT_getAcc1();								// 加速度1[mm/s^2]
 800d152:	f7fe ffd6 	bl	800c102 <MOT_getAcc1>
 800d156:	eef0 7a40 	vmov.f32	s15, s0
 800d15a:	4bce      	ldr	r3, [pc, #824]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d15c:	edc3 7a02 	vstr	s15, [r3, #8]
	st_Info.f_mot_trgtAcc3 		= MOT_getAcc3();								// 加速度3[mm/s^2]
 800d160:	f7fe ffdb 	bl	800c11a <MOT_getAcc3>
 800d164:	eef0 7a40 	vmov.f32	s15, s0
 800d168:	4bca      	ldr	r3, [pc, #808]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d16a:	edc3 7a03 	vstr	s15, [r3, #12]


	/* 距離 */
	st_Info.f_mot_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800d16e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800d172:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800d176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d17a:	4bc6      	ldr	r3, [pc, #792]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d17c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	/* 速度 */
	st_Info.f_mot_now		= f_MotNowSpeed;												// 現在速度
 800d180:	4bc5      	ldr	r3, [pc, #788]	@ (800d498 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x380>)
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	4bc3      	ldr	r3, [pc, #780]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d186:	61da      	str	r2, [r3, #28]
	st_Info.f_mot_last		= f_fin;													// 最終速度
 800d188:	4ac2      	ldr	r2, [pc, #776]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d18c:	6253      	str	r3, [r2, #36]	@ 0x24
	st_Info.f_mot_l1		= ( st_Info.f_mot_trgt * st_Info.f_mot_trgt - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_mot_acc1 * 2.0 );			// 第1移動距離[m]
	f_l3					= ( f_fin * f_fin - st_Info.f_mot_trgt * st_Info.f_mot_trgt ) / ( ( st_Info.f_mot_acc3  * -1.0 ) * 2.0 );			// 第3移動距離[m]
	st_Info.f_mot_l1_2		= st_Info.f_mot_dist - f_l3;											// 第1+2移動距離[m]
*/

	f_accTime	= st_Info.f_mot_trgtAcc1/st_Info.f_mot_jerk;
 800d18e:	4bc1      	ldr	r3, [pc, #772]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d190:	edd3 6a02 	vldr	s13, [r3, #8]
 800d194:	4bbf      	ldr	r3, [pc, #764]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d196:	ed93 7a01 	vldr	s14, [r3, #4]
 800d19a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d19e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	st_Info.f_mot_accjerk_v		= 1.0/2.0*st_Info.f_mot_jerk*f_accTime*f_accTime;//加速度到達時の速度
 800d1a2:	4bbc      	ldr	r3, [pc, #752]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d1a4:	685b      	ldr	r3, [r3, #4]
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7f3 f9f6 	bl	8000598 <__aeabi_f2d>
 800d1ac:	f04f 0200 	mov.w	r2, #0
 800d1b0:	4bba      	ldr	r3, [pc, #744]	@ (800d49c <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x384>)
 800d1b2:	f7f3 fa49 	bl	8000648 <__aeabi_dmul>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	4614      	mov	r4, r2
 800d1bc:	461d      	mov	r5, r3
 800d1be:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d1c0:	f7f3 f9ea 	bl	8000598 <__aeabi_f2d>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	4629      	mov	r1, r5
 800d1cc:	f7f3 fa3c 	bl	8000648 <__aeabi_dmul>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	4614      	mov	r4, r2
 800d1d6:	461d      	mov	r5, r3
 800d1d8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d1da:	f7f3 f9dd 	bl	8000598 <__aeabi_f2d>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	4629      	mov	r1, r5
 800d1e6:	f7f3 fa2f 	bl	8000648 <__aeabi_dmul>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	4610      	mov	r0, r2
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	f7f3 fd21 	bl	8000c38 <__aeabi_d2f>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	4ba6      	ldr	r3, [pc, #664]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d1fa:	629a      	str	r2, [r3, #40]	@ 0x28
	st_Info.f_mot_decjerk_v		= st_Info.f_mot_accjerk_v;
 800d1fc:	4ba5      	ldr	r3, [pc, #660]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d1fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d200:	4ba4      	ldr	r3, [pc, #656]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d202:	62da      	str	r2, [r3, #44]	@ 0x2c
//すべての計算を真面目にやると全然やってられんので最低移動距離を伸ばして余裕作って代用しておくジャーク分を移動距離からサボってる
	st_Info.f_mot_trgt		= sqrt( 1.0 / ( ( st_Info.f_mot_trgtAcc3 * -1.0 ) - st_Info.f_mot_trgtAcc1 ) *
 800d204:	4ba3      	ldr	r3, [pc, #652]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	4618      	mov	r0, r3
 800d20a:	f7f3 f9c5 	bl	8000598 <__aeabi_f2d>
 800d20e:	4602      	mov	r2, r0
 800d210:	460b      	mov	r3, r1
 800d212:	4690      	mov	r8, r2
 800d214:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800d218:	4b9e      	ldr	r3, [pc, #632]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d21a:	689b      	ldr	r3, [r3, #8]
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7f3 f9bb 	bl	8000598 <__aeabi_f2d>
 800d222:	4602      	mov	r2, r0
 800d224:	460b      	mov	r3, r1
 800d226:	4640      	mov	r0, r8
 800d228:	4649      	mov	r1, r9
 800d22a:	f7f3 f855 	bl	80002d8 <__aeabi_dsub>
 800d22e:	4602      	mov	r2, r0
 800d230:	460b      	mov	r3, r1
 800d232:	f04f 0000 	mov.w	r0, #0
 800d236:	499a      	ldr	r1, [pc, #616]	@ (800d4a0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x388>)
 800d238:	f7f3 fb30 	bl	800089c <__aeabi_ddiv>
 800d23c:	4602      	mov	r2, r0
 800d23e:	460b      	mov	r3, r1
 800d240:	e9c7 2300 	strd	r2, r3, [r7]
								( 2.0 * st_Info.f_mot_trgtAcc1 * ( st_Info.f_mot_trgtAcc3 * -1.0 ) * 
 800d244:	4b93      	ldr	r3, [pc, #588]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	4618      	mov	r0, r3
 800d24a:	f7f3 f9a5 	bl	8000598 <__aeabi_f2d>
 800d24e:	4602      	mov	r2, r0
 800d250:	460b      	mov	r3, r1
 800d252:	f7f3 f843 	bl	80002dc <__adddf3>
 800d256:	4602      	mov	r2, r0
 800d258:	460b      	mov	r3, r1
 800d25a:	4614      	mov	r4, r2
 800d25c:	461d      	mov	r5, r3
 800d25e:	4b8d      	ldr	r3, [pc, #564]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	4618      	mov	r0, r3
 800d264:	f7f3 f998 	bl	8000598 <__aeabi_f2d>
 800d268:	4602      	mov	r2, r0
 800d26a:	460b      	mov	r3, r1
 800d26c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d26e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800d272:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d274:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d278:	4620      	mov	r0, r4
 800d27a:	4629      	mov	r1, r5
 800d27c:	f7f3 f9e4 	bl	8000648 <__aeabi_dmul>
 800d280:	4602      	mov	r2, r0
 800d282:	460b      	mov	r3, r1
 800d284:	4614      	mov	r4, r2
 800d286:	461d      	mov	r5, r3
								( st_Info.f_mot_dist - MOT_MOVE_ST_MIN*3.0) +
 800d288:	4b82      	ldr	r3, [pc, #520]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d28a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7f3 f983 	bl	8000598 <__aeabi_f2d>
 800d292:	a379      	add	r3, pc, #484	@ (adr r3, 800d478 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x360>)
 800d294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d298:	f7f3 f81e 	bl	80002d8 <__aeabi_dsub>
 800d29c:	4602      	mov	r2, r0
 800d29e:	460b      	mov	r3, r1
								( 2.0 * st_Info.f_mot_trgtAcc1 * ( st_Info.f_mot_trgtAcc3 * -1.0 ) * 
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	4629      	mov	r1, r5
 800d2a4:	f7f3 f9d0 	bl	8000648 <__aeabi_dmul>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	4690      	mov	r8, r2
 800d2ae:	4699      	mov	r9, r3
								( st_Info.f_mot_trgtAcc3 * -1.0 ) * (f_MotNowSpeed+st_Info.f_mot_accjerk_v) * (f_MotNowSpeed+st_Info.f_mot_accjerk_v)
 800d2b0:	4b78      	ldr	r3, [pc, #480]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d2b2:	68db      	ldr	r3, [r3, #12]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7f3 f96f 	bl	8000598 <__aeabi_f2d>
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	460b      	mov	r3, r1
 800d2be:	623a      	str	r2, [r7, #32]
 800d2c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800d2c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2c6:	4b73      	ldr	r3, [pc, #460]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d2c8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800d2cc:	4b72      	ldr	r3, [pc, #456]	@ (800d498 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x380>)
 800d2ce:	edd3 7a00 	vldr	s15, [r3]
 800d2d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2d6:	ee17 0a90 	vmov	r0, s15
 800d2da:	f7f3 f95d 	bl	8000598 <__aeabi_f2d>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d2e6:	f7f3 f9af 	bl	8000648 <__aeabi_dmul>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	4614      	mov	r4, r2
 800d2f0:	461d      	mov	r5, r3
 800d2f2:	4b68      	ldr	r3, [pc, #416]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d2f4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800d2f8:	4b67      	ldr	r3, [pc, #412]	@ (800d498 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x380>)
 800d2fa:	edd3 7a00 	vldr	s15, [r3]
 800d2fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d302:	ee17 0a90 	vmov	r0, s15
 800d306:	f7f3 f947 	bl	8000598 <__aeabi_f2d>
 800d30a:	4602      	mov	r2, r0
 800d30c:	460b      	mov	r3, r1
 800d30e:	4620      	mov	r0, r4
 800d310:	4629      	mov	r1, r5
 800d312:	f7f3 f999 	bl	8000648 <__aeabi_dmul>
 800d316:	4602      	mov	r2, r0
 800d318:	460b      	mov	r3, r1
								( st_Info.f_mot_dist - MOT_MOVE_ST_MIN*3.0) +
 800d31a:	4640      	mov	r0, r8
 800d31c:	4649      	mov	r1, r9
 800d31e:	f7f2 ffdd 	bl	80002dc <__adddf3>
 800d322:	4602      	mov	r2, r0
 800d324:	460b      	mov	r3, r1
 800d326:	4614      	mov	r4, r2
 800d328:	461d      	mov	r5, r3
								 - st_Info.f_mot_trgtAcc1 * (f_fin-st_Info.f_mot_decjerk_v) * (f_fin-st_Info.f_mot_decjerk_v) ) )+st_Info.f_mot_decjerk_v;
 800d32a:	4b5a      	ldr	r3, [pc, #360]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d32c:	ed93 7a02 	vldr	s14, [r3, #8]
 800d330:	4b58      	ldr	r3, [pc, #352]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d332:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d336:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800d33a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d33e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d342:	4b54      	ldr	r3, [pc, #336]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d344:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d348:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800d34c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d350:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d354:	ee17 0a90 	vmov	r0, s15
 800d358:	f7f3 f91e 	bl	8000598 <__aeabi_f2d>
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	4620      	mov	r0, r4
 800d362:	4629      	mov	r1, r5
 800d364:	f7f2 ffb8 	bl	80002d8 <__aeabi_dsub>
 800d368:	4602      	mov	r2, r0
 800d36a:	460b      	mov	r3, r1
	st_Info.f_mot_trgt		= sqrt( 1.0 / ( ( st_Info.f_mot_trgtAcc3 * -1.0 ) - st_Info.f_mot_trgtAcc1 ) *
 800d36c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d370:	f7f3 f96a 	bl	8000648 <__aeabi_dmul>
 800d374:	4602      	mov	r2, r0
 800d376:	460b      	mov	r3, r1
 800d378:	ec43 2b17 	vmov	d7, r2, r3
 800d37c:	eeb0 0a47 	vmov.f32	s0, s14
 800d380:	eef0 0a67 	vmov.f32	s1, s15
 800d384:	f00e fc16 	bl	801bbb4 <sqrt>
 800d388:	ec55 4b10 	vmov	r4, r5, d0
								 - st_Info.f_mot_trgtAcc1 * (f_fin-st_Info.f_mot_decjerk_v) * (f_fin-st_Info.f_mot_decjerk_v) ) )+st_Info.f_mot_decjerk_v;
 800d38c:	4b41      	ldr	r3, [pc, #260]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d390:	4618      	mov	r0, r3
 800d392:	f7f3 f901 	bl	8000598 <__aeabi_f2d>
 800d396:	4602      	mov	r2, r0
 800d398:	460b      	mov	r3, r1
 800d39a:	4620      	mov	r0, r4
 800d39c:	4629      	mov	r1, r5
 800d39e:	f7f2 ff9d 	bl	80002dc <__adddf3>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	4610      	mov	r0, r2
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	f7f3 fc45 	bl	8000c38 <__aeabi_d2f>
 800d3ae:	4603      	mov	r3, r0
	st_Info.f_mot_trgt		= sqrt( 1.0 / ( ( st_Info.f_mot_trgtAcc3 * -1.0 ) - st_Info.f_mot_trgtAcc1 ) *
 800d3b0:	4a38      	ldr	r2, [pc, #224]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d3b2:	6213      	str	r3, [r2, #32]

	if(fabsf(f_MotTrgtSpeed - f_MotNowSpeed) > 0.05){
 800d3b4:	4b3b      	ldr	r3, [pc, #236]	@ (800d4a4 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x38c>)
 800d3b6:	ed93 7a00 	vldr	s14, [r3]
 800d3ba:	4b37      	ldr	r3, [pc, #220]	@ (800d498 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x380>)
 800d3bc:	edd3 7a00 	vldr	s15, [r3]
 800d3c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3c4:	eef0 7ae7 	vabs.f32	s15, s15
 800d3c8:	ee17 0a90 	vmov	r0, s15
 800d3cc:	f7f3 f8e4 	bl	8000598 <__aeabi_f2d>
 800d3d0:	a32b      	add	r3, pc, #172	@ (adr r3, 800d480 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x368>)
 800d3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d6:	f7f3 fbc7 	bl	8000b68 <__aeabi_dcmpgt>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f000 813d 	beq.w	800d65c <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x544>
		st_Info.f_mot_l1_accjerk	= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;//加速度に到達するまでの距離											// 移動距離[m]
 800d3e2:	4b2c      	ldr	r3, [pc, #176]	@ (800d494 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x37c>)
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7f3 f8d6 	bl	8000598 <__aeabi_f2d>
 800d3ec:	a326      	add	r3, pc, #152	@ (adr r3, 800d488 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x370>)
 800d3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f2:	f7f3 f929 	bl	8000648 <__aeabi_dmul>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	4614      	mov	r4, r2
 800d3fc:	461d      	mov	r5, r3
 800d3fe:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d400:	f7f3 f8ca 	bl	8000598 <__aeabi_f2d>
 800d404:	4602      	mov	r2, r0
 800d406:	460b      	mov	r3, r1
 800d408:	4620      	mov	r0, r4
 800d40a:	4629      	mov	r1, r5
 800d40c:	f7f3 f91c 	bl	8000648 <__aeabi_dmul>
 800d410:	4602      	mov	r2, r0
 800d412:	460b      	mov	r3, r1
 800d414:	4614      	mov	r4, r2
 800d416:	461d      	mov	r5, r3
 800d418:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d41a:	f7f3 f8bd 	bl	8000598 <__aeabi_f2d>
 800d41e:	4602      	mov	r2, r0
 800d420:	460b      	mov	r3, r1
 800d422:	4620      	mov	r0, r4
 800d424:	4629      	mov	r1, r5
 800d426:	f7f3 f90f 	bl	8000648 <__aeabi_dmul>
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	4614      	mov	r4, r2
 800d430:	461d      	mov	r5, r3
 800d432:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d434:	f7f3 f8b0 	bl	8000598 <__aeabi_f2d>
 800d438:	4602      	mov	r2, r0
 800d43a:	460b      	mov	r3, r1
 800d43c:	4620      	mov	r0, r4
 800d43e:	4629      	mov	r1, r5
 800d440:	f7f3 f902 	bl	8000648 <__aeabi_dmul>
 800d444:	4602      	mov	r2, r0
 800d446:	460b      	mov	r3, r1
 800d448:	4614      	mov	r4, r2
 800d44a:	461d      	mov	r5, r3
 800d44c:	4b12      	ldr	r3, [pc, #72]	@ (800d498 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x380>)
 800d44e:	ed93 7a00 	vldr	s14, [r3]
 800d452:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d45a:	ee17 0a90 	vmov	r0, s15
 800d45e:	f7f3 f89b 	bl	8000598 <__aeabi_f2d>
 800d462:	4602      	mov	r2, r0
 800d464:	460b      	mov	r3, r1
 800d466:	4620      	mov	r0, r4
 800d468:	4629      	mov	r1, r5
 800d46a:	f7f2 ff37 	bl	80002dc <__adddf3>
 800d46e:	4602      	mov	r2, r0
 800d470:	460b      	mov	r3, r1
 800d472:	e019      	b.n	800d4a8 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x390>
 800d474:	f3af 8000 	nop.w
 800d478:	eb851eb8 	.word	0xeb851eb8
 800d47c:	3f9eb851 	.word	0x3f9eb851
 800d480:	9999999a 	.word	0x9999999a
 800d484:	3fa99999 	.word	0x3fa99999
 800d488:	55555555 	.word	0x55555555
 800d48c:	3fc55555 	.word	0x3fc55555
 800d490:	3e0255b0 	.word	0x3e0255b0
 800d494:	20017b2c 	.word	0x20017b2c
 800d498:	20017bcc 	.word	0x20017bcc
 800d49c:	3fe00000 	.word	0x3fe00000
 800d4a0:	3ff00000 	.word	0x3ff00000
 800d4a4:	20017bd0 	.word	0x20017bd0
 800d4a8:	4610      	mov	r0, r2
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	f7f3 fbc4 	bl	8000c38 <__aeabi_d2f>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	4a67      	ldr	r2, [pc, #412]	@ (800d650 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d4b4:	6393      	str	r3, [r2, #56]	@ 0x38
		st_Info.f_mot_l1_decjerk	= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + (st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)*f_accTime + 1.0/2.0*st_Info.f_mot_trgtAcc1*f_accTime*f_accTime;
 800d4b6:	4b66      	ldr	r3, [pc, #408]	@ (800d650 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7f3 f86c 	bl	8000598 <__aeabi_f2d>
 800d4c0:	a361      	add	r3, pc, #388	@ (adr r3, 800d648 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x530>)
 800d4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c6:	f7f3 f8bf 	bl	8000648 <__aeabi_dmul>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	61ba      	str	r2, [r7, #24]
 800d4d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800d4d4:	61fb      	str	r3, [r7, #28]
 800d4d6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d4d8:	f7f3 f85e 	bl	8000598 <__aeabi_f2d>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	460b      	mov	r3, r1
 800d4e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d4e4:	f7f3 f8b0 	bl	8000648 <__aeabi_dmul>
 800d4e8:	4602      	mov	r2, r0
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	4614      	mov	r4, r2
 800d4ee:	461d      	mov	r5, r3
 800d4f0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d4f2:	f7f3 f851 	bl	8000598 <__aeabi_f2d>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	4629      	mov	r1, r5
 800d4fe:	f7f3 f8a3 	bl	8000648 <__aeabi_dmul>
 800d502:	4602      	mov	r2, r0
 800d504:	460b      	mov	r3, r1
 800d506:	4614      	mov	r4, r2
 800d508:	461d      	mov	r5, r3
 800d50a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d50c:	f7f3 f844 	bl	8000598 <__aeabi_f2d>
 800d510:	4602      	mov	r2, r0
 800d512:	460b      	mov	r3, r1
 800d514:	4620      	mov	r0, r4
 800d516:	4629      	mov	r1, r5
 800d518:	f7f3 f896 	bl	8000648 <__aeabi_dmul>
 800d51c:	4602      	mov	r2, r0
 800d51e:	460b      	mov	r3, r1
 800d520:	4614      	mov	r4, r2
 800d522:	461d      	mov	r5, r3
 800d524:	4b4a      	ldr	r3, [pc, #296]	@ (800d650 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d526:	ed93 7a08 	vldr	s14, [r3, #32]
 800d52a:	4b49      	ldr	r3, [pc, #292]	@ (800d650 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d52c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800d530:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d534:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d53c:	ee17 0a90 	vmov	r0, s15
 800d540:	f7f3 f82a 	bl	8000598 <__aeabi_f2d>
 800d544:	4602      	mov	r2, r0
 800d546:	460b      	mov	r3, r1
 800d548:	4620      	mov	r0, r4
 800d54a:	4629      	mov	r1, r5
 800d54c:	f7f2 fec6 	bl	80002dc <__adddf3>
 800d550:	4602      	mov	r2, r0
 800d552:	460b      	mov	r3, r1
 800d554:	4690      	mov	r8, r2
 800d556:	4699      	mov	r9, r3
 800d558:	4b3d      	ldr	r3, [pc, #244]	@ (800d650 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d55a:	689b      	ldr	r3, [r3, #8]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7f3 f81b 	bl	8000598 <__aeabi_f2d>
 800d562:	f04f 0200 	mov.w	r2, #0
 800d566:	4b3b      	ldr	r3, [pc, #236]	@ (800d654 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x53c>)
 800d568:	f7f3 f86e 	bl	8000648 <__aeabi_dmul>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4614      	mov	r4, r2
 800d572:	461d      	mov	r5, r3
 800d574:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d576:	f7f3 f80f 	bl	8000598 <__aeabi_f2d>
 800d57a:	4602      	mov	r2, r0
 800d57c:	460b      	mov	r3, r1
 800d57e:	4620      	mov	r0, r4
 800d580:	4629      	mov	r1, r5
 800d582:	f7f3 f861 	bl	8000648 <__aeabi_dmul>
 800d586:	4602      	mov	r2, r0
 800d588:	460b      	mov	r3, r1
 800d58a:	4614      	mov	r4, r2
 800d58c:	461d      	mov	r5, r3
 800d58e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d590:	f7f3 f802 	bl	8000598 <__aeabi_f2d>
 800d594:	4602      	mov	r2, r0
 800d596:	460b      	mov	r3, r1
 800d598:	4620      	mov	r0, r4
 800d59a:	4629      	mov	r1, r5
 800d59c:	f7f3 f854 	bl	8000648 <__aeabi_dmul>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	4640      	mov	r0, r8
 800d5a6:	4649      	mov	r1, r9
 800d5a8:	f7f2 fe98 	bl	80002dc <__adddf3>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	4610      	mov	r0, r2
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	f7f3 fb40 	bl	8000c38 <__aeabi_d2f>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	4a25      	ldr	r2, [pc, #148]	@ (800d650 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d5bc:	6413      	str	r3, [r2, #64]	@ 0x40
		st_Info.f_mot_l1_accconst	= ((st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)*(st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)
 800d5be:	4b24      	ldr	r3, [pc, #144]	@ (800d650 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d5c0:	ed93 7a08 	vldr	s14, [r3, #32]
 800d5c4:	4b22      	ldr	r3, [pc, #136]	@ (800d650 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d5c6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800d5ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d5ce:	4b20      	ldr	r3, [pc, #128]	@ (800d650 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d5d0:	edd3 6a08 	vldr	s13, [r3, #32]
 800d5d4:	4b1e      	ldr	r3, [pc, #120]	@ (800d650 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d5d6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800d5da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d5de:	ee27 7a27 	vmul.f32	s14, s14, s15
										-(f_MotNowSpeed+st_Info.f_mot_accjerk_v)*(f_MotNowSpeed+st_Info.f_mot_accjerk_v))
 800d5e2:	4b1b      	ldr	r3, [pc, #108]	@ (800d650 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d5e4:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800d5e8:	4b1b      	ldr	r3, [pc, #108]	@ (800d658 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x540>)
 800d5ea:	edd3 7a00 	vldr	s15, [r3]
 800d5ee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d5f2:	4b17      	ldr	r3, [pc, #92]	@ (800d650 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d5f4:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 800d5f8:	4b17      	ldr	r3, [pc, #92]	@ (800d658 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x540>)
 800d5fa:	edd3 7a00 	vldr	s15, [r3]
 800d5fe:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d60a:	ee17 0a90 	vmov	r0, s15
 800d60e:	f7f2 ffc3 	bl	8000598 <__aeabi_f2d>
 800d612:	4604      	mov	r4, r0
 800d614:	460d      	mov	r5, r1
										/( st_Info.f_mot_trgtAcc1 * 2.0 );
 800d616:	4b0e      	ldr	r3, [pc, #56]	@ (800d650 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d618:	689b      	ldr	r3, [r3, #8]
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7f2 ffbc 	bl	8000598 <__aeabi_f2d>
 800d620:	4602      	mov	r2, r0
 800d622:	460b      	mov	r3, r1
 800d624:	f7f2 fe5a 	bl	80002dc <__adddf3>
 800d628:	4602      	mov	r2, r0
 800d62a:	460b      	mov	r3, r1
 800d62c:	4620      	mov	r0, r4
 800d62e:	4629      	mov	r1, r5
 800d630:	f7f3 f934 	bl	800089c <__aeabi_ddiv>
 800d634:	4602      	mov	r2, r0
 800d636:	460b      	mov	r3, r1
 800d638:	4610      	mov	r0, r2
 800d63a:	4619      	mov	r1, r3
 800d63c:	f7f3 fafc 	bl	8000c38 <__aeabi_d2f>
 800d640:	4603      	mov	r3, r0
		st_Info.f_mot_l1_accconst	= ((st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)*(st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)
 800d642:	4a03      	ldr	r2, [pc, #12]	@ (800d650 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x538>)
 800d644:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800d646:	e019      	b.n	800d67c <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x564>
 800d648:	55555555 	.word	0x55555555
 800d64c:	3fc55555 	.word	0x3fc55555
 800d650:	20017b2c 	.word	0x20017b2c
 800d654:	3fe00000 	.word	0x3fe00000
 800d658:	20017bcc 	.word	0x20017bcc
	}else{
		st_Info.f_mot_l1_accjerk	= 0.0;//加速度に到達するまでの距離											// 移動距離[m]
 800d65c:	4bbe      	ldr	r3, [pc, #760]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d65e:	f04f 0200 	mov.w	r2, #0
 800d662:	639a      	str	r2, [r3, #56]	@ 0x38
		st_Info.f_mot_l1_decjerk	= 0.0;
 800d664:	4bbc      	ldr	r3, [pc, #752]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d666:	f04f 0200 	mov.w	r2, #0
 800d66a:	641a      	str	r2, [r3, #64]	@ 0x40
		st_Info.f_mot_l1_accconst	= 0.0;
 800d66c:	4bba      	ldr	r3, [pc, #744]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d66e:	f04f 0200 	mov.w	r2, #0
 800d672:	63da      	str	r2, [r3, #60]	@ 0x3c
		st_Info.f_mot_accjerk_v		= 0.0;
 800d674:	4bb8      	ldr	r3, [pc, #736]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d676:	f04f 0200 	mov.w	r2, #0
 800d67a:	629a      	str	r2, [r3, #40]	@ 0x28
	}
	st_Info.f_mot_l1	= st_Info.f_mot_l1_accjerk + st_Info.f_mot_l1_decjerk + st_Info.f_mot_l1_accconst;
 800d67c:	4bb6      	ldr	r3, [pc, #728]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d67e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800d682:	4bb5      	ldr	r3, [pc, #724]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d684:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800d688:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d68c:	4bb2      	ldr	r3, [pc, #712]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d68e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800d692:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d696:	4bb0      	ldr	r3, [pc, #704]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d698:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	if((st_Info.f_mot_trgt - f_fin) != 0){
 800d69c:	4bae      	ldr	r3, [pc, #696]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d69e:	ed93 7a08 	vldr	s14, [r3, #32]
 800d6a2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d6a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6b2:	f000 811e 	beq.w	800d8f2 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x7da>
		st_Info.f_mot_l3_decjerk	= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + st_Info.f_mot_trgt*f_accTime;
 800d6b6:	4ba8      	ldr	r3, [pc, #672]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7f2 ff6c 	bl	8000598 <__aeabi_f2d>
 800d6c0:	a3a3      	add	r3, pc, #652	@ (adr r3, 800d950 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x838>)
 800d6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c6:	f7f2 ffbf 	bl	8000648 <__aeabi_dmul>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	613a      	str	r2, [r7, #16]
 800d6d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800d6d4:	617b      	str	r3, [r7, #20]
 800d6d6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d6d8:	f7f2 ff5e 	bl	8000598 <__aeabi_f2d>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	460b      	mov	r3, r1
 800d6e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d6e4:	f7f2 ffb0 	bl	8000648 <__aeabi_dmul>
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	460b      	mov	r3, r1
 800d6ec:	4614      	mov	r4, r2
 800d6ee:	461d      	mov	r5, r3
 800d6f0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d6f2:	f7f2 ff51 	bl	8000598 <__aeabi_f2d>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	4629      	mov	r1, r5
 800d6fe:	f7f2 ffa3 	bl	8000648 <__aeabi_dmul>
 800d702:	4602      	mov	r2, r0
 800d704:	460b      	mov	r3, r1
 800d706:	4614      	mov	r4, r2
 800d708:	461d      	mov	r5, r3
 800d70a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d70c:	f7f2 ff44 	bl	8000598 <__aeabi_f2d>
 800d710:	4602      	mov	r2, r0
 800d712:	460b      	mov	r3, r1
 800d714:	4620      	mov	r0, r4
 800d716:	4629      	mov	r1, r5
 800d718:	f7f2 ff96 	bl	8000648 <__aeabi_dmul>
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	4614      	mov	r4, r2
 800d722:	461d      	mov	r5, r3
 800d724:	4b8c      	ldr	r3, [pc, #560]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d726:	ed93 7a08 	vldr	s14, [r3, #32]
 800d72a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d72e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d732:	ee17 0a90 	vmov	r0, s15
 800d736:	f7f2 ff2f 	bl	8000598 <__aeabi_f2d>
 800d73a:	4602      	mov	r2, r0
 800d73c:	460b      	mov	r3, r1
 800d73e:	4620      	mov	r0, r4
 800d740:	4629      	mov	r1, r5
 800d742:	f7f2 fdcb 	bl	80002dc <__adddf3>
 800d746:	4602      	mov	r2, r0
 800d748:	460b      	mov	r3, r1
 800d74a:	4610      	mov	r0, r2
 800d74c:	4619      	mov	r1, r3
 800d74e:	f7f3 fa73 	bl	8000c38 <__aeabi_d2f>
 800d752:	4603      	mov	r3, r0
 800d754:	4a80      	ldr	r2, [pc, #512]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d756:	6493      	str	r3, [r2, #72]	@ 0x48
		st_Info.f_mot_l3_accjerk	= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + (f_fin+st_Info.f_mot_decjerk_v)*f_accTime + 1.0/2.0*st_Info.f_mot_trgtAcc3*(-1.0)*f_accTime*f_accTime;//減速は加速度同様にする前提処理
 800d758:	4b7f      	ldr	r3, [pc, #508]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7f2 ff1b 	bl	8000598 <__aeabi_f2d>
 800d762:	a37b      	add	r3, pc, #492	@ (adr r3, 800d950 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x838>)
 800d764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d768:	f7f2 ff6e 	bl	8000648 <__aeabi_dmul>
 800d76c:	4602      	mov	r2, r0
 800d76e:	460b      	mov	r3, r1
 800d770:	4614      	mov	r4, r2
 800d772:	461d      	mov	r5, r3
 800d774:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d776:	f7f2 ff0f 	bl	8000598 <__aeabi_f2d>
 800d77a:	4602      	mov	r2, r0
 800d77c:	460b      	mov	r3, r1
 800d77e:	4620      	mov	r0, r4
 800d780:	4629      	mov	r1, r5
 800d782:	f7f2 ff61 	bl	8000648 <__aeabi_dmul>
 800d786:	4602      	mov	r2, r0
 800d788:	460b      	mov	r3, r1
 800d78a:	4614      	mov	r4, r2
 800d78c:	461d      	mov	r5, r3
 800d78e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d790:	f7f2 ff02 	bl	8000598 <__aeabi_f2d>
 800d794:	4602      	mov	r2, r0
 800d796:	460b      	mov	r3, r1
 800d798:	4620      	mov	r0, r4
 800d79a:	4629      	mov	r1, r5
 800d79c:	f7f2 ff54 	bl	8000648 <__aeabi_dmul>
 800d7a0:	4602      	mov	r2, r0
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	4614      	mov	r4, r2
 800d7a6:	461d      	mov	r5, r3
 800d7a8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d7aa:	f7f2 fef5 	bl	8000598 <__aeabi_f2d>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	4629      	mov	r1, r5
 800d7b6:	f7f2 ff47 	bl	8000648 <__aeabi_dmul>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	460b      	mov	r3, r1
 800d7be:	4614      	mov	r4, r2
 800d7c0:	461d      	mov	r5, r3
 800d7c2:	4b65      	ldr	r3, [pc, #404]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d7c4:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800d7c8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d7cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d7d0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800d7d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7d8:	ee17 0a90 	vmov	r0, s15
 800d7dc:	f7f2 fedc 	bl	8000598 <__aeabi_f2d>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	4629      	mov	r1, r5
 800d7e8:	f7f2 fd78 	bl	80002dc <__adddf3>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	4614      	mov	r4, r2
 800d7f2:	461d      	mov	r5, r3
 800d7f4:	4b58      	ldr	r3, [pc, #352]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d7f6:	68db      	ldr	r3, [r3, #12]
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7f2 fecd 	bl	8000598 <__aeabi_f2d>
 800d7fe:	f04f 0200 	mov.w	r2, #0
 800d802:	4b56      	ldr	r3, [pc, #344]	@ (800d95c <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x844>)
 800d804:	f7f2 ff20 	bl	8000648 <__aeabi_dmul>
 800d808:	4602      	mov	r2, r0
 800d80a:	460b      	mov	r3, r1
 800d80c:	60ba      	str	r2, [r7, #8]
 800d80e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800d812:	60fb      	str	r3, [r7, #12]
 800d814:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d816:	f7f2 febf 	bl	8000598 <__aeabi_f2d>
 800d81a:	4602      	mov	r2, r0
 800d81c:	460b      	mov	r3, r1
 800d81e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d822:	f7f2 ff11 	bl	8000648 <__aeabi_dmul>
 800d826:	4602      	mov	r2, r0
 800d828:	460b      	mov	r3, r1
 800d82a:	4690      	mov	r8, r2
 800d82c:	4699      	mov	r9, r3
 800d82e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d830:	f7f2 feb2 	bl	8000598 <__aeabi_f2d>
 800d834:	4602      	mov	r2, r0
 800d836:	460b      	mov	r3, r1
 800d838:	4640      	mov	r0, r8
 800d83a:	4649      	mov	r1, r9
 800d83c:	f7f2 ff04 	bl	8000648 <__aeabi_dmul>
 800d840:	4602      	mov	r2, r0
 800d842:	460b      	mov	r3, r1
 800d844:	4620      	mov	r0, r4
 800d846:	4629      	mov	r1, r5
 800d848:	f7f2 fd48 	bl	80002dc <__adddf3>
 800d84c:	4602      	mov	r2, r0
 800d84e:	460b      	mov	r3, r1
 800d850:	4610      	mov	r0, r2
 800d852:	4619      	mov	r1, r3
 800d854:	f7f3 f9f0 	bl	8000c38 <__aeabi_d2f>
 800d858:	4603      	mov	r3, r0
 800d85a:	4a3f      	ldr	r2, [pc, #252]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d85c:	6513      	str	r3, [r2, #80]	@ 0x50
		st_Info.f_mot_l3_decconst	= ( (f_fin+st_Info.f_mot_decjerk_v) * (f_fin+st_Info.f_mot_decjerk_v)
 800d85e:	4b3e      	ldr	r3, [pc, #248]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d860:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800d864:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d868:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d86c:	4b3a      	ldr	r3, [pc, #232]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d86e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800d872:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d87a:	ee27 7a27 	vmul.f32	s14, s14, s15
										- (st_Info.f_mot_trgt-st_Info.f_mot_decjerk_v) * (st_Info.f_mot_trgt-st_Info.f_mot_decjerk_v) ) 
 800d87e:	4b36      	ldr	r3, [pc, #216]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d880:	edd3 6a08 	vldr	s13, [r3, #32]
 800d884:	4b34      	ldr	r3, [pc, #208]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d886:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d88a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d88e:	4b32      	ldr	r3, [pc, #200]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d890:	ed93 6a08 	vldr	s12, [r3, #32]
 800d894:	4b30      	ldr	r3, [pc, #192]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d896:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d89a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d89e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8a6:	ee17 0a90 	vmov	r0, s15
 800d8aa:	f7f2 fe75 	bl	8000598 <__aeabi_f2d>
 800d8ae:	4604      	mov	r4, r0
 800d8b0:	460d      	mov	r5, r1
										/ ( st_Info.f_mot_trgtAcc3 * (-1.0 ) * 2.0 );
 800d8b2:	4b29      	ldr	r3, [pc, #164]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7f2 fe6e 	bl	8000598 <__aeabi_f2d>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	460b      	mov	r3, r1
 800d8c0:	4692      	mov	sl, r2
 800d8c2:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 800d8c6:	4652      	mov	r2, sl
 800d8c8:	465b      	mov	r3, fp
 800d8ca:	4650      	mov	r0, sl
 800d8cc:	4659      	mov	r1, fp
 800d8ce:	f7f2 fd05 	bl	80002dc <__adddf3>
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	4629      	mov	r1, r5
 800d8da:	f7f2 ffdf 	bl	800089c <__aeabi_ddiv>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	4610      	mov	r0, r2
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	f7f3 f9a7 	bl	8000c38 <__aeabi_d2f>
 800d8ea:	4603      	mov	r3, r0
		st_Info.f_mot_l3_decconst	= ( (f_fin+st_Info.f_mot_decjerk_v) * (f_fin+st_Info.f_mot_decjerk_v)
 800d8ec:	4a1a      	ldr	r2, [pc, #104]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d8ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d8f0:	e00f      	b.n	800d912 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x7fa>
	}else{
		st_Info.f_mot_l3_decjerk	= 0.0;
 800d8f2:	4b19      	ldr	r3, [pc, #100]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d8f4:	f04f 0200 	mov.w	r2, #0
 800d8f8:	649a      	str	r2, [r3, #72]	@ 0x48
		st_Info.f_mot_l3_accjerk	= 0.0;
 800d8fa:	4b17      	ldr	r3, [pc, #92]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d8fc:	f04f 0200 	mov.w	r2, #0
 800d900:	651a      	str	r2, [r3, #80]	@ 0x50
		st_Info.f_mot_l3_decconst	= 0.0;
 800d902:	4b15      	ldr	r3, [pc, #84]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d904:	f04f 0200 	mov.w	r2, #0
 800d908:	64da      	str	r2, [r3, #76]	@ 0x4c
		st_Info.f_mot_decjerk_v		= 0.0;
 800d90a:	4b13      	ldr	r3, [pc, #76]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d90c:	f04f 0200 	mov.w	r2, #0
 800d910:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	f_l3				=  st_Info.f_mot_l3_decjerk + st_Info.f_mot_l3_accjerk + st_Info.f_mot_l3_decconst;
 800d912:	4b11      	ldr	r3, [pc, #68]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d914:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800d918:	4b0f      	ldr	r3, [pc, #60]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d91a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800d91e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d922:	4b0d      	ldr	r3, [pc, #52]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d924:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800d928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d92c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	st_Info.f_mot_l1_2		= st_Info.f_mot_dist - f_l3;											// 第1+2移動距離[m]
 800d930:	4b09      	ldr	r3, [pc, #36]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d932:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800d936:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800d93a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d93e:	4b06      	ldr	r3, [pc, #24]	@ (800d958 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x840>)
 800d940:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

//	printf("2 %f,%f,%f,%f\r",st_Info.f_trgt,st_Info.f_l1,f_fin,f_MotNowSpeed);
}
 800d944:	bf00      	nop
 800d946:	3750      	adds	r7, #80	@ 0x50
 800d948:	46bd      	mov	sp, r7
 800d94a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d94e:	bf00      	nop
 800d950:	55555555 	.word	0x55555555
 800d954:	3fc55555 	.word	0x3fc55555
 800d958:	20017b2c 	.word	0x20017b2c
 800d95c:	3fe00000 	.word	0x3fe00000

0800d960 <MOT_setData_MOT_ACC_CONST>:

void MOT_setData_MOT_ACC_CONST( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800d960:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d964:	b086      	sub	sp, #24
 800d966:	af00      	add	r7, sp, #0
 800d968:	ed87 0a03 	vstr	s0, [r7, #12]
 800d96c:	edc7 0a02 	vstr	s1, [r7, #8]
 800d970:	4603      	mov	r3, r0
 800d972:	71fb      	strb	r3, [r7, #7]
	float			f_1blockDist;				// 1区画の距離[m]
	float           f_accTime;

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800d974:	79fb      	ldrb	r3, [r7, #7]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d102      	bne.n	800d980 <MOT_setData_MOT_ACC_CONST+0x20>
		f_1blockDist = BLOCK;
 800d97a:	4bcd      	ldr	r3, [pc, #820]	@ (800dcb0 <MOT_setData_MOT_ACC_CONST+0x350>)
 800d97c:	617b      	str	r3, [r7, #20]
 800d97e:	e001      	b.n	800d984 <MOT_setData_MOT_ACC_CONST+0x24>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800d980:	4bcc      	ldr	r3, [pc, #816]	@ (800dcb4 <MOT_setData_MOT_ACC_CONST+0x354>)
 800d982:	617b      	str	r3, [r7, #20]
	}
	//jerk
	st_Info.f_mot_jerk		= MOT_getJerk();
 800d984:	f7fe fbd5 	bl	800c132 <MOT_getJerk>
 800d988:	eef0 7a40 	vmov.f32	s15, s0
 800d98c:	4bca      	ldr	r3, [pc, #808]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d98e:	edc3 7a01 	vstr	s15, [r3, #4]

	/* 加速度 */
	st_Info.f_mot_trgtAcc1 		= MOT_getAcc1();													// 加速度1[mm/s^2]
 800d992:	f7fe fbb6 	bl	800c102 <MOT_getAcc1>
 800d996:	eef0 7a40 	vmov.f32	s15, s0
 800d99a:	4bc7      	ldr	r3, [pc, #796]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d99c:	edc3 7a02 	vstr	s15, [r3, #8]
	st_Info.f_mot_trgtAcc3 		= 0;																// 加速度3[mm/s^2](未使用)
 800d9a0:	4bc5      	ldr	r3, [pc, #788]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d9a2:	f04f 0200 	mov.w	r2, #0
 800d9a6:	60da      	str	r2, [r3, #12]

	/* 速度 */
	st_Info.f_mot_now		= f_MotNowSpeed;													// 現在速度
 800d9a8:	4bc4      	ldr	r3, [pc, #784]	@ (800dcbc <MOT_setData_MOT_ACC_CONST+0x35c>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4ac2      	ldr	r2, [pc, #776]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d9ae:	61d3      	str	r3, [r2, #28]
	st_Info.f_mot_trgt		= f_fin;															// 目標速度
 800d9b0:	4ac1      	ldr	r2, [pc, #772]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	6213      	str	r3, [r2, #32]
	st_Info.f_mot_last		= 0;																// 最終速度(未使用)
 800d9b6:	4bc0      	ldr	r3, [pc, #768]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d9b8:	f04f 0200 	mov.w	r2, #0
 800d9bc:	625a      	str	r2, [r3, #36]	@ 0x24

	/* 距離 */
	st_Info.f_mot_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800d9be:	ed97 7a03 	vldr	s14, [r7, #12]
 800d9c2:	edd7 7a05 	vldr	s15, [r7, #20]
 800d9c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9ca:	4bbb      	ldr	r3, [pc, #748]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d9cc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
//	st_Info.f_mot_l1		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_mot_acc1 * 2.0 );			// 第1移動距離[m]

	f_accTime   = st_Info.f_mot_trgtAcc1/st_Info.f_mot_jerk;
 800d9d0:	4bb9      	ldr	r3, [pc, #740]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d9d2:	edd3 6a02 	vldr	s13, [r3, #8]
 800d9d6:	4bb8      	ldr	r3, [pc, #736]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d9d8:	ed93 7a01 	vldr	s14, [r3, #4]
 800d9dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9e0:	edc7 7a04 	vstr	s15, [r7, #16]
	st_Info.f_mot_accjerk_v  	= 1.0/2.0*st_Info.f_mot_jerk*f_accTime*f_accTime;//加速度到達時の速度
 800d9e4:	4bb4      	ldr	r3, [pc, #720]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7f2 fdd5 	bl	8000598 <__aeabi_f2d>
 800d9ee:	f04f 0200 	mov.w	r2, #0
 800d9f2:	4bb3      	ldr	r3, [pc, #716]	@ (800dcc0 <MOT_setData_MOT_ACC_CONST+0x360>)
 800d9f4:	f7f2 fe28 	bl	8000648 <__aeabi_dmul>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	4690      	mov	r8, r2
 800d9fe:	4699      	mov	r9, r3
 800da00:	6938      	ldr	r0, [r7, #16]
 800da02:	f7f2 fdc9 	bl	8000598 <__aeabi_f2d>
 800da06:	4602      	mov	r2, r0
 800da08:	460b      	mov	r3, r1
 800da0a:	4640      	mov	r0, r8
 800da0c:	4649      	mov	r1, r9
 800da0e:	f7f2 fe1b 	bl	8000648 <__aeabi_dmul>
 800da12:	4602      	mov	r2, r0
 800da14:	460b      	mov	r3, r1
 800da16:	4690      	mov	r8, r2
 800da18:	4699      	mov	r9, r3
 800da1a:	6938      	ldr	r0, [r7, #16]
 800da1c:	f7f2 fdbc 	bl	8000598 <__aeabi_f2d>
 800da20:	4602      	mov	r2, r0
 800da22:	460b      	mov	r3, r1
 800da24:	4640      	mov	r0, r8
 800da26:	4649      	mov	r1, r9
 800da28:	f7f2 fe0e 	bl	8000648 <__aeabi_dmul>
 800da2c:	4602      	mov	r2, r0
 800da2e:	460b      	mov	r3, r1
 800da30:	4610      	mov	r0, r2
 800da32:	4619      	mov	r1, r3
 800da34:	f7f3 f900 	bl	8000c38 <__aeabi_d2f>
 800da38:	4603      	mov	r3, r0
 800da3a:	4a9f      	ldr	r2, [pc, #636]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800da3c:	6293      	str	r3, [r2, #40]	@ 0x28
    if(fabsf(f_MotTrgtSpeed - f_MotNowSpeed) > 0.05){
 800da3e:	4ba1      	ldr	r3, [pc, #644]	@ (800dcc4 <MOT_setData_MOT_ACC_CONST+0x364>)
 800da40:	ed93 7a00 	vldr	s14, [r3]
 800da44:	4b9d      	ldr	r3, [pc, #628]	@ (800dcbc <MOT_setData_MOT_ACC_CONST+0x35c>)
 800da46:	edd3 7a00 	vldr	s15, [r3]
 800da4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da4e:	eef0 7ae7 	vabs.f32	s15, s15
 800da52:	ee17 0a90 	vmov	r0, s15
 800da56:	f7f2 fd9f 	bl	8000598 <__aeabi_f2d>
 800da5a:	a391      	add	r3, pc, #580	@ (adr r3, 800dca0 <MOT_setData_MOT_ACC_CONST+0x340>)
 800da5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da60:	f7f3 f882 	bl	8000b68 <__aeabi_dcmpgt>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	f000 812e 	beq.w	800dcc8 <MOT_setData_MOT_ACC_CONST+0x368>
		st_Info.f_mot_l1_accjerk    = 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;//加速度に到達するまでの距離                                          // 移動距離[m]
 800da6c:	4b92      	ldr	r3, [pc, #584]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	4618      	mov	r0, r3
 800da72:	f7f2 fd91 	bl	8000598 <__aeabi_f2d>
 800da76:	a38c      	add	r3, pc, #560	@ (adr r3, 800dca8 <MOT_setData_MOT_ACC_CONST+0x348>)
 800da78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7c:	f7f2 fde4 	bl	8000648 <__aeabi_dmul>
 800da80:	4602      	mov	r2, r0
 800da82:	460b      	mov	r3, r1
 800da84:	4690      	mov	r8, r2
 800da86:	4699      	mov	r9, r3
 800da88:	6938      	ldr	r0, [r7, #16]
 800da8a:	f7f2 fd85 	bl	8000598 <__aeabi_f2d>
 800da8e:	4602      	mov	r2, r0
 800da90:	460b      	mov	r3, r1
 800da92:	4640      	mov	r0, r8
 800da94:	4649      	mov	r1, r9
 800da96:	f7f2 fdd7 	bl	8000648 <__aeabi_dmul>
 800da9a:	4602      	mov	r2, r0
 800da9c:	460b      	mov	r3, r1
 800da9e:	4690      	mov	r8, r2
 800daa0:	4699      	mov	r9, r3
 800daa2:	6938      	ldr	r0, [r7, #16]
 800daa4:	f7f2 fd78 	bl	8000598 <__aeabi_f2d>
 800daa8:	4602      	mov	r2, r0
 800daaa:	460b      	mov	r3, r1
 800daac:	4640      	mov	r0, r8
 800daae:	4649      	mov	r1, r9
 800dab0:	f7f2 fdca 	bl	8000648 <__aeabi_dmul>
 800dab4:	4602      	mov	r2, r0
 800dab6:	460b      	mov	r3, r1
 800dab8:	4690      	mov	r8, r2
 800daba:	4699      	mov	r9, r3
 800dabc:	6938      	ldr	r0, [r7, #16]
 800dabe:	f7f2 fd6b 	bl	8000598 <__aeabi_f2d>
 800dac2:	4602      	mov	r2, r0
 800dac4:	460b      	mov	r3, r1
 800dac6:	4640      	mov	r0, r8
 800dac8:	4649      	mov	r1, r9
 800daca:	f7f2 fdbd 	bl	8000648 <__aeabi_dmul>
 800dace:	4602      	mov	r2, r0
 800dad0:	460b      	mov	r3, r1
 800dad2:	4690      	mov	r8, r2
 800dad4:	4699      	mov	r9, r3
 800dad6:	4b79      	ldr	r3, [pc, #484]	@ (800dcbc <MOT_setData_MOT_ACC_CONST+0x35c>)
 800dad8:	ed93 7a00 	vldr	s14, [r3]
 800dadc:	edd7 7a04 	vldr	s15, [r7, #16]
 800dae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dae4:	ee17 0a90 	vmov	r0, s15
 800dae8:	f7f2 fd56 	bl	8000598 <__aeabi_f2d>
 800daec:	4602      	mov	r2, r0
 800daee:	460b      	mov	r3, r1
 800daf0:	4640      	mov	r0, r8
 800daf2:	4649      	mov	r1, r9
 800daf4:	f7f2 fbf2 	bl	80002dc <__adddf3>
 800daf8:	4602      	mov	r2, r0
 800dafa:	460b      	mov	r3, r1
 800dafc:	4610      	mov	r0, r2
 800dafe:	4619      	mov	r1, r3
 800db00:	f7f3 f89a 	bl	8000c38 <__aeabi_d2f>
 800db04:	4603      	mov	r3, r0
 800db06:	4a6c      	ldr	r2, [pc, #432]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800db08:	6393      	str	r3, [r2, #56]	@ 0x38
		st_Info.f_mot_l1_decjerk    = 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + (st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)*f_accTime + 1.0/2.0*st_Info.f_mot_trgtAcc1*f_accTime*f_accTime;
 800db0a:	4b6b      	ldr	r3, [pc, #428]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	4618      	mov	r0, r3
 800db10:	f7f2 fd42 	bl	8000598 <__aeabi_f2d>
 800db14:	a364      	add	r3, pc, #400	@ (adr r3, 800dca8 <MOT_setData_MOT_ACC_CONST+0x348>)
 800db16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1a:	f7f2 fd95 	bl	8000648 <__aeabi_dmul>
 800db1e:	4602      	mov	r2, r0
 800db20:	460b      	mov	r3, r1
 800db22:	4614      	mov	r4, r2
 800db24:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800db28:	6938      	ldr	r0, [r7, #16]
 800db2a:	f7f2 fd35 	bl	8000598 <__aeabi_f2d>
 800db2e:	4602      	mov	r2, r0
 800db30:	460b      	mov	r3, r1
 800db32:	4620      	mov	r0, r4
 800db34:	4629      	mov	r1, r5
 800db36:	f7f2 fd87 	bl	8000648 <__aeabi_dmul>
 800db3a:	4602      	mov	r2, r0
 800db3c:	460b      	mov	r3, r1
 800db3e:	4614      	mov	r4, r2
 800db40:	461d      	mov	r5, r3
 800db42:	6938      	ldr	r0, [r7, #16]
 800db44:	f7f2 fd28 	bl	8000598 <__aeabi_f2d>
 800db48:	4602      	mov	r2, r0
 800db4a:	460b      	mov	r3, r1
 800db4c:	4620      	mov	r0, r4
 800db4e:	4629      	mov	r1, r5
 800db50:	f7f2 fd7a 	bl	8000648 <__aeabi_dmul>
 800db54:	4602      	mov	r2, r0
 800db56:	460b      	mov	r3, r1
 800db58:	4614      	mov	r4, r2
 800db5a:	461d      	mov	r5, r3
 800db5c:	6938      	ldr	r0, [r7, #16]
 800db5e:	f7f2 fd1b 	bl	8000598 <__aeabi_f2d>
 800db62:	4602      	mov	r2, r0
 800db64:	460b      	mov	r3, r1
 800db66:	4620      	mov	r0, r4
 800db68:	4629      	mov	r1, r5
 800db6a:	f7f2 fd6d 	bl	8000648 <__aeabi_dmul>
 800db6e:	4602      	mov	r2, r0
 800db70:	460b      	mov	r3, r1
 800db72:	4614      	mov	r4, r2
 800db74:	461d      	mov	r5, r3
 800db76:	4b50      	ldr	r3, [pc, #320]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800db78:	ed93 7a08 	vldr	s14, [r3, #32]
 800db7c:	4b4e      	ldr	r3, [pc, #312]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800db7e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800db82:	ee37 7a67 	vsub.f32	s14, s14, s15
 800db86:	edd7 7a04 	vldr	s15, [r7, #16]
 800db8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db8e:	ee17 0a90 	vmov	r0, s15
 800db92:	f7f2 fd01 	bl	8000598 <__aeabi_f2d>
 800db96:	4602      	mov	r2, r0
 800db98:	460b      	mov	r3, r1
 800db9a:	4620      	mov	r0, r4
 800db9c:	4629      	mov	r1, r5
 800db9e:	f7f2 fb9d 	bl	80002dc <__adddf3>
 800dba2:	4602      	mov	r2, r0
 800dba4:	460b      	mov	r3, r1
 800dba6:	4614      	mov	r4, r2
 800dba8:	461d      	mov	r5, r3
 800dbaa:	4b43      	ldr	r3, [pc, #268]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7f2 fcf2 	bl	8000598 <__aeabi_f2d>
 800dbb4:	f04f 0200 	mov.w	r2, #0
 800dbb8:	4b41      	ldr	r3, [pc, #260]	@ (800dcc0 <MOT_setData_MOT_ACC_CONST+0x360>)
 800dbba:	f7f2 fd45 	bl	8000648 <__aeabi_dmul>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	4690      	mov	r8, r2
 800dbc4:	4699      	mov	r9, r3
 800dbc6:	6938      	ldr	r0, [r7, #16]
 800dbc8:	f7f2 fce6 	bl	8000598 <__aeabi_f2d>
 800dbcc:	4602      	mov	r2, r0
 800dbce:	460b      	mov	r3, r1
 800dbd0:	4640      	mov	r0, r8
 800dbd2:	4649      	mov	r1, r9
 800dbd4:	f7f2 fd38 	bl	8000648 <__aeabi_dmul>
 800dbd8:	4602      	mov	r2, r0
 800dbda:	460b      	mov	r3, r1
 800dbdc:	4690      	mov	r8, r2
 800dbde:	4699      	mov	r9, r3
 800dbe0:	6938      	ldr	r0, [r7, #16]
 800dbe2:	f7f2 fcd9 	bl	8000598 <__aeabi_f2d>
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	460b      	mov	r3, r1
 800dbea:	4640      	mov	r0, r8
 800dbec:	4649      	mov	r1, r9
 800dbee:	f7f2 fd2b 	bl	8000648 <__aeabi_dmul>
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	4629      	mov	r1, r5
 800dbfa:	f7f2 fb6f 	bl	80002dc <__adddf3>
 800dbfe:	4602      	mov	r2, r0
 800dc00:	460b      	mov	r3, r1
 800dc02:	4610      	mov	r0, r2
 800dc04:	4619      	mov	r1, r3
 800dc06:	f7f3 f817 	bl	8000c38 <__aeabi_d2f>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	4a2a      	ldr	r2, [pc, #168]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800dc0e:	6413      	str	r3, [r2, #64]	@ 0x40
		st_Info.f_mot_l1_accconst   = ((f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)*(f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)
 800dc10:	4b2c      	ldr	r3, [pc, #176]	@ (800dcc4 <MOT_setData_MOT_ACC_CONST+0x364>)
 800dc12:	ed93 7a00 	vldr	s14, [r3]
 800dc16:	4b28      	ldr	r3, [pc, #160]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800dc18:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800dc1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dc20:	4b28      	ldr	r3, [pc, #160]	@ (800dcc4 <MOT_setData_MOT_ACC_CONST+0x364>)
 800dc22:	edd3 6a00 	vldr	s13, [r3]
 800dc26:	4b24      	ldr	r3, [pc, #144]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800dc28:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800dc2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800dc30:	ee27 7a27 	vmul.f32	s14, s14, s15
										-(f_MotNowSpeed+st_Info.f_mot_accjerk_v)*(f_MotNowSpeed+st_Info.f_mot_accjerk_v))
 800dc34:	4b20      	ldr	r3, [pc, #128]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800dc36:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800dc3a:	4b20      	ldr	r3, [pc, #128]	@ (800dcbc <MOT_setData_MOT_ACC_CONST+0x35c>)
 800dc3c:	edd3 7a00 	vldr	s15, [r3]
 800dc40:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800dc44:	4b1c      	ldr	r3, [pc, #112]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800dc46:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 800dc4a:	4b1c      	ldr	r3, [pc, #112]	@ (800dcbc <MOT_setData_MOT_ACC_CONST+0x35c>)
 800dc4c:	edd3 7a00 	vldr	s15, [r3]
 800dc50:	ee76 7a27 	vadd.f32	s15, s12, s15
 800dc54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc5c:	ee17 0a90 	vmov	r0, s15
 800dc60:	f7f2 fc9a 	bl	8000598 <__aeabi_f2d>
 800dc64:	4604      	mov	r4, r0
 800dc66:	460d      	mov	r5, r1
										/( st_Info.f_mot_trgtAcc1 * 2.0 );
 800dc68:	4b13      	ldr	r3, [pc, #76]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800dc6a:	689b      	ldr	r3, [r3, #8]
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7f2 fc93 	bl	8000598 <__aeabi_f2d>
 800dc72:	4602      	mov	r2, r0
 800dc74:	460b      	mov	r3, r1
 800dc76:	f7f2 fb31 	bl	80002dc <__adddf3>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	4620      	mov	r0, r4
 800dc80:	4629      	mov	r1, r5
 800dc82:	f7f2 fe0b 	bl	800089c <__aeabi_ddiv>
 800dc86:	4602      	mov	r2, r0
 800dc88:	460b      	mov	r3, r1
 800dc8a:	4610      	mov	r0, r2
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	f7f2 ffd3 	bl	8000c38 <__aeabi_d2f>
 800dc92:	4603      	mov	r3, r0
		st_Info.f_mot_l1_accconst   = ((f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)*(f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)
 800dc94:	4a08      	ldr	r2, [pc, #32]	@ (800dcb8 <MOT_setData_MOT_ACC_CONST+0x358>)
 800dc96:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800dc98:	e026      	b.n	800dce8 <MOT_setData_MOT_ACC_CONST+0x388>
 800dc9a:	bf00      	nop
 800dc9c:	f3af 8000 	nop.w
 800dca0:	9999999a 	.word	0x9999999a
 800dca4:	3fa99999 	.word	0x3fa99999
 800dca8:	55555555 	.word	0x55555555
 800dcac:	3fc55555 	.word	0x3fc55555
 800dcb0:	3db851ec 	.word	0x3db851ec
 800dcb4:	3e0255b0 	.word	0x3e0255b0
 800dcb8:	20017b2c 	.word	0x20017b2c
 800dcbc:	20017bcc 	.word	0x20017bcc
 800dcc0:	3fe00000 	.word	0x3fe00000
 800dcc4:	20017bd0 	.word	0x20017bd0
	}else{
		st_Info.f_mot_l1_accjerk    = 0.0;//加速度に到達するまでの距離                                          // 移動距離[m]
 800dcc8:	4b14      	ldr	r3, [pc, #80]	@ (800dd1c <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dcca:	f04f 0200 	mov.w	r2, #0
 800dcce:	639a      	str	r2, [r3, #56]	@ 0x38
		st_Info.f_mot_l1_decjerk    = 0.0;
 800dcd0:	4b12      	ldr	r3, [pc, #72]	@ (800dd1c <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dcd2:	f04f 0200 	mov.w	r2, #0
 800dcd6:	641a      	str	r2, [r3, #64]	@ 0x40
		st_Info.f_mot_l1_accconst   = 0.0;
 800dcd8:	4b10      	ldr	r3, [pc, #64]	@ (800dd1c <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dcda:	f04f 0200 	mov.w	r2, #0
 800dcde:	63da      	str	r2, [r3, #60]	@ 0x3c
		st_Info.f_mot_accjerk_v  	= 0.0;
 800dce0:	4b0e      	ldr	r3, [pc, #56]	@ (800dd1c <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dce2:	f04f 0200 	mov.w	r2, #0
 800dce6:	629a      	str	r2, [r3, #40]	@ 0x28
	}
    st_Info.f_mot_l1    = st_Info.f_mot_l1_accjerk + st_Info.f_mot_l1_decjerk + st_Info.f_mot_l1_accconst;
 800dce8:	4b0c      	ldr	r3, [pc, #48]	@ (800dd1c <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dcea:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800dcee:	4b0b      	ldr	r3, [pc, #44]	@ (800dd1c <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dcf0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800dcf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dcf8:	4b08      	ldr	r3, [pc, #32]	@ (800dd1c <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dcfa:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800dcfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd02:	4b06      	ldr	r3, [pc, #24]	@ (800dd1c <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dd04:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
//  st_Info.f_l1        = ( f_MotTrgtSpeed * f_MotTrgtSpeed - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_acc1 * 2.0 );           // 第1移動距離[m]
   
    st_Info.f_mot_l1_2  = st_Info.f_mot_dist;                                            // 第1+2移動距離[m]
 800dd08:	4b04      	ldr	r3, [pc, #16]	@ (800dd1c <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dd0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd0c:	4a03      	ldr	r2, [pc, #12]	@ (800dd1c <MOT_setData_MOT_ACC_CONST+0x3bc>)
 800dd0e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800dd10:	bf00      	nop
 800dd12:	3718      	adds	r7, #24
 800dd14:	46bd      	mov	sp, r7
 800dd16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800dd1a:	bf00      	nop
 800dd1c:	20017b2c 	.word	0x20017b2c

0800dd20 <MOT_setData_MOT_ACC_CONST_CUSTOM>:

void MOT_setData_MOT_ACC_CONST_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800dd20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd24:	ed2d 8b02 	vpush	{d8}
 800dd28:	b086      	sub	sp, #24
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	ed87 0a03 	vstr	s0, [r7, #12]
 800dd30:	edc7 0a02 	vstr	s1, [r7, #8]
 800dd34:	4603      	mov	r3, r0
 800dd36:	71fb      	strb	r3, [r7, #7]
	float			f_1blockDist;				// 1区画の距離[m]
	float           f_accTime;

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800dd38:	79fb      	ldrb	r3, [r7, #7]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d104      	bne.n	800dd48 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x28>
		f_1blockDist = BLOCK;
 800dd3e:	4b01      	ldr	r3, [pc, #4]	@ (800dd44 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x24>)
 800dd40:	617b      	str	r3, [r7, #20]
 800dd42:	e003      	b.n	800dd4c <MOT_setData_MOT_ACC_CONST_CUSTOM+0x2c>
 800dd44:	3db851ec 	.word	0x3db851ec
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800dd48:	4bd9      	ldr	r3, [pc, #868]	@ (800e0b0 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x390>)
 800dd4a:	617b      	str	r3, [r7, #20]
	}
	//jerk
	st_Info.f_mot_jerk		= MOT_getJerk();
 800dd4c:	f7fe f9f1 	bl	800c132 <MOT_getJerk>
 800dd50:	eef0 7a40 	vmov.f32	s15, s0
 800dd54:	4bd7      	ldr	r3, [pc, #860]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dd56:	edc3 7a01 	vstr	s15, [r3, #4]

	/* 速度 */
	st_Info.f_mot_now		= f_MotNowSpeed;													// 現在速度
 800dd5a:	4bd7      	ldr	r3, [pc, #860]	@ (800e0b8 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x398>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4ad5      	ldr	r2, [pc, #852]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dd60:	61d3      	str	r3, [r2, #28]
	st_Info.f_mot_trgt		= f_fin;															// 目標速度
 800dd62:	4ad4      	ldr	r2, [pc, #848]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	6213      	str	r3, [r2, #32]
	st_Info.f_mot_last		= 0;																// 最終速度(未使用)
 800dd68:	4bd2      	ldr	r3, [pc, #840]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dd6a:	f04f 0200 	mov.w	r2, #0
 800dd6e:	625a      	str	r2, [r3, #36]	@ 0x24

	/* 距離 */
	st_Info.f_mot_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800dd70:	ed97 7a03 	vldr	s14, [r7, #12]
 800dd74:	edd7 7a05 	vldr	s15, [r7, #20]
 800dd78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd7c:	4bcd      	ldr	r3, [pc, #820]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dd7e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	/* 加速度 */
//	st_Info.f_mot_acc1 		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_mot_dist - MOT_MOVE_ST_MIN ) * 2.0 );	// 加速度1[mm/s^2]（強制的に書き換え）

	st_Info.f_mot_trgtAcc1		= sqrt(6.0*st_Info.f_mot_jerk*(( st_Info.f_mot_dist - MOT_MOVE_ST_MIN ) - f_MotNowSpeed*MOT_getAcc1()/st_Info.f_mot_jerk)
 800dd82:	4bcc      	ldr	r3, [pc, #816]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7f2 fc06 	bl	8000598 <__aeabi_f2d>
 800dd8c:	f04f 0200 	mov.w	r2, #0
 800dd90:	4bca      	ldr	r3, [pc, #808]	@ (800e0bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x39c>)
 800dd92:	f7f2 fc59 	bl	8000648 <__aeabi_dmul>
 800dd96:	4602      	mov	r2, r0
 800dd98:	460b      	mov	r3, r1
 800dd9a:	4690      	mov	r8, r2
 800dd9c:	4699      	mov	r9, r3
 800dd9e:	4bc5      	ldr	r3, [pc, #788]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dda0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7f2 fbf8 	bl	8000598 <__aeabi_f2d>
 800dda8:	a3bb      	add	r3, pc, #748	@ (adr r3, 800e098 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x378>)
 800ddaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddae:	f7f2 fa93 	bl	80002d8 <__aeabi_dsub>
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	4692      	mov	sl, r2
 800ddb8:	469b      	mov	fp, r3
 800ddba:	f7fe f9a2 	bl	800c102 <MOT_getAcc1>
 800ddbe:	eeb0 7a40 	vmov.f32	s14, s0
 800ddc2:	4bbd      	ldr	r3, [pc, #756]	@ (800e0b8 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x398>)
 800ddc4:	edd3 7a00 	vldr	s15, [r3]
 800ddc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ddcc:	4bb9      	ldr	r3, [pc, #740]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800ddce:	edd3 7a01 	vldr	s15, [r3, #4]
 800ddd2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ddd6:	ee16 0a90 	vmov	r0, s13
 800ddda:	f7f2 fbdd 	bl	8000598 <__aeabi_f2d>
 800ddde:	4602      	mov	r2, r0
 800dde0:	460b      	mov	r3, r1
 800dde2:	4650      	mov	r0, sl
 800dde4:	4659      	mov	r1, fp
 800dde6:	f7f2 fa77 	bl	80002d8 <__aeabi_dsub>
 800ddea:	4602      	mov	r2, r0
 800ddec:	460b      	mov	r3, r1
 800ddee:	4640      	mov	r0, r8
 800ddf0:	4649      	mov	r1, r9
 800ddf2:	f7f2 fc29 	bl	8000648 <__aeabi_dmul>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	4690      	mov	r8, r2
 800ddfc:	4699      	mov	r9, r3
								/((MOT_getAcc1()/st_Info.f_mot_jerk)*(MOT_getAcc1()/st_Info.f_mot_jerk)));
 800ddfe:	f7fe f980 	bl	800c102 <MOT_getAcc1>
 800de02:	eeb0 7a40 	vmov.f32	s14, s0
 800de06:	4bab      	ldr	r3, [pc, #684]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800de08:	edd3 7a01 	vldr	s15, [r3, #4]
 800de0c:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800de10:	f7fe f977 	bl	800c102 <MOT_getAcc1>
 800de14:	eef0 6a40 	vmov.f32	s13, s0
 800de18:	4ba6      	ldr	r3, [pc, #664]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800de1a:	ed93 7a01 	vldr	s14, [r3, #4]
 800de1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de22:	ee68 7a27 	vmul.f32	s15, s16, s15
 800de26:	ee17 0a90 	vmov	r0, s15
 800de2a:	f7f2 fbb5 	bl	8000598 <__aeabi_f2d>
 800de2e:	4602      	mov	r2, r0
 800de30:	460b      	mov	r3, r1
	st_Info.f_mot_trgtAcc1		= sqrt(6.0*st_Info.f_mot_jerk*(( st_Info.f_mot_dist - MOT_MOVE_ST_MIN ) - f_MotNowSpeed*MOT_getAcc1()/st_Info.f_mot_jerk)
 800de32:	4640      	mov	r0, r8
 800de34:	4649      	mov	r1, r9
 800de36:	f7f2 fd31 	bl	800089c <__aeabi_ddiv>
 800de3a:	4602      	mov	r2, r0
 800de3c:	460b      	mov	r3, r1
 800de3e:	ec43 2b17 	vmov	d7, r2, r3
 800de42:	eeb0 0a47 	vmov.f32	s0, s14
 800de46:	eef0 0a67 	vmov.f32	s1, s15
 800de4a:	f00d feb3 	bl	801bbb4 <sqrt>
 800de4e:	ec53 2b10 	vmov	r2, r3, d0
 800de52:	4610      	mov	r0, r2
 800de54:	4619      	mov	r1, r3
 800de56:	f7f2 feef 	bl	8000c38 <__aeabi_d2f>
 800de5a:	4603      	mov	r3, r0
 800de5c:	4a95      	ldr	r2, [pc, #596]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800de5e:	6093      	str	r3, [r2, #8]

	st_Info.f_mot_trgtAcc3 		= 0;																// 加速度3[m/s^2](未使用)
 800de60:	4b94      	ldr	r3, [pc, #592]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800de62:	f04f 0200 	mov.w	r2, #0
 800de66:	60da      	str	r2, [r3, #12]

	/* 距離 */
//	st_Info.f_mot_l1		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_mot_acc1 * 2.0 );			// 第1移動距離[m]
	f_accTime					= st_Info.f_mot_trgtAcc1/st_Info.f_mot_jerk;
 800de68:	4b92      	ldr	r3, [pc, #584]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800de6a:	edd3 6a02 	vldr	s13, [r3, #8]
 800de6e:	4b91      	ldr	r3, [pc, #580]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800de70:	ed93 7a01 	vldr	s14, [r3, #4]
 800de74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de78:	edc7 7a04 	vstr	s15, [r7, #16]

	st_Info.f_mot_accjerk_v		= 1.0/2.0*st_Info.f_mot_jerk*f_accTime*f_accTime;//加速度到達時の速度
 800de7c:	4b8d      	ldr	r3, [pc, #564]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	4618      	mov	r0, r3
 800de82:	f7f2 fb89 	bl	8000598 <__aeabi_f2d>
 800de86:	f04f 0200 	mov.w	r2, #0
 800de8a:	4b8d      	ldr	r3, [pc, #564]	@ (800e0c0 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x3a0>)
 800de8c:	f7f2 fbdc 	bl	8000648 <__aeabi_dmul>
 800de90:	4602      	mov	r2, r0
 800de92:	460b      	mov	r3, r1
 800de94:	4690      	mov	r8, r2
 800de96:	4699      	mov	r9, r3
 800de98:	6938      	ldr	r0, [r7, #16]
 800de9a:	f7f2 fb7d 	bl	8000598 <__aeabi_f2d>
 800de9e:	4602      	mov	r2, r0
 800dea0:	460b      	mov	r3, r1
 800dea2:	4640      	mov	r0, r8
 800dea4:	4649      	mov	r1, r9
 800dea6:	f7f2 fbcf 	bl	8000648 <__aeabi_dmul>
 800deaa:	4602      	mov	r2, r0
 800deac:	460b      	mov	r3, r1
 800deae:	4690      	mov	r8, r2
 800deb0:	4699      	mov	r9, r3
 800deb2:	6938      	ldr	r0, [r7, #16]
 800deb4:	f7f2 fb70 	bl	8000598 <__aeabi_f2d>
 800deb8:	4602      	mov	r2, r0
 800deba:	460b      	mov	r3, r1
 800debc:	4640      	mov	r0, r8
 800debe:	4649      	mov	r1, r9
 800dec0:	f7f2 fbc2 	bl	8000648 <__aeabi_dmul>
 800dec4:	4602      	mov	r2, r0
 800dec6:	460b      	mov	r3, r1
 800dec8:	4610      	mov	r0, r2
 800deca:	4619      	mov	r1, r3
 800decc:	f7f2 feb4 	bl	8000c38 <__aeabi_d2f>
 800ded0:	4603      	mov	r3, r0
 800ded2:	4a78      	ldr	r2, [pc, #480]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800ded4:	6293      	str	r3, [r2, #40]	@ 0x28
	if(fabsf(f_MotTrgtSpeed - f_MotNowSpeed) > 0.05){
 800ded6:	4b7b      	ldr	r3, [pc, #492]	@ (800e0c4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x3a4>)
 800ded8:	ed93 7a00 	vldr	s14, [r3]
 800dedc:	4b76      	ldr	r3, [pc, #472]	@ (800e0b8 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x398>)
 800dede:	edd3 7a00 	vldr	s15, [r3]
 800dee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dee6:	eef0 7ae7 	vabs.f32	s15, s15
 800deea:	ee17 0a90 	vmov	r0, s15
 800deee:	f7f2 fb53 	bl	8000598 <__aeabi_f2d>
 800def2:	a36b      	add	r3, pc, #428	@ (adr r3, 800e0a0 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x380>)
 800def4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def8:	f7f2 fe36 	bl	8000b68 <__aeabi_dcmpgt>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	f000 8130 	beq.w	800e164 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x444>
		st_Info.f_mot_l1_accjerk	= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;//加速度に到達するまでの距離		// 移動距離[m]
 800df04:	4b6b      	ldr	r3, [pc, #428]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	4618      	mov	r0, r3
 800df0a:	f7f2 fb45 	bl	8000598 <__aeabi_f2d>
 800df0e:	a366      	add	r3, pc, #408	@ (adr r3, 800e0a8 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x388>)
 800df10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df14:	f7f2 fb98 	bl	8000648 <__aeabi_dmul>
 800df18:	4602      	mov	r2, r0
 800df1a:	460b      	mov	r3, r1
 800df1c:	4690      	mov	r8, r2
 800df1e:	4699      	mov	r9, r3
 800df20:	6938      	ldr	r0, [r7, #16]
 800df22:	f7f2 fb39 	bl	8000598 <__aeabi_f2d>
 800df26:	4602      	mov	r2, r0
 800df28:	460b      	mov	r3, r1
 800df2a:	4640      	mov	r0, r8
 800df2c:	4649      	mov	r1, r9
 800df2e:	f7f2 fb8b 	bl	8000648 <__aeabi_dmul>
 800df32:	4602      	mov	r2, r0
 800df34:	460b      	mov	r3, r1
 800df36:	4690      	mov	r8, r2
 800df38:	4699      	mov	r9, r3
 800df3a:	6938      	ldr	r0, [r7, #16]
 800df3c:	f7f2 fb2c 	bl	8000598 <__aeabi_f2d>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	4640      	mov	r0, r8
 800df46:	4649      	mov	r1, r9
 800df48:	f7f2 fb7e 	bl	8000648 <__aeabi_dmul>
 800df4c:	4602      	mov	r2, r0
 800df4e:	460b      	mov	r3, r1
 800df50:	4690      	mov	r8, r2
 800df52:	4699      	mov	r9, r3
 800df54:	6938      	ldr	r0, [r7, #16]
 800df56:	f7f2 fb1f 	bl	8000598 <__aeabi_f2d>
 800df5a:	4602      	mov	r2, r0
 800df5c:	460b      	mov	r3, r1
 800df5e:	4640      	mov	r0, r8
 800df60:	4649      	mov	r1, r9
 800df62:	f7f2 fb71 	bl	8000648 <__aeabi_dmul>
 800df66:	4602      	mov	r2, r0
 800df68:	460b      	mov	r3, r1
 800df6a:	4690      	mov	r8, r2
 800df6c:	4699      	mov	r9, r3
 800df6e:	4b52      	ldr	r3, [pc, #328]	@ (800e0b8 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x398>)
 800df70:	ed93 7a00 	vldr	s14, [r3]
 800df74:	edd7 7a04 	vldr	s15, [r7, #16]
 800df78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df7c:	ee17 0a90 	vmov	r0, s15
 800df80:	f7f2 fb0a 	bl	8000598 <__aeabi_f2d>
 800df84:	4602      	mov	r2, r0
 800df86:	460b      	mov	r3, r1
 800df88:	4640      	mov	r0, r8
 800df8a:	4649      	mov	r1, r9
 800df8c:	f7f2 f9a6 	bl	80002dc <__adddf3>
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	4610      	mov	r0, r2
 800df96:	4619      	mov	r1, r3
 800df98:	f7f2 fe4e 	bl	8000c38 <__aeabi_d2f>
 800df9c:	4603      	mov	r3, r0
 800df9e:	4a45      	ldr	r2, [pc, #276]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dfa0:	6393      	str	r3, [r2, #56]	@ 0x38
		st_Info.f_mot_l1_decjerk	= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + (st_Info.f_mot_trgt-st_Info.f_mot_accjerk_v)*f_accTime + 1.0/2.0*st_Info.f_mot_trgtAcc1*f_accTime*f_accTime;
 800dfa2:	4b44      	ldr	r3, [pc, #272]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7f2 faf6 	bl	8000598 <__aeabi_f2d>
 800dfac:	a33e      	add	r3, pc, #248	@ (adr r3, 800e0a8 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x388>)
 800dfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb2:	f7f2 fb49 	bl	8000648 <__aeabi_dmul>
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	460b      	mov	r3, r1
 800dfba:	4614      	mov	r4, r2
 800dfbc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800dfc0:	6938      	ldr	r0, [r7, #16]
 800dfc2:	f7f2 fae9 	bl	8000598 <__aeabi_f2d>
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	460b      	mov	r3, r1
 800dfca:	4620      	mov	r0, r4
 800dfcc:	4629      	mov	r1, r5
 800dfce:	f7f2 fb3b 	bl	8000648 <__aeabi_dmul>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	4614      	mov	r4, r2
 800dfd8:	461d      	mov	r5, r3
 800dfda:	6938      	ldr	r0, [r7, #16]
 800dfdc:	f7f2 fadc 	bl	8000598 <__aeabi_f2d>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	f7f2 fb2e 	bl	8000648 <__aeabi_dmul>
 800dfec:	4602      	mov	r2, r0
 800dfee:	460b      	mov	r3, r1
 800dff0:	4614      	mov	r4, r2
 800dff2:	461d      	mov	r5, r3
 800dff4:	6938      	ldr	r0, [r7, #16]
 800dff6:	f7f2 facf 	bl	8000598 <__aeabi_f2d>
 800dffa:	4602      	mov	r2, r0
 800dffc:	460b      	mov	r3, r1
 800dffe:	4620      	mov	r0, r4
 800e000:	4629      	mov	r1, r5
 800e002:	f7f2 fb21 	bl	8000648 <__aeabi_dmul>
 800e006:	4602      	mov	r2, r0
 800e008:	460b      	mov	r3, r1
 800e00a:	4614      	mov	r4, r2
 800e00c:	461d      	mov	r5, r3
 800e00e:	4b29      	ldr	r3, [pc, #164]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800e010:	ed93 7a08 	vldr	s14, [r3, #32]
 800e014:	4b27      	ldr	r3, [pc, #156]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800e016:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e01a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e01e:	edd7 7a04 	vldr	s15, [r7, #16]
 800e022:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e026:	ee17 0a90 	vmov	r0, s15
 800e02a:	f7f2 fab5 	bl	8000598 <__aeabi_f2d>
 800e02e:	4602      	mov	r2, r0
 800e030:	460b      	mov	r3, r1
 800e032:	4620      	mov	r0, r4
 800e034:	4629      	mov	r1, r5
 800e036:	f7f2 f951 	bl	80002dc <__adddf3>
 800e03a:	4602      	mov	r2, r0
 800e03c:	460b      	mov	r3, r1
 800e03e:	4614      	mov	r4, r2
 800e040:	461d      	mov	r5, r3
 800e042:	4b1c      	ldr	r3, [pc, #112]	@ (800e0b4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x394>)
 800e044:	689b      	ldr	r3, [r3, #8]
 800e046:	4618      	mov	r0, r3
 800e048:	f7f2 faa6 	bl	8000598 <__aeabi_f2d>
 800e04c:	f04f 0200 	mov.w	r2, #0
 800e050:	4b1b      	ldr	r3, [pc, #108]	@ (800e0c0 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x3a0>)
 800e052:	f7f2 faf9 	bl	8000648 <__aeabi_dmul>
 800e056:	4602      	mov	r2, r0
 800e058:	460b      	mov	r3, r1
 800e05a:	4690      	mov	r8, r2
 800e05c:	4699      	mov	r9, r3
 800e05e:	6938      	ldr	r0, [r7, #16]
 800e060:	f7f2 fa9a 	bl	8000598 <__aeabi_f2d>
 800e064:	4602      	mov	r2, r0
 800e066:	460b      	mov	r3, r1
 800e068:	4640      	mov	r0, r8
 800e06a:	4649      	mov	r1, r9
 800e06c:	f7f2 faec 	bl	8000648 <__aeabi_dmul>
 800e070:	4602      	mov	r2, r0
 800e072:	460b      	mov	r3, r1
 800e074:	4690      	mov	r8, r2
 800e076:	4699      	mov	r9, r3
 800e078:	6938      	ldr	r0, [r7, #16]
 800e07a:	f7f2 fa8d 	bl	8000598 <__aeabi_f2d>
 800e07e:	4602      	mov	r2, r0
 800e080:	460b      	mov	r3, r1
 800e082:	4640      	mov	r0, r8
 800e084:	4649      	mov	r1, r9
 800e086:	f7f2 fadf 	bl	8000648 <__aeabi_dmul>
 800e08a:	4602      	mov	r2, r0
 800e08c:	460b      	mov	r3, r1
 800e08e:	4620      	mov	r0, r4
 800e090:	4629      	mov	r1, r5
 800e092:	f7f2 f923 	bl	80002dc <__adddf3>
 800e096:	e017      	b.n	800e0c8 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x3a8>
 800e098:	47ae147b 	.word	0x47ae147b
 800e09c:	3f847ae1 	.word	0x3f847ae1
 800e0a0:	9999999a 	.word	0x9999999a
 800e0a4:	3fa99999 	.word	0x3fa99999
 800e0a8:	55555555 	.word	0x55555555
 800e0ac:	3fc55555 	.word	0x3fc55555
 800e0b0:	3e0255b0 	.word	0x3e0255b0
 800e0b4:	20017b2c 	.word	0x20017b2c
 800e0b8:	20017bcc 	.word	0x20017bcc
 800e0bc:	40180000 	.word	0x40180000
 800e0c0:	3fe00000 	.word	0x3fe00000
 800e0c4:	20017bd0 	.word	0x20017bd0
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	4610      	mov	r0, r2
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	f7f2 fdb2 	bl	8000c38 <__aeabi_d2f>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	4a39      	ldr	r2, [pc, #228]	@ (800e1bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e0d8:	6413      	str	r3, [r2, #64]	@ 0x40
		st_Info.f_mot_l1_accconst	= ((f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)*(f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)
 800e0da:	4b39      	ldr	r3, [pc, #228]	@ (800e1c0 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x4a0>)
 800e0dc:	ed93 7a00 	vldr	s14, [r3]
 800e0e0:	4b36      	ldr	r3, [pc, #216]	@ (800e1bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e0e2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e0e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e0ea:	4b35      	ldr	r3, [pc, #212]	@ (800e1c0 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x4a0>)
 800e0ec:	edd3 6a00 	vldr	s13, [r3]
 800e0f0:	4b32      	ldr	r3, [pc, #200]	@ (800e1bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e0f2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e0f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e0fa:	ee27 7a27 	vmul.f32	s14, s14, s15
										-(f_MotNowSpeed+st_Info.f_mot_accjerk_v)*(f_MotNowSpeed+st_Info.f_mot_accjerk_v))
 800e0fe:	4b2f      	ldr	r3, [pc, #188]	@ (800e1bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e100:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800e104:	4b2f      	ldr	r3, [pc, #188]	@ (800e1c4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x4a4>)
 800e106:	edd3 7a00 	vldr	s15, [r3]
 800e10a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e10e:	4b2b      	ldr	r3, [pc, #172]	@ (800e1bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e110:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 800e114:	4b2b      	ldr	r3, [pc, #172]	@ (800e1c4 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x4a4>)
 800e116:	edd3 7a00 	vldr	s15, [r3]
 800e11a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e11e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e122:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e126:	ee17 0a90 	vmov	r0, s15
 800e12a:	f7f2 fa35 	bl	8000598 <__aeabi_f2d>
 800e12e:	4604      	mov	r4, r0
 800e130:	460d      	mov	r5, r1
										/( st_Info.f_mot_trgtAcc1 * 2.0 );
 800e132:	4b22      	ldr	r3, [pc, #136]	@ (800e1bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e134:	689b      	ldr	r3, [r3, #8]
 800e136:	4618      	mov	r0, r3
 800e138:	f7f2 fa2e 	bl	8000598 <__aeabi_f2d>
 800e13c:	4602      	mov	r2, r0
 800e13e:	460b      	mov	r3, r1
 800e140:	f7f2 f8cc 	bl	80002dc <__adddf3>
 800e144:	4602      	mov	r2, r0
 800e146:	460b      	mov	r3, r1
 800e148:	4620      	mov	r0, r4
 800e14a:	4629      	mov	r1, r5
 800e14c:	f7f2 fba6 	bl	800089c <__aeabi_ddiv>
 800e150:	4602      	mov	r2, r0
 800e152:	460b      	mov	r3, r1
 800e154:	4610      	mov	r0, r2
 800e156:	4619      	mov	r1, r3
 800e158:	f7f2 fd6e 	bl	8000c38 <__aeabi_d2f>
 800e15c:	4603      	mov	r3, r0
		st_Info.f_mot_l1_accconst	= ((f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)*(f_MotTrgtSpeed-st_Info.f_mot_accjerk_v)
 800e15e:	4a17      	ldr	r2, [pc, #92]	@ (800e1bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e160:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800e162:	e00f      	b.n	800e184 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x464>
	}else{
		st_Info.f_mot_l1_accjerk    = 0.0;//加速度に到達するまでの距離                                          // 移動距離[m]
 800e164:	4b15      	ldr	r3, [pc, #84]	@ (800e1bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e166:	f04f 0200 	mov.w	r2, #0
 800e16a:	639a      	str	r2, [r3, #56]	@ 0x38
		st_Info.f_mot_l1_decjerk    = 0.0;
 800e16c:	4b13      	ldr	r3, [pc, #76]	@ (800e1bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e16e:	f04f 0200 	mov.w	r2, #0
 800e172:	641a      	str	r2, [r3, #64]	@ 0x40
		st_Info.f_mot_l1_accconst   = 0.0;
 800e174:	4b11      	ldr	r3, [pc, #68]	@ (800e1bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e176:	f04f 0200 	mov.w	r2, #0
 800e17a:	63da      	str	r2, [r3, #60]	@ 0x3c
		st_Info.f_mot_accjerk_v		= 0.0;
 800e17c:	4b0f      	ldr	r3, [pc, #60]	@ (800e1bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e17e:	f04f 0200 	mov.w	r2, #0
 800e182:	629a      	str	r2, [r3, #40]	@ 0x28
	}
	st_Info.f_mot_l1			= st_Info.f_mot_l1_accjerk + st_Info.f_mot_l1_decjerk + st_Info.f_mot_l1_accconst;
 800e184:	4b0d      	ldr	r3, [pc, #52]	@ (800e1bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e186:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800e18a:	4b0c      	ldr	r3, [pc, #48]	@ (800e1bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e18c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800e190:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e194:	4b09      	ldr	r3, [pc, #36]	@ (800e1bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e196:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800e19a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e19e:	4b07      	ldr	r3, [pc, #28]	@ (800e1bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e1a0:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	st_Info.f_mot_l1_2			= st_Info.f_mot_dist;													// 第1+2移動距離[m]
 800e1a4:	4b05      	ldr	r3, [pc, #20]	@ (800e1bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e1a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1a8:	4a04      	ldr	r2, [pc, #16]	@ (800e1bc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x49c>)
 800e1aa:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800e1ac:	bf00      	nop
 800e1ae:	3718      	adds	r7, #24
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	ecbd 8b02 	vpop	{d8}
 800e1b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1ba:	bf00      	nop
 800e1bc:	20017b2c 	.word	0x20017b2c
 800e1c0:	20017bd0 	.word	0x20017bd0
 800e1c4:	20017bcc 	.word	0x20017bcc

0800e1c8 <MOT_setData_MOT_CONST_DEC>:

void MOT_setData_MOT_CONST_DEC( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800e1c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e1cc:	b08a      	sub	sp, #40	@ 0x28
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	ed87 0a05 	vstr	s0, [r7, #20]
 800e1d4:	edc7 0a04 	vstr	s1, [r7, #16]
 800e1d8:	4603      	mov	r3, r0
 800e1da:	73fb      	strb	r3, [r7, #15]
	float           f_l3;                       // 第3移動距離[m]
	float			f_1blockDist;				// 1区画の距離[mm]
	float           f_accTime;

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800e1dc:	7bfb      	ldrb	r3, [r7, #15]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d102      	bne.n	800e1e8 <MOT_setData_MOT_CONST_DEC+0x20>
		f_1blockDist = BLOCK;
 800e1e2:	4bc9      	ldr	r3, [pc, #804]	@ (800e508 <MOT_setData_MOT_CONST_DEC+0x340>)
 800e1e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1e6:	e001      	b.n	800e1ec <MOT_setData_MOT_CONST_DEC+0x24>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800e1e8:	4bc8      	ldr	r3, [pc, #800]	@ (800e50c <MOT_setData_MOT_CONST_DEC+0x344>)
 800e1ea:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	//jerk
	st_Info.f_mot_jerk		= MOT_getJerk();
 800e1ec:	f7fd ffa1 	bl	800c132 <MOT_getJerk>
 800e1f0:	eef0 7a40 	vmov.f32	s15, s0
 800e1f4:	4bc6      	ldr	r3, [pc, #792]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e1f6:	edc3 7a01 	vstr	s15, [r3, #4]

	/* 加速度 */
	st_Info.f_mot_trgtAcc1 		= 0;																// 加速度1[mm/s^2](未使用)
 800e1fa:	4bc5      	ldr	r3, [pc, #788]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e1fc:	f04f 0200 	mov.w	r2, #0
 800e200:	609a      	str	r2, [r3, #8]
	st_Info.f_mot_trgtAcc3 		= MOT_getAcc3();													// 加速度3[mm/s^2]
 800e202:	f7fd ff8a 	bl	800c11a <MOT_getAcc3>
 800e206:	eef0 7a40 	vmov.f32	s15, s0
 800e20a:	4bc1      	ldr	r3, [pc, #772]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e20c:	edc3 7a03 	vstr	s15, [r3, #12]

	/* 速度 */
	st_Info.f_mot_now		= f_MotNowSpeed;													// 現在速度
 800e210:	4bc0      	ldr	r3, [pc, #768]	@ (800e514 <MOT_setData_MOT_CONST_DEC+0x34c>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4abe      	ldr	r2, [pc, #760]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e216:	61d3      	str	r3, [r2, #28]
	st_Info.f_mot_trgt		= f_MotNowSpeed;													// 目標速度
 800e218:	4bbe      	ldr	r3, [pc, #760]	@ (800e514 <MOT_setData_MOT_CONST_DEC+0x34c>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4abc      	ldr	r2, [pc, #752]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e21e:	6213      	str	r3, [r2, #32]
	st_Info.f_mot_last		= f_fin;															// 最終速度(未使用)
 800e220:	4abb      	ldr	r2, [pc, #748]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	6253      	str	r3, [r2, #36]	@ 0x24

	/* 距離 */
	st_Info.f_mot_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800e226:	ed97 7a05 	vldr	s14, [r7, #20]
 800e22a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e22e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e232:	4bb7      	ldr	r3, [pc, #732]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e234:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	st_Info.f_mot_l1		= 0;																// 第1移動距離[m]
 800e238:	4bb5      	ldr	r3, [pc, #724]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e23a:	f04f 0200 	mov.w	r2, #0
 800e23e:	635a      	str	r2, [r3, #52]	@ 0x34
//	st_Info.f_mot_l1_2		= st_Info.f_mot_dist - ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_mot_acc3 * -1.0 ) * 2.0 );			// 第1-2移動距離[m]

	f_accTime   = st_Info.f_mot_trgtAcc3/st_Info.f_mot_jerk;
 800e240:	4bb3      	ldr	r3, [pc, #716]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e242:	edd3 6a03 	vldr	s13, [r3, #12]
 800e246:	4bb2      	ldr	r3, [pc, #712]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e248:	ed93 7a01 	vldr	s14, [r3, #4]
 800e24c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e250:	edc7 7a08 	vstr	s15, [r7, #32]
    st_Info.f_mot_decjerk_v  	= 1.0/2.0*st_Info.f_mot_jerk*f_accTime*f_accTime;//加速度到達時の速度
 800e254:	4bae      	ldr	r3, [pc, #696]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	4618      	mov	r0, r3
 800e25a:	f7f2 f99d 	bl	8000598 <__aeabi_f2d>
 800e25e:	f04f 0200 	mov.w	r2, #0
 800e262:	4bad      	ldr	r3, [pc, #692]	@ (800e518 <MOT_setData_MOT_CONST_DEC+0x350>)
 800e264:	f7f2 f9f0 	bl	8000648 <__aeabi_dmul>
 800e268:	4602      	mov	r2, r0
 800e26a:	460b      	mov	r3, r1
 800e26c:	e9c7 2300 	strd	r2, r3, [r7]
 800e270:	6a38      	ldr	r0, [r7, #32]
 800e272:	f7f2 f991 	bl	8000598 <__aeabi_f2d>
 800e276:	4602      	mov	r2, r0
 800e278:	460b      	mov	r3, r1
 800e27a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e27e:	f7f2 f9e3 	bl	8000648 <__aeabi_dmul>
 800e282:	4602      	mov	r2, r0
 800e284:	460b      	mov	r3, r1
 800e286:	e9c7 2300 	strd	r2, r3, [r7]
 800e28a:	6a38      	ldr	r0, [r7, #32]
 800e28c:	f7f2 f984 	bl	8000598 <__aeabi_f2d>
 800e290:	4602      	mov	r2, r0
 800e292:	460b      	mov	r3, r1
 800e294:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e298:	f7f2 f9d6 	bl	8000648 <__aeabi_dmul>
 800e29c:	4602      	mov	r2, r0
 800e29e:	460b      	mov	r3, r1
 800e2a0:	4610      	mov	r0, r2
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	f7f2 fcc8 	bl	8000c38 <__aeabi_d2f>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	4a99      	ldr	r2, [pc, #612]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e2ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if((f_MotTrgtSpeed - f_fin) != 0){
 800e2ae:	4b9b      	ldr	r3, [pc, #620]	@ (800e51c <MOT_setData_MOT_CONST_DEC+0x354>)
 800e2b0:	ed93 7a00 	vldr	s14, [r3]
 800e2b4:	edd7 7a04 	vldr	s15, [r7, #16]
 800e2b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e2bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c4:	f000 812c 	beq.w	800e520 <MOT_setData_MOT_CONST_DEC+0x358>
		st_Info.f_mot_l3_decjerk    = 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;
 800e2c8:	4b91      	ldr	r3, [pc, #580]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7f2 f963 	bl	8000598 <__aeabi_f2d>
 800e2d2:	a38b      	add	r3, pc, #556	@ (adr r3, 800e500 <MOT_setData_MOT_CONST_DEC+0x338>)
 800e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d8:	f7f2 f9b6 	bl	8000648 <__aeabi_dmul>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	460b      	mov	r3, r1
 800e2e0:	4692      	mov	sl, r2
 800e2e2:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 800e2e6:	6a38      	ldr	r0, [r7, #32]
 800e2e8:	f7f2 f956 	bl	8000598 <__aeabi_f2d>
 800e2ec:	4602      	mov	r2, r0
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	4650      	mov	r0, sl
 800e2f2:	4659      	mov	r1, fp
 800e2f4:	f7f2 f9a8 	bl	8000648 <__aeabi_dmul>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	4692      	mov	sl, r2
 800e2fe:	469b      	mov	fp, r3
 800e300:	6a38      	ldr	r0, [r7, #32]
 800e302:	f7f2 f949 	bl	8000598 <__aeabi_f2d>
 800e306:	4602      	mov	r2, r0
 800e308:	460b      	mov	r3, r1
 800e30a:	4650      	mov	r0, sl
 800e30c:	4659      	mov	r1, fp
 800e30e:	f7f2 f99b 	bl	8000648 <__aeabi_dmul>
 800e312:	4602      	mov	r2, r0
 800e314:	460b      	mov	r3, r1
 800e316:	4692      	mov	sl, r2
 800e318:	469b      	mov	fp, r3
 800e31a:	6a38      	ldr	r0, [r7, #32]
 800e31c:	f7f2 f93c 	bl	8000598 <__aeabi_f2d>
 800e320:	4602      	mov	r2, r0
 800e322:	460b      	mov	r3, r1
 800e324:	4650      	mov	r0, sl
 800e326:	4659      	mov	r1, fp
 800e328:	f7f2 f98e 	bl	8000648 <__aeabi_dmul>
 800e32c:	4602      	mov	r2, r0
 800e32e:	460b      	mov	r3, r1
 800e330:	4692      	mov	sl, r2
 800e332:	469b      	mov	fp, r3
 800e334:	4b77      	ldr	r3, [pc, #476]	@ (800e514 <MOT_setData_MOT_CONST_DEC+0x34c>)
 800e336:	ed93 7a00 	vldr	s14, [r3]
 800e33a:	edd7 7a08 	vldr	s15, [r7, #32]
 800e33e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e342:	ee17 0a90 	vmov	r0, s15
 800e346:	f7f2 f927 	bl	8000598 <__aeabi_f2d>
 800e34a:	4602      	mov	r2, r0
 800e34c:	460b      	mov	r3, r1
 800e34e:	4650      	mov	r0, sl
 800e350:	4659      	mov	r1, fp
 800e352:	f7f1 ffc3 	bl	80002dc <__adddf3>
 800e356:	4602      	mov	r2, r0
 800e358:	460b      	mov	r3, r1
 800e35a:	4610      	mov	r0, r2
 800e35c:	4619      	mov	r1, r3
 800e35e:	f7f2 fc6b 	bl	8000c38 <__aeabi_d2f>
 800e362:	4603      	mov	r3, r0
 800e364:	4a6a      	ldr	r2, [pc, #424]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e366:	6493      	str	r3, [r2, #72]	@ 0x48
		st_Info.f_mot_l3_accjerk    = 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + (f_fin-st_Info.f_mot_decjerk_v)*f_accTime + 1.0/2.0*st_Info.f_mot_trgtAcc3*(-1.0)*f_accTime*f_accTime;//減速は加速度同様にする前提処理
 800e368:	4b69      	ldr	r3, [pc, #420]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7f2 f913 	bl	8000598 <__aeabi_f2d>
 800e372:	a363      	add	r3, pc, #396	@ (adr r3, 800e500 <MOT_setData_MOT_CONST_DEC+0x338>)
 800e374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e378:	f7f2 f966 	bl	8000648 <__aeabi_dmul>
 800e37c:	4602      	mov	r2, r0
 800e37e:	460b      	mov	r3, r1
 800e380:	4692      	mov	sl, r2
 800e382:	469b      	mov	fp, r3
 800e384:	6a38      	ldr	r0, [r7, #32]
 800e386:	f7f2 f907 	bl	8000598 <__aeabi_f2d>
 800e38a:	4602      	mov	r2, r0
 800e38c:	460b      	mov	r3, r1
 800e38e:	4650      	mov	r0, sl
 800e390:	4659      	mov	r1, fp
 800e392:	f7f2 f959 	bl	8000648 <__aeabi_dmul>
 800e396:	4602      	mov	r2, r0
 800e398:	460b      	mov	r3, r1
 800e39a:	4692      	mov	sl, r2
 800e39c:	469b      	mov	fp, r3
 800e39e:	6a38      	ldr	r0, [r7, #32]
 800e3a0:	f7f2 f8fa 	bl	8000598 <__aeabi_f2d>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	460b      	mov	r3, r1
 800e3a8:	4650      	mov	r0, sl
 800e3aa:	4659      	mov	r1, fp
 800e3ac:	f7f2 f94c 	bl	8000648 <__aeabi_dmul>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	460b      	mov	r3, r1
 800e3b4:	4692      	mov	sl, r2
 800e3b6:	469b      	mov	fp, r3
 800e3b8:	6a38      	ldr	r0, [r7, #32]
 800e3ba:	f7f2 f8ed 	bl	8000598 <__aeabi_f2d>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	4650      	mov	r0, sl
 800e3c4:	4659      	mov	r1, fp
 800e3c6:	f7f2 f93f 	bl	8000648 <__aeabi_dmul>
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	460b      	mov	r3, r1
 800e3ce:	4692      	mov	sl, r2
 800e3d0:	469b      	mov	fp, r3
 800e3d2:	4b4f      	ldr	r3, [pc, #316]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e3d4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800e3d8:	ed97 7a04 	vldr	s14, [r7, #16]
 800e3dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e3e0:	edd7 7a08 	vldr	s15, [r7, #32]
 800e3e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3e8:	ee17 0a90 	vmov	r0, s15
 800e3ec:	f7f2 f8d4 	bl	8000598 <__aeabi_f2d>
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	460b      	mov	r3, r1
 800e3f4:	4650      	mov	r0, sl
 800e3f6:	4659      	mov	r1, fp
 800e3f8:	f7f1 ff70 	bl	80002dc <__adddf3>
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	460b      	mov	r3, r1
 800e400:	4692      	mov	sl, r2
 800e402:	469b      	mov	fp, r3
 800e404:	4b42      	ldr	r3, [pc, #264]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	4618      	mov	r0, r3
 800e40a:	f7f2 f8c5 	bl	8000598 <__aeabi_f2d>
 800e40e:	f04f 0200 	mov.w	r2, #0
 800e412:	4b41      	ldr	r3, [pc, #260]	@ (800e518 <MOT_setData_MOT_CONST_DEC+0x350>)
 800e414:	f7f2 f918 	bl	8000648 <__aeabi_dmul>
 800e418:	4602      	mov	r2, r0
 800e41a:	460b      	mov	r3, r1
 800e41c:	4690      	mov	r8, r2
 800e41e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800e422:	6a38      	ldr	r0, [r7, #32]
 800e424:	f7f2 f8b8 	bl	8000598 <__aeabi_f2d>
 800e428:	4602      	mov	r2, r0
 800e42a:	460b      	mov	r3, r1
 800e42c:	4640      	mov	r0, r8
 800e42e:	4649      	mov	r1, r9
 800e430:	f7f2 f90a 	bl	8000648 <__aeabi_dmul>
 800e434:	4602      	mov	r2, r0
 800e436:	460b      	mov	r3, r1
 800e438:	4690      	mov	r8, r2
 800e43a:	4699      	mov	r9, r3
 800e43c:	6a38      	ldr	r0, [r7, #32]
 800e43e:	f7f2 f8ab 	bl	8000598 <__aeabi_f2d>
 800e442:	4602      	mov	r2, r0
 800e444:	460b      	mov	r3, r1
 800e446:	4640      	mov	r0, r8
 800e448:	4649      	mov	r1, r9
 800e44a:	f7f2 f8fd 	bl	8000648 <__aeabi_dmul>
 800e44e:	4602      	mov	r2, r0
 800e450:	460b      	mov	r3, r1
 800e452:	4650      	mov	r0, sl
 800e454:	4659      	mov	r1, fp
 800e456:	f7f1 ff41 	bl	80002dc <__adddf3>
 800e45a:	4602      	mov	r2, r0
 800e45c:	460b      	mov	r3, r1
 800e45e:	4610      	mov	r0, r2
 800e460:	4619      	mov	r1, r3
 800e462:	f7f2 fbe9 	bl	8000c38 <__aeabi_d2f>
 800e466:	4603      	mov	r3, r0
 800e468:	4a29      	ldr	r2, [pc, #164]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e46a:	6513      	str	r3, [r2, #80]	@ 0x50
		st_Info.f_mot_l3_decconst   = ( (f_fin+st_Info.f_mot_decjerk_v) * (f_fin+st_Info.f_mot_decjerk_v) 
 800e46c:	4b28      	ldr	r3, [pc, #160]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e46e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800e472:	edd7 7a04 	vldr	s15, [r7, #16]
 800e476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e47a:	4b25      	ldr	r3, [pc, #148]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e47c:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800e480:	edd7 7a04 	vldr	s15, [r7, #16]
 800e484:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e488:	ee27 7a27 	vmul.f32	s14, s14, s15
										- (f_MotTrgtSpeed-st_Info.f_mot_decjerk_v) * (f_MotTrgtSpeed-st_Info.f_mot_decjerk_v) ) 
 800e48c:	4b23      	ldr	r3, [pc, #140]	@ (800e51c <MOT_setData_MOT_CONST_DEC+0x354>)
 800e48e:	edd3 6a00 	vldr	s13, [r3]
 800e492:	4b1f      	ldr	r3, [pc, #124]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e494:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800e498:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e49c:	4b1f      	ldr	r3, [pc, #124]	@ (800e51c <MOT_setData_MOT_CONST_DEC+0x354>)
 800e49e:	ed93 6a00 	vldr	s12, [r3]
 800e4a2:	4b1b      	ldr	r3, [pc, #108]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e4a4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800e4a8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e4ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e4b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e4b4:	ee17 0a90 	vmov	r0, s15
 800e4b8:	f7f2 f86e 	bl	8000598 <__aeabi_f2d>
 800e4bc:	4680      	mov	r8, r0
 800e4be:	4689      	mov	r9, r1
										/ ( st_Info.f_mot_trgtAcc3 * (-1.0 ) * 2.0 );
 800e4c0:	4b13      	ldr	r3, [pc, #76]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7f2 f867 	bl	8000598 <__aeabi_f2d>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	4614      	mov	r4, r2
 800e4d0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800e4d4:	4622      	mov	r2, r4
 800e4d6:	462b      	mov	r3, r5
 800e4d8:	4620      	mov	r0, r4
 800e4da:	4629      	mov	r1, r5
 800e4dc:	f7f1 fefe 	bl	80002dc <__adddf3>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	4640      	mov	r0, r8
 800e4e6:	4649      	mov	r1, r9
 800e4e8:	f7f2 f9d8 	bl	800089c <__aeabi_ddiv>
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	4610      	mov	r0, r2
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	f7f2 fba0 	bl	8000c38 <__aeabi_d2f>
 800e4f8:	4603      	mov	r3, r0
		st_Info.f_mot_l3_decconst   = ( (f_fin+st_Info.f_mot_decjerk_v) * (f_fin+st_Info.f_mot_decjerk_v) 
 800e4fa:	4a05      	ldr	r2, [pc, #20]	@ (800e510 <MOT_setData_MOT_CONST_DEC+0x348>)
 800e4fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e4fe:	e01f      	b.n	800e540 <MOT_setData_MOT_CONST_DEC+0x378>
 800e500:	55555555 	.word	0x55555555
 800e504:	3fc55555 	.word	0x3fc55555
 800e508:	3db851ec 	.word	0x3db851ec
 800e50c:	3e0255b0 	.word	0x3e0255b0
 800e510:	20017b2c 	.word	0x20017b2c
 800e514:	20017bcc 	.word	0x20017bcc
 800e518:	3fe00000 	.word	0x3fe00000
 800e51c:	20017bd0 	.word	0x20017bd0
	}else{
		st_Info.f_mot_l3_decjerk    = 0.0;
 800e520:	4b16      	ldr	r3, [pc, #88]	@ (800e57c <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e522:	f04f 0200 	mov.w	r2, #0
 800e526:	649a      	str	r2, [r3, #72]	@ 0x48
		st_Info.f_mot_l3_accjerk    = 0.0;//減速は加速度同様にする前提処理
 800e528:	4b14      	ldr	r3, [pc, #80]	@ (800e57c <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e52a:	f04f 0200 	mov.w	r2, #0
 800e52e:	651a      	str	r2, [r3, #80]	@ 0x50
		st_Info.f_mot_l3_decconst   = 0.0;
 800e530:	4b12      	ldr	r3, [pc, #72]	@ (800e57c <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e532:	f04f 0200 	mov.w	r2, #0
 800e536:	64da      	str	r2, [r3, #76]	@ 0x4c
		st_Info.f_mot_decjerk_v  	= 0.0;
 800e538:	4b10      	ldr	r3, [pc, #64]	@ (800e57c <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e53a:	f04f 0200 	mov.w	r2, #0
 800e53e:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
    f_l3                	= st_Info.f_mot_l3_decjerk + st_Info.f_mot_l3_accjerk + st_Info.f_mot_l3_decconst;    
 800e540:	4b0e      	ldr	r3, [pc, #56]	@ (800e57c <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e542:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800e546:	4b0d      	ldr	r3, [pc, #52]	@ (800e57c <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e548:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800e54c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e550:	4b0a      	ldr	r3, [pc, #40]	@ (800e57c <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e552:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800e556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e55a:	edc7 7a07 	vstr	s15, [r7, #28]
    st_Info.f_mot_l1_2      = st_Info.f_mot_dist - f_l3;                                            // 第1+2移動距離[m]
 800e55e:	4b07      	ldr	r3, [pc, #28]	@ (800e57c <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e560:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800e564:	edd7 7a07 	vldr	s15, [r7, #28]
 800e568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e56c:	4b03      	ldr	r3, [pc, #12]	@ (800e57c <MOT_setData_MOT_CONST_DEC+0x3b4>)
 800e56e:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
}
 800e572:	bf00      	nop
 800e574:	3728      	adds	r7, #40	@ 0x28
 800e576:	46bd      	mov	sp, r7
 800e578:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e57c:	20017b2c 	.word	0x20017b2c

0800e580 <MOT_setData_MOT_CONST_DEC_CUSTOM>:

void MOT_setData_MOT_CONST_DEC_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800e580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e584:	ed2d 8b02 	vpush	{d8}
 800e588:	b08a      	sub	sp, #40	@ 0x28
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	ed87 0a07 	vstr	s0, [r7, #28]
 800e590:	edc7 0a06 	vstr	s1, [r7, #24]
 800e594:	4603      	mov	r3, r0
 800e596:	75fb      	strb	r3, [r7, #23]
	float			f_1blockDist;				// 1区画の距離[m]
	float			f_accTime;

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800e598:	7dfb      	ldrb	r3, [r7, #23]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d104      	bne.n	800e5a8 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x28>
		f_1blockDist = BLOCK;
 800e59e:	4b01      	ldr	r3, [pc, #4]	@ (800e5a4 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x24>)
 800e5a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5a2:	e003      	b.n	800e5ac <MOT_setData_MOT_CONST_DEC_CUSTOM+0x2c>
 800e5a4:	3db851ec 	.word	0x3db851ec
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800e5a8:	4bd5      	ldr	r3, [pc, #852]	@ (800e900 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x380>)
 800e5aa:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	//jerk
	st_Info.f_mot_jerk		= MOT_getJerk();
 800e5ac:	f7fd fdc1 	bl	800c132 <MOT_getJerk>
 800e5b0:	eef0 7a40 	vmov.f32	s15, s0
 800e5b4:	4bd3      	ldr	r3, [pc, #844]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e5b6:	edc3 7a01 	vstr	s15, [r3, #4]

	/* 速度 */
	st_Info.f_mot_now		= f_MotNowSpeed;									// 現在速度
 800e5ba:	4bd3      	ldr	r3, [pc, #844]	@ (800e908 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x388>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4ad1      	ldr	r2, [pc, #836]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e5c0:	61d3      	str	r3, [r2, #28]
	st_Info.f_mot_trgt		= f_MotNowSpeed;									// 目標速度
 800e5c2:	4bd1      	ldr	r3, [pc, #836]	@ (800e908 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x388>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4acf      	ldr	r2, [pc, #828]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e5c8:	6213      	str	r3, [r2, #32]
	st_Info.f_mot_last		= f_fin;															// 最終速度
 800e5ca:	4ace      	ldr	r2, [pc, #824]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	6253      	str	r3, [r2, #36]	@ 0x24

	/* 距離 */
	st_Info.f_mot_dist		= f_num * f_1blockDist;									// 移動距離[mm]
 800e5d0:	ed97 7a07 	vldr	s14, [r7, #28]
 800e5d4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e5d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5dc:	4bc9      	ldr	r3, [pc, #804]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e5de:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	/* 加速度 */
	st_Info.f_mot_trgtAcc1 		= 0;																// 加速度1[mm/s^2](未使用)
 800e5e2:	4bc8      	ldr	r3, [pc, #800]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e5e4:	f04f 0200 	mov.w	r2, #0
 800e5e8:	609a      	str	r2, [r3, #8]
//	st_Info.f_mot_acc3 		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_mot_dist - MOT_MOVE_ST_MIN ) * 2.0 ) * -1.0;	// 加速度3[mm/s^2]（強制的に書き換え）
	st_Info.f_mot_trgtAcc3		= sqrt(6.0*st_Info.f_mot_jerk*(( st_Info.f_mot_dist - MOT_MOVE_ST_MIN ) - f_MotNowSpeed*MOT_getAcc3()/st_Info.f_mot_jerk)
 800e5ea:	4bc6      	ldr	r3, [pc, #792]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7f1 ffd2 	bl	8000598 <__aeabi_f2d>
 800e5f4:	f04f 0200 	mov.w	r2, #0
 800e5f8:	4bc4      	ldr	r3, [pc, #784]	@ (800e90c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x38c>)
 800e5fa:	f7f2 f825 	bl	8000648 <__aeabi_dmul>
 800e5fe:	4602      	mov	r2, r0
 800e600:	460b      	mov	r3, r1
 800e602:	e9c7 2300 	strd	r2, r3, [r7]
 800e606:	4bbf      	ldr	r3, [pc, #764]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7f1 ffc4 	bl	8000598 <__aeabi_f2d>
 800e610:	a3b7      	add	r3, pc, #732	@ (adr r3, 800e8f0 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x370>)
 800e612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e616:	f7f1 fe5f 	bl	80002d8 <__aeabi_dsub>
 800e61a:	4602      	mov	r2, r0
 800e61c:	460b      	mov	r3, r1
 800e61e:	4614      	mov	r4, r2
 800e620:	461d      	mov	r5, r3
 800e622:	f7fd fd7a 	bl	800c11a <MOT_getAcc3>
 800e626:	eeb0 7a40 	vmov.f32	s14, s0
 800e62a:	4bb7      	ldr	r3, [pc, #732]	@ (800e908 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x388>)
 800e62c:	edd3 7a00 	vldr	s15, [r3]
 800e630:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e634:	4bb3      	ldr	r3, [pc, #716]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e636:	edd3 7a01 	vldr	s15, [r3, #4]
 800e63a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e63e:	ee16 0a90 	vmov	r0, s13
 800e642:	f7f1 ffa9 	bl	8000598 <__aeabi_f2d>
 800e646:	4602      	mov	r2, r0
 800e648:	460b      	mov	r3, r1
 800e64a:	4620      	mov	r0, r4
 800e64c:	4629      	mov	r1, r5
 800e64e:	f7f1 fe43 	bl	80002d8 <__aeabi_dsub>
 800e652:	4602      	mov	r2, r0
 800e654:	460b      	mov	r3, r1
 800e656:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e65a:	f7f1 fff5 	bl	8000648 <__aeabi_dmul>
 800e65e:	4602      	mov	r2, r0
 800e660:	460b      	mov	r3, r1
 800e662:	4614      	mov	r4, r2
 800e664:	461d      	mov	r5, r3
								/((MOT_getAcc3()/st_Info.f_mot_jerk)*(MOT_getAcc3()/st_Info.f_mot_jerk)));
 800e666:	f7fd fd58 	bl	800c11a <MOT_getAcc3>
 800e66a:	eeb0 7a40 	vmov.f32	s14, s0
 800e66e:	4ba5      	ldr	r3, [pc, #660]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e670:	edd3 7a01 	vldr	s15, [r3, #4]
 800e674:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800e678:	f7fd fd4f 	bl	800c11a <MOT_getAcc3>
 800e67c:	eef0 6a40 	vmov.f32	s13, s0
 800e680:	4ba0      	ldr	r3, [pc, #640]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e682:	ed93 7a01 	vldr	s14, [r3, #4]
 800e686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e68a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800e68e:	ee17 0a90 	vmov	r0, s15
 800e692:	f7f1 ff81 	bl	8000598 <__aeabi_f2d>
 800e696:	4602      	mov	r2, r0
 800e698:	460b      	mov	r3, r1
	st_Info.f_mot_trgtAcc3		= sqrt(6.0*st_Info.f_mot_jerk*(( st_Info.f_mot_dist - MOT_MOVE_ST_MIN ) - f_MotNowSpeed*MOT_getAcc3()/st_Info.f_mot_jerk)
 800e69a:	4620      	mov	r0, r4
 800e69c:	4629      	mov	r1, r5
 800e69e:	f7f2 f8fd 	bl	800089c <__aeabi_ddiv>
 800e6a2:	4602      	mov	r2, r0
 800e6a4:	460b      	mov	r3, r1
 800e6a6:	ec43 2b17 	vmov	d7, r2, r3
 800e6aa:	eeb0 0a47 	vmov.f32	s0, s14
 800e6ae:	eef0 0a67 	vmov.f32	s1, s15
 800e6b2:	f00d fa7f 	bl	801bbb4 <sqrt>
 800e6b6:	ec53 2b10 	vmov	r2, r3, d0
 800e6ba:	4610      	mov	r0, r2
 800e6bc:	4619      	mov	r1, r3
 800e6be:	f7f2 fabb 	bl	8000c38 <__aeabi_d2f>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	4a8f      	ldr	r2, [pc, #572]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e6c6:	60d3      	str	r3, [r2, #12]

	/* 距離 */
	st_Info.f_mot_l1		= 0;																// 第1移動距離[m]
 800e6c8:	4b8e      	ldr	r3, [pc, #568]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e6ca:	f04f 0200 	mov.w	r2, #0
 800e6ce:	635a      	str	r2, [r3, #52]	@ 0x34

	f_accTime					= st_Info.f_mot_trgtAcc3/st_Info.f_mot_jerk;
 800e6d0:	4b8c      	ldr	r3, [pc, #560]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e6d2:	edd3 6a03 	vldr	s13, [r3, #12]
 800e6d6:	4b8b      	ldr	r3, [pc, #556]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e6d8:	ed93 7a01 	vldr	s14, [r3, #4]
 800e6dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6e0:	edc7 7a08 	vstr	s15, [r7, #32]

	st_Info.f_mot_decjerk_v		= 1.0/2.0*st_Info.f_mot_jerk*f_accTime*f_accTime;//加速度到達時の速度
 800e6e4:	4b87      	ldr	r3, [pc, #540]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7f1 ff55 	bl	8000598 <__aeabi_f2d>
 800e6ee:	f04f 0200 	mov.w	r2, #0
 800e6f2:	4b87      	ldr	r3, [pc, #540]	@ (800e910 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x390>)
 800e6f4:	f7f1 ffa8 	bl	8000648 <__aeabi_dmul>
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	4614      	mov	r4, r2
 800e6fe:	461d      	mov	r5, r3
 800e700:	6a38      	ldr	r0, [r7, #32]
 800e702:	f7f1 ff49 	bl	8000598 <__aeabi_f2d>
 800e706:	4602      	mov	r2, r0
 800e708:	460b      	mov	r3, r1
 800e70a:	4620      	mov	r0, r4
 800e70c:	4629      	mov	r1, r5
 800e70e:	f7f1 ff9b 	bl	8000648 <__aeabi_dmul>
 800e712:	4602      	mov	r2, r0
 800e714:	460b      	mov	r3, r1
 800e716:	4614      	mov	r4, r2
 800e718:	461d      	mov	r5, r3
 800e71a:	6a38      	ldr	r0, [r7, #32]
 800e71c:	f7f1 ff3c 	bl	8000598 <__aeabi_f2d>
 800e720:	4602      	mov	r2, r0
 800e722:	460b      	mov	r3, r1
 800e724:	4620      	mov	r0, r4
 800e726:	4629      	mov	r1, r5
 800e728:	f7f1 ff8e 	bl	8000648 <__aeabi_dmul>
 800e72c:	4602      	mov	r2, r0
 800e72e:	460b      	mov	r3, r1
 800e730:	4610      	mov	r0, r2
 800e732:	4619      	mov	r1, r3
 800e734:	f7f2 fa80 	bl	8000c38 <__aeabi_d2f>
 800e738:	4603      	mov	r3, r0
 800e73a:	4a72      	ldr	r2, [pc, #456]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e73c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if((f_MotNowSpeed- f_fin)!=0){
 800e73e:	4b72      	ldr	r3, [pc, #456]	@ (800e908 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x388>)
 800e740:	ed93 7a00 	vldr	s14, [r3]
 800e744:	edd7 7a06 	vldr	s15, [r7, #24]
 800e748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e74c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e754:	f000 8131 	beq.w	800e9ba <MOT_setData_MOT_CONST_DEC_CUSTOM+0x43a>
		st_Info.f_mot_l3_decjerk    = 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;
 800e758:	4b6a      	ldr	r3, [pc, #424]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7f1 ff1b 	bl	8000598 <__aeabi_f2d>
 800e762:	a365      	add	r3, pc, #404	@ (adr r3, 800e8f8 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x378>)
 800e764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e768:	f7f1 ff6e 	bl	8000648 <__aeabi_dmul>
 800e76c:	4602      	mov	r2, r0
 800e76e:	460b      	mov	r3, r1
 800e770:	60ba      	str	r2, [r7, #8]
 800e772:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800e776:	60fb      	str	r3, [r7, #12]
 800e778:	6a38      	ldr	r0, [r7, #32]
 800e77a:	f7f1 ff0d 	bl	8000598 <__aeabi_f2d>
 800e77e:	4602      	mov	r2, r0
 800e780:	460b      	mov	r3, r1
 800e782:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e786:	f7f1 ff5f 	bl	8000648 <__aeabi_dmul>
 800e78a:	4602      	mov	r2, r0
 800e78c:	460b      	mov	r3, r1
 800e78e:	4614      	mov	r4, r2
 800e790:	461d      	mov	r5, r3
 800e792:	6a38      	ldr	r0, [r7, #32]
 800e794:	f7f1 ff00 	bl	8000598 <__aeabi_f2d>
 800e798:	4602      	mov	r2, r0
 800e79a:	460b      	mov	r3, r1
 800e79c:	4620      	mov	r0, r4
 800e79e:	4629      	mov	r1, r5
 800e7a0:	f7f1 ff52 	bl	8000648 <__aeabi_dmul>
 800e7a4:	4602      	mov	r2, r0
 800e7a6:	460b      	mov	r3, r1
 800e7a8:	4614      	mov	r4, r2
 800e7aa:	461d      	mov	r5, r3
 800e7ac:	6a38      	ldr	r0, [r7, #32]
 800e7ae:	f7f1 fef3 	bl	8000598 <__aeabi_f2d>
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	f7f1 ff45 	bl	8000648 <__aeabi_dmul>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	4614      	mov	r4, r2
 800e7c4:	461d      	mov	r5, r3
 800e7c6:	4b50      	ldr	r3, [pc, #320]	@ (800e908 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x388>)
 800e7c8:	ed93 7a00 	vldr	s14, [r3]
 800e7cc:	edd7 7a08 	vldr	s15, [r7, #32]
 800e7d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7d4:	ee17 0a90 	vmov	r0, s15
 800e7d8:	f7f1 fede 	bl	8000598 <__aeabi_f2d>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	460b      	mov	r3, r1
 800e7e0:	4620      	mov	r0, r4
 800e7e2:	4629      	mov	r1, r5
 800e7e4:	f7f1 fd7a 	bl	80002dc <__adddf3>
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	460b      	mov	r3, r1
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	f7f2 fa22 	bl	8000c38 <__aeabi_d2f>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	4a43      	ldr	r2, [pc, #268]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e7f8:	6493      	str	r3, [r2, #72]	@ 0x48
		st_Info.f_mot_l3_accjerk    = 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + (f_fin+st_Info.f_mot_decjerk_v)*f_accTime + 1.0/2.0*st_Info.f_mot_trgtAcc3*(-1.0)*f_accTime*f_accTime;//減速は加速度同様にする前提処理
 800e7fa:	4b42      	ldr	r3, [pc, #264]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7f1 feca 	bl	8000598 <__aeabi_f2d>
 800e804:	a33c      	add	r3, pc, #240	@ (adr r3, 800e8f8 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x378>)
 800e806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80a:	f7f1 ff1d 	bl	8000648 <__aeabi_dmul>
 800e80e:	4602      	mov	r2, r0
 800e810:	460b      	mov	r3, r1
 800e812:	4614      	mov	r4, r2
 800e814:	461d      	mov	r5, r3
 800e816:	6a38      	ldr	r0, [r7, #32]
 800e818:	f7f1 febe 	bl	8000598 <__aeabi_f2d>
 800e81c:	4602      	mov	r2, r0
 800e81e:	460b      	mov	r3, r1
 800e820:	4620      	mov	r0, r4
 800e822:	4629      	mov	r1, r5
 800e824:	f7f1 ff10 	bl	8000648 <__aeabi_dmul>
 800e828:	4602      	mov	r2, r0
 800e82a:	460b      	mov	r3, r1
 800e82c:	4614      	mov	r4, r2
 800e82e:	461d      	mov	r5, r3
 800e830:	6a38      	ldr	r0, [r7, #32]
 800e832:	f7f1 feb1 	bl	8000598 <__aeabi_f2d>
 800e836:	4602      	mov	r2, r0
 800e838:	460b      	mov	r3, r1
 800e83a:	4620      	mov	r0, r4
 800e83c:	4629      	mov	r1, r5
 800e83e:	f7f1 ff03 	bl	8000648 <__aeabi_dmul>
 800e842:	4602      	mov	r2, r0
 800e844:	460b      	mov	r3, r1
 800e846:	4614      	mov	r4, r2
 800e848:	461d      	mov	r5, r3
 800e84a:	6a38      	ldr	r0, [r7, #32]
 800e84c:	f7f1 fea4 	bl	8000598 <__aeabi_f2d>
 800e850:	4602      	mov	r2, r0
 800e852:	460b      	mov	r3, r1
 800e854:	4620      	mov	r0, r4
 800e856:	4629      	mov	r1, r5
 800e858:	f7f1 fef6 	bl	8000648 <__aeabi_dmul>
 800e85c:	4602      	mov	r2, r0
 800e85e:	460b      	mov	r3, r1
 800e860:	4614      	mov	r4, r2
 800e862:	461d      	mov	r5, r3
 800e864:	4b27      	ldr	r3, [pc, #156]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e866:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800e86a:	edd7 7a06 	vldr	s15, [r7, #24]
 800e86e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e872:	edd7 7a08 	vldr	s15, [r7, #32]
 800e876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e87a:	ee17 0a90 	vmov	r0, s15
 800e87e:	f7f1 fe8b 	bl	8000598 <__aeabi_f2d>
 800e882:	4602      	mov	r2, r0
 800e884:	460b      	mov	r3, r1
 800e886:	4620      	mov	r0, r4
 800e888:	4629      	mov	r1, r5
 800e88a:	f7f1 fd27 	bl	80002dc <__adddf3>
 800e88e:	4602      	mov	r2, r0
 800e890:	460b      	mov	r3, r1
 800e892:	4614      	mov	r4, r2
 800e894:	461d      	mov	r5, r3
 800e896:	4b1b      	ldr	r3, [pc, #108]	@ (800e904 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x384>)
 800e898:	68db      	ldr	r3, [r3, #12]
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7f1 fe7c 	bl	8000598 <__aeabi_f2d>
 800e8a0:	f04f 0200 	mov.w	r2, #0
 800e8a4:	4b1a      	ldr	r3, [pc, #104]	@ (800e910 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x390>)
 800e8a6:	f7f1 fecf 	bl	8000648 <__aeabi_dmul>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	4692      	mov	sl, r2
 800e8b0:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 800e8b4:	6a38      	ldr	r0, [r7, #32]
 800e8b6:	f7f1 fe6f 	bl	8000598 <__aeabi_f2d>
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	460b      	mov	r3, r1
 800e8be:	4650      	mov	r0, sl
 800e8c0:	4659      	mov	r1, fp
 800e8c2:	f7f1 fec1 	bl	8000648 <__aeabi_dmul>
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	4692      	mov	sl, r2
 800e8cc:	469b      	mov	fp, r3
 800e8ce:	6a38      	ldr	r0, [r7, #32]
 800e8d0:	f7f1 fe62 	bl	8000598 <__aeabi_f2d>
 800e8d4:	4602      	mov	r2, r0
 800e8d6:	460b      	mov	r3, r1
 800e8d8:	4650      	mov	r0, sl
 800e8da:	4659      	mov	r1, fp
 800e8dc:	f7f1 feb4 	bl	8000648 <__aeabi_dmul>
 800e8e0:	4602      	mov	r2, r0
 800e8e2:	460b      	mov	r3, r1
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	4629      	mov	r1, r5
 800e8e8:	f7f1 fcf8 	bl	80002dc <__adddf3>
 800e8ec:	e012      	b.n	800e914 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x394>
 800e8ee:	bf00      	nop
 800e8f0:	47ae147b 	.word	0x47ae147b
 800e8f4:	3f847ae1 	.word	0x3f847ae1
 800e8f8:	55555555 	.word	0x55555555
 800e8fc:	3fc55555 	.word	0x3fc55555
 800e900:	3e0255b0 	.word	0x3e0255b0
 800e904:	20017b2c 	.word	0x20017b2c
 800e908:	20017bcc 	.word	0x20017bcc
 800e90c:	40180000 	.word	0x40180000
 800e910:	3fe00000 	.word	0x3fe00000
 800e914:	4602      	mov	r2, r0
 800e916:	460b      	mov	r3, r1
 800e918:	4610      	mov	r0, r2
 800e91a:	4619      	mov	r1, r3
 800e91c:	f7f2 f98c 	bl	8000c38 <__aeabi_d2f>
 800e920:	4603      	mov	r3, r0
 800e922:	4a3a      	ldr	r2, [pc, #232]	@ (800ea0c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e924:	6513      	str	r3, [r2, #80]	@ 0x50
		st_Info.f_mot_l3_decconst	= ((f_fin-st_Info.f_mot_decjerk_v)*(f_fin-st_Info.f_mot_decjerk_v)
 800e926:	4b39      	ldr	r3, [pc, #228]	@ (800ea0c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e928:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800e92c:	ed97 7a06 	vldr	s14, [r7, #24]
 800e930:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e934:	4b35      	ldr	r3, [pc, #212]	@ (800ea0c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e936:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800e93a:	edd7 6a06 	vldr	s13, [r7, #24]
 800e93e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e942:	ee27 7a27 	vmul.f32	s14, s14, s15
										-(f_MotNowSpeed+st_Info.f_mot_decjerk_v)*(f_MotNowSpeed+st_Info.f_mot_decjerk_v))
 800e946:	4b31      	ldr	r3, [pc, #196]	@ (800ea0c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e948:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800e94c:	4b30      	ldr	r3, [pc, #192]	@ (800ea10 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x490>)
 800e94e:	edd3 7a00 	vldr	s15, [r3]
 800e952:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e956:	4b2d      	ldr	r3, [pc, #180]	@ (800ea0c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e958:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 800e95c:	4b2c      	ldr	r3, [pc, #176]	@ (800ea10 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x490>)
 800e95e:	edd3 7a00 	vldr	s15, [r3]
 800e962:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e96a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e96e:	ee17 0a90 	vmov	r0, s15
 800e972:	f7f1 fe11 	bl	8000598 <__aeabi_f2d>
 800e976:	4604      	mov	r4, r0
 800e978:	460d      	mov	r5, r1
										/( st_Info.f_mot_trgtAcc3 * (-1.0) * 2.0 );
 800e97a:	4b24      	ldr	r3, [pc, #144]	@ (800ea0c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	4618      	mov	r0, r3
 800e980:	f7f1 fe0a 	bl	8000598 <__aeabi_f2d>
 800e984:	4602      	mov	r2, r0
 800e986:	460b      	mov	r3, r1
 800e988:	4690      	mov	r8, r2
 800e98a:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800e98e:	4642      	mov	r2, r8
 800e990:	464b      	mov	r3, r9
 800e992:	4640      	mov	r0, r8
 800e994:	4649      	mov	r1, r9
 800e996:	f7f1 fca1 	bl	80002dc <__adddf3>
 800e99a:	4602      	mov	r2, r0
 800e99c:	460b      	mov	r3, r1
 800e99e:	4620      	mov	r0, r4
 800e9a0:	4629      	mov	r1, r5
 800e9a2:	f7f1 ff7b 	bl	800089c <__aeabi_ddiv>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	4610      	mov	r0, r2
 800e9ac:	4619      	mov	r1, r3
 800e9ae:	f7f2 f943 	bl	8000c38 <__aeabi_d2f>
 800e9b2:	4603      	mov	r3, r0
		st_Info.f_mot_l3_decconst	= ((f_fin-st_Info.f_mot_decjerk_v)*(f_fin-st_Info.f_mot_decjerk_v)
 800e9b4:	4a15      	ldr	r2, [pc, #84]	@ (800ea0c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e9b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e9b8:	e00b      	b.n	800e9d2 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x452>
	}else{
		st_Info.f_mot_l3_decjerk    = 0.0;
 800e9ba:	4b14      	ldr	r3, [pc, #80]	@ (800ea0c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e9bc:	f04f 0200 	mov.w	r2, #0
 800e9c0:	649a      	str	r2, [r3, #72]	@ 0x48
		st_Info.f_mot_l3_accjerk    = 0.0;//減速は加速度同様にする前提処理
 800e9c2:	4b12      	ldr	r3, [pc, #72]	@ (800ea0c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e9c4:	f04f 0200 	mov.w	r2, #0
 800e9c8:	651a      	str	r2, [r3, #80]	@ 0x50
		st_Info.f_mot_l3_decconst	= 0.0;
 800e9ca:	4b10      	ldr	r3, [pc, #64]	@ (800ea0c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e9cc:	f04f 0200 	mov.w	r2, #0
 800e9d0:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
//	st_Info.f_mot_l1			= st_Info.f_mot_l3_accjerk*2.0 + st_Info.f_mot_l3_accconst;


	st_Info.f_mot_l1_2		= st_Info.f_mot_dist - (st_Info.f_mot_l3_decjerk + st_Info.f_mot_l3_accjerk + st_Info.f_mot_l3_decconst);			// 第1-2移動距離[m]
 800e9d2:	4b0e      	ldr	r3, [pc, #56]	@ (800ea0c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e9d4:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800e9d8:	4b0c      	ldr	r3, [pc, #48]	@ (800ea0c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e9da:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 800e9de:	4b0b      	ldr	r3, [pc, #44]	@ (800ea0c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e9e0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800e9e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e9e8:	4b08      	ldr	r3, [pc, #32]	@ (800ea0c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e9ea:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800e9ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e9f6:	4b05      	ldr	r3, [pc, #20]	@ (800ea0c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x48c>)
 800e9f8:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
}
 800e9fc:	bf00      	nop
 800e9fe:	3728      	adds	r7, #40	@ 0x28
 800ea00:	46bd      	mov	sp, r7
 800ea02:	ecbd 8b02 	vpop	{d8}
 800ea06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ea0a:	bf00      	nop
 800ea0c:	20017b2c 	.word	0x20017b2c
 800ea10:	20017bcc 	.word	0x20017bcc
 800ea14:	00000000 	.word	0x00000000

0800ea18 <MOT_getStType>:

enMOT_ST_TYPE MOT_getStType( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800ea18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ea1c:	b09e      	sub	sp, #120	@ 0x78
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
 800ea24:	edc7 0a10 	vstr	s1, [r7, #64]	@ 0x40
 800ea28:	4603      	mov	r3, r0
 800ea2a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	float f_l_acc_accConst;
	float f_l_acc_decJerk;
	float f_v_accJerk;

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800ea2e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d108      	bne.n	800ea48 <MOT_getStType+0x30>
		f_total	= f_num * BLOCK;
 800ea36:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800ea3a:	ed9f 7acf 	vldr	s14, [pc, #828]	@ 800ed78 <MOT_getStType+0x360>
 800ea3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea42:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
 800ea46:	e007      	b.n	800ea58 <MOT_getStType+0x40>
	}
	else{									// 斜めの直進
		f_total	= f_num * BLOCK_SKEW;
 800ea48:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800ea4c:	ed9f 7acb 	vldr	s14, [pc, #812]	@ 800ed7c <MOT_getStType+0x364>
 800ea50:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea54:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	}

	f_Jerk		= MOT_getJerk();
 800ea58:	f7fd fb6b 	bl	800c132 <MOT_getJerk>
 800ea5c:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
	f_acc1		= MOT_getAcc1();
 800ea60:	f7fd fb4f 	bl	800c102 <MOT_getAcc1>
 800ea64:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
	f_acc3		= MOT_getAcc3();
 800ea68:	f7fd fb57 	bl	800c11a <MOT_getAcc3>
 800ea6c:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
//	f_acc1		= MOT_getAcc1();				// 加速度1[mm/s^2]
//	f_t1		= f_v1Div / f_acc1;

//	f_l1 = ( f_MotNowSpeed + f_fin ) * 0.5f * f_t1;

	f_accTime			= f_acc1/f_Jerk;
 800ea70:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800ea74:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800ea78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea7c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	f_v_accJerk			= 1.0/2.0*f_Jerk*f_accTime*f_accTime;
 800ea80:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800ea82:	f7f1 fd89 	bl	8000598 <__aeabi_f2d>
 800ea86:	f04f 0200 	mov.w	r2, #0
 800ea8a:	4bbd      	ldr	r3, [pc, #756]	@ (800ed80 <MOT_getStType+0x368>)
 800ea8c:	f7f1 fddc 	bl	8000648 <__aeabi_dmul>
 800ea90:	4602      	mov	r2, r0
 800ea92:	460b      	mov	r3, r1
 800ea94:	4614      	mov	r4, r2
 800ea96:	461d      	mov	r5, r3
 800ea98:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ea9a:	f7f1 fd7d 	bl	8000598 <__aeabi_f2d>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	4629      	mov	r1, r5
 800eaa6:	f7f1 fdcf 	bl	8000648 <__aeabi_dmul>
 800eaaa:	4602      	mov	r2, r0
 800eaac:	460b      	mov	r3, r1
 800eaae:	4614      	mov	r4, r2
 800eab0:	461d      	mov	r5, r3
 800eab2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800eab4:	f7f1 fd70 	bl	8000598 <__aeabi_f2d>
 800eab8:	4602      	mov	r2, r0
 800eaba:	460b      	mov	r3, r1
 800eabc:	4620      	mov	r0, r4
 800eabe:	4629      	mov	r1, r5
 800eac0:	f7f1 fdc2 	bl	8000648 <__aeabi_dmul>
 800eac4:	4602      	mov	r2, r0
 800eac6:	460b      	mov	r3, r1
 800eac8:	4610      	mov	r0, r2
 800eaca:	4619      	mov	r1, r3
 800eacc:	f7f2 f8b4 	bl	8000c38 <__aeabi_d2f>
 800ead0:	4603      	mov	r3, r0
 800ead2:	663b      	str	r3, [r7, #96]	@ 0x60
	f_l_acc_accJerk		= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;
 800ead4:	4bab      	ldr	r3, [pc, #684]	@ (800ed84 <MOT_getStType+0x36c>)
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	4618      	mov	r0, r3
 800eada:	f7f1 fd5d 	bl	8000598 <__aeabi_f2d>
 800eade:	a3a0      	add	r3, pc, #640	@ (adr r3, 800ed60 <MOT_getStType+0x348>)
 800eae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae4:	f7f1 fdb0 	bl	8000648 <__aeabi_dmul>
 800eae8:	4602      	mov	r2, r0
 800eaea:	460b      	mov	r3, r1
 800eaec:	4614      	mov	r4, r2
 800eaee:	461d      	mov	r5, r3
 800eaf0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800eaf2:	f7f1 fd51 	bl	8000598 <__aeabi_f2d>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	460b      	mov	r3, r1
 800eafa:	4620      	mov	r0, r4
 800eafc:	4629      	mov	r1, r5
 800eafe:	f7f1 fda3 	bl	8000648 <__aeabi_dmul>
 800eb02:	4602      	mov	r2, r0
 800eb04:	460b      	mov	r3, r1
 800eb06:	4614      	mov	r4, r2
 800eb08:	461d      	mov	r5, r3
 800eb0a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800eb0c:	f7f1 fd44 	bl	8000598 <__aeabi_f2d>
 800eb10:	4602      	mov	r2, r0
 800eb12:	460b      	mov	r3, r1
 800eb14:	4620      	mov	r0, r4
 800eb16:	4629      	mov	r1, r5
 800eb18:	f7f1 fd96 	bl	8000648 <__aeabi_dmul>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	460b      	mov	r3, r1
 800eb20:	4614      	mov	r4, r2
 800eb22:	461d      	mov	r5, r3
 800eb24:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800eb26:	f7f1 fd37 	bl	8000598 <__aeabi_f2d>
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	4620      	mov	r0, r4
 800eb30:	4629      	mov	r1, r5
 800eb32:	f7f1 fd89 	bl	8000648 <__aeabi_dmul>
 800eb36:	4602      	mov	r2, r0
 800eb38:	460b      	mov	r3, r1
 800eb3a:	4614      	mov	r4, r2
 800eb3c:	461d      	mov	r5, r3
 800eb3e:	4b92      	ldr	r3, [pc, #584]	@ (800ed88 <MOT_getStType+0x370>)
 800eb40:	ed93 7a00 	vldr	s14, [r3]
 800eb44:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800eb48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb4c:	ee17 0a90 	vmov	r0, s15
 800eb50:	f7f1 fd22 	bl	8000598 <__aeabi_f2d>
 800eb54:	4602      	mov	r2, r0
 800eb56:	460b      	mov	r3, r1
 800eb58:	4620      	mov	r0, r4
 800eb5a:	4629      	mov	r1, r5
 800eb5c:	f7f1 fbbe 	bl	80002dc <__adddf3>
 800eb60:	4602      	mov	r2, r0
 800eb62:	460b      	mov	r3, r1
 800eb64:	4610      	mov	r0, r2
 800eb66:	4619      	mov	r1, r3
 800eb68:	f7f2 f866 	bl	8000c38 <__aeabi_d2f>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	f_l_acc_decJerk		= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + (f_fin-f_v_accJerk)*f_accTime + 1.0/2.0*f_acc1*f_accTime*f_accTime;
 800eb70:	4b84      	ldr	r3, [pc, #528]	@ (800ed84 <MOT_getStType+0x36c>)
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7f1 fd0f 	bl	8000598 <__aeabi_f2d>
 800eb7a:	a379      	add	r3, pc, #484	@ (adr r3, 800ed60 <MOT_getStType+0x348>)
 800eb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb80:	f7f1 fd62 	bl	8000648 <__aeabi_dmul>
 800eb84:	4602      	mov	r2, r0
 800eb86:	460b      	mov	r3, r1
 800eb88:	4614      	mov	r4, r2
 800eb8a:	461d      	mov	r5, r3
 800eb8c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800eb8e:	f7f1 fd03 	bl	8000598 <__aeabi_f2d>
 800eb92:	4602      	mov	r2, r0
 800eb94:	460b      	mov	r3, r1
 800eb96:	4620      	mov	r0, r4
 800eb98:	4629      	mov	r1, r5
 800eb9a:	f7f1 fd55 	bl	8000648 <__aeabi_dmul>
 800eb9e:	4602      	mov	r2, r0
 800eba0:	460b      	mov	r3, r1
 800eba2:	4614      	mov	r4, r2
 800eba4:	461d      	mov	r5, r3
 800eba6:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800eba8:	f7f1 fcf6 	bl	8000598 <__aeabi_f2d>
 800ebac:	4602      	mov	r2, r0
 800ebae:	460b      	mov	r3, r1
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	4629      	mov	r1, r5
 800ebb4:	f7f1 fd48 	bl	8000648 <__aeabi_dmul>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	460b      	mov	r3, r1
 800ebbc:	4614      	mov	r4, r2
 800ebbe:	461d      	mov	r5, r3
 800ebc0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ebc2:	f7f1 fce9 	bl	8000598 <__aeabi_f2d>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	460b      	mov	r3, r1
 800ebca:	4620      	mov	r0, r4
 800ebcc:	4629      	mov	r1, r5
 800ebce:	f7f1 fd3b 	bl	8000648 <__aeabi_dmul>
 800ebd2:	4602      	mov	r2, r0
 800ebd4:	460b      	mov	r3, r1
 800ebd6:	4614      	mov	r4, r2
 800ebd8:	461d      	mov	r5, r3
 800ebda:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800ebde:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800ebe2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ebe6:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800ebea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebee:	ee17 0a90 	vmov	r0, s15
 800ebf2:	f7f1 fcd1 	bl	8000598 <__aeabi_f2d>
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	4629      	mov	r1, r5
 800ebfe:	f7f1 fb6d 	bl	80002dc <__adddf3>
 800ec02:	4602      	mov	r2, r0
 800ec04:	460b      	mov	r3, r1
 800ec06:	4690      	mov	r8, r2
 800ec08:	4699      	mov	r9, r3
 800ec0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ec0c:	f7f1 fcc4 	bl	8000598 <__aeabi_f2d>
 800ec10:	f04f 0200 	mov.w	r2, #0
 800ec14:	4b5a      	ldr	r3, [pc, #360]	@ (800ed80 <MOT_getStType+0x368>)
 800ec16:	f7f1 fd17 	bl	8000648 <__aeabi_dmul>
 800ec1a:	4602      	mov	r2, r0
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	4614      	mov	r4, r2
 800ec20:	461d      	mov	r5, r3
 800ec22:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ec24:	f7f1 fcb8 	bl	8000598 <__aeabi_f2d>
 800ec28:	4602      	mov	r2, r0
 800ec2a:	460b      	mov	r3, r1
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	4629      	mov	r1, r5
 800ec30:	f7f1 fd0a 	bl	8000648 <__aeabi_dmul>
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	4614      	mov	r4, r2
 800ec3a:	461d      	mov	r5, r3
 800ec3c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ec3e:	f7f1 fcab 	bl	8000598 <__aeabi_f2d>
 800ec42:	4602      	mov	r2, r0
 800ec44:	460b      	mov	r3, r1
 800ec46:	4620      	mov	r0, r4
 800ec48:	4629      	mov	r1, r5
 800ec4a:	f7f1 fcfd 	bl	8000648 <__aeabi_dmul>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	460b      	mov	r3, r1
 800ec52:	4640      	mov	r0, r8
 800ec54:	4649      	mov	r1, r9
 800ec56:	f7f1 fb41 	bl	80002dc <__adddf3>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	4610      	mov	r0, r2
 800ec60:	4619      	mov	r1, r3
 800ec62:	f7f1 ffe9 	bl	8000c38 <__aeabi_d2f>
 800ec66:	4603      	mov	r3, r0
 800ec68:	65bb      	str	r3, [r7, #88]	@ 0x58
	f_l_acc_accConst	= ((f_fin-f_v_accJerk)*(f_fin-f_v_accJerk)
 800ec6a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800ec6e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800ec72:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ec76:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800ec7a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800ec7e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ec82:	ee27 7a27 	vmul.f32	s14, s14, s15
							-(f_MotNowSpeed+f_v_accJerk)*(f_MotNowSpeed+f_v_accJerk))
 800ec86:	4b40      	ldr	r3, [pc, #256]	@ (800ed88 <MOT_getStType+0x370>)
 800ec88:	edd3 6a00 	vldr	s13, [r3]
 800ec8c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800ec90:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ec94:	4b3c      	ldr	r3, [pc, #240]	@ (800ed88 <MOT_getStType+0x370>)
 800ec96:	ed93 6a00 	vldr	s12, [r3]
 800ec9a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800ec9e:	ee76 7a27 	vadd.f32	s15, s12, s15
 800eca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ecaa:	ee17 0a90 	vmov	r0, s15
 800ecae:	f7f1 fc73 	bl	8000598 <__aeabi_f2d>
 800ecb2:	4604      	mov	r4, r0
 800ecb4:	460d      	mov	r5, r1
							/( f_acc1 * 2.0 );
 800ecb6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ecb8:	f7f1 fc6e 	bl	8000598 <__aeabi_f2d>
 800ecbc:	4602      	mov	r2, r0
 800ecbe:	460b      	mov	r3, r1
 800ecc0:	f7f1 fb0c 	bl	80002dc <__adddf3>
 800ecc4:	4602      	mov	r2, r0
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	4620      	mov	r0, r4
 800ecca:	4629      	mov	r1, r5
 800eccc:	f7f1 fde6 	bl	800089c <__aeabi_ddiv>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	460b      	mov	r3, r1
	f_l_acc_accConst	= ((f_fin-f_v_accJerk)*(f_fin-f_v_accJerk)
 800ecd4:	4610      	mov	r0, r2
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	f7f1 ffae 	bl	8000c38 <__aeabi_d2f>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	657b      	str	r3, [r7, #84]	@ 0x54
	f_l1	= f_l_acc_accJerk + f_l_acc_decJerk + f_l_acc_accConst;
 800ece0:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800ece4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800ece8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecec:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800ecf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecf4:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

//	printf("1, %f ,2, %f ,3, %f\n\r",f_l_acc_accJerk,f_l_acc_accConst,f_l_acc_decJerk);
//	printf("l, %f\r\n",f_l1);
	/*  加速＋等速動作 */
	if( f_total <= ( f_l1 + MOT_MOVE_ST_THRESHOLD ) ){
 800ecf8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800ecfa:	f7f1 fc4d 	bl	8000598 <__aeabi_f2d>
 800ecfe:	4604      	mov	r4, r0
 800ed00:	460d      	mov	r5, r1
 800ed02:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ed04:	f7f1 fc48 	bl	8000598 <__aeabi_f2d>
 800ed08:	a317      	add	r3, pc, #92	@ (adr r3, 800ed68 <MOT_getStType+0x350>)
 800ed0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0e:	f7f1 fae5 	bl	80002dc <__adddf3>
 800ed12:	4602      	mov	r2, r0
 800ed14:	460b      	mov	r3, r1
 800ed16:	4620      	mov	r0, r4
 800ed18:	4629      	mov	r1, r5
 800ed1a:	f7f1 ff11 	bl	8000b40 <__aeabi_dcmple>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d033      	beq.n	800ed8c <MOT_getStType+0x374>

		/* 加速が最終速度に対して完了しない */
		if( f_total < ( f_l1 + MOT_MOVE_ST_MIN ) ){
 800ed24:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800ed26:	f7f1 fc37 	bl	8000598 <__aeabi_f2d>
 800ed2a:	4604      	mov	r4, r0
 800ed2c:	460d      	mov	r5, r1
 800ed2e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ed30:	f7f1 fc32 	bl	8000598 <__aeabi_f2d>
 800ed34:	a30e      	add	r3, pc, #56	@ (adr r3, 800ed70 <MOT_getStType+0x358>)
 800ed36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3a:	f7f1 facf 	bl	80002dc <__adddf3>
 800ed3e:	4602      	mov	r2, r0
 800ed40:	460b      	mov	r3, r1
 800ed42:	4620      	mov	r0, r4
 800ed44:	4629      	mov	r1, r5
 800ed46:	f7f1 fef1 	bl	8000b2c <__aeabi_dcmplt>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d002      	beq.n	800ed56 <MOT_getStType+0x33e>
//			printf("パターン4\n\r");
			return MOT_ACC_CONST_CUSTOM;		// パターン4（強制的に加速度を変更する）
 800ed50:	2304      	movs	r3, #4
 800ed52:	f000 bc70 	b.w	800f636 <MOT_getStType+0xc1e>
		}
		else{
//			printf("パターン3\n\r");
			return MOT_ACC_CONST;				// パターン3（加速＋等速）
 800ed56:	2303      	movs	r3, #3
 800ed58:	f000 bc6d 	b.w	800f636 <MOT_getStType+0xc1e>
 800ed5c:	f3af 8000 	nop.w
 800ed60:	55555555 	.word	0x55555555
 800ed64:	3fc55555 	.word	0x3fc55555
 800ed68:	76c8b439 	.word	0x76c8b439
 800ed6c:	3f8a9fbe 	.word	0x3f8a9fbe
 800ed70:	47ae147b 	.word	0x47ae147b
 800ed74:	3f847ae1 	.word	0x3f847ae1
 800ed78:	3db851ec 	.word	0x3db851ec
 800ed7c:	3e0255b0 	.word	0x3e0255b0
 800ed80:	3fe00000 	.word	0x3fe00000
 800ed84:	20017b2c 	.word	0x20017b2c
 800ed88:	20017bcc 	.word	0x20017bcc
//	f_acc3		= MOT_getAcc3();				// 加速度3[mm/s^2]
//	f_t3		= f_v3Div / ( f_acc3 * -1.0 );

//	f_l3 = ( f_MotNowSpeed + f_fin ) * 0.5f * f_t3;

	f_accTime			= f_acc3/f_Jerk;
 800ed8c:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 800ed90:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800ed94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed98:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	f_v_accJerk			= 1.0/2.0*f_Jerk*f_accTime*f_accTime;
 800ed9c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800ed9e:	f7f1 fbfb 	bl	8000598 <__aeabi_f2d>
 800eda2:	f04f 0200 	mov.w	r2, #0
 800eda6:	4bbe      	ldr	r3, [pc, #760]	@ (800f0a0 <MOT_getStType+0x688>)
 800eda8:	f7f1 fc4e 	bl	8000648 <__aeabi_dmul>
 800edac:	4602      	mov	r2, r0
 800edae:	460b      	mov	r3, r1
 800edb0:	4614      	mov	r4, r2
 800edb2:	461d      	mov	r5, r3
 800edb4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800edb6:	f7f1 fbef 	bl	8000598 <__aeabi_f2d>
 800edba:	4602      	mov	r2, r0
 800edbc:	460b      	mov	r3, r1
 800edbe:	4620      	mov	r0, r4
 800edc0:	4629      	mov	r1, r5
 800edc2:	f7f1 fc41 	bl	8000648 <__aeabi_dmul>
 800edc6:	4602      	mov	r2, r0
 800edc8:	460b      	mov	r3, r1
 800edca:	4614      	mov	r4, r2
 800edcc:	461d      	mov	r5, r3
 800edce:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800edd0:	f7f1 fbe2 	bl	8000598 <__aeabi_f2d>
 800edd4:	4602      	mov	r2, r0
 800edd6:	460b      	mov	r3, r1
 800edd8:	4620      	mov	r0, r4
 800edda:	4629      	mov	r1, r5
 800eddc:	f7f1 fc34 	bl	8000648 <__aeabi_dmul>
 800ede0:	4602      	mov	r2, r0
 800ede2:	460b      	mov	r3, r1
 800ede4:	4610      	mov	r0, r2
 800ede6:	4619      	mov	r1, r3
 800ede8:	f7f1 ff26 	bl	8000c38 <__aeabi_d2f>
 800edec:	4603      	mov	r3, r0
 800edee:	663b      	str	r3, [r7, #96]	@ 0x60
	f_l_acc_decJerk		= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;
 800edf0:	4bac      	ldr	r3, [pc, #688]	@ (800f0a4 <MOT_getStType+0x68c>)
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7f1 fbcf 	bl	8000598 <__aeabi_f2d>
 800edfa:	a3a3      	add	r3, pc, #652	@ (adr r3, 800f088 <MOT_getStType+0x670>)
 800edfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee00:	f7f1 fc22 	bl	8000648 <__aeabi_dmul>
 800ee04:	4602      	mov	r2, r0
 800ee06:	460b      	mov	r3, r1
 800ee08:	4692      	mov	sl, r2
 800ee0a:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 800ee0e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ee10:	f7f1 fbc2 	bl	8000598 <__aeabi_f2d>
 800ee14:	4602      	mov	r2, r0
 800ee16:	460b      	mov	r3, r1
 800ee18:	4650      	mov	r0, sl
 800ee1a:	4659      	mov	r1, fp
 800ee1c:	f7f1 fc14 	bl	8000648 <__aeabi_dmul>
 800ee20:	4602      	mov	r2, r0
 800ee22:	460b      	mov	r3, r1
 800ee24:	4614      	mov	r4, r2
 800ee26:	461d      	mov	r5, r3
 800ee28:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ee2a:	f7f1 fbb5 	bl	8000598 <__aeabi_f2d>
 800ee2e:	4602      	mov	r2, r0
 800ee30:	460b      	mov	r3, r1
 800ee32:	4620      	mov	r0, r4
 800ee34:	4629      	mov	r1, r5
 800ee36:	f7f1 fc07 	bl	8000648 <__aeabi_dmul>
 800ee3a:	4602      	mov	r2, r0
 800ee3c:	460b      	mov	r3, r1
 800ee3e:	4614      	mov	r4, r2
 800ee40:	461d      	mov	r5, r3
 800ee42:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ee44:	f7f1 fba8 	bl	8000598 <__aeabi_f2d>
 800ee48:	4602      	mov	r2, r0
 800ee4a:	460b      	mov	r3, r1
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	4629      	mov	r1, r5
 800ee50:	f7f1 fbfa 	bl	8000648 <__aeabi_dmul>
 800ee54:	4602      	mov	r2, r0
 800ee56:	460b      	mov	r3, r1
 800ee58:	4614      	mov	r4, r2
 800ee5a:	461d      	mov	r5, r3
 800ee5c:	4b92      	ldr	r3, [pc, #584]	@ (800f0a8 <MOT_getStType+0x690>)
 800ee5e:	ed93 7a00 	vldr	s14, [r3]
 800ee62:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800ee66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee6a:	ee17 0a90 	vmov	r0, s15
 800ee6e:	f7f1 fb93 	bl	8000598 <__aeabi_f2d>
 800ee72:	4602      	mov	r2, r0
 800ee74:	460b      	mov	r3, r1
 800ee76:	4620      	mov	r0, r4
 800ee78:	4629      	mov	r1, r5
 800ee7a:	f7f1 fa2f 	bl	80002dc <__adddf3>
 800ee7e:	4602      	mov	r2, r0
 800ee80:	460b      	mov	r3, r1
 800ee82:	4610      	mov	r0, r2
 800ee84:	4619      	mov	r1, r3
 800ee86:	f7f1 fed7 	bl	8000c38 <__aeabi_d2f>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	65bb      	str	r3, [r7, #88]	@ 0x58
	f_l_acc_accJerk		= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + (f_fin+f_v_accJerk)*f_accTime+ 1.0/2.0*f_acc3*(-1.0)*f_accTime*f_accTime;
 800ee8e:	4b85      	ldr	r3, [pc, #532]	@ (800f0a4 <MOT_getStType+0x68c>)
 800ee90:	685b      	ldr	r3, [r3, #4]
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7f1 fb80 	bl	8000598 <__aeabi_f2d>
 800ee98:	a37b      	add	r3, pc, #492	@ (adr r3, 800f088 <MOT_getStType+0x670>)
 800ee9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9e:	f7f1 fbd3 	bl	8000648 <__aeabi_dmul>
 800eea2:	4602      	mov	r2, r0
 800eea4:	460b      	mov	r3, r1
 800eea6:	633a      	str	r2, [r7, #48]	@ 0x30
 800eea8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800eeac:	637b      	str	r3, [r7, #52]	@ 0x34
 800eeae:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800eeb0:	f7f1 fb72 	bl	8000598 <__aeabi_f2d>
 800eeb4:	4602      	mov	r2, r0
 800eeb6:	460b      	mov	r3, r1
 800eeb8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800eebc:	f7f1 fbc4 	bl	8000648 <__aeabi_dmul>
 800eec0:	4602      	mov	r2, r0
 800eec2:	460b      	mov	r3, r1
 800eec4:	4614      	mov	r4, r2
 800eec6:	461d      	mov	r5, r3
 800eec8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800eeca:	f7f1 fb65 	bl	8000598 <__aeabi_f2d>
 800eece:	4602      	mov	r2, r0
 800eed0:	460b      	mov	r3, r1
 800eed2:	4620      	mov	r0, r4
 800eed4:	4629      	mov	r1, r5
 800eed6:	f7f1 fbb7 	bl	8000648 <__aeabi_dmul>
 800eeda:	4602      	mov	r2, r0
 800eedc:	460b      	mov	r3, r1
 800eede:	4614      	mov	r4, r2
 800eee0:	461d      	mov	r5, r3
 800eee2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800eee4:	f7f1 fb58 	bl	8000598 <__aeabi_f2d>
 800eee8:	4602      	mov	r2, r0
 800eeea:	460b      	mov	r3, r1
 800eeec:	4620      	mov	r0, r4
 800eeee:	4629      	mov	r1, r5
 800eef0:	f7f1 fbaa 	bl	8000648 <__aeabi_dmul>
 800eef4:	4602      	mov	r2, r0
 800eef6:	460b      	mov	r3, r1
 800eef8:	4614      	mov	r4, r2
 800eefa:	461d      	mov	r5, r3
 800eefc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800ef00:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800ef04:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ef08:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800ef0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef10:	ee17 0a90 	vmov	r0, s15
 800ef14:	f7f1 fb40 	bl	8000598 <__aeabi_f2d>
 800ef18:	4602      	mov	r2, r0
 800ef1a:	460b      	mov	r3, r1
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	4629      	mov	r1, r5
 800ef20:	f7f1 f9dc 	bl	80002dc <__adddf3>
 800ef24:	4602      	mov	r2, r0
 800ef26:	460b      	mov	r3, r1
 800ef28:	4690      	mov	r8, r2
 800ef2a:	4699      	mov	r9, r3
 800ef2c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800ef2e:	f7f1 fb33 	bl	8000598 <__aeabi_f2d>
 800ef32:	f04f 0200 	mov.w	r2, #0
 800ef36:	4b5a      	ldr	r3, [pc, #360]	@ (800f0a0 <MOT_getStType+0x688>)
 800ef38:	f7f1 fb86 	bl	8000648 <__aeabi_dmul>
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	460b      	mov	r3, r1
 800ef40:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ef42:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800ef46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef48:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ef4a:	f7f1 fb25 	bl	8000598 <__aeabi_f2d>
 800ef4e:	4602      	mov	r2, r0
 800ef50:	460b      	mov	r3, r1
 800ef52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ef56:	f7f1 fb77 	bl	8000648 <__aeabi_dmul>
 800ef5a:	4602      	mov	r2, r0
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	4614      	mov	r4, r2
 800ef60:	461d      	mov	r5, r3
 800ef62:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ef64:	f7f1 fb18 	bl	8000598 <__aeabi_f2d>
 800ef68:	4602      	mov	r2, r0
 800ef6a:	460b      	mov	r3, r1
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	4629      	mov	r1, r5
 800ef70:	f7f1 fb6a 	bl	8000648 <__aeabi_dmul>
 800ef74:	4602      	mov	r2, r0
 800ef76:	460b      	mov	r3, r1
 800ef78:	4640      	mov	r0, r8
 800ef7a:	4649      	mov	r1, r9
 800ef7c:	f7f1 f9ae 	bl	80002dc <__adddf3>
 800ef80:	4602      	mov	r2, r0
 800ef82:	460b      	mov	r3, r1
 800ef84:	4610      	mov	r0, r2
 800ef86:	4619      	mov	r1, r3
 800ef88:	f7f1 fe56 	bl	8000c38 <__aeabi_d2f>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	f_l_acc_accConst	= ((f_fin-f_v_accJerk)*(f_fin-f_v_accJerk)
 800ef90:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800ef94:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800ef98:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ef9c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800efa0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800efa4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800efa8:	ee27 7a27 	vmul.f32	s14, s14, s15
							-(f_MotNowSpeed+f_v_accJerk)*(f_MotNowSpeed+f_v_accJerk))
 800efac:	4b3e      	ldr	r3, [pc, #248]	@ (800f0a8 <MOT_getStType+0x690>)
 800efae:	edd3 6a00 	vldr	s13, [r3]
 800efb2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800efb6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800efba:	4b3b      	ldr	r3, [pc, #236]	@ (800f0a8 <MOT_getStType+0x690>)
 800efbc:	ed93 6a00 	vldr	s12, [r3]
 800efc0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800efc4:	ee76 7a27 	vadd.f32	s15, s12, s15
 800efc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800efcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efd0:	ee17 0a90 	vmov	r0, s15
 800efd4:	f7f1 fae0 	bl	8000598 <__aeabi_f2d>
 800efd8:	4602      	mov	r2, r0
 800efda:	460b      	mov	r3, r1
							/( f_acc3 * 2.0 *(-1.0));
 800efdc:	623a      	str	r2, [r7, #32]
 800efde:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800efe2:	627b      	str	r3, [r7, #36]	@ 0x24
 800efe4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800efe6:	f7f1 fad7 	bl	8000598 <__aeabi_f2d>
 800efea:	4602      	mov	r2, r0
 800efec:	460b      	mov	r3, r1
 800efee:	f7f1 f975 	bl	80002dc <__adddf3>
 800eff2:	4602      	mov	r2, r0
 800eff4:	460b      	mov	r3, r1
 800eff6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800effa:	f7f1 fc4f 	bl	800089c <__aeabi_ddiv>
 800effe:	4602      	mov	r2, r0
 800f000:	460b      	mov	r3, r1
	f_l_acc_accConst	= ((f_fin-f_v_accJerk)*(f_fin-f_v_accJerk)
 800f002:	4610      	mov	r0, r2
 800f004:	4619      	mov	r1, r3
 800f006:	f7f1 fe17 	bl	8000c38 <__aeabi_d2f>
 800f00a:	4603      	mov	r3, r0
 800f00c:	657b      	str	r3, [r7, #84]	@ 0x54
	
	f_l3	= f_l_acc_decJerk + f_l_acc_accJerk + f_l_acc_accConst;
 800f00e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800f012:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800f016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f01a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800f01e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f022:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

//	printf("1, %f ,2, %f ,3, %f\n\r",f_l_acc_accJerk,f_l_acc_accConst,f_l_acc_decJerk);
//	printf("l, %f\r\n",f_l3);
	/* 等速＋減速動作 */
	if( f_total <= ( f_l3 + MOT_MOVE_ST_THRESHOLD ) ){
 800f026:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800f028:	f7f1 fab6 	bl	8000598 <__aeabi_f2d>
 800f02c:	4604      	mov	r4, r0
 800f02e:	460d      	mov	r5, r1
 800f030:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800f032:	f7f1 fab1 	bl	8000598 <__aeabi_f2d>
 800f036:	a316      	add	r3, pc, #88	@ (adr r3, 800f090 <MOT_getStType+0x678>)
 800f038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03c:	f7f1 f94e 	bl	80002dc <__adddf3>
 800f040:	4602      	mov	r2, r0
 800f042:	460b      	mov	r3, r1
 800f044:	4620      	mov	r0, r4
 800f046:	4629      	mov	r1, r5
 800f048:	f7f1 fd7a 	bl	8000b40 <__aeabi_dcmple>
 800f04c:	4603      	mov	r3, r0
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d02c      	beq.n	800f0ac <MOT_getStType+0x694>

		/* 減速が最終速度に対して完了しない */
		if( f_total < ( f_l3 + MOT_MOVE_ST_MIN ) ){
 800f052:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800f054:	f7f1 faa0 	bl	8000598 <__aeabi_f2d>
 800f058:	4604      	mov	r4, r0
 800f05a:	460d      	mov	r5, r1
 800f05c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800f05e:	f7f1 fa9b 	bl	8000598 <__aeabi_f2d>
 800f062:	a30d      	add	r3, pc, #52	@ (adr r3, 800f098 <MOT_getStType+0x680>)
 800f064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f068:	f7f1 f938 	bl	80002dc <__adddf3>
 800f06c:	4602      	mov	r2, r0
 800f06e:	460b      	mov	r3, r1
 800f070:	4620      	mov	r0, r4
 800f072:	4629      	mov	r1, r5
 800f074:	f7f1 fd5a 	bl	8000b2c <__aeabi_dcmplt>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d001      	beq.n	800f082 <MOT_getStType+0x66a>
//			printf("パターン6\n\r");
			return MOT_CONST_DEC_CUSTOM;		// パターン6（強制的に加速度を変更する）
 800f07e:	2306      	movs	r3, #6
 800f080:	e2d9      	b.n	800f636 <MOT_getStType+0xc1e>
		}
		else{
//			printf("パターン5\n\r");
			return MOT_CONST_DEC;				// パターン5（等速＋減速）
 800f082:	2305      	movs	r3, #5
 800f084:	e2d7      	b.n	800f636 <MOT_getStType+0xc1e>
 800f086:	bf00      	nop
 800f088:	55555555 	.word	0x55555555
 800f08c:	3fc55555 	.word	0x3fc55555
 800f090:	76c8b439 	.word	0x76c8b439
 800f094:	3f8a9fbe 	.word	0x3f8a9fbe
 800f098:	47ae147b 	.word	0x47ae147b
 800f09c:	3f847ae1 	.word	0x3f847ae1
 800f0a0:	3fe00000 	.word	0x3fe00000
 800f0a4:	20017b2c 	.word	0x20017b2c
 800f0a8:	20017bcc 	.word	0x20017bcc
	f_acc3		= MOT_getAcc3();									// 加速度3[mm/s^2]
	f_t3		= -1.0f * f_v3Div / f_acc3;							// 減速時の所要時間
	f_l3		= ( f_MotTrgtSpeed + f_fin ) * 0.5f * f_t3;
*/

	f_accTime			= f_acc1/f_Jerk;
 800f0ac:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800f0b0:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800f0b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0b8:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	f_v_accJerk			= 1.0/2.0*f_Jerk*f_accTime*f_accTime;
 800f0bc:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800f0be:	f7f1 fa6b 	bl	8000598 <__aeabi_f2d>
 800f0c2:	f04f 0200 	mov.w	r2, #0
 800f0c6:	4be0      	ldr	r3, [pc, #896]	@ (800f448 <MOT_getStType+0xa30>)
 800f0c8:	f7f1 fabe 	bl	8000648 <__aeabi_dmul>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	4614      	mov	r4, r2
 800f0d2:	461d      	mov	r5, r3
 800f0d4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f0d6:	f7f1 fa5f 	bl	8000598 <__aeabi_f2d>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	460b      	mov	r3, r1
 800f0de:	4620      	mov	r0, r4
 800f0e0:	4629      	mov	r1, r5
 800f0e2:	f7f1 fab1 	bl	8000648 <__aeabi_dmul>
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	460b      	mov	r3, r1
 800f0ea:	4614      	mov	r4, r2
 800f0ec:	461d      	mov	r5, r3
 800f0ee:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f0f0:	f7f1 fa52 	bl	8000598 <__aeabi_f2d>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	460b      	mov	r3, r1
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	4629      	mov	r1, r5
 800f0fc:	f7f1 faa4 	bl	8000648 <__aeabi_dmul>
 800f100:	4602      	mov	r2, r0
 800f102:	460b      	mov	r3, r1
 800f104:	4610      	mov	r0, r2
 800f106:	4619      	mov	r1, r3
 800f108:	f7f1 fd96 	bl	8000c38 <__aeabi_d2f>
 800f10c:	4603      	mov	r3, r0
 800f10e:	663b      	str	r3, [r7, #96]	@ 0x60
	f_l_acc_accJerk		= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + f_MotNowSpeed*f_accTime;
 800f110:	4bce      	ldr	r3, [pc, #824]	@ (800f44c <MOT_getStType+0xa34>)
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	4618      	mov	r0, r3
 800f116:	f7f1 fa3f 	bl	8000598 <__aeabi_f2d>
 800f11a:	a3c9      	add	r3, pc, #804	@ (adr r3, 800f440 <MOT_getStType+0xa28>)
 800f11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f120:	f7f1 fa92 	bl	8000648 <__aeabi_dmul>
 800f124:	4602      	mov	r2, r0
 800f126:	460b      	mov	r3, r1
 800f128:	4614      	mov	r4, r2
 800f12a:	461d      	mov	r5, r3
 800f12c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f12e:	f7f1 fa33 	bl	8000598 <__aeabi_f2d>
 800f132:	4602      	mov	r2, r0
 800f134:	460b      	mov	r3, r1
 800f136:	4620      	mov	r0, r4
 800f138:	4629      	mov	r1, r5
 800f13a:	f7f1 fa85 	bl	8000648 <__aeabi_dmul>
 800f13e:	4602      	mov	r2, r0
 800f140:	460b      	mov	r3, r1
 800f142:	4614      	mov	r4, r2
 800f144:	461d      	mov	r5, r3
 800f146:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f148:	f7f1 fa26 	bl	8000598 <__aeabi_f2d>
 800f14c:	4602      	mov	r2, r0
 800f14e:	460b      	mov	r3, r1
 800f150:	4620      	mov	r0, r4
 800f152:	4629      	mov	r1, r5
 800f154:	f7f1 fa78 	bl	8000648 <__aeabi_dmul>
 800f158:	4602      	mov	r2, r0
 800f15a:	460b      	mov	r3, r1
 800f15c:	4614      	mov	r4, r2
 800f15e:	461d      	mov	r5, r3
 800f160:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f162:	f7f1 fa19 	bl	8000598 <__aeabi_f2d>
 800f166:	4602      	mov	r2, r0
 800f168:	460b      	mov	r3, r1
 800f16a:	4620      	mov	r0, r4
 800f16c:	4629      	mov	r1, r5
 800f16e:	f7f1 fa6b 	bl	8000648 <__aeabi_dmul>
 800f172:	4602      	mov	r2, r0
 800f174:	460b      	mov	r3, r1
 800f176:	4614      	mov	r4, r2
 800f178:	461d      	mov	r5, r3
 800f17a:	4bb5      	ldr	r3, [pc, #724]	@ (800f450 <MOT_getStType+0xa38>)
 800f17c:	ed93 7a00 	vldr	s14, [r3]
 800f180:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800f184:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f188:	ee17 0a90 	vmov	r0, s15
 800f18c:	f7f1 fa04 	bl	8000598 <__aeabi_f2d>
 800f190:	4602      	mov	r2, r0
 800f192:	460b      	mov	r3, r1
 800f194:	4620      	mov	r0, r4
 800f196:	4629      	mov	r1, r5
 800f198:	f7f1 f8a0 	bl	80002dc <__adddf3>
 800f19c:	4602      	mov	r2, r0
 800f19e:	460b      	mov	r3, r1
 800f1a0:	4610      	mov	r0, r2
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	f7f1 fd48 	bl	8000c38 <__aeabi_d2f>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
	f_l_acc_decJerk		= 1.0/6.0*st_Info.f_mot_jerk*f_accTime*f_accTime*f_accTime + (f_MotTrgtSpeed-f_v_accJerk)*f_accTime + 1.0/2.0*f_acc1*f_accTime*f_accTime;
 800f1ac:	4ba7      	ldr	r3, [pc, #668]	@ (800f44c <MOT_getStType+0xa34>)
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7f1 f9f1 	bl	8000598 <__aeabi_f2d>
 800f1b6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800f440 <MOT_getStType+0xa28>)
 800f1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1bc:	f7f1 fa44 	bl	8000648 <__aeabi_dmul>
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	460b      	mov	r3, r1
 800f1c4:	4614      	mov	r4, r2
 800f1c6:	461d      	mov	r5, r3
 800f1c8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f1ca:	f7f1 f9e5 	bl	8000598 <__aeabi_f2d>
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	4629      	mov	r1, r5
 800f1d6:	f7f1 fa37 	bl	8000648 <__aeabi_dmul>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	460b      	mov	r3, r1
 800f1de:	4614      	mov	r4, r2
 800f1e0:	461d      	mov	r5, r3
 800f1e2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f1e4:	f7f1 f9d8 	bl	8000598 <__aeabi_f2d>
 800f1e8:	4602      	mov	r2, r0
 800f1ea:	460b      	mov	r3, r1
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	4629      	mov	r1, r5
 800f1f0:	f7f1 fa2a 	bl	8000648 <__aeabi_dmul>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	460b      	mov	r3, r1
 800f1f8:	4614      	mov	r4, r2
 800f1fa:	461d      	mov	r5, r3
 800f1fc:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f1fe:	f7f1 f9cb 	bl	8000598 <__aeabi_f2d>
 800f202:	4602      	mov	r2, r0
 800f204:	460b      	mov	r3, r1
 800f206:	4620      	mov	r0, r4
 800f208:	4629      	mov	r1, r5
 800f20a:	f7f1 fa1d 	bl	8000648 <__aeabi_dmul>
 800f20e:	4602      	mov	r2, r0
 800f210:	460b      	mov	r3, r1
 800f212:	4614      	mov	r4, r2
 800f214:	461d      	mov	r5, r3
 800f216:	4b8f      	ldr	r3, [pc, #572]	@ (800f454 <MOT_getStType+0xa3c>)
 800f218:	ed93 7a00 	vldr	s14, [r3]
 800f21c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f220:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f224:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800f228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f22c:	ee17 0a90 	vmov	r0, s15
 800f230:	f7f1 f9b2 	bl	8000598 <__aeabi_f2d>
 800f234:	4602      	mov	r2, r0
 800f236:	460b      	mov	r3, r1
 800f238:	4620      	mov	r0, r4
 800f23a:	4629      	mov	r1, r5
 800f23c:	f7f1 f84e 	bl	80002dc <__adddf3>
 800f240:	4602      	mov	r2, r0
 800f242:	460b      	mov	r3, r1
 800f244:	4690      	mov	r8, r2
 800f246:	4699      	mov	r9, r3
 800f248:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f24a:	f7f1 f9a5 	bl	8000598 <__aeabi_f2d>
 800f24e:	f04f 0200 	mov.w	r2, #0
 800f252:	4b7d      	ldr	r3, [pc, #500]	@ (800f448 <MOT_getStType+0xa30>)
 800f254:	f7f1 f9f8 	bl	8000648 <__aeabi_dmul>
 800f258:	4602      	mov	r2, r0
 800f25a:	460b      	mov	r3, r1
 800f25c:	4614      	mov	r4, r2
 800f25e:	461d      	mov	r5, r3
 800f260:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f262:	f7f1 f999 	bl	8000598 <__aeabi_f2d>
 800f266:	4602      	mov	r2, r0
 800f268:	460b      	mov	r3, r1
 800f26a:	4620      	mov	r0, r4
 800f26c:	4629      	mov	r1, r5
 800f26e:	f7f1 f9eb 	bl	8000648 <__aeabi_dmul>
 800f272:	4602      	mov	r2, r0
 800f274:	460b      	mov	r3, r1
 800f276:	4614      	mov	r4, r2
 800f278:	461d      	mov	r5, r3
 800f27a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f27c:	f7f1 f98c 	bl	8000598 <__aeabi_f2d>
 800f280:	4602      	mov	r2, r0
 800f282:	460b      	mov	r3, r1
 800f284:	4620      	mov	r0, r4
 800f286:	4629      	mov	r1, r5
 800f288:	f7f1 f9de 	bl	8000648 <__aeabi_dmul>
 800f28c:	4602      	mov	r2, r0
 800f28e:	460b      	mov	r3, r1
 800f290:	4640      	mov	r0, r8
 800f292:	4649      	mov	r1, r9
 800f294:	f7f1 f822 	bl	80002dc <__adddf3>
 800f298:	4602      	mov	r2, r0
 800f29a:	460b      	mov	r3, r1
 800f29c:	4610      	mov	r0, r2
 800f29e:	4619      	mov	r1, r3
 800f2a0:	f7f1 fcca 	bl	8000c38 <__aeabi_d2f>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	65bb      	str	r3, [r7, #88]	@ 0x58
	f_l_acc_accConst	= ((f_MotTrgtSpeed-f_v_accJerk)*(f_MotTrgtSpeed-f_v_accJerk)
 800f2a8:	4b6a      	ldr	r3, [pc, #424]	@ (800f454 <MOT_getStType+0xa3c>)
 800f2aa:	ed93 7a00 	vldr	s14, [r3]
 800f2ae:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f2b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f2b6:	4b67      	ldr	r3, [pc, #412]	@ (800f454 <MOT_getStType+0xa3c>)
 800f2b8:	edd3 6a00 	vldr	s13, [r3]
 800f2bc:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f2c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f2c4:	ee27 7a27 	vmul.f32	s14, s14, s15
							-(f_MotNowSpeed+f_v_accJerk)*(f_MotNowSpeed+f_v_accJerk))
 800f2c8:	4b61      	ldr	r3, [pc, #388]	@ (800f450 <MOT_getStType+0xa38>)
 800f2ca:	edd3 6a00 	vldr	s13, [r3]
 800f2ce:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f2d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f2d6:	4b5e      	ldr	r3, [pc, #376]	@ (800f450 <MOT_getStType+0xa38>)
 800f2d8:	ed93 6a00 	vldr	s12, [r3]
 800f2dc:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f2e0:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f2e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f2ec:	ee17 0a90 	vmov	r0, s15
 800f2f0:	f7f1 f952 	bl	8000598 <__aeabi_f2d>
 800f2f4:	4604      	mov	r4, r0
 800f2f6:	460d      	mov	r5, r1
							/( f_acc1 * 2.0 );
 800f2f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f2fa:	f7f1 f94d 	bl	8000598 <__aeabi_f2d>
 800f2fe:	4602      	mov	r2, r0
 800f300:	460b      	mov	r3, r1
 800f302:	f7f0 ffeb 	bl	80002dc <__adddf3>
 800f306:	4602      	mov	r2, r0
 800f308:	460b      	mov	r3, r1
 800f30a:	4620      	mov	r0, r4
 800f30c:	4629      	mov	r1, r5
 800f30e:	f7f1 fac5 	bl	800089c <__aeabi_ddiv>
 800f312:	4602      	mov	r2, r0
 800f314:	460b      	mov	r3, r1
	f_l_acc_accConst	= ((f_MotTrgtSpeed-f_v_accJerk)*(f_MotTrgtSpeed-f_v_accJerk)
 800f316:	4610      	mov	r0, r2
 800f318:	4619      	mov	r1, r3
 800f31a:	f7f1 fc8d 	bl	8000c38 <__aeabi_d2f>
 800f31e:	4603      	mov	r3, r0
 800f320:	657b      	str	r3, [r7, #84]	@ 0x54

	f_l1	= f_l_acc_accJerk + f_l_acc_decJerk + f_l_acc_accConst;
 800f322:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800f326:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800f32a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f32e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800f332:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f336:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

//	printf("1, %f ,2, %f ,3, %f\n\r",f_l_acc_accJerk,f_l_acc_accConst,f_l_acc_decJerk);
//	printf("l, %f\r\n",f_l1);

	f_accTime			= f_acc3/f_Jerk;
 800f33a:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 800f33e:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800f342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f346:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	f_v_accJerk			= 1.0/2.0*f_Jerk*f_accTime*f_accTime;
 800f34a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800f34c:	f7f1 f924 	bl	8000598 <__aeabi_f2d>
 800f350:	f04f 0200 	mov.w	r2, #0
 800f354:	4b3c      	ldr	r3, [pc, #240]	@ (800f448 <MOT_getStType+0xa30>)
 800f356:	f7f1 f977 	bl	8000648 <__aeabi_dmul>
 800f35a:	4602      	mov	r2, r0
 800f35c:	460b      	mov	r3, r1
 800f35e:	4614      	mov	r4, r2
 800f360:	461d      	mov	r5, r3
 800f362:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f364:	f7f1 f918 	bl	8000598 <__aeabi_f2d>
 800f368:	4602      	mov	r2, r0
 800f36a:	460b      	mov	r3, r1
 800f36c:	4620      	mov	r0, r4
 800f36e:	4629      	mov	r1, r5
 800f370:	f7f1 f96a 	bl	8000648 <__aeabi_dmul>
 800f374:	4602      	mov	r2, r0
 800f376:	460b      	mov	r3, r1
 800f378:	4614      	mov	r4, r2
 800f37a:	461d      	mov	r5, r3
 800f37c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f37e:	f7f1 f90b 	bl	8000598 <__aeabi_f2d>
 800f382:	4602      	mov	r2, r0
 800f384:	460b      	mov	r3, r1
 800f386:	4620      	mov	r0, r4
 800f388:	4629      	mov	r1, r5
 800f38a:	f7f1 f95d 	bl	8000648 <__aeabi_dmul>
 800f38e:	4602      	mov	r2, r0
 800f390:	460b      	mov	r3, r1
 800f392:	4610      	mov	r0, r2
 800f394:	4619      	mov	r1, r3
 800f396:	f7f1 fc4f 	bl	8000c38 <__aeabi_d2f>
 800f39a:	4603      	mov	r3, r0
 800f39c:	663b      	str	r3, [r7, #96]	@ 0x60
	f_l_acc_decJerk		= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + f_MotTrgtSpeed*f_accTime;
 800f39e:	4b2b      	ldr	r3, [pc, #172]	@ (800f44c <MOT_getStType+0xa34>)
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7f1 f8f8 	bl	8000598 <__aeabi_f2d>
 800f3a8:	a325      	add	r3, pc, #148	@ (adr r3, 800f440 <MOT_getStType+0xa28>)
 800f3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ae:	f7f1 f94b 	bl	8000648 <__aeabi_dmul>
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	61ba      	str	r2, [r7, #24]
 800f3b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800f3bc:	61fb      	str	r3, [r7, #28]
 800f3be:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f3c0:	f7f1 f8ea 	bl	8000598 <__aeabi_f2d>
 800f3c4:	4602      	mov	r2, r0
 800f3c6:	460b      	mov	r3, r1
 800f3c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f3cc:	f7f1 f93c 	bl	8000648 <__aeabi_dmul>
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	460b      	mov	r3, r1
 800f3d4:	4614      	mov	r4, r2
 800f3d6:	461d      	mov	r5, r3
 800f3d8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f3da:	f7f1 f8dd 	bl	8000598 <__aeabi_f2d>
 800f3de:	4602      	mov	r2, r0
 800f3e0:	460b      	mov	r3, r1
 800f3e2:	4620      	mov	r0, r4
 800f3e4:	4629      	mov	r1, r5
 800f3e6:	f7f1 f92f 	bl	8000648 <__aeabi_dmul>
 800f3ea:	4602      	mov	r2, r0
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	4614      	mov	r4, r2
 800f3f0:	461d      	mov	r5, r3
 800f3f2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f3f4:	f7f1 f8d0 	bl	8000598 <__aeabi_f2d>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	4629      	mov	r1, r5
 800f400:	f7f1 f922 	bl	8000648 <__aeabi_dmul>
 800f404:	4602      	mov	r2, r0
 800f406:	460b      	mov	r3, r1
 800f408:	4614      	mov	r4, r2
 800f40a:	461d      	mov	r5, r3
 800f40c:	4b11      	ldr	r3, [pc, #68]	@ (800f454 <MOT_getStType+0xa3c>)
 800f40e:	ed93 7a00 	vldr	s14, [r3]
 800f412:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800f416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f41a:	ee17 0a90 	vmov	r0, s15
 800f41e:	f7f1 f8bb 	bl	8000598 <__aeabi_f2d>
 800f422:	4602      	mov	r2, r0
 800f424:	460b      	mov	r3, r1
 800f426:	4620      	mov	r0, r4
 800f428:	4629      	mov	r1, r5
 800f42a:	f7f0 ff57 	bl	80002dc <__adddf3>
 800f42e:	4602      	mov	r2, r0
 800f430:	460b      	mov	r3, r1
 800f432:	4610      	mov	r0, r2
 800f434:	4619      	mov	r1, r3
 800f436:	f7f1 fbff 	bl	8000c38 <__aeabi_d2f>
 800f43a:	4603      	mov	r3, r0
 800f43c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f43e:	e00b      	b.n	800f458 <MOT_getStType+0xa40>
 800f440:	55555555 	.word	0x55555555
 800f444:	3fc55555 	.word	0x3fc55555
 800f448:	3fe00000 	.word	0x3fe00000
 800f44c:	20017b2c 	.word	0x20017b2c
 800f450:	20017bcc 	.word	0x20017bcc
 800f454:	20017bd0 	.word	0x20017bd0
	f_l_acc_accJerk		= 1.0/6.0*st_Info.f_mot_jerk*(-1.0)*f_accTime*f_accTime*f_accTime + (f_fin+f_v_accJerk)*f_accTime + 1.0/2.0*f_acc3*(-1.0)*f_accTime*f_accTime;
 800f458:	4b7d      	ldr	r3, [pc, #500]	@ (800f650 <MOT_getStType+0xc38>)
 800f45a:	685b      	ldr	r3, [r3, #4]
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7f1 f89b 	bl	8000598 <__aeabi_f2d>
 800f462:	a377      	add	r3, pc, #476	@ (adr r3, 800f640 <MOT_getStType+0xc28>)
 800f464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f468:	f7f1 f8ee 	bl	8000648 <__aeabi_dmul>
 800f46c:	4602      	mov	r2, r0
 800f46e:	460b      	mov	r3, r1
 800f470:	613a      	str	r2, [r7, #16]
 800f472:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800f476:	617b      	str	r3, [r7, #20]
 800f478:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f47a:	f7f1 f88d 	bl	8000598 <__aeabi_f2d>
 800f47e:	4602      	mov	r2, r0
 800f480:	460b      	mov	r3, r1
 800f482:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f486:	f7f1 f8df 	bl	8000648 <__aeabi_dmul>
 800f48a:	4602      	mov	r2, r0
 800f48c:	460b      	mov	r3, r1
 800f48e:	4614      	mov	r4, r2
 800f490:	461d      	mov	r5, r3
 800f492:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f494:	f7f1 f880 	bl	8000598 <__aeabi_f2d>
 800f498:	4602      	mov	r2, r0
 800f49a:	460b      	mov	r3, r1
 800f49c:	4620      	mov	r0, r4
 800f49e:	4629      	mov	r1, r5
 800f4a0:	f7f1 f8d2 	bl	8000648 <__aeabi_dmul>
 800f4a4:	4602      	mov	r2, r0
 800f4a6:	460b      	mov	r3, r1
 800f4a8:	4614      	mov	r4, r2
 800f4aa:	461d      	mov	r5, r3
 800f4ac:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f4ae:	f7f1 f873 	bl	8000598 <__aeabi_f2d>
 800f4b2:	4602      	mov	r2, r0
 800f4b4:	460b      	mov	r3, r1
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	4629      	mov	r1, r5
 800f4ba:	f7f1 f8c5 	bl	8000648 <__aeabi_dmul>
 800f4be:	4602      	mov	r2, r0
 800f4c0:	460b      	mov	r3, r1
 800f4c2:	4614      	mov	r4, r2
 800f4c4:	461d      	mov	r5, r3
 800f4c6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800f4ca:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f4ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f4d2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800f4d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4da:	ee17 0a90 	vmov	r0, s15
 800f4de:	f7f1 f85b 	bl	8000598 <__aeabi_f2d>
 800f4e2:	4602      	mov	r2, r0
 800f4e4:	460b      	mov	r3, r1
 800f4e6:	4620      	mov	r0, r4
 800f4e8:	4629      	mov	r1, r5
 800f4ea:	f7f0 fef7 	bl	80002dc <__adddf3>
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	4614      	mov	r4, r2
 800f4f4:	461d      	mov	r5, r3
 800f4f6:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800f4f8:	f7f1 f84e 	bl	8000598 <__aeabi_f2d>
 800f4fc:	f04f 0200 	mov.w	r2, #0
 800f500:	4b54      	ldr	r3, [pc, #336]	@ (800f654 <MOT_getStType+0xc3c>)
 800f502:	f7f1 f8a1 	bl	8000648 <__aeabi_dmul>
 800f506:	4602      	mov	r2, r0
 800f508:	460b      	mov	r3, r1
 800f50a:	60ba      	str	r2, [r7, #8]
 800f50c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800f510:	60fb      	str	r3, [r7, #12]
 800f512:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f514:	f7f1 f840 	bl	8000598 <__aeabi_f2d>
 800f518:	4602      	mov	r2, r0
 800f51a:	460b      	mov	r3, r1
 800f51c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f520:	f7f1 f892 	bl	8000648 <__aeabi_dmul>
 800f524:	4602      	mov	r2, r0
 800f526:	460b      	mov	r3, r1
 800f528:	4690      	mov	r8, r2
 800f52a:	4699      	mov	r9, r3
 800f52c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800f52e:	f7f1 f833 	bl	8000598 <__aeabi_f2d>
 800f532:	4602      	mov	r2, r0
 800f534:	460b      	mov	r3, r1
 800f536:	4640      	mov	r0, r8
 800f538:	4649      	mov	r1, r9
 800f53a:	f7f1 f885 	bl	8000648 <__aeabi_dmul>
 800f53e:	4602      	mov	r2, r0
 800f540:	460b      	mov	r3, r1
 800f542:	4620      	mov	r0, r4
 800f544:	4629      	mov	r1, r5
 800f546:	f7f0 fec9 	bl	80002dc <__adddf3>
 800f54a:	4602      	mov	r2, r0
 800f54c:	460b      	mov	r3, r1
 800f54e:	4610      	mov	r0, r2
 800f550:	4619      	mov	r1, r3
 800f552:	f7f1 fb71 	bl	8000c38 <__aeabi_d2f>
 800f556:	4603      	mov	r3, r0
 800f558:	65fb      	str	r3, [r7, #92]	@ 0x5c
	f_l_acc_accConst	= ((f_fin-f_v_accJerk)*(f_fin-f_v_accJerk)
 800f55a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800f55e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f562:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f566:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800f56a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f56e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f572:	ee27 7a27 	vmul.f32	s14, s14, s15
							-(f_MotTrgtSpeed+f_v_accJerk)*(f_MotTrgtSpeed+f_v_accJerk))
 800f576:	4b38      	ldr	r3, [pc, #224]	@ (800f658 <MOT_getStType+0xc40>)
 800f578:	edd3 6a00 	vldr	s13, [r3]
 800f57c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f580:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f584:	4b34      	ldr	r3, [pc, #208]	@ (800f658 <MOT_getStType+0xc40>)
 800f586:	ed93 6a00 	vldr	s12, [r3]
 800f58a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800f58e:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f592:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f59a:	ee17 0a90 	vmov	r0, s15
 800f59e:	f7f0 fffb 	bl	8000598 <__aeabi_f2d>
 800f5a2:	4602      	mov	r2, r0
 800f5a4:	460b      	mov	r3, r1
							/( f_acc3 * 2.0 * (-1.0));
 800f5a6:	603a      	str	r2, [r7, #0]
 800f5a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800f5ac:	607b      	str	r3, [r7, #4]
 800f5ae:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800f5b0:	f7f0 fff2 	bl	8000598 <__aeabi_f2d>
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	460b      	mov	r3, r1
 800f5b8:	f7f0 fe90 	bl	80002dc <__adddf3>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	460b      	mov	r3, r1
 800f5c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f5c4:	f7f1 f96a 	bl	800089c <__aeabi_ddiv>
 800f5c8:	4602      	mov	r2, r0
 800f5ca:	460b      	mov	r3, r1
	f_l_acc_accConst	= ((f_fin-f_v_accJerk)*(f_fin-f_v_accJerk)
 800f5cc:	4610      	mov	r0, r2
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	f7f1 fb32 	bl	8000c38 <__aeabi_d2f>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	657b      	str	r3, [r7, #84]	@ 0x54
	
	f_l3	= f_l_acc_decJerk + f_l_acc_accJerk + f_l_acc_accConst;
 800f5d8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800f5dc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800f5e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5e4:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800f5e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5ec:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

//	printf("1, %f ,2, %f ,3, %f\n\r",f_l_acc_accJerk,f_l_acc_accConst,f_l_acc_decJerk);
//	printf("l, %f\r\n",f_l3);

	/* 通常の台形動作 */
	if( ( f_total - f_l1 - f_l3 - MOT_MOVE_ST_MIN) >= 0 ){
 800f5f0:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800f5f4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800f5f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f5fc:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800f600:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f604:	ee17 0a90 	vmov	r0, s15
 800f608:	f7f0 ffc6 	bl	8000598 <__aeabi_f2d>
 800f60c:	a30e      	add	r3, pc, #56	@ (adr r3, 800f648 <MOT_getStType+0xc30>)
 800f60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f612:	f7f0 fe61 	bl	80002d8 <__aeabi_dsub>
 800f616:	4602      	mov	r2, r0
 800f618:	460b      	mov	r3, r1
 800f61a:	4610      	mov	r0, r2
 800f61c:	4619      	mov	r1, r3
 800f61e:	f04f 0200 	mov.w	r2, #0
 800f622:	f04f 0300 	mov.w	r3, #0
 800f626:	f7f1 fa95 	bl	8000b54 <__aeabi_dcmpge>
 800f62a:	4603      	mov	r3, r0
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d001      	beq.n	800f634 <MOT_getStType+0xc1c>
//		printf("パターン1\n\r");
		return MOT_ACC_CONST_DEC;				// パターン1（通常）
 800f630:	2301      	movs	r3, #1
 800f632:	e000      	b.n	800f636 <MOT_getStType+0xc1e>
	}
	/* 等速値を変更する */
	else{
//		printf("パターン2\n\r");
		return MOT_ACC_CONST_DEC_CUSTOM;		// パターン2（目標速度を変更）
 800f634:	2302      	movs	r3, #2
	}
}
 800f636:	4618      	mov	r0, r3
 800f638:	3778      	adds	r7, #120	@ 0x78
 800f63a:	46bd      	mov	sp, r7
 800f63c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f640:	55555555 	.word	0x55555555
 800f644:	3fc55555 	.word	0x3fc55555
 800f648:	47ae147b 	.word	0x47ae147b
 800f64c:	3f847ae1 	.word	0x3f847ae1
 800f650:	20017b2c 	.word	0x20017b2c
 800f654:	3fe00000 	.word	0x3fe00000
 800f658:	20017bd0 	.word	0x20017bd0

0800f65c <MOT_go_FinSpeed>:

void MOT_go_FinSpeed( float f_num, float f_fin, enMOT_GO_ST_TYPE en_goStType )
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b086      	sub	sp, #24
 800f660:	af00      	add	r7, sp, #0
 800f662:	ed87 0a03 	vstr	s0, [r7, #12]
 800f666:	edc7 0a02 	vstr	s1, [r7, #8]
 800f66a:	4603      	mov	r3, r0
 800f66c:	71fb      	strb	r3, [r7, #7]
	enMOT_ST_TYPE 		en_type 		= MOT_getStType( f_num, f_fin, en_goStType);			// 動作パターン取得
 800f66e:	79fb      	ldrb	r3, [r7, #7]
 800f670:	4618      	mov	r0, r3
 800f672:	edd7 0a02 	vldr	s1, [r7, #8]
 800f676:	ed97 0a03 	vldr	s0, [r7, #12]
 800f67a:	f7ff f9cd 	bl	800ea18 <MOT_getStType>
 800f67e:	4603      	mov	r3, r0
 800f680:	75fb      	strb	r3, [r7, #23]
	/* 移動距離と指定値に応じで動作を変える */
	switch( en_type ){
 800f682:	7dfb      	ldrb	r3, [r7, #23]
 800f684:	3b01      	subs	r3, #1
 800f686:	2b05      	cmp	r3, #5
 800f688:	d873      	bhi.n	800f772 <MOT_go_FinSpeed+0x116>
 800f68a:	a201      	add	r2, pc, #4	@ (adr r2, 800f690 <MOT_go_FinSpeed+0x34>)
 800f68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f690:	0800f6a9 	.word	0x0800f6a9
 800f694:	0800f6cb 	.word	0x0800f6cb
 800f698:	0800f6ed 	.word	0x0800f6ed
 800f69c:	0800f70f 	.word	0x0800f70f
 800f6a0:	0800f72f 	.word	0x0800f72f
 800f6a4:	0800f751 	.word	0x0800f751

		case MOT_ACC_CONST_DEC:				// [01] 台形加速
			MOT_setData_ACC_CONST_DEC( f_num, f_fin, en_goStType );					// 動作データ作成
 800f6a8:	79fb      	ldrb	r3, [r7, #7]
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	edd7 0a02 	vldr	s1, [r7, #8]
 800f6b0:	ed97 0a03 	vldr	s0, [r7, #12]
 800f6b4:	f7fd f9a8 	bl	800ca08 <MOT_setData_ACC_CONST_DEC>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800f6b8:	79fa      	ldrb	r2, [r7, #7]
 800f6ba:	7dfb      	ldrb	r3, [r7, #23]
 800f6bc:	4611      	mov	r1, r2
 800f6be:	4618      	mov	r0, r3
 800f6c0:	ed97 0a02 	vldr	s0, [r7, #8]
 800f6c4:	f7fc fd42 	bl	800c14c <MOT_goBlock_AccConstDec>
			break;
 800f6c8:	e054      	b.n	800f774 <MOT_go_FinSpeed+0x118>

		case MOT_ACC_CONST_DEC_CUSTOM:		// [02] 台形加速（等速）
			MOT_setData_MOT_ACC_CONST_DEC_CUSTOM( f_num, f_fin, en_goStType );		// 動作データ作成
 800f6ca:	79fb      	ldrb	r3, [r7, #7]
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	edd7 0a02 	vldr	s1, [r7, #8]
 800f6d2:	ed97 0a03 	vldr	s0, [r7, #12]
 800f6d6:	f7fd fd1f 	bl	800d118 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800f6da:	79fa      	ldrb	r2, [r7, #7]
 800f6dc:	7dfb      	ldrb	r3, [r7, #23]
 800f6de:	4611      	mov	r1, r2
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	ed97 0a02 	vldr	s0, [r7, #8]
 800f6e6:	f7fc fd31 	bl	800c14c <MOT_goBlock_AccConstDec>
			break;
 800f6ea:	e043      	b.n	800f774 <MOT_go_FinSpeed+0x118>

		case MOT_ACC_CONST:				// [03] 加速＋等速
			MOT_setData_MOT_ACC_CONST( f_num, f_fin, en_goStType );					// 動作データ作成
 800f6ec:	79fb      	ldrb	r3, [r7, #7]
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	edd7 0a02 	vldr	s1, [r7, #8]
 800f6f4:	ed97 0a03 	vldr	s0, [r7, #12]
 800f6f8:	f7fe f932 	bl	800d960 <MOT_setData_MOT_ACC_CONST>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800f6fc:	79fa      	ldrb	r2, [r7, #7]
 800f6fe:	7dfb      	ldrb	r3, [r7, #23]
 800f700:	4611      	mov	r1, r2
 800f702:	4618      	mov	r0, r3
 800f704:	ed97 0a02 	vldr	s0, [r7, #8]
 800f708:	f7fc fd20 	bl	800c14c <MOT_goBlock_AccConstDec>
			break;
 800f70c:	e032      	b.n	800f774 <MOT_go_FinSpeed+0x118>

		case MOT_ACC_CONST_CUSTOM:		// [04] 加速＋等速（等速）
			MOT_setData_MOT_ACC_CONST_CUSTOM( f_num, f_fin, en_goStType );			// 動作データ作成
 800f70e:	79fb      	ldrb	r3, [r7, #7]
 800f710:	4618      	mov	r0, r3
 800f712:	edd7 0a02 	vldr	s1, [r7, #8]
 800f716:	ed97 0a03 	vldr	s0, [r7, #12]
 800f71a:	f7fe fb01 	bl	800dd20 <MOT_setData_MOT_ACC_CONST_CUSTOM>
			MOT_goBlock_AccConstDec( f_fin, en_type, MOT_GO_ST_NORMAL );			// 動作
 800f71e:	7dfb      	ldrb	r3, [r7, #23]
 800f720:	2100      	movs	r1, #0
 800f722:	4618      	mov	r0, r3
 800f724:	ed97 0a02 	vldr	s0, [r7, #8]
 800f728:	f7fc fd10 	bl	800c14c <MOT_goBlock_AccConstDec>
			break;
 800f72c:	e022      	b.n	800f774 <MOT_go_FinSpeed+0x118>

		case MOT_CONST_DEC:				// [05] 等速＋減速
			MOT_setData_MOT_CONST_DEC( f_num, f_fin, en_goStType );					// 動作データ作成
 800f72e:	79fb      	ldrb	r3, [r7, #7]
 800f730:	4618      	mov	r0, r3
 800f732:	edd7 0a02 	vldr	s1, [r7, #8]
 800f736:	ed97 0a03 	vldr	s0, [r7, #12]
 800f73a:	f7fe fd45 	bl	800e1c8 <MOT_setData_MOT_CONST_DEC>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800f73e:	79fa      	ldrb	r2, [r7, #7]
 800f740:	7dfb      	ldrb	r3, [r7, #23]
 800f742:	4611      	mov	r1, r2
 800f744:	4618      	mov	r0, r3
 800f746:	ed97 0a02 	vldr	s0, [r7, #8]
 800f74a:	f7fc fcff 	bl	800c14c <MOT_goBlock_AccConstDec>
			break;
 800f74e:	e011      	b.n	800f774 <MOT_go_FinSpeed+0x118>

		case MOT_CONST_DEC_CUSTOM:		// [06] 等速＋減速（減速値変更）
			MOT_setData_MOT_CONST_DEC_CUSTOM( f_num, f_fin, en_goStType );			// 動作データ作成
 800f750:	79fb      	ldrb	r3, [r7, #7]
 800f752:	4618      	mov	r0, r3
 800f754:	edd7 0a02 	vldr	s1, [r7, #8]
 800f758:	ed97 0a03 	vldr	s0, [r7, #12]
 800f75c:	f7fe ff10 	bl	800e580 <MOT_setData_MOT_CONST_DEC_CUSTOM>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800f760:	79fa      	ldrb	r2, [r7, #7]
 800f762:	7dfb      	ldrb	r3, [r7, #23]
 800f764:	4611      	mov	r1, r2
 800f766:	4618      	mov	r0, r3
 800f768:	ed97 0a02 	vldr	s0, [r7, #8]
 800f76c:	f7fc fcee 	bl	800c14c <MOT_goBlock_AccConstDec>
			break;
 800f770:	e000      	b.n	800f774 <MOT_go_FinSpeed+0x118>

		default:
			break;
 800f772:	bf00      	nop
	}

}
 800f774:	bf00      	nop
 800f776:	3718      	adds	r7, #24
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <MOT_goBlock_FinSpeed>:

void MOT_goBlock_FinSpeed( float f_num, float f_fin )
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b082      	sub	sp, #8
 800f780:	af00      	add	r7, sp, #0
 800f782:	ed87 0a01 	vstr	s0, [r7, #4]
 800f786:	edc7 0a00 	vstr	s1, [r7]
	MOT_go_FinSpeed( f_num, f_fin, MOT_GO_ST_NORMAL );		// 通常の直進
 800f78a:	2000      	movs	r0, #0
 800f78c:	edd7 0a00 	vldr	s1, [r7]
 800f790:	ed97 0a01 	vldr	s0, [r7, #4]
 800f794:	f7ff ff62 	bl	800f65c <MOT_go_FinSpeed>
}
 800f798:	bf00      	nop
 800f79a:	3708      	adds	r7, #8
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}

0800f7a0 <MOT_goSkewBlock_FinSpeed>:

void MOT_goSkewBlock_FinSpeed( float f_num, float f_fin )
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b082      	sub	sp, #8
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	ed87 0a01 	vstr	s0, [r7, #4]
 800f7aa:	edc7 0a00 	vstr	s1, [r7]
	MOT_go_FinSpeed( f_num, f_fin, MOT_GO_ST_SKEW );		// 通常の直進
 800f7ae:	2001      	movs	r0, #1
 800f7b0:	edd7 0a00 	vldr	s1, [r7]
 800f7b4:	ed97 0a01 	vldr	s0, [r7, #4]
 800f7b8:	f7ff ff50 	bl	800f65c <MOT_go_FinSpeed>
}
 800f7bc:	bf00      	nop
 800f7be:	3708      	adds	r7, #8
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <MOT_goBlock_Const>:

void MOT_goBlock_Const(float f_num)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b0ba      	sub	sp, #232	@ 0xe8
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	ed87 0a01 	vstr	s0, [r7, #4]
	stCTRL_DATA		st_data;
	stMOT_DATA		st_info;

	GYRO_staErrChkAngle();
 800f7ce:	f7fa fa11 	bl	8009bf4 <GYRO_staErrChkAngle>

	/* ---------------- */
	/*  動作データ計算   */
	/* ---------------- */
	/* 距離 */
	st_info.f_mot_dist		= f_num * BLOCK;													// 移動距離[m]
 800f7d2:	edd7 7a01 	vldr	s15, [r7, #4]
 800f7d6:	ed9f 7aca 	vldr	s14, [pc, #808]	@ 800fb00 <MOT_goBlock_Const+0x33c>
 800f7da:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7de:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38


	/* ------ */
	/*  等速  */
	/* ------ */
	st_data.en_ctrl_type			= CTRL_CONST;
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
	st_data.f_ctrl_jerk			= 0;
 800f7e8:	f04f 0300 	mov.w	r3, #0
 800f7ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	st_data.f_ctrl_trgtAcc		= 0;		// 加速度指定
 800f7f0:	f04f 0300 	mov.w	r3, #0
 800f7f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	st_data.f_ctrl_nowAcc		= 0;
 800f7f8:	f04f 0300 	mov.w	r3, #0
 800f7fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	st_data.f_ctrl_now			= f_MotNowSpeed;			// 現在速度
 800f800:	4bc0      	ldr	r3, [pc, #768]	@ (800fb04 <MOT_goBlock_Const+0x340>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	st_data.f_ctrl_trgt			= f_MotNowSpeed;			// 目標速度
 800f808:	4bbe      	ldr	r3, [pc, #760]	@ (800fb04 <MOT_goBlock_Const+0x340>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	st_data.f_ctrl_nowDist		= 0;				// 現在位置
 800f810:	f04f 0300 	mov.w	r3, #0
 800f814:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	st_data.f_ctrl_dist			= st_info.f_mot_dist;			// 等速完了位置
 800f818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f81a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	st_data.f_ctrl_nowAccAngle		= 0;
 800f81e:	f04f 0300 	mov.w	r3, #0
 800f822:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800f826:	f04f 0300 	mov.w	r3, #0
 800f82a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	st_data.f_ctrl_nowAngleS		= 0;					// 現在角速度
 800f82e:	f04f 0300 	mov.w	r3, #0
 800f832:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	st_data.f_ctrl_trgtAngleS		= 0;					// 目標角度
 800f836:	f04f 0300 	mov.w	r3, #0
 800f83a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	st_data.f_ctrl_nowAngle		= 0;					// 現在角度
 800f83e:	f04f 0300 	mov.w	r3, #0
 800f842:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	st_data.f_ctrl_angle			= 0;					// 目標角度
 800f846:	f04f 0300 	mov.w	r3, #0
 800f84a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	st_data.f_ctrl_time 			= 0;					// 目標時間 [sec] ← 指定しない
 800f84e:	f04f 0300 	mov.w	r3, #0
 800f852:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	CTRL_clrData();										// 設定データをクリア
 800f856:	f7f6 fdf5 	bl	8006444 <CTRL_clrData>
	CTRL_setData( &st_data );						// データセット
 800f85a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800f85e:	4618      	mov	r0, r3
 800f860:	f7f6 fede 	bl	8006620 <CTRL_setData>
	Set_TrgtSpeed(f_MotNowSpeed);
 800f864:	4ba7      	ldr	r3, [pc, #668]	@ (800fb04 <MOT_goBlock_Const+0x340>)
 800f866:	edd3 7a00 	vldr	s15, [r3]
 800f86a:	eeb0 0a67 	vmov.f32	s0, s15
 800f86e:	f7f6 fd53 	bl	8006318 <Set_TrgtSpeed>
//	printf("目標速度 %f 目標位置 %f \r\n",st_data.f_trgt,st_data.f_dist);
	while( Get_NowDist() < st_info.f_mot_dist ){				// 指定距離到達待ち
 800f872:	e02e      	b.n	800f8d2 <MOT_goBlock_Const+0x10e>
		if( SYS_isOutOfCtrl() == TRUE ){
 800f874:	f7f9 ff34 	bl	80096e0 <SYS_isOutOfCtrl>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d008      	beq.n	800f890 <MOT_goBlock_Const+0xcc>
			CTRL_stop();
 800f87e:	f7f6 fdd1 	bl	8006424 <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 800f882:	2000      	movs	r0, #0
 800f884:	f7f9 ff5e 	bl	8009744 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 800f888:	2001      	movs	r0, #1
 800f88a:	f7f9 ff5b 	bl	8009744 <DCM_brakeMot>
			break;
 800f88e:	e02d      	b.n	800f8ec <MOT_goBlock_Const+0x128>
		}				// 途中で制御不能になった
		if(MOT_setWallEdgeDist()==TRUE) break;
 800f890:	f002 ffec 	bl	801286c <MOT_setWallEdgeDist>
 800f894:	4603      	mov	r3, r0
 800f896:	2b00      	cmp	r3, #0
 800f898:	d127      	bne.n	800f8ea <MOT_goBlock_Const+0x126>
		if(Is_Known_Accel() == FALSE){
 800f89a:	f007 f94d 	bl	8016b38 <Is_Known_Accel>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	f083 0301 	eor.w	r3, r3, #1
 800f8a4:	b2db      	uxtb	r3, r3
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d013      	beq.n	800f8d2 <MOT_goBlock_Const+0x10e>
			if((DIST_getNowVal(DIST_SEN_R_FRONT)>(R_FRONT_REF-FRONT_WALL_MISS_DIF))||(DIST_getNowVal(DIST_SEN_L_FRONT)>(L_FRONT_REF-FRONT_WALL_MISS_DIF))){
 800f8aa:	2000      	movs	r0, #0
 800f8ac:	f003 f9c8 	bl	8012c40 <DIST_getNowVal>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	f240 3311 	movw	r3, #785	@ 0x311
 800f8b8:	429a      	cmp	r2, r3
 800f8ba:	dc06      	bgt.n	800f8ca <MOT_goBlock_Const+0x106>
 800f8bc:	2001      	movs	r0, #1
 800f8be:	f003 f9bf 	bl	8012c40 <DIST_getNowVal>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	f5b3 7fde 	cmp.w	r3, #444	@ 0x1bc
 800f8c8:	db03      	blt.n	800f8d2 <MOT_goBlock_Const+0x10e>
				front_wall_miss = TRUE;
 800f8ca:	4b8f      	ldr	r3, [pc, #572]	@ (800fb08 <MOT_goBlock_Const+0x344>)
 800f8cc:	2201      	movs	r2, #1
 800f8ce:	701a      	strb	r2, [r3, #0]
				break;
 800f8d0:	e00c      	b.n	800f8ec <MOT_goBlock_Const+0x128>
	while( Get_NowDist() < st_info.f_mot_dist ){				// 指定距離到達待ち
 800f8d2:	f7f6 fcf7 	bl	80062c4 <Get_NowDist>
 800f8d6:	eeb0 7a40 	vmov.f32	s14, s0
 800f8da:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800f8de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e6:	d4c5      	bmi.n	800f874 <MOT_goBlock_Const+0xb0>
 800f8e8:	e000      	b.n	800f8ec <MOT_goBlock_Const+0x128>
		if(MOT_setWallEdgeDist()==TRUE) break;
 800f8ea:	bf00      	nop
			}
		}
	}

	if( ( en_WallEdge != MOT_WALL_EDGE_NONE ) && ( bl_IsWallEdge == FALSE )  ){
 800f8ec:	4b87      	ldr	r3, [pc, #540]	@ (800fb0c <MOT_goBlock_Const+0x348>)
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	f000 808f 	beq.w	800fa14 <MOT_goBlock_Const+0x250>
 800f8f6:	4b86      	ldr	r3, [pc, #536]	@ (800fb10 <MOT_goBlock_Const+0x34c>)
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	f083 0301 	eor.w	r3, r3, #1
 800f8fe:	b2db      	uxtb	r3, r3
 800f900:	2b00      	cmp	r3, #0
 800f902:	f000 8087 	beq.w	800fa14 <MOT_goBlock_Const+0x250>
		st_data.en_ctrl_type			= CTRL_CONST;
 800f906:	2301      	movs	r3, #1
 800f908:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
		st_data.f_ctrl_jerk			= 0;
 800f90c:	f04f 0300 	mov.w	r3, #0
 800f910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		st_data.f_ctrl_trgtAcc		= 0;		// 加速度指定
 800f914:	f04f 0300 	mov.w	r3, #0
 800f918:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		st_data.f_ctrl_nowAcc		= 0;
 800f91c:	f04f 0300 	mov.w	r3, #0
 800f920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		st_data.f_ctrl_now			= st_Info.f_mot_last;			// 現在速度
 800f924:	4b7b      	ldr	r3, [pc, #492]	@ (800fb14 <MOT_goBlock_Const+0x350>)
 800f926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f928:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		st_data.f_ctrl_trgt			= st_Info.f_mot_last;			// 目標速度
 800f92c:	4b79      	ldr	r3, [pc, #484]	@ (800fb14 <MOT_goBlock_Const+0x350>)
 800f92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f930:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		st_data.f_ctrl_nowDist		= Get_NowDist();				// 現在位置
 800f934:	f7f6 fcc6 	bl	80062c4 <Get_NowDist>
 800f938:	eef0 7a40 	vmov.f32	s15, s0
 800f93c:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
		st_data.f_ctrl_dist			= Get_NowDist() + 0.045f;	// 等速完了位置（90.0f：壁切れをどこまで救うかの距離）、ここではf_NowDistをクリアしてはいけない。
 800f940:	f7f6 fcc0 	bl	80062c4 <Get_NowDist>
 800f944:	eef0 7a40 	vmov.f32	s15, s0
 800f948:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 800fb18 <MOT_goBlock_Const+0x354>
 800f94c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f950:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8
		st_data.f_ctrl_nowAccAngle		= 0;
 800f954:	f04f 0300 	mov.w	r3, #0
 800f958:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800f95c:	f04f 0300 	mov.w	r3, #0
 800f960:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 800f964:	f04f 0300 	mov.w	r3, #0
 800f968:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		st_data.f_ctrl_trgtAngleS	= 0;						// 目標角度
 800f96c:	f04f 0300 	mov.w	r3, #0
 800f970:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 800f974:	f04f 0300 	mov.w	r3, #0
 800f978:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
		st_data.f_ctrl_angle			= 0;						// 目標角度
 800f97c:	f04f 0300 	mov.w	r3, #0
 800f980:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800f984:	f04f 0300 	mov.w	r3, #0
 800f988:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 800f98c:	f7f6 fd5a 	bl	8006444 <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 800f990:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800f994:	4618      	mov	r0, r3
 800f996:	f7f6 fe43 	bl	8006620 <CTRL_setData>
		while( Get_NowDist() < st_data.f_ctrl_dist ){				// 指定距離到達待ち
 800f99a:	e02e      	b.n	800f9fa <MOT_goBlock_Const+0x236>
			if( SYS_isOutOfCtrl() == TRUE ){
 800f99c:	f7f9 fea0 	bl	80096e0 <SYS_isOutOfCtrl>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d008      	beq.n	800f9b8 <MOT_goBlock_Const+0x1f4>
				CTRL_stop();
 800f9a6:	f7f6 fd3d 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800f9aa:	2000      	movs	r0, #0
 800f9ac:	f7f9 feca 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800f9b0:	2001      	movs	r0, #1
 800f9b2:	f7f9 fec7 	bl	8009744 <DCM_brakeMot>
				break;
 800f9b6:	e02d      	b.n	800fa14 <MOT_goBlock_Const+0x250>
			}				
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 800f9b8:	f002 ff9c 	bl	80128f4 <MOT_setWallEdgeDist_LoopWait>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d127      	bne.n	800fa12 <MOT_goBlock_Const+0x24e>
			if(Is_Known_Accel() == FALSE){
 800f9c2:	f007 f8b9 	bl	8016b38 <Is_Known_Accel>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	f083 0301 	eor.w	r3, r3, #1
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d013      	beq.n	800f9fa <MOT_goBlock_Const+0x236>
				if((DIST_getNowVal(DIST_SEN_R_FRONT)>(R_FRONT_REF-FRONT_WALL_MISS_DIF))||(DIST_getNowVal(DIST_SEN_L_FRONT)>(L_FRONT_REF-FRONT_WALL_MISS_DIF))){
 800f9d2:	2000      	movs	r0, #0
 800f9d4:	f003 f934 	bl	8012c40 <DIST_getNowVal>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	461a      	mov	r2, r3
 800f9dc:	f240 3311 	movw	r3, #785	@ 0x311
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	dc06      	bgt.n	800f9f2 <MOT_goBlock_Const+0x22e>
 800f9e4:	2001      	movs	r0, #1
 800f9e6:	f003 f92b 	bl	8012c40 <DIST_getNowVal>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	f5b3 7fde 	cmp.w	r3, #444	@ 0x1bc
 800f9f0:	db03      	blt.n	800f9fa <MOT_goBlock_Const+0x236>
					front_wall_miss = TRUE;
 800f9f2:	4b45      	ldr	r3, [pc, #276]	@ (800fb08 <MOT_goBlock_Const+0x344>)
 800f9f4:	2201      	movs	r2, #1
 800f9f6:	701a      	strb	r2, [r3, #0]
					break;
 800f9f8:	e00c      	b.n	800fa14 <MOT_goBlock_Const+0x250>
		while( Get_NowDist() < st_data.f_ctrl_dist ){				// 指定距離到達待ち
 800f9fa:	f7f6 fc63 	bl	80062c4 <Get_NowDist>
 800f9fe:	eeb0 7a40 	vmov.f32	s14, s0
 800fa02:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 800fa06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa0e:	d4c5      	bmi.n	800f99c <MOT_goBlock_Const+0x1d8>
 800fa10:	e000      	b.n	800fa14 <MOT_goBlock_Const+0x250>
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 800fa12:	bf00      	nop
				}
			}
		}
	}
	/* straight for edge */
	if( f_WallEdgeAddDist != 0.0f)
 800fa14:	4b41      	ldr	r3, [pc, #260]	@ (800fb1c <MOT_goBlock_Const+0x358>)
 800fa16:	edd3 7a00 	vldr	s15, [r3]
 800fa1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fa1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa22:	f000 8088 	beq.w	800fb36 <MOT_goBlock_Const+0x372>
	{
		st_data.en_ctrl_type			= CTRL_CONST;
 800fa26:	2301      	movs	r3, #1
 800fa28:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
		st_data.f_ctrl_jerk			= 0;
 800fa2c:	f04f 0300 	mov.w	r3, #0
 800fa30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		st_data.f_ctrl_trgtAcc		= 0;		// 加速度指定
 800fa34:	f04f 0300 	mov.w	r3, #0
 800fa38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		st_data.f_ctrl_nowAcc		= 0;
 800fa3c:	f04f 0300 	mov.w	r3, #0
 800fa40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		st_data.f_ctrl_now			= st_Info.f_mot_last;			// 現在速度
 800fa44:	4b33      	ldr	r3, [pc, #204]	@ (800fb14 <MOT_goBlock_Const+0x350>)
 800fa46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa48:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		st_data.f_ctrl_trgt			= st_Info.f_mot_last;			// 目標速度
 800fa4c:	4b31      	ldr	r3, [pc, #196]	@ (800fb14 <MOT_goBlock_Const+0x350>)
 800fa4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		st_data.f_ctrl_nowDist		= 0;						// 現在位置
 800fa54:	f04f 0300 	mov.w	r3, #0
 800fa58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
		st_data.f_ctrl_dist			= f_WallEdgeAddDist;		// 等速完了位置
 800fa5c:	4b2f      	ldr	r3, [pc, #188]	@ (800fb1c <MOT_goBlock_Const+0x358>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
		st_data.f_ctrl_nowAccAngle		= 0;
 800fa64:	f04f 0300 	mov.w	r3, #0
 800fa68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 800fa6c:	f04f 0300 	mov.w	r3, #0
 800fa70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 800fa74:	f04f 0300 	mov.w	r3, #0
 800fa78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		st_data.f_ctrl_trgtAngleS	= 0;						// 目標角度
 800fa7c:	f04f 0300 	mov.w	r3, #0
 800fa80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 800fa84:	f04f 0300 	mov.w	r3, #0
 800fa88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
		st_data.f_ctrl_angle			= 0;						// 目標角度
 800fa8c:	f04f 0300 	mov.w	r3, #0
 800fa90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800fa94:	f04f 0300 	mov.w	r3, #0
 800fa98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 800fa9c:	f7f6 fcd2 	bl	8006444 <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 800faa0:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7f6 fdbb 	bl	8006620 <CTRL_setData>
		while( Get_NowDist() < st_data.f_ctrl_dist ){			// 指定距離到達待ち
 800faaa:	e039      	b.n	800fb20 <MOT_goBlock_Const+0x35c>
			if( SYS_isOutOfCtrl() == TRUE ){
 800faac:	f7f9 fe18 	bl	80096e0 <SYS_isOutOfCtrl>
 800fab0:	4603      	mov	r3, r0
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d008      	beq.n	800fac8 <MOT_goBlock_Const+0x304>
				CTRL_stop();
 800fab6:	f7f6 fcb5 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800faba:	2000      	movs	r0, #0
 800fabc:	f7f9 fe42 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800fac0:	2001      	movs	r0, #1
 800fac2:	f7f9 fe3f 	bl	8009744 <DCM_brakeMot>
				break;
 800fac6:	e036      	b.n	800fb36 <MOT_goBlock_Const+0x372>
			}	
			if(Is_Known_Accel() == FALSE){
 800fac8:	f007 f836 	bl	8016b38 <Is_Known_Accel>
 800facc:	4603      	mov	r3, r0
 800face:	f083 0301 	eor.w	r3, r3, #1
 800fad2:	b2db      	uxtb	r3, r3
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d023      	beq.n	800fb20 <MOT_goBlock_Const+0x35c>
				if((DIST_getNowVal(DIST_SEN_R_FRONT)>(R_FRONT_REF-FRONT_WALL_MISS_DIF))||(DIST_getNowVal(DIST_SEN_L_FRONT)>(L_FRONT_REF-FRONT_WALL_MISS_DIF))){
 800fad8:	2000      	movs	r0, #0
 800fada:	f003 f8b1 	bl	8012c40 <DIST_getNowVal>
 800fade:	4603      	mov	r3, r0
 800fae0:	461a      	mov	r2, r3
 800fae2:	f240 3311 	movw	r3, #785	@ 0x311
 800fae6:	429a      	cmp	r2, r3
 800fae8:	dc06      	bgt.n	800faf8 <MOT_goBlock_Const+0x334>
 800faea:	2001      	movs	r0, #1
 800faec:	f003 f8a8 	bl	8012c40 <DIST_getNowVal>
 800faf0:	4603      	mov	r3, r0
 800faf2:	f5b3 7fde 	cmp.w	r3, #444	@ 0x1bc
 800faf6:	db13      	blt.n	800fb20 <MOT_goBlock_Const+0x35c>
					front_wall_miss = TRUE;
 800faf8:	4b03      	ldr	r3, [pc, #12]	@ (800fb08 <MOT_goBlock_Const+0x344>)
 800fafa:	2201      	movs	r2, #1
 800fafc:	701a      	strb	r2, [r3, #0]
					break;
 800fafe:	e01a      	b.n	800fb36 <MOT_goBlock_Const+0x372>
 800fb00:	3db851ec 	.word	0x3db851ec
 800fb04:	20017bcc 	.word	0x20017bcc
 800fb08:	2001ad9b 	.word	0x2001ad9b
 800fb0c:	20017be4 	.word	0x20017be4
 800fb10:	20017be5 	.word	0x20017be5
 800fb14:	20017b2c 	.word	0x20017b2c
 800fb18:	3d3851ec 	.word	0x3d3851ec
 800fb1c:	20017be8 	.word	0x20017be8
		while( Get_NowDist() < st_data.f_ctrl_dist ){			// 指定距離到達待ち
 800fb20:	f7f6 fbd0 	bl	80062c4 <Get_NowDist>
 800fb24:	eeb0 7a40 	vmov.f32	s14, s0
 800fb28:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 800fb2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb34:	d4ba      	bmi.n	800faac <MOT_goBlock_Const+0x2e8>
				}
			}			
		}
	}

	if(front_wall_miss == TRUE){
 800fb36:	4b11      	ldr	r3, [pc, #68]	@ (800fb7c <MOT_goBlock_Const+0x3b8>)
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d00e      	beq.n	800fb5c <MOT_goBlock_Const+0x398>
		MOT_goBlock_FinSpeed(0.4,0);
 800fb3e:	eddf 0a10 	vldr	s1, [pc, #64]	@ 800fb80 <MOT_goBlock_Const+0x3bc>
 800fb42:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 800fb84 <MOT_goBlock_Const+0x3c0>
 800fb46:	f7ff fe19 	bl	800f77c <MOT_goBlock_FinSpeed>
		DCM_brakeMot( DCM_R );		
 800fb4a:	2000      	movs	r0, #0
 800fb4c:	f7f9 fdfa 	bl	8009744 <DCM_brakeMot>
		DCM_brakeMot( DCM_L );
 800fb50:	2001      	movs	r0, #1
 800fb52:	f7f9 fdf7 	bl	8009744 <DCM_brakeMot>
		LL_mDelay(200);
 800fb56:	20c8      	movs	r0, #200	@ 0xc8
 800fb58:	f00b fff4 	bl	801bb44 <LL_mDelay>

	}

	MOT_setWallEdgeType( MOT_WALL_EDGE_NONE );		// 壁切れ補正終了
 800fb5c:	2000      	movs	r0, #0
 800fb5e:	f002 fe53 	bl	8012808 <MOT_setWallEdgeType>
	GYRO_endErrChkAngle();
 800fb62:	f7fa f859 	bl	8009c18 <GYRO_endErrChkAngle>
//	CTRL_clrNowData();
	CTRL_setNowData_Err(/*st_data.f_dist,*/st_data.f_ctrl_angle);
 800fb66:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 800fb6a:	eeb0 0a67 	vmov.f32	s0, s15
 800fb6e:	f7f6 fd13 	bl	8006598 <CTRL_setNowData_Err>
}
 800fb72:	bf00      	nop
 800fb74:	37e8      	adds	r7, #232	@ 0xe8
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	2001ad9b 	.word	0x2001ad9b
 800fb80:	00000000 	.word	0x00000000
 800fb84:	3ecccccd 	.word	0x3ecccccd

0800fb88 <MOT_getAccAngle1>:
	CTRL_clrData();
	CTRL_setData(&test);
}

float MOT_getAccAngle1( void )
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_TRUN )->f_speed_accangle;
 800fb8c:	2016      	movs	r0, #22
 800fb8e:	f7f2 fddf 	bl	8002750 <PARAM_getSpeed>
 800fb92:	4603      	mov	r3, r0
 800fb94:	691b      	ldr	r3, [r3, #16]
 800fb96:	ee07 3a90 	vmov	s15, r3
}
 800fb9a:	eeb0 0a67 	vmov.f32	s0, s15
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <MOT_getAccAngle3>:

float MOT_getAccAngle3( void )
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_TRUN )->f_speed_decangle;
 800fba4:	2016      	movs	r0, #22
 800fba6:	f7f2 fdd3 	bl	8002750 <PARAM_getSpeed>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	695b      	ldr	r3, [r3, #20]
 800fbae:	ee07 3a90 	vmov	s15, r3
}
 800fbb2:	eeb0 0a67 	vmov.f32	s0, s15
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <MOT_getJerkAngle>:

float MOT_getJerkAngle( void )
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_TRUN )->f_speed_jerkangle;
 800fbbc:	2016      	movs	r0, #22
 800fbbe:	f7f2 fdc7 	bl	8002750 <PARAM_getSpeed>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	68db      	ldr	r3, [r3, #12]
 800fbc6:	ee07 3a90 	vmov	s15, r3
}
 800fbca:	eeb0 0a67 	vmov.f32	s0, s15
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <MOT_turn>:

void MOT_turn( enMOT_TURN_CMD en_type )
{
 800fbd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fbd4:	b0ca      	sub	sp, #296	@ 0x128
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	4602      	mov	r2, r0
 800fbda:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fbde:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800fbe2:	701a      	strb	r2, [r3, #0]

	float		f_mot_l3_decanglejerk;
	float		f_mot_l3_accanglejerk;
    float		f_mot_l3_decangleconst;

	us_trgtAngleS = 2.8*PI;//500;
 800fbe4:	4b27      	ldr	r3, [pc, #156]	@ (800fc84 <MOT_turn+0xb4>)
 800fbe6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	/* ---------------- */
	/*  動作データ計計算  */
	/* ---------------- */
	st_info.f_mot_jerkAngle = MOT_getJerkAngle();
 800fbea:	f7ff ffe5 	bl	800fbb8 <MOT_getJerkAngle>
 800fbee:	eef0 7a40 	vmov.f32	s15, s0
 800fbf2:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
	/* 加速度 */
	st_info.f_mot_trgtAccAngle1= MOT_getAccAngle1();												// 角加速度1[rad/s^2]
 800fbf6:	f7ff ffc7 	bl	800fb88 <MOT_getAccAngle1>
 800fbfa:	eef0 7a40 	vmov.f32	s15, s0
 800fbfe:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
	st_info.f_mot_trgtAccAngle3= MOT_getAccAngle3();												// 角加速度3[rad/s^2]
 800fc02:	f7ff ffcd 	bl	800fba0 <MOT_getAccAngle3>
 800fc06:	eef0 7a40 	vmov.f32	s15, s0
 800fc0a:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4

	/* 角速度 */
	st_info.f_mot_nowAngleS	= 0;																// 現在角速度
 800fc0e:	f04f 0300 	mov.w	r3, #0
 800fc12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	st_info.f_mot_trgtAngleS= (float)us_trgtAngleS;												// 目標角速度
 800fc16:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800fc1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	st_info.f_mot_lastAngleS= 0;																// 最終角速度
 800fc1e:	f04f 0300 	mov.w	r3, #0
 800fc22:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

	/* 角度 */
	switch( en_type ){
 800fc26:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fc2a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800fc2e:	781b      	ldrb	r3, [r3, #0]
 800fc30:	2b05      	cmp	r3, #5
 800fc32:	d835      	bhi.n	800fca0 <MOT_turn+0xd0>
 800fc34:	a201      	add	r2, pc, #4	@ (adr r2, 800fc3c <MOT_turn+0x6c>)
 800fc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc3a:	bf00      	nop
 800fc3c:	0800fc55 	.word	0x0800fc55
 800fc40:	0800fc5d 	.word	0x0800fc5d
 800fc44:	0800fc65 	.word	0x0800fc65
 800fc48:	0800fc6d 	.word	0x0800fc6d
 800fc4c:	0800fc75 	.word	0x0800fc75
 800fc50:	0800fc7d 	.word	0x0800fc7d
		case MOT_R90:	st_info.f_mot_angle = -PI/2.0 - ANGLE_OFFSET1_R;	break;					// 回転角度[rad]
 800fc54:	4b0c      	ldr	r3, [pc, #48]	@ (800fc88 <MOT_turn+0xb8>)
 800fc56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fc5a:	e025      	b.n	800fca8 <MOT_turn+0xd8>
		case MOT_L90:	st_info.f_mot_angle =  PI/2.0 + ANGLE_OFFSET1;		break;					// 回転角度[rad]
 800fc5c:	4b0b      	ldr	r3, [pc, #44]	@ (800fc8c <MOT_turn+0xbc>)
 800fc5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fc62:	e021      	b.n	800fca8 <MOT_turn+0xd8>
		case MOT_R180:	st_info.f_mot_angle = -PI - ANGLE_OFFSET2_R;	break;					// 回転角度[rad]
 800fc64:	4b0a      	ldr	r3, [pc, #40]	@ (800fc90 <MOT_turn+0xc0>)
 800fc66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fc6a:	e01d      	b.n	800fca8 <MOT_turn+0xd8>
		case MOT_L180:	st_info.f_mot_angle =  PI + ANGLE_OFFSET2;		break;					// 回転角度[rad]
 800fc6c:	4b09      	ldr	r3, [pc, #36]	@ (800fc94 <MOT_turn+0xc4>)
 800fc6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fc72:	e019      	b.n	800fca8 <MOT_turn+0xd8>
		case MOT_R360:	st_info.f_mot_angle = -2.0*PI - ANGLE_OFFSET3;		break;					// 回転角度[rad]
 800fc74:	4b08      	ldr	r3, [pc, #32]	@ (800fc98 <MOT_turn+0xc8>)
 800fc76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fc7a:	e015      	b.n	800fca8 <MOT_turn+0xd8>
		case MOT_L360:	st_info.f_mot_angle =  2.0*PI + ANGLE_OFFSET3;		break;					// 回転角度[rad]
 800fc7c:	4b07      	ldr	r3, [pc, #28]	@ (800fc9c <MOT_turn+0xcc>)
 800fc7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fc82:	e011      	b.n	800fca8 <MOT_turn+0xd8>
 800fc84:	410cbe45 	.word	0x410cbe45
 800fc88:	bfc90fd0 	.word	0xbfc90fd0
 800fc8c:	3fc90fd0 	.word	0x3fc90fd0
 800fc90:	c0490fd0 	.word	0xc0490fd0
 800fc94:	40490fd0 	.word	0x40490fd0
 800fc98:	c0c90fd0 	.word	0xc0c90fd0
 800fc9c:	40c90fd0 	.word	0x40c90fd0
		default:
			printf("error\r\n");
 800fca0:	48f1      	ldr	r0, [pc, #964]	@ (8010068 <MOT_turn+0x498>)
 800fca2:	f00e f8b3 	bl	801de0c <puts>
			break;
 800fca6:	bf00      	nop
	}

	f_accAngleTime1 = st_info.f_mot_trgtAccAngle1/st_info.f_mot_jerkAngle;
 800fca8:	edd7 6a2c 	vldr	s13, [r7, #176]	@ 0xb0
 800fcac:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800fcb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fcb4:	edc7 7a48 	vstr	s15, [r7, #288]	@ 0x120
	f_accAngleTime3 = st_info.f_mot_trgtAccAngle3/st_info.f_mot_jerkAngle;
 800fcb8:	edd7 6a2d 	vldr	s13, [r7, #180]	@ 0xb4
 800fcbc:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800fcc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fcc4:	edc7 7a47 	vstr	s15, [r7, #284]	@ 0x11c

	f_mot_accAnglejerk_v	= 1.0/2.0*st_info.f_mot_jerkAngle*f_accAngleTime1*f_accAngleTime1;//加速度到達時の速度
 800fcc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7f0 fc63 	bl	8000598 <__aeabi_f2d>
 800fcd2:	f04f 0200 	mov.w	r2, #0
 800fcd6:	4be5      	ldr	r3, [pc, #916]	@ (801006c <MOT_turn+0x49c>)
 800fcd8:	f7f0 fcb6 	bl	8000648 <__aeabi_dmul>
 800fcdc:	4602      	mov	r2, r0
 800fcde:	460b      	mov	r3, r1
 800fce0:	4614      	mov	r4, r2
 800fce2:	461d      	mov	r5, r3
 800fce4:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fce8:	f7f0 fc56 	bl	8000598 <__aeabi_f2d>
 800fcec:	4602      	mov	r2, r0
 800fcee:	460b      	mov	r3, r1
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	4629      	mov	r1, r5
 800fcf4:	f7f0 fca8 	bl	8000648 <__aeabi_dmul>
 800fcf8:	4602      	mov	r2, r0
 800fcfa:	460b      	mov	r3, r1
 800fcfc:	4614      	mov	r4, r2
 800fcfe:	461d      	mov	r5, r3
 800fd00:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fd04:	f7f0 fc48 	bl	8000598 <__aeabi_f2d>
 800fd08:	4602      	mov	r2, r0
 800fd0a:	460b      	mov	r3, r1
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	4629      	mov	r1, r5
 800fd10:	f7f0 fc9a 	bl	8000648 <__aeabi_dmul>
 800fd14:	4602      	mov	r2, r0
 800fd16:	460b      	mov	r3, r1
 800fd18:	4610      	mov	r0, r2
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	f7f0 ff8c 	bl	8000c38 <__aeabi_d2f>
 800fd20:	4603      	mov	r3, r0
 800fd22:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	f_mot_l1_accanglejerk	= 1.0/6.0*st_info.f_mot_jerkAngle*f_accAngleTime1*f_accAngleTime1*f_accAngleTime1;
 800fd26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7f0 fc34 	bl	8000598 <__aeabi_f2d>
 800fd30:	a3cb      	add	r3, pc, #812	@ (adr r3, 8010060 <MOT_turn+0x490>)
 800fd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd36:	f7f0 fc87 	bl	8000648 <__aeabi_dmul>
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	4614      	mov	r4, r2
 800fd40:	461d      	mov	r5, r3
 800fd42:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fd46:	f7f0 fc27 	bl	8000598 <__aeabi_f2d>
 800fd4a:	4602      	mov	r2, r0
 800fd4c:	460b      	mov	r3, r1
 800fd4e:	4620      	mov	r0, r4
 800fd50:	4629      	mov	r1, r5
 800fd52:	f7f0 fc79 	bl	8000648 <__aeabi_dmul>
 800fd56:	4602      	mov	r2, r0
 800fd58:	460b      	mov	r3, r1
 800fd5a:	4614      	mov	r4, r2
 800fd5c:	461d      	mov	r5, r3
 800fd5e:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fd62:	f7f0 fc19 	bl	8000598 <__aeabi_f2d>
 800fd66:	4602      	mov	r2, r0
 800fd68:	460b      	mov	r3, r1
 800fd6a:	4620      	mov	r0, r4
 800fd6c:	4629      	mov	r1, r5
 800fd6e:	f7f0 fc6b 	bl	8000648 <__aeabi_dmul>
 800fd72:	4602      	mov	r2, r0
 800fd74:	460b      	mov	r3, r1
 800fd76:	4614      	mov	r4, r2
 800fd78:	461d      	mov	r5, r3
 800fd7a:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fd7e:	f7f0 fc0b 	bl	8000598 <__aeabi_f2d>
 800fd82:	4602      	mov	r2, r0
 800fd84:	460b      	mov	r3, r1
 800fd86:	4620      	mov	r0, r4
 800fd88:	4629      	mov	r1, r5
 800fd8a:	f7f0 fc5d 	bl	8000648 <__aeabi_dmul>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	460b      	mov	r3, r1
 800fd92:	4610      	mov	r0, r2
 800fd94:	4619      	mov	r1, r3
 800fd96:	f7f0 ff4f 	bl	8000c38 <__aeabi_d2f>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	f_mot_l1_decanglejerk	= 1.0/6.0*st_info.f_mot_jerkAngle*(-1.0)*f_accAngleTime1*f_accAngleTime1*f_accAngleTime1 + (st_info.f_mot_trgtAngleS-f_mot_accAnglejerk_v)*f_accAngleTime1 + 1.0/2.0* st_info.f_mot_trgtAccAngle1 *f_accAngleTime1*f_accAngleTime1;
 800fda0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7f0 fbf7 	bl	8000598 <__aeabi_f2d>
 800fdaa:	a3ad      	add	r3, pc, #692	@ (adr r3, 8010060 <MOT_turn+0x490>)
 800fdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb0:	f7f0 fc4a 	bl	8000648 <__aeabi_dmul>
 800fdb4:	4602      	mov	r2, r0
 800fdb6:	460b      	mov	r3, r1
 800fdb8:	4690      	mov	r8, r2
 800fdba:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800fdbe:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fdc2:	f7f0 fbe9 	bl	8000598 <__aeabi_f2d>
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	460b      	mov	r3, r1
 800fdca:	4640      	mov	r0, r8
 800fdcc:	4649      	mov	r1, r9
 800fdce:	f7f0 fc3b 	bl	8000648 <__aeabi_dmul>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	4614      	mov	r4, r2
 800fdd8:	461d      	mov	r5, r3
 800fdda:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fdde:	f7f0 fbdb 	bl	8000598 <__aeabi_f2d>
 800fde2:	4602      	mov	r2, r0
 800fde4:	460b      	mov	r3, r1
 800fde6:	4620      	mov	r0, r4
 800fde8:	4629      	mov	r1, r5
 800fdea:	f7f0 fc2d 	bl	8000648 <__aeabi_dmul>
 800fdee:	4602      	mov	r2, r0
 800fdf0:	460b      	mov	r3, r1
 800fdf2:	4614      	mov	r4, r2
 800fdf4:	461d      	mov	r5, r3
 800fdf6:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fdfa:	f7f0 fbcd 	bl	8000598 <__aeabi_f2d>
 800fdfe:	4602      	mov	r2, r0
 800fe00:	460b      	mov	r3, r1
 800fe02:	4620      	mov	r0, r4
 800fe04:	4629      	mov	r1, r5
 800fe06:	f7f0 fc1f 	bl	8000648 <__aeabi_dmul>
 800fe0a:	4602      	mov	r2, r0
 800fe0c:	460b      	mov	r3, r1
 800fe0e:	4614      	mov	r4, r2
 800fe10:	461d      	mov	r5, r3
 800fe12:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 800fe16:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 800fe1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fe1e:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 800fe22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe26:	ee17 0a90 	vmov	r0, s15
 800fe2a:	f7f0 fbb5 	bl	8000598 <__aeabi_f2d>
 800fe2e:	4602      	mov	r2, r0
 800fe30:	460b      	mov	r3, r1
 800fe32:	4620      	mov	r0, r4
 800fe34:	4629      	mov	r1, r5
 800fe36:	f7f0 fa51 	bl	80002dc <__adddf3>
 800fe3a:	4602      	mov	r2, r0
 800fe3c:	460b      	mov	r3, r1
 800fe3e:	4690      	mov	r8, r2
 800fe40:	4699      	mov	r9, r3
 800fe42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7f0 fba6 	bl	8000598 <__aeabi_f2d>
 800fe4c:	f04f 0200 	mov.w	r2, #0
 800fe50:	4b86      	ldr	r3, [pc, #536]	@ (801006c <MOT_turn+0x49c>)
 800fe52:	f7f0 fbf9 	bl	8000648 <__aeabi_dmul>
 800fe56:	4602      	mov	r2, r0
 800fe58:	460b      	mov	r3, r1
 800fe5a:	4614      	mov	r4, r2
 800fe5c:	461d      	mov	r5, r3
 800fe5e:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fe62:	f7f0 fb99 	bl	8000598 <__aeabi_f2d>
 800fe66:	4602      	mov	r2, r0
 800fe68:	460b      	mov	r3, r1
 800fe6a:	4620      	mov	r0, r4
 800fe6c:	4629      	mov	r1, r5
 800fe6e:	f7f0 fbeb 	bl	8000648 <__aeabi_dmul>
 800fe72:	4602      	mov	r2, r0
 800fe74:	460b      	mov	r3, r1
 800fe76:	4614      	mov	r4, r2
 800fe78:	461d      	mov	r5, r3
 800fe7a:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800fe7e:	f7f0 fb8b 	bl	8000598 <__aeabi_f2d>
 800fe82:	4602      	mov	r2, r0
 800fe84:	460b      	mov	r3, r1
 800fe86:	4620      	mov	r0, r4
 800fe88:	4629      	mov	r1, r5
 800fe8a:	f7f0 fbdd 	bl	8000648 <__aeabi_dmul>
 800fe8e:	4602      	mov	r2, r0
 800fe90:	460b      	mov	r3, r1
 800fe92:	4640      	mov	r0, r8
 800fe94:	4649      	mov	r1, r9
 800fe96:	f7f0 fa21 	bl	80002dc <__adddf3>
 800fe9a:	4602      	mov	r2, r0
 800fe9c:	460b      	mov	r3, r1
 800fe9e:	4610      	mov	r0, r2
 800fea0:	4619      	mov	r1, r3
 800fea2:	f7f0 fec9 	bl	8000c38 <__aeabi_d2f>
 800fea6:	4603      	mov	r3, r0
 800fea8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    f_mot_l1_accangleconst		= ((us_trgtAngleS-f_mot_accAnglejerk_v)*(us_trgtAngleS-f_mot_accAnglejerk_v)
 800feac:	ed97 7a49 	vldr	s14, [r7, #292]	@ 0x124
 800feb0:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 800feb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800feb8:	edd7 6a49 	vldr	s13, [r7, #292]	@ 0x124
 800febc:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 800fec0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fec8:	ee17 0a90 	vmov	r0, s15
 800fecc:	f7f0 fb64 	bl	8000598 <__aeabi_f2d>
 800fed0:	4604      	mov	r4, r0
 800fed2:	460d      	mov	r5, r1
                                -(0.0+f_mot_accAnglejerk_v)*(0.0+f_mot_accAnglejerk_v))
 800fed4:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800fed8:	f7f0 fb5e 	bl	8000598 <__aeabi_f2d>
 800fedc:	f04f 0200 	mov.w	r2, #0
 800fee0:	f04f 0300 	mov.w	r3, #0
 800fee4:	f7f0 f9fa 	bl	80002dc <__adddf3>
 800fee8:	4602      	mov	r2, r0
 800feea:	460b      	mov	r3, r1
 800feec:	4690      	mov	r8, r2
 800feee:	4699      	mov	r9, r3
 800fef0:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800fef4:	f7f0 fb50 	bl	8000598 <__aeabi_f2d>
 800fef8:	f04f 0200 	mov.w	r2, #0
 800fefc:	f04f 0300 	mov.w	r3, #0
 800ff00:	f7f0 f9ec 	bl	80002dc <__adddf3>
 800ff04:	4602      	mov	r2, r0
 800ff06:	460b      	mov	r3, r1
 800ff08:	4640      	mov	r0, r8
 800ff0a:	4649      	mov	r1, r9
 800ff0c:	f7f0 fb9c 	bl	8000648 <__aeabi_dmul>
 800ff10:	4602      	mov	r2, r0
 800ff12:	460b      	mov	r3, r1
 800ff14:	4620      	mov	r0, r4
 800ff16:	4629      	mov	r1, r5
 800ff18:	f7f0 f9de 	bl	80002d8 <__aeabi_dsub>
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	460b      	mov	r3, r1
 800ff20:	4614      	mov	r4, r2
 800ff22:	461d      	mov	r5, r3
                                /( st_info.f_mot_trgtAccAngle1 * 2.0 );
 800ff24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7f0 fb35 	bl	8000598 <__aeabi_f2d>
 800ff2e:	4602      	mov	r2, r0
 800ff30:	460b      	mov	r3, r1
 800ff32:	f7f0 f9d3 	bl	80002dc <__adddf3>
 800ff36:	4602      	mov	r2, r0
 800ff38:	460b      	mov	r3, r1
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	f7f0 fcad 	bl	800089c <__aeabi_ddiv>
 800ff42:	4602      	mov	r2, r0
 800ff44:	460b      	mov	r3, r1
    f_mot_l1_accangleconst		= ((us_trgtAngleS-f_mot_accAnglejerk_v)*(us_trgtAngleS-f_mot_accAnglejerk_v)
 800ff46:	4610      	mov	r0, r2
 800ff48:	4619      	mov	r1, r3
 800ff4a:	f7f0 fe75 	bl	8000c38 <__aeabi_d2f>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	f_angle1 = f_mot_l1_accanglejerk+f_mot_l1_decanglejerk+f_mot_l1_accangleconst;
 800ff54:	ed97 7a45 	vldr	s14, [r7, #276]	@ 0x114
 800ff58:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 800ff5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff60:	ed97 7a43 	vldr	s14, [r7, #268]	@ 0x10c
 800ff64:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff68:	edc7 7a42 	vstr	s15, [r7, #264]	@ 0x108

	f_mot_accAnglejerk_v	= 1.0/2.0*st_info.f_mot_jerkAngle*f_accAngleTime3*f_accAngleTime3;//加速度到達時の速度
 800ff6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7f0 fb11 	bl	8000598 <__aeabi_f2d>
 800ff76:	f04f 0200 	mov.w	r2, #0
 800ff7a:	4b3c      	ldr	r3, [pc, #240]	@ (801006c <MOT_turn+0x49c>)
 800ff7c:	f7f0 fb64 	bl	8000648 <__aeabi_dmul>
 800ff80:	4602      	mov	r2, r0
 800ff82:	460b      	mov	r3, r1
 800ff84:	4614      	mov	r4, r2
 800ff86:	461d      	mov	r5, r3
 800ff88:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800ff8c:	f7f0 fb04 	bl	8000598 <__aeabi_f2d>
 800ff90:	4602      	mov	r2, r0
 800ff92:	460b      	mov	r3, r1
 800ff94:	4620      	mov	r0, r4
 800ff96:	4629      	mov	r1, r5
 800ff98:	f7f0 fb56 	bl	8000648 <__aeabi_dmul>
 800ff9c:	4602      	mov	r2, r0
 800ff9e:	460b      	mov	r3, r1
 800ffa0:	4614      	mov	r4, r2
 800ffa2:	461d      	mov	r5, r3
 800ffa4:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800ffa8:	f7f0 faf6 	bl	8000598 <__aeabi_f2d>
 800ffac:	4602      	mov	r2, r0
 800ffae:	460b      	mov	r3, r1
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	4629      	mov	r1, r5
 800ffb4:	f7f0 fb48 	bl	8000648 <__aeabi_dmul>
 800ffb8:	4602      	mov	r2, r0
 800ffba:	460b      	mov	r3, r1
 800ffbc:	4610      	mov	r0, r2
 800ffbe:	4619      	mov	r1, r3
 800ffc0:	f7f0 fe3a 	bl	8000c38 <__aeabi_d2f>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	f_mot_l3_decanglejerk	= 1.0/6.0*st_info.f_mot_jerkAngle*(-1.0)*f_accAngleTime3*f_accAngleTime3*f_accAngleTime3 + st_info.f_mot_trgtAngleS*f_accAngleTime3;
 800ffca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7f0 fae2 	bl	8000598 <__aeabi_f2d>
 800ffd4:	a322      	add	r3, pc, #136	@ (adr r3, 8010060 <MOT_turn+0x490>)
 800ffd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffda:	f7f0 fb35 	bl	8000648 <__aeabi_dmul>
 800ffde:	4602      	mov	r2, r0
 800ffe0:	460b      	mov	r3, r1
 800ffe2:	60ba      	str	r2, [r7, #8]
 800ffe4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800ffe8:	60fb      	str	r3, [r7, #12]
 800ffea:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800ffee:	f7f0 fad3 	bl	8000598 <__aeabi_f2d>
 800fff2:	4602      	mov	r2, r0
 800fff4:	460b      	mov	r3, r1
 800fff6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fffa:	f7f0 fb25 	bl	8000648 <__aeabi_dmul>
 800fffe:	4602      	mov	r2, r0
 8010000:	460b      	mov	r3, r1
 8010002:	4614      	mov	r4, r2
 8010004:	461d      	mov	r5, r3
 8010006:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 801000a:	f7f0 fac5 	bl	8000598 <__aeabi_f2d>
 801000e:	4602      	mov	r2, r0
 8010010:	460b      	mov	r3, r1
 8010012:	4620      	mov	r0, r4
 8010014:	4629      	mov	r1, r5
 8010016:	f7f0 fb17 	bl	8000648 <__aeabi_dmul>
 801001a:	4602      	mov	r2, r0
 801001c:	460b      	mov	r3, r1
 801001e:	4614      	mov	r4, r2
 8010020:	461d      	mov	r5, r3
 8010022:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8010026:	f7f0 fab7 	bl	8000598 <__aeabi_f2d>
 801002a:	4602      	mov	r2, r0
 801002c:	460b      	mov	r3, r1
 801002e:	4620      	mov	r0, r4
 8010030:	4629      	mov	r1, r5
 8010032:	f7f0 fb09 	bl	8000648 <__aeabi_dmul>
 8010036:	4602      	mov	r2, r0
 8010038:	460b      	mov	r3, r1
 801003a:	4614      	mov	r4, r2
 801003c:	461d      	mov	r5, r3
 801003e:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8010042:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8010046:	ee67 7a27 	vmul.f32	s15, s14, s15
 801004a:	ee17 0a90 	vmov	r0, s15
 801004e:	f7f0 faa3 	bl	8000598 <__aeabi_f2d>
 8010052:	4602      	mov	r2, r0
 8010054:	460b      	mov	r3, r1
 8010056:	4620      	mov	r0, r4
 8010058:	4629      	mov	r1, r5
 801005a:	f7f0 f93f 	bl	80002dc <__adddf3>
 801005e:	e007      	b.n	8010070 <MOT_turn+0x4a0>
 8010060:	55555555 	.word	0x55555555
 8010064:	3fc55555 	.word	0x3fc55555
 8010068:	08021d64 	.word	0x08021d64
 801006c:	3fe00000 	.word	0x3fe00000
 8010070:	4602      	mov	r2, r0
 8010072:	460b      	mov	r3, r1
 8010074:	4610      	mov	r0, r2
 8010076:	4619      	mov	r1, r3
 8010078:	f7f0 fdde 	bl	8000c38 <__aeabi_d2f>
 801007c:	4603      	mov	r3, r0
 801007e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	f_mot_l3_accanglejerk	= 1.0/6.0*st_info.f_mot_jerkAngle*f_accAngleTime3*f_accAngleTime3*f_accAngleTime3 + f_mot_accAnglejerk_v*f_accAngleTime3 + 1.0/2.0* st_info.f_mot_trgtAccAngle3*(-1.0) *f_accAngleTime1*f_accAngleTime1;
 8010082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010086:	4618      	mov	r0, r3
 8010088:	f7f0 fa86 	bl	8000598 <__aeabi_f2d>
 801008c:	a3f8      	add	r3, pc, #992	@ (adr r3, 8010470 <MOT_turn+0x8a0>)
 801008e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010092:	f7f0 fad9 	bl	8000648 <__aeabi_dmul>
 8010096:	4602      	mov	r2, r0
 8010098:	460b      	mov	r3, r1
 801009a:	4614      	mov	r4, r2
 801009c:	461d      	mov	r5, r3
 801009e:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80100a2:	f7f0 fa79 	bl	8000598 <__aeabi_f2d>
 80100a6:	4602      	mov	r2, r0
 80100a8:	460b      	mov	r3, r1
 80100aa:	4620      	mov	r0, r4
 80100ac:	4629      	mov	r1, r5
 80100ae:	f7f0 facb 	bl	8000648 <__aeabi_dmul>
 80100b2:	4602      	mov	r2, r0
 80100b4:	460b      	mov	r3, r1
 80100b6:	4614      	mov	r4, r2
 80100b8:	461d      	mov	r5, r3
 80100ba:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80100be:	f7f0 fa6b 	bl	8000598 <__aeabi_f2d>
 80100c2:	4602      	mov	r2, r0
 80100c4:	460b      	mov	r3, r1
 80100c6:	4620      	mov	r0, r4
 80100c8:	4629      	mov	r1, r5
 80100ca:	f7f0 fabd 	bl	8000648 <__aeabi_dmul>
 80100ce:	4602      	mov	r2, r0
 80100d0:	460b      	mov	r3, r1
 80100d2:	4614      	mov	r4, r2
 80100d4:	461d      	mov	r5, r3
 80100d6:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80100da:	f7f0 fa5d 	bl	8000598 <__aeabi_f2d>
 80100de:	4602      	mov	r2, r0
 80100e0:	460b      	mov	r3, r1
 80100e2:	4620      	mov	r0, r4
 80100e4:	4629      	mov	r1, r5
 80100e6:	f7f0 faaf 	bl	8000648 <__aeabi_dmul>
 80100ea:	4602      	mov	r2, r0
 80100ec:	460b      	mov	r3, r1
 80100ee:	4614      	mov	r4, r2
 80100f0:	461d      	mov	r5, r3
 80100f2:	ed97 7a46 	vldr	s14, [r7, #280]	@ 0x118
 80100f6:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 80100fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100fe:	ee17 0a90 	vmov	r0, s15
 8010102:	f7f0 fa49 	bl	8000598 <__aeabi_f2d>
 8010106:	4602      	mov	r2, r0
 8010108:	460b      	mov	r3, r1
 801010a:	4620      	mov	r0, r4
 801010c:	4629      	mov	r1, r5
 801010e:	f7f0 f8e5 	bl	80002dc <__adddf3>
 8010112:	4602      	mov	r2, r0
 8010114:	460b      	mov	r3, r1
 8010116:	4614      	mov	r4, r2
 8010118:	461d      	mov	r5, r3
 801011a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801011e:	4618      	mov	r0, r3
 8010120:	f7f0 fa3a 	bl	8000598 <__aeabi_f2d>
 8010124:	f04f 0200 	mov.w	r2, #0
 8010128:	4bcf      	ldr	r3, [pc, #828]	@ (8010468 <MOT_turn+0x898>)
 801012a:	f7f0 fa8d 	bl	8000648 <__aeabi_dmul>
 801012e:	4602      	mov	r2, r0
 8010130:	460b      	mov	r3, r1
 8010132:	603a      	str	r2, [r7, #0]
 8010134:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8010138:	607b      	str	r3, [r7, #4]
 801013a:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 801013e:	f7f0 fa2b 	bl	8000598 <__aeabi_f2d>
 8010142:	4602      	mov	r2, r0
 8010144:	460b      	mov	r3, r1
 8010146:	e9d7 0100 	ldrd	r0, r1, [r7]
 801014a:	f7f0 fa7d 	bl	8000648 <__aeabi_dmul>
 801014e:	4602      	mov	r2, r0
 8010150:	460b      	mov	r3, r1
 8010152:	4690      	mov	r8, r2
 8010154:	4699      	mov	r9, r3
 8010156:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 801015a:	f7f0 fa1d 	bl	8000598 <__aeabi_f2d>
 801015e:	4602      	mov	r2, r0
 8010160:	460b      	mov	r3, r1
 8010162:	4640      	mov	r0, r8
 8010164:	4649      	mov	r1, r9
 8010166:	f7f0 fa6f 	bl	8000648 <__aeabi_dmul>
 801016a:	4602      	mov	r2, r0
 801016c:	460b      	mov	r3, r1
 801016e:	4620      	mov	r0, r4
 8010170:	4629      	mov	r1, r5
 8010172:	f7f0 f8b3 	bl	80002dc <__adddf3>
 8010176:	4602      	mov	r2, r0
 8010178:	460b      	mov	r3, r1
 801017a:	4610      	mov	r0, r2
 801017c:	4619      	mov	r1, r3
 801017e:	f7f0 fd5b 	bl	8000c38 <__aeabi_d2f>
 8010182:	4603      	mov	r3, r0
 8010184:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    f_mot_l3_decangleconst		= ((0.0+f_mot_accAnglejerk_v)*(0.0+f_mot_accAnglejerk_v)
 8010188:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 801018c:	f7f0 fa04 	bl	8000598 <__aeabi_f2d>
 8010190:	f04f 0200 	mov.w	r2, #0
 8010194:	f04f 0300 	mov.w	r3, #0
 8010198:	f7f0 f8a0 	bl	80002dc <__adddf3>
 801019c:	4602      	mov	r2, r0
 801019e:	460b      	mov	r3, r1
 80101a0:	4614      	mov	r4, r2
 80101a2:	461d      	mov	r5, r3
 80101a4:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80101a8:	f7f0 f9f6 	bl	8000598 <__aeabi_f2d>
 80101ac:	f04f 0200 	mov.w	r2, #0
 80101b0:	f04f 0300 	mov.w	r3, #0
 80101b4:	f7f0 f892 	bl	80002dc <__adddf3>
 80101b8:	4602      	mov	r2, r0
 80101ba:	460b      	mov	r3, r1
 80101bc:	4620      	mov	r0, r4
 80101be:	4629      	mov	r1, r5
 80101c0:	f7f0 fa42 	bl	8000648 <__aeabi_dmul>
 80101c4:	4602      	mov	r2, r0
 80101c6:	460b      	mov	r3, r1
 80101c8:	4614      	mov	r4, r2
 80101ca:	461d      	mov	r5, r3
                                -(us_trgtAngleS-f_mot_accAnglejerk_v)*(us_trgtAngleS-f_mot_accAnglejerk_v))
 80101cc:	ed97 7a49 	vldr	s14, [r7, #292]	@ 0x124
 80101d0:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 80101d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80101d8:	edd7 6a49 	vldr	s13, [r7, #292]	@ 0x124
 80101dc:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 80101e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80101e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101e8:	ee17 0a90 	vmov	r0, s15
 80101ec:	f7f0 f9d4 	bl	8000598 <__aeabi_f2d>
 80101f0:	4602      	mov	r2, r0
 80101f2:	460b      	mov	r3, r1
 80101f4:	4620      	mov	r0, r4
 80101f6:	4629      	mov	r1, r5
 80101f8:	f7f0 f86e 	bl	80002d8 <__aeabi_dsub>
 80101fc:	4602      	mov	r2, r0
 80101fe:	460b      	mov	r3, r1
 8010200:	4614      	mov	r4, r2
 8010202:	461d      	mov	r5, r3
                                /( st_info.f_mot_trgtAccAngle3 *(-1.0)* 2.0 );
 8010204:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010208:	4618      	mov	r0, r3
 801020a:	f7f0 f9c5 	bl	8000598 <__aeabi_f2d>
 801020e:	4602      	mov	r2, r0
 8010210:	460b      	mov	r3, r1
 8010212:	4692      	mov	sl, r2
 8010214:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8010218:	4652      	mov	r2, sl
 801021a:	465b      	mov	r3, fp
 801021c:	4650      	mov	r0, sl
 801021e:	4659      	mov	r1, fp
 8010220:	f7f0 f85c 	bl	80002dc <__adddf3>
 8010224:	4602      	mov	r2, r0
 8010226:	460b      	mov	r3, r1
 8010228:	4620      	mov	r0, r4
 801022a:	4629      	mov	r1, r5
 801022c:	f7f0 fb36 	bl	800089c <__aeabi_ddiv>
 8010230:	4602      	mov	r2, r0
 8010232:	460b      	mov	r3, r1
    f_mot_l3_decangleconst		= ((0.0+f_mot_accAnglejerk_v)*(0.0+f_mot_accAnglejerk_v)
 8010234:	4610      	mov	r0, r2
 8010236:	4619      	mov	r1, r3
 8010238:	f7f0 fcfe 	bl	8000c38 <__aeabi_d2f>
 801023c:	4603      	mov	r3, r0
 801023e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

	f_angle3 = f_mot_l3_decanglejerk+f_mot_l3_accanglejerk+f_mot_l3_decangleconst;
 8010242:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8010246:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 801024a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801024e:	ed97 7a3f 	vldr	s14, [r7, #252]	@ 0xfc
 8010252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010256:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

//	f_angle3 = ( st_info.f_mot_trgtAngleS - st_info.f_mot_lastAngleS ) / 2.0 * ( st_info.f_mot_trgtAngleS - st_info.f_mot_lastAngleS ) / st_info.f_mot_accAngleS3;						// 第3移動角度[rad]
//	f_angle1 = ( 0.0 - st_info.f_mot_trgtAngleS) / 2.0 * ( 0.0 - st_info.f_mot_trgtAngleS ) / st_info.f_mot_accAngleS1;

	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 801025a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801025e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010262:	781b      	ldrb	r3, [r3, #0]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d00e      	beq.n	8010286 <MOT_turn+0x6b6>
 8010268:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801026c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	2b02      	cmp	r3, #2
 8010274:	d007      	beq.n	8010286 <MOT_turn+0x6b6>
 8010276:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801027a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 801027e:	781b      	ldrb	r3, [r3, #0]
 8010280:	2b04      	cmp	r3, #4
 8010282:	f040 80f9 	bne.w	8010478 <MOT_turn+0x8a8>
		st_info.f_mot_jerkAngle *= -1.0;
 8010286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801028a:	4618      	mov	r0, r3
 801028c:	f7f0 f984 	bl	8000598 <__aeabi_f2d>
 8010290:	4602      	mov	r2, r0
 8010292:	460b      	mov	r3, r1
 8010294:	4610      	mov	r0, r2
 8010296:	4619      	mov	r1, r3
 8010298:	f7f0 fcce 	bl	8000c38 <__aeabi_d2f>
 801029c:	4603      	mov	r3, r0
 801029e:	ee07 3a90 	vmov	s15, r3
 80102a2:	eef1 7a67 	vneg.f32	s15, s15
 80102a6:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
		st_info.f_mot_trgtAngleS*= -1.0;															// 回転方向を逆にする
 80102aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7f0 f972 	bl	8000598 <__aeabi_f2d>
 80102b4:	4602      	mov	r2, r0
 80102b6:	460b      	mov	r3, r1
 80102b8:	4610      	mov	r0, r2
 80102ba:	4619      	mov	r1, r3
 80102bc:	f7f0 fcbc 	bl	8000c38 <__aeabi_d2f>
 80102c0:	4603      	mov	r3, r0
 80102c2:	ee07 3a90 	vmov	s15, r3
 80102c6:	eef1 7a67 	vneg.f32	s15, s15
 80102ca:	edc7 7a33 	vstr	s15, [r7, #204]	@ 0xcc
		f_angle1			*= -1.0;
 80102ce:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80102d2:	f7f0 f961 	bl	8000598 <__aeabi_f2d>
 80102d6:	4602      	mov	r2, r0
 80102d8:	460b      	mov	r3, r1
 80102da:	4610      	mov	r0, r2
 80102dc:	4619      	mov	r1, r3
 80102de:	f7f0 fcab 	bl	8000c38 <__aeabi_d2f>
 80102e2:	4603      	mov	r3, r0
 80102e4:	ee07 3a90 	vmov	s15, r3
 80102e8:	eef1 7a67 	vneg.f32	s15, s15
 80102ec:	edc7 7a42 	vstr	s15, [r7, #264]	@ 0x108
//		f_angle2 			*= -1;															// 回転方向を逆にする
		f_angle3 			*= -1.0;															// 回転方向を逆にする
 80102f0:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 80102f4:	f7f0 f950 	bl	8000598 <__aeabi_f2d>
 80102f8:	4602      	mov	r2, r0
 80102fa:	460b      	mov	r3, r1
 80102fc:	4610      	mov	r0, r2
 80102fe:	4619      	mov	r1, r3
 8010300:	f7f0 fc9a 	bl	8000c38 <__aeabi_d2f>
 8010304:	4603      	mov	r3, r0
 8010306:	ee07 3a90 	vmov	s15, r3
 801030a:	eef1 7a67 	vneg.f32	s15, s15
 801030e:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

		st_info.f_mot_trgtAccAngle1*= -1.0;												// 角加速度1[rad/s^2]
 8010312:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8010316:	4618      	mov	r0, r3
 8010318:	f7f0 f93e 	bl	8000598 <__aeabi_f2d>
 801031c:	4602      	mov	r2, r0
 801031e:	460b      	mov	r3, r1
 8010320:	4610      	mov	r0, r2
 8010322:	4619      	mov	r1, r3
 8010324:	f7f0 fc88 	bl	8000c38 <__aeabi_d2f>
 8010328:	4603      	mov	r3, r0
 801032a:	ee07 3a90 	vmov	s15, r3
 801032e:	eef1 7a67 	vneg.f32	s15, s15
 8010332:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
		st_info.f_mot_trgtAccAngle3*= -1.0;
 8010336:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801033a:	4618      	mov	r0, r3
 801033c:	f7f0 f92c 	bl	8000598 <__aeabi_f2d>
 8010340:	4602      	mov	r2, r0
 8010342:	460b      	mov	r3, r1
 8010344:	4610      	mov	r0, r2
 8010346:	4619      	mov	r1, r3
 8010348:	f7f0 fc76 	bl	8000c38 <__aeabi_d2f>
 801034c:	4603      	mov	r3, r0
 801034e:	ee07 3a90 	vmov	s15, r3
 8010352:	eef1 7a67 	vneg.f32	s15, s15
 8010356:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4

		st_info.f_mot_l1_accanglejerk	= f_mot_l1_accanglejerk	* (-1.0);
 801035a:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 801035e:	f7f0 f91b 	bl	8000598 <__aeabi_f2d>
 8010362:	4602      	mov	r2, r0
 8010364:	460b      	mov	r3, r1
 8010366:	4610      	mov	r0, r2
 8010368:	4619      	mov	r1, r3
 801036a:	f7f0 fc65 	bl	8000c38 <__aeabi_d2f>
 801036e:	4603      	mov	r3, r0
 8010370:	ee07 3a90 	vmov	s15, r3
 8010374:	eef1 7a67 	vneg.f32	s15, s15
 8010378:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
		st_info.f_mot_l1_decanglejerk	= f_mot_l1_decanglejerk	* (-1.0);
 801037c:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8010380:	f7f0 f90a 	bl	8000598 <__aeabi_f2d>
 8010384:	4602      	mov	r2, r0
 8010386:	460b      	mov	r3, r1
 8010388:	4610      	mov	r0, r2
 801038a:	4619      	mov	r1, r3
 801038c:	f7f0 fc54 	bl	8000c38 <__aeabi_d2f>
 8010390:	4603      	mov	r3, r0
 8010392:	ee07 3a90 	vmov	s15, r3
 8010396:	eef1 7a67 	vneg.f32	s15, s15
 801039a:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8
		st_info.f_mot_l1_accangleconst		= f_mot_l1_accangleconst		* (-1.0);
 801039e:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80103a2:	f7f0 f8f9 	bl	8000598 <__aeabi_f2d>
 80103a6:	4602      	mov	r2, r0
 80103a8:	460b      	mov	r3, r1
 80103aa:	4610      	mov	r0, r2
 80103ac:	4619      	mov	r1, r3
 80103ae:	f7f0 fc43 	bl	8000c38 <__aeabi_d2f>
 80103b2:	4603      	mov	r3, r0
 80103b4:	ee07 3a90 	vmov	s15, r3
 80103b8:	eef1 7a67 	vneg.f32	s15, s15
 80103bc:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
		st_info.f_mot_accAnglejerk_v = f_mot_accAnglejerk_v * (-1.0);
 80103c0:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80103c4:	f7f0 f8e8 	bl	8000598 <__aeabi_f2d>
 80103c8:	4602      	mov	r2, r0
 80103ca:	460b      	mov	r3, r1
 80103cc:	4610      	mov	r0, r2
 80103ce:	4619      	mov	r1, r3
 80103d0:	f7f0 fc32 	bl	8000c38 <__aeabi_d2f>
 80103d4:	4603      	mov	r3, r0
 80103d6:	ee07 3a90 	vmov	s15, r3
 80103da:	eef1 7a67 	vneg.f32	s15, s15
 80103de:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4

		st_info.f_mot_l3_decanglejerk	= f_mot_l3_decanglejerk	* (-1.0);
 80103e2:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 80103e6:	f7f0 f8d7 	bl	8000598 <__aeabi_f2d>
 80103ea:	4602      	mov	r2, r0
 80103ec:	460b      	mov	r3, r1
 80103ee:	4610      	mov	r0, r2
 80103f0:	4619      	mov	r1, r3
 80103f2:	f7f0 fc21 	bl	8000c38 <__aeabi_d2f>
 80103f6:	4603      	mov	r3, r0
 80103f8:	ee07 3a90 	vmov	s15, r3
 80103fc:	eef1 7a67 	vneg.f32	s15, s15
 8010400:	edc7 7a3b 	vstr	s15, [r7, #236]	@ 0xec
		st_info.f_mot_l3_accanglejerk	= f_mot_l3_accanglejerk	* (-1.0);
 8010404:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8010408:	f7f0 f8c6 	bl	8000598 <__aeabi_f2d>
 801040c:	4602      	mov	r2, r0
 801040e:	460b      	mov	r3, r1
 8010410:	4610      	mov	r0, r2
 8010412:	4619      	mov	r1, r3
 8010414:	f7f0 fc10 	bl	8000c38 <__aeabi_d2f>
 8010418:	4603      	mov	r3, r0
 801041a:	ee07 3a90 	vmov	s15, r3
 801041e:	eef1 7a67 	vneg.f32	s15, s15
 8010422:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
    	st_info.f_mot_l3_decangleconst		= f_mot_l3_decangleconst		* (-1.0);
 8010426:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 801042a:	f7f0 f8b5 	bl	8000598 <__aeabi_f2d>
 801042e:	4602      	mov	r2, r0
 8010430:	460b      	mov	r3, r1
 8010432:	4610      	mov	r0, r2
 8010434:	4619      	mov	r1, r3
 8010436:	f7f0 fbff 	bl	8000c38 <__aeabi_d2f>
 801043a:	4603      	mov	r3, r0
 801043c:	ee07 3a90 	vmov	s15, r3
 8010440:	eef1 7a67 	vneg.f32	s15, s15
 8010444:	edc7 7a3c 	vstr	s15, [r7, #240]	@ 0xf0

		st_info.f_mot_angle1	= f_angle1;						// 第1移動角度[rad]
 8010448:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801044c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		st_info.f_mot_angle1_2	= st_info.f_mot_angle - f_angle3;									// 第1+2移動角度[rad]
 8010450:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 8010454:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8010458:	ee77 7a67 	vsub.f32	s15, s14, s15
 801045c:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
		en_TurnType			= Right;
 8010460:	4b02      	ldr	r3, [pc, #8]	@ (801046c <MOT_turn+0x89c>)
 8010462:	2200      	movs	r2, #0
 8010464:	701a      	strb	r2, [r3, #0]
 8010466:	e032      	b.n	80104ce <MOT_turn+0x8fe>
 8010468:	3fe00000 	.word	0x3fe00000
 801046c:	20017bec 	.word	0x20017bec
 8010470:	55555555 	.word	0x55555555
 8010474:	3fc55555 	.word	0x3fc55555
//		if( st_info.f_mot_angle1 > ( A1_MIN * -1.0 ) ){
//			st_info.f_mot_angle1 = A1_MIN * -1.0;
//		}
	}
	else{
		st_info.f_mot_l1_accanglejerk	= f_mot_l1_accanglejerk;
 8010478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801047c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
		st_info.f_mot_l1_decanglejerk	= f_mot_l1_decanglejerk;
 8010480:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8010484:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
		st_info.f_mot_l1_accangleconst		= f_mot_l1_accangleconst;
 8010488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801048c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		st_info.f_mot_accAnglejerk_v = f_mot_accAnglejerk_v;
 8010490:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8010494:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

		st_info.f_mot_l3_decanglejerk	= f_mot_l3_decanglejerk;
 8010498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801049c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
		st_info.f_mot_l3_accanglejerk	= f_mot_l3_accanglejerk;
 80104a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80104a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    	st_info.f_mot_l3_decangleconst		= f_mot_l3_decangleconst;
 80104a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80104ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

		st_info.f_mot_angle1	= f_angle1;						// 第1移動角度[rad]
 80104b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80104b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		st_info.f_mot_angle1_2	= st_info.f_mot_angle - f_angle3;									// 第1+2移動角度[rad]
 80104b8:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 80104bc:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 80104c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104c4:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
		en_TurnType			= Left;
 80104c8:	4bc4      	ldr	r3, [pc, #784]	@ (80107dc <MOT_turn+0xc0c>)
 80104ca:	2201      	movs	r2, #1
 80104cc:	701a      	strb	r2, [r3, #0]
//			st_info.f_mot_angle1 = A1_MIN;
//		}
	}


	GYRO_staErrChkAngle();			// エラー検出開始
 80104ce:	f7f9 fb91 	bl	8009bf4 <GYRO_staErrChkAngle>
	/*      実動作       */
	/* ================ */
	/* ------ */
	/*  加速  */
	/* ------ */
	st_data.en_ctrl_type			= CTRL_ACC_TRUN;
 80104d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80104d6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80104da:	2207      	movs	r2, #7
 80104dc:	701a      	strb	r2, [r3, #0]
	st_data.f_ctrl_jerk			= 0;
 80104de:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80104e2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80104e6:	f04f 0200 	mov.w	r2, #0
 80104ea:	609a      	str	r2, [r3, #8]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 80104ec:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80104f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80104f4:	f04f 0200 	mov.w	r2, #0
 80104f8:	611a      	str	r2, [r3, #16]
	st_data.f_ctrl_nowAcc		= 0;
 80104fa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80104fe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010502:	f04f 0200 	mov.w	r2, #0
 8010506:	60da      	str	r2, [r3, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 8010508:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801050c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010510:	f04f 0200 	mov.w	r2, #0
 8010514:	615a      	str	r2, [r3, #20]
	st_data.f_ctrl_trgt			= 0;						// 目標速度
 8010516:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801051a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801051e:	f04f 0200 	mov.w	r2, #0
 8010522:	619a      	str	r2, [r3, #24]
	st_data.f_ctrl_nowDist		= 0;						// 進んでいない
 8010524:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010528:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801052c:	f04f 0200 	mov.w	r2, #0
 8010530:	61da      	str	r2, [r3, #28]
	st_data.f_ctrl_dist			= 0;						// 加速距離
 8010532:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010536:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801053a:	f04f 0200 	mov.w	r2, #0
 801053e:	621a      	str	r2, [r3, #32]
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS1;		// 角加速度
	st_data.f_ctrl_jerkAngle	= st_info.f_mot_jerkAngle;
 8010540:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8010544:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010548:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801054c:	625a      	str	r2, [r3, #36]	@ 0x24
	st_data.f_ctrl_nowAccAngle		= 0;
 801054e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010552:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010556:	f04f 0200 	mov.w	r2, #0
 801055a:	629a      	str	r2, [r3, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= st_info.f_mot_trgtAccAngle1;				// 角加速度
 801055c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010560:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010564:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010568:	62da      	str	r2, [r3, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 801056a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801056e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010572:	f04f 0200 	mov.w	r2, #0
 8010576:	631a      	str	r2, [r3, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_accAnglejerk_v;		// 目標角度
 8010578:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801057c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010580:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010584:	635a      	str	r2, [r3, #52]	@ 0x34
	st_data.f_ctrl_nowAngle			= 0;						// 現在角度
 8010586:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801058a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801058e:	f04f 0200 	mov.w	r2, #0
 8010592:	639a      	str	r2, [r3, #56]	@ 0x38
	st_data.f_ctrl_angle			= st_info.f_mot_l1_accanglejerk;			// 目標角度
 8010594:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010598:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801059c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80105a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 80105a2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80105a6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80105aa:	f04f 0200 	mov.w	r2, #0
 80105ae:	605a      	str	r2, [r3, #4]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 80105b0:	f7f5 ff48 	bl	8006444 <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 80105b4:	f107 0318 	add.w	r3, r7, #24
 80105b8:	4618      	mov	r0, r3
 80105ba:	f7f6 f831 	bl	8006620 <CTRL_setData>
	DCM_staMotAll();									// モータON
 80105be:	f7f9 f8e5 	bl	800978c <DCM_staMotAll>

	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 80105c2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80105c6:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80105ca:	781b      	ldrb	r3, [r3, #0]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d01d      	beq.n	801060c <MOT_turn+0xa3c>
 80105d0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80105d4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80105d8:	781b      	ldrb	r3, [r3, #0]
 80105da:	2b02      	cmp	r3, #2
 80105dc:	d016      	beq.n	801060c <MOT_turn+0xa3c>
 80105de:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80105e2:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	2b04      	cmp	r3, #4
 80105ea:	d129      	bne.n	8010640 <MOT_turn+0xa70>
		while( Get_NowAngle() > st_info.f_mot_l1_accanglejerk ){			// 指定角度到達待ち
 80105ec:	e00e      	b.n	801060c <MOT_turn+0xa3c>
			if( SYS_isOutOfCtrl() == TRUE ){
 80105ee:	f7f9 f877 	bl	80096e0 <SYS_isOutOfCtrl>
 80105f2:	4603      	mov	r3, r0
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d009      	beq.n	801060c <MOT_turn+0xa3c>
				CTRL_stop();
 80105f8:	f7f5 ff14 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 80105fc:	2000      	movs	r0, #0
 80105fe:	f7f9 f8a1 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010602:	2001      	movs	r0, #1
 8010604:	f7f9 f89e 	bl	8009744 <DCM_brakeMot>
				break;
 8010608:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 801060a:	e024      	b.n	8010656 <MOT_turn+0xa86>
		while( Get_NowAngle() > st_info.f_mot_l1_accanglejerk ){			// 指定角度到達待ち
 801060c:	f7f5 fea2 	bl	8006354 <Get_NowAngle>
 8010610:	eeb0 7a40 	vmov.f32	s14, s0
 8010614:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8010618:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801061c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010620:	dce5      	bgt.n	80105ee <MOT_turn+0xa1e>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010622:	e018      	b.n	8010656 <MOT_turn+0xa86>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( Get_NowAngle() < st_info.f_mot_l1_accanglejerk ){			// 指定角度到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 8010624:	f7f9 f85c 	bl	80096e0 <SYS_isOutOfCtrl>
 8010628:	4603      	mov	r3, r0
 801062a:	2b00      	cmp	r3, #0
 801062c:	d008      	beq.n	8010640 <MOT_turn+0xa70>
				CTRL_stop();
 801062e:	f7f5 fef9 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010632:	2000      	movs	r0, #0
 8010634:	f7f9 f886 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010638:	2001      	movs	r0, #1
 801063a:	f7f9 f883 	bl	8009744 <DCM_brakeMot>
				break;
 801063e:	e00a      	b.n	8010656 <MOT_turn+0xa86>
		while( Get_NowAngle() < st_info.f_mot_l1_accanglejerk ){			// 指定角度到達待ち
 8010640:	f7f5 fe88 	bl	8006354 <Get_NowAngle>
 8010644:	eeb0 7a40 	vmov.f32	s14, s0
 8010648:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801064c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010654:	d4e6      	bmi.n	8010624 <MOT_turn+0xa54>
			}				// 途中で制御不能になった
		}
	}
	//jerk const
	st_data.en_ctrl_type		= CTRL_ACC_TRUN;
 8010656:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801065a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801065e:	2207      	movs	r2, #7
 8010660:	701a      	strb	r2, [r3, #0]
	st_data.f_ctrl_jerk			= 0;
 8010662:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010666:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801066a:	f04f 0200 	mov.w	r2, #0
 801066e:	609a      	str	r2, [r3, #8]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8010670:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010674:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010678:	f04f 0200 	mov.w	r2, #0
 801067c:	611a      	str	r2, [r3, #16]
	st_data.f_ctrl_nowAcc		= 0;
 801067e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010682:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010686:	f04f 0200 	mov.w	r2, #0
 801068a:	60da      	str	r2, [r3, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 801068c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010690:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010694:	f04f 0200 	mov.w	r2, #0
 8010698:	615a      	str	r2, [r3, #20]
	st_data.f_ctrl_trgt			= 0;						// 目標速度
 801069a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801069e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80106a2:	f04f 0200 	mov.w	r2, #0
 80106a6:	619a      	str	r2, [r3, #24]
	st_data.f_ctrl_nowDist		= 0;						// 進んでいない
 80106a8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80106ac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80106b0:	f04f 0200 	mov.w	r2, #0
 80106b4:	61da      	str	r2, [r3, #28]
	st_data.f_ctrl_dist			= 0;						// 加速距離
 80106b6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80106ba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80106be:	f04f 0200 	mov.w	r2, #0
 80106c2:	621a      	str	r2, [r3, #32]
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS1;		// 角加速度
	st_data.f_ctrl_jerkAngle	= 0;
 80106c4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80106c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80106cc:	f04f 0200 	mov.w	r2, #0
 80106d0:	625a      	str	r2, [r3, #36]	@ 0x24
	st_data.f_ctrl_nowAccAngle		= st_info.f_mot_trgtAccAngle1;
 80106d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80106d6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80106da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80106de:	629a      	str	r2, [r3, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= st_info.f_mot_trgtAccAngle1;				// 角加速度
 80106e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80106e4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80106e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80106ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_accAnglejerk_v;						// 現在角速度
 80106ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80106f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80106f6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80106fa:	631a      	str	r2, [r3, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_trgtAngleS-st_info.f_mot_accAnglejerk_v;		// 目標角度
 80106fc:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8010700:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8010704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010708:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801070c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010710:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	st_data.f_ctrl_nowAngle			= st_info.f_mot_l1_accanglejerk;						// 現在角度
 8010714:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010718:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801071c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010720:	639a      	str	r2, [r3, #56]	@ 0x38
	st_data.f_ctrl_angle			= st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst;			// 目標角度
 8010722:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8010726:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 801072a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801072e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010732:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010736:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 801073a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801073e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010742:	f04f 0200 	mov.w	r2, #0
 8010746:	605a      	str	r2, [r3, #4]
	CTRL_setData( &st_data );							// データセット
 8010748:	f107 0318 	add.w	r3, r7, #24
 801074c:	4618      	mov	r0, r3
 801074e:	f7f5 ff67 	bl	8006620 <CTRL_setData>
	DCM_staMotAll();									// モータON
 8010752:	f7f9 f81b 	bl	800978c <DCM_staMotAll>

	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010756:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801075a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d01d      	beq.n	80107a0 <MOT_turn+0xbd0>
 8010764:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010768:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 801076c:	781b      	ldrb	r3, [r3, #0]
 801076e:	2b02      	cmp	r3, #2
 8010770:	d016      	beq.n	80107a0 <MOT_turn+0xbd0>
 8010772:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010776:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 801077a:	781b      	ldrb	r3, [r3, #0]
 801077c:	2b04      	cmp	r3, #4
 801077e:	d12f      	bne.n	80107e0 <MOT_turn+0xc10>
		while( Get_NowAngle() > (st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst) ){			// 指定角度到達待ち
 8010780:	e00e      	b.n	80107a0 <MOT_turn+0xbd0>
			if( SYS_isOutOfCtrl() == TRUE ){
 8010782:	f7f8 ffad 	bl	80096e0 <SYS_isOutOfCtrl>
 8010786:	4603      	mov	r3, r0
 8010788:	2b00      	cmp	r3, #0
 801078a:	d009      	beq.n	80107a0 <MOT_turn+0xbd0>
				CTRL_stop();
 801078c:	f7f5 fe4a 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010790:	2000      	movs	r0, #0
 8010792:	f7f8 ffd7 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010796:	2001      	movs	r0, #1
 8010798:	f7f8 ffd4 	bl	8009744 <DCM_brakeMot>
				break;
 801079c:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 801079e:	e02e      	b.n	80107fe <MOT_turn+0xc2e>
		while( Get_NowAngle() > (st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst) ){			// 指定角度到達待ち
 80107a0:	f7f5 fdd8 	bl	8006354 <Get_NowAngle>
 80107a4:	eef0 6a40 	vmov.f32	s13, s0
 80107a8:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 80107ac:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 80107b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107b4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80107b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107bc:	dce1      	bgt.n	8010782 <MOT_turn+0xbb2>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 80107be:	e01e      	b.n	80107fe <MOT_turn+0xc2e>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( Get_NowAngle() < (st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst) ){			// 指定角度到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 80107c0:	f7f8 ff8e 	bl	80096e0 <SYS_isOutOfCtrl>
 80107c4:	4603      	mov	r3, r0
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d00a      	beq.n	80107e0 <MOT_turn+0xc10>
				CTRL_stop();
 80107ca:	f7f5 fe2b 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 80107ce:	2000      	movs	r0, #0
 80107d0:	f7f8 ffb8 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 80107d4:	2001      	movs	r0, #1
 80107d6:	f7f8 ffb5 	bl	8009744 <DCM_brakeMot>
				break;
 80107da:	e010      	b.n	80107fe <MOT_turn+0xc2e>
 80107dc:	20017bec 	.word	0x20017bec
		while( Get_NowAngle() < (st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst) ){			// 指定角度到達待ち
 80107e0:	f7f5 fdb8 	bl	8006354 <Get_NowAngle>
 80107e4:	eef0 6a40 	vmov.f32	s13, s0
 80107e8:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 80107ec:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 80107f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107f4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80107f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107fc:	d4e0      	bmi.n	80107c0 <MOT_turn+0xbf0>
			}				// 途中で制御不能になった
		}
	}
	//-jerk
	st_data.en_ctrl_type			= CTRL_ACC_TRUN;
 80107fe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010802:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010806:	2207      	movs	r2, #7
 8010808:	701a      	strb	r2, [r3, #0]
	st_data.f_ctrl_jerk			= 0;
 801080a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801080e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010812:	f04f 0200 	mov.w	r2, #0
 8010816:	609a      	str	r2, [r3, #8]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8010818:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801081c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010820:	f04f 0200 	mov.w	r2, #0
 8010824:	611a      	str	r2, [r3, #16]
	st_data.f_ctrl_nowAcc		= 0;
 8010826:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801082a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801082e:	f04f 0200 	mov.w	r2, #0
 8010832:	60da      	str	r2, [r3, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 8010834:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010838:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801083c:	f04f 0200 	mov.w	r2, #0
 8010840:	615a      	str	r2, [r3, #20]
	st_data.f_ctrl_trgt			= 0;						// 目標速度
 8010842:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010846:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801084a:	f04f 0200 	mov.w	r2, #0
 801084e:	619a      	str	r2, [r3, #24]
	st_data.f_ctrl_nowDist		= 0;						// 進んでいない
 8010850:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010854:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010858:	f04f 0200 	mov.w	r2, #0
 801085c:	61da      	str	r2, [r3, #28]
	st_data.f_ctrl_dist			= 0;						// 加速距離
 801085e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010862:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010866:	f04f 0200 	mov.w	r2, #0
 801086a:	621a      	str	r2, [r3, #32]
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS1;		// 角加速度
	st_data.f_ctrl_jerkAngle	= st_info.f_mot_jerkAngle*(-1.0);
 801086c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010870:	4618      	mov	r0, r3
 8010872:	f7ef fe91 	bl	8000598 <__aeabi_f2d>
 8010876:	4602      	mov	r2, r0
 8010878:	460b      	mov	r3, r1
 801087a:	4610      	mov	r0, r2
 801087c:	4619      	mov	r1, r3
 801087e:	f7f0 f9db 	bl	8000c38 <__aeabi_d2f>
 8010882:	4603      	mov	r3, r0
 8010884:	ee07 3a90 	vmov	s15, r3
 8010888:	eef1 7a67 	vneg.f32	s15, s15
 801088c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010890:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010894:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	st_data.f_ctrl_nowAccAngle		= st_info.f_mot_trgtAccAngle1;
 8010898:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801089c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80108a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80108a4:	629a      	str	r2, [r3, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 80108a6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80108aa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80108ae:	f04f 0200 	mov.w	r2, #0
 80108b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_trgtAngleS - st_info.f_mot_accAnglejerk_v;						// 現在角速度
 80108b4:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 80108b8:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 80108bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108c0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80108c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80108c8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_trgtAngleS;		
 80108cc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80108d0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80108d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80108d8:	635a      	str	r2, [r3, #52]	@ 0x34
	st_data.f_ctrl_nowAngle			= st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst;						// 現在角度
 80108da:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 80108de:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 80108e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108e6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80108ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80108ee:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	st_data.f_ctrl_angle			= st_info.f_mot_angle1;			// 目標角度
 80108f2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80108f6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80108fa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80108fe:	63da      	str	r2, [r3, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 8010900:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010904:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010908:	f04f 0200 	mov.w	r2, #0
 801090c:	605a      	str	r2, [r3, #4]
	CTRL_setData( &st_data );							// データセット
 801090e:	f107 0318 	add.w	r3, r7, #24
 8010912:	4618      	mov	r0, r3
 8010914:	f7f5 fe84 	bl	8006620 <CTRL_setData>
	DCM_staMotAll();									// モータON
 8010918:	f7f8 ff38 	bl	800978c <DCM_staMotAll>

	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 801091c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010920:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d01d      	beq.n	8010966 <MOT_turn+0xd96>
 801092a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801092e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	2b02      	cmp	r3, #2
 8010936:	d016      	beq.n	8010966 <MOT_turn+0xd96>
 8010938:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801093c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010940:	781b      	ldrb	r3, [r3, #0]
 8010942:	2b04      	cmp	r3, #4
 8010944:	d129      	bne.n	801099a <MOT_turn+0xdca>
		while( Get_NowAngle() > st_info.f_mot_angle1 ){			// 指定角度到達待ち
 8010946:	e00e      	b.n	8010966 <MOT_turn+0xd96>
			if( SYS_isOutOfCtrl() == TRUE ){
 8010948:	f7f8 feca 	bl	80096e0 <SYS_isOutOfCtrl>
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d009      	beq.n	8010966 <MOT_turn+0xd96>
				CTRL_stop();
 8010952:	f7f5 fd67 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010956:	2000      	movs	r0, #0
 8010958:	f7f8 fef4 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 801095c:	2001      	movs	r0, #1
 801095e:	f7f8 fef1 	bl	8009744 <DCM_brakeMot>
				break;
 8010962:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010964:	e024      	b.n	80109b0 <MOT_turn+0xde0>
		while( Get_NowAngle() > st_info.f_mot_angle1 ){			// 指定角度到達待ち
 8010966:	f7f5 fcf5 	bl	8006354 <Get_NowAngle>
 801096a:	eeb0 7a40 	vmov.f32	s14, s0
 801096e:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 8010972:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801097a:	dce5      	bgt.n	8010948 <MOT_turn+0xd78>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 801097c:	e018      	b.n	80109b0 <MOT_turn+0xde0>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( Get_NowAngle() < st_info.f_mot_angle1 ){			// 指定角度到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 801097e:	f7f8 feaf 	bl	80096e0 <SYS_isOutOfCtrl>
 8010982:	4603      	mov	r3, r0
 8010984:	2b00      	cmp	r3, #0
 8010986:	d008      	beq.n	801099a <MOT_turn+0xdca>
				CTRL_stop();
 8010988:	f7f5 fd4c 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 801098c:	2000      	movs	r0, #0
 801098e:	f7f8 fed9 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010992:	2001      	movs	r0, #1
 8010994:	f7f8 fed6 	bl	8009744 <DCM_brakeMot>
				break;
 8010998:	e00a      	b.n	80109b0 <MOT_turn+0xde0>
		while( Get_NowAngle() < st_info.f_mot_angle1 ){			// 指定角度到達待ち
 801099a:	f7f5 fcdb 	bl	8006354 <Get_NowAngle>
 801099e:	eeb0 7a40 	vmov.f32	s14, s0
 80109a2:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 80109a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80109aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ae:	d4e6      	bmi.n	801097e <MOT_turn+0xdae>
		st_info.f_mot_angle1_2		= st_info.f_mot_angle - f_angle3;																// 第1+2移動角度[rad]
//		printf("   [f_angle3]%d [f_angle1_2]%d\n\r", (int32_t)f_angle3, (int32_t)	st_info.f_angle1_2 );
	}
//	printf("[f_TrgtAngleS] %5.2f,st_info.f_angle1_2%5.2f,f_angle2%5.2f\n\r",f_TrgtAngleS,st_info.f_angle1_2,f_angle3);
*/
	st_data.en_ctrl_type			= CTRL_CONST_TRUN;
 80109b0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80109b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80109b8:	2208      	movs	r2, #8
 80109ba:	701a      	strb	r2, [r3, #0]
	st_data.f_ctrl_jerk			= 0;
 80109bc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80109c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80109c4:	f04f 0200 	mov.w	r2, #0
 80109c8:	609a      	str	r2, [r3, #8]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 80109ca:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80109ce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80109d2:	f04f 0200 	mov.w	r2, #0
 80109d6:	611a      	str	r2, [r3, #16]
	st_data.f_ctrl_nowAcc		= 0;
 80109d8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80109dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80109e0:	f04f 0200 	mov.w	r2, #0
 80109e4:	60da      	str	r2, [r3, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 80109e6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80109ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80109ee:	f04f 0200 	mov.w	r2, #0
 80109f2:	615a      	str	r2, [r3, #20]
	st_data.f_ctrl_trgt			= 0;						// 目標速度
 80109f4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80109f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80109fc:	f04f 0200 	mov.w	r2, #0
 8010a00:	619a      	str	r2, [r3, #24]
	st_data.f_ctrl_nowDist		= 0;						// 進んでいない
 8010a02:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010a06:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010a0a:	f04f 0200 	mov.w	r2, #0
 8010a0e:	61da      	str	r2, [r3, #28]
	st_data.f_ctrl_dist			= 0;						// 等速完了位置
 8010a10:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010a14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010a18:	f04f 0200 	mov.w	r2, #0
 8010a1c:	621a      	str	r2, [r3, #32]
//	st_data.f_ctrl_accAngleS		= 0;						// 角加速度
	st_data.f_ctrl_jerkAngle	= 0;
 8010a1e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010a22:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010a26:	f04f 0200 	mov.w	r2, #0
 8010a2a:	625a      	str	r2, [r3, #36]	@ 0x24
	st_data.f_ctrl_nowAccAngle		= 0;
 8010a2c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010a30:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010a34:	f04f 0200 	mov.w	r2, #0
 8010a38:	629a      	str	r2, [r3, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= 0;				// 角加速度
 8010a3a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010a3e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010a42:	f04f 0200 	mov.w	r2, #0
 8010a46:	62da      	str	r2, [r3, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_trgtAngleS;				// 現在角速度
 8010a48:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8010a4c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010a50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010a54:	631a      	str	r2, [r3, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_trgtAngleS;				// 目標角度
 8010a56:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8010a5a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010a5e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010a62:	635a      	str	r2, [r3, #52]	@ 0x34
	st_data.f_ctrl_nowAngle			= st_info.f_mot_angle1;			// 現在角度
 8010a64:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8010a68:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010a6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010a70:	639a      	str	r2, [r3, #56]	@ 0x38
	st_data.f_ctrl_angle			= st_info.f_mot_angle1_2;			// 目標角度
 8010a72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010a76:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010a7a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 8010a80:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010a84:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010a88:	f04f 0200 	mov.w	r2, #0
 8010a8c:	605a      	str	r2, [r3, #4]
	CTRL_setData( &st_data );							// データセット
 8010a8e:	f107 0318 	add.w	r3, r7, #24
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7f5 fdc4 	bl	8006620 <CTRL_setData>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010a98:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010a9c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d01d      	beq.n	8010ae2 <MOT_turn+0xf12>
 8010aa6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010aaa:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010aae:	781b      	ldrb	r3, [r3, #0]
 8010ab0:	2b02      	cmp	r3, #2
 8010ab2:	d016      	beq.n	8010ae2 <MOT_turn+0xf12>
 8010ab4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010ab8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010abc:	781b      	ldrb	r3, [r3, #0]
 8010abe:	2b04      	cmp	r3, #4
 8010ac0:	d129      	bne.n	8010b16 <MOT_turn+0xf46>
		while( Get_NowAngle() > st_info.f_mot_angle1_2 ){			// 指定距離到達待ち
 8010ac2:	e00e      	b.n	8010ae2 <MOT_turn+0xf12>
			if( SYS_isOutOfCtrl() == TRUE ){
 8010ac4:	f7f8 fe0c 	bl	80096e0 <SYS_isOutOfCtrl>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d009      	beq.n	8010ae2 <MOT_turn+0xf12>
				CTRL_stop();
 8010ace:	f7f5 fca9 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010ad2:	2000      	movs	r0, #0
 8010ad4:	f7f8 fe36 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010ad8:	2001      	movs	r0, #1
 8010ada:	f7f8 fe33 	bl	8009744 <DCM_brakeMot>
				break;
 8010ade:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010ae0:	e024      	b.n	8010b2c <MOT_turn+0xf5c>
		while( Get_NowAngle() > st_info.f_mot_angle1_2 ){			// 指定距離到達待ち
 8010ae2:	f7f5 fc37 	bl	8006354 <Get_NowAngle>
 8010ae6:	eeb0 7a40 	vmov.f32	s14, s0
 8010aea:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8010aee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af6:	dce5      	bgt.n	8010ac4 <MOT_turn+0xef4>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010af8:	e018      	b.n	8010b2c <MOT_turn+0xf5c>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( Get_NowAngle() < st_info.f_mot_angle1_2 ){			// 指定距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 8010afa:	f7f8 fdf1 	bl	80096e0 <SYS_isOutOfCtrl>
 8010afe:	4603      	mov	r3, r0
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d008      	beq.n	8010b16 <MOT_turn+0xf46>
				CTRL_stop();
 8010b04:	f7f5 fc8e 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010b08:	2000      	movs	r0, #0
 8010b0a:	f7f8 fe1b 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010b0e:	2001      	movs	r0, #1
 8010b10:	f7f8 fe18 	bl	8009744 <DCM_brakeMot>
				break;
 8010b14:	e00a      	b.n	8010b2c <MOT_turn+0xf5c>
		while( Get_NowAngle() < st_info.f_mot_angle1_2 ){			// 指定距離到達待ち
 8010b16:	f7f5 fc1d 	bl	8006354 <Get_NowAngle>
 8010b1a:	eeb0 7a40 	vmov.f32	s14, s0
 8010b1e:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8010b22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b2a:	d4e6      	bmi.n	8010afa <MOT_turn+0xf2a>
//	CTRL_clrAngleErrSum();

	/* ------ */
	/*  // 減速  */
	/* ------ */
	st_data.en_ctrl_type			= CTRL_DEC_TRUN;
 8010b2c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010b30:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010b34:	2209      	movs	r2, #9
 8010b36:	701a      	strb	r2, [r3, #0]
	st_data.f_ctrl_jerk			= 0;
 8010b38:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010b3c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010b40:	f04f 0200 	mov.w	r2, #0
 8010b44:	609a      	str	r2, [r3, #8]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8010b46:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010b4a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010b4e:	f04f 0200 	mov.w	r2, #0
 8010b52:	611a      	str	r2, [r3, #16]
	st_data.f_ctrl_nowAcc		= 0;
 8010b54:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010b58:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010b5c:	f04f 0200 	mov.w	r2, #0
 8010b60:	60da      	str	r2, [r3, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 8010b62:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010b66:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010b6a:	f04f 0200 	mov.w	r2, #0
 8010b6e:	615a      	str	r2, [r3, #20]
	st_data.f_ctrl_trgt			= 0;						// 最終速度
 8010b70:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010b74:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010b78:	f04f 0200 	mov.w	r2, #0
 8010b7c:	619a      	str	r2, [r3, #24]
	st_data.f_ctrl_nowDist		= 0;						// 等速完了位置
 8010b7e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010b82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010b86:	f04f 0200 	mov.w	r2, #0
 8010b8a:	61da      	str	r2, [r3, #28]
	st_data.f_ctrl_dist			= 0;						// 全移動完了位置
 8010b8c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010b90:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010b94:	f04f 0200 	mov.w	r2, #0
 8010b98:	621a      	str	r2, [r3, #32]
	st_data.f_ctrl_jerkAngle	= st_info.f_mot_jerkAngle*(-1.0);
 8010b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7ef fcfa 	bl	8000598 <__aeabi_f2d>
 8010ba4:	4602      	mov	r2, r0
 8010ba6:	460b      	mov	r3, r1
 8010ba8:	4610      	mov	r0, r2
 8010baa:	4619      	mov	r1, r3
 8010bac:	f7f0 f844 	bl	8000c38 <__aeabi_d2f>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	ee07 3a90 	vmov	s15, r3
 8010bb6:	eef1 7a67 	vneg.f32	s15, s15
 8010bba:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010bbe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010bc2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	st_data.f_ctrl_nowAccAngle		= 0;
 8010bc6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010bca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010bce:	f04f 0200 	mov.w	r2, #0
 8010bd2:	629a      	str	r2, [r3, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= st_info.f_mot_trgtAccAngle3*(-1.0);				// 角加速度
 8010bd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7ef fcdd 	bl	8000598 <__aeabi_f2d>
 8010bde:	4602      	mov	r2, r0
 8010be0:	460b      	mov	r3, r1
 8010be2:	4610      	mov	r0, r2
 8010be4:	4619      	mov	r1, r3
 8010be6:	f7f0 f827 	bl	8000c38 <__aeabi_d2f>
 8010bea:	4603      	mov	r3, r0
 8010bec:	ee07 3a90 	vmov	s15, r3
 8010bf0:	eef1 7a67 	vneg.f32	s15, s15
 8010bf4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010bf8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010bfc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_trgtAngleS;				// 現在角速度
 8010c00:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8010c04:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010c08:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010c0c:	631a      	str	r2, [r3, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_trgtAngleS-st_info.f_mot_accAnglejerk_v;				// 目標角度
 8010c0e:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8010c12:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8010c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c1a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010c1e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010c22:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	st_data.f_ctrl_nowAngle			= st_info.f_mot_angle1_2;			// 現在角度
 8010c26:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010c2a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010c2e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010c32:	639a      	str	r2, [r3, #56]	@ 0x38
	st_data.f_ctrl_angle			= st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk;			// 目標角度
 8010c34:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8010c38:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8010c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c40:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010c44:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010c48:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 8010c4c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010c50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010c54:	f04f 0200 	mov.w	r2, #0
 8010c58:	605a      	str	r2, [r3, #4]
	CTRL_setData( &st_data );							// データセット
 8010c5a:	f107 0318 	add.w	r3, r7, #24
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7f5 fcde 	bl	8006620 <CTRL_setData>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010c64:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010c68:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d01d      	beq.n	8010cae <MOT_turn+0x10de>
 8010c72:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010c76:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010c7a:	781b      	ldrb	r3, [r3, #0]
 8010c7c:	2b02      	cmp	r3, #2
 8010c7e:	d016      	beq.n	8010cae <MOT_turn+0x10de>
 8010c80:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010c84:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010c88:	781b      	ldrb	r3, [r3, #0]
 8010c8a:	2b04      	cmp	r3, #4
 8010c8c:	d12d      	bne.n	8010cea <MOT_turn+0x111a>
		while( Get_NowAngle() > ( st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk) ){		// 指定距離到達待ち
 8010c8e:	e00e      	b.n	8010cae <MOT_turn+0x10de>
			if( SYS_isOutOfCtrl() == TRUE ){
 8010c90:	f7f8 fd26 	bl	80096e0 <SYS_isOutOfCtrl>
 8010c94:	4603      	mov	r3, r0
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d009      	beq.n	8010cae <MOT_turn+0x10de>
				CTRL_stop();
 8010c9a:	f7f5 fbc3 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010c9e:	2000      	movs	r0, #0
 8010ca0:	f7f8 fd50 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010ca4:	2001      	movs	r0, #1
 8010ca6:	f7f8 fd4d 	bl	8009744 <DCM_brakeMot>
				break;
 8010caa:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010cac:	e02c      	b.n	8010d08 <MOT_turn+0x1138>
		while( Get_NowAngle() > ( st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk) ){		// 指定距離到達待ち
 8010cae:	f7f5 fb51 	bl	8006354 <Get_NowAngle>
 8010cb2:	eef0 6a40 	vmov.f32	s13, s0
 8010cb6:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8010cba:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8010cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cc2:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cca:	dce1      	bgt.n	8010c90 <MOT_turn+0x10c0>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010ccc:	e01c      	b.n	8010d08 <MOT_turn+0x1138>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( Get_NowAngle() < ( st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk ) ){		// 指定距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 8010cce:	f7f8 fd07 	bl	80096e0 <SYS_isOutOfCtrl>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d008      	beq.n	8010cea <MOT_turn+0x111a>
				CTRL_stop();
 8010cd8:	f7f5 fba4 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010cdc:	2000      	movs	r0, #0
 8010cde:	f7f8 fd31 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010ce2:	2001      	movs	r0, #1
 8010ce4:	f7f8 fd2e 	bl	8009744 <DCM_brakeMot>
				break;
 8010ce8:	e00e      	b.n	8010d08 <MOT_turn+0x1138>
		while( Get_NowAngle() < ( st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk ) ){		// 指定距離到達待ち
 8010cea:	f7f5 fb33 	bl	8006354 <Get_NowAngle>
 8010cee:	eef0 6a40 	vmov.f32	s13, s0
 8010cf2:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8010cf6:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8010cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cfe:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d06:	d4e2      	bmi.n	8010cce <MOT_turn+0x10fe>
			}				// 途中で制御不能になった
		}
	}

	st_data.en_ctrl_type			= CTRL_DEC_TRUN;
 8010d08:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010d0c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010d10:	2209      	movs	r2, #9
 8010d12:	701a      	strb	r2, [r3, #0]
	st_data.f_ctrl_jerk			= 0;
 8010d14:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010d18:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010d1c:	f04f 0200 	mov.w	r2, #0
 8010d20:	609a      	str	r2, [r3, #8]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8010d22:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010d26:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010d2a:	f04f 0200 	mov.w	r2, #0
 8010d2e:	611a      	str	r2, [r3, #16]
	st_data.f_ctrl_nowAcc		= 0;
 8010d30:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010d34:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010d38:	f04f 0200 	mov.w	r2, #0
 8010d3c:	60da      	str	r2, [r3, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 8010d3e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010d42:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010d46:	f04f 0200 	mov.w	r2, #0
 8010d4a:	615a      	str	r2, [r3, #20]
	st_data.f_ctrl_trgt			= 0;						// 最終速度
 8010d4c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010d50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010d54:	f04f 0200 	mov.w	r2, #0
 8010d58:	619a      	str	r2, [r3, #24]
	st_data.f_ctrl_nowDist		= 0;						// 等速完了位置
 8010d5a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010d5e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010d62:	f04f 0200 	mov.w	r2, #0
 8010d66:	61da      	str	r2, [r3, #28]
	st_data.f_ctrl_dist			= 0;						// 全移動完了位置
 8010d68:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010d6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010d70:	f04f 0200 	mov.w	r2, #0
 8010d74:	621a      	str	r2, [r3, #32]
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS3;		// 角加速度
	st_data.f_ctrl_jerkAngle		= 0;
 8010d76:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010d7a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010d7e:	f04f 0200 	mov.w	r2, #0
 8010d82:	625a      	str	r2, [r3, #36]	@ 0x24
	st_data.f_ctrl_nowAccAngle		= st_info.f_mot_trgtAccAngle3*(-1.0);
 8010d84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7ef fc05 	bl	8000598 <__aeabi_f2d>
 8010d8e:	4602      	mov	r2, r0
 8010d90:	460b      	mov	r3, r1
 8010d92:	4610      	mov	r0, r2
 8010d94:	4619      	mov	r1, r3
 8010d96:	f7ef ff4f 	bl	8000c38 <__aeabi_d2f>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	ee07 3a90 	vmov	s15, r3
 8010da0:	eef1 7a67 	vneg.f32	s15, s15
 8010da4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010da8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010dac:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= st_info.f_mot_trgtAccAngle3*(-1.0);
 8010db0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7ef fbef 	bl	8000598 <__aeabi_f2d>
 8010dba:	4602      	mov	r2, r0
 8010dbc:	460b      	mov	r3, r1
 8010dbe:	4610      	mov	r0, r2
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	f7ef ff39 	bl	8000c38 <__aeabi_d2f>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	ee07 3a90 	vmov	s15, r3
 8010dcc:	eef1 7a67 	vneg.f32	s15, s15
 8010dd0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010dd4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010dd8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_trgtAngleS-st_info.f_mot_accAnglejerk_v;				// 現在角速度
 8010ddc:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8010de0:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8010de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010de8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010dec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010df0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_accAnglejerk_v;						// 目標角度
 8010df4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010df8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010dfc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010e00:	635a      	str	r2, [r3, #52]	@ 0x34
	st_data.f_ctrl_nowAngle			= st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk;		// 現在角度
 8010e02:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8010e06:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8010e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e0e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010e12:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010e16:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	st_data.f_ctrl_angle			= st_info.f_mot_angle-st_info.f_mot_l3_accanglejerk;			// 目標角度
 8010e1a:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 8010e1e:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8010e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e26:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010e2a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010e2e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 8010e32:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010e36:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010e3a:	f04f 0200 	mov.w	r2, #0
 8010e3e:	605a      	str	r2, [r3, #4]
	CTRL_setData( &st_data );							// データセット
 8010e40:	f107 0318 	add.w	r3, r7, #24
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7f5 fbeb 	bl	8006620 <CTRL_setData>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010e4a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010e4e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010e52:	781b      	ldrb	r3, [r3, #0]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d01d      	beq.n	8010e94 <MOT_turn+0x12c4>
 8010e58:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010e5c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010e60:	781b      	ldrb	r3, [r3, #0]
 8010e62:	2b02      	cmp	r3, #2
 8010e64:	d016      	beq.n	8010e94 <MOT_turn+0x12c4>
 8010e66:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010e6a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8010e6e:	781b      	ldrb	r3, [r3, #0]
 8010e70:	2b04      	cmp	r3, #4
 8010e72:	d12d      	bne.n	8010ed0 <MOT_turn+0x1300>
		while( Get_NowAngle() > ( st_info.f_mot_angle-st_info.f_mot_l3_accanglejerk) ){		// 指定距離到達待ち
 8010e74:	e00e      	b.n	8010e94 <MOT_turn+0x12c4>
			if( SYS_isOutOfCtrl() == TRUE ){
 8010e76:	f7f8 fc33 	bl	80096e0 <SYS_isOutOfCtrl>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d009      	beq.n	8010e94 <MOT_turn+0x12c4>
				CTRL_stop();
 8010e80:	f7f5 fad0 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010e84:	2000      	movs	r0, #0
 8010e86:	f7f8 fc5d 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010e8a:	2001      	movs	r0, #1
 8010e8c:	f7f8 fc5a 	bl	8009744 <DCM_brakeMot>
				break;
 8010e90:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010e92:	e02c      	b.n	8010eee <MOT_turn+0x131e>
		while( Get_NowAngle() > ( st_info.f_mot_angle-st_info.f_mot_l3_accanglejerk) ){		// 指定距離到達待ち
 8010e94:	f7f5 fa5e 	bl	8006354 <Get_NowAngle>
 8010e98:	eef0 6a40 	vmov.f32	s13, s0
 8010e9c:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 8010ea0:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8010ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ea8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb0:	dce1      	bgt.n	8010e76 <MOT_turn+0x12a6>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010eb2:	e01c      	b.n	8010eee <MOT_turn+0x131e>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( Get_NowAngle() < ( st_info.f_mot_angle-st_info.f_mot_l3_accanglejerk ) ){		// 指定距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 8010eb4:	f7f8 fc14 	bl	80096e0 <SYS_isOutOfCtrl>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d008      	beq.n	8010ed0 <MOT_turn+0x1300>
				CTRL_stop();
 8010ebe:	f7f5 fab1 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010ec2:	2000      	movs	r0, #0
 8010ec4:	f7f8 fc3e 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010ec8:	2001      	movs	r0, #1
 8010eca:	f7f8 fc3b 	bl	8009744 <DCM_brakeMot>
				break;
 8010ece:	e00e      	b.n	8010eee <MOT_turn+0x131e>
		while( Get_NowAngle() < ( st_info.f_mot_angle-st_info.f_mot_l3_accanglejerk ) ){		// 指定距離到達待ち
 8010ed0:	f7f5 fa40 	bl	8006354 <Get_NowAngle>
 8010ed4:	eef0 6a40 	vmov.f32	s13, s0
 8010ed8:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 8010edc:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8010ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ee4:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eec:	d4e2      	bmi.n	8010eb4 <MOT_turn+0x12e4>
			}				// 途中で制御不能になった
		}
	}

	st_data.en_ctrl_type			= CTRL_DEC_TRUN;
 8010eee:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010ef2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010ef6:	2209      	movs	r2, #9
 8010ef8:	701a      	strb	r2, [r3, #0]
	st_data.f_ctrl_jerk			= 0;
 8010efa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010efe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010f02:	f04f 0200 	mov.w	r2, #0
 8010f06:	609a      	str	r2, [r3, #8]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8010f08:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010f0c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010f10:	f04f 0200 	mov.w	r2, #0
 8010f14:	611a      	str	r2, [r3, #16]
	st_data.f_ctrl_nowAcc		= 0;
 8010f16:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010f1a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010f1e:	f04f 0200 	mov.w	r2, #0
 8010f22:	60da      	str	r2, [r3, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 8010f24:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010f28:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010f2c:	f04f 0200 	mov.w	r2, #0
 8010f30:	615a      	str	r2, [r3, #20]
	st_data.f_ctrl_trgt			= 0;						// 最終速度
 8010f32:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010f36:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010f3a:	f04f 0200 	mov.w	r2, #0
 8010f3e:	619a      	str	r2, [r3, #24]
	st_data.f_ctrl_nowDist		= 0;						// 等速完了位置
 8010f40:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010f44:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010f48:	f04f 0200 	mov.w	r2, #0
 8010f4c:	61da      	str	r2, [r3, #28]
	st_data.f_ctrl_dist			= 0;						// 全移動完了位置
 8010f4e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010f52:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010f56:	f04f 0200 	mov.w	r2, #0
 8010f5a:	621a      	str	r2, [r3, #32]
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS3;		// 角加速度
	st_data.f_ctrl_jerkAngle	= st_info.f_mot_jerkAngle;
 8010f5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8010f60:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010f64:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010f68:	625a      	str	r2, [r3, #36]	@ 0x24
	st_data.f_ctrl_nowAccAngle		= st_info.f_mot_trgtAccAngle3*(-1.0);
 8010f6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7ef fb12 	bl	8000598 <__aeabi_f2d>
 8010f74:	4602      	mov	r2, r0
 8010f76:	460b      	mov	r3, r1
 8010f78:	4610      	mov	r0, r2
 8010f7a:	4619      	mov	r1, r3
 8010f7c:	f7ef fe5c 	bl	8000c38 <__aeabi_d2f>
 8010f80:	4603      	mov	r3, r0
 8010f82:	ee07 3a90 	vmov	s15, r3
 8010f86:	eef1 7a67 	vneg.f32	s15, s15
 8010f8a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010f8e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010f92:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= 0;
 8010f96:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010f9a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010f9e:	f04f 0200 	mov.w	r2, #0
 8010fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_accAnglejerk_v;				// 現在角速度
 8010fa4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010fa8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010fac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010fb0:	631a      	str	r2, [r3, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= 0;						// 目標角度
 8010fb2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010fb6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010fba:	f04f 0200 	mov.w	r2, #0
 8010fbe:	635a      	str	r2, [r3, #52]	@ 0x34
	st_data.f_ctrl_nowAngle		= st_info.f_mot_angle-st_info.f_mot_l3_accanglejerk;		// 現在角度
 8010fc0:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 8010fc4:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8010fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fcc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010fd0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010fd4:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	st_data.f_ctrl_angle			= st_info.f_mot_angle;			// 目標角度
 8010fd8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8010fdc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010fe0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 8010fe6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010fea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8010fee:	f04f 0200 	mov.w	r2, #0
 8010ff2:	605a      	str	r2, [r3, #4]
	CTRL_setData( &st_data );							// データセット
 8010ff4:	f107 0318 	add.w	r3, r7, #24
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7f5 fb11 	bl	8006620 <CTRL_setData>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8010ffe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8011002:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d02a      	beq.n	8011062 <MOT_turn+0x1492>
 801100c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8011010:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8011014:	781b      	ldrb	r3, [r3, #0]
 8011016:	2b02      	cmp	r3, #2
 8011018:	d023      	beq.n	8011062 <MOT_turn+0x1492>
 801101a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801101e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8011022:	781b      	ldrb	r3, [r3, #0]
 8011024:	2b04      	cmp	r3, #4
 8011026:	d146      	bne.n	80110b6 <MOT_turn+0x14e6>
		while( Get_NowAngle() > ( st_info.f_mot_angle) ){		// 指定距離到達待ち
 8011028:	e01b      	b.n	8011062 <MOT_turn+0x1492>
			if( SYS_isOutOfCtrl() == TRUE ){
 801102a:	f7f8 fb59 	bl	80096e0 <SYS_isOutOfCtrl>
 801102e:	4603      	mov	r3, r0
 8011030:	2b00      	cmp	r3, #0
 8011032:	d008      	beq.n	8011046 <MOT_turn+0x1476>
				CTRL_stop();
 8011034:	f7f5 f9f6 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8011038:	2000      	movs	r0, #0
 801103a:	f7f8 fb83 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 801103e:	2001      	movs	r0, #1
 8011040:	f7f8 fb80 	bl	8009744 <DCM_brakeMot>
				break;
 8011044:	e01a      	b.n	801107c <MOT_turn+0x14ac>
			}				// 途中で制御不能になった
			if((EscapeWait>0.5)&&(SearchFlag == TRUE))break;
 8011046:	4b31      	ldr	r3, [pc, #196]	@ (801110c <MOT_turn+0x153c>)
 8011048:	edd3 7a00 	vldr	s15, [r3]
 801104c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011050:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011058:	dd03      	ble.n	8011062 <MOT_turn+0x1492>
 801105a:	4b2d      	ldr	r3, [pc, #180]	@ (8011110 <MOT_turn+0x1540>)
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d10b      	bne.n	801107a <MOT_turn+0x14aa>
		while( Get_NowAngle() > ( st_info.f_mot_angle) ){		// 指定距離到達待ち
 8011062:	f7f5 f977 	bl	8006354 <Get_NowAngle>
 8011066:	eeb0 7a40 	vmov.f32	s14, s0
 801106a:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 801106e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011076:	dcd8      	bgt.n	801102a <MOT_turn+0x145a>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 8011078:	e02a      	b.n	80110d0 <MOT_turn+0x1500>
			if((EscapeWait>0.5)&&(SearchFlag == TRUE))break;
 801107a:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 801107c:	e028      	b.n	80110d0 <MOT_turn+0x1500>
		}
	}
	else{
		while( Get_NowAngle() < ( st_info.f_mot_angle ) ){		// 指定距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 801107e:	f7f8 fb2f 	bl	80096e0 <SYS_isOutOfCtrl>
 8011082:	4603      	mov	r3, r0
 8011084:	2b00      	cmp	r3, #0
 8011086:	d008      	beq.n	801109a <MOT_turn+0x14ca>
				CTRL_stop();
 8011088:	f7f5 f9cc 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 801108c:	2000      	movs	r0, #0
 801108e:	f7f8 fb59 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8011092:	2001      	movs	r0, #1
 8011094:	f7f8 fb56 	bl	8009744 <DCM_brakeMot>
				break;
 8011098:	e01a      	b.n	80110d0 <MOT_turn+0x1500>
			}				// 途中で制御不能になった
			if((EscapeWait>0.5)&&(SearchFlag == TRUE))break;
 801109a:	4b1c      	ldr	r3, [pc, #112]	@ (801110c <MOT_turn+0x153c>)
 801109c:	edd3 7a00 	vldr	s15, [r3]
 80110a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80110a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80110a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ac:	dd03      	ble.n	80110b6 <MOT_turn+0x14e6>
 80110ae:	4b18      	ldr	r3, [pc, #96]	@ (8011110 <MOT_turn+0x1540>)
 80110b0:	781b      	ldrb	r3, [r3, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d10b      	bne.n	80110ce <MOT_turn+0x14fe>
		while( Get_NowAngle() < ( st_info.f_mot_angle ) ){		// 指定距離到達待ち
 80110b6:	f7f5 f94d 	bl	8006354 <Get_NowAngle>
 80110ba:	eeb0 7a40 	vmov.f32	s14, s0
 80110be:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 80110c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80110c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ca:	d4d8      	bmi.n	801107e <MOT_turn+0x14ae>
 80110cc:	e000      	b.n	80110d0 <MOT_turn+0x1500>
			if((EscapeWait>0.5)&&(SearchFlag == TRUE))break;
 80110ce:	bf00      	nop
		}
	}
//	printf("finish3\n");
	/* 停止 */
	LL_mDelay(200);				// 安定待ち
 80110d0:	20c8      	movs	r0, #200	@ 0xc8
 80110d2:	f00a fd37 	bl	801bb44 <LL_mDelay>
	CTRL_stop();			// 制御停止
 80110d6:	f7f5 f9a5 	bl	8006424 <CTRL_stop>
	DCM_brakeMot( DCM_R );		// ブレーキ
 80110da:	2000      	movs	r0, #0
 80110dc:	f7f8 fb32 	bl	8009744 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 80110e0:	2001      	movs	r0, #1
 80110e2:	f7f8 fb2f 	bl	8009744 <DCM_brakeMot>
	GYRO_endErrChkAngle();					// エラー検出終了
 80110e6:	f7f8 fd97 	bl	8009c18 <GYRO_endErrChkAngle>
//	CTRL_clrNowData();
	CTRL_setNowData_Err(/*st_data.f_dist,*/st_data.f_ctrl_angle);
 80110ea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80110ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80110f2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80110f6:	eeb0 0a67 	vmov.f32	s0, s15
 80110fa:	f7f5 fa4d 	bl	8006598 <CTRL_setNowData_Err>
}
 80110fe:	bf00      	nop
 8011100:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8011104:	46bd      	mov	sp, r7
 8011106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801110a:	bf00      	nop
 801110c:	200003fc 	.word	0x200003fc
 8011110:	2001bda0 	.word	0x2001bda0

08011114 <MOT_setSlaStaSpeed>:

void MOT_setSlaStaSpeed( float f_speed , uint8_t sla_cmd)
{
 8011114:	b480      	push	{r7}
 8011116:	b083      	sub	sp, #12
 8011118:	af00      	add	r7, sp, #0
 801111a:	ed87 0a01 	vstr	s0, [r7, #4]
 801111e:	4603      	mov	r3, r0
 8011120:	70fb      	strb	r3, [r7, #3]
	if(sla_cmd == SLA_90){
 8011122:	78fb      	ldrb	r3, [r7, #3]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d103      	bne.n	8011130 <MOT_setSlaStaSpeed+0x1c>
		f_MotSlaStaSpeed_90S = f_speed;
 8011128:	4a0e      	ldr	r2, [pc, #56]	@ (8011164 <MOT_setSlaStaSpeed+0x50>)
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6013      	str	r3, [r2, #0]
		f_MotSlaStaSpeed_135S = f_speed;
	}	else if(sla_cmd == SLA_N90){
		f_MotSlaStaSpeed_V90 = f_speed;
	}

}
 801112e:	e013      	b.n	8011158 <MOT_setSlaStaSpeed+0x44>
	}	else if(sla_cmd == SLA_45){
 8011130:	78fb      	ldrb	r3, [r7, #3]
 8011132:	2b01      	cmp	r3, #1
 8011134:	d103      	bne.n	801113e <MOT_setSlaStaSpeed+0x2a>
		f_MotSlaStaSpeed_45S = f_speed;
 8011136:	4a0c      	ldr	r2, [pc, #48]	@ (8011168 <MOT_setSlaStaSpeed+0x54>)
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	6013      	str	r3, [r2, #0]
}
 801113c:	e00c      	b.n	8011158 <MOT_setSlaStaSpeed+0x44>
	}	else if(sla_cmd == SLA_135){
 801113e:	78fb      	ldrb	r3, [r7, #3]
 8011140:	2b02      	cmp	r3, #2
 8011142:	d103      	bne.n	801114c <MOT_setSlaStaSpeed+0x38>
		f_MotSlaStaSpeed_135S = f_speed;
 8011144:	4a09      	ldr	r2, [pc, #36]	@ (801116c <MOT_setSlaStaSpeed+0x58>)
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	6013      	str	r3, [r2, #0]
}
 801114a:	e005      	b.n	8011158 <MOT_setSlaStaSpeed+0x44>
	}	else if(sla_cmd == SLA_N90){
 801114c:	78fb      	ldrb	r3, [r7, #3]
 801114e:	2b03      	cmp	r3, #3
 8011150:	d102      	bne.n	8011158 <MOT_setSlaStaSpeed+0x44>
		f_MotSlaStaSpeed_V90 = f_speed;
 8011152:	4a07      	ldr	r2, [pc, #28]	@ (8011170 <MOT_setSlaStaSpeed+0x5c>)
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	6013      	str	r3, [r2, #0]
}
 8011158:	bf00      	nop
 801115a:	370c      	adds	r7, #12
 801115c:	46bd      	mov	sp, r7
 801115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011162:	4770      	bx	lr
 8011164:	20017bd4 	.word	0x20017bd4
 8011168:	20017bd8 	.word	0x20017bd8
 801116c:	20017bdc 	.word	0x20017bdc
 8011170:	20017be0 	.word	0x20017be0

08011174 <MOT_getSlaStaSpeed>:

float MOT_getSlaStaSpeed( uint8_t sla_cmd )
{
 8011174:	b480      	push	{r7}
 8011176:	b085      	sub	sp, #20
 8011178:	af00      	add	r7, sp, #0
 801117a:	4603      	mov	r3, r0
 801117c:	71fb      	strb	r3, [r7, #7]
	float sla_speed;

	if(sla_cmd == SLA_90){
 801117e:	79fb      	ldrb	r3, [r7, #7]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d103      	bne.n	801118c <MOT_getSlaStaSpeed+0x18>
		sla_speed = f_MotSlaStaSpeed_90S;
 8011184:	4b10      	ldr	r3, [pc, #64]	@ (80111c8 <MOT_getSlaStaSpeed+0x54>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	60fb      	str	r3, [r7, #12]
 801118a:	e013      	b.n	80111b4 <MOT_getSlaStaSpeed+0x40>
	}else if(sla_cmd == SLA_45){
 801118c:	79fb      	ldrb	r3, [r7, #7]
 801118e:	2b01      	cmp	r3, #1
 8011190:	d103      	bne.n	801119a <MOT_getSlaStaSpeed+0x26>
		sla_speed = f_MotSlaStaSpeed_45S;
 8011192:	4b0e      	ldr	r3, [pc, #56]	@ (80111cc <MOT_getSlaStaSpeed+0x58>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	60fb      	str	r3, [r7, #12]
 8011198:	e00c      	b.n	80111b4 <MOT_getSlaStaSpeed+0x40>
	}else if(sla_cmd == SLA_135){
 801119a:	79fb      	ldrb	r3, [r7, #7]
 801119c:	2b02      	cmp	r3, #2
 801119e:	d103      	bne.n	80111a8 <MOT_getSlaStaSpeed+0x34>
		sla_speed = f_MotSlaStaSpeed_135S;
 80111a0:	4b0b      	ldr	r3, [pc, #44]	@ (80111d0 <MOT_getSlaStaSpeed+0x5c>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	60fb      	str	r3, [r7, #12]
 80111a6:	e005      	b.n	80111b4 <MOT_getSlaStaSpeed+0x40>
	}else if(sla_cmd == SLA_N90){
 80111a8:	79fb      	ldrb	r3, [r7, #7]
 80111aa:	2b03      	cmp	r3, #3
 80111ac:	d102      	bne.n	80111b4 <MOT_getSlaStaSpeed+0x40>
		sla_speed = f_MotSlaStaSpeed_V90;
 80111ae:	4b09      	ldr	r3, [pc, #36]	@ (80111d4 <MOT_getSlaStaSpeed+0x60>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	60fb      	str	r3, [r7, #12]
	}
	return sla_speed;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	ee07 3a90 	vmov	s15, r3
}
 80111ba:	eeb0 0a67 	vmov.f32	s0, s15
 80111be:	3714      	adds	r7, #20
 80111c0:	46bd      	mov	sp, r7
 80111c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c6:	4770      	bx	lr
 80111c8:	20017bd4 	.word	0x20017bd4
 80111cc:	20017bd8 	.word	0x20017bd8
 80111d0:	20017bdc 	.word	0x20017bdc
 80111d4:	20017be0 	.word	0x20017be0

080111d8 <MOT_setTrgtSpeed>:

float MOT_setTrgtSpeed(float f_speed)
{
 80111d8:	b480      	push	{r7}
 80111da:	b083      	sub	sp, #12
 80111dc:	af00      	add	r7, sp, #0
 80111de:	ed87 0a01 	vstr	s0, [r7, #4]
	f_MotTrgtSpeed = f_speed;
 80111e2:	4a07      	ldr	r2, [pc, #28]	@ (8011200 <MOT_setTrgtSpeed+0x28>)
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6013      	str	r3, [r2, #0]
	return f_MotTrgtSpeed;
 80111e8:	4b05      	ldr	r3, [pc, #20]	@ (8011200 <MOT_setTrgtSpeed+0x28>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	ee07 3a90 	vmov	s15, r3
}
 80111f0:	eeb0 0a67 	vmov.f32	s0, s15
 80111f4:	370c      	adds	r7, #12
 80111f6:	46bd      	mov	sp, r7
 80111f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fc:	4770      	bx	lr
 80111fe:	bf00      	nop
 8011200:	20017bd0 	.word	0x20017bd0

08011204 <MOT_setNowSpeed>:

void MOT_setNowSpeed(float f_speed)
{
 8011204:	b480      	push	{r7}
 8011206:	b083      	sub	sp, #12
 8011208:	af00      	add	r7, sp, #0
 801120a:	ed87 0a01 	vstr	s0, [r7, #4]
	f_MotNowSpeed = f_speed;
 801120e:	4a04      	ldr	r2, [pc, #16]	@ (8011220 <MOT_setNowSpeed+0x1c>)
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6013      	str	r3, [r2, #0]
}
 8011214:	bf00      	nop
 8011216:	370c      	adds	r7, #12
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr
 8011220:	20017bcc 	.word	0x20017bcc

08011224 <MOT_goHitBackWall>:

void MOT_goHitBackWall(void)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b0b8      	sub	sp, #224	@ 0xe0
 8011228:	af00      	add	r7, sp, #0

	/* ---------------- */
	/*  動作データ計算  */
	/* ---------------- */
	/* 加速度 */
	st_info.f_mot_trgtAcc1= 1200.0;												// 角加速度1[rad/s^2]												// 角加速度3[rad/s^2]
 801122a:	4b2b      	ldr	r3, [pc, #172]	@ (80112d8 <MOT_goHitBackWall+0xb4>)
 801122c:	64bb      	str	r3, [r7, #72]	@ 0x48

	GYRO_staErrChkAngle();			// エラー検出開始
 801122e:	f7f8 fce1 	bl	8009bf4 <GYRO_staErrChkAngle>
	/*      実動作       */
	/* ================ */
	/* ------ */
	/*  加速  */
	/* ------ */
	st_data.en_ctrl_type			= CTRL_HIT_WALL;
 8011232:	2306      	movs	r3, #6
 8011234:	703b      	strb	r3, [r7, #0]
	st_data.f_ctrl_jerk			= st_Info.f_mot_jerk;
 8011236:	4b29      	ldr	r3, [pc, #164]	@ (80112dc <MOT_goHitBackWall+0xb8>)
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	60bb      	str	r3, [r7, #8]
	st_data.f_ctrl_trgtAcc		= st_info.f_mot_trgtAcc1;						// 加速度指定
 801123c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801123e:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_nowAcc		= 0;
 8011240:	f04f 0300 	mov.w	r3, #0
 8011244:	60fb      	str	r3, [r7, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 8011246:	f04f 0300 	mov.w	r3, #0
 801124a:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_trgt			= 0;						// 目標速度
 801124c:	f04f 0300 	mov.w	r3, #0
 8011250:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowDist		= 0;						// 進んでいない
 8011252:	f04f 0300 	mov.w	r3, #0
 8011256:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_dist			= 0;						// 加速距離
 8011258:	f04f 0300 	mov.w	r3, #0
 801125c:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowAccAngle		= 0;
 801125e:	f04f 0300 	mov.w	r3, #0
 8011262:	62bb      	str	r3, [r7, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= 0;
 8011264:	f04f 0300 	mov.w	r3, #0
 8011268:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 801126a:	f04f 0300 	mov.w	r3, #0
 801126e:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= 0;		// 目標角度
 8011270:	f04f 0300 	mov.w	r3, #0
 8011274:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 8011276:	f04f 0300 	mov.w	r3, #0
 801127a:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_angle			= 0;			// 目標角度
 801127c:	f04f 0300 	mov.w	r3, #0
 8011280:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 8011282:	f04f 0300 	mov.w	r3, #0
 8011286:	607b      	str	r3, [r7, #4]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 8011288:	f7f5 f8dc 	bl	8006444 <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 801128c:	463b      	mov	r3, r7
 801128e:	4618      	mov	r0, r3
 8011290:	f7f5 f9c6 	bl	8006620 <CTRL_setData>
	DCM_staMotAll();									// モータON
 8011294:	f7f8 fa7a 	bl	800978c <DCM_staMotAll>
//	printf("目標速度 %f 目標位置 %f\r\n",st_data.f_trgt,st_data.f_dist);

	/*停止*/
	LL_mDelay(400);				// 安定待ち
 8011298:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 801129c:	f00a fc52 	bl	801bb44 <LL_mDelay>
	CTRL_stop();			// 制御停止
 80112a0:	f7f5 f8c0 	bl	8006424 <CTRL_stop>
	DCM_brakeMot( DCM_R );		// ブレーキ
 80112a4:	2000      	movs	r0, #0
 80112a6:	f7f8 fa4d 	bl	8009744 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 80112aa:	2001      	movs	r0, #1
 80112ac:	f7f8 fa4a 	bl	8009744 <DCM_brakeMot>

	LL_mDelay(100);
 80112b0:	2064      	movs	r0, #100	@ 0x64
 80112b2:	f00a fc47 	bl	801bb44 <LL_mDelay>

	f_MotNowSpeed = 0.0f;		//現在速度更新
 80112b6:	4b0a      	ldr	r3, [pc, #40]	@ (80112e0 <MOT_goHitBackWall+0xbc>)
 80112b8:	f04f 0200 	mov.w	r2, #0
 80112bc:	601a      	str	r2, [r3, #0]

	GYRO_endErrChkAngle();					// エラー検出終了
 80112be:	f7f8 fcab 	bl	8009c18 <GYRO_endErrChkAngle>
	CTRL_clrNowData();
 80112c2:	f7f5 f92f 	bl	8006524 <CTRL_clrNowData>
	CTRL_clrAngleErrSum();
 80112c6:	f7f5 f905 	bl	80064d4 <CTRL_clrAngleErrSum>
	CTRL_clrSpeedErrSum();
 80112ca:	f7f5 f917 	bl	80064fc <CTRL_clrSpeedErrSum>
}
 80112ce:	bf00      	nop
 80112d0:	37e0      	adds	r7, #224	@ 0xe0
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}
 80112d6:	bf00      	nop
 80112d8:	44960000 	.word	0x44960000
 80112dc:	20017b2c 	.word	0x20017b2c
 80112e0:	20017bcc 	.word	0x20017bcc
 80112e4:	00000000 	.word	0x00000000

080112e8 <MOT_goSla>:

void MOT_goSla( enMOT_SLA_CMD en_type, stSLA* p_sla )
{
 80112e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80112ec:	b0bc      	sub	sp, #240	@ 0xf0
 80112ee:	af00      	add	r7, sp, #0
 80112f0:	4603      	mov	r3, r0
 80112f2:	6039      	str	r1, [r7, #0]
 80112f4:	71fb      	strb	r3, [r7, #7]

	/* ---------------- */
	/*  動作データ計算  */
	/* ---------------- */

	st_Info.f_mot_jerk		= 0;
 80112f6:	4bc1      	ldr	r3, [pc, #772]	@ (80115fc <MOT_goSla+0x314>)
 80112f8:	f04f 0200 	mov.w	r2, #0
 80112fc:	605a      	str	r2, [r3, #4]
	/* 加速度 */
	st_info.f_mot_trgtAcc1 		= 0;																// 加速度1[mm/s^2]
 80112fe:	f04f 0300 	mov.w	r3, #0
 8011302:	653b      	str	r3, [r7, #80]	@ 0x50
	st_info.f_mot_trgtAcc3 		= 0;																// 加速度3[mm/s^2]
 8011304:	f04f 0300 	mov.w	r3, #0
 8011308:	657b      	str	r3, [r7, #84]	@ 0x54

	/* 速度 */
	st_info.f_mot_now		= p_sla->f_sla_speed;													// 現在速度
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	667b      	str	r3, [r7, #100]	@ 0x64
	st_info.f_mot_trgt		= p_sla->f_sla_speed;													// 目標速度
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	66bb      	str	r3, [r7, #104]	@ 0x68
	st_info.f_mot_last		= p_sla->f_sla_speed;													// 最終速度
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	66fb      	str	r3, [r7, #108]	@ 0x6c

	/* 距離 */
	st_info.f_mot_dist		= 0;																// 移動距離
 801131c:	f04f 0300 	mov.w	r3, #0
 8011320:	67bb      	str	r3, [r7, #120]	@ 0x78
	st_info.f_mot_l1		= 0;																// 第1移動距離[mm]
 8011322:	f04f 0300 	mov.w	r3, #0
 8011326:	67fb      	str	r3, [r7, #124]	@ 0x7c
	st_info.f_mot_l1_2		= 0;																// 第1+2移動距離[mm]
 8011328:	f04f 0300 	mov.w	r3, #0
 801132c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	//角度jerk
	st_info.f_mot_jerkAngle = p_sla->f_sla_angJerk;
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	685b      	ldr	r3, [r3, #4]
 8011334:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	/* 角加速度 */
	st_info.f_mot_trgtAccAngle1= p_sla->f_sla_angAcc;													// 角加速度1[deg/s^2]
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	689b      	ldr	r3, [r3, #8]
 801133c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	st_info.f_mot_trgtAccAngle3= p_sla->f_sla_angAcc;													// 角加速度3[deg/s^2]
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	689b      	ldr	r3, [r3, #8]
 8011344:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	/* 角速度 */
	st_info.f_mot_nowAngleS	= 0;																// 現在角速度[deg/s]
 8011348:	f04f 0300 	mov.w	r3, #0
 801134c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	st_info.f_mot_trgtAngleS= p_sla->f_sla_angvel;													// 目標角速度
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	68db      	ldr	r3, [r3, #12]
 8011354:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	st_info.f_mot_lastAngleS= 0;																// 最終角速度
 8011358:	f04f 0300 	mov.w	r3, #0
 801135c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	st_info.f_mot_accAnglejerk_v = p_sla->f_sla_angS_Jerk;
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	6a1b      	ldr	r3, [r3, #32]
 8011364:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

	/* 角度 */
	st_info.f_mot_angle				= p_sla->f_sla_ang_Total;
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801136c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	st_info.f_mot_angle1			= p_sla->f_sla_ang_AccEnd;												// 第1移動角度[deg]
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011374:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	st_info.f_mot_angle1_2			= p_sla->f_sla_ang_ConstEnd;											// 旋回角度[deg]
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801137c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	
	st_info.f_mot_l1_accanglejerk	= p_sla->f_sla_ang_AccAccJerk;
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011384:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	st_info.f_mot_l1_accangleconst	= p_sla->f_sla_ang_AccConst;
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801138c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	st_info.f_mot_l1_decanglejerk	= p_sla->f_sla_ang_AccDecJerk;											// 第1+2移動角度[deg]
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011394:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	st_info.f_mot_l3_decanglejerk	= p_sla->f_sla_ang_DecDecJerk;
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801139c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	st_info.f_mot_l3_decangleconst	= p_sla->f_sla_ang_DecConst;
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	st_info.f_mot_l3_accanglejerk	= p_sla->f_sla_ang_DecAccJerk;
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

	/* 方向に応じて符号を変更 */
	if( ( en_type == MOT_R90S ) ||
 80113b0:	79fb      	ldrb	r3, [r7, #7]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d00f      	beq.n	80113d6 <MOT_goSla+0xee>
 80113b6:	79fb      	ldrb	r3, [r7, #7]
 80113b8:	2b02      	cmp	r3, #2
 80113ba:	d00c      	beq.n	80113d6 <MOT_goSla+0xee>
		( en_type == MOT_R45S_S2N ) || ( en_type == MOT_R45S_N2S ) ||
 80113bc:	79fb      	ldrb	r3, [r7, #7]
 80113be:	2b04      	cmp	r3, #4
 80113c0:	d009      	beq.n	80113d6 <MOT_goSla+0xee>
 80113c2:	79fb      	ldrb	r3, [r7, #7]
 80113c4:	2b06      	cmp	r3, #6
 80113c6:	d006      	beq.n	80113d6 <MOT_goSla+0xee>
		( en_type == MOT_R90S_N ) ||
 80113c8:	79fb      	ldrb	r3, [r7, #7]
 80113ca:	2b08      	cmp	r3, #8
 80113cc:	d003      	beq.n	80113d6 <MOT_goSla+0xee>
		( en_type == MOT_R135S_S2N ) || ( en_type == MOT_R135S_N2S )
 80113ce:	79fb      	ldrb	r3, [r7, #7]
 80113d0:	2b0a      	cmp	r3, #10
 80113d2:	f040 80eb 	bne.w	80115ac <MOT_goSla+0x2c4>
	){
		st_info.f_mot_jerkAngle *= -1.0;
 80113d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80113da:	4618      	mov	r0, r3
 80113dc:	f7ef f8dc 	bl	8000598 <__aeabi_f2d>
 80113e0:	4602      	mov	r2, r0
 80113e2:	460b      	mov	r3, r1
 80113e4:	4610      	mov	r0, r2
 80113e6:	4619      	mov	r1, r3
 80113e8:	f7ef fc26 	bl	8000c38 <__aeabi_d2f>
 80113ec:	4603      	mov	r3, r0
 80113ee:	ee07 3a90 	vmov	s15, r3
 80113f2:	eef1 7a67 	vneg.f32	s15, s15
 80113f6:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
		st_info.f_mot_trgtAccAngle1 *= -1.0;
 80113fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80113fe:	4618      	mov	r0, r3
 8011400:	f7ef f8ca 	bl	8000598 <__aeabi_f2d>
 8011404:	4602      	mov	r2, r0
 8011406:	460b      	mov	r3, r1
 8011408:	4610      	mov	r0, r2
 801140a:	4619      	mov	r1, r3
 801140c:	f7ef fc14 	bl	8000c38 <__aeabi_d2f>
 8011410:	4603      	mov	r3, r0
 8011412:	ee07 3a90 	vmov	s15, r3
 8011416:	eef1 7a67 	vneg.f32	s15, s15
 801141a:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
		st_info.f_mot_trgtAngleS *= -1.0;
 801141e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011422:	4618      	mov	r0, r3
 8011424:	f7ef f8b8 	bl	8000598 <__aeabi_f2d>
 8011428:	4602      	mov	r2, r0
 801142a:	460b      	mov	r3, r1
 801142c:	4610      	mov	r0, r2
 801142e:	4619      	mov	r1, r3
 8011430:	f7ef fc02 	bl	8000c38 <__aeabi_d2f>
 8011434:	4603      	mov	r3, r0
 8011436:	ee07 3a90 	vmov	s15, r3
 801143a:	eef1 7a67 	vneg.f32	s15, s15
 801143e:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
		st_info.f_mot_accAnglejerk_v *= -1.0;
 8011442:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011446:	4618      	mov	r0, r3
 8011448:	f7ef f8a6 	bl	8000598 <__aeabi_f2d>
 801144c:	4602      	mov	r2, r0
 801144e:	460b      	mov	r3, r1
 8011450:	4610      	mov	r0, r2
 8011452:	4619      	mov	r1, r3
 8011454:	f7ef fbf0 	bl	8000c38 <__aeabi_d2f>
 8011458:	4603      	mov	r3, r0
 801145a:	ee07 3a90 	vmov	s15, r3
 801145e:	eef1 7a67 	vneg.f32	s15, s15
 8011462:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4

		st_info.f_mot_angle      *= -1.0;
 8011466:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801146a:	4618      	mov	r0, r3
 801146c:	f7ef f894 	bl	8000598 <__aeabi_f2d>
 8011470:	4602      	mov	r2, r0
 8011472:	460b      	mov	r3, r1
 8011474:	4610      	mov	r0, r2
 8011476:	4619      	mov	r1, r3
 8011478:	f7ef fbde 	bl	8000c38 <__aeabi_d2f>
 801147c:	4603      	mov	r3, r0
 801147e:	ee07 3a90 	vmov	s15, r3
 8011482:	eef1 7a67 	vneg.f32	s15, s15
 8011486:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
		st_info.f_mot_angle1     *= -1.0;
 801148a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801148e:	4618      	mov	r0, r3
 8011490:	f7ef f882 	bl	8000598 <__aeabi_f2d>
 8011494:	4602      	mov	r2, r0
 8011496:	460b      	mov	r3, r1
 8011498:	4610      	mov	r0, r2
 801149a:	4619      	mov	r1, r3
 801149c:	f7ef fbcc 	bl	8000c38 <__aeabi_d2f>
 80114a0:	4603      	mov	r3, r0
 80114a2:	ee07 3a90 	vmov	s15, r3
 80114a6:	eef1 7a67 	vneg.f32	s15, s15
 80114aa:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8
		st_info.f_mot_angle1_2   *= -1.0;
 80114ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7ef f870 	bl	8000598 <__aeabi_f2d>
 80114b8:	4602      	mov	r2, r0
 80114ba:	460b      	mov	r3, r1
 80114bc:	4610      	mov	r0, r2
 80114be:	4619      	mov	r1, r3
 80114c0:	f7ef fbba 	bl	8000c38 <__aeabi_d2f>
 80114c4:	4603      	mov	r3, r0
 80114c6:	ee07 3a90 	vmov	s15, r3
 80114ca:	eef1 7a67 	vneg.f32	s15, s15
 80114ce:	edc7 7a33 	vstr	s15, [r7, #204]	@ 0xcc

		st_info.f_mot_l1_accanglejerk	*= -1.0;
 80114d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7ef f85e 	bl	8000598 <__aeabi_f2d>
 80114dc:	4602      	mov	r2, r0
 80114de:	460b      	mov	r3, r1
 80114e0:	4610      	mov	r0, r2
 80114e2:	4619      	mov	r1, r3
 80114e4:	f7ef fba8 	bl	8000c38 <__aeabi_d2f>
 80114e8:	4603      	mov	r3, r0
 80114ea:	ee07 3a90 	vmov	s15, r3
 80114ee:	eef1 7a67 	vneg.f32	s15, s15
 80114f2:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
		st_info.f_mot_l1_accangleconst	*= -1.0;
 80114f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7ef f84c 	bl	8000598 <__aeabi_f2d>
 8011500:	4602      	mov	r2, r0
 8011502:	460b      	mov	r3, r1
 8011504:	4610      	mov	r0, r2
 8011506:	4619      	mov	r1, r3
 8011508:	f7ef fb96 	bl	8000c38 <__aeabi_d2f>
 801150c:	4603      	mov	r3, r0
 801150e:	ee07 3a90 	vmov	s15, r3
 8011512:	eef1 7a67 	vneg.f32	s15, s15
 8011516:	edc7 7a35 	vstr	s15, [r7, #212]	@ 0xd4
		st_info.f_mot_l1_decanglejerk	*= -1.0;
 801151a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801151e:	4618      	mov	r0, r3
 8011520:	f7ef f83a 	bl	8000598 <__aeabi_f2d>
 8011524:	4602      	mov	r2, r0
 8011526:	460b      	mov	r3, r1
 8011528:	4610      	mov	r0, r2
 801152a:	4619      	mov	r1, r3
 801152c:	f7ef fb84 	bl	8000c38 <__aeabi_d2f>
 8011530:	4603      	mov	r3, r0
 8011532:	ee07 3a90 	vmov	s15, r3
 8011536:	eef1 7a67 	vneg.f32	s15, s15
 801153a:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8
		st_info.f_mot_l3_decanglejerk	*= -1.0;
 801153e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011542:	4618      	mov	r0, r3
 8011544:	f7ef f828 	bl	8000598 <__aeabi_f2d>
 8011548:	4602      	mov	r2, r0
 801154a:	460b      	mov	r3, r1
 801154c:	4610      	mov	r0, r2
 801154e:	4619      	mov	r1, r3
 8011550:	f7ef fb72 	bl	8000c38 <__aeabi_d2f>
 8011554:	4603      	mov	r3, r0
 8011556:	ee07 3a90 	vmov	s15, r3
 801155a:	eef1 7a67 	vneg.f32	s15, s15
 801155e:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
		st_info.f_mot_l3_decangleconst	*= -1.0;
 8011562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011566:	4618      	mov	r0, r3
 8011568:	f7ef f816 	bl	8000598 <__aeabi_f2d>
 801156c:	4602      	mov	r2, r0
 801156e:	460b      	mov	r3, r1
 8011570:	4610      	mov	r0, r2
 8011572:	4619      	mov	r1, r3
 8011574:	f7ef fb60 	bl	8000c38 <__aeabi_d2f>
 8011578:	4603      	mov	r3, r0
 801157a:	ee07 3a90 	vmov	s15, r3
 801157e:	eef1 7a67 	vneg.f32	s15, s15
 8011582:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
		st_info.f_mot_l3_accanglejerk	*= -1.0;
 8011586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801158a:	4618      	mov	r0, r3
 801158c:	f7ef f804 	bl	8000598 <__aeabi_f2d>
 8011590:	4602      	mov	r2, r0
 8011592:	460b      	mov	r3, r1
 8011594:	4610      	mov	r0, r2
 8011596:	4619      	mov	r1, r3
 8011598:	f7ef fb4e 	bl	8000c38 <__aeabi_d2f>
 801159c:	4603      	mov	r3, r0
 801159e:	ee07 3a90 	vmov	s15, r3
 80115a2:	eef1 7a67 	vneg.f32	s15, s15
 80115a6:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
 80115aa:	e011      	b.n	80115d0 <MOT_goSla+0x2e8>
	}
	else{
		st_info.f_mot_trgtAccAngle3 *= -1.0;
 80115ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80115b0:	4618      	mov	r0, r3
 80115b2:	f7ee fff1 	bl	8000598 <__aeabi_f2d>
 80115b6:	4602      	mov	r2, r0
 80115b8:	460b      	mov	r3, r1
 80115ba:	4610      	mov	r0, r2
 80115bc:	4619      	mov	r1, r3
 80115be:	f7ef fb3b 	bl	8000c38 <__aeabi_d2f>
 80115c2:	4603      	mov	r3, r0
 80115c4:	ee07 3a90 	vmov	s15, r3
 80115c8:	eef1 7a67 	vneg.f32	s15, s15
 80115cc:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
	}

	/* 斜め走行のタイプに応じて、スラローム前の距離とスラローム後の退避距離を入れ替える */
	if( ( en_type == MOT_R45S_N2S ) || ( en_type == MOT_L45S_N2S ) || ( en_type == MOT_R135S_N2S ) || ( en_type == MOT_L135S_N2S ) ){ 		// 逆にするもの
 80115d0:	79fb      	ldrb	r3, [r7, #7]
 80115d2:	2b04      	cmp	r3, #4
 80115d4:	d008      	beq.n	80115e8 <MOT_goSla+0x300>
 80115d6:	79fb      	ldrb	r3, [r7, #7]
 80115d8:	2b05      	cmp	r3, #5
 80115da:	d005      	beq.n	80115e8 <MOT_goSla+0x300>
 80115dc:	79fb      	ldrb	r3, [r7, #7]
 80115de:	2b0a      	cmp	r3, #10
 80115e0:	d002      	beq.n	80115e8 <MOT_goSla+0x300>
 80115e2:	79fb      	ldrb	r3, [r7, #7]
 80115e4:	2b0b      	cmp	r3, #11
 80115e6:	d10b      	bne.n	8011600 <MOT_goSla+0x318>
		f_entryLen  = p_sla->f_sla_escapeLen;
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	695b      	ldr	r3, [r3, #20]
 80115ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
		f_escapeLen = p_sla->f_sla_entryLen;
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	691b      	ldr	r3, [r3, #16]
 80115f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80115f8:	e00a      	b.n	8011610 <MOT_goSla+0x328>
 80115fa:	bf00      	nop
 80115fc:	20017b2c 	.word	0x20017b2c
	}
	else{		// 通常
		f_entryLen  = p_sla->f_sla_entryLen;
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	691b      	ldr	r3, [r3, #16]
 8011604:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
		f_escapeLen = p_sla->f_sla_escapeLen;
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	695b      	ldr	r3, [r3, #20]
 801160c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
	}

	GYRO_staErrChkAngle();			// エラー検出開始
 8011610:	f7f8 faf0 	bl	8009bf4 <GYRO_staErrChkAngle>
	/*      entry      */
	/* ================ */
	/* ------------------------ */
	/*  スラローム前の前進動作  */
	/* ------------------------ */
	st_data.en_ctrl_type			= CTRL_ENTRY_SLA;
 8011614:	230a      	movs	r3, #10
 8011616:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 8011618:	f04f 0300 	mov.w	r3, #0
 801161c:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 801161e:	f04f 0300 	mov.w	r3, #0
 8011622:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 8011624:	f04f 0300 	mov.w	r3, #0
 8011628:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 801162a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801162c:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 801162e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011630:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= 0;						// 進んでいない
 8011632:	f04f 0300 	mov.w	r3, #0
 8011636:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_entryLen;				// スラローム前の前進距離
 8011638:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801163c:	62bb      	str	r3, [r7, #40]	@ 0x28
	st_data.f_ctrl_jerkAngle	= 0;
 801163e:	f04f 0300 	mov.w	r3, #0
 8011642:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= 0;
 8011644:	f04f 0300 	mov.w	r3, #0
 8011648:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= 0;
 801164a:	f04f 0300 	mov.w	r3, #0
 801164e:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 8011650:	f04f 0300 	mov.w	r3, #0
 8011654:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS	= 0;						// 目標角度
 8011656:	f04f 0300 	mov.w	r3, #0
 801165a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 801165c:	f04f 0300 	mov.w	r3, #0
 8011660:	643b      	str	r3, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= 0;						// 目標角度
 8011662:	f04f 0300 	mov.w	r3, #0
 8011666:	647b      	str	r3, [r7, #68]	@ 0x44
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 8011668:	f04f 0300 	mov.w	r3, #0
 801166c:	60fb      	str	r3, [r7, #12]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 801166e:	f7f4 fee9 	bl	8006444 <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 8011672:	f107 0308 	add.w	r3, r7, #8
 8011676:	4618      	mov	r0, r3
 8011678:	f7f4 ffd2 	bl	8006620 <CTRL_setData>
	DCM_staMotAll();									// モータON
 801167c:	f7f8 f886 	bl	800978c <DCM_staMotAll>

	while( Get_NowDist() < f_entryLen + uc_DistControl ){				// 指定距離到達待ち
 8011680:	e025      	b.n	80116ce <MOT_goSla+0x3e6>
		if(( en_type == MOT_R90S ) ||( en_type == MOT_L90S ) ){
 8011682:	79fb      	ldrb	r3, [r7, #7]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d002      	beq.n	801168e <MOT_goSla+0x3a6>
 8011688:	79fb      	ldrb	r3, [r7, #7]
 801168a:	2b01      	cmp	r3, #1
 801168c:	d10c      	bne.n	80116a8 <MOT_goSla+0x3c0>
			if((DIST_getNowVal( DIST_SEN_R_FRONT )>R_FRONT_CTRL)&&(DIST_getNowVal( DIST_SEN_L_FRONT )>L_FRONT_CTRL))break;
 801168e:	2000      	movs	r0, #0
 8011690:	f001 fad6 	bl	8012c40 <DIST_getNowVal>
 8011694:	4603      	mov	r3, r0
 8011696:	2ba8      	cmp	r3, #168	@ 0xa8
 8011698:	dd0a      	ble.n	80116b0 <MOT_goSla+0x3c8>
 801169a:	2001      	movs	r0, #1
 801169c:	f001 fad0 	bl	8012c40 <DIST_getNowVal>
 80116a0:	4603      	mov	r3, r0
 80116a2:	2b8a      	cmp	r3, #138	@ 0x8a
 80116a4:	dd04      	ble.n	80116b0 <MOT_goSla+0x3c8>
 80116a6:	e025      	b.n	80116f4 <MOT_goSla+0x40c>
		}
		else{
			uc_DistControl = 0.0;
 80116a8:	4bc5      	ldr	r3, [pc, #788]	@ (80119c0 <MOT_goSla+0x6d8>)
 80116aa:	2200      	movs	r2, #0
 80116ac:	701a      	strb	r2, [r3, #0]
 80116ae:	e000      	b.n	80116b2 <MOT_goSla+0x3ca>
			if((DIST_getNowVal( DIST_SEN_R_FRONT )>R_FRONT_CTRL)&&(DIST_getNowVal( DIST_SEN_L_FRONT )>L_FRONT_CTRL))break;
 80116b0:	bf00      	nop
		}
		if( SYS_isOutOfCtrl() == TRUE ){
 80116b2:	f7f8 f815 	bl	80096e0 <SYS_isOutOfCtrl>
 80116b6:	4603      	mov	r3, r0
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d008      	beq.n	80116ce <MOT_goSla+0x3e6>
			CTRL_stop();
 80116bc:	f7f4 feb2 	bl	8006424 <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 80116c0:	2000      	movs	r0, #0
 80116c2:	f7f8 f83f 	bl	8009744 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 80116c6:	2001      	movs	r0, #1
 80116c8:	f7f8 f83c 	bl	8009744 <DCM_brakeMot>
			break;
 80116cc:	e012      	b.n	80116f4 <MOT_goSla+0x40c>
	while( Get_NowDist() < f_entryLen + uc_DistControl ){				// 指定距離到達待ち
 80116ce:	f7f4 fdf9 	bl	80062c4 <Get_NowDist>
 80116d2:	eef0 6a40 	vmov.f32	s13, s0
 80116d6:	4bba      	ldr	r3, [pc, #744]	@ (80119c0 <MOT_goSla+0x6d8>)
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	ee07 3a90 	vmov	s15, r3
 80116de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80116e2:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 80116e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116ea:	eef4 6ae7 	vcmpe.f32	s13, s15
 80116ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116f2:	d4c6      	bmi.n	8011682 <MOT_goSla+0x39a>
//	LED_off(LED1);
//	log_in(0);
	/* ------ */
	/*  acc jerk */
	/* ------ */
	st_data.en_ctrl_type			= CTRL_ACC_SLA;
 80116f4:	230b      	movs	r3, #11
 80116f6:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 80116f8:	f04f 0300 	mov.w	r3, #0
 80116fc:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 80116fe:	f04f 0300 	mov.w	r3, #0
 8011702:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 8011704:	f04f 0300 	mov.w	r3, #0
 8011708:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 801170a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801170c:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 801170e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011710:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= f_entryLen;				//
 8011712:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8011716:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_entryLen + st_info.f_mot_now * p_sla->us_sla_jerkAngaccTime * 0.001;		// 加速距離
 8011718:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 801171c:	f7ee ff3c 	bl	8000598 <__aeabi_f2d>
 8011720:	4604      	mov	r4, r0
 8011722:	460d      	mov	r5, r1
 8011724:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	8b1b      	ldrh	r3, [r3, #24]
 801172c:	ee07 3a90 	vmov	s15, r3
 8011730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011738:	ee17 0a90 	vmov	r0, s15
 801173c:	f7ee ff2c 	bl	8000598 <__aeabi_f2d>
 8011740:	a39d      	add	r3, pc, #628	@ (adr r3, 80119b8 <MOT_goSla+0x6d0>)
 8011742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011746:	f7ee ff7f 	bl	8000648 <__aeabi_dmul>
 801174a:	4602      	mov	r2, r0
 801174c:	460b      	mov	r3, r1
 801174e:	4620      	mov	r0, r4
 8011750:	4629      	mov	r1, r5
 8011752:	f7ee fdc3 	bl	80002dc <__adddf3>
 8011756:	4602      	mov	r2, r0
 8011758:	460b      	mov	r3, r1
 801175a:	4610      	mov	r0, r2
 801175c:	4619      	mov	r1, r3
 801175e:	f7ef fa6b 	bl	8000c38 <__aeabi_d2f>
 8011762:	4603      	mov	r3, r0
 8011764:	62bb      	str	r3, [r7, #40]	@ 0x28
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS1;		// 角加速度
	st_data.f_ctrl_jerkAngle	= st_info.f_mot_jerkAngle;
 8011766:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= 0;
 801176c:	f04f 0300 	mov.w	r3, #0
 8011770:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= st_info.f_mot_trgtAccAngle1;
 8011772:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011776:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 8011778:	f04f 0300 	mov.w	r3, #0
 801177c:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_accAnglejerk_v;		// 目標角速度
 801177e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011782:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 8011784:	f04f 0300 	mov.w	r3, #0
 8011788:	643b      	str	r3, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= st_info.f_mot_l1_accanglejerk;			// 目標角度
 801178a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801178e:	647b      	str	r3, [r7, #68]	@ 0x44
	st_data.f_ctrl_time 			= p_sla->us_sla_jerkAngaccTime * 0.001;			// [msec] → [sec]
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	8b1b      	ldrh	r3, [r3, #24]
 8011794:	4618      	mov	r0, r3
 8011796:	f7ee feed 	bl	8000574 <__aeabi_i2d>
 801179a:	a387      	add	r3, pc, #540	@ (adr r3, 80119b8 <MOT_goSla+0x6d0>)
 801179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a0:	f7ee ff52 	bl	8000648 <__aeabi_dmul>
 80117a4:	4602      	mov	r2, r0
 80117a6:	460b      	mov	r3, r1
 80117a8:	4610      	mov	r0, r2
 80117aa:	4619      	mov	r1, r3
 80117ac:	f7ef fa44 	bl	8000c38 <__aeabi_d2f>
 80117b0:	4603      	mov	r3, r0
 80117b2:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 80117b4:	f107 0308 	add.w	r3, r7, #8
 80117b8:	4618      	mov	r0, r3
 80117ba:	f7f4 ff31 	bl	8006620 <CTRL_setData>
//	printf("trgtangleS %5.2f\n\r",st_data.f_trgtAngleS);
//	printf("jerkacc angle%.5f, dist%.5f\n\r",st_info.f_mot_l1_accanglejerk,st_data.f_ctrl_dist);
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 80117be:	79fb      	ldrb	r3, [r7, #7]
 80117c0:	f003 0301 	and.w	r3, r3, #1
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d133      	bne.n	8011832 <MOT_goSla+0x54a>
		while( ( Get_NowAngle() > st_info.f_mot_l1_accanglejerk ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 80117ca:	e00d      	b.n	80117e8 <MOT_goSla+0x500>
			if( SYS_isOutOfCtrl() == TRUE ){
 80117cc:	f7f7 ff88 	bl	80096e0 <SYS_isOutOfCtrl>
 80117d0:	4603      	mov	r3, r0
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d008      	beq.n	80117e8 <MOT_goSla+0x500>
				CTRL_stop();
 80117d6:	f7f4 fe25 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 80117da:	2000      	movs	r0, #0
 80117dc:	f7f7 ffb2 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 80117e0:	2001      	movs	r0, #1
 80117e2:	f7f7 ffaf 	bl	8009744 <DCM_brakeMot>
				break;
 80117e6:	e03a      	b.n	801185e <MOT_goSla+0x576>
		while( ( Get_NowAngle() > st_info.f_mot_l1_accanglejerk ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 80117e8:	f7f4 fdb4 	bl	8006354 <Get_NowAngle>
 80117ec:	eeb0 7a40 	vmov.f32	s14, s0
 80117f0:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 80117f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80117f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117fc:	dd2f      	ble.n	801185e <MOT_goSla+0x576>
 80117fe:	f7f4 fd61 	bl	80062c4 <Get_NowDist>
 8011802:	eeb0 7a40 	vmov.f32	s14, s0
 8011806:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801180a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011812:	d4db      	bmi.n	80117cc <MOT_goSla+0x4e4>
 8011814:	e023      	b.n	801185e <MOT_goSla+0x576>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( ( Get_NowAngle() < st_info.f_mot_l1_accanglejerk ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 8011816:	f7f7 ff63 	bl	80096e0 <SYS_isOutOfCtrl>
 801181a:	4603      	mov	r3, r0
 801181c:	2b00      	cmp	r3, #0
 801181e:	d008      	beq.n	8011832 <MOT_goSla+0x54a>
				CTRL_stop();
 8011820:	f7f4 fe00 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8011824:	2000      	movs	r0, #0
 8011826:	f7f7 ff8d 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 801182a:	2001      	movs	r0, #1
 801182c:	f7f7 ff8a 	bl	8009744 <DCM_brakeMot>
				break;
 8011830:	e015      	b.n	801185e <MOT_goSla+0x576>
		while( ( Get_NowAngle() < st_info.f_mot_l1_accanglejerk ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8011832:	f7f4 fd8f 	bl	8006354 <Get_NowAngle>
 8011836:	eeb0 7a40 	vmov.f32	s14, s0
 801183a:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 801183e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011846:	d50a      	bpl.n	801185e <MOT_goSla+0x576>
 8011848:	f7f4 fd3c 	bl	80062c4 <Get_NowDist>
 801184c:	eeb0 7a40 	vmov.f32	s14, s0
 8011850:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801185c:	d4db      	bmi.n	8011816 <MOT_goSla+0x52e>
			}				// 途中で制御不能になった
		}
	}
	//acc const
	st_data.en_ctrl_type			= CTRL_ACC_SLA;
 801185e:	230b      	movs	r3, #11
 8011860:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 8011862:	f04f 0300 	mov.w	r3, #0
 8011866:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8011868:	f04f 0300 	mov.w	r3, #0
 801186c:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 801186e:	f04f 0300 	mov.w	r3, #0
 8011872:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 8011874:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011876:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 8011878:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801187a:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= f_entryLen + st_info.f_mot_now * p_sla->us_sla_jerkAngaccTime * 0.001;				//
 801187c:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8011880:	f7ee fe8a 	bl	8000598 <__aeabi_f2d>
 8011884:	4604      	mov	r4, r0
 8011886:	460d      	mov	r5, r1
 8011888:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	8b1b      	ldrh	r3, [r3, #24]
 8011890:	ee07 3a90 	vmov	s15, r3
 8011894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011898:	ee67 7a27 	vmul.f32	s15, s14, s15
 801189c:	ee17 0a90 	vmov	r0, s15
 80118a0:	f7ee fe7a 	bl	8000598 <__aeabi_f2d>
 80118a4:	a344      	add	r3, pc, #272	@ (adr r3, 80119b8 <MOT_goSla+0x6d0>)
 80118a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118aa:	f7ee fecd 	bl	8000648 <__aeabi_dmul>
 80118ae:	4602      	mov	r2, r0
 80118b0:	460b      	mov	r3, r1
 80118b2:	4620      	mov	r0, r4
 80118b4:	4629      	mov	r1, r5
 80118b6:	f7ee fd11 	bl	80002dc <__adddf3>
 80118ba:	4602      	mov	r2, r0
 80118bc:	460b      	mov	r3, r1
 80118be:	4610      	mov	r0, r2
 80118c0:	4619      	mov	r1, r3
 80118c2:	f7ef f9b9 	bl	8000c38 <__aeabi_d2f>
 80118c6:	4603      	mov	r3, r0
 80118c8:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_entryLen + st_info.f_mot_now * (p_sla->us_sla_accAngvelTime + p_sla->us_sla_jerkAngaccTime)* 0.001;		// 加速距離
 80118ca:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 80118ce:	f7ee fe63 	bl	8000598 <__aeabi_f2d>
 80118d2:	4604      	mov	r4, r0
 80118d4:	460d      	mov	r5, r1
 80118d6:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	8b5b      	ldrh	r3, [r3, #26]
 80118de:	461a      	mov	r2, r3
 80118e0:	683b      	ldr	r3, [r7, #0]
 80118e2:	8b1b      	ldrh	r3, [r3, #24]
 80118e4:	4413      	add	r3, r2
 80118e6:	ee07 3a90 	vmov	s15, r3
 80118ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80118f2:	ee17 0a90 	vmov	r0, s15
 80118f6:	f7ee fe4f 	bl	8000598 <__aeabi_f2d>
 80118fa:	a32f      	add	r3, pc, #188	@ (adr r3, 80119b8 <MOT_goSla+0x6d0>)
 80118fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011900:	f7ee fea2 	bl	8000648 <__aeabi_dmul>
 8011904:	4602      	mov	r2, r0
 8011906:	460b      	mov	r3, r1
 8011908:	4620      	mov	r0, r4
 801190a:	4629      	mov	r1, r5
 801190c:	f7ee fce6 	bl	80002dc <__adddf3>
 8011910:	4602      	mov	r2, r0
 8011912:	460b      	mov	r3, r1
 8011914:	4610      	mov	r0, r2
 8011916:	4619      	mov	r1, r3
 8011918:	f7ef f98e 	bl	8000c38 <__aeabi_d2f>
 801191c:	4603      	mov	r3, r0
 801191e:	62bb      	str	r3, [r7, #40]	@ 0x28
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS1;		// 角加速度
	st_data.f_ctrl_jerkAngle	= 0;
 8011920:	f04f 0300 	mov.w	r3, #0
 8011924:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= st_info.f_mot_trgtAccAngle1;
 8011926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801192a:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= st_info.f_mot_trgtAccAngle1;
 801192c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011930:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_accAnglejerk_v;						// 現在角速度
 8011932:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011936:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_trgtAngleS-st_info.f_mot_accAnglejerk_v;		// 目標角速度
 8011938:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 801193c:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8011940:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011944:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle		= st_info.f_mot_l1_accanglejerk;						// 現在角度
 8011948:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801194c:	643b      	str	r3, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst;			// 目標角度
 801194e:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 8011952:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8011956:	ee77 7a27 	vadd.f32	s15, s14, s15
 801195a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	st_data.f_ctrl_time 			=  p_sla->us_sla_accAngvelTime * 0.001;			// [msec] → [sec]
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	8b5b      	ldrh	r3, [r3, #26]
 8011962:	4618      	mov	r0, r3
 8011964:	f7ee fe06 	bl	8000574 <__aeabi_i2d>
 8011968:	a313      	add	r3, pc, #76	@ (adr r3, 80119b8 <MOT_goSla+0x6d0>)
 801196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801196e:	f7ee fe6b 	bl	8000648 <__aeabi_dmul>
 8011972:	4602      	mov	r2, r0
 8011974:	460b      	mov	r3, r1
 8011976:	4610      	mov	r0, r2
 8011978:	4619      	mov	r1, r3
 801197a:	f7ef f95d 	bl	8000c38 <__aeabi_d2f>
 801197e:	4603      	mov	r3, r0
 8011980:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 8011982:	f107 0308 	add.w	r3, r7, #8
 8011986:	4618      	mov	r0, r3
 8011988:	f7f4 fe4a 	bl	8006620 <CTRL_setData>
//	printf("trgtangleS %5.2f\n\r",st_data.f_trgtAngleS);
//	printf("jerkconst angle%.5f, dist%.5f\n\r",st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst,st_data.f_ctrl_dist);
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 801198c:	79fb      	ldrb	r3, [r7, #7]
 801198e:	f003 0301 	and.w	r3, r3, #1
 8011992:	b2db      	uxtb	r3, r3
 8011994:	2b00      	cmp	r3, #0
 8011996:	d13e      	bne.n	8011a16 <MOT_goSla+0x72e>
		while( ( Get_NowAngle() > (st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8011998:	e014      	b.n	80119c4 <MOT_goSla+0x6dc>
			if( SYS_isOutOfCtrl() == TRUE ){
 801199a:	f7f7 fea1 	bl	80096e0 <SYS_isOutOfCtrl>
 801199e:	4603      	mov	r3, r0
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d00f      	beq.n	80119c4 <MOT_goSla+0x6dc>
				CTRL_stop();
 80119a4:	f7f4 fd3e 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 80119a8:	2000      	movs	r0, #0
 80119aa:	f7f7 fecb 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 80119ae:	2001      	movs	r0, #1
 80119b0:	f7f7 fec8 	bl	8009744 <DCM_brakeMot>
				break;
 80119b4:	e049      	b.n	8011a4a <MOT_goSla+0x762>
 80119b6:	bf00      	nop
 80119b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80119bc:	3f50624d 	.word	0x3f50624d
 80119c0:	20000400 	.word	0x20000400
		while( ( Get_NowAngle() > (st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 80119c4:	f7f4 fcc6 	bl	8006354 <Get_NowAngle>
 80119c8:	eef0 6a40 	vmov.f32	s13, s0
 80119cc:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 80119d0:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 80119d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80119d8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80119dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119e0:	dd33      	ble.n	8011a4a <MOT_goSla+0x762>
 80119e2:	f7f4 fc6f 	bl	80062c4 <Get_NowDist>
 80119e6:	eeb0 7a40 	vmov.f32	s14, s0
 80119ea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80119ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80119f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119f6:	d4d0      	bmi.n	801199a <MOT_goSla+0x6b2>
 80119f8:	e027      	b.n	8011a4a <MOT_goSla+0x762>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( ( Get_NowAngle() < (st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 80119fa:	f7f7 fe71 	bl	80096e0 <SYS_isOutOfCtrl>
 80119fe:	4603      	mov	r3, r0
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d008      	beq.n	8011a16 <MOT_goSla+0x72e>
				CTRL_stop();
 8011a04:	f7f4 fd0e 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8011a08:	2000      	movs	r0, #0
 8011a0a:	f7f7 fe9b 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8011a0e:	2001      	movs	r0, #1
 8011a10:	f7f7 fe98 	bl	8009744 <DCM_brakeMot>
				break;
 8011a14:	e019      	b.n	8011a4a <MOT_goSla+0x762>
		while( ( Get_NowAngle() < (st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8011a16:	f7f4 fc9d 	bl	8006354 <Get_NowAngle>
 8011a1a:	eef0 6a40 	vmov.f32	s13, s0
 8011a1e:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 8011a22:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8011a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a2a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a32:	d50a      	bpl.n	8011a4a <MOT_goSla+0x762>
 8011a34:	f7f4 fc46 	bl	80062c4 <Get_NowDist>
 8011a38:	eeb0 7a40 	vmov.f32	s14, s0
 8011a3c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011a40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a48:	d4d7      	bmi.n	80119fa <MOT_goSla+0x712>
			}				// 途中で制御不能になった
		}
	}

	//acc -jerk
	st_data.en_ctrl_type			= CTRL_ACC_SLA;
 8011a4a:	230b      	movs	r3, #11
 8011a4c:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 8011a4e:	f04f 0300 	mov.w	r3, #0
 8011a52:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8011a54:	f04f 0300 	mov.w	r3, #0
 8011a58:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 8011a5a:	f04f 0300 	mov.w	r3, #0
 8011a5e:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 8011a60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011a62:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 8011a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011a66:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= f_entryLen + st_info.f_mot_now * (p_sla->us_sla_accAngvelTime + p_sla->us_sla_jerkAngaccTime)* 0.001;				//
 8011a68:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8011a6c:	f7ee fd94 	bl	8000598 <__aeabi_f2d>
 8011a70:	4604      	mov	r4, r0
 8011a72:	460d      	mov	r5, r1
 8011a74:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	8b5b      	ldrh	r3, [r3, #26]
 8011a7c:	461a      	mov	r2, r3
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	8b1b      	ldrh	r3, [r3, #24]
 8011a82:	4413      	add	r3, r2
 8011a84:	ee07 3a90 	vmov	s15, r3
 8011a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a90:	ee17 0a90 	vmov	r0, s15
 8011a94:	f7ee fd80 	bl	8000598 <__aeabi_f2d>
 8011a98:	f20f 631c 	addw	r3, pc, #1564	@ 0x61c
 8011a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa0:	f7ee fdd2 	bl	8000648 <__aeabi_dmul>
 8011aa4:	4602      	mov	r2, r0
 8011aa6:	460b      	mov	r3, r1
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	4629      	mov	r1, r5
 8011aac:	f7ee fc16 	bl	80002dc <__adddf3>
 8011ab0:	4602      	mov	r2, r0
 8011ab2:	460b      	mov	r3, r1
 8011ab4:	4610      	mov	r0, r2
 8011ab6:	4619      	mov	r1, r3
 8011ab8:	f7ef f8be 	bl	8000c38 <__aeabi_d2f>
 8011abc:	4603      	mov	r3, r0
 8011abe:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_entryLen + st_info.f_mot_now * (p_sla->us_sla_accAngvelTime + p_sla->us_sla_jerkAngaccTime*2.0)* 0.001;		// 加速距離
 8011ac0:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8011ac4:	f7ee fd68 	bl	8000598 <__aeabi_f2d>
 8011ac8:	4604      	mov	r4, r0
 8011aca:	460d      	mov	r5, r1
 8011acc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7ee fd62 	bl	8000598 <__aeabi_f2d>
 8011ad4:	4680      	mov	r8, r0
 8011ad6:	4689      	mov	r9, r1
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	8b5b      	ldrh	r3, [r3, #26]
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7ee fd49 	bl	8000574 <__aeabi_i2d>
 8011ae2:	4682      	mov	sl, r0
 8011ae4:	468b      	mov	fp, r1
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	8b1b      	ldrh	r3, [r3, #24]
 8011aea:	4618      	mov	r0, r3
 8011aec:	f7ee fd42 	bl	8000574 <__aeabi_i2d>
 8011af0:	4602      	mov	r2, r0
 8011af2:	460b      	mov	r3, r1
 8011af4:	f7ee fbf2 	bl	80002dc <__adddf3>
 8011af8:	4602      	mov	r2, r0
 8011afa:	460b      	mov	r3, r1
 8011afc:	4650      	mov	r0, sl
 8011afe:	4659      	mov	r1, fp
 8011b00:	f7ee fbec 	bl	80002dc <__adddf3>
 8011b04:	4602      	mov	r2, r0
 8011b06:	460b      	mov	r3, r1
 8011b08:	4640      	mov	r0, r8
 8011b0a:	4649      	mov	r1, r9
 8011b0c:	f7ee fd9c 	bl	8000648 <__aeabi_dmul>
 8011b10:	4602      	mov	r2, r0
 8011b12:	460b      	mov	r3, r1
 8011b14:	4610      	mov	r0, r2
 8011b16:	4619      	mov	r1, r3
 8011b18:	f20f 539c 	addw	r3, pc, #1436	@ 0x59c
 8011b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b20:	f7ee fd92 	bl	8000648 <__aeabi_dmul>
 8011b24:	4602      	mov	r2, r0
 8011b26:	460b      	mov	r3, r1
 8011b28:	4620      	mov	r0, r4
 8011b2a:	4629      	mov	r1, r5
 8011b2c:	f7ee fbd6 	bl	80002dc <__adddf3>
 8011b30:	4602      	mov	r2, r0
 8011b32:	460b      	mov	r3, r1
 8011b34:	4610      	mov	r0, r2
 8011b36:	4619      	mov	r1, r3
 8011b38:	f7ef f87e 	bl	8000c38 <__aeabi_d2f>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS1;		// 角加速度
	st_data.f_ctrl_jerkAngle	= st_info.f_mot_jerkAngle*(-1.0);
 8011b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7ee fd27 	bl	8000598 <__aeabi_f2d>
 8011b4a:	4602      	mov	r2, r0
 8011b4c:	460b      	mov	r3, r1
 8011b4e:	4610      	mov	r0, r2
 8011b50:	4619      	mov	r1, r3
 8011b52:	f7ef f871 	bl	8000c38 <__aeabi_d2f>
 8011b56:	4603      	mov	r3, r0
 8011b58:	ee07 3a90 	vmov	s15, r3
 8011b5c:	eef1 7a67 	vneg.f32	s15, s15
 8011b60:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= st_info.f_mot_trgtAccAngle1;
 8011b64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011b68:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= 0;
 8011b6a:	f04f 0300 	mov.w	r3, #0
 8011b6e:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_trgtAngleS - st_info.f_mot_accAnglejerk_v;						// 現在角速度
 8011b70:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 8011b74:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8011b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b7c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_trgtAngleS;		// 目標角速度
 8011b80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle			= st_info.f_mot_l1_accanglejerk+st_info.f_mot_l1_accangleconst;						// 現在角度
 8011b86:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 8011b8a:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8011b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b92:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= st_info.f_mot_angle1;			// 目標角度
 8011b96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011b9a:	647b      	str	r3, [r7, #68]	@ 0x44
	st_data.f_ctrl_time 			=  p_sla->us_sla_jerkAngaccTime * 0.001;			// [msec] → [sec]
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	8b1b      	ldrh	r3, [r3, #24]
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7ee fce7 	bl	8000574 <__aeabi_i2d>
 8011ba6:	f20f 5310 	addw	r3, pc, #1296	@ 0x510
 8011baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bae:	f7ee fd4b 	bl	8000648 <__aeabi_dmul>
 8011bb2:	4602      	mov	r2, r0
 8011bb4:	460b      	mov	r3, r1
 8011bb6:	4610      	mov	r0, r2
 8011bb8:	4619      	mov	r1, r3
 8011bba:	f7ef f83d 	bl	8000c38 <__aeabi_d2f>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 8011bc2:	f107 0308 	add.w	r3, r7, #8
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f7f4 fd2a 	bl	8006620 <CTRL_setData>
//	printf("trgtangleS %5.2f\n\r",st_data.f_trgtAngleS);
//	printf("jerkdec angle%.5f, dist%.5f\n\r",st_info.f_mot_angle1,st_data.f_ctrl_dist);
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 8011bcc:	79fb      	ldrb	r3, [r7, #7]
 8011bce:	f003 0301 	and.w	r3, r3, #1
 8011bd2:	b2db      	uxtb	r3, r3
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d133      	bne.n	8011c40 <MOT_goSla+0x958>
		while( ( Get_NowAngle() > st_info.f_mot_angle1 ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8011bd8:	e00d      	b.n	8011bf6 <MOT_goSla+0x90e>
			if( SYS_isOutOfCtrl() == TRUE ){
 8011bda:	f7f7 fd81 	bl	80096e0 <SYS_isOutOfCtrl>
 8011bde:	4603      	mov	r3, r0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d008      	beq.n	8011bf6 <MOT_goSla+0x90e>
				CTRL_stop();
 8011be4:	f7f4 fc1e 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8011be8:	2000      	movs	r0, #0
 8011bea:	f7f7 fdab 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8011bee:	2001      	movs	r0, #1
 8011bf0:	f7f7 fda8 	bl	8009744 <DCM_brakeMot>
				break;
 8011bf4:	e03a      	b.n	8011c6c <MOT_goSla+0x984>
		while( ( Get_NowAngle() > st_info.f_mot_angle1 ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8011bf6:	f7f4 fbad 	bl	8006354 <Get_NowAngle>
 8011bfa:	eeb0 7a40 	vmov.f32	s14, s0
 8011bfe:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8011c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c0a:	dd2f      	ble.n	8011c6c <MOT_goSla+0x984>
 8011c0c:	f7f4 fb5a 	bl	80062c4 <Get_NowDist>
 8011c10:	eeb0 7a40 	vmov.f32	s14, s0
 8011c14:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011c18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c20:	d4db      	bmi.n	8011bda <MOT_goSla+0x8f2>
 8011c22:	e023      	b.n	8011c6c <MOT_goSla+0x984>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( ( Get_NowAngle() < st_info.f_mot_angle1 ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 8011c24:	f7f7 fd5c 	bl	80096e0 <SYS_isOutOfCtrl>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d008      	beq.n	8011c40 <MOT_goSla+0x958>
				CTRL_stop();
 8011c2e:	f7f4 fbf9 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8011c32:	2000      	movs	r0, #0
 8011c34:	f7f7 fd86 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8011c38:	2001      	movs	r0, #1
 8011c3a:	f7f7 fd83 	bl	8009744 <DCM_brakeMot>
				break;
 8011c3e:	e015      	b.n	8011c6c <MOT_goSla+0x984>
		while( ( Get_NowAngle() < st_info.f_mot_angle1 ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8011c40:	f7f4 fb88 	bl	8006354 <Get_NowAngle>
 8011c44:	eeb0 7a40 	vmov.f32	s14, s0
 8011c48:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8011c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c54:	d50a      	bpl.n	8011c6c <MOT_goSla+0x984>
 8011c56:	f7f4 fb35 	bl	80062c4 <Get_NowDist>
 8011c5a:	eeb0 7a40 	vmov.f32	s14, s0
 8011c5e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011c62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c6a:	d4db      	bmi.n	8011c24 <MOT_goSla+0x93c>
//	log_in(0);
//	log_in(f_NowAngle);
	/* ------ */
	/*  const  */
	/* ------ */
	st_data.en_ctrl_type			= CTRL_CONST_SLA;
 8011c6c:	230c      	movs	r3, #12
 8011c6e:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 8011c70:	f04f 0300 	mov.w	r3, #0
 8011c74:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8011c76:	f04f 0300 	mov.w	r3, #0
 8011c7a:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 8011c7c:	f04f 0300 	mov.w	r3, #0
 8011c80:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 8011c82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011c84:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 8011c86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011c88:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= f_entryLen + st_info.f_mot_now * (p_sla->us_sla_accAngvelTime + p_sla->us_sla_jerkAngaccTime*2.0)* 0.001;
 8011c8a:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8011c8e:	f7ee fc83 	bl	8000598 <__aeabi_f2d>
 8011c92:	4604      	mov	r4, r0
 8011c94:	460d      	mov	r5, r1
 8011c96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f7ee fc7d 	bl	8000598 <__aeabi_f2d>
 8011c9e:	4680      	mov	r8, r0
 8011ca0:	4689      	mov	r9, r1
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	8b5b      	ldrh	r3, [r3, #26]
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f7ee fc64 	bl	8000574 <__aeabi_i2d>
 8011cac:	4682      	mov	sl, r0
 8011cae:	468b      	mov	fp, r1
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	8b1b      	ldrh	r3, [r3, #24]
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f7ee fc5d 	bl	8000574 <__aeabi_i2d>
 8011cba:	4602      	mov	r2, r0
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	f7ee fb0d 	bl	80002dc <__adddf3>
 8011cc2:	4602      	mov	r2, r0
 8011cc4:	460b      	mov	r3, r1
 8011cc6:	4650      	mov	r0, sl
 8011cc8:	4659      	mov	r1, fp
 8011cca:	f7ee fb07 	bl	80002dc <__adddf3>
 8011cce:	4602      	mov	r2, r0
 8011cd0:	460b      	mov	r3, r1
 8011cd2:	4640      	mov	r0, r8
 8011cd4:	4649      	mov	r1, r9
 8011cd6:	f7ee fcb7 	bl	8000648 <__aeabi_dmul>
 8011cda:	4602      	mov	r2, r0
 8011cdc:	460b      	mov	r3, r1
 8011cde:	4610      	mov	r0, r2
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	a3f5      	add	r3, pc, #980	@ (adr r3, 80120b8 <MOT_goSla+0xdd0>)
 8011ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce8:	f7ee fcae 	bl	8000648 <__aeabi_dmul>
 8011cec:	4602      	mov	r2, r0
 8011cee:	460b      	mov	r3, r1
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	4629      	mov	r1, r5
 8011cf4:	f7ee faf2 	bl	80002dc <__adddf3>
 8011cf8:	4602      	mov	r2, r0
 8011cfa:	460b      	mov	r3, r1
 8011cfc:	4610      	mov	r0, r2
 8011cfe:	4619      	mov	r1, r3
 8011d00:	f7ee ff9a 	bl	8000c38 <__aeabi_d2f>
 8011d04:	4603      	mov	r3, r0
 8011d06:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime + p_sla->us_sla_jerkAngaccTime*2.0) * 0.001;		// 等速距離
 8011d08:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8011d0c:	f7ee fc44 	bl	8000598 <__aeabi_f2d>
 8011d10:	4604      	mov	r4, r0
 8011d12:	460d      	mov	r5, r1
 8011d14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011d16:	4618      	mov	r0, r3
 8011d18:	f7ee fc3e 	bl	8000598 <__aeabi_f2d>
 8011d1c:	4680      	mov	r8, r0
 8011d1e:	4689      	mov	r9, r1
 8011d20:	683b      	ldr	r3, [r7, #0]
 8011d22:	8b9b      	ldrh	r3, [r3, #28]
 8011d24:	461a      	mov	r2, r3
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	8b5b      	ldrh	r3, [r3, #26]
 8011d2a:	4413      	add	r3, r2
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f7ee fc21 	bl	8000574 <__aeabi_i2d>
 8011d32:	4682      	mov	sl, r0
 8011d34:	468b      	mov	fp, r1
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	8b1b      	ldrh	r3, [r3, #24]
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7ee fc1a 	bl	8000574 <__aeabi_i2d>
 8011d40:	4602      	mov	r2, r0
 8011d42:	460b      	mov	r3, r1
 8011d44:	f7ee faca 	bl	80002dc <__adddf3>
 8011d48:	4602      	mov	r2, r0
 8011d4a:	460b      	mov	r3, r1
 8011d4c:	4650      	mov	r0, sl
 8011d4e:	4659      	mov	r1, fp
 8011d50:	f7ee fac4 	bl	80002dc <__adddf3>
 8011d54:	4602      	mov	r2, r0
 8011d56:	460b      	mov	r3, r1
 8011d58:	4640      	mov	r0, r8
 8011d5a:	4649      	mov	r1, r9
 8011d5c:	f7ee fc74 	bl	8000648 <__aeabi_dmul>
 8011d60:	4602      	mov	r2, r0
 8011d62:	460b      	mov	r3, r1
 8011d64:	4610      	mov	r0, r2
 8011d66:	4619      	mov	r1, r3
 8011d68:	a3d3      	add	r3, pc, #844	@ (adr r3, 80120b8 <MOT_goSla+0xdd0>)
 8011d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d6e:	f7ee fc6b 	bl	8000648 <__aeabi_dmul>
 8011d72:	4602      	mov	r2, r0
 8011d74:	460b      	mov	r3, r1
 8011d76:	4620      	mov	r0, r4
 8011d78:	4629      	mov	r1, r5
 8011d7a:	f7ee faaf 	bl	80002dc <__adddf3>
 8011d7e:	4602      	mov	r2, r0
 8011d80:	460b      	mov	r3, r1
 8011d82:	4610      	mov	r0, r2
 8011d84:	4619      	mov	r1, r3
 8011d86:	f7ee ff57 	bl	8000c38 <__aeabi_d2f>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
//	st_data.f_ctrl_accAngleS		= 0;						// 角加速度
	st_data.f_ctrl_jerkAngle	= 0;
 8011d8e:	f04f 0300 	mov.w	r3, #0
 8011d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= 0;
 8011d94:	f04f 0300 	mov.w	r3, #0
 8011d98:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= 0;
 8011d9a:	f04f 0300 	mov.w	r3, #0
 8011d9e:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_trgtAngleS;		// 現在角速度
 8011da0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011da4:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS	= st_info.f_mot_trgtAngleS;		// 目標角速度
 8011da6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle		= st_info.f_mot_angle1;			// 現在角度
 8011dac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011db0:	643b      	str	r3, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= st_info.f_mot_angle1_2;		// 目標角度
 8011db2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8011db6:	647b      	str	r3, [r7, #68]	@ 0x44
	st_data.f_ctrl_time 			= p_sla->us_sla_constAngvelTime * 0.001;		// [msec] → [sec]
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	8b9b      	ldrh	r3, [r3, #28]
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f7ee fbd9 	bl	8000574 <__aeabi_i2d>
 8011dc2:	a3bd      	add	r3, pc, #756	@ (adr r3, 80120b8 <MOT_goSla+0xdd0>)
 8011dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dc8:	f7ee fc3e 	bl	8000648 <__aeabi_dmul>
 8011dcc:	4602      	mov	r2, r0
 8011dce:	460b      	mov	r3, r1
 8011dd0:	4610      	mov	r0, r2
 8011dd2:	4619      	mov	r1, r3
 8011dd4:	f7ee ff30 	bl	8000c38 <__aeabi_d2f>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 8011ddc:	f107 0308 	add.w	r3, r7, #8
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7f4 fc1d 	bl	8006620 <CTRL_setData>
//	printf("const angle%.5f, dist%.5f\n\r",st_info.f_mot_angle1_2,st_data.f_ctrl_dist);
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 8011de6:	79fb      	ldrb	r3, [r7, #7]
 8011de8:	f003 0301 	and.w	r3, r3, #1
 8011dec:	b2db      	uxtb	r3, r3
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d133      	bne.n	8011e5a <MOT_goSla+0xb72>
		while( ( Get_NowAngle() > st_info.f_mot_angle1_2 ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){		// 指定角度＋距離到達待ち
 8011df2:	e00d      	b.n	8011e10 <MOT_goSla+0xb28>
			if( SYS_isOutOfCtrl() == TRUE ){
 8011df4:	f7f7 fc74 	bl	80096e0 <SYS_isOutOfCtrl>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d008      	beq.n	8011e10 <MOT_goSla+0xb28>
				CTRL_stop();
 8011dfe:	f7f4 fb11 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8011e02:	2000      	movs	r0, #0
 8011e04:	f7f7 fc9e 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8011e08:	2001      	movs	r0, #1
 8011e0a:	f7f7 fc9b 	bl	8009744 <DCM_brakeMot>
				break;
 8011e0e:	e03a      	b.n	8011e86 <MOT_goSla+0xb9e>
		while( ( Get_NowAngle() > st_info.f_mot_angle1_2 ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){		// 指定角度＋距離到達待ち
 8011e10:	f7f4 faa0 	bl	8006354 <Get_NowAngle>
 8011e14:	eeb0 7a40 	vmov.f32	s14, s0
 8011e18:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8011e1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e24:	dd2f      	ble.n	8011e86 <MOT_goSla+0xb9e>
 8011e26:	f7f4 fa4d 	bl	80062c4 <Get_NowDist>
 8011e2a:	eeb0 7a40 	vmov.f32	s14, s0
 8011e2e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011e32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e3a:	d4db      	bmi.n	8011df4 <MOT_goSla+0xb0c>
 8011e3c:	e023      	b.n	8011e86 <MOT_goSla+0xb9e>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( ( Get_NowAngle() < st_info.f_mot_angle1_2 ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){		// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 8011e3e:	f7f7 fc4f 	bl	80096e0 <SYS_isOutOfCtrl>
 8011e42:	4603      	mov	r3, r0
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d008      	beq.n	8011e5a <MOT_goSla+0xb72>
				CTRL_stop();
 8011e48:	f7f4 faec 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8011e4c:	2000      	movs	r0, #0
 8011e4e:	f7f7 fc79 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8011e52:	2001      	movs	r0, #1
 8011e54:	f7f7 fc76 	bl	8009744 <DCM_brakeMot>
				break;
 8011e58:	e015      	b.n	8011e86 <MOT_goSla+0xb9e>
		while( ( Get_NowAngle() < st_info.f_mot_angle1_2 ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){		// 指定角度＋距離到達待ち
 8011e5a:	f7f4 fa7b 	bl	8006354 <Get_NowAngle>
 8011e5e:	eeb0 7a40 	vmov.f32	s14, s0
 8011e62:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8011e66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e6e:	d50a      	bpl.n	8011e86 <MOT_goSla+0xb9e>
 8011e70:	f7f4 fa28 	bl	80062c4 <Get_NowDist>
 8011e74:	eeb0 7a40 	vmov.f32	s14, s0
 8011e78:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011e7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e84:	d4db      	bmi.n	8011e3e <MOT_goSla+0xb56>
		
	/* ------ */
	/*  dec  */
	/* ------ */
	//dec -jerk
	st_data.en_ctrl_type			= CTRL_DEC_SLA;
 8011e86:	230d      	movs	r3, #13
 8011e88:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 8011e8a:	f04f 0300 	mov.w	r3, #0
 8011e8e:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8011e90:	f04f 0300 	mov.w	r3, #0
 8011e94:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 8011e96:	f04f 0300 	mov.w	r3, #0
 8011e9a:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 8011e9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011e9e:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 8011ea0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011ea2:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime + p_sla->us_sla_jerkAngaccTime*2.0)* 0.001;		//
 8011ea4:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8011ea8:	f7ee fb76 	bl	8000598 <__aeabi_f2d>
 8011eac:	4604      	mov	r4, r0
 8011eae:	460d      	mov	r5, r1
 8011eb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f7ee fb70 	bl	8000598 <__aeabi_f2d>
 8011eb8:	4680      	mov	r8, r0
 8011eba:	4689      	mov	r9, r1
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	8b9b      	ldrh	r3, [r3, #28]
 8011ec0:	461a      	mov	r2, r3
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	8b5b      	ldrh	r3, [r3, #26]
 8011ec6:	4413      	add	r3, r2
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f7ee fb53 	bl	8000574 <__aeabi_i2d>
 8011ece:	4682      	mov	sl, r0
 8011ed0:	468b      	mov	fp, r1
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	8b1b      	ldrh	r3, [r3, #24]
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7ee fb4c 	bl	8000574 <__aeabi_i2d>
 8011edc:	4602      	mov	r2, r0
 8011ede:	460b      	mov	r3, r1
 8011ee0:	f7ee f9fc 	bl	80002dc <__adddf3>
 8011ee4:	4602      	mov	r2, r0
 8011ee6:	460b      	mov	r3, r1
 8011ee8:	4650      	mov	r0, sl
 8011eea:	4659      	mov	r1, fp
 8011eec:	f7ee f9f6 	bl	80002dc <__adddf3>
 8011ef0:	4602      	mov	r2, r0
 8011ef2:	460b      	mov	r3, r1
 8011ef4:	4640      	mov	r0, r8
 8011ef6:	4649      	mov	r1, r9
 8011ef8:	f7ee fba6 	bl	8000648 <__aeabi_dmul>
 8011efc:	4602      	mov	r2, r0
 8011efe:	460b      	mov	r3, r1
 8011f00:	4610      	mov	r0, r2
 8011f02:	4619      	mov	r1, r3
 8011f04:	a36c      	add	r3, pc, #432	@ (adr r3, 80120b8 <MOT_goSla+0xdd0>)
 8011f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0a:	f7ee fb9d 	bl	8000648 <__aeabi_dmul>
 8011f0e:	4602      	mov	r2, r0
 8011f10:	460b      	mov	r3, r1
 8011f12:	4620      	mov	r0, r4
 8011f14:	4629      	mov	r1, r5
 8011f16:	f7ee f9e1 	bl	80002dc <__adddf3>
 8011f1a:	4602      	mov	r2, r0
 8011f1c:	460b      	mov	r3, r1
 8011f1e:	4610      	mov	r0, r2
 8011f20:	4619      	mov	r1, r3
 8011f22:	f7ee fe89 	bl	8000c38 <__aeabi_d2f>
 8011f26:	4603      	mov	r3, r0
 8011f28:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime + p_sla->us_sla_jerkAngaccTime*3.0)* 0.001;		// 加速距離
 8011f2a:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8011f2e:	f7ee fb33 	bl	8000598 <__aeabi_f2d>
 8011f32:	4604      	mov	r4, r0
 8011f34:	460d      	mov	r5, r1
 8011f36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7ee fb2d 	bl	8000598 <__aeabi_f2d>
 8011f3e:	4680      	mov	r8, r0
 8011f40:	4689      	mov	r9, r1
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	8b9b      	ldrh	r3, [r3, #28]
 8011f46:	461a      	mov	r2, r3
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	8b5b      	ldrh	r3, [r3, #26]
 8011f4c:	4413      	add	r3, r2
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f7ee fb10 	bl	8000574 <__aeabi_i2d>
 8011f54:	4682      	mov	sl, r0
 8011f56:	468b      	mov	fp, r1
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	8b1b      	ldrh	r3, [r3, #24]
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f7ee fb09 	bl	8000574 <__aeabi_i2d>
 8011f62:	f04f 0200 	mov.w	r2, #0
 8011f66:	4b56      	ldr	r3, [pc, #344]	@ (80120c0 <MOT_goSla+0xdd8>)
 8011f68:	f7ee fb6e 	bl	8000648 <__aeabi_dmul>
 8011f6c:	4602      	mov	r2, r0
 8011f6e:	460b      	mov	r3, r1
 8011f70:	4650      	mov	r0, sl
 8011f72:	4659      	mov	r1, fp
 8011f74:	f7ee f9b2 	bl	80002dc <__adddf3>
 8011f78:	4602      	mov	r2, r0
 8011f7a:	460b      	mov	r3, r1
 8011f7c:	4640      	mov	r0, r8
 8011f7e:	4649      	mov	r1, r9
 8011f80:	f7ee fb62 	bl	8000648 <__aeabi_dmul>
 8011f84:	4602      	mov	r2, r0
 8011f86:	460b      	mov	r3, r1
 8011f88:	4610      	mov	r0, r2
 8011f8a:	4619      	mov	r1, r3
 8011f8c:	a34a      	add	r3, pc, #296	@ (adr r3, 80120b8 <MOT_goSla+0xdd0>)
 8011f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f92:	f7ee fb59 	bl	8000648 <__aeabi_dmul>
 8011f96:	4602      	mov	r2, r0
 8011f98:	460b      	mov	r3, r1
 8011f9a:	4620      	mov	r0, r4
 8011f9c:	4629      	mov	r1, r5
 8011f9e:	f7ee f99d 	bl	80002dc <__adddf3>
 8011fa2:	4602      	mov	r2, r0
 8011fa4:	460b      	mov	r3, r1
 8011fa6:	4610      	mov	r0, r2
 8011fa8:	4619      	mov	r1, r3
 8011faa:	f7ee fe45 	bl	8000c38 <__aeabi_d2f>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS1;		// 角加速度
	st_data.f_ctrl_jerkAngle	= st_info.f_mot_jerkAngle*(-1.0);
 8011fb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7ee faee 	bl	8000598 <__aeabi_f2d>
 8011fbc:	4602      	mov	r2, r0
 8011fbe:	460b      	mov	r3, r1
 8011fc0:	4610      	mov	r0, r2
 8011fc2:	4619      	mov	r1, r3
 8011fc4:	f7ee fe38 	bl	8000c38 <__aeabi_d2f>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	ee07 3a90 	vmov	s15, r3
 8011fce:	eef1 7a67 	vneg.f32	s15, s15
 8011fd2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= 0;
 8011fd6:	f04f 0300 	mov.w	r3, #0
 8011fda:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= st_info.f_mot_trgtAccAngle3;
 8011fdc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011fe0:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_trgtAngleS;						// 現在角速度
 8011fe2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_trgtAngleS - st_info.f_mot_accAnglejerk_v;		// 目標角速度
 8011fe8:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 8011fec:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8011ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ff4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle			= st_info.f_mot_angle1_2;						// 現在角度
 8011ff8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8011ffc:	643b      	str	r3, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk;			// 目標角度
 8011ffe:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8012002:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8012006:	ee77 7a27 	vadd.f32	s15, s14, s15
 801200a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	st_data.f_ctrl_time 			=  p_sla->us_sla_jerkAngaccTime * 0.001;			// [msec] → [sec]
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	8b1b      	ldrh	r3, [r3, #24]
 8012012:	4618      	mov	r0, r3
 8012014:	f7ee faae 	bl	8000574 <__aeabi_i2d>
 8012018:	a327      	add	r3, pc, #156	@ (adr r3, 80120b8 <MOT_goSla+0xdd0>)
 801201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801201e:	f7ee fb13 	bl	8000648 <__aeabi_dmul>
 8012022:	4602      	mov	r2, r0
 8012024:	460b      	mov	r3, r1
 8012026:	4610      	mov	r0, r2
 8012028:	4619      	mov	r1, r3
 801202a:	f7ee fe05 	bl	8000c38 <__aeabi_d2f>
 801202e:	4603      	mov	r3, r0
 8012030:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 8012032:	f107 0308 	add.w	r3, r7, #8
 8012036:	4618      	mov	r0, r3
 8012038:	f7f4 faf2 	bl	8006620 <CTRL_setData>
//	printf("trgtangleS %5.2f\n\r",st_data.f_trgtAngleS);
//	printf("jerkacc angle%.5f, dist%.5f\n\r",st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk,st_data.f_ctrl_dist);
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 801203c:	79fb      	ldrb	r3, [r7, #7]
 801203e:	f003 0301 	and.w	r3, r3, #1
 8012042:	b2db      	uxtb	r3, r3
 8012044:	2b00      	cmp	r3, #0
 8012046:	d13d      	bne.n	80120c4 <MOT_goSla+0xddc>
		while( ( Get_NowAngle() > (st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8012048:	e00d      	b.n	8012066 <MOT_goSla+0xd7e>
			if( SYS_isOutOfCtrl() == TRUE ){
 801204a:	f7f7 fb49 	bl	80096e0 <SYS_isOutOfCtrl>
 801204e:	4603      	mov	r3, r0
 8012050:	2b00      	cmp	r3, #0
 8012052:	d008      	beq.n	8012066 <MOT_goSla+0xd7e>
				CTRL_stop();
 8012054:	f7f4 f9e6 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8012058:	2000      	movs	r0, #0
 801205a:	f7f7 fb73 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 801205e:	2001      	movs	r0, #1
 8012060:	f7f7 fb70 	bl	8009744 <DCM_brakeMot>
				break;
 8012064:	e048      	b.n	80120f8 <MOT_goSla+0xe10>
		while( ( Get_NowAngle() > (st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8012066:	f7f4 f975 	bl	8006354 <Get_NowAngle>
 801206a:	eef0 6a40 	vmov.f32	s13, s0
 801206e:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8012072:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8012076:	ee77 7a27 	vadd.f32	s15, s14, s15
 801207a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012082:	dd39      	ble.n	80120f8 <MOT_goSla+0xe10>
 8012084:	f7f4 f91e 	bl	80062c4 <Get_NowDist>
 8012088:	eeb0 7a40 	vmov.f32	s14, s0
 801208c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8012090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012098:	d4d7      	bmi.n	801204a <MOT_goSla+0xd62>
 801209a:	e02d      	b.n	80120f8 <MOT_goSla+0xe10>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( ( Get_NowAngle() < (st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 801209c:	f7f7 fb20 	bl	80096e0 <SYS_isOutOfCtrl>
 80120a0:	4603      	mov	r3, r0
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d00e      	beq.n	80120c4 <MOT_goSla+0xddc>
				CTRL_stop();
 80120a6:	f7f4 f9bd 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 80120aa:	2000      	movs	r0, #0
 80120ac:	f7f7 fb4a 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 80120b0:	2001      	movs	r0, #1
 80120b2:	f7f7 fb47 	bl	8009744 <DCM_brakeMot>
				break;
 80120b6:	e01f      	b.n	80120f8 <MOT_goSla+0xe10>
 80120b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80120bc:	3f50624d 	.word	0x3f50624d
 80120c0:	40080000 	.word	0x40080000
		while( ( Get_NowAngle() < (st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 80120c4:	f7f4 f946 	bl	8006354 <Get_NowAngle>
 80120c8:	eef0 6a40 	vmov.f32	s13, s0
 80120cc:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 80120d0:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 80120d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80120d8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80120dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120e0:	d50a      	bpl.n	80120f8 <MOT_goSla+0xe10>
 80120e2:	f7f4 f8ef 	bl	80062c4 <Get_NowDist>
 80120e6:	eeb0 7a40 	vmov.f32	s14, s0
 80120ea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80120ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80120f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120f6:	d4d1      	bmi.n	801209c <MOT_goSla+0xdb4>
			}				// 途中で制御不能になった
		}
	}

	st_data.en_ctrl_type			= CTRL_DEC_SLA;
 80120f8:	230d      	movs	r3, #13
 80120fa:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 80120fc:	f04f 0300 	mov.w	r3, #0
 8012100:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8012102:	f04f 0300 	mov.w	r3, #0
 8012106:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 8012108:	f04f 0300 	mov.w	r3, #0
 801210c:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 801210e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012110:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 8012112:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012114:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime + p_sla->us_sla_jerkAngaccTime*3.0)* 0.001;
 8012116:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 801211a:	f7ee fa3d 	bl	8000598 <__aeabi_f2d>
 801211e:	4604      	mov	r4, r0
 8012120:	460d      	mov	r5, r1
 8012122:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012124:	4618      	mov	r0, r3
 8012126:	f7ee fa37 	bl	8000598 <__aeabi_f2d>
 801212a:	4680      	mov	r8, r0
 801212c:	4689      	mov	r9, r1
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	8b9b      	ldrh	r3, [r3, #28]
 8012132:	461a      	mov	r2, r3
 8012134:	683b      	ldr	r3, [r7, #0]
 8012136:	8b5b      	ldrh	r3, [r3, #26]
 8012138:	4413      	add	r3, r2
 801213a:	4618      	mov	r0, r3
 801213c:	f7ee fa1a 	bl	8000574 <__aeabi_i2d>
 8012140:	4682      	mov	sl, r0
 8012142:	468b      	mov	fp, r1
 8012144:	683b      	ldr	r3, [r7, #0]
 8012146:	8b1b      	ldrh	r3, [r3, #24]
 8012148:	4618      	mov	r0, r3
 801214a:	f7ee fa13 	bl	8000574 <__aeabi_i2d>
 801214e:	f04f 0200 	mov.w	r2, #0
 8012152:	4b7b      	ldr	r3, [pc, #492]	@ (8012340 <MOT_goSla+0x1058>)
 8012154:	f7ee fa78 	bl	8000648 <__aeabi_dmul>
 8012158:	4602      	mov	r2, r0
 801215a:	460b      	mov	r3, r1
 801215c:	4650      	mov	r0, sl
 801215e:	4659      	mov	r1, fp
 8012160:	f7ee f8bc 	bl	80002dc <__adddf3>
 8012164:	4602      	mov	r2, r0
 8012166:	460b      	mov	r3, r1
 8012168:	4640      	mov	r0, r8
 801216a:	4649      	mov	r1, r9
 801216c:	f7ee fa6c 	bl	8000648 <__aeabi_dmul>
 8012170:	4602      	mov	r2, r0
 8012172:	460b      	mov	r3, r1
 8012174:	4610      	mov	r0, r2
 8012176:	4619      	mov	r1, r3
 8012178:	a36f      	add	r3, pc, #444	@ (adr r3, 8012338 <MOT_goSla+0x1050>)
 801217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217e:	f7ee fa63 	bl	8000648 <__aeabi_dmul>
 8012182:	4602      	mov	r2, r0
 8012184:	460b      	mov	r3, r1
 8012186:	4620      	mov	r0, r4
 8012188:	4629      	mov	r1, r5
 801218a:	f7ee f8a7 	bl	80002dc <__adddf3>
 801218e:	4602      	mov	r2, r0
 8012190:	460b      	mov	r3, r1
 8012192:	4610      	mov	r0, r2
 8012194:	4619      	mov	r1, r3
 8012196:	f7ee fd4f 	bl	8000c38 <__aeabi_d2f>
 801219a:	4603      	mov	r3, r0
 801219c:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime*2.0 + p_sla->us_sla_jerkAngaccTime*3.0)* 0.001;		// 減速距離
 801219e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 80121a2:	f7ee f9f9 	bl	8000598 <__aeabi_f2d>
 80121a6:	4604      	mov	r4, r0
 80121a8:	460d      	mov	r5, r1
 80121aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7ee f9f3 	bl	8000598 <__aeabi_f2d>
 80121b2:	4680      	mov	r8, r0
 80121b4:	4689      	mov	r9, r1
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	8b9b      	ldrh	r3, [r3, #28]
 80121ba:	4618      	mov	r0, r3
 80121bc:	f7ee f9da 	bl	8000574 <__aeabi_i2d>
 80121c0:	4682      	mov	sl, r0
 80121c2:	468b      	mov	fp, r1
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	8b5b      	ldrh	r3, [r3, #26]
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7ee f9d3 	bl	8000574 <__aeabi_i2d>
 80121ce:	4602      	mov	r2, r0
 80121d0:	460b      	mov	r3, r1
 80121d2:	f7ee f883 	bl	80002dc <__adddf3>
 80121d6:	4602      	mov	r2, r0
 80121d8:	460b      	mov	r3, r1
 80121da:	4650      	mov	r0, sl
 80121dc:	4659      	mov	r1, fp
 80121de:	f7ee f87d 	bl	80002dc <__adddf3>
 80121e2:	4602      	mov	r2, r0
 80121e4:	460b      	mov	r3, r1
 80121e6:	4692      	mov	sl, r2
 80121e8:	469b      	mov	fp, r3
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	8b1b      	ldrh	r3, [r3, #24]
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7ee f9c0 	bl	8000574 <__aeabi_i2d>
 80121f4:	f04f 0200 	mov.w	r2, #0
 80121f8:	4b51      	ldr	r3, [pc, #324]	@ (8012340 <MOT_goSla+0x1058>)
 80121fa:	f7ee fa25 	bl	8000648 <__aeabi_dmul>
 80121fe:	4602      	mov	r2, r0
 8012200:	460b      	mov	r3, r1
 8012202:	4650      	mov	r0, sl
 8012204:	4659      	mov	r1, fp
 8012206:	f7ee f869 	bl	80002dc <__adddf3>
 801220a:	4602      	mov	r2, r0
 801220c:	460b      	mov	r3, r1
 801220e:	4640      	mov	r0, r8
 8012210:	4649      	mov	r1, r9
 8012212:	f7ee fa19 	bl	8000648 <__aeabi_dmul>
 8012216:	4602      	mov	r2, r0
 8012218:	460b      	mov	r3, r1
 801221a:	4610      	mov	r0, r2
 801221c:	4619      	mov	r1, r3
 801221e:	a346      	add	r3, pc, #280	@ (adr r3, 8012338 <MOT_goSla+0x1050>)
 8012220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012224:	f7ee fa10 	bl	8000648 <__aeabi_dmul>
 8012228:	4602      	mov	r2, r0
 801222a:	460b      	mov	r3, r1
 801222c:	4620      	mov	r0, r4
 801222e:	4629      	mov	r1, r5
 8012230:	f7ee f854 	bl	80002dc <__adddf3>
 8012234:	4602      	mov	r2, r0
 8012236:	460b      	mov	r3, r1
 8012238:	4610      	mov	r0, r2
 801223a:	4619      	mov	r1, r3
 801223c:	f7ee fcfc 	bl	8000c38 <__aeabi_d2f>
 8012240:	4603      	mov	r3, r0
 8012242:	62bb      	str	r3, [r7, #40]	@ 0x28
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS3;		// 角加速度
	st_data.f_ctrl_jerkAngle	= 0;
 8012244:	f04f 0300 	mov.w	r3, #0
 8012248:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= st_info.f_mot_trgtAccAngle3;
 801224a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801224e:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= st_info.f_mot_trgtAccAngle3;
 8012250:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012254:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_trgtAngleS - st_info.f_mot_accAnglejerk_v;		// 現在角速度
 8012256:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 801225a:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 801225e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012262:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS		= st_info.f_mot_accAnglejerk_v;				// 目標角速度
 8012266:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801226a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle			= st_info.f_mot_angle1_2+st_info.f_mot_l3_decanglejerk;		// 現在角度
 801226c:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8012270:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8012274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012278:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= st_info.f_mot_angle - st_info.f_mot_l3_accanglejerk;			// 目標角度
 801227c:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8012280:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8012284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012288:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	st_data.f_ctrl_time			= p_sla->us_sla_accAngvelTime * 0.001;			// [msec] → [sec]
 801228c:	683b      	ldr	r3, [r7, #0]
 801228e:	8b5b      	ldrh	r3, [r3, #26]
 8012290:	4618      	mov	r0, r3
 8012292:	f7ee f96f 	bl	8000574 <__aeabi_i2d>
 8012296:	a328      	add	r3, pc, #160	@ (adr r3, 8012338 <MOT_goSla+0x1050>)
 8012298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801229c:	f7ee f9d4 	bl	8000648 <__aeabi_dmul>
 80122a0:	4602      	mov	r2, r0
 80122a2:	460b      	mov	r3, r1
 80122a4:	4610      	mov	r0, r2
 80122a6:	4619      	mov	r1, r3
 80122a8:	f7ee fcc6 	bl	8000c38 <__aeabi_d2f>
 80122ac:	4603      	mov	r3, r0
 80122ae:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 80122b0:	f107 0308 	add.w	r3, r7, #8
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7f4 f9b3 	bl	8006620 <CTRL_setData>
//	LED = LED_ALL_ON;
//	printf("jerkconst angle%.5f, dist%.5f\n\r",st_info.f_mot_angle - st_info.f_mot_l3_accanglejerk,st_data.f_ctrl_dist);
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 80122ba:	79fb      	ldrb	r3, [r7, #7]
 80122bc:	f003 0301 	and.w	r3, r3, #1
 80122c0:	b2db      	uxtb	r3, r3
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d13e      	bne.n	8012344 <MOT_goSla+0x105c>
		while( ( Get_NowAngle() > (st_info.f_mot_angle - st_info.f_mot_l3_accanglejerk) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 80122c6:	e00d      	b.n	80122e4 <MOT_goSla+0xffc>
			if( SYS_isOutOfCtrl() == TRUE ){
 80122c8:	f7f7 fa0a 	bl	80096e0 <SYS_isOutOfCtrl>
 80122cc:	4603      	mov	r3, r0
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d008      	beq.n	80122e4 <MOT_goSla+0xffc>
				CTRL_stop();
 80122d2:	f7f4 f8a7 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 80122d6:	2000      	movs	r0, #0
 80122d8:	f7f7 fa34 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 80122dc:	2001      	movs	r0, #1
 80122de:	f7f7 fa31 	bl	8009744 <DCM_brakeMot>
				break;
 80122e2:	e049      	b.n	8012378 <MOT_goSla+0x1090>
		while( ( Get_NowAngle() > (st_info.f_mot_angle - st_info.f_mot_l3_accanglejerk) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 80122e4:	f7f4 f836 	bl	8006354 <Get_NowAngle>
 80122e8:	eef0 6a40 	vmov.f32	s13, s0
 80122ec:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 80122f0:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 80122f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80122f8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80122fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012300:	dd3a      	ble.n	8012378 <MOT_goSla+0x1090>
 8012302:	f7f3 ffdf 	bl	80062c4 <Get_NowDist>
 8012306:	eeb0 7a40 	vmov.f32	s14, s0
 801230a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801230e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012316:	d4d7      	bmi.n	80122c8 <MOT_goSla+0xfe0>
 8012318:	e02e      	b.n	8012378 <MOT_goSla+0x1090>

		}
	}
	else{
		while( ( Get_NowAngle() < (st_info.f_mot_angle - st_info.f_mot_l3_accanglejerk) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 801231a:	f7f7 f9e1 	bl	80096e0 <SYS_isOutOfCtrl>
 801231e:	4603      	mov	r3, r0
 8012320:	2b00      	cmp	r3, #0
 8012322:	d00f      	beq.n	8012344 <MOT_goSla+0x105c>
				CTRL_stop();
 8012324:	f7f4 f87e 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8012328:	2000      	movs	r0, #0
 801232a:	f7f7 fa0b 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 801232e:	2001      	movs	r0, #1
 8012330:	f7f7 fa08 	bl	8009744 <DCM_brakeMot>
				break;
 8012334:	e020      	b.n	8012378 <MOT_goSla+0x1090>
 8012336:	bf00      	nop
 8012338:	d2f1a9fc 	.word	0xd2f1a9fc
 801233c:	3f50624d 	.word	0x3f50624d
 8012340:	40080000 	.word	0x40080000
		while( ( Get_NowAngle() < (st_info.f_mot_angle - st_info.f_mot_l3_accanglejerk) ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8012344:	f7f4 f806 	bl	8006354 <Get_NowAngle>
 8012348:	eef0 6a40 	vmov.f32	s13, s0
 801234c:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8012350:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8012354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012358:	eef4 6ae7 	vcmpe.f32	s13, s15
 801235c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012360:	d50a      	bpl.n	8012378 <MOT_goSla+0x1090>
 8012362:	f7f3 ffaf 	bl	80062c4 <Get_NowDist>
 8012366:	eeb0 7a40 	vmov.f32	s14, s0
 801236a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801236e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012376:	d4d0      	bmi.n	801231a <MOT_goSla+0x1032>

		}
	}

	//dec jerk
	st_data.en_ctrl_type			= CTRL_DEC_SLA;
 8012378:	230d      	movs	r3, #13
 801237a:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 801237c:	f04f 0300 	mov.w	r3, #0
 8012380:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 8012382:	f04f 0300 	mov.w	r3, #0
 8012386:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 8012388:	f04f 0300 	mov.w	r3, #0
 801238c:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 801238e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012390:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 8012392:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012394:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime*2.0 + p_sla->us_sla_jerkAngaccTime*3.0)* 0.001;
 8012396:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 801239a:	f7ee f8fd 	bl	8000598 <__aeabi_f2d>
 801239e:	4604      	mov	r4, r0
 80123a0:	460d      	mov	r5, r1
 80123a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7ee f8f7 	bl	8000598 <__aeabi_f2d>
 80123aa:	4680      	mov	r8, r0
 80123ac:	4689      	mov	r9, r1
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	8b9b      	ldrh	r3, [r3, #28]
 80123b2:	4618      	mov	r0, r3
 80123b4:	f7ee f8de 	bl	8000574 <__aeabi_i2d>
 80123b8:	4682      	mov	sl, r0
 80123ba:	468b      	mov	fp, r1
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	8b5b      	ldrh	r3, [r3, #26]
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7ee f8d7 	bl	8000574 <__aeabi_i2d>
 80123c6:	4602      	mov	r2, r0
 80123c8:	460b      	mov	r3, r1
 80123ca:	f7ed ff87 	bl	80002dc <__adddf3>
 80123ce:	4602      	mov	r2, r0
 80123d0:	460b      	mov	r3, r1
 80123d2:	4650      	mov	r0, sl
 80123d4:	4659      	mov	r1, fp
 80123d6:	f7ed ff81 	bl	80002dc <__adddf3>
 80123da:	4602      	mov	r2, r0
 80123dc:	460b      	mov	r3, r1
 80123de:	4692      	mov	sl, r2
 80123e0:	469b      	mov	fp, r3
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	8b1b      	ldrh	r3, [r3, #24]
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7ee f8c4 	bl	8000574 <__aeabi_i2d>
 80123ec:	f04f 0200 	mov.w	r2, #0
 80123f0:	4b73      	ldr	r3, [pc, #460]	@ (80125c0 <MOT_goSla+0x12d8>)
 80123f2:	f7ee f929 	bl	8000648 <__aeabi_dmul>
 80123f6:	4602      	mov	r2, r0
 80123f8:	460b      	mov	r3, r1
 80123fa:	4650      	mov	r0, sl
 80123fc:	4659      	mov	r1, fp
 80123fe:	f7ed ff6d 	bl	80002dc <__adddf3>
 8012402:	4602      	mov	r2, r0
 8012404:	460b      	mov	r3, r1
 8012406:	4640      	mov	r0, r8
 8012408:	4649      	mov	r1, r9
 801240a:	f7ee f91d 	bl	8000648 <__aeabi_dmul>
 801240e:	4602      	mov	r2, r0
 8012410:	460b      	mov	r3, r1
 8012412:	4610      	mov	r0, r2
 8012414:	4619      	mov	r1, r3
 8012416:	a368      	add	r3, pc, #416	@ (adr r3, 80125b8 <MOT_goSla+0x12d0>)
 8012418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801241c:	f7ee f914 	bl	8000648 <__aeabi_dmul>
 8012420:	4602      	mov	r2, r0
 8012422:	460b      	mov	r3, r1
 8012424:	4620      	mov	r0, r4
 8012426:	4629      	mov	r1, r5
 8012428:	f7ed ff58 	bl	80002dc <__adddf3>
 801242c:	4602      	mov	r2, r0
 801242e:	460b      	mov	r3, r1
 8012430:	4610      	mov	r0, r2
 8012432:	4619      	mov	r1, r3
 8012434:	f7ee fc00 	bl	8000c38 <__aeabi_d2f>
 8012438:	4603      	mov	r3, r0
 801243a:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime*2.0 + p_sla->us_sla_jerkAngaccTime*4.0)* 0.001;		// 減速距離
 801243c:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8012440:	f7ee f8aa 	bl	8000598 <__aeabi_f2d>
 8012444:	4604      	mov	r4, r0
 8012446:	460d      	mov	r5, r1
 8012448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801244a:	4618      	mov	r0, r3
 801244c:	f7ee f8a4 	bl	8000598 <__aeabi_f2d>
 8012450:	4680      	mov	r8, r0
 8012452:	4689      	mov	r9, r1
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	8b9b      	ldrh	r3, [r3, #28]
 8012458:	4618      	mov	r0, r3
 801245a:	f7ee f88b 	bl	8000574 <__aeabi_i2d>
 801245e:	4682      	mov	sl, r0
 8012460:	468b      	mov	fp, r1
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	8b5b      	ldrh	r3, [r3, #26]
 8012466:	4618      	mov	r0, r3
 8012468:	f7ee f884 	bl	8000574 <__aeabi_i2d>
 801246c:	4602      	mov	r2, r0
 801246e:	460b      	mov	r3, r1
 8012470:	f7ed ff34 	bl	80002dc <__adddf3>
 8012474:	4602      	mov	r2, r0
 8012476:	460b      	mov	r3, r1
 8012478:	4650      	mov	r0, sl
 801247a:	4659      	mov	r1, fp
 801247c:	f7ed ff2e 	bl	80002dc <__adddf3>
 8012480:	4602      	mov	r2, r0
 8012482:	460b      	mov	r3, r1
 8012484:	4692      	mov	sl, r2
 8012486:	469b      	mov	fp, r3
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	8b1b      	ldrh	r3, [r3, #24]
 801248c:	4618      	mov	r0, r3
 801248e:	f7ee f871 	bl	8000574 <__aeabi_i2d>
 8012492:	f04f 0200 	mov.w	r2, #0
 8012496:	4b4b      	ldr	r3, [pc, #300]	@ (80125c4 <MOT_goSla+0x12dc>)
 8012498:	f7ee f8d6 	bl	8000648 <__aeabi_dmul>
 801249c:	4602      	mov	r2, r0
 801249e:	460b      	mov	r3, r1
 80124a0:	4650      	mov	r0, sl
 80124a2:	4659      	mov	r1, fp
 80124a4:	f7ed ff1a 	bl	80002dc <__adddf3>
 80124a8:	4602      	mov	r2, r0
 80124aa:	460b      	mov	r3, r1
 80124ac:	4640      	mov	r0, r8
 80124ae:	4649      	mov	r1, r9
 80124b0:	f7ee f8ca 	bl	8000648 <__aeabi_dmul>
 80124b4:	4602      	mov	r2, r0
 80124b6:	460b      	mov	r3, r1
 80124b8:	4610      	mov	r0, r2
 80124ba:	4619      	mov	r1, r3
 80124bc:	a33e      	add	r3, pc, #248	@ (adr r3, 80125b8 <MOT_goSla+0x12d0>)
 80124be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124c2:	f7ee f8c1 	bl	8000648 <__aeabi_dmul>
 80124c6:	4602      	mov	r2, r0
 80124c8:	460b      	mov	r3, r1
 80124ca:	4620      	mov	r0, r4
 80124cc:	4629      	mov	r1, r5
 80124ce:	f7ed ff05 	bl	80002dc <__adddf3>
 80124d2:	4602      	mov	r2, r0
 80124d4:	460b      	mov	r3, r1
 80124d6:	4610      	mov	r0, r2
 80124d8:	4619      	mov	r1, r3
 80124da:	f7ee fbad 	bl	8000c38 <__aeabi_d2f>
 80124de:	4603      	mov	r3, r0
 80124e0:	62bb      	str	r3, [r7, #40]	@ 0x28
//	st_data.f_ctrl_accAngleS		= st_info.f_mot_accAngleS3;		// 角加速度
	st_data.f_ctrl_jerkAngle	= st_info.f_mot_jerkAngle;
 80124e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80124e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= st_info.f_mot_trgtAccAngle3;
 80124e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80124ec:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= 0;
 80124ee:	f04f 0300 	mov.w	r3, #0
 80124f2:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= st_info.f_mot_accAnglejerk_v;		// 現在角速度
 80124f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80124f8:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS		= 0;				// 目標角速度
 80124fa:	f04f 0300 	mov.w	r3, #0
 80124fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle			= st_info.f_mot_angle - st_info.f_mot_l3_accanglejerk;		// 現在角度
 8012500:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8012504:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8012508:	ee77 7a67 	vsub.f32	s15, s14, s15
 801250c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= st_info.f_mot_angle;			// 目標角度
 8012510:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012514:	647b      	str	r3, [r7, #68]	@ 0x44
	st_data.f_ctrl_time			= p_sla->us_sla_jerkAngaccTime * 0.001;			// [msec] → [sec]
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	8b1b      	ldrh	r3, [r3, #24]
 801251a:	4618      	mov	r0, r3
 801251c:	f7ee f82a 	bl	8000574 <__aeabi_i2d>
 8012520:	a325      	add	r3, pc, #148	@ (adr r3, 80125b8 <MOT_goSla+0x12d0>)
 8012522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012526:	f7ee f88f 	bl	8000648 <__aeabi_dmul>
 801252a:	4602      	mov	r2, r0
 801252c:	460b      	mov	r3, r1
 801252e:	4610      	mov	r0, r2
 8012530:	4619      	mov	r1, r3
 8012532:	f7ee fb81 	bl	8000c38 <__aeabi_d2f>
 8012536:	4603      	mov	r3, r0
 8012538:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 801253a:	f107 0308 	add.w	r3, r7, #8
 801253e:	4618      	mov	r0, r3
 8012540:	f7f4 f86e 	bl	8006620 <CTRL_setData>
//	LED = LED_ALL_ON;
//	printf("jerkdec angle%.5f, dist%.5f\n\r",st_info.f_mot_angle,st_data.f_ctrl_dist);
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 8012544:	79fb      	ldrb	r3, [r7, #7]
 8012546:	f003 0301 	and.w	r3, r3, #1
 801254a:	b2db      	uxtb	r3, r3
 801254c:	2b00      	cmp	r3, #0
 801254e:	d13b      	bne.n	80125c8 <MOT_goSla+0x12e0>
		while( ( Get_NowAngle() > st_info.f_mot_angle ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 8012550:	e00d      	b.n	801256e <MOT_goSla+0x1286>
			if( SYS_isOutOfCtrl() == TRUE ){
 8012552:	f7f7 f8c5 	bl	80096e0 <SYS_isOutOfCtrl>
 8012556:	4603      	mov	r3, r0
 8012558:	2b00      	cmp	r3, #0
 801255a:	d008      	beq.n	801256e <MOT_goSla+0x1286>
				CTRL_stop();
 801255c:	f7f3 ff62 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8012560:	2000      	movs	r0, #0
 8012562:	f7f7 f8ef 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8012566:	2001      	movs	r0, #1
 8012568:	f7f7 f8ec 	bl	8009744 <DCM_brakeMot>
				break;
 801256c:	e042      	b.n	80125f4 <MOT_goSla+0x130c>
		while( ( Get_NowAngle() > st_info.f_mot_angle ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 801256e:	f7f3 fef1 	bl	8006354 <Get_NowAngle>
 8012572:	eeb0 7a40 	vmov.f32	s14, s0
 8012576:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 801257a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801257e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012582:	dd37      	ble.n	80125f4 <MOT_goSla+0x130c>
 8012584:	f7f3 fe9e 	bl	80062c4 <Get_NowDist>
 8012588:	eeb0 7a40 	vmov.f32	s14, s0
 801258c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8012590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012598:	d4db      	bmi.n	8012552 <MOT_goSla+0x126a>
 801259a:	e02b      	b.n	80125f4 <MOT_goSla+0x130c>

		}
	}
	else{
		while( ( Get_NowAngle() < st_info.f_mot_angle ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 801259c:	f7f7 f8a0 	bl	80096e0 <SYS_isOutOfCtrl>
 80125a0:	4603      	mov	r3, r0
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d010      	beq.n	80125c8 <MOT_goSla+0x12e0>
				CTRL_stop();
 80125a6:	f7f3 ff3d 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 80125aa:	2000      	movs	r0, #0
 80125ac:	f7f7 f8ca 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 80125b0:	2001      	movs	r0, #1
 80125b2:	f7f7 f8c7 	bl	8009744 <DCM_brakeMot>
				break;
 80125b6:	e01d      	b.n	80125f4 <MOT_goSla+0x130c>
 80125b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80125bc:	3f50624d 	.word	0x3f50624d
 80125c0:	40080000 	.word	0x40080000
 80125c4:	40100000 	.word	0x40100000
		while( ( Get_NowAngle() < st_info.f_mot_angle ) && ( Get_NowDist() < st_data.f_ctrl_dist ) ){			// 指定角度＋距離到達待ち
 80125c8:	f7f3 fec4 	bl	8006354 <Get_NowAngle>
 80125cc:	eeb0 7a40 	vmov.f32	s14, s0
 80125d0:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 80125d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80125d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125dc:	d50a      	bpl.n	80125f4 <MOT_goSla+0x130c>
 80125de:	f7f3 fe71 	bl	80062c4 <Get_NowDist>
 80125e2:	eeb0 7a40 	vmov.f32	s14, s0
 80125e6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80125ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80125ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125f2:	d4d3      	bmi.n	801259c <MOT_goSla+0x12b4>

//	LED_on(LED1);
	/* ------------------------ */
	/*  escape  */
	/* ------------------------ */
	st_data.en_ctrl_type			= CTRL_EXIT_SLA;
 80125f4:	230e      	movs	r3, #14
 80125f6:	723b      	strb	r3, [r7, #8]
	st_data.f_ctrl_jerk			= 0;
 80125f8:	f04f 0300 	mov.w	r3, #0
 80125fc:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 80125fe:	f04f 0300 	mov.w	r3, #0
 8012602:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowAcc		= 0;
 8012604:	f04f 0300 	mov.w	r3, #0
 8012608:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_now			= st_info.f_mot_now;			// 現在速度
 801260a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801260c:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_trgt			= st_info.f_mot_now;			// 目標速度
 801260e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012610:	623b      	str	r3, [r7, #32]
	st_data.f_ctrl_nowDist		= f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime*2.0 + p_sla->us_sla_jerkAngaccTime*4.0) * 0.001;
 8012612:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8012616:	f7ed ffbf 	bl	8000598 <__aeabi_f2d>
 801261a:	4604      	mov	r4, r0
 801261c:	460d      	mov	r5, r1
 801261e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012620:	4618      	mov	r0, r3
 8012622:	f7ed ffb9 	bl	8000598 <__aeabi_f2d>
 8012626:	4680      	mov	r8, r0
 8012628:	4689      	mov	r9, r1
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	8b9b      	ldrh	r3, [r3, #28]
 801262e:	4618      	mov	r0, r3
 8012630:	f7ed ffa0 	bl	8000574 <__aeabi_i2d>
 8012634:	4682      	mov	sl, r0
 8012636:	468b      	mov	fp, r1
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	8b5b      	ldrh	r3, [r3, #26]
 801263c:	4618      	mov	r0, r3
 801263e:	f7ed ff99 	bl	8000574 <__aeabi_i2d>
 8012642:	4602      	mov	r2, r0
 8012644:	460b      	mov	r3, r1
 8012646:	f7ed fe49 	bl	80002dc <__adddf3>
 801264a:	4602      	mov	r2, r0
 801264c:	460b      	mov	r3, r1
 801264e:	4650      	mov	r0, sl
 8012650:	4659      	mov	r1, fp
 8012652:	f7ed fe43 	bl	80002dc <__adddf3>
 8012656:	4602      	mov	r2, r0
 8012658:	460b      	mov	r3, r1
 801265a:	4692      	mov	sl, r2
 801265c:	469b      	mov	fp, r3
 801265e:	683b      	ldr	r3, [r7, #0]
 8012660:	8b1b      	ldrh	r3, [r3, #24]
 8012662:	4618      	mov	r0, r3
 8012664:	f7ed ff86 	bl	8000574 <__aeabi_i2d>
 8012668:	f04f 0200 	mov.w	r2, #0
 801266c:	4b64      	ldr	r3, [pc, #400]	@ (8012800 <MOT_goSla+0x1518>)
 801266e:	f7ed ffeb 	bl	8000648 <__aeabi_dmul>
 8012672:	4602      	mov	r2, r0
 8012674:	460b      	mov	r3, r1
 8012676:	4650      	mov	r0, sl
 8012678:	4659      	mov	r1, fp
 801267a:	f7ed fe2f 	bl	80002dc <__adddf3>
 801267e:	4602      	mov	r2, r0
 8012680:	460b      	mov	r3, r1
 8012682:	4640      	mov	r0, r8
 8012684:	4649      	mov	r1, r9
 8012686:	f7ed ffdf 	bl	8000648 <__aeabi_dmul>
 801268a:	4602      	mov	r2, r0
 801268c:	460b      	mov	r3, r1
 801268e:	4610      	mov	r0, r2
 8012690:	4619      	mov	r1, r3
 8012692:	a359      	add	r3, pc, #356	@ (adr r3, 80127f8 <MOT_goSla+0x1510>)
 8012694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012698:	f7ed ffd6 	bl	8000648 <__aeabi_dmul>
 801269c:	4602      	mov	r2, r0
 801269e:	460b      	mov	r3, r1
 80126a0:	4620      	mov	r0, r4
 80126a2:	4629      	mov	r1, r5
 80126a4:	f7ed fe1a 	bl	80002dc <__adddf3>
 80126a8:	4602      	mov	r2, r0
 80126aa:	460b      	mov	r3, r1
 80126ac:	4610      	mov	r0, r2
 80126ae:	4619      	mov	r1, r3
 80126b0:	f7ee fac2 	bl	8000c38 <__aeabi_d2f>
 80126b4:	4603      	mov	r3, r0
 80126b6:	627b      	str	r3, [r7, #36]	@ 0x24
	st_data.f_ctrl_dist			= f_escapeLen + f_entryLen + st_info.f_mot_now * ( p_sla->us_sla_constAngvelTime + p_sla->us_sla_accAngvelTime*2.0 + p_sla->us_sla_jerkAngaccTime*4.0) * 0.001;	// スラローム後の前進距離
 80126b8:	ed97 7a3a 	vldr	s14, [r7, #232]	@ 0xe8
 80126bc:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 80126c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80126c4:	ee17 0a90 	vmov	r0, s15
 80126c8:	f7ed ff66 	bl	8000598 <__aeabi_f2d>
 80126cc:	4604      	mov	r4, r0
 80126ce:	460d      	mov	r5, r1
 80126d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7ed ff60 	bl	8000598 <__aeabi_f2d>
 80126d8:	4680      	mov	r8, r0
 80126da:	4689      	mov	r9, r1
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	8b9b      	ldrh	r3, [r3, #28]
 80126e0:	4618      	mov	r0, r3
 80126e2:	f7ed ff47 	bl	8000574 <__aeabi_i2d>
 80126e6:	4682      	mov	sl, r0
 80126e8:	468b      	mov	fp, r1
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	8b5b      	ldrh	r3, [r3, #26]
 80126ee:	4618      	mov	r0, r3
 80126f0:	f7ed ff40 	bl	8000574 <__aeabi_i2d>
 80126f4:	4602      	mov	r2, r0
 80126f6:	460b      	mov	r3, r1
 80126f8:	f7ed fdf0 	bl	80002dc <__adddf3>
 80126fc:	4602      	mov	r2, r0
 80126fe:	460b      	mov	r3, r1
 8012700:	4650      	mov	r0, sl
 8012702:	4659      	mov	r1, fp
 8012704:	f7ed fdea 	bl	80002dc <__adddf3>
 8012708:	4602      	mov	r2, r0
 801270a:	460b      	mov	r3, r1
 801270c:	4692      	mov	sl, r2
 801270e:	469b      	mov	fp, r3
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	8b1b      	ldrh	r3, [r3, #24]
 8012714:	4618      	mov	r0, r3
 8012716:	f7ed ff2d 	bl	8000574 <__aeabi_i2d>
 801271a:	f04f 0200 	mov.w	r2, #0
 801271e:	4b38      	ldr	r3, [pc, #224]	@ (8012800 <MOT_goSla+0x1518>)
 8012720:	f7ed ff92 	bl	8000648 <__aeabi_dmul>
 8012724:	4602      	mov	r2, r0
 8012726:	460b      	mov	r3, r1
 8012728:	4650      	mov	r0, sl
 801272a:	4659      	mov	r1, fp
 801272c:	f7ed fdd6 	bl	80002dc <__adddf3>
 8012730:	4602      	mov	r2, r0
 8012732:	460b      	mov	r3, r1
 8012734:	4640      	mov	r0, r8
 8012736:	4649      	mov	r1, r9
 8012738:	f7ed ff86 	bl	8000648 <__aeabi_dmul>
 801273c:	4602      	mov	r2, r0
 801273e:	460b      	mov	r3, r1
 8012740:	4610      	mov	r0, r2
 8012742:	4619      	mov	r1, r3
 8012744:	a32c      	add	r3, pc, #176	@ (adr r3, 80127f8 <MOT_goSla+0x1510>)
 8012746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801274a:	f7ed ff7d 	bl	8000648 <__aeabi_dmul>
 801274e:	4602      	mov	r2, r0
 8012750:	460b      	mov	r3, r1
 8012752:	4620      	mov	r0, r4
 8012754:	4629      	mov	r1, r5
 8012756:	f7ed fdc1 	bl	80002dc <__adddf3>
 801275a:	4602      	mov	r2, r0
 801275c:	460b      	mov	r3, r1
 801275e:	4610      	mov	r0, r2
 8012760:	4619      	mov	r1, r3
 8012762:	f7ee fa69 	bl	8000c38 <__aeabi_d2f>
 8012766:	4603      	mov	r3, r0
 8012768:	62bb      	str	r3, [r7, #40]	@ 0x28
//	st_data.f_ctrl_accAngleS		= 0;						// 角加速度
	st_data.f_ctrl_jerkAngle		= 0;
 801276a:	f04f 0300 	mov.w	r3, #0
 801276e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAccAngle		= 0;
 8012770:	f04f 0300 	mov.w	r3, #0
 8012774:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAccAngle		= 0;
 8012776:	f04f 0300 	mov.w	r3, #0
 801277a:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 801277c:	f04f 0300 	mov.w	r3, #0
 8012780:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_trgtAngleS		= 0;						// 目標角度
 8012782:	f04f 0300 	mov.w	r3, #0
 8012786:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 8012788:	f04f 0300 	mov.w	r3, #0
 801278c:	643b      	str	r3, [r7, #64]	@ 0x40
	st_data.f_ctrl_angle			= 0;						// 目標角度
 801278e:	f04f 0300 	mov.w	r3, #0
 8012792:	647b      	str	r3, [r7, #68]	@ 0x44
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 8012794:	f04f 0300 	mov.w	r3, #0
 8012798:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 801279a:	f107 0308 	add.w	r3, r7, #8
 801279e:	4618      	mov	r0, r3
 80127a0:	f7f3 ff3e 	bl	8006620 <CTRL_setData>
//	LED =LED_ALL_OFF;
	while( Get_NowDist() < ( st_data.f_ctrl_dist ) ){	// 指定距離到達待ち
 80127a4:	e00d      	b.n	80127c2 <MOT_goSla+0x14da>
		if( SYS_isOutOfCtrl() == TRUE ){
 80127a6:	f7f6 ff9b 	bl	80096e0 <SYS_isOutOfCtrl>
 80127aa:	4603      	mov	r3, r0
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d008      	beq.n	80127c2 <MOT_goSla+0x14da>
			CTRL_stop();
 80127b0:	f7f3 fe38 	bl	8006424 <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 80127b4:	2000      	movs	r0, #0
 80127b6:	f7f6 ffc5 	bl	8009744 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 80127ba:	2001      	movs	r0, #1
 80127bc:	f7f6 ffc2 	bl	8009744 <DCM_brakeMot>
			break;
 80127c0:	e00a      	b.n	80127d8 <MOT_goSla+0x14f0>
	while( Get_NowDist() < ( st_data.f_ctrl_dist ) ){	// 指定距離到達待ち
 80127c2:	f7f3 fd7f 	bl	80062c4 <Get_NowDist>
 80127c6:	eeb0 7a40 	vmov.f32	s14, s0
 80127ca:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80127ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80127d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127d6:	d4e6      	bmi.n	80127a6 <MOT_goSla+0x14be>
		}				// 途中で制御不能になった
	}
//	LED_off(LED1);
//	log_in(f_NowAngle);
	f_MotNowSpeed = st_info.f_mot_now;			// 現在速度更新
 80127d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80127da:	4a0a      	ldr	r2, [pc, #40]	@ (8012804 <MOT_goSla+0x151c>)
 80127dc:	6013      	str	r3, [r2, #0]
//	LED =LED_ALL_OFF;
	GYRO_endErrChkAngle();					// エラー検出終了
 80127de:	f7f7 fa1b 	bl	8009c18 <GYRO_endErrChkAngle>
//	CTRL_clrNowData();
	CTRL_setNowData_Err(/*st_data.f_dist ,*/st_data.f_ctrl_angle);
 80127e2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80127e6:	eeb0 0a67 	vmov.f32	s0, s15
 80127ea:	f7f3 fed5 	bl	8006598 <CTRL_setNowData_Err>

}
 80127ee:	bf00      	nop
 80127f0:	37f0      	adds	r7, #240	@ 0xf0
 80127f2:	46bd      	mov	sp, r7
 80127f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80127f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80127fc:	3f50624d 	.word	0x3f50624d
 8012800:	40100000 	.word	0x40100000
 8012804:	20017bcc 	.word	0x20017bcc

08012808 <MOT_setWallEdgeType>:
		}
	}
}

void MOT_setWallEdgeType( enMOT_WALL_EDGE_TYPE en_type )
{
 8012808:	b480      	push	{r7}
 801280a:	b083      	sub	sp, #12
 801280c:	af00      	add	r7, sp, #0
 801280e:	4603      	mov	r3, r0
 8012810:	71fb      	strb	r3, [r7, #7]
	en_WallEdge = en_type;
 8012812:	4a06      	ldr	r2, [pc, #24]	@ (801282c <MOT_setWallEdgeType+0x24>)
 8012814:	79fb      	ldrb	r3, [r7, #7]
 8012816:	7013      	strb	r3, [r2, #0]
	bl_IsWallEdge = FALSE;			// 非検知
 8012818:	4b05      	ldr	r3, [pc, #20]	@ (8012830 <MOT_setWallEdgeType+0x28>)
 801281a:	2200      	movs	r2, #0
 801281c:	701a      	strb	r2, [r3, #0]

}
 801281e:	bf00      	nop
 8012820:	370c      	adds	r7, #12
 8012822:	46bd      	mov	sp, r7
 8012824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012828:	4770      	bx	lr
 801282a:	bf00      	nop
 801282c:	20017be4 	.word	0x20017be4
 8012830:	20017be5 	.word	0x20017be5

08012834 <MOT_getWallEdgeType>:

enMOT_WALL_EDGE_TYPE MOT_getWallEdgeType( void )
{
 8012834:	b480      	push	{r7}
 8012836:	af00      	add	r7, sp, #0
	return en_WallEdge;
 8012838:	4b03      	ldr	r3, [pc, #12]	@ (8012848 <MOT_getWallEdgeType+0x14>)
 801283a:	781b      	ldrb	r3, [r3, #0]
}
 801283c:	4618      	mov	r0, r3
 801283e:	46bd      	mov	sp, r7
 8012840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012844:	4770      	bx	lr
 8012846:	bf00      	nop
 8012848:	20017be4 	.word	0x20017be4

0801284c <MOT_setWallEdge>:

void MOT_setWallEdge( bool bl_val )
{
 801284c:	b480      	push	{r7}
 801284e:	b083      	sub	sp, #12
 8012850:	af00      	add	r7, sp, #0
 8012852:	4603      	mov	r3, r0
 8012854:	71fb      	strb	r3, [r7, #7]
	bl_IsWallEdge = bl_val;
 8012856:	4a04      	ldr	r2, [pc, #16]	@ (8012868 <MOT_setWallEdge+0x1c>)
 8012858:	79fb      	ldrb	r3, [r7, #7]
 801285a:	7013      	strb	r3, [r2, #0]

}
 801285c:	bf00      	nop
 801285e:	370c      	adds	r7, #12
 8012860:	46bd      	mov	sp, r7
 8012862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012866:	4770      	bx	lr
 8012868:	20017be5 	.word	0x20017be5

0801286c <MOT_setWallEdgeDist>:

bool MOT_setWallEdgeDist( void )
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b082      	sub	sp, #8
 8012870:	af00      	add	r7, sp, #0
	float f_addDist;

	/* 壁の切れ目を検知していない */
	if( ( bl_IsWallEdge == FALSE ) || ( en_WallEdge == MOT_WALL_EDGE_NONE ) ){		// 壁切れ設定されていないか、検出していない場合は処理を抜ける
 8012872:	4b1b      	ldr	r3, [pc, #108]	@ (80128e0 <MOT_setWallEdgeDist+0x74>)
 8012874:	781b      	ldrb	r3, [r3, #0]
 8012876:	f083 0301 	eor.w	r3, r3, #1
 801287a:	b2db      	uxtb	r3, r3
 801287c:	2b00      	cmp	r3, #0
 801287e:	d103      	bne.n	8012888 <MOT_setWallEdgeDist+0x1c>
 8012880:	4b18      	ldr	r3, [pc, #96]	@ (80128e4 <MOT_setWallEdgeDist+0x78>)
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d101      	bne.n	801288c <MOT_setWallEdgeDist+0x20>
		return FALSE;
 8012888:	2300      	movs	r3, #0
 801288a:	e024      	b.n	80128d6 <MOT_setWallEdgeDist+0x6a>
	}

	f_addDist = Get_NowDist() + MOT_WALL_EDGE_DIST;		// 旋回開始位置
 801288c:	f7f3 fd1a 	bl	80062c4 <Get_NowDist>
 8012890:	eef0 7a40 	vmov.f32	s15, s0
 8012894:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80128e8 <MOT_setWallEdgeDist+0x7c>
 8012898:	ee77 7a87 	vadd.f32	s15, s15, s14
 801289c:	edc7 7a01 	vstr	s15, [r7, #4]

	/* 多く走る必要がある */
	if( f_addDist > st_Info.f_mot_dist ){
 80128a0:	4b12      	ldr	r3, [pc, #72]	@ (80128ec <MOT_setWallEdgeDist+0x80>)
 80128a2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80128a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80128aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80128ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128b2:	dd09      	ble.n	80128c8 <MOT_setWallEdgeDist+0x5c>

		f_WallEdgeAddDist = f_addDist - st_Info.f_mot_dist;	//壁切れの距離＋現在距離が本来の距離を超えた分をwall_adddistとして設定してるんだなぁだから設定だけすればいいのか
 80128b4:	4b0d      	ldr	r3, [pc, #52]	@ (80128ec <MOT_setWallEdgeDist+0x80>)
 80128b6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80128ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80128be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80128c2:	4b0b      	ldr	r3, [pc, #44]	@ (80128f0 <MOT_setWallEdgeDist+0x84>)
 80128c4:	edc3 7a00 	vstr	s15, [r3]
/*	if( f_addDist < st_Info.f_dist){
		st_Info.f_dist = f_addDist;
	}
*/
	/* 壁の切れ目補正の変数を初期化 */
	en_WallEdge   = MOT_WALL_EDGE_NONE;		// 壁の切れ目タイプ
 80128c8:	4b06      	ldr	r3, [pc, #24]	@ (80128e4 <MOT_setWallEdgeDist+0x78>)
 80128ca:	2200      	movs	r2, #0
 80128cc:	701a      	strb	r2, [r3, #0]
	bl_IsWallEdge = FALSE;					// 壁の切れ目検知
 80128ce:	4b04      	ldr	r3, [pc, #16]	@ (80128e0 <MOT_setWallEdgeDist+0x74>)
 80128d0:	2200      	movs	r2, #0
 80128d2:	701a      	strb	r2, [r3, #0]
	return TRUE;
 80128d4:	2301      	movs	r3, #1
}
 80128d6:	4618      	mov	r0, r3
 80128d8:	3708      	adds	r7, #8
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}
 80128de:	bf00      	nop
 80128e0:	20017be5 	.word	0x20017be5
 80128e4:	20017be4 	.word	0x20017be4
 80128e8:	3cf9db23 	.word	0x3cf9db23
 80128ec:	20017b2c 	.word	0x20017b2c
 80128f0:	20017be8 	.word	0x20017be8

080128f4 <MOT_setWallEdgeDist_LoopWait>:
bool MOT_setWallEdgeDist_LoopWait( void )
{
 80128f4:	b480      	push	{r7}
 80128f6:	af00      	add	r7, sp, #0
//	SetLED(0x11);
	/* 壁の切れ目を検知していない */
	if( bl_IsWallEdge == FALSE ){		// 壁切れ設定されていないか、検出していない場合は処理を抜ける
 80128f8:	4b08      	ldr	r3, [pc, #32]	@ (801291c <MOT_setWallEdgeDist_LoopWait+0x28>)
 80128fa:	781b      	ldrb	r3, [r3, #0]
 80128fc:	f083 0301 	eor.w	r3, r3, #1
 8012900:	b2db      	uxtb	r3, r3
 8012902:	2b00      	cmp	r3, #0
 8012904:	d001      	beq.n	801290a <MOT_setWallEdgeDist_LoopWait+0x16>

		return FALSE;
 8012906:	2300      	movs	r3, #0
 8012908:	e003      	b.n	8012912 <MOT_setWallEdgeDist_LoopWait+0x1e>
	}

	f_WallEdgeAddDist = MOT_WALL_EDGE_DIST;		// 旋回開始位置
 801290a:	4b05      	ldr	r3, [pc, #20]	@ (8012920 <MOT_setWallEdgeDist_LoopWait+0x2c>)
 801290c:	4a05      	ldr	r2, [pc, #20]	@ (8012924 <MOT_setWallEdgeDist_LoopWait+0x30>)
 801290e:	601a      	str	r2, [r3, #0]

	return TRUE;
 8012910:	2301      	movs	r3, #1
}
 8012912:	4618      	mov	r0, r3
 8012914:	46bd      	mov	sp, r7
 8012916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291a:	4770      	bx	lr
 801291c:	20017be5 	.word	0x20017be5
 8012920:	20017be8 	.word	0x20017be8
 8012924:	3cf9db23 	.word	0x3cf9db23

08012928 <DIST_Front_Wall_correction>:

void DIST_Front_Wall_correction(void)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b0b8      	sub	sp, #224	@ 0xe0
 801292c:	af00      	add	r7, sp, #0
	stMOT_DATA	st_info;	//シーケンスデータ
	stCTRL_DATA	st_data;	//制御データ

	GYRO_staErrChkAngle();			// エラー検出開始
 801292e:	f7f7 f961 	bl	8009bf4 <GYRO_staErrChkAngle>
	
	st_data.en_ctrl_type			= CTRL_FRONT_WALL;
 8012932:	230f      	movs	r3, #15
 8012934:	703b      	strb	r3, [r7, #0]
	st_data.f_ctrl_jerk			= 0;
 8012936:	f04f 0300 	mov.w	r3, #0
 801293a:	60bb      	str	r3, [r7, #8]
	st_data.f_ctrl_trgtAcc		= 0;						// 加速度指定
 801293c:	f04f 0300 	mov.w	r3, #0
 8012940:	613b      	str	r3, [r7, #16]
	st_data.f_ctrl_nowAcc		= 0;
 8012942:	f04f 0300 	mov.w	r3, #0
 8012946:	60fb      	str	r3, [r7, #12]
	st_data.f_ctrl_now			= 0;						// 現在速度
 8012948:	f04f 0300 	mov.w	r3, #0
 801294c:	617b      	str	r3, [r7, #20]
	st_data.f_ctrl_trgt			= 0;						// 目標速度
 801294e:	f04f 0300 	mov.w	r3, #0
 8012952:	61bb      	str	r3, [r7, #24]
	st_data.f_ctrl_nowDist		= 0;						// 進んでいない
 8012954:	f04f 0300 	mov.w	r3, #0
 8012958:	61fb      	str	r3, [r7, #28]
	st_data.f_ctrl_dist			= 0;						// 加速距離
 801295a:	f04f 0300 	mov.w	r3, #0
 801295e:	623b      	str	r3, [r7, #32]
//	st_data.f_ctrl_accAngleS		= 0;		// 角加速度
	st_data.f_ctrl_nowAccAngle		= 0;
 8012960:	f04f 0300 	mov.w	r3, #0
 8012964:	62bb      	str	r3, [r7, #40]	@ 0x28
	st_data.f_ctrl_trgtAccAngle		= 0;
 8012966:	f04f 0300 	mov.w	r3, #0
 801296a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	st_data.f_ctrl_nowAngleS		= 0;						// 現在角速度
 801296c:	f04f 0300 	mov.w	r3, #0
 8012970:	633b      	str	r3, [r7, #48]	@ 0x30
	st_data.f_ctrl_trgtAngleS		= 0;		// 目標角度
 8012972:	f04f 0300 	mov.w	r3, #0
 8012976:	637b      	str	r3, [r7, #52]	@ 0x34
	st_data.f_ctrl_nowAngle		= 0;						// 現在角度
 8012978:	f04f 0300 	mov.w	r3, #0
 801297c:	63bb      	str	r3, [r7, #56]	@ 0x38
	st_data.f_ctrl_angle			= 0;			// 目標角度
 801297e:	f04f 0300 	mov.w	r3, #0
 8012982:	63fb      	str	r3, [r7, #60]	@ 0x3c
	st_data.f_ctrl_time 			= 0;						// 目標時間 [sec] ← 指定しない
 8012984:	f04f 0300 	mov.w	r3, #0
 8012988:	607b      	str	r3, [r7, #4]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 801298a:	f7f3 fd5b 	bl	8006444 <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 801298e:	463b      	mov	r3, r7
 8012990:	4618      	mov	r0, r3
 8012992:	f7f3 fe45 	bl	8006620 <CTRL_setData>
	DCM_staMotAll();									// モータON
 8012996:	f7f6 fef9 	bl	800978c <DCM_staMotAll>
	while((DIST_getNowVal( DIST_SEN_R_FRONT )>(R_FRONT_REF+FRONT_WALL_MINUS+30))||(DIST_getNowVal( DIST_SEN_R_FRONT )<(R_FRONT_REF+FRONT_WALL_MINUS-30))
 801299a:	e00f      	b.n	80129bc <DIST_Front_Wall_correction+0x94>
		||(DIST_getNowVal( DIST_SEN_L_FRONT )>(L_FRONT_REF+FRONT_WALL_MINUS+30))||(DIST_getNowVal( DIST_SEN_L_FRONT )<(L_FRONT_REF+FRONT_WALL_MINUS-30))){
			if(EscapeWait > 0.8)break;
 801299c:	4b2a      	ldr	r3, [pc, #168]	@ (8012a48 <DIST_Front_Wall_correction+0x120>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7ed fdf9 	bl	8000598 <__aeabi_f2d>
 80129a6:	a326      	add	r3, pc, #152	@ (adr r3, 8012a40 <DIST_Front_Wall_correction+0x118>)
 80129a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ac:	f7ee f8dc 	bl	8000b68 <__aeabi_dcmpgt>
 80129b0:	4603      	mov	r3, r0
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d125      	bne.n	8012a02 <DIST_Front_Wall_correction+0xda>
			LL_mDelay(10);//volatile入れてないから回避用に入れてみる
 80129b6:	200a      	movs	r0, #10
 80129b8:	f009 f8c4 	bl	801bb44 <LL_mDelay>
	while((DIST_getNowVal( DIST_SEN_R_FRONT )>(R_FRONT_REF+FRONT_WALL_MINUS+30))||(DIST_getNowVal( DIST_SEN_R_FRONT )<(R_FRONT_REF+FRONT_WALL_MINUS-30))
 80129bc:	2000      	movs	r0, #0
 80129be:	f000 f93f 	bl	8012c40 <DIST_getNowVal>
 80129c2:	4603      	mov	r3, r0
 80129c4:	461a      	mov	r2, r3
		||(DIST_getNowVal( DIST_SEN_L_FRONT )>(L_FRONT_REF+FRONT_WALL_MINUS+30))||(DIST_getNowVal( DIST_SEN_L_FRONT )<(L_FRONT_REF+FRONT_WALL_MINUS-30))){
 80129c6:	f240 4324 	movw	r3, #1060	@ 0x424
 80129ca:	429a      	cmp	r2, r3
 80129cc:	dce6      	bgt.n	801299c <DIST_Front_Wall_correction+0x74>
	while((DIST_getNowVal( DIST_SEN_R_FRONT )>(R_FRONT_REF+FRONT_WALL_MINUS+30))||(DIST_getNowVal( DIST_SEN_R_FRONT )<(R_FRONT_REF+FRONT_WALL_MINUS-30))
 80129ce:	2000      	movs	r0, #0
 80129d0:	f000 f936 	bl	8012c40 <DIST_getNowVal>
 80129d4:	4603      	mov	r3, r0
 80129d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80129da:	dbdf      	blt.n	801299c <DIST_Front_Wall_correction+0x74>
		||(DIST_getNowVal( DIST_SEN_L_FRONT )>(L_FRONT_REF+FRONT_WALL_MINUS+30))||(DIST_getNowVal( DIST_SEN_L_FRONT )<(L_FRONT_REF+FRONT_WALL_MINUS-30))){
 80129dc:	2001      	movs	r0, #1
 80129de:	f000 f92f 	bl	8012c40 <DIST_getNowVal>
 80129e2:	4603      	mov	r3, r0
 80129e4:	461a      	mov	r2, r3
 80129e6:	f240 23ce 	movw	r3, #718	@ 0x2ce
 80129ea:	429a      	cmp	r2, r3
 80129ec:	dcd6      	bgt.n	801299c <DIST_Front_Wall_correction+0x74>
 80129ee:	2001      	movs	r0, #1
 80129f0:	f000 f926 	bl	8012c40 <DIST_getNowVal>
 80129f4:	4603      	mov	r3, r0
 80129f6:	461a      	mov	r2, r3
 80129f8:	f240 2391 	movw	r3, #657	@ 0x291
 80129fc:	429a      	cmp	r2, r3
 80129fe:	ddcd      	ble.n	801299c <DIST_Front_Wall_correction+0x74>
 8012a00:	e000      	b.n	8012a04 <DIST_Front_Wall_correction+0xdc>
			if(EscapeWait > 0.8)break;
 8012a02:	bf00      	nop
	}
	LL_mDelay(50);
 8012a04:	2032      	movs	r0, #50	@ 0x32
 8012a06:	f009 f89d 	bl	801bb44 <LL_mDelay>
	CTRL_stop();			// 制御停止
 8012a0a:	f7f3 fd0b 	bl	8006424 <CTRL_stop>
	DCM_brakeMot( DCM_R );		// ブレーキ
 8012a0e:	2000      	movs	r0, #0
 8012a10:	f7f6 fe98 	bl	8009744 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 8012a14:	2001      	movs	r0, #1
 8012a16:	f7f6 fe95 	bl	8009744 <DCM_brakeMot>
	GYRO_endErrChkAngle();					// エラー検出終了
 8012a1a:	f7f7 f8fd 	bl	8009c18 <GYRO_endErrChkAngle>
	LL_mDelay(100);
 8012a1e:	2064      	movs	r0, #100	@ 0x64
 8012a20:	f009 f890 	bl	801bb44 <LL_mDelay>
	f_MotNowSpeed = 0.0f;		//現在速度更新
 8012a24:	4b09      	ldr	r3, [pc, #36]	@ (8012a4c <DIST_Front_Wall_correction+0x124>)
 8012a26:	f04f 0200 	mov.w	r2, #0
 8012a2a:	601a      	str	r2, [r3, #0]

	CTRL_clrNowData();
 8012a2c:	f7f3 fd7a 	bl	8006524 <CTRL_clrNowData>
	CTRL_clrAngleErrSum();
 8012a30:	f7f3 fd50 	bl	80064d4 <CTRL_clrAngleErrSum>
	CTRL_clrSpeedErrSum();
 8012a34:	f7f3 fd62 	bl	80064fc <CTRL_clrSpeedErrSum>
}
 8012a38:	bf00      	nop
 8012a3a:	37e0      	adds	r7, #224	@ 0xe0
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}
 8012a40:	9999999a 	.word	0x9999999a
 8012a44:	3fe99999 	.word	0x3fe99999
 8012a48:	200003fc 	.word	0x200003fc
 8012a4c:	20017bcc 	.word	0x20017bcc

08012a50 <BAT_Pol>:

uint16_t	us_BatLvAve = 4095;							// バッテリ平均値（AD変換の最大値で初期化）


void BAT_Pol( void )
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	af00      	add	r7, sp, #0
	static uint16_t 	us_batLv[5] = { 4095, 4095, 4095, 4095, 4095 };
	static uint8_t		i = 0;

	us_batLv[4] = us_batLv[3];
 8012a54:	4b2d      	ldr	r3, [pc, #180]	@ (8012b0c <BAT_Pol+0xbc>)
 8012a56:	88da      	ldrh	r2, [r3, #6]
 8012a58:	4b2c      	ldr	r3, [pc, #176]	@ (8012b0c <BAT_Pol+0xbc>)
 8012a5a:	811a      	strh	r2, [r3, #8]
	us_batLv[3] = us_batLv[2];
 8012a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8012b0c <BAT_Pol+0xbc>)
 8012a5e:	889a      	ldrh	r2, [r3, #4]
 8012a60:	4b2a      	ldr	r3, [pc, #168]	@ (8012b0c <BAT_Pol+0xbc>)
 8012a62:	80da      	strh	r2, [r3, #6]
	us_batLv[2] = us_batLv[1];
 8012a64:	4b29      	ldr	r3, [pc, #164]	@ (8012b0c <BAT_Pol+0xbc>)
 8012a66:	885a      	ldrh	r2, [r3, #2]
 8012a68:	4b28      	ldr	r3, [pc, #160]	@ (8012b0c <BAT_Pol+0xbc>)
 8012a6a:	809a      	strh	r2, [r3, #4]
	us_batLv[1] = us_batLv[0];
 8012a6c:	4b27      	ldr	r3, [pc, #156]	@ (8012b0c <BAT_Pol+0xbc>)
 8012a6e:	881a      	ldrh	r2, [r3, #0]
 8012a70:	4b26      	ldr	r3, [pc, #152]	@ (8012b0c <BAT_Pol+0xbc>)
 8012a72:	805a      	strh	r2, [r3, #2]

	us_batLv[0] = GetBatVal();
 8012a74:	f7ee fee6 	bl	8001844 <GetBatVal>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	461a      	mov	r2, r3
 8012a7c:	4b23      	ldr	r3, [pc, #140]	@ (8012b0c <BAT_Pol+0xbc>)
 8012a7e:	801a      	strh	r2, [r3, #0]

	us_BatLvAve = ( us_batLv[0] + us_batLv[1] + us_batLv[2] + us_batLv[3] + us_batLv[4] ) / 5;
 8012a80:	4b22      	ldr	r3, [pc, #136]	@ (8012b0c <BAT_Pol+0xbc>)
 8012a82:	881b      	ldrh	r3, [r3, #0]
 8012a84:	461a      	mov	r2, r3
 8012a86:	4b21      	ldr	r3, [pc, #132]	@ (8012b0c <BAT_Pol+0xbc>)
 8012a88:	885b      	ldrh	r3, [r3, #2]
 8012a8a:	4413      	add	r3, r2
 8012a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8012b0c <BAT_Pol+0xbc>)
 8012a8e:	8892      	ldrh	r2, [r2, #4]
 8012a90:	4413      	add	r3, r2
 8012a92:	4a1e      	ldr	r2, [pc, #120]	@ (8012b0c <BAT_Pol+0xbc>)
 8012a94:	88d2      	ldrh	r2, [r2, #6]
 8012a96:	4413      	add	r3, r2
 8012a98:	4a1c      	ldr	r2, [pc, #112]	@ (8012b0c <BAT_Pol+0xbc>)
 8012a9a:	8912      	ldrh	r2, [r2, #8]
 8012a9c:	4413      	add	r3, r2
 8012a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8012b10 <BAT_Pol+0xc0>)
 8012aa0:	fb82 1203 	smull	r1, r2, r2, r3
 8012aa4:	1052      	asrs	r2, r2, #1
 8012aa6:	17db      	asrs	r3, r3, #31
 8012aa8:	1ad3      	subs	r3, r2, r3
 8012aaa:	b29a      	uxth	r2, r3
 8012aac:	4b19      	ldr	r3, [pc, #100]	@ (8012b14 <BAT_Pol+0xc4>)
 8012aae:	801a      	strh	r2, [r3, #0]


	if( us_BatLvAve < BAT_LOW ) {
 8012ab0:	4b18      	ldr	r3, [pc, #96]	@ (8012b14 <BAT_Pol+0xc4>)
 8012ab2:	881b      	ldrh	r3, [r3, #0]
 8012ab4:	f640 22a9 	movw	r2, #2729	@ 0xaa9
 8012ab8:	4293      	cmp	r3, r2
 8012aba:	d803      	bhi.n	8012ac4 <BAT_Pol+0x74>
		SetBatLED(0);
 8012abc:	2000      	movs	r0, #0
 8012abe:	f7ef fa65 	bl	8001f8c <SetBatLED>
		i++;
	}
	else{
		SetBatLED(1);
	}
}
 8012ac2:	e021      	b.n	8012b08 <BAT_Pol+0xb8>
	else if( us_BatLvAve < BAT_GOOD ) {
 8012ac4:	4b13      	ldr	r3, [pc, #76]	@ (8012b14 <BAT_Pol+0xc4>)
 8012ac6:	881b      	ldrh	r3, [r3, #0]
 8012ac8:	f640 32f3 	movw	r2, #3059	@ 0xbf3
 8012acc:	4293      	cmp	r3, r2
 8012ace:	d818      	bhi.n	8012b02 <BAT_Pol+0xb2>
		if( i>=100){
 8012ad0:	4b11      	ldr	r3, [pc, #68]	@ (8012b18 <BAT_Pol+0xc8>)
 8012ad2:	781b      	ldrb	r3, [r3, #0]
 8012ad4:	2b63      	cmp	r3, #99	@ 0x63
 8012ad6:	d906      	bls.n	8012ae6 <BAT_Pol+0x96>
			SetBatLED(1);
 8012ad8:	2001      	movs	r0, #1
 8012ada:	f7ef fa57 	bl	8001f8c <SetBatLED>
			i=0;
 8012ade:	4b0e      	ldr	r3, [pc, #56]	@ (8012b18 <BAT_Pol+0xc8>)
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	701a      	strb	r2, [r3, #0]
 8012ae4:	e006      	b.n	8012af4 <BAT_Pol+0xa4>
		else if(i>=50){
 8012ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8012b18 <BAT_Pol+0xc8>)
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	2b31      	cmp	r3, #49	@ 0x31
 8012aec:	d902      	bls.n	8012af4 <BAT_Pol+0xa4>
			SetBatLED(0);
 8012aee:	2000      	movs	r0, #0
 8012af0:	f7ef fa4c 	bl	8001f8c <SetBatLED>
		i++;
 8012af4:	4b08      	ldr	r3, [pc, #32]	@ (8012b18 <BAT_Pol+0xc8>)
 8012af6:	781b      	ldrb	r3, [r3, #0]
 8012af8:	3301      	adds	r3, #1
 8012afa:	b2da      	uxtb	r2, r3
 8012afc:	4b06      	ldr	r3, [pc, #24]	@ (8012b18 <BAT_Pol+0xc8>)
 8012afe:	701a      	strb	r2, [r3, #0]
}
 8012b00:	e002      	b.n	8012b08 <BAT_Pol+0xb8>
		SetBatLED(1);
 8012b02:	2001      	movs	r0, #1
 8012b04:	f7ef fa42 	bl	8001f8c <SetBatLED>
}
 8012b08:	bf00      	nop
 8012b0a:	bd80      	pop	{r7, pc}
 8012b0c:	20000010 	.word	0x20000010
 8012b10:	66666667 	.word	0x66666667
 8012b14:	2000000e 	.word	0x2000000e
 8012b18:	20017bed 	.word	0x20017bed
 8012b1c:	00000000 	.word	0x00000000

08012b20 <get_battLv>:

float get_battLv(void){
 8012b20:	b580      	push	{r7, lr}
 8012b22:	af00      	add	r7, sp, #0
	return (float)us_BatLvAve*(20.0+10.0)/10.0/4095.000*3.300;
 8012b24:	4b1e      	ldr	r3, [pc, #120]	@ (8012ba0 <get_battLv+0x80>)
 8012b26:	881b      	ldrh	r3, [r3, #0]
 8012b28:	ee07 3a90 	vmov	s15, r3
 8012b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b30:	ee17 0a90 	vmov	r0, s15
 8012b34:	f7ed fd30 	bl	8000598 <__aeabi_f2d>
 8012b38:	f04f 0200 	mov.w	r2, #0
 8012b3c:	4b19      	ldr	r3, [pc, #100]	@ (8012ba4 <get_battLv+0x84>)
 8012b3e:	f7ed fd83 	bl	8000648 <__aeabi_dmul>
 8012b42:	4602      	mov	r2, r0
 8012b44:	460b      	mov	r3, r1
 8012b46:	4610      	mov	r0, r2
 8012b48:	4619      	mov	r1, r3
 8012b4a:	f04f 0200 	mov.w	r2, #0
 8012b4e:	4b16      	ldr	r3, [pc, #88]	@ (8012ba8 <get_battLv+0x88>)
 8012b50:	f7ed fea4 	bl	800089c <__aeabi_ddiv>
 8012b54:	4602      	mov	r2, r0
 8012b56:	460b      	mov	r3, r1
 8012b58:	4610      	mov	r0, r2
 8012b5a:	4619      	mov	r1, r3
 8012b5c:	a30c      	add	r3, pc, #48	@ (adr r3, 8012b90 <get_battLv+0x70>)
 8012b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b62:	f7ed fe9b 	bl	800089c <__aeabi_ddiv>
 8012b66:	4602      	mov	r2, r0
 8012b68:	460b      	mov	r3, r1
 8012b6a:	4610      	mov	r0, r2
 8012b6c:	4619      	mov	r1, r3
 8012b6e:	a30a      	add	r3, pc, #40	@ (adr r3, 8012b98 <get_battLv+0x78>)
 8012b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b74:	f7ed fd68 	bl	8000648 <__aeabi_dmul>
 8012b78:	4602      	mov	r2, r0
 8012b7a:	460b      	mov	r3, r1
 8012b7c:	4610      	mov	r0, r2
 8012b7e:	4619      	mov	r1, r3
 8012b80:	f7ee f85a 	bl	8000c38 <__aeabi_d2f>
 8012b84:	4603      	mov	r3, r0
 8012b86:	ee07 3a90 	vmov	s15, r3
}
 8012b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8012b8e:	bd80      	pop	{r7, pc}
 8012b90:	00000000 	.word	0x00000000
 8012b94:	40affe00 	.word	0x40affe00
 8012b98:	66666666 	.word	0x66666666
 8012b9c:	400a6666 	.word	0x400a6666
 8012ba0:	2000000e 	.word	0x2000000e
 8012ba4:	403e0000 	.word	0x403e0000
 8012ba8:	40240000 	.word	0x40240000

08012bac <DIST_init>:
stDIST_SEN		st_sen[DIST_SEN_NUM];					// 距離センサ
stDIST_FRONT_SEN		st_senF[DIST_SEN_NUM];


void DIST_init( void )
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	af00      	add	r7, sp, #0
	memset( st_sen, 0, sizeof(st_sen) );				// 距離センサ(全センサ共通)
 8012bb0:	2238      	movs	r2, #56	@ 0x38
 8012bb2:	2100      	movs	r1, #0
 8012bb4:	4820      	ldr	r0, [pc, #128]	@ (8012c38 <DIST_init+0x8c>)
 8012bb6:	f00b fae5 	bl	801e184 <memset>
	st_sen[DIST_SEN_R_FRONT].s_ref       = R_FRONT_REF;
 8012bba:	4b1f      	ldr	r3, [pc, #124]	@ (8012c38 <DIST_init+0x8c>)
 8012bbc:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8012bc0:	80da      	strh	r2, [r3, #6]
	st_sen[DIST_SEN_L_FRONT].s_ref       = L_FRONT_REF;
 8012bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8012c38 <DIST_init+0x8c>)
 8012bc4:	f240 2283 	movw	r2, #643	@ 0x283
 8012bc8:	829a      	strh	r2, [r3, #20]
	st_sen[DIST_SEN_R_SIDE].s_ref        = R_SIDE_REF;
 8012bca:	4b1b      	ldr	r3, [pc, #108]	@ (8012c38 <DIST_init+0x8c>)
 8012bcc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8012bd0:	845a      	strh	r2, [r3, #34]	@ 0x22
	st_sen[DIST_SEN_L_SIDE].s_ref        = L_SIDE_REF;
 8012bd2:	4b19      	ldr	r3, [pc, #100]	@ (8012c38 <DIST_init+0x8c>)
 8012bd4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8012bd8:	861a      	strh	r2, [r3, #48]	@ 0x30
	st_sen[DIST_SEN_R_FRONT].s_limit     = R_FRONT_WALL;
 8012bda:	4b17      	ldr	r3, [pc, #92]	@ (8012c38 <DIST_init+0x8c>)
 8012bdc:	226e      	movs	r2, #110	@ 0x6e
 8012bde:	809a      	strh	r2, [r3, #4]
	st_sen[DIST_SEN_L_FRONT].s_limit     = L_FRONT_WALL;
 8012be0:	4b15      	ldr	r3, [pc, #84]	@ (8012c38 <DIST_init+0x8c>)
 8012be2:	225a      	movs	r2, #90	@ 0x5a
 8012be4:	825a      	strh	r2, [r3, #18]
	st_sen[DIST_SEN_R_SIDE].s_limit      = R_SIDE_WALL;
 8012be6:	4b14      	ldr	r3, [pc, #80]	@ (8012c38 <DIST_init+0x8c>)
 8012be8:	225f      	movs	r2, #95	@ 0x5f
 8012bea:	841a      	strh	r2, [r3, #32]
	st_sen[DIST_SEN_L_SIDE].s_limit      = L_SIDE_WALL;
 8012bec:	4b12      	ldr	r3, [pc, #72]	@ (8012c38 <DIST_init+0x8c>)
 8012bee:	2287      	movs	r2, #135	@ 0x87
 8012bf0:	85da      	strh	r2, [r3, #46]	@ 0x2e
	st_senF[DIST_SEN_R_FRONT].s_skewErr1	= R_FRONT_SKEW_ERR1;
 8012bf2:	4b12      	ldr	r3, [pc, #72]	@ (8012c3c <DIST_init+0x90>)
 8012bf4:	2250      	movs	r2, #80	@ 0x50
 8012bf6:	805a      	strh	r2, [r3, #2]
	st_senF[DIST_SEN_L_FRONT].s_skewErr1	= L_FRONT_SKEW_ERR1;
 8012bf8:	4b10      	ldr	r3, [pc, #64]	@ (8012c3c <DIST_init+0x90>)
 8012bfa:	2246      	movs	r2, #70	@ 0x46
 8012bfc:	815a      	strh	r2, [r3, #10]
	st_senF[DIST_SEN_R_FRONT].s_skewErr2	= R_FRONT_SKEW_ERR2;
 8012bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8012c3c <DIST_init+0x90>)
 8012c00:	22c0      	movs	r2, #192	@ 0xc0
 8012c02:	809a      	strh	r2, [r3, #4]
	st_senF[DIST_SEN_L_FRONT].s_skewErr2	= L_FRONT_SKEW_ERR2;
 8012c04:	4b0d      	ldr	r3, [pc, #52]	@ (8012c3c <DIST_init+0x90>)
 8012c06:	22a0      	movs	r2, #160	@ 0xa0
 8012c08:	819a      	strh	r2, [r3, #12]
	st_senF[DIST_SEN_R_FRONT].s_skewErr3	= R_FRONT_SKEW_ERR3;
 8012c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8012c3c <DIST_init+0x90>)
 8012c0c:	22fa      	movs	r2, #250	@ 0xfa
 8012c0e:	80da      	strh	r2, [r3, #6]
	st_senF[DIST_SEN_L_FRONT].s_skewErr3	= L_FRONT_SKEW_ERR3;
 8012c10:	4b0a      	ldr	r3, [pc, #40]	@ (8012c3c <DIST_init+0x90>)
 8012c12:	22fa      	movs	r2, #250	@ 0xfa
 8012c14:	81da      	strh	r2, [r3, #14]
	st_sen[DIST_SEN_R_FRONT].s_noCtrl = R_FRONT_NOCTRL;
 8012c16:	4b08      	ldr	r3, [pc, #32]	@ (8012c38 <DIST_init+0x8c>)
 8012c18:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012c1c:	819a      	strh	r2, [r3, #12]
	st_sen[DIST_SEN_L_FRONT].s_noCtrl = L_FRONT_NOCTRL;
 8012c1e:	4b06      	ldr	r3, [pc, #24]	@ (8012c38 <DIST_init+0x8c>)
 8012c20:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8012c24:	835a      	strh	r2, [r3, #26]
	st_sen[DIST_SEN_R_FRONT].s_ctrl = R_FRONT_CTRL;
 8012c26:	4b04      	ldr	r3, [pc, #16]	@ (8012c38 <DIST_init+0x8c>)
 8012c28:	22a8      	movs	r2, #168	@ 0xa8
 8012c2a:	815a      	strh	r2, [r3, #10]
	st_sen[DIST_SEN_L_FRONT].s_ctrl = L_FRONT_CTRL;
 8012c2c:	4b02      	ldr	r3, [pc, #8]	@ (8012c38 <DIST_init+0x8c>)
 8012c2e:	228a      	movs	r2, #138	@ 0x8a
 8012c30:	831a      	strh	r2, [r3, #24]

}
 8012c32:	bf00      	nop
 8012c34:	bd80      	pop	{r7, pc}
 8012c36:	bf00      	nop
 8012c38:	20017bf0 	.word	0x20017bf0
 8012c3c:	20017c28 	.word	0x20017c28

08012c40 <DIST_getNowVal>:

int16_t DIST_getNowVal( enDIST_SEN_ID en_id )
{
 8012c40:	b480      	push	{r7}
 8012c42:	b083      	sub	sp, #12
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	4603      	mov	r3, r0
 8012c48:	71fb      	strb	r3, [r7, #7]
	return st_sen[en_id].s_now;
 8012c4a:	79fa      	ldrb	r2, [r7, #7]
 8012c4c:	4906      	ldr	r1, [pc, #24]	@ (8012c68 <DIST_getNowVal+0x28>)
 8012c4e:	4613      	mov	r3, r2
 8012c50:	00db      	lsls	r3, r3, #3
 8012c52:	1a9b      	subs	r3, r3, r2
 8012c54:	005b      	lsls	r3, r3, #1
 8012c56:	440b      	add	r3, r1
 8012c58:	881b      	ldrh	r3, [r3, #0]
 8012c5a:	b21b      	sxth	r3, r3
}
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	370c      	adds	r7, #12
 8012c60:	46bd      	mov	sp, r7
 8012c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c66:	4770      	bx	lr
 8012c68:	20017bf0 	.word	0x20017bf0
 8012c6c:	00000000 	.word	0x00000000

08012c70 <DIST_getErr>:


void DIST_getErr( int32_t* p_err )
{
 8012c70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8012c74:	b084      	sub	sp, #16
 8012c76:	af00      	add	r7, sp, #0
 8012c78:	6078      	str	r0, [r7, #4]
	volatile int16_t	s_threshold_R = 0;		// 右センサの閾値
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	81bb      	strh	r3, [r7, #12]
	volatile int16_t	s_threshold_L = 0;		// 左センサの閾値
 8012c7e:	2300      	movs	r3, #0
 8012c80:	817b      	strh	r3, [r7, #10]
	/* ---------- */
	/*  右壁制御  */
	/* ---------- */
	/* 壁の切れ目対策 */
	// 急激にセンサの値が変化した場合は、壁の有無の基準値を閾値に変更する
	s_temp = st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_old;
 8012c82:	4ba5      	ldr	r3, [pc, #660]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012c84:	8b9a      	ldrh	r2, [r3, #28]
 8012c86:	4ba4      	ldr	r3, [pc, #656]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012c88:	8bdb      	ldrh	r3, [r3, #30]
 8012c8a:	1ad3      	subs	r3, r2, r3
 8012c8c:	b29b      	uxth	r3, r3
 8012c8e:	81fb      	strh	r3, [r7, #14]
	if( ( s_temp < -1 * DIST_NO_WALL_DIV_FILTER ) || ( DIST_NO_WALL_DIV_FILTER < s_temp )
 8012c90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012c94:	f113 0f19 	cmn.w	r3, #25
 8012c98:	db03      	blt.n	8012ca2 <DIST_getErr+0x32>
 8012c9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012c9e:	2b19      	cmp	r3, #25
 8012ca0:	dd06      	ble.n	8012cb0 <DIST_getErr+0x40>
	){
		s_threshold_R = st_sen[DIST_SEN_R_SIDE].s_ref + DIST_REF_UP;		// 基準値＋αを壁の存在する閾値にする
 8012ca2:	4b9d      	ldr	r3, [pc, #628]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012ca4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012ca6:	3323      	adds	r3, #35	@ 0x23
 8012ca8:	b29b      	uxth	r3, r3
 8012caa:	b21b      	sxth	r3, r3
 8012cac:	81bb      	strh	r3, [r7, #12]
 8012cae:	e003      	b.n	8012cb8 <DIST_getErr+0x48>
	}
	else{
		s_threshold_R = st_sen[DIST_SEN_R_SIDE].s_limit;		// 通常通り
 8012cb0:	4b99      	ldr	r3, [pc, #612]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012cb2:	8c1b      	ldrh	r3, [r3, #32]
 8012cb4:	b21b      	sxth	r3, r3
 8012cb6:	81bb      	strh	r3, [r7, #12]
	/* ---------- */
	/*  左壁制御  */
	/* ---------- */
	/* 壁の切れ目対策 */
	// 急激にセンサの値が変化した場合は、壁の有無の基準値を閾値に変更する
	s_temp = st_sen[DIST_SEN_L_SIDE].s_now - st_sen[DIST_SEN_L_SIDE].s_old;
 8012cb8:	4b97      	ldr	r3, [pc, #604]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012cba:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012cbc:	4b96      	ldr	r3, [pc, #600]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012cbe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012cc0:	1ad3      	subs	r3, r2, r3
 8012cc2:	b29b      	uxth	r3, r3
 8012cc4:	81fb      	strh	r3, [r7, #14]
	if( ( s_temp < -1 * DIST_NO_WALL_DIV_FILTER ) || ( DIST_NO_WALL_DIV_FILTER < s_temp )
 8012cc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012cca:	f113 0f19 	cmn.w	r3, #25
 8012cce:	db03      	blt.n	8012cd8 <DIST_getErr+0x68>
 8012cd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012cd4:	2b19      	cmp	r3, #25
 8012cd6:	dd06      	ble.n	8012ce6 <DIST_getErr+0x76>
	){
		s_threshold_L = st_sen[DIST_SEN_L_SIDE].s_ref + DIST_REF_UP;		// 基準値＋αを壁の存在する閾値にする
 8012cd8:	4b8f      	ldr	r3, [pc, #572]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012cda:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8012cdc:	3323      	adds	r3, #35	@ 0x23
 8012cde:	b29b      	uxth	r3, r3
 8012ce0:	b21b      	sxth	r3, r3
 8012ce2:	817b      	strh	r3, [r7, #10]
 8012ce4:	e003      	b.n	8012cee <DIST_getErr+0x7e>
	}
	else{
		s_threshold_L = st_sen[DIST_SEN_L_SIDE].s_limit;		// 通常通り
 8012ce6:	4b8c      	ldr	r3, [pc, #560]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012ce8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8012cea:	b21b      	sxth	r3, r3
 8012cec:	817b      	strh	r3, [r7, #10]
	}

	/* ------------ */
	/*  制御値算出  */
	/* ------------ */
	*p_err = 0;		// クリア
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	601a      	str	r2, [r3, #0]

	/* 前壁がものすごく近い時 */
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_noCtrl ) &&
 8012cf4:	4b88      	ldr	r3, [pc, #544]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012cf6:	881a      	ldrh	r2, [r3, #0]
 8012cf8:	4b87      	ldr	r3, [pc, #540]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012cfa:	899b      	ldrh	r3, [r3, #12]
 8012cfc:	429a      	cmp	r2, r3
 8012cfe:	d909      	bls.n	8012d14 <DIST_getErr+0xa4>
		( st_sen[DIST_SEN_L_FRONT].s_now > st_sen[DIST_SEN_L_FRONT].s_noCtrl )
 8012d00:	4b85      	ldr	r3, [pc, #532]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d02:	89da      	ldrh	r2, [r3, #14]
 8012d04:	4b84      	ldr	r3, [pc, #528]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d06:	8b5b      	ldrh	r3, [r3, #26]
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_noCtrl ) &&
 8012d08:	429a      	cmp	r2, r3
 8012d0a:	d903      	bls.n	8012d14 <DIST_getErr+0xa4>
	){
//		printf("[Val]%6d 前壁がものすごい近い 	\n\r", *p_err);
		*p_err = 0;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	2200      	movs	r2, #0
 8012d10:	601a      	str	r2, [r3, #0]
 8012d12:	e05a      	b.n	8012dca <DIST_getErr+0x15a>
	}
	/* 前壁 */
	else if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_ctrl ) &&
 8012d14:	4b80      	ldr	r3, [pc, #512]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d16:	881a      	ldrh	r2, [r3, #0]
 8012d18:	4b7f      	ldr	r3, [pc, #508]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d1a:	895b      	ldrh	r3, [r3, #10]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d915      	bls.n	8012d4c <DIST_getErr+0xdc>
		( st_sen[DIST_SEN_L_FRONT].s_now > st_sen[DIST_SEN_L_FRONT].s_ctrl )
 8012d20:	4b7d      	ldr	r3, [pc, #500]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d22:	89da      	ldrh	r2, [r3, #14]
 8012d24:	4b7c      	ldr	r3, [pc, #496]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d26:	8b1b      	ldrh	r3, [r3, #24]
	else if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_ctrl ) &&
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d90f      	bls.n	8012d4c <DIST_getErr+0xdc>
	){
		*p_err = ( st_sen[DIST_SEN_L_FRONT].s_now - st_sen[DIST_SEN_L_FRONT].s_ref ) -
 8012d2c:	4b7a      	ldr	r3, [pc, #488]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d2e:	89db      	ldrh	r3, [r3, #14]
 8012d30:	461a      	mov	r2, r3
 8012d32:	4b79      	ldr	r3, [pc, #484]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d34:	8a9b      	ldrh	r3, [r3, #20]
 8012d36:	1ad2      	subs	r2, r2, r3
				 ( st_sen[DIST_SEN_R_FRONT].s_now - st_sen[DIST_SEN_R_FRONT].s_ref );
 8012d38:	4b77      	ldr	r3, [pc, #476]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d3a:	881b      	ldrh	r3, [r3, #0]
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	4b76      	ldr	r3, [pc, #472]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d40:	88db      	ldrh	r3, [r3, #6]
 8012d42:	1acb      	subs	r3, r1, r3
		*p_err = ( st_sen[DIST_SEN_L_FRONT].s_now - st_sen[DIST_SEN_L_FRONT].s_ref ) -
 8012d44:	1ad2      	subs	r2, r2, r3
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	601a      	str	r2, [r3, #0]
 8012d4a:	e03e      	b.n	8012dca <DIST_getErr+0x15a>
//		printf("[Val]%6d 前壁制御 	\n\r", *p_err);
	}
	/* 右壁と左壁あり */
	else if( ( s_threshold_R < st_sen[DIST_SEN_R_SIDE].s_now ) && ( s_threshold_L < st_sen[DIST_SEN_L_SIDE].s_now )
 8012d4c:	89bb      	ldrh	r3, [r7, #12]
 8012d4e:	b21b      	sxth	r3, r3
 8012d50:	461a      	mov	r2, r3
 8012d52:	4b71      	ldr	r3, [pc, #452]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d54:	8b9b      	ldrh	r3, [r3, #28]
 8012d56:	429a      	cmp	r2, r3
 8012d58:	da16      	bge.n	8012d88 <DIST_getErr+0x118>
 8012d5a:	897b      	ldrh	r3, [r7, #10]
 8012d5c:	b21b      	sxth	r3, r3
 8012d5e:	461a      	mov	r2, r3
 8012d60:	4b6d      	ldr	r3, [pc, #436]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012d64:	429a      	cmp	r2, r3
 8012d66:	da0f      	bge.n	8012d88 <DIST_getErr+0x118>
	){
		*p_err = ( st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_ref ) +
 8012d68:	4b6b      	ldr	r3, [pc, #428]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d6a:	8b9b      	ldrh	r3, [r3, #28]
 8012d6c:	461a      	mov	r2, r3
 8012d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d70:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012d72:	1ad2      	subs	r2, r2, r3
				 ( st_sen[DIST_SEN_L_SIDE].s_ref - st_sen[DIST_SEN_L_SIDE].s_now );
 8012d74:	4b68      	ldr	r3, [pc, #416]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d76:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8012d78:	4619      	mov	r1, r3
 8012d7a:	4b67      	ldr	r3, [pc, #412]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012d7e:	1acb      	subs	r3, r1, r3
		*p_err = ( st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_ref ) +
 8012d80:	441a      	add	r2, r3
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	601a      	str	r2, [r3, #0]
 8012d86:	e020      	b.n	8012dca <DIST_getErr+0x15a>
//		printf("[Val]%6d 両壁制御 	\n\r", *p_err);
	}
	/* 右壁あり */
	else if( s_threshold_R < st_sen[DIST_SEN_R_SIDE].s_now ){
 8012d88:	89bb      	ldrh	r3, [r7, #12]
 8012d8a:	b21b      	sxth	r3, r3
 8012d8c:	461a      	mov	r2, r3
 8012d8e:	4b62      	ldr	r3, [pc, #392]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d90:	8b9b      	ldrh	r3, [r3, #28]
 8012d92:	429a      	cmp	r2, r3
 8012d94:	da09      	bge.n	8012daa <DIST_getErr+0x13a>
		*p_err = ( st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_ref ) * 2;
 8012d96:	4b60      	ldr	r3, [pc, #384]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d98:	8b9b      	ldrh	r3, [r3, #28]
 8012d9a:	461a      	mov	r2, r3
 8012d9c:	4b5e      	ldr	r3, [pc, #376]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012d9e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012da0:	1ad3      	subs	r3, r2, r3
 8012da2:	005a      	lsls	r2, r3, #1
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	601a      	str	r2, [r3, #0]
 8012da8:	e00f      	b.n	8012dca <DIST_getErr+0x15a>
//		printf("[Val]%6d 右壁制御 	\n\r", *p_err);
	}
	/* 左壁あり */
	else if( s_threshold_L < st_sen[DIST_SEN_L_SIDE].s_now ){
 8012daa:	897b      	ldrh	r3, [r7, #10]
 8012dac:	b21b      	sxth	r3, r3
 8012dae:	461a      	mov	r2, r3
 8012db0:	4b59      	ldr	r3, [pc, #356]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012db4:	429a      	cmp	r2, r3
 8012db6:	da08      	bge.n	8012dca <DIST_getErr+0x15a>
		*p_err = ( st_sen[DIST_SEN_L_SIDE].s_ref - st_sen[DIST_SEN_L_SIDE].s_now ) * 2;
 8012db8:	4b57      	ldr	r3, [pc, #348]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012dba:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8012dbc:	461a      	mov	r2, r3
 8012dbe:	4b56      	ldr	r3, [pc, #344]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012dc2:	1ad3      	subs	r3, r2, r3
 8012dc4:	005a      	lsls	r2, r3, #1
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	601a      	str	r2, [r3, #0]
//		printf("[Val]%6d 左壁制御 	\n\r", *p_err);
	}

	if((st_sen[DIST_SEN_L_FRONT].s_now >st_sen[DIST_SEN_L_FRONT].s_limit/0.7)&&
 8012dca:	4b53      	ldr	r3, [pc, #332]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012dcc:	89db      	ldrh	r3, [r3, #14]
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7ed fbd0 	bl	8000574 <__aeabi_i2d>
 8012dd4:	4604      	mov	r4, r0
 8012dd6:	460d      	mov	r5, r1
 8012dd8:	4b4f      	ldr	r3, [pc, #316]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012dda:	8a5b      	ldrh	r3, [r3, #18]
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f7ed fbc9 	bl	8000574 <__aeabi_i2d>
 8012de2:	a34b      	add	r3, pc, #300	@ (adr r3, 8012f10 <DIST_getErr+0x2a0>)
 8012de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de8:	f7ed fd58 	bl	800089c <__aeabi_ddiv>
 8012dec:	4602      	mov	r2, r0
 8012dee:	460b      	mov	r3, r1
 8012df0:	4620      	mov	r0, r4
 8012df2:	4629      	mov	r1, r5
 8012df4:	f7ed feb8 	bl	8000b68 <__aeabi_dcmpgt>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d051      	beq.n	8012ea2 <DIST_getErr+0x232>
		(st_sen[DIST_SEN_R_FRONT].s_now <st_sen[DIST_SEN_R_FRONT].s_limit/0.7)){
 8012dfe:	4b46      	ldr	r3, [pc, #280]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012e00:	881b      	ldrh	r3, [r3, #0]
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7ed fbb6 	bl	8000574 <__aeabi_i2d>
 8012e08:	4604      	mov	r4, r0
 8012e0a:	460d      	mov	r5, r1
 8012e0c:	4b42      	ldr	r3, [pc, #264]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012e0e:	889b      	ldrh	r3, [r3, #4]
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7ed fbaf 	bl	8000574 <__aeabi_i2d>
 8012e16:	a33e      	add	r3, pc, #248	@ (adr r3, 8012f10 <DIST_getErr+0x2a0>)
 8012e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e1c:	f7ed fd3e 	bl	800089c <__aeabi_ddiv>
 8012e20:	4602      	mov	r2, r0
 8012e22:	460b      	mov	r3, r1
	if((st_sen[DIST_SEN_L_FRONT].s_now >st_sen[DIST_SEN_L_FRONT].s_limit/0.7)&&
 8012e24:	4620      	mov	r0, r4
 8012e26:	4629      	mov	r1, r5
 8012e28:	f7ed fe80 	bl	8000b2c <__aeabi_dcmplt>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d037      	beq.n	8012ea2 <DIST_getErr+0x232>
			*p_err += 2*(st_sen[DIST_SEN_L_FRONT].s_limit/0.7-st_sen[DIST_SEN_L_FRONT].s_now);
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	4618      	mov	r0, r3
 8012e38:	f7ed fb9c 	bl	8000574 <__aeabi_i2d>
 8012e3c:	4604      	mov	r4, r0
 8012e3e:	460d      	mov	r5, r1
 8012e40:	4b35      	ldr	r3, [pc, #212]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012e42:	8a5b      	ldrh	r3, [r3, #18]
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7ed fb95 	bl	8000574 <__aeabi_i2d>
 8012e4a:	a331      	add	r3, pc, #196	@ (adr r3, 8012f10 <DIST_getErr+0x2a0>)
 8012e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e50:	f7ed fd24 	bl	800089c <__aeabi_ddiv>
 8012e54:	4602      	mov	r2, r0
 8012e56:	460b      	mov	r3, r1
 8012e58:	4690      	mov	r8, r2
 8012e5a:	4699      	mov	r9, r3
 8012e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012e5e:	89db      	ldrh	r3, [r3, #14]
 8012e60:	4618      	mov	r0, r3
 8012e62:	f7ed fb87 	bl	8000574 <__aeabi_i2d>
 8012e66:	4602      	mov	r2, r0
 8012e68:	460b      	mov	r3, r1
 8012e6a:	4640      	mov	r0, r8
 8012e6c:	4649      	mov	r1, r9
 8012e6e:	f7ed fa33 	bl	80002d8 <__aeabi_dsub>
 8012e72:	4602      	mov	r2, r0
 8012e74:	460b      	mov	r3, r1
 8012e76:	4610      	mov	r0, r2
 8012e78:	4619      	mov	r1, r3
 8012e7a:	4602      	mov	r2, r0
 8012e7c:	460b      	mov	r3, r1
 8012e7e:	f7ed fa2d 	bl	80002dc <__adddf3>
 8012e82:	4602      	mov	r2, r0
 8012e84:	460b      	mov	r3, r1
 8012e86:	4620      	mov	r0, r4
 8012e88:	4629      	mov	r1, r5
 8012e8a:	f7ed fa27 	bl	80002dc <__adddf3>
 8012e8e:	4602      	mov	r2, r0
 8012e90:	460b      	mov	r3, r1
 8012e92:	4610      	mov	r0, r2
 8012e94:	4619      	mov	r1, r3
 8012e96:	f7ed fe87 	bl	8000ba8 <__aeabi_d2iz>
 8012e9a:	4602      	mov	r2, r0
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	601a      	str	r2, [r3, #0]
	}else if((st_sen[DIST_SEN_R_FRONT].s_now >st_sen[DIST_SEN_R_FRONT].s_limit/0.7)&&
		(st_sen[DIST_SEN_L_FRONT].s_now <st_sen[DIST_SEN_L_FRONT].s_limit/0.7)){
			*p_err += 2*(st_sen[DIST_SEN_R_FRONT].s_now-st_sen[DIST_SEN_R_FRONT].s_limit/0.7);
	}

}
 8012ea0:	e071      	b.n	8012f86 <DIST_getErr+0x316>
	}else if((st_sen[DIST_SEN_R_FRONT].s_now >st_sen[DIST_SEN_R_FRONT].s_limit/0.7)&&
 8012ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012ea4:	881b      	ldrh	r3, [r3, #0]
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7ed fb64 	bl	8000574 <__aeabi_i2d>
 8012eac:	4604      	mov	r4, r0
 8012eae:	460d      	mov	r5, r1
 8012eb0:	4b19      	ldr	r3, [pc, #100]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012eb2:	889b      	ldrh	r3, [r3, #4]
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f7ed fb5d 	bl	8000574 <__aeabi_i2d>
 8012eba:	a315      	add	r3, pc, #84	@ (adr r3, 8012f10 <DIST_getErr+0x2a0>)
 8012ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec0:	f7ed fcec 	bl	800089c <__aeabi_ddiv>
 8012ec4:	4602      	mov	r2, r0
 8012ec6:	460b      	mov	r3, r1
 8012ec8:	4620      	mov	r0, r4
 8012eca:	4629      	mov	r1, r5
 8012ecc:	f7ed fe4c 	bl	8000b68 <__aeabi_dcmpgt>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d100      	bne.n	8012ed8 <DIST_getErr+0x268>
}
 8012ed6:	e056      	b.n	8012f86 <DIST_getErr+0x316>
		(st_sen[DIST_SEN_L_FRONT].s_now <st_sen[DIST_SEN_L_FRONT].s_limit/0.7)){
 8012ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012eda:	89db      	ldrh	r3, [r3, #14]
 8012edc:	4618      	mov	r0, r3
 8012ede:	f7ed fb49 	bl	8000574 <__aeabi_i2d>
 8012ee2:	4604      	mov	r4, r0
 8012ee4:	460d      	mov	r5, r1
 8012ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8012f18 <DIST_getErr+0x2a8>)
 8012ee8:	8a5b      	ldrh	r3, [r3, #18]
 8012eea:	4618      	mov	r0, r3
 8012eec:	f7ed fb42 	bl	8000574 <__aeabi_i2d>
 8012ef0:	a307      	add	r3, pc, #28	@ (adr r3, 8012f10 <DIST_getErr+0x2a0>)
 8012ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef6:	f7ed fcd1 	bl	800089c <__aeabi_ddiv>
 8012efa:	4602      	mov	r2, r0
 8012efc:	460b      	mov	r3, r1
	}else if((st_sen[DIST_SEN_R_FRONT].s_now >st_sen[DIST_SEN_R_FRONT].s_limit/0.7)&&
 8012efe:	4620      	mov	r0, r4
 8012f00:	4629      	mov	r1, r5
 8012f02:	f7ed fe13 	bl	8000b2c <__aeabi_dcmplt>
 8012f06:	4603      	mov	r3, r0
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d107      	bne.n	8012f1c <DIST_getErr+0x2ac>
}
 8012f0c:	e03b      	b.n	8012f86 <DIST_getErr+0x316>
 8012f0e:	bf00      	nop
 8012f10:	66666666 	.word	0x66666666
 8012f14:	3fe66666 	.word	0x3fe66666
 8012f18:	20017bf0 	.word	0x20017bf0
			*p_err += 2*(st_sen[DIST_SEN_R_FRONT].s_now-st_sen[DIST_SEN_R_FRONT].s_limit/0.7);
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7ed fb27 	bl	8000574 <__aeabi_i2d>
 8012f26:	4604      	mov	r4, r0
 8012f28:	460d      	mov	r5, r1
 8012f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8012f98 <DIST_getErr+0x328>)
 8012f2c:	881b      	ldrh	r3, [r3, #0]
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7ed fb20 	bl	8000574 <__aeabi_i2d>
 8012f34:	4680      	mov	r8, r0
 8012f36:	4689      	mov	r9, r1
 8012f38:	4b17      	ldr	r3, [pc, #92]	@ (8012f98 <DIST_getErr+0x328>)
 8012f3a:	889b      	ldrh	r3, [r3, #4]
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f7ed fb19 	bl	8000574 <__aeabi_i2d>
 8012f42:	a313      	add	r3, pc, #76	@ (adr r3, 8012f90 <DIST_getErr+0x320>)
 8012f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f48:	f7ed fca8 	bl	800089c <__aeabi_ddiv>
 8012f4c:	4602      	mov	r2, r0
 8012f4e:	460b      	mov	r3, r1
 8012f50:	4640      	mov	r0, r8
 8012f52:	4649      	mov	r1, r9
 8012f54:	f7ed f9c0 	bl	80002d8 <__aeabi_dsub>
 8012f58:	4602      	mov	r2, r0
 8012f5a:	460b      	mov	r3, r1
 8012f5c:	4610      	mov	r0, r2
 8012f5e:	4619      	mov	r1, r3
 8012f60:	4602      	mov	r2, r0
 8012f62:	460b      	mov	r3, r1
 8012f64:	f7ed f9ba 	bl	80002dc <__adddf3>
 8012f68:	4602      	mov	r2, r0
 8012f6a:	460b      	mov	r3, r1
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	4629      	mov	r1, r5
 8012f70:	f7ed f9b4 	bl	80002dc <__adddf3>
 8012f74:	4602      	mov	r2, r0
 8012f76:	460b      	mov	r3, r1
 8012f78:	4610      	mov	r0, r2
 8012f7a:	4619      	mov	r1, r3
 8012f7c:	f7ed fe14 	bl	8000ba8 <__aeabi_d2iz>
 8012f80:	4602      	mov	r2, r0
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	601a      	str	r2, [r3, #0]
}
 8012f86:	bf00      	nop
 8012f88:	3710      	adds	r7, #16
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8012f90:	66666666 	.word	0x66666666
 8012f94:	3fe66666 	.word	0x3fe66666
 8012f98:	20017bf0 	.word	0x20017bf0

08012f9c <DIST_getErrSkew>:

void DIST_getErrSkew( int32_t* p_err )
{
 8012f9c:	b480      	push	{r7}
 8012f9e:	b083      	sub	sp, #12
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
	*p_err =0;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	601a      	str	r2, [r3, #0]

	/* 進行方向に壁が存在する場合によける動作を行う */
	if( st_sen[DIST_SEN_R_FRONT].s_now > st_senF[DIST_SEN_R_FRONT].s_skewErr3 ){
 8012faa:	4b20      	ldr	r3, [pc, #128]	@ (801302c <DIST_getErrSkew+0x90>)
 8012fac:	881a      	ldrh	r2, [r3, #0]
 8012fae:	4b20      	ldr	r3, [pc, #128]	@ (8013030 <DIST_getErrSkew+0x94>)
 8012fb0:	88db      	ldrh	r3, [r3, #6]
 8012fb2:	429a      	cmp	r2, r3
 8012fb4:	d903      	bls.n	8012fbe <DIST_getErrSkew+0x22>
		*p_err = 0;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2200      	movs	r2, #0
 8012fba:	601a      	str	r2, [r3, #0]
//		printf("左前が近い  [NOW]%d > [ERR1]%d", st_sen[DIST_SEN_L_FRONT].s_now, st_senF[DIST_SEN_L_FRONT].s_skewErr1 );
	}
	else{
	}

}
 8012fbc:	e030      	b.n	8013020 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_L_FRONT].s_now > st_senF[DIST_SEN_L_FRONT].s_skewErr3 ){
 8012fbe:	4b1b      	ldr	r3, [pc, #108]	@ (801302c <DIST_getErrSkew+0x90>)
 8012fc0:	89da      	ldrh	r2, [r3, #14]
 8012fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8013030 <DIST_getErrSkew+0x94>)
 8012fc4:	89db      	ldrh	r3, [r3, #14]
 8012fc6:	429a      	cmp	r2, r3
 8012fc8:	d903      	bls.n	8012fd2 <DIST_getErrSkew+0x36>
		*p_err = 0;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2200      	movs	r2, #0
 8012fce:	601a      	str	r2, [r3, #0]
}
 8012fd0:	e026      	b.n	8013020 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_R_FRONT].s_now > st_senF[DIST_SEN_R_FRONT].s_skewErr2 ){
 8012fd2:	4b16      	ldr	r3, [pc, #88]	@ (801302c <DIST_getErrSkew+0x90>)
 8012fd4:	881a      	ldrh	r2, [r3, #0]
 8012fd6:	4b16      	ldr	r3, [pc, #88]	@ (8013030 <DIST_getErrSkew+0x94>)
 8012fd8:	889b      	ldrh	r3, [r3, #4]
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	d903      	bls.n	8012fe6 <DIST_getErrSkew+0x4a>
		*p_err = 0;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	601a      	str	r2, [r3, #0]
}
 8012fe4:	e01c      	b.n	8013020 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_L_FRONT].s_now > st_senF[DIST_SEN_L_FRONT].s_skewErr2 ){
 8012fe6:	4b11      	ldr	r3, [pc, #68]	@ (801302c <DIST_getErrSkew+0x90>)
 8012fe8:	89da      	ldrh	r2, [r3, #14]
 8012fea:	4b11      	ldr	r3, [pc, #68]	@ (8013030 <DIST_getErrSkew+0x94>)
 8012fec:	899b      	ldrh	r3, [r3, #12]
 8012fee:	429a      	cmp	r2, r3
 8012ff0:	d903      	bls.n	8012ffa <DIST_getErrSkew+0x5e>
		*p_err = 0;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	601a      	str	r2, [r3, #0]
}
 8012ff8:	e012      	b.n	8013020 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_R_FRONT].s_now > st_senF[DIST_SEN_R_FRONT].s_skewErr1 ){
 8012ffa:	4b0c      	ldr	r3, [pc, #48]	@ (801302c <DIST_getErrSkew+0x90>)
 8012ffc:	881a      	ldrh	r2, [r3, #0]
 8012ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8013030 <DIST_getErrSkew+0x94>)
 8013000:	885b      	ldrh	r3, [r3, #2]
 8013002:	429a      	cmp	r2, r3
 8013004:	d903      	bls.n	801300e <DIST_getErrSkew+0x72>
		*p_err = 0;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	2200      	movs	r2, #0
 801300a:	601a      	str	r2, [r3, #0]
}
 801300c:	e008      	b.n	8013020 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_L_FRONT].s_now > st_senF[DIST_SEN_L_FRONT].s_skewErr1 ){
 801300e:	4b07      	ldr	r3, [pc, #28]	@ (801302c <DIST_getErrSkew+0x90>)
 8013010:	89da      	ldrh	r2, [r3, #14]
 8013012:	4b07      	ldr	r3, [pc, #28]	@ (8013030 <DIST_getErrSkew+0x94>)
 8013014:	895b      	ldrh	r3, [r3, #10]
 8013016:	429a      	cmp	r2, r3
 8013018:	d902      	bls.n	8013020 <DIST_getErrSkew+0x84>
		*p_err = 0;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	2200      	movs	r2, #0
 801301e:	601a      	str	r2, [r3, #0]
}
 8013020:	bf00      	nop
 8013022:	370c      	adds	r7, #12
 8013024:	46bd      	mov	sp, r7
 8013026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302a:	4770      	bx	lr
 801302c:	20017bf0 	.word	0x20017bf0
 8013030:	20017c28 	.word	0x20017c28

08013034 <DIST_Pol_FL>:

void DIST_Pol_FL( void )
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b082      	sub	sp, #8
 8013038:	af00      	add	r7, sp, #0
	st_sen[DIST_SEN_L_FRONT].s_offset = GetSensor_FL();
 801303a:	f7ee fb87 	bl	800174c <GetSensor_FL>
 801303e:	4603      	mov	r3, r0
 8013040:	461a      	mov	r2, r3
 8013042:	4b17      	ldr	r3, [pc, #92]	@ (80130a0 <DIST_Pol_FL+0x6c>)
 8013044:	82da      	strh	r2, [r3, #22]

	Set_SenFL(1);
 8013046:	2001      	movs	r0, #1
 8013048:	f7ee ffd6 	bl	8001ff8 <Set_SenFL>

	for(uint16_t i=0;i<1000;i++);
 801304c:	2300      	movs	r3, #0
 801304e:	80fb      	strh	r3, [r7, #6]
 8013050:	e002      	b.n	8013058 <DIST_Pol_FL+0x24>
 8013052:	88fb      	ldrh	r3, [r7, #6]
 8013054:	3301      	adds	r3, #1
 8013056:	80fb      	strh	r3, [r7, #6]
 8013058:	88fb      	ldrh	r3, [r7, #6]
 801305a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801305e:	d3f8      	bcc.n	8013052 <DIST_Pol_FL+0x1e>

	st_sen[DIST_SEN_L_FRONT].s_old = st_sen[DIST_SEN_L_FRONT].s_now;
 8013060:	4b0f      	ldr	r3, [pc, #60]	@ (80130a0 <DIST_Pol_FL+0x6c>)
 8013062:	89da      	ldrh	r2, [r3, #14]
 8013064:	4b0e      	ldr	r3, [pc, #56]	@ (80130a0 <DIST_Pol_FL+0x6c>)
 8013066:	821a      	strh	r2, [r3, #16]
	st_sen[DIST_SEN_L_FRONT].s_now = GetSensor_FL()- st_sen[DIST_SEN_L_FRONT].s_offset;
 8013068:	f7ee fb70 	bl	800174c <GetSensor_FL>
 801306c:	4603      	mov	r3, r0
 801306e:	461a      	mov	r2, r3
 8013070:	4b0b      	ldr	r3, [pc, #44]	@ (80130a0 <DIST_Pol_FL+0x6c>)
 8013072:	8adb      	ldrh	r3, [r3, #22]
 8013074:	1ad3      	subs	r3, r2, r3
 8013076:	b29a      	uxth	r2, r3
 8013078:	4b09      	ldr	r3, [pc, #36]	@ (80130a0 <DIST_Pol_FL+0x6c>)
 801307a:	81da      	strh	r2, [r3, #14]
	if(st_sen[DIST_SEN_L_FRONT].s_now>(65535/2))st_sen[DIST_SEN_L_FRONT].s_now =0;
 801307c:	4b08      	ldr	r3, [pc, #32]	@ (80130a0 <DIST_Pol_FL+0x6c>)
 801307e:	89db      	ldrh	r3, [r3, #14]
 8013080:	b21b      	sxth	r3, r3
 8013082:	2b00      	cmp	r3, #0
 8013084:	da02      	bge.n	801308c <DIST_Pol_FL+0x58>
 8013086:	4b06      	ldr	r3, [pc, #24]	@ (80130a0 <DIST_Pol_FL+0x6c>)
 8013088:	2200      	movs	r2, #0
 801308a:	81da      	strh	r2, [r3, #14]
	ADC3_clearEOS();
 801308c:	f7ee fb76 	bl	800177c <ADC3_clearEOS>

	Set_SenFL(0);
 8013090:	2000      	movs	r0, #0
 8013092:	f7ee ffb1 	bl	8001ff8 <Set_SenFL>
}
 8013096:	bf00      	nop
 8013098:	3708      	adds	r7, #8
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}
 801309e:	bf00      	nop
 80130a0:	20017bf0 	.word	0x20017bf0

080130a4 <DIST_Pol_FR>:

void DIST_Pol_FR( void )
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b082      	sub	sp, #8
 80130a8:	af00      	add	r7, sp, #0

	st_sen[DIST_SEN_R_FRONT].s_offset = GetSensor_FR();
 80130aa:	f7ee fbb3 	bl	8001814 <GetSensor_FR>
 80130ae:	4603      	mov	r3, r0
 80130b0:	461a      	mov	r2, r3
 80130b2:	4b17      	ldr	r3, [pc, #92]	@ (8013110 <DIST_Pol_FR+0x6c>)
 80130b4:	811a      	strh	r2, [r3, #8]

	Set_SenFR(1);
 80130b6:	2001      	movs	r0, #1
 80130b8:	f7ee ffe7 	bl	800208a <Set_SenFR>

	for(uint16_t i=0;i<1000;i++);
 80130bc:	2300      	movs	r3, #0
 80130be:	80fb      	strh	r3, [r7, #6]
 80130c0:	e002      	b.n	80130c8 <DIST_Pol_FR+0x24>
 80130c2:	88fb      	ldrh	r3, [r7, #6]
 80130c4:	3301      	adds	r3, #1
 80130c6:	80fb      	strh	r3, [r7, #6]
 80130c8:	88fb      	ldrh	r3, [r7, #6]
 80130ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80130ce:	d3f8      	bcc.n	80130c2 <DIST_Pol_FR+0x1e>

	st_sen[DIST_SEN_R_FRONT].s_old = st_sen[DIST_SEN_R_FRONT].s_now;
 80130d0:	4b0f      	ldr	r3, [pc, #60]	@ (8013110 <DIST_Pol_FR+0x6c>)
 80130d2:	881a      	ldrh	r2, [r3, #0]
 80130d4:	4b0e      	ldr	r3, [pc, #56]	@ (8013110 <DIST_Pol_FR+0x6c>)
 80130d6:	805a      	strh	r2, [r3, #2]
	st_sen[DIST_SEN_R_FRONT].s_now = GetSensor_FR()- st_sen[DIST_SEN_R_FRONT].s_offset;
 80130d8:	f7ee fb9c 	bl	8001814 <GetSensor_FR>
 80130dc:	4603      	mov	r3, r0
 80130de:	461a      	mov	r2, r3
 80130e0:	4b0b      	ldr	r3, [pc, #44]	@ (8013110 <DIST_Pol_FR+0x6c>)
 80130e2:	891b      	ldrh	r3, [r3, #8]
 80130e4:	1ad3      	subs	r3, r2, r3
 80130e6:	b29a      	uxth	r2, r3
 80130e8:	4b09      	ldr	r3, [pc, #36]	@ (8013110 <DIST_Pol_FR+0x6c>)
 80130ea:	801a      	strh	r2, [r3, #0]
	if(st_sen[DIST_SEN_R_FRONT].s_now>(65535/2))st_sen[DIST_SEN_R_FRONT].s_now =0;
 80130ec:	4b08      	ldr	r3, [pc, #32]	@ (8013110 <DIST_Pol_FR+0x6c>)
 80130ee:	881b      	ldrh	r3, [r3, #0]
 80130f0:	b21b      	sxth	r3, r3
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	da02      	bge.n	80130fc <DIST_Pol_FR+0x58>
 80130f6:	4b06      	ldr	r3, [pc, #24]	@ (8013110 <DIST_Pol_FR+0x6c>)
 80130f8:	2200      	movs	r2, #0
 80130fa:	801a      	strh	r2, [r3, #0]
	ADC2_clearEOS();
 80130fc:	f7ee fb48 	bl	8001790 <ADC2_clearEOS>

	Set_SenFR(0);
 8013100:	2000      	movs	r0, #0
 8013102:	f7ee ffc2 	bl	800208a <Set_SenFR>

}
 8013106:	bf00      	nop
 8013108:	3708      	adds	r7, #8
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}
 801310e:	bf00      	nop
 8013110:	20017bf0 	.word	0x20017bf0

08013114 <DIST_Pol_SL>:


void DIST_Pol_SL( void )
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b082      	sub	sp, #8
 8013118:	af00      	add	r7, sp, #0

	st_sen[DIST_SEN_L_SIDE].s_offset = GetSensor_SL();
 801311a:	f7ee fb4b 	bl	80017b4 <GetSensor_SL>
 801311e:	4603      	mov	r3, r0
 8013120:	461a      	mov	r2, r3
 8013122:	4b17      	ldr	r3, [pc, #92]	@ (8013180 <DIST_Pol_SL+0x6c>)
 8013124:	865a      	strh	r2, [r3, #50]	@ 0x32

	Set_SenSL(1);
 8013126:	2001      	movs	r0, #1
 8013128:	f7ee ff80 	bl	800202c <Set_SenSL>

	for(uint16_t i=0;i<1000;i++);
 801312c:	2300      	movs	r3, #0
 801312e:	80fb      	strh	r3, [r7, #6]
 8013130:	e002      	b.n	8013138 <DIST_Pol_SL+0x24>
 8013132:	88fb      	ldrh	r3, [r7, #6]
 8013134:	3301      	adds	r3, #1
 8013136:	80fb      	strh	r3, [r7, #6]
 8013138:	88fb      	ldrh	r3, [r7, #6]
 801313a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801313e:	d3f8      	bcc.n	8013132 <DIST_Pol_SL+0x1e>

	st_sen[DIST_SEN_L_SIDE].s_old = st_sen[DIST_SEN_L_SIDE].s_now;
 8013140:	4b0f      	ldr	r3, [pc, #60]	@ (8013180 <DIST_Pol_SL+0x6c>)
 8013142:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013144:	4b0e      	ldr	r3, [pc, #56]	@ (8013180 <DIST_Pol_SL+0x6c>)
 8013146:	859a      	strh	r2, [r3, #44]	@ 0x2c
	st_sen[DIST_SEN_L_SIDE].s_now = GetSensor_SL()- st_sen[DIST_SEN_L_SIDE].s_offset;
 8013148:	f7ee fb34 	bl	80017b4 <GetSensor_SL>
 801314c:	4603      	mov	r3, r0
 801314e:	461a      	mov	r2, r3
 8013150:	4b0b      	ldr	r3, [pc, #44]	@ (8013180 <DIST_Pol_SL+0x6c>)
 8013152:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013154:	1ad3      	subs	r3, r2, r3
 8013156:	b29a      	uxth	r2, r3
 8013158:	4b09      	ldr	r3, [pc, #36]	@ (8013180 <DIST_Pol_SL+0x6c>)
 801315a:	855a      	strh	r2, [r3, #42]	@ 0x2a
	if(st_sen[DIST_SEN_L_SIDE].s_now>(65535/2))st_sen[DIST_SEN_L_SIDE].s_now =0;
 801315c:	4b08      	ldr	r3, [pc, #32]	@ (8013180 <DIST_Pol_SL+0x6c>)
 801315e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013160:	b21b      	sxth	r3, r3
 8013162:	2b00      	cmp	r3, #0
 8013164:	da02      	bge.n	801316c <DIST_Pol_SL+0x58>
 8013166:	4b06      	ldr	r3, [pc, #24]	@ (8013180 <DIST_Pol_SL+0x6c>)
 8013168:	2200      	movs	r2, #0
 801316a:	855a      	strh	r2, [r3, #42]	@ 0x2a
	ADC1_clearEOS();
 801316c:	f7ee fb1a 	bl	80017a4 <ADC1_clearEOS>

	Set_SenSL(0);
 8013170:	2000      	movs	r0, #0
 8013172:	f7ee ff5b 	bl	800202c <Set_SenSL>

}
 8013176:	bf00      	nop
 8013178:	3708      	adds	r7, #8
 801317a:	46bd      	mov	sp, r7
 801317c:	bd80      	pop	{r7, pc}
 801317e:	bf00      	nop
 8013180:	20017bf0 	.word	0x20017bf0

08013184 <DIST_Pol_SR>:

void DIST_Pol_SR( void )
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b082      	sub	sp, #8
 8013188:	af00      	add	r7, sp, #0

	st_sen[DIST_SEN_R_SIDE].s_offset = GetSensor_SR();
 801318a:	f7ee fb2b 	bl	80017e4 <GetSensor_SR>
 801318e:	4603      	mov	r3, r0
 8013190:	461a      	mov	r2, r3
 8013192:	4b16      	ldr	r3, [pc, #88]	@ (80131ec <DIST_Pol_SR+0x68>)
 8013194:	849a      	strh	r2, [r3, #36]	@ 0x24

	Set_SenSR(1);
 8013196:	2001      	movs	r0, #1
 8013198:	f7ee ff60 	bl	800205c <Set_SenSR>

	for(uint16_t i=0;i<1000;i++);
 801319c:	2300      	movs	r3, #0
 801319e:	80fb      	strh	r3, [r7, #6]
 80131a0:	e002      	b.n	80131a8 <DIST_Pol_SR+0x24>
 80131a2:	88fb      	ldrh	r3, [r7, #6]
 80131a4:	3301      	adds	r3, #1
 80131a6:	80fb      	strh	r3, [r7, #6]
 80131a8:	88fb      	ldrh	r3, [r7, #6]
 80131aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80131ae:	d3f8      	bcc.n	80131a2 <DIST_Pol_SR+0x1e>

	st_sen[DIST_SEN_R_SIDE].s_old = st_sen[DIST_SEN_R_SIDE].s_now;
 80131b0:	4b0e      	ldr	r3, [pc, #56]	@ (80131ec <DIST_Pol_SR+0x68>)
 80131b2:	8b9a      	ldrh	r2, [r3, #28]
 80131b4:	4b0d      	ldr	r3, [pc, #52]	@ (80131ec <DIST_Pol_SR+0x68>)
 80131b6:	83da      	strh	r2, [r3, #30]
	st_sen[DIST_SEN_R_SIDE].s_now = GetSensor_SR()- st_sen[DIST_SEN_R_SIDE].s_offset;
 80131b8:	f7ee fb14 	bl	80017e4 <GetSensor_SR>
 80131bc:	4603      	mov	r3, r0
 80131be:	461a      	mov	r2, r3
 80131c0:	4b0a      	ldr	r3, [pc, #40]	@ (80131ec <DIST_Pol_SR+0x68>)
 80131c2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80131c4:	1ad3      	subs	r3, r2, r3
 80131c6:	b29a      	uxth	r2, r3
 80131c8:	4b08      	ldr	r3, [pc, #32]	@ (80131ec <DIST_Pol_SR+0x68>)
 80131ca:	839a      	strh	r2, [r3, #28]
	if(st_sen[DIST_SEN_R_SIDE].s_now>(65535/2))st_sen[DIST_SEN_R_SIDE].s_now =0;
 80131cc:	4b07      	ldr	r3, [pc, #28]	@ (80131ec <DIST_Pol_SR+0x68>)
 80131ce:	8b9b      	ldrh	r3, [r3, #28]
 80131d0:	b21b      	sxth	r3, r3
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	da02      	bge.n	80131dc <DIST_Pol_SR+0x58>
 80131d6:	4b05      	ldr	r3, [pc, #20]	@ (80131ec <DIST_Pol_SR+0x68>)
 80131d8:	2200      	movs	r2, #0
 80131da:	839a      	strh	r2, [r3, #28]

	Set_SenSR(0);
 80131dc:	2000      	movs	r0, #0
 80131de:	f7ee ff3d 	bl	800205c <Set_SenSR>

}
 80131e2:	bf00      	nop
 80131e4:	3708      	adds	r7, #8
 80131e6:	46bd      	mov	sp, r7
 80131e8:	bd80      	pop	{r7, pc}
 80131ea:	bf00      	nop
 80131ec:	20017bf0 	.word	0x20017bf0

080131f0 <Get_Sen_Nowdata>:

void Get_Sen_Nowdata(void){
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b082      	sub	sp, #8
 80131f4:	af02      	add	r7, sp, #8
	printf("FL %4d SL %4d SR %4d FR %4d\r",
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 80131f6:	4b09      	ldr	r3, [pc, #36]	@ (801321c <Get_Sen_Nowdata+0x2c>)
 80131f8:	89db      	ldrh	r3, [r3, #14]
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 80131fa:	4619      	mov	r1, r3
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 80131fc:	4b07      	ldr	r3, [pc, #28]	@ (801321c <Get_Sen_Nowdata+0x2c>)
 80131fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 8013200:	461a      	mov	r2, r3
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 8013202:	4b06      	ldr	r3, [pc, #24]	@ (801321c <Get_Sen_Nowdata+0x2c>)
 8013204:	8b9b      	ldrh	r3, [r3, #28]
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 8013206:	4618      	mov	r0, r3
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 8013208:	4b04      	ldr	r3, [pc, #16]	@ (801321c <Get_Sen_Nowdata+0x2c>)
 801320a:	881b      	ldrh	r3, [r3, #0]
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 801320c:	9300      	str	r3, [sp, #0]
 801320e:	4603      	mov	r3, r0
 8013210:	4803      	ldr	r0, [pc, #12]	@ (8013220 <Get_Sen_Nowdata+0x30>)
 8013212:	f00a fd8b 	bl	801dd2c <iprintf>
}
 8013216:	bf00      	nop
 8013218:	46bd      	mov	sp, r7
 801321a:	bd80      	pop	{r7, pc}
 801321c:	20017bf0 	.word	0x20017bf0
 8013220:	08021d6c 	.word	0x08021d6c

08013224 <DIST_isWall_FRONT>:

bool DIST_isWall_FRONT( void )
{
 8013224:	b480      	push	{r7}
 8013226:	b083      	sub	sp, #12
 8013228:	af00      	add	r7, sp, #0
	bool bl_res 		= false;
 801322a:	2300      	movs	r3, #0
 801322c:	71fb      	strb	r3, [r7, #7]
//	printf("DIST_SEN_R_FRONT %5d \r\n",st_sen[DIST_SEN_R_FRONT].s_limit);
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_limit ) ||
 801322e:	4b0a      	ldr	r3, [pc, #40]	@ (8013258 <DIST_isWall_FRONT+0x34>)
 8013230:	881a      	ldrh	r2, [r3, #0]
 8013232:	4b09      	ldr	r3, [pc, #36]	@ (8013258 <DIST_isWall_FRONT+0x34>)
 8013234:	889b      	ldrh	r3, [r3, #4]
 8013236:	429a      	cmp	r2, r3
 8013238:	d805      	bhi.n	8013246 <DIST_isWall_FRONT+0x22>
		( st_sen[DIST_SEN_L_FRONT].s_now > st_sen[DIST_SEN_L_FRONT].s_limit )
 801323a:	4b07      	ldr	r3, [pc, #28]	@ (8013258 <DIST_isWall_FRONT+0x34>)
 801323c:	89da      	ldrh	r2, [r3, #14]
 801323e:	4b06      	ldr	r3, [pc, #24]	@ (8013258 <DIST_isWall_FRONT+0x34>)
 8013240:	8a5b      	ldrh	r3, [r3, #18]
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_limit ) ||
 8013242:	429a      	cmp	r2, r3
 8013244:	d901      	bls.n	801324a <DIST_isWall_FRONT+0x26>
	){
		bl_res = true;
 8013246:	2301      	movs	r3, #1
 8013248:	71fb      	strb	r3, [r7, #7]
	}

	return bl_res;
 801324a:	79fb      	ldrb	r3, [r7, #7]
}
 801324c:	4618      	mov	r0, r3
 801324e:	370c      	adds	r7, #12
 8013250:	46bd      	mov	sp, r7
 8013252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013256:	4770      	bx	lr
 8013258:	20017bf0 	.word	0x20017bf0

0801325c <DIST_isWall_R_SIDE>:

bool DIST_isWall_R_SIDE( void )
{
 801325c:	b480      	push	{r7}
 801325e:	b083      	sub	sp, #12
 8013260:	af00      	add	r7, sp, #0
	bool bl_res 		= false;
 8013262:	2300      	movs	r3, #0
 8013264:	71fb      	strb	r3, [r7, #7]

	if( st_sen[DIST_SEN_R_SIDE].s_now > st_sen[DIST_SEN_R_SIDE].s_limit ){
 8013266:	4b07      	ldr	r3, [pc, #28]	@ (8013284 <DIST_isWall_R_SIDE+0x28>)
 8013268:	8b9a      	ldrh	r2, [r3, #28]
 801326a:	4b06      	ldr	r3, [pc, #24]	@ (8013284 <DIST_isWall_R_SIDE+0x28>)
 801326c:	8c1b      	ldrh	r3, [r3, #32]
 801326e:	429a      	cmp	r2, r3
 8013270:	d901      	bls.n	8013276 <DIST_isWall_R_SIDE+0x1a>
		bl_res = true;
 8013272:	2301      	movs	r3, #1
 8013274:	71fb      	strb	r3, [r7, #7]
	}

	return bl_res;
 8013276:	79fb      	ldrb	r3, [r7, #7]
}
 8013278:	4618      	mov	r0, r3
 801327a:	370c      	adds	r7, #12
 801327c:	46bd      	mov	sp, r7
 801327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013282:	4770      	bx	lr
 8013284:	20017bf0 	.word	0x20017bf0

08013288 <DIST_isWall_L_SIDE>:

bool DIST_isWall_L_SIDE( void )
{
 8013288:	b480      	push	{r7}
 801328a:	b083      	sub	sp, #12
 801328c:	af00      	add	r7, sp, #0
	bool bl_res 		= false;
 801328e:	2300      	movs	r3, #0
 8013290:	71fb      	strb	r3, [r7, #7]

	if( st_sen[DIST_SEN_L_SIDE].s_now > st_sen[DIST_SEN_L_SIDE].s_limit ){
 8013292:	4b07      	ldr	r3, [pc, #28]	@ (80132b0 <DIST_isWall_L_SIDE+0x28>)
 8013294:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013296:	4b06      	ldr	r3, [pc, #24]	@ (80132b0 <DIST_isWall_L_SIDE+0x28>)
 8013298:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801329a:	429a      	cmp	r2, r3
 801329c:	d901      	bls.n	80132a2 <DIST_isWall_L_SIDE+0x1a>
		bl_res = true;
 801329e:	2301      	movs	r3, #1
 80132a0:	71fb      	strb	r3, [r7, #7]
	}

	return bl_res;
 80132a2:	79fb      	ldrb	r3, [r7, #7]
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	370c      	adds	r7, #12
 80132a8:	46bd      	mov	sp, r7
 80132aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ae:	4770      	bx	lr
 80132b0:	20017bf0 	.word	0x20017bf0

080132b4 <MAP_refPos>:
uint16_t us_LogIndex = 0;
uint16_t us_LogWallCut[30];
uint16_t us_LogIndexWallCut = 0;

void MAP_refPos( uint8_t uc_cmd )
{
 80132b4:	b480      	push	{r7}
 80132b6:	b085      	sub	sp, #20
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	4603      	mov	r3, r0
 80132bc:	71fb      	strb	r3, [r7, #7]
	uint8_t uc_index = 0;			// テーブルのインデックス番号
 80132be:	2300      	movs	r3, #0
 80132c0:	73fb      	strb	r3, [r7, #15]
	
	/* ------------------------------------------ */
	/*  コマンドからテーブルのインデックスを取得  */
	/* ------------------------------------------ */
	/* 直進 */
	if( ( uc_cmd <=  GO71 ) && ( uc_cmd >=  GO1) ){
 80132c2:	79fb      	ldrb	r3, [r7, #7]
 80132c4:	2b47      	cmp	r3, #71	@ 0x47
 80132c6:	d805      	bhi.n	80132d4 <MAP_refPos+0x20>
 80132c8:	79fb      	ldrb	r3, [r7, #7]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d002      	beq.n	80132d4 <MAP_refPos+0x20>
		
		uc_index = 14;		// st_PosDataテーブルの直進のインデックス番号
 80132ce:	230e      	movs	r3, #14
 80132d0:	73fb      	strb	r3, [r7, #15]
 80132d2:	e024      	b.n	801331e <MAP_refPos+0x6a>
	}
	/* 斜め直進 */
	else if( ( uc_cmd <=  NGO71 ) && ( uc_cmd >=  NGO1) ){
 80132d4:	79fb      	ldrb	r3, [r7, #7]
 80132d6:	2b98      	cmp	r3, #152	@ 0x98
 80132d8:	d900      	bls.n	80132dc <MAP_refPos+0x28>
 80132da:	e005      	b.n	80132e8 <MAP_refPos+0x34>
 80132dc:	79fb      	ldrb	r3, [r7, #7]
 80132de:	2b51      	cmp	r3, #81	@ 0x51
 80132e0:	d902      	bls.n	80132e8 <MAP_refPos+0x34>
		
		uc_index = 15;		// st_PosDataテーブルの斜め直進のインデックス番号
 80132e2:	230f      	movs	r3, #15
 80132e4:	73fb      	strb	r3, [r7, #15]
 80132e6:	e01a      	b.n	801331e <MAP_refPos+0x6a>
	}
	/* その他のコマンド */
	else{
		while(1){
			
			if( st_PosData[uc_index].en_cmd == uc_cmd )      break;			// コマンド発見
 80132e8:	7bfa      	ldrb	r2, [r7, #15]
 80132ea:	49c7      	ldr	r1, [pc, #796]	@ (8013608 <MAP_refPos+0x354>)
 80132ec:	4613      	mov	r3, r2
 80132ee:	009b      	lsls	r3, r3, #2
 80132f0:	4413      	add	r3, r2
 80132f2:	00db      	lsls	r3, r3, #3
 80132f4:	440b      	add	r3, r1
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	79fa      	ldrb	r2, [r7, #7]
 80132fa:	429a      	cmp	r2, r3
 80132fc:	d00e      	beq.n	801331c <MAP_refPos+0x68>
			if( st_PosData[uc_index].en_cmd == MAP_CMD_MAX ) return;		// コマンド未発見
 80132fe:	7bfa      	ldrb	r2, [r7, #15]
 8013300:	49c1      	ldr	r1, [pc, #772]	@ (8013608 <MAP_refPos+0x354>)
 8013302:	4613      	mov	r3, r2
 8013304:	009b      	lsls	r3, r3, #2
 8013306:	4413      	add	r3, r2
 8013308:	00db      	lsls	r3, r3, #3
 801330a:	440b      	add	r3, r1
 801330c:	781b      	ldrb	r3, [r3, #0]
 801330e:	2bfb      	cmp	r3, #251	@ 0xfb
 8013310:	f000 82ca 	beq.w	80138a8 <MAP_refPos+0x5f4>
			uc_index++;
 8013314:	7bfb      	ldrb	r3, [r7, #15]
 8013316:	3301      	adds	r3, #1
 8013318:	73fb      	strb	r3, [r7, #15]
			if( st_PosData[uc_index].en_cmd == uc_cmd )      break;			// コマンド発見
 801331a:	e7e5      	b.n	80132e8 <MAP_refPos+0x34>
 801331c:	bf00      	nop
		}
	}
	
		/* 位置更新 */
	switch( s_PosDir ){
 801331e:	4bbb      	ldr	r3, [pc, #748]	@ (801360c <MAP_refPos+0x358>)
 8013320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013324:	2b07      	cmp	r3, #7
 8013326:	f200 8267 	bhi.w	80137f8 <MAP_refPos+0x544>
 801332a:	a201      	add	r2, pc, #4	@ (adr r2, 8013330 <MAP_refPos+0x7c>)
 801332c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013330:	08013351 	.word	0x08013351
 8013334:	08013351 	.word	0x08013351
 8013338:	08013477 	.word	0x08013477
 801333c:	08013477 	.word	0x08013477
 8013340:	0801359d 	.word	0x0801359d
 8013344:	0801359d 	.word	0x0801359d
 8013348:	080136d3 	.word	0x080136d3
 801334c:	080136d3 	.word	0x080136d3
		/* [0]北 [1]北東 */
		case 0:
		case 1:
		
			/* 直進 */
			if( uc_index == 14 ){
 8013350:	7bfb      	ldrb	r3, [r7, #15]
 8013352:	2b0e      	cmp	r3, #14
 8013354:	d132      	bne.n	80133bc <MAP_refPos+0x108>
				
				f_PosX += st_PosData[uc_index].f_x0_x1 * uc_cmd;
 8013356:	7bfa      	ldrb	r2, [r7, #15]
 8013358:	49ab      	ldr	r1, [pc, #684]	@ (8013608 <MAP_refPos+0x354>)
 801335a:	4613      	mov	r3, r2
 801335c:	009b      	lsls	r3, r3, #2
 801335e:	4413      	add	r3, r2
 8013360:	00db      	lsls	r3, r3, #3
 8013362:	440b      	add	r3, r1
 8013364:	3304      	adds	r3, #4
 8013366:	ed93 7a00 	vldr	s14, [r3]
 801336a:	79fb      	ldrb	r3, [r7, #7]
 801336c:	ee07 3a90 	vmov	s15, r3
 8013370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013374:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013378:	4ba5      	ldr	r3, [pc, #660]	@ (8013610 <MAP_refPos+0x35c>)
 801337a:	edd3 7a00 	vldr	s15, [r3]
 801337e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013382:	4ba3      	ldr	r3, [pc, #652]	@ (8013610 <MAP_refPos+0x35c>)
 8013384:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y0_y1 * uc_cmd;
 8013388:	7bfa      	ldrb	r2, [r7, #15]
 801338a:	499f      	ldr	r1, [pc, #636]	@ (8013608 <MAP_refPos+0x354>)
 801338c:	4613      	mov	r3, r2
 801338e:	009b      	lsls	r3, r3, #2
 8013390:	4413      	add	r3, r2
 8013392:	00db      	lsls	r3, r3, #3
 8013394:	440b      	add	r3, r1
 8013396:	3308      	adds	r3, #8
 8013398:	ed93 7a00 	vldr	s14, [r3]
 801339c:	79fb      	ldrb	r3, [r7, #7]
 801339e:	ee07 3a90 	vmov	s15, r3
 80133a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80133aa:	4b9a      	ldr	r3, [pc, #616]	@ (8013614 <MAP_refPos+0x360>)
 80133ac:	edd3 7a00 	vldr	s15, [r3]
 80133b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80133b4:	4b97      	ldr	r3, [pc, #604]	@ (8013614 <MAP_refPos+0x360>)
 80133b6:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x0_x1;
				f_PosY += st_PosData[uc_index].f_y0_y1;
			}
			break;
 80133ba:	e21d      	b.n	80137f8 <MAP_refPos+0x544>
			else if( uc_index == 15 ){
 80133bc:	7bfb      	ldrb	r3, [r7, #15]
 80133be:	2b0f      	cmp	r3, #15
 80133c0:	d134      	bne.n	801342c <MAP_refPos+0x178>
				f_PosX += st_PosData[uc_index].f_x0_x1 * ( uc_cmd - 81 );
 80133c2:	7bfa      	ldrb	r2, [r7, #15]
 80133c4:	4990      	ldr	r1, [pc, #576]	@ (8013608 <MAP_refPos+0x354>)
 80133c6:	4613      	mov	r3, r2
 80133c8:	009b      	lsls	r3, r3, #2
 80133ca:	4413      	add	r3, r2
 80133cc:	00db      	lsls	r3, r3, #3
 80133ce:	440b      	add	r3, r1
 80133d0:	3304      	adds	r3, #4
 80133d2:	ed93 7a00 	vldr	s14, [r3]
 80133d6:	79fb      	ldrb	r3, [r7, #7]
 80133d8:	3b51      	subs	r3, #81	@ 0x51
 80133da:	ee07 3a90 	vmov	s15, r3
 80133de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80133e6:	4b8a      	ldr	r3, [pc, #552]	@ (8013610 <MAP_refPos+0x35c>)
 80133e8:	edd3 7a00 	vldr	s15, [r3]
 80133ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80133f0:	4b87      	ldr	r3, [pc, #540]	@ (8013610 <MAP_refPos+0x35c>)
 80133f2:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y0_y1 * ( uc_cmd - 81 );
 80133f6:	7bfa      	ldrb	r2, [r7, #15]
 80133f8:	4983      	ldr	r1, [pc, #524]	@ (8013608 <MAP_refPos+0x354>)
 80133fa:	4613      	mov	r3, r2
 80133fc:	009b      	lsls	r3, r3, #2
 80133fe:	4413      	add	r3, r2
 8013400:	00db      	lsls	r3, r3, #3
 8013402:	440b      	add	r3, r1
 8013404:	3308      	adds	r3, #8
 8013406:	ed93 7a00 	vldr	s14, [r3]
 801340a:	79fb      	ldrb	r3, [r7, #7]
 801340c:	3b51      	subs	r3, #81	@ 0x51
 801340e:	ee07 3a90 	vmov	s15, r3
 8013412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013416:	ee27 7a27 	vmul.f32	s14, s14, s15
 801341a:	4b7e      	ldr	r3, [pc, #504]	@ (8013614 <MAP_refPos+0x360>)
 801341c:	edd3 7a00 	vldr	s15, [r3]
 8013420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013424:	4b7b      	ldr	r3, [pc, #492]	@ (8013614 <MAP_refPos+0x360>)
 8013426:	edc3 7a00 	vstr	s15, [r3]
			break;
 801342a:	e1e5      	b.n	80137f8 <MAP_refPos+0x544>
				f_PosX += st_PosData[uc_index].f_x0_x1;
 801342c:	7bfa      	ldrb	r2, [r7, #15]
 801342e:	4976      	ldr	r1, [pc, #472]	@ (8013608 <MAP_refPos+0x354>)
 8013430:	4613      	mov	r3, r2
 8013432:	009b      	lsls	r3, r3, #2
 8013434:	4413      	add	r3, r2
 8013436:	00db      	lsls	r3, r3, #3
 8013438:	440b      	add	r3, r1
 801343a:	3304      	adds	r3, #4
 801343c:	ed93 7a00 	vldr	s14, [r3]
 8013440:	4b73      	ldr	r3, [pc, #460]	@ (8013610 <MAP_refPos+0x35c>)
 8013442:	edd3 7a00 	vldr	s15, [r3]
 8013446:	ee77 7a27 	vadd.f32	s15, s14, s15
 801344a:	4b71      	ldr	r3, [pc, #452]	@ (8013610 <MAP_refPos+0x35c>)
 801344c:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y0_y1;
 8013450:	7bfa      	ldrb	r2, [r7, #15]
 8013452:	496d      	ldr	r1, [pc, #436]	@ (8013608 <MAP_refPos+0x354>)
 8013454:	4613      	mov	r3, r2
 8013456:	009b      	lsls	r3, r3, #2
 8013458:	4413      	add	r3, r2
 801345a:	00db      	lsls	r3, r3, #3
 801345c:	440b      	add	r3, r1
 801345e:	3308      	adds	r3, #8
 8013460:	ed93 7a00 	vldr	s14, [r3]
 8013464:	4b6b      	ldr	r3, [pc, #428]	@ (8013614 <MAP_refPos+0x360>)
 8013466:	edd3 7a00 	vldr	s15, [r3]
 801346a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801346e:	4b69      	ldr	r3, [pc, #420]	@ (8013614 <MAP_refPos+0x360>)
 8013470:	edc3 7a00 	vstr	s15, [r3]
			break;
 8013474:	e1c0      	b.n	80137f8 <MAP_refPos+0x544>
		/* [2]東 [3]南東 */
		case 2:
		case 3:

			/* 直進 */
			if( uc_index == 14 ){
 8013476:	7bfb      	ldrb	r3, [r7, #15]
 8013478:	2b0e      	cmp	r3, #14
 801347a:	d132      	bne.n	80134e2 <MAP_refPos+0x22e>
				
				f_PosX += st_PosData[uc_index].f_x2_x3 * uc_cmd;
 801347c:	7bfa      	ldrb	r2, [r7, #15]
 801347e:	4962      	ldr	r1, [pc, #392]	@ (8013608 <MAP_refPos+0x354>)
 8013480:	4613      	mov	r3, r2
 8013482:	009b      	lsls	r3, r3, #2
 8013484:	4413      	add	r3, r2
 8013486:	00db      	lsls	r3, r3, #3
 8013488:	440b      	add	r3, r1
 801348a:	330c      	adds	r3, #12
 801348c:	ed93 7a00 	vldr	s14, [r3]
 8013490:	79fb      	ldrb	r3, [r7, #7]
 8013492:	ee07 3a90 	vmov	s15, r3
 8013496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801349a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801349e:	4b5c      	ldr	r3, [pc, #368]	@ (8013610 <MAP_refPos+0x35c>)
 80134a0:	edd3 7a00 	vldr	s15, [r3]
 80134a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134a8:	4b59      	ldr	r3, [pc, #356]	@ (8013610 <MAP_refPos+0x35c>)
 80134aa:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y2_y3 * uc_cmd;
 80134ae:	7bfa      	ldrb	r2, [r7, #15]
 80134b0:	4955      	ldr	r1, [pc, #340]	@ (8013608 <MAP_refPos+0x354>)
 80134b2:	4613      	mov	r3, r2
 80134b4:	009b      	lsls	r3, r3, #2
 80134b6:	4413      	add	r3, r2
 80134b8:	00db      	lsls	r3, r3, #3
 80134ba:	440b      	add	r3, r1
 80134bc:	3310      	adds	r3, #16
 80134be:	ed93 7a00 	vldr	s14, [r3]
 80134c2:	79fb      	ldrb	r3, [r7, #7]
 80134c4:	ee07 3a90 	vmov	s15, r3
 80134c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80134d0:	4b50      	ldr	r3, [pc, #320]	@ (8013614 <MAP_refPos+0x360>)
 80134d2:	edd3 7a00 	vldr	s15, [r3]
 80134d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134da:	4b4e      	ldr	r3, [pc, #312]	@ (8013614 <MAP_refPos+0x360>)
 80134dc:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x2_x3;
				f_PosY += st_PosData[uc_index].f_y2_y3;
			}
			break;
 80134e0:	e18a      	b.n	80137f8 <MAP_refPos+0x544>
			else if( uc_index == 15 ){
 80134e2:	7bfb      	ldrb	r3, [r7, #15]
 80134e4:	2b0f      	cmp	r3, #15
 80134e6:	d134      	bne.n	8013552 <MAP_refPos+0x29e>
				f_PosX += st_PosData[uc_index].f_x2_x3 * ( uc_cmd - 81 );
 80134e8:	7bfa      	ldrb	r2, [r7, #15]
 80134ea:	4947      	ldr	r1, [pc, #284]	@ (8013608 <MAP_refPos+0x354>)
 80134ec:	4613      	mov	r3, r2
 80134ee:	009b      	lsls	r3, r3, #2
 80134f0:	4413      	add	r3, r2
 80134f2:	00db      	lsls	r3, r3, #3
 80134f4:	440b      	add	r3, r1
 80134f6:	330c      	adds	r3, #12
 80134f8:	ed93 7a00 	vldr	s14, [r3]
 80134fc:	79fb      	ldrb	r3, [r7, #7]
 80134fe:	3b51      	subs	r3, #81	@ 0x51
 8013500:	ee07 3a90 	vmov	s15, r3
 8013504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013508:	ee27 7a27 	vmul.f32	s14, s14, s15
 801350c:	4b40      	ldr	r3, [pc, #256]	@ (8013610 <MAP_refPos+0x35c>)
 801350e:	edd3 7a00 	vldr	s15, [r3]
 8013512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013516:	4b3e      	ldr	r3, [pc, #248]	@ (8013610 <MAP_refPos+0x35c>)
 8013518:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y2_y3 * ( uc_cmd - 81 );
 801351c:	7bfa      	ldrb	r2, [r7, #15]
 801351e:	493a      	ldr	r1, [pc, #232]	@ (8013608 <MAP_refPos+0x354>)
 8013520:	4613      	mov	r3, r2
 8013522:	009b      	lsls	r3, r3, #2
 8013524:	4413      	add	r3, r2
 8013526:	00db      	lsls	r3, r3, #3
 8013528:	440b      	add	r3, r1
 801352a:	3310      	adds	r3, #16
 801352c:	ed93 7a00 	vldr	s14, [r3]
 8013530:	79fb      	ldrb	r3, [r7, #7]
 8013532:	3b51      	subs	r3, #81	@ 0x51
 8013534:	ee07 3a90 	vmov	s15, r3
 8013538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801353c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013540:	4b34      	ldr	r3, [pc, #208]	@ (8013614 <MAP_refPos+0x360>)
 8013542:	edd3 7a00 	vldr	s15, [r3]
 8013546:	ee77 7a27 	vadd.f32	s15, s14, s15
 801354a:	4b32      	ldr	r3, [pc, #200]	@ (8013614 <MAP_refPos+0x360>)
 801354c:	edc3 7a00 	vstr	s15, [r3]
			break;
 8013550:	e152      	b.n	80137f8 <MAP_refPos+0x544>
				f_PosX += st_PosData[uc_index].f_x2_x3;
 8013552:	7bfa      	ldrb	r2, [r7, #15]
 8013554:	492c      	ldr	r1, [pc, #176]	@ (8013608 <MAP_refPos+0x354>)
 8013556:	4613      	mov	r3, r2
 8013558:	009b      	lsls	r3, r3, #2
 801355a:	4413      	add	r3, r2
 801355c:	00db      	lsls	r3, r3, #3
 801355e:	440b      	add	r3, r1
 8013560:	330c      	adds	r3, #12
 8013562:	ed93 7a00 	vldr	s14, [r3]
 8013566:	4b2a      	ldr	r3, [pc, #168]	@ (8013610 <MAP_refPos+0x35c>)
 8013568:	edd3 7a00 	vldr	s15, [r3]
 801356c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013570:	4b27      	ldr	r3, [pc, #156]	@ (8013610 <MAP_refPos+0x35c>)
 8013572:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y2_y3;
 8013576:	7bfa      	ldrb	r2, [r7, #15]
 8013578:	4923      	ldr	r1, [pc, #140]	@ (8013608 <MAP_refPos+0x354>)
 801357a:	4613      	mov	r3, r2
 801357c:	009b      	lsls	r3, r3, #2
 801357e:	4413      	add	r3, r2
 8013580:	00db      	lsls	r3, r3, #3
 8013582:	440b      	add	r3, r1
 8013584:	3310      	adds	r3, #16
 8013586:	ed93 7a00 	vldr	s14, [r3]
 801358a:	4b22      	ldr	r3, [pc, #136]	@ (8013614 <MAP_refPos+0x360>)
 801358c:	edd3 7a00 	vldr	s15, [r3]
 8013590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013594:	4b1f      	ldr	r3, [pc, #124]	@ (8013614 <MAP_refPos+0x360>)
 8013596:	edc3 7a00 	vstr	s15, [r3]
			break;
 801359a:	e12d      	b.n	80137f8 <MAP_refPos+0x544>
		/* [4]南 [5]南西 */
		case 4:
		case 5:

			/* 直進 */
			if( uc_index == 14 ){
 801359c:	7bfb      	ldrb	r3, [r7, #15]
 801359e:	2b0e      	cmp	r3, #14
 80135a0:	d13a      	bne.n	8013618 <MAP_refPos+0x364>
				
				f_PosX += st_PosData[uc_index].f_x4_x5 * uc_cmd;
 80135a2:	7bfa      	ldrb	r2, [r7, #15]
 80135a4:	4918      	ldr	r1, [pc, #96]	@ (8013608 <MAP_refPos+0x354>)
 80135a6:	4613      	mov	r3, r2
 80135a8:	009b      	lsls	r3, r3, #2
 80135aa:	4413      	add	r3, r2
 80135ac:	00db      	lsls	r3, r3, #3
 80135ae:	440b      	add	r3, r1
 80135b0:	3314      	adds	r3, #20
 80135b2:	ed93 7a00 	vldr	s14, [r3]
 80135b6:	79fb      	ldrb	r3, [r7, #7]
 80135b8:	ee07 3a90 	vmov	s15, r3
 80135bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80135c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80135c4:	4b12      	ldr	r3, [pc, #72]	@ (8013610 <MAP_refPos+0x35c>)
 80135c6:	edd3 7a00 	vldr	s15, [r3]
 80135ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80135ce:	4b10      	ldr	r3, [pc, #64]	@ (8013610 <MAP_refPos+0x35c>)
 80135d0:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y4_y5 * uc_cmd;
 80135d4:	7bfa      	ldrb	r2, [r7, #15]
 80135d6:	490c      	ldr	r1, [pc, #48]	@ (8013608 <MAP_refPos+0x354>)
 80135d8:	4613      	mov	r3, r2
 80135da:	009b      	lsls	r3, r3, #2
 80135dc:	4413      	add	r3, r2
 80135de:	00db      	lsls	r3, r3, #3
 80135e0:	440b      	add	r3, r1
 80135e2:	3318      	adds	r3, #24
 80135e4:	ed93 7a00 	vldr	s14, [r3]
 80135e8:	79fb      	ldrb	r3, [r7, #7]
 80135ea:	ee07 3a90 	vmov	s15, r3
 80135ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80135f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80135f6:	4b07      	ldr	r3, [pc, #28]	@ (8013614 <MAP_refPos+0x360>)
 80135f8:	edd3 7a00 	vldr	s15, [r3]
 80135fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013600:	4b04      	ldr	r3, [pc, #16]	@ (8013614 <MAP_refPos+0x360>)
 8013602:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x4_x5;
				f_PosY += st_PosData[uc_index].f_y4_y5;
			}
			break;
 8013606:	e0f7      	b.n	80137f8 <MAP_refPos+0x544>
 8013608:	080222c4 	.word	0x080222c4
 801360c:	2001ac54 	.word	0x2001ac54
 8013610:	2001ac4c 	.word	0x2001ac4c
 8013614:	2001ac50 	.word	0x2001ac50
			else if( uc_index == 15 ){
 8013618:	7bfb      	ldrb	r3, [r7, #15]
 801361a:	2b0f      	cmp	r3, #15
 801361c:	d134      	bne.n	8013688 <MAP_refPos+0x3d4>
				f_PosX += st_PosData[uc_index].f_x4_x5 * ( uc_cmd - 81 );
 801361e:	7bfa      	ldrb	r2, [r7, #15]
 8013620:	49a4      	ldr	r1, [pc, #656]	@ (80138b4 <MAP_refPos+0x600>)
 8013622:	4613      	mov	r3, r2
 8013624:	009b      	lsls	r3, r3, #2
 8013626:	4413      	add	r3, r2
 8013628:	00db      	lsls	r3, r3, #3
 801362a:	440b      	add	r3, r1
 801362c:	3314      	adds	r3, #20
 801362e:	ed93 7a00 	vldr	s14, [r3]
 8013632:	79fb      	ldrb	r3, [r7, #7]
 8013634:	3b51      	subs	r3, #81	@ 0x51
 8013636:	ee07 3a90 	vmov	s15, r3
 801363a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801363e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013642:	4b9d      	ldr	r3, [pc, #628]	@ (80138b8 <MAP_refPos+0x604>)
 8013644:	edd3 7a00 	vldr	s15, [r3]
 8013648:	ee77 7a27 	vadd.f32	s15, s14, s15
 801364c:	4b9a      	ldr	r3, [pc, #616]	@ (80138b8 <MAP_refPos+0x604>)
 801364e:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y4_y5 * ( uc_cmd - 81 );
 8013652:	7bfa      	ldrb	r2, [r7, #15]
 8013654:	4997      	ldr	r1, [pc, #604]	@ (80138b4 <MAP_refPos+0x600>)
 8013656:	4613      	mov	r3, r2
 8013658:	009b      	lsls	r3, r3, #2
 801365a:	4413      	add	r3, r2
 801365c:	00db      	lsls	r3, r3, #3
 801365e:	440b      	add	r3, r1
 8013660:	3318      	adds	r3, #24
 8013662:	ed93 7a00 	vldr	s14, [r3]
 8013666:	79fb      	ldrb	r3, [r7, #7]
 8013668:	3b51      	subs	r3, #81	@ 0x51
 801366a:	ee07 3a90 	vmov	s15, r3
 801366e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013676:	4b91      	ldr	r3, [pc, #580]	@ (80138bc <MAP_refPos+0x608>)
 8013678:	edd3 7a00 	vldr	s15, [r3]
 801367c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013680:	4b8e      	ldr	r3, [pc, #568]	@ (80138bc <MAP_refPos+0x608>)
 8013682:	edc3 7a00 	vstr	s15, [r3]
			break;
 8013686:	e0b7      	b.n	80137f8 <MAP_refPos+0x544>
				f_PosX += st_PosData[uc_index].f_x4_x5;
 8013688:	7bfa      	ldrb	r2, [r7, #15]
 801368a:	498a      	ldr	r1, [pc, #552]	@ (80138b4 <MAP_refPos+0x600>)
 801368c:	4613      	mov	r3, r2
 801368e:	009b      	lsls	r3, r3, #2
 8013690:	4413      	add	r3, r2
 8013692:	00db      	lsls	r3, r3, #3
 8013694:	440b      	add	r3, r1
 8013696:	3314      	adds	r3, #20
 8013698:	ed93 7a00 	vldr	s14, [r3]
 801369c:	4b86      	ldr	r3, [pc, #536]	@ (80138b8 <MAP_refPos+0x604>)
 801369e:	edd3 7a00 	vldr	s15, [r3]
 80136a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80136a6:	4b84      	ldr	r3, [pc, #528]	@ (80138b8 <MAP_refPos+0x604>)
 80136a8:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y4_y5;
 80136ac:	7bfa      	ldrb	r2, [r7, #15]
 80136ae:	4981      	ldr	r1, [pc, #516]	@ (80138b4 <MAP_refPos+0x600>)
 80136b0:	4613      	mov	r3, r2
 80136b2:	009b      	lsls	r3, r3, #2
 80136b4:	4413      	add	r3, r2
 80136b6:	00db      	lsls	r3, r3, #3
 80136b8:	440b      	add	r3, r1
 80136ba:	3318      	adds	r3, #24
 80136bc:	ed93 7a00 	vldr	s14, [r3]
 80136c0:	4b7e      	ldr	r3, [pc, #504]	@ (80138bc <MAP_refPos+0x608>)
 80136c2:	edd3 7a00 	vldr	s15, [r3]
 80136c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80136ca:	4b7c      	ldr	r3, [pc, #496]	@ (80138bc <MAP_refPos+0x608>)
 80136cc:	edc3 7a00 	vstr	s15, [r3]
			break;
 80136d0:	e092      	b.n	80137f8 <MAP_refPos+0x544>
		/* [6]西 [7]北西 */
		case 6:
		case 7:

			/* 直進 */
			if( uc_index == 14 ){
 80136d2:	7bfb      	ldrb	r3, [r7, #15]
 80136d4:	2b0e      	cmp	r3, #14
 80136d6:	d132      	bne.n	801373e <MAP_refPos+0x48a>
				
				f_PosX += st_PosData[uc_index].f_x6_x7 * uc_cmd;
 80136d8:	7bfa      	ldrb	r2, [r7, #15]
 80136da:	4976      	ldr	r1, [pc, #472]	@ (80138b4 <MAP_refPos+0x600>)
 80136dc:	4613      	mov	r3, r2
 80136de:	009b      	lsls	r3, r3, #2
 80136e0:	4413      	add	r3, r2
 80136e2:	00db      	lsls	r3, r3, #3
 80136e4:	440b      	add	r3, r1
 80136e6:	331c      	adds	r3, #28
 80136e8:	ed93 7a00 	vldr	s14, [r3]
 80136ec:	79fb      	ldrb	r3, [r7, #7]
 80136ee:	ee07 3a90 	vmov	s15, r3
 80136f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80136fa:	4b6f      	ldr	r3, [pc, #444]	@ (80138b8 <MAP_refPos+0x604>)
 80136fc:	edd3 7a00 	vldr	s15, [r3]
 8013700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013704:	4b6c      	ldr	r3, [pc, #432]	@ (80138b8 <MAP_refPos+0x604>)
 8013706:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y6_y7 * uc_cmd;
 801370a:	7bfa      	ldrb	r2, [r7, #15]
 801370c:	4969      	ldr	r1, [pc, #420]	@ (80138b4 <MAP_refPos+0x600>)
 801370e:	4613      	mov	r3, r2
 8013710:	009b      	lsls	r3, r3, #2
 8013712:	4413      	add	r3, r2
 8013714:	00db      	lsls	r3, r3, #3
 8013716:	440b      	add	r3, r1
 8013718:	3320      	adds	r3, #32
 801371a:	ed93 7a00 	vldr	s14, [r3]
 801371e:	79fb      	ldrb	r3, [r7, #7]
 8013720:	ee07 3a90 	vmov	s15, r3
 8013724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013728:	ee27 7a27 	vmul.f32	s14, s14, s15
 801372c:	4b63      	ldr	r3, [pc, #396]	@ (80138bc <MAP_refPos+0x608>)
 801372e:	edd3 7a00 	vldr	s15, [r3]
 8013732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013736:	4b61      	ldr	r3, [pc, #388]	@ (80138bc <MAP_refPos+0x608>)
 8013738:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x6_x7;
				f_PosY += st_PosData[uc_index].f_y6_y7;
			}
			break;
 801373c:	e05b      	b.n	80137f6 <MAP_refPos+0x542>
			else if( uc_index == 15 ){
 801373e:	7bfb      	ldrb	r3, [r7, #15]
 8013740:	2b0f      	cmp	r3, #15
 8013742:	d134      	bne.n	80137ae <MAP_refPos+0x4fa>
				f_PosX += st_PosData[uc_index].f_x6_x7 * ( uc_cmd - 81 );
 8013744:	7bfa      	ldrb	r2, [r7, #15]
 8013746:	495b      	ldr	r1, [pc, #364]	@ (80138b4 <MAP_refPos+0x600>)
 8013748:	4613      	mov	r3, r2
 801374a:	009b      	lsls	r3, r3, #2
 801374c:	4413      	add	r3, r2
 801374e:	00db      	lsls	r3, r3, #3
 8013750:	440b      	add	r3, r1
 8013752:	331c      	adds	r3, #28
 8013754:	ed93 7a00 	vldr	s14, [r3]
 8013758:	79fb      	ldrb	r3, [r7, #7]
 801375a:	3b51      	subs	r3, #81	@ 0x51
 801375c:	ee07 3a90 	vmov	s15, r3
 8013760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013764:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013768:	4b53      	ldr	r3, [pc, #332]	@ (80138b8 <MAP_refPos+0x604>)
 801376a:	edd3 7a00 	vldr	s15, [r3]
 801376e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013772:	4b51      	ldr	r3, [pc, #324]	@ (80138b8 <MAP_refPos+0x604>)
 8013774:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y6_y7 * ( uc_cmd - 81 );
 8013778:	7bfa      	ldrb	r2, [r7, #15]
 801377a:	494e      	ldr	r1, [pc, #312]	@ (80138b4 <MAP_refPos+0x600>)
 801377c:	4613      	mov	r3, r2
 801377e:	009b      	lsls	r3, r3, #2
 8013780:	4413      	add	r3, r2
 8013782:	00db      	lsls	r3, r3, #3
 8013784:	440b      	add	r3, r1
 8013786:	3320      	adds	r3, #32
 8013788:	ed93 7a00 	vldr	s14, [r3]
 801378c:	79fb      	ldrb	r3, [r7, #7]
 801378e:	3b51      	subs	r3, #81	@ 0x51
 8013790:	ee07 3a90 	vmov	s15, r3
 8013794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013798:	ee27 7a27 	vmul.f32	s14, s14, s15
 801379c:	4b47      	ldr	r3, [pc, #284]	@ (80138bc <MAP_refPos+0x608>)
 801379e:	edd3 7a00 	vldr	s15, [r3]
 80137a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80137a6:	4b45      	ldr	r3, [pc, #276]	@ (80138bc <MAP_refPos+0x608>)
 80137a8:	edc3 7a00 	vstr	s15, [r3]
			break;
 80137ac:	e023      	b.n	80137f6 <MAP_refPos+0x542>
				f_PosX += st_PosData[uc_index].f_x6_x7;
 80137ae:	7bfa      	ldrb	r2, [r7, #15]
 80137b0:	4940      	ldr	r1, [pc, #256]	@ (80138b4 <MAP_refPos+0x600>)
 80137b2:	4613      	mov	r3, r2
 80137b4:	009b      	lsls	r3, r3, #2
 80137b6:	4413      	add	r3, r2
 80137b8:	00db      	lsls	r3, r3, #3
 80137ba:	440b      	add	r3, r1
 80137bc:	331c      	adds	r3, #28
 80137be:	ed93 7a00 	vldr	s14, [r3]
 80137c2:	4b3d      	ldr	r3, [pc, #244]	@ (80138b8 <MAP_refPos+0x604>)
 80137c4:	edd3 7a00 	vldr	s15, [r3]
 80137c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80137cc:	4b3a      	ldr	r3, [pc, #232]	@ (80138b8 <MAP_refPos+0x604>)
 80137ce:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y6_y7;
 80137d2:	7bfa      	ldrb	r2, [r7, #15]
 80137d4:	4937      	ldr	r1, [pc, #220]	@ (80138b4 <MAP_refPos+0x600>)
 80137d6:	4613      	mov	r3, r2
 80137d8:	009b      	lsls	r3, r3, #2
 80137da:	4413      	add	r3, r2
 80137dc:	00db      	lsls	r3, r3, #3
 80137de:	440b      	add	r3, r1
 80137e0:	3320      	adds	r3, #32
 80137e2:	ed93 7a00 	vldr	s14, [r3]
 80137e6:	4b35      	ldr	r3, [pc, #212]	@ (80138bc <MAP_refPos+0x608>)
 80137e8:	edd3 7a00 	vldr	s15, [r3]
 80137ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80137f0:	4b32      	ldr	r3, [pc, #200]	@ (80138bc <MAP_refPos+0x608>)
 80137f2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80137f6:	bf00      	nop
	}
	
	/* 進行方向更新 */
	s_PosDir += st_PosData[uc_index].s_dir;
 80137f8:	7bfa      	ldrb	r2, [r7, #15]
 80137fa:	492e      	ldr	r1, [pc, #184]	@ (80138b4 <MAP_refPos+0x600>)
 80137fc:	4613      	mov	r3, r2
 80137fe:	009b      	lsls	r3, r3, #2
 8013800:	4413      	add	r3, r2
 8013802:	00db      	lsls	r3, r3, #3
 8013804:	440b      	add	r3, r1
 8013806:	3324      	adds	r3, #36	@ 0x24
 8013808:	f9b3 3000 	ldrsh.w	r3, [r3]
 801380c:	b29a      	uxth	r2, r3
 801380e:	4b2c      	ldr	r3, [pc, #176]	@ (80138c0 <MAP_refPos+0x60c>)
 8013810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013814:	b29b      	uxth	r3, r3
 8013816:	4413      	add	r3, r2
 8013818:	b29b      	uxth	r3, r3
 801381a:	b21a      	sxth	r2, r3
 801381c:	4b28      	ldr	r3, [pc, #160]	@ (80138c0 <MAP_refPos+0x60c>)
 801381e:	801a      	strh	r2, [r3, #0]
	if( s_PosDir < 0 ) s_PosDir += 8;				// [0]～[7]にしたい
 8013820:	4b27      	ldr	r3, [pc, #156]	@ (80138c0 <MAP_refPos+0x60c>)
 8013822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013826:	2b00      	cmp	r3, #0
 8013828:	da09      	bge.n	801383e <MAP_refPos+0x58a>
 801382a:	4b25      	ldr	r3, [pc, #148]	@ (80138c0 <MAP_refPos+0x60c>)
 801382c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013830:	b29b      	uxth	r3, r3
 8013832:	3308      	adds	r3, #8
 8013834:	b29b      	uxth	r3, r3
 8013836:	b21a      	sxth	r2, r3
 8013838:	4b21      	ldr	r3, [pc, #132]	@ (80138c0 <MAP_refPos+0x60c>)
 801383a:	801a      	strh	r2, [r3, #0]
 801383c:	e00d      	b.n	801385a <MAP_refPos+0x5a6>
	else if( s_PosDir > 7 ) s_PosDir -= 8;
 801383e:	4b20      	ldr	r3, [pc, #128]	@ (80138c0 <MAP_refPos+0x60c>)
 8013840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013844:	2b07      	cmp	r3, #7
 8013846:	dd08      	ble.n	801385a <MAP_refPos+0x5a6>
 8013848:	4b1d      	ldr	r3, [pc, #116]	@ (80138c0 <MAP_refPos+0x60c>)
 801384a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801384e:	b29b      	uxth	r3, r3
 8013850:	3b08      	subs	r3, #8
 8013852:	b29b      	uxth	r3, r3
 8013854:	b21a      	sxth	r2, r3
 8013856:	4b1a      	ldr	r3, [pc, #104]	@ (80138c0 <MAP_refPos+0x60c>)
 8013858:	801a      	strh	r2, [r3, #0]
	
	f_LogPosX[us_LogIndex] = f_PosX;
 801385a:	4b1a      	ldr	r3, [pc, #104]	@ (80138c4 <MAP_refPos+0x610>)
 801385c:	881b      	ldrh	r3, [r3, #0]
 801385e:	4618      	mov	r0, r3
 8013860:	4b15      	ldr	r3, [pc, #84]	@ (80138b8 <MAP_refPos+0x604>)
 8013862:	681a      	ldr	r2, [r3, #0]
 8013864:	4918      	ldr	r1, [pc, #96]	@ (80138c8 <MAP_refPos+0x614>)
 8013866:	0083      	lsls	r3, r0, #2
 8013868:	440b      	add	r3, r1
 801386a:	601a      	str	r2, [r3, #0]
	f_LogPosY[us_LogIndex] = f_PosY;
 801386c:	4b15      	ldr	r3, [pc, #84]	@ (80138c4 <MAP_refPos+0x610>)
 801386e:	881b      	ldrh	r3, [r3, #0]
 8013870:	4618      	mov	r0, r3
 8013872:	4b12      	ldr	r3, [pc, #72]	@ (80138bc <MAP_refPos+0x608>)
 8013874:	681a      	ldr	r2, [r3, #0]
 8013876:	4915      	ldr	r1, [pc, #84]	@ (80138cc <MAP_refPos+0x618>)
 8013878:	0083      	lsls	r3, r0, #2
 801387a:	440b      	add	r3, r1
 801387c:	601a      	str	r2, [r3, #0]
	
	us_LogIndex++;
 801387e:	4b11      	ldr	r3, [pc, #68]	@ (80138c4 <MAP_refPos+0x610>)
 8013880:	881b      	ldrh	r3, [r3, #0]
 8013882:	3301      	adds	r3, #1
 8013884:	b29a      	uxth	r2, r3
 8013886:	4b0f      	ldr	r3, [pc, #60]	@ (80138c4 <MAP_refPos+0x610>)
 8013888:	801a      	strh	r2, [r3, #0]
	us_LogIndex %= 30;
 801388a:	4b0e      	ldr	r3, [pc, #56]	@ (80138c4 <MAP_refPos+0x610>)
 801388c:	881a      	ldrh	r2, [r3, #0]
 801388e:	4b10      	ldr	r3, [pc, #64]	@ (80138d0 <MAP_refPos+0x61c>)
 8013890:	fba3 1302 	umull	r1, r3, r3, r2
 8013894:	0919      	lsrs	r1, r3, #4
 8013896:	460b      	mov	r3, r1
 8013898:	011b      	lsls	r3, r3, #4
 801389a:	1a5b      	subs	r3, r3, r1
 801389c:	005b      	lsls	r3, r3, #1
 801389e:	1ad3      	subs	r3, r2, r3
 80138a0:	b29a      	uxth	r2, r3
 80138a2:	4b08      	ldr	r3, [pc, #32]	@ (80138c4 <MAP_refPos+0x610>)
 80138a4:	801a      	strh	r2, [r3, #0]
 80138a6:	e000      	b.n	80138aa <MAP_refPos+0x5f6>
			if( st_PosData[uc_index].en_cmd == MAP_CMD_MAX ) return;		// コマンド未発見
 80138a8:	bf00      	nop
}
 80138aa:	3714      	adds	r7, #20
 80138ac:	46bd      	mov	sp, r7
 80138ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b2:	4770      	bx	lr
 80138b4:	080222c4 	.word	0x080222c4
 80138b8:	2001ac4c 	.word	0x2001ac4c
 80138bc:	2001ac50 	.word	0x2001ac50
 80138c0:	2001ac54 	.word	0x2001ac54
 80138c4:	2001ad48 	.word	0x2001ad48
 80138c8:	2001ac58 	.word	0x2001ac58
 80138cc:	2001acd0 	.word	0x2001acd0
 80138d0:	88888889 	.word	0x88888889

080138d4 <MAP_setWallCut>:

bool MAP_setWallCut( uint8_t uc_cmd )
{
 80138d4:	b590      	push	{r4, r7, lr}
 80138d6:	b085      	sub	sp, #20
 80138d8:	af00      	add	r7, sp, #0
 80138da:	4603      	mov	r3, r0
 80138dc:	71fb      	strb	r3, [r7, #7]
	uint8_t uc_val = 0;			// 1区画前のコーナー側の壁があるか（0以外なら壁あり）
 80138de:	2300      	movs	r3, #0
 80138e0:	73fb      	strb	r3, [r7, #15]
	uint8_t uc_valPrev = 0;		// 2区画前のコーナー側の壁があるか（0以外なら壁あり）
 80138e2:	2300      	movs	r3, #0
 80138e4:	73bb      	strb	r3, [r7, #14]
	bool bl_wallCut = FALSE;
 80138e6:	2300      	movs	r3, #0
 80138e8:	737b      	strb	r3, [r7, #13]
	
	/* 位置更新 */
	switch( uc_cmd ){
 80138ea:	79fb      	ldrb	r3, [r7, #7]
 80138ec:	2b9c      	cmp	r3, #156	@ 0x9c
 80138ee:	f000 822a 	beq.w	8013d46 <MAP_setWallCut+0x472>
 80138f2:	2b9c      	cmp	r3, #156	@ 0x9c
 80138f4:	f300 843f 	bgt.w	8014176 <MAP_setWallCut+0x8a2>
 80138f8:	2b9b      	cmp	r3, #155	@ 0x9b
 80138fa:	d009      	beq.n	8013910 <MAP_setWallCut+0x3c>
 80138fc:	2b9b      	cmp	r3, #155	@ 0x9b
 80138fe:	f300 843a 	bgt.w	8014176 <MAP_setWallCut+0x8a2>
 8013902:	2b4c      	cmp	r3, #76	@ 0x4c
 8013904:	d004      	beq.n	8013910 <MAP_setWallCut+0x3c>
 8013906:	2b4d      	cmp	r3, #77	@ 0x4d
 8013908:	f000 821d 	beq.w	8013d46 <MAP_setWallCut+0x472>
				bl_wallCut = TRUE;
			}
			break;
			
		default:
			break;
 801390c:	f000 bc33 	b.w	8014176 <MAP_setWallCut+0x8a2>
			switch( s_PosDir ){
 8013910:	4bc1      	ldr	r3, [pc, #772]	@ (8013c18 <MAP_setWallCut+0x344>)
 8013912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013916:	2b06      	cmp	r3, #6
 8013918:	f200 8204 	bhi.w	8013d24 <MAP_setWallCut+0x450>
 801391c:	a201      	add	r2, pc, #4	@ (adr r2, 8013924 <MAP_setWallCut+0x50>)
 801391e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013922:	bf00      	nop
 8013924:	08013941 	.word	0x08013941
 8013928:	08013d25 	.word	0x08013d25
 801392c:	08013a35 	.word	0x08013a35
 8013930:	08013d25 	.word	0x08013d25
 8013934:	08013b29 	.word	0x08013b29
 8013938:	08013d25 	.word	0x08013d25
 801393c:	08013c35 	.word	0x08013c35
					if( 0 < f_PosY-0.5 ) uc_val     = g_SysMap[(uint8_t)(f_PosY-0.5)][(uint8_t)(f_PosX)] & 0x02;		// 北を向いているので東側の壁があるか
 8013940:	4bb6      	ldr	r3, [pc, #728]	@ (8013c1c <MAP_setWallCut+0x348>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	4618      	mov	r0, r3
 8013946:	f7ec fe27 	bl	8000598 <__aeabi_f2d>
 801394a:	f04f 0200 	mov.w	r2, #0
 801394e:	4bb4      	ldr	r3, [pc, #720]	@ (8013c20 <MAP_setWallCut+0x34c>)
 8013950:	f7ec fcc2 	bl	80002d8 <__aeabi_dsub>
 8013954:	4602      	mov	r2, r0
 8013956:	460b      	mov	r3, r1
 8013958:	4610      	mov	r0, r2
 801395a:	4619      	mov	r1, r3
 801395c:	f04f 0200 	mov.w	r2, #0
 8013960:	f04f 0300 	mov.w	r3, #0
 8013964:	f7ed f900 	bl	8000b68 <__aeabi_dcmpgt>
 8013968:	4603      	mov	r3, r0
 801396a:	2b00      	cmp	r3, #0
 801396c:	d024      	beq.n	80139b8 <MAP_setWallCut+0xe4>
 801396e:	4bab      	ldr	r3, [pc, #684]	@ (8013c1c <MAP_setWallCut+0x348>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	4618      	mov	r0, r3
 8013974:	f7ec fe10 	bl	8000598 <__aeabi_f2d>
 8013978:	f04f 0200 	mov.w	r2, #0
 801397c:	4ba8      	ldr	r3, [pc, #672]	@ (8013c20 <MAP_setWallCut+0x34c>)
 801397e:	f7ec fcab 	bl	80002d8 <__aeabi_dsub>
 8013982:	4602      	mov	r2, r0
 8013984:	460b      	mov	r3, r1
 8013986:	4610      	mov	r0, r2
 8013988:	4619      	mov	r1, r3
 801398a:	f7ed f935 	bl	8000bf8 <__aeabi_d2uiz>
 801398e:	4603      	mov	r3, r0
 8013990:	b2db      	uxtb	r3, r3
 8013992:	4618      	mov	r0, r3
 8013994:	4ba3      	ldr	r3, [pc, #652]	@ (8013c24 <MAP_setWallCut+0x350>)
 8013996:	edd3 7a00 	vldr	s15, [r3]
 801399a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801399e:	edc7 7a00 	vstr	s15, [r7]
 80139a2:	783b      	ldrb	r3, [r7, #0]
 80139a4:	b2db      	uxtb	r3, r3
 80139a6:	4619      	mov	r1, r3
 80139a8:	4a9f      	ldr	r2, [pc, #636]	@ (8013c28 <MAP_setWallCut+0x354>)
 80139aa:	0143      	lsls	r3, r0, #5
 80139ac:	4413      	add	r3, r2
 80139ae:	440b      	add	r3, r1
 80139b0:	781b      	ldrb	r3, [r3, #0]
 80139b2:	f003 0302 	and.w	r3, r3, #2
 80139b6:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x02;		// 北を向いているので東側の壁があるか
 80139b8:	4b98      	ldr	r3, [pc, #608]	@ (8013c1c <MAP_setWallCut+0x348>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	4618      	mov	r0, r3
 80139be:	f7ec fdeb 	bl	8000598 <__aeabi_f2d>
 80139c2:	f04f 0200 	mov.w	r2, #0
 80139c6:	4b99      	ldr	r3, [pc, #612]	@ (8013c2c <MAP_setWallCut+0x358>)
 80139c8:	f7ec fc86 	bl	80002d8 <__aeabi_dsub>
 80139cc:	4602      	mov	r2, r0
 80139ce:	460b      	mov	r3, r1
 80139d0:	4610      	mov	r0, r2
 80139d2:	4619      	mov	r1, r3
 80139d4:	f04f 0200 	mov.w	r2, #0
 80139d8:	f04f 0300 	mov.w	r3, #0
 80139dc:	f7ed f8c4 	bl	8000b68 <__aeabi_dcmpgt>
 80139e0:	4603      	mov	r3, r0
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d100      	bne.n	80139e8 <MAP_setWallCut+0x114>
					break;	
 80139e6:	e19d      	b.n	8013d24 <MAP_setWallCut+0x450>
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x02;		// 北を向いているので東側の壁があるか
 80139e8:	4b8c      	ldr	r3, [pc, #560]	@ (8013c1c <MAP_setWallCut+0x348>)
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7ec fdd3 	bl	8000598 <__aeabi_f2d>
 80139f2:	f04f 0200 	mov.w	r2, #0
 80139f6:	4b8d      	ldr	r3, [pc, #564]	@ (8013c2c <MAP_setWallCut+0x358>)
 80139f8:	f7ec fc6e 	bl	80002d8 <__aeabi_dsub>
 80139fc:	4602      	mov	r2, r0
 80139fe:	460b      	mov	r3, r1
 8013a00:	4610      	mov	r0, r2
 8013a02:	4619      	mov	r1, r3
 8013a04:	f7ed f8f8 	bl	8000bf8 <__aeabi_d2uiz>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	b2db      	uxtb	r3, r3
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	4b85      	ldr	r3, [pc, #532]	@ (8013c24 <MAP_setWallCut+0x350>)
 8013a10:	edd3 7a00 	vldr	s15, [r3]
 8013a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013a18:	edc7 7a00 	vstr	s15, [r7]
 8013a1c:	783b      	ldrb	r3, [r7, #0]
 8013a1e:	b2db      	uxtb	r3, r3
 8013a20:	4619      	mov	r1, r3
 8013a22:	4a81      	ldr	r2, [pc, #516]	@ (8013c28 <MAP_setWallCut+0x354>)
 8013a24:	0143      	lsls	r3, r0, #5
 8013a26:	4413      	add	r3, r2
 8013a28:	440b      	add	r3, r1
 8013a2a:	781b      	ldrb	r3, [r3, #0]
 8013a2c:	f003 0302 	and.w	r3, r3, #2
 8013a30:	73bb      	strb	r3, [r7, #14]
					break;	
 8013a32:	e177      	b.n	8013d24 <MAP_setWallCut+0x450>
					if( 0 < f_PosX-0.5 ) uc_val     = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-0.5)] & 0x04;		// 東を向いているので南側の壁があるか
 8013a34:	4b7b      	ldr	r3, [pc, #492]	@ (8013c24 <MAP_setWallCut+0x350>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f7ec fdad 	bl	8000598 <__aeabi_f2d>
 8013a3e:	f04f 0200 	mov.w	r2, #0
 8013a42:	4b77      	ldr	r3, [pc, #476]	@ (8013c20 <MAP_setWallCut+0x34c>)
 8013a44:	f7ec fc48 	bl	80002d8 <__aeabi_dsub>
 8013a48:	4602      	mov	r2, r0
 8013a4a:	460b      	mov	r3, r1
 8013a4c:	4610      	mov	r0, r2
 8013a4e:	4619      	mov	r1, r3
 8013a50:	f04f 0200 	mov.w	r2, #0
 8013a54:	f04f 0300 	mov.w	r3, #0
 8013a58:	f7ed f886 	bl	8000b68 <__aeabi_dcmpgt>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d024      	beq.n	8013aac <MAP_setWallCut+0x1d8>
 8013a62:	4b6e      	ldr	r3, [pc, #440]	@ (8013c1c <MAP_setWallCut+0x348>)
 8013a64:	edd3 7a00 	vldr	s15, [r3]
 8013a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013a6c:	edc7 7a00 	vstr	s15, [r7]
 8013a70:	783b      	ldrb	r3, [r7, #0]
 8013a72:	b2db      	uxtb	r3, r3
 8013a74:	461c      	mov	r4, r3
 8013a76:	4b6b      	ldr	r3, [pc, #428]	@ (8013c24 <MAP_setWallCut+0x350>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f7ec fd8c 	bl	8000598 <__aeabi_f2d>
 8013a80:	f04f 0200 	mov.w	r2, #0
 8013a84:	4b66      	ldr	r3, [pc, #408]	@ (8013c20 <MAP_setWallCut+0x34c>)
 8013a86:	f7ec fc27 	bl	80002d8 <__aeabi_dsub>
 8013a8a:	4602      	mov	r2, r0
 8013a8c:	460b      	mov	r3, r1
 8013a8e:	4610      	mov	r0, r2
 8013a90:	4619      	mov	r1, r3
 8013a92:	f7ed f8b1 	bl	8000bf8 <__aeabi_d2uiz>
 8013a96:	4603      	mov	r3, r0
 8013a98:	b2db      	uxtb	r3, r3
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	4a62      	ldr	r2, [pc, #392]	@ (8013c28 <MAP_setWallCut+0x354>)
 8013a9e:	0163      	lsls	r3, r4, #5
 8013aa0:	4413      	add	r3, r2
 8013aa2:	440b      	add	r3, r1
 8013aa4:	781b      	ldrb	r3, [r3, #0]
 8013aa6:	f003 0304 	and.w	r3, r3, #4
 8013aaa:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x04;		// 東を向いているので南側の壁があるか
 8013aac:	4b5d      	ldr	r3, [pc, #372]	@ (8013c24 <MAP_setWallCut+0x350>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f7ec fd71 	bl	8000598 <__aeabi_f2d>
 8013ab6:	f04f 0200 	mov.w	r2, #0
 8013aba:	4b5c      	ldr	r3, [pc, #368]	@ (8013c2c <MAP_setWallCut+0x358>)
 8013abc:	f7ec fc0c 	bl	80002d8 <__aeabi_dsub>
 8013ac0:	4602      	mov	r2, r0
 8013ac2:	460b      	mov	r3, r1
 8013ac4:	4610      	mov	r0, r2
 8013ac6:	4619      	mov	r1, r3
 8013ac8:	f04f 0200 	mov.w	r2, #0
 8013acc:	f04f 0300 	mov.w	r3, #0
 8013ad0:	f7ed f84a 	bl	8000b68 <__aeabi_dcmpgt>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d100      	bne.n	8013adc <MAP_setWallCut+0x208>
					break;
 8013ada:	e123      	b.n	8013d24 <MAP_setWallCut+0x450>
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x04;		// 東を向いているので南側の壁があるか
 8013adc:	4b4f      	ldr	r3, [pc, #316]	@ (8013c1c <MAP_setWallCut+0x348>)
 8013ade:	edd3 7a00 	vldr	s15, [r3]
 8013ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013ae6:	edc7 7a00 	vstr	s15, [r7]
 8013aea:	783b      	ldrb	r3, [r7, #0]
 8013aec:	b2db      	uxtb	r3, r3
 8013aee:	461c      	mov	r4, r3
 8013af0:	4b4c      	ldr	r3, [pc, #304]	@ (8013c24 <MAP_setWallCut+0x350>)
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7ec fd4f 	bl	8000598 <__aeabi_f2d>
 8013afa:	f04f 0200 	mov.w	r2, #0
 8013afe:	4b4b      	ldr	r3, [pc, #300]	@ (8013c2c <MAP_setWallCut+0x358>)
 8013b00:	f7ec fbea 	bl	80002d8 <__aeabi_dsub>
 8013b04:	4602      	mov	r2, r0
 8013b06:	460b      	mov	r3, r1
 8013b08:	4610      	mov	r0, r2
 8013b0a:	4619      	mov	r1, r3
 8013b0c:	f7ed f874 	bl	8000bf8 <__aeabi_d2uiz>
 8013b10:	4603      	mov	r3, r0
 8013b12:	b2db      	uxtb	r3, r3
 8013b14:	4619      	mov	r1, r3
 8013b16:	4a44      	ldr	r2, [pc, #272]	@ (8013c28 <MAP_setWallCut+0x354>)
 8013b18:	0163      	lsls	r3, r4, #5
 8013b1a:	4413      	add	r3, r2
 8013b1c:	440b      	add	r3, r1
 8013b1e:	781b      	ldrb	r3, [r3, #0]
 8013b20:	f003 0304 	and.w	r3, r3, #4
 8013b24:	73bb      	strb	r3, [r7, #14]
					break;
 8013b26:	e0fd      	b.n	8013d24 <MAP_setWallCut+0x450>
					if( MAP_Y_SIZE_REAL > f_PosY+0.5 ) uc_val     = g_SysMap[(uint8_t)(f_PosY+0.5)][(uint8_t)(f_PosX)] & 0x08;		// 南を向いているので西側の壁があるか
 8013b28:	4b3c      	ldr	r3, [pc, #240]	@ (8013c1c <MAP_setWallCut+0x348>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f7ec fd33 	bl	8000598 <__aeabi_f2d>
 8013b32:	f04f 0200 	mov.w	r2, #0
 8013b36:	4b3a      	ldr	r3, [pc, #232]	@ (8013c20 <MAP_setWallCut+0x34c>)
 8013b38:	f7ec fbd0 	bl	80002dc <__adddf3>
 8013b3c:	4602      	mov	r2, r0
 8013b3e:	460b      	mov	r3, r1
 8013b40:	4610      	mov	r0, r2
 8013b42:	4619      	mov	r1, r3
 8013b44:	f04f 0200 	mov.w	r2, #0
 8013b48:	4b39      	ldr	r3, [pc, #228]	@ (8013c30 <MAP_setWallCut+0x35c>)
 8013b4a:	f7ec ffef 	bl	8000b2c <__aeabi_dcmplt>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d024      	beq.n	8013b9e <MAP_setWallCut+0x2ca>
 8013b54:	4b31      	ldr	r3, [pc, #196]	@ (8013c1c <MAP_setWallCut+0x348>)
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f7ec fd1d 	bl	8000598 <__aeabi_f2d>
 8013b5e:	f04f 0200 	mov.w	r2, #0
 8013b62:	4b2f      	ldr	r3, [pc, #188]	@ (8013c20 <MAP_setWallCut+0x34c>)
 8013b64:	f7ec fbba 	bl	80002dc <__adddf3>
 8013b68:	4602      	mov	r2, r0
 8013b6a:	460b      	mov	r3, r1
 8013b6c:	4610      	mov	r0, r2
 8013b6e:	4619      	mov	r1, r3
 8013b70:	f7ed f842 	bl	8000bf8 <__aeabi_d2uiz>
 8013b74:	4603      	mov	r3, r0
 8013b76:	b2db      	uxtb	r3, r3
 8013b78:	4618      	mov	r0, r3
 8013b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8013c24 <MAP_setWallCut+0x350>)
 8013b7c:	edd3 7a00 	vldr	s15, [r3]
 8013b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013b84:	edc7 7a00 	vstr	s15, [r7]
 8013b88:	783b      	ldrb	r3, [r7, #0]
 8013b8a:	b2db      	uxtb	r3, r3
 8013b8c:	4619      	mov	r1, r3
 8013b8e:	4a26      	ldr	r2, [pc, #152]	@ (8013c28 <MAP_setWallCut+0x354>)
 8013b90:	0143      	lsls	r3, r0, #5
 8013b92:	4413      	add	r3, r2
 8013b94:	440b      	add	r3, r1
 8013b96:	781b      	ldrb	r3, [r3, #0]
 8013b98:	f003 0308 	and.w	r3, r3, #8
 8013b9c:	73fb      	strb	r3, [r7, #15]
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x08;		// 南を向いているので西側の壁があるか
 8013b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8013c1c <MAP_setWallCut+0x348>)
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	f7ec fcf8 	bl	8000598 <__aeabi_f2d>
 8013ba8:	f04f 0200 	mov.w	r2, #0
 8013bac:	4b1f      	ldr	r3, [pc, #124]	@ (8013c2c <MAP_setWallCut+0x358>)
 8013bae:	f7ec fb95 	bl	80002dc <__adddf3>
 8013bb2:	4602      	mov	r2, r0
 8013bb4:	460b      	mov	r3, r1
 8013bb6:	4610      	mov	r0, r2
 8013bb8:	4619      	mov	r1, r3
 8013bba:	f04f 0200 	mov.w	r2, #0
 8013bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8013c30 <MAP_setWallCut+0x35c>)
 8013bc0:	f7ec ffb4 	bl	8000b2c <__aeabi_dcmplt>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d100      	bne.n	8013bcc <MAP_setWallCut+0x2f8>
					break;
 8013bca:	e0ab      	b.n	8013d24 <MAP_setWallCut+0x450>
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x08;		// 南を向いているので西側の壁があるか
 8013bcc:	4b13      	ldr	r3, [pc, #76]	@ (8013c1c <MAP_setWallCut+0x348>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7ec fce1 	bl	8000598 <__aeabi_f2d>
 8013bd6:	f04f 0200 	mov.w	r2, #0
 8013bda:	4b14      	ldr	r3, [pc, #80]	@ (8013c2c <MAP_setWallCut+0x358>)
 8013bdc:	f7ec fb7e 	bl	80002dc <__adddf3>
 8013be0:	4602      	mov	r2, r0
 8013be2:	460b      	mov	r3, r1
 8013be4:	4610      	mov	r0, r2
 8013be6:	4619      	mov	r1, r3
 8013be8:	f7ed f806 	bl	8000bf8 <__aeabi_d2uiz>
 8013bec:	4603      	mov	r3, r0
 8013bee:	b2db      	uxtb	r3, r3
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8013c24 <MAP_setWallCut+0x350>)
 8013bf4:	edd3 7a00 	vldr	s15, [r3]
 8013bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013bfc:	edc7 7a00 	vstr	s15, [r7]
 8013c00:	783b      	ldrb	r3, [r7, #0]
 8013c02:	b2db      	uxtb	r3, r3
 8013c04:	4619      	mov	r1, r3
 8013c06:	4a08      	ldr	r2, [pc, #32]	@ (8013c28 <MAP_setWallCut+0x354>)
 8013c08:	0143      	lsls	r3, r0, #5
 8013c0a:	4413      	add	r3, r2
 8013c0c:	440b      	add	r3, r1
 8013c0e:	781b      	ldrb	r3, [r3, #0]
 8013c10:	f003 0308 	and.w	r3, r3, #8
 8013c14:	73bb      	strb	r3, [r7, #14]
					break;
 8013c16:	e085      	b.n	8013d24 <MAP_setWallCut+0x450>
 8013c18:	2001ac54 	.word	0x2001ac54
 8013c1c:	2001ac50 	.word	0x2001ac50
 8013c20:	3fe00000 	.word	0x3fe00000
 8013c24:	2001ac4c 	.word	0x2001ac4c
 8013c28:	2001b5a0 	.word	0x2001b5a0
 8013c2c:	3ff80000 	.word	0x3ff80000
 8013c30:	40400000 	.word	0x40400000
					if( MAP_X_SIZE_REAL > f_PosX+0.5 ) uc_val     = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+0.5)] & 0x01;		// 西を向いているので北側の壁があるか
 8013c34:	4bb6      	ldr	r3, [pc, #728]	@ (8013f10 <MAP_setWallCut+0x63c>)
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f7ec fcad 	bl	8000598 <__aeabi_f2d>
 8013c3e:	f04f 0200 	mov.w	r2, #0
 8013c42:	4bb4      	ldr	r3, [pc, #720]	@ (8013f14 <MAP_setWallCut+0x640>)
 8013c44:	f7ec fb4a 	bl	80002dc <__adddf3>
 8013c48:	4602      	mov	r2, r0
 8013c4a:	460b      	mov	r3, r1
 8013c4c:	4610      	mov	r0, r2
 8013c4e:	4619      	mov	r1, r3
 8013c50:	f04f 0200 	mov.w	r2, #0
 8013c54:	4bb0      	ldr	r3, [pc, #704]	@ (8013f18 <MAP_setWallCut+0x644>)
 8013c56:	f7ec ff69 	bl	8000b2c <__aeabi_dcmplt>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d024      	beq.n	8013caa <MAP_setWallCut+0x3d6>
 8013c60:	4bae      	ldr	r3, [pc, #696]	@ (8013f1c <MAP_setWallCut+0x648>)
 8013c62:	edd3 7a00 	vldr	s15, [r3]
 8013c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013c6a:	edc7 7a00 	vstr	s15, [r7]
 8013c6e:	783b      	ldrb	r3, [r7, #0]
 8013c70:	b2db      	uxtb	r3, r3
 8013c72:	461c      	mov	r4, r3
 8013c74:	4ba6      	ldr	r3, [pc, #664]	@ (8013f10 <MAP_setWallCut+0x63c>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7ec fc8d 	bl	8000598 <__aeabi_f2d>
 8013c7e:	f04f 0200 	mov.w	r2, #0
 8013c82:	4ba4      	ldr	r3, [pc, #656]	@ (8013f14 <MAP_setWallCut+0x640>)
 8013c84:	f7ec fb2a 	bl	80002dc <__adddf3>
 8013c88:	4602      	mov	r2, r0
 8013c8a:	460b      	mov	r3, r1
 8013c8c:	4610      	mov	r0, r2
 8013c8e:	4619      	mov	r1, r3
 8013c90:	f7ec ffb2 	bl	8000bf8 <__aeabi_d2uiz>
 8013c94:	4603      	mov	r3, r0
 8013c96:	b2db      	uxtb	r3, r3
 8013c98:	4619      	mov	r1, r3
 8013c9a:	4aa1      	ldr	r2, [pc, #644]	@ (8013f20 <MAP_setWallCut+0x64c>)
 8013c9c:	0163      	lsls	r3, r4, #5
 8013c9e:	4413      	add	r3, r2
 8013ca0:	440b      	add	r3, r1
 8013ca2:	781b      	ldrb	r3, [r3, #0]
 8013ca4:	f003 0301 	and.w	r3, r3, #1
 8013ca8:	73fb      	strb	r3, [r7, #15]
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x01;		// 西を向いているので北側の壁があるか
 8013caa:	4b99      	ldr	r3, [pc, #612]	@ (8013f10 <MAP_setWallCut+0x63c>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f7ec fc72 	bl	8000598 <__aeabi_f2d>
 8013cb4:	f04f 0200 	mov.w	r2, #0
 8013cb8:	4b9a      	ldr	r3, [pc, #616]	@ (8013f24 <MAP_setWallCut+0x650>)
 8013cba:	f7ec fb0f 	bl	80002dc <__adddf3>
 8013cbe:	4602      	mov	r2, r0
 8013cc0:	460b      	mov	r3, r1
 8013cc2:	4610      	mov	r0, r2
 8013cc4:	4619      	mov	r1, r3
 8013cc6:	f04f 0200 	mov.w	r2, #0
 8013cca:	4b93      	ldr	r3, [pc, #588]	@ (8013f18 <MAP_setWallCut+0x644>)
 8013ccc:	f7ec ff2e 	bl	8000b2c <__aeabi_dcmplt>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d100      	bne.n	8013cd8 <MAP_setWallCut+0x404>
					break;
 8013cd6:	e024      	b.n	8013d22 <MAP_setWallCut+0x44e>
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x01;		// 西を向いているので北側の壁があるか
 8013cd8:	4b90      	ldr	r3, [pc, #576]	@ (8013f1c <MAP_setWallCut+0x648>)
 8013cda:	edd3 7a00 	vldr	s15, [r3]
 8013cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013ce2:	edc7 7a00 	vstr	s15, [r7]
 8013ce6:	783b      	ldrb	r3, [r7, #0]
 8013ce8:	b2db      	uxtb	r3, r3
 8013cea:	461c      	mov	r4, r3
 8013cec:	4b88      	ldr	r3, [pc, #544]	@ (8013f10 <MAP_setWallCut+0x63c>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f7ec fc51 	bl	8000598 <__aeabi_f2d>
 8013cf6:	f04f 0200 	mov.w	r2, #0
 8013cfa:	4b8a      	ldr	r3, [pc, #552]	@ (8013f24 <MAP_setWallCut+0x650>)
 8013cfc:	f7ec faee 	bl	80002dc <__adddf3>
 8013d00:	4602      	mov	r2, r0
 8013d02:	460b      	mov	r3, r1
 8013d04:	4610      	mov	r0, r2
 8013d06:	4619      	mov	r1, r3
 8013d08:	f7ec ff76 	bl	8000bf8 <__aeabi_d2uiz>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	b2db      	uxtb	r3, r3
 8013d10:	4619      	mov	r1, r3
 8013d12:	4a83      	ldr	r2, [pc, #524]	@ (8013f20 <MAP_setWallCut+0x64c>)
 8013d14:	0163      	lsls	r3, r4, #5
 8013d16:	4413      	add	r3, r2
 8013d18:	440b      	add	r3, r1
 8013d1a:	781b      	ldrb	r3, [r3, #0]
 8013d1c:	f003 0301 	and.w	r3, r3, #1
 8013d20:	73bb      	strb	r3, [r7, #14]
					break;
 8013d22:	bf00      	nop
			if( ( uc_val != 0 ) || ( ( uc_val != 0 ) && ( uc_valPrev != 0 ) ) ){
 8013d24:	7bfb      	ldrb	r3, [r7, #15]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d107      	bne.n	8013d3a <MAP_setWallCut+0x466>
 8013d2a:	7bfb      	ldrb	r3, [r7, #15]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	f000 8224 	beq.w	801417a <MAP_setWallCut+0x8a6>
 8013d32:	7bbb      	ldrb	r3, [r7, #14]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	f000 8220 	beq.w	801417a <MAP_setWallCut+0x8a6>
				MOT_setWallEdgeType( MOT_WALL_EDGE_RIGHT );		// 壁切れ補正を実施する
 8013d3a:	2001      	movs	r0, #1
 8013d3c:	f7fe fd64 	bl	8012808 <MOT_setWallEdgeType>
				bl_wallCut = TRUE;
 8013d40:	2301      	movs	r3, #1
 8013d42:	737b      	strb	r3, [r7, #13]
			break;
 8013d44:	e219      	b.n	801417a <MAP_setWallCut+0x8a6>
			switch( s_PosDir ){
 8013d46:	4b78      	ldr	r3, [pc, #480]	@ (8013f28 <MAP_setWallCut+0x654>)
 8013d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013d4c:	2b06      	cmp	r3, #6
 8013d4e:	f200 8203 	bhi.w	8014158 <MAP_setWallCut+0x884>
 8013d52:	a201      	add	r2, pc, #4	@ (adr r2, 8013d58 <MAP_setWallCut+0x484>)
 8013d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d58:	08013d75 	.word	0x08013d75
 8013d5c:	08014159 	.word	0x08014159
 8013d60:	08013e69 	.word	0x08013e69
 8013d64:	08014159 	.word	0x08014159
 8013d68:	08013f79 	.word	0x08013f79
 8013d6c:	08014159 	.word	0x08014159
 8013d70:	08014069 	.word	0x08014069
					if( 0 < f_PosY-0.5 ) uc_val     = g_SysMap[(uint8_t)(f_PosY-0.5)][(uint8_t)(f_PosX)] & 0x08;			// 北を向いているので西側の壁があるか
 8013d74:	4b69      	ldr	r3, [pc, #420]	@ (8013f1c <MAP_setWallCut+0x648>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	4618      	mov	r0, r3
 8013d7a:	f7ec fc0d 	bl	8000598 <__aeabi_f2d>
 8013d7e:	f04f 0200 	mov.w	r2, #0
 8013d82:	4b64      	ldr	r3, [pc, #400]	@ (8013f14 <MAP_setWallCut+0x640>)
 8013d84:	f7ec faa8 	bl	80002d8 <__aeabi_dsub>
 8013d88:	4602      	mov	r2, r0
 8013d8a:	460b      	mov	r3, r1
 8013d8c:	4610      	mov	r0, r2
 8013d8e:	4619      	mov	r1, r3
 8013d90:	f04f 0200 	mov.w	r2, #0
 8013d94:	f04f 0300 	mov.w	r3, #0
 8013d98:	f7ec fee6 	bl	8000b68 <__aeabi_dcmpgt>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d024      	beq.n	8013dec <MAP_setWallCut+0x518>
 8013da2:	4b5e      	ldr	r3, [pc, #376]	@ (8013f1c <MAP_setWallCut+0x648>)
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	4618      	mov	r0, r3
 8013da8:	f7ec fbf6 	bl	8000598 <__aeabi_f2d>
 8013dac:	f04f 0200 	mov.w	r2, #0
 8013db0:	4b58      	ldr	r3, [pc, #352]	@ (8013f14 <MAP_setWallCut+0x640>)
 8013db2:	f7ec fa91 	bl	80002d8 <__aeabi_dsub>
 8013db6:	4602      	mov	r2, r0
 8013db8:	460b      	mov	r3, r1
 8013dba:	4610      	mov	r0, r2
 8013dbc:	4619      	mov	r1, r3
 8013dbe:	f7ec ff1b 	bl	8000bf8 <__aeabi_d2uiz>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	b2db      	uxtb	r3, r3
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	4b51      	ldr	r3, [pc, #324]	@ (8013f10 <MAP_setWallCut+0x63c>)
 8013dca:	edd3 7a00 	vldr	s15, [r3]
 8013dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013dd2:	edc7 7a00 	vstr	s15, [r7]
 8013dd6:	783b      	ldrb	r3, [r7, #0]
 8013dd8:	b2db      	uxtb	r3, r3
 8013dda:	4619      	mov	r1, r3
 8013ddc:	4a50      	ldr	r2, [pc, #320]	@ (8013f20 <MAP_setWallCut+0x64c>)
 8013dde:	0143      	lsls	r3, r0, #5
 8013de0:	4413      	add	r3, r2
 8013de2:	440b      	add	r3, r1
 8013de4:	781b      	ldrb	r3, [r3, #0]
 8013de6:	f003 0308 	and.w	r3, r3, #8
 8013dea:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x08;			// 北を向いているので西側の壁があるか
 8013dec:	4b4b      	ldr	r3, [pc, #300]	@ (8013f1c <MAP_setWallCut+0x648>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	4618      	mov	r0, r3
 8013df2:	f7ec fbd1 	bl	8000598 <__aeabi_f2d>
 8013df6:	f04f 0200 	mov.w	r2, #0
 8013dfa:	4b4a      	ldr	r3, [pc, #296]	@ (8013f24 <MAP_setWallCut+0x650>)
 8013dfc:	f7ec fa6c 	bl	80002d8 <__aeabi_dsub>
 8013e00:	4602      	mov	r2, r0
 8013e02:	460b      	mov	r3, r1
 8013e04:	4610      	mov	r0, r2
 8013e06:	4619      	mov	r1, r3
 8013e08:	f04f 0200 	mov.w	r2, #0
 8013e0c:	f04f 0300 	mov.w	r3, #0
 8013e10:	f7ec feaa 	bl	8000b68 <__aeabi_dcmpgt>
 8013e14:	4603      	mov	r3, r0
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d100      	bne.n	8013e1c <MAP_setWallCut+0x548>
					break;
 8013e1a:	e19d      	b.n	8014158 <MAP_setWallCut+0x884>
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x08;			// 北を向いているので西側の壁があるか
 8013e1c:	4b3f      	ldr	r3, [pc, #252]	@ (8013f1c <MAP_setWallCut+0x648>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7ec fbb9 	bl	8000598 <__aeabi_f2d>
 8013e26:	f04f 0200 	mov.w	r2, #0
 8013e2a:	4b3e      	ldr	r3, [pc, #248]	@ (8013f24 <MAP_setWallCut+0x650>)
 8013e2c:	f7ec fa54 	bl	80002d8 <__aeabi_dsub>
 8013e30:	4602      	mov	r2, r0
 8013e32:	460b      	mov	r3, r1
 8013e34:	4610      	mov	r0, r2
 8013e36:	4619      	mov	r1, r3
 8013e38:	f7ec fede 	bl	8000bf8 <__aeabi_d2uiz>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	b2db      	uxtb	r3, r3
 8013e40:	4618      	mov	r0, r3
 8013e42:	4b33      	ldr	r3, [pc, #204]	@ (8013f10 <MAP_setWallCut+0x63c>)
 8013e44:	edd3 7a00 	vldr	s15, [r3]
 8013e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013e4c:	edc7 7a00 	vstr	s15, [r7]
 8013e50:	783b      	ldrb	r3, [r7, #0]
 8013e52:	b2db      	uxtb	r3, r3
 8013e54:	4619      	mov	r1, r3
 8013e56:	4a32      	ldr	r2, [pc, #200]	@ (8013f20 <MAP_setWallCut+0x64c>)
 8013e58:	0143      	lsls	r3, r0, #5
 8013e5a:	4413      	add	r3, r2
 8013e5c:	440b      	add	r3, r1
 8013e5e:	781b      	ldrb	r3, [r3, #0]
 8013e60:	f003 0308 	and.w	r3, r3, #8
 8013e64:	73bb      	strb	r3, [r7, #14]
					break;
 8013e66:	e177      	b.n	8014158 <MAP_setWallCut+0x884>
					if( 0 < f_PosX-0.5 ) uc_val     = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-0.5)] & 0x01;			// 東を向いているので北側の壁があるか
 8013e68:	4b29      	ldr	r3, [pc, #164]	@ (8013f10 <MAP_setWallCut+0x63c>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f7ec fb93 	bl	8000598 <__aeabi_f2d>
 8013e72:	f04f 0200 	mov.w	r2, #0
 8013e76:	4b27      	ldr	r3, [pc, #156]	@ (8013f14 <MAP_setWallCut+0x640>)
 8013e78:	f7ec fa2e 	bl	80002d8 <__aeabi_dsub>
 8013e7c:	4602      	mov	r2, r0
 8013e7e:	460b      	mov	r3, r1
 8013e80:	4610      	mov	r0, r2
 8013e82:	4619      	mov	r1, r3
 8013e84:	f04f 0200 	mov.w	r2, #0
 8013e88:	f04f 0300 	mov.w	r3, #0
 8013e8c:	f7ec fe6c 	bl	8000b68 <__aeabi_dcmpgt>
 8013e90:	4603      	mov	r3, r0
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d024      	beq.n	8013ee0 <MAP_setWallCut+0x60c>
 8013e96:	4b21      	ldr	r3, [pc, #132]	@ (8013f1c <MAP_setWallCut+0x648>)
 8013e98:	edd3 7a00 	vldr	s15, [r3]
 8013e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013ea0:	edc7 7a00 	vstr	s15, [r7]
 8013ea4:	783b      	ldrb	r3, [r7, #0]
 8013ea6:	b2db      	uxtb	r3, r3
 8013ea8:	461c      	mov	r4, r3
 8013eaa:	4b19      	ldr	r3, [pc, #100]	@ (8013f10 <MAP_setWallCut+0x63c>)
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f7ec fb72 	bl	8000598 <__aeabi_f2d>
 8013eb4:	f04f 0200 	mov.w	r2, #0
 8013eb8:	4b16      	ldr	r3, [pc, #88]	@ (8013f14 <MAP_setWallCut+0x640>)
 8013eba:	f7ec fa0d 	bl	80002d8 <__aeabi_dsub>
 8013ebe:	4602      	mov	r2, r0
 8013ec0:	460b      	mov	r3, r1
 8013ec2:	4610      	mov	r0, r2
 8013ec4:	4619      	mov	r1, r3
 8013ec6:	f7ec fe97 	bl	8000bf8 <__aeabi_d2uiz>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	b2db      	uxtb	r3, r3
 8013ece:	4619      	mov	r1, r3
 8013ed0:	4a13      	ldr	r2, [pc, #76]	@ (8013f20 <MAP_setWallCut+0x64c>)
 8013ed2:	0163      	lsls	r3, r4, #5
 8013ed4:	4413      	add	r3, r2
 8013ed6:	440b      	add	r3, r1
 8013ed8:	781b      	ldrb	r3, [r3, #0]
 8013eda:	f003 0301 	and.w	r3, r3, #1
 8013ede:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x01;			// 東を向いているので北側の壁があるか
 8013ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8013f10 <MAP_setWallCut+0x63c>)
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f7ec fb57 	bl	8000598 <__aeabi_f2d>
 8013eea:	f04f 0200 	mov.w	r2, #0
 8013eee:	4b0d      	ldr	r3, [pc, #52]	@ (8013f24 <MAP_setWallCut+0x650>)
 8013ef0:	f7ec f9f2 	bl	80002d8 <__aeabi_dsub>
 8013ef4:	4602      	mov	r2, r0
 8013ef6:	460b      	mov	r3, r1
 8013ef8:	4610      	mov	r0, r2
 8013efa:	4619      	mov	r1, r3
 8013efc:	f04f 0200 	mov.w	r2, #0
 8013f00:	f04f 0300 	mov.w	r3, #0
 8013f04:	f7ec fe30 	bl	8000b68 <__aeabi_dcmpgt>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d10e      	bne.n	8013f2c <MAP_setWallCut+0x658>
					break;
 8013f0e:	e123      	b.n	8014158 <MAP_setWallCut+0x884>
 8013f10:	2001ac4c 	.word	0x2001ac4c
 8013f14:	3fe00000 	.word	0x3fe00000
 8013f18:	40400000 	.word	0x40400000
 8013f1c:	2001ac50 	.word	0x2001ac50
 8013f20:	2001b5a0 	.word	0x2001b5a0
 8013f24:	3ff80000 	.word	0x3ff80000
 8013f28:	2001ac54 	.word	0x2001ac54
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x01;			// 東を向いているので北側の壁があるか
 8013f2c:	4b97      	ldr	r3, [pc, #604]	@ (801418c <MAP_setWallCut+0x8b8>)
 8013f2e:	edd3 7a00 	vldr	s15, [r3]
 8013f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f36:	edc7 7a00 	vstr	s15, [r7]
 8013f3a:	783b      	ldrb	r3, [r7, #0]
 8013f3c:	b2db      	uxtb	r3, r3
 8013f3e:	461c      	mov	r4, r3
 8013f40:	4b93      	ldr	r3, [pc, #588]	@ (8014190 <MAP_setWallCut+0x8bc>)
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7ec fb27 	bl	8000598 <__aeabi_f2d>
 8013f4a:	f04f 0200 	mov.w	r2, #0
 8013f4e:	4b91      	ldr	r3, [pc, #580]	@ (8014194 <MAP_setWallCut+0x8c0>)
 8013f50:	f7ec f9c2 	bl	80002d8 <__aeabi_dsub>
 8013f54:	4602      	mov	r2, r0
 8013f56:	460b      	mov	r3, r1
 8013f58:	4610      	mov	r0, r2
 8013f5a:	4619      	mov	r1, r3
 8013f5c:	f7ec fe4c 	bl	8000bf8 <__aeabi_d2uiz>
 8013f60:	4603      	mov	r3, r0
 8013f62:	b2db      	uxtb	r3, r3
 8013f64:	4619      	mov	r1, r3
 8013f66:	4a8c      	ldr	r2, [pc, #560]	@ (8014198 <MAP_setWallCut+0x8c4>)
 8013f68:	0163      	lsls	r3, r4, #5
 8013f6a:	4413      	add	r3, r2
 8013f6c:	440b      	add	r3, r1
 8013f6e:	781b      	ldrb	r3, [r3, #0]
 8013f70:	f003 0301 	and.w	r3, r3, #1
 8013f74:	73bb      	strb	r3, [r7, #14]
					break;
 8013f76:	e0ef      	b.n	8014158 <MAP_setWallCut+0x884>
					if( MAP_Y_SIZE_REAL > f_PosY+0.5 ) uc_val     = g_SysMap[(uint8_t)(f_PosY+0.5)][(uint8_t)(f_PosX)] & 0x02;			// 南を向いているので東側の壁があるか
 8013f78:	4b84      	ldr	r3, [pc, #528]	@ (801418c <MAP_setWallCut+0x8b8>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7ec fb0b 	bl	8000598 <__aeabi_f2d>
 8013f82:	f04f 0200 	mov.w	r2, #0
 8013f86:	4b85      	ldr	r3, [pc, #532]	@ (801419c <MAP_setWallCut+0x8c8>)
 8013f88:	f7ec f9a8 	bl	80002dc <__adddf3>
 8013f8c:	4602      	mov	r2, r0
 8013f8e:	460b      	mov	r3, r1
 8013f90:	4610      	mov	r0, r2
 8013f92:	4619      	mov	r1, r3
 8013f94:	f04f 0200 	mov.w	r2, #0
 8013f98:	4b81      	ldr	r3, [pc, #516]	@ (80141a0 <MAP_setWallCut+0x8cc>)
 8013f9a:	f7ec fdc7 	bl	8000b2c <__aeabi_dcmplt>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d024      	beq.n	8013fee <MAP_setWallCut+0x71a>
 8013fa4:	4b79      	ldr	r3, [pc, #484]	@ (801418c <MAP_setWallCut+0x8b8>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f7ec faf5 	bl	8000598 <__aeabi_f2d>
 8013fae:	f04f 0200 	mov.w	r2, #0
 8013fb2:	4b7a      	ldr	r3, [pc, #488]	@ (801419c <MAP_setWallCut+0x8c8>)
 8013fb4:	f7ec f992 	bl	80002dc <__adddf3>
 8013fb8:	4602      	mov	r2, r0
 8013fba:	460b      	mov	r3, r1
 8013fbc:	4610      	mov	r0, r2
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	f7ec fe1a 	bl	8000bf8 <__aeabi_d2uiz>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	b2db      	uxtb	r3, r3
 8013fc8:	4618      	mov	r0, r3
 8013fca:	4b71      	ldr	r3, [pc, #452]	@ (8014190 <MAP_setWallCut+0x8bc>)
 8013fcc:	edd3 7a00 	vldr	s15, [r3]
 8013fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013fd4:	edc7 7a00 	vstr	s15, [r7]
 8013fd8:	783b      	ldrb	r3, [r7, #0]
 8013fda:	b2db      	uxtb	r3, r3
 8013fdc:	4619      	mov	r1, r3
 8013fde:	4a6e      	ldr	r2, [pc, #440]	@ (8014198 <MAP_setWallCut+0x8c4>)
 8013fe0:	0143      	lsls	r3, r0, #5
 8013fe2:	4413      	add	r3, r2
 8013fe4:	440b      	add	r3, r1
 8013fe6:	781b      	ldrb	r3, [r3, #0]
 8013fe8:	f003 0302 	and.w	r3, r3, #2
 8013fec:	73fb      	strb	r3, [r7, #15]
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x02;			// 南を向いているので東側の壁があるか
 8013fee:	4b67      	ldr	r3, [pc, #412]	@ (801418c <MAP_setWallCut+0x8b8>)
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7ec fad0 	bl	8000598 <__aeabi_f2d>
 8013ff8:	f04f 0200 	mov.w	r2, #0
 8013ffc:	4b65      	ldr	r3, [pc, #404]	@ (8014194 <MAP_setWallCut+0x8c0>)
 8013ffe:	f7ec f96d 	bl	80002dc <__adddf3>
 8014002:	4602      	mov	r2, r0
 8014004:	460b      	mov	r3, r1
 8014006:	4610      	mov	r0, r2
 8014008:	4619      	mov	r1, r3
 801400a:	f04f 0200 	mov.w	r2, #0
 801400e:	4b64      	ldr	r3, [pc, #400]	@ (80141a0 <MAP_setWallCut+0x8cc>)
 8014010:	f7ec fd8c 	bl	8000b2c <__aeabi_dcmplt>
 8014014:	4603      	mov	r3, r0
 8014016:	2b00      	cmp	r3, #0
 8014018:	d100      	bne.n	801401c <MAP_setWallCut+0x748>
					break;
 801401a:	e09d      	b.n	8014158 <MAP_setWallCut+0x884>
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x02;			// 南を向いているので東側の壁があるか
 801401c:	4b5b      	ldr	r3, [pc, #364]	@ (801418c <MAP_setWallCut+0x8b8>)
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	4618      	mov	r0, r3
 8014022:	f7ec fab9 	bl	8000598 <__aeabi_f2d>
 8014026:	f04f 0200 	mov.w	r2, #0
 801402a:	4b5a      	ldr	r3, [pc, #360]	@ (8014194 <MAP_setWallCut+0x8c0>)
 801402c:	f7ec f956 	bl	80002dc <__adddf3>
 8014030:	4602      	mov	r2, r0
 8014032:	460b      	mov	r3, r1
 8014034:	4610      	mov	r0, r2
 8014036:	4619      	mov	r1, r3
 8014038:	f7ec fdde 	bl	8000bf8 <__aeabi_d2uiz>
 801403c:	4603      	mov	r3, r0
 801403e:	b2db      	uxtb	r3, r3
 8014040:	4618      	mov	r0, r3
 8014042:	4b53      	ldr	r3, [pc, #332]	@ (8014190 <MAP_setWallCut+0x8bc>)
 8014044:	edd3 7a00 	vldr	s15, [r3]
 8014048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801404c:	edc7 7a00 	vstr	s15, [r7]
 8014050:	783b      	ldrb	r3, [r7, #0]
 8014052:	b2db      	uxtb	r3, r3
 8014054:	4619      	mov	r1, r3
 8014056:	4a50      	ldr	r2, [pc, #320]	@ (8014198 <MAP_setWallCut+0x8c4>)
 8014058:	0143      	lsls	r3, r0, #5
 801405a:	4413      	add	r3, r2
 801405c:	440b      	add	r3, r1
 801405e:	781b      	ldrb	r3, [r3, #0]
 8014060:	f003 0302 	and.w	r3, r3, #2
 8014064:	73bb      	strb	r3, [r7, #14]
					break;
 8014066:	e077      	b.n	8014158 <MAP_setWallCut+0x884>
					if( MAP_X_SIZE_REAL > f_PosX+0.5 ) uc_val     = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+0.5)] & 0x04;			// 西を向いているので南側の壁があるか
 8014068:	4b49      	ldr	r3, [pc, #292]	@ (8014190 <MAP_setWallCut+0x8bc>)
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	4618      	mov	r0, r3
 801406e:	f7ec fa93 	bl	8000598 <__aeabi_f2d>
 8014072:	f04f 0200 	mov.w	r2, #0
 8014076:	4b49      	ldr	r3, [pc, #292]	@ (801419c <MAP_setWallCut+0x8c8>)
 8014078:	f7ec f930 	bl	80002dc <__adddf3>
 801407c:	4602      	mov	r2, r0
 801407e:	460b      	mov	r3, r1
 8014080:	4610      	mov	r0, r2
 8014082:	4619      	mov	r1, r3
 8014084:	f04f 0200 	mov.w	r2, #0
 8014088:	4b45      	ldr	r3, [pc, #276]	@ (80141a0 <MAP_setWallCut+0x8cc>)
 801408a:	f7ec fd4f 	bl	8000b2c <__aeabi_dcmplt>
 801408e:	4603      	mov	r3, r0
 8014090:	2b00      	cmp	r3, #0
 8014092:	d024      	beq.n	80140de <MAP_setWallCut+0x80a>
 8014094:	4b3d      	ldr	r3, [pc, #244]	@ (801418c <MAP_setWallCut+0x8b8>)
 8014096:	edd3 7a00 	vldr	s15, [r3]
 801409a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801409e:	edc7 7a00 	vstr	s15, [r7]
 80140a2:	783b      	ldrb	r3, [r7, #0]
 80140a4:	b2db      	uxtb	r3, r3
 80140a6:	461c      	mov	r4, r3
 80140a8:	4b39      	ldr	r3, [pc, #228]	@ (8014190 <MAP_setWallCut+0x8bc>)
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	4618      	mov	r0, r3
 80140ae:	f7ec fa73 	bl	8000598 <__aeabi_f2d>
 80140b2:	f04f 0200 	mov.w	r2, #0
 80140b6:	4b39      	ldr	r3, [pc, #228]	@ (801419c <MAP_setWallCut+0x8c8>)
 80140b8:	f7ec f910 	bl	80002dc <__adddf3>
 80140bc:	4602      	mov	r2, r0
 80140be:	460b      	mov	r3, r1
 80140c0:	4610      	mov	r0, r2
 80140c2:	4619      	mov	r1, r3
 80140c4:	f7ec fd98 	bl	8000bf8 <__aeabi_d2uiz>
 80140c8:	4603      	mov	r3, r0
 80140ca:	b2db      	uxtb	r3, r3
 80140cc:	4619      	mov	r1, r3
 80140ce:	4a32      	ldr	r2, [pc, #200]	@ (8014198 <MAP_setWallCut+0x8c4>)
 80140d0:	0163      	lsls	r3, r4, #5
 80140d2:	4413      	add	r3, r2
 80140d4:	440b      	add	r3, r1
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	f003 0304 	and.w	r3, r3, #4
 80140dc:	73fb      	strb	r3, [r7, #15]
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x04;			// 西を向いているので南側の壁があるか
 80140de:	4b2c      	ldr	r3, [pc, #176]	@ (8014190 <MAP_setWallCut+0x8bc>)
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7ec fa58 	bl	8000598 <__aeabi_f2d>
 80140e8:	f04f 0200 	mov.w	r2, #0
 80140ec:	4b29      	ldr	r3, [pc, #164]	@ (8014194 <MAP_setWallCut+0x8c0>)
 80140ee:	f7ec f8f5 	bl	80002dc <__adddf3>
 80140f2:	4602      	mov	r2, r0
 80140f4:	460b      	mov	r3, r1
 80140f6:	4610      	mov	r0, r2
 80140f8:	4619      	mov	r1, r3
 80140fa:	f04f 0200 	mov.w	r2, #0
 80140fe:	4b28      	ldr	r3, [pc, #160]	@ (80141a0 <MAP_setWallCut+0x8cc>)
 8014100:	f7ec fd14 	bl	8000b2c <__aeabi_dcmplt>
 8014104:	4603      	mov	r3, r0
 8014106:	2b00      	cmp	r3, #0
 8014108:	d100      	bne.n	801410c <MAP_setWallCut+0x838>
					break;
 801410a:	e024      	b.n	8014156 <MAP_setWallCut+0x882>
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_SysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x04;			// 西を向いているので南側の壁があるか
 801410c:	4b1f      	ldr	r3, [pc, #124]	@ (801418c <MAP_setWallCut+0x8b8>)
 801410e:	edd3 7a00 	vldr	s15, [r3]
 8014112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014116:	edc7 7a00 	vstr	s15, [r7]
 801411a:	783b      	ldrb	r3, [r7, #0]
 801411c:	b2db      	uxtb	r3, r3
 801411e:	461c      	mov	r4, r3
 8014120:	4b1b      	ldr	r3, [pc, #108]	@ (8014190 <MAP_setWallCut+0x8bc>)
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	4618      	mov	r0, r3
 8014126:	f7ec fa37 	bl	8000598 <__aeabi_f2d>
 801412a:	f04f 0200 	mov.w	r2, #0
 801412e:	4b19      	ldr	r3, [pc, #100]	@ (8014194 <MAP_setWallCut+0x8c0>)
 8014130:	f7ec f8d4 	bl	80002dc <__adddf3>
 8014134:	4602      	mov	r2, r0
 8014136:	460b      	mov	r3, r1
 8014138:	4610      	mov	r0, r2
 801413a:	4619      	mov	r1, r3
 801413c:	f7ec fd5c 	bl	8000bf8 <__aeabi_d2uiz>
 8014140:	4603      	mov	r3, r0
 8014142:	b2db      	uxtb	r3, r3
 8014144:	4619      	mov	r1, r3
 8014146:	4a14      	ldr	r2, [pc, #80]	@ (8014198 <MAP_setWallCut+0x8c4>)
 8014148:	0163      	lsls	r3, r4, #5
 801414a:	4413      	add	r3, r2
 801414c:	440b      	add	r3, r1
 801414e:	781b      	ldrb	r3, [r3, #0]
 8014150:	f003 0304 	and.w	r3, r3, #4
 8014154:	73bb      	strb	r3, [r7, #14]
					break;
 8014156:	bf00      	nop
			if( ( uc_val != 0 ) || ( ( uc_val != 0 ) && ( uc_valPrev != 0 ) ) ){
 8014158:	7bfb      	ldrb	r3, [r7, #15]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d105      	bne.n	801416a <MAP_setWallCut+0x896>
 801415e:	7bfb      	ldrb	r3, [r7, #15]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d00c      	beq.n	801417e <MAP_setWallCut+0x8aa>
 8014164:	7bbb      	ldrb	r3, [r7, #14]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d009      	beq.n	801417e <MAP_setWallCut+0x8aa>
				MOT_setWallEdgeType( MOT_WALL_EDGE_LEFT );		// 壁切れ補正を実施する
 801416a:	2002      	movs	r0, #2
 801416c:	f7fe fb4c 	bl	8012808 <MOT_setWallEdgeType>
				bl_wallCut = TRUE;
 8014170:	2301      	movs	r3, #1
 8014172:	737b      	strb	r3, [r7, #13]
			break;
 8014174:	e003      	b.n	801417e <MAP_setWallCut+0x8aa>
			break;
 8014176:	bf00      	nop
 8014178:	e002      	b.n	8014180 <MAP_setWallCut+0x8ac>
			break;
 801417a:	bf00      	nop
 801417c:	e000      	b.n	8014180 <MAP_setWallCut+0x8ac>
			break;
 801417e:	bf00      	nop
	}
	
	return bl_wallCut;
 8014180:	7b7b      	ldrb	r3, [r7, #13]
}
 8014182:	4618      	mov	r0, r3
 8014184:	3714      	adds	r7, #20
 8014186:	46bd      	mov	sp, r7
 8014188:	bd90      	pop	{r4, r7, pc}
 801418a:	bf00      	nop
 801418c:	2001ac50 	.word	0x2001ac50
 8014190:	2001ac4c 	.word	0x2001ac4c
 8014194:	3ff80000 	.word	0x3ff80000
 8014198:	2001b5a0 	.word	0x2001b5a0
 801419c:	3fe00000 	.word	0x3fe00000
 80141a0:	40400000 	.word	0x40400000

080141a4 <MAP_setCmdPos>:

void MAP_setCmdPos( uint8_t uc_x, uint8_t uc_y, enMAP_HEAD_DIR en_dir )
{
 80141a4:	b480      	push	{r7}
 80141a6:	b083      	sub	sp, #12
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	4603      	mov	r3, r0
 80141ac:	71fb      	strb	r3, [r7, #7]
 80141ae:	460b      	mov	r3, r1
 80141b0:	71bb      	strb	r3, [r7, #6]
 80141b2:	4613      	mov	r3, r2
 80141b4:	717b      	strb	r3, [r7, #5]
	f_PosX   = (float)uc_x;
 80141b6:	79fb      	ldrb	r3, [r7, #7]
 80141b8:	ee07 3a90 	vmov	s15, r3
 80141bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141c0:	4b0b      	ldr	r3, [pc, #44]	@ (80141f0 <MAP_setCmdPos+0x4c>)
 80141c2:	edc3 7a00 	vstr	s15, [r3]
	f_PosX   = (float)uc_y;
 80141c6:	79bb      	ldrb	r3, [r7, #6]
 80141c8:	ee07 3a90 	vmov	s15, r3
 80141cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141d0:	4b07      	ldr	r3, [pc, #28]	@ (80141f0 <MAP_setCmdPos+0x4c>)
 80141d2:	edc3 7a00 	vstr	s15, [r3]
	s_PosDir = (int16_t)(en_dir * 2);	// 進行方向（[0]北 [1]北東 [2]東 [3]南東 [4]南 [5]南西 [6]西 [7]北西 ）、2倍すると丁度値が合致する
 80141d6:	797b      	ldrb	r3, [r7, #5]
 80141d8:	b29b      	uxth	r3, r3
 80141da:	005b      	lsls	r3, r3, #1
 80141dc:	b29b      	uxth	r3, r3
 80141de:	b21a      	sxth	r2, r3
 80141e0:	4b04      	ldr	r3, [pc, #16]	@ (80141f4 <MAP_setCmdPos+0x50>)
 80141e2:	801a      	strh	r2, [r3, #0]
}
 80141e4:	bf00      	nop
 80141e6:	370c      	adds	r7, #12
 80141e8:	46bd      	mov	sp, r7
 80141ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ee:	4770      	bx	lr
 80141f0:	2001ac4c 	.word	0x2001ac4c
 80141f4:	2001ac54 	.word	0x2001ac54

080141f8 <MAP_showCmdLog>:

void MAP_showCmdLog( void )
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b082      	sub	sp, #8
 80141fc:	af00      	add	r7, sp, #0
	uint16_t i=0;
 80141fe:	2300      	movs	r3, #0
 8014200:	80fb      	strh	r3, [r7, #6]
	
	/* 超信地旋回コマンド */
	while(1){
		
		printf("dcom[%4d] = %02d  \n\r",i,dcom[i]);
 8014202:	88f9      	ldrh	r1, [r7, #6]
 8014204:	88fb      	ldrh	r3, [r7, #6]
 8014206:	4a1e      	ldr	r2, [pc, #120]	@ (8014280 <MAP_showCmdLog+0x88>)
 8014208:	5cd3      	ldrb	r3, [r2, r3]
 801420a:	461a      	mov	r2, r3
 801420c:	481d      	ldr	r0, [pc, #116]	@ (8014284 <MAP_showCmdLog+0x8c>)
 801420e:	f009 fd8d 	bl	801dd2c <iprintf>
		if( dcom[i] == CEND ) break;
 8014212:	88fb      	ldrh	r3, [r7, #6]
 8014214:	4a1a      	ldr	r2, [pc, #104]	@ (8014280 <MAP_showCmdLog+0x88>)
 8014216:	5cd3      	ldrb	r3, [r2, r3]
 8014218:	2bfa      	cmp	r3, #250	@ 0xfa
 801421a:	d003      	beq.n	8014224 <MAP_showCmdLog+0x2c>
		i++;
 801421c:	88fb      	ldrh	r3, [r7, #6]
 801421e:	3301      	adds	r3, #1
 8014220:	80fb      	strh	r3, [r7, #6]
		printf("dcom[%4d] = %02d  \n\r",i,dcom[i]);
 8014222:	e7ee      	b.n	8014202 <MAP_showCmdLog+0xa>
		if( dcom[i] == CEND ) break;
 8014224:	bf00      	nop
	}
	i=0;
 8014226:	2300      	movs	r3, #0
 8014228:	80fb      	strh	r3, [r7, #6]
	
	/* スラロームコマンド */
	while(1){
		
		printf("scom[%4d] = %02d  \n\r",i,scom[i]);
 801422a:	88f9      	ldrh	r1, [r7, #6]
 801422c:	88fb      	ldrh	r3, [r7, #6]
 801422e:	4a16      	ldr	r2, [pc, #88]	@ (8014288 <MAP_showCmdLog+0x90>)
 8014230:	5cd3      	ldrb	r3, [r2, r3]
 8014232:	461a      	mov	r2, r3
 8014234:	4815      	ldr	r0, [pc, #84]	@ (801428c <MAP_showCmdLog+0x94>)
 8014236:	f009 fd79 	bl	801dd2c <iprintf>
		if( scom[i] == CEND ) break;
 801423a:	88fb      	ldrh	r3, [r7, #6]
 801423c:	4a12      	ldr	r2, [pc, #72]	@ (8014288 <MAP_showCmdLog+0x90>)
 801423e:	5cd3      	ldrb	r3, [r2, r3]
 8014240:	2bfa      	cmp	r3, #250	@ 0xfa
 8014242:	d003      	beq.n	801424c <MAP_showCmdLog+0x54>
		i++;
 8014244:	88fb      	ldrh	r3, [r7, #6]
 8014246:	3301      	adds	r3, #1
 8014248:	80fb      	strh	r3, [r7, #6]
		printf("scom[%4d] = %02d  \n\r",i,scom[i]);
 801424a:	e7ee      	b.n	801422a <MAP_showCmdLog+0x32>
		if( scom[i] == CEND ) break;
 801424c:	bf00      	nop
	}
	i=0;
 801424e:	2300      	movs	r3, #0
 8014250:	80fb      	strh	r3, [r7, #6]

	/* 斜め走行コマンド */
	while(1){
		
		printf("tcom[%4d] = %02d  \n\r",i,tcom[i]);
 8014252:	88f9      	ldrh	r1, [r7, #6]
 8014254:	88fb      	ldrh	r3, [r7, #6]
 8014256:	4a0e      	ldr	r2, [pc, #56]	@ (8014290 <MAP_showCmdLog+0x98>)
 8014258:	5cd3      	ldrb	r3, [r2, r3]
 801425a:	461a      	mov	r2, r3
 801425c:	480d      	ldr	r0, [pc, #52]	@ (8014294 <MAP_showCmdLog+0x9c>)
 801425e:	f009 fd65 	bl	801dd2c <iprintf>
		if( tcom[i] == CEND ) break;
 8014262:	88fb      	ldrh	r3, [r7, #6]
 8014264:	4a0a      	ldr	r2, [pc, #40]	@ (8014290 <MAP_showCmdLog+0x98>)
 8014266:	5cd3      	ldrb	r3, [r2, r3]
 8014268:	2bfa      	cmp	r3, #250	@ 0xfa
 801426a:	d003      	beq.n	8014274 <MAP_showCmdLog+0x7c>
		i++;
 801426c:	88fb      	ldrh	r3, [r7, #6]
 801426e:	3301      	adds	r3, #1
 8014270:	80fb      	strh	r3, [r7, #6]
		printf("tcom[%4d] = %02d  \n\r",i,tcom[i]);
 8014272:	e7ee      	b.n	8014252 <MAP_showCmdLog+0x5a>
		if( tcom[i] == CEND ) break;
 8014274:	bf00      	nop
	}
}
 8014276:	bf00      	nop
 8014278:	3708      	adds	r7, #8
 801427a:	46bd      	mov	sp, r7
 801427c:	bd80      	pop	{r7, pc}
 801427e:	bf00      	nop
 8014280:	20017c48 	.word	0x20017c48
 8014284:	08021d8c 	.word	0x08021d8c
 8014288:	20018c48 	.word	0x20018c48
 801428c:	08021da4 	.word	0x08021da4
 8014290:	20019c48 	.word	0x20019c48
 8014294:	08021dbc 	.word	0x08021dbc

08014298 <MAP_makeCmdList>:
	uint8_t uc_staY,					///< [in] 開始Y座標
	enMAP_HEAD_DIR en_staDir,		///< [in] 開始時の方向
	uint8_t uc_endX,					///< [in] 終了X座標
	uint8_t uc_endY,					///< [in] 終了Y座標
	enMAP_HEAD_DIR* en_endDir		///< [out] 終了時の方向
){
 8014298:	b490      	push	{r4, r7}
 801429a:	b086      	sub	sp, #24
 801429c:	af00      	add	r7, sp, #0
 801429e:	4604      	mov	r4, r0
 80142a0:	4608      	mov	r0, r1
 80142a2:	4611      	mov	r1, r2
 80142a4:	461a      	mov	r2, r3
 80142a6:	4623      	mov	r3, r4
 80142a8:	71fb      	strb	r3, [r7, #7]
 80142aa:	4603      	mov	r3, r0
 80142ac:	71bb      	strb	r3, [r7, #6]
 80142ae:	460b      	mov	r3, r1
 80142b0:	717b      	strb	r3, [r7, #5]
 80142b2:	4613      	mov	r3, r2
 80142b4:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_nowDir;									// 現在マウスの向いている絶対方向
	enMAP_HEAD_DIR	en_tempDir;									// 相対方向
//	uint16_t			i;											// roop
	
	/* 前進ステップ数を初期化する */
	uc_goStep = 0;
 80142b6:	2300      	movs	r3, #0
 80142b8:	75fb      	strb	r3, [r7, #23]
	us_pt = 0;
 80142ba:	2300      	movs	r3, #0
 80142bc:	82bb      	strh	r3, [r7, #20]

	/* 迷路情報からコマンド作成 */
	while(1){	
		us_high = us_Cmap[uc_staY][uc_staX]-1;
 80142be:	79ba      	ldrb	r2, [r7, #6]
 80142c0:	79fb      	ldrb	r3, [r7, #7]
 80142c2:	499f      	ldr	r1, [pc, #636]	@ (8014540 <MAP_makeCmdList+0x2a8>)
 80142c4:	0152      	lsls	r2, r2, #5
 80142c6:	4413      	add	r3, r2
 80142c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80142cc:	3b01      	subs	r3, #1
 80142ce:	823b      	strh	r3, [r7, #16]
		if (en_staDir == NORTH){
 80142d0:	797b      	ldrb	r3, [r7, #5]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d164      	bne.n	80143a0 <MAP_makeCmdList+0x108>
			if     (((g_SysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_Cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 80142d6:	79ba      	ldrb	r2, [r7, #6]
 80142d8:	79fb      	ldrb	r3, [r7, #7]
 80142da:	499a      	ldr	r1, [pc, #616]	@ (8014544 <MAP_makeCmdList+0x2ac>)
 80142dc:	0152      	lsls	r2, r2, #5
 80142de:	440a      	add	r2, r1
 80142e0:	4413      	add	r3, r2
 80142e2:	781b      	ldrb	r3, [r3, #0]
 80142e4:	f003 0311 	and.w	r3, r3, #17
 80142e8:	2b10      	cmp	r3, #16
 80142ea:	d10d      	bne.n	8014308 <MAP_makeCmdList+0x70>
 80142ec:	79bb      	ldrb	r3, [r7, #6]
 80142ee:	1c5a      	adds	r2, r3, #1
 80142f0:	79fb      	ldrb	r3, [r7, #7]
 80142f2:	4993      	ldr	r1, [pc, #588]	@ (8014540 <MAP_makeCmdList+0x2a8>)
 80142f4:	0152      	lsls	r2, r2, #5
 80142f6:	4413      	add	r3, r2
 80142f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80142fc:	8a3a      	ldrh	r2, [r7, #16]
 80142fe:	429a      	cmp	r2, r3
 8014300:	d102      	bne.n	8014308 <MAP_makeCmdList+0x70>
 8014302:	2300      	movs	r3, #0
 8014304:	74fb      	strb	r3, [r7, #19]
 8014306:	e187      	b.n	8014618 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_Cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 8014308:	79ba      	ldrb	r2, [r7, #6]
 801430a:	79fb      	ldrb	r3, [r7, #7]
 801430c:	498d      	ldr	r1, [pc, #564]	@ (8014544 <MAP_makeCmdList+0x2ac>)
 801430e:	0152      	lsls	r2, r2, #5
 8014310:	440a      	add	r2, r1
 8014312:	4413      	add	r3, r2
 8014314:	781b      	ldrb	r3, [r3, #0]
 8014316:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 801431a:	2b20      	cmp	r3, #32
 801431c:	d10d      	bne.n	801433a <MAP_makeCmdList+0xa2>
 801431e:	79ba      	ldrb	r2, [r7, #6]
 8014320:	79fb      	ldrb	r3, [r7, #7]
 8014322:	3301      	adds	r3, #1
 8014324:	4986      	ldr	r1, [pc, #536]	@ (8014540 <MAP_makeCmdList+0x2a8>)
 8014326:	0152      	lsls	r2, r2, #5
 8014328:	4413      	add	r3, r2
 801432a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801432e:	8a3a      	ldrh	r2, [r7, #16]
 8014330:	429a      	cmp	r2, r3
 8014332:	d102      	bne.n	801433a <MAP_makeCmdList+0xa2>
 8014334:	2301      	movs	r3, #1
 8014336:	74fb      	strb	r3, [r7, #19]
 8014338:	e16e      	b.n	8014618 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_Cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 801433a:	79ba      	ldrb	r2, [r7, #6]
 801433c:	79fb      	ldrb	r3, [r7, #7]
 801433e:	4981      	ldr	r1, [pc, #516]	@ (8014544 <MAP_makeCmdList+0x2ac>)
 8014340:	0152      	lsls	r2, r2, #5
 8014342:	440a      	add	r2, r1
 8014344:	4413      	add	r3, r2
 8014346:	781b      	ldrb	r3, [r3, #0]
 8014348:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 801434c:	2b80      	cmp	r3, #128	@ 0x80
 801434e:	d10d      	bne.n	801436c <MAP_makeCmdList+0xd4>
 8014350:	79ba      	ldrb	r2, [r7, #6]
 8014352:	79fb      	ldrb	r3, [r7, #7]
 8014354:	3b01      	subs	r3, #1
 8014356:	497a      	ldr	r1, [pc, #488]	@ (8014540 <MAP_makeCmdList+0x2a8>)
 8014358:	0152      	lsls	r2, r2, #5
 801435a:	4413      	add	r3, r2
 801435c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014360:	8a3a      	ldrh	r2, [r7, #16]
 8014362:	429a      	cmp	r2, r3
 8014364:	d102      	bne.n	801436c <MAP_makeCmdList+0xd4>
 8014366:	2303      	movs	r3, #3
 8014368:	74fb      	strb	r3, [r7, #19]
 801436a:	e155      	b.n	8014618 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_Cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 801436c:	79ba      	ldrb	r2, [r7, #6]
 801436e:	79fb      	ldrb	r3, [r7, #7]
 8014370:	4974      	ldr	r1, [pc, #464]	@ (8014544 <MAP_makeCmdList+0x2ac>)
 8014372:	0152      	lsls	r2, r2, #5
 8014374:	440a      	add	r2, r1
 8014376:	4413      	add	r3, r2
 8014378:	781b      	ldrb	r3, [r3, #0]
 801437a:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801437e:	2b40      	cmp	r3, #64	@ 0x40
 8014380:	d10d      	bne.n	801439e <MAP_makeCmdList+0x106>
 8014382:	79bb      	ldrb	r3, [r7, #6]
 8014384:	1e5a      	subs	r2, r3, #1
 8014386:	79fb      	ldrb	r3, [r7, #7]
 8014388:	496d      	ldr	r1, [pc, #436]	@ (8014540 <MAP_makeCmdList+0x2a8>)
 801438a:	0152      	lsls	r2, r2, #5
 801438c:	4413      	add	r3, r2
 801438e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014392:	8a3a      	ldrh	r2, [r7, #16]
 8014394:	429a      	cmp	r2, r3
 8014396:	d102      	bne.n	801439e <MAP_makeCmdList+0x106>
 8014398:	2302      	movs	r3, #2
 801439a:	74fb      	strb	r3, [r7, #19]
 801439c:	e13c      	b.n	8014618 <MAP_makeCmdList+0x380>
			else   while(1);
 801439e:	e7fe      	b.n	801439e <MAP_makeCmdList+0x106>
		}else if (en_staDir == EAST){
 80143a0:	797b      	ldrb	r3, [r7, #5]
 80143a2:	2b01      	cmp	r3, #1
 80143a4:	d164      	bne.n	8014470 <MAP_makeCmdList+0x1d8>
			if     (((g_SysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_Cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 80143a6:	79ba      	ldrb	r2, [r7, #6]
 80143a8:	79fb      	ldrb	r3, [r7, #7]
 80143aa:	4966      	ldr	r1, [pc, #408]	@ (8014544 <MAP_makeCmdList+0x2ac>)
 80143ac:	0152      	lsls	r2, r2, #5
 80143ae:	440a      	add	r2, r1
 80143b0:	4413      	add	r3, r2
 80143b2:	781b      	ldrb	r3, [r3, #0]
 80143b4:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80143b8:	2b20      	cmp	r3, #32
 80143ba:	d10d      	bne.n	80143d8 <MAP_makeCmdList+0x140>
 80143bc:	79ba      	ldrb	r2, [r7, #6]
 80143be:	79fb      	ldrb	r3, [r7, #7]
 80143c0:	3301      	adds	r3, #1
 80143c2:	495f      	ldr	r1, [pc, #380]	@ (8014540 <MAP_makeCmdList+0x2a8>)
 80143c4:	0152      	lsls	r2, r2, #5
 80143c6:	4413      	add	r3, r2
 80143c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80143cc:	8a3a      	ldrh	r2, [r7, #16]
 80143ce:	429a      	cmp	r2, r3
 80143d0:	d102      	bne.n	80143d8 <MAP_makeCmdList+0x140>
 80143d2:	2301      	movs	r3, #1
 80143d4:	74fb      	strb	r3, [r7, #19]
 80143d6:	e11f      	b.n	8014618 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_Cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 80143d8:	79ba      	ldrb	r2, [r7, #6]
 80143da:	79fb      	ldrb	r3, [r7, #7]
 80143dc:	4959      	ldr	r1, [pc, #356]	@ (8014544 <MAP_makeCmdList+0x2ac>)
 80143de:	0152      	lsls	r2, r2, #5
 80143e0:	440a      	add	r2, r1
 80143e2:	4413      	add	r3, r2
 80143e4:	781b      	ldrb	r3, [r3, #0]
 80143e6:	f003 0311 	and.w	r3, r3, #17
 80143ea:	2b10      	cmp	r3, #16
 80143ec:	d10d      	bne.n	801440a <MAP_makeCmdList+0x172>
 80143ee:	79bb      	ldrb	r3, [r7, #6]
 80143f0:	1c5a      	adds	r2, r3, #1
 80143f2:	79fb      	ldrb	r3, [r7, #7]
 80143f4:	4952      	ldr	r1, [pc, #328]	@ (8014540 <MAP_makeCmdList+0x2a8>)
 80143f6:	0152      	lsls	r2, r2, #5
 80143f8:	4413      	add	r3, r2
 80143fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80143fe:	8a3a      	ldrh	r2, [r7, #16]
 8014400:	429a      	cmp	r2, r3
 8014402:	d102      	bne.n	801440a <MAP_makeCmdList+0x172>
 8014404:	2300      	movs	r3, #0
 8014406:	74fb      	strb	r3, [r7, #19]
 8014408:	e106      	b.n	8014618 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_Cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 801440a:	79ba      	ldrb	r2, [r7, #6]
 801440c:	79fb      	ldrb	r3, [r7, #7]
 801440e:	494d      	ldr	r1, [pc, #308]	@ (8014544 <MAP_makeCmdList+0x2ac>)
 8014410:	0152      	lsls	r2, r2, #5
 8014412:	440a      	add	r2, r1
 8014414:	4413      	add	r3, r2
 8014416:	781b      	ldrb	r3, [r3, #0]
 8014418:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801441c:	2b40      	cmp	r3, #64	@ 0x40
 801441e:	d10d      	bne.n	801443c <MAP_makeCmdList+0x1a4>
 8014420:	79bb      	ldrb	r3, [r7, #6]
 8014422:	1e5a      	subs	r2, r3, #1
 8014424:	79fb      	ldrb	r3, [r7, #7]
 8014426:	4946      	ldr	r1, [pc, #280]	@ (8014540 <MAP_makeCmdList+0x2a8>)
 8014428:	0152      	lsls	r2, r2, #5
 801442a:	4413      	add	r3, r2
 801442c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014430:	8a3a      	ldrh	r2, [r7, #16]
 8014432:	429a      	cmp	r2, r3
 8014434:	d102      	bne.n	801443c <MAP_makeCmdList+0x1a4>
 8014436:	2302      	movs	r3, #2
 8014438:	74fb      	strb	r3, [r7, #19]
 801443a:	e0ed      	b.n	8014618 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_Cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 801443c:	79ba      	ldrb	r2, [r7, #6]
 801443e:	79fb      	ldrb	r3, [r7, #7]
 8014440:	4940      	ldr	r1, [pc, #256]	@ (8014544 <MAP_makeCmdList+0x2ac>)
 8014442:	0152      	lsls	r2, r2, #5
 8014444:	440a      	add	r2, r1
 8014446:	4413      	add	r3, r2
 8014448:	781b      	ldrb	r3, [r3, #0]
 801444a:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 801444e:	2b80      	cmp	r3, #128	@ 0x80
 8014450:	d10d      	bne.n	801446e <MAP_makeCmdList+0x1d6>
 8014452:	79ba      	ldrb	r2, [r7, #6]
 8014454:	79fb      	ldrb	r3, [r7, #7]
 8014456:	3b01      	subs	r3, #1
 8014458:	4939      	ldr	r1, [pc, #228]	@ (8014540 <MAP_makeCmdList+0x2a8>)
 801445a:	0152      	lsls	r2, r2, #5
 801445c:	4413      	add	r3, r2
 801445e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014462:	8a3a      	ldrh	r2, [r7, #16]
 8014464:	429a      	cmp	r2, r3
 8014466:	d102      	bne.n	801446e <MAP_makeCmdList+0x1d6>
 8014468:	2303      	movs	r3, #3
 801446a:	74fb      	strb	r3, [r7, #19]
 801446c:	e0d4      	b.n	8014618 <MAP_makeCmdList+0x380>
			else   while(1);
 801446e:	e7fe      	b.n	801446e <MAP_makeCmdList+0x1d6>
		}else if (en_staDir == SOUTH){
 8014470:	797b      	ldrb	r3, [r7, #5]
 8014472:	2b02      	cmp	r3, #2
 8014474:	d168      	bne.n	8014548 <MAP_makeCmdList+0x2b0>
			if     (((g_SysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_Cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 8014476:	79ba      	ldrb	r2, [r7, #6]
 8014478:	79fb      	ldrb	r3, [r7, #7]
 801447a:	4932      	ldr	r1, [pc, #200]	@ (8014544 <MAP_makeCmdList+0x2ac>)
 801447c:	0152      	lsls	r2, r2, #5
 801447e:	440a      	add	r2, r1
 8014480:	4413      	add	r3, r2
 8014482:	781b      	ldrb	r3, [r3, #0]
 8014484:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8014488:	2b40      	cmp	r3, #64	@ 0x40
 801448a:	d10d      	bne.n	80144a8 <MAP_makeCmdList+0x210>
 801448c:	79bb      	ldrb	r3, [r7, #6]
 801448e:	1e5a      	subs	r2, r3, #1
 8014490:	79fb      	ldrb	r3, [r7, #7]
 8014492:	492b      	ldr	r1, [pc, #172]	@ (8014540 <MAP_makeCmdList+0x2a8>)
 8014494:	0152      	lsls	r2, r2, #5
 8014496:	4413      	add	r3, r2
 8014498:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801449c:	8a3a      	ldrh	r2, [r7, #16]
 801449e:	429a      	cmp	r2, r3
 80144a0:	d102      	bne.n	80144a8 <MAP_makeCmdList+0x210>
 80144a2:	2302      	movs	r3, #2
 80144a4:	74fb      	strb	r3, [r7, #19]
 80144a6:	e0b7      	b.n	8014618 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_Cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 80144a8:	79ba      	ldrb	r2, [r7, #6]
 80144aa:	79fb      	ldrb	r3, [r7, #7]
 80144ac:	4925      	ldr	r1, [pc, #148]	@ (8014544 <MAP_makeCmdList+0x2ac>)
 80144ae:	0152      	lsls	r2, r2, #5
 80144b0:	440a      	add	r2, r1
 80144b2:	4413      	add	r3, r2
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80144ba:	2b20      	cmp	r3, #32
 80144bc:	d10d      	bne.n	80144da <MAP_makeCmdList+0x242>
 80144be:	79ba      	ldrb	r2, [r7, #6]
 80144c0:	79fb      	ldrb	r3, [r7, #7]
 80144c2:	3301      	adds	r3, #1
 80144c4:	491e      	ldr	r1, [pc, #120]	@ (8014540 <MAP_makeCmdList+0x2a8>)
 80144c6:	0152      	lsls	r2, r2, #5
 80144c8:	4413      	add	r3, r2
 80144ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80144ce:	8a3a      	ldrh	r2, [r7, #16]
 80144d0:	429a      	cmp	r2, r3
 80144d2:	d102      	bne.n	80144da <MAP_makeCmdList+0x242>
 80144d4:	2301      	movs	r3, #1
 80144d6:	74fb      	strb	r3, [r7, #19]
 80144d8:	e09e      	b.n	8014618 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_Cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 80144da:	79ba      	ldrb	r2, [r7, #6]
 80144dc:	79fb      	ldrb	r3, [r7, #7]
 80144de:	4919      	ldr	r1, [pc, #100]	@ (8014544 <MAP_makeCmdList+0x2ac>)
 80144e0:	0152      	lsls	r2, r2, #5
 80144e2:	440a      	add	r2, r1
 80144e4:	4413      	add	r3, r2
 80144e6:	781b      	ldrb	r3, [r3, #0]
 80144e8:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 80144ec:	2b80      	cmp	r3, #128	@ 0x80
 80144ee:	d10d      	bne.n	801450c <MAP_makeCmdList+0x274>
 80144f0:	79ba      	ldrb	r2, [r7, #6]
 80144f2:	79fb      	ldrb	r3, [r7, #7]
 80144f4:	3b01      	subs	r3, #1
 80144f6:	4912      	ldr	r1, [pc, #72]	@ (8014540 <MAP_makeCmdList+0x2a8>)
 80144f8:	0152      	lsls	r2, r2, #5
 80144fa:	4413      	add	r3, r2
 80144fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014500:	8a3a      	ldrh	r2, [r7, #16]
 8014502:	429a      	cmp	r2, r3
 8014504:	d102      	bne.n	801450c <MAP_makeCmdList+0x274>
 8014506:	2303      	movs	r3, #3
 8014508:	74fb      	strb	r3, [r7, #19]
 801450a:	e085      	b.n	8014618 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_Cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 801450c:	79ba      	ldrb	r2, [r7, #6]
 801450e:	79fb      	ldrb	r3, [r7, #7]
 8014510:	490c      	ldr	r1, [pc, #48]	@ (8014544 <MAP_makeCmdList+0x2ac>)
 8014512:	0152      	lsls	r2, r2, #5
 8014514:	440a      	add	r2, r1
 8014516:	4413      	add	r3, r2
 8014518:	781b      	ldrb	r3, [r3, #0]
 801451a:	f003 0311 	and.w	r3, r3, #17
 801451e:	2b10      	cmp	r3, #16
 8014520:	d10d      	bne.n	801453e <MAP_makeCmdList+0x2a6>
 8014522:	79bb      	ldrb	r3, [r7, #6]
 8014524:	1c5a      	adds	r2, r3, #1
 8014526:	79fb      	ldrb	r3, [r7, #7]
 8014528:	4905      	ldr	r1, [pc, #20]	@ (8014540 <MAP_makeCmdList+0x2a8>)
 801452a:	0152      	lsls	r2, r2, #5
 801452c:	4413      	add	r3, r2
 801452e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014532:	8a3a      	ldrh	r2, [r7, #16]
 8014534:	429a      	cmp	r2, r3
 8014536:	d102      	bne.n	801453e <MAP_makeCmdList+0x2a6>
 8014538:	2300      	movs	r3, #0
 801453a:	74fb      	strb	r3, [r7, #19]
 801453c:	e06c      	b.n	8014618 <MAP_makeCmdList+0x380>
			else   while(1);
 801453e:	e7fe      	b.n	801453e <MAP_makeCmdList+0x2a6>
 8014540:	2001ada0 	.word	0x2001ada0
 8014544:	2001b5a0 	.word	0x2001b5a0
		}else if (en_staDir == WEST){
 8014548:	797b      	ldrb	r3, [r7, #5]
 801454a:	2b03      	cmp	r3, #3
 801454c:	d164      	bne.n	8014618 <MAP_makeCmdList+0x380>
			if     (((g_SysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_Cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 801454e:	79ba      	ldrb	r2, [r7, #6]
 8014550:	79fb      	ldrb	r3, [r7, #7]
 8014552:	4979      	ldr	r1, [pc, #484]	@ (8014738 <MAP_makeCmdList+0x4a0>)
 8014554:	0152      	lsls	r2, r2, #5
 8014556:	440a      	add	r2, r1
 8014558:	4413      	add	r3, r2
 801455a:	781b      	ldrb	r3, [r3, #0]
 801455c:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 8014560:	2b80      	cmp	r3, #128	@ 0x80
 8014562:	d10d      	bne.n	8014580 <MAP_makeCmdList+0x2e8>
 8014564:	79ba      	ldrb	r2, [r7, #6]
 8014566:	79fb      	ldrb	r3, [r7, #7]
 8014568:	3b01      	subs	r3, #1
 801456a:	4974      	ldr	r1, [pc, #464]	@ (801473c <MAP_makeCmdList+0x4a4>)
 801456c:	0152      	lsls	r2, r2, #5
 801456e:	4413      	add	r3, r2
 8014570:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014574:	8a3a      	ldrh	r2, [r7, #16]
 8014576:	429a      	cmp	r2, r3
 8014578:	d102      	bne.n	8014580 <MAP_makeCmdList+0x2e8>
 801457a:	2303      	movs	r3, #3
 801457c:	74fb      	strb	r3, [r7, #19]
 801457e:	e04b      	b.n	8014618 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_Cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 8014580:	79ba      	ldrb	r2, [r7, #6]
 8014582:	79fb      	ldrb	r3, [r7, #7]
 8014584:	496c      	ldr	r1, [pc, #432]	@ (8014738 <MAP_makeCmdList+0x4a0>)
 8014586:	0152      	lsls	r2, r2, #5
 8014588:	440a      	add	r2, r1
 801458a:	4413      	add	r3, r2
 801458c:	781b      	ldrb	r3, [r3, #0]
 801458e:	f003 0311 	and.w	r3, r3, #17
 8014592:	2b10      	cmp	r3, #16
 8014594:	d10d      	bne.n	80145b2 <MAP_makeCmdList+0x31a>
 8014596:	79bb      	ldrb	r3, [r7, #6]
 8014598:	1c5a      	adds	r2, r3, #1
 801459a:	79fb      	ldrb	r3, [r7, #7]
 801459c:	4967      	ldr	r1, [pc, #412]	@ (801473c <MAP_makeCmdList+0x4a4>)
 801459e:	0152      	lsls	r2, r2, #5
 80145a0:	4413      	add	r3, r2
 80145a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80145a6:	8a3a      	ldrh	r2, [r7, #16]
 80145a8:	429a      	cmp	r2, r3
 80145aa:	d102      	bne.n	80145b2 <MAP_makeCmdList+0x31a>
 80145ac:	2300      	movs	r3, #0
 80145ae:	74fb      	strb	r3, [r7, #19]
 80145b0:	e032      	b.n	8014618 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_Cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 80145b2:	79ba      	ldrb	r2, [r7, #6]
 80145b4:	79fb      	ldrb	r3, [r7, #7]
 80145b6:	4960      	ldr	r1, [pc, #384]	@ (8014738 <MAP_makeCmdList+0x4a0>)
 80145b8:	0152      	lsls	r2, r2, #5
 80145ba:	440a      	add	r2, r1
 80145bc:	4413      	add	r3, r2
 80145be:	781b      	ldrb	r3, [r3, #0]
 80145c0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80145c4:	2b40      	cmp	r3, #64	@ 0x40
 80145c6:	d10d      	bne.n	80145e4 <MAP_makeCmdList+0x34c>
 80145c8:	79bb      	ldrb	r3, [r7, #6]
 80145ca:	1e5a      	subs	r2, r3, #1
 80145cc:	79fb      	ldrb	r3, [r7, #7]
 80145ce:	495b      	ldr	r1, [pc, #364]	@ (801473c <MAP_makeCmdList+0x4a4>)
 80145d0:	0152      	lsls	r2, r2, #5
 80145d2:	4413      	add	r3, r2
 80145d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80145d8:	8a3a      	ldrh	r2, [r7, #16]
 80145da:	429a      	cmp	r2, r3
 80145dc:	d102      	bne.n	80145e4 <MAP_makeCmdList+0x34c>
 80145de:	2302      	movs	r3, #2
 80145e0:	74fb      	strb	r3, [r7, #19]
 80145e2:	e019      	b.n	8014618 <MAP_makeCmdList+0x380>
			else if(((g_SysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_Cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 80145e4:	79ba      	ldrb	r2, [r7, #6]
 80145e6:	79fb      	ldrb	r3, [r7, #7]
 80145e8:	4953      	ldr	r1, [pc, #332]	@ (8014738 <MAP_makeCmdList+0x4a0>)
 80145ea:	0152      	lsls	r2, r2, #5
 80145ec:	440a      	add	r2, r1
 80145ee:	4413      	add	r3, r2
 80145f0:	781b      	ldrb	r3, [r3, #0]
 80145f2:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80145f6:	2b20      	cmp	r3, #32
 80145f8:	d10d      	bne.n	8014616 <MAP_makeCmdList+0x37e>
 80145fa:	79ba      	ldrb	r2, [r7, #6]
 80145fc:	79fb      	ldrb	r3, [r7, #7]
 80145fe:	3301      	adds	r3, #1
 8014600:	494e      	ldr	r1, [pc, #312]	@ (801473c <MAP_makeCmdList+0x4a4>)
 8014602:	0152      	lsls	r2, r2, #5
 8014604:	4413      	add	r3, r2
 8014606:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801460a:	8a3a      	ldrh	r2, [r7, #16]
 801460c:	429a      	cmp	r2, r3
 801460e:	d102      	bne.n	8014616 <MAP_makeCmdList+0x37e>
 8014610:	2301      	movs	r3, #1
 8014612:	74fb      	strb	r3, [r7, #19]
 8014614:	e000      	b.n	8014618 <MAP_makeCmdList+0x380>
			else   while(1);
 8014616:	e7fe      	b.n	8014616 <MAP_makeCmdList+0x37e>
		}
		
		en_tempDir = (enMAP_HEAD_DIR)( (en_nowDir - en_staDir) & (enMAP_HEAD_DIR)3 );		// 方向更新
 8014618:	7cfa      	ldrb	r2, [r7, #19]
 801461a:	797b      	ldrb	r3, [r7, #5]
 801461c:	1ad3      	subs	r3, r2, r3
 801461e:	b2db      	uxtb	r3, r3
 8014620:	f003 0303 	and.w	r3, r3, #3
 8014624:	73fb      	strb	r3, [r7, #15]
		en_staDir = en_nowDir;
 8014626:	7cfb      	ldrb	r3, [r7, #19]
 8014628:	717b      	strb	r3, [r7, #5]

		if (en_tempDir == NORTH){
 801462a:	7bfb      	ldrb	r3, [r7, #15]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d103      	bne.n	8014638 <MAP_makeCmdList+0x3a0>
			uc_goStep = uc_goStep + 2;
 8014630:	7dfb      	ldrb	r3, [r7, #23]
 8014632:	3302      	adds	r3, #2
 8014634:	75fb      	strb	r3, [r7, #23]
 8014636:	e037      	b.n	80146a8 <MAP_makeCmdList+0x410>
		}
		else if (en_tempDir == EAST){
 8014638:	7bfb      	ldrb	r3, [r7, #15]
 801463a:	2b01      	cmp	r3, #1
 801463c:	d110      	bne.n	8014660 <MAP_makeCmdList+0x3c8>
			dcom[us_pt] = uc_goStep;
 801463e:	8abb      	ldrh	r3, [r7, #20]
 8014640:	493f      	ldr	r1, [pc, #252]	@ (8014740 <MAP_makeCmdList+0x4a8>)
 8014642:	7dfa      	ldrb	r2, [r7, #23]
 8014644:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R90;
 8014646:	8abb      	ldrh	r3, [r7, #20]
 8014648:	3301      	adds	r3, #1
 801464a:	82bb      	strh	r3, [r7, #20]
 801464c:	8abb      	ldrh	r3, [r7, #20]
 801464e:	4a3c      	ldr	r2, [pc, #240]	@ (8014740 <MAP_makeCmdList+0x4a8>)
 8014650:	2148      	movs	r1, #72	@ 0x48
 8014652:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 8014654:	2302      	movs	r3, #2
 8014656:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 8014658:	8abb      	ldrh	r3, [r7, #20]
 801465a:	3301      	adds	r3, #1
 801465c:	82bb      	strh	r3, [r7, #20]
 801465e:	e023      	b.n	80146a8 <MAP_makeCmdList+0x410>
		}
		else if (en_tempDir == WEST){
 8014660:	7bfb      	ldrb	r3, [r7, #15]
 8014662:	2b03      	cmp	r3, #3
 8014664:	d110      	bne.n	8014688 <MAP_makeCmdList+0x3f0>
			dcom[us_pt] = uc_goStep;
 8014666:	8abb      	ldrh	r3, [r7, #20]
 8014668:	4935      	ldr	r1, [pc, #212]	@ (8014740 <MAP_makeCmdList+0x4a8>)
 801466a:	7dfa      	ldrb	r2, [r7, #23]
 801466c:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = L90;
 801466e:	8abb      	ldrh	r3, [r7, #20]
 8014670:	3301      	adds	r3, #1
 8014672:	82bb      	strh	r3, [r7, #20]
 8014674:	8abb      	ldrh	r3, [r7, #20]
 8014676:	4a32      	ldr	r2, [pc, #200]	@ (8014740 <MAP_makeCmdList+0x4a8>)
 8014678:	2149      	movs	r1, #73	@ 0x49
 801467a:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 801467c:	2302      	movs	r3, #2
 801467e:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 8014680:	8abb      	ldrh	r3, [r7, #20]
 8014682:	3301      	adds	r3, #1
 8014684:	82bb      	strh	r3, [r7, #20]
 8014686:	e00f      	b.n	80146a8 <MAP_makeCmdList+0x410>
		}
		else{
			dcom[us_pt] = uc_goStep;
 8014688:	8abb      	ldrh	r3, [r7, #20]
 801468a:	492d      	ldr	r1, [pc, #180]	@ (8014740 <MAP_makeCmdList+0x4a8>)
 801468c:	7dfa      	ldrb	r2, [r7, #23]
 801468e:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R180;
 8014690:	8abb      	ldrh	r3, [r7, #20]
 8014692:	3301      	adds	r3, #1
 8014694:	82bb      	strh	r3, [r7, #20]
 8014696:	8abb      	ldrh	r3, [r7, #20]
 8014698:	4a29      	ldr	r2, [pc, #164]	@ (8014740 <MAP_makeCmdList+0x4a8>)
 801469a:	214a      	movs	r1, #74	@ 0x4a
 801469c:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 801469e:	2302      	movs	r3, #2
 80146a0:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 80146a2:	8abb      	ldrh	r3, [r7, #20]
 80146a4:	3301      	adds	r3, #1
 80146a6:	82bb      	strh	r3, [r7, #20]
		}

		if      (en_nowDir == NORTH) uc_staY = uc_staY + 1;
 80146a8:	7cfb      	ldrb	r3, [r7, #19]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d103      	bne.n	80146b6 <MAP_makeCmdList+0x41e>
 80146ae:	79bb      	ldrb	r3, [r7, #6]
 80146b0:	3301      	adds	r3, #1
 80146b2:	71bb      	strb	r3, [r7, #6]
 80146b4:	e013      	b.n	80146de <MAP_makeCmdList+0x446>
		else if (en_nowDir == EAST) uc_staX = uc_staX + 1;
 80146b6:	7cfb      	ldrb	r3, [r7, #19]
 80146b8:	2b01      	cmp	r3, #1
 80146ba:	d103      	bne.n	80146c4 <MAP_makeCmdList+0x42c>
 80146bc:	79fb      	ldrb	r3, [r7, #7]
 80146be:	3301      	adds	r3, #1
 80146c0:	71fb      	strb	r3, [r7, #7]
 80146c2:	e00c      	b.n	80146de <MAP_makeCmdList+0x446>
		else if (en_nowDir == SOUTH) uc_staY = uc_staY - 1;
 80146c4:	7cfb      	ldrb	r3, [r7, #19]
 80146c6:	2b02      	cmp	r3, #2
 80146c8:	d103      	bne.n	80146d2 <MAP_makeCmdList+0x43a>
 80146ca:	79bb      	ldrb	r3, [r7, #6]
 80146cc:	3b01      	subs	r3, #1
 80146ce:	71bb      	strb	r3, [r7, #6]
 80146d0:	e005      	b.n	80146de <MAP_makeCmdList+0x446>
		else if (en_nowDir == WEST) uc_staX = uc_staX - 1;
 80146d2:	7cfb      	ldrb	r3, [r7, #19]
 80146d4:	2b03      	cmp	r3, #3
 80146d6:	d102      	bne.n	80146de <MAP_makeCmdList+0x446>
 80146d8:	79fb      	ldrb	r3, [r7, #7]
 80146da:	3b01      	subs	r3, #1
 80146dc:	71fb      	strb	r3, [r7, #7]
		
		en_staDir = en_nowDir;
 80146de:	7cfb      	ldrb	r3, [r7, #19]
 80146e0:	717b      	strb	r3, [r7, #5]
		
		if ((uc_staX == uc_endX) &&(uc_staY == uc_endY)) break;
 80146e2:	79fa      	ldrb	r2, [r7, #7]
 80146e4:	793b      	ldrb	r3, [r7, #4]
 80146e6:	429a      	cmp	r2, r3
 80146e8:	f47f ade9 	bne.w	80142be <MAP_makeCmdList+0x26>
 80146ec:	79ba      	ldrb	r2, [r7, #6]
 80146ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80146f2:	429a      	cmp	r2, r3
 80146f4:	d000      	beq.n	80146f8 <MAP_makeCmdList+0x460>
		us_high = us_Cmap[uc_staY][uc_staX]-1;
 80146f6:	e5e2      	b.n	80142be <MAP_makeCmdList+0x26>
		if ((uc_staX == uc_endX) &&(uc_staY == uc_endY)) break;
 80146f8:	bf00      	nop
	}
	
	/* 超地信旋回用のコマンドリスト作成 */
	dcom[us_pt] = uc_goStep;
 80146fa:	8abb      	ldrh	r3, [r7, #20]
 80146fc:	4910      	ldr	r1, [pc, #64]	@ (8014740 <MAP_makeCmdList+0x4a8>)
 80146fe:	7dfa      	ldrb	r2, [r7, #23]
 8014700:	54ca      	strb	r2, [r1, r3]
	dcom[++us_pt] = STOP;
 8014702:	8abb      	ldrh	r3, [r7, #20]
 8014704:	3301      	adds	r3, #1
 8014706:	82bb      	strh	r3, [r7, #20]
 8014708:	8abb      	ldrh	r3, [r7, #20]
 801470a:	4a0d      	ldr	r2, [pc, #52]	@ (8014740 <MAP_makeCmdList+0x4a8>)
 801470c:	2100      	movs	r1, #0
 801470e:	54d1      	strb	r1, [r2, r3]
	dcom[++us_pt] = CEND;
 8014710:	8abb      	ldrh	r3, [r7, #20]
 8014712:	3301      	adds	r3, #1
 8014714:	82bb      	strh	r3, [r7, #20]
 8014716:	8abb      	ldrh	r3, [r7, #20]
 8014718:	4a09      	ldr	r2, [pc, #36]	@ (8014740 <MAP_makeCmdList+0x4a8>)
 801471a:	21fa      	movs	r1, #250	@ 0xfa
 801471c:	54d1      	strb	r1, [r2, r3]
	us_totalCmd = us_pt+1;			// コマンド総数
 801471e:	8abb      	ldrh	r3, [r7, #20]
 8014720:	3301      	adds	r3, #1
 8014722:	b29a      	uxth	r2, r3
 8014724:	4b07      	ldr	r3, [pc, #28]	@ (8014744 <MAP_makeCmdList+0x4ac>)
 8014726:	801a      	strh	r2, [r3, #0]


	/* 最終的に向いている方向 */
	*en_endDir = en_staDir;
 8014728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801472a:	797a      	ldrb	r2, [r7, #5]
 801472c:	701a      	strb	r2, [r3, #0]
}
 801472e:	bf00      	nop
 8014730:	3718      	adds	r7, #24
 8014732:	46bd      	mov	sp, r7
 8014734:	bc90      	pop	{r4, r7}
 8014736:	4770      	bx	lr
 8014738:	2001b5a0 	.word	0x2001b5a0
 801473c:	2001ada0 	.word	0x2001ada0
 8014740:	20017c48 	.word	0x20017c48
 8014744:	2001ac48 	.word	0x2001ac48

08014748 <MAP_makeSlaCmdList>:

void MAP_makeSlaCmdList( void )
{
 8014748:	b480      	push	{r7}
 801474a:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 801474e:	b083      	sub	sp, #12
 8014750:	af00      	add	r7, sp, #0
	uint16_t dcom_temp[4096];			// 半区画超信旋回コマンドリスト
	uint16_t i=0,j=0;					// roop
 8014752:	2300      	movs	r3, #0
 8014754:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014758:	f102 0206 	add.w	r2, r2, #6
 801475c:	8013      	strh	r3, [r2, #0]
 801475e:	2300      	movs	r3, #0
 8014760:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014764:	f102 0204 	add.w	r2, r2, #4
 8014768:	8013      	strh	r3, [r2, #0]
	
	/* 超地信旋回コマンドをコピー */
	for( i=0; i<us_totalCmd; i++ ){
 801476a:	2300      	movs	r3, #0
 801476c:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014770:	f102 0206 	add.w	r2, r2, #6
 8014774:	8013      	strh	r3, [r2, #0]
 8014776:	e01e      	b.n	80147b6 <MAP_makeSlaCmdList+0x6e>
		dcom_temp[i] = dcom[i];
 8014778:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801477c:	f103 0306 	add.w	r3, r3, #6
 8014780:	881b      	ldrh	r3, [r3, #0]
 8014782:	4aac      	ldr	r2, [pc, #688]	@ (8014a34 <MAP_makeSlaCmdList+0x2ec>)
 8014784:	5cd2      	ldrb	r2, [r2, r3]
 8014786:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801478a:	f103 0306 	add.w	r3, r3, #6
 801478e:	881b      	ldrh	r3, [r3, #0]
 8014790:	4611      	mov	r1, r2
 8014792:	f107 0208 	add.w	r2, r7, #8
 8014796:	005b      	lsls	r3, r3, #1
 8014798:	4413      	add	r3, r2
 801479a:	460a      	mov	r2, r1
 801479c:	f823 2c04 	strh.w	r2, [r3, #-4]
	for( i=0; i<us_totalCmd; i++ ){
 80147a0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80147a4:	f103 0306 	add.w	r3, r3, #6
 80147a8:	881b      	ldrh	r3, [r3, #0]
 80147aa:	3301      	adds	r3, #1
 80147ac:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80147b0:	f102 0206 	add.w	r2, r2, #6
 80147b4:	8013      	strh	r3, [r2, #0]
 80147b6:	4ba0      	ldr	r3, [pc, #640]	@ (8014a38 <MAP_makeSlaCmdList+0x2f0>)
 80147b8:	881b      	ldrh	r3, [r3, #0]
 80147ba:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80147be:	f102 0206 	add.w	r2, r2, #6
 80147c2:	8812      	ldrh	r2, [r2, #0]
 80147c4:	429a      	cmp	r2, r3
 80147c6:	d3d7      	bcc.n	8014778 <MAP_makeSlaCmdList+0x30>
	}

	i = 0;
 80147c8:	2300      	movs	r3, #0
 80147ca:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80147ce:	f102 0206 	add.w	r2, r2, #6
 80147d2:	8013      	strh	r3, [r2, #0]

	/* 配列が旋回コマンドかをチェック */
	while(1)
	{
		if( dcom_temp[i] == R90 ){		// 右90°
 80147d4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80147d8:	f103 0306 	add.w	r3, r3, #6
 80147dc:	881b      	ldrh	r3, [r3, #0]
 80147de:	f107 0208 	add.w	r2, r7, #8
 80147e2:	005b      	lsls	r3, r3, #1
 80147e4:	4413      	add	r3, r2
 80147e6:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 80147ea:	2b48      	cmp	r3, #72	@ 0x48
 80147ec:	d140      	bne.n	8014870 <MAP_makeSlaCmdList+0x128>
			dcom_temp[i-1] -= 1;		// 1つ手前を引く
 80147ee:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80147f2:	f103 0306 	add.w	r3, r3, #6
 80147f6:	881b      	ldrh	r3, [r3, #0]
 80147f8:	3b01      	subs	r3, #1
 80147fa:	f107 0208 	add.w	r2, r7, #8
 80147fe:	005b      	lsls	r3, r3, #1
 8014800:	4413      	add	r3, r2
 8014802:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8014806:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801480a:	f103 0306 	add.w	r3, r3, #6
 801480e:	881b      	ldrh	r3, [r3, #0]
 8014810:	3b01      	subs	r3, #1
 8014812:	3a01      	subs	r2, #1
 8014814:	b292      	uxth	r2, r2
 8014816:	f107 0108 	add.w	r1, r7, #8
 801481a:	005b      	lsls	r3, r3, #1
 801481c:	440b      	add	r3, r1
 801481e:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i+1] -= 1;		// 1つ手前を引く
 8014822:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014826:	f103 0306 	add.w	r3, r3, #6
 801482a:	881b      	ldrh	r3, [r3, #0]
 801482c:	3301      	adds	r3, #1
 801482e:	f107 0208 	add.w	r2, r7, #8
 8014832:	005b      	lsls	r3, r3, #1
 8014834:	4413      	add	r3, r2
 8014836:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801483a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801483e:	f103 0306 	add.w	r3, r3, #6
 8014842:	881b      	ldrh	r3, [r3, #0]
 8014844:	3301      	adds	r3, #1
 8014846:	3a01      	subs	r2, #1
 8014848:	b292      	uxth	r2, r2
 801484a:	f107 0108 	add.w	r1, r7, #8
 801484e:	005b      	lsls	r3, r3, #1
 8014850:	440b      	add	r3, r1
 8014852:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i] = R90S;		// 右スラローム90°
 8014856:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801485a:	f103 0306 	add.w	r3, r3, #6
 801485e:	881b      	ldrh	r3, [r3, #0]
 8014860:	f107 0208 	add.w	r2, r7, #8
 8014864:	005b      	lsls	r3, r3, #1
 8014866:	4413      	add	r3, r2
 8014868:	224c      	movs	r2, #76	@ 0x4c
 801486a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801486e:	e05a      	b.n	8014926 <MAP_makeSlaCmdList+0x1de>
		}
		else if( dcom_temp[i] == L90 ){	// 左90°
 8014870:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014874:	f103 0306 	add.w	r3, r3, #6
 8014878:	881b      	ldrh	r3, [r3, #0]
 801487a:	f107 0208 	add.w	r2, r7, #8
 801487e:	005b      	lsls	r3, r3, #1
 8014880:	4413      	add	r3, r2
 8014882:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 8014886:	2b49      	cmp	r3, #73	@ 0x49
 8014888:	d140      	bne.n	801490c <MAP_makeSlaCmdList+0x1c4>
			dcom_temp[i-1] -= 1;		// 1つ手前を引く
 801488a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801488e:	f103 0306 	add.w	r3, r3, #6
 8014892:	881b      	ldrh	r3, [r3, #0]
 8014894:	3b01      	subs	r3, #1
 8014896:	f107 0208 	add.w	r2, r7, #8
 801489a:	005b      	lsls	r3, r3, #1
 801489c:	4413      	add	r3, r2
 801489e:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80148a2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80148a6:	f103 0306 	add.w	r3, r3, #6
 80148aa:	881b      	ldrh	r3, [r3, #0]
 80148ac:	3b01      	subs	r3, #1
 80148ae:	3a01      	subs	r2, #1
 80148b0:	b292      	uxth	r2, r2
 80148b2:	f107 0108 	add.w	r1, r7, #8
 80148b6:	005b      	lsls	r3, r3, #1
 80148b8:	440b      	add	r3, r1
 80148ba:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i+1] -= 1;		// 1つ手前を引く
 80148be:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80148c2:	f103 0306 	add.w	r3, r3, #6
 80148c6:	881b      	ldrh	r3, [r3, #0]
 80148c8:	3301      	adds	r3, #1
 80148ca:	f107 0208 	add.w	r2, r7, #8
 80148ce:	005b      	lsls	r3, r3, #1
 80148d0:	4413      	add	r3, r2
 80148d2:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80148d6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80148da:	f103 0306 	add.w	r3, r3, #6
 80148de:	881b      	ldrh	r3, [r3, #0]
 80148e0:	3301      	adds	r3, #1
 80148e2:	3a01      	subs	r2, #1
 80148e4:	b292      	uxth	r2, r2
 80148e6:	f107 0108 	add.w	r1, r7, #8
 80148ea:	005b      	lsls	r3, r3, #1
 80148ec:	440b      	add	r3, r1
 80148ee:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i] = L90S;		// 左スラローム90°
 80148f2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80148f6:	f103 0306 	add.w	r3, r3, #6
 80148fa:	881b      	ldrh	r3, [r3, #0]
 80148fc:	f107 0208 	add.w	r2, r7, #8
 8014900:	005b      	lsls	r3, r3, #1
 8014902:	4413      	add	r3, r2
 8014904:	224d      	movs	r2, #77	@ 0x4d
 8014906:	f823 2c04 	strh.w	r2, [r3, #-4]
 801490a:	e00c      	b.n	8014926 <MAP_makeSlaCmdList+0x1de>
		}
		else{
			if( dcom_temp[i] == CEND ){
 801490c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014910:	f103 0306 	add.w	r3, r3, #6
 8014914:	881b      	ldrh	r3, [r3, #0]
 8014916:	f107 0208 	add.w	r2, r7, #8
 801491a:	005b      	lsls	r3, r3, #1
 801491c:	4413      	add	r3, r2
 801491e:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 8014922:	2bfa      	cmp	r3, #250	@ 0xfa
 8014924:	d00b      	beq.n	801493e <MAP_makeSlaCmdList+0x1f6>
				break;
			}
		}
		i++;
 8014926:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801492a:	f103 0306 	add.w	r3, r3, #6
 801492e:	881b      	ldrh	r3, [r3, #0]
 8014930:	3301      	adds	r3, #1
 8014932:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014936:	f102 0206 	add.w	r2, r2, #6
 801493a:	8013      	strh	r3, [r2, #0]
		if( dcom_temp[i] == R90 ){		// 右90°
 801493c:	e74a      	b.n	80147d4 <MAP_makeSlaCmdList+0x8c>
				break;
 801493e:	bf00      	nop
	}

	i = j = 0;
 8014940:	2300      	movs	r3, #0
 8014942:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014946:	f102 0204 	add.w	r2, r2, #4
 801494a:	8013      	strh	r3, [r2, #0]
 801494c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014950:	f103 0304 	add.w	r3, r3, #4
 8014954:	881b      	ldrh	r3, [r3, #0]
 8014956:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801495a:	f102 0206 	add.w	r2, r2, #6
 801495e:	8013      	strh	r3, [r2, #0]

	/* スラロームコマンド変換 */
	while(1)
	{
		if( dcom_temp[i+1] == CEND ){
 8014960:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014964:	f103 0306 	add.w	r3, r3, #6
 8014968:	881b      	ldrh	r3, [r3, #0]
 801496a:	3301      	adds	r3, #1
 801496c:	f107 0208 	add.w	r2, r7, #8
 8014970:	005b      	lsls	r3, r3, #1
 8014972:	4413      	add	r3, r2
 8014974:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 8014978:	2bfa      	cmp	r3, #250	@ 0xfa
 801497a:	d111      	bne.n	80149a0 <MAP_makeSlaCmdList+0x258>
			scom[j] = STOP;
 801497c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014980:	f103 0304 	add.w	r3, r3, #4
 8014984:	881b      	ldrh	r3, [r3, #0]
 8014986:	4a2d      	ldr	r2, [pc, #180]	@ (8014a3c <MAP_makeSlaCmdList+0x2f4>)
 8014988:	2100      	movs	r1, #0
 801498a:	54d1      	strb	r1, [r2, r3]
			scom[j+1] = CEND;
 801498c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014990:	f103 0304 	add.w	r3, r3, #4
 8014994:	881b      	ldrh	r3, [r3, #0]
 8014996:	3301      	adds	r3, #1
 8014998:	4a28      	ldr	r2, [pc, #160]	@ (8014a3c <MAP_makeSlaCmdList+0x2f4>)
 801499a:	21fa      	movs	r1, #250	@ 0xfa
 801499c:	54d1      	strb	r1, [r2, r3]
			break;
 801499e:	e041      	b.n	8014a24 <MAP_makeSlaCmdList+0x2dc>
		}
		else
		{
			/* データがストップコマンドだったら */
			if( dcom_temp[i] == 0 ){
 80149a0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80149a4:	f103 0306 	add.w	r3, r3, #6
 80149a8:	881b      	ldrh	r3, [r3, #0]
 80149aa:	f107 0208 	add.w	r2, r7, #8
 80149ae:	005b      	lsls	r3, r3, #1
 80149b0:	4413      	add	r3, r2
 80149b2:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d10a      	bne.n	80149d0 <MAP_makeSlaCmdList+0x288>
				i++;
 80149ba:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80149be:	f103 0306 	add.w	r3, r3, #6
 80149c2:	881b      	ldrh	r3, [r3, #0]
 80149c4:	3301      	adds	r3, #1
 80149c6:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80149ca:	f102 0206 	add.w	r2, r2, #6
 80149ce:	8013      	strh	r3, [r2, #0]
			}
			
			scom[j] = dcom_temp[i];
 80149d0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80149d4:	f103 0306 	add.w	r3, r3, #6
 80149d8:	881b      	ldrh	r3, [r3, #0]
 80149da:	f107 0208 	add.w	r2, r7, #8
 80149de:	005b      	lsls	r3, r3, #1
 80149e0:	4413      	add	r3, r2
 80149e2:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80149e6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80149ea:	f103 0304 	add.w	r3, r3, #4
 80149ee:	881b      	ldrh	r3, [r3, #0]
 80149f0:	b2d1      	uxtb	r1, r2
 80149f2:	4a12      	ldr	r2, [pc, #72]	@ (8014a3c <MAP_makeSlaCmdList+0x2f4>)
 80149f4:	54d1      	strb	r1, [r2, r3]
			
			i++;
 80149f6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80149fa:	f103 0306 	add.w	r3, r3, #6
 80149fe:	881b      	ldrh	r3, [r3, #0]
 8014a00:	3301      	adds	r3, #1
 8014a02:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014a06:	f102 0206 	add.w	r2, r2, #6
 8014a0a:	8013      	strh	r3, [r2, #0]
			j++;
 8014a0c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014a10:	f103 0304 	add.w	r3, r3, #4
 8014a14:	881b      	ldrh	r3, [r3, #0]
 8014a16:	3301      	adds	r3, #1
 8014a18:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014a1c:	f102 0204 	add.w	r2, r2, #4
 8014a20:	8013      	strh	r3, [r2, #0]
		if( dcom_temp[i+1] == CEND ){
 8014a22:	e79d      	b.n	8014960 <MAP_makeSlaCmdList+0x218>
		}
	}
}
 8014a24:	bf00      	nop
 8014a26:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 8014a2a:	370c      	adds	r7, #12
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a32:	4770      	bx	lr
 8014a34:	20017c48 	.word	0x20017c48
 8014a38:	2001ac48 	.word	0x2001ac48
 8014a3c:	20018c48 	.word	0x20018c48

08014a40 <MAP_makeSkewCmdList>:

void MAP_makeSkewCmdList( void )
{
 8014a40:	b480      	push	{r7}
 8014a42:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 8014a46:	b087      	sub	sp, #28
 8014a48:	af00      	add	r7, sp, #0
	uint16_t	scom_temp[4096];			// 半区画超信旋回コマンドリスト
	uint16_t	i;							// roop
	uint16_t	c1, c2, c3, c4;				// 計算用
	uint16_t	x;
	uint16_t	ct_n=0, ct_st=0;
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014a50:	f102 0212 	add.w	r2, r2, #18
 8014a54:	8013      	strh	r3, [r2, #0]
 8014a56:	2300      	movs	r3, #0
 8014a58:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014a5c:	f102 0210 	add.w	r2, r2, #16
 8014a60:	8013      	strh	r3, [r2, #0]
	uint16_t	flag = 3;					//	斜め走行用バッファ  0:複合コマンド　1:斜め  2:S135N → N135S  3:直進
 8014a62:	2303      	movs	r3, #3
 8014a64:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014a68:	f102 020e 	add.w	r2, r2, #14
 8014a6c:	8013      	strh	r3, [r2, #0]
	
	/* 超地信旋回コマンドをコピー */
	for( i=0; i<us_totalCmd; i++ )
 8014a6e:	2300      	movs	r3, #0
 8014a70:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014a74:	f102 0216 	add.w	r2, r2, #22
 8014a78:	8013      	strh	r3, [r2, #0]
 8014a7a:	e01e      	b.n	8014aba <MAP_makeSkewCmdList+0x7a>
	{
		scom_temp[i] = scom[i];
 8014a7c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014a80:	f103 0316 	add.w	r3, r3, #22
 8014a84:	881b      	ldrh	r3, [r3, #0]
 8014a86:	4acb      	ldr	r2, [pc, #812]	@ (8014db4 <MAP_makeSkewCmdList+0x374>)
 8014a88:	5cd2      	ldrb	r2, [r2, r3]
 8014a8a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014a8e:	f103 0316 	add.w	r3, r3, #22
 8014a92:	881b      	ldrh	r3, [r3, #0]
 8014a94:	4611      	mov	r1, r2
 8014a96:	f107 0218 	add.w	r2, r7, #24
 8014a9a:	005b      	lsls	r3, r3, #1
 8014a9c:	4413      	add	r3, r2
 8014a9e:	460a      	mov	r2, r1
 8014aa0:	f823 2c14 	strh.w	r2, [r3, #-20]
	for( i=0; i<us_totalCmd; i++ )
 8014aa4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014aa8:	f103 0316 	add.w	r3, r3, #22
 8014aac:	881b      	ldrh	r3, [r3, #0]
 8014aae:	3301      	adds	r3, #1
 8014ab0:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014ab4:	f102 0216 	add.w	r2, r2, #22
 8014ab8:	8013      	strh	r3, [r2, #0]
 8014aba:	4bbf      	ldr	r3, [pc, #764]	@ (8014db8 <MAP_makeSkewCmdList+0x378>)
 8014abc:	881b      	ldrh	r3, [r3, #0]
 8014abe:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014ac2:	f102 0216 	add.w	r2, r2, #22
 8014ac6:	8812      	ldrh	r2, [r2, #0]
 8014ac8:	429a      	cmp	r2, r3
 8014aca:	d3d7      	bcc.n	8014a7c <MAP_makeSkewCmdList+0x3c>
	}

	i=0;
 8014acc:	2300      	movs	r3, #0
 8014ace:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014ad2:	f102 0216 	add.w	r2, r2, #22
 8014ad6:	8013      	strh	r3, [r2, #0]

	/* 配列が旋回コマンドかをチェック */
	while(1)
	{
		c1 = scom_temp[ct_st];
 8014ad8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014adc:	f103 0310 	add.w	r3, r3, #16
 8014ae0:	881b      	ldrh	r3, [r3, #0]
 8014ae2:	f107 0218 	add.w	r2, r7, #24
 8014ae6:	005b      	lsls	r3, r3, #1
 8014ae8:	4413      	add	r3, r2
 8014aea:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8014aee:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014af2:	f102 020c 	add.w	r2, r2, #12
 8014af6:	8013      	strh	r3, [r2, #0]
		c2 = scom_temp[ct_st+1];
 8014af8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014afc:	f103 0310 	add.w	r3, r3, #16
 8014b00:	881b      	ldrh	r3, [r3, #0]
 8014b02:	3301      	adds	r3, #1
 8014b04:	f107 0218 	add.w	r2, r7, #24
 8014b08:	005b      	lsls	r3, r3, #1
 8014b0a:	4413      	add	r3, r2
 8014b0c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8014b10:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014b14:	f102 020a 	add.w	r2, r2, #10
 8014b18:	8013      	strh	r3, [r2, #0]
		c3 = scom_temp[ct_st+2];
 8014b1a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014b1e:	f103 0310 	add.w	r3, r3, #16
 8014b22:	881b      	ldrh	r3, [r3, #0]
 8014b24:	3302      	adds	r3, #2
 8014b26:	f107 0218 	add.w	r2, r7, #24
 8014b2a:	005b      	lsls	r3, r3, #1
 8014b2c:	4413      	add	r3, r2
 8014b2e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8014b32:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014b36:	f102 0208 	add.w	r2, r2, #8
 8014b3a:	8013      	strh	r3, [r2, #0]
		c4 = scom_temp[ct_st+3];
 8014b3c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014b40:	f103 0310 	add.w	r3, r3, #16
 8014b44:	881b      	ldrh	r3, [r3, #0]
 8014b46:	3303      	adds	r3, #3
 8014b48:	f107 0218 	add.w	r2, r7, #24
 8014b4c:	005b      	lsls	r3, r3, #1
 8014b4e:	4413      	add	r3, r2
 8014b50:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8014b54:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014b58:	f102 0206 	add.w	r2, r2, #6
 8014b5c:	8013      	strh	r3, [r2, #0]

		//	直進 → 右45度 → 斜め
		if( (c1<=GO32) && (c2==R90S) && (c3==L90S) )
 8014b5e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014b62:	f103 030c 	add.w	r3, r3, #12
 8014b66:	881b      	ldrh	r3, [r3, #0]
 8014b68:	2b20      	cmp	r3, #32
 8014b6a:	f200 808d 	bhi.w	8014c88 <MAP_makeSkewCmdList+0x248>
 8014b6e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014b72:	f103 030a 	add.w	r3, r3, #10
 8014b76:	881b      	ldrh	r3, [r3, #0]
 8014b78:	2b4c      	cmp	r3, #76	@ 0x4c
 8014b7a:	f040 8085 	bne.w	8014c88 <MAP_makeSkewCmdList+0x248>
 8014b7e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014b82:	f103 0308 	add.w	r3, r3, #8
 8014b86:	881b      	ldrh	r3, [r3, #0]
 8014b88:	2b4d      	cmp	r3, #77	@ 0x4d
 8014b8a:	d17d      	bne.n	8014c88 <MAP_makeSkewCmdList+0x248>
		{
			if((ct_st == 0) && (c1-1 == 0)){
 8014b8c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014b90:	f103 0310 	add.w	r3, r3, #16
 8014b94:	881b      	ldrh	r3, [r3, #0]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d131      	bne.n	8014bfe <MAP_makeSkewCmdList+0x1be>
 8014b9a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014b9e:	f103 030c 	add.w	r3, r3, #12
 8014ba2:	881b      	ldrh	r3, [r3, #0]
 8014ba4:	2b01      	cmp	r3, #1
 8014ba6:	d12a      	bne.n	8014bfe <MAP_makeSkewCmdList+0x1be>
				tcom[ ct_n ] = scom_temp[ct_st];
 8014ba8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014bac:	f103 0310 	add.w	r3, r3, #16
 8014bb0:	881b      	ldrh	r3, [r3, #0]
 8014bb2:	f107 0218 	add.w	r2, r7, #24
 8014bb6:	005b      	lsls	r3, r3, #1
 8014bb8:	4413      	add	r3, r2
 8014bba:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8014bbe:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014bc2:	f103 0312 	add.w	r3, r3, #18
 8014bc6:	881b      	ldrh	r3, [r3, #0]
 8014bc8:	b2d1      	uxtb	r1, r2
 8014bca:	4a7c      	ldr	r2, [pc, #496]	@ (8014dbc <MAP_makeSkewCmdList+0x37c>)
 8014bcc:	54d1      	strb	r1, [r2, r3]
				ct_st ++;
 8014bce:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014bd2:	f103 0310 	add.w	r3, r3, #16
 8014bd6:	881b      	ldrh	r3, [r3, #0]
 8014bd8:	3301      	adds	r3, #1
 8014bda:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014bde:	f102 0210 	add.w	r2, r2, #16
 8014be2:	8013      	strh	r3, [r2, #0]
				ct_n ++;
 8014be4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014be8:	f103 0312 	add.w	r3, r3, #18
 8014bec:	881b      	ldrh	r3, [r3, #0]
 8014bee:	3301      	adds	r3, #1
 8014bf0:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014bf4:	f102 0212 	add.w	r2, r2, #18
 8014bf8:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 8014bfa:	f000 beca 	b.w	8015992 <MAP_makeSkewCmdList+0xf52>
			}
			else{
				if( c1-1 != 0 ) tcom[ ct_n++ ] = c1 - 1;		//	前の複合コマンドによって直線区間が消えない場合
 8014bfe:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014c02:	f103 030c 	add.w	r3, r3, #12
 8014c06:	881b      	ldrh	r3, [r3, #0]
 8014c08:	2b01      	cmp	r3, #1
 8014c0a:	d015      	beq.n	8014c38 <MAP_makeSkewCmdList+0x1f8>
 8014c0c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014c10:	f103 030c 	add.w	r3, r3, #12
 8014c14:	881b      	ldrh	r3, [r3, #0]
 8014c16:	b2da      	uxtb	r2, r3
 8014c18:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014c1c:	f103 0312 	add.w	r3, r3, #18
 8014c20:	881b      	ldrh	r3, [r3, #0]
 8014c22:	1c59      	adds	r1, r3, #1
 8014c24:	f507 5000 	add.w	r0, r7, #8192	@ 0x2000
 8014c28:	f100 0012 	add.w	r0, r0, #18
 8014c2c:	8001      	strh	r1, [r0, #0]
 8014c2e:	4619      	mov	r1, r3
 8014c30:	1e53      	subs	r3, r2, #1
 8014c32:	b2da      	uxtb	r2, r3
 8014c34:	4b61      	ldr	r3, [pc, #388]	@ (8014dbc <MAP_makeSkewCmdList+0x37c>)
 8014c36:	545a      	strb	r2, [r3, r1]
				tcom[ ct_n++ ] = RS45N;
 8014c38:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014c3c:	f103 0312 	add.w	r3, r3, #18
 8014c40:	881b      	ldrh	r3, [r3, #0]
 8014c42:	1c5a      	adds	r2, r3, #1
 8014c44:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014c48:	f101 0112 	add.w	r1, r1, #18
 8014c4c:	800a      	strh	r2, [r1, #0]
 8014c4e:	461a      	mov	r2, r3
 8014c50:	4b5a      	ldr	r3, [pc, #360]	@ (8014dbc <MAP_makeSkewCmdList+0x37c>)
 8014c52:	2199      	movs	r1, #153	@ 0x99
 8014c54:	5499      	strb	r1, [r3, r2]
				ct_st ++;
 8014c56:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014c5a:	f103 0310 	add.w	r3, r3, #16
 8014c5e:	881b      	ldrh	r3, [r3, #0]
 8014c60:	3301      	adds	r3, #1
 8014c62:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014c66:	f102 0210 	add.w	r2, r2, #16
 8014c6a:	8013      	strh	r3, [r2, #0]

				x = (uint16_t)(NGO1 - 1);		//	斜めモード
 8014c6c:	2351      	movs	r3, #81	@ 0x51
 8014c6e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014c72:	f102 0214 	add.w	r2, r2, #20
 8014c76:	8013      	strh	r3, [r2, #0]
				flag = 0;
 8014c78:	2300      	movs	r3, #0
 8014c7a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014c7e:	f102 020e 	add.w	r2, r2, #14
 8014c82:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 8014c84:	f000 be85 	b.w	8015992 <MAP_makeSkewCmdList+0xf52>
			}
		}
		//	直進 → 左45度 → 斜め
		else if( (c1<=GO32) && (c2==L90S) && (c3==R90S) )
 8014c88:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014c8c:	f103 030c 	add.w	r3, r3, #12
 8014c90:	881b      	ldrh	r3, [r3, #0]
 8014c92:	2b20      	cmp	r3, #32
 8014c94:	f200 8094 	bhi.w	8014dc0 <MAP_makeSkewCmdList+0x380>
 8014c98:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014c9c:	f103 030a 	add.w	r3, r3, #10
 8014ca0:	881b      	ldrh	r3, [r3, #0]
 8014ca2:	2b4d      	cmp	r3, #77	@ 0x4d
 8014ca4:	f040 808c 	bne.w	8014dc0 <MAP_makeSkewCmdList+0x380>
 8014ca8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014cac:	f103 0308 	add.w	r3, r3, #8
 8014cb0:	881b      	ldrh	r3, [r3, #0]
 8014cb2:	2b4c      	cmp	r3, #76	@ 0x4c
 8014cb4:	f040 8084 	bne.w	8014dc0 <MAP_makeSkewCmdList+0x380>
		{
			if((ct_st == 0) && (c1-1 == 0)){
 8014cb8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014cbc:	f103 0310 	add.w	r3, r3, #16
 8014cc0:	881b      	ldrh	r3, [r3, #0]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d131      	bne.n	8014d2a <MAP_makeSkewCmdList+0x2ea>
 8014cc6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014cca:	f103 030c 	add.w	r3, r3, #12
 8014cce:	881b      	ldrh	r3, [r3, #0]
 8014cd0:	2b01      	cmp	r3, #1
 8014cd2:	d12a      	bne.n	8014d2a <MAP_makeSkewCmdList+0x2ea>
				tcom[ ct_n ] = scom_temp[ct_st];
 8014cd4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014cd8:	f103 0310 	add.w	r3, r3, #16
 8014cdc:	881b      	ldrh	r3, [r3, #0]
 8014cde:	f107 0218 	add.w	r2, r7, #24
 8014ce2:	005b      	lsls	r3, r3, #1
 8014ce4:	4413      	add	r3, r2
 8014ce6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8014cea:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014cee:	f103 0312 	add.w	r3, r3, #18
 8014cf2:	881b      	ldrh	r3, [r3, #0]
 8014cf4:	b2d1      	uxtb	r1, r2
 8014cf6:	4a31      	ldr	r2, [pc, #196]	@ (8014dbc <MAP_makeSkewCmdList+0x37c>)
 8014cf8:	54d1      	strb	r1, [r2, r3]
				ct_st ++;
 8014cfa:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014cfe:	f103 0310 	add.w	r3, r3, #16
 8014d02:	881b      	ldrh	r3, [r3, #0]
 8014d04:	3301      	adds	r3, #1
 8014d06:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014d0a:	f102 0210 	add.w	r2, r2, #16
 8014d0e:	8013      	strh	r3, [r2, #0]
				ct_n ++;
 8014d10:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014d14:	f103 0312 	add.w	r3, r3, #18
 8014d18:	881b      	ldrh	r3, [r3, #0]
 8014d1a:	3301      	adds	r3, #1
 8014d1c:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014d20:	f102 0212 	add.w	r2, r2, #18
 8014d24:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 8014d26:	f000 be34 	b.w	8015992 <MAP_makeSkewCmdList+0xf52>
			}
			else{
				if( c1-1 != 0 ) tcom[ ct_n++ ] = c1 - 1;		//	前の複合コマンドによって直線区間が消えない場合
 8014d2a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014d2e:	f103 030c 	add.w	r3, r3, #12
 8014d32:	881b      	ldrh	r3, [r3, #0]
 8014d34:	2b01      	cmp	r3, #1
 8014d36:	d015      	beq.n	8014d64 <MAP_makeSkewCmdList+0x324>
 8014d38:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014d3c:	f103 030c 	add.w	r3, r3, #12
 8014d40:	881b      	ldrh	r3, [r3, #0]
 8014d42:	b2da      	uxtb	r2, r3
 8014d44:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014d48:	f103 0312 	add.w	r3, r3, #18
 8014d4c:	881b      	ldrh	r3, [r3, #0]
 8014d4e:	1c59      	adds	r1, r3, #1
 8014d50:	f507 5000 	add.w	r0, r7, #8192	@ 0x2000
 8014d54:	f100 0012 	add.w	r0, r0, #18
 8014d58:	8001      	strh	r1, [r0, #0]
 8014d5a:	4619      	mov	r1, r3
 8014d5c:	1e53      	subs	r3, r2, #1
 8014d5e:	b2da      	uxtb	r2, r3
 8014d60:	4b16      	ldr	r3, [pc, #88]	@ (8014dbc <MAP_makeSkewCmdList+0x37c>)
 8014d62:	545a      	strb	r2, [r3, r1]
				tcom[ ct_n++ ] = LS45N;
 8014d64:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014d68:	f103 0312 	add.w	r3, r3, #18
 8014d6c:	881b      	ldrh	r3, [r3, #0]
 8014d6e:	1c5a      	adds	r2, r3, #1
 8014d70:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014d74:	f101 0112 	add.w	r1, r1, #18
 8014d78:	800a      	strh	r2, [r1, #0]
 8014d7a:	461a      	mov	r2, r3
 8014d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8014dbc <MAP_makeSkewCmdList+0x37c>)
 8014d7e:	219a      	movs	r1, #154	@ 0x9a
 8014d80:	5499      	strb	r1, [r3, r2]
				ct_st ++;
 8014d82:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014d86:	f103 0310 	add.w	r3, r3, #16
 8014d8a:	881b      	ldrh	r3, [r3, #0]
 8014d8c:	3301      	adds	r3, #1
 8014d8e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014d92:	f102 0210 	add.w	r2, r2, #16
 8014d96:	8013      	strh	r3, [r2, #0]

				x = (uint16_t)(NGO1 - 1);		//	斜めモード
 8014d98:	2351      	movs	r3, #81	@ 0x51
 8014d9a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014d9e:	f102 0214 	add.w	r2, r2, #20
 8014da2:	8013      	strh	r3, [r2, #0]
				flag = 0;
 8014da4:	2300      	movs	r3, #0
 8014da6:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014daa:	f102 020e 	add.w	r2, r2, #14
 8014dae:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 8014db0:	f000 bdef 	b.w	8015992 <MAP_makeSkewCmdList+0xf52>
 8014db4:	20018c48 	.word	0x20018c48
 8014db8:	2001ac48 	.word	0x2001ac48
 8014dbc:	20019c48 	.word	0x20019c48
			}
		}

		//	直進 → 右90度 → 直進
		else if( (c1<=GO32) && (c2==R90S) && (c3<=GO32) )
 8014dc0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014dc4:	f103 030c 	add.w	r3, r3, #12
 8014dc8:	881b      	ldrh	r3, [r3, #0]
 8014dca:	2b20      	cmp	r3, #32
 8014dcc:	d843      	bhi.n	8014e56 <MAP_makeSkewCmdList+0x416>
 8014dce:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014dd2:	f103 030a 	add.w	r3, r3, #10
 8014dd6:	881b      	ldrh	r3, [r3, #0]
 8014dd8:	2b4c      	cmp	r3, #76	@ 0x4c
 8014dda:	d13c      	bne.n	8014e56 <MAP_makeSkewCmdList+0x416>
 8014ddc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014de0:	f103 0308 	add.w	r3, r3, #8
 8014de4:	881b      	ldrh	r3, [r3, #0]
 8014de6:	2b20      	cmp	r3, #32
 8014de8:	d835      	bhi.n	8014e56 <MAP_makeSkewCmdList+0x416>
		{
			tcom[ ct_n++ ] = c1;
 8014dea:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014dee:	f103 0312 	add.w	r3, r3, #18
 8014df2:	881b      	ldrh	r3, [r3, #0]
 8014df4:	1c5a      	adds	r2, r3, #1
 8014df6:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014dfa:	f101 0112 	add.w	r1, r1, #18
 8014dfe:	800a      	strh	r2, [r1, #0]
 8014e00:	461a      	mov	r2, r3
 8014e02:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014e06:	f103 030c 	add.w	r3, r3, #12
 8014e0a:	881b      	ldrh	r3, [r3, #0]
 8014e0c:	b2d9      	uxtb	r1, r3
 8014e0e:	4bc0      	ldr	r3, [pc, #768]	@ (8015110 <MAP_makeSkewCmdList+0x6d0>)
 8014e10:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = R90S;
 8014e12:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014e16:	f103 0312 	add.w	r3, r3, #18
 8014e1a:	881b      	ldrh	r3, [r3, #0]
 8014e1c:	1c5a      	adds	r2, r3, #1
 8014e1e:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014e22:	f101 0112 	add.w	r1, r1, #18
 8014e26:	800a      	strh	r2, [r1, #0]
 8014e28:	461a      	mov	r2, r3
 8014e2a:	4bb9      	ldr	r3, [pc, #740]	@ (8015110 <MAP_makeSkewCmdList+0x6d0>)
 8014e2c:	214c      	movs	r1, #76	@ 0x4c
 8014e2e:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 8014e30:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014e34:	f103 0310 	add.w	r3, r3, #16
 8014e38:	881b      	ldrh	r3, [r3, #0]
 8014e3a:	3302      	adds	r3, #2
 8014e3c:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014e40:	f102 0210 	add.w	r2, r2, #16
 8014e44:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 8014e46:	2303      	movs	r3, #3
 8014e48:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014e4c:	f102 020e 	add.w	r2, r2, #14
 8014e50:	8013      	strh	r3, [r2, #0]
 8014e52:	f000 bd9e 	b.w	8015992 <MAP_makeSkewCmdList+0xf52>
		}
		//	直進 → 左90度 → 直進
		else if( (c1<=GO32) && (c2==L90S) && (c3<=GO32) )
 8014e56:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014e5a:	f103 030c 	add.w	r3, r3, #12
 8014e5e:	881b      	ldrh	r3, [r3, #0]
 8014e60:	2b20      	cmp	r3, #32
 8014e62:	d843      	bhi.n	8014eec <MAP_makeSkewCmdList+0x4ac>
 8014e64:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014e68:	f103 030a 	add.w	r3, r3, #10
 8014e6c:	881b      	ldrh	r3, [r3, #0]
 8014e6e:	2b4d      	cmp	r3, #77	@ 0x4d
 8014e70:	d13c      	bne.n	8014eec <MAP_makeSkewCmdList+0x4ac>
 8014e72:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014e76:	f103 0308 	add.w	r3, r3, #8
 8014e7a:	881b      	ldrh	r3, [r3, #0]
 8014e7c:	2b20      	cmp	r3, #32
 8014e7e:	d835      	bhi.n	8014eec <MAP_makeSkewCmdList+0x4ac>
		{
			tcom[ ct_n++ ] = c1;
 8014e80:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014e84:	f103 0312 	add.w	r3, r3, #18
 8014e88:	881b      	ldrh	r3, [r3, #0]
 8014e8a:	1c5a      	adds	r2, r3, #1
 8014e8c:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014e90:	f101 0112 	add.w	r1, r1, #18
 8014e94:	800a      	strh	r2, [r1, #0]
 8014e96:	461a      	mov	r2, r3
 8014e98:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014e9c:	f103 030c 	add.w	r3, r3, #12
 8014ea0:	881b      	ldrh	r3, [r3, #0]
 8014ea2:	b2d9      	uxtb	r1, r3
 8014ea4:	4b9a      	ldr	r3, [pc, #616]	@ (8015110 <MAP_makeSkewCmdList+0x6d0>)
 8014ea6:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = L90S;
 8014ea8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014eac:	f103 0312 	add.w	r3, r3, #18
 8014eb0:	881b      	ldrh	r3, [r3, #0]
 8014eb2:	1c5a      	adds	r2, r3, #1
 8014eb4:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014eb8:	f101 0112 	add.w	r1, r1, #18
 8014ebc:	800a      	strh	r2, [r1, #0]
 8014ebe:	461a      	mov	r2, r3
 8014ec0:	4b93      	ldr	r3, [pc, #588]	@ (8015110 <MAP_makeSkewCmdList+0x6d0>)
 8014ec2:	214d      	movs	r1, #77	@ 0x4d
 8014ec4:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 8014ec6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014eca:	f103 0310 	add.w	r3, r3, #16
 8014ece:	881b      	ldrh	r3, [r3, #0]
 8014ed0:	3302      	adds	r3, #2
 8014ed2:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014ed6:	f102 0210 	add.w	r2, r2, #16
 8014eda:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 8014edc:	2303      	movs	r3, #3
 8014ede:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014ee2:	f102 020e 	add.w	r2, r2, #14
 8014ee6:	8013      	strh	r3, [r2, #0]
 8014ee8:	f000 bd53 	b.w	8015992 <MAP_makeSkewCmdList+0xf52>
		}
		//	直進 → 右135度 → 斜め
		else if( (c1<=GO32) && (c2==R90S) && (c3==R90S) && (c4==L90S) )
 8014eec:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014ef0:	f103 030c 	add.w	r3, r3, #12
 8014ef4:	881b      	ldrh	r3, [r3, #0]
 8014ef6:	2b20      	cmp	r3, #32
 8014ef8:	d850      	bhi.n	8014f9c <MAP_makeSkewCmdList+0x55c>
 8014efa:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014efe:	f103 030a 	add.w	r3, r3, #10
 8014f02:	881b      	ldrh	r3, [r3, #0]
 8014f04:	2b4c      	cmp	r3, #76	@ 0x4c
 8014f06:	d149      	bne.n	8014f9c <MAP_makeSkewCmdList+0x55c>
 8014f08:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014f0c:	f103 0308 	add.w	r3, r3, #8
 8014f10:	881b      	ldrh	r3, [r3, #0]
 8014f12:	2b4c      	cmp	r3, #76	@ 0x4c
 8014f14:	d142      	bne.n	8014f9c <MAP_makeSkewCmdList+0x55c>
 8014f16:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014f1a:	f103 0306 	add.w	r3, r3, #6
 8014f1e:	881b      	ldrh	r3, [r3, #0]
 8014f20:	2b4d      	cmp	r3, #77	@ 0x4d
 8014f22:	d13b      	bne.n	8014f9c <MAP_makeSkewCmdList+0x55c>
		{
			tcom[ ct_n++ ] = c1;
 8014f24:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014f28:	f103 0312 	add.w	r3, r3, #18
 8014f2c:	881b      	ldrh	r3, [r3, #0]
 8014f2e:	1c5a      	adds	r2, r3, #1
 8014f30:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014f34:	f101 0112 	add.w	r1, r1, #18
 8014f38:	800a      	strh	r2, [r1, #0]
 8014f3a:	461a      	mov	r2, r3
 8014f3c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014f40:	f103 030c 	add.w	r3, r3, #12
 8014f44:	881b      	ldrh	r3, [r3, #0]
 8014f46:	b2d9      	uxtb	r1, r3
 8014f48:	4b71      	ldr	r3, [pc, #452]	@ (8015110 <MAP_makeSkewCmdList+0x6d0>)
 8014f4a:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RS135N;
 8014f4c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014f50:	f103 0312 	add.w	r3, r3, #18
 8014f54:	881b      	ldrh	r3, [r3, #0]
 8014f56:	1c5a      	adds	r2, r3, #1
 8014f58:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014f5c:	f101 0112 	add.w	r1, r1, #18
 8014f60:	800a      	strh	r2, [r1, #0]
 8014f62:	461a      	mov	r2, r3
 8014f64:	4b6a      	ldr	r3, [pc, #424]	@ (8015110 <MAP_makeSkewCmdList+0x6d0>)
 8014f66:	219b      	movs	r1, #155	@ 0x9b
 8014f68:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 8014f6a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014f6e:	f103 0310 	add.w	r3, r3, #16
 8014f72:	881b      	ldrh	r3, [r3, #0]
 8014f74:	3302      	adds	r3, #2
 8014f76:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014f7a:	f102 0210 	add.w	r2, r2, #16
 8014f7e:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 8014f80:	2351      	movs	r3, #81	@ 0x51
 8014f82:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014f86:	f102 0214 	add.w	r2, r2, #20
 8014f8a:	8013      	strh	r3, [r2, #0]
			flag = 2;
 8014f8c:	2302      	movs	r3, #2
 8014f8e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8014f92:	f102 020e 	add.w	r2, r2, #14
 8014f96:	8013      	strh	r3, [r2, #0]
 8014f98:	f000 bcfb 	b.w	8015992 <MAP_makeSkewCmdList+0xf52>
		}
		//	直進 → 左135度 → 斜め
		else if( (c1<=GO32) && (c2==L90S) && (c3==L90S) && (c4==R90S) )
 8014f9c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014fa0:	f103 030c 	add.w	r3, r3, #12
 8014fa4:	881b      	ldrh	r3, [r3, #0]
 8014fa6:	2b20      	cmp	r3, #32
 8014fa8:	d850      	bhi.n	801504c <MAP_makeSkewCmdList+0x60c>
 8014faa:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014fae:	f103 030a 	add.w	r3, r3, #10
 8014fb2:	881b      	ldrh	r3, [r3, #0]
 8014fb4:	2b4d      	cmp	r3, #77	@ 0x4d
 8014fb6:	d149      	bne.n	801504c <MAP_makeSkewCmdList+0x60c>
 8014fb8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014fbc:	f103 0308 	add.w	r3, r3, #8
 8014fc0:	881b      	ldrh	r3, [r3, #0]
 8014fc2:	2b4d      	cmp	r3, #77	@ 0x4d
 8014fc4:	d142      	bne.n	801504c <MAP_makeSkewCmdList+0x60c>
 8014fc6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014fca:	f103 0306 	add.w	r3, r3, #6
 8014fce:	881b      	ldrh	r3, [r3, #0]
 8014fd0:	2b4c      	cmp	r3, #76	@ 0x4c
 8014fd2:	d13b      	bne.n	801504c <MAP_makeSkewCmdList+0x60c>
		{
			tcom[ ct_n++ ] = c1;
 8014fd4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014fd8:	f103 0312 	add.w	r3, r3, #18
 8014fdc:	881b      	ldrh	r3, [r3, #0]
 8014fde:	1c5a      	adds	r2, r3, #1
 8014fe0:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8014fe4:	f101 0112 	add.w	r1, r1, #18
 8014fe8:	800a      	strh	r2, [r1, #0]
 8014fea:	461a      	mov	r2, r3
 8014fec:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8014ff0:	f103 030c 	add.w	r3, r3, #12
 8014ff4:	881b      	ldrh	r3, [r3, #0]
 8014ff6:	b2d9      	uxtb	r1, r3
 8014ff8:	4b45      	ldr	r3, [pc, #276]	@ (8015110 <MAP_makeSkewCmdList+0x6d0>)
 8014ffa:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LS135N;
 8014ffc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015000:	f103 0312 	add.w	r3, r3, #18
 8015004:	881b      	ldrh	r3, [r3, #0]
 8015006:	1c5a      	adds	r2, r3, #1
 8015008:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 801500c:	f101 0112 	add.w	r1, r1, #18
 8015010:	800a      	strh	r2, [r1, #0]
 8015012:	461a      	mov	r2, r3
 8015014:	4b3e      	ldr	r3, [pc, #248]	@ (8015110 <MAP_makeSkewCmdList+0x6d0>)
 8015016:	219c      	movs	r1, #156	@ 0x9c
 8015018:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 801501a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801501e:	f103 0310 	add.w	r3, r3, #16
 8015022:	881b      	ldrh	r3, [r3, #0]
 8015024:	3302      	adds	r3, #2
 8015026:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801502a:	f102 0210 	add.w	r2, r2, #16
 801502e:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 8015030:	2351      	movs	r3, #81	@ 0x51
 8015032:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015036:	f102 0214 	add.w	r2, r2, #20
 801503a:	8013      	strh	r3, [r2, #0]
			flag = 2;
 801503c:	2302      	movs	r3, #2
 801503e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015042:	f102 020e 	add.w	r2, r2, #14
 8015046:	8013      	strh	r3, [r2, #0]
 8015048:	f000 bca3 	b.w	8015992 <MAP_makeSkewCmdList+0xf52>
		}

		//	直進 → 右180度 → 直進
		else if( (c1<=GO32) && (c2==R90S) && (c3==R90S) && (c4<=GO32) )
 801504c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015050:	f103 030c 	add.w	r3, r3, #12
 8015054:	881b      	ldrh	r3, [r3, #0]
 8015056:	2b20      	cmp	r3, #32
 8015058:	d85c      	bhi.n	8015114 <MAP_makeSkewCmdList+0x6d4>
 801505a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801505e:	f103 030a 	add.w	r3, r3, #10
 8015062:	881b      	ldrh	r3, [r3, #0]
 8015064:	2b4c      	cmp	r3, #76	@ 0x4c
 8015066:	d155      	bne.n	8015114 <MAP_makeSkewCmdList+0x6d4>
 8015068:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801506c:	f103 0308 	add.w	r3, r3, #8
 8015070:	881b      	ldrh	r3, [r3, #0]
 8015072:	2b4c      	cmp	r3, #76	@ 0x4c
 8015074:	d14e      	bne.n	8015114 <MAP_makeSkewCmdList+0x6d4>
 8015076:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801507a:	f103 0306 	add.w	r3, r3, #6
 801507e:	881b      	ldrh	r3, [r3, #0]
 8015080:	2b20      	cmp	r3, #32
 8015082:	d847      	bhi.n	8015114 <MAP_makeSkewCmdList+0x6d4>
		{
			tcom[ ct_n++ ] = c1;
 8015084:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015088:	f103 0312 	add.w	r3, r3, #18
 801508c:	881b      	ldrh	r3, [r3, #0]
 801508e:	1c5a      	adds	r2, r3, #1
 8015090:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8015094:	f101 0112 	add.w	r1, r1, #18
 8015098:	800a      	strh	r2, [r1, #0]
 801509a:	461a      	mov	r2, r3
 801509c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80150a0:	f103 030c 	add.w	r3, r3, #12
 80150a4:	881b      	ldrh	r3, [r3, #0]
 80150a6:	b2d9      	uxtb	r1, r3
 80150a8:	4b19      	ldr	r3, [pc, #100]	@ (8015110 <MAP_makeSkewCmdList+0x6d0>)
 80150aa:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = R90S;
 80150ac:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80150b0:	f103 0312 	add.w	r3, r3, #18
 80150b4:	881b      	ldrh	r3, [r3, #0]
 80150b6:	1c5a      	adds	r2, r3, #1
 80150b8:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 80150bc:	f101 0112 	add.w	r1, r1, #18
 80150c0:	800a      	strh	r2, [r1, #0]
 80150c2:	461a      	mov	r2, r3
 80150c4:	4b12      	ldr	r3, [pc, #72]	@ (8015110 <MAP_makeSkewCmdList+0x6d0>)
 80150c6:	214c      	movs	r1, #76	@ 0x4c
 80150c8:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = R90S;
 80150ca:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80150ce:	f103 0312 	add.w	r3, r3, #18
 80150d2:	881b      	ldrh	r3, [r3, #0]
 80150d4:	1c5a      	adds	r2, r3, #1
 80150d6:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 80150da:	f101 0112 	add.w	r1, r1, #18
 80150de:	800a      	strh	r2, [r1, #0]
 80150e0:	461a      	mov	r2, r3
 80150e2:	4b0b      	ldr	r3, [pc, #44]	@ (8015110 <MAP_makeSkewCmdList+0x6d0>)
 80150e4:	214c      	movs	r1, #76	@ 0x4c
 80150e6:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 80150e8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80150ec:	f103 0310 	add.w	r3, r3, #16
 80150f0:	881b      	ldrh	r3, [r3, #0]
 80150f2:	3303      	adds	r3, #3
 80150f4:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80150f8:	f102 0210 	add.w	r2, r2, #16
 80150fc:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 80150fe:	2303      	movs	r3, #3
 8015100:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015104:	f102 020e 	add.w	r2, r2, #14
 8015108:	8013      	strh	r3, [r2, #0]
 801510a:	f000 bc42 	b.w	8015992 <MAP_makeSkewCmdList+0xf52>
 801510e:	bf00      	nop
 8015110:	20019c48 	.word	0x20019c48
		}
		//	直進 → 左180度 → 直進
		else if( (c1<=GO32) && (c2==L90S) && (c2==L90S) && (c4<=GO32) )
 8015114:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015118:	f103 030c 	add.w	r3, r3, #12
 801511c:	881b      	ldrh	r3, [r3, #0]
 801511e:	2b20      	cmp	r3, #32
 8015120:	d858      	bhi.n	80151d4 <MAP_makeSkewCmdList+0x794>
 8015122:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015126:	f103 030a 	add.w	r3, r3, #10
 801512a:	881b      	ldrh	r3, [r3, #0]
 801512c:	2b4d      	cmp	r3, #77	@ 0x4d
 801512e:	d151      	bne.n	80151d4 <MAP_makeSkewCmdList+0x794>
 8015130:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015134:	f103 030a 	add.w	r3, r3, #10
 8015138:	881b      	ldrh	r3, [r3, #0]
 801513a:	2b4d      	cmp	r3, #77	@ 0x4d
 801513c:	d14a      	bne.n	80151d4 <MAP_makeSkewCmdList+0x794>
 801513e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015142:	f103 0306 	add.w	r3, r3, #6
 8015146:	881b      	ldrh	r3, [r3, #0]
 8015148:	2b20      	cmp	r3, #32
 801514a:	d843      	bhi.n	80151d4 <MAP_makeSkewCmdList+0x794>
		{
			tcom[ ct_n++ ] = c1;
 801514c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015150:	f103 0312 	add.w	r3, r3, #18
 8015154:	881b      	ldrh	r3, [r3, #0]
 8015156:	1c5a      	adds	r2, r3, #1
 8015158:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 801515c:	f101 0112 	add.w	r1, r1, #18
 8015160:	800a      	strh	r2, [r1, #0]
 8015162:	461a      	mov	r2, r3
 8015164:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015168:	f103 030c 	add.w	r3, r3, #12
 801516c:	881b      	ldrh	r3, [r3, #0]
 801516e:	b2d9      	uxtb	r1, r3
 8015170:	4baa      	ldr	r3, [pc, #680]	@ (801541c <MAP_makeSkewCmdList+0x9dc>)
 8015172:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = L90S;
 8015174:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015178:	f103 0312 	add.w	r3, r3, #18
 801517c:	881b      	ldrh	r3, [r3, #0]
 801517e:	1c5a      	adds	r2, r3, #1
 8015180:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8015184:	f101 0112 	add.w	r1, r1, #18
 8015188:	800a      	strh	r2, [r1, #0]
 801518a:	461a      	mov	r2, r3
 801518c:	4ba3      	ldr	r3, [pc, #652]	@ (801541c <MAP_makeSkewCmdList+0x9dc>)
 801518e:	214d      	movs	r1, #77	@ 0x4d
 8015190:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = L90S;
 8015192:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015196:	f103 0312 	add.w	r3, r3, #18
 801519a:	881b      	ldrh	r3, [r3, #0]
 801519c:	1c5a      	adds	r2, r3, #1
 801519e:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 80151a2:	f101 0112 	add.w	r1, r1, #18
 80151a6:	800a      	strh	r2, [r1, #0]
 80151a8:	461a      	mov	r2, r3
 80151aa:	4b9c      	ldr	r3, [pc, #624]	@ (801541c <MAP_makeSkewCmdList+0x9dc>)
 80151ac:	214d      	movs	r1, #77	@ 0x4d
 80151ae:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 80151b0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80151b4:	f103 0310 	add.w	r3, r3, #16
 80151b8:	881b      	ldrh	r3, [r3, #0]
 80151ba:	3303      	adds	r3, #3
 80151bc:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80151c0:	f102 0210 	add.w	r2, r2, #16
 80151c4:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 80151c6:	2303      	movs	r3, #3
 80151c8:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80151cc:	f102 020e 	add.w	r2, r2, #14
 80151d0:	8013      	strh	r3, [r2, #0]
 80151d2:	e3de      	b.n	8015992 <MAP_makeSkewCmdList+0xf52>
		}

		//	斜め → 右45度 → 直進
		else if( (c1==R90S) && (c2<=GO32)  && (flag != 3 ) )
 80151d4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80151d8:	f103 030c 	add.w	r3, r3, #12
 80151dc:	881b      	ldrh	r3, [r3, #0]
 80151de:	2b4c      	cmp	r3, #76	@ 0x4c
 80151e0:	d15c      	bne.n	801529c <MAP_makeSkewCmdList+0x85c>
 80151e2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80151e6:	f103 030a 	add.w	r3, r3, #10
 80151ea:	881b      	ldrh	r3, [r3, #0]
 80151ec:	2b20      	cmp	r3, #32
 80151ee:	d855      	bhi.n	801529c <MAP_makeSkewCmdList+0x85c>
 80151f0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80151f4:	f103 030e 	add.w	r3, r3, #14
 80151f8:	881b      	ldrh	r3, [r3, #0]
 80151fa:	2b03      	cmp	r3, #3
 80151fc:	d04e      	beq.n	801529c <MAP_makeSkewCmdList+0x85c>
		{
			if( flag==1 ) tcom[ ct_n++ ] = x;
 80151fe:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015202:	f103 030e 	add.w	r3, r3, #14
 8015206:	881b      	ldrh	r3, [r3, #0]
 8015208:	2b01      	cmp	r3, #1
 801520a:	d113      	bne.n	8015234 <MAP_makeSkewCmdList+0x7f4>
 801520c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015210:	f103 0312 	add.w	r3, r3, #18
 8015214:	881b      	ldrh	r3, [r3, #0]
 8015216:	1c5a      	adds	r2, r3, #1
 8015218:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 801521c:	f101 0112 	add.w	r1, r1, #18
 8015220:	800a      	strh	r2, [r1, #0]
 8015222:	461a      	mov	r2, r3
 8015224:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015228:	f103 0314 	add.w	r3, r3, #20
 801522c:	881b      	ldrh	r3, [r3, #0]
 801522e:	b2d9      	uxtb	r1, r3
 8015230:	4b7a      	ldr	r3, [pc, #488]	@ (801541c <MAP_makeSkewCmdList+0x9dc>)
 8015232:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RN45S;
 8015234:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015238:	f103 0312 	add.w	r3, r3, #18
 801523c:	881b      	ldrh	r3, [r3, #0]
 801523e:	1c5a      	adds	r2, r3, #1
 8015240:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8015244:	f101 0112 	add.w	r1, r1, #18
 8015248:	800a      	strh	r2, [r1, #0]
 801524a:	461a      	mov	r2, r3
 801524c:	4b73      	ldr	r3, [pc, #460]	@ (801541c <MAP_makeSkewCmdList+0x9dc>)
 801524e:	219d      	movs	r1, #157	@ 0x9d
 8015250:	5499      	strb	r1, [r3, r2]
			scom_temp[ct_st+1] = c2 - 1;		//	直線区間を1つ減らす
 8015252:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015256:	f103 0310 	add.w	r3, r3, #16
 801525a:	881b      	ldrh	r3, [r3, #0]
 801525c:	3301      	adds	r3, #1
 801525e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015262:	f102 020a 	add.w	r2, r2, #10
 8015266:	8812      	ldrh	r2, [r2, #0]
 8015268:	3a01      	subs	r2, #1
 801526a:	b292      	uxth	r2, r2
 801526c:	f107 0118 	add.w	r1, r7, #24
 8015270:	005b      	lsls	r3, r3, #1
 8015272:	440b      	add	r3, r1
 8015274:	f823 2c14 	strh.w	r2, [r3, #-20]
			ct_st ++;
 8015278:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801527c:	f103 0310 	add.w	r3, r3, #16
 8015280:	881b      	ldrh	r3, [r3, #0]
 8015282:	3301      	adds	r3, #1
 8015284:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015288:	f102 0210 	add.w	r2, r2, #16
 801528c:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 801528e:	2303      	movs	r3, #3
 8015290:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015294:	f102 020e 	add.w	r2, r2, #14
 8015298:	8013      	strh	r3, [r2, #0]
 801529a:	e37a      	b.n	8015992 <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 左45度 → 直進
		else if( (c1==L90S) && (c2<=GO32)  && (flag != 3 ) )
 801529c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80152a0:	f103 030c 	add.w	r3, r3, #12
 80152a4:	881b      	ldrh	r3, [r3, #0]
 80152a6:	2b4d      	cmp	r3, #77	@ 0x4d
 80152a8:	d15c      	bne.n	8015364 <MAP_makeSkewCmdList+0x924>
 80152aa:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80152ae:	f103 030a 	add.w	r3, r3, #10
 80152b2:	881b      	ldrh	r3, [r3, #0]
 80152b4:	2b20      	cmp	r3, #32
 80152b6:	d855      	bhi.n	8015364 <MAP_makeSkewCmdList+0x924>
 80152b8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80152bc:	f103 030e 	add.w	r3, r3, #14
 80152c0:	881b      	ldrh	r3, [r3, #0]
 80152c2:	2b03      	cmp	r3, #3
 80152c4:	d04e      	beq.n	8015364 <MAP_makeSkewCmdList+0x924>
		{
			if( flag==1 ) tcom[ ct_n++ ] = x;
 80152c6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80152ca:	f103 030e 	add.w	r3, r3, #14
 80152ce:	881b      	ldrh	r3, [r3, #0]
 80152d0:	2b01      	cmp	r3, #1
 80152d2:	d113      	bne.n	80152fc <MAP_makeSkewCmdList+0x8bc>
 80152d4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80152d8:	f103 0312 	add.w	r3, r3, #18
 80152dc:	881b      	ldrh	r3, [r3, #0]
 80152de:	1c5a      	adds	r2, r3, #1
 80152e0:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 80152e4:	f101 0112 	add.w	r1, r1, #18
 80152e8:	800a      	strh	r2, [r1, #0]
 80152ea:	461a      	mov	r2, r3
 80152ec:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80152f0:	f103 0314 	add.w	r3, r3, #20
 80152f4:	881b      	ldrh	r3, [r3, #0]
 80152f6:	b2d9      	uxtb	r1, r3
 80152f8:	4b48      	ldr	r3, [pc, #288]	@ (801541c <MAP_makeSkewCmdList+0x9dc>)
 80152fa:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LN45S;
 80152fc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015300:	f103 0312 	add.w	r3, r3, #18
 8015304:	881b      	ldrh	r3, [r3, #0]
 8015306:	1c5a      	adds	r2, r3, #1
 8015308:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 801530c:	f101 0112 	add.w	r1, r1, #18
 8015310:	800a      	strh	r2, [r1, #0]
 8015312:	461a      	mov	r2, r3
 8015314:	4b41      	ldr	r3, [pc, #260]	@ (801541c <MAP_makeSkewCmdList+0x9dc>)
 8015316:	219e      	movs	r1, #158	@ 0x9e
 8015318:	5499      	strb	r1, [r3, r2]
			scom_temp[ct_st+1] = c2 - 1;		//	直線区間を1つ減らす
 801531a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801531e:	f103 0310 	add.w	r3, r3, #16
 8015322:	881b      	ldrh	r3, [r3, #0]
 8015324:	3301      	adds	r3, #1
 8015326:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801532a:	f102 020a 	add.w	r2, r2, #10
 801532e:	8812      	ldrh	r2, [r2, #0]
 8015330:	3a01      	subs	r2, #1
 8015332:	b292      	uxth	r2, r2
 8015334:	f107 0118 	add.w	r1, r7, #24
 8015338:	005b      	lsls	r3, r3, #1
 801533a:	440b      	add	r3, r1
 801533c:	f823 2c14 	strh.w	r2, [r3, #-20]
			ct_st ++;
 8015340:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015344:	f103 0310 	add.w	r3, r3, #16
 8015348:	881b      	ldrh	r3, [r3, #0]
 801534a:	3301      	adds	r3, #1
 801534c:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015350:	f102 0210 	add.w	r2, r2, #16
 8015354:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 8015356:	2303      	movs	r3, #3
 8015358:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801535c:	f102 020e 	add.w	r2, r2, #14
 8015360:	8013      	strh	r3, [r2, #0]
 8015362:	e316      	b.n	8015992 <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 右90度 → 斜め
		else if( (c1==L90S) && (c2==R90S) && (c3==R90S) && (c4==L90S)  && (flag != 3 ) )
 8015364:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015368:	f103 030c 	add.w	r3, r3, #12
 801536c:	881b      	ldrh	r3, [r3, #0]
 801536e:	2b4d      	cmp	r3, #77	@ 0x4d
 8015370:	f040 8093 	bne.w	801549a <MAP_makeSkewCmdList+0xa5a>
 8015374:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015378:	f103 030a 	add.w	r3, r3, #10
 801537c:	881b      	ldrh	r3, [r3, #0]
 801537e:	2b4c      	cmp	r3, #76	@ 0x4c
 8015380:	f040 808b 	bne.w	801549a <MAP_makeSkewCmdList+0xa5a>
 8015384:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015388:	f103 0308 	add.w	r3, r3, #8
 801538c:	881b      	ldrh	r3, [r3, #0]
 801538e:	2b4c      	cmp	r3, #76	@ 0x4c
 8015390:	f040 8083 	bne.w	801549a <MAP_makeSkewCmdList+0xa5a>
 8015394:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015398:	f103 0306 	add.w	r3, r3, #6
 801539c:	881b      	ldrh	r3, [r3, #0]
 801539e:	2b4d      	cmp	r3, #77	@ 0x4d
 80153a0:	d17b      	bne.n	801549a <MAP_makeSkewCmdList+0xa5a>
 80153a2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80153a6:	f103 030e 	add.w	r3, r3, #14
 80153aa:	881b      	ldrh	r3, [r3, #0]
 80153ac:	2b03      	cmp	r3, #3
 80153ae:	d074      	beq.n	801549a <MAP_makeSkewCmdList+0xa5a>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからRN90N
 80153b0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80153b4:	f103 030e 	add.w	r3, r3, #14
 80153b8:	881b      	ldrh	r3, [r3, #0]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d10f      	bne.n	80153de <MAP_makeSkewCmdList+0x99e>
 80153be:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80153c2:	f103 0312 	add.w	r3, r3, #18
 80153c6:	881b      	ldrh	r3, [r3, #0]
 80153c8:	1c5a      	adds	r2, r3, #1
 80153ca:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 80153ce:	f101 0112 	add.w	r1, r1, #18
 80153d2:	800a      	strh	r2, [r1, #0]
 80153d4:	461a      	mov	r2, r3
 80153d6:	4b11      	ldr	r3, [pc, #68]	@ (801541c <MAP_makeSkewCmdList+0x9dc>)
 80153d8:	2152      	movs	r1, #82	@ 0x52
 80153da:	5499      	strb	r1, [r3, r2]
 80153dc:	e036      	b.n	801544c <MAP_makeSkewCmdList+0xa0c>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 80153de:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80153e2:	f103 030e 	add.w	r3, r3, #14
 80153e6:	881b      	ldrh	r3, [r3, #0]
 80153e8:	2b01      	cmp	r3, #1
 80153ea:	d119      	bne.n	8015420 <MAP_makeSkewCmdList+0x9e0>
 80153ec:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80153f0:	f103 0314 	add.w	r3, r3, #20
 80153f4:	881b      	ldrh	r3, [r3, #0]
 80153f6:	b2da      	uxtb	r2, r3
 80153f8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80153fc:	f103 0312 	add.w	r3, r3, #18
 8015400:	881b      	ldrh	r3, [r3, #0]
 8015402:	1c59      	adds	r1, r3, #1
 8015404:	f507 5000 	add.w	r0, r7, #8192	@ 0x2000
 8015408:	f100 0012 	add.w	r0, r0, #18
 801540c:	8001      	strh	r1, [r0, #0]
 801540e:	4619      	mov	r1, r3
 8015410:	1c53      	adds	r3, r2, #1
 8015412:	b2da      	uxtb	r2, r3
 8015414:	4b01      	ldr	r3, [pc, #4]	@ (801541c <MAP_makeSkewCmdList+0x9dc>)
 8015416:	545a      	strb	r2, [r3, r1]
 8015418:	e018      	b.n	801544c <MAP_makeSkewCmdList+0xa0c>
 801541a:	bf00      	nop
 801541c:	20019c48 	.word	0x20019c48
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 8015420:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015424:	f103 030e 	add.w	r3, r3, #14
 8015428:	881b      	ldrh	r3, [r3, #0]
 801542a:	2b02      	cmp	r3, #2
 801542c:	d10e      	bne.n	801544c <MAP_makeSkewCmdList+0xa0c>
 801542e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015432:	f103 0312 	add.w	r3, r3, #18
 8015436:	881b      	ldrh	r3, [r3, #0]
 8015438:	1c5a      	adds	r2, r3, #1
 801543a:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 801543e:	f101 0112 	add.w	r1, r1, #18
 8015442:	800a      	strh	r2, [r1, #0]
 8015444:	461a      	mov	r2, r3
 8015446:	4ba9      	ldr	r3, [pc, #676]	@ (80156ec <MAP_makeSkewCmdList+0xcac>)
 8015448:	2152      	movs	r1, #82	@ 0x52
 801544a:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RN90N;
 801544c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015450:	f103 0312 	add.w	r3, r3, #18
 8015454:	881b      	ldrh	r3, [r3, #0]
 8015456:	1c5a      	adds	r2, r3, #1
 8015458:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 801545c:	f101 0112 	add.w	r1, r1, #18
 8015460:	800a      	strh	r2, [r1, #0]
 8015462:	461a      	mov	r2, r3
 8015464:	4ba1      	ldr	r3, [pc, #644]	@ (80156ec <MAP_makeSkewCmdList+0xcac>)
 8015466:	21a1      	movs	r1, #161	@ 0xa1
 8015468:	5499      	strb	r1, [r3, r2]
			ct_st +=2;
 801546a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801546e:	f103 0310 	add.w	r3, r3, #16
 8015472:	881b      	ldrh	r3, [r3, #0]
 8015474:	3302      	adds	r3, #2
 8015476:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801547a:	f102 0210 	add.w	r2, r2, #16
 801547e:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 8015480:	2351      	movs	r3, #81	@ 0x51
 8015482:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015486:	f102 0214 	add.w	r2, r2, #20
 801548a:	8013      	strh	r3, [r2, #0]
			flag = 1;
 801548c:	2301      	movs	r3, #1
 801548e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015492:	f102 020e 	add.w	r2, r2, #14
 8015496:	8013      	strh	r3, [r2, #0]
 8015498:	e27b      	b.n	8015992 <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 左90度 → 斜め
		else if( (c1==R90S) && (c2==L90S) && (c3==L90S) && (c4==R90S)  && (flag != 3 ) )
 801549a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801549e:	f103 030c 	add.w	r3, r3, #12
 80154a2:	881b      	ldrh	r3, [r3, #0]
 80154a4:	2b4c      	cmp	r3, #76	@ 0x4c
 80154a6:	f040 808f 	bne.w	80155c8 <MAP_makeSkewCmdList+0xb88>
 80154aa:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80154ae:	f103 030a 	add.w	r3, r3, #10
 80154b2:	881b      	ldrh	r3, [r3, #0]
 80154b4:	2b4d      	cmp	r3, #77	@ 0x4d
 80154b6:	f040 8087 	bne.w	80155c8 <MAP_makeSkewCmdList+0xb88>
 80154ba:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80154be:	f103 0308 	add.w	r3, r3, #8
 80154c2:	881b      	ldrh	r3, [r3, #0]
 80154c4:	2b4d      	cmp	r3, #77	@ 0x4d
 80154c6:	d17f      	bne.n	80155c8 <MAP_makeSkewCmdList+0xb88>
 80154c8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80154cc:	f103 0306 	add.w	r3, r3, #6
 80154d0:	881b      	ldrh	r3, [r3, #0]
 80154d2:	2b4c      	cmp	r3, #76	@ 0x4c
 80154d4:	d178      	bne.n	80155c8 <MAP_makeSkewCmdList+0xb88>
 80154d6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80154da:	f103 030e 	add.w	r3, r3, #14
 80154de:	881b      	ldrh	r3, [r3, #0]
 80154e0:	2b03      	cmp	r3, #3
 80154e2:	d071      	beq.n	80155c8 <MAP_makeSkewCmdList+0xb88>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからLN90N
 80154e4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80154e8:	f103 030e 	add.w	r3, r3, #14
 80154ec:	881b      	ldrh	r3, [r3, #0]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d10f      	bne.n	8015512 <MAP_makeSkewCmdList+0xad2>
 80154f2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80154f6:	f103 0312 	add.w	r3, r3, #18
 80154fa:	881b      	ldrh	r3, [r3, #0]
 80154fc:	1c5a      	adds	r2, r3, #1
 80154fe:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8015502:	f101 0112 	add.w	r1, r1, #18
 8015506:	800a      	strh	r2, [r1, #0]
 8015508:	461a      	mov	r2, r3
 801550a:	4b78      	ldr	r3, [pc, #480]	@ (80156ec <MAP_makeSkewCmdList+0xcac>)
 801550c:	2152      	movs	r1, #82	@ 0x52
 801550e:	5499      	strb	r1, [r3, r2]
 8015510:	e033      	b.n	801557a <MAP_makeSkewCmdList+0xb3a>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 8015512:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015516:	f103 030e 	add.w	r3, r3, #14
 801551a:	881b      	ldrh	r3, [r3, #0]
 801551c:	2b01      	cmp	r3, #1
 801551e:	d116      	bne.n	801554e <MAP_makeSkewCmdList+0xb0e>
 8015520:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015524:	f103 0314 	add.w	r3, r3, #20
 8015528:	881b      	ldrh	r3, [r3, #0]
 801552a:	b2da      	uxtb	r2, r3
 801552c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015530:	f103 0312 	add.w	r3, r3, #18
 8015534:	881b      	ldrh	r3, [r3, #0]
 8015536:	1c59      	adds	r1, r3, #1
 8015538:	f507 5000 	add.w	r0, r7, #8192	@ 0x2000
 801553c:	f100 0012 	add.w	r0, r0, #18
 8015540:	8001      	strh	r1, [r0, #0]
 8015542:	4619      	mov	r1, r3
 8015544:	1c53      	adds	r3, r2, #1
 8015546:	b2da      	uxtb	r2, r3
 8015548:	4b68      	ldr	r3, [pc, #416]	@ (80156ec <MAP_makeSkewCmdList+0xcac>)
 801554a:	545a      	strb	r2, [r3, r1]
 801554c:	e015      	b.n	801557a <MAP_makeSkewCmdList+0xb3a>
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 801554e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015552:	f103 030e 	add.w	r3, r3, #14
 8015556:	881b      	ldrh	r3, [r3, #0]
 8015558:	2b02      	cmp	r3, #2
 801555a:	d10e      	bne.n	801557a <MAP_makeSkewCmdList+0xb3a>
 801555c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015560:	f103 0312 	add.w	r3, r3, #18
 8015564:	881b      	ldrh	r3, [r3, #0]
 8015566:	1c5a      	adds	r2, r3, #1
 8015568:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 801556c:	f101 0112 	add.w	r1, r1, #18
 8015570:	800a      	strh	r2, [r1, #0]
 8015572:	461a      	mov	r2, r3
 8015574:	4b5d      	ldr	r3, [pc, #372]	@ (80156ec <MAP_makeSkewCmdList+0xcac>)
 8015576:	2152      	movs	r1, #82	@ 0x52
 8015578:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LN90N;
 801557a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801557e:	f103 0312 	add.w	r3, r3, #18
 8015582:	881b      	ldrh	r3, [r3, #0]
 8015584:	1c5a      	adds	r2, r3, #1
 8015586:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 801558a:	f101 0112 	add.w	r1, r1, #18
 801558e:	800a      	strh	r2, [r1, #0]
 8015590:	461a      	mov	r2, r3
 8015592:	4b56      	ldr	r3, [pc, #344]	@ (80156ec <MAP_makeSkewCmdList+0xcac>)
 8015594:	21a2      	movs	r1, #162	@ 0xa2
 8015596:	5499      	strb	r1, [r3, r2]
			ct_st +=2;
 8015598:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801559c:	f103 0310 	add.w	r3, r3, #16
 80155a0:	881b      	ldrh	r3, [r3, #0]
 80155a2:	3302      	adds	r3, #2
 80155a4:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80155a8:	f102 0210 	add.w	r2, r2, #16
 80155ac:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 80155ae:	2351      	movs	r3, #81	@ 0x51
 80155b0:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80155b4:	f102 0214 	add.w	r2, r2, #20
 80155b8:	8013      	strh	r3, [r2, #0]
			flag = 1;
 80155ba:	2301      	movs	r3, #1
 80155bc:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80155c0:	f102 020e 	add.w	r2, r2, #14
 80155c4:	8013      	strh	r3, [r2, #0]
 80155c6:	e1e4      	b.n	8015992 <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 右135度 → 直進
		else if( (c1==L90S) && (c2==R90S) && (c3==R90S) && (c4<=GO32)  && (flag != 3 ) )
 80155c8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80155cc:	f103 030c 	add.w	r3, r3, #12
 80155d0:	881b      	ldrh	r3, [r3, #0]
 80155d2:	2b4d      	cmp	r3, #77	@ 0x4d
 80155d4:	f040 808c 	bne.w	80156f0 <MAP_makeSkewCmdList+0xcb0>
 80155d8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80155dc:	f103 030a 	add.w	r3, r3, #10
 80155e0:	881b      	ldrh	r3, [r3, #0]
 80155e2:	2b4c      	cmp	r3, #76	@ 0x4c
 80155e4:	f040 8084 	bne.w	80156f0 <MAP_makeSkewCmdList+0xcb0>
 80155e8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80155ec:	f103 0308 	add.w	r3, r3, #8
 80155f0:	881b      	ldrh	r3, [r3, #0]
 80155f2:	2b4c      	cmp	r3, #76	@ 0x4c
 80155f4:	d17c      	bne.n	80156f0 <MAP_makeSkewCmdList+0xcb0>
 80155f6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80155fa:	f103 0306 	add.w	r3, r3, #6
 80155fe:	881b      	ldrh	r3, [r3, #0]
 8015600:	2b20      	cmp	r3, #32
 8015602:	d875      	bhi.n	80156f0 <MAP_makeSkewCmdList+0xcb0>
 8015604:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015608:	f103 030e 	add.w	r3, r3, #14
 801560c:	881b      	ldrh	r3, [r3, #0]
 801560e:	2b03      	cmp	r3, #3
 8015610:	d06e      	beq.n	80156f0 <MAP_makeSkewCmdList+0xcb0>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからLN90N
 8015612:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015616:	f103 030e 	add.w	r3, r3, #14
 801561a:	881b      	ldrh	r3, [r3, #0]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d10f      	bne.n	8015640 <MAP_makeSkewCmdList+0xc00>
 8015620:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015624:	f103 0312 	add.w	r3, r3, #18
 8015628:	881b      	ldrh	r3, [r3, #0]
 801562a:	1c5a      	adds	r2, r3, #1
 801562c:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8015630:	f101 0112 	add.w	r1, r1, #18
 8015634:	800a      	strh	r2, [r1, #0]
 8015636:	461a      	mov	r2, r3
 8015638:	4b2c      	ldr	r3, [pc, #176]	@ (80156ec <MAP_makeSkewCmdList+0xcac>)
 801563a:	2152      	movs	r1, #82	@ 0x52
 801563c:	5499      	strb	r1, [r3, r2]
 801563e:	e033      	b.n	80156a8 <MAP_makeSkewCmdList+0xc68>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 8015640:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015644:	f103 030e 	add.w	r3, r3, #14
 8015648:	881b      	ldrh	r3, [r3, #0]
 801564a:	2b01      	cmp	r3, #1
 801564c:	d116      	bne.n	801567c <MAP_makeSkewCmdList+0xc3c>
 801564e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015652:	f103 0314 	add.w	r3, r3, #20
 8015656:	881b      	ldrh	r3, [r3, #0]
 8015658:	b2da      	uxtb	r2, r3
 801565a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801565e:	f103 0312 	add.w	r3, r3, #18
 8015662:	881b      	ldrh	r3, [r3, #0]
 8015664:	1c59      	adds	r1, r3, #1
 8015666:	f507 5000 	add.w	r0, r7, #8192	@ 0x2000
 801566a:	f100 0012 	add.w	r0, r0, #18
 801566e:	8001      	strh	r1, [r0, #0]
 8015670:	4619      	mov	r1, r3
 8015672:	1c53      	adds	r3, r2, #1
 8015674:	b2da      	uxtb	r2, r3
 8015676:	4b1d      	ldr	r3, [pc, #116]	@ (80156ec <MAP_makeSkewCmdList+0xcac>)
 8015678:	545a      	strb	r2, [r3, r1]
 801567a:	e015      	b.n	80156a8 <MAP_makeSkewCmdList+0xc68>
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 801567c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015680:	f103 030e 	add.w	r3, r3, #14
 8015684:	881b      	ldrh	r3, [r3, #0]
 8015686:	2b02      	cmp	r3, #2
 8015688:	d10e      	bne.n	80156a8 <MAP_makeSkewCmdList+0xc68>
 801568a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801568e:	f103 0312 	add.w	r3, r3, #18
 8015692:	881b      	ldrh	r3, [r3, #0]
 8015694:	1c5a      	adds	r2, r3, #1
 8015696:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 801569a:	f101 0112 	add.w	r1, r1, #18
 801569e:	800a      	strh	r2, [r1, #0]
 80156a0:	461a      	mov	r2, r3
 80156a2:	4b12      	ldr	r3, [pc, #72]	@ (80156ec <MAP_makeSkewCmdList+0xcac>)
 80156a4:	2152      	movs	r1, #82	@ 0x52
 80156a6:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RN135S;
 80156a8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80156ac:	f103 0312 	add.w	r3, r3, #18
 80156b0:	881b      	ldrh	r3, [r3, #0]
 80156b2:	1c5a      	adds	r2, r3, #1
 80156b4:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 80156b8:	f101 0112 	add.w	r1, r1, #18
 80156bc:	800a      	strh	r2, [r1, #0]
 80156be:	461a      	mov	r2, r3
 80156c0:	4b0a      	ldr	r3, [pc, #40]	@ (80156ec <MAP_makeSkewCmdList+0xcac>)
 80156c2:	219f      	movs	r1, #159	@ 0x9f
 80156c4:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 80156c6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80156ca:	f103 0310 	add.w	r3, r3, #16
 80156ce:	881b      	ldrh	r3, [r3, #0]
 80156d0:	3303      	adds	r3, #3
 80156d2:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80156d6:	f102 0210 	add.w	r2, r2, #16
 80156da:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 80156dc:	2303      	movs	r3, #3
 80156de:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80156e2:	f102 020e 	add.w	r2, r2, #14
 80156e6:	8013      	strh	r3, [r2, #0]
 80156e8:	e153      	b.n	8015992 <MAP_makeSkewCmdList+0xf52>
 80156ea:	bf00      	nop
 80156ec:	20019c48 	.word	0x20019c48
		}
		//	斜め → 左135度 → 直進
		else if( (c1==R90S) && (c2==L90S) && (c3==L90S) && (c4<=GO32)  && (flag != 3 ) )
 80156f0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80156f4:	f103 030c 	add.w	r3, r3, #12
 80156f8:	881b      	ldrh	r3, [r3, #0]
 80156fa:	2b4c      	cmp	r3, #76	@ 0x4c
 80156fc:	f040 8089 	bne.w	8015812 <MAP_makeSkewCmdList+0xdd2>
 8015700:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015704:	f103 030a 	add.w	r3, r3, #10
 8015708:	881b      	ldrh	r3, [r3, #0]
 801570a:	2b4d      	cmp	r3, #77	@ 0x4d
 801570c:	f040 8081 	bne.w	8015812 <MAP_makeSkewCmdList+0xdd2>
 8015710:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015714:	f103 0308 	add.w	r3, r3, #8
 8015718:	881b      	ldrh	r3, [r3, #0]
 801571a:	2b4d      	cmp	r3, #77	@ 0x4d
 801571c:	d179      	bne.n	8015812 <MAP_makeSkewCmdList+0xdd2>
 801571e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015722:	f103 0306 	add.w	r3, r3, #6
 8015726:	881b      	ldrh	r3, [r3, #0]
 8015728:	2b20      	cmp	r3, #32
 801572a:	d872      	bhi.n	8015812 <MAP_makeSkewCmdList+0xdd2>
 801572c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015730:	f103 030e 	add.w	r3, r3, #14
 8015734:	881b      	ldrh	r3, [r3, #0]
 8015736:	2b03      	cmp	r3, #3
 8015738:	d06b      	beq.n	8015812 <MAP_makeSkewCmdList+0xdd2>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからLN90N
 801573a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801573e:	f103 030e 	add.w	r3, r3, #14
 8015742:	881b      	ldrh	r3, [r3, #0]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d10f      	bne.n	8015768 <MAP_makeSkewCmdList+0xd28>
 8015748:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801574c:	f103 0312 	add.w	r3, r3, #18
 8015750:	881b      	ldrh	r3, [r3, #0]
 8015752:	1c5a      	adds	r2, r3, #1
 8015754:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8015758:	f101 0112 	add.w	r1, r1, #18
 801575c:	800a      	strh	r2, [r1, #0]
 801575e:	461a      	mov	r2, r3
 8015760:	4b91      	ldr	r3, [pc, #580]	@ (80159a8 <MAP_makeSkewCmdList+0xf68>)
 8015762:	2152      	movs	r1, #82	@ 0x52
 8015764:	5499      	strb	r1, [r3, r2]
 8015766:	e033      	b.n	80157d0 <MAP_makeSkewCmdList+0xd90>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 8015768:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801576c:	f103 030e 	add.w	r3, r3, #14
 8015770:	881b      	ldrh	r3, [r3, #0]
 8015772:	2b01      	cmp	r3, #1
 8015774:	d116      	bne.n	80157a4 <MAP_makeSkewCmdList+0xd64>
 8015776:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801577a:	f103 0314 	add.w	r3, r3, #20
 801577e:	881b      	ldrh	r3, [r3, #0]
 8015780:	b2da      	uxtb	r2, r3
 8015782:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015786:	f103 0312 	add.w	r3, r3, #18
 801578a:	881b      	ldrh	r3, [r3, #0]
 801578c:	1c59      	adds	r1, r3, #1
 801578e:	f507 5000 	add.w	r0, r7, #8192	@ 0x2000
 8015792:	f100 0012 	add.w	r0, r0, #18
 8015796:	8001      	strh	r1, [r0, #0]
 8015798:	4619      	mov	r1, r3
 801579a:	1c53      	adds	r3, r2, #1
 801579c:	b2da      	uxtb	r2, r3
 801579e:	4b82      	ldr	r3, [pc, #520]	@ (80159a8 <MAP_makeSkewCmdList+0xf68>)
 80157a0:	545a      	strb	r2, [r3, r1]
 80157a2:	e015      	b.n	80157d0 <MAP_makeSkewCmdList+0xd90>
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 80157a4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80157a8:	f103 030e 	add.w	r3, r3, #14
 80157ac:	881b      	ldrh	r3, [r3, #0]
 80157ae:	2b02      	cmp	r3, #2
 80157b0:	d10e      	bne.n	80157d0 <MAP_makeSkewCmdList+0xd90>
 80157b2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80157b6:	f103 0312 	add.w	r3, r3, #18
 80157ba:	881b      	ldrh	r3, [r3, #0]
 80157bc:	1c5a      	adds	r2, r3, #1
 80157be:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 80157c2:	f101 0112 	add.w	r1, r1, #18
 80157c6:	800a      	strh	r2, [r1, #0]
 80157c8:	461a      	mov	r2, r3
 80157ca:	4b77      	ldr	r3, [pc, #476]	@ (80159a8 <MAP_makeSkewCmdList+0xf68>)
 80157cc:	2152      	movs	r1, #82	@ 0x52
 80157ce:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LN135S;
 80157d0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80157d4:	f103 0312 	add.w	r3, r3, #18
 80157d8:	881b      	ldrh	r3, [r3, #0]
 80157da:	1c5a      	adds	r2, r3, #1
 80157dc:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 80157e0:	f101 0112 	add.w	r1, r1, #18
 80157e4:	800a      	strh	r2, [r1, #0]
 80157e6:	461a      	mov	r2, r3
 80157e8:	4b6f      	ldr	r3, [pc, #444]	@ (80159a8 <MAP_makeSkewCmdList+0xf68>)
 80157ea:	21a0      	movs	r1, #160	@ 0xa0
 80157ec:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 80157ee:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80157f2:	f103 0310 	add.w	r3, r3, #16
 80157f6:	881b      	ldrh	r3, [r3, #0]
 80157f8:	3303      	adds	r3, #3
 80157fa:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80157fe:	f102 0210 	add.w	r2, r2, #16
 8015802:	8013      	strh	r3, [r2, #0]
			flag = 3;		///	直進
 8015804:	2303      	movs	r3, #3
 8015806:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801580a:	f102 020e 	add.w	r2, r2, #14
 801580e:	8013      	strh	r3, [r2, #0]
 8015810:	e0bf      	b.n	8015992 <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 斜め
		else if( (c1==R90S) && (c2==L90S) && ( (c3==R90S) || (c3==L90S) || ( c3<=GO32 ) ) && (flag != 3 ) )
 8015812:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015816:	f103 030c 	add.w	r3, r3, #12
 801581a:	881b      	ldrh	r3, [r3, #0]
 801581c:	2b4c      	cmp	r3, #76	@ 0x4c
 801581e:	d13f      	bne.n	80158a0 <MAP_makeSkewCmdList+0xe60>
 8015820:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015824:	f103 030a 	add.w	r3, r3, #10
 8015828:	881b      	ldrh	r3, [r3, #0]
 801582a:	2b4d      	cmp	r3, #77	@ 0x4d
 801582c:	d138      	bne.n	80158a0 <MAP_makeSkewCmdList+0xe60>
 801582e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015832:	f103 0308 	add.w	r3, r3, #8
 8015836:	881b      	ldrh	r3, [r3, #0]
 8015838:	2b4c      	cmp	r3, #76	@ 0x4c
 801583a:	d00d      	beq.n	8015858 <MAP_makeSkewCmdList+0xe18>
 801583c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015840:	f103 0308 	add.w	r3, r3, #8
 8015844:	881b      	ldrh	r3, [r3, #0]
 8015846:	2b4d      	cmp	r3, #77	@ 0x4d
 8015848:	d006      	beq.n	8015858 <MAP_makeSkewCmdList+0xe18>
 801584a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801584e:	f103 0308 	add.w	r3, r3, #8
 8015852:	881b      	ldrh	r3, [r3, #0]
 8015854:	2b20      	cmp	r3, #32
 8015856:	d823      	bhi.n	80158a0 <MAP_makeSkewCmdList+0xe60>
 8015858:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801585c:	f103 030e 	add.w	r3, r3, #14
 8015860:	881b      	ldrh	r3, [r3, #0]
 8015862:	2b03      	cmp	r3, #3
 8015864:	d01c      	beq.n	80158a0 <MAP_makeSkewCmdList+0xe60>
		{
			x++;
 8015866:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801586a:	f103 0314 	add.w	r3, r3, #20
 801586e:	881b      	ldrh	r3, [r3, #0]
 8015870:	3301      	adds	r3, #1
 8015872:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015876:	f102 0214 	add.w	r2, r2, #20
 801587a:	8013      	strh	r3, [r2, #0]
			ct_st ++;
 801587c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015880:	f103 0310 	add.w	r3, r3, #16
 8015884:	881b      	ldrh	r3, [r3, #0]
 8015886:	3301      	adds	r3, #1
 8015888:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801588c:	f102 0210 	add.w	r2, r2, #16
 8015890:	8013      	strh	r3, [r2, #0]

			flag = 1;		//	斜め走行バッファあり
 8015892:	2301      	movs	r3, #1
 8015894:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015898:	f102 020e 	add.w	r2, r2, #14
 801589c:	8013      	strh	r3, [r2, #0]
 801589e:	e078      	b.n	8015992 <MAP_makeSkewCmdList+0xf52>
		}
		else if( (c1==L90S) && (c2==R90S) && ( (c3==L90S) || (c3==R90S) || ( c3<=GO32 ) ) && (flag != 3 ) )
 80158a0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80158a4:	f103 030c 	add.w	r3, r3, #12
 80158a8:	881b      	ldrh	r3, [r3, #0]
 80158aa:	2b4d      	cmp	r3, #77	@ 0x4d
 80158ac:	d13f      	bne.n	801592e <MAP_makeSkewCmdList+0xeee>
 80158ae:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80158b2:	f103 030a 	add.w	r3, r3, #10
 80158b6:	881b      	ldrh	r3, [r3, #0]
 80158b8:	2b4c      	cmp	r3, #76	@ 0x4c
 80158ba:	d138      	bne.n	801592e <MAP_makeSkewCmdList+0xeee>
 80158bc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80158c0:	f103 0308 	add.w	r3, r3, #8
 80158c4:	881b      	ldrh	r3, [r3, #0]
 80158c6:	2b4d      	cmp	r3, #77	@ 0x4d
 80158c8:	d00d      	beq.n	80158e6 <MAP_makeSkewCmdList+0xea6>
 80158ca:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80158ce:	f103 0308 	add.w	r3, r3, #8
 80158d2:	881b      	ldrh	r3, [r3, #0]
 80158d4:	2b4c      	cmp	r3, #76	@ 0x4c
 80158d6:	d006      	beq.n	80158e6 <MAP_makeSkewCmdList+0xea6>
 80158d8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80158dc:	f103 0308 	add.w	r3, r3, #8
 80158e0:	881b      	ldrh	r3, [r3, #0]
 80158e2:	2b20      	cmp	r3, #32
 80158e4:	d823      	bhi.n	801592e <MAP_makeSkewCmdList+0xeee>
 80158e6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80158ea:	f103 030e 	add.w	r3, r3, #14
 80158ee:	881b      	ldrh	r3, [r3, #0]
 80158f0:	2b03      	cmp	r3, #3
 80158f2:	d01c      	beq.n	801592e <MAP_makeSkewCmdList+0xeee>
		{
			//	コマンド出力
			x++;
 80158f4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80158f8:	f103 0314 	add.w	r3, r3, #20
 80158fc:	881b      	ldrh	r3, [r3, #0]
 80158fe:	3301      	adds	r3, #1
 8015900:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015904:	f102 0214 	add.w	r2, r2, #20
 8015908:	8013      	strh	r3, [r2, #0]
			ct_st ++;
 801590a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801590e:	f103 0310 	add.w	r3, r3, #16
 8015912:	881b      	ldrh	r3, [r3, #0]
 8015914:	3301      	adds	r3, #1
 8015916:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801591a:	f102 0210 	add.w	r2, r2, #16
 801591e:	8013      	strh	r3, [r2, #0]

			flag = 1;		//	斜め走行バッファあり
 8015920:	2301      	movs	r3, #1
 8015922:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015926:	f102 020e 	add.w	r2, r2, #14
 801592a:	8013      	strh	r3, [r2, #0]
 801592c:	e031      	b.n	8015992 <MAP_makeSkewCmdList+0xf52>
		}
		else
		{
			tcom[ ct_n ] = scom_temp[ct_st];
 801592e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015932:	f103 0310 	add.w	r3, r3, #16
 8015936:	881b      	ldrh	r3, [r3, #0]
 8015938:	f107 0218 	add.w	r2, r7, #24
 801593c:	005b      	lsls	r3, r3, #1
 801593e:	4413      	add	r3, r2
 8015940:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8015944:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015948:	f103 0312 	add.w	r3, r3, #18
 801594c:	881b      	ldrh	r3, [r3, #0]
 801594e:	b2d1      	uxtb	r1, r2
 8015950:	4a15      	ldr	r2, [pc, #84]	@ (80159a8 <MAP_makeSkewCmdList+0xf68>)
 8015952:	54d1      	strb	r1, [r2, r3]
			if( tcom[ ct_n ] == CEND ) break;
 8015954:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015958:	f103 0312 	add.w	r3, r3, #18
 801595c:	881b      	ldrh	r3, [r3, #0]
 801595e:	4a12      	ldr	r2, [pc, #72]	@ (80159a8 <MAP_makeSkewCmdList+0xf68>)
 8015960:	5cd3      	ldrb	r3, [r2, r3]
 8015962:	2bfa      	cmp	r3, #250	@ 0xfa
 8015964:	d017      	beq.n	8015996 <MAP_makeSkewCmdList+0xf56>
			ct_st ++;
 8015966:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 801596a:	f103 0310 	add.w	r3, r3, #16
 801596e:	881b      	ldrh	r3, [r3, #0]
 8015970:	3301      	adds	r3, #1
 8015972:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8015976:	f102 0210 	add.w	r2, r2, #16
 801597a:	8013      	strh	r3, [r2, #0]
			ct_n ++;
 801597c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8015980:	f103 0312 	add.w	r3, r3, #18
 8015984:	881b      	ldrh	r3, [r3, #0]
 8015986:	3301      	adds	r3, #1
 8015988:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 801598c:	f102 0212 	add.w	r2, r2, #18
 8015990:	8013      	strh	r3, [r2, #0]
		c1 = scom_temp[ct_st];
 8015992:	f7ff b8a1 	b.w	8014ad8 <MAP_makeSkewCmdList+0x98>
			if( tcom[ ct_n ] == CEND ) break;
 8015996:	bf00      	nop
		}
	}
}
 8015998:	bf00      	nop
 801599a:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 801599e:	371c      	adds	r7, #28
 80159a0:	46bd      	mov	sp, r7
 80159a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a6:	4770      	bx	lr
 80159a8:	20019c48 	.word	0x20019c48

080159ac <MAP_drive>:

void MAP_drive( enMAP_DRIVE_TYPE en_driveType )
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	ed2d 8b02 	vpush	{d8}
 80159b2:	b084      	sub	sp, #16
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	4603      	mov	r3, r0
 80159b8:	71fb      	strb	r3, [r7, #7]
	uint16_t			us_rp = 0;				// 現在の読み込み位置
 80159ba:	2300      	movs	r3, #0
 80159bc:	81fb      	strh	r3, [r7, #14]
	enMOT_TURN_CMD 		en_type;
	bool			bl_isWallCut = FALSE;
 80159be:	2300      	movs	r3, #0
 80159c0:	733b      	strb	r3, [r7, #12]
	
	/* 超信旋回モード*/
	if( en_driveType == MAP_DRIVE_TURN )
 80159c2:	79fb      	ldrb	r3, [r7, #7]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d15f      	bne.n	8015a88 <MAP_drive+0xdc>
	{
		while(1)
		{
			if ( dcom[us_rp] == CEND  ) break;								//	コマンド終了
 80159c8:	89fb      	ldrh	r3, [r7, #14]
 80159ca:	4aad      	ldr	r2, [pc, #692]	@ (8015c80 <MAP_drive+0x2d4>)
 80159cc:	5cd3      	ldrb	r3, [r2, r3]
 80159ce:	2bfa      	cmp	r3, #250	@ 0xfa
 80159d0:	d050      	beq.n	8015a74 <MAP_drive+0xc8>
			
			else if ( dcom[us_rp] == STOP  ){
 80159d2:	89fb      	ldrh	r3, [r7, #14]
 80159d4:	4aaa      	ldr	r2, [pc, #680]	@ (8015c80 <MAP_drive+0x2d4>)
 80159d6:	5cd3      	ldrb	r3, [r2, r3]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d108      	bne.n	80159ee <MAP_drive+0x42>
			 	CTRL_stop();			// 制御停止
 80159dc:	f7f0 fd22 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 80159e0:	2000      	movs	r0, #0
 80159e2:	f7f3 feaf 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 80159e6:	2001      	movs	r0, #1
 80159e8:	f7f3 feac 	bl	8009744 <DCM_brakeMot>
 80159ec:	e031      	b.n	8015a52 <MAP_drive+0xa6>
			}
			else if ( ( dcom[us_rp] <=  GO71 ) && ( dcom[us_rp] >=  GO1) )
 80159ee:	89fb      	ldrh	r3, [r7, #14]
 80159f0:	4aa3      	ldr	r2, [pc, #652]	@ (8015c80 <MAP_drive+0x2d4>)
 80159f2:	5cd3      	ldrb	r3, [r2, r3]
 80159f4:	2b47      	cmp	r3, #71	@ 0x47
 80159f6:	d816      	bhi.n	8015a26 <MAP_drive+0x7a>
 80159f8:	89fb      	ldrh	r3, [r7, #14]
 80159fa:	4aa1      	ldr	r2, [pc, #644]	@ (8015c80 <MAP_drive+0x2d4>)
 80159fc:	5cd3      	ldrb	r3, [r2, r3]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d011      	beq.n	8015a26 <MAP_drive+0x7a>
			{
				MOT_goBlock_FinSpeed( (float)dcom[us_rp]*0.5f, 0 );		// 直線走行コマンド、半区間前進後に停止
 8015a02:	89fb      	ldrh	r3, [r7, #14]
 8015a04:	4a9e      	ldr	r2, [pc, #632]	@ (8015c80 <MAP_drive+0x2d4>)
 8015a06:	5cd3      	ldrb	r3, [r2, r3]
 8015a08:	ee07 3a90 	vmov	s15, r3
 8015a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015a10:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015a18:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 8015c84 <MAP_drive+0x2d8>
 8015a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8015a20:	f7f9 feac 	bl	800f77c <MOT_goBlock_FinSpeed>
 8015a24:	e015      	b.n	8015a52 <MAP_drive+0xa6>
			}
			else{
				
				if( dcom[us_rp] == R90 ) en_type = MOT_R90;
 8015a26:	89fb      	ldrh	r3, [r7, #14]
 8015a28:	4a95      	ldr	r2, [pc, #596]	@ (8015c80 <MAP_drive+0x2d4>)
 8015a2a:	5cd3      	ldrb	r3, [r2, r3]
 8015a2c:	2b48      	cmp	r3, #72	@ 0x48
 8015a2e:	d102      	bne.n	8015a36 <MAP_drive+0x8a>
 8015a30:	2300      	movs	r3, #0
 8015a32:	737b      	strb	r3, [r7, #13]
 8015a34:	e001      	b.n	8015a3a <MAP_drive+0x8e>
				else 					 en_type = MOT_L90;
 8015a36:	2301      	movs	r3, #1
 8015a38:	737b      	strb	r3, [r7, #13]
				
				LL_mDelay(500);
 8015a3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8015a3e:	f006 f881 	bl	801bb44 <LL_mDelay>
				MOT_turn( en_type );		//	旋回
 8015a42:	7b7b      	ldrb	r3, [r7, #13]
 8015a44:	4618      	mov	r0, r3
 8015a46:	f7fa f8c3 	bl	800fbd0 <MOT_turn>
				LL_mDelay(500);
 8015a4a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8015a4e:	f006 f879 	bl	801bb44 <LL_mDelay>
			}
			us_rp++;
 8015a52:	89fb      	ldrh	r3, [r7, #14]
 8015a54:	3301      	adds	r3, #1
 8015a56:	81fb      	strh	r3, [r7, #14]
			
			/* 途中で制御不能になった */
			if( SYS_isOutOfCtrl() == TRUE ){
 8015a58:	f7f3 fe42 	bl	80096e0 <SYS_isOutOfCtrl>
 8015a5c:	4603      	mov	r3, r0
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d0b2      	beq.n	80159c8 <MAP_drive+0x1c>
				CTRL_stop();
 8015a62:	f7f0 fcdf 	bl	8006424 <CTRL_stop>
				DCM_brakeMot(DCM_R);
 8015a66:	2000      	movs	r0, #0
 8015a68:	f7f3 fe6c 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot(DCM_L);
 8015a6c:	2001      	movs	r0, #1
 8015a6e:	f7f3 fe69 	bl	8009744 <DCM_brakeMot>
				break;
 8015a72:	e000      	b.n	8015a76 <MAP_drive+0xca>
			if ( dcom[us_rp] == CEND  ) break;								//	コマンド終了
 8015a74:	bf00      	nop
			}
			
		}
	 	CTRL_stop();			// 制御停止
 8015a76:	f7f0 fcd5 	bl	8006424 <CTRL_stop>
		DCM_brakeMot( DCM_R );		// ブレーキ
 8015a7a:	2000      	movs	r0, #0
 8015a7c:	f7f3 fe62 	bl	8009744 <DCM_brakeMot>
		DCM_brakeMot( DCM_L );		// ブレーキ
 8015a80:	2001      	movs	r0, #1
 8015a82:	f7f3 fe5f 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
				break;
			}
		}
	}
}
 8015a86:	e371      	b.n	801616c <MAP_drive+0x7c0>
	else if( en_driveType == MAP_DRIVE_SLA )
 8015a88:	79fb      	ldrb	r3, [r7, #7]
 8015a8a:	2b01      	cmp	r3, #1
 8015a8c:	f040 80b5 	bne.w	8015bfa <MAP_drive+0x24e>
			MAP_refPos( scom[us_rp] );									// 実行されるコマンドが終了した位置に更新
 8015a90:	89fb      	ldrh	r3, [r7, #14]
 8015a92:	4a7d      	ldr	r2, [pc, #500]	@ (8015c88 <MAP_drive+0x2dc>)
 8015a94:	5cd3      	ldrb	r3, [r2, r3]
 8015a96:	4618      	mov	r0, r3
 8015a98:	f7fd fc0c 	bl	80132b4 <MAP_refPos>
			if ( scom[us_rp] == CEND  ) break;							//	コマンド終了
 8015a9c:	89fb      	ldrh	r3, [r7, #14]
 8015a9e:	4a7a      	ldr	r2, [pc, #488]	@ (8015c88 <MAP_drive+0x2dc>)
 8015aa0:	5cd3      	ldrb	r3, [r2, r3]
 8015aa2:	2bfa      	cmp	r3, #250	@ 0xfa
 8015aa4:	f000 835f 	beq.w	8016166 <MAP_drive+0x7ba>
			else if ( scom[us_rp] == STOP  )
 8015aa8:	89fb      	ldrh	r3, [r7, #14]
 8015aaa:	4a77      	ldr	r2, [pc, #476]	@ (8015c88 <MAP_drive+0x2dc>)
 8015aac:	5cd3      	ldrb	r3, [r2, r3]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d108      	bne.n	8015ac4 <MAP_drive+0x118>
			 	CTRL_stop();			// 制御停止
 8015ab2:	f7f0 fcb7 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8015ab6:	2000      	movs	r0, #0
 8015ab8:	f7f3 fe44 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8015abc:	2001      	movs	r0, #1
 8015abe:	f7f3 fe41 	bl	8009744 <DCM_brakeMot>
 8015ac2:	e088      	b.n	8015bd6 <MAP_drive+0x22a>
			else if ( ( scom[us_rp] <=  GO71 ) && ( scom[us_rp] >=  GO1) )
 8015ac4:	89fb      	ldrh	r3, [r7, #14]
 8015ac6:	4a70      	ldr	r2, [pc, #448]	@ (8015c88 <MAP_drive+0x2dc>)
 8015ac8:	5cd3      	ldrb	r3, [r2, r3]
 8015aca:	2b47      	cmp	r3, #71	@ 0x47
 8015acc:	d868      	bhi.n	8015ba0 <MAP_drive+0x1f4>
 8015ace:	89fb      	ldrh	r3, [r7, #14]
 8015ad0:	4a6d      	ldr	r2, [pc, #436]	@ (8015c88 <MAP_drive+0x2dc>)
 8015ad2:	5cd3      	ldrb	r3, [r2, r3]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d063      	beq.n	8015ba0 <MAP_drive+0x1f4>
				if( scom[us_rp+1] == STOP  ){
 8015ad8:	89fb      	ldrh	r3, [r7, #14]
 8015ada:	3301      	adds	r3, #1
 8015adc:	4a6a      	ldr	r2, [pc, #424]	@ (8015c88 <MAP_drive+0x2dc>)
 8015ade:	5cd3      	ldrb	r3, [r2, r3]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d111      	bne.n	8015b08 <MAP_drive+0x15c>
					MOT_goBlock_FinSpeed( (float)scom[us_rp]*0.5f, 0 );						// 直線走行コマンド、半区間前進（最終速度なし）
 8015ae4:	89fb      	ldrh	r3, [r7, #14]
 8015ae6:	4a68      	ldr	r2, [pc, #416]	@ (8015c88 <MAP_drive+0x2dc>)
 8015ae8:	5cd3      	ldrb	r3, [r2, r3]
 8015aea:	ee07 3a90 	vmov	s15, r3
 8015aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015af2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015af6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015afa:	eddf 0a62 	vldr	s1, [pc, #392]	@ 8015c84 <MAP_drive+0x2d8>
 8015afe:	eeb0 0a67 	vmov.f32	s0, s15
 8015b02:	f7f9 fe3b 	bl	800f77c <MOT_goBlock_FinSpeed>
				if( scom[us_rp+1] == STOP  ){
 8015b06:	e066      	b.n	8015bd6 <MAP_drive+0x22a>
					if( ( scom[us_rp+1] == R90S )   || ( scom[us_rp+1] == L90S ) ){
 8015b08:	89fb      	ldrh	r3, [r7, #14]
 8015b0a:	3301      	adds	r3, #1
 8015b0c:	4a5e      	ldr	r2, [pc, #376]	@ (8015c88 <MAP_drive+0x2dc>)
 8015b0e:	5cd3      	ldrb	r3, [r2, r3]
 8015b10:	2b4c      	cmp	r3, #76	@ 0x4c
 8015b12:	d005      	beq.n	8015b20 <MAP_drive+0x174>
 8015b14:	89fb      	ldrh	r3, [r7, #14]
 8015b16:	3301      	adds	r3, #1
 8015b18:	4a5b      	ldr	r2, [pc, #364]	@ (8015c88 <MAP_drive+0x2dc>)
 8015b1a:	5cd3      	ldrb	r3, [r2, r3]
 8015b1c:	2b4d      	cmp	r3, #77	@ 0x4d
 8015b1e:	d128      	bne.n	8015b72 <MAP_drive+0x1c6>
						bl_isWallCut = MAP_setWallCut( scom[us_rp+1] );		// コーナー前に壁があったら壁の切れ目補正を行う設定をする
 8015b20:	89fb      	ldrh	r3, [r7, #14]
 8015b22:	3301      	adds	r3, #1
 8015b24:	4a58      	ldr	r2, [pc, #352]	@ (8015c88 <MAP_drive+0x2dc>)
 8015b26:	5cd3      	ldrb	r3, [r2, r3]
 8015b28:	4618      	mov	r0, r3
 8015b2a:	f7fd fed3 	bl	80138d4 <MAP_setWallCut>
 8015b2e:	4603      	mov	r3, r0
 8015b30:	733b      	strb	r3, [r7, #12]
						if( bl_isWallCut == TRUE ){
 8015b32:	7b3b      	ldrb	r3, [r7, #12]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d01c      	beq.n	8015b72 <MAP_drive+0x1c6>
							bl_isWallCut = FALSE;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	733b      	strb	r3, [r7, #12]
							us_LogWallCut[us_LogIndexWallCut] = us_rp;
 8015b3c:	4b53      	ldr	r3, [pc, #332]	@ (8015c8c <MAP_drive+0x2e0>)
 8015b3e:	881b      	ldrh	r3, [r3, #0]
 8015b40:	4619      	mov	r1, r3
 8015b42:	4a53      	ldr	r2, [pc, #332]	@ (8015c90 <MAP_drive+0x2e4>)
 8015b44:	89fb      	ldrh	r3, [r7, #14]
 8015b46:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
							us_LogIndexWallCut++;
 8015b4a:	4b50      	ldr	r3, [pc, #320]	@ (8015c8c <MAP_drive+0x2e0>)
 8015b4c:	881b      	ldrh	r3, [r3, #0]
 8015b4e:	3301      	adds	r3, #1
 8015b50:	b29a      	uxth	r2, r3
 8015b52:	4b4e      	ldr	r3, [pc, #312]	@ (8015c8c <MAP_drive+0x2e0>)
 8015b54:	801a      	strh	r2, [r3, #0]
							us_LogIndexWallCut %= 30;
 8015b56:	4b4d      	ldr	r3, [pc, #308]	@ (8015c8c <MAP_drive+0x2e0>)
 8015b58:	881a      	ldrh	r2, [r3, #0]
 8015b5a:	4b4e      	ldr	r3, [pc, #312]	@ (8015c94 <MAP_drive+0x2e8>)
 8015b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8015b60:	0919      	lsrs	r1, r3, #4
 8015b62:	460b      	mov	r3, r1
 8015b64:	011b      	lsls	r3, r3, #4
 8015b66:	1a5b      	subs	r3, r3, r1
 8015b68:	005b      	lsls	r3, r3, #1
 8015b6a:	1ad3      	subs	r3, r2, r3
 8015b6c:	b29a      	uxth	r2, r3
 8015b6e:	4b47      	ldr	r3, [pc, #284]	@ (8015c8c <MAP_drive+0x2e0>)
 8015b70:	801a      	strh	r2, [r3, #0]
					MOT_goBlock_FinSpeed( (float)scom[us_rp]*0.5f, MOT_getSlaStaSpeed(SLA_90) );		// 直線走行コマンド、半区間前進（最終速度あり）
 8015b72:	89fb      	ldrh	r3, [r7, #14]
 8015b74:	4a44      	ldr	r2, [pc, #272]	@ (8015c88 <MAP_drive+0x2dc>)
 8015b76:	5cd3      	ldrb	r3, [r2, r3]
 8015b78:	ee07 3a90 	vmov	s15, r3
 8015b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b80:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015b84:	ee27 8a87 	vmul.f32	s16, s15, s14
 8015b88:	2000      	movs	r0, #0
 8015b8a:	f7fb faf3 	bl	8011174 <MOT_getSlaStaSpeed>
 8015b8e:	eef0 7a40 	vmov.f32	s15, s0
 8015b92:	eef0 0a67 	vmov.f32	s1, s15
 8015b96:	eeb0 0a48 	vmov.f32	s0, s16
 8015b9a:	f7f9 fdef 	bl	800f77c <MOT_goBlock_FinSpeed>
				if( scom[us_rp+1] == STOP  ){
 8015b9e:	e01a      	b.n	8015bd6 <MAP_drive+0x22a>
			else if( scom[us_rp] == R90S )
 8015ba0:	89fb      	ldrh	r3, [r7, #14]
 8015ba2:	4a39      	ldr	r2, [pc, #228]	@ (8015c88 <MAP_drive+0x2dc>)
 8015ba4:	5cd3      	ldrb	r3, [r2, r3]
 8015ba6:	2b4c      	cmp	r3, #76	@ 0x4c
 8015ba8:	d108      	bne.n	8015bbc <MAP_drive+0x210>
				MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8015baa:	2000      	movs	r0, #0
 8015bac:	f7ee f920 	bl	8003df0 <PARAM_getSra>
 8015bb0:	4603      	mov	r3, r0
 8015bb2:	4619      	mov	r1, r3
 8015bb4:	2000      	movs	r0, #0
 8015bb6:	f7fb fb97 	bl	80112e8 <MOT_goSla>
 8015bba:	e00c      	b.n	8015bd6 <MAP_drive+0x22a>
			else if( scom[us_rp] == L90S )
 8015bbc:	89fb      	ldrh	r3, [r7, #14]
 8015bbe:	4a32      	ldr	r2, [pc, #200]	@ (8015c88 <MAP_drive+0x2dc>)
 8015bc0:	5cd3      	ldrb	r3, [r2, r3]
 8015bc2:	2b4d      	cmp	r3, #77	@ 0x4d
 8015bc4:	d107      	bne.n	8015bd6 <MAP_drive+0x22a>
				MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 8015bc6:	2000      	movs	r0, #0
 8015bc8:	f7ee f912 	bl	8003df0 <PARAM_getSra>
 8015bcc:	4603      	mov	r3, r0
 8015bce:	4619      	mov	r1, r3
 8015bd0:	2001      	movs	r0, #1
 8015bd2:	f7fb fb89 	bl	80112e8 <MOT_goSla>
			us_rp++;
 8015bd6:	89fb      	ldrh	r3, [r7, #14]
 8015bd8:	3301      	adds	r3, #1
 8015bda:	81fb      	strh	r3, [r7, #14]
			if( SYS_isOutOfCtrl() == TRUE){
 8015bdc:	f7f3 fd80 	bl	80096e0 <SYS_isOutOfCtrl>
 8015be0:	4603      	mov	r3, r0
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	f43f af54 	beq.w	8015a90 <MAP_drive+0xe4>
				CTRL_stop();
 8015be8:	f7f0 fc1c 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8015bec:	2000      	movs	r0, #0
 8015bee:	f7f3 fda9 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8015bf2:	2001      	movs	r0, #1
 8015bf4:	f7f3 fda6 	bl	8009744 <DCM_brakeMot>
				break;
 8015bf8:	e2b8      	b.n	801616c <MAP_drive+0x7c0>
	else if( en_driveType == MAP_DRIVE_SKEW )
 8015bfa:	79fb      	ldrb	r3, [r7, #7]
 8015bfc:	2b02      	cmp	r3, #2
 8015bfe:	f040 82b5 	bne.w	801616c <MAP_drive+0x7c0>
			MAP_refPos( tcom[us_rp] );									// 実行されるコマンドが終了した位置に更新
 8015c02:	89fb      	ldrh	r3, [r7, #14]
 8015c04:	4a24      	ldr	r2, [pc, #144]	@ (8015c98 <MAP_drive+0x2ec>)
 8015c06:	5cd3      	ldrb	r3, [r2, r3]
 8015c08:	4618      	mov	r0, r3
 8015c0a:	f7fd fb53 	bl	80132b4 <MAP_refPos>
			if ( tcom[us_rp] == CEND  ) break;							//	コマンド終了
 8015c0e:	89fb      	ldrh	r3, [r7, #14]
 8015c10:	4a21      	ldr	r2, [pc, #132]	@ (8015c98 <MAP_drive+0x2ec>)
 8015c12:	5cd3      	ldrb	r3, [r2, r3]
 8015c14:	2bfa      	cmp	r3, #250	@ 0xfa
 8015c16:	f000 82a8 	beq.w	801616a <MAP_drive+0x7be>
			else if ( tcom[us_rp] == STOP  )
 8015c1a:	89fb      	ldrh	r3, [r7, #14]
 8015c1c:	4a1e      	ldr	r2, [pc, #120]	@ (8015c98 <MAP_drive+0x2ec>)
 8015c1e:	5cd3      	ldrb	r3, [r2, r3]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d108      	bne.n	8015c36 <MAP_drive+0x28a>
			 	CTRL_stop();			// 制御停止
 8015c24:	f7f0 fbfe 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8015c28:	2000      	movs	r0, #0
 8015c2a:	f7f3 fd8b 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8015c2e:	2001      	movs	r0, #1
 8015c30:	f7f3 fd88 	bl	8009744 <DCM_brakeMot>
 8015c34:	e285      	b.n	8016142 <MAP_drive+0x796>
			else if ( ( tcom[us_rp] <=  GO71 ) && ( tcom[us_rp] >=  GO1) )
 8015c36:	89fb      	ldrh	r3, [r7, #14]
 8015c38:	4a17      	ldr	r2, [pc, #92]	@ (8015c98 <MAP_drive+0x2ec>)
 8015c3a:	5cd3      	ldrb	r3, [r2, r3]
 8015c3c:	2b47      	cmp	r3, #71	@ 0x47
 8015c3e:	f200 80d9 	bhi.w	8015df4 <MAP_drive+0x448>
 8015c42:	89fb      	ldrh	r3, [r7, #14]
 8015c44:	4a14      	ldr	r2, [pc, #80]	@ (8015c98 <MAP_drive+0x2ec>)
 8015c46:	5cd3      	ldrb	r3, [r2, r3]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	f000 80d3 	beq.w	8015df4 <MAP_drive+0x448>
				if( tcom[us_rp+1] == STOP  ){
 8015c4e:	89fb      	ldrh	r3, [r7, #14]
 8015c50:	3301      	adds	r3, #1
 8015c52:	4a11      	ldr	r2, [pc, #68]	@ (8015c98 <MAP_drive+0x2ec>)
 8015c54:	5cd3      	ldrb	r3, [r2, r3]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d120      	bne.n	8015c9c <MAP_drive+0x2f0>
					MOT_goBlock_FinSpeed( (float)tcom[us_rp]*0.5f, 0 );						// 直線走行コマンド、半区間前進（最終速度なし）
 8015c5a:	89fb      	ldrh	r3, [r7, #14]
 8015c5c:	4a0e      	ldr	r2, [pc, #56]	@ (8015c98 <MAP_drive+0x2ec>)
 8015c5e:	5cd3      	ldrb	r3, [r2, r3]
 8015c60:	ee07 3a90 	vmov	s15, r3
 8015c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015c68:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015c6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015c70:	eddf 0a04 	vldr	s1, [pc, #16]	@ 8015c84 <MAP_drive+0x2d8>
 8015c74:	eeb0 0a67 	vmov.f32	s0, s15
 8015c78:	f7f9 fd80 	bl	800f77c <MOT_goBlock_FinSpeed>
				if( tcom[us_rp+1] == STOP  ){
 8015c7c:	e25e      	b.n	801613c <MAP_drive+0x790>
 8015c7e:	bf00      	nop
 8015c80:	20017c48 	.word	0x20017c48
 8015c84:	00000000 	.word	0x00000000
 8015c88:	20018c48 	.word	0x20018c48
 8015c8c:	2001ad88 	.word	0x2001ad88
 8015c90:	2001ad4c 	.word	0x2001ad4c
 8015c94:	88888889 	.word	0x88888889
 8015c98:	20019c48 	.word	0x20019c48
					if( ( tcom[us_rp+1] == R90S )   || ( tcom[us_rp+1] == L90S )   || 
 8015c9c:	89fb      	ldrh	r3, [r7, #14]
 8015c9e:	3301      	adds	r3, #1
 8015ca0:	4a90      	ldr	r2, [pc, #576]	@ (8015ee4 <MAP_drive+0x538>)
 8015ca2:	5cd3      	ldrb	r3, [r2, r3]
 8015ca4:	2b4c      	cmp	r3, #76	@ 0x4c
 8015ca6:	d011      	beq.n	8015ccc <MAP_drive+0x320>
 8015ca8:	89fb      	ldrh	r3, [r7, #14]
 8015caa:	3301      	adds	r3, #1
 8015cac:	4a8d      	ldr	r2, [pc, #564]	@ (8015ee4 <MAP_drive+0x538>)
 8015cae:	5cd3      	ldrb	r3, [r2, r3]
 8015cb0:	2b4d      	cmp	r3, #77	@ 0x4d
 8015cb2:	d00b      	beq.n	8015ccc <MAP_drive+0x320>
					 	( tcom[us_rp+1] == RS135N ) || ( tcom[us_rp+1] == LS135N ) 
 8015cb4:	89fb      	ldrh	r3, [r7, #14]
 8015cb6:	3301      	adds	r3, #1
 8015cb8:	4a8a      	ldr	r2, [pc, #552]	@ (8015ee4 <MAP_drive+0x538>)
 8015cba:	5cd3      	ldrb	r3, [r2, r3]
					if( ( tcom[us_rp+1] == R90S )   || ( tcom[us_rp+1] == L90S )   || 
 8015cbc:	2b9b      	cmp	r3, #155	@ 0x9b
 8015cbe:	d005      	beq.n	8015ccc <MAP_drive+0x320>
					 	( tcom[us_rp+1] == RS135N ) || ( tcom[us_rp+1] == LS135N ) 
 8015cc0:	89fb      	ldrh	r3, [r7, #14]
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	4a87      	ldr	r2, [pc, #540]	@ (8015ee4 <MAP_drive+0x538>)
 8015cc6:	5cd3      	ldrb	r3, [r2, r3]
 8015cc8:	2b9c      	cmp	r3, #156	@ 0x9c
 8015cca:	d128      	bne.n	8015d1e <MAP_drive+0x372>
						bl_isWallCut = MAP_setWallCut( tcom[us_rp+1] );		// コーナー前に壁があったら壁の切れ目補正を行う設定をする
 8015ccc:	89fb      	ldrh	r3, [r7, #14]
 8015cce:	3301      	adds	r3, #1
 8015cd0:	4a84      	ldr	r2, [pc, #528]	@ (8015ee4 <MAP_drive+0x538>)
 8015cd2:	5cd3      	ldrb	r3, [r2, r3]
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f7fd fdfd 	bl	80138d4 <MAP_setWallCut>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	733b      	strb	r3, [r7, #12]
						if( bl_isWallCut == TRUE ){
 8015cde:	7b3b      	ldrb	r3, [r7, #12]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d01c      	beq.n	8015d1e <MAP_drive+0x372>
							bl_isWallCut = FALSE;
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	733b      	strb	r3, [r7, #12]
							us_LogWallCut[us_LogIndexWallCut] = us_rp;
 8015ce8:	4b7f      	ldr	r3, [pc, #508]	@ (8015ee8 <MAP_drive+0x53c>)
 8015cea:	881b      	ldrh	r3, [r3, #0]
 8015cec:	4619      	mov	r1, r3
 8015cee:	4a7f      	ldr	r2, [pc, #508]	@ (8015eec <MAP_drive+0x540>)
 8015cf0:	89fb      	ldrh	r3, [r7, #14]
 8015cf2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
							us_LogIndexWallCut++;
 8015cf6:	4b7c      	ldr	r3, [pc, #496]	@ (8015ee8 <MAP_drive+0x53c>)
 8015cf8:	881b      	ldrh	r3, [r3, #0]
 8015cfa:	3301      	adds	r3, #1
 8015cfc:	b29a      	uxth	r2, r3
 8015cfe:	4b7a      	ldr	r3, [pc, #488]	@ (8015ee8 <MAP_drive+0x53c>)
 8015d00:	801a      	strh	r2, [r3, #0]
							us_LogIndexWallCut %= 30;
 8015d02:	4b79      	ldr	r3, [pc, #484]	@ (8015ee8 <MAP_drive+0x53c>)
 8015d04:	881a      	ldrh	r2, [r3, #0]
 8015d06:	4b7a      	ldr	r3, [pc, #488]	@ (8015ef0 <MAP_drive+0x544>)
 8015d08:	fba3 1302 	umull	r1, r3, r3, r2
 8015d0c:	0919      	lsrs	r1, r3, #4
 8015d0e:	460b      	mov	r3, r1
 8015d10:	011b      	lsls	r3, r3, #4
 8015d12:	1a5b      	subs	r3, r3, r1
 8015d14:	005b      	lsls	r3, r3, #1
 8015d16:	1ad3      	subs	r3, r2, r3
 8015d18:	b29a      	uxth	r2, r3
 8015d1a:	4b73      	ldr	r3, [pc, #460]	@ (8015ee8 <MAP_drive+0x53c>)
 8015d1c:	801a      	strh	r2, [r3, #0]
					if((tcom[us_rp+1]==R90S)||(tcom[us_rp+1]==L90S)){
 8015d1e:	89fb      	ldrh	r3, [r7, #14]
 8015d20:	3301      	adds	r3, #1
 8015d22:	4a70      	ldr	r2, [pc, #448]	@ (8015ee4 <MAP_drive+0x538>)
 8015d24:	5cd3      	ldrb	r3, [r2, r3]
 8015d26:	2b4c      	cmp	r3, #76	@ 0x4c
 8015d28:	d005      	beq.n	8015d36 <MAP_drive+0x38a>
 8015d2a:	89fb      	ldrh	r3, [r7, #14]
 8015d2c:	3301      	adds	r3, #1
 8015d2e:	4a6d      	ldr	r2, [pc, #436]	@ (8015ee4 <MAP_drive+0x538>)
 8015d30:	5cd3      	ldrb	r3, [r2, r3]
 8015d32:	2b4d      	cmp	r3, #77	@ 0x4d
 8015d34:	d116      	bne.n	8015d64 <MAP_drive+0x3b8>
						MOT_goBlock_FinSpeed( (float)tcom[us_rp]*0.5f, MOT_getSlaStaSpeed(SLA_90) );		// 直線走行コマンド、半区間前進（最終速度あり）
 8015d36:	89fb      	ldrh	r3, [r7, #14]
 8015d38:	4a6a      	ldr	r2, [pc, #424]	@ (8015ee4 <MAP_drive+0x538>)
 8015d3a:	5cd3      	ldrb	r3, [r2, r3]
 8015d3c:	ee07 3a90 	vmov	s15, r3
 8015d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d44:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015d48:	ee27 8a87 	vmul.f32	s16, s15, s14
 8015d4c:	2000      	movs	r0, #0
 8015d4e:	f7fb fa11 	bl	8011174 <MOT_getSlaStaSpeed>
 8015d52:	eef0 7a40 	vmov.f32	s15, s0
 8015d56:	eef0 0a67 	vmov.f32	s1, s15
 8015d5a:	eeb0 0a48 	vmov.f32	s0, s16
 8015d5e:	f7f9 fd0d 	bl	800f77c <MOT_goBlock_FinSpeed>
 8015d62:	e046      	b.n	8015df2 <MAP_drive+0x446>
					}else if((tcom[us_rp+1]==RS45N)||(tcom[us_rp+1]==LS45N)){
 8015d64:	89fb      	ldrh	r3, [r7, #14]
 8015d66:	3301      	adds	r3, #1
 8015d68:	4a5e      	ldr	r2, [pc, #376]	@ (8015ee4 <MAP_drive+0x538>)
 8015d6a:	5cd3      	ldrb	r3, [r2, r3]
 8015d6c:	2b99      	cmp	r3, #153	@ 0x99
 8015d6e:	d005      	beq.n	8015d7c <MAP_drive+0x3d0>
 8015d70:	89fb      	ldrh	r3, [r7, #14]
 8015d72:	3301      	adds	r3, #1
 8015d74:	4a5b      	ldr	r2, [pc, #364]	@ (8015ee4 <MAP_drive+0x538>)
 8015d76:	5cd3      	ldrb	r3, [r2, r3]
 8015d78:	2b9a      	cmp	r3, #154	@ 0x9a
 8015d7a:	d116      	bne.n	8015daa <MAP_drive+0x3fe>
						MOT_goBlock_FinSpeed( (float)tcom[us_rp]*0.5f, MOT_getSlaStaSpeed(SLA_45) );		// 直線走行コマンド、半区間前進（最終速度あり）
 8015d7c:	89fb      	ldrh	r3, [r7, #14]
 8015d7e:	4a59      	ldr	r2, [pc, #356]	@ (8015ee4 <MAP_drive+0x538>)
 8015d80:	5cd3      	ldrb	r3, [r2, r3]
 8015d82:	ee07 3a90 	vmov	s15, r3
 8015d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d8a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015d8e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8015d92:	2001      	movs	r0, #1
 8015d94:	f7fb f9ee 	bl	8011174 <MOT_getSlaStaSpeed>
 8015d98:	eef0 7a40 	vmov.f32	s15, s0
 8015d9c:	eef0 0a67 	vmov.f32	s1, s15
 8015da0:	eeb0 0a48 	vmov.f32	s0, s16
 8015da4:	f7f9 fcea 	bl	800f77c <MOT_goBlock_FinSpeed>
 8015da8:	e023      	b.n	8015df2 <MAP_drive+0x446>
					}else if((tcom[us_rp+1]==RS135N)||(tcom[us_rp+1]==LS135N)){
 8015daa:	89fb      	ldrh	r3, [r7, #14]
 8015dac:	3301      	adds	r3, #1
 8015dae:	4a4d      	ldr	r2, [pc, #308]	@ (8015ee4 <MAP_drive+0x538>)
 8015db0:	5cd3      	ldrb	r3, [r2, r3]
 8015db2:	2b9b      	cmp	r3, #155	@ 0x9b
 8015db4:	d006      	beq.n	8015dc4 <MAP_drive+0x418>
 8015db6:	89fb      	ldrh	r3, [r7, #14]
 8015db8:	3301      	adds	r3, #1
 8015dba:	4a4a      	ldr	r2, [pc, #296]	@ (8015ee4 <MAP_drive+0x538>)
 8015dbc:	5cd3      	ldrb	r3, [r2, r3]
 8015dbe:	2b9c      	cmp	r3, #156	@ 0x9c
 8015dc0:	f040 81bc 	bne.w	801613c <MAP_drive+0x790>
						MOT_goBlock_FinSpeed( (float)tcom[us_rp]*0.5f, MOT_getSlaStaSpeed(SLA_135) );		// 直線走行コマンド、半区間前進（最終速度あり）
 8015dc4:	89fb      	ldrh	r3, [r7, #14]
 8015dc6:	4a47      	ldr	r2, [pc, #284]	@ (8015ee4 <MAP_drive+0x538>)
 8015dc8:	5cd3      	ldrb	r3, [r2, r3]
 8015dca:	ee07 3a90 	vmov	s15, r3
 8015dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015dd2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015dd6:	ee27 8a87 	vmul.f32	s16, s15, s14
 8015dda:	2002      	movs	r0, #2
 8015ddc:	f7fb f9ca 	bl	8011174 <MOT_getSlaStaSpeed>
 8015de0:	eef0 7a40 	vmov.f32	s15, s0
 8015de4:	eef0 0a67 	vmov.f32	s1, s15
 8015de8:	eeb0 0a48 	vmov.f32	s0, s16
 8015dec:	f7f9 fcc6 	bl	800f77c <MOT_goBlock_FinSpeed>
				if( tcom[us_rp+1] == STOP  ){
 8015df0:	e1a4      	b.n	801613c <MAP_drive+0x790>
 8015df2:	e1a3      	b.n	801613c <MAP_drive+0x790>
			else if ( ( tcom[us_rp] <=  NGO71 ) && ( tcom[us_rp] >=  NGO1) )
 8015df4:	89fb      	ldrh	r3, [r7, #14]
 8015df6:	4a3b      	ldr	r2, [pc, #236]	@ (8015ee4 <MAP_drive+0x538>)
 8015df8:	5cd3      	ldrb	r3, [r2, r3]
 8015dfa:	2b98      	cmp	r3, #152	@ 0x98
 8015dfc:	d87a      	bhi.n	8015ef4 <MAP_drive+0x548>
 8015dfe:	89fb      	ldrh	r3, [r7, #14]
 8015e00:	4a38      	ldr	r2, [pc, #224]	@ (8015ee4 <MAP_drive+0x538>)
 8015e02:	5cd3      	ldrb	r3, [r2, r3]
 8015e04:	2b51      	cmp	r3, #81	@ 0x51
 8015e06:	d975      	bls.n	8015ef4 <MAP_drive+0x548>
				if((tcom[us_rp+1]==RN45S)||(tcom[us_rp+1]==LN45S)){
 8015e08:	89fb      	ldrh	r3, [r7, #14]
 8015e0a:	3301      	adds	r3, #1
 8015e0c:	4a35      	ldr	r2, [pc, #212]	@ (8015ee4 <MAP_drive+0x538>)
 8015e0e:	5cd3      	ldrb	r3, [r2, r3]
 8015e10:	2b9d      	cmp	r3, #157	@ 0x9d
 8015e12:	d005      	beq.n	8015e20 <MAP_drive+0x474>
 8015e14:	89fb      	ldrh	r3, [r7, #14]
 8015e16:	3301      	adds	r3, #1
 8015e18:	4a32      	ldr	r2, [pc, #200]	@ (8015ee4 <MAP_drive+0x538>)
 8015e1a:	5cd3      	ldrb	r3, [r2, r3]
 8015e1c:	2b9e      	cmp	r3, #158	@ 0x9e
 8015e1e:	d117      	bne.n	8015e50 <MAP_drive+0x4a4>
					MOT_goSkewBlock_FinSpeed( (float)(tcom[us_rp]-81)*0.5f, MOT_getSlaStaSpeed(SLA_45) );		// 直線走行コマンド、半区間前進（最終速度あり）
 8015e20:	89fb      	ldrh	r3, [r7, #14]
 8015e22:	4a30      	ldr	r2, [pc, #192]	@ (8015ee4 <MAP_drive+0x538>)
 8015e24:	5cd3      	ldrb	r3, [r2, r3]
 8015e26:	3b51      	subs	r3, #81	@ 0x51
 8015e28:	ee07 3a90 	vmov	s15, r3
 8015e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015e30:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015e34:	ee27 8a87 	vmul.f32	s16, s15, s14
 8015e38:	2001      	movs	r0, #1
 8015e3a:	f7fb f99b 	bl	8011174 <MOT_getSlaStaSpeed>
 8015e3e:	eef0 7a40 	vmov.f32	s15, s0
 8015e42:	eef0 0a67 	vmov.f32	s1, s15
 8015e46:	eeb0 0a48 	vmov.f32	s0, s16
 8015e4a:	f7f9 fca9 	bl	800f7a0 <MOT_goSkewBlock_FinSpeed>
 8015e4e:	e048      	b.n	8015ee2 <MAP_drive+0x536>
				}else if((tcom[us_rp+1]==RN135S)||(tcom[us_rp+1]==LN135S)){
 8015e50:	89fb      	ldrh	r3, [r7, #14]
 8015e52:	3301      	adds	r3, #1
 8015e54:	4a23      	ldr	r2, [pc, #140]	@ (8015ee4 <MAP_drive+0x538>)
 8015e56:	5cd3      	ldrb	r3, [r2, r3]
 8015e58:	2b9f      	cmp	r3, #159	@ 0x9f
 8015e5a:	d005      	beq.n	8015e68 <MAP_drive+0x4bc>
 8015e5c:	89fb      	ldrh	r3, [r7, #14]
 8015e5e:	3301      	adds	r3, #1
 8015e60:	4a20      	ldr	r2, [pc, #128]	@ (8015ee4 <MAP_drive+0x538>)
 8015e62:	5cd3      	ldrb	r3, [r2, r3]
 8015e64:	2ba0      	cmp	r3, #160	@ 0xa0
 8015e66:	d117      	bne.n	8015e98 <MAP_drive+0x4ec>
					MOT_goSkewBlock_FinSpeed( (float)(tcom[us_rp]-81)*0.5f, MOT_getSlaStaSpeed(SLA_135) );		// 直線走行コマンド、半区間前進（最終速度あり）
 8015e68:	89fb      	ldrh	r3, [r7, #14]
 8015e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8015ee4 <MAP_drive+0x538>)
 8015e6c:	5cd3      	ldrb	r3, [r2, r3]
 8015e6e:	3b51      	subs	r3, #81	@ 0x51
 8015e70:	ee07 3a90 	vmov	s15, r3
 8015e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015e78:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015e7c:	ee27 8a87 	vmul.f32	s16, s15, s14
 8015e80:	2002      	movs	r0, #2
 8015e82:	f7fb f977 	bl	8011174 <MOT_getSlaStaSpeed>
 8015e86:	eef0 7a40 	vmov.f32	s15, s0
 8015e8a:	eef0 0a67 	vmov.f32	s1, s15
 8015e8e:	eeb0 0a48 	vmov.f32	s0, s16
 8015e92:	f7f9 fc85 	bl	800f7a0 <MOT_goSkewBlock_FinSpeed>
 8015e96:	e024      	b.n	8015ee2 <MAP_drive+0x536>
				}else if((tcom[us_rp+1]==RN90N)||(tcom[us_rp+1]==LN90N)){
 8015e98:	89fb      	ldrh	r3, [r7, #14]
 8015e9a:	3301      	adds	r3, #1
 8015e9c:	4a11      	ldr	r2, [pc, #68]	@ (8015ee4 <MAP_drive+0x538>)
 8015e9e:	5cd3      	ldrb	r3, [r2, r3]
 8015ea0:	2ba1      	cmp	r3, #161	@ 0xa1
 8015ea2:	d006      	beq.n	8015eb2 <MAP_drive+0x506>
 8015ea4:	89fb      	ldrh	r3, [r7, #14]
 8015ea6:	3301      	adds	r3, #1
 8015ea8:	4a0e      	ldr	r2, [pc, #56]	@ (8015ee4 <MAP_drive+0x538>)
 8015eaa:	5cd3      	ldrb	r3, [r2, r3]
 8015eac:	2ba2      	cmp	r3, #162	@ 0xa2
 8015eae:	f040 8147 	bne.w	8016140 <MAP_drive+0x794>
					MOT_goSkewBlock_FinSpeed( (float)(tcom[us_rp]-81)*0.5f, MOT_getSlaStaSpeed(SLA_N90) );		// 直線走行コマンド、半区間前進（最終速度あり）
 8015eb2:	89fb      	ldrh	r3, [r7, #14]
 8015eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8015ee4 <MAP_drive+0x538>)
 8015eb6:	5cd3      	ldrb	r3, [r2, r3]
 8015eb8:	3b51      	subs	r3, #81	@ 0x51
 8015eba:	ee07 3a90 	vmov	s15, r3
 8015ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015ec2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015ec6:	ee27 8a87 	vmul.f32	s16, s15, s14
 8015eca:	2003      	movs	r0, #3
 8015ecc:	f7fb f952 	bl	8011174 <MOT_getSlaStaSpeed>
 8015ed0:	eef0 7a40 	vmov.f32	s15, s0
 8015ed4:	eef0 0a67 	vmov.f32	s1, s15
 8015ed8:	eeb0 0a48 	vmov.f32	s0, s16
 8015edc:	f7f9 fc60 	bl	800f7a0 <MOT_goSkewBlock_FinSpeed>
				if((tcom[us_rp+1]==RN45S)||(tcom[us_rp+1]==LN45S)){
 8015ee0:	e12e      	b.n	8016140 <MAP_drive+0x794>
 8015ee2:	e12d      	b.n	8016140 <MAP_drive+0x794>
 8015ee4:	20019c48 	.word	0x20019c48
 8015ee8:	2001ad88 	.word	0x2001ad88
 8015eec:	2001ad4c 	.word	0x2001ad4c
 8015ef0:	88888889 	.word	0x88888889
				switch( tcom[us_rp] )
 8015ef4:	89fb      	ldrh	r3, [r7, #14]
 8015ef6:	4aa0      	ldr	r2, [pc, #640]	@ (8016178 <MAP_drive+0x7cc>)
 8015ef8:	5cd3      	ldrb	r3, [r2, r3]
 8015efa:	3b4c      	subs	r3, #76	@ 0x4c
 8015efc:	2b56      	cmp	r3, #86	@ 0x56
 8015efe:	f200 8120 	bhi.w	8016142 <MAP_drive+0x796>
 8015f02:	a201      	add	r2, pc, #4	@ (adr r2, 8015f08 <MAP_drive+0x55c>)
 8015f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f08:	08016065 	.word	0x08016065
 8015f0c:	08016077 	.word	0x08016077
 8015f10:	08016143 	.word	0x08016143
 8015f14:	08016143 	.word	0x08016143
 8015f18:	08016143 	.word	0x08016143
 8015f1c:	08016143 	.word	0x08016143
 8015f20:	08016143 	.word	0x08016143
 8015f24:	08016143 	.word	0x08016143
 8015f28:	08016143 	.word	0x08016143
 8015f2c:	08016143 	.word	0x08016143
 8015f30:	08016143 	.word	0x08016143
 8015f34:	08016143 	.word	0x08016143
 8015f38:	08016143 	.word	0x08016143
 8015f3c:	08016143 	.word	0x08016143
 8015f40:	08016143 	.word	0x08016143
 8015f44:	08016143 	.word	0x08016143
 8015f48:	08016143 	.word	0x08016143
 8015f4c:	08016143 	.word	0x08016143
 8015f50:	08016143 	.word	0x08016143
 8015f54:	08016143 	.word	0x08016143
 8015f58:	08016143 	.word	0x08016143
 8015f5c:	08016143 	.word	0x08016143
 8015f60:	08016143 	.word	0x08016143
 8015f64:	08016143 	.word	0x08016143
 8015f68:	08016143 	.word	0x08016143
 8015f6c:	08016143 	.word	0x08016143
 8015f70:	08016143 	.word	0x08016143
 8015f74:	08016143 	.word	0x08016143
 8015f78:	08016143 	.word	0x08016143
 8015f7c:	08016143 	.word	0x08016143
 8015f80:	08016143 	.word	0x08016143
 8015f84:	08016143 	.word	0x08016143
 8015f88:	08016143 	.word	0x08016143
 8015f8c:	08016143 	.word	0x08016143
 8015f90:	08016143 	.word	0x08016143
 8015f94:	08016143 	.word	0x08016143
 8015f98:	08016143 	.word	0x08016143
 8015f9c:	08016143 	.word	0x08016143
 8015fa0:	08016143 	.word	0x08016143
 8015fa4:	08016143 	.word	0x08016143
 8015fa8:	08016143 	.word	0x08016143
 8015fac:	08016143 	.word	0x08016143
 8015fb0:	08016143 	.word	0x08016143
 8015fb4:	08016143 	.word	0x08016143
 8015fb8:	08016143 	.word	0x08016143
 8015fbc:	08016143 	.word	0x08016143
 8015fc0:	08016143 	.word	0x08016143
 8015fc4:	08016143 	.word	0x08016143
 8015fc8:	08016143 	.word	0x08016143
 8015fcc:	08016143 	.word	0x08016143
 8015fd0:	08016143 	.word	0x08016143
 8015fd4:	08016143 	.word	0x08016143
 8015fd8:	08016143 	.word	0x08016143
 8015fdc:	08016143 	.word	0x08016143
 8015fe0:	08016143 	.word	0x08016143
 8015fe4:	08016143 	.word	0x08016143
 8015fe8:	08016143 	.word	0x08016143
 8015fec:	08016143 	.word	0x08016143
 8015ff0:	08016143 	.word	0x08016143
 8015ff4:	08016143 	.word	0x08016143
 8015ff8:	08016143 	.word	0x08016143
 8015ffc:	08016143 	.word	0x08016143
 8016000:	08016143 	.word	0x08016143
 8016004:	08016143 	.word	0x08016143
 8016008:	08016143 	.word	0x08016143
 801600c:	08016143 	.word	0x08016143
 8016010:	08016143 	.word	0x08016143
 8016014:	08016143 	.word	0x08016143
 8016018:	08016143 	.word	0x08016143
 801601c:	08016143 	.word	0x08016143
 8016020:	08016143 	.word	0x08016143
 8016024:	08016143 	.word	0x08016143
 8016028:	08016143 	.word	0x08016143
 801602c:	08016143 	.word	0x08016143
 8016030:	08016143 	.word	0x08016143
 8016034:	08016143 	.word	0x08016143
 8016038:	08016143 	.word	0x08016143
 801603c:	08016089 	.word	0x08016089
 8016040:	0801609b 	.word	0x0801609b
 8016044:	080160ad 	.word	0x080160ad
 8016048:	080160bf 	.word	0x080160bf
 801604c:	080160d1 	.word	0x080160d1
 8016050:	080160e3 	.word	0x080160e3
 8016054:	080160f5 	.word	0x080160f5
 8016058:	08016107 	.word	0x08016107
 801605c:	08016119 	.word	0x08016119
 8016060:	0801612b 	.word	0x0801612b
					case R90S:		MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );			break;
 8016064:	2000      	movs	r0, #0
 8016066:	f7ed fec3 	bl	8003df0 <PARAM_getSra>
 801606a:	4603      	mov	r3, r0
 801606c:	4619      	mov	r1, r3
 801606e:	2000      	movs	r0, #0
 8016070:	f7fb f93a 	bl	80112e8 <MOT_goSla>
 8016074:	e065      	b.n	8016142 <MAP_drive+0x796>
					case L90S:		MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );			break;
 8016076:	2000      	movs	r0, #0
 8016078:	f7ed feba 	bl	8003df0 <PARAM_getSra>
 801607c:	4603      	mov	r3, r0
 801607e:	4619      	mov	r1, r3
 8016080:	2001      	movs	r0, #1
 8016082:	f7fb f931 	bl	80112e8 <MOT_goSla>
 8016086:	e05c      	b.n	8016142 <MAP_drive+0x796>
					case RS45N:		MOT_goSla( MOT_R45S_S2N, PARAM_getSra( SLA_45 ) ); 		break;
 8016088:	2001      	movs	r0, #1
 801608a:	f7ed feb1 	bl	8003df0 <PARAM_getSra>
 801608e:	4603      	mov	r3, r0
 8016090:	4619      	mov	r1, r3
 8016092:	2002      	movs	r0, #2
 8016094:	f7fb f928 	bl	80112e8 <MOT_goSla>
 8016098:	e053      	b.n	8016142 <MAP_drive+0x796>
					case LS45N:		MOT_goSla( MOT_L45S_S2N, PARAM_getSra( SLA_45 ) ); 		break;
 801609a:	2001      	movs	r0, #1
 801609c:	f7ed fea8 	bl	8003df0 <PARAM_getSra>
 80160a0:	4603      	mov	r3, r0
 80160a2:	4619      	mov	r1, r3
 80160a4:	2003      	movs	r0, #3
 80160a6:	f7fb f91f 	bl	80112e8 <MOT_goSla>
 80160aa:	e04a      	b.n	8016142 <MAP_drive+0x796>
					case RS135N:	MOT_goSla( MOT_R135S_S2N, PARAM_getSra( SLA_135 ) ); 	break;
 80160ac:	2002      	movs	r0, #2
 80160ae:	f7ed fe9f 	bl	8003df0 <PARAM_getSra>
 80160b2:	4603      	mov	r3, r0
 80160b4:	4619      	mov	r1, r3
 80160b6:	2008      	movs	r0, #8
 80160b8:	f7fb f916 	bl	80112e8 <MOT_goSla>
 80160bc:	e041      	b.n	8016142 <MAP_drive+0x796>
					case LS135N:	MOT_goSla( MOT_L135S_S2N, PARAM_getSra( SLA_135 ) ); 	break;
 80160be:	2002      	movs	r0, #2
 80160c0:	f7ed fe96 	bl	8003df0 <PARAM_getSra>
 80160c4:	4603      	mov	r3, r0
 80160c6:	4619      	mov	r1, r3
 80160c8:	2009      	movs	r0, #9
 80160ca:	f7fb f90d 	bl	80112e8 <MOT_goSla>
 80160ce:	e038      	b.n	8016142 <MAP_drive+0x796>
					case RN45S:		MOT_goSla( MOT_R45S_N2S, PARAM_getSra( SLA_45 ) ); 		break;
 80160d0:	2001      	movs	r0, #1
 80160d2:	f7ed fe8d 	bl	8003df0 <PARAM_getSra>
 80160d6:	4603      	mov	r3, r0
 80160d8:	4619      	mov	r1, r3
 80160da:	2004      	movs	r0, #4
 80160dc:	f7fb f904 	bl	80112e8 <MOT_goSla>
 80160e0:	e02f      	b.n	8016142 <MAP_drive+0x796>
					case LN45S:		MOT_goSla( MOT_L45S_N2S, PARAM_getSra( SLA_45 ) ); 		break;
 80160e2:	2001      	movs	r0, #1
 80160e4:	f7ed fe84 	bl	8003df0 <PARAM_getSra>
 80160e8:	4603      	mov	r3, r0
 80160ea:	4619      	mov	r1, r3
 80160ec:	2005      	movs	r0, #5
 80160ee:	f7fb f8fb 	bl	80112e8 <MOT_goSla>
 80160f2:	e026      	b.n	8016142 <MAP_drive+0x796>
					case RN135S:	MOT_goSla( MOT_R135S_N2S, PARAM_getSra( SLA_135 ) ); 	break;
 80160f4:	2002      	movs	r0, #2
 80160f6:	f7ed fe7b 	bl	8003df0 <PARAM_getSra>
 80160fa:	4603      	mov	r3, r0
 80160fc:	4619      	mov	r1, r3
 80160fe:	200a      	movs	r0, #10
 8016100:	f7fb f8f2 	bl	80112e8 <MOT_goSla>
 8016104:	e01d      	b.n	8016142 <MAP_drive+0x796>
					case LN135S:	MOT_goSla( MOT_L135S_N2S, PARAM_getSra( SLA_135 ) ); 	break;
 8016106:	2002      	movs	r0, #2
 8016108:	f7ed fe72 	bl	8003df0 <PARAM_getSra>
 801610c:	4603      	mov	r3, r0
 801610e:	4619      	mov	r1, r3
 8016110:	200b      	movs	r0, #11
 8016112:	f7fb f8e9 	bl	80112e8 <MOT_goSla>
 8016116:	e014      	b.n	8016142 <MAP_drive+0x796>
					case RN90N:		MOT_goSla( MOT_R90S_N, PARAM_getSra( SLA_N90 ) ); 		break;
 8016118:	2003      	movs	r0, #3
 801611a:	f7ed fe69 	bl	8003df0 <PARAM_getSra>
 801611e:	4603      	mov	r3, r0
 8016120:	4619      	mov	r1, r3
 8016122:	2006      	movs	r0, #6
 8016124:	f7fb f8e0 	bl	80112e8 <MOT_goSla>
 8016128:	e00b      	b.n	8016142 <MAP_drive+0x796>
					case LN90N:		MOT_goSla( MOT_L90S_N, PARAM_getSra( SLA_N90 ) );		break;
 801612a:	2003      	movs	r0, #3
 801612c:	f7ed fe60 	bl	8003df0 <PARAM_getSra>
 8016130:	4603      	mov	r3, r0
 8016132:	4619      	mov	r1, r3
 8016134:	2007      	movs	r0, #7
 8016136:	f7fb f8d7 	bl	80112e8 <MOT_goSla>
 801613a:	e002      	b.n	8016142 <MAP_drive+0x796>
				if( tcom[us_rp+1] == STOP  ){
 801613c:	bf00      	nop
 801613e:	e000      	b.n	8016142 <MAP_drive+0x796>
				if((tcom[us_rp+1]==RN45S)||(tcom[us_rp+1]==LN45S)){
 8016140:	bf00      	nop
			us_rp++;
 8016142:	89fb      	ldrh	r3, [r7, #14]
 8016144:	3301      	adds	r3, #1
 8016146:	81fb      	strh	r3, [r7, #14]
			if( SYS_isOutOfCtrl() == TRUE ){
 8016148:	f7f3 faca 	bl	80096e0 <SYS_isOutOfCtrl>
 801614c:	4603      	mov	r3, r0
 801614e:	2b00      	cmp	r3, #0
 8016150:	f43f ad57 	beq.w	8015c02 <MAP_drive+0x256>
				CTRL_stop();
 8016154:	f7f0 f966 	bl	8006424 <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8016158:	2000      	movs	r0, #0
 801615a:	f7f3 faf3 	bl	8009744 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 801615e:	2001      	movs	r0, #1
 8016160:	f7f3 faf0 	bl	8009744 <DCM_brakeMot>
				break;
 8016164:	e002      	b.n	801616c <MAP_drive+0x7c0>
			if ( scom[us_rp] == CEND  ) break;							//	コマンド終了
 8016166:	bf00      	nop
 8016168:	e000      	b.n	801616c <MAP_drive+0x7c0>
			if ( tcom[us_rp] == CEND  ) break;							//	コマンド終了
 801616a:	bf00      	nop
}
 801616c:	bf00      	nop
 801616e:	3710      	adds	r7, #16
 8016170:	46bd      	mov	sp, r7
 8016172:	ecbd 8b02 	vpop	{d8}
 8016176:	bd80      	pop	{r7, pc}
 8016178:	20019c48 	.word	0x20019c48

0801617c <MAP_searchCmdList>:
	uint8_t uc_staY,					///< [in] 開始Y座標
	enMAP_HEAD_DIR en_staDir,		///< [in] 開始時の方向
	uint8_t uc_endX,					///< [in] 終了X座標
	uint8_t uc_endY,					///< [in] 終了Y座標
	enMAP_HEAD_DIR* en_endDir		///< [out] 終了時の方向
) {
 801617c:	b490      	push	{r4, r7}
 801617e:	b084      	sub	sp, #16
 8016180:	af00      	add	r7, sp, #0
 8016182:	4604      	mov	r4, r0
 8016184:	4608      	mov	r0, r1
 8016186:	4611      	mov	r1, r2
 8016188:	461a      	mov	r2, r3
 801618a:	4623      	mov	r3, r4
 801618c:	71fb      	strb	r3, [r7, #7]
 801618e:	4603      	mov	r3, r0
 8016190:	71bb      	strb	r3, [r7, #6]
 8016192:	460b      	mov	r3, r1
 8016194:	717b      	strb	r3, [r7, #5]
 8016196:	4613      	mov	r3, r2
 8016198:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_nowDir;									// 現在マウスの向いている絶対方向
	enMAP_HEAD_DIR	en_tempDir;									// 相対方向
//	uint16_t			i;											// roop

	/* 前進ステップ数を初期化する */
	uc_goStep = 0;
 801619a:	2300      	movs	r3, #0
 801619c:	73bb      	strb	r3, [r7, #14]
	us_pt = 0;
 801619e:	2300      	movs	r3, #0
 80161a0:	81bb      	strh	r3, [r7, #12]
//	printf("mx%d,my%d\n", uc_staX, uc_staY);
	/* 迷路情報からコマンド作成 */
	while (1) {
		us_high = us_Cmap[uc_staY][uc_staX] - 1;
 80161a2:	79ba      	ldrb	r2, [r7, #6]
 80161a4:	79fb      	ldrb	r3, [r7, #7]
 80161a6:	499b      	ldr	r1, [pc, #620]	@ (8016414 <MAP_searchCmdList+0x298>)
 80161a8:	0152      	lsls	r2, r2, #5
 80161aa:	4413      	add	r3, r2
 80161ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80161b0:	3b01      	subs	r3, #1
 80161b2:	817b      	strh	r3, [r7, #10]
		if ((g_SysMap[uc_staY][uc_staX]&0xf0) != 0xf0){
 80161b4:	79ba      	ldrb	r2, [r7, #6]
 80161b6:	79fb      	ldrb	r3, [r7, #7]
 80161b8:	4997      	ldr	r1, [pc, #604]	@ (8016418 <MAP_searchCmdList+0x29c>)
 80161ba:	0152      	lsls	r2, r2, #5
 80161bc:	440a      	add	r2, r1
 80161be:	4413      	add	r3, r2
 80161c0:	781b      	ldrb	r3, [r3, #0]
 80161c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80161c6:	2bf0      	cmp	r3, #240	@ 0xf0
 80161c8:	d006      	beq.n	80161d8 <MAP_searchCmdList+0x5c>
			Return_X = uc_staX;
 80161ca:	4a94      	ldr	r2, [pc, #592]	@ (801641c <MAP_searchCmdList+0x2a0>)
 80161cc:	79fb      	ldrb	r3, [r7, #7]
 80161ce:	7013      	strb	r3, [r2, #0]
			Return_Y = uc_staY;
 80161d0:	4a93      	ldr	r2, [pc, #588]	@ (8016420 <MAP_searchCmdList+0x2a4>)
 80161d2:	79bb      	ldrb	r3, [r7, #6]
 80161d4:	7013      	strb	r3, [r2, #0]
			break;
 80161d6:	e1dd      	b.n	8016594 <MAP_searchCmdList+0x418>
		}

		if (en_staDir == NORTH) {
 80161d8:	797b      	ldrb	r3, [r7, #5]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d164      	bne.n	80162a8 <MAP_searchCmdList+0x12c>
			if (((g_SysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_Cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 80161de:	79ba      	ldrb	r2, [r7, #6]
 80161e0:	79fb      	ldrb	r3, [r7, #7]
 80161e2:	498d      	ldr	r1, [pc, #564]	@ (8016418 <MAP_searchCmdList+0x29c>)
 80161e4:	0152      	lsls	r2, r2, #5
 80161e6:	440a      	add	r2, r1
 80161e8:	4413      	add	r3, r2
 80161ea:	781b      	ldrb	r3, [r3, #0]
 80161ec:	f003 0311 	and.w	r3, r3, #17
 80161f0:	2b10      	cmp	r3, #16
 80161f2:	d10d      	bne.n	8016210 <MAP_searchCmdList+0x94>
 80161f4:	79bb      	ldrb	r3, [r7, #6]
 80161f6:	1c5a      	adds	r2, r3, #1
 80161f8:	79fb      	ldrb	r3, [r7, #7]
 80161fa:	4986      	ldr	r1, [pc, #536]	@ (8016414 <MAP_searchCmdList+0x298>)
 80161fc:	0152      	lsls	r2, r2, #5
 80161fe:	4413      	add	r3, r2
 8016200:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016204:	897a      	ldrh	r2, [r7, #10]
 8016206:	429a      	cmp	r2, r3
 8016208:	d102      	bne.n	8016210 <MAP_searchCmdList+0x94>
 801620a:	2300      	movs	r3, #0
 801620c:	73fb      	strb	r3, [r7, #15]
 801620e:	e18b      	b.n	8016528 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_Cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 8016210:	79ba      	ldrb	r2, [r7, #6]
 8016212:	79fb      	ldrb	r3, [r7, #7]
 8016214:	4980      	ldr	r1, [pc, #512]	@ (8016418 <MAP_searchCmdList+0x29c>)
 8016216:	0152      	lsls	r2, r2, #5
 8016218:	440a      	add	r2, r1
 801621a:	4413      	add	r3, r2
 801621c:	781b      	ldrb	r3, [r3, #0]
 801621e:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8016222:	2b20      	cmp	r3, #32
 8016224:	d10d      	bne.n	8016242 <MAP_searchCmdList+0xc6>
 8016226:	79ba      	ldrb	r2, [r7, #6]
 8016228:	79fb      	ldrb	r3, [r7, #7]
 801622a:	3301      	adds	r3, #1
 801622c:	4979      	ldr	r1, [pc, #484]	@ (8016414 <MAP_searchCmdList+0x298>)
 801622e:	0152      	lsls	r2, r2, #5
 8016230:	4413      	add	r3, r2
 8016232:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016236:	897a      	ldrh	r2, [r7, #10]
 8016238:	429a      	cmp	r2, r3
 801623a:	d102      	bne.n	8016242 <MAP_searchCmdList+0xc6>
 801623c:	2301      	movs	r3, #1
 801623e:	73fb      	strb	r3, [r7, #15]
 8016240:	e172      	b.n	8016528 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_Cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 8016242:	79ba      	ldrb	r2, [r7, #6]
 8016244:	79fb      	ldrb	r3, [r7, #7]
 8016246:	4974      	ldr	r1, [pc, #464]	@ (8016418 <MAP_searchCmdList+0x29c>)
 8016248:	0152      	lsls	r2, r2, #5
 801624a:	440a      	add	r2, r1
 801624c:	4413      	add	r3, r2
 801624e:	781b      	ldrb	r3, [r3, #0]
 8016250:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 8016254:	2b80      	cmp	r3, #128	@ 0x80
 8016256:	d10d      	bne.n	8016274 <MAP_searchCmdList+0xf8>
 8016258:	79ba      	ldrb	r2, [r7, #6]
 801625a:	79fb      	ldrb	r3, [r7, #7]
 801625c:	3b01      	subs	r3, #1
 801625e:	496d      	ldr	r1, [pc, #436]	@ (8016414 <MAP_searchCmdList+0x298>)
 8016260:	0152      	lsls	r2, r2, #5
 8016262:	4413      	add	r3, r2
 8016264:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016268:	897a      	ldrh	r2, [r7, #10]
 801626a:	429a      	cmp	r2, r3
 801626c:	d102      	bne.n	8016274 <MAP_searchCmdList+0xf8>
 801626e:	2303      	movs	r3, #3
 8016270:	73fb      	strb	r3, [r7, #15]
 8016272:	e159      	b.n	8016528 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_Cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 8016274:	79ba      	ldrb	r2, [r7, #6]
 8016276:	79fb      	ldrb	r3, [r7, #7]
 8016278:	4967      	ldr	r1, [pc, #412]	@ (8016418 <MAP_searchCmdList+0x29c>)
 801627a:	0152      	lsls	r2, r2, #5
 801627c:	440a      	add	r2, r1
 801627e:	4413      	add	r3, r2
 8016280:	781b      	ldrb	r3, [r3, #0]
 8016282:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8016286:	2b40      	cmp	r3, #64	@ 0x40
 8016288:	d10d      	bne.n	80162a6 <MAP_searchCmdList+0x12a>
 801628a:	79bb      	ldrb	r3, [r7, #6]
 801628c:	1e5a      	subs	r2, r3, #1
 801628e:	79fb      	ldrb	r3, [r7, #7]
 8016290:	4960      	ldr	r1, [pc, #384]	@ (8016414 <MAP_searchCmdList+0x298>)
 8016292:	0152      	lsls	r2, r2, #5
 8016294:	4413      	add	r3, r2
 8016296:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801629a:	897a      	ldrh	r2, [r7, #10]
 801629c:	429a      	cmp	r2, r3
 801629e:	d102      	bne.n	80162a6 <MAP_searchCmdList+0x12a>
 80162a0:	2302      	movs	r3, #2
 80162a2:	73fb      	strb	r3, [r7, #15]
 80162a4:	e140      	b.n	8016528 <MAP_searchCmdList+0x3ac>
			else   while (1);
 80162a6:	e7fe      	b.n	80162a6 <MAP_searchCmdList+0x12a>
		}
		else if (en_staDir == EAST) {
 80162a8:	797b      	ldrb	r3, [r7, #5]
 80162aa:	2b01      	cmp	r3, #1
 80162ac:	d164      	bne.n	8016378 <MAP_searchCmdList+0x1fc>
			if (((g_SysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_Cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 80162ae:	79ba      	ldrb	r2, [r7, #6]
 80162b0:	79fb      	ldrb	r3, [r7, #7]
 80162b2:	4959      	ldr	r1, [pc, #356]	@ (8016418 <MAP_searchCmdList+0x29c>)
 80162b4:	0152      	lsls	r2, r2, #5
 80162b6:	440a      	add	r2, r1
 80162b8:	4413      	add	r3, r2
 80162ba:	781b      	ldrb	r3, [r3, #0]
 80162bc:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80162c0:	2b20      	cmp	r3, #32
 80162c2:	d10d      	bne.n	80162e0 <MAP_searchCmdList+0x164>
 80162c4:	79ba      	ldrb	r2, [r7, #6]
 80162c6:	79fb      	ldrb	r3, [r7, #7]
 80162c8:	3301      	adds	r3, #1
 80162ca:	4952      	ldr	r1, [pc, #328]	@ (8016414 <MAP_searchCmdList+0x298>)
 80162cc:	0152      	lsls	r2, r2, #5
 80162ce:	4413      	add	r3, r2
 80162d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80162d4:	897a      	ldrh	r2, [r7, #10]
 80162d6:	429a      	cmp	r2, r3
 80162d8:	d102      	bne.n	80162e0 <MAP_searchCmdList+0x164>
 80162da:	2301      	movs	r3, #1
 80162dc:	73fb      	strb	r3, [r7, #15]
 80162de:	e123      	b.n	8016528 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_Cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 80162e0:	79ba      	ldrb	r2, [r7, #6]
 80162e2:	79fb      	ldrb	r3, [r7, #7]
 80162e4:	494c      	ldr	r1, [pc, #304]	@ (8016418 <MAP_searchCmdList+0x29c>)
 80162e6:	0152      	lsls	r2, r2, #5
 80162e8:	440a      	add	r2, r1
 80162ea:	4413      	add	r3, r2
 80162ec:	781b      	ldrb	r3, [r3, #0]
 80162ee:	f003 0311 	and.w	r3, r3, #17
 80162f2:	2b10      	cmp	r3, #16
 80162f4:	d10d      	bne.n	8016312 <MAP_searchCmdList+0x196>
 80162f6:	79bb      	ldrb	r3, [r7, #6]
 80162f8:	1c5a      	adds	r2, r3, #1
 80162fa:	79fb      	ldrb	r3, [r7, #7]
 80162fc:	4945      	ldr	r1, [pc, #276]	@ (8016414 <MAP_searchCmdList+0x298>)
 80162fe:	0152      	lsls	r2, r2, #5
 8016300:	4413      	add	r3, r2
 8016302:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016306:	897a      	ldrh	r2, [r7, #10]
 8016308:	429a      	cmp	r2, r3
 801630a:	d102      	bne.n	8016312 <MAP_searchCmdList+0x196>
 801630c:	2300      	movs	r3, #0
 801630e:	73fb      	strb	r3, [r7, #15]
 8016310:	e10a      	b.n	8016528 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_Cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 8016312:	79ba      	ldrb	r2, [r7, #6]
 8016314:	79fb      	ldrb	r3, [r7, #7]
 8016316:	4940      	ldr	r1, [pc, #256]	@ (8016418 <MAP_searchCmdList+0x29c>)
 8016318:	0152      	lsls	r2, r2, #5
 801631a:	440a      	add	r2, r1
 801631c:	4413      	add	r3, r2
 801631e:	781b      	ldrb	r3, [r3, #0]
 8016320:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8016324:	2b40      	cmp	r3, #64	@ 0x40
 8016326:	d10d      	bne.n	8016344 <MAP_searchCmdList+0x1c8>
 8016328:	79bb      	ldrb	r3, [r7, #6]
 801632a:	1e5a      	subs	r2, r3, #1
 801632c:	79fb      	ldrb	r3, [r7, #7]
 801632e:	4939      	ldr	r1, [pc, #228]	@ (8016414 <MAP_searchCmdList+0x298>)
 8016330:	0152      	lsls	r2, r2, #5
 8016332:	4413      	add	r3, r2
 8016334:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016338:	897a      	ldrh	r2, [r7, #10]
 801633a:	429a      	cmp	r2, r3
 801633c:	d102      	bne.n	8016344 <MAP_searchCmdList+0x1c8>
 801633e:	2302      	movs	r3, #2
 8016340:	73fb      	strb	r3, [r7, #15]
 8016342:	e0f1      	b.n	8016528 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_Cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 8016344:	79ba      	ldrb	r2, [r7, #6]
 8016346:	79fb      	ldrb	r3, [r7, #7]
 8016348:	4933      	ldr	r1, [pc, #204]	@ (8016418 <MAP_searchCmdList+0x29c>)
 801634a:	0152      	lsls	r2, r2, #5
 801634c:	440a      	add	r2, r1
 801634e:	4413      	add	r3, r2
 8016350:	781b      	ldrb	r3, [r3, #0]
 8016352:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 8016356:	2b80      	cmp	r3, #128	@ 0x80
 8016358:	d10d      	bne.n	8016376 <MAP_searchCmdList+0x1fa>
 801635a:	79ba      	ldrb	r2, [r7, #6]
 801635c:	79fb      	ldrb	r3, [r7, #7]
 801635e:	3b01      	subs	r3, #1
 8016360:	492c      	ldr	r1, [pc, #176]	@ (8016414 <MAP_searchCmdList+0x298>)
 8016362:	0152      	lsls	r2, r2, #5
 8016364:	4413      	add	r3, r2
 8016366:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801636a:	897a      	ldrh	r2, [r7, #10]
 801636c:	429a      	cmp	r2, r3
 801636e:	d102      	bne.n	8016376 <MAP_searchCmdList+0x1fa>
 8016370:	2303      	movs	r3, #3
 8016372:	73fb      	strb	r3, [r7, #15]
 8016374:	e0d8      	b.n	8016528 <MAP_searchCmdList+0x3ac>
			else   while (1);
 8016376:	e7fe      	b.n	8016376 <MAP_searchCmdList+0x1fa>
		}
		else if (en_staDir == SOUTH) {
 8016378:	797b      	ldrb	r3, [r7, #5]
 801637a:	2b02      	cmp	r3, #2
 801637c:	d16c      	bne.n	8016458 <MAP_searchCmdList+0x2dc>
			if (((g_SysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_Cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 801637e:	79ba      	ldrb	r2, [r7, #6]
 8016380:	79fb      	ldrb	r3, [r7, #7]
 8016382:	4925      	ldr	r1, [pc, #148]	@ (8016418 <MAP_searchCmdList+0x29c>)
 8016384:	0152      	lsls	r2, r2, #5
 8016386:	440a      	add	r2, r1
 8016388:	4413      	add	r3, r2
 801638a:	781b      	ldrb	r3, [r3, #0]
 801638c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8016390:	2b40      	cmp	r3, #64	@ 0x40
 8016392:	d10d      	bne.n	80163b0 <MAP_searchCmdList+0x234>
 8016394:	79bb      	ldrb	r3, [r7, #6]
 8016396:	1e5a      	subs	r2, r3, #1
 8016398:	79fb      	ldrb	r3, [r7, #7]
 801639a:	491e      	ldr	r1, [pc, #120]	@ (8016414 <MAP_searchCmdList+0x298>)
 801639c:	0152      	lsls	r2, r2, #5
 801639e:	4413      	add	r3, r2
 80163a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80163a4:	897a      	ldrh	r2, [r7, #10]
 80163a6:	429a      	cmp	r2, r3
 80163a8:	d102      	bne.n	80163b0 <MAP_searchCmdList+0x234>
 80163aa:	2302      	movs	r3, #2
 80163ac:	73fb      	strb	r3, [r7, #15]
 80163ae:	e0bb      	b.n	8016528 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_Cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 80163b0:	79ba      	ldrb	r2, [r7, #6]
 80163b2:	79fb      	ldrb	r3, [r7, #7]
 80163b4:	4918      	ldr	r1, [pc, #96]	@ (8016418 <MAP_searchCmdList+0x29c>)
 80163b6:	0152      	lsls	r2, r2, #5
 80163b8:	440a      	add	r2, r1
 80163ba:	4413      	add	r3, r2
 80163bc:	781b      	ldrb	r3, [r3, #0]
 80163be:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80163c2:	2b20      	cmp	r3, #32
 80163c4:	d10d      	bne.n	80163e2 <MAP_searchCmdList+0x266>
 80163c6:	79ba      	ldrb	r2, [r7, #6]
 80163c8:	79fb      	ldrb	r3, [r7, #7]
 80163ca:	3301      	adds	r3, #1
 80163cc:	4911      	ldr	r1, [pc, #68]	@ (8016414 <MAP_searchCmdList+0x298>)
 80163ce:	0152      	lsls	r2, r2, #5
 80163d0:	4413      	add	r3, r2
 80163d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80163d6:	897a      	ldrh	r2, [r7, #10]
 80163d8:	429a      	cmp	r2, r3
 80163da:	d102      	bne.n	80163e2 <MAP_searchCmdList+0x266>
 80163dc:	2301      	movs	r3, #1
 80163de:	73fb      	strb	r3, [r7, #15]
 80163e0:	e0a2      	b.n	8016528 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_Cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 80163e2:	79ba      	ldrb	r2, [r7, #6]
 80163e4:	79fb      	ldrb	r3, [r7, #7]
 80163e6:	490c      	ldr	r1, [pc, #48]	@ (8016418 <MAP_searchCmdList+0x29c>)
 80163e8:	0152      	lsls	r2, r2, #5
 80163ea:	440a      	add	r2, r1
 80163ec:	4413      	add	r3, r2
 80163ee:	781b      	ldrb	r3, [r3, #0]
 80163f0:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 80163f4:	2b80      	cmp	r3, #128	@ 0x80
 80163f6:	d115      	bne.n	8016424 <MAP_searchCmdList+0x2a8>
 80163f8:	79ba      	ldrb	r2, [r7, #6]
 80163fa:	79fb      	ldrb	r3, [r7, #7]
 80163fc:	3b01      	subs	r3, #1
 80163fe:	4905      	ldr	r1, [pc, #20]	@ (8016414 <MAP_searchCmdList+0x298>)
 8016400:	0152      	lsls	r2, r2, #5
 8016402:	4413      	add	r3, r2
 8016404:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016408:	897a      	ldrh	r2, [r7, #10]
 801640a:	429a      	cmp	r2, r3
 801640c:	d10a      	bne.n	8016424 <MAP_searchCmdList+0x2a8>
 801640e:	2303      	movs	r3, #3
 8016410:	73fb      	strb	r3, [r7, #15]
 8016412:	e089      	b.n	8016528 <MAP_searchCmdList+0x3ac>
 8016414:	2001ada0 	.word	0x2001ada0
 8016418:	2001b5a0 	.word	0x2001b5a0
 801641c:	2001ad9c 	.word	0x2001ad9c
 8016420:	2001ad9d 	.word	0x2001ad9d
			else if (((g_SysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_Cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 8016424:	79ba      	ldrb	r2, [r7, #6]
 8016426:	79fb      	ldrb	r3, [r7, #7]
 8016428:	495e      	ldr	r1, [pc, #376]	@ (80165a4 <MAP_searchCmdList+0x428>)
 801642a:	0152      	lsls	r2, r2, #5
 801642c:	440a      	add	r2, r1
 801642e:	4413      	add	r3, r2
 8016430:	781b      	ldrb	r3, [r3, #0]
 8016432:	f003 0311 	and.w	r3, r3, #17
 8016436:	2b10      	cmp	r3, #16
 8016438:	d10d      	bne.n	8016456 <MAP_searchCmdList+0x2da>
 801643a:	79bb      	ldrb	r3, [r7, #6]
 801643c:	1c5a      	adds	r2, r3, #1
 801643e:	79fb      	ldrb	r3, [r7, #7]
 8016440:	4959      	ldr	r1, [pc, #356]	@ (80165a8 <MAP_searchCmdList+0x42c>)
 8016442:	0152      	lsls	r2, r2, #5
 8016444:	4413      	add	r3, r2
 8016446:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801644a:	897a      	ldrh	r2, [r7, #10]
 801644c:	429a      	cmp	r2, r3
 801644e:	d102      	bne.n	8016456 <MAP_searchCmdList+0x2da>
 8016450:	2300      	movs	r3, #0
 8016452:	73fb      	strb	r3, [r7, #15]
 8016454:	e068      	b.n	8016528 <MAP_searchCmdList+0x3ac>
			else   while (1);
 8016456:	e7fe      	b.n	8016456 <MAP_searchCmdList+0x2da>
		}
		else if (en_staDir == WEST) {
 8016458:	797b      	ldrb	r3, [r7, #5]
 801645a:	2b03      	cmp	r3, #3
 801645c:	d164      	bne.n	8016528 <MAP_searchCmdList+0x3ac>
			if (((g_SysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_Cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 801645e:	79ba      	ldrb	r2, [r7, #6]
 8016460:	79fb      	ldrb	r3, [r7, #7]
 8016462:	4950      	ldr	r1, [pc, #320]	@ (80165a4 <MAP_searchCmdList+0x428>)
 8016464:	0152      	lsls	r2, r2, #5
 8016466:	440a      	add	r2, r1
 8016468:	4413      	add	r3, r2
 801646a:	781b      	ldrb	r3, [r3, #0]
 801646c:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 8016470:	2b80      	cmp	r3, #128	@ 0x80
 8016472:	d10d      	bne.n	8016490 <MAP_searchCmdList+0x314>
 8016474:	79ba      	ldrb	r2, [r7, #6]
 8016476:	79fb      	ldrb	r3, [r7, #7]
 8016478:	3b01      	subs	r3, #1
 801647a:	494b      	ldr	r1, [pc, #300]	@ (80165a8 <MAP_searchCmdList+0x42c>)
 801647c:	0152      	lsls	r2, r2, #5
 801647e:	4413      	add	r3, r2
 8016480:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016484:	897a      	ldrh	r2, [r7, #10]
 8016486:	429a      	cmp	r2, r3
 8016488:	d102      	bne.n	8016490 <MAP_searchCmdList+0x314>
 801648a:	2303      	movs	r3, #3
 801648c:	73fb      	strb	r3, [r7, #15]
 801648e:	e04b      	b.n	8016528 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_Cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 8016490:	79ba      	ldrb	r2, [r7, #6]
 8016492:	79fb      	ldrb	r3, [r7, #7]
 8016494:	4943      	ldr	r1, [pc, #268]	@ (80165a4 <MAP_searchCmdList+0x428>)
 8016496:	0152      	lsls	r2, r2, #5
 8016498:	440a      	add	r2, r1
 801649a:	4413      	add	r3, r2
 801649c:	781b      	ldrb	r3, [r3, #0]
 801649e:	f003 0311 	and.w	r3, r3, #17
 80164a2:	2b10      	cmp	r3, #16
 80164a4:	d10d      	bne.n	80164c2 <MAP_searchCmdList+0x346>
 80164a6:	79bb      	ldrb	r3, [r7, #6]
 80164a8:	1c5a      	adds	r2, r3, #1
 80164aa:	79fb      	ldrb	r3, [r7, #7]
 80164ac:	493e      	ldr	r1, [pc, #248]	@ (80165a8 <MAP_searchCmdList+0x42c>)
 80164ae:	0152      	lsls	r2, r2, #5
 80164b0:	4413      	add	r3, r2
 80164b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80164b6:	897a      	ldrh	r2, [r7, #10]
 80164b8:	429a      	cmp	r2, r3
 80164ba:	d102      	bne.n	80164c2 <MAP_searchCmdList+0x346>
 80164bc:	2300      	movs	r3, #0
 80164be:	73fb      	strb	r3, [r7, #15]
 80164c0:	e032      	b.n	8016528 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_Cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 80164c2:	79ba      	ldrb	r2, [r7, #6]
 80164c4:	79fb      	ldrb	r3, [r7, #7]
 80164c6:	4937      	ldr	r1, [pc, #220]	@ (80165a4 <MAP_searchCmdList+0x428>)
 80164c8:	0152      	lsls	r2, r2, #5
 80164ca:	440a      	add	r2, r1
 80164cc:	4413      	add	r3, r2
 80164ce:	781b      	ldrb	r3, [r3, #0]
 80164d0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80164d4:	2b40      	cmp	r3, #64	@ 0x40
 80164d6:	d10d      	bne.n	80164f4 <MAP_searchCmdList+0x378>
 80164d8:	79bb      	ldrb	r3, [r7, #6]
 80164da:	1e5a      	subs	r2, r3, #1
 80164dc:	79fb      	ldrb	r3, [r7, #7]
 80164de:	4932      	ldr	r1, [pc, #200]	@ (80165a8 <MAP_searchCmdList+0x42c>)
 80164e0:	0152      	lsls	r2, r2, #5
 80164e2:	4413      	add	r3, r2
 80164e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80164e8:	897a      	ldrh	r2, [r7, #10]
 80164ea:	429a      	cmp	r2, r3
 80164ec:	d102      	bne.n	80164f4 <MAP_searchCmdList+0x378>
 80164ee:	2302      	movs	r3, #2
 80164f0:	73fb      	strb	r3, [r7, #15]
 80164f2:	e019      	b.n	8016528 <MAP_searchCmdList+0x3ac>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_Cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 80164f4:	79ba      	ldrb	r2, [r7, #6]
 80164f6:	79fb      	ldrb	r3, [r7, #7]
 80164f8:	492a      	ldr	r1, [pc, #168]	@ (80165a4 <MAP_searchCmdList+0x428>)
 80164fa:	0152      	lsls	r2, r2, #5
 80164fc:	440a      	add	r2, r1
 80164fe:	4413      	add	r3, r2
 8016500:	781b      	ldrb	r3, [r3, #0]
 8016502:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8016506:	2b20      	cmp	r3, #32
 8016508:	d10d      	bne.n	8016526 <MAP_searchCmdList+0x3aa>
 801650a:	79ba      	ldrb	r2, [r7, #6]
 801650c:	79fb      	ldrb	r3, [r7, #7]
 801650e:	3301      	adds	r3, #1
 8016510:	4925      	ldr	r1, [pc, #148]	@ (80165a8 <MAP_searchCmdList+0x42c>)
 8016512:	0152      	lsls	r2, r2, #5
 8016514:	4413      	add	r3, r2
 8016516:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801651a:	897a      	ldrh	r2, [r7, #10]
 801651c:	429a      	cmp	r2, r3
 801651e:	d102      	bne.n	8016526 <MAP_searchCmdList+0x3aa>
 8016520:	2301      	movs	r3, #1
 8016522:	73fb      	strb	r3, [r7, #15]
 8016524:	e000      	b.n	8016528 <MAP_searchCmdList+0x3ac>
			else   while (1);
 8016526:	e7fe      	b.n	8016526 <MAP_searchCmdList+0x3aa>
		}

		en_tempDir = (enMAP_HEAD_DIR)((en_nowDir - en_staDir) & (enMAP_HEAD_DIR)3);		// 方向更新
 8016528:	7bfa      	ldrb	r2, [r7, #15]
 801652a:	797b      	ldrb	r3, [r7, #5]
 801652c:	1ad3      	subs	r3, r2, r3
 801652e:	b2db      	uxtb	r3, r3
 8016530:	f003 0303 	and.w	r3, r3, #3
 8016534:	727b      	strb	r3, [r7, #9]
		en_staDir = en_nowDir;
 8016536:	7bfb      	ldrb	r3, [r7, #15]
 8016538:	717b      	strb	r3, [r7, #5]

		if (en_nowDir == NORTH) uc_staY = uc_staY + 1;
 801653a:	7bfb      	ldrb	r3, [r7, #15]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d103      	bne.n	8016548 <MAP_searchCmdList+0x3cc>
 8016540:	79bb      	ldrb	r3, [r7, #6]
 8016542:	3301      	adds	r3, #1
 8016544:	71bb      	strb	r3, [r7, #6]
 8016546:	e013      	b.n	8016570 <MAP_searchCmdList+0x3f4>
		else if (en_nowDir == EAST) uc_staX = uc_staX + 1;
 8016548:	7bfb      	ldrb	r3, [r7, #15]
 801654a:	2b01      	cmp	r3, #1
 801654c:	d103      	bne.n	8016556 <MAP_searchCmdList+0x3da>
 801654e:	79fb      	ldrb	r3, [r7, #7]
 8016550:	3301      	adds	r3, #1
 8016552:	71fb      	strb	r3, [r7, #7]
 8016554:	e00c      	b.n	8016570 <MAP_searchCmdList+0x3f4>
		else if (en_nowDir == SOUTH) uc_staY = uc_staY - 1;
 8016556:	7bfb      	ldrb	r3, [r7, #15]
 8016558:	2b02      	cmp	r3, #2
 801655a:	d103      	bne.n	8016564 <MAP_searchCmdList+0x3e8>
 801655c:	79bb      	ldrb	r3, [r7, #6]
 801655e:	3b01      	subs	r3, #1
 8016560:	71bb      	strb	r3, [r7, #6]
 8016562:	e005      	b.n	8016570 <MAP_searchCmdList+0x3f4>
		else if (en_nowDir == WEST) uc_staX = uc_staX - 1;
 8016564:	7bfb      	ldrb	r3, [r7, #15]
 8016566:	2b03      	cmp	r3, #3
 8016568:	d102      	bne.n	8016570 <MAP_searchCmdList+0x3f4>
 801656a:	79fb      	ldrb	r3, [r7, #7]
 801656c:	3b01      	subs	r3, #1
 801656e:	71fb      	strb	r3, [r7, #7]

		en_staDir = en_nowDir;
 8016570:	7bfb      	ldrb	r3, [r7, #15]
 8016572:	717b      	strb	r3, [r7, #5]

//		if ((uc_staX == uc_endX) && (uc_staY == uc_endY)) break;
		if (us_Cmap[uc_staY][uc_staX] == 0) {
 8016574:	79ba      	ldrb	r2, [r7, #6]
 8016576:	79fb      	ldrb	r3, [r7, #7]
 8016578:	490b      	ldr	r1, [pc, #44]	@ (80165a8 <MAP_searchCmdList+0x42c>)
 801657a:	0152      	lsls	r2, r2, #5
 801657c:	4413      	add	r3, r2
 801657e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016582:	2b00      	cmp	r3, #0
 8016584:	f47f ae0d 	bne.w	80161a2 <MAP_searchCmdList+0x26>
			Return_X = 0;
 8016588:	4b08      	ldr	r3, [pc, #32]	@ (80165ac <MAP_searchCmdList+0x430>)
 801658a:	2200      	movs	r2, #0
 801658c:	701a      	strb	r2, [r3, #0]
			Return_Y = 0;
 801658e:	4b08      	ldr	r3, [pc, #32]	@ (80165b0 <MAP_searchCmdList+0x434>)
 8016590:	2200      	movs	r2, #0
 8016592:	701a      	strb	r2, [r3, #0]
		}
	}


	/* 最終的に向いている方向 */
	*en_endDir = en_staDir;
 8016594:	69fb      	ldr	r3, [r7, #28]
 8016596:	797a      	ldrb	r2, [r7, #5]
 8016598:	701a      	strb	r2, [r3, #0]
}
 801659a:	bf00      	nop
 801659c:	3710      	adds	r7, #16
 801659e:	46bd      	mov	sp, r7
 80165a0:	bc90      	pop	{r4, r7}
 80165a2:	4770      	bx	lr
 80165a4:	2001b5a0 	.word	0x2001b5a0
 80165a8:	2001ada0 	.word	0x2001ada0
 80165ac:	2001ad9c 	.word	0x2001ad9c
 80165b0:	2001ad9d 	.word	0x2001ad9d

080165b4 <MAP_makeCmdList_dijkstra_modoki>:
	uint8_t uc_staY,					///< [in] 開始Y座標
	enMAP_HEAD_DIR en_staDir,		///< [in] 開始時の方向
	uint8_t uc_endX,					///< [in] 終了X座標
	uint8_t uc_endY,					///< [in] 終了Y座標
	enMAP_HEAD_DIR* en_endDir		///< [out] 終了時の方向
) {
 80165b4:	b490      	push	{r4, r7}
 80165b6:	b086      	sub	sp, #24
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	4604      	mov	r4, r0
 80165bc:	4608      	mov	r0, r1
 80165be:	4611      	mov	r1, r2
 80165c0:	461a      	mov	r2, r3
 80165c2:	4623      	mov	r3, r4
 80165c4:	71fb      	strb	r3, [r7, #7]
 80165c6:	4603      	mov	r3, r0
 80165c8:	71bb      	strb	r3, [r7, #6]
 80165ca:	460b      	mov	r3, r1
 80165cc:	717b      	strb	r3, [r7, #5]
 80165ce:	4613      	mov	r3, r2
 80165d0:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_nowDir;									// 現在マウスの向いている絶対方向
	enMAP_HEAD_DIR	en_tempDir;									// 相対方向
//	USHORT			i;											// roop

	/* 前進ステップ数を初期化する */
	uc_goStep = 0;
 80165d2:	2300      	movs	r3, #0
 80165d4:	75fb      	strb	r3, [r7, #23]
	us_pt = 0;
 80165d6:	2300      	movs	r3, #0
 80165d8:	82bb      	strh	r3, [r7, #20]

	/* 迷路情報からコマンド作成 */
	while (1) {
		us_high = us_Cmap[uc_staY][uc_staX];
 80165da:	79ba      	ldrb	r2, [r7, #6]
 80165dc:	79fb      	ldrb	r3, [r7, #7]
 80165de:	49a4      	ldr	r1, [pc, #656]	@ (8016870 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80165e0:	0152      	lsls	r2, r2, #5
 80165e2:	4413      	add	r3, r2
 80165e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80165e8:	823b      	strh	r3, [r7, #16]

		if ((uc_staX == uc_endX) && (uc_staY == uc_endY)) {
 80165ea:	79fa      	ldrb	r2, [r7, #7]
 80165ec:	793b      	ldrb	r3, [r7, #4]
 80165ee:	429a      	cmp	r2, r3
 80165f0:	d105      	bne.n	80165fe <MAP_makeCmdList_dijkstra_modoki+0x4a>
 80165f2:	79ba      	ldrb	r2, [r7, #6]
 80165f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80165f8:	429a      	cmp	r2, r3
 80165fa:	f000 820b 	beq.w	8016a14 <MAP_makeCmdList_dijkstra_modoki+0x460>
			break;
		}
		
		if (en_staDir == NORTH) {
 80165fe:	797b      	ldrb	r3, [r7, #5]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d164      	bne.n	80166ce <MAP_makeCmdList_dijkstra_modoki+0x11a>
			if (((g_SysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_Cmap[uc_staY + 1][uc_staX] < us_high)) en_nowDir = NORTH;
 8016604:	79ba      	ldrb	r2, [r7, #6]
 8016606:	79fb      	ldrb	r3, [r7, #7]
 8016608:	499a      	ldr	r1, [pc, #616]	@ (8016874 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 801660a:	0152      	lsls	r2, r2, #5
 801660c:	440a      	add	r2, r1
 801660e:	4413      	add	r3, r2
 8016610:	781b      	ldrb	r3, [r3, #0]
 8016612:	f003 0311 	and.w	r3, r3, #17
 8016616:	2b10      	cmp	r3, #16
 8016618:	d10d      	bne.n	8016636 <MAP_makeCmdList_dijkstra_modoki+0x82>
 801661a:	79bb      	ldrb	r3, [r7, #6]
 801661c:	1c5a      	adds	r2, r3, #1
 801661e:	79fb      	ldrb	r3, [r7, #7]
 8016620:	4993      	ldr	r1, [pc, #588]	@ (8016870 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 8016622:	0152      	lsls	r2, r2, #5
 8016624:	4413      	add	r3, r2
 8016626:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801662a:	8a3a      	ldrh	r2, [r7, #16]
 801662c:	429a      	cmp	r2, r3
 801662e:	d902      	bls.n	8016636 <MAP_makeCmdList_dijkstra_modoki+0x82>
 8016630:	2300      	movs	r3, #0
 8016632:	74fb      	strb	r3, [r7, #19]
 8016634:	e188      	b.n	8016948 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_Cmap[uc_staY][uc_staX + 1] < us_high)) en_nowDir = EAST;
 8016636:	79ba      	ldrb	r2, [r7, #6]
 8016638:	79fb      	ldrb	r3, [r7, #7]
 801663a:	498e      	ldr	r1, [pc, #568]	@ (8016874 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 801663c:	0152      	lsls	r2, r2, #5
 801663e:	440a      	add	r2, r1
 8016640:	4413      	add	r3, r2
 8016642:	781b      	ldrb	r3, [r3, #0]
 8016644:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8016648:	2b20      	cmp	r3, #32
 801664a:	d10d      	bne.n	8016668 <MAP_makeCmdList_dijkstra_modoki+0xb4>
 801664c:	79ba      	ldrb	r2, [r7, #6]
 801664e:	79fb      	ldrb	r3, [r7, #7]
 8016650:	3301      	adds	r3, #1
 8016652:	4987      	ldr	r1, [pc, #540]	@ (8016870 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 8016654:	0152      	lsls	r2, r2, #5
 8016656:	4413      	add	r3, r2
 8016658:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801665c:	8a3a      	ldrh	r2, [r7, #16]
 801665e:	429a      	cmp	r2, r3
 8016660:	d902      	bls.n	8016668 <MAP_makeCmdList_dijkstra_modoki+0xb4>
 8016662:	2301      	movs	r3, #1
 8016664:	74fb      	strb	r3, [r7, #19]
 8016666:	e16f      	b.n	8016948 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_Cmap[uc_staY][uc_staX - 1] < us_high)) en_nowDir = WEST;
 8016668:	79ba      	ldrb	r2, [r7, #6]
 801666a:	79fb      	ldrb	r3, [r7, #7]
 801666c:	4981      	ldr	r1, [pc, #516]	@ (8016874 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 801666e:	0152      	lsls	r2, r2, #5
 8016670:	440a      	add	r2, r1
 8016672:	4413      	add	r3, r2
 8016674:	781b      	ldrb	r3, [r3, #0]
 8016676:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 801667a:	2b80      	cmp	r3, #128	@ 0x80
 801667c:	d10d      	bne.n	801669a <MAP_makeCmdList_dijkstra_modoki+0xe6>
 801667e:	79ba      	ldrb	r2, [r7, #6]
 8016680:	79fb      	ldrb	r3, [r7, #7]
 8016682:	3b01      	subs	r3, #1
 8016684:	497a      	ldr	r1, [pc, #488]	@ (8016870 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 8016686:	0152      	lsls	r2, r2, #5
 8016688:	4413      	add	r3, r2
 801668a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801668e:	8a3a      	ldrh	r2, [r7, #16]
 8016690:	429a      	cmp	r2, r3
 8016692:	d902      	bls.n	801669a <MAP_makeCmdList_dijkstra_modoki+0xe6>
 8016694:	2303      	movs	r3, #3
 8016696:	74fb      	strb	r3, [r7, #19]
 8016698:	e156      	b.n	8016948 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_Cmap[uc_staY - 1][uc_staX] < us_high)) en_nowDir = SOUTH;
 801669a:	79ba      	ldrb	r2, [r7, #6]
 801669c:	79fb      	ldrb	r3, [r7, #7]
 801669e:	4975      	ldr	r1, [pc, #468]	@ (8016874 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 80166a0:	0152      	lsls	r2, r2, #5
 80166a2:	440a      	add	r2, r1
 80166a4:	4413      	add	r3, r2
 80166a6:	781b      	ldrb	r3, [r3, #0]
 80166a8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80166ac:	2b40      	cmp	r3, #64	@ 0x40
 80166ae:	d10d      	bne.n	80166cc <MAP_makeCmdList_dijkstra_modoki+0x118>
 80166b0:	79bb      	ldrb	r3, [r7, #6]
 80166b2:	1e5a      	subs	r2, r3, #1
 80166b4:	79fb      	ldrb	r3, [r7, #7]
 80166b6:	496e      	ldr	r1, [pc, #440]	@ (8016870 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80166b8:	0152      	lsls	r2, r2, #5
 80166ba:	4413      	add	r3, r2
 80166bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80166c0:	8a3a      	ldrh	r2, [r7, #16]
 80166c2:	429a      	cmp	r2, r3
 80166c4:	d902      	bls.n	80166cc <MAP_makeCmdList_dijkstra_modoki+0x118>
 80166c6:	2302      	movs	r3, #2
 80166c8:	74fb      	strb	r3, [r7, #19]
 80166ca:	e13d      	b.n	8016948 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else   while (1);
 80166cc:	e7fe      	b.n	80166cc <MAP_makeCmdList_dijkstra_modoki+0x118>
		}
		else if (en_staDir == EAST) {
 80166ce:	797b      	ldrb	r3, [r7, #5]
 80166d0:	2b01      	cmp	r3, #1
 80166d2:	d164      	bne.n	801679e <MAP_makeCmdList_dijkstra_modoki+0x1ea>
			if (((g_SysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_Cmap[uc_staY][uc_staX + 1] < us_high)) en_nowDir = EAST;
 80166d4:	79ba      	ldrb	r2, [r7, #6]
 80166d6:	79fb      	ldrb	r3, [r7, #7]
 80166d8:	4966      	ldr	r1, [pc, #408]	@ (8016874 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 80166da:	0152      	lsls	r2, r2, #5
 80166dc:	440a      	add	r2, r1
 80166de:	4413      	add	r3, r2
 80166e0:	781b      	ldrb	r3, [r3, #0]
 80166e2:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80166e6:	2b20      	cmp	r3, #32
 80166e8:	d10d      	bne.n	8016706 <MAP_makeCmdList_dijkstra_modoki+0x152>
 80166ea:	79ba      	ldrb	r2, [r7, #6]
 80166ec:	79fb      	ldrb	r3, [r7, #7]
 80166ee:	3301      	adds	r3, #1
 80166f0:	495f      	ldr	r1, [pc, #380]	@ (8016870 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80166f2:	0152      	lsls	r2, r2, #5
 80166f4:	4413      	add	r3, r2
 80166f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80166fa:	8a3a      	ldrh	r2, [r7, #16]
 80166fc:	429a      	cmp	r2, r3
 80166fe:	d902      	bls.n	8016706 <MAP_makeCmdList_dijkstra_modoki+0x152>
 8016700:	2301      	movs	r3, #1
 8016702:	74fb      	strb	r3, [r7, #19]
 8016704:	e120      	b.n	8016948 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_Cmap[uc_staY + 1][uc_staX] < us_high)) en_nowDir = NORTH;
 8016706:	79ba      	ldrb	r2, [r7, #6]
 8016708:	79fb      	ldrb	r3, [r7, #7]
 801670a:	495a      	ldr	r1, [pc, #360]	@ (8016874 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 801670c:	0152      	lsls	r2, r2, #5
 801670e:	440a      	add	r2, r1
 8016710:	4413      	add	r3, r2
 8016712:	781b      	ldrb	r3, [r3, #0]
 8016714:	f003 0311 	and.w	r3, r3, #17
 8016718:	2b10      	cmp	r3, #16
 801671a:	d10d      	bne.n	8016738 <MAP_makeCmdList_dijkstra_modoki+0x184>
 801671c:	79bb      	ldrb	r3, [r7, #6]
 801671e:	1c5a      	adds	r2, r3, #1
 8016720:	79fb      	ldrb	r3, [r7, #7]
 8016722:	4953      	ldr	r1, [pc, #332]	@ (8016870 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 8016724:	0152      	lsls	r2, r2, #5
 8016726:	4413      	add	r3, r2
 8016728:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801672c:	8a3a      	ldrh	r2, [r7, #16]
 801672e:	429a      	cmp	r2, r3
 8016730:	d902      	bls.n	8016738 <MAP_makeCmdList_dijkstra_modoki+0x184>
 8016732:	2300      	movs	r3, #0
 8016734:	74fb      	strb	r3, [r7, #19]
 8016736:	e107      	b.n	8016948 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_Cmap[uc_staY - 1][uc_staX] < us_high)) en_nowDir = SOUTH;
 8016738:	79ba      	ldrb	r2, [r7, #6]
 801673a:	79fb      	ldrb	r3, [r7, #7]
 801673c:	494d      	ldr	r1, [pc, #308]	@ (8016874 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 801673e:	0152      	lsls	r2, r2, #5
 8016740:	440a      	add	r2, r1
 8016742:	4413      	add	r3, r2
 8016744:	781b      	ldrb	r3, [r3, #0]
 8016746:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801674a:	2b40      	cmp	r3, #64	@ 0x40
 801674c:	d10d      	bne.n	801676a <MAP_makeCmdList_dijkstra_modoki+0x1b6>
 801674e:	79bb      	ldrb	r3, [r7, #6]
 8016750:	1e5a      	subs	r2, r3, #1
 8016752:	79fb      	ldrb	r3, [r7, #7]
 8016754:	4946      	ldr	r1, [pc, #280]	@ (8016870 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 8016756:	0152      	lsls	r2, r2, #5
 8016758:	4413      	add	r3, r2
 801675a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801675e:	8a3a      	ldrh	r2, [r7, #16]
 8016760:	429a      	cmp	r2, r3
 8016762:	d902      	bls.n	801676a <MAP_makeCmdList_dijkstra_modoki+0x1b6>
 8016764:	2302      	movs	r3, #2
 8016766:	74fb      	strb	r3, [r7, #19]
 8016768:	e0ee      	b.n	8016948 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_Cmap[uc_staY][uc_staX - 1] < us_high)) en_nowDir = WEST;
 801676a:	79ba      	ldrb	r2, [r7, #6]
 801676c:	79fb      	ldrb	r3, [r7, #7]
 801676e:	4941      	ldr	r1, [pc, #260]	@ (8016874 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8016770:	0152      	lsls	r2, r2, #5
 8016772:	440a      	add	r2, r1
 8016774:	4413      	add	r3, r2
 8016776:	781b      	ldrb	r3, [r3, #0]
 8016778:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 801677c:	2b80      	cmp	r3, #128	@ 0x80
 801677e:	d10d      	bne.n	801679c <MAP_makeCmdList_dijkstra_modoki+0x1e8>
 8016780:	79ba      	ldrb	r2, [r7, #6]
 8016782:	79fb      	ldrb	r3, [r7, #7]
 8016784:	3b01      	subs	r3, #1
 8016786:	493a      	ldr	r1, [pc, #232]	@ (8016870 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 8016788:	0152      	lsls	r2, r2, #5
 801678a:	4413      	add	r3, r2
 801678c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016790:	8a3a      	ldrh	r2, [r7, #16]
 8016792:	429a      	cmp	r2, r3
 8016794:	d902      	bls.n	801679c <MAP_makeCmdList_dijkstra_modoki+0x1e8>
 8016796:	2303      	movs	r3, #3
 8016798:	74fb      	strb	r3, [r7, #19]
 801679a:	e0d5      	b.n	8016948 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else   while (1);
 801679c:	e7fe      	b.n	801679c <MAP_makeCmdList_dijkstra_modoki+0x1e8>
		}
		else if (en_staDir == SOUTH) {
 801679e:	797b      	ldrb	r3, [r7, #5]
 80167a0:	2b02      	cmp	r3, #2
 80167a2:	d169      	bne.n	8016878 <MAP_makeCmdList_dijkstra_modoki+0x2c4>
			if (((g_SysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_Cmap[uc_staY - 1][uc_staX] < us_high)) en_nowDir = SOUTH;
 80167a4:	79ba      	ldrb	r2, [r7, #6]
 80167a6:	79fb      	ldrb	r3, [r7, #7]
 80167a8:	4932      	ldr	r1, [pc, #200]	@ (8016874 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 80167aa:	0152      	lsls	r2, r2, #5
 80167ac:	440a      	add	r2, r1
 80167ae:	4413      	add	r3, r2
 80167b0:	781b      	ldrb	r3, [r3, #0]
 80167b2:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80167b6:	2b40      	cmp	r3, #64	@ 0x40
 80167b8:	d10d      	bne.n	80167d6 <MAP_makeCmdList_dijkstra_modoki+0x222>
 80167ba:	79bb      	ldrb	r3, [r7, #6]
 80167bc:	1e5a      	subs	r2, r3, #1
 80167be:	79fb      	ldrb	r3, [r7, #7]
 80167c0:	492b      	ldr	r1, [pc, #172]	@ (8016870 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80167c2:	0152      	lsls	r2, r2, #5
 80167c4:	4413      	add	r3, r2
 80167c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80167ca:	8a3a      	ldrh	r2, [r7, #16]
 80167cc:	429a      	cmp	r2, r3
 80167ce:	d902      	bls.n	80167d6 <MAP_makeCmdList_dijkstra_modoki+0x222>
 80167d0:	2302      	movs	r3, #2
 80167d2:	74fb      	strb	r3, [r7, #19]
 80167d4:	e0b8      	b.n	8016948 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_Cmap[uc_staY][uc_staX + 1] < us_high)) en_nowDir = EAST;
 80167d6:	79ba      	ldrb	r2, [r7, #6]
 80167d8:	79fb      	ldrb	r3, [r7, #7]
 80167da:	4926      	ldr	r1, [pc, #152]	@ (8016874 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 80167dc:	0152      	lsls	r2, r2, #5
 80167de:	440a      	add	r2, r1
 80167e0:	4413      	add	r3, r2
 80167e2:	781b      	ldrb	r3, [r3, #0]
 80167e4:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80167e8:	2b20      	cmp	r3, #32
 80167ea:	d10d      	bne.n	8016808 <MAP_makeCmdList_dijkstra_modoki+0x254>
 80167ec:	79ba      	ldrb	r2, [r7, #6]
 80167ee:	79fb      	ldrb	r3, [r7, #7]
 80167f0:	3301      	adds	r3, #1
 80167f2:	491f      	ldr	r1, [pc, #124]	@ (8016870 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80167f4:	0152      	lsls	r2, r2, #5
 80167f6:	4413      	add	r3, r2
 80167f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80167fc:	8a3a      	ldrh	r2, [r7, #16]
 80167fe:	429a      	cmp	r2, r3
 8016800:	d902      	bls.n	8016808 <MAP_makeCmdList_dijkstra_modoki+0x254>
 8016802:	2301      	movs	r3, #1
 8016804:	74fb      	strb	r3, [r7, #19]
 8016806:	e09f      	b.n	8016948 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_Cmap[uc_staY][uc_staX - 1] < us_high)) en_nowDir = WEST;
 8016808:	79ba      	ldrb	r2, [r7, #6]
 801680a:	79fb      	ldrb	r3, [r7, #7]
 801680c:	4919      	ldr	r1, [pc, #100]	@ (8016874 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 801680e:	0152      	lsls	r2, r2, #5
 8016810:	440a      	add	r2, r1
 8016812:	4413      	add	r3, r2
 8016814:	781b      	ldrb	r3, [r3, #0]
 8016816:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 801681a:	2b80      	cmp	r3, #128	@ 0x80
 801681c:	d10d      	bne.n	801683a <MAP_makeCmdList_dijkstra_modoki+0x286>
 801681e:	79ba      	ldrb	r2, [r7, #6]
 8016820:	79fb      	ldrb	r3, [r7, #7]
 8016822:	3b01      	subs	r3, #1
 8016824:	4912      	ldr	r1, [pc, #72]	@ (8016870 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 8016826:	0152      	lsls	r2, r2, #5
 8016828:	4413      	add	r3, r2
 801682a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801682e:	8a3a      	ldrh	r2, [r7, #16]
 8016830:	429a      	cmp	r2, r3
 8016832:	d902      	bls.n	801683a <MAP_makeCmdList_dijkstra_modoki+0x286>
 8016834:	2303      	movs	r3, #3
 8016836:	74fb      	strb	r3, [r7, #19]
 8016838:	e086      	b.n	8016948 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_Cmap[uc_staY + 1][uc_staX] < us_high)) en_nowDir = NORTH;
 801683a:	79ba      	ldrb	r2, [r7, #6]
 801683c:	79fb      	ldrb	r3, [r7, #7]
 801683e:	490d      	ldr	r1, [pc, #52]	@ (8016874 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8016840:	0152      	lsls	r2, r2, #5
 8016842:	440a      	add	r2, r1
 8016844:	4413      	add	r3, r2
 8016846:	781b      	ldrb	r3, [r3, #0]
 8016848:	f003 0311 	and.w	r3, r3, #17
 801684c:	2b10      	cmp	r3, #16
 801684e:	d10d      	bne.n	801686c <MAP_makeCmdList_dijkstra_modoki+0x2b8>
 8016850:	79bb      	ldrb	r3, [r7, #6]
 8016852:	1c5a      	adds	r2, r3, #1
 8016854:	79fb      	ldrb	r3, [r7, #7]
 8016856:	4906      	ldr	r1, [pc, #24]	@ (8016870 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 8016858:	0152      	lsls	r2, r2, #5
 801685a:	4413      	add	r3, r2
 801685c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016860:	8a3a      	ldrh	r2, [r7, #16]
 8016862:	429a      	cmp	r2, r3
 8016864:	d902      	bls.n	801686c <MAP_makeCmdList_dijkstra_modoki+0x2b8>
 8016866:	2300      	movs	r3, #0
 8016868:	74fb      	strb	r3, [r7, #19]
 801686a:	e06d      	b.n	8016948 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else   while (1);
 801686c:	e7fe      	b.n	801686c <MAP_makeCmdList_dijkstra_modoki+0x2b8>
 801686e:	bf00      	nop
 8016870:	2001ada0 	.word	0x2001ada0
 8016874:	2001b5a0 	.word	0x2001b5a0
		}
		else if (en_staDir == WEST) {
 8016878:	797b      	ldrb	r3, [r7, #5]
 801687a:	2b03      	cmp	r3, #3
 801687c:	d164      	bne.n	8016948 <MAP_makeCmdList_dijkstra_modoki+0x394>
			if (((g_SysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_Cmap[uc_staY][uc_staX - 1] < us_high)) en_nowDir = WEST;
 801687e:	79ba      	ldrb	r2, [r7, #6]
 8016880:	79fb      	ldrb	r3, [r7, #7]
 8016882:	4974      	ldr	r1, [pc, #464]	@ (8016a54 <MAP_makeCmdList_dijkstra_modoki+0x4a0>)
 8016884:	0152      	lsls	r2, r2, #5
 8016886:	440a      	add	r2, r1
 8016888:	4413      	add	r3, r2
 801688a:	781b      	ldrb	r3, [r3, #0]
 801688c:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 8016890:	2b80      	cmp	r3, #128	@ 0x80
 8016892:	d10d      	bne.n	80168b0 <MAP_makeCmdList_dijkstra_modoki+0x2fc>
 8016894:	79ba      	ldrb	r2, [r7, #6]
 8016896:	79fb      	ldrb	r3, [r7, #7]
 8016898:	3b01      	subs	r3, #1
 801689a:	496f      	ldr	r1, [pc, #444]	@ (8016a58 <MAP_makeCmdList_dijkstra_modoki+0x4a4>)
 801689c:	0152      	lsls	r2, r2, #5
 801689e:	4413      	add	r3, r2
 80168a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80168a4:	8a3a      	ldrh	r2, [r7, #16]
 80168a6:	429a      	cmp	r2, r3
 80168a8:	d902      	bls.n	80168b0 <MAP_makeCmdList_dijkstra_modoki+0x2fc>
 80168aa:	2303      	movs	r3, #3
 80168ac:	74fb      	strb	r3, [r7, #19]
 80168ae:	e04b      	b.n	8016948 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_Cmap[uc_staY + 1][uc_staX] < us_high)) en_nowDir = NORTH;
 80168b0:	79ba      	ldrb	r2, [r7, #6]
 80168b2:	79fb      	ldrb	r3, [r7, #7]
 80168b4:	4967      	ldr	r1, [pc, #412]	@ (8016a54 <MAP_makeCmdList_dijkstra_modoki+0x4a0>)
 80168b6:	0152      	lsls	r2, r2, #5
 80168b8:	440a      	add	r2, r1
 80168ba:	4413      	add	r3, r2
 80168bc:	781b      	ldrb	r3, [r3, #0]
 80168be:	f003 0311 	and.w	r3, r3, #17
 80168c2:	2b10      	cmp	r3, #16
 80168c4:	d10d      	bne.n	80168e2 <MAP_makeCmdList_dijkstra_modoki+0x32e>
 80168c6:	79bb      	ldrb	r3, [r7, #6]
 80168c8:	1c5a      	adds	r2, r3, #1
 80168ca:	79fb      	ldrb	r3, [r7, #7]
 80168cc:	4962      	ldr	r1, [pc, #392]	@ (8016a58 <MAP_makeCmdList_dijkstra_modoki+0x4a4>)
 80168ce:	0152      	lsls	r2, r2, #5
 80168d0:	4413      	add	r3, r2
 80168d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80168d6:	8a3a      	ldrh	r2, [r7, #16]
 80168d8:	429a      	cmp	r2, r3
 80168da:	d902      	bls.n	80168e2 <MAP_makeCmdList_dijkstra_modoki+0x32e>
 80168dc:	2300      	movs	r3, #0
 80168de:	74fb      	strb	r3, [r7, #19]
 80168e0:	e032      	b.n	8016948 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_Cmap[uc_staY - 1][uc_staX] < us_high)) en_nowDir = SOUTH;
 80168e2:	79ba      	ldrb	r2, [r7, #6]
 80168e4:	79fb      	ldrb	r3, [r7, #7]
 80168e6:	495b      	ldr	r1, [pc, #364]	@ (8016a54 <MAP_makeCmdList_dijkstra_modoki+0x4a0>)
 80168e8:	0152      	lsls	r2, r2, #5
 80168ea:	440a      	add	r2, r1
 80168ec:	4413      	add	r3, r2
 80168ee:	781b      	ldrb	r3, [r3, #0]
 80168f0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80168f4:	2b40      	cmp	r3, #64	@ 0x40
 80168f6:	d10d      	bne.n	8016914 <MAP_makeCmdList_dijkstra_modoki+0x360>
 80168f8:	79bb      	ldrb	r3, [r7, #6]
 80168fa:	1e5a      	subs	r2, r3, #1
 80168fc:	79fb      	ldrb	r3, [r7, #7]
 80168fe:	4956      	ldr	r1, [pc, #344]	@ (8016a58 <MAP_makeCmdList_dijkstra_modoki+0x4a4>)
 8016900:	0152      	lsls	r2, r2, #5
 8016902:	4413      	add	r3, r2
 8016904:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016908:	8a3a      	ldrh	r2, [r7, #16]
 801690a:	429a      	cmp	r2, r3
 801690c:	d902      	bls.n	8016914 <MAP_makeCmdList_dijkstra_modoki+0x360>
 801690e:	2302      	movs	r3, #2
 8016910:	74fb      	strb	r3, [r7, #19]
 8016912:	e019      	b.n	8016948 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_SysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_Cmap[uc_staY][uc_staX + 1] < us_high)) en_nowDir = EAST;
 8016914:	79ba      	ldrb	r2, [r7, #6]
 8016916:	79fb      	ldrb	r3, [r7, #7]
 8016918:	494e      	ldr	r1, [pc, #312]	@ (8016a54 <MAP_makeCmdList_dijkstra_modoki+0x4a0>)
 801691a:	0152      	lsls	r2, r2, #5
 801691c:	440a      	add	r2, r1
 801691e:	4413      	add	r3, r2
 8016920:	781b      	ldrb	r3, [r3, #0]
 8016922:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8016926:	2b20      	cmp	r3, #32
 8016928:	d10d      	bne.n	8016946 <MAP_makeCmdList_dijkstra_modoki+0x392>
 801692a:	79ba      	ldrb	r2, [r7, #6]
 801692c:	79fb      	ldrb	r3, [r7, #7]
 801692e:	3301      	adds	r3, #1
 8016930:	4949      	ldr	r1, [pc, #292]	@ (8016a58 <MAP_makeCmdList_dijkstra_modoki+0x4a4>)
 8016932:	0152      	lsls	r2, r2, #5
 8016934:	4413      	add	r3, r2
 8016936:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801693a:	8a3a      	ldrh	r2, [r7, #16]
 801693c:	429a      	cmp	r2, r3
 801693e:	d902      	bls.n	8016946 <MAP_makeCmdList_dijkstra_modoki+0x392>
 8016940:	2301      	movs	r3, #1
 8016942:	74fb      	strb	r3, [r7, #19]
 8016944:	e000      	b.n	8016948 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else   while (1);
 8016946:	e7fe      	b.n	8016946 <MAP_makeCmdList_dijkstra_modoki+0x392>
		}

		en_tempDir = (enMAP_HEAD_DIR)((en_nowDir - en_staDir) & (enMAP_HEAD_DIR)3);		// 方向更新
 8016948:	7cfa      	ldrb	r2, [r7, #19]
 801694a:	797b      	ldrb	r3, [r7, #5]
 801694c:	1ad3      	subs	r3, r2, r3
 801694e:	b2db      	uxtb	r3, r3
 8016950:	f003 0303 	and.w	r3, r3, #3
 8016954:	73fb      	strb	r3, [r7, #15]
		en_staDir = en_nowDir;
 8016956:	7cfb      	ldrb	r3, [r7, #19]
 8016958:	717b      	strb	r3, [r7, #5]

		if (en_tempDir == NORTH) {
 801695a:	7bfb      	ldrb	r3, [r7, #15]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d103      	bne.n	8016968 <MAP_makeCmdList_dijkstra_modoki+0x3b4>
			uc_goStep = uc_goStep + 2;
 8016960:	7dfb      	ldrb	r3, [r7, #23]
 8016962:	3302      	adds	r3, #2
 8016964:	75fb      	strb	r3, [r7, #23]
 8016966:	e037      	b.n	80169d8 <MAP_makeCmdList_dijkstra_modoki+0x424>
		}
		else if (en_tempDir == EAST) {
 8016968:	7bfb      	ldrb	r3, [r7, #15]
 801696a:	2b01      	cmp	r3, #1
 801696c:	d110      	bne.n	8016990 <MAP_makeCmdList_dijkstra_modoki+0x3dc>
			dcom[us_pt] = uc_goStep;
 801696e:	8abb      	ldrh	r3, [r7, #20]
 8016970:	493a      	ldr	r1, [pc, #232]	@ (8016a5c <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8016972:	7dfa      	ldrb	r2, [r7, #23]
 8016974:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R90;
 8016976:	8abb      	ldrh	r3, [r7, #20]
 8016978:	3301      	adds	r3, #1
 801697a:	82bb      	strh	r3, [r7, #20]
 801697c:	8abb      	ldrh	r3, [r7, #20]
 801697e:	4a37      	ldr	r2, [pc, #220]	@ (8016a5c <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8016980:	2148      	movs	r1, #72	@ 0x48
 8016982:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 8016984:	2302      	movs	r3, #2
 8016986:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 8016988:	8abb      	ldrh	r3, [r7, #20]
 801698a:	3301      	adds	r3, #1
 801698c:	82bb      	strh	r3, [r7, #20]
 801698e:	e023      	b.n	80169d8 <MAP_makeCmdList_dijkstra_modoki+0x424>
		}
		else if (en_tempDir == WEST) {
 8016990:	7bfb      	ldrb	r3, [r7, #15]
 8016992:	2b03      	cmp	r3, #3
 8016994:	d110      	bne.n	80169b8 <MAP_makeCmdList_dijkstra_modoki+0x404>
			dcom[us_pt] = uc_goStep;
 8016996:	8abb      	ldrh	r3, [r7, #20]
 8016998:	4930      	ldr	r1, [pc, #192]	@ (8016a5c <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 801699a:	7dfa      	ldrb	r2, [r7, #23]
 801699c:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = L90;
 801699e:	8abb      	ldrh	r3, [r7, #20]
 80169a0:	3301      	adds	r3, #1
 80169a2:	82bb      	strh	r3, [r7, #20]
 80169a4:	8abb      	ldrh	r3, [r7, #20]
 80169a6:	4a2d      	ldr	r2, [pc, #180]	@ (8016a5c <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 80169a8:	2149      	movs	r1, #73	@ 0x49
 80169aa:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 80169ac:	2302      	movs	r3, #2
 80169ae:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 80169b0:	8abb      	ldrh	r3, [r7, #20]
 80169b2:	3301      	adds	r3, #1
 80169b4:	82bb      	strh	r3, [r7, #20]
 80169b6:	e00f      	b.n	80169d8 <MAP_makeCmdList_dijkstra_modoki+0x424>
		}
		else {
			dcom[us_pt] = uc_goStep;
 80169b8:	8abb      	ldrh	r3, [r7, #20]
 80169ba:	4928      	ldr	r1, [pc, #160]	@ (8016a5c <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 80169bc:	7dfa      	ldrb	r2, [r7, #23]
 80169be:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R180;
 80169c0:	8abb      	ldrh	r3, [r7, #20]
 80169c2:	3301      	adds	r3, #1
 80169c4:	82bb      	strh	r3, [r7, #20]
 80169c6:	8abb      	ldrh	r3, [r7, #20]
 80169c8:	4a24      	ldr	r2, [pc, #144]	@ (8016a5c <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 80169ca:	214a      	movs	r1, #74	@ 0x4a
 80169cc:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 80169ce:	2302      	movs	r3, #2
 80169d0:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 80169d2:	8abb      	ldrh	r3, [r7, #20]
 80169d4:	3301      	adds	r3, #1
 80169d6:	82bb      	strh	r3, [r7, #20]
		}

		if (en_nowDir == NORTH) uc_staY = uc_staY + 1;
 80169d8:	7cfb      	ldrb	r3, [r7, #19]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d103      	bne.n	80169e6 <MAP_makeCmdList_dijkstra_modoki+0x432>
 80169de:	79bb      	ldrb	r3, [r7, #6]
 80169e0:	3301      	adds	r3, #1
 80169e2:	71bb      	strb	r3, [r7, #6]
 80169e4:	e013      	b.n	8016a0e <MAP_makeCmdList_dijkstra_modoki+0x45a>
		else if (en_nowDir == EAST) uc_staX = uc_staX + 1;
 80169e6:	7cfb      	ldrb	r3, [r7, #19]
 80169e8:	2b01      	cmp	r3, #1
 80169ea:	d103      	bne.n	80169f4 <MAP_makeCmdList_dijkstra_modoki+0x440>
 80169ec:	79fb      	ldrb	r3, [r7, #7]
 80169ee:	3301      	adds	r3, #1
 80169f0:	71fb      	strb	r3, [r7, #7]
 80169f2:	e00c      	b.n	8016a0e <MAP_makeCmdList_dijkstra_modoki+0x45a>
		else if (en_nowDir == SOUTH) uc_staY = uc_staY - 1;
 80169f4:	7cfb      	ldrb	r3, [r7, #19]
 80169f6:	2b02      	cmp	r3, #2
 80169f8:	d103      	bne.n	8016a02 <MAP_makeCmdList_dijkstra_modoki+0x44e>
 80169fa:	79bb      	ldrb	r3, [r7, #6]
 80169fc:	3b01      	subs	r3, #1
 80169fe:	71bb      	strb	r3, [r7, #6]
 8016a00:	e005      	b.n	8016a0e <MAP_makeCmdList_dijkstra_modoki+0x45a>
		else if (en_nowDir == WEST) uc_staX = uc_staX - 1;
 8016a02:	7cfb      	ldrb	r3, [r7, #19]
 8016a04:	2b03      	cmp	r3, #3
 8016a06:	d102      	bne.n	8016a0e <MAP_makeCmdList_dijkstra_modoki+0x45a>
 8016a08:	79fb      	ldrb	r3, [r7, #7]
 8016a0a:	3b01      	subs	r3, #1
 8016a0c:	71fb      	strb	r3, [r7, #7]

		en_staDir = en_nowDir;
 8016a0e:	7cfb      	ldrb	r3, [r7, #19]
 8016a10:	717b      	strb	r3, [r7, #5]
		us_high = us_Cmap[uc_staY][uc_staX];
 8016a12:	e5e2      	b.n	80165da <MAP_makeCmdList_dijkstra_modoki+0x26>
			break;
 8016a14:	bf00      	nop
*/
//		if (us_Cmap[uc_staY][uc_staX] == 0) break;
	}

	/* 超地信旋回用のコマンドリスト作成 */
	dcom[us_pt] = uc_goStep;
 8016a16:	8abb      	ldrh	r3, [r7, #20]
 8016a18:	4910      	ldr	r1, [pc, #64]	@ (8016a5c <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8016a1a:	7dfa      	ldrb	r2, [r7, #23]
 8016a1c:	54ca      	strb	r2, [r1, r3]
	dcom[++us_pt] = STOP;
 8016a1e:	8abb      	ldrh	r3, [r7, #20]
 8016a20:	3301      	adds	r3, #1
 8016a22:	82bb      	strh	r3, [r7, #20]
 8016a24:	8abb      	ldrh	r3, [r7, #20]
 8016a26:	4a0d      	ldr	r2, [pc, #52]	@ (8016a5c <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8016a28:	2100      	movs	r1, #0
 8016a2a:	54d1      	strb	r1, [r2, r3]
	dcom[++us_pt] = CEND;
 8016a2c:	8abb      	ldrh	r3, [r7, #20]
 8016a2e:	3301      	adds	r3, #1
 8016a30:	82bb      	strh	r3, [r7, #20]
 8016a32:	8abb      	ldrh	r3, [r7, #20]
 8016a34:	4a09      	ldr	r2, [pc, #36]	@ (8016a5c <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8016a36:	21fa      	movs	r1, #250	@ 0xfa
 8016a38:	54d1      	strb	r1, [r2, r3]
	us_totalCmd = us_pt + 1;			// コマンド総数
 8016a3a:	8abb      	ldrh	r3, [r7, #20]
 8016a3c:	3301      	adds	r3, #1
 8016a3e:	b29a      	uxth	r2, r3
 8016a40:	4b07      	ldr	r3, [pc, #28]	@ (8016a60 <MAP_makeCmdList_dijkstra_modoki+0x4ac>)
 8016a42:	801a      	strh	r2, [r3, #0]


	/* 最終的に向いている方向 */
	*en_endDir = en_staDir;
 8016a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a46:	797a      	ldrb	r2, [r7, #5]
 8016a48:	701a      	strb	r2, [r3, #0]

}
 8016a4a:	bf00      	nop
 8016a4c:	3718      	adds	r7, #24
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bc90      	pop	{r4, r7}
 8016a52:	4770      	bx	lr
 8016a54:	2001b5a0 	.word	0x2001b5a0
 8016a58:	2001ada0 	.word	0x2001ada0
 8016a5c:	20017c48 	.word	0x20017c48
 8016a60:	2001ac48 	.word	0x2001ac48

08016a64 <FLASH_Lock>:
{
 8016a64:	b480      	push	{r7}
 8016a66:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8016a68:	4b05      	ldr	r3, [pc, #20]	@ (8016a80 <FLASH_Lock+0x1c>)
 8016a6a:	695b      	ldr	r3, [r3, #20]
 8016a6c:	4a04      	ldr	r2, [pc, #16]	@ (8016a80 <FLASH_Lock+0x1c>)
 8016a6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8016a72:	6153      	str	r3, [r2, #20]
}
 8016a74:	bf00      	nop
 8016a76:	46bd      	mov	sp, r7
 8016a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7c:	4770      	bx	lr
 8016a7e:	bf00      	nop
 8016a80:	40022000 	.word	0x40022000

08016a84 <FLASH_Unlock>:
{
 8016a84:	b480      	push	{r7}
 8016a86:	af00      	add	r7, sp, #0
	FLASH->KEYR = FLASH_KEY1;
 8016a88:	4b05      	ldr	r3, [pc, #20]	@ (8016aa0 <FLASH_Unlock+0x1c>)
 8016a8a:	4a06      	ldr	r2, [pc, #24]	@ (8016aa4 <FLASH_Unlock+0x20>)
 8016a8c:	609a      	str	r2, [r3, #8]
	FLASH->KEYR = FLASH_KEY2;
 8016a8e:	4b04      	ldr	r3, [pc, #16]	@ (8016aa0 <FLASH_Unlock+0x1c>)
 8016a90:	4a05      	ldr	r2, [pc, #20]	@ (8016aa8 <FLASH_Unlock+0x24>)
 8016a92:	609a      	str	r2, [r3, #8]
}
 8016a94:	bf00      	nop
 8016a96:	46bd      	mov	sp, r7
 8016a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9c:	4770      	bx	lr
 8016a9e:	bf00      	nop
 8016aa0:	40022000 	.word	0x40022000
 8016aa4:	45670123 	.word	0x45670123
 8016aa8:	cdef89ab 	.word	0xcdef89ab

08016aac <Map_Write>:


#include "search/map_flash.h"

void Map_Write(void)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b082      	sub	sp, #8
 8016ab0:	af00      	add	r7, sp, #0
	uint64_t *map_add;
	map_add = (uint64_t *)g_SysMap;
 8016ab2:	4b06      	ldr	r3, [pc, #24]	@ (8016acc <Map_Write+0x20>)
 8016ab4:	607b      	str	r3, [r7, #4]
	
	//DataFlashイレース
//    FLASH_Erase(0x7F);  //reg127
	//マップデータをDataFlashに書き込む
    FLASH_WriteData(0x7F,(uint32_t)sta_add_127, map_add, 32*32);
 8016ab6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016aba:	687a      	ldr	r2, [r7, #4]
 8016abc:	4904      	ldr	r1, [pc, #16]	@ (8016ad0 <Map_Write+0x24>)
 8016abe:	207f      	movs	r0, #127	@ 0x7f
 8016ac0:	f7eb f848 	bl	8001b54 <FLASH_WriteData>
}
 8016ac4:	bf00      	nop
 8016ac6:	3708      	adds	r7, #8
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	bd80      	pop	{r7, pc}
 8016acc:	2001b5a0 	.word	0x2001b5a0
 8016ad0:	0807f800 	.word	0x0807f800

08016ad4 <Map_Copy>:

void Map_Copy(void)
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b084      	sub	sp, #16
 8016ad8:	af00      	add	r7, sp, #0
    uint64_t *map_add;
    map_add = (uint64_t *)&g_SysMap;
 8016ada:	4b0f      	ldr	r3, [pc, #60]	@ (8016b18 <Map_Copy+0x44>)
 8016adc:	60fb      	str	r3, [r7, #12]
    uint32_t read_address = sta_add_127;
 8016ade:	4b0f      	ldr	r3, [pc, #60]	@ (8016b1c <Map_Copy+0x48>)
 8016ae0:	60bb      	str	r3, [r7, #8]

    for (uint16_t i = 0;i<MAP_X_SIZE*MAP_Y_SIZE;i += 8){
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	80fb      	strh	r3, [r7, #6]
 8016ae6:	e00d      	b.n	8016b04 <Map_Copy+0x30>
	    FLASH_ReadData(read_address, map_add, 8);
 8016ae8:	2208      	movs	r2, #8
 8016aea:	68f9      	ldr	r1, [r7, #12]
 8016aec:	68b8      	ldr	r0, [r7, #8]
 8016aee:	f7eb f857 	bl	8001ba0 <FLASH_ReadData>
	    read_address +=8;
 8016af2:	68bb      	ldr	r3, [r7, #8]
 8016af4:	3308      	adds	r3, #8
 8016af6:	60bb      	str	r3, [r7, #8]
	    map_add++;
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	3308      	adds	r3, #8
 8016afc:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0;i<MAP_X_SIZE*MAP_Y_SIZE;i += 8){
 8016afe:	88fb      	ldrh	r3, [r7, #6]
 8016b00:	3308      	adds	r3, #8
 8016b02:	80fb      	strh	r3, [r7, #6]
 8016b04:	88fb      	ldrh	r3, [r7, #6]
 8016b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016b0a:	d3ed      	bcc.n	8016ae8 <Map_Copy+0x14>
    }
}
 8016b0c:	bf00      	nop
 8016b0e:	bf00      	nop
 8016b10:	3710      	adds	r7, #16
 8016b12:	46bd      	mov	sp, r7
 8016b14:	bd80      	pop	{r7, pc}
 8016b16:	bf00      	nop
 8016b18:	2001b5a0 	.word	0x2001b5a0
 8016b1c:	0807f800 	.word	0x0807f800

08016b20 <Map_Erase>:

void Map_Erase(void)
{
 8016b20:	b580      	push	{r7, lr}
 8016b22:	af00      	add	r7, sp, #0
	FLASH_Unlock();
 8016b24:	f7ff ffae 	bl	8016a84 <FLASH_Unlock>
	FLASH_Erase(0x7F);
 8016b28:	207f      	movs	r0, #127	@ 0x7f
 8016b2a:	f7ea ffa7 	bl	8001a7c <FLASH_Erase>
	FLASH_Lock();
 8016b2e:	f7ff ff99 	bl	8016a64 <FLASH_Lock>
}
 8016b32:	bf00      	nop
 8016b34:	bd80      	pop	{r7, pc}
	...

08016b38 <Is_Known_Accel>:
uint8_t		g_MapDirection[MAP_Y_SIZE][MAP_X_SIZE];			///< 迷路情報


bool			SearchFlag;

bool Is_Known_Accel(void){
 8016b38:	b480      	push	{r7}
 8016b3a:	af00      	add	r7, sp, #0
	return st_Known.bl_known;
 8016b3c:	4b03      	ldr	r3, [pc, #12]	@ (8016b4c <Is_Known_Accel+0x14>)
 8016b3e:	785b      	ldrb	r3, [r3, #1]
}
 8016b40:	4618      	mov	r0, r3
 8016b42:	46bd      	mov	sp, r7
 8016b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b48:	4770      	bx	lr
 8016b4a:	bf00      	nop
 8016b4c:	2001ad98 	.word	0x2001ad98

08016b50 <MAP_init>:

void MAP_init( void )
{
 8016b50:	b580      	push	{r7, lr}
 8016b52:	af00      	add	r7, sp, #0
//	uint8_t uc_dummy[ MAP_Y_SIZE ][ MAP_X_SIZE ];			// 迷路データ

	/* 座標、向き、迷路情報を初期化 */
	en_Head		= NORTH;
 8016b54:	4b0b      	ldr	r3, [pc, #44]	@ (8016b84 <MAP_init+0x34>)
 8016b56:	2200      	movs	r2, #0
 8016b58:	701a      	strb	r2, [r3, #0]
	mx		= 0;
 8016b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8016b88 <MAP_init+0x38>)
 8016b5c:	2200      	movs	r2, #0
 8016b5e:	701a      	strb	r2, [r3, #0]
	my		= 0;
 8016b60:	4b0a      	ldr	r3, [pc, #40]	@ (8016b8c <MAP_init+0x3c>)
 8016b62:	2200      	movs	r2, #0
 8016b64:	701a      	strb	r2, [r3, #0]
	MAP_clearMap();
 8016b66:	f000 f919 	bl	8016d9c <MAP_clearMap>

	front_wall_miss = FALSE;
 8016b6a:	4b09      	ldr	r3, [pc, #36]	@ (8016b90 <MAP_init+0x40>)
 8016b6c:	2200      	movs	r2, #0
 8016b6e:	701a      	strb	r2, [r3, #0]
	
	/* 走行用のパラメータ */
	f_MoveBackDist = 0;
 8016b70:	4b08      	ldr	r3, [pc, #32]	@ (8016b94 <MAP_init+0x44>)
 8016b72:	f04f 0200 	mov.w	r2, #0
 8016b76:	601a      	str	r2, [r3, #0]
	uc_SlaCnt = 0;
 8016b78:	4b07      	ldr	r3, [pc, #28]	@ (8016b98 <MAP_init+0x48>)
 8016b7a:	2200      	movs	r2, #0
 8016b7c:	701a      	strb	r2, [r3, #0]

}
 8016b7e:	bf00      	nop
 8016b80:	bd80      	pop	{r7, pc}
 8016b82:	bf00      	nop
 8016b84:	2001ad8a 	.word	0x2001ad8a
 8016b88:	2001ad8c 	.word	0x2001ad8c
 8016b8c:	2001ad8b 	.word	0x2001ad8b
 8016b90:	2001ad9b 	.word	0x2001ad9b
 8016b94:	2001ad90 	.word	0x2001ad90
 8016b98:	2001ad94 	.word	0x2001ad94

08016b9c <MAP_Goal_init>:

void MAP_Goal_init( void )
{
 8016b9c:	b480      	push	{r7}
 8016b9e:	af00      	add	r7, sp, #0
	GOAL_MAP_X = GOAL_MAP_X_DEF;
 8016ba0:	4b05      	ldr	r3, [pc, #20]	@ (8016bb8 <MAP_Goal_init+0x1c>)
 8016ba2:	2214      	movs	r2, #20
 8016ba4:	701a      	strb	r2, [r3, #0]
	GOAL_MAP_Y = GOAL_MAP_Y_DEF;
 8016ba6:	4b05      	ldr	r3, [pc, #20]	@ (8016bbc <MAP_Goal_init+0x20>)
 8016ba8:	2209      	movs	r2, #9
 8016baa:	701a      	strb	r2, [r3, #0]
}
 8016bac:	bf00      	nop
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb4:	4770      	bx	lr
 8016bb6:	bf00      	nop
 8016bb8:	2001ad95 	.word	0x2001ad95
 8016bbc:	2001ad96 	.word	0x2001ad96

08016bc0 <MAP_setPos>:

//	Storage_Clear( sizeof(g_SysMap), ADR_MAP );			// データセーブ
}

void MAP_setPos( uint8_t uc_x, uint8_t uc_y, enMAP_HEAD_DIR en_dir )
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b082      	sub	sp, #8
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	71fb      	strb	r3, [r7, #7]
 8016bca:	460b      	mov	r3, r1
 8016bcc:	71bb      	strb	r3, [r7, #6]
 8016bce:	4613      	mov	r3, r2
 8016bd0:	717b      	strb	r3, [r7, #5]
	mx		= uc_x;
 8016bd2:	4a09      	ldr	r2, [pc, #36]	@ (8016bf8 <MAP_setPos+0x38>)
 8016bd4:	79fb      	ldrb	r3, [r7, #7]
 8016bd6:	7013      	strb	r3, [r2, #0]
	my		= uc_y;
 8016bd8:	4a08      	ldr	r2, [pc, #32]	@ (8016bfc <MAP_setPos+0x3c>)
 8016bda:	79bb      	ldrb	r3, [r7, #6]
 8016bdc:	7013      	strb	r3, [r2, #0]
	en_Head		= en_dir;
 8016bde:	4a08      	ldr	r2, [pc, #32]	@ (8016c00 <MAP_setPos+0x40>)
 8016be0:	797b      	ldrb	r3, [r7, #5]
 8016be2:	7013      	strb	r3, [r2, #0]
	
	MAP_setCmdPos( uc_x, uc_y, en_dir );
 8016be4:	797a      	ldrb	r2, [r7, #5]
 8016be6:	79b9      	ldrb	r1, [r7, #6]
 8016be8:	79fb      	ldrb	r3, [r7, #7]
 8016bea:	4618      	mov	r0, r3
 8016bec:	f7fd fada 	bl	80141a4 <MAP_setCmdPos>

}
 8016bf0:	bf00      	nop
 8016bf2:	3708      	adds	r7, #8
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	bd80      	pop	{r7, pc}
 8016bf8:	2001ad8c 	.word	0x2001ad8c
 8016bfc:	2001ad8b 	.word	0x2001ad8b
 8016c00:	2001ad8a 	.word	0x2001ad8a

08016c04 <MAP_showLog>:

void MAP_showLog( void )
{
 8016c04:	b580      	push	{r7, lr}
 8016c06:	b082      	sub	sp, #8
 8016c08:	af00      	add	r7, sp, #0
	uint8_t	c_data;
	
	/* ---------- */
	/*  通常迷路  */
	/* ---------- */
	printf("\n\r  /* ---------- */   ");
 8016c0a:	4857      	ldr	r0, [pc, #348]	@ (8016d68 <MAP_showLog+0x164>)
 8016c0c:	f007 f88e 	bl	801dd2c <iprintf>
	printf("\n\r  /*  通常迷路  */   ");
 8016c10:	4856      	ldr	r0, [pc, #344]	@ (8016d6c <MAP_showLog+0x168>)
 8016c12:	f007 f88b 	bl	801dd2c <iprintf>
	printf("\n\r  /* ---------- */   ");
 8016c16:	4854      	ldr	r0, [pc, #336]	@ (8016d68 <MAP_showLog+0x164>)
 8016c18:	f007 f888 	bl	801dd2c <iprintf>

	printf("\n\r     ");
 8016c1c:	4854      	ldr	r0, [pc, #336]	@ (8016d70 <MAP_showLog+0x16c>)
 8016c1e:	f007 f885 	bl	801dd2c <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 8016c22:	2300      	movs	r3, #0
 8016c24:	80fb      	strh	r3, [r7, #6]
 8016c26:	e008      	b.n	8016c3a <MAP_showLog+0x36>
		printf("._");
 8016c28:	4852      	ldr	r0, [pc, #328]	@ (8016d74 <MAP_showLog+0x170>)
 8016c2a:	f007 f87f 	bl	801dd2c <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 8016c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016c32:	b29b      	uxth	r3, r3
 8016c34:	3301      	adds	r3, #1
 8016c36:	b29b      	uxth	r3, r3
 8016c38:	80fb      	strh	r3, [r7, #6]
 8016c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016c3e:	2b1f      	cmp	r3, #31
 8016c40:	ddf2      	ble.n	8016c28 <MAP_showLog+0x24>
	}
	printf(".\n\r");
 8016c42:	484d      	ldr	r0, [pc, #308]	@ (8016d78 <MAP_showLog+0x174>)
 8016c44:	f007 f872 	bl	801dd2c <iprintf>
	
	for( y=MAP_Y_SIZE-1; y>-1; y-- ){
 8016c48:	231f      	movs	r3, #31
 8016c4a:	80bb      	strh	r3, [r7, #4]
 8016c4c:	e05f      	b.n	8016d0e <MAP_showLog+0x10a>
		
		printf("   %2d",y);
 8016c4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8016c52:	4619      	mov	r1, r3
 8016c54:	4849      	ldr	r0, [pc, #292]	@ (8016d7c <MAP_showLog+0x178>)
 8016c56:	f007 f869 	bl	801dd2c <iprintf>
		for( x=0; x<MAP_X_SIZE; x++){
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	80fb      	strh	r3, [r7, #6]
 8016c5e:	e027      	b.n	8016cb0 <MAP_showLog+0xac>
			c_data = (uint8_t)g_SysMap[y][x];
 8016c60:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8016c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016c68:	4945      	ldr	r1, [pc, #276]	@ (8016d80 <MAP_showLog+0x17c>)
 8016c6a:	0152      	lsls	r2, r2, #5
 8016c6c:	440a      	add	r2, r1
 8016c6e:	4413      	add	r3, r2
 8016c70:	781b      	ldrb	r3, [r3, #0]
 8016c72:	70fb      	strb	r3, [r7, #3]
			if ( ( c_data & 0x08 ) == 0 ){
 8016c74:	78fb      	ldrb	r3, [r7, #3]
 8016c76:	f003 0308 	and.w	r3, r3, #8
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d103      	bne.n	8016c86 <MAP_showLog+0x82>
				printf(".");
 8016c7e:	202e      	movs	r0, #46	@ 0x2e
 8016c80:	f007 f866 	bl	801dd50 <putchar>
 8016c84:	e002      	b.n	8016c8c <MAP_showLog+0x88>
			}
			else{
				printf("|");
 8016c86:	207c      	movs	r0, #124	@ 0x7c
 8016c88:	f007 f862 	bl	801dd50 <putchar>
			}
			if ( ( c_data & 0x04 ) == 0 ){
 8016c8c:	78fb      	ldrb	r3, [r7, #3]
 8016c8e:	f003 0304 	and.w	r3, r3, #4
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d103      	bne.n	8016c9e <MAP_showLog+0x9a>
				printf(" ");
 8016c96:	2020      	movs	r0, #32
 8016c98:	f007 f85a 	bl	801dd50 <putchar>
 8016c9c:	e002      	b.n	8016ca4 <MAP_showLog+0xa0>
			}
			else{
				printf("_");
 8016c9e:	205f      	movs	r0, #95	@ 0x5f
 8016ca0:	f007 f856 	bl	801dd50 <putchar>
		for( x=0; x<MAP_X_SIZE; x++){
 8016ca4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016ca8:	b29b      	uxth	r3, r3
 8016caa:	3301      	adds	r3, #1
 8016cac:	b29b      	uxth	r3, r3
 8016cae:	80fb      	strh	r3, [r7, #6]
 8016cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016cb4:	2b1f      	cmp	r3, #31
 8016cb6:	ddd3      	ble.n	8016c60 <MAP_showLog+0x5c>
			}
		}
		printf("|   ");
 8016cb8:	4832      	ldr	r0, [pc, #200]	@ (8016d84 <MAP_showLog+0x180>)
 8016cba:	f007 f837 	bl	801dd2c <iprintf>
		
		for( x=0; x<MAP_X_SIZE; x++ ){
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	80fb      	strh	r3, [r7, #6]
 8016cc2:	e017      	b.n	8016cf4 <MAP_showLog+0xf0>
			c_data = g_SysMap[y][x];
 8016cc4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8016cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016ccc:	492c      	ldr	r1, [pc, #176]	@ (8016d80 <MAP_showLog+0x17c>)
 8016cce:	0152      	lsls	r2, r2, #5
 8016cd0:	440a      	add	r2, r1
 8016cd2:	4413      	add	r3, r2
 8016cd4:	781b      	ldrb	r3, [r3, #0]
 8016cd6:	70fb      	strb	r3, [r7, #3]
			c_data = c_data >> 4;
 8016cd8:	78fb      	ldrb	r3, [r7, #3]
 8016cda:	091b      	lsrs	r3, r3, #4
 8016cdc:	70fb      	strb	r3, [r7, #3]
			printf("%x", c_data);
 8016cde:	78fb      	ldrb	r3, [r7, #3]
 8016ce0:	4619      	mov	r1, r3
 8016ce2:	4829      	ldr	r0, [pc, #164]	@ (8016d88 <MAP_showLog+0x184>)
 8016ce4:	f007 f822 	bl	801dd2c <iprintf>
		for( x=0; x<MAP_X_SIZE; x++ ){
 8016ce8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016cec:	b29b      	uxth	r3, r3
 8016cee:	3301      	adds	r3, #1
 8016cf0:	b29b      	uxth	r3, r3
 8016cf2:	80fb      	strh	r3, [r7, #6]
 8016cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016cf8:	2b1f      	cmp	r3, #31
 8016cfa:	dde3      	ble.n	8016cc4 <MAP_showLog+0xc0>
		}
		
		printf("\n\r");
 8016cfc:	4823      	ldr	r0, [pc, #140]	@ (8016d8c <MAP_showLog+0x188>)
 8016cfe:	f007 f815 	bl	801dd2c <iprintf>
	for( y=MAP_Y_SIZE-1; y>-1; y-- ){
 8016d02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8016d06:	b29b      	uxth	r3, r3
 8016d08:	3b01      	subs	r3, #1
 8016d0a:	b29b      	uxth	r3, r3
 8016d0c:	80bb      	strh	r3, [r7, #4]
 8016d0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	da9b      	bge.n	8016c4e <MAP_showLog+0x4a>
	}
	
	printf("     ");
 8016d16:	481e      	ldr	r0, [pc, #120]	@ (8016d90 <MAP_showLog+0x18c>)
 8016d18:	f007 f808 	bl	801dd2c <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	80fb      	strh	r3, [r7, #6]
 8016d20:	e017      	b.n	8016d52 <MAP_showLog+0x14e>
		printf("%2d",x%10);
 8016d22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8016d26:	4b1b      	ldr	r3, [pc, #108]	@ (8016d94 <MAP_showLog+0x190>)
 8016d28:	fb83 1302 	smull	r1, r3, r3, r2
 8016d2c:	1099      	asrs	r1, r3, #2
 8016d2e:	17d3      	asrs	r3, r2, #31
 8016d30:	1ac9      	subs	r1, r1, r3
 8016d32:	460b      	mov	r3, r1
 8016d34:	009b      	lsls	r3, r3, #2
 8016d36:	440b      	add	r3, r1
 8016d38:	005b      	lsls	r3, r3, #1
 8016d3a:	1ad3      	subs	r3, r2, r3
 8016d3c:	b21b      	sxth	r3, r3
 8016d3e:	4619      	mov	r1, r3
 8016d40:	4815      	ldr	r0, [pc, #84]	@ (8016d98 <MAP_showLog+0x194>)
 8016d42:	f006 fff3 	bl	801dd2c <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 8016d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016d4a:	b29b      	uxth	r3, r3
 8016d4c:	3301      	adds	r3, #1
 8016d4e:	b29b      	uxth	r3, r3
 8016d50:	80fb      	strh	r3, [r7, #6]
 8016d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016d56:	2b1f      	cmp	r3, #31
 8016d58:	dde3      	ble.n	8016d22 <MAP_showLog+0x11e>
	}
	printf("\n\r");
 8016d5a:	480c      	ldr	r0, [pc, #48]	@ (8016d8c <MAP_showLog+0x188>)
 8016d5c:	f006 ffe6 	bl	801dd2c <iprintf>

}
 8016d60:	bf00      	nop
 8016d62:	3708      	adds	r7, #8
 8016d64:	46bd      	mov	sp, r7
 8016d66:	bd80      	pop	{r7, pc}
 8016d68:	08021dec 	.word	0x08021dec
 8016d6c:	08021e04 	.word	0x08021e04
 8016d70:	08021e20 	.word	0x08021e20
 8016d74:	08021e28 	.word	0x08021e28
 8016d78:	08021e2c 	.word	0x08021e2c
 8016d7c:	08021e30 	.word	0x08021e30
 8016d80:	2001b5a0 	.word	0x2001b5a0
 8016d84:	08021e38 	.word	0x08021e38
 8016d88:	08021e40 	.word	0x08021e40
 8016d8c:	08021e44 	.word	0x08021e44
 8016d90:	08021e48 	.word	0x08021e48
 8016d94:	66666667 	.word	0x66666667
 8016d98:	08021e50 	.word	0x08021e50

08016d9c <MAP_clearMap>:
		printf("\n\r");
	}
}

void MAP_clearMap( void )
{
 8016d9c:	b480      	push	{r7}
 8016d9e:	b083      	sub	sp, #12
 8016da0:	af00      	add	r7, sp, #0
	uint16_t	x, y;
	uint8_t	uc_data;

	/* すべてのマップデータを未探索状態にする */
	for ( y = 0; y < MAP_Y_SIZE; y++){
 8016da2:	2300      	movs	r3, #0
 8016da4:	80bb      	strh	r3, [r7, #4]
 8016da6:	e059      	b.n	8016e5c <MAP_clearMap+0xc0>
		for( x = 0; x < MAP_X_SIZE; x++){
 8016da8:	2300      	movs	r3, #0
 8016daa:	80fb      	strh	r3, [r7, #6]
 8016dac:	e050      	b.n	8016e50 <MAP_clearMap+0xb4>
			uc_data = 0x00;
 8016dae:	2300      	movs	r3, #0
 8016db0:	70fb      	strb	r3, [r7, #3]
			if ( ( x == 0) && ( y == 0 ) ) uc_data = 0xfe;
 8016db2:	88fb      	ldrh	r3, [r7, #6]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d105      	bne.n	8016dc4 <MAP_clearMap+0x28>
 8016db8:	88bb      	ldrh	r3, [r7, #4]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d102      	bne.n	8016dc4 <MAP_clearMap+0x28>
 8016dbe:	23fe      	movs	r3, #254	@ 0xfe
 8016dc0:	70fb      	strb	r3, [r7, #3]
 8016dc2:	e03a      	b.n	8016e3a <MAP_clearMap+0x9e>
			else if ( ( x == 1 ) && ( y == 0 ) ) uc_data = 0xcc;
 8016dc4:	88fb      	ldrh	r3, [r7, #6]
 8016dc6:	2b01      	cmp	r3, #1
 8016dc8:	d105      	bne.n	8016dd6 <MAP_clearMap+0x3a>
 8016dca:	88bb      	ldrh	r3, [r7, #4]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d102      	bne.n	8016dd6 <MAP_clearMap+0x3a>
 8016dd0:	23cc      	movs	r3, #204	@ 0xcc
 8016dd2:	70fb      	strb	r3, [r7, #3]
 8016dd4:	e031      	b.n	8016e3a <MAP_clearMap+0x9e>
			else if ( ( x == (MAP_X_SIZE-1) ) && ( y == 0 ) ) uc_data = 0x66;
 8016dd6:	88fb      	ldrh	r3, [r7, #6]
 8016dd8:	2b1f      	cmp	r3, #31
 8016dda:	d105      	bne.n	8016de8 <MAP_clearMap+0x4c>
 8016ddc:	88bb      	ldrh	r3, [r7, #4]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d102      	bne.n	8016de8 <MAP_clearMap+0x4c>
 8016de2:	2366      	movs	r3, #102	@ 0x66
 8016de4:	70fb      	strb	r3, [r7, #3]
 8016de6:	e028      	b.n	8016e3a <MAP_clearMap+0x9e>
			else if ( ( x == 0 ) && ( y == (MAP_Y_SIZE-1) ) ) uc_data = 0x99;
 8016de8:	88fb      	ldrh	r3, [r7, #6]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d105      	bne.n	8016dfa <MAP_clearMap+0x5e>
 8016dee:	88bb      	ldrh	r3, [r7, #4]
 8016df0:	2b1f      	cmp	r3, #31
 8016df2:	d102      	bne.n	8016dfa <MAP_clearMap+0x5e>
 8016df4:	2399      	movs	r3, #153	@ 0x99
 8016df6:	70fb      	strb	r3, [r7, #3]
 8016df8:	e01f      	b.n	8016e3a <MAP_clearMap+0x9e>
			else if ( ( x == (MAP_X_SIZE-1) ) && ( y == (MAP_Y_SIZE-1) ) ) uc_data = 0x33;
 8016dfa:	88fb      	ldrh	r3, [r7, #6]
 8016dfc:	2b1f      	cmp	r3, #31
 8016dfe:	d105      	bne.n	8016e0c <MAP_clearMap+0x70>
 8016e00:	88bb      	ldrh	r3, [r7, #4]
 8016e02:	2b1f      	cmp	r3, #31
 8016e04:	d102      	bne.n	8016e0c <MAP_clearMap+0x70>
 8016e06:	2333      	movs	r3, #51	@ 0x33
 8016e08:	70fb      	strb	r3, [r7, #3]
 8016e0a:	e016      	b.n	8016e3a <MAP_clearMap+0x9e>
			else if ( x == 0 ) uc_data = 0x88;
 8016e0c:	88fb      	ldrh	r3, [r7, #6]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d102      	bne.n	8016e18 <MAP_clearMap+0x7c>
 8016e12:	2388      	movs	r3, #136	@ 0x88
 8016e14:	70fb      	strb	r3, [r7, #3]
 8016e16:	e010      	b.n	8016e3a <MAP_clearMap+0x9e>
			else if ( x == (MAP_X_SIZE-1) ) uc_data = 0x22;
 8016e18:	88fb      	ldrh	r3, [r7, #6]
 8016e1a:	2b1f      	cmp	r3, #31
 8016e1c:	d102      	bne.n	8016e24 <MAP_clearMap+0x88>
 8016e1e:	2322      	movs	r3, #34	@ 0x22
 8016e20:	70fb      	strb	r3, [r7, #3]
 8016e22:	e00a      	b.n	8016e3a <MAP_clearMap+0x9e>
			else if ( y == 0 ) uc_data = 0x44;
 8016e24:	88bb      	ldrh	r3, [r7, #4]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d102      	bne.n	8016e30 <MAP_clearMap+0x94>
 8016e2a:	2344      	movs	r3, #68	@ 0x44
 8016e2c:	70fb      	strb	r3, [r7, #3]
 8016e2e:	e004      	b.n	8016e3a <MAP_clearMap+0x9e>
			else if ( y == (MAP_Y_SIZE-1) ) uc_data = 0x11;
 8016e30:	88bb      	ldrh	r3, [r7, #4]
 8016e32:	2b1f      	cmp	r3, #31
 8016e34:	d101      	bne.n	8016e3a <MAP_clearMap+0x9e>
 8016e36:	2311      	movs	r3, #17
 8016e38:	70fb      	strb	r3, [r7, #3]
			g_SysMap[y][x] = uc_data;
 8016e3a:	88ba      	ldrh	r2, [r7, #4]
 8016e3c:	88fb      	ldrh	r3, [r7, #6]
 8016e3e:	490c      	ldr	r1, [pc, #48]	@ (8016e70 <MAP_clearMap+0xd4>)
 8016e40:	0152      	lsls	r2, r2, #5
 8016e42:	440a      	add	r2, r1
 8016e44:	4413      	add	r3, r2
 8016e46:	78fa      	ldrb	r2, [r7, #3]
 8016e48:	701a      	strb	r2, [r3, #0]
		for( x = 0; x < MAP_X_SIZE; x++){
 8016e4a:	88fb      	ldrh	r3, [r7, #6]
 8016e4c:	3301      	adds	r3, #1
 8016e4e:	80fb      	strh	r3, [r7, #6]
 8016e50:	88fb      	ldrh	r3, [r7, #6]
 8016e52:	2b1f      	cmp	r3, #31
 8016e54:	d9ab      	bls.n	8016dae <MAP_clearMap+0x12>
	for ( y = 0; y < MAP_Y_SIZE; y++){
 8016e56:	88bb      	ldrh	r3, [r7, #4]
 8016e58:	3301      	adds	r3, #1
 8016e5a:	80bb      	strh	r3, [r7, #4]
 8016e5c:	88bb      	ldrh	r3, [r7, #4]
 8016e5e:	2b1f      	cmp	r3, #31
 8016e60:	d9a2      	bls.n	8016da8 <MAP_clearMap+0xc>
		}
	}

}
 8016e62:	bf00      	nop
 8016e64:	bf00      	nop
 8016e66:	370c      	adds	r7, #12
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e6e:	4770      	bx	lr
 8016e70:	2001b5a0 	.word	0x2001b5a0

08016e74 <MAP_getWallData>:

uint8_t MAP_getWallData( void )
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b082      	sub	sp, #8
 8016e78:	af00      	add	r7, sp, #0
	uint8_t	 uc_wall;

//	LED_offAll();			// debug

	// センサ情報から壁情報作成
	uc_wall = 0;
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	71fb      	strb	r3, [r7, #7]
	if( TRUE == DIST_isWall_FRONT() ){
 8016e7e:	f7fc f9d1 	bl	8013224 <DIST_isWall_FRONT>
 8016e82:	4603      	mov	r3, r0
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d003      	beq.n	8016e90 <MAP_getWallData+0x1c>
		uc_wall = uc_wall | 0x11;
 8016e88:	79fb      	ldrb	r3, [r7, #7]
 8016e8a:	f043 0311 	orr.w	r3, r3, #17
 8016e8e:	71fb      	strb	r3, [r7, #7]
//		LED_on(LED3);			// debug
//		LED_on(LED2);			// debug
	}
	if( TRUE == DIST_isWall_L_SIDE() ){
 8016e90:	f7fc f9fa 	bl	8013288 <DIST_isWall_L_SIDE>
 8016e94:	4603      	mov	r3, r0
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d003      	beq.n	8016ea2 <MAP_getWallData+0x2e>
//		LED_on(LED0);			// debug
		uc_wall = uc_wall | 0x88;
 8016e9a:	79fb      	ldrb	r3, [r7, #7]
 8016e9c:	f063 0377 	orn	r3, r3, #119	@ 0x77
 8016ea0:	71fb      	strb	r3, [r7, #7]
	}
	if( TRUE == DIST_isWall_R_SIDE() ){
 8016ea2:	f7fc f9db 	bl	801325c <DIST_isWall_R_SIDE>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d003      	beq.n	8016eb4 <MAP_getWallData+0x40>
//		LED_on(LED1);			// debug
		uc_wall = uc_wall | 0x22;
 8016eac:	79fb      	ldrb	r3, [r7, #7]
 8016eae:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 8016eb2:	71fb      	strb	r3, [r7, #7]
	}
	if(DIST_getNowVal(DIST_SEN_L_SIDE)>L_SIDE_REF){
 8016eb4:	2003      	movs	r0, #3
 8016eb6:	f7fb fec3 	bl	8012c40 <DIST_getNowVal>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8016ec0:	dd02      	ble.n	8016ec8 <MAP_getWallData+0x54>
		NearWall = 1;
 8016ec2:	4b16      	ldr	r3, [pc, #88]	@ (8016f1c <MAP_getWallData+0xa8>)
 8016ec4:	2201      	movs	r2, #1
 8016ec6:	701a      	strb	r2, [r3, #0]
	}
	if(DIST_getNowVal(DIST_SEN_R_SIDE)>R_SIDE_REF){
 8016ec8:	2002      	movs	r0, #2
 8016eca:	f7fb feb9 	bl	8012c40 <DIST_getNowVal>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8016ed4:	dd02      	ble.n	8016edc <MAP_getWallData+0x68>
		NearWall = 1;
 8016ed6:	4b11      	ldr	r3, [pc, #68]	@ (8016f1c <MAP_getWallData+0xa8>)
 8016ed8:	2201      	movs	r2, #1
 8016eda:	701a      	strb	r2, [r3, #0]
	}

	// マウスの進行方向にあわせてセンサデータを移動し壁データとする
	if		( en_Head == EAST ){
 8016edc:	4b10      	ldr	r3, [pc, #64]	@ (8016f20 <MAP_getWallData+0xac>)
 8016ede:	781b      	ldrb	r3, [r3, #0]
 8016ee0:	2b01      	cmp	r3, #1
 8016ee2:	d103      	bne.n	8016eec <MAP_getWallData+0x78>
		uc_wall = uc_wall >> 3;
 8016ee4:	79fb      	ldrb	r3, [r7, #7]
 8016ee6:	08db      	lsrs	r3, r3, #3
 8016ee8:	71fb      	strb	r3, [r7, #7]
 8016eea:	e00e      	b.n	8016f0a <MAP_getWallData+0x96>
	}
	else if ( en_Head == SOUTH ){
 8016eec:	4b0c      	ldr	r3, [pc, #48]	@ (8016f20 <MAP_getWallData+0xac>)
 8016eee:	781b      	ldrb	r3, [r3, #0]
 8016ef0:	2b02      	cmp	r3, #2
 8016ef2:	d103      	bne.n	8016efc <MAP_getWallData+0x88>
		uc_wall = uc_wall >> 2;
 8016ef4:	79fb      	ldrb	r3, [r7, #7]
 8016ef6:	089b      	lsrs	r3, r3, #2
 8016ef8:	71fb      	strb	r3, [r7, #7]
 8016efa:	e006      	b.n	8016f0a <MAP_getWallData+0x96>
	}
	else if ( en_Head == WEST ){
 8016efc:	4b08      	ldr	r3, [pc, #32]	@ (8016f20 <MAP_getWallData+0xac>)
 8016efe:	781b      	ldrb	r3, [r3, #0]
 8016f00:	2b03      	cmp	r3, #3
 8016f02:	d102      	bne.n	8016f0a <MAP_getWallData+0x96>
		uc_wall = uc_wall >> 1;
 8016f04:	79fb      	ldrb	r3, [r7, #7]
 8016f06:	085b      	lsrs	r3, r3, #1
 8016f08:	71fb      	strb	r3, [r7, #7]
	}

	//	探索済みフラグを立てる
	return ( uc_wall | 0xf0 );
 8016f0a:	79fb      	ldrb	r3, [r7, #7]
 8016f0c:	f063 030f 	orn	r3, r3, #15
 8016f10:	b2db      	uxtb	r3, r3
}
 8016f12:	4618      	mov	r0, r3
 8016f14:	3708      	adds	r7, #8
 8016f16:	46bd      	mov	sp, r7
 8016f18:	bd80      	pop	{r7, pc}
 8016f1a:	bf00      	nop
 8016f1c:	2001ad9a 	.word	0x2001ad9a
 8016f20:	2001ad8a 	.word	0x2001ad8a

08016f24 <MAP_makeMapData>:

void MAP_makeMapData( void )
{
 8016f24:	b580      	push	{r7, lr}
 8016f26:	b082      	sub	sp, #8
 8016f28:	af00      	add	r7, sp, #0
	uint8_t uc_wall;

	//	走行時の壁情報を迷路情報に書込
	if ( ( mx == 0 ) && ( my == 0 ) ){
 8016f2a:	4b66      	ldr	r3, [pc, #408]	@ (80170c4 <MAP_makeMapData+0x1a0>)
 8016f2c:	781b      	ldrb	r3, [r3, #0]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d106      	bne.n	8016f40 <MAP_makeMapData+0x1c>
 8016f32:	4b65      	ldr	r3, [pc, #404]	@ (80170c8 <MAP_makeMapData+0x1a4>)
 8016f34:	781b      	ldrb	r3, [r3, #0]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d102      	bne.n	8016f40 <MAP_makeMapData+0x1c>
		uc_wall = 0xfe;
 8016f3a:	23fe      	movs	r3, #254	@ 0xfe
 8016f3c:	71fb      	strb	r3, [r7, #7]
 8016f3e:	e003      	b.n	8016f48 <MAP_makeMapData+0x24>
	}
	else{
		uc_wall = MAP_getWallData();
 8016f40:	f7ff ff98 	bl	8016e74 <MAP_getWallData>
 8016f44:	4603      	mov	r3, r0
 8016f46:	71fb      	strb	r3, [r7, #7]
	}
	g_SysMap[my][mx] = uc_wall;
 8016f48:	4b5f      	ldr	r3, [pc, #380]	@ (80170c8 <MAP_makeMapData+0x1a4>)
 8016f4a:	781b      	ldrb	r3, [r3, #0]
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80170c4 <MAP_makeMapData+0x1a0>)
 8016f50:	781b      	ldrb	r3, [r3, #0]
 8016f52:	4619      	mov	r1, r3
 8016f54:	4a5d      	ldr	r2, [pc, #372]	@ (80170cc <MAP_makeMapData+0x1a8>)
 8016f56:	0143      	lsls	r3, r0, #5
 8016f58:	4413      	add	r3, r2
 8016f5a:	440b      	add	r3, r1
 8016f5c:	79fa      	ldrb	r2, [r7, #7]
 8016f5e:	701a      	strb	r2, [r3, #0]

	//	隣の区間のＭＡＰデータも更新する
	if ( mx != (MAP_X_SIZE-1) ){
 8016f60:	4b58      	ldr	r3, [pc, #352]	@ (80170c4 <MAP_makeMapData+0x1a0>)
 8016f62:	781b      	ldrb	r3, [r3, #0]
 8016f64:	2b1f      	cmp	r3, #31
 8016f66:	d026      	beq.n	8016fb6 <MAP_makeMapData+0x92>
		g_SysMap[my][mx+1] = ( g_SysMap[my][mx+1] & 0x77 ) | 0x80 | ( ( uc_wall << 2 ) & 0x08 );
 8016f68:	4b57      	ldr	r3, [pc, #348]	@ (80170c8 <MAP_makeMapData+0x1a4>)
 8016f6a:	781b      	ldrb	r3, [r3, #0]
 8016f6c:	461a      	mov	r2, r3
 8016f6e:	4b55      	ldr	r3, [pc, #340]	@ (80170c4 <MAP_makeMapData+0x1a0>)
 8016f70:	781b      	ldrb	r3, [r3, #0]
 8016f72:	3301      	adds	r3, #1
 8016f74:	4955      	ldr	r1, [pc, #340]	@ (80170cc <MAP_makeMapData+0x1a8>)
 8016f76:	0152      	lsls	r2, r2, #5
 8016f78:	440a      	add	r2, r1
 8016f7a:	4413      	add	r3, r2
 8016f7c:	781b      	ldrb	r3, [r3, #0]
 8016f7e:	b25b      	sxtb	r3, r3
 8016f80:	f003 0377 	and.w	r3, r3, #119	@ 0x77
 8016f84:	b25b      	sxtb	r3, r3
 8016f86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016f8a:	b25a      	sxtb	r2, r3
 8016f8c:	79fb      	ldrb	r3, [r7, #7]
 8016f8e:	009b      	lsls	r3, r3, #2
 8016f90:	b25b      	sxtb	r3, r3
 8016f92:	f003 0308 	and.w	r3, r3, #8
 8016f96:	b25b      	sxtb	r3, r3
 8016f98:	4313      	orrs	r3, r2
 8016f9a:	b259      	sxtb	r1, r3
 8016f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80170c8 <MAP_makeMapData+0x1a4>)
 8016f9e:	781b      	ldrb	r3, [r3, #0]
 8016fa0:	461a      	mov	r2, r3
 8016fa2:	4b48      	ldr	r3, [pc, #288]	@ (80170c4 <MAP_makeMapData+0x1a0>)
 8016fa4:	781b      	ldrb	r3, [r3, #0]
 8016fa6:	3301      	adds	r3, #1
 8016fa8:	b2c8      	uxtb	r0, r1
 8016faa:	4948      	ldr	r1, [pc, #288]	@ (80170cc <MAP_makeMapData+0x1a8>)
 8016fac:	0152      	lsls	r2, r2, #5
 8016fae:	440a      	add	r2, r1
 8016fb0:	4413      	add	r3, r2
 8016fb2:	4602      	mov	r2, r0
 8016fb4:	701a      	strb	r2, [r3, #0]
	}
	if ( mx !=  0 ){
 8016fb6:	4b43      	ldr	r3, [pc, #268]	@ (80170c4 <MAP_makeMapData+0x1a0>)
 8016fb8:	781b      	ldrb	r3, [r3, #0]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d027      	beq.n	801700e <MAP_makeMapData+0xea>
		g_SysMap[my][mx-1] = ( g_SysMap[my][mx-1] & 0xdd ) | 0x20 | ( ( uc_wall >> 2 ) & 0x02 );
 8016fbe:	4b42      	ldr	r3, [pc, #264]	@ (80170c8 <MAP_makeMapData+0x1a4>)
 8016fc0:	781b      	ldrb	r3, [r3, #0]
 8016fc2:	461a      	mov	r2, r3
 8016fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80170c4 <MAP_makeMapData+0x1a0>)
 8016fc6:	781b      	ldrb	r3, [r3, #0]
 8016fc8:	3b01      	subs	r3, #1
 8016fca:	4940      	ldr	r1, [pc, #256]	@ (80170cc <MAP_makeMapData+0x1a8>)
 8016fcc:	0152      	lsls	r2, r2, #5
 8016fce:	440a      	add	r2, r1
 8016fd0:	4413      	add	r3, r2
 8016fd2:	781b      	ldrb	r3, [r3, #0]
 8016fd4:	b25b      	sxtb	r3, r3
 8016fd6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8016fda:	b25b      	sxtb	r3, r3
 8016fdc:	f043 0320 	orr.w	r3, r3, #32
 8016fe0:	b25a      	sxtb	r2, r3
 8016fe2:	79fb      	ldrb	r3, [r7, #7]
 8016fe4:	089b      	lsrs	r3, r3, #2
 8016fe6:	b2db      	uxtb	r3, r3
 8016fe8:	b25b      	sxtb	r3, r3
 8016fea:	f003 0302 	and.w	r3, r3, #2
 8016fee:	b25b      	sxtb	r3, r3
 8016ff0:	4313      	orrs	r3, r2
 8016ff2:	b259      	sxtb	r1, r3
 8016ff4:	4b34      	ldr	r3, [pc, #208]	@ (80170c8 <MAP_makeMapData+0x1a4>)
 8016ff6:	781b      	ldrb	r3, [r3, #0]
 8016ff8:	461a      	mov	r2, r3
 8016ffa:	4b32      	ldr	r3, [pc, #200]	@ (80170c4 <MAP_makeMapData+0x1a0>)
 8016ffc:	781b      	ldrb	r3, [r3, #0]
 8016ffe:	3b01      	subs	r3, #1
 8017000:	b2c8      	uxtb	r0, r1
 8017002:	4932      	ldr	r1, [pc, #200]	@ (80170cc <MAP_makeMapData+0x1a8>)
 8017004:	0152      	lsls	r2, r2, #5
 8017006:	440a      	add	r2, r1
 8017008:	4413      	add	r3, r2
 801700a:	4602      	mov	r2, r0
 801700c:	701a      	strb	r2, [r3, #0]
	}
	if ( my != (MAP_Y_SIZE-1) ){
 801700e:	4b2e      	ldr	r3, [pc, #184]	@ (80170c8 <MAP_makeMapData+0x1a4>)
 8017010:	781b      	ldrb	r3, [r3, #0]
 8017012:	2b1f      	cmp	r3, #31
 8017014:	d026      	beq.n	8017064 <MAP_makeMapData+0x140>
		g_SysMap[my+1][mx] = ( g_SysMap[my+1][mx] & 0xbb ) | 0x40 | ( ( uc_wall << 2 ) & 0x04 );
 8017016:	4b2c      	ldr	r3, [pc, #176]	@ (80170c8 <MAP_makeMapData+0x1a4>)
 8017018:	781b      	ldrb	r3, [r3, #0]
 801701a:	3301      	adds	r3, #1
 801701c:	4a29      	ldr	r2, [pc, #164]	@ (80170c4 <MAP_makeMapData+0x1a0>)
 801701e:	7812      	ldrb	r2, [r2, #0]
 8017020:	4611      	mov	r1, r2
 8017022:	4a2a      	ldr	r2, [pc, #168]	@ (80170cc <MAP_makeMapData+0x1a8>)
 8017024:	015b      	lsls	r3, r3, #5
 8017026:	4413      	add	r3, r2
 8017028:	440b      	add	r3, r1
 801702a:	781b      	ldrb	r3, [r3, #0]
 801702c:	b25b      	sxtb	r3, r3
 801702e:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8017032:	b25b      	sxtb	r3, r3
 8017034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017038:	b25a      	sxtb	r2, r3
 801703a:	79fb      	ldrb	r3, [r7, #7]
 801703c:	009b      	lsls	r3, r3, #2
 801703e:	b25b      	sxtb	r3, r3
 8017040:	f003 0304 	and.w	r3, r3, #4
 8017044:	b25b      	sxtb	r3, r3
 8017046:	4313      	orrs	r3, r2
 8017048:	b259      	sxtb	r1, r3
 801704a:	4b1f      	ldr	r3, [pc, #124]	@ (80170c8 <MAP_makeMapData+0x1a4>)
 801704c:	781b      	ldrb	r3, [r3, #0]
 801704e:	3301      	adds	r3, #1
 8017050:	4a1c      	ldr	r2, [pc, #112]	@ (80170c4 <MAP_makeMapData+0x1a0>)
 8017052:	7812      	ldrb	r2, [r2, #0]
 8017054:	4610      	mov	r0, r2
 8017056:	b2c9      	uxtb	r1, r1
 8017058:	4a1c      	ldr	r2, [pc, #112]	@ (80170cc <MAP_makeMapData+0x1a8>)
 801705a:	015b      	lsls	r3, r3, #5
 801705c:	4413      	add	r3, r2
 801705e:	4403      	add	r3, r0
 8017060:	460a      	mov	r2, r1
 8017062:	701a      	strb	r2, [r3, #0]
	}
	if ( my !=  0 ){
 8017064:	4b18      	ldr	r3, [pc, #96]	@ (80170c8 <MAP_makeMapData+0x1a4>)
 8017066:	781b      	ldrb	r3, [r3, #0]
 8017068:	2b00      	cmp	r3, #0
 801706a:	d027      	beq.n	80170bc <MAP_makeMapData+0x198>
		g_SysMap[my-1][mx] = ( g_SysMap[my-1][mx] & 0xee ) | 0x10 | ( ( uc_wall >> 2 ) & 0x01 );
 801706c:	4b16      	ldr	r3, [pc, #88]	@ (80170c8 <MAP_makeMapData+0x1a4>)
 801706e:	781b      	ldrb	r3, [r3, #0]
 8017070:	3b01      	subs	r3, #1
 8017072:	4a14      	ldr	r2, [pc, #80]	@ (80170c4 <MAP_makeMapData+0x1a0>)
 8017074:	7812      	ldrb	r2, [r2, #0]
 8017076:	4611      	mov	r1, r2
 8017078:	4a14      	ldr	r2, [pc, #80]	@ (80170cc <MAP_makeMapData+0x1a8>)
 801707a:	015b      	lsls	r3, r3, #5
 801707c:	4413      	add	r3, r2
 801707e:	440b      	add	r3, r1
 8017080:	781b      	ldrb	r3, [r3, #0]
 8017082:	b25b      	sxtb	r3, r3
 8017084:	f023 0311 	bic.w	r3, r3, #17
 8017088:	b25b      	sxtb	r3, r3
 801708a:	f043 0310 	orr.w	r3, r3, #16
 801708e:	b25a      	sxtb	r2, r3
 8017090:	79fb      	ldrb	r3, [r7, #7]
 8017092:	089b      	lsrs	r3, r3, #2
 8017094:	b2db      	uxtb	r3, r3
 8017096:	b25b      	sxtb	r3, r3
 8017098:	f003 0301 	and.w	r3, r3, #1
 801709c:	b25b      	sxtb	r3, r3
 801709e:	4313      	orrs	r3, r2
 80170a0:	b259      	sxtb	r1, r3
 80170a2:	4b09      	ldr	r3, [pc, #36]	@ (80170c8 <MAP_makeMapData+0x1a4>)
 80170a4:	781b      	ldrb	r3, [r3, #0]
 80170a6:	3b01      	subs	r3, #1
 80170a8:	4a06      	ldr	r2, [pc, #24]	@ (80170c4 <MAP_makeMapData+0x1a0>)
 80170aa:	7812      	ldrb	r2, [r2, #0]
 80170ac:	4610      	mov	r0, r2
 80170ae:	b2c9      	uxtb	r1, r1
 80170b0:	4a06      	ldr	r2, [pc, #24]	@ (80170cc <MAP_makeMapData+0x1a8>)
 80170b2:	015b      	lsls	r3, r3, #5
 80170b4:	4413      	add	r3, r2
 80170b6:	4403      	add	r3, r0
 80170b8:	460a      	mov	r2, r1
 80170ba:	701a      	strb	r2, [r3, #0]
	}

}
 80170bc:	bf00      	nop
 80170be:	3708      	adds	r7, #8
 80170c0:	46bd      	mov	sp, r7
 80170c2:	bd80      	pop	{r7, pc}
 80170c4:	2001ad8c 	.word	0x2001ad8c
 80170c8:	2001ad8b 	.word	0x2001ad8b
 80170cc:	2001b5a0 	.word	0x2001b5a0

080170d0 <MAP_get_refPos_WallData>:

uint8_t MAP_get_refPos_WallData( void )
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b082      	sub	sp, #8
 80170d4:	af00      	add	r7, sp, #0
	uint8_t	 uc_wall;

	// センサ情報から壁情報作成
	uc_wall = 0;
 80170d6:	2300      	movs	r3, #0
 80170d8:	71fb      	strb	r3, [r7, #7]
	if( TRUE == DIST_isWall_FRONT() ){
 80170da:	f7fc f8a3 	bl	8013224 <DIST_isWall_FRONT>
 80170de:	4603      	mov	r3, r0
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d003      	beq.n	80170ec <MAP_get_refPos_WallData+0x1c>
		uc_wall = uc_wall | 0x11;
 80170e4:	79fb      	ldrb	r3, [r7, #7]
 80170e6:	f043 0311 	orr.w	r3, r3, #17
 80170ea:	71fb      	strb	r3, [r7, #7]
	}
	MOT_turn(MOT_R90);
 80170ec:	2000      	movs	r0, #0
 80170ee:	f7f8 fd6f 	bl	800fbd0 <MOT_turn>
	if( TRUE == DIST_isWall_FRONT() ){
 80170f2:	f7fc f897 	bl	8013224 <DIST_isWall_FRONT>
 80170f6:	4603      	mov	r3, r0
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d003      	beq.n	8017104 <MAP_get_refPos_WallData+0x34>
		uc_wall = uc_wall | 0x22;
 80170fc:	79fb      	ldrb	r3, [r7, #7]
 80170fe:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 8017102:	71fb      	strb	r3, [r7, #7]
	}
	MOT_turn(MOT_R90);
 8017104:	2000      	movs	r0, #0
 8017106:	f7f8 fd63 	bl	800fbd0 <MOT_turn>
	if( TRUE == DIST_isWall_FRONT() ){
 801710a:	f7fc f88b 	bl	8013224 <DIST_isWall_FRONT>
 801710e:	4603      	mov	r3, r0
 8017110:	2b00      	cmp	r3, #0
 8017112:	d003      	beq.n	801711c <MAP_get_refPos_WallData+0x4c>
		uc_wall = uc_wall | 0x44;
 8017114:	79fb      	ldrb	r3, [r7, #7]
 8017116:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 801711a:	71fb      	strb	r3, [r7, #7]
	}
	MOT_turn(MOT_R90);
 801711c:	2000      	movs	r0, #0
 801711e:	f7f8 fd57 	bl	800fbd0 <MOT_turn>
	if( TRUE == DIST_isWall_FRONT() ){
 8017122:	f7fc f87f 	bl	8013224 <DIST_isWall_FRONT>
 8017126:	4603      	mov	r3, r0
 8017128:	2b00      	cmp	r3, #0
 801712a:	d003      	beq.n	8017134 <MAP_get_refPos_WallData+0x64>
		uc_wall = uc_wall | 0x88;
 801712c:	79fb      	ldrb	r3, [r7, #7]
 801712e:	f063 0377 	orn	r3, r3, #119	@ 0x77
 8017132:	71fb      	strb	r3, [r7, #7]
	}
	MOT_turn(MOT_R90);
 8017134:	2000      	movs	r0, #0
 8017136:	f7f8 fd4b 	bl	800fbd0 <MOT_turn>

	// マウスの進行方向にあわせてセンサデータを移動し壁データとする
	if		( en_Head == EAST ){
 801713a:	4b0f      	ldr	r3, [pc, #60]	@ (8017178 <MAP_get_refPos_WallData+0xa8>)
 801713c:	781b      	ldrb	r3, [r3, #0]
 801713e:	2b01      	cmp	r3, #1
 8017140:	d103      	bne.n	801714a <MAP_get_refPos_WallData+0x7a>
		uc_wall = uc_wall >> 3;
 8017142:	79fb      	ldrb	r3, [r7, #7]
 8017144:	08db      	lsrs	r3, r3, #3
 8017146:	71fb      	strb	r3, [r7, #7]
 8017148:	e00e      	b.n	8017168 <MAP_get_refPos_WallData+0x98>
	}
	else if ( en_Head == SOUTH ){
 801714a:	4b0b      	ldr	r3, [pc, #44]	@ (8017178 <MAP_get_refPos_WallData+0xa8>)
 801714c:	781b      	ldrb	r3, [r3, #0]
 801714e:	2b02      	cmp	r3, #2
 8017150:	d103      	bne.n	801715a <MAP_get_refPos_WallData+0x8a>
		uc_wall = uc_wall >> 2;
 8017152:	79fb      	ldrb	r3, [r7, #7]
 8017154:	089b      	lsrs	r3, r3, #2
 8017156:	71fb      	strb	r3, [r7, #7]
 8017158:	e006      	b.n	8017168 <MAP_get_refPos_WallData+0x98>
	}
	else if ( en_Head == WEST ){
 801715a:	4b07      	ldr	r3, [pc, #28]	@ (8017178 <MAP_get_refPos_WallData+0xa8>)
 801715c:	781b      	ldrb	r3, [r3, #0]
 801715e:	2b03      	cmp	r3, #3
 8017160:	d102      	bne.n	8017168 <MAP_get_refPos_WallData+0x98>
		uc_wall = uc_wall >> 1;
 8017162:	79fb      	ldrb	r3, [r7, #7]
 8017164:	085b      	lsrs	r3, r3, #1
 8017166:	71fb      	strb	r3, [r7, #7]
	}

	//	探索済みフラグを立てる
	return ( uc_wall | 0xf0 );
 8017168:	79fb      	ldrb	r3, [r7, #7]
 801716a:	f063 030f 	orn	r3, r3, #15
 801716e:	b2db      	uxtb	r3, r3
}
 8017170:	4618      	mov	r0, r3
 8017172:	3708      	adds	r7, #8
 8017174:	46bd      	mov	sp, r7
 8017176:	bd80      	pop	{r7, pc}
 8017178:	2001ad8a 	.word	0x2001ad8a

0801717c <MAP_make_refPos_MapData>:

void MAP_make_refPos_MapData(enMAP_HEAD_DIR en_head)
{
 801717c:	b580      	push	{r7, lr}
 801717e:	b084      	sub	sp, #16
 8017180:	af00      	add	r7, sp, #0
 8017182:	4603      	mov	r3, r0
 8017184:	71fb      	strb	r3, [r7, #7]
	uint8_t uc_wall;

	//	走行時の壁情報を迷路情報に書込	
	uc_wall = MAP_get_refPos_WallData();
 8017186:	f7ff ffa3 	bl	80170d0 <MAP_get_refPos_WallData>
 801718a:	4603      	mov	r3, r0
 801718c:	73fb      	strb	r3, [r7, #15]
	
	g_SysMap[my][mx] = uc_wall;
 801718e:	4b5f      	ldr	r3, [pc, #380]	@ (801730c <MAP_make_refPos_MapData+0x190>)
 8017190:	781b      	ldrb	r3, [r3, #0]
 8017192:	4618      	mov	r0, r3
 8017194:	4b5e      	ldr	r3, [pc, #376]	@ (8017310 <MAP_make_refPos_MapData+0x194>)
 8017196:	781b      	ldrb	r3, [r3, #0]
 8017198:	4619      	mov	r1, r3
 801719a:	4a5e      	ldr	r2, [pc, #376]	@ (8017314 <MAP_make_refPos_MapData+0x198>)
 801719c:	0143      	lsls	r3, r0, #5
 801719e:	4413      	add	r3, r2
 80171a0:	440b      	add	r3, r1
 80171a2:	7bfa      	ldrb	r2, [r7, #15]
 80171a4:	701a      	strb	r2, [r3, #0]

	//	隣の区間のＭＡＰデータも更新する
	if ( mx != (MAP_X_SIZE-1) ){
 80171a6:	4b5a      	ldr	r3, [pc, #360]	@ (8017310 <MAP_make_refPos_MapData+0x194>)
 80171a8:	781b      	ldrb	r3, [r3, #0]
 80171aa:	2b1f      	cmp	r3, #31
 80171ac:	d026      	beq.n	80171fc <MAP_make_refPos_MapData+0x80>
		g_SysMap[my][mx+1] = ( g_SysMap[my][mx+1] & 0x77 ) | 0x80 | ( ( uc_wall << 2 ) & 0x08 );
 80171ae:	4b57      	ldr	r3, [pc, #348]	@ (801730c <MAP_make_refPos_MapData+0x190>)
 80171b0:	781b      	ldrb	r3, [r3, #0]
 80171b2:	461a      	mov	r2, r3
 80171b4:	4b56      	ldr	r3, [pc, #344]	@ (8017310 <MAP_make_refPos_MapData+0x194>)
 80171b6:	781b      	ldrb	r3, [r3, #0]
 80171b8:	3301      	adds	r3, #1
 80171ba:	4956      	ldr	r1, [pc, #344]	@ (8017314 <MAP_make_refPos_MapData+0x198>)
 80171bc:	0152      	lsls	r2, r2, #5
 80171be:	440a      	add	r2, r1
 80171c0:	4413      	add	r3, r2
 80171c2:	781b      	ldrb	r3, [r3, #0]
 80171c4:	b25b      	sxtb	r3, r3
 80171c6:	f003 0377 	and.w	r3, r3, #119	@ 0x77
 80171ca:	b25b      	sxtb	r3, r3
 80171cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80171d0:	b25a      	sxtb	r2, r3
 80171d2:	7bfb      	ldrb	r3, [r7, #15]
 80171d4:	009b      	lsls	r3, r3, #2
 80171d6:	b25b      	sxtb	r3, r3
 80171d8:	f003 0308 	and.w	r3, r3, #8
 80171dc:	b25b      	sxtb	r3, r3
 80171de:	4313      	orrs	r3, r2
 80171e0:	b259      	sxtb	r1, r3
 80171e2:	4b4a      	ldr	r3, [pc, #296]	@ (801730c <MAP_make_refPos_MapData+0x190>)
 80171e4:	781b      	ldrb	r3, [r3, #0]
 80171e6:	461a      	mov	r2, r3
 80171e8:	4b49      	ldr	r3, [pc, #292]	@ (8017310 <MAP_make_refPos_MapData+0x194>)
 80171ea:	781b      	ldrb	r3, [r3, #0]
 80171ec:	3301      	adds	r3, #1
 80171ee:	b2c8      	uxtb	r0, r1
 80171f0:	4948      	ldr	r1, [pc, #288]	@ (8017314 <MAP_make_refPos_MapData+0x198>)
 80171f2:	0152      	lsls	r2, r2, #5
 80171f4:	440a      	add	r2, r1
 80171f6:	4413      	add	r3, r2
 80171f8:	4602      	mov	r2, r0
 80171fa:	701a      	strb	r2, [r3, #0]
	}
	if ( mx !=  0 ){
 80171fc:	4b44      	ldr	r3, [pc, #272]	@ (8017310 <MAP_make_refPos_MapData+0x194>)
 80171fe:	781b      	ldrb	r3, [r3, #0]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d027      	beq.n	8017254 <MAP_make_refPos_MapData+0xd8>
		g_SysMap[my][mx-1] = ( g_SysMap[my][mx-1] & 0xdd ) | 0x20 | ( ( uc_wall >> 2 ) & 0x02 );
 8017204:	4b41      	ldr	r3, [pc, #260]	@ (801730c <MAP_make_refPos_MapData+0x190>)
 8017206:	781b      	ldrb	r3, [r3, #0]
 8017208:	461a      	mov	r2, r3
 801720a:	4b41      	ldr	r3, [pc, #260]	@ (8017310 <MAP_make_refPos_MapData+0x194>)
 801720c:	781b      	ldrb	r3, [r3, #0]
 801720e:	3b01      	subs	r3, #1
 8017210:	4940      	ldr	r1, [pc, #256]	@ (8017314 <MAP_make_refPos_MapData+0x198>)
 8017212:	0152      	lsls	r2, r2, #5
 8017214:	440a      	add	r2, r1
 8017216:	4413      	add	r3, r2
 8017218:	781b      	ldrb	r3, [r3, #0]
 801721a:	b25b      	sxtb	r3, r3
 801721c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8017220:	b25b      	sxtb	r3, r3
 8017222:	f043 0320 	orr.w	r3, r3, #32
 8017226:	b25a      	sxtb	r2, r3
 8017228:	7bfb      	ldrb	r3, [r7, #15]
 801722a:	089b      	lsrs	r3, r3, #2
 801722c:	b2db      	uxtb	r3, r3
 801722e:	b25b      	sxtb	r3, r3
 8017230:	f003 0302 	and.w	r3, r3, #2
 8017234:	b25b      	sxtb	r3, r3
 8017236:	4313      	orrs	r3, r2
 8017238:	b259      	sxtb	r1, r3
 801723a:	4b34      	ldr	r3, [pc, #208]	@ (801730c <MAP_make_refPos_MapData+0x190>)
 801723c:	781b      	ldrb	r3, [r3, #0]
 801723e:	461a      	mov	r2, r3
 8017240:	4b33      	ldr	r3, [pc, #204]	@ (8017310 <MAP_make_refPos_MapData+0x194>)
 8017242:	781b      	ldrb	r3, [r3, #0]
 8017244:	3b01      	subs	r3, #1
 8017246:	b2c8      	uxtb	r0, r1
 8017248:	4932      	ldr	r1, [pc, #200]	@ (8017314 <MAP_make_refPos_MapData+0x198>)
 801724a:	0152      	lsls	r2, r2, #5
 801724c:	440a      	add	r2, r1
 801724e:	4413      	add	r3, r2
 8017250:	4602      	mov	r2, r0
 8017252:	701a      	strb	r2, [r3, #0]
	}
	if ( my != (MAP_Y_SIZE-1) ){
 8017254:	4b2d      	ldr	r3, [pc, #180]	@ (801730c <MAP_make_refPos_MapData+0x190>)
 8017256:	781b      	ldrb	r3, [r3, #0]
 8017258:	2b1f      	cmp	r3, #31
 801725a:	d026      	beq.n	80172aa <MAP_make_refPos_MapData+0x12e>
		g_SysMap[my+1][mx] = ( g_SysMap[my+1][mx] & 0xbb ) | 0x40 | ( ( uc_wall << 2 ) & 0x04 );
 801725c:	4b2b      	ldr	r3, [pc, #172]	@ (801730c <MAP_make_refPos_MapData+0x190>)
 801725e:	781b      	ldrb	r3, [r3, #0]
 8017260:	3301      	adds	r3, #1
 8017262:	4a2b      	ldr	r2, [pc, #172]	@ (8017310 <MAP_make_refPos_MapData+0x194>)
 8017264:	7812      	ldrb	r2, [r2, #0]
 8017266:	4611      	mov	r1, r2
 8017268:	4a2a      	ldr	r2, [pc, #168]	@ (8017314 <MAP_make_refPos_MapData+0x198>)
 801726a:	015b      	lsls	r3, r3, #5
 801726c:	4413      	add	r3, r2
 801726e:	440b      	add	r3, r1
 8017270:	781b      	ldrb	r3, [r3, #0]
 8017272:	b25b      	sxtb	r3, r3
 8017274:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8017278:	b25b      	sxtb	r3, r3
 801727a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801727e:	b25a      	sxtb	r2, r3
 8017280:	7bfb      	ldrb	r3, [r7, #15]
 8017282:	009b      	lsls	r3, r3, #2
 8017284:	b25b      	sxtb	r3, r3
 8017286:	f003 0304 	and.w	r3, r3, #4
 801728a:	b25b      	sxtb	r3, r3
 801728c:	4313      	orrs	r3, r2
 801728e:	b259      	sxtb	r1, r3
 8017290:	4b1e      	ldr	r3, [pc, #120]	@ (801730c <MAP_make_refPos_MapData+0x190>)
 8017292:	781b      	ldrb	r3, [r3, #0]
 8017294:	3301      	adds	r3, #1
 8017296:	4a1e      	ldr	r2, [pc, #120]	@ (8017310 <MAP_make_refPos_MapData+0x194>)
 8017298:	7812      	ldrb	r2, [r2, #0]
 801729a:	4610      	mov	r0, r2
 801729c:	b2c9      	uxtb	r1, r1
 801729e:	4a1d      	ldr	r2, [pc, #116]	@ (8017314 <MAP_make_refPos_MapData+0x198>)
 80172a0:	015b      	lsls	r3, r3, #5
 80172a2:	4413      	add	r3, r2
 80172a4:	4403      	add	r3, r0
 80172a6:	460a      	mov	r2, r1
 80172a8:	701a      	strb	r2, [r3, #0]
	}
	if ( my !=  0 ){
 80172aa:	4b18      	ldr	r3, [pc, #96]	@ (801730c <MAP_make_refPos_MapData+0x190>)
 80172ac:	781b      	ldrb	r3, [r3, #0]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d027      	beq.n	8017302 <MAP_make_refPos_MapData+0x186>
		g_SysMap[my-1][mx] = ( g_SysMap[my-1][mx] & 0xee ) | 0x10 | ( ( uc_wall >> 2 ) & 0x01 );
 80172b2:	4b16      	ldr	r3, [pc, #88]	@ (801730c <MAP_make_refPos_MapData+0x190>)
 80172b4:	781b      	ldrb	r3, [r3, #0]
 80172b6:	3b01      	subs	r3, #1
 80172b8:	4a15      	ldr	r2, [pc, #84]	@ (8017310 <MAP_make_refPos_MapData+0x194>)
 80172ba:	7812      	ldrb	r2, [r2, #0]
 80172bc:	4611      	mov	r1, r2
 80172be:	4a15      	ldr	r2, [pc, #84]	@ (8017314 <MAP_make_refPos_MapData+0x198>)
 80172c0:	015b      	lsls	r3, r3, #5
 80172c2:	4413      	add	r3, r2
 80172c4:	440b      	add	r3, r1
 80172c6:	781b      	ldrb	r3, [r3, #0]
 80172c8:	b25b      	sxtb	r3, r3
 80172ca:	f023 0311 	bic.w	r3, r3, #17
 80172ce:	b25b      	sxtb	r3, r3
 80172d0:	f043 0310 	orr.w	r3, r3, #16
 80172d4:	b25a      	sxtb	r2, r3
 80172d6:	7bfb      	ldrb	r3, [r7, #15]
 80172d8:	089b      	lsrs	r3, r3, #2
 80172da:	b2db      	uxtb	r3, r3
 80172dc:	b25b      	sxtb	r3, r3
 80172de:	f003 0301 	and.w	r3, r3, #1
 80172e2:	b25b      	sxtb	r3, r3
 80172e4:	4313      	orrs	r3, r2
 80172e6:	b259      	sxtb	r1, r3
 80172e8:	4b08      	ldr	r3, [pc, #32]	@ (801730c <MAP_make_refPos_MapData+0x190>)
 80172ea:	781b      	ldrb	r3, [r3, #0]
 80172ec:	3b01      	subs	r3, #1
 80172ee:	4a08      	ldr	r2, [pc, #32]	@ (8017310 <MAP_make_refPos_MapData+0x194>)
 80172f0:	7812      	ldrb	r2, [r2, #0]
 80172f2:	4610      	mov	r0, r2
 80172f4:	b2c9      	uxtb	r1, r1
 80172f6:	4a07      	ldr	r2, [pc, #28]	@ (8017314 <MAP_make_refPos_MapData+0x198>)
 80172f8:	015b      	lsls	r3, r3, #5
 80172fa:	4413      	add	r3, r2
 80172fc:	4403      	add	r3, r0
 80172fe:	460a      	mov	r2, r1
 8017300:	701a      	strb	r2, [r3, #0]
	}

}
 8017302:	bf00      	nop
 8017304:	3710      	adds	r7, #16
 8017306:	46bd      	mov	sp, r7
 8017308:	bd80      	pop	{r7, pc}
 801730a:	bf00      	nop
 801730c:	2001ad8b 	.word	0x2001ad8b
 8017310:	2001ad8c 	.word	0x2001ad8c
 8017314:	2001b5a0 	.word	0x2001b5a0

08017318 <setStep>:
	}
	while( uc_level != 0 );
	
}
*/
void setStep(const int8_t x, const int8_t y, const uint16_t step) {
 8017318:	b580      	push	{r7, lr}
 801731a:	b082      	sub	sp, #8
 801731c:	af00      	add	r7, sp, #0
 801731e:	4603      	mov	r3, r0
 8017320:	71fb      	strb	r3, [r7, #7]
 8017322:	460b      	mov	r3, r1
 8017324:	71bb      	strb	r3, [r7, #6]
 8017326:	4613      	mov	r3, r2
 8017328:	80bb      	strh	r3, [r7, #4]
	/* (x, y) がフィールド内か確認 */
	if (x < 0 || y < 0 || x >= MAP_X_SIZE || y >= MAP_Y_SIZE) {
 801732a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801732e:	2b00      	cmp	r3, #0
 8017330:	db0b      	blt.n	801734a <setStep+0x32>
 8017332:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017336:	2b00      	cmp	r3, #0
 8017338:	db07      	blt.n	801734a <setStep+0x32>
 801733a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801733e:	2b1f      	cmp	r3, #31
 8017340:	dc03      	bgt.n	801734a <setStep+0x32>
 8017342:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017346:	2b1f      	cmp	r3, #31
 8017348:	dd03      	ble.n	8017352 <setStep+0x3a>
		printf( "referred to out of field\r\n");
 801734a:	4808      	ldr	r0, [pc, #32]	@ (801736c <setStep+0x54>)
 801734c:	f006 fd5e 	bl	801de0c <puts>
		return;
 8017350:	e009      	b.n	8017366 <setStep+0x4e>
	}
	us_Cmap[y][x] = step;
 8017352:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801735a:	4905      	ldr	r1, [pc, #20]	@ (8017370 <setStep+0x58>)
 801735c:	0152      	lsls	r2, r2, #5
 801735e:	4413      	add	r3, r2
 8017360:	88ba      	ldrh	r2, [r7, #4]
 8017362:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8017366:	3708      	adds	r7, #8
 8017368:	46bd      	mov	sp, r7
 801736a:	bd80      	pop	{r7, pc}
 801736c:	08021e98 	.word	0x08021e98
 8017370:	2001ada0 	.word	0x2001ada0

08017374 <MAP_makeContourMap_queue>:

void  MAP_makeContourMap_queue(//queue
	uint8_t uc_goalX, 			///< [in] ゴールX座標
	uint8_t uc_goalY, 			///< [in] ゴールY座標
	enMAP_ACT_MODE	en_type		///< [in] 計算方法（まだ未使用）
) {
 8017374:	b590      	push	{r4, r7, lr}
 8017376:	b0cd      	sub	sp, #308	@ 0x134
 8017378:	af00      	add	r7, sp, #0
 801737a:	4604      	mov	r4, r0
 801737c:	4608      	mov	r0, r1
 801737e:	4611      	mov	r1, r2
 8017380:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017384:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8017388:	4622      	mov	r2, r4
 801738a:	701a      	strb	r2, [r3, #0]
 801738c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017390:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8017394:	4602      	mov	r2, r0
 8017396:	701a      	strb	r2, [r3, #0]
 8017398:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801739c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80173a0:	460a      	mov	r2, r1
 80173a2:	701a      	strb	r2, [r3, #0]
	uint16_t		uc_level;		// 等高線
	uint8_t		uc_wallData;	// 壁情報

	stPOSITION		st_pos;

	en_type = en_type;		// コンパイルワーニング回避（いずれ削除）
 80173a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80173a8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80173ac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80173b0:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80173b4:	7812      	ldrb	r2, [r2, #0]
 80173b6:	701a      	strb	r2, [r3, #0]

	queue_t queue;
	queue_t* pQueue = &queue;
 80173b8:	f107 0310 	add.w	r3, r7, #16
 80173bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	InitQueue(pQueue);
 80173c0:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80173c4:	f7ec fd28 	bl	8003e18 <InitQueue>

	/* 等高線マップを初期化する */
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 80173c8:	2300      	movs	r3, #0
 80173ca:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
 80173ce:	e014      	b.n	80173fa <MAP_makeContourMap_queue+0x86>
		us_Cmap[i / MAP_Y_SIZE][i & (MAP_X_SIZE - 1)] = MAP_SMAP_MAX_VAL - 1;
 80173d0:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 80173d4:	095b      	lsrs	r3, r3, #5
 80173d6:	b29b      	uxth	r3, r3
 80173d8:	461a      	mov	r2, r3
 80173da:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 80173de:	f003 031f 	and.w	r3, r3, #31
 80173e2:	49d7      	ldr	r1, [pc, #860]	@ (8017740 <MAP_makeContourMap_queue+0x3cc>)
 80173e4:	0152      	lsls	r2, r2, #5
 80173e6:	4413      	add	r3, r2
 80173e8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80173ec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 80173f0:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 80173f4:	3301      	adds	r3, #1
 80173f6:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
 80173fa:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 80173fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017402:	d3e5      	bcc.n	80173d0 <MAP_makeContourMap_queue+0x5c>

//	std::queue<stPOSITION> q;
//	QueryPerformanceCounter(&start);

	/* 目標地点の等高線を0に設定 */
	setStep(uc_goalX, uc_goalY, 0);
 8017404:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017408:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801740c:	f993 0000 	ldrsb.w	r0, [r3]
 8017410:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017414:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8017418:	f993 3000 	ldrsb.w	r3, [r3]
 801741c:	2200      	movs	r2, #0
 801741e:	4619      	mov	r1, r3
 8017420:	f7ff ff7a 	bl	8017318 <setStep>
	st_pos.x = uc_goalX;
 8017424:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017428:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801742c:	781b      	ldrb	r3, [r3, #0]
 801742e:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
	st_pos.y = uc_goalY;
 8017432:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017436:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801743a:	781b      	ldrb	r3, [r3, #0]
 801743c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	st_pos.step = 0;
 8017440:	2300      	movs	r3, #0
 8017442:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e

	EnQueue(pQueue,st_pos);
 8017446:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 801744a:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 801744e:	f7ec fd13 	bl	8003e78 <EnQueue>

	/* 等高線マップを作成 */
	while (pQueue->flag != EMPTY) {
 8017452:	e167      	b.n	8017724 <MAP_makeContourMap_queue+0x3b0>
		const stPOSITION focus = DeQueue(pQueue);
 8017454:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8017458:	f7ec fd4a 	bl	8003ef0 <DeQueue>
 801745c:	4602      	mov	r2, r0
 801745e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017462:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8017466:	601a      	str	r2, [r3, #0]
//		q.pop();
		const uint16_t focus_step = focus.step;
 8017468:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801746c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8017470:	885b      	ldrh	r3, [r3, #2]
 8017472:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
		x = focus.x;
 8017476:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801747a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801747e:	781b      	ldrb	r3, [r3, #0]
 8017480:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
		y = focus.y;
 8017484:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017488:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801748c:	785b      	ldrb	r3, [r3, #1]
 801748e:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
		stPOSITION next = focus;
 8017492:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017496:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801749a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801749e:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 80174a2:	6812      	ldr	r2, [r2, #0]
 80174a4:	601a      	str	r2, [r3, #0]
		uc_wallData = g_SysMap[y][x];
 80174a6:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 80174aa:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80174ae:	49a5      	ldr	r1, [pc, #660]	@ (8017744 <MAP_makeContourMap_queue+0x3d0>)
 80174b0:	0152      	lsls	r2, r2, #5
 80174b2:	440a      	add	r2, r1
 80174b4:	4413      	add	r3, r2
 80174b6:	781b      	ldrb	r3, [r3, #0]
 80174b8:	f887 3121 	strb.w	r3, [r7, #289]	@ 0x121

		if (((uc_wallData & 0x01) == 0x00) && (y != (MAP_Y_SIZE - 1))) {
 80174bc:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 80174c0:	f003 0301 	and.w	r3, r3, #1
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d146      	bne.n	8017556 <MAP_makeContourMap_queue+0x1e2>
 80174c8:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80174cc:	2b1f      	cmp	r3, #31
 80174ce:	d042      	beq.n	8017556 <MAP_makeContourMap_queue+0x1e2>
			if (us_Cmap[y + 1][x] > focus_step + 1) {
 80174d0:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80174d4:	1c5a      	adds	r2, r3, #1
 80174d6:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80174da:	4999      	ldr	r1, [pc, #612]	@ (8017740 <MAP_makeContourMap_queue+0x3cc>)
 80174dc:	0152      	lsls	r2, r2, #5
 80174de:	4413      	add	r3, r2
 80174e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80174e4:	461a      	mov	r2, r3
 80174e6:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80174ea:	3301      	adds	r3, #1
 80174ec:	429a      	cmp	r2, r3
 80174ee:	dd32      	ble.n	8017556 <MAP_makeContourMap_queue+0x1e2>
				next.step = focus_step + 1;
 80174f0:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80174f4:	3301      	adds	r3, #1
 80174f6:	b29a      	uxth	r2, r3
 80174f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80174fc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8017500:	805a      	strh	r2, [r3, #2]
				us_Cmap[y + 1][x] = focus_step + 1;
 8017502:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8017506:	1c5a      	adds	r2, r3, #1
 8017508:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801750c:	f8b7 1126 	ldrh.w	r1, [r7, #294]	@ 0x126
 8017510:	3101      	adds	r1, #1
 8017512:	b288      	uxth	r0, r1
 8017514:	498a      	ldr	r1, [pc, #552]	@ (8017740 <MAP_makeContourMap_queue+0x3cc>)
 8017516:	0152      	lsls	r2, r2, #5
 8017518:	4413      	add	r3, r2
 801751a:	4602      	mov	r2, r0
 801751c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 8017520:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8017524:	b2da      	uxtb	r2, r3
 8017526:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801752a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801752e:	701a      	strb	r2, [r3, #0]
				next.y = y + 1;
 8017530:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8017534:	b2db      	uxtb	r3, r3
 8017536:	3301      	adds	r3, #1
 8017538:	b2da      	uxtb	r2, r3
 801753a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801753e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8017542:	705a      	strb	r2, [r3, #1]
				EnQueue(pQueue,next);
 8017544:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017548:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801754c:	6819      	ldr	r1, [r3, #0]
 801754e:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8017552:	f7ec fc91 	bl	8003e78 <EnQueue>
			}
		}
		if (((uc_wallData & 0x02) == 0x00) && (x != (MAP_X_SIZE - 1))) {
 8017556:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 801755a:	f003 0302 	and.w	r3, r3, #2
 801755e:	2b00      	cmp	r3, #0
 8017560:	d146      	bne.n	80175f0 <MAP_makeContourMap_queue+0x27c>
 8017562:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8017566:	2b1f      	cmp	r3, #31
 8017568:	d042      	beq.n	80175f0 <MAP_makeContourMap_queue+0x27c>
			if (us_Cmap[y][x + 1] > focus_step + 1) {
 801756a:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 801756e:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8017572:	3301      	adds	r3, #1
 8017574:	4972      	ldr	r1, [pc, #456]	@ (8017740 <MAP_makeContourMap_queue+0x3cc>)
 8017576:	0152      	lsls	r2, r2, #5
 8017578:	4413      	add	r3, r2
 801757a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801757e:	461a      	mov	r2, r3
 8017580:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8017584:	3301      	adds	r3, #1
 8017586:	429a      	cmp	r2, r3
 8017588:	dd32      	ble.n	80175f0 <MAP_makeContourMap_queue+0x27c>
				next.step = focus_step + 1;
 801758a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 801758e:	3301      	adds	r3, #1
 8017590:	b29a      	uxth	r2, r3
 8017592:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017596:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801759a:	805a      	strh	r2, [r3, #2]
				us_Cmap[y][x + 1] = focus_step + 1;
 801759c:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 80175a0:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80175a4:	3301      	adds	r3, #1
 80175a6:	f8b7 1126 	ldrh.w	r1, [r7, #294]	@ 0x126
 80175aa:	3101      	adds	r1, #1
 80175ac:	b288      	uxth	r0, r1
 80175ae:	4964      	ldr	r1, [pc, #400]	@ (8017740 <MAP_makeContourMap_queue+0x3cc>)
 80175b0:	0152      	lsls	r2, r2, #5
 80175b2:	4413      	add	r3, r2
 80175b4:	4602      	mov	r2, r0
 80175b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x + 1;
 80175ba:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80175be:	b2db      	uxtb	r3, r3
 80175c0:	3301      	adds	r3, #1
 80175c2:	b2da      	uxtb	r2, r3
 80175c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80175c8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80175cc:	701a      	strb	r2, [r3, #0]
				next.y = y;
 80175ce:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80175d2:	b2da      	uxtb	r2, r3
 80175d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80175d8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80175dc:	705a      	strb	r2, [r3, #1]
				EnQueue(pQueue, next);
 80175de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80175e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80175e6:	6819      	ldr	r1, [r3, #0]
 80175e8:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80175ec:	f7ec fc44 	bl	8003e78 <EnQueue>
			}
		}
		if (((uc_wallData & 0x04) == 0x00) && (y != 0)) {
 80175f0:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 80175f4:	f003 0304 	and.w	r3, r3, #4
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d146      	bne.n	801768a <MAP_makeContourMap_queue+0x316>
 80175fc:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8017600:	2b00      	cmp	r3, #0
 8017602:	d042      	beq.n	801768a <MAP_makeContourMap_queue+0x316>
			if (us_Cmap[y - 1][x] > focus_step + 1) {
 8017604:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8017608:	1e5a      	subs	r2, r3, #1
 801760a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801760e:	494c      	ldr	r1, [pc, #304]	@ (8017740 <MAP_makeContourMap_queue+0x3cc>)
 8017610:	0152      	lsls	r2, r2, #5
 8017612:	4413      	add	r3, r2
 8017614:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017618:	461a      	mov	r2, r3
 801761a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 801761e:	3301      	adds	r3, #1
 8017620:	429a      	cmp	r2, r3
 8017622:	dd32      	ble.n	801768a <MAP_makeContourMap_queue+0x316>
				next.step = focus_step + 1;
 8017624:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8017628:	3301      	adds	r3, #1
 801762a:	b29a      	uxth	r2, r3
 801762c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017630:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8017634:	805a      	strh	r2, [r3, #2]
				us_Cmap[y - 1][x] = focus_step + 1;
 8017636:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 801763a:	1e5a      	subs	r2, r3, #1
 801763c:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8017640:	f8b7 1126 	ldrh.w	r1, [r7, #294]	@ 0x126
 8017644:	3101      	adds	r1, #1
 8017646:	b288      	uxth	r0, r1
 8017648:	493d      	ldr	r1, [pc, #244]	@ (8017740 <MAP_makeContourMap_queue+0x3cc>)
 801764a:	0152      	lsls	r2, r2, #5
 801764c:	4413      	add	r3, r2
 801764e:	4602      	mov	r2, r0
 8017650:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 8017654:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8017658:	b2da      	uxtb	r2, r3
 801765a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801765e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8017662:	701a      	strb	r2, [r3, #0]
				next.y = y - 1;
 8017664:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8017668:	b2db      	uxtb	r3, r3
 801766a:	3b01      	subs	r3, #1
 801766c:	b2da      	uxtb	r2, r3
 801766e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017672:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8017676:	705a      	strb	r2, [r3, #1]
				EnQueue(pQueue, next);
 8017678:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801767c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8017680:	6819      	ldr	r1, [r3, #0]
 8017682:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8017686:	f7ec fbf7 	bl	8003e78 <EnQueue>
			}
		}
		if (((uc_wallData & 0x08) == 0x00) && (x != 0)) {
 801768a:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 801768e:	f003 0308 	and.w	r3, r3, #8
 8017692:	2b00      	cmp	r3, #0
 8017694:	d146      	bne.n	8017724 <MAP_makeContourMap_queue+0x3b0>
 8017696:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801769a:	2b00      	cmp	r3, #0
 801769c:	d042      	beq.n	8017724 <MAP_makeContourMap_queue+0x3b0>
			if (us_Cmap[y][x - 1] > focus_step + 1) {
 801769e:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 80176a2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80176a6:	3b01      	subs	r3, #1
 80176a8:	4925      	ldr	r1, [pc, #148]	@ (8017740 <MAP_makeContourMap_queue+0x3cc>)
 80176aa:	0152      	lsls	r2, r2, #5
 80176ac:	4413      	add	r3, r2
 80176ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80176b2:	461a      	mov	r2, r3
 80176b4:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80176b8:	3301      	adds	r3, #1
 80176ba:	429a      	cmp	r2, r3
 80176bc:	dd32      	ble.n	8017724 <MAP_makeContourMap_queue+0x3b0>
				next.step = focus_step + 1;
 80176be:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80176c2:	3301      	adds	r3, #1
 80176c4:	b29a      	uxth	r2, r3
 80176c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80176ca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80176ce:	805a      	strh	r2, [r3, #2]
				us_Cmap[y][x - 1] = focus_step + 1;
 80176d0:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 80176d4:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80176d8:	3b01      	subs	r3, #1
 80176da:	f8b7 1126 	ldrh.w	r1, [r7, #294]	@ 0x126
 80176de:	3101      	adds	r1, #1
 80176e0:	b288      	uxth	r0, r1
 80176e2:	4917      	ldr	r1, [pc, #92]	@ (8017740 <MAP_makeContourMap_queue+0x3cc>)
 80176e4:	0152      	lsls	r2, r2, #5
 80176e6:	4413      	add	r3, r2
 80176e8:	4602      	mov	r2, r0
 80176ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x - 1;
 80176ee:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80176f2:	b2db      	uxtb	r3, r3
 80176f4:	3b01      	subs	r3, #1
 80176f6:	b2da      	uxtb	r2, r3
 80176f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80176fc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8017700:	701a      	strb	r2, [r3, #0]
				next.y = y;
 8017702:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8017706:	b2da      	uxtb	r2, r3
 8017708:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801770c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8017710:	705a      	strb	r2, [r3, #1]
				EnQueue(pQueue, next);
 8017712:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8017716:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801771a:	6819      	ldr	r1, [r3, #0]
 801771c:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8017720:	f7ec fbaa 	bl	8003e78 <EnQueue>
	while (pQueue->flag != EMPTY) {
 8017724:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017728:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801772c:	2b00      	cmp	r3, #0
 801772e:	f47f ae91 	bne.w	8017454 <MAP_makeContourMap_queue+0xe0>
			}
		}

	}

}
 8017732:	bf00      	nop
 8017734:	bf00      	nop
 8017736:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 801773a:	46bd      	mov	sp, r7
 801773c:	bd90      	pop	{r4, r7, pc}
 801773e:	bf00      	nop
 8017740:	2001ada0 	.word	0x2001ada0
 8017744:	2001b5a0 	.word	0x2001b5a0

08017748 <MAP_makeContourMap_run>:

void  MAP_makeContourMap_run( //初期型のフルマップ生成　最短用に使用
	uint8_t uc_goalX, 			///< [in] ゴールX座標
	uint8_t uc_goalY, 			///< [in] ゴールY座標
	enMAP_ACT_MODE	en_type		///< [in] 計算方法（まだ未使用）
) {
 8017748:	b480      	push	{r7}
 801774a:	b087      	sub	sp, #28
 801774c:	af00      	add	r7, sp, #0
 801774e:	4603      	mov	r3, r0
 8017750:	71fb      	strb	r3, [r7, #7]
 8017752:	460b      	mov	r3, r1
 8017754:	71bb      	strb	r3, [r7, #6]
 8017756:	4613      	mov	r3, r2
 8017758:	717b      	strb	r3, [r7, #5]
	uint8_t		uc_wallData;	// 壁情報

	en_type = en_type;		// コンパイルワーニング回避（いずれ削除）

	/* 等高線マップを初期化する */
	for ( i = 0; i < MAP_SMAP_MAX_VAL; i++ ){
 801775a:	2300      	movs	r3, #0
 801775c:	827b      	strh	r3, [r7, #18]
 801775e:	e010      	b.n	8017782 <MAP_makeContourMap_run+0x3a>
		us_Cmap[ i / MAP_Y_SIZE][ i & (MAP_X_SIZE-1) ] = MAP_SMAP_MAX_VAL - 1;
 8017760:	8a7b      	ldrh	r3, [r7, #18]
 8017762:	095b      	lsrs	r3, r3, #5
 8017764:	b29b      	uxth	r3, r3
 8017766:	461a      	mov	r2, r3
 8017768:	8a7b      	ldrh	r3, [r7, #18]
 801776a:	f003 031f 	and.w	r3, r3, #31
 801776e:	4997      	ldr	r1, [pc, #604]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 8017770:	0152      	lsls	r2, r2, #5
 8017772:	4413      	add	r3, r2
 8017774:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8017778:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for ( i = 0; i < MAP_SMAP_MAX_VAL; i++ ){
 801777c:	8a7b      	ldrh	r3, [r7, #18]
 801777e:	3301      	adds	r3, #1
 8017780:	827b      	strh	r3, [r7, #18]
 8017782:	8a7b      	ldrh	r3, [r7, #18]
 8017784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017788:	d3ea      	bcc.n	8017760 <MAP_makeContourMap_run+0x18>
	}
	/* 目標地点の等高線を0に設定 */
	us_Cmap[uc_goalY][uc_goalX] = 0;
 801778a:	79ba      	ldrb	r2, [r7, #6]
 801778c:	79fb      	ldrb	r3, [r7, #7]
 801778e:	498f      	ldr	r1, [pc, #572]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 8017790:	0152      	lsls	r2, r2, #5
 8017792:	4413      	add	r3, r2
 8017794:	2200      	movs	r2, #0
 8017796:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	if (GOAL_SIZE == 4) {
 801779a:	4b8d      	ldr	r3, [pc, #564]	@ (80179d0 <MAP_makeContourMap_run+0x288>)
 801779c:	781b      	ldrb	r3, [r3, #0]
 801779e:	2b04      	cmp	r3, #4
 80177a0:	d11c      	bne.n	80177dc <MAP_makeContourMap_run+0x94>
		us_Cmap[uc_goalY + 1][uc_goalX] = 0;
 80177a2:	79bb      	ldrb	r3, [r7, #6]
 80177a4:	1c5a      	adds	r2, r3, #1
 80177a6:	79fb      	ldrb	r3, [r7, #7]
 80177a8:	4988      	ldr	r1, [pc, #544]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 80177aa:	0152      	lsls	r2, r2, #5
 80177ac:	4413      	add	r3, r2
 80177ae:	2200      	movs	r2, #0
 80177b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY][uc_goalX + 1] = 0;
 80177b4:	79ba      	ldrb	r2, [r7, #6]
 80177b6:	79fb      	ldrb	r3, [r7, #7]
 80177b8:	3301      	adds	r3, #1
 80177ba:	4984      	ldr	r1, [pc, #528]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 80177bc:	0152      	lsls	r2, r2, #5
 80177be:	4413      	add	r3, r2
 80177c0:	2200      	movs	r2, #0
 80177c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY + 1][uc_goalX + 1] = 0;
 80177c6:	79bb      	ldrb	r3, [r7, #6]
 80177c8:	1c5a      	adds	r2, r3, #1
 80177ca:	79fb      	ldrb	r3, [r7, #7]
 80177cc:	3301      	adds	r3, #1
 80177ce:	497f      	ldr	r1, [pc, #508]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 80177d0:	0152      	lsls	r2, r2, #5
 80177d2:	4413      	add	r3, r2
 80177d4:	2200      	movs	r2, #0
 80177d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80177da:	e04f      	b.n	801787c <MAP_makeContourMap_run+0x134>
	}
	else if (GOAL_SIZE == 9){
 80177dc:	4b7c      	ldr	r3, [pc, #496]	@ (80179d0 <MAP_makeContourMap_run+0x288>)
 80177de:	781b      	ldrb	r3, [r3, #0]
 80177e0:	2b09      	cmp	r3, #9
 80177e2:	d14b      	bne.n	801787c <MAP_makeContourMap_run+0x134>
		us_Cmap[uc_goalY+1][uc_goalX] = 0;
 80177e4:	79bb      	ldrb	r3, [r7, #6]
 80177e6:	1c5a      	adds	r2, r3, #1
 80177e8:	79fb      	ldrb	r3, [r7, #7]
 80177ea:	4978      	ldr	r1, [pc, #480]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 80177ec:	0152      	lsls	r2, r2, #5
 80177ee:	4413      	add	r3, r2
 80177f0:	2200      	movs	r2, #0
 80177f2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY][uc_goalX+1] = 0;
 80177f6:	79ba      	ldrb	r2, [r7, #6]
 80177f8:	79fb      	ldrb	r3, [r7, #7]
 80177fa:	3301      	adds	r3, #1
 80177fc:	4973      	ldr	r1, [pc, #460]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 80177fe:	0152      	lsls	r2, r2, #5
 8017800:	4413      	add	r3, r2
 8017802:	2200      	movs	r2, #0
 8017804:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+1][uc_goalX+1] = 0;
 8017808:	79bb      	ldrb	r3, [r7, #6]
 801780a:	1c5a      	adds	r2, r3, #1
 801780c:	79fb      	ldrb	r3, [r7, #7]
 801780e:	3301      	adds	r3, #1
 8017810:	496e      	ldr	r1, [pc, #440]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 8017812:	0152      	lsls	r2, r2, #5
 8017814:	4413      	add	r3, r2
 8017816:	2200      	movs	r2, #0
 8017818:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+2][uc_goalX] = 0;
 801781c:	79bb      	ldrb	r3, [r7, #6]
 801781e:	1c9a      	adds	r2, r3, #2
 8017820:	79fb      	ldrb	r3, [r7, #7]
 8017822:	496a      	ldr	r1, [pc, #424]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 8017824:	0152      	lsls	r2, r2, #5
 8017826:	4413      	add	r3, r2
 8017828:	2200      	movs	r2, #0
 801782a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+2][uc_goalX+1] = 0;
 801782e:	79bb      	ldrb	r3, [r7, #6]
 8017830:	1c9a      	adds	r2, r3, #2
 8017832:	79fb      	ldrb	r3, [r7, #7]
 8017834:	3301      	adds	r3, #1
 8017836:	4965      	ldr	r1, [pc, #404]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 8017838:	0152      	lsls	r2, r2, #5
 801783a:	4413      	add	r3, r2
 801783c:	2200      	movs	r2, #0
 801783e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY][uc_goalX+2] = 0;
 8017842:	79ba      	ldrb	r2, [r7, #6]
 8017844:	79fb      	ldrb	r3, [r7, #7]
 8017846:	3302      	adds	r3, #2
 8017848:	4960      	ldr	r1, [pc, #384]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 801784a:	0152      	lsls	r2, r2, #5
 801784c:	4413      	add	r3, r2
 801784e:	2200      	movs	r2, #0
 8017850:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+1][uc_goalX+2] = 0;
 8017854:	79bb      	ldrb	r3, [r7, #6]
 8017856:	1c5a      	adds	r2, r3, #1
 8017858:	79fb      	ldrb	r3, [r7, #7]
 801785a:	3302      	adds	r3, #2
 801785c:	495b      	ldr	r1, [pc, #364]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 801785e:	0152      	lsls	r2, r2, #5
 8017860:	4413      	add	r3, r2
 8017862:	2200      	movs	r2, #0
 8017864:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+2][uc_goalX+2] = 0;
 8017868:	79bb      	ldrb	r3, [r7, #6]
 801786a:	1c9a      	adds	r2, r3, #2
 801786c:	79fb      	ldrb	r3, [r7, #7]
 801786e:	3302      	adds	r3, #2
 8017870:	4956      	ldr	r1, [pc, #344]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 8017872:	0152      	lsls	r2, r2, #5
 8017874:	4413      	add	r3, r2
 8017876:	2200      	movs	r2, #0
 8017878:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}

	/* 等高線マップを作成 */
	uc_dase = 0;
 801787c:	2300      	movs	r3, #0
 801787e:	823b      	strh	r3, [r7, #16]
	do{
		uc_level = 0;
 8017880:	2300      	movs	r3, #0
 8017882:	81fb      	strh	r3, [r7, #14]
		uc_new = uc_dase + 1;
 8017884:	8a3b      	ldrh	r3, [r7, #16]
 8017886:	3301      	adds	r3, #1
 8017888:	81bb      	strh	r3, [r7, #12]
		for ( y = 0; y < MAP_Y_SIZE; y++ ){
 801788a:	2300      	movs	r3, #0
 801788c:	82bb      	strh	r3, [r7, #20]
 801788e:	e12d      	b.n	8017aec <MAP_makeContourMap_run+0x3a4>
			for ( x = 0; x < MAP_X_SIZE; x++ ){
 8017890:	2300      	movs	r3, #0
 8017892:	82fb      	strh	r3, [r7, #22]
 8017894:	e123      	b.n	8017ade <MAP_makeContourMap_run+0x396>
				if ( us_Cmap[y][x] == uc_dase ){
 8017896:	8aba      	ldrh	r2, [r7, #20]
 8017898:	8afb      	ldrh	r3, [r7, #22]
 801789a:	494c      	ldr	r1, [pc, #304]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 801789c:	0152      	lsls	r2, r2, #5
 801789e:	4413      	add	r3, r2
 80178a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80178a4:	8a3a      	ldrh	r2, [r7, #16]
 80178a6:	429a      	cmp	r2, r3
 80178a8:	f040 8116 	bne.w	8017ad8 <MAP_makeContourMap_run+0x390>
					uc_wallData = g_SysMap[y][x];
 80178ac:	8aba      	ldrh	r2, [r7, #20]
 80178ae:	8afb      	ldrh	r3, [r7, #22]
 80178b0:	4948      	ldr	r1, [pc, #288]	@ (80179d4 <MAP_makeContourMap_run+0x28c>)
 80178b2:	0152      	lsls	r2, r2, #5
 80178b4:	440a      	add	r2, r1
 80178b6:	4413      	add	r3, r2
 80178b8:	781b      	ldrb	r3, [r3, #0]
 80178ba:	72fb      	strb	r3, [r7, #11]
					/* 探索走行 */
					if( SEARCH == en_type ){
 80178bc:	797b      	ldrb	r3, [r7, #5]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	f040 808a 	bne.w	80179d8 <MAP_makeContourMap_run+0x290>
						if ( ( ( uc_wallData & 0x01 ) == 0x00 ) && ( y != (MAP_Y_SIZE-1) ) ){
 80178c4:	7afb      	ldrb	r3, [r7, #11]
 80178c6:	f003 0301 	and.w	r3, r3, #1
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d11a      	bne.n	8017904 <MAP_makeContourMap_run+0x1bc>
 80178ce:	8abb      	ldrh	r3, [r7, #20]
 80178d0:	2b1f      	cmp	r3, #31
 80178d2:	d017      	beq.n	8017904 <MAP_makeContourMap_run+0x1bc>
							if ( us_Cmap[y+1][x] == MAP_SMAP_MAX_VAL - 1 ){
 80178d4:	8abb      	ldrh	r3, [r7, #20]
 80178d6:	1c5a      	adds	r2, r3, #1
 80178d8:	8afb      	ldrh	r3, [r7, #22]
 80178da:	493c      	ldr	r1, [pc, #240]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 80178dc:	0152      	lsls	r2, r2, #5
 80178de:	4413      	add	r3, r2
 80178e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80178e4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80178e8:	4293      	cmp	r3, r2
 80178ea:	d10b      	bne.n	8017904 <MAP_makeContourMap_run+0x1bc>
								us_Cmap[y+1][x] = uc_new;
 80178ec:	8abb      	ldrh	r3, [r7, #20]
 80178ee:	1c5a      	adds	r2, r3, #1
 80178f0:	8afb      	ldrh	r3, [r7, #22]
 80178f2:	4936      	ldr	r1, [pc, #216]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 80178f4:	0152      	lsls	r2, r2, #5
 80178f6:	4413      	add	r3, r2
 80178f8:	89ba      	ldrh	r2, [r7, #12]
 80178fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 80178fe:	89fb      	ldrh	r3, [r7, #14]
 8017900:	3301      	adds	r3, #1
 8017902:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x02 ) == 0x00 ) && ( x != (MAP_X_SIZE-1) ) ){
 8017904:	7afb      	ldrb	r3, [r7, #11]
 8017906:	f003 0302 	and.w	r3, r3, #2
 801790a:	2b00      	cmp	r3, #0
 801790c:	d11a      	bne.n	8017944 <MAP_makeContourMap_run+0x1fc>
 801790e:	8afb      	ldrh	r3, [r7, #22]
 8017910:	2b1f      	cmp	r3, #31
 8017912:	d017      	beq.n	8017944 <MAP_makeContourMap_run+0x1fc>
							if ( us_Cmap[y][x+1] == MAP_SMAP_MAX_VAL - 1 ){
 8017914:	8aba      	ldrh	r2, [r7, #20]
 8017916:	8afb      	ldrh	r3, [r7, #22]
 8017918:	3301      	adds	r3, #1
 801791a:	492c      	ldr	r1, [pc, #176]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 801791c:	0152      	lsls	r2, r2, #5
 801791e:	4413      	add	r3, r2
 8017920:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017924:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8017928:	4293      	cmp	r3, r2
 801792a:	d10b      	bne.n	8017944 <MAP_makeContourMap_run+0x1fc>
								us_Cmap[y][x+1] = uc_new;
 801792c:	8aba      	ldrh	r2, [r7, #20]
 801792e:	8afb      	ldrh	r3, [r7, #22]
 8017930:	3301      	adds	r3, #1
 8017932:	4926      	ldr	r1, [pc, #152]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 8017934:	0152      	lsls	r2, r2, #5
 8017936:	4413      	add	r3, r2
 8017938:	89ba      	ldrh	r2, [r7, #12]
 801793a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 801793e:	89fb      	ldrh	r3, [r7, #14]
 8017940:	3301      	adds	r3, #1
 8017942:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x04 ) == 0x00 ) && ( y != 0 ) ){
 8017944:	7afb      	ldrb	r3, [r7, #11]
 8017946:	f003 0304 	and.w	r3, r3, #4
 801794a:	2b00      	cmp	r3, #0
 801794c:	d11a      	bne.n	8017984 <MAP_makeContourMap_run+0x23c>
 801794e:	8abb      	ldrh	r3, [r7, #20]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d017      	beq.n	8017984 <MAP_makeContourMap_run+0x23c>
							if ( us_Cmap[y-1][x] == MAP_SMAP_MAX_VAL - 1 ){
 8017954:	8abb      	ldrh	r3, [r7, #20]
 8017956:	1e5a      	subs	r2, r3, #1
 8017958:	8afb      	ldrh	r3, [r7, #22]
 801795a:	491c      	ldr	r1, [pc, #112]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 801795c:	0152      	lsls	r2, r2, #5
 801795e:	4413      	add	r3, r2
 8017960:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017964:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8017968:	4293      	cmp	r3, r2
 801796a:	d10b      	bne.n	8017984 <MAP_makeContourMap_run+0x23c>
								us_Cmap[y-1][x] = uc_new;
 801796c:	8abb      	ldrh	r3, [r7, #20]
 801796e:	1e5a      	subs	r2, r3, #1
 8017970:	8afb      	ldrh	r3, [r7, #22]
 8017972:	4916      	ldr	r1, [pc, #88]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 8017974:	0152      	lsls	r2, r2, #5
 8017976:	4413      	add	r3, r2
 8017978:	89ba      	ldrh	r2, [r7, #12]
 801797a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 801797e:	89fb      	ldrh	r3, [r7, #14]
 8017980:	3301      	adds	r3, #1
 8017982:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x08 ) == 0x00 ) && ( x != 0 ) ){
 8017984:	7afb      	ldrb	r3, [r7, #11]
 8017986:	f003 0308 	and.w	r3, r3, #8
 801798a:	2b00      	cmp	r3, #0
 801798c:	f040 80a4 	bne.w	8017ad8 <MAP_makeContourMap_run+0x390>
 8017990:	8afb      	ldrh	r3, [r7, #22]
 8017992:	2b00      	cmp	r3, #0
 8017994:	f000 80a0 	beq.w	8017ad8 <MAP_makeContourMap_run+0x390>
							if ( us_Cmap[y][x-1] == MAP_SMAP_MAX_VAL - 1 ){
 8017998:	8aba      	ldrh	r2, [r7, #20]
 801799a:	8afb      	ldrh	r3, [r7, #22]
 801799c:	3b01      	subs	r3, #1
 801799e:	490b      	ldr	r1, [pc, #44]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 80179a0:	0152      	lsls	r2, r2, #5
 80179a2:	4413      	add	r3, r2
 80179a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80179a8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80179ac:	4293      	cmp	r3, r2
 80179ae:	f040 8093 	bne.w	8017ad8 <MAP_makeContourMap_run+0x390>
								us_Cmap[y][x-1] = uc_new;
 80179b2:	8aba      	ldrh	r2, [r7, #20]
 80179b4:	8afb      	ldrh	r3, [r7, #22]
 80179b6:	3b01      	subs	r3, #1
 80179b8:	4904      	ldr	r1, [pc, #16]	@ (80179cc <MAP_makeContourMap_run+0x284>)
 80179ba:	0152      	lsls	r2, r2, #5
 80179bc:	4413      	add	r3, r2
 80179be:	89ba      	ldrh	r2, [r7, #12]
 80179c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 80179c4:	89fb      	ldrh	r3, [r7, #14]
 80179c6:	3301      	adds	r3, #1
 80179c8:	81fb      	strh	r3, [r7, #14]
 80179ca:	e085      	b.n	8017ad8 <MAP_makeContourMap_run+0x390>
 80179cc:	2001ada0 	.word	0x2001ada0
 80179d0:	2001ad97 	.word	0x2001ad97
 80179d4:	2001b5a0 	.word	0x2001b5a0
							}
						}
					}
					/* 最短走行 */
					else{
						if ( ( ( uc_wallData & 0x11 ) == 0x10 ) && ( y != (MAP_Y_SIZE-1) ) ){
 80179d8:	7afb      	ldrb	r3, [r7, #11]
 80179da:	f003 0311 	and.w	r3, r3, #17
 80179de:	2b10      	cmp	r3, #16
 80179e0:	d11a      	bne.n	8017a18 <MAP_makeContourMap_run+0x2d0>
 80179e2:	8abb      	ldrh	r3, [r7, #20]
 80179e4:	2b1f      	cmp	r3, #31
 80179e6:	d017      	beq.n	8017a18 <MAP_makeContourMap_run+0x2d0>
							if ( us_Cmap[y+1][x] == MAP_SMAP_MAX_VAL - 1 ){
 80179e8:	8abb      	ldrh	r3, [r7, #20]
 80179ea:	1c5a      	adds	r2, r3, #1
 80179ec:	8afb      	ldrh	r3, [r7, #22]
 80179ee:	4948      	ldr	r1, [pc, #288]	@ (8017b10 <MAP_makeContourMap_run+0x3c8>)
 80179f0:	0152      	lsls	r2, r2, #5
 80179f2:	4413      	add	r3, r2
 80179f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80179f8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80179fc:	4293      	cmp	r3, r2
 80179fe:	d10b      	bne.n	8017a18 <MAP_makeContourMap_run+0x2d0>
								us_Cmap[y+1][x] = uc_new;
 8017a00:	8abb      	ldrh	r3, [r7, #20]
 8017a02:	1c5a      	adds	r2, r3, #1
 8017a04:	8afb      	ldrh	r3, [r7, #22]
 8017a06:	4942      	ldr	r1, [pc, #264]	@ (8017b10 <MAP_makeContourMap_run+0x3c8>)
 8017a08:	0152      	lsls	r2, r2, #5
 8017a0a:	4413      	add	r3, r2
 8017a0c:	89ba      	ldrh	r2, [r7, #12]
 8017a0e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8017a12:	89fb      	ldrh	r3, [r7, #14]
 8017a14:	3301      	adds	r3, #1
 8017a16:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x22 ) == 0x20 ) && ( x != (MAP_X_SIZE-1) ) ){
 8017a18:	7afb      	ldrb	r3, [r7, #11]
 8017a1a:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8017a1e:	2b20      	cmp	r3, #32
 8017a20:	d11a      	bne.n	8017a58 <MAP_makeContourMap_run+0x310>
 8017a22:	8afb      	ldrh	r3, [r7, #22]
 8017a24:	2b1f      	cmp	r3, #31
 8017a26:	d017      	beq.n	8017a58 <MAP_makeContourMap_run+0x310>
							if ( us_Cmap[y][x+1] == MAP_SMAP_MAX_VAL - 1 ){
 8017a28:	8aba      	ldrh	r2, [r7, #20]
 8017a2a:	8afb      	ldrh	r3, [r7, #22]
 8017a2c:	3301      	adds	r3, #1
 8017a2e:	4938      	ldr	r1, [pc, #224]	@ (8017b10 <MAP_makeContourMap_run+0x3c8>)
 8017a30:	0152      	lsls	r2, r2, #5
 8017a32:	4413      	add	r3, r2
 8017a34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017a38:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8017a3c:	4293      	cmp	r3, r2
 8017a3e:	d10b      	bne.n	8017a58 <MAP_makeContourMap_run+0x310>
								us_Cmap[y][x+1] = uc_new;
 8017a40:	8aba      	ldrh	r2, [r7, #20]
 8017a42:	8afb      	ldrh	r3, [r7, #22]
 8017a44:	3301      	adds	r3, #1
 8017a46:	4932      	ldr	r1, [pc, #200]	@ (8017b10 <MAP_makeContourMap_run+0x3c8>)
 8017a48:	0152      	lsls	r2, r2, #5
 8017a4a:	4413      	add	r3, r2
 8017a4c:	89ba      	ldrh	r2, [r7, #12]
 8017a4e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8017a52:	89fb      	ldrh	r3, [r7, #14]
 8017a54:	3301      	adds	r3, #1
 8017a56:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x44 ) == 0x40 ) && ( y != 0 ) ){
 8017a58:	7afb      	ldrb	r3, [r7, #11]
 8017a5a:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8017a5e:	2b40      	cmp	r3, #64	@ 0x40
 8017a60:	d11a      	bne.n	8017a98 <MAP_makeContourMap_run+0x350>
 8017a62:	8abb      	ldrh	r3, [r7, #20]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d017      	beq.n	8017a98 <MAP_makeContourMap_run+0x350>
							if ( us_Cmap[y-1][x] == MAP_SMAP_MAX_VAL - 1 ){
 8017a68:	8abb      	ldrh	r3, [r7, #20]
 8017a6a:	1e5a      	subs	r2, r3, #1
 8017a6c:	8afb      	ldrh	r3, [r7, #22]
 8017a6e:	4928      	ldr	r1, [pc, #160]	@ (8017b10 <MAP_makeContourMap_run+0x3c8>)
 8017a70:	0152      	lsls	r2, r2, #5
 8017a72:	4413      	add	r3, r2
 8017a74:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017a78:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8017a7c:	4293      	cmp	r3, r2
 8017a7e:	d10b      	bne.n	8017a98 <MAP_makeContourMap_run+0x350>
								us_Cmap[y-1][x] = uc_new;
 8017a80:	8abb      	ldrh	r3, [r7, #20]
 8017a82:	1e5a      	subs	r2, r3, #1
 8017a84:	8afb      	ldrh	r3, [r7, #22]
 8017a86:	4922      	ldr	r1, [pc, #136]	@ (8017b10 <MAP_makeContourMap_run+0x3c8>)
 8017a88:	0152      	lsls	r2, r2, #5
 8017a8a:	4413      	add	r3, r2
 8017a8c:	89ba      	ldrh	r2, [r7, #12]
 8017a8e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8017a92:	89fb      	ldrh	r3, [r7, #14]
 8017a94:	3301      	adds	r3, #1
 8017a96:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x88 ) == 0x80 ) && ( x != 0 ) ){
 8017a98:	7afb      	ldrb	r3, [r7, #11]
 8017a9a:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 8017a9e:	2b80      	cmp	r3, #128	@ 0x80
 8017aa0:	d11a      	bne.n	8017ad8 <MAP_makeContourMap_run+0x390>
 8017aa2:	8afb      	ldrh	r3, [r7, #22]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d017      	beq.n	8017ad8 <MAP_makeContourMap_run+0x390>
							if ( us_Cmap[y][x-1] == MAP_SMAP_MAX_VAL - 1 ){
 8017aa8:	8aba      	ldrh	r2, [r7, #20]
 8017aaa:	8afb      	ldrh	r3, [r7, #22]
 8017aac:	3b01      	subs	r3, #1
 8017aae:	4918      	ldr	r1, [pc, #96]	@ (8017b10 <MAP_makeContourMap_run+0x3c8>)
 8017ab0:	0152      	lsls	r2, r2, #5
 8017ab2:	4413      	add	r3, r2
 8017ab4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017ab8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8017abc:	4293      	cmp	r3, r2
 8017abe:	d10b      	bne.n	8017ad8 <MAP_makeContourMap_run+0x390>
								us_Cmap[y][x-1] = uc_new;
 8017ac0:	8aba      	ldrh	r2, [r7, #20]
 8017ac2:	8afb      	ldrh	r3, [r7, #22]
 8017ac4:	3b01      	subs	r3, #1
 8017ac6:	4912      	ldr	r1, [pc, #72]	@ (8017b10 <MAP_makeContourMap_run+0x3c8>)
 8017ac8:	0152      	lsls	r2, r2, #5
 8017aca:	4413      	add	r3, r2
 8017acc:	89ba      	ldrh	r2, [r7, #12]
 8017ace:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8017ad2:	89fb      	ldrh	r3, [r7, #14]
 8017ad4:	3301      	adds	r3, #1
 8017ad6:	81fb      	strh	r3, [r7, #14]
			for ( x = 0; x < MAP_X_SIZE; x++ ){
 8017ad8:	8afb      	ldrh	r3, [r7, #22]
 8017ada:	3301      	adds	r3, #1
 8017adc:	82fb      	strh	r3, [r7, #22]
 8017ade:	8afb      	ldrh	r3, [r7, #22]
 8017ae0:	2b1f      	cmp	r3, #31
 8017ae2:	f67f aed8 	bls.w	8017896 <MAP_makeContourMap_run+0x14e>
		for ( y = 0; y < MAP_Y_SIZE; y++ ){
 8017ae6:	8abb      	ldrh	r3, [r7, #20]
 8017ae8:	3301      	adds	r3, #1
 8017aea:	82bb      	strh	r3, [r7, #20]
 8017aec:	8abb      	ldrh	r3, [r7, #20]
 8017aee:	2b1f      	cmp	r3, #31
 8017af0:	f67f aece 	bls.w	8017890 <MAP_makeContourMap_run+0x148>
						}
					}
				}
			}
		}
		uc_dase = uc_dase + 1;
 8017af4:	8a3b      	ldrh	r3, [r7, #16]
 8017af6:	3301      	adds	r3, #1
 8017af8:	823b      	strh	r3, [r7, #16]
	}
	while( uc_level != 0 );
 8017afa:	89fb      	ldrh	r3, [r7, #14]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	f47f aebf 	bne.w	8017880 <MAP_makeContourMap_run+0x138>
	
}
 8017b02:	bf00      	nop
 8017b04:	bf00      	nop
 8017b06:	371c      	adds	r7, #28
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0e:	4770      	bx	lr
 8017b10:	2001ada0 	.word	0x2001ada0

08017b14 <MAP_calcMouseDir>:

void MAP_calcMouseDir( 
	enMAP_SEARCH_TYPE	en_calcType,	///< [in] 計算方法
	enMAP_HEAD_DIR* 	p_head			///< [out] 進行方向（戻り値）
){
 8017b14:	b480      	push	{r7}
 8017b16:	b085      	sub	sp, #20
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	6039      	str	r1, [r7, #0]
 8017b1e:	71fb      	strb	r3, [r7, #7]
	uint16_t		us_new;
	enMAP_HEAD_DIR	en_tmpHead;

	/* 方向計算 */
	// 等高線MAP法
	if( CONTOUR_SYSTEM == en_calcType ){
 8017b20:	79fb      	ldrb	r3, [r7, #7]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	f040 80ee 	bne.w	8017d04 <MAP_calcMouseDir+0x1f0>
		// 周辺の4区画で一番目的地に近い移動方向を算出する。
		// ただし、移動できる一番近い区間が複数ある場合には、次の順で選択する。
		// ①未探索区間,直進 ②未探索区間,旋回 ③既探索区間,直進 ④既探索区間,旋回
		uc_wall = g_SysMap[my][mx];
 8017b28:	4b7b      	ldr	r3, [pc, #492]	@ (8017d18 <MAP_calcMouseDir+0x204>)
 8017b2a:	781b      	ldrb	r3, [r3, #0]
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	4b7b      	ldr	r3, [pc, #492]	@ (8017d1c <MAP_calcMouseDir+0x208>)
 8017b30:	781b      	ldrb	r3, [r3, #0]
 8017b32:	4619      	mov	r1, r3
 8017b34:	4a7a      	ldr	r2, [pc, #488]	@ (8017d20 <MAP_calcMouseDir+0x20c>)
 8017b36:	0143      	lsls	r3, r0, #5
 8017b38:	4413      	add	r3, r2
 8017b3a:	440b      	add	r3, r1
 8017b3c:	781b      	ldrb	r3, [r3, #0]
 8017b3e:	72bb      	strb	r3, [r7, #10]
		us_base = MAP_SMAP_MAX_PRI_VAL;					// 16[区画]×16[区画]×4[方向]
 8017b40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017b44:	81fb      	strh	r3, [r7, #14]

		/* 4方向を比較 */
		//	北方向の区画の確認
		if ( ( uc_wall & 1 ) == 0 ){
 8017b46:	7abb      	ldrb	r3, [r7, #10]
 8017b48:	f003 0301 	and.w	r3, r3, #1
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d12f      	bne.n	8017bb0 <MAP_calcMouseDir+0x9c>
			us_new = us_Cmap[my+1][mx] * 4 + 4;
 8017b50:	4b71      	ldr	r3, [pc, #452]	@ (8017d18 <MAP_calcMouseDir+0x204>)
 8017b52:	781b      	ldrb	r3, [r3, #0]
 8017b54:	3301      	adds	r3, #1
 8017b56:	4a71      	ldr	r2, [pc, #452]	@ (8017d1c <MAP_calcMouseDir+0x208>)
 8017b58:	7812      	ldrb	r2, [r2, #0]
 8017b5a:	4611      	mov	r1, r2
 8017b5c:	4a71      	ldr	r2, [pc, #452]	@ (8017d24 <MAP_calcMouseDir+0x210>)
 8017b5e:	015b      	lsls	r3, r3, #5
 8017b60:	440b      	add	r3, r1
 8017b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017b66:	3301      	adds	r3, #1
 8017b68:	b29b      	uxth	r3, r3
 8017b6a:	009b      	lsls	r3, r3, #2
 8017b6c:	81bb      	strh	r3, [r7, #12]
			if ( ( g_SysMap[my+1][mx] & 0xf0 ) != 0xf0 ) us_new = us_new - 2;
 8017b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8017d18 <MAP_calcMouseDir+0x204>)
 8017b70:	781b      	ldrb	r3, [r3, #0]
 8017b72:	3301      	adds	r3, #1
 8017b74:	4a69      	ldr	r2, [pc, #420]	@ (8017d1c <MAP_calcMouseDir+0x208>)
 8017b76:	7812      	ldrb	r2, [r2, #0]
 8017b78:	4611      	mov	r1, r2
 8017b7a:	4a69      	ldr	r2, [pc, #420]	@ (8017d20 <MAP_calcMouseDir+0x20c>)
 8017b7c:	015b      	lsls	r3, r3, #5
 8017b7e:	4413      	add	r3, r2
 8017b80:	440b      	add	r3, r1
 8017b82:	781b      	ldrb	r3, [r3, #0]
 8017b84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017b88:	2bf0      	cmp	r3, #240	@ 0xf0
 8017b8a:	d002      	beq.n	8017b92 <MAP_calcMouseDir+0x7e>
 8017b8c:	89bb      	ldrh	r3, [r7, #12]
 8017b8e:	3b02      	subs	r3, #2
 8017b90:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == NORTH ) us_new = us_new - 1;
 8017b92:	4b65      	ldr	r3, [pc, #404]	@ (8017d28 <MAP_calcMouseDir+0x214>)
 8017b94:	781b      	ldrb	r3, [r3, #0]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d102      	bne.n	8017ba0 <MAP_calcMouseDir+0x8c>
 8017b9a:	89bb      	ldrh	r3, [r7, #12]
 8017b9c:	3b01      	subs	r3, #1
 8017b9e:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 8017ba0:	89ba      	ldrh	r2, [r7, #12]
 8017ba2:	89fb      	ldrh	r3, [r7, #14]
 8017ba4:	429a      	cmp	r2, r3
 8017ba6:	d203      	bcs.n	8017bb0 <MAP_calcMouseDir+0x9c>
				us_base = us_new;
 8017ba8:	89bb      	ldrh	r3, [r7, #12]
 8017baa:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = NORTH;
 8017bac:	2300      	movs	r3, #0
 8017bae:	72fb      	strb	r3, [r7, #11]
			}
		}
		//	東方向の区画の確認
		if ( ( uc_wall & 2 ) == 0 ){
 8017bb0:	7abb      	ldrb	r3, [r7, #10]
 8017bb2:	f003 0302 	and.w	r3, r3, #2
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d12f      	bne.n	8017c1a <MAP_calcMouseDir+0x106>
			us_new = us_Cmap[my][mx+1] * 4 + 4;
 8017bba:	4b57      	ldr	r3, [pc, #348]	@ (8017d18 <MAP_calcMouseDir+0x204>)
 8017bbc:	781b      	ldrb	r3, [r3, #0]
 8017bbe:	461a      	mov	r2, r3
 8017bc0:	4b56      	ldr	r3, [pc, #344]	@ (8017d1c <MAP_calcMouseDir+0x208>)
 8017bc2:	781b      	ldrb	r3, [r3, #0]
 8017bc4:	3301      	adds	r3, #1
 8017bc6:	4957      	ldr	r1, [pc, #348]	@ (8017d24 <MAP_calcMouseDir+0x210>)
 8017bc8:	0152      	lsls	r2, r2, #5
 8017bca:	4413      	add	r3, r2
 8017bcc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017bd0:	3301      	adds	r3, #1
 8017bd2:	b29b      	uxth	r3, r3
 8017bd4:	009b      	lsls	r3, r3, #2
 8017bd6:	81bb      	strh	r3, [r7, #12]
			if ( ( g_SysMap[my][mx+1] & 0xf0 ) != 0xf0 ) us_new = us_new - 2;
 8017bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8017d18 <MAP_calcMouseDir+0x204>)
 8017bda:	781b      	ldrb	r3, [r3, #0]
 8017bdc:	461a      	mov	r2, r3
 8017bde:	4b4f      	ldr	r3, [pc, #316]	@ (8017d1c <MAP_calcMouseDir+0x208>)
 8017be0:	781b      	ldrb	r3, [r3, #0]
 8017be2:	3301      	adds	r3, #1
 8017be4:	494e      	ldr	r1, [pc, #312]	@ (8017d20 <MAP_calcMouseDir+0x20c>)
 8017be6:	0152      	lsls	r2, r2, #5
 8017be8:	440a      	add	r2, r1
 8017bea:	4413      	add	r3, r2
 8017bec:	781b      	ldrb	r3, [r3, #0]
 8017bee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017bf2:	2bf0      	cmp	r3, #240	@ 0xf0
 8017bf4:	d002      	beq.n	8017bfc <MAP_calcMouseDir+0xe8>
 8017bf6:	89bb      	ldrh	r3, [r7, #12]
 8017bf8:	3b02      	subs	r3, #2
 8017bfa:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == EAST) us_new = us_new - 1;
 8017bfc:	4b4a      	ldr	r3, [pc, #296]	@ (8017d28 <MAP_calcMouseDir+0x214>)
 8017bfe:	781b      	ldrb	r3, [r3, #0]
 8017c00:	2b01      	cmp	r3, #1
 8017c02:	d102      	bne.n	8017c0a <MAP_calcMouseDir+0xf6>
 8017c04:	89bb      	ldrh	r3, [r7, #12]
 8017c06:	3b01      	subs	r3, #1
 8017c08:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 8017c0a:	89ba      	ldrh	r2, [r7, #12]
 8017c0c:	89fb      	ldrh	r3, [r7, #14]
 8017c0e:	429a      	cmp	r2, r3
 8017c10:	d203      	bcs.n	8017c1a <MAP_calcMouseDir+0x106>
				us_base = us_new;
 8017c12:	89bb      	ldrh	r3, [r7, #12]
 8017c14:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = EAST;
 8017c16:	2301      	movs	r3, #1
 8017c18:	72fb      	strb	r3, [r7, #11]
			}
		}
		//	南方向の区画の確認
		if ( ( uc_wall & 4 ) == 0 ){
 8017c1a:	7abb      	ldrb	r3, [r7, #10]
 8017c1c:	f003 0304 	and.w	r3, r3, #4
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d12f      	bne.n	8017c84 <MAP_calcMouseDir+0x170>
			us_new = us_Cmap[my-1][mx] * 4 + 4;
 8017c24:	4b3c      	ldr	r3, [pc, #240]	@ (8017d18 <MAP_calcMouseDir+0x204>)
 8017c26:	781b      	ldrb	r3, [r3, #0]
 8017c28:	3b01      	subs	r3, #1
 8017c2a:	4a3c      	ldr	r2, [pc, #240]	@ (8017d1c <MAP_calcMouseDir+0x208>)
 8017c2c:	7812      	ldrb	r2, [r2, #0]
 8017c2e:	4611      	mov	r1, r2
 8017c30:	4a3c      	ldr	r2, [pc, #240]	@ (8017d24 <MAP_calcMouseDir+0x210>)
 8017c32:	015b      	lsls	r3, r3, #5
 8017c34:	440b      	add	r3, r1
 8017c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017c3a:	3301      	adds	r3, #1
 8017c3c:	b29b      	uxth	r3, r3
 8017c3e:	009b      	lsls	r3, r3, #2
 8017c40:	81bb      	strh	r3, [r7, #12]
			if ( ( g_SysMap[my-1][mx] & 0xf0 ) != 0xf0) us_new = us_new - 2;
 8017c42:	4b35      	ldr	r3, [pc, #212]	@ (8017d18 <MAP_calcMouseDir+0x204>)
 8017c44:	781b      	ldrb	r3, [r3, #0]
 8017c46:	3b01      	subs	r3, #1
 8017c48:	4a34      	ldr	r2, [pc, #208]	@ (8017d1c <MAP_calcMouseDir+0x208>)
 8017c4a:	7812      	ldrb	r2, [r2, #0]
 8017c4c:	4611      	mov	r1, r2
 8017c4e:	4a34      	ldr	r2, [pc, #208]	@ (8017d20 <MAP_calcMouseDir+0x20c>)
 8017c50:	015b      	lsls	r3, r3, #5
 8017c52:	4413      	add	r3, r2
 8017c54:	440b      	add	r3, r1
 8017c56:	781b      	ldrb	r3, [r3, #0]
 8017c58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017c5c:	2bf0      	cmp	r3, #240	@ 0xf0
 8017c5e:	d002      	beq.n	8017c66 <MAP_calcMouseDir+0x152>
 8017c60:	89bb      	ldrh	r3, [r7, #12]
 8017c62:	3b02      	subs	r3, #2
 8017c64:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == SOUTH ) us_new = us_new - 1;
 8017c66:	4b30      	ldr	r3, [pc, #192]	@ (8017d28 <MAP_calcMouseDir+0x214>)
 8017c68:	781b      	ldrb	r3, [r3, #0]
 8017c6a:	2b02      	cmp	r3, #2
 8017c6c:	d102      	bne.n	8017c74 <MAP_calcMouseDir+0x160>
 8017c6e:	89bb      	ldrh	r3, [r7, #12]
 8017c70:	3b01      	subs	r3, #1
 8017c72:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 8017c74:	89ba      	ldrh	r2, [r7, #12]
 8017c76:	89fb      	ldrh	r3, [r7, #14]
 8017c78:	429a      	cmp	r2, r3
 8017c7a:	d203      	bcs.n	8017c84 <MAP_calcMouseDir+0x170>
				us_base = us_new;
 8017c7c:	89bb      	ldrh	r3, [r7, #12]
 8017c7e:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = SOUTH;
 8017c80:	2302      	movs	r3, #2
 8017c82:	72fb      	strb	r3, [r7, #11]
			}
		}
		//	西方向の区画の確認
		if ( ( uc_wall & 8 ) == 0 ){
 8017c84:	7abb      	ldrb	r3, [r7, #10]
 8017c86:	f003 0308 	and.w	r3, r3, #8
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d12f      	bne.n	8017cee <MAP_calcMouseDir+0x1da>
			us_new = us_Cmap[my][mx-1] * 4 + 4;
 8017c8e:	4b22      	ldr	r3, [pc, #136]	@ (8017d18 <MAP_calcMouseDir+0x204>)
 8017c90:	781b      	ldrb	r3, [r3, #0]
 8017c92:	461a      	mov	r2, r3
 8017c94:	4b21      	ldr	r3, [pc, #132]	@ (8017d1c <MAP_calcMouseDir+0x208>)
 8017c96:	781b      	ldrb	r3, [r3, #0]
 8017c98:	3b01      	subs	r3, #1
 8017c9a:	4922      	ldr	r1, [pc, #136]	@ (8017d24 <MAP_calcMouseDir+0x210>)
 8017c9c:	0152      	lsls	r2, r2, #5
 8017c9e:	4413      	add	r3, r2
 8017ca0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017ca4:	3301      	adds	r3, #1
 8017ca6:	b29b      	uxth	r3, r3
 8017ca8:	009b      	lsls	r3, r3, #2
 8017caa:	81bb      	strh	r3, [r7, #12]
			if ( ( g_SysMap[my][mx-1] & 0xf0 ) != 0xf0 ) us_new = us_new - 2;
 8017cac:	4b1a      	ldr	r3, [pc, #104]	@ (8017d18 <MAP_calcMouseDir+0x204>)
 8017cae:	781b      	ldrb	r3, [r3, #0]
 8017cb0:	461a      	mov	r2, r3
 8017cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8017d1c <MAP_calcMouseDir+0x208>)
 8017cb4:	781b      	ldrb	r3, [r3, #0]
 8017cb6:	3b01      	subs	r3, #1
 8017cb8:	4919      	ldr	r1, [pc, #100]	@ (8017d20 <MAP_calcMouseDir+0x20c>)
 8017cba:	0152      	lsls	r2, r2, #5
 8017cbc:	440a      	add	r2, r1
 8017cbe:	4413      	add	r3, r2
 8017cc0:	781b      	ldrb	r3, [r3, #0]
 8017cc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017cc6:	2bf0      	cmp	r3, #240	@ 0xf0
 8017cc8:	d002      	beq.n	8017cd0 <MAP_calcMouseDir+0x1bc>
 8017cca:	89bb      	ldrh	r3, [r7, #12]
 8017ccc:	3b02      	subs	r3, #2
 8017cce:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == WEST ) us_new = us_new - 1;
 8017cd0:	4b15      	ldr	r3, [pc, #84]	@ (8017d28 <MAP_calcMouseDir+0x214>)
 8017cd2:	781b      	ldrb	r3, [r3, #0]
 8017cd4:	2b03      	cmp	r3, #3
 8017cd6:	d102      	bne.n	8017cde <MAP_calcMouseDir+0x1ca>
 8017cd8:	89bb      	ldrh	r3, [r7, #12]
 8017cda:	3b01      	subs	r3, #1
 8017cdc:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 8017cde:	89ba      	ldrh	r2, [r7, #12]
 8017ce0:	89fb      	ldrh	r3, [r7, #14]
 8017ce2:	429a      	cmp	r2, r3
 8017ce4:	d203      	bcs.n	8017cee <MAP_calcMouseDir+0x1da>
				us_base = us_new;
 8017ce6:	89bb      	ldrh	r3, [r7, #12]
 8017ce8:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = WEST;
 8017cea:	2303      	movs	r3, #3
 8017cec:	72fb      	strb	r3, [r7, #11]
			}
		}
		
		*p_head = (enMAP_HEAD_DIR)( (en_tmpHead - en_Head) & 3 );		// 移動方向
 8017cee:	4b0e      	ldr	r3, [pc, #56]	@ (8017d28 <MAP_calcMouseDir+0x214>)
 8017cf0:	781b      	ldrb	r3, [r3, #0]
 8017cf2:	7afa      	ldrb	r2, [r7, #11]
 8017cf4:	1ad3      	subs	r3, r2, r3
 8017cf6:	b2db      	uxtb	r3, r3
 8017cf8:	f003 0303 	and.w	r3, r3, #3
 8017cfc:	b2da      	uxtb	r2, r3
 8017cfe:	683b      	ldr	r3, [r7, #0]
 8017d00:	701a      	strb	r2, [r3, #0]
	// 制御方法指定なし
	else{
		*p_head = (enMAP_HEAD_DIR)0;
	}

}
 8017d02:	e002      	b.n	8017d0a <MAP_calcMouseDir+0x1f6>
		*p_head = (enMAP_HEAD_DIR)0;
 8017d04:	683b      	ldr	r3, [r7, #0]
 8017d06:	2200      	movs	r2, #0
 8017d08:	701a      	strb	r2, [r3, #0]
}
 8017d0a:	bf00      	nop
 8017d0c:	3714      	adds	r7, #20
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d14:	4770      	bx	lr
 8017d16:	bf00      	nop
 8017d18:	2001ad8b 	.word	0x2001ad8b
 8017d1c:	2001ad8c 	.word	0x2001ad8c
 8017d20:	2001b5a0 	.word	0x2001b5a0
 8017d24:	2001ada0 	.word	0x2001ada0
 8017d28:	2001ad8a 	.word	0x2001ad8a

08017d2c <MAP_refMousePos>:

void MAP_refMousePos( 
	enMAP_HEAD_DIR 			en_head			///< [in] 進行方向
){
 8017d2c:	b480      	push	{r7}
 8017d2e:	b083      	sub	sp, #12
 8017d30:	af00      	add	r7, sp, #0
 8017d32:	4603      	mov	r3, r0
 8017d34:	71fb      	strb	r3, [r7, #7]
	switch( en_head ){
 8017d36:	79fb      	ldrb	r3, [r7, #7]
 8017d38:	2b03      	cmp	r3, #3
 8017d3a:	d827      	bhi.n	8017d8c <MAP_refMousePos+0x60>
 8017d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8017d44 <MAP_refMousePos+0x18>)
 8017d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d42:	bf00      	nop
 8017d44:	08017d55 	.word	0x08017d55
 8017d48:	08017d63 	.word	0x08017d63
 8017d4c:	08017d71 	.word	0x08017d71
 8017d50:	08017d7f 	.word	0x08017d7f
		case NORTH:
			my = my + 1;
 8017d54:	4b11      	ldr	r3, [pc, #68]	@ (8017d9c <MAP_refMousePos+0x70>)
 8017d56:	781b      	ldrb	r3, [r3, #0]
 8017d58:	3301      	adds	r3, #1
 8017d5a:	b2da      	uxtb	r2, r3
 8017d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8017d9c <MAP_refMousePos+0x70>)
 8017d5e:	701a      	strb	r2, [r3, #0]
			break;
 8017d60:	e015      	b.n	8017d8e <MAP_refMousePos+0x62>
		case EAST:
			mx = mx + 1;
 8017d62:	4b0f      	ldr	r3, [pc, #60]	@ (8017da0 <MAP_refMousePos+0x74>)
 8017d64:	781b      	ldrb	r3, [r3, #0]
 8017d66:	3301      	adds	r3, #1
 8017d68:	b2da      	uxtb	r2, r3
 8017d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8017da0 <MAP_refMousePos+0x74>)
 8017d6c:	701a      	strb	r2, [r3, #0]
			break;
 8017d6e:	e00e      	b.n	8017d8e <MAP_refMousePos+0x62>
		case SOUTH:
			my = my - 1;
 8017d70:	4b0a      	ldr	r3, [pc, #40]	@ (8017d9c <MAP_refMousePos+0x70>)
 8017d72:	781b      	ldrb	r3, [r3, #0]
 8017d74:	3b01      	subs	r3, #1
 8017d76:	b2da      	uxtb	r2, r3
 8017d78:	4b08      	ldr	r3, [pc, #32]	@ (8017d9c <MAP_refMousePos+0x70>)
 8017d7a:	701a      	strb	r2, [r3, #0]
			break;
 8017d7c:	e007      	b.n	8017d8e <MAP_refMousePos+0x62>
		case WEST:
			mx = mx - 1;
 8017d7e:	4b08      	ldr	r3, [pc, #32]	@ (8017da0 <MAP_refMousePos+0x74>)
 8017d80:	781b      	ldrb	r3, [r3, #0]
 8017d82:	3b01      	subs	r3, #1
 8017d84:	b2da      	uxtb	r2, r3
 8017d86:	4b06      	ldr	r3, [pc, #24]	@ (8017da0 <MAP_refMousePos+0x74>)
 8017d88:	701a      	strb	r2, [r3, #0]
			break;
 8017d8a:	e000      	b.n	8017d8e <MAP_refMousePos+0x62>
		default:
			break;
 8017d8c:	bf00      	nop
	}
}
 8017d8e:	bf00      	nop
 8017d90:	370c      	adds	r7, #12
 8017d92:	46bd      	mov	sp, r7
 8017d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d98:	4770      	bx	lr
 8017d9a:	bf00      	nop
 8017d9c:	2001ad8b 	.word	0x2001ad8b
 8017da0:	2001ad8c 	.word	0x2001ad8c

08017da4 <MAP_moveNextBlock>:

void MAP_moveNextBlock( 
	enMAP_HEAD_DIR 	en_head,		///< [in] 相対進行方向（マウス進行方向を北としている）
	bool*			p_type			///< [in] FALSE: １区間前進状態、TURE:半区間前進状態
){
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b082      	sub	sp, #8
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	4603      	mov	r3, r0
 8017dac:	6039      	str	r1, [r7, #0]
 8017dae:	71fb      	strb	r3, [r7, #7]
	*p_type = TRUE;
 8017db0:	683b      	ldr	r3, [r7, #0]
 8017db2:	2201      	movs	r2, #1
 8017db4:	701a      	strb	r2, [r3, #0]
	f_MoveBackDist = 0;				// 移動距離を加算値クリア
 8017db6:	4b4d      	ldr	r3, [pc, #308]	@ (8017eec <MAP_moveNextBlock+0x148>)
 8017db8:	f04f 0200 	mov.w	r2, #0
 8017dbc:	601a      	str	r2, [r3, #0]
	
	/* 動作 */
	switch( en_head ){
 8017dbe:	79fb      	ldrb	r3, [r7, #7]
 8017dc0:	2b03      	cmp	r3, #3
 8017dc2:	f200 8082 	bhi.w	8017eca <MAP_moveNextBlock+0x126>
 8017dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8017dcc <MAP_moveNextBlock+0x28>)
 8017dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017dcc:	08017ddd 	.word	0x08017ddd
 8017dd0:	08017ded 	.word	0x08017ded
 8017dd4:	08017e15 	.word	0x08017e15
 8017dd8:	08017e01 	.word	0x08017e01

		/* そのまま前進 */
		case NORTH:
			*p_type = FALSE;
 8017ddc:	683b      	ldr	r3, [r7, #0]
 8017dde:	2200      	movs	r2, #0
 8017de0:	701a      	strb	r2, [r3, #0]
			MOT_goBlock_Const( 1 );				// 1区画前進
 8017de2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017de6:	f7f7 fced 	bl	800f7c4 <MOT_goBlock_Const>
			break;
 8017dea:	e071      	b.n	8017ed0 <MAP_moveNextBlock+0x12c>
		// 右に旋回する
		case EAST:
			MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8017dec:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8017ef0 <MAP_moveNextBlock+0x14c>
 8017df0:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8017df4:	f7f7 fcc2 	bl	800f77c <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R90);					// 右90度旋回
 8017df8:	2000      	movs	r0, #0
 8017dfa:	f7f7 fee9 	bl	800fbd0 <MOT_turn>
			break;
 8017dfe:	e067      	b.n	8017ed0 <MAP_moveNextBlock+0x12c>
		// 左に旋回する
		case WEST:
			MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8017e00:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8017ef0 <MAP_moveNextBlock+0x14c>
 8017e04:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8017e08:	f7f7 fcb8 	bl	800f77c <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_L90);					// 右90度旋回
 8017e0c:	2001      	movs	r0, #1
 8017e0e:	f7f7 fedf 	bl	800fbd0 <MOT_turn>
			break;
 8017e12:	e05d      	b.n	8017ed0 <MAP_moveNextBlock+0x12c>
		// 反転して戻る
		case SOUTH:
			MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8017e14:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8017ef0 <MAP_moveNextBlock+0x14c>
 8017e18:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8017e1c:	f7f7 fcae 	bl	800f77c <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R180);					// 右180度旋回
 8017e20:	2002      	movs	r0, #2
 8017e22:	f7f7 fed5 	bl	800fbd0 <MOT_turn>
			
			/* 壁当て姿勢制御（後ろに壁があったらバック＋移動距離を加算する） */
			if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8017e26:	4b33      	ldr	r3, [pc, #204]	@ (8017ef4 <MAP_moveNextBlock+0x150>)
 8017e28:	781b      	ldrb	r3, [r3, #0]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d10e      	bne.n	8017e4c <MAP_moveNextBlock+0xa8>
 8017e2e:	4b32      	ldr	r3, [pc, #200]	@ (8017ef8 <MAP_moveNextBlock+0x154>)
 8017e30:	781b      	ldrb	r3, [r3, #0]
 8017e32:	4618      	mov	r0, r3
 8017e34:	4b31      	ldr	r3, [pc, #196]	@ (8017efc <MAP_moveNextBlock+0x158>)
 8017e36:	781b      	ldrb	r3, [r3, #0]
 8017e38:	4619      	mov	r1, r3
 8017e3a:	4a31      	ldr	r2, [pc, #196]	@ (8017f00 <MAP_moveNextBlock+0x15c>)
 8017e3c:	0143      	lsls	r3, r0, #5
 8017e3e:	4413      	add	r3, r2
 8017e40:	440b      	add	r3, r1
 8017e42:	781b      	ldrb	r3, [r3, #0]
 8017e44:	f003 0301 	and.w	r3, r3, #1
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d138      	bne.n	8017ebe <MAP_moveNextBlock+0x11a>
				( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8017e4c:	4b29      	ldr	r3, [pc, #164]	@ (8017ef4 <MAP_moveNextBlock+0x150>)
 8017e4e:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8017e50:	2b01      	cmp	r3, #1
 8017e52:	d10e      	bne.n	8017e72 <MAP_moveNextBlock+0xce>
				( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8017e54:	4b28      	ldr	r3, [pc, #160]	@ (8017ef8 <MAP_moveNextBlock+0x154>)
 8017e56:	781b      	ldrb	r3, [r3, #0]
 8017e58:	4618      	mov	r0, r3
 8017e5a:	4b28      	ldr	r3, [pc, #160]	@ (8017efc <MAP_moveNextBlock+0x158>)
 8017e5c:	781b      	ldrb	r3, [r3, #0]
 8017e5e:	4619      	mov	r1, r3
 8017e60:	4a27      	ldr	r2, [pc, #156]	@ (8017f00 <MAP_moveNextBlock+0x15c>)
 8017e62:	0143      	lsls	r3, r0, #5
 8017e64:	4413      	add	r3, r2
 8017e66:	440b      	add	r3, r1
 8017e68:	781b      	ldrb	r3, [r3, #0]
 8017e6a:	f003 0302 	and.w	r3, r3, #2
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d125      	bne.n	8017ebe <MAP_moveNextBlock+0x11a>
				( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8017e72:	4b20      	ldr	r3, [pc, #128]	@ (8017ef4 <MAP_moveNextBlock+0x150>)
 8017e74:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8017e76:	2b02      	cmp	r3, #2
 8017e78:	d10e      	bne.n	8017e98 <MAP_moveNextBlock+0xf4>
				( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8017e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8017ef8 <MAP_moveNextBlock+0x154>)
 8017e7c:	781b      	ldrb	r3, [r3, #0]
 8017e7e:	4618      	mov	r0, r3
 8017e80:	4b1e      	ldr	r3, [pc, #120]	@ (8017efc <MAP_moveNextBlock+0x158>)
 8017e82:	781b      	ldrb	r3, [r3, #0]
 8017e84:	4619      	mov	r1, r3
 8017e86:	4a1e      	ldr	r2, [pc, #120]	@ (8017f00 <MAP_moveNextBlock+0x15c>)
 8017e88:	0143      	lsls	r3, r0, #5
 8017e8a:	4413      	add	r3, r2
 8017e8c:	440b      	add	r3, r1
 8017e8e:	781b      	ldrb	r3, [r3, #0]
 8017e90:	f003 0304 	and.w	r3, r3, #4
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d112      	bne.n	8017ebe <MAP_moveNextBlock+0x11a>
				( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8017e98:	4b16      	ldr	r3, [pc, #88]	@ (8017ef4 <MAP_moveNextBlock+0x150>)
 8017e9a:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8017e9c:	2b03      	cmp	r3, #3
 8017e9e:	d116      	bne.n	8017ece <MAP_moveNextBlock+0x12a>
				( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8017ea0:	4b15      	ldr	r3, [pc, #84]	@ (8017ef8 <MAP_moveNextBlock+0x154>)
 8017ea2:	781b      	ldrb	r3, [r3, #0]
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	4b15      	ldr	r3, [pc, #84]	@ (8017efc <MAP_moveNextBlock+0x158>)
 8017ea8:	781b      	ldrb	r3, [r3, #0]
 8017eaa:	4619      	mov	r1, r3
 8017eac:	4a14      	ldr	r2, [pc, #80]	@ (8017f00 <MAP_moveNextBlock+0x15c>)
 8017eae:	0143      	lsls	r3, r0, #5
 8017eb0:	4413      	add	r3, r2
 8017eb2:	440b      	add	r3, r1
 8017eb4:	781b      	ldrb	r3, [r3, #0]
 8017eb6:	f003 0308 	and.w	r3, r3, #8
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d007      	beq.n	8017ece <MAP_moveNextBlock+0x12a>
			){
				MOT_goHitBackWall();					// バックする
 8017ebe:	f7f9 f9b1 	bl	8011224 <MOT_goHitBackWall>
				f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8017ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8017eec <MAP_moveNextBlock+0x148>)
 8017ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8017f04 <MAP_moveNextBlock+0x160>)
 8017ec6:	601a      	str	r2, [r3, #0]
			}
			break;
 8017ec8:	e001      	b.n	8017ece <MAP_moveNextBlock+0x12a>
		default:
			break;
 8017eca:	bf00      	nop
 8017ecc:	e000      	b.n	8017ed0 <MAP_moveNextBlock+0x12c>
			break;
 8017ece:	bf00      	nop
		MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);			// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
		MAP_moveNextBlock(en_head, p_type);					// もう１度呼び出し（次の区画へ移動）
	}
	else{*/
		/* 進行方向更新 */
		en_Head = (enMAP_HEAD_DIR)( (en_Head + en_head) & (MAP_HEAD_DIR_MAX-1) );
 8017ed0:	4b08      	ldr	r3, [pc, #32]	@ (8017ef4 <MAP_moveNextBlock+0x150>)
 8017ed2:	781a      	ldrb	r2, [r3, #0]
 8017ed4:	79fb      	ldrb	r3, [r7, #7]
 8017ed6:	4413      	add	r3, r2
 8017ed8:	b2db      	uxtb	r3, r3
 8017eda:	f003 0303 	and.w	r3, r3, #3
 8017ede:	b2da      	uxtb	r2, r3
 8017ee0:	4b04      	ldr	r3, [pc, #16]	@ (8017ef4 <MAP_moveNextBlock+0x150>)
 8017ee2:	701a      	strb	r2, [r3, #0]
//	}
}
 8017ee4:	bf00      	nop
 8017ee6:	3708      	adds	r7, #8
 8017ee8:	46bd      	mov	sp, r7
 8017eea:	bd80      	pop	{r7, pc}
 8017eec:	2001ad90 	.word	0x2001ad90
 8017ef0:	00000000 	.word	0x00000000
 8017ef4:	2001ad8a 	.word	0x2001ad8a
 8017ef8:	2001ad8b 	.word	0x2001ad8b
 8017efc:	2001ad8c 	.word	0x2001ad8c
 8017f00:	2001b5a0 	.word	0x2001b5a0
 8017f04:	3e5c28f6 	.word	0x3e5c28f6

08017f08 <MAP_moveNextBlock_Sla>:

void MAP_moveNextBlock_Sla( 
	enMAP_HEAD_DIR 	en_head,		///< [in] 相対進行方向（マウス進行方向を北としている
	bool*			p_type,			///< [in] FALSE: １区間前進状態、TURE:半区間前進状態
	bool			bl_resume		///< [in] FALSE: レジューム動作ではない、TURE:レジューム動作
){
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b082      	sub	sp, #8
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	4603      	mov	r3, r0
 8017f10:	6039      	str	r1, [r7, #0]
 8017f12:	71fb      	strb	r3, [r7, #7]
 8017f14:	4613      	mov	r3, r2
 8017f16:	71bb      	strb	r3, [r7, #6]
	*p_type = FALSE;
 8017f18:	683b      	ldr	r3, [r7, #0]
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	701a      	strb	r2, [r3, #0]
	f_MoveBackDist = 0;				// 移動距離を加算値クリア
 8017f1e:	4b7e      	ldr	r3, [pc, #504]	@ (8018118 <MAP_moveNextBlock_Sla+0x210>)
 8017f20:	f04f 0200 	mov.w	r2, #0
 8017f24:	601a      	str	r2, [r3, #0]
	
	/* 動作 */
	switch( en_head ){
 8017f26:	79fb      	ldrb	r3, [r7, #7]
 8017f28:	2b03      	cmp	r3, #3
 8017f2a:	f200 8244 	bhi.w	80183b6 <MAP_moveNextBlock_Sla+0x4ae>
 8017f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8017f34 <MAP_moveNextBlock_Sla+0x2c>)
 8017f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f34:	08017f45 	.word	0x08017f45
 8017f38:	08017f69 	.word	0x08017f69
 8017f3c:	080182f5 	.word	0x080182f5
 8017f40:	08018145 	.word	0x08018145

		// そのまま前進
		case NORTH:
			
			/* レジューム動作ではない */
			if( bl_resume == FALSE ){
 8017f44:	79bb      	ldrb	r3, [r7, #6]
 8017f46:	f083 0301 	eor.w	r3, r3, #1
 8017f4a:	b2db      	uxtb	r3, r3
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d004      	beq.n	8017f5a <MAP_moveNextBlock_Sla+0x52>
		
				MOT_goBlock_Const( 1 );					// 1区画前進
 8017f50:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017f54:	f7f7 fc36 	bl	800f7c4 <MOT_goBlock_Const>
			/* レジューム動作 */
			else{
				MOT_goBlock_FinSpeed( 1.0f, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
//				uc_SlaCnt = 0;									// スラロームしていない
			}
			break;
 8017f58:	e22e      	b.n	80183b8 <MAP_moveNextBlock_Sla+0x4b0>
				MOT_goBlock_FinSpeed( 1.0f, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 8017f5a:	eddf 0a70 	vldr	s1, [pc, #448]	@ 801811c <MAP_moveNextBlock_Sla+0x214>
 8017f5e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017f62:	f7f7 fc0b 	bl	800f77c <MOT_goBlock_FinSpeed>
			break;
 8017f66:	e227      	b.n	80183b8 <MAP_moveNextBlock_Sla+0x4b0>

		// 右にスラロームする
		case EAST:
			if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8017f68:	4b6d      	ldr	r3, [pc, #436]	@ (8018120 <MAP_moveNextBlock_Sla+0x218>)
 8017f6a:	781b      	ldrb	r3, [r3, #0]
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d10e      	bne.n	8017f8e <MAP_moveNextBlock_Sla+0x86>
 8017f70:	4b6c      	ldr	r3, [pc, #432]	@ (8018124 <MAP_moveNextBlock_Sla+0x21c>)
 8017f72:	781b      	ldrb	r3, [r3, #0]
 8017f74:	4618      	mov	r0, r3
 8017f76:	4b6c      	ldr	r3, [pc, #432]	@ (8018128 <MAP_moveNextBlock_Sla+0x220>)
 8017f78:	781b      	ldrb	r3, [r3, #0]
 8017f7a:	4619      	mov	r1, r3
 8017f7c:	4a6b      	ldr	r2, [pc, #428]	@ (801812c <MAP_moveNextBlock_Sla+0x224>)
 8017f7e:	0143      	lsls	r3, r0, #5
 8017f80:	4413      	add	r3, r2
 8017f82:	440b      	add	r3, r1
 8017f84:	781b      	ldrb	r3, [r3, #0]
 8017f86:	f003 0302 	and.w	r3, r3, #2
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d138      	bne.n	8018000 <MAP_moveNextBlock_Sla+0xf8>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8017f8e:	4b64      	ldr	r3, [pc, #400]	@ (8018120 <MAP_moveNextBlock_Sla+0x218>)
 8017f90:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8017f92:	2b01      	cmp	r3, #1
 8017f94:	d10e      	bne.n	8017fb4 <MAP_moveNextBlock_Sla+0xac>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8017f96:	4b63      	ldr	r3, [pc, #396]	@ (8018124 <MAP_moveNextBlock_Sla+0x21c>)
 8017f98:	781b      	ldrb	r3, [r3, #0]
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	4b62      	ldr	r3, [pc, #392]	@ (8018128 <MAP_moveNextBlock_Sla+0x220>)
 8017f9e:	781b      	ldrb	r3, [r3, #0]
 8017fa0:	4619      	mov	r1, r3
 8017fa2:	4a62      	ldr	r2, [pc, #392]	@ (801812c <MAP_moveNextBlock_Sla+0x224>)
 8017fa4:	0143      	lsls	r3, r0, #5
 8017fa6:	4413      	add	r3, r2
 8017fa8:	440b      	add	r3, r1
 8017faa:	781b      	ldrb	r3, [r3, #0]
 8017fac:	f003 0304 	and.w	r3, r3, #4
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d125      	bne.n	8018000 <MAP_moveNextBlock_Sla+0xf8>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8017fb4:	4b5a      	ldr	r3, [pc, #360]	@ (8018120 <MAP_moveNextBlock_Sla+0x218>)
 8017fb6:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8017fb8:	2b02      	cmp	r3, #2
 8017fba:	d10e      	bne.n	8017fda <MAP_moveNextBlock_Sla+0xd2>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8017fbc:	4b59      	ldr	r3, [pc, #356]	@ (8018124 <MAP_moveNextBlock_Sla+0x21c>)
 8017fbe:	781b      	ldrb	r3, [r3, #0]
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	4b59      	ldr	r3, [pc, #356]	@ (8018128 <MAP_moveNextBlock_Sla+0x220>)
 8017fc4:	781b      	ldrb	r3, [r3, #0]
 8017fc6:	4619      	mov	r1, r3
 8017fc8:	4a58      	ldr	r2, [pc, #352]	@ (801812c <MAP_moveNextBlock_Sla+0x224>)
 8017fca:	0143      	lsls	r3, r0, #5
 8017fcc:	4413      	add	r3, r2
 8017fce:	440b      	add	r3, r1
 8017fd0:	781b      	ldrb	r3, [r3, #0]
 8017fd2:	f003 0308 	and.w	r3, r3, #8
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d112      	bne.n	8018000 <MAP_moveNextBlock_Sla+0xf8>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8017fda:	4b51      	ldr	r3, [pc, #324]	@ (8018120 <MAP_moveNextBlock_Sla+0x218>)
 8017fdc:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8017fde:	2b03      	cmp	r3, #3
 8017fe0:	d112      	bne.n	8018008 <MAP_moveNextBlock_Sla+0x100>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8017fe2:	4b50      	ldr	r3, [pc, #320]	@ (8018124 <MAP_moveNextBlock_Sla+0x21c>)
 8017fe4:	781b      	ldrb	r3, [r3, #0]
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	4b4f      	ldr	r3, [pc, #316]	@ (8018128 <MAP_moveNextBlock_Sla+0x220>)
 8017fea:	781b      	ldrb	r3, [r3, #0]
 8017fec:	4619      	mov	r1, r3
 8017fee:	4a4f      	ldr	r2, [pc, #316]	@ (801812c <MAP_moveNextBlock_Sla+0x224>)
 8017ff0:	0143      	lsls	r3, r0, #5
 8017ff2:	4413      	add	r3, r2
 8017ff4:	440b      	add	r3, r1
 8017ff6:	781b      	ldrb	r3, [r3, #0]
 8017ff8:	f003 0301 	and.w	r3, r3, #1
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d003      	beq.n	8018008 <MAP_moveNextBlock_Sla+0x100>
				){
				uc_DistControl = 0.01;
 8018000:	4b4b      	ldr	r3, [pc, #300]	@ (8018130 <MAP_moveNextBlock_Sla+0x228>)
 8018002:	2200      	movs	r2, #0
 8018004:	701a      	strb	r2, [r3, #0]
 8018006:	e002      	b.n	801800e <MAP_moveNextBlock_Sla+0x106>
				}
			else{
				uc_DistControl = 0;
 8018008:	4b49      	ldr	r3, [pc, #292]	@ (8018130 <MAP_moveNextBlock_Sla+0x228>)
 801800a:	2200      	movs	r2, #0
 801800c:	701a      	strb	r2, [r3, #0]
			}
			if( uc_SlaCnt < SLA_Count ){
 801800e:	4b49      	ldr	r3, [pc, #292]	@ (8018134 <MAP_moveNextBlock_Sla+0x22c>)
 8018010:	781a      	ldrb	r2, [r3, #0]
 8018012:	4b49      	ldr	r3, [pc, #292]	@ (8018138 <MAP_moveNextBlock_Sla+0x230>)
 8018014:	781b      	ldrb	r3, [r3, #0]
 8018016:	429a      	cmp	r2, r3
 8018018:	d20e      	bcs.n	8018038 <MAP_moveNextBlock_Sla+0x130>
				MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 801801a:	2000      	movs	r0, #0
 801801c:	f7eb fee8 	bl	8003df0 <PARAM_getSra>
 8018020:	4603      	mov	r3, r0
 8018022:	4619      	mov	r1, r3
 8018024:	2000      	movs	r0, #0
 8018026:	f7f9 f95f 	bl	80112e8 <MOT_goSla>
				uc_SlaCnt++;
 801802a:	4b42      	ldr	r3, [pc, #264]	@ (8018134 <MAP_moveNextBlock_Sla+0x22c>)
 801802c:	781b      	ldrb	r3, [r3, #0]
 801802e:	3301      	adds	r3, #1
 8018030:	b2da      	uxtb	r2, r3
 8018032:	4b40      	ldr	r3, [pc, #256]	@ (8018134 <MAP_moveNextBlock_Sla+0x22c>)
 8018034:	701a      	strb	r2, [r3, #0]
				else{
					MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
					uc_SlaCnt++;
				}
			}
			break;
 8018036:	e1bf      	b.n	80183b8 <MAP_moveNextBlock_Sla+0x4b0>
				if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8018038:	4b39      	ldr	r3, [pc, #228]	@ (8018120 <MAP_moveNextBlock_Sla+0x218>)
 801803a:	781b      	ldrb	r3, [r3, #0]
 801803c:	2b00      	cmp	r3, #0
 801803e:	d10e      	bne.n	801805e <MAP_moveNextBlock_Sla+0x156>
 8018040:	4b38      	ldr	r3, [pc, #224]	@ (8018124 <MAP_moveNextBlock_Sla+0x21c>)
 8018042:	781b      	ldrb	r3, [r3, #0]
 8018044:	4618      	mov	r0, r3
 8018046:	4b38      	ldr	r3, [pc, #224]	@ (8018128 <MAP_moveNextBlock_Sla+0x220>)
 8018048:	781b      	ldrb	r3, [r3, #0]
 801804a:	4619      	mov	r1, r3
 801804c:	4a37      	ldr	r2, [pc, #220]	@ (801812c <MAP_moveNextBlock_Sla+0x224>)
 801804e:	0143      	lsls	r3, r0, #5
 8018050:	4413      	add	r3, r2
 8018052:	440b      	add	r3, r1
 8018054:	781b      	ldrb	r3, [r3, #0]
 8018056:	f003 0308 	and.w	r3, r3, #8
 801805a:	2b00      	cmp	r3, #0
 801805c:	d138      	bne.n	80180d0 <MAP_moveNextBlock_Sla+0x1c8>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 801805e:	4b30      	ldr	r3, [pc, #192]	@ (8018120 <MAP_moveNextBlock_Sla+0x218>)
 8018060:	781b      	ldrb	r3, [r3, #0]
				if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8018062:	2b01      	cmp	r3, #1
 8018064:	d10e      	bne.n	8018084 <MAP_moveNextBlock_Sla+0x17c>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8018066:	4b2f      	ldr	r3, [pc, #188]	@ (8018124 <MAP_moveNextBlock_Sla+0x21c>)
 8018068:	781b      	ldrb	r3, [r3, #0]
 801806a:	4618      	mov	r0, r3
 801806c:	4b2e      	ldr	r3, [pc, #184]	@ (8018128 <MAP_moveNextBlock_Sla+0x220>)
 801806e:	781b      	ldrb	r3, [r3, #0]
 8018070:	4619      	mov	r1, r3
 8018072:	4a2e      	ldr	r2, [pc, #184]	@ (801812c <MAP_moveNextBlock_Sla+0x224>)
 8018074:	0143      	lsls	r3, r0, #5
 8018076:	4413      	add	r3, r2
 8018078:	440b      	add	r3, r1
 801807a:	781b      	ldrb	r3, [r3, #0]
 801807c:	f003 0301 	and.w	r3, r3, #1
 8018080:	2b00      	cmp	r3, #0
 8018082:	d125      	bne.n	80180d0 <MAP_moveNextBlock_Sla+0x1c8>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8018084:	4b26      	ldr	r3, [pc, #152]	@ (8018120 <MAP_moveNextBlock_Sla+0x218>)
 8018086:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8018088:	2b02      	cmp	r3, #2
 801808a:	d10e      	bne.n	80180aa <MAP_moveNextBlock_Sla+0x1a2>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 801808c:	4b25      	ldr	r3, [pc, #148]	@ (8018124 <MAP_moveNextBlock_Sla+0x21c>)
 801808e:	781b      	ldrb	r3, [r3, #0]
 8018090:	4618      	mov	r0, r3
 8018092:	4b25      	ldr	r3, [pc, #148]	@ (8018128 <MAP_moveNextBlock_Sla+0x220>)
 8018094:	781b      	ldrb	r3, [r3, #0]
 8018096:	4619      	mov	r1, r3
 8018098:	4a24      	ldr	r2, [pc, #144]	@ (801812c <MAP_moveNextBlock_Sla+0x224>)
 801809a:	0143      	lsls	r3, r0, #5
 801809c:	4413      	add	r3, r2
 801809e:	440b      	add	r3, r1
 80180a0:	781b      	ldrb	r3, [r3, #0]
 80180a2:	f003 0302 	and.w	r3, r3, #2
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d112      	bne.n	80180d0 <MAP_moveNextBlock_Sla+0x1c8>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 80180aa:	4b1d      	ldr	r3, [pc, #116]	@ (8018120 <MAP_moveNextBlock_Sla+0x218>)
 80180ac:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 80180ae:	2b03      	cmp	r3, #3
 80180b0:	d123      	bne.n	80180fa <MAP_moveNextBlock_Sla+0x1f2>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 80180b2:	4b1c      	ldr	r3, [pc, #112]	@ (8018124 <MAP_moveNextBlock_Sla+0x21c>)
 80180b4:	781b      	ldrb	r3, [r3, #0]
 80180b6:	4618      	mov	r0, r3
 80180b8:	4b1b      	ldr	r3, [pc, #108]	@ (8018128 <MAP_moveNextBlock_Sla+0x220>)
 80180ba:	781b      	ldrb	r3, [r3, #0]
 80180bc:	4619      	mov	r1, r3
 80180be:	4a1b      	ldr	r2, [pc, #108]	@ (801812c <MAP_moveNextBlock_Sla+0x224>)
 80180c0:	0143      	lsls	r3, r0, #5
 80180c2:	4413      	add	r3, r2
 80180c4:	440b      	add	r3, r1
 80180c6:	781b      	ldrb	r3, [r3, #0]
 80180c8:	f003 0304 	and.w	r3, r3, #4
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d014      	beq.n	80180fa <MAP_moveNextBlock_Sla+0x1f2>
					MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 80180d0:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 801813c <MAP_moveNextBlock_Sla+0x234>
 80180d4:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80180d8:	f7f7 fb50 	bl	800f77c <MOT_goBlock_FinSpeed>
					MOT_turn(MOT_R90);						// 右90度旋回
 80180dc:	2000      	movs	r0, #0
 80180de:	f7f7 fd77 	bl	800fbd0 <MOT_turn>
					uc_SlaCnt = 0;
 80180e2:	4b14      	ldr	r3, [pc, #80]	@ (8018134 <MAP_moveNextBlock_Sla+0x22c>)
 80180e4:	2200      	movs	r2, #0
 80180e6:	701a      	strb	r2, [r3, #0]
					MOT_goHitBackWall();					// バックする
 80180e8:	f7f9 f89c 	bl	8011224 <MOT_goHitBackWall>
					f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 80180ec:	4b0a      	ldr	r3, [pc, #40]	@ (8018118 <MAP_moveNextBlock_Sla+0x210>)
 80180ee:	4a14      	ldr	r2, [pc, #80]	@ (8018140 <MAP_moveNextBlock_Sla+0x238>)
 80180f0:	601a      	str	r2, [r3, #0]
					*p_type = TRUE;							// 次は半区間（＋バック）分進める
 80180f2:	683b      	ldr	r3, [r7, #0]
 80180f4:	2201      	movs	r2, #1
 80180f6:	701a      	strb	r2, [r3, #0]
			break;
 80180f8:	e15e      	b.n	80183b8 <MAP_moveNextBlock_Sla+0x4b0>
					MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 80180fa:	2000      	movs	r0, #0
 80180fc:	f7eb fe78 	bl	8003df0 <PARAM_getSra>
 8018100:	4603      	mov	r3, r0
 8018102:	4619      	mov	r1, r3
 8018104:	2000      	movs	r0, #0
 8018106:	f7f9 f8ef 	bl	80112e8 <MOT_goSla>
					uc_SlaCnt++;
 801810a:	4b0a      	ldr	r3, [pc, #40]	@ (8018134 <MAP_moveNextBlock_Sla+0x22c>)
 801810c:	781b      	ldrb	r3, [r3, #0]
 801810e:	3301      	adds	r3, #1
 8018110:	b2da      	uxtb	r2, r3
 8018112:	4b08      	ldr	r3, [pc, #32]	@ (8018134 <MAP_moveNextBlock_Sla+0x22c>)
 8018114:	701a      	strb	r2, [r3, #0]
			break;
 8018116:	e14f      	b.n	80183b8 <MAP_moveNextBlock_Sla+0x4b0>
 8018118:	2001ad90 	.word	0x2001ad90
 801811c:	3e99999a 	.word	0x3e99999a
 8018120:	2001ad8a 	.word	0x2001ad8a
 8018124:	2001ad8b 	.word	0x2001ad8b
 8018128:	2001ad8c 	.word	0x2001ad8c
 801812c:	2001b5a0 	.word	0x2001b5a0
 8018130:	20000400 	.word	0x20000400
 8018134:	2001ad94 	.word	0x2001ad94
 8018138:	2000001c 	.word	0x2000001c
 801813c:	00000000 	.word	0x00000000
 8018140:	3e5c28f6 	.word	0x3e5c28f6

		// 左にスラロームする
		case WEST:
			if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8018144:	4ba3      	ldr	r3, [pc, #652]	@ (80183d4 <MAP_moveNextBlock_Sla+0x4cc>)
 8018146:	781b      	ldrb	r3, [r3, #0]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d10e      	bne.n	801816a <MAP_moveNextBlock_Sla+0x262>
 801814c:	4ba2      	ldr	r3, [pc, #648]	@ (80183d8 <MAP_moveNextBlock_Sla+0x4d0>)
 801814e:	781b      	ldrb	r3, [r3, #0]
 8018150:	4618      	mov	r0, r3
 8018152:	4ba2      	ldr	r3, [pc, #648]	@ (80183dc <MAP_moveNextBlock_Sla+0x4d4>)
 8018154:	781b      	ldrb	r3, [r3, #0]
 8018156:	4619      	mov	r1, r3
 8018158:	4aa1      	ldr	r2, [pc, #644]	@ (80183e0 <MAP_moveNextBlock_Sla+0x4d8>)
 801815a:	0143      	lsls	r3, r0, #5
 801815c:	4413      	add	r3, r2
 801815e:	440b      	add	r3, r1
 8018160:	781b      	ldrb	r3, [r3, #0]
 8018162:	f003 0308 	and.w	r3, r3, #8
 8018166:	2b00      	cmp	r3, #0
 8018168:	d138      	bne.n	80181dc <MAP_moveNextBlock_Sla+0x2d4>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 801816a:	4b9a      	ldr	r3, [pc, #616]	@ (80183d4 <MAP_moveNextBlock_Sla+0x4cc>)
 801816c:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 801816e:	2b01      	cmp	r3, #1
 8018170:	d10e      	bne.n	8018190 <MAP_moveNextBlock_Sla+0x288>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8018172:	4b99      	ldr	r3, [pc, #612]	@ (80183d8 <MAP_moveNextBlock_Sla+0x4d0>)
 8018174:	781b      	ldrb	r3, [r3, #0]
 8018176:	4618      	mov	r0, r3
 8018178:	4b98      	ldr	r3, [pc, #608]	@ (80183dc <MAP_moveNextBlock_Sla+0x4d4>)
 801817a:	781b      	ldrb	r3, [r3, #0]
 801817c:	4619      	mov	r1, r3
 801817e:	4a98      	ldr	r2, [pc, #608]	@ (80183e0 <MAP_moveNextBlock_Sla+0x4d8>)
 8018180:	0143      	lsls	r3, r0, #5
 8018182:	4413      	add	r3, r2
 8018184:	440b      	add	r3, r1
 8018186:	781b      	ldrb	r3, [r3, #0]
 8018188:	f003 0301 	and.w	r3, r3, #1
 801818c:	2b00      	cmp	r3, #0
 801818e:	d125      	bne.n	80181dc <MAP_moveNextBlock_Sla+0x2d4>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8018190:	4b90      	ldr	r3, [pc, #576]	@ (80183d4 <MAP_moveNextBlock_Sla+0x4cc>)
 8018192:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8018194:	2b02      	cmp	r3, #2
 8018196:	d10e      	bne.n	80181b6 <MAP_moveNextBlock_Sla+0x2ae>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8018198:	4b8f      	ldr	r3, [pc, #572]	@ (80183d8 <MAP_moveNextBlock_Sla+0x4d0>)
 801819a:	781b      	ldrb	r3, [r3, #0]
 801819c:	4618      	mov	r0, r3
 801819e:	4b8f      	ldr	r3, [pc, #572]	@ (80183dc <MAP_moveNextBlock_Sla+0x4d4>)
 80181a0:	781b      	ldrb	r3, [r3, #0]
 80181a2:	4619      	mov	r1, r3
 80181a4:	4a8e      	ldr	r2, [pc, #568]	@ (80183e0 <MAP_moveNextBlock_Sla+0x4d8>)
 80181a6:	0143      	lsls	r3, r0, #5
 80181a8:	4413      	add	r3, r2
 80181aa:	440b      	add	r3, r1
 80181ac:	781b      	ldrb	r3, [r3, #0]
 80181ae:	f003 0302 	and.w	r3, r3, #2
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d112      	bne.n	80181dc <MAP_moveNextBlock_Sla+0x2d4>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 80181b6:	4b87      	ldr	r3, [pc, #540]	@ (80183d4 <MAP_moveNextBlock_Sla+0x4cc>)
 80181b8:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 80181ba:	2b03      	cmp	r3, #3
 80181bc:	d112      	bne.n	80181e4 <MAP_moveNextBlock_Sla+0x2dc>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 80181be:	4b86      	ldr	r3, [pc, #536]	@ (80183d8 <MAP_moveNextBlock_Sla+0x4d0>)
 80181c0:	781b      	ldrb	r3, [r3, #0]
 80181c2:	4618      	mov	r0, r3
 80181c4:	4b85      	ldr	r3, [pc, #532]	@ (80183dc <MAP_moveNextBlock_Sla+0x4d4>)
 80181c6:	781b      	ldrb	r3, [r3, #0]
 80181c8:	4619      	mov	r1, r3
 80181ca:	4a85      	ldr	r2, [pc, #532]	@ (80183e0 <MAP_moveNextBlock_Sla+0x4d8>)
 80181cc:	0143      	lsls	r3, r0, #5
 80181ce:	4413      	add	r3, r2
 80181d0:	440b      	add	r3, r1
 80181d2:	781b      	ldrb	r3, [r3, #0]
 80181d4:	f003 0304 	and.w	r3, r3, #4
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d003      	beq.n	80181e4 <MAP_moveNextBlock_Sla+0x2dc>
				){
				uc_DistControl = 0.01;
 80181dc:	4b81      	ldr	r3, [pc, #516]	@ (80183e4 <MAP_moveNextBlock_Sla+0x4dc>)
 80181de:	2200      	movs	r2, #0
 80181e0:	701a      	strb	r2, [r3, #0]
 80181e2:	e002      	b.n	80181ea <MAP_moveNextBlock_Sla+0x2e2>
				}
			else{
				uc_DistControl = 0;
 80181e4:	4b7f      	ldr	r3, [pc, #508]	@ (80183e4 <MAP_moveNextBlock_Sla+0x4dc>)
 80181e6:	2200      	movs	r2, #0
 80181e8:	701a      	strb	r2, [r3, #0]
			}
			if( uc_SlaCnt < SLA_Count ){
 80181ea:	4b7f      	ldr	r3, [pc, #508]	@ (80183e8 <MAP_moveNextBlock_Sla+0x4e0>)
 80181ec:	781a      	ldrb	r2, [r3, #0]
 80181ee:	4b7f      	ldr	r3, [pc, #508]	@ (80183ec <MAP_moveNextBlock_Sla+0x4e4>)
 80181f0:	781b      	ldrb	r3, [r3, #0]
 80181f2:	429a      	cmp	r2, r3
 80181f4:	d20e      	bcs.n	8018214 <MAP_moveNextBlock_Sla+0x30c>
				MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 80181f6:	2000      	movs	r0, #0
 80181f8:	f7eb fdfa 	bl	8003df0 <PARAM_getSra>
 80181fc:	4603      	mov	r3, r0
 80181fe:	4619      	mov	r1, r3
 8018200:	2001      	movs	r0, #1
 8018202:	f7f9 f871 	bl	80112e8 <MOT_goSla>
				uc_SlaCnt++;
 8018206:	4b78      	ldr	r3, [pc, #480]	@ (80183e8 <MAP_moveNextBlock_Sla+0x4e0>)
 8018208:	781b      	ldrb	r3, [r3, #0]
 801820a:	3301      	adds	r3, #1
 801820c:	b2da      	uxtb	r2, r3
 801820e:	4b76      	ldr	r3, [pc, #472]	@ (80183e8 <MAP_moveNextBlock_Sla+0x4e0>)
 8018210:	701a      	strb	r2, [r3, #0]
				else{
					MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
					uc_SlaCnt++;
				}
			}
			break;
 8018212:	e0d1      	b.n	80183b8 <MAP_moveNextBlock_Sla+0x4b0>
				if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8018214:	4b6f      	ldr	r3, [pc, #444]	@ (80183d4 <MAP_moveNextBlock_Sla+0x4cc>)
 8018216:	781b      	ldrb	r3, [r3, #0]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d10e      	bne.n	801823a <MAP_moveNextBlock_Sla+0x332>
 801821c:	4b6e      	ldr	r3, [pc, #440]	@ (80183d8 <MAP_moveNextBlock_Sla+0x4d0>)
 801821e:	781b      	ldrb	r3, [r3, #0]
 8018220:	4618      	mov	r0, r3
 8018222:	4b6e      	ldr	r3, [pc, #440]	@ (80183dc <MAP_moveNextBlock_Sla+0x4d4>)
 8018224:	781b      	ldrb	r3, [r3, #0]
 8018226:	4619      	mov	r1, r3
 8018228:	4a6d      	ldr	r2, [pc, #436]	@ (80183e0 <MAP_moveNextBlock_Sla+0x4d8>)
 801822a:	0143      	lsls	r3, r0, #5
 801822c:	4413      	add	r3, r2
 801822e:	440b      	add	r3, r1
 8018230:	781b      	ldrb	r3, [r3, #0]
 8018232:	f003 0302 	and.w	r3, r3, #2
 8018236:	2b00      	cmp	r3, #0
 8018238:	d138      	bne.n	80182ac <MAP_moveNextBlock_Sla+0x3a4>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 801823a:	4b66      	ldr	r3, [pc, #408]	@ (80183d4 <MAP_moveNextBlock_Sla+0x4cc>)
 801823c:	781b      	ldrb	r3, [r3, #0]
				if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 801823e:	2b01      	cmp	r3, #1
 8018240:	d10e      	bne.n	8018260 <MAP_moveNextBlock_Sla+0x358>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8018242:	4b65      	ldr	r3, [pc, #404]	@ (80183d8 <MAP_moveNextBlock_Sla+0x4d0>)
 8018244:	781b      	ldrb	r3, [r3, #0]
 8018246:	4618      	mov	r0, r3
 8018248:	4b64      	ldr	r3, [pc, #400]	@ (80183dc <MAP_moveNextBlock_Sla+0x4d4>)
 801824a:	781b      	ldrb	r3, [r3, #0]
 801824c:	4619      	mov	r1, r3
 801824e:	4a64      	ldr	r2, [pc, #400]	@ (80183e0 <MAP_moveNextBlock_Sla+0x4d8>)
 8018250:	0143      	lsls	r3, r0, #5
 8018252:	4413      	add	r3, r2
 8018254:	440b      	add	r3, r1
 8018256:	781b      	ldrb	r3, [r3, #0]
 8018258:	f003 0304 	and.w	r3, r3, #4
 801825c:	2b00      	cmp	r3, #0
 801825e:	d125      	bne.n	80182ac <MAP_moveNextBlock_Sla+0x3a4>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8018260:	4b5c      	ldr	r3, [pc, #368]	@ (80183d4 <MAP_moveNextBlock_Sla+0x4cc>)
 8018262:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8018264:	2b02      	cmp	r3, #2
 8018266:	d10e      	bne.n	8018286 <MAP_moveNextBlock_Sla+0x37e>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8018268:	4b5b      	ldr	r3, [pc, #364]	@ (80183d8 <MAP_moveNextBlock_Sla+0x4d0>)
 801826a:	781b      	ldrb	r3, [r3, #0]
 801826c:	4618      	mov	r0, r3
 801826e:	4b5b      	ldr	r3, [pc, #364]	@ (80183dc <MAP_moveNextBlock_Sla+0x4d4>)
 8018270:	781b      	ldrb	r3, [r3, #0]
 8018272:	4619      	mov	r1, r3
 8018274:	4a5a      	ldr	r2, [pc, #360]	@ (80183e0 <MAP_moveNextBlock_Sla+0x4d8>)
 8018276:	0143      	lsls	r3, r0, #5
 8018278:	4413      	add	r3, r2
 801827a:	440b      	add	r3, r1
 801827c:	781b      	ldrb	r3, [r3, #0]
 801827e:	f003 0308 	and.w	r3, r3, #8
 8018282:	2b00      	cmp	r3, #0
 8018284:	d112      	bne.n	80182ac <MAP_moveNextBlock_Sla+0x3a4>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8018286:	4b53      	ldr	r3, [pc, #332]	@ (80183d4 <MAP_moveNextBlock_Sla+0x4cc>)
 8018288:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 801828a:	2b03      	cmp	r3, #3
 801828c:	d123      	bne.n	80182d6 <MAP_moveNextBlock_Sla+0x3ce>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 801828e:	4b52      	ldr	r3, [pc, #328]	@ (80183d8 <MAP_moveNextBlock_Sla+0x4d0>)
 8018290:	781b      	ldrb	r3, [r3, #0]
 8018292:	4618      	mov	r0, r3
 8018294:	4b51      	ldr	r3, [pc, #324]	@ (80183dc <MAP_moveNextBlock_Sla+0x4d4>)
 8018296:	781b      	ldrb	r3, [r3, #0]
 8018298:	4619      	mov	r1, r3
 801829a:	4a51      	ldr	r2, [pc, #324]	@ (80183e0 <MAP_moveNextBlock_Sla+0x4d8>)
 801829c:	0143      	lsls	r3, r0, #5
 801829e:	4413      	add	r3, r2
 80182a0:	440b      	add	r3, r1
 80182a2:	781b      	ldrb	r3, [r3, #0]
 80182a4:	f003 0301 	and.w	r3, r3, #1
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d014      	beq.n	80182d6 <MAP_moveNextBlock_Sla+0x3ce>
					MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 80182ac:	eddf 0a50 	vldr	s1, [pc, #320]	@ 80183f0 <MAP_moveNextBlock_Sla+0x4e8>
 80182b0:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80182b4:	f7f7 fa62 	bl	800f77c <MOT_goBlock_FinSpeed>
					MOT_turn(MOT_L90);					// 右90度旋回
 80182b8:	2001      	movs	r0, #1
 80182ba:	f7f7 fc89 	bl	800fbd0 <MOT_turn>
					uc_SlaCnt = 0;
 80182be:	4b4a      	ldr	r3, [pc, #296]	@ (80183e8 <MAP_moveNextBlock_Sla+0x4e0>)
 80182c0:	2200      	movs	r2, #0
 80182c2:	701a      	strb	r2, [r3, #0]
					MOT_goHitBackWall();					// バックする
 80182c4:	f7f8 ffae 	bl	8011224 <MOT_goHitBackWall>
					f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 80182c8:	4b4a      	ldr	r3, [pc, #296]	@ (80183f4 <MAP_moveNextBlock_Sla+0x4ec>)
 80182ca:	4a4b      	ldr	r2, [pc, #300]	@ (80183f8 <MAP_moveNextBlock_Sla+0x4f0>)
 80182cc:	601a      	str	r2, [r3, #0]
					*p_type = TRUE;							// 次は半区間（＋バック）分進める
 80182ce:	683b      	ldr	r3, [r7, #0]
 80182d0:	2201      	movs	r2, #1
 80182d2:	701a      	strb	r2, [r3, #0]
			break;
 80182d4:	e070      	b.n	80183b8 <MAP_moveNextBlock_Sla+0x4b0>
					MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 80182d6:	2000      	movs	r0, #0
 80182d8:	f7eb fd8a 	bl	8003df0 <PARAM_getSra>
 80182dc:	4603      	mov	r3, r0
 80182de:	4619      	mov	r1, r3
 80182e0:	2001      	movs	r0, #1
 80182e2:	f7f9 f801 	bl	80112e8 <MOT_goSla>
					uc_SlaCnt++;
 80182e6:	4b40      	ldr	r3, [pc, #256]	@ (80183e8 <MAP_moveNextBlock_Sla+0x4e0>)
 80182e8:	781b      	ldrb	r3, [r3, #0]
 80182ea:	3301      	adds	r3, #1
 80182ec:	b2da      	uxtb	r2, r3
 80182ee:	4b3e      	ldr	r3, [pc, #248]	@ (80183e8 <MAP_moveNextBlock_Sla+0x4e0>)
 80182f0:	701a      	strb	r2, [r3, #0]
			break;
 80182f2:	e061      	b.n	80183b8 <MAP_moveNextBlock_Sla+0x4b0>

		// 反転して戻る
		case SOUTH:
			MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 80182f4:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 80183f0 <MAP_moveNextBlock_Sla+0x4e8>
 80182f8:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80182fc:	f7f7 fa3e 	bl	800f77c <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R180);									// 右180度旋回
 8018300:	2002      	movs	r0, #2
 8018302:	f7f7 fc65 	bl	800fbd0 <MOT_turn>
			uc_SlaCnt = 0;
 8018306:	4b38      	ldr	r3, [pc, #224]	@ (80183e8 <MAP_moveNextBlock_Sla+0x4e0>)
 8018308:	2200      	movs	r2, #0
 801830a:	701a      	strb	r2, [r3, #0]
			
			/* 壁当て姿勢制御（後ろに壁があったらバック＋移動距離を加算する） */
			if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 801830c:	4b31      	ldr	r3, [pc, #196]	@ (80183d4 <MAP_moveNextBlock_Sla+0x4cc>)
 801830e:	781b      	ldrb	r3, [r3, #0]
 8018310:	2b00      	cmp	r3, #0
 8018312:	d10e      	bne.n	8018332 <MAP_moveNextBlock_Sla+0x42a>
 8018314:	4b30      	ldr	r3, [pc, #192]	@ (80183d8 <MAP_moveNextBlock_Sla+0x4d0>)
 8018316:	781b      	ldrb	r3, [r3, #0]
 8018318:	4618      	mov	r0, r3
 801831a:	4b30      	ldr	r3, [pc, #192]	@ (80183dc <MAP_moveNextBlock_Sla+0x4d4>)
 801831c:	781b      	ldrb	r3, [r3, #0]
 801831e:	4619      	mov	r1, r3
 8018320:	4a2f      	ldr	r2, [pc, #188]	@ (80183e0 <MAP_moveNextBlock_Sla+0x4d8>)
 8018322:	0143      	lsls	r3, r0, #5
 8018324:	4413      	add	r3, r2
 8018326:	440b      	add	r3, r1
 8018328:	781b      	ldrb	r3, [r3, #0]
 801832a:	f003 0301 	and.w	r3, r3, #1
 801832e:	2b00      	cmp	r3, #0
 8018330:	d138      	bne.n	80183a4 <MAP_moveNextBlock_Sla+0x49c>
				( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8018332:	4b28      	ldr	r3, [pc, #160]	@ (80183d4 <MAP_moveNextBlock_Sla+0x4cc>)
 8018334:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8018336:	2b01      	cmp	r3, #1
 8018338:	d10e      	bne.n	8018358 <MAP_moveNextBlock_Sla+0x450>
				( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 801833a:	4b27      	ldr	r3, [pc, #156]	@ (80183d8 <MAP_moveNextBlock_Sla+0x4d0>)
 801833c:	781b      	ldrb	r3, [r3, #0]
 801833e:	4618      	mov	r0, r3
 8018340:	4b26      	ldr	r3, [pc, #152]	@ (80183dc <MAP_moveNextBlock_Sla+0x4d4>)
 8018342:	781b      	ldrb	r3, [r3, #0]
 8018344:	4619      	mov	r1, r3
 8018346:	4a26      	ldr	r2, [pc, #152]	@ (80183e0 <MAP_moveNextBlock_Sla+0x4d8>)
 8018348:	0143      	lsls	r3, r0, #5
 801834a:	4413      	add	r3, r2
 801834c:	440b      	add	r3, r1
 801834e:	781b      	ldrb	r3, [r3, #0]
 8018350:	f003 0302 	and.w	r3, r3, #2
 8018354:	2b00      	cmp	r3, #0
 8018356:	d125      	bne.n	80183a4 <MAP_moveNextBlock_Sla+0x49c>
				( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8018358:	4b1e      	ldr	r3, [pc, #120]	@ (80183d4 <MAP_moveNextBlock_Sla+0x4cc>)
 801835a:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 801835c:	2b02      	cmp	r3, #2
 801835e:	d10e      	bne.n	801837e <MAP_moveNextBlock_Sla+0x476>
				( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8018360:	4b1d      	ldr	r3, [pc, #116]	@ (80183d8 <MAP_moveNextBlock_Sla+0x4d0>)
 8018362:	781b      	ldrb	r3, [r3, #0]
 8018364:	4618      	mov	r0, r3
 8018366:	4b1d      	ldr	r3, [pc, #116]	@ (80183dc <MAP_moveNextBlock_Sla+0x4d4>)
 8018368:	781b      	ldrb	r3, [r3, #0]
 801836a:	4619      	mov	r1, r3
 801836c:	4a1c      	ldr	r2, [pc, #112]	@ (80183e0 <MAP_moveNextBlock_Sla+0x4d8>)
 801836e:	0143      	lsls	r3, r0, #5
 8018370:	4413      	add	r3, r2
 8018372:	440b      	add	r3, r1
 8018374:	781b      	ldrb	r3, [r3, #0]
 8018376:	f003 0304 	and.w	r3, r3, #4
 801837a:	2b00      	cmp	r3, #0
 801837c:	d112      	bne.n	80183a4 <MAP_moveNextBlock_Sla+0x49c>
				( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 801837e:	4b15      	ldr	r3, [pc, #84]	@ (80183d4 <MAP_moveNextBlock_Sla+0x4cc>)
 8018380:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8018382:	2b03      	cmp	r3, #3
 8018384:	d113      	bne.n	80183ae <MAP_moveNextBlock_Sla+0x4a6>
				( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8018386:	4b14      	ldr	r3, [pc, #80]	@ (80183d8 <MAP_moveNextBlock_Sla+0x4d0>)
 8018388:	781b      	ldrb	r3, [r3, #0]
 801838a:	4618      	mov	r0, r3
 801838c:	4b13      	ldr	r3, [pc, #76]	@ (80183dc <MAP_moveNextBlock_Sla+0x4d4>)
 801838e:	781b      	ldrb	r3, [r3, #0]
 8018390:	4619      	mov	r1, r3
 8018392:	4a13      	ldr	r2, [pc, #76]	@ (80183e0 <MAP_moveNextBlock_Sla+0x4d8>)
 8018394:	0143      	lsls	r3, r0, #5
 8018396:	4413      	add	r3, r2
 8018398:	440b      	add	r3, r1
 801839a:	781b      	ldrb	r3, [r3, #0]
 801839c:	f003 0308 	and.w	r3, r3, #8
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d004      	beq.n	80183ae <MAP_moveNextBlock_Sla+0x4a6>
			){
				MOT_goHitBackWall();					// バックする
 80183a4:	f7f8 ff3e 	bl	8011224 <MOT_goHitBackWall>
				f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 80183a8:	4b12      	ldr	r3, [pc, #72]	@ (80183f4 <MAP_moveNextBlock_Sla+0x4ec>)
 80183aa:	4a13      	ldr	r2, [pc, #76]	@ (80183f8 <MAP_moveNextBlock_Sla+0x4f0>)
 80183ac:	601a      	str	r2, [r3, #0]
			}
			*p_type = TRUE;								// 次は半区間＋バック分進める
 80183ae:	683b      	ldr	r3, [r7, #0]
 80183b0:	2201      	movs	r2, #1
 80183b2:	701a      	strb	r2, [r3, #0]
			break;
 80183b4:	e000      	b.n	80183b8 <MAP_moveNextBlock_Sla+0x4b0>
			
		default:
			break;
 80183b6:	bf00      	nop
		MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);			// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
		MAP_moveNextBlock_Sla(en_head, p_type, TRUE );		// もう１度呼び出し（次の区画へ移動）
	}
	else{*/
		/* 進行方向更新 */
		en_Head = (enMAP_HEAD_DIR)( (en_Head + en_head) & (MAP_HEAD_DIR_MAX-1) );
 80183b8:	4b06      	ldr	r3, [pc, #24]	@ (80183d4 <MAP_moveNextBlock_Sla+0x4cc>)
 80183ba:	781a      	ldrb	r2, [r3, #0]
 80183bc:	79fb      	ldrb	r3, [r7, #7]
 80183be:	4413      	add	r3, r2
 80183c0:	b2db      	uxtb	r3, r3
 80183c2:	f003 0303 	and.w	r3, r3, #3
 80183c6:	b2da      	uxtb	r2, r3
 80183c8:	4b02      	ldr	r3, [pc, #8]	@ (80183d4 <MAP_moveNextBlock_Sla+0x4cc>)
 80183ca:	701a      	strb	r2, [r3, #0]
//	}
}
 80183cc:	bf00      	nop
 80183ce:	3708      	adds	r7, #8
 80183d0:	46bd      	mov	sp, r7
 80183d2:	bd80      	pop	{r7, pc}
 80183d4:	2001ad8a 	.word	0x2001ad8a
 80183d8:	2001ad8b 	.word	0x2001ad8b
 80183dc:	2001ad8c 	.word	0x2001ad8c
 80183e0:	2001b5a0 	.word	0x2001b5a0
 80183e4:	20000400 	.word	0x20000400
 80183e8:	2001ad94 	.word	0x2001ad94
 80183ec:	2000001c 	.word	0x2000001c
 80183f0:	00000000 	.word	0x00000000
 80183f4:	2001ad90 	.word	0x2001ad90
 80183f8:	3e5c28f6 	.word	0x3e5c28f6

080183fc <MAP_moveNextBlock_frontmiss>:

void MAP_moveNextBlock_frontmiss( 
	enMAP_HEAD_DIR 	en_head,		///< [in] 相対進行方向（マウス進行方向を北としている）
	bool*			p_type			///< [in] FALSE: １区間前進状態、TURE:半区間前進状態
){
 80183fc:	b580      	push	{r7, lr}
 80183fe:	b082      	sub	sp, #8
 8018400:	af00      	add	r7, sp, #0
 8018402:	4603      	mov	r3, r0
 8018404:	6039      	str	r1, [r7, #0]
 8018406:	71fb      	strb	r3, [r7, #7]
	*p_type = FALSE;
 8018408:	683b      	ldr	r3, [r7, #0]
 801840a:	2200      	movs	r2, #0
 801840c:	701a      	strb	r2, [r3, #0]
	f_MoveBackDist = 0;				// 移動距離を加算値クリア
 801840e:	4b23      	ldr	r3, [pc, #140]	@ (801849c <MAP_moveNextBlock_frontmiss+0xa0>)
 8018410:	f04f 0200 	mov.w	r2, #0
 8018414:	601a      	str	r2, [r3, #0]
	
	/* 動作 */
	switch( en_head ){
 8018416:	79fb      	ldrb	r3, [r7, #7]
 8018418:	2b03      	cmp	r3, #3
 801841a:	d830      	bhi.n	801847e <MAP_moveNextBlock_frontmiss+0x82>
 801841c:	a201      	add	r2, pc, #4	@ (adr r2, 8018424 <MAP_moveNextBlock_frontmiss+0x28>)
 801841e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018422:	bf00      	nop
 8018424:	08018435 	.word	0x08018435
 8018428:	08018443 	.word	0x08018443
 801842c:	0801846b 	.word	0x0801846b
 8018430:	08018457 	.word	0x08018457

		/* そのまま前進 */
		case NORTH:
			MOT_goBlock_FinSpeed( 0.5, SEARCH_SPEED );				// 1区画前進
 8018434:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 80184a0 <MAP_moveNextBlock_frontmiss+0xa4>
 8018438:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 801843c:	f7f7 f99e 	bl	800f77c <MOT_goBlock_FinSpeed>
			break;
 8018440:	e01e      	b.n	8018480 <MAP_moveNextBlock_frontmiss+0x84>
		// 右に旋回する
		case EAST:
			MOT_turn(MOT_R90);					// 右90度旋回
 8018442:	2000      	movs	r0, #0
 8018444:	f7f7 fbc4 	bl	800fbd0 <MOT_turn>
			MOT_goBlock_FinSpeed( 0.5, SEARCH_SPEED );		// 半区画前進
 8018448:	eddf 0a15 	vldr	s1, [pc, #84]	@ 80184a0 <MAP_moveNextBlock_frontmiss+0xa4>
 801844c:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8018450:	f7f7 f994 	bl	800f77c <MOT_goBlock_FinSpeed>
			break;
 8018454:	e014      	b.n	8018480 <MAP_moveNextBlock_frontmiss+0x84>
		// 左に旋回する
		case WEST:
			MOT_turn(MOT_L90);					// 右90度旋回
 8018456:	2001      	movs	r0, #1
 8018458:	f7f7 fbba 	bl	800fbd0 <MOT_turn>
			MOT_goBlock_FinSpeed( 0.5, SEARCH_SPEED );		// 半区画前進
 801845c:	eddf 0a10 	vldr	s1, [pc, #64]	@ 80184a0 <MAP_moveNextBlock_frontmiss+0xa4>
 8018460:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8018464:	f7f7 f98a 	bl	800f77c <MOT_goBlock_FinSpeed>
			break;
 8018468:	e00a      	b.n	8018480 <MAP_moveNextBlock_frontmiss+0x84>
		// 反転して戻る
		case SOUTH:
			MOT_turn(MOT_R180);					// 右180度旋回
 801846a:	2002      	movs	r0, #2
 801846c:	f7f7 fbb0 	bl	800fbd0 <MOT_turn>
			MOT_goBlock_FinSpeed( 0.5, SEARCH_SPEED );		// 半区画前進
 8018470:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 80184a0 <MAP_moveNextBlock_frontmiss+0xa4>
 8018474:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8018478:	f7f7 f980 	bl	800f77c <MOT_goBlock_FinSpeed>
			break;
 801847c:	e000      	b.n	8018480 <MAP_moveNextBlock_frontmiss+0x84>
		default:
			break;
 801847e:	bf00      	nop
	}

	en_Head = (enMAP_HEAD_DIR)( (en_Head + en_head) & (MAP_HEAD_DIR_MAX-1) );
 8018480:	4b08      	ldr	r3, [pc, #32]	@ (80184a4 <MAP_moveNextBlock_frontmiss+0xa8>)
 8018482:	781a      	ldrb	r2, [r3, #0]
 8018484:	79fb      	ldrb	r3, [r7, #7]
 8018486:	4413      	add	r3, r2
 8018488:	b2db      	uxtb	r3, r3
 801848a:	f003 0303 	and.w	r3, r3, #3
 801848e:	b2da      	uxtb	r2, r3
 8018490:	4b04      	ldr	r3, [pc, #16]	@ (80184a4 <MAP_moveNextBlock_frontmiss+0xa8>)
 8018492:	701a      	strb	r2, [r3, #0]

}
 8018494:	bf00      	nop
 8018496:	3708      	adds	r7, #8
 8018498:	46bd      	mov	sp, r7
 801849a:	bd80      	pop	{r7, pc}
 801849c:	2001ad90 	.word	0x2001ad90
 80184a0:	3e99999a 	.word	0x3e99999a
 80184a4:	2001ad8a 	.word	0x2001ad8a

080184a8 <MAP_actGoal>:

void MAP_actGoal( void )
{	
 80184a8:	b580      	push	{r7, lr}
 80184aa:	af00      	add	r7, sp, #0
	MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 80184ac:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80184ec <MAP_actGoal+0x44>
 80184b0:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80184b4:	f7f7 f962 	bl	800f77c <MOT_goBlock_FinSpeed>
	LL_mDelay(500);
 80184b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80184bc:	f003 fb42 	bl	801bb44 <LL_mDelay>
	MOT_turn(MOT_R180);										// 右180度旋回
 80184c0:	2002      	movs	r0, #2
 80184c2:	f7f7 fb85 	bl	800fbd0 <MOT_turn>
	LL_mDelay(500);
 80184c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80184ca:	f003 fb3b 	bl	801bb44 <LL_mDelay>
	
//	MAP_SaveMapData();						// 迷路情報のバックアップ
	log_flag_off();
 80184ce:	f7f1 fd11 	bl	8009ef4 <log_flag_off>
	MAP_actGoalLED();
 80184d2:	f000 f80f 	bl	80184f4 <MAP_actGoalLED>
	
	en_Head = (enMAP_HEAD_DIR)( (en_Head + 2) & (MAP_HEAD_DIR_MAX-1) );			//	進行方向更新
 80184d6:	4b06      	ldr	r3, [pc, #24]	@ (80184f0 <MAP_actGoal+0x48>)
 80184d8:	781b      	ldrb	r3, [r3, #0]
 80184da:	3302      	adds	r3, #2
 80184dc:	b2db      	uxtb	r3, r3
 80184de:	f003 0303 	and.w	r3, r3, #3
 80184e2:	b2da      	uxtb	r2, r3
 80184e4:	4b02      	ldr	r3, [pc, #8]	@ (80184f0 <MAP_actGoal+0x48>)
 80184e6:	701a      	strb	r2, [r3, #0]

}
 80184e8:	bf00      	nop
 80184ea:	bd80      	pop	{r7, pc}
 80184ec:	00000000 	.word	0x00000000
 80184f0:	2001ad8a 	.word	0x2001ad8a

080184f4 <MAP_actGoalLED>:

void MAP_actGoalLED( void )
{
 80184f4:	b580      	push	{r7, lr}
 80184f6:	b082      	sub	sp, #8
 80184f8:	af00      	add	r7, sp, #0
	int i;
	for(i = 0;i<2;i++)
 80184fa:	2300      	movs	r3, #0
 80184fc:	607b      	str	r3, [r7, #4]
 80184fe:	e020      	b.n	8018542 <MAP_actGoalLED+0x4e>
	{
		SetLED(0x02);
 8018500:	2002      	movs	r0, #2
 8018502:	f7e9 fce9 	bl	8001ed8 <SetLED>
		LL_mDelay(100);
 8018506:	2064      	movs	r0, #100	@ 0x64
 8018508:	f003 fb1c 	bl	801bb44 <LL_mDelay>
		SetLED(0x04);
 801850c:	2004      	movs	r0, #4
 801850e:	f7e9 fce3 	bl	8001ed8 <SetLED>
		LL_mDelay(100);
 8018512:	2064      	movs	r0, #100	@ 0x64
 8018514:	f003 fb16 	bl	801bb44 <LL_mDelay>
		SetLED(0x08);
 8018518:	2008      	movs	r0, #8
 801851a:	f7e9 fcdd 	bl	8001ed8 <SetLED>
		LL_mDelay(100);
 801851e:	2064      	movs	r0, #100	@ 0x64
 8018520:	f003 fb10 	bl	801bb44 <LL_mDelay>
		SetLED(0x04);
 8018524:	2004      	movs	r0, #4
 8018526:	f7e9 fcd7 	bl	8001ed8 <SetLED>
		LL_mDelay(100);
 801852a:	2064      	movs	r0, #100	@ 0x64
 801852c:	f003 fb0a 	bl	801bb44 <LL_mDelay>
		SetLED(0x02);
 8018530:	2002      	movs	r0, #2
 8018532:	f7e9 fcd1 	bl	8001ed8 <SetLED>
		LL_mDelay(100);
 8018536:	2064      	movs	r0, #100	@ 0x64
 8018538:	f003 fb04 	bl	801bb44 <LL_mDelay>
	for(i = 0;i<2;i++)
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	3301      	adds	r3, #1
 8018540:	607b      	str	r3, [r7, #4]
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	2b01      	cmp	r3, #1
 8018546:	dddb      	ble.n	8018500 <MAP_actGoalLED+0xc>
	}
	LL_mDelay(100);
 8018548:	2064      	movs	r0, #100	@ 0x64
 801854a:	f003 fafb 	bl	801bb44 <LL_mDelay>
	Map_Write();
 801854e:	f7fe faad 	bl	8016aac <Map_Write>
	SetLED(0x00);
 8018552:	2000      	movs	r0, #0
 8018554:	f7e9 fcc0 	bl	8001ed8 <SetLED>
}
 8018558:	bf00      	nop
 801855a:	3708      	adds	r7, #8
 801855c:	46bd      	mov	sp, r7
 801855e:	bd80      	pop	{r7, pc}

08018560 <MAP_Goalsize>:

void MAP_Goalsize(int size)
{
 8018560:	b480      	push	{r7}
 8018562:	b083      	sub	sp, #12
 8018564:	af00      	add	r7, sp, #0
 8018566:	6078      	str	r0, [r7, #4]
	GOAL_SIZE= size;
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	b2da      	uxtb	r2, r3
 801856c:	4b13      	ldr	r3, [pc, #76]	@ (80185bc <MAP_Goalsize+0x5c>)
 801856e:	701a      	strb	r2, [r3, #0]
	if (size == 4) {
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	2b04      	cmp	r3, #4
 8018574:	d10c      	bne.n	8018590 <MAP_Goalsize+0x30>
		uc_max_x = uc_max_x + 1;
 8018576:	4b12      	ldr	r3, [pc, #72]	@ (80185c0 <MAP_Goalsize+0x60>)
 8018578:	781b      	ldrb	r3, [r3, #0]
 801857a:	3301      	adds	r3, #1
 801857c:	b2da      	uxtb	r2, r3
 801857e:	4b10      	ldr	r3, [pc, #64]	@ (80185c0 <MAP_Goalsize+0x60>)
 8018580:	701a      	strb	r2, [r3, #0]
		uc_max_y = uc_max_y + 1;
 8018582:	4b10      	ldr	r3, [pc, #64]	@ (80185c4 <MAP_Goalsize+0x64>)
 8018584:	781b      	ldrb	r3, [r3, #0]
 8018586:	3301      	adds	r3, #1
 8018588:	b2da      	uxtb	r2, r3
 801858a:	4b0e      	ldr	r3, [pc, #56]	@ (80185c4 <MAP_Goalsize+0x64>)
 801858c:	701a      	strb	r2, [r3, #0]
	}
	else if (size == 9) {
		uc_max_x = uc_max_x + 2;
		uc_max_y = uc_max_y + 2;
	}
}
 801858e:	e00e      	b.n	80185ae <MAP_Goalsize+0x4e>
	else if (size == 9) {
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	2b09      	cmp	r3, #9
 8018594:	d10b      	bne.n	80185ae <MAP_Goalsize+0x4e>
		uc_max_x = uc_max_x + 2;
 8018596:	4b0a      	ldr	r3, [pc, #40]	@ (80185c0 <MAP_Goalsize+0x60>)
 8018598:	781b      	ldrb	r3, [r3, #0]
 801859a:	3302      	adds	r3, #2
 801859c:	b2da      	uxtb	r2, r3
 801859e:	4b08      	ldr	r3, [pc, #32]	@ (80185c0 <MAP_Goalsize+0x60>)
 80185a0:	701a      	strb	r2, [r3, #0]
		uc_max_y = uc_max_y + 2;
 80185a2:	4b08      	ldr	r3, [pc, #32]	@ (80185c4 <MAP_Goalsize+0x64>)
 80185a4:	781b      	ldrb	r3, [r3, #0]
 80185a6:	3302      	adds	r3, #2
 80185a8:	b2da      	uxtb	r2, r3
 80185aa:	4b06      	ldr	r3, [pc, #24]	@ (80185c4 <MAP_Goalsize+0x64>)
 80185ac:	701a      	strb	r2, [r3, #0]
}
 80185ae:	bf00      	nop
 80185b0:	370c      	adds	r7, #12
 80185b2:	46bd      	mov	sp, r7
 80185b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b8:	4770      	bx	lr
 80185ba:	bf00      	nop
 80185bc:	2001ad97 	.word	0x2001ad97
 80185c0:	2000001a 	.word	0x2000001a
 80185c4:	2000001b 	.word	0x2000001b

080185c8 <MAP_makeReturnContourMap>:

void  MAP_makeReturnContourMap(uint8_t uc_staX,uint8_t uc_staY) 
{
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b0cc      	sub	sp, #304	@ 0x130
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	4602      	mov	r2, r0
 80185d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80185d4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80185d8:	701a      	strb	r2, [r3, #0]
 80185da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80185de:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80185e2:	460a      	mov	r2, r1
 80185e4:	701a      	strb	r2, [r3, #0]
	uint16_t		uc_level;		// 等高線
	uint8_t		uc_wallData;	// 壁情報

	stPOSITION		st_pos;
	queue_t queue;
	queue_t* pQueue = &queue;
 80185e6:	f107 0310 	add.w	r3, r7, #16
 80185ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	InitQueue(pQueue);
 80185ee:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80185f2:	f7eb fc11 	bl	8003e18 <InitQueue>

	/* 等高線マップを初期化する */
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 80185f6:	2300      	movs	r3, #0
 80185f8:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
 80185fc:	e014      	b.n	8018628 <MAP_makeReturnContourMap+0x60>
		us_Cmap[i / MAP_Y_SIZE][i & (MAP_X_SIZE - 1)] = MAP_SMAP_MAX_VAL - 1;
 80185fe:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8018602:	095b      	lsrs	r3, r3, #5
 8018604:	b29b      	uxth	r3, r3
 8018606:	461a      	mov	r2, r3
 8018608:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 801860c:	f003 031f 	and.w	r3, r3, #31
 8018610:	49cd      	ldr	r1, [pc, #820]	@ (8018948 <MAP_makeReturnContourMap+0x380>)
 8018612:	0152      	lsls	r2, r2, #5
 8018614:	4413      	add	r3, r2
 8018616:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801861a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 801861e:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8018622:	3301      	adds	r3, #1
 8018624:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
 8018628:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 801862c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018630:	d3e5      	bcc.n	80185fe <MAP_makeReturnContourMap+0x36>
	}
	/* 目標地点の等高線を0に設定 */
//	us_Cmap[0][0] = 0;
	setStep(0, 0, 0);
 8018632:	2200      	movs	r2, #0
 8018634:	2100      	movs	r1, #0
 8018636:	2000      	movs	r0, #0
 8018638:	f7fe fe6e 	bl	8017318 <setStep>
	st_pos.x = 0;
 801863c:	2300      	movs	r3, #0
 801863e:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
	st_pos.y = 0;
 8018642:	2300      	movs	r3, #0
 8018644:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	st_pos.step = 0;
 8018648:	2300      	movs	r3, #0
 801864a:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e

	EnQueue(pQueue,st_pos);
 801864e:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8018652:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8018656:	f7eb fc0f 	bl	8003e78 <EnQueue>

	/* 等高線マップを作成 */
	while (pQueue->flag != EMPTY) {
 801865a:	e167      	b.n	801892c <MAP_makeReturnContourMap+0x364>
		const stPOSITION focus = DeQueue(pQueue);
 801865c:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8018660:	f7eb fc46 	bl	8003ef0 <DeQueue>
 8018664:	4602      	mov	r2, r0
 8018666:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801866a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801866e:	601a      	str	r2, [r3, #0]
//		q.pop();
		const uint16_t focus_step = focus.step;
 8018670:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018674:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8018678:	885b      	ldrh	r3, [r3, #2]
 801867a:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
		x = focus.x;
 801867e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018682:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8018686:	781b      	ldrb	r3, [r3, #0]
 8018688:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
		y = focus.y;
 801868c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018690:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8018694:	785b      	ldrb	r3, [r3, #1]
 8018696:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
		stPOSITION next = focus;
 801869a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801869e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80186a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80186a6:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 80186aa:	6812      	ldr	r2, [r2, #0]
 80186ac:	601a      	str	r2, [r3, #0]
		uc_wallData = g_SysMap[y][x];
 80186ae:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 80186b2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80186b6:	49a5      	ldr	r1, [pc, #660]	@ (801894c <MAP_makeReturnContourMap+0x384>)
 80186b8:	0152      	lsls	r2, r2, #5
 80186ba:	440a      	add	r2, r1
 80186bc:	4413      	add	r3, r2
 80186be:	781b      	ldrb	r3, [r3, #0]
 80186c0:	f887 3121 	strb.w	r3, [r7, #289]	@ 0x121

		if (((uc_wallData & 0x01) == 0x00) && (y != (MAP_Y_SIZE - 1))) {
 80186c4:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 80186c8:	f003 0301 	and.w	r3, r3, #1
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d146      	bne.n	801875e <MAP_makeReturnContourMap+0x196>
 80186d0:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80186d4:	2b1f      	cmp	r3, #31
 80186d6:	d042      	beq.n	801875e <MAP_makeReturnContourMap+0x196>
			if (us_Cmap[y + 1][x] > focus_step + 1) {
 80186d8:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80186dc:	1c5a      	adds	r2, r3, #1
 80186de:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80186e2:	4999      	ldr	r1, [pc, #612]	@ (8018948 <MAP_makeReturnContourMap+0x380>)
 80186e4:	0152      	lsls	r2, r2, #5
 80186e6:	4413      	add	r3, r2
 80186e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80186ec:	461a      	mov	r2, r3
 80186ee:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80186f2:	3301      	adds	r3, #1
 80186f4:	429a      	cmp	r2, r3
 80186f6:	dd32      	ble.n	801875e <MAP_makeReturnContourMap+0x196>
				next.step = focus_step + 1;
 80186f8:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80186fc:	3301      	adds	r3, #1
 80186fe:	b29a      	uxth	r2, r3
 8018700:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018704:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018708:	805a      	strh	r2, [r3, #2]
				us_Cmap[y + 1][x] = focus_step + 1;
 801870a:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 801870e:	1c5a      	adds	r2, r3, #1
 8018710:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8018714:	f8b7 1126 	ldrh.w	r1, [r7, #294]	@ 0x126
 8018718:	3101      	adds	r1, #1
 801871a:	b288      	uxth	r0, r1
 801871c:	498a      	ldr	r1, [pc, #552]	@ (8018948 <MAP_makeReturnContourMap+0x380>)
 801871e:	0152      	lsls	r2, r2, #5
 8018720:	4413      	add	r3, r2
 8018722:	4602      	mov	r2, r0
 8018724:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 8018728:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801872c:	b2da      	uxtb	r2, r3
 801872e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018732:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018736:	701a      	strb	r2, [r3, #0]
				next.y = y + 1;
 8018738:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 801873c:	b2db      	uxtb	r3, r3
 801873e:	3301      	adds	r3, #1
 8018740:	b2da      	uxtb	r2, r3
 8018742:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018746:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801874a:	705a      	strb	r2, [r3, #1]
				EnQueue(pQueue,next);
 801874c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018750:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018754:	6819      	ldr	r1, [r3, #0]
 8018756:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 801875a:	f7eb fb8d 	bl	8003e78 <EnQueue>
			}
		}
		if (((uc_wallData & 0x02) == 0x00) && (x != (MAP_X_SIZE - 1))) {
 801875e:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 8018762:	f003 0302 	and.w	r3, r3, #2
 8018766:	2b00      	cmp	r3, #0
 8018768:	d146      	bne.n	80187f8 <MAP_makeReturnContourMap+0x230>
 801876a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801876e:	2b1f      	cmp	r3, #31
 8018770:	d042      	beq.n	80187f8 <MAP_makeReturnContourMap+0x230>
			if (us_Cmap[y][x + 1] > focus_step + 1) {
 8018772:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 8018776:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801877a:	3301      	adds	r3, #1
 801877c:	4972      	ldr	r1, [pc, #456]	@ (8018948 <MAP_makeReturnContourMap+0x380>)
 801877e:	0152      	lsls	r2, r2, #5
 8018780:	4413      	add	r3, r2
 8018782:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8018786:	461a      	mov	r2, r3
 8018788:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 801878c:	3301      	adds	r3, #1
 801878e:	429a      	cmp	r2, r3
 8018790:	dd32      	ble.n	80187f8 <MAP_makeReturnContourMap+0x230>
				next.step = focus_step + 1;
 8018792:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8018796:	3301      	adds	r3, #1
 8018798:	b29a      	uxth	r2, r3
 801879a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801879e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80187a2:	805a      	strh	r2, [r3, #2]
				us_Cmap[y][x + 1] = focus_step + 1;
 80187a4:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 80187a8:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80187ac:	3301      	adds	r3, #1
 80187ae:	f8b7 1126 	ldrh.w	r1, [r7, #294]	@ 0x126
 80187b2:	3101      	adds	r1, #1
 80187b4:	b288      	uxth	r0, r1
 80187b6:	4964      	ldr	r1, [pc, #400]	@ (8018948 <MAP_makeReturnContourMap+0x380>)
 80187b8:	0152      	lsls	r2, r2, #5
 80187ba:	4413      	add	r3, r2
 80187bc:	4602      	mov	r2, r0
 80187be:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x + 1;
 80187c2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80187c6:	b2db      	uxtb	r3, r3
 80187c8:	3301      	adds	r3, #1
 80187ca:	b2da      	uxtb	r2, r3
 80187cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80187d0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80187d4:	701a      	strb	r2, [r3, #0]
				next.y = y;
 80187d6:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80187da:	b2da      	uxtb	r2, r3
 80187dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80187e0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80187e4:	705a      	strb	r2, [r3, #1]
				EnQueue(pQueue, next);
 80187e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80187ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80187ee:	6819      	ldr	r1, [r3, #0]
 80187f0:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80187f4:	f7eb fb40 	bl	8003e78 <EnQueue>
			}
		}
		if (((uc_wallData & 0x04) == 0x00) && (y != 0)) {
 80187f8:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 80187fc:	f003 0304 	and.w	r3, r3, #4
 8018800:	2b00      	cmp	r3, #0
 8018802:	d146      	bne.n	8018892 <MAP_makeReturnContourMap+0x2ca>
 8018804:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8018808:	2b00      	cmp	r3, #0
 801880a:	d042      	beq.n	8018892 <MAP_makeReturnContourMap+0x2ca>
			if (us_Cmap[y - 1][x] > focus_step + 1) {
 801880c:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8018810:	1e5a      	subs	r2, r3, #1
 8018812:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8018816:	494c      	ldr	r1, [pc, #304]	@ (8018948 <MAP_makeReturnContourMap+0x380>)
 8018818:	0152      	lsls	r2, r2, #5
 801881a:	4413      	add	r3, r2
 801881c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8018820:	461a      	mov	r2, r3
 8018822:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8018826:	3301      	adds	r3, #1
 8018828:	429a      	cmp	r2, r3
 801882a:	dd32      	ble.n	8018892 <MAP_makeReturnContourMap+0x2ca>
				next.step = focus_step + 1;
 801882c:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8018830:	3301      	adds	r3, #1
 8018832:	b29a      	uxth	r2, r3
 8018834:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018838:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801883c:	805a      	strh	r2, [r3, #2]
				us_Cmap[y - 1][x] = focus_step + 1;
 801883e:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8018842:	1e5a      	subs	r2, r3, #1
 8018844:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8018848:	f8b7 1126 	ldrh.w	r1, [r7, #294]	@ 0x126
 801884c:	3101      	adds	r1, #1
 801884e:	b288      	uxth	r0, r1
 8018850:	493d      	ldr	r1, [pc, #244]	@ (8018948 <MAP_makeReturnContourMap+0x380>)
 8018852:	0152      	lsls	r2, r2, #5
 8018854:	4413      	add	r3, r2
 8018856:	4602      	mov	r2, r0
 8018858:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 801885c:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8018860:	b2da      	uxtb	r2, r3
 8018862:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018866:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801886a:	701a      	strb	r2, [r3, #0]
				next.y = y - 1;
 801886c:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8018870:	b2db      	uxtb	r3, r3
 8018872:	3b01      	subs	r3, #1
 8018874:	b2da      	uxtb	r2, r3
 8018876:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801887a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801887e:	705a      	strb	r2, [r3, #1]
				EnQueue(pQueue, next);
 8018880:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018884:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018888:	6819      	ldr	r1, [r3, #0]
 801888a:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 801888e:	f7eb faf3 	bl	8003e78 <EnQueue>
			}
		}
		if (((uc_wallData & 0x08) == 0x00) && (x != 0)) {
 8018892:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 8018896:	f003 0308 	and.w	r3, r3, #8
 801889a:	2b00      	cmp	r3, #0
 801889c:	d146      	bne.n	801892c <MAP_makeReturnContourMap+0x364>
 801889e:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d042      	beq.n	801892c <MAP_makeReturnContourMap+0x364>
			if (us_Cmap[y][x - 1] > focus_step + 1) {
 80188a6:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 80188aa:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80188ae:	3b01      	subs	r3, #1
 80188b0:	4925      	ldr	r1, [pc, #148]	@ (8018948 <MAP_makeReturnContourMap+0x380>)
 80188b2:	0152      	lsls	r2, r2, #5
 80188b4:	4413      	add	r3, r2
 80188b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80188ba:	461a      	mov	r2, r3
 80188bc:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80188c0:	3301      	adds	r3, #1
 80188c2:	429a      	cmp	r2, r3
 80188c4:	dd32      	ble.n	801892c <MAP_makeReturnContourMap+0x364>
				next.step = focus_step + 1;
 80188c6:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80188ca:	3301      	adds	r3, #1
 80188cc:	b29a      	uxth	r2, r3
 80188ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80188d2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80188d6:	805a      	strh	r2, [r3, #2]
				us_Cmap[y][x - 1] = focus_step + 1;
 80188d8:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 80188dc:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80188e0:	3b01      	subs	r3, #1
 80188e2:	f8b7 1126 	ldrh.w	r1, [r7, #294]	@ 0x126
 80188e6:	3101      	adds	r1, #1
 80188e8:	b288      	uxth	r0, r1
 80188ea:	4917      	ldr	r1, [pc, #92]	@ (8018948 <MAP_makeReturnContourMap+0x380>)
 80188ec:	0152      	lsls	r2, r2, #5
 80188ee:	4413      	add	r3, r2
 80188f0:	4602      	mov	r2, r0
 80188f2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x - 1;
 80188f6:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80188fa:	b2db      	uxtb	r3, r3
 80188fc:	3b01      	subs	r3, #1
 80188fe:	b2da      	uxtb	r2, r3
 8018900:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018904:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018908:	701a      	strb	r2, [r3, #0]
				next.y = y;
 801890a:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 801890e:	b2da      	uxtb	r2, r3
 8018910:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018914:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018918:	705a      	strb	r2, [r3, #1]
				EnQueue(pQueue, next);
 801891a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801891e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018922:	6819      	ldr	r1, [r3, #0]
 8018924:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8018928:	f7eb faa6 	bl	8003e78 <EnQueue>
	while (pQueue->flag != EMPTY) {
 801892c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018930:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8018934:	2b00      	cmp	r3, #0
 8018936:	f47f ae91 	bne.w	801865c <MAP_makeReturnContourMap+0x94>
			}
		}

	}

}
 801893a:	bf00      	nop
 801893c:	bf00      	nop
 801893e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8018942:	46bd      	mov	sp, r7
 8018944:	bd80      	pop	{r7, pc}
 8018946:	bf00      	nop
 8018948:	2001ada0 	.word	0x2001ada0
 801894c:	2001b5a0 	.word	0x2001b5a0

08018950 <MAP_KnownAcc>:

bool MAP_KnownAcc(void) {
 8018950:	b480      	push	{r7}
 8018952:	b083      	sub	sp, #12
 8018954:	af00      	add	r7, sp, #0

	bool	bl_acc = FALSE;
 8018956:	2300      	movs	r3, #0
 8018958:	71fb      	strb	r3, [r7, #7]
	switch (en_Head) {
 801895a:	4b33      	ldr	r3, [pc, #204]	@ (8018a28 <MAP_KnownAcc+0xd8>)
 801895c:	781b      	ldrb	r3, [r3, #0]
 801895e:	2b03      	cmp	r3, #3
 8018960:	d852      	bhi.n	8018a08 <MAP_KnownAcc+0xb8>
 8018962:	a201      	add	r2, pc, #4	@ (adr r2, 8018968 <MAP_KnownAcc+0x18>)
 8018964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018968:	08018979 	.word	0x08018979
 801896c:	0801899d 	.word	0x0801899d
 8018970:	080189c1 	.word	0x080189c1
 8018974:	080189e5 	.word	0x080189e5
	case NORTH:
		if ((g_SysMap[my + 1][mx] & 0xf1) == 0xf0) {
 8018978:	4b2c      	ldr	r3, [pc, #176]	@ (8018a2c <MAP_KnownAcc+0xdc>)
 801897a:	781b      	ldrb	r3, [r3, #0]
 801897c:	3301      	adds	r3, #1
 801897e:	4a2c      	ldr	r2, [pc, #176]	@ (8018a30 <MAP_KnownAcc+0xe0>)
 8018980:	7812      	ldrb	r2, [r2, #0]
 8018982:	4611      	mov	r1, r2
 8018984:	4a2b      	ldr	r2, [pc, #172]	@ (8018a34 <MAP_KnownAcc+0xe4>)
 8018986:	015b      	lsls	r3, r3, #5
 8018988:	4413      	add	r3, r2
 801898a:	440b      	add	r3, r1
 801898c:	781b      	ldrb	r3, [r3, #0]
 801898e:	f003 03f1 	and.w	r3, r3, #241	@ 0xf1
 8018992:	2bf0      	cmp	r3, #240	@ 0xf0
 8018994:	d13a      	bne.n	8018a0c <MAP_KnownAcc+0xbc>
			bl_acc = TRUE;
 8018996:	2301      	movs	r3, #1
 8018998:	71fb      	strb	r3, [r7, #7]
		}

		break;
 801899a:	e037      	b.n	8018a0c <MAP_KnownAcc+0xbc>

	case EAST:
		if ((g_SysMap[my][mx + 1] & 0xf2) == 0xf0) {
 801899c:	4b23      	ldr	r3, [pc, #140]	@ (8018a2c <MAP_KnownAcc+0xdc>)
 801899e:	781b      	ldrb	r3, [r3, #0]
 80189a0:	461a      	mov	r2, r3
 80189a2:	4b23      	ldr	r3, [pc, #140]	@ (8018a30 <MAP_KnownAcc+0xe0>)
 80189a4:	781b      	ldrb	r3, [r3, #0]
 80189a6:	3301      	adds	r3, #1
 80189a8:	4922      	ldr	r1, [pc, #136]	@ (8018a34 <MAP_KnownAcc+0xe4>)
 80189aa:	0152      	lsls	r2, r2, #5
 80189ac:	440a      	add	r2, r1
 80189ae:	4413      	add	r3, r2
 80189b0:	781b      	ldrb	r3, [r3, #0]
 80189b2:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80189b6:	2bf0      	cmp	r3, #240	@ 0xf0
 80189b8:	d12a      	bne.n	8018a10 <MAP_KnownAcc+0xc0>
			bl_acc = TRUE;
 80189ba:	2301      	movs	r3, #1
 80189bc:	71fb      	strb	r3, [r7, #7]
		}
		break;
 80189be:	e027      	b.n	8018a10 <MAP_KnownAcc+0xc0>

	case SOUTH:
		if ((g_SysMap[my - 1][mx] & 0xf4) == 0xf0) {
 80189c0:	4b1a      	ldr	r3, [pc, #104]	@ (8018a2c <MAP_KnownAcc+0xdc>)
 80189c2:	781b      	ldrb	r3, [r3, #0]
 80189c4:	3b01      	subs	r3, #1
 80189c6:	4a1a      	ldr	r2, [pc, #104]	@ (8018a30 <MAP_KnownAcc+0xe0>)
 80189c8:	7812      	ldrb	r2, [r2, #0]
 80189ca:	4611      	mov	r1, r2
 80189cc:	4a19      	ldr	r2, [pc, #100]	@ (8018a34 <MAP_KnownAcc+0xe4>)
 80189ce:	015b      	lsls	r3, r3, #5
 80189d0:	4413      	add	r3, r2
 80189d2:	440b      	add	r3, r1
 80189d4:	781b      	ldrb	r3, [r3, #0]
 80189d6:	f003 03f4 	and.w	r3, r3, #244	@ 0xf4
 80189da:	2bf0      	cmp	r3, #240	@ 0xf0
 80189dc:	d11a      	bne.n	8018a14 <MAP_KnownAcc+0xc4>
			bl_acc = TRUE;
 80189de:	2301      	movs	r3, #1
 80189e0:	71fb      	strb	r3, [r7, #7]
		}
		break;
 80189e2:	e017      	b.n	8018a14 <MAP_KnownAcc+0xc4>

	case WEST:
		if ((g_SysMap[my][mx - 1] & 0xf8) == 0xf0) {
 80189e4:	4b11      	ldr	r3, [pc, #68]	@ (8018a2c <MAP_KnownAcc+0xdc>)
 80189e6:	781b      	ldrb	r3, [r3, #0]
 80189e8:	461a      	mov	r2, r3
 80189ea:	4b11      	ldr	r3, [pc, #68]	@ (8018a30 <MAP_KnownAcc+0xe0>)
 80189ec:	781b      	ldrb	r3, [r3, #0]
 80189ee:	3b01      	subs	r3, #1
 80189f0:	4910      	ldr	r1, [pc, #64]	@ (8018a34 <MAP_KnownAcc+0xe4>)
 80189f2:	0152      	lsls	r2, r2, #5
 80189f4:	440a      	add	r2, r1
 80189f6:	4413      	add	r3, r2
 80189f8:	781b      	ldrb	r3, [r3, #0]
 80189fa:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80189fe:	2bf0      	cmp	r3, #240	@ 0xf0
 8018a00:	d10a      	bne.n	8018a18 <MAP_KnownAcc+0xc8>
			bl_acc = TRUE;
 8018a02:	2301      	movs	r3, #1
 8018a04:	71fb      	strb	r3, [r7, #7]
		}
		break;
 8018a06:	e007      	b.n	8018a18 <MAP_KnownAcc+0xc8>

	default:
		break;
 8018a08:	bf00      	nop
 8018a0a:	e006      	b.n	8018a1a <MAP_KnownAcc+0xca>
		break;
 8018a0c:	bf00      	nop
 8018a0e:	e004      	b.n	8018a1a <MAP_KnownAcc+0xca>
		break;
 8018a10:	bf00      	nop
 8018a12:	e002      	b.n	8018a1a <MAP_KnownAcc+0xca>
		break;
 8018a14:	bf00      	nop
 8018a16:	e000      	b.n	8018a1a <MAP_KnownAcc+0xca>
		break;
 8018a18:	bf00      	nop
	}
	return	bl_acc;
 8018a1a:	79fb      	ldrb	r3, [r7, #7]
}
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	370c      	adds	r7, #12
 8018a20:	46bd      	mov	sp, r7
 8018a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a26:	4770      	bx	lr
 8018a28:	2001ad8a 	.word	0x2001ad8a
 8018a2c:	2001ad8b 	.word	0x2001ad8b
 8018a30:	2001ad8c 	.word	0x2001ad8c
 8018a34:	2001b5a0 	.word	0x2001b5a0

08018a38 <MAP_moveNextBlock_acc>:

void MAP_moveNextBlock_acc(enMAP_HEAD_DIR en_head, bool* p_type)
{
 8018a38:	b580      	push	{r7, lr}
 8018a3a:	b082      	sub	sp, #8
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	4603      	mov	r3, r0
 8018a40:	6039      	str	r1, [r7, #0]
 8018a42:	71fb      	strb	r3, [r7, #7]
	*p_type = FALSE;
 8018a44:	683b      	ldr	r3, [r7, #0]
 8018a46:	2200      	movs	r2, #0
 8018a48:	701a      	strb	r2, [r3, #0]
	f_MoveBackDist = 0;
 8018a4a:	4ba6      	ldr	r3, [pc, #664]	@ (8018ce4 <MAP_moveNextBlock_acc+0x2ac>)
 8018a4c:	f04f 0200 	mov.w	r2, #0
 8018a50:	601a      	str	r2, [r3, #0]

	/* 動作 */
	switch (en_head) {
 8018a52:	79fb      	ldrb	r3, [r7, #7]
 8018a54:	2b03      	cmp	r3, #3
 8018a56:	f200 85b9 	bhi.w	80195cc <MAP_moveNextBlock_acc+0xb94>
 8018a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8018a60 <MAP_moveNextBlock_acc+0x28>)
 8018a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a60:	08018a71 	.word	0x08018a71
 8018a64:	08018af1 	.word	0x08018af1
 8018a68:	08019159 	.word	0x08019159
 8018a6c:	08018e1b 	.word	0x08018e1b

		/* そのまま前進 */
	case NORTH:
//		*p_type = FALSE;
//		LED = LED6;
		if (MAP_KnownAcc() == FALSE) {					// 次に進む区画が未探索のとき
 8018a70:	f7ff ff6e 	bl	8018950 <MAP_KnownAcc>
 8018a74:	4603      	mov	r3, r0
 8018a76:	f083 0301 	eor.w	r3, r3, #1
 8018a7a:	b2db      	uxtb	r3, r3
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d02c      	beq.n	8018ada <MAP_moveNextBlock_acc+0xa2>
			if (st_Known.bl_known == TRUE){
 8018a80:	4b99      	ldr	r3, [pc, #612]	@ (8018ce8 <MAP_moveNextBlock_acc+0x2b0>)
 8018a82:	785b      	ldrb	r3, [r3, #1]
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d01c      	beq.n	8018ac2 <MAP_moveNextBlock_acc+0x8a>
				if (st_Known.uc_strCnt < 2) {
 8018a88:	4b97      	ldr	r3, [pc, #604]	@ (8018ce8 <MAP_moveNextBlock_acc+0x2b0>)
 8018a8a:	781b      	ldrb	r3, [r3, #0]
 8018a8c:	2b01      	cmp	r3, #1
 8018a8e:	d804      	bhi.n	8018a9a <MAP_moveNextBlock_acc+0x62>
					MOT_goBlock_Const(1);					// 1区画の場合は等速のまま
 8018a90:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018a94:	f7f6 fe96 	bl	800f7c4 <MOT_goBlock_Const>
 8018a98:	e013      	b.n	8018ac2 <MAP_moveNextBlock_acc+0x8a>
				}
				else {
					MOT_setTrgtSpeed(MAP_KNOWN_ACC_SPEED);									// 既知区間加速するときの目標速度	
 8018a9a:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8018a9e:	f7f8 fb9b 	bl	80111d8 <MOT_setTrgtSpeed>
					MOT_goBlock_FinSpeed((float)(st_Known.uc_strCnt), SEARCH_SPEED);				// n区画前進
 8018aa2:	4b91      	ldr	r3, [pc, #580]	@ (8018ce8 <MAP_moveNextBlock_acc+0x2b0>)
 8018aa4:	781b      	ldrb	r3, [r3, #0]
 8018aa6:	ee07 3a90 	vmov	s15, r3
 8018aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018aae:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 8018cec <MAP_moveNextBlock_acc+0x2b4>
 8018ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8018ab6:	f7f6 fe61 	bl	800f77c <MOT_goBlock_FinSpeed>
					MOT_setTrgtSpeed(SEARCH_SPEED);										// 目標速度をデフォルト値に戻す
 8018aba:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 8018cec <MAP_moveNextBlock_acc+0x2b4>
 8018abe:	f7f8 fb8b 	bl	80111d8 <MOT_setTrgtSpeed>
				}
			}
			MOT_goBlock_Const(1);	////////////////////
 8018ac2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018ac6:	f7f6 fe7d 	bl	800f7c4 <MOT_goBlock_Const>
			st_Known.uc_strCnt = 0;
 8018aca:	4b87      	ldr	r3, [pc, #540]	@ (8018ce8 <MAP_moveNextBlock_acc+0x2b0>)
 8018acc:	2200      	movs	r2, #0
 8018ace:	701a      	strb	r2, [r3, #0]
			st_Known.bl_known = FALSE;
 8018ad0:	4b85      	ldr	r3, [pc, #532]	@ (8018ce8 <MAP_moveNextBlock_acc+0x2b0>)
 8018ad2:	2200      	movs	r2, #0
 8018ad4:	705a      	strb	r2, [r3, #1]

			st_Known.uc_strCnt++;			// 移動区画の加算
			st_Known.bl_known = TRUE;
		}

		break;
 8018ad6:	f000 bd7a 	b.w	80195ce <MAP_moveNextBlock_acc+0xb96>
			st_Known.uc_strCnt++;			// 移動区画の加算
 8018ada:	4b83      	ldr	r3, [pc, #524]	@ (8018ce8 <MAP_moveNextBlock_acc+0x2b0>)
 8018adc:	781b      	ldrb	r3, [r3, #0]
 8018ade:	3301      	adds	r3, #1
 8018ae0:	b2da      	uxtb	r2, r3
 8018ae2:	4b81      	ldr	r3, [pc, #516]	@ (8018ce8 <MAP_moveNextBlock_acc+0x2b0>)
 8018ae4:	701a      	strb	r2, [r3, #0]
			st_Known.bl_known = TRUE;
 8018ae6:	4b80      	ldr	r3, [pc, #512]	@ (8018ce8 <MAP_moveNextBlock_acc+0x2b0>)
 8018ae8:	2201      	movs	r2, #1
 8018aea:	705a      	strb	r2, [r3, #1]
		break;
 8018aec:	f000 bd6f 	b.w	80195ce <MAP_moveNextBlock_acc+0xb96>

		/* 右に旋回する */
	case EAST:
//		LED = LED8;
		if (st_Known.bl_known == TRUE) {		// 直線分を消化
 8018af0:	4b7d      	ldr	r3, [pc, #500]	@ (8018ce8 <MAP_moveNextBlock_acc+0x2b0>)
 8018af2:	785b      	ldrb	r3, [r3, #1]
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d022      	beq.n	8018b3e <MAP_moveNextBlock_acc+0x106>
			if (st_Known.uc_strCnt < 2) {
 8018af8:	4b7b      	ldr	r3, [pc, #492]	@ (8018ce8 <MAP_moveNextBlock_acc+0x2b0>)
 8018afa:	781b      	ldrb	r3, [r3, #0]
 8018afc:	2b01      	cmp	r3, #1
 8018afe:	d804      	bhi.n	8018b0a <MAP_moveNextBlock_acc+0xd2>
				MOT_goBlock_Const(1);					// 1区画の場合は等速のまま
 8018b00:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018b04:	f7f6 fe5e 	bl	800f7c4 <MOT_goBlock_Const>
 8018b08:	e013      	b.n	8018b32 <MAP_moveNextBlock_acc+0xfa>
			}
			else {
//				LED = LED_ALL_ON;
				MOT_setTrgtSpeed(MAP_KNOWN_ACC_SPEED);									// 既知区間加速するときの目標速度	
 8018b0a:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8018b0e:	f7f8 fb63 	bl	80111d8 <MOT_setTrgtSpeed>
				MOT_goBlock_FinSpeed((float)(st_Known.uc_strCnt), SEARCH_SPEED);				// n区画前進
 8018b12:	4b75      	ldr	r3, [pc, #468]	@ (8018ce8 <MAP_moveNextBlock_acc+0x2b0>)
 8018b14:	781b      	ldrb	r3, [r3, #0]
 8018b16:	ee07 3a90 	vmov	s15, r3
 8018b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018b1e:	eddf 0a73 	vldr	s1, [pc, #460]	@ 8018cec <MAP_moveNextBlock_acc+0x2b4>
 8018b22:	eeb0 0a67 	vmov.f32	s0, s15
 8018b26:	f7f6 fe29 	bl	800f77c <MOT_goBlock_FinSpeed>
				MOT_setTrgtSpeed(SEARCH_SPEED);										// 目標速度をデフォルト値に戻す
 8018b2a:	ed9f 0a70 	vldr	s0, [pc, #448]	@ 8018cec <MAP_moveNextBlock_acc+0x2b4>
 8018b2e:	f7f8 fb53 	bl	80111d8 <MOT_setTrgtSpeed>
//				LED = LED_ALL_OFF;
			}
			st_Known.uc_strCnt = 0;		/////////////////////////////////////////
 8018b32:	4b6d      	ldr	r3, [pc, #436]	@ (8018ce8 <MAP_moveNextBlock_acc+0x2b0>)
 8018b34:	2200      	movs	r2, #0
 8018b36:	701a      	strb	r2, [r3, #0]
			st_Known.bl_known = FALSE;
 8018b38:	4b6b      	ldr	r3, [pc, #428]	@ (8018ce8 <MAP_moveNextBlock_acc+0x2b0>)
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	705a      	strb	r2, [r3, #1]
		}

		if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8018b3e:	4b6c      	ldr	r3, [pc, #432]	@ (8018cf0 <MAP_moveNextBlock_acc+0x2b8>)
 8018b40:	781b      	ldrb	r3, [r3, #0]
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d10e      	bne.n	8018b64 <MAP_moveNextBlock_acc+0x12c>
 8018b46:	4b6b      	ldr	r3, [pc, #428]	@ (8018cf4 <MAP_moveNextBlock_acc+0x2bc>)
 8018b48:	781b      	ldrb	r3, [r3, #0]
 8018b4a:	4618      	mov	r0, r3
 8018b4c:	4b6a      	ldr	r3, [pc, #424]	@ (8018cf8 <MAP_moveNextBlock_acc+0x2c0>)
 8018b4e:	781b      	ldrb	r3, [r3, #0]
 8018b50:	4619      	mov	r1, r3
 8018b52:	4a6a      	ldr	r2, [pc, #424]	@ (8018cfc <MAP_moveNextBlock_acc+0x2c4>)
 8018b54:	0143      	lsls	r3, r0, #5
 8018b56:	4413      	add	r3, r2
 8018b58:	440b      	add	r3, r1
 8018b5a:	781b      	ldrb	r3, [r3, #0]
 8018b5c:	f003 0302 	and.w	r3, r3, #2
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d138      	bne.n	8018bd6 <MAP_moveNextBlock_acc+0x19e>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8018b64:	4b62      	ldr	r3, [pc, #392]	@ (8018cf0 <MAP_moveNextBlock_acc+0x2b8>)
 8018b66:	781b      	ldrb	r3, [r3, #0]
		if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8018b68:	2b01      	cmp	r3, #1
 8018b6a:	d10e      	bne.n	8018b8a <MAP_moveNextBlock_acc+0x152>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8018b6c:	4b61      	ldr	r3, [pc, #388]	@ (8018cf4 <MAP_moveNextBlock_acc+0x2bc>)
 8018b6e:	781b      	ldrb	r3, [r3, #0]
 8018b70:	4618      	mov	r0, r3
 8018b72:	4b61      	ldr	r3, [pc, #388]	@ (8018cf8 <MAP_moveNextBlock_acc+0x2c0>)
 8018b74:	781b      	ldrb	r3, [r3, #0]
 8018b76:	4619      	mov	r1, r3
 8018b78:	4a60      	ldr	r2, [pc, #384]	@ (8018cfc <MAP_moveNextBlock_acc+0x2c4>)
 8018b7a:	0143      	lsls	r3, r0, #5
 8018b7c:	4413      	add	r3, r2
 8018b7e:	440b      	add	r3, r1
 8018b80:	781b      	ldrb	r3, [r3, #0]
 8018b82:	f003 0304 	and.w	r3, r3, #4
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d125      	bne.n	8018bd6 <MAP_moveNextBlock_acc+0x19e>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8018b8a:	4b59      	ldr	r3, [pc, #356]	@ (8018cf0 <MAP_moveNextBlock_acc+0x2b8>)
 8018b8c:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8018b8e:	2b02      	cmp	r3, #2
 8018b90:	d10e      	bne.n	8018bb0 <MAP_moveNextBlock_acc+0x178>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8018b92:	4b58      	ldr	r3, [pc, #352]	@ (8018cf4 <MAP_moveNextBlock_acc+0x2bc>)
 8018b94:	781b      	ldrb	r3, [r3, #0]
 8018b96:	4618      	mov	r0, r3
 8018b98:	4b57      	ldr	r3, [pc, #348]	@ (8018cf8 <MAP_moveNextBlock_acc+0x2c0>)
 8018b9a:	781b      	ldrb	r3, [r3, #0]
 8018b9c:	4619      	mov	r1, r3
 8018b9e:	4a57      	ldr	r2, [pc, #348]	@ (8018cfc <MAP_moveNextBlock_acc+0x2c4>)
 8018ba0:	0143      	lsls	r3, r0, #5
 8018ba2:	4413      	add	r3, r2
 8018ba4:	440b      	add	r3, r1
 8018ba6:	781b      	ldrb	r3, [r3, #0]
 8018ba8:	f003 0308 	and.w	r3, r3, #8
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d112      	bne.n	8018bd6 <MAP_moveNextBlock_acc+0x19e>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8018bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8018cf0 <MAP_moveNextBlock_acc+0x2b8>)
 8018bb2:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8018bb4:	2b03      	cmp	r3, #3
 8018bb6:	d112      	bne.n	8018bde <MAP_moveNextBlock_acc+0x1a6>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8018bb8:	4b4e      	ldr	r3, [pc, #312]	@ (8018cf4 <MAP_moveNextBlock_acc+0x2bc>)
 8018bba:	781b      	ldrb	r3, [r3, #0]
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	4b4e      	ldr	r3, [pc, #312]	@ (8018cf8 <MAP_moveNextBlock_acc+0x2c0>)
 8018bc0:	781b      	ldrb	r3, [r3, #0]
 8018bc2:	4619      	mov	r1, r3
 8018bc4:	4a4d      	ldr	r2, [pc, #308]	@ (8018cfc <MAP_moveNextBlock_acc+0x2c4>)
 8018bc6:	0143      	lsls	r3, r0, #5
 8018bc8:	4413      	add	r3, r2
 8018bca:	440b      	add	r3, r1
 8018bcc:	781b      	ldrb	r3, [r3, #0]
 8018bce:	f003 0301 	and.w	r3, r3, #1
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d003      	beq.n	8018bde <MAP_moveNextBlock_acc+0x1a6>
			){
			uc_DistControl = 0.02;
 8018bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8018d00 <MAP_moveNextBlock_acc+0x2c8>)
 8018bd8:	2200      	movs	r2, #0
 8018bda:	701a      	strb	r2, [r3, #0]
 8018bdc:	e002      	b.n	8018be4 <MAP_moveNextBlock_acc+0x1ac>
			}
		else{
			uc_DistControl = 0;
 8018bde:	4b48      	ldr	r3, [pc, #288]	@ (8018d00 <MAP_moveNextBlock_acc+0x2c8>)
 8018be0:	2200      	movs	r2, #0
 8018be2:	701a      	strb	r2, [r3, #0]
		}
		if( uc_SlaCnt < SLA_Count ){
 8018be4:	4b47      	ldr	r3, [pc, #284]	@ (8018d04 <MAP_moveNextBlock_acc+0x2cc>)
 8018be6:	781a      	ldrb	r2, [r3, #0]
 8018be8:	4b47      	ldr	r3, [pc, #284]	@ (8018d08 <MAP_moveNextBlock_acc+0x2d0>)
 8018bea:	781b      	ldrb	r3, [r3, #0]
 8018bec:	429a      	cmp	r2, r3
 8018bee:	d20f      	bcs.n	8018c10 <MAP_moveNextBlock_acc+0x1d8>
				MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8018bf0:	2000      	movs	r0, #0
 8018bf2:	f7eb f8fd 	bl	8003df0 <PARAM_getSra>
 8018bf6:	4603      	mov	r3, r0
 8018bf8:	4619      	mov	r1, r3
 8018bfa:	2000      	movs	r0, #0
 8018bfc:	f7f8 fb74 	bl	80112e8 <MOT_goSla>
				uc_SlaCnt++;
 8018c00:	4b40      	ldr	r3, [pc, #256]	@ (8018d04 <MAP_moveNextBlock_acc+0x2cc>)
 8018c02:	781b      	ldrb	r3, [r3, #0]
 8018c04:	3301      	adds	r3, #1
 8018c06:	b2da      	uxtb	r2, r3
 8018c08:	4b3e      	ldr	r3, [pc, #248]	@ (8018d04 <MAP_moveNextBlock_acc+0x2cc>)
 8018c0a:	701a      	strb	r2, [r3, #0]
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
						uc_SlaCnt++;
					}
				}
			}
		break;
 8018c0c:	f000 bcdf 	b.w	80195ce <MAP_moveNextBlock_acc+0xb96>
				if(WallHitFlag == 0){
 8018c10:	4b3e      	ldr	r3, [pc, #248]	@ (8018d0c <MAP_moveNextBlock_acc+0x2d4>)
 8018c12:	781b      	ldrb	r3, [r3, #0]
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	f040 808f 	bne.w	8018d38 <MAP_moveNextBlock_acc+0x300>
					f_MoveBackDist = 0;
 8018c1a:	4b32      	ldr	r3, [pc, #200]	@ (8018ce4 <MAP_moveNextBlock_acc+0x2ac>)
 8018c1c:	f04f 0200 	mov.w	r2, #0
 8018c20:	601a      	str	r2, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8018c22:	4b33      	ldr	r3, [pc, #204]	@ (8018cf0 <MAP_moveNextBlock_acc+0x2b8>)
 8018c24:	781b      	ldrb	r3, [r3, #0]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d10e      	bne.n	8018c48 <MAP_moveNextBlock_acc+0x210>
 8018c2a:	4b32      	ldr	r3, [pc, #200]	@ (8018cf4 <MAP_moveNextBlock_acc+0x2bc>)
 8018c2c:	781b      	ldrb	r3, [r3, #0]
 8018c2e:	4618      	mov	r0, r3
 8018c30:	4b31      	ldr	r3, [pc, #196]	@ (8018cf8 <MAP_moveNextBlock_acc+0x2c0>)
 8018c32:	781b      	ldrb	r3, [r3, #0]
 8018c34:	4619      	mov	r1, r3
 8018c36:	4a31      	ldr	r2, [pc, #196]	@ (8018cfc <MAP_moveNextBlock_acc+0x2c4>)
 8018c38:	0143      	lsls	r3, r0, #5
 8018c3a:	4413      	add	r3, r2
 8018c3c:	440b      	add	r3, r1
 8018c3e:	781b      	ldrb	r3, [r3, #0]
 8018c40:	f003 0308 	and.w	r3, r3, #8
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d138      	bne.n	8018cba <MAP_moveNextBlock_acc+0x282>
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8018c48:	4b29      	ldr	r3, [pc, #164]	@ (8018cf0 <MAP_moveNextBlock_acc+0x2b8>)
 8018c4a:	781b      	ldrb	r3, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8018c4c:	2b01      	cmp	r3, #1
 8018c4e:	d10e      	bne.n	8018c6e <MAP_moveNextBlock_acc+0x236>
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8018c50:	4b28      	ldr	r3, [pc, #160]	@ (8018cf4 <MAP_moveNextBlock_acc+0x2bc>)
 8018c52:	781b      	ldrb	r3, [r3, #0]
 8018c54:	4618      	mov	r0, r3
 8018c56:	4b28      	ldr	r3, [pc, #160]	@ (8018cf8 <MAP_moveNextBlock_acc+0x2c0>)
 8018c58:	781b      	ldrb	r3, [r3, #0]
 8018c5a:	4619      	mov	r1, r3
 8018c5c:	4a27      	ldr	r2, [pc, #156]	@ (8018cfc <MAP_moveNextBlock_acc+0x2c4>)
 8018c5e:	0143      	lsls	r3, r0, #5
 8018c60:	4413      	add	r3, r2
 8018c62:	440b      	add	r3, r1
 8018c64:	781b      	ldrb	r3, [r3, #0]
 8018c66:	f003 0301 	and.w	r3, r3, #1
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d125      	bne.n	8018cba <MAP_moveNextBlock_acc+0x282>
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8018c6e:	4b20      	ldr	r3, [pc, #128]	@ (8018cf0 <MAP_moveNextBlock_acc+0x2b8>)
 8018c70:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8018c72:	2b02      	cmp	r3, #2
 8018c74:	d10e      	bne.n	8018c94 <MAP_moveNextBlock_acc+0x25c>
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8018c76:	4b1f      	ldr	r3, [pc, #124]	@ (8018cf4 <MAP_moveNextBlock_acc+0x2bc>)
 8018c78:	781b      	ldrb	r3, [r3, #0]
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8018cf8 <MAP_moveNextBlock_acc+0x2c0>)
 8018c7e:	781b      	ldrb	r3, [r3, #0]
 8018c80:	4619      	mov	r1, r3
 8018c82:	4a1e      	ldr	r2, [pc, #120]	@ (8018cfc <MAP_moveNextBlock_acc+0x2c4>)
 8018c84:	0143      	lsls	r3, r0, #5
 8018c86:	4413      	add	r3, r2
 8018c88:	440b      	add	r3, r1
 8018c8a:	781b      	ldrb	r3, [r3, #0]
 8018c8c:	f003 0302 	and.w	r3, r3, #2
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d112      	bne.n	8018cba <MAP_moveNextBlock_acc+0x282>
						( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8018c94:	4b16      	ldr	r3, [pc, #88]	@ (8018cf0 <MAP_moveNextBlock_acc+0x2b8>)
 8018c96:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8018c98:	2b03      	cmp	r3, #3
 8018c9a:	d13d      	bne.n	8018d18 <MAP_moveNextBlock_acc+0x2e0>
						( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8018c9c:	4b15      	ldr	r3, [pc, #84]	@ (8018cf4 <MAP_moveNextBlock_acc+0x2bc>)
 8018c9e:	781b      	ldrb	r3, [r3, #0]
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	4b15      	ldr	r3, [pc, #84]	@ (8018cf8 <MAP_moveNextBlock_acc+0x2c0>)
 8018ca4:	781b      	ldrb	r3, [r3, #0]
 8018ca6:	4619      	mov	r1, r3
 8018ca8:	4a14      	ldr	r2, [pc, #80]	@ (8018cfc <MAP_moveNextBlock_acc+0x2c4>)
 8018caa:	0143      	lsls	r3, r0, #5
 8018cac:	4413      	add	r3, r2
 8018cae:	440b      	add	r3, r1
 8018cb0:	781b      	ldrb	r3, [r3, #0]
 8018cb2:	f003 0304 	and.w	r3, r3, #4
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d02e      	beq.n	8018d18 <MAP_moveNextBlock_acc+0x2e0>
						MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8018cba:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8018d10 <MAP_moveNextBlock_acc+0x2d8>
 8018cbe:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8018cc2:	f7f6 fd5b 	bl	800f77c <MOT_goBlock_FinSpeed>
						MOT_turn(MOT_R90);						// 右90度旋回
 8018cc6:	2000      	movs	r0, #0
 8018cc8:	f7f6 ff82 	bl	800fbd0 <MOT_turn>
						uc_SlaCnt = 0;
 8018ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8018d04 <MAP_moveNextBlock_acc+0x2cc>)
 8018cce:	2200      	movs	r2, #0
 8018cd0:	701a      	strb	r2, [r3, #0]
						MOT_goHitBackWall();					// バックする
 8018cd2:	f7f8 faa7 	bl	8011224 <MOT_goHitBackWall>
						f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8018cd6:	4b03      	ldr	r3, [pc, #12]	@ (8018ce4 <MAP_moveNextBlock_acc+0x2ac>)
 8018cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8018d14 <MAP_moveNextBlock_acc+0x2dc>)
 8018cda:	601a      	str	r2, [r3, #0]
						*p_type = TRUE;							// 次は半区間（＋バック）分進める
 8018cdc:	683b      	ldr	r3, [r7, #0]
 8018cde:	2201      	movs	r2, #1
 8018ce0:	701a      	strb	r2, [r3, #0]
 8018ce2:	e099      	b.n	8018e18 <MAP_moveNextBlock_acc+0x3e0>
 8018ce4:	2001ad90 	.word	0x2001ad90
 8018ce8:	2001ad98 	.word	0x2001ad98
 8018cec:	3e99999a 	.word	0x3e99999a
 8018cf0:	2001ad8a 	.word	0x2001ad8a
 8018cf4:	2001ad8b 	.word	0x2001ad8b
 8018cf8:	2001ad8c 	.word	0x2001ad8c
 8018cfc:	2001b5a0 	.word	0x2001b5a0
 8018d00:	20000400 	.word	0x20000400
 8018d04:	2001ad94 	.word	0x2001ad94
 8018d08:	2000001c 	.word	0x2000001c
 8018d0c:	20017b29 	.word	0x20017b29
 8018d10:	00000000 	.word	0x00000000
 8018d14:	3e5c28f6 	.word	0x3e5c28f6
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8018d18:	2000      	movs	r0, #0
 8018d1a:	f7eb f869 	bl	8003df0 <PARAM_getSra>
 8018d1e:	4603      	mov	r3, r0
 8018d20:	4619      	mov	r1, r3
 8018d22:	2000      	movs	r0, #0
 8018d24:	f7f8 fae0 	bl	80112e8 <MOT_goSla>
						uc_SlaCnt++;
 8018d28:	4b83      	ldr	r3, [pc, #524]	@ (8018f38 <MAP_moveNextBlock_acc+0x500>)
 8018d2a:	781b      	ldrb	r3, [r3, #0]
 8018d2c:	3301      	adds	r3, #1
 8018d2e:	b2da      	uxtb	r2, r3
 8018d30:	4b81      	ldr	r3, [pc, #516]	@ (8018f38 <MAP_moveNextBlock_acc+0x500>)
 8018d32:	701a      	strb	r2, [r3, #0]
		break;
 8018d34:	f000 bc4b 	b.w	80195ce <MAP_moveNextBlock_acc+0xb96>
					if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8018d38:	4b80      	ldr	r3, [pc, #512]	@ (8018f3c <MAP_moveNextBlock_acc+0x504>)
 8018d3a:	781b      	ldrb	r3, [r3, #0]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d10e      	bne.n	8018d5e <MAP_moveNextBlock_acc+0x326>
 8018d40:	4b7f      	ldr	r3, [pc, #508]	@ (8018f40 <MAP_moveNextBlock_acc+0x508>)
 8018d42:	781b      	ldrb	r3, [r3, #0]
 8018d44:	4618      	mov	r0, r3
 8018d46:	4b7f      	ldr	r3, [pc, #508]	@ (8018f44 <MAP_moveNextBlock_acc+0x50c>)
 8018d48:	781b      	ldrb	r3, [r3, #0]
 8018d4a:	4619      	mov	r1, r3
 8018d4c:	4a7e      	ldr	r2, [pc, #504]	@ (8018f48 <MAP_moveNextBlock_acc+0x510>)
 8018d4e:	0143      	lsls	r3, r0, #5
 8018d50:	4413      	add	r3, r2
 8018d52:	440b      	add	r3, r1
 8018d54:	781b      	ldrb	r3, [r3, #0]
 8018d56:	f003 0301 	and.w	r3, r3, #1
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d138      	bne.n	8018dd0 <MAP_moveNextBlock_acc+0x398>
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8018d5e:	4b77      	ldr	r3, [pc, #476]	@ (8018f3c <MAP_moveNextBlock_acc+0x504>)
 8018d60:	781b      	ldrb	r3, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8018d62:	2b01      	cmp	r3, #1
 8018d64:	d10e      	bne.n	8018d84 <MAP_moveNextBlock_acc+0x34c>
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8018d66:	4b76      	ldr	r3, [pc, #472]	@ (8018f40 <MAP_moveNextBlock_acc+0x508>)
 8018d68:	781b      	ldrb	r3, [r3, #0]
 8018d6a:	4618      	mov	r0, r3
 8018d6c:	4b75      	ldr	r3, [pc, #468]	@ (8018f44 <MAP_moveNextBlock_acc+0x50c>)
 8018d6e:	781b      	ldrb	r3, [r3, #0]
 8018d70:	4619      	mov	r1, r3
 8018d72:	4a75      	ldr	r2, [pc, #468]	@ (8018f48 <MAP_moveNextBlock_acc+0x510>)
 8018d74:	0143      	lsls	r3, r0, #5
 8018d76:	4413      	add	r3, r2
 8018d78:	440b      	add	r3, r1
 8018d7a:	781b      	ldrb	r3, [r3, #0]
 8018d7c:	f003 0302 	and.w	r3, r3, #2
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d125      	bne.n	8018dd0 <MAP_moveNextBlock_acc+0x398>
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8018d84:	4b6d      	ldr	r3, [pc, #436]	@ (8018f3c <MAP_moveNextBlock_acc+0x504>)
 8018d86:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8018d88:	2b02      	cmp	r3, #2
 8018d8a:	d10e      	bne.n	8018daa <MAP_moveNextBlock_acc+0x372>
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8018d8c:	4b6c      	ldr	r3, [pc, #432]	@ (8018f40 <MAP_moveNextBlock_acc+0x508>)
 8018d8e:	781b      	ldrb	r3, [r3, #0]
 8018d90:	4618      	mov	r0, r3
 8018d92:	4b6c      	ldr	r3, [pc, #432]	@ (8018f44 <MAP_moveNextBlock_acc+0x50c>)
 8018d94:	781b      	ldrb	r3, [r3, #0]
 8018d96:	4619      	mov	r1, r3
 8018d98:	4a6b      	ldr	r2, [pc, #428]	@ (8018f48 <MAP_moveNextBlock_acc+0x510>)
 8018d9a:	0143      	lsls	r3, r0, #5
 8018d9c:	4413      	add	r3, r2
 8018d9e:	440b      	add	r3, r1
 8018da0:	781b      	ldrb	r3, [r3, #0]
 8018da2:	f003 0304 	and.w	r3, r3, #4
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d112      	bne.n	8018dd0 <MAP_moveNextBlock_acc+0x398>
						( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8018daa:	4b64      	ldr	r3, [pc, #400]	@ (8018f3c <MAP_moveNextBlock_acc+0x504>)
 8018dac:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8018dae:	2b03      	cmp	r3, #3
 8018db0:	d123      	bne.n	8018dfa <MAP_moveNextBlock_acc+0x3c2>
						( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8018db2:	4b63      	ldr	r3, [pc, #396]	@ (8018f40 <MAP_moveNextBlock_acc+0x508>)
 8018db4:	781b      	ldrb	r3, [r3, #0]
 8018db6:	4618      	mov	r0, r3
 8018db8:	4b62      	ldr	r3, [pc, #392]	@ (8018f44 <MAP_moveNextBlock_acc+0x50c>)
 8018dba:	781b      	ldrb	r3, [r3, #0]
 8018dbc:	4619      	mov	r1, r3
 8018dbe:	4a62      	ldr	r2, [pc, #392]	@ (8018f48 <MAP_moveNextBlock_acc+0x510>)
 8018dc0:	0143      	lsls	r3, r0, #5
 8018dc2:	4413      	add	r3, r2
 8018dc4:	440b      	add	r3, r1
 8018dc6:	781b      	ldrb	r3, [r3, #0]
 8018dc8:	f003 0308 	and.w	r3, r3, #8
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d014      	beq.n	8018dfa <MAP_moveNextBlock_acc+0x3c2>
						MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8018dd0:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 8018f4c <MAP_moveNextBlock_acc+0x514>
 8018dd4:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8018dd8:	f7f6 fcd0 	bl	800f77c <MOT_goBlock_FinSpeed>
						LL_mDelay(100);
 8018ddc:	2064      	movs	r0, #100	@ 0x64
 8018dde:	f002 feb1 	bl	801bb44 <LL_mDelay>
						DIST_Front_Wall_correction();
 8018de2:	f7f9 fda1 	bl	8012928 <DIST_Front_Wall_correction>
						MOT_turn(MOT_R90);						// 右90度旋回
 8018de6:	2000      	movs	r0, #0
 8018de8:	f7f6 fef2 	bl	800fbd0 <MOT_turn>
						uc_SlaCnt = 0;
 8018dec:	4b52      	ldr	r3, [pc, #328]	@ (8018f38 <MAP_moveNextBlock_acc+0x500>)
 8018dee:	2200      	movs	r2, #0
 8018df0:	701a      	strb	r2, [r3, #0]
						*p_type = TRUE;								// 次は半区間＋バック分進める
 8018df2:	683b      	ldr	r3, [r7, #0]
 8018df4:	2201      	movs	r2, #1
 8018df6:	701a      	strb	r2, [r3, #0]
 8018df8:	e00e      	b.n	8018e18 <MAP_moveNextBlock_acc+0x3e0>
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8018dfa:	2000      	movs	r0, #0
 8018dfc:	f7ea fff8 	bl	8003df0 <PARAM_getSra>
 8018e00:	4603      	mov	r3, r0
 8018e02:	4619      	mov	r1, r3
 8018e04:	2000      	movs	r0, #0
 8018e06:	f7f8 fa6f 	bl	80112e8 <MOT_goSla>
						uc_SlaCnt++;
 8018e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8018f38 <MAP_moveNextBlock_acc+0x500>)
 8018e0c:	781b      	ldrb	r3, [r3, #0]
 8018e0e:	3301      	adds	r3, #1
 8018e10:	b2da      	uxtb	r2, r3
 8018e12:	4b49      	ldr	r3, [pc, #292]	@ (8018f38 <MAP_moveNextBlock_acc+0x500>)
 8018e14:	701a      	strb	r2, [r3, #0]
		break;
 8018e16:	e3da      	b.n	80195ce <MAP_moveNextBlock_acc+0xb96>
 8018e18:	e3d9      	b.n	80195ce <MAP_moveNextBlock_acc+0xb96>

		/* 左に旋回する */
	case WEST:
		if (st_Known.bl_known == TRUE) {		// 直線分を消化
 8018e1a:	4b4d      	ldr	r3, [pc, #308]	@ (8018f50 <MAP_moveNextBlock_acc+0x518>)
 8018e1c:	785b      	ldrb	r3, [r3, #1]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d022      	beq.n	8018e68 <MAP_moveNextBlock_acc+0x430>
			if (st_Known.uc_strCnt < 2) {
 8018e22:	4b4b      	ldr	r3, [pc, #300]	@ (8018f50 <MAP_moveNextBlock_acc+0x518>)
 8018e24:	781b      	ldrb	r3, [r3, #0]
 8018e26:	2b01      	cmp	r3, #1
 8018e28:	d804      	bhi.n	8018e34 <MAP_moveNextBlock_acc+0x3fc>
				MOT_goBlock_Const(1);					// 1区画の場合は等速のまま
 8018e2a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018e2e:	f7f6 fcc9 	bl	800f7c4 <MOT_goBlock_Const>
 8018e32:	e013      	b.n	8018e5c <MAP_moveNextBlock_acc+0x424>
			}
			else {
//				LED = LED_ALL_ON;
				MOT_setTrgtSpeed(MAP_KNOWN_ACC_SPEED);									// 既知区間加速するときの目標速度	
 8018e34:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8018e38:	f7f8 f9ce 	bl	80111d8 <MOT_setTrgtSpeed>
				MOT_goBlock_FinSpeed((float)(st_Known.uc_strCnt), SEARCH_SPEED);		// n区画前進
 8018e3c:	4b44      	ldr	r3, [pc, #272]	@ (8018f50 <MAP_moveNextBlock_acc+0x518>)
 8018e3e:	781b      	ldrb	r3, [r3, #0]
 8018e40:	ee07 3a90 	vmov	s15, r3
 8018e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018e48:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8018f54 <MAP_moveNextBlock_acc+0x51c>
 8018e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8018e50:	f7f6 fc94 	bl	800f77c <MOT_goBlock_FinSpeed>
				MOT_setTrgtSpeed(SEARCH_SPEED);										// 目標速度をデフォルト値に戻す
 8018e54:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8018f54 <MAP_moveNextBlock_acc+0x51c>
 8018e58:	f7f8 f9be 	bl	80111d8 <MOT_setTrgtSpeed>
//				LED = LED_ALL_OFF;
			}
			st_Known.uc_strCnt = 0;			//////////////////////////////////////
 8018e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8018f50 <MAP_moveNextBlock_acc+0x518>)
 8018e5e:	2200      	movs	r2, #0
 8018e60:	701a      	strb	r2, [r3, #0]
			st_Known.bl_known = FALSE;
 8018e62:	4b3b      	ldr	r3, [pc, #236]	@ (8018f50 <MAP_moveNextBlock_acc+0x518>)
 8018e64:	2200      	movs	r2, #0
 8018e66:	705a      	strb	r2, [r3, #1]
		}

		if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8018e68:	4b34      	ldr	r3, [pc, #208]	@ (8018f3c <MAP_moveNextBlock_acc+0x504>)
 8018e6a:	781b      	ldrb	r3, [r3, #0]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d10e      	bne.n	8018e8e <MAP_moveNextBlock_acc+0x456>
 8018e70:	4b33      	ldr	r3, [pc, #204]	@ (8018f40 <MAP_moveNextBlock_acc+0x508>)
 8018e72:	781b      	ldrb	r3, [r3, #0]
 8018e74:	4618      	mov	r0, r3
 8018e76:	4b33      	ldr	r3, [pc, #204]	@ (8018f44 <MAP_moveNextBlock_acc+0x50c>)
 8018e78:	781b      	ldrb	r3, [r3, #0]
 8018e7a:	4619      	mov	r1, r3
 8018e7c:	4a32      	ldr	r2, [pc, #200]	@ (8018f48 <MAP_moveNextBlock_acc+0x510>)
 8018e7e:	0143      	lsls	r3, r0, #5
 8018e80:	4413      	add	r3, r2
 8018e82:	440b      	add	r3, r1
 8018e84:	781b      	ldrb	r3, [r3, #0]
 8018e86:	f003 0308 	and.w	r3, r3, #8
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d138      	bne.n	8018f00 <MAP_moveNextBlock_acc+0x4c8>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8018e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8018f3c <MAP_moveNextBlock_acc+0x504>)
 8018e90:	781b      	ldrb	r3, [r3, #0]
		if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8018e92:	2b01      	cmp	r3, #1
 8018e94:	d10e      	bne.n	8018eb4 <MAP_moveNextBlock_acc+0x47c>
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8018e96:	4b2a      	ldr	r3, [pc, #168]	@ (8018f40 <MAP_moveNextBlock_acc+0x508>)
 8018e98:	781b      	ldrb	r3, [r3, #0]
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	4b29      	ldr	r3, [pc, #164]	@ (8018f44 <MAP_moveNextBlock_acc+0x50c>)
 8018e9e:	781b      	ldrb	r3, [r3, #0]
 8018ea0:	4619      	mov	r1, r3
 8018ea2:	4a29      	ldr	r2, [pc, #164]	@ (8018f48 <MAP_moveNextBlock_acc+0x510>)
 8018ea4:	0143      	lsls	r3, r0, #5
 8018ea6:	4413      	add	r3, r2
 8018ea8:	440b      	add	r3, r1
 8018eaa:	781b      	ldrb	r3, [r3, #0]
 8018eac:	f003 0301 	and.w	r3, r3, #1
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d125      	bne.n	8018f00 <MAP_moveNextBlock_acc+0x4c8>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8018eb4:	4b21      	ldr	r3, [pc, #132]	@ (8018f3c <MAP_moveNextBlock_acc+0x504>)
 8018eb6:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8018eb8:	2b02      	cmp	r3, #2
 8018eba:	d10e      	bne.n	8018eda <MAP_moveNextBlock_acc+0x4a2>
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8018ebc:	4b20      	ldr	r3, [pc, #128]	@ (8018f40 <MAP_moveNextBlock_acc+0x508>)
 8018ebe:	781b      	ldrb	r3, [r3, #0]
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	4b20      	ldr	r3, [pc, #128]	@ (8018f44 <MAP_moveNextBlock_acc+0x50c>)
 8018ec4:	781b      	ldrb	r3, [r3, #0]
 8018ec6:	4619      	mov	r1, r3
 8018ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8018f48 <MAP_moveNextBlock_acc+0x510>)
 8018eca:	0143      	lsls	r3, r0, #5
 8018ecc:	4413      	add	r3, r2
 8018ece:	440b      	add	r3, r1
 8018ed0:	781b      	ldrb	r3, [r3, #0]
 8018ed2:	f003 0302 	and.w	r3, r3, #2
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d112      	bne.n	8018f00 <MAP_moveNextBlock_acc+0x4c8>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8018eda:	4b18      	ldr	r3, [pc, #96]	@ (8018f3c <MAP_moveNextBlock_acc+0x504>)
 8018edc:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8018ede:	2b03      	cmp	r3, #3
 8018ee0:	d112      	bne.n	8018f08 <MAP_moveNextBlock_acc+0x4d0>
					( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8018ee2:	4b17      	ldr	r3, [pc, #92]	@ (8018f40 <MAP_moveNextBlock_acc+0x508>)
 8018ee4:	781b      	ldrb	r3, [r3, #0]
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	4b16      	ldr	r3, [pc, #88]	@ (8018f44 <MAP_moveNextBlock_acc+0x50c>)
 8018eea:	781b      	ldrb	r3, [r3, #0]
 8018eec:	4619      	mov	r1, r3
 8018eee:	4a16      	ldr	r2, [pc, #88]	@ (8018f48 <MAP_moveNextBlock_acc+0x510>)
 8018ef0:	0143      	lsls	r3, r0, #5
 8018ef2:	4413      	add	r3, r2
 8018ef4:	440b      	add	r3, r1
 8018ef6:	781b      	ldrb	r3, [r3, #0]
 8018ef8:	f003 0304 	and.w	r3, r3, #4
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d003      	beq.n	8018f08 <MAP_moveNextBlock_acc+0x4d0>
			){
			uc_DistControl = 0.02;
 8018f00:	4b15      	ldr	r3, [pc, #84]	@ (8018f58 <MAP_moveNextBlock_acc+0x520>)
 8018f02:	2200      	movs	r2, #0
 8018f04:	701a      	strb	r2, [r3, #0]
 8018f06:	e002      	b.n	8018f0e <MAP_moveNextBlock_acc+0x4d6>
			}
		else{
			uc_DistControl = 0;
 8018f08:	4b13      	ldr	r3, [pc, #76]	@ (8018f58 <MAP_moveNextBlock_acc+0x520>)
 8018f0a:	2200      	movs	r2, #0
 8018f0c:	701a      	strb	r2, [r3, #0]
		}

		if( uc_SlaCnt < SLA_Count ){
 8018f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8018f38 <MAP_moveNextBlock_acc+0x500>)
 8018f10:	781a      	ldrb	r2, [r3, #0]
 8018f12:	4b12      	ldr	r3, [pc, #72]	@ (8018f5c <MAP_moveNextBlock_acc+0x524>)
 8018f14:	781b      	ldrb	r3, [r3, #0]
 8018f16:	429a      	cmp	r2, r3
 8018f18:	d222      	bcs.n	8018f60 <MAP_moveNextBlock_acc+0x528>
				MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 8018f1a:	2000      	movs	r0, #0
 8018f1c:	f7ea ff68 	bl	8003df0 <PARAM_getSra>
 8018f20:	4603      	mov	r3, r0
 8018f22:	4619      	mov	r1, r3
 8018f24:	2001      	movs	r0, #1
 8018f26:	f7f8 f9df 	bl	80112e8 <MOT_goSla>
				uc_SlaCnt++;
 8018f2a:	4b03      	ldr	r3, [pc, #12]	@ (8018f38 <MAP_moveNextBlock_acc+0x500>)
 8018f2c:	781b      	ldrb	r3, [r3, #0]
 8018f2e:	3301      	adds	r3, #1
 8018f30:	b2da      	uxtb	r2, r3
 8018f32:	4b01      	ldr	r3, [pc, #4]	@ (8018f38 <MAP_moveNextBlock_acc+0x500>)
 8018f34:	701a      	strb	r2, [r3, #0]
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
						uc_SlaCnt++;
					}
				}
			}
		break;
 8018f36:	e34a      	b.n	80195ce <MAP_moveNextBlock_acc+0xb96>
 8018f38:	2001ad94 	.word	0x2001ad94
 8018f3c:	2001ad8a 	.word	0x2001ad8a
 8018f40:	2001ad8b 	.word	0x2001ad8b
 8018f44:	2001ad8c 	.word	0x2001ad8c
 8018f48:	2001b5a0 	.word	0x2001b5a0
 8018f4c:	00000000 	.word	0x00000000
 8018f50:	2001ad98 	.word	0x2001ad98
 8018f54:	3e99999a 	.word	0x3e99999a
 8018f58:	20000400 	.word	0x20000400
 8018f5c:	2000001c 	.word	0x2000001c
				if(WallHitFlag == 0){
 8018f60:	4b74      	ldr	r3, [pc, #464]	@ (8019134 <MAP_moveNextBlock_acc+0x6fc>)
 8018f62:	781b      	ldrb	r3, [r3, #0]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d173      	bne.n	8019050 <MAP_moveNextBlock_acc+0x618>
					f_MoveBackDist = 0;
 8018f68:	4b73      	ldr	r3, [pc, #460]	@ (8019138 <MAP_moveNextBlock_acc+0x700>)
 8018f6a:	f04f 0200 	mov.w	r2, #0
 8018f6e:	601a      	str	r2, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8018f70:	4b72      	ldr	r3, [pc, #456]	@ (801913c <MAP_moveNextBlock_acc+0x704>)
 8018f72:	781b      	ldrb	r3, [r3, #0]
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d10e      	bne.n	8018f96 <MAP_moveNextBlock_acc+0x55e>
 8018f78:	4b71      	ldr	r3, [pc, #452]	@ (8019140 <MAP_moveNextBlock_acc+0x708>)
 8018f7a:	781b      	ldrb	r3, [r3, #0]
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	4b71      	ldr	r3, [pc, #452]	@ (8019144 <MAP_moveNextBlock_acc+0x70c>)
 8018f80:	781b      	ldrb	r3, [r3, #0]
 8018f82:	4619      	mov	r1, r3
 8018f84:	4a70      	ldr	r2, [pc, #448]	@ (8019148 <MAP_moveNextBlock_acc+0x710>)
 8018f86:	0143      	lsls	r3, r0, #5
 8018f88:	4413      	add	r3, r2
 8018f8a:	440b      	add	r3, r1
 8018f8c:	781b      	ldrb	r3, [r3, #0]
 8018f8e:	f003 0302 	and.w	r3, r3, #2
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d138      	bne.n	8019008 <MAP_moveNextBlock_acc+0x5d0>
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8018f96:	4b69      	ldr	r3, [pc, #420]	@ (801913c <MAP_moveNextBlock_acc+0x704>)
 8018f98:	781b      	ldrb	r3, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8018f9a:	2b01      	cmp	r3, #1
 8018f9c:	d10e      	bne.n	8018fbc <MAP_moveNextBlock_acc+0x584>
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8018f9e:	4b68      	ldr	r3, [pc, #416]	@ (8019140 <MAP_moveNextBlock_acc+0x708>)
 8018fa0:	781b      	ldrb	r3, [r3, #0]
 8018fa2:	4618      	mov	r0, r3
 8018fa4:	4b67      	ldr	r3, [pc, #412]	@ (8019144 <MAP_moveNextBlock_acc+0x70c>)
 8018fa6:	781b      	ldrb	r3, [r3, #0]
 8018fa8:	4619      	mov	r1, r3
 8018faa:	4a67      	ldr	r2, [pc, #412]	@ (8019148 <MAP_moveNextBlock_acc+0x710>)
 8018fac:	0143      	lsls	r3, r0, #5
 8018fae:	4413      	add	r3, r2
 8018fb0:	440b      	add	r3, r1
 8018fb2:	781b      	ldrb	r3, [r3, #0]
 8018fb4:	f003 0304 	and.w	r3, r3, #4
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d125      	bne.n	8019008 <MAP_moveNextBlock_acc+0x5d0>
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8018fbc:	4b5f      	ldr	r3, [pc, #380]	@ (801913c <MAP_moveNextBlock_acc+0x704>)
 8018fbe:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8018fc0:	2b02      	cmp	r3, #2
 8018fc2:	d10e      	bne.n	8018fe2 <MAP_moveNextBlock_acc+0x5aa>
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8018fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8019140 <MAP_moveNextBlock_acc+0x708>)
 8018fc6:	781b      	ldrb	r3, [r3, #0]
 8018fc8:	4618      	mov	r0, r3
 8018fca:	4b5e      	ldr	r3, [pc, #376]	@ (8019144 <MAP_moveNextBlock_acc+0x70c>)
 8018fcc:	781b      	ldrb	r3, [r3, #0]
 8018fce:	4619      	mov	r1, r3
 8018fd0:	4a5d      	ldr	r2, [pc, #372]	@ (8019148 <MAP_moveNextBlock_acc+0x710>)
 8018fd2:	0143      	lsls	r3, r0, #5
 8018fd4:	4413      	add	r3, r2
 8018fd6:	440b      	add	r3, r1
 8018fd8:	781b      	ldrb	r3, [r3, #0]
 8018fda:	f003 0308 	and.w	r3, r3, #8
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d112      	bne.n	8019008 <MAP_moveNextBlock_acc+0x5d0>
						( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8018fe2:	4b56      	ldr	r3, [pc, #344]	@ (801913c <MAP_moveNextBlock_acc+0x704>)
 8018fe4:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8018fe6:	2b03      	cmp	r3, #3
 8018fe8:	d123      	bne.n	8019032 <MAP_moveNextBlock_acc+0x5fa>
						( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8018fea:	4b55      	ldr	r3, [pc, #340]	@ (8019140 <MAP_moveNextBlock_acc+0x708>)
 8018fec:	781b      	ldrb	r3, [r3, #0]
 8018fee:	4618      	mov	r0, r3
 8018ff0:	4b54      	ldr	r3, [pc, #336]	@ (8019144 <MAP_moveNextBlock_acc+0x70c>)
 8018ff2:	781b      	ldrb	r3, [r3, #0]
 8018ff4:	4619      	mov	r1, r3
 8018ff6:	4a54      	ldr	r2, [pc, #336]	@ (8019148 <MAP_moveNextBlock_acc+0x710>)
 8018ff8:	0143      	lsls	r3, r0, #5
 8018ffa:	4413      	add	r3, r2
 8018ffc:	440b      	add	r3, r1
 8018ffe:	781b      	ldrb	r3, [r3, #0]
 8019000:	f003 0301 	and.w	r3, r3, #1
 8019004:	2b00      	cmp	r3, #0
 8019006:	d014      	beq.n	8019032 <MAP_moveNextBlock_acc+0x5fa>
						MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8019008:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8019154 <MAP_moveNextBlock_acc+0x71c>
 801900c:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8019010:	f7f6 fbb4 	bl	800f77c <MOT_goBlock_FinSpeed>
						MOT_turn(MOT_L90);					// 右90度旋回
 8019014:	2001      	movs	r0, #1
 8019016:	f7f6 fddb 	bl	800fbd0 <MOT_turn>
						uc_SlaCnt = 0;
 801901a:	4b4c      	ldr	r3, [pc, #304]	@ (801914c <MAP_moveNextBlock_acc+0x714>)
 801901c:	2200      	movs	r2, #0
 801901e:	701a      	strb	r2, [r3, #0]
						MOT_goHitBackWall();					// バックする
 8019020:	f7f8 f900 	bl	8011224 <MOT_goHitBackWall>
						f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8019024:	4b44      	ldr	r3, [pc, #272]	@ (8019138 <MAP_moveNextBlock_acc+0x700>)
 8019026:	4a4a      	ldr	r2, [pc, #296]	@ (8019150 <MAP_moveNextBlock_acc+0x718>)
 8019028:	601a      	str	r2, [r3, #0]
						*p_type = TRUE;							// 次は半区間（＋バック）分進める
 801902a:	683b      	ldr	r3, [r7, #0]
 801902c:	2201      	movs	r2, #1
 801902e:	701a      	strb	r2, [r3, #0]
 8019030:	e07e      	b.n	8019130 <MAP_moveNextBlock_acc+0x6f8>
						MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 8019032:	2000      	movs	r0, #0
 8019034:	f7ea fedc 	bl	8003df0 <PARAM_getSra>
 8019038:	4603      	mov	r3, r0
 801903a:	4619      	mov	r1, r3
 801903c:	2001      	movs	r0, #1
 801903e:	f7f8 f953 	bl	80112e8 <MOT_goSla>
						uc_SlaCnt++;
 8019042:	4b42      	ldr	r3, [pc, #264]	@ (801914c <MAP_moveNextBlock_acc+0x714>)
 8019044:	781b      	ldrb	r3, [r3, #0]
 8019046:	3301      	adds	r3, #1
 8019048:	b2da      	uxtb	r2, r3
 801904a:	4b40      	ldr	r3, [pc, #256]	@ (801914c <MAP_moveNextBlock_acc+0x714>)
 801904c:	701a      	strb	r2, [r3, #0]
		break;
 801904e:	e2be      	b.n	80195ce <MAP_moveNextBlock_acc+0xb96>
					if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8019050:	4b3a      	ldr	r3, [pc, #232]	@ (801913c <MAP_moveNextBlock_acc+0x704>)
 8019052:	781b      	ldrb	r3, [r3, #0]
 8019054:	2b00      	cmp	r3, #0
 8019056:	d10e      	bne.n	8019076 <MAP_moveNextBlock_acc+0x63e>
 8019058:	4b39      	ldr	r3, [pc, #228]	@ (8019140 <MAP_moveNextBlock_acc+0x708>)
 801905a:	781b      	ldrb	r3, [r3, #0]
 801905c:	4618      	mov	r0, r3
 801905e:	4b39      	ldr	r3, [pc, #228]	@ (8019144 <MAP_moveNextBlock_acc+0x70c>)
 8019060:	781b      	ldrb	r3, [r3, #0]
 8019062:	4619      	mov	r1, r3
 8019064:	4a38      	ldr	r2, [pc, #224]	@ (8019148 <MAP_moveNextBlock_acc+0x710>)
 8019066:	0143      	lsls	r3, r0, #5
 8019068:	4413      	add	r3, r2
 801906a:	440b      	add	r3, r1
 801906c:	781b      	ldrb	r3, [r3, #0]
 801906e:	f003 0301 	and.w	r3, r3, #1
 8019072:	2b00      	cmp	r3, #0
 8019074:	d138      	bne.n	80190e8 <MAP_moveNextBlock_acc+0x6b0>
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8019076:	4b31      	ldr	r3, [pc, #196]	@ (801913c <MAP_moveNextBlock_acc+0x704>)
 8019078:	781b      	ldrb	r3, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_SysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 801907a:	2b01      	cmp	r3, #1
 801907c:	d10e      	bne.n	801909c <MAP_moveNextBlock_acc+0x664>
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 801907e:	4b30      	ldr	r3, [pc, #192]	@ (8019140 <MAP_moveNextBlock_acc+0x708>)
 8019080:	781b      	ldrb	r3, [r3, #0]
 8019082:	4618      	mov	r0, r3
 8019084:	4b2f      	ldr	r3, [pc, #188]	@ (8019144 <MAP_moveNextBlock_acc+0x70c>)
 8019086:	781b      	ldrb	r3, [r3, #0]
 8019088:	4619      	mov	r1, r3
 801908a:	4a2f      	ldr	r2, [pc, #188]	@ (8019148 <MAP_moveNextBlock_acc+0x710>)
 801908c:	0143      	lsls	r3, r0, #5
 801908e:	4413      	add	r3, r2
 8019090:	440b      	add	r3, r1
 8019092:	781b      	ldrb	r3, [r3, #0]
 8019094:	f003 0302 	and.w	r3, r3, #2
 8019098:	2b00      	cmp	r3, #0
 801909a:	d125      	bne.n	80190e8 <MAP_moveNextBlock_acc+0x6b0>
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 801909c:	4b27      	ldr	r3, [pc, #156]	@ (801913c <MAP_moveNextBlock_acc+0x704>)
 801909e:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == EAST  ) && ( ( g_SysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 80190a0:	2b02      	cmp	r3, #2
 80190a2:	d10e      	bne.n	80190c2 <MAP_moveNextBlock_acc+0x68a>
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 80190a4:	4b26      	ldr	r3, [pc, #152]	@ (8019140 <MAP_moveNextBlock_acc+0x708>)
 80190a6:	781b      	ldrb	r3, [r3, #0]
 80190a8:	4618      	mov	r0, r3
 80190aa:	4b26      	ldr	r3, [pc, #152]	@ (8019144 <MAP_moveNextBlock_acc+0x70c>)
 80190ac:	781b      	ldrb	r3, [r3, #0]
 80190ae:	4619      	mov	r1, r3
 80190b0:	4a25      	ldr	r2, [pc, #148]	@ (8019148 <MAP_moveNextBlock_acc+0x710>)
 80190b2:	0143      	lsls	r3, r0, #5
 80190b4:	4413      	add	r3, r2
 80190b6:	440b      	add	r3, r1
 80190b8:	781b      	ldrb	r3, [r3, #0]
 80190ba:	f003 0304 	and.w	r3, r3, #4
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d112      	bne.n	80190e8 <MAP_moveNextBlock_acc+0x6b0>
						( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 80190c2:	4b1e      	ldr	r3, [pc, #120]	@ (801913c <MAP_moveNextBlock_acc+0x704>)
 80190c4:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == SOUTH ) && ( ( g_SysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 80190c6:	2b03      	cmp	r3, #3
 80190c8:	d123      	bne.n	8019112 <MAP_moveNextBlock_acc+0x6da>
						( ( en_Head == WEST  ) && ( ( g_SysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 80190ca:	4b1d      	ldr	r3, [pc, #116]	@ (8019140 <MAP_moveNextBlock_acc+0x708>)
 80190cc:	781b      	ldrb	r3, [r3, #0]
 80190ce:	4618      	mov	r0, r3
 80190d0:	4b1c      	ldr	r3, [pc, #112]	@ (8019144 <MAP_moveNextBlock_acc+0x70c>)
 80190d2:	781b      	ldrb	r3, [r3, #0]
 80190d4:	4619      	mov	r1, r3
 80190d6:	4a1c      	ldr	r2, [pc, #112]	@ (8019148 <MAP_moveNextBlock_acc+0x710>)
 80190d8:	0143      	lsls	r3, r0, #5
 80190da:	4413      	add	r3, r2
 80190dc:	440b      	add	r3, r1
 80190de:	781b      	ldrb	r3, [r3, #0]
 80190e0:	f003 0308 	and.w	r3, r3, #8
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d014      	beq.n	8019112 <MAP_moveNextBlock_acc+0x6da>
						MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 80190e8:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8019154 <MAP_moveNextBlock_acc+0x71c>
 80190ec:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80190f0:	f7f6 fb44 	bl	800f77c <MOT_goBlock_FinSpeed>
						LL_mDelay(100);
 80190f4:	2064      	movs	r0, #100	@ 0x64
 80190f6:	f002 fd25 	bl	801bb44 <LL_mDelay>
						DIST_Front_Wall_correction();
 80190fa:	f7f9 fc15 	bl	8012928 <DIST_Front_Wall_correction>
						MOT_turn(MOT_L90);						// 右90度旋回
 80190fe:	2001      	movs	r0, #1
 8019100:	f7f6 fd66 	bl	800fbd0 <MOT_turn>
						uc_SlaCnt = 0;
 8019104:	4b11      	ldr	r3, [pc, #68]	@ (801914c <MAP_moveNextBlock_acc+0x714>)
 8019106:	2200      	movs	r2, #0
 8019108:	701a      	strb	r2, [r3, #0]
						*p_type = TRUE;								// 次は半区間＋バック分進める
 801910a:	683b      	ldr	r3, [r7, #0]
 801910c:	2201      	movs	r2, #1
 801910e:	701a      	strb	r2, [r3, #0]
 8019110:	e00e      	b.n	8019130 <MAP_moveNextBlock_acc+0x6f8>
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8019112:	2000      	movs	r0, #0
 8019114:	f7ea fe6c 	bl	8003df0 <PARAM_getSra>
 8019118:	4603      	mov	r3, r0
 801911a:	4619      	mov	r1, r3
 801911c:	2000      	movs	r0, #0
 801911e:	f7f8 f8e3 	bl	80112e8 <MOT_goSla>
						uc_SlaCnt++;
 8019122:	4b0a      	ldr	r3, [pc, #40]	@ (801914c <MAP_moveNextBlock_acc+0x714>)
 8019124:	781b      	ldrb	r3, [r3, #0]
 8019126:	3301      	adds	r3, #1
 8019128:	b2da      	uxtb	r2, r3
 801912a:	4b08      	ldr	r3, [pc, #32]	@ (801914c <MAP_moveNextBlock_acc+0x714>)
 801912c:	701a      	strb	r2, [r3, #0]
		break;
 801912e:	e24e      	b.n	80195ce <MAP_moveNextBlock_acc+0xb96>
 8019130:	e24d      	b.n	80195ce <MAP_moveNextBlock_acc+0xb96>
 8019132:	bf00      	nop
 8019134:	20017b29 	.word	0x20017b29
 8019138:	2001ad90 	.word	0x2001ad90
 801913c:	2001ad8a 	.word	0x2001ad8a
 8019140:	2001ad8b 	.word	0x2001ad8b
 8019144:	2001ad8c 	.word	0x2001ad8c
 8019148:	2001b5a0 	.word	0x2001b5a0
 801914c:	2001ad94 	.word	0x2001ad94
 8019150:	3e5c28f6 	.word	0x3e5c28f6
 8019154:	00000000 	.word	0x00000000

		/* 反転して戻る */
	case SOUTH:
//		LED = LED_ALL_ON;
		MOT_goBlock_FinSpeed(0.5, 0);			// 半区画前進
 8019158:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 8019154 <MAP_moveNextBlock_acc+0x71c>
 801915c:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8019160:	f7f6 fb0c 	bl	800f77c <MOT_goBlock_FinSpeed>
		if(WallHitFlag == 0){
 8019164:	4b86      	ldr	r3, [pc, #536]	@ (8019380 <MAP_moveNextBlock_acc+0x948>)
 8019166:	781b      	ldrb	r3, [r3, #0]
 8019168:	2b00      	cmp	r3, #0
 801916a:	d15a      	bne.n	8019222 <MAP_moveNextBlock_acc+0x7ea>
			MOT_turn(MOT_R180);									// 右180度旋回
 801916c:	2002      	movs	r0, #2
 801916e:	f7f6 fd2f 	bl	800fbd0 <MOT_turn>
			uc_SlaCnt = 0;
 8019172:	4b84      	ldr	r3, [pc, #528]	@ (8019384 <MAP_moveNextBlock_acc+0x94c>)
 8019174:	2200      	movs	r2, #0
 8019176:	701a      	strb	r2, [r3, #0]

			/* 壁当て姿勢制御（後ろに壁があったらバック＋移動距離を加算する） */
			if (((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 8019178:	4b83      	ldr	r3, [pc, #524]	@ (8019388 <MAP_moveNextBlock_acc+0x950>)
 801917a:	781b      	ldrb	r3, [r3, #0]
 801917c:	2b00      	cmp	r3, #0
 801917e:	d10e      	bne.n	801919e <MAP_moveNextBlock_acc+0x766>
 8019180:	4b82      	ldr	r3, [pc, #520]	@ (801938c <MAP_moveNextBlock_acc+0x954>)
 8019182:	781b      	ldrb	r3, [r3, #0]
 8019184:	4618      	mov	r0, r3
 8019186:	4b82      	ldr	r3, [pc, #520]	@ (8019390 <MAP_moveNextBlock_acc+0x958>)
 8019188:	781b      	ldrb	r3, [r3, #0]
 801918a:	4619      	mov	r1, r3
 801918c:	4a81      	ldr	r2, [pc, #516]	@ (8019394 <MAP_moveNextBlock_acc+0x95c>)
 801918e:	0143      	lsls	r3, r0, #5
 8019190:	4413      	add	r3, r2
 8019192:	440b      	add	r3, r1
 8019194:	781b      	ldrb	r3, [r3, #0]
 8019196:	f003 0301 	and.w	r3, r3, #1
 801919a:	2b00      	cmp	r3, #0
 801919c:	d138      	bne.n	8019210 <MAP_moveNextBlock_acc+0x7d8>
				((en_Head == EAST) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 801919e:	4b7a      	ldr	r3, [pc, #488]	@ (8019388 <MAP_moveNextBlock_acc+0x950>)
 80191a0:	781b      	ldrb	r3, [r3, #0]
			if (((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 80191a2:	2b01      	cmp	r3, #1
 80191a4:	d10e      	bne.n	80191c4 <MAP_moveNextBlock_acc+0x78c>
				((en_Head == EAST) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 80191a6:	4b79      	ldr	r3, [pc, #484]	@ (801938c <MAP_moveNextBlock_acc+0x954>)
 80191a8:	781b      	ldrb	r3, [r3, #0]
 80191aa:	4618      	mov	r0, r3
 80191ac:	4b78      	ldr	r3, [pc, #480]	@ (8019390 <MAP_moveNextBlock_acc+0x958>)
 80191ae:	781b      	ldrb	r3, [r3, #0]
 80191b0:	4619      	mov	r1, r3
 80191b2:	4a78      	ldr	r2, [pc, #480]	@ (8019394 <MAP_moveNextBlock_acc+0x95c>)
 80191b4:	0143      	lsls	r3, r0, #5
 80191b6:	4413      	add	r3, r2
 80191b8:	440b      	add	r3, r1
 80191ba:	781b      	ldrb	r3, [r3, #0]
 80191bc:	f003 0302 	and.w	r3, r3, #2
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d125      	bne.n	8019210 <MAP_moveNextBlock_acc+0x7d8>
				((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 80191c4:	4b70      	ldr	r3, [pc, #448]	@ (8019388 <MAP_moveNextBlock_acc+0x950>)
 80191c6:	781b      	ldrb	r3, [r3, #0]
				((en_Head == EAST) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 80191c8:	2b02      	cmp	r3, #2
 80191ca:	d10e      	bne.n	80191ea <MAP_moveNextBlock_acc+0x7b2>
				((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 80191cc:	4b6f      	ldr	r3, [pc, #444]	@ (801938c <MAP_moveNextBlock_acc+0x954>)
 80191ce:	781b      	ldrb	r3, [r3, #0]
 80191d0:	4618      	mov	r0, r3
 80191d2:	4b6f      	ldr	r3, [pc, #444]	@ (8019390 <MAP_moveNextBlock_acc+0x958>)
 80191d4:	781b      	ldrb	r3, [r3, #0]
 80191d6:	4619      	mov	r1, r3
 80191d8:	4a6e      	ldr	r2, [pc, #440]	@ (8019394 <MAP_moveNextBlock_acc+0x95c>)
 80191da:	0143      	lsls	r3, r0, #5
 80191dc:	4413      	add	r3, r2
 80191de:	440b      	add	r3, r1
 80191e0:	781b      	ldrb	r3, [r3, #0]
 80191e2:	f003 0304 	and.w	r3, r3, #4
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d112      	bne.n	8019210 <MAP_moveNextBlock_acc+0x7d8>
				((en_Head == WEST) && ((g_SysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 80191ea:	4b67      	ldr	r3, [pc, #412]	@ (8019388 <MAP_moveNextBlock_acc+0x950>)
 80191ec:	781b      	ldrb	r3, [r3, #0]
				((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 80191ee:	2b03      	cmp	r3, #3
 80191f0:	d113      	bne.n	801921a <MAP_moveNextBlock_acc+0x7e2>
				((en_Head == WEST) && ((g_SysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 80191f2:	4b66      	ldr	r3, [pc, #408]	@ (801938c <MAP_moveNextBlock_acc+0x954>)
 80191f4:	781b      	ldrb	r3, [r3, #0]
 80191f6:	4618      	mov	r0, r3
 80191f8:	4b65      	ldr	r3, [pc, #404]	@ (8019390 <MAP_moveNextBlock_acc+0x958>)
 80191fa:	781b      	ldrb	r3, [r3, #0]
 80191fc:	4619      	mov	r1, r3
 80191fe:	4a65      	ldr	r2, [pc, #404]	@ (8019394 <MAP_moveNextBlock_acc+0x95c>)
 8019200:	0143      	lsls	r3, r0, #5
 8019202:	4413      	add	r3, r2
 8019204:	440b      	add	r3, r1
 8019206:	781b      	ldrb	r3, [r3, #0]
 8019208:	f003 0308 	and.w	r3, r3, #8
 801920c:	2b00      	cmp	r3, #0
 801920e:	d004      	beq.n	801921a <MAP_moveNextBlock_acc+0x7e2>
				) {
				MOT_goHitBackWall();					// バックする
 8019210:	f7f8 f808 	bl	8011224 <MOT_goHitBackWall>
				f_MoveBackDist = MOVE_BACK_DIST;	// バックした分の移動距離[区画]を加算
 8019214:	4b60      	ldr	r3, [pc, #384]	@ (8019398 <MAP_moveNextBlock_acc+0x960>)
 8019216:	4a61      	ldr	r2, [pc, #388]	@ (801939c <MAP_moveNextBlock_acc+0x964>)
 8019218:	601a      	str	r2, [r3, #0]
			}
			*p_type = TRUE;								// 次は半区間＋バック分進める
 801921a:	683b      	ldr	r3, [r7, #0]
 801921c:	2201      	movs	r2, #1
 801921e:	701a      	strb	r2, [r3, #0]
				}
				
				*p_type = TRUE;								// 次は半区間＋バック分進める
			}
		}
		break;
 8019220:	e1d5      	b.n	80195ce <MAP_moveNextBlock_acc+0xb96>
			uc_SlaCnt = 0;
 8019222:	4b58      	ldr	r3, [pc, #352]	@ (8019384 <MAP_moveNextBlock_acc+0x94c>)
 8019224:	2200      	movs	r2, #0
 8019226:	701a      	strb	r2, [r3, #0]
			if (((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 8019228:	4b57      	ldr	r3, [pc, #348]	@ (8019388 <MAP_moveNextBlock_acc+0x950>)
 801922a:	781b      	ldrb	r3, [r3, #0]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d10e      	bne.n	801924e <MAP_moveNextBlock_acc+0x816>
 8019230:	4b56      	ldr	r3, [pc, #344]	@ (801938c <MAP_moveNextBlock_acc+0x954>)
 8019232:	781b      	ldrb	r3, [r3, #0]
 8019234:	4618      	mov	r0, r3
 8019236:	4b56      	ldr	r3, [pc, #344]	@ (8019390 <MAP_moveNextBlock_acc+0x958>)
 8019238:	781b      	ldrb	r3, [r3, #0]
 801923a:	4619      	mov	r1, r3
 801923c:	4a55      	ldr	r2, [pc, #340]	@ (8019394 <MAP_moveNextBlock_acc+0x95c>)
 801923e:	0143      	lsls	r3, r0, #5
 8019240:	4413      	add	r3, r2
 8019242:	440b      	add	r3, r1
 8019244:	781b      	ldrb	r3, [r3, #0]
 8019246:	f003 0301 	and.w	r3, r3, #1
 801924a:	2b00      	cmp	r3, #0
 801924c:	d13a      	bne.n	80192c4 <MAP_moveNextBlock_acc+0x88c>
				((en_Head == EAST) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 801924e:	4b4e      	ldr	r3, [pc, #312]	@ (8019388 <MAP_moveNextBlock_acc+0x950>)
 8019250:	781b      	ldrb	r3, [r3, #0]
			if (((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 8019252:	2b01      	cmp	r3, #1
 8019254:	d10e      	bne.n	8019274 <MAP_moveNextBlock_acc+0x83c>
				((en_Head == EAST) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 8019256:	4b4d      	ldr	r3, [pc, #308]	@ (801938c <MAP_moveNextBlock_acc+0x954>)
 8019258:	781b      	ldrb	r3, [r3, #0]
 801925a:	4618      	mov	r0, r3
 801925c:	4b4c      	ldr	r3, [pc, #304]	@ (8019390 <MAP_moveNextBlock_acc+0x958>)
 801925e:	781b      	ldrb	r3, [r3, #0]
 8019260:	4619      	mov	r1, r3
 8019262:	4a4c      	ldr	r2, [pc, #304]	@ (8019394 <MAP_moveNextBlock_acc+0x95c>)
 8019264:	0143      	lsls	r3, r0, #5
 8019266:	4413      	add	r3, r2
 8019268:	440b      	add	r3, r1
 801926a:	781b      	ldrb	r3, [r3, #0]
 801926c:	f003 0302 	and.w	r3, r3, #2
 8019270:	2b00      	cmp	r3, #0
 8019272:	d127      	bne.n	80192c4 <MAP_moveNextBlock_acc+0x88c>
				((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 8019274:	4b44      	ldr	r3, [pc, #272]	@ (8019388 <MAP_moveNextBlock_acc+0x950>)
 8019276:	781b      	ldrb	r3, [r3, #0]
				((en_Head == EAST) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 8019278:	2b02      	cmp	r3, #2
 801927a:	d10e      	bne.n	801929a <MAP_moveNextBlock_acc+0x862>
				((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 801927c:	4b43      	ldr	r3, [pc, #268]	@ (801938c <MAP_moveNextBlock_acc+0x954>)
 801927e:	781b      	ldrb	r3, [r3, #0]
 8019280:	4618      	mov	r0, r3
 8019282:	4b43      	ldr	r3, [pc, #268]	@ (8019390 <MAP_moveNextBlock_acc+0x958>)
 8019284:	781b      	ldrb	r3, [r3, #0]
 8019286:	4619      	mov	r1, r3
 8019288:	4a42      	ldr	r2, [pc, #264]	@ (8019394 <MAP_moveNextBlock_acc+0x95c>)
 801928a:	0143      	lsls	r3, r0, #5
 801928c:	4413      	add	r3, r2
 801928e:	440b      	add	r3, r1
 8019290:	781b      	ldrb	r3, [r3, #0]
 8019292:	f003 0304 	and.w	r3, r3, #4
 8019296:	2b00      	cmp	r3, #0
 8019298:	d114      	bne.n	80192c4 <MAP_moveNextBlock_acc+0x88c>
				((en_Head == WEST) && ((g_SysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 801929a:	4b3b      	ldr	r3, [pc, #236]	@ (8019388 <MAP_moveNextBlock_acc+0x950>)
 801929c:	781b      	ldrb	r3, [r3, #0]
				((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 801929e:	2b03      	cmp	r3, #3
 80192a0:	f040 80dd 	bne.w	801945e <MAP_moveNextBlock_acc+0xa26>
				((en_Head == WEST) && ((g_SysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 80192a4:	4b39      	ldr	r3, [pc, #228]	@ (801938c <MAP_moveNextBlock_acc+0x954>)
 80192a6:	781b      	ldrb	r3, [r3, #0]
 80192a8:	4618      	mov	r0, r3
 80192aa:	4b39      	ldr	r3, [pc, #228]	@ (8019390 <MAP_moveNextBlock_acc+0x958>)
 80192ac:	781b      	ldrb	r3, [r3, #0]
 80192ae:	4619      	mov	r1, r3
 80192b0:	4a38      	ldr	r2, [pc, #224]	@ (8019394 <MAP_moveNextBlock_acc+0x95c>)
 80192b2:	0143      	lsls	r3, r0, #5
 80192b4:	4413      	add	r3, r2
 80192b6:	440b      	add	r3, r1
 80192b8:	781b      	ldrb	r3, [r3, #0]
 80192ba:	f003 0308 	and.w	r3, r3, #8
 80192be:	2b00      	cmp	r3, #0
 80192c0:	f000 80cd 	beq.w	801945e <MAP_moveNextBlock_acc+0xa26>
					LL_mDelay(100);
 80192c4:	2064      	movs	r0, #100	@ 0x64
 80192c6:	f002 fc3d 	bl	801bb44 <LL_mDelay>
					DIST_Front_Wall_correction();
 80192ca:	f7f9 fb2d 	bl	8012928 <DIST_Front_Wall_correction>
					if(((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 北を向いていて東に壁がある
 80192ce:	4b2e      	ldr	r3, [pc, #184]	@ (8019388 <MAP_moveNextBlock_acc+0x950>)
 80192d0:	781b      	ldrb	r3, [r3, #0]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d10e      	bne.n	80192f4 <MAP_moveNextBlock_acc+0x8bc>
 80192d6:	4b2d      	ldr	r3, [pc, #180]	@ (801938c <MAP_moveNextBlock_acc+0x954>)
 80192d8:	781b      	ldrb	r3, [r3, #0]
 80192da:	4618      	mov	r0, r3
 80192dc:	4b2c      	ldr	r3, [pc, #176]	@ (8019390 <MAP_moveNextBlock_acc+0x958>)
 80192de:	781b      	ldrb	r3, [r3, #0]
 80192e0:	4619      	mov	r1, r3
 80192e2:	4a2c      	ldr	r2, [pc, #176]	@ (8019394 <MAP_moveNextBlock_acc+0x95c>)
 80192e4:	0143      	lsls	r3, r0, #5
 80192e6:	4413      	add	r3, r2
 80192e8:	440b      	add	r3, r1
 80192ea:	781b      	ldrb	r3, [r3, #0]
 80192ec:	f003 0302 	and.w	r3, r3, #2
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d138      	bne.n	8019366 <MAP_moveNextBlock_acc+0x92e>
						((en_Head == EAST) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 80192f4:	4b24      	ldr	r3, [pc, #144]	@ (8019388 <MAP_moveNextBlock_acc+0x950>)
 80192f6:	781b      	ldrb	r3, [r3, #0]
					if(((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 北を向いていて東に壁がある
 80192f8:	2b01      	cmp	r3, #1
 80192fa:	d10e      	bne.n	801931a <MAP_moveNextBlock_acc+0x8e2>
						((en_Head == EAST) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 80192fc:	4b23      	ldr	r3, [pc, #140]	@ (801938c <MAP_moveNextBlock_acc+0x954>)
 80192fe:	781b      	ldrb	r3, [r3, #0]
 8019300:	4618      	mov	r0, r3
 8019302:	4b23      	ldr	r3, [pc, #140]	@ (8019390 <MAP_moveNextBlock_acc+0x958>)
 8019304:	781b      	ldrb	r3, [r3, #0]
 8019306:	4619      	mov	r1, r3
 8019308:	4a22      	ldr	r2, [pc, #136]	@ (8019394 <MAP_moveNextBlock_acc+0x95c>)
 801930a:	0143      	lsls	r3, r0, #5
 801930c:	4413      	add	r3, r2
 801930e:	440b      	add	r3, r1
 8019310:	781b      	ldrb	r3, [r3, #0]
 8019312:	f003 0304 	and.w	r3, r3, #4
 8019316:	2b00      	cmp	r3, #0
 8019318:	d125      	bne.n	8019366 <MAP_moveNextBlock_acc+0x92e>
						((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 801931a:	4b1b      	ldr	r3, [pc, #108]	@ (8019388 <MAP_moveNextBlock_acc+0x950>)
 801931c:	781b      	ldrb	r3, [r3, #0]
						((en_Head == EAST) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 801931e:	2b02      	cmp	r3, #2
 8019320:	d10e      	bne.n	8019340 <MAP_moveNextBlock_acc+0x908>
						((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 8019322:	4b1a      	ldr	r3, [pc, #104]	@ (801938c <MAP_moveNextBlock_acc+0x954>)
 8019324:	781b      	ldrb	r3, [r3, #0]
 8019326:	4618      	mov	r0, r3
 8019328:	4b19      	ldr	r3, [pc, #100]	@ (8019390 <MAP_moveNextBlock_acc+0x958>)
 801932a:	781b      	ldrb	r3, [r3, #0]
 801932c:	4619      	mov	r1, r3
 801932e:	4a19      	ldr	r2, [pc, #100]	@ (8019394 <MAP_moveNextBlock_acc+0x95c>)
 8019330:	0143      	lsls	r3, r0, #5
 8019332:	4413      	add	r3, r2
 8019334:	440b      	add	r3, r1
 8019336:	781b      	ldrb	r3, [r3, #0]
 8019338:	f003 0308 	and.w	r3, r3, #8
 801933c:	2b00      	cmp	r3, #0
 801933e:	d112      	bne.n	8019366 <MAP_moveNextBlock_acc+0x92e>
						((en_Head == WEST) && ((g_SysMap[my][mx] & 0x01) != 0)) 			// 西を向いていて北に壁がある
 8019340:	4b11      	ldr	r3, [pc, #68]	@ (8019388 <MAP_moveNextBlock_acc+0x950>)
 8019342:	781b      	ldrb	r3, [r3, #0]
						((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 8019344:	2b03      	cmp	r3, #3
 8019346:	d12b      	bne.n	80193a0 <MAP_moveNextBlock_acc+0x968>
						((en_Head == WEST) && ((g_SysMap[my][mx] & 0x01) != 0)) 			// 西を向いていて北に壁がある
 8019348:	4b10      	ldr	r3, [pc, #64]	@ (801938c <MAP_moveNextBlock_acc+0x954>)
 801934a:	781b      	ldrb	r3, [r3, #0]
 801934c:	4618      	mov	r0, r3
 801934e:	4b10      	ldr	r3, [pc, #64]	@ (8019390 <MAP_moveNextBlock_acc+0x958>)
 8019350:	781b      	ldrb	r3, [r3, #0]
 8019352:	4619      	mov	r1, r3
 8019354:	4a0f      	ldr	r2, [pc, #60]	@ (8019394 <MAP_moveNextBlock_acc+0x95c>)
 8019356:	0143      	lsls	r3, r0, #5
 8019358:	4413      	add	r3, r2
 801935a:	440b      	add	r3, r1
 801935c:	781b      	ldrb	r3, [r3, #0]
 801935e:	f003 0301 	and.w	r3, r3, #1
 8019362:	2b00      	cmp	r3, #0
 8019364:	d01c      	beq.n	80193a0 <MAP_moveNextBlock_acc+0x968>
						MOT_turn(MOT_R90);									// 右90度旋回
 8019366:	2000      	movs	r0, #0
 8019368:	f7f6 fc32 	bl	800fbd0 <MOT_turn>
						LL_mDelay(100);
 801936c:	2064      	movs	r0, #100	@ 0x64
 801936e:	f002 fbe9 	bl	801bb44 <LL_mDelay>
						DIST_Front_Wall_correction();
 8019372:	f7f9 fad9 	bl	8012928 <DIST_Front_Wall_correction>
						MOT_turn(MOT_R90);									// 右90度旋回
 8019376:	2000      	movs	r0, #0
 8019378:	f7f6 fc2a 	bl	800fbd0 <MOT_turn>
 801937c:	e06b      	b.n	8019456 <MAP_moveNextBlock_acc+0xa1e>
 801937e:	bf00      	nop
 8019380:	20017b29 	.word	0x20017b29
 8019384:	2001ad94 	.word	0x2001ad94
 8019388:	2001ad8a 	.word	0x2001ad8a
 801938c:	2001ad8b 	.word	0x2001ad8b
 8019390:	2001ad8c 	.word	0x2001ad8c
 8019394:	2001b5a0 	.word	0x2001b5a0
 8019398:	2001ad90 	.word	0x2001ad90
 801939c:	3e5c28f6 	.word	0x3e5c28f6
					}else if(((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 北を向いていて西に壁がある
 80193a0:	4b92      	ldr	r3, [pc, #584]	@ (80195ec <MAP_moveNextBlock_acc+0xbb4>)
 80193a2:	781b      	ldrb	r3, [r3, #0]
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d10e      	bne.n	80193c6 <MAP_moveNextBlock_acc+0x98e>
 80193a8:	4b91      	ldr	r3, [pc, #580]	@ (80195f0 <MAP_moveNextBlock_acc+0xbb8>)
 80193aa:	781b      	ldrb	r3, [r3, #0]
 80193ac:	4618      	mov	r0, r3
 80193ae:	4b91      	ldr	r3, [pc, #580]	@ (80195f4 <MAP_moveNextBlock_acc+0xbbc>)
 80193b0:	781b      	ldrb	r3, [r3, #0]
 80193b2:	4619      	mov	r1, r3
 80193b4:	4a90      	ldr	r2, [pc, #576]	@ (80195f8 <MAP_moveNextBlock_acc+0xbc0>)
 80193b6:	0143      	lsls	r3, r0, #5
 80193b8:	4413      	add	r3, r2
 80193ba:	440b      	add	r3, r1
 80193bc:	781b      	ldrb	r3, [r3, #0]
 80193be:	f003 0308 	and.w	r3, r3, #8
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d138      	bne.n	8019438 <MAP_moveNextBlock_acc+0xa00>
						((en_Head == EAST) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 80193c6:	4b89      	ldr	r3, [pc, #548]	@ (80195ec <MAP_moveNextBlock_acc+0xbb4>)
 80193c8:	781b      	ldrb	r3, [r3, #0]
					}else if(((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 北を向いていて西に壁がある
 80193ca:	2b01      	cmp	r3, #1
 80193cc:	d10e      	bne.n	80193ec <MAP_moveNextBlock_acc+0x9b4>
						((en_Head == EAST) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 80193ce:	4b88      	ldr	r3, [pc, #544]	@ (80195f0 <MAP_moveNextBlock_acc+0xbb8>)
 80193d0:	781b      	ldrb	r3, [r3, #0]
 80193d2:	4618      	mov	r0, r3
 80193d4:	4b87      	ldr	r3, [pc, #540]	@ (80195f4 <MAP_moveNextBlock_acc+0xbbc>)
 80193d6:	781b      	ldrb	r3, [r3, #0]
 80193d8:	4619      	mov	r1, r3
 80193da:	4a87      	ldr	r2, [pc, #540]	@ (80195f8 <MAP_moveNextBlock_acc+0xbc0>)
 80193dc:	0143      	lsls	r3, r0, #5
 80193de:	4413      	add	r3, r2
 80193e0:	440b      	add	r3, r1
 80193e2:	781b      	ldrb	r3, [r3, #0]
 80193e4:	f003 0301 	and.w	r3, r3, #1
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d125      	bne.n	8019438 <MAP_moveNextBlock_acc+0xa00>
						((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 80193ec:	4b7f      	ldr	r3, [pc, #508]	@ (80195ec <MAP_moveNextBlock_acc+0xbb4>)
 80193ee:	781b      	ldrb	r3, [r3, #0]
						((en_Head == EAST) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 80193f0:	2b02      	cmp	r3, #2
 80193f2:	d10e      	bne.n	8019412 <MAP_moveNextBlock_acc+0x9da>
						((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 80193f4:	4b7e      	ldr	r3, [pc, #504]	@ (80195f0 <MAP_moveNextBlock_acc+0xbb8>)
 80193f6:	781b      	ldrb	r3, [r3, #0]
 80193f8:	4618      	mov	r0, r3
 80193fa:	4b7e      	ldr	r3, [pc, #504]	@ (80195f4 <MAP_moveNextBlock_acc+0xbbc>)
 80193fc:	781b      	ldrb	r3, [r3, #0]
 80193fe:	4619      	mov	r1, r3
 8019400:	4a7d      	ldr	r2, [pc, #500]	@ (80195f8 <MAP_moveNextBlock_acc+0xbc0>)
 8019402:	0143      	lsls	r3, r0, #5
 8019404:	4413      	add	r3, r2
 8019406:	440b      	add	r3, r1
 8019408:	781b      	ldrb	r3, [r3, #0]
 801940a:	f003 0302 	and.w	r3, r3, #2
 801940e:	2b00      	cmp	r3, #0
 8019410:	d112      	bne.n	8019438 <MAP_moveNextBlock_acc+0xa00>
						((en_Head == WEST) && ((g_SysMap[my][mx] & 0x04) != 0)) 			// 西を向いていて南に壁がある
 8019412:	4b76      	ldr	r3, [pc, #472]	@ (80195ec <MAP_moveNextBlock_acc+0xbb4>)
 8019414:	781b      	ldrb	r3, [r3, #0]
						((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 8019416:	2b03      	cmp	r3, #3
 8019418:	d11a      	bne.n	8019450 <MAP_moveNextBlock_acc+0xa18>
						((en_Head == WEST) && ((g_SysMap[my][mx] & 0x04) != 0)) 			// 西を向いていて南に壁がある
 801941a:	4b75      	ldr	r3, [pc, #468]	@ (80195f0 <MAP_moveNextBlock_acc+0xbb8>)
 801941c:	781b      	ldrb	r3, [r3, #0]
 801941e:	4618      	mov	r0, r3
 8019420:	4b74      	ldr	r3, [pc, #464]	@ (80195f4 <MAP_moveNextBlock_acc+0xbbc>)
 8019422:	781b      	ldrb	r3, [r3, #0]
 8019424:	4619      	mov	r1, r3
 8019426:	4a74      	ldr	r2, [pc, #464]	@ (80195f8 <MAP_moveNextBlock_acc+0xbc0>)
 8019428:	0143      	lsls	r3, r0, #5
 801942a:	4413      	add	r3, r2
 801942c:	440b      	add	r3, r1
 801942e:	781b      	ldrb	r3, [r3, #0]
 8019430:	f003 0304 	and.w	r3, r3, #4
 8019434:	2b00      	cmp	r3, #0
 8019436:	d00b      	beq.n	8019450 <MAP_moveNextBlock_acc+0xa18>
						MOT_turn(MOT_L90);									// 右90度旋回
 8019438:	2001      	movs	r0, #1
 801943a:	f7f6 fbc9 	bl	800fbd0 <MOT_turn>
						LL_mDelay(100);
 801943e:	2064      	movs	r0, #100	@ 0x64
 8019440:	f002 fb80 	bl	801bb44 <LL_mDelay>
						DIST_Front_Wall_correction();
 8019444:	f7f9 fa70 	bl	8012928 <DIST_Front_Wall_correction>
						MOT_turn(MOT_L90);									// 右90度旋回
 8019448:	2001      	movs	r0, #1
 801944a:	f7f6 fbc1 	bl	800fbd0 <MOT_turn>
 801944e:	e002      	b.n	8019456 <MAP_moveNextBlock_acc+0xa1e>
						MOT_turn(MOT_R180);
 8019450:	2002      	movs	r0, #2
 8019452:	f7f6 fbbd 	bl	800fbd0 <MOT_turn>
					*p_type = TRUE;								// 次は半区間＋バック分進める
 8019456:	683b      	ldr	r3, [r7, #0]
 8019458:	2201      	movs	r2, #1
 801945a:	701a      	strb	r2, [r3, #0]
		break;
 801945c:	e0b7      	b.n	80195ce <MAP_moveNextBlock_acc+0xb96>
				if(((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 北を向いていて東に壁がある
 801945e:	4b63      	ldr	r3, [pc, #396]	@ (80195ec <MAP_moveNextBlock_acc+0xbb4>)
 8019460:	781b      	ldrb	r3, [r3, #0]
 8019462:	2b00      	cmp	r3, #0
 8019464:	d10e      	bne.n	8019484 <MAP_moveNextBlock_acc+0xa4c>
 8019466:	4b62      	ldr	r3, [pc, #392]	@ (80195f0 <MAP_moveNextBlock_acc+0xbb8>)
 8019468:	781b      	ldrb	r3, [r3, #0]
 801946a:	4618      	mov	r0, r3
 801946c:	4b61      	ldr	r3, [pc, #388]	@ (80195f4 <MAP_moveNextBlock_acc+0xbbc>)
 801946e:	781b      	ldrb	r3, [r3, #0]
 8019470:	4619      	mov	r1, r3
 8019472:	4a61      	ldr	r2, [pc, #388]	@ (80195f8 <MAP_moveNextBlock_acc+0xbc0>)
 8019474:	0143      	lsls	r3, r0, #5
 8019476:	4413      	add	r3, r2
 8019478:	440b      	add	r3, r1
 801947a:	781b      	ldrb	r3, [r3, #0]
 801947c:	f003 0302 	and.w	r3, r3, #2
 8019480:	2b00      	cmp	r3, #0
 8019482:	d138      	bne.n	80194f6 <MAP_moveNextBlock_acc+0xabe>
					((en_Head == EAST) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 8019484:	4b59      	ldr	r3, [pc, #356]	@ (80195ec <MAP_moveNextBlock_acc+0xbb4>)
 8019486:	781b      	ldrb	r3, [r3, #0]
				if(((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 北を向いていて東に壁がある
 8019488:	2b01      	cmp	r3, #1
 801948a:	d10e      	bne.n	80194aa <MAP_moveNextBlock_acc+0xa72>
					((en_Head == EAST) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 801948c:	4b58      	ldr	r3, [pc, #352]	@ (80195f0 <MAP_moveNextBlock_acc+0xbb8>)
 801948e:	781b      	ldrb	r3, [r3, #0]
 8019490:	4618      	mov	r0, r3
 8019492:	4b58      	ldr	r3, [pc, #352]	@ (80195f4 <MAP_moveNextBlock_acc+0xbbc>)
 8019494:	781b      	ldrb	r3, [r3, #0]
 8019496:	4619      	mov	r1, r3
 8019498:	4a57      	ldr	r2, [pc, #348]	@ (80195f8 <MAP_moveNextBlock_acc+0xbc0>)
 801949a:	0143      	lsls	r3, r0, #5
 801949c:	4413      	add	r3, r2
 801949e:	440b      	add	r3, r1
 80194a0:	781b      	ldrb	r3, [r3, #0]
 80194a2:	f003 0304 	and.w	r3, r3, #4
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d125      	bne.n	80194f6 <MAP_moveNextBlock_acc+0xabe>
					((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 80194aa:	4b50      	ldr	r3, [pc, #320]	@ (80195ec <MAP_moveNextBlock_acc+0xbb4>)
 80194ac:	781b      	ldrb	r3, [r3, #0]
					((en_Head == EAST) && ((g_SysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 80194ae:	2b02      	cmp	r3, #2
 80194b0:	d10e      	bne.n	80194d0 <MAP_moveNextBlock_acc+0xa98>
					((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 80194b2:	4b4f      	ldr	r3, [pc, #316]	@ (80195f0 <MAP_moveNextBlock_acc+0xbb8>)
 80194b4:	781b      	ldrb	r3, [r3, #0]
 80194b6:	4618      	mov	r0, r3
 80194b8:	4b4e      	ldr	r3, [pc, #312]	@ (80195f4 <MAP_moveNextBlock_acc+0xbbc>)
 80194ba:	781b      	ldrb	r3, [r3, #0]
 80194bc:	4619      	mov	r1, r3
 80194be:	4a4e      	ldr	r2, [pc, #312]	@ (80195f8 <MAP_moveNextBlock_acc+0xbc0>)
 80194c0:	0143      	lsls	r3, r0, #5
 80194c2:	4413      	add	r3, r2
 80194c4:	440b      	add	r3, r1
 80194c6:	781b      	ldrb	r3, [r3, #0]
 80194c8:	f003 0308 	and.w	r3, r3, #8
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d112      	bne.n	80194f6 <MAP_moveNextBlock_acc+0xabe>
					((en_Head == WEST) && ((g_SysMap[my][mx] & 0x01) != 0)) 			// 西を向いていて北に壁がある
 80194d0:	4b46      	ldr	r3, [pc, #280]	@ (80195ec <MAP_moveNextBlock_acc+0xbb4>)
 80194d2:	781b      	ldrb	r3, [r3, #0]
					((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 80194d4:	2b03      	cmp	r3, #3
 80194d6:	d11a      	bne.n	801950e <MAP_moveNextBlock_acc+0xad6>
					((en_Head == WEST) && ((g_SysMap[my][mx] & 0x01) != 0)) 			// 西を向いていて北に壁がある
 80194d8:	4b45      	ldr	r3, [pc, #276]	@ (80195f0 <MAP_moveNextBlock_acc+0xbb8>)
 80194da:	781b      	ldrb	r3, [r3, #0]
 80194dc:	4618      	mov	r0, r3
 80194de:	4b45      	ldr	r3, [pc, #276]	@ (80195f4 <MAP_moveNextBlock_acc+0xbbc>)
 80194e0:	781b      	ldrb	r3, [r3, #0]
 80194e2:	4619      	mov	r1, r3
 80194e4:	4a44      	ldr	r2, [pc, #272]	@ (80195f8 <MAP_moveNextBlock_acc+0xbc0>)
 80194e6:	0143      	lsls	r3, r0, #5
 80194e8:	4413      	add	r3, r2
 80194ea:	440b      	add	r3, r1
 80194ec:	781b      	ldrb	r3, [r3, #0]
 80194ee:	f003 0301 	and.w	r3, r3, #1
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d00b      	beq.n	801950e <MAP_moveNextBlock_acc+0xad6>
					MOT_turn(MOT_R90);									// 右90度旋回
 80194f6:	2000      	movs	r0, #0
 80194f8:	f7f6 fb6a 	bl	800fbd0 <MOT_turn>
					LL_mDelay(100);
 80194fc:	2064      	movs	r0, #100	@ 0x64
 80194fe:	f002 fb21 	bl	801bb44 <LL_mDelay>
					DIST_Front_Wall_correction();
 8019502:	f7f9 fa11 	bl	8012928 <DIST_Front_Wall_correction>
					MOT_turn(MOT_R90);									// 右90度旋回
 8019506:	2000      	movs	r0, #0
 8019508:	f7f6 fb62 	bl	800fbd0 <MOT_turn>
 801950c:	e05a      	b.n	80195c4 <MAP_moveNextBlock_acc+0xb8c>
				}else if(((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 北を向いていて西に壁がある
 801950e:	4b37      	ldr	r3, [pc, #220]	@ (80195ec <MAP_moveNextBlock_acc+0xbb4>)
 8019510:	781b      	ldrb	r3, [r3, #0]
 8019512:	2b00      	cmp	r3, #0
 8019514:	d10e      	bne.n	8019534 <MAP_moveNextBlock_acc+0xafc>
 8019516:	4b36      	ldr	r3, [pc, #216]	@ (80195f0 <MAP_moveNextBlock_acc+0xbb8>)
 8019518:	781b      	ldrb	r3, [r3, #0]
 801951a:	4618      	mov	r0, r3
 801951c:	4b35      	ldr	r3, [pc, #212]	@ (80195f4 <MAP_moveNextBlock_acc+0xbbc>)
 801951e:	781b      	ldrb	r3, [r3, #0]
 8019520:	4619      	mov	r1, r3
 8019522:	4a35      	ldr	r2, [pc, #212]	@ (80195f8 <MAP_moveNextBlock_acc+0xbc0>)
 8019524:	0143      	lsls	r3, r0, #5
 8019526:	4413      	add	r3, r2
 8019528:	440b      	add	r3, r1
 801952a:	781b      	ldrb	r3, [r3, #0]
 801952c:	f003 0308 	and.w	r3, r3, #8
 8019530:	2b00      	cmp	r3, #0
 8019532:	d138      	bne.n	80195a6 <MAP_moveNextBlock_acc+0xb6e>
					((en_Head == EAST) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 8019534:	4b2d      	ldr	r3, [pc, #180]	@ (80195ec <MAP_moveNextBlock_acc+0xbb4>)
 8019536:	781b      	ldrb	r3, [r3, #0]
				}else if(((en_Head == NORTH) && ((g_SysMap[my][mx] & 0x08) != 0)) ||		// 北を向いていて西に壁がある
 8019538:	2b01      	cmp	r3, #1
 801953a:	d10e      	bne.n	801955a <MAP_moveNextBlock_acc+0xb22>
					((en_Head == EAST) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 801953c:	4b2c      	ldr	r3, [pc, #176]	@ (80195f0 <MAP_moveNextBlock_acc+0xbb8>)
 801953e:	781b      	ldrb	r3, [r3, #0]
 8019540:	4618      	mov	r0, r3
 8019542:	4b2c      	ldr	r3, [pc, #176]	@ (80195f4 <MAP_moveNextBlock_acc+0xbbc>)
 8019544:	781b      	ldrb	r3, [r3, #0]
 8019546:	4619      	mov	r1, r3
 8019548:	4a2b      	ldr	r2, [pc, #172]	@ (80195f8 <MAP_moveNextBlock_acc+0xbc0>)
 801954a:	0143      	lsls	r3, r0, #5
 801954c:	4413      	add	r3, r2
 801954e:	440b      	add	r3, r1
 8019550:	781b      	ldrb	r3, [r3, #0]
 8019552:	f003 0301 	and.w	r3, r3, #1
 8019556:	2b00      	cmp	r3, #0
 8019558:	d125      	bne.n	80195a6 <MAP_moveNextBlock_acc+0xb6e>
					((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 801955a:	4b24      	ldr	r3, [pc, #144]	@ (80195ec <MAP_moveNextBlock_acc+0xbb4>)
 801955c:	781b      	ldrb	r3, [r3, #0]
					((en_Head == EAST) && ((g_SysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 801955e:	2b02      	cmp	r3, #2
 8019560:	d10e      	bne.n	8019580 <MAP_moveNextBlock_acc+0xb48>
					((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 8019562:	4b23      	ldr	r3, [pc, #140]	@ (80195f0 <MAP_moveNextBlock_acc+0xbb8>)
 8019564:	781b      	ldrb	r3, [r3, #0]
 8019566:	4618      	mov	r0, r3
 8019568:	4b22      	ldr	r3, [pc, #136]	@ (80195f4 <MAP_moveNextBlock_acc+0xbbc>)
 801956a:	781b      	ldrb	r3, [r3, #0]
 801956c:	4619      	mov	r1, r3
 801956e:	4a22      	ldr	r2, [pc, #136]	@ (80195f8 <MAP_moveNextBlock_acc+0xbc0>)
 8019570:	0143      	lsls	r3, r0, #5
 8019572:	4413      	add	r3, r2
 8019574:	440b      	add	r3, r1
 8019576:	781b      	ldrb	r3, [r3, #0]
 8019578:	f003 0302 	and.w	r3, r3, #2
 801957c:	2b00      	cmp	r3, #0
 801957e:	d112      	bne.n	80195a6 <MAP_moveNextBlock_acc+0xb6e>
					((en_Head == WEST) && ((g_SysMap[my][mx] & 0x04) != 0)) 			// 西を向いていて南に壁がある
 8019580:	4b1a      	ldr	r3, [pc, #104]	@ (80195ec <MAP_moveNextBlock_acc+0xbb4>)
 8019582:	781b      	ldrb	r3, [r3, #0]
					((en_Head == SOUTH) && ((g_SysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 8019584:	2b03      	cmp	r3, #3
 8019586:	d11a      	bne.n	80195be <MAP_moveNextBlock_acc+0xb86>
					((en_Head == WEST) && ((g_SysMap[my][mx] & 0x04) != 0)) 			// 西を向いていて南に壁がある
 8019588:	4b19      	ldr	r3, [pc, #100]	@ (80195f0 <MAP_moveNextBlock_acc+0xbb8>)
 801958a:	781b      	ldrb	r3, [r3, #0]
 801958c:	4618      	mov	r0, r3
 801958e:	4b19      	ldr	r3, [pc, #100]	@ (80195f4 <MAP_moveNextBlock_acc+0xbbc>)
 8019590:	781b      	ldrb	r3, [r3, #0]
 8019592:	4619      	mov	r1, r3
 8019594:	4a18      	ldr	r2, [pc, #96]	@ (80195f8 <MAP_moveNextBlock_acc+0xbc0>)
 8019596:	0143      	lsls	r3, r0, #5
 8019598:	4413      	add	r3, r2
 801959a:	440b      	add	r3, r1
 801959c:	781b      	ldrb	r3, [r3, #0]
 801959e:	f003 0304 	and.w	r3, r3, #4
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d00b      	beq.n	80195be <MAP_moveNextBlock_acc+0xb86>
					MOT_turn(MOT_L90);									// 右90度旋回
 80195a6:	2001      	movs	r0, #1
 80195a8:	f7f6 fb12 	bl	800fbd0 <MOT_turn>
					LL_mDelay(100);
 80195ac:	2064      	movs	r0, #100	@ 0x64
 80195ae:	f002 fac9 	bl	801bb44 <LL_mDelay>
					DIST_Front_Wall_correction();
 80195b2:	f7f9 f9b9 	bl	8012928 <DIST_Front_Wall_correction>
					MOT_turn(MOT_L90);									// 右90度旋回
 80195b6:	2001      	movs	r0, #1
 80195b8:	f7f6 fb0a 	bl	800fbd0 <MOT_turn>
 80195bc:	e002      	b.n	80195c4 <MAP_moveNextBlock_acc+0xb8c>
					MOT_turn(MOT_R180);
 80195be:	2002      	movs	r0, #2
 80195c0:	f7f6 fb06 	bl	800fbd0 <MOT_turn>
				*p_type = TRUE;								// 次は半区間＋バック分進める
 80195c4:	683b      	ldr	r3, [r7, #0]
 80195c6:	2201      	movs	r2, #1
 80195c8:	701a      	strb	r2, [r3, #0]
		break;
 80195ca:	e000      	b.n	80195ce <MAP_moveNextBlock_acc+0xb96>

	default:
		break;
 80195cc:	bf00      	nop
	}

	/* 進行方向更新 */
//	en_Head = (enMAP_HEAD_DIR)( (en_Head + en_head) & (MAP_HEAD_DIR_MAX-1) );
	en_Head = (enMAP_HEAD_DIR)(((uint8_t)en_Head + (uint8_t)en_head) & (MAP_HEAD_DIR_MAX - 1));
 80195ce:	4b07      	ldr	r3, [pc, #28]	@ (80195ec <MAP_moveNextBlock_acc+0xbb4>)
 80195d0:	781a      	ldrb	r2, [r3, #0]
 80195d2:	79fb      	ldrb	r3, [r7, #7]
 80195d4:	4413      	add	r3, r2
 80195d6:	b2db      	uxtb	r3, r3
 80195d8:	f003 0303 	and.w	r3, r3, #3
 80195dc:	b2da      	uxtb	r2, r3
 80195de:	4b03      	ldr	r3, [pc, #12]	@ (80195ec <MAP_moveNextBlock_acc+0xbb4>)
 80195e0:	701a      	strb	r2, [r3, #0]
}
 80195e2:	bf00      	nop
 80195e4:	3708      	adds	r7, #8
 80195e6:	46bd      	mov	sp, r7
 80195e8:	bd80      	pop	{r7, pc}
 80195ea:	bf00      	nop
 80195ec:	2001ad8a 	.word	0x2001ad8a
 80195f0:	2001ad8b 	.word	0x2001ad8b
 80195f4:	2001ad8c 	.word	0x2001ad8c
 80195f8:	2001b5a0 	.word	0x2001b5a0

080195fc <MAP_searchGoal>:
void MAP_searchGoal(
	uint8_t 			uc_trgX, 		///< [in] 目標x座標
	uint8_t 			uc_trgY, 		///< [in] 目標y座標 
	enMAP_ACT_MODE 	en_type, 		///< [in] 探索方法
	enSEARCH_MODE	en_search 		///< [in] 探索方法
){
 80195fc:	b590      	push	{r4, r7, lr}
 80195fe:	b087      	sub	sp, #28
 8019600:	af02      	add	r7, sp, #8
 8019602:	4604      	mov	r4, r0
 8019604:	4608      	mov	r0, r1
 8019606:	4611      	mov	r1, r2
 8019608:	461a      	mov	r2, r3
 801960a:	4623      	mov	r3, r4
 801960c:	71fb      	strb	r3, [r7, #7]
 801960e:	4603      	mov	r3, r0
 8019610:	71bb      	strb	r3, [r7, #6]
 8019612:	460b      	mov	r3, r1
 8019614:	717b      	strb	r3, [r7, #5]
 8019616:	4613      	mov	r3, r2
 8019618:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_head = NORTH;
 801961a:	2300      	movs	r3, #0
 801961c:	72fb      	strb	r3, [r7, #11]
	bool		bl_type = TRUE;			// 現在位置、FALSE: １区間前進状態、TURE:半区間前進状態
 801961e:	2301      	movs	r3, #1
 8019620:	72bb      	strb	r3, [r7, #10]
	uint8_t uc_goalX;
	uint8_t uc_goalY;
	uint8_t uc_staX;
	uint8_t uc_staY;
	
	SearchFlag = TRUE;
 8019622:	4b95      	ldr	r3, [pc, #596]	@ (8019878 <MAP_searchGoal+0x27c>)
 8019624:	2201      	movs	r2, #1
 8019626:	701a      	strb	r2, [r3, #0]

	if (en_search == SEARCH_RETURN){
 8019628:	793b      	ldrb	r3, [r7, #4]
 801962a:	2b03      	cmp	r3, #3
 801962c:	d122      	bne.n	8019674 <MAP_searchGoal+0x78>
		uc_goalX = uc_trgX;
 801962e:	79fb      	ldrb	r3, [r7, #7]
 8019630:	73fb      	strb	r3, [r7, #15]
		uc_goalY = uc_trgY;
 8019632:	79bb      	ldrb	r3, [r7, #6]
 8019634:	733b      	strb	r3, [r7, #12]
		uc_staX = mx;
 8019636:	4b91      	ldr	r3, [pc, #580]	@ (801987c <MAP_searchGoal+0x280>)
 8019638:	781b      	ldrb	r3, [r3, #0]
 801963a:	73bb      	strb	r3, [r7, #14]
		uc_staY = my;
 801963c:	4b90      	ldr	r3, [pc, #576]	@ (8019880 <MAP_searchGoal+0x284>)
 801963e:	781b      	ldrb	r3, [r3, #0]
 8019640:	737b      	strb	r3, [r7, #13]
//		printf("mx%d,my%d\n", mx, my);
//		MAP_makeContourMap(uc_trgX, uc_trgY, en_type);
		MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 8019642:	797a      	ldrb	r2, [r7, #5]
 8019644:	79b9      	ldrb	r1, [r7, #6]
 8019646:	79fb      	ldrb	r3, [r7, #7]
 8019648:	4618      	mov	r0, r3
 801964a:	f7fd fe93 	bl	8017374 <MAP_makeContourMap_queue>
		MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 801964e:	4b8d      	ldr	r3, [pc, #564]	@ (8019884 <MAP_searchGoal+0x288>)
 8019650:	781a      	ldrb	r2, [r3, #0]
 8019652:	7bfc      	ldrb	r4, [r7, #15]
 8019654:	7b79      	ldrb	r1, [r7, #13]
 8019656:	7bb8      	ldrb	r0, [r7, #14]
 8019658:	f107 0309 	add.w	r3, r7, #9
 801965c:	9301      	str	r3, [sp, #4]
 801965e:	7bfb      	ldrb	r3, [r7, #15]
 8019660:	9300      	str	r3, [sp, #0]
 8019662:	4623      	mov	r3, r4
 8019664:	f7fc fd8a 	bl	801617c <MAP_searchCmdList>
		uc_trgX = Return_X;
 8019668:	4b87      	ldr	r3, [pc, #540]	@ (8019888 <MAP_searchGoal+0x28c>)
 801966a:	781b      	ldrb	r3, [r3, #0]
 801966c:	71fb      	strb	r3, [r7, #7]
		uc_trgY = Return_Y;
 801966e:	4b87      	ldr	r3, [pc, #540]	@ (801988c <MAP_searchGoal+0x290>)
 8019670:	781b      	ldrb	r3, [r3, #0]
 8019672:	71bb      	strb	r3, [r7, #6]
//		MAP_showcountLog();
	}

//	SYS_setDisable( SYS_MODE );				// モード変更禁止

	MOT_setTrgtSpeed(SEARCH_SPEED);		// 目標速度
 8019674:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 8019890 <MAP_searchGoal+0x294>
 8019678:	f7f7 fdae 	bl	80111d8 <MOT_setTrgtSpeed>
	MOT_setNowSpeed( 0.0f );
 801967c:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 8019894 <MAP_searchGoal+0x298>
 8019680:	f7f7 fdc0 	bl	8011204 <MOT_setNowSpeed>
	f_MoveBackDist = 0;
 8019684:	4b84      	ldr	r3, [pc, #528]	@ (8019898 <MAP_searchGoal+0x29c>)
 8019686:	f04f 0200 	mov.w	r2, #0
 801968a:	601a      	str	r2, [r3, #0]
	uc_SlaCnt = 0;
 801968c:	4b83      	ldr	r3, [pc, #524]	@ (801989c <MAP_searchGoal+0x2a0>)
 801968e:	2200      	movs	r2, #0
 8019690:	701a      	strb	r2, [r3, #0]
	if(uc_trgX == GOAL_MAP_X && uc_trgY == GOAL_MAP_Y){
 8019692:	4b83      	ldr	r3, [pc, #524]	@ (80198a0 <MAP_searchGoal+0x2a4>)
 8019694:	781b      	ldrb	r3, [r3, #0]
 8019696:	79fa      	ldrb	r2, [r7, #7]
 8019698:	429a      	cmp	r2, r3
 801969a:	d107      	bne.n	80196ac <MAP_searchGoal+0xb0>
 801969c:	4b81      	ldr	r3, [pc, #516]	@ (80198a4 <MAP_searchGoal+0x2a8>)
 801969e:	781b      	ldrb	r3, [r3, #0]
 80196a0:	79ba      	ldrb	r2, [r7, #6]
 80196a2:	429a      	cmp	r2, r3
 80196a4:	d102      	bne.n	80196ac <MAP_searchGoal+0xb0>
		f_MoveBackDist = MOVE_BACK_DIST;
 80196a6:	4b7c      	ldr	r3, [pc, #496]	@ (8019898 <MAP_searchGoal+0x29c>)
 80196a8:	4a7f      	ldr	r2, [pc, #508]	@ (80198a8 <MAP_searchGoal+0x2ac>)
 80196aa:	601a      	str	r2, [r3, #0]
	}
	
	log_flag_on();	//ログ関数スタート（大会時削除）
 80196ac:	f7f0 fc16 	bl	8009edc <log_flag_on>
	
	/* 迷路探索 */
	while(1){
		MAP_refMousePos( en_Head );								// 座標更新
 80196b0:	4b74      	ldr	r3, [pc, #464]	@ (8019884 <MAP_searchGoal+0x288>)
 80196b2:	781b      	ldrb	r3, [r3, #0]
 80196b4:	4618      	mov	r0, r3
 80196b6:	f7fe fb39 	bl	8017d2c <MAP_refMousePos>
//		MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
		
		/* 超信地旋回探索 */
		if( SEARCH_TURN == en_search ){
 80196ba:	793b      	ldrb	r3, [r7, #4]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d132      	bne.n	8019726 <MAP_searchGoal+0x12a>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 80196c0:	797a      	ldrb	r2, [r7, #5]
 80196c2:	79b9      	ldrb	r1, [r7, #6]
 80196c4:	79fb      	ldrb	r3, [r7, #7]
 80196c6:	4618      	mov	r0, r3
 80196c8:	f7fd fe54 	bl	8017374 <MAP_makeContourMap_queue>
			if( TRUE == bl_type ){
 80196cc:	7abb      	ldrb	r3, [r7, #10]
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d00c      	beq.n	80196ec <MAP_searchGoal+0xf0>
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 80196d2:	4b71      	ldr	r3, [pc, #452]	@ (8019898 <MAP_searchGoal+0x29c>)
 80196d4:	edd3 7a00 	vldr	s15, [r3]
 80196d8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80196dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80196e0:	eddf 0a6b 	vldr	s1, [pc, #428]	@ 8019890 <MAP_searchGoal+0x294>
 80196e4:	eeb0 0a67 	vmov.f32	s0, s15
 80196e8:	f7f6 f848 	bl	800f77c <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();												// 壁データから迷路データを作成			← ここでデータ作成をミスっている
 80196ec:	f7fd fc1a 	bl	8016f24 <MAP_makeMapData>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);						// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 80196f0:	f107 030b 	add.w	r3, r7, #11
 80196f4:	4619      	mov	r1, r3
 80196f6:	2000      	movs	r0, #0
 80196f8:	f7fe fa0c 	bl	8017b14 <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 80196fc:	4b5f      	ldr	r3, [pc, #380]	@ (801987c <MAP_searchGoal+0x280>)
 80196fe:	781b      	ldrb	r3, [r3, #0]
 8019700:	79fa      	ldrb	r2, [r7, #7]
 8019702:	429a      	cmp	r2, r3
 8019704:	d107      	bne.n	8019716 <MAP_searchGoal+0x11a>
 8019706:	4b5e      	ldr	r3, [pc, #376]	@ (8019880 <MAP_searchGoal+0x284>)
 8019708:	781b      	ldrb	r3, [r3, #0]
 801970a:	79ba      	ldrb	r2, [r7, #6]
 801970c:	429a      	cmp	r2, r3
 801970e:	d102      	bne.n	8019716 <MAP_searchGoal+0x11a>
				MAP_actGoal();										// ゴール時の動作
 8019710:	f7fe feca 	bl	80184a8 <MAP_actGoal>
				break;
 8019714:	e0a4      	b.n	8019860 <MAP_searchGoal+0x264>
			}
			else{
				MAP_moveNextBlock(en_head, &bl_type);				// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 8019716:	7afb      	ldrb	r3, [r7, #11]
 8019718:	f107 020a 	add.w	r2, r7, #10
 801971c:	4611      	mov	r1, r2
 801971e:	4618      	mov	r0, r3
 8019720:	f7fe fb40 	bl	8017da4 <MAP_moveNextBlock>
 8019724:	e081      	b.n	801982a <MAP_searchGoal+0x22e>
			}
		}
		/* スラローム探索 */
		else if( SEARCH_SLA == en_search ){
 8019726:	793b      	ldrb	r3, [r7, #4]
 8019728:	2b01      	cmp	r3, #1
 801972a:	d132      	bne.n	8019792 <MAP_searchGoal+0x196>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 801972c:	797a      	ldrb	r2, [r7, #5]
 801972e:	79b9      	ldrb	r1, [r7, #6]
 8019730:	79fb      	ldrb	r3, [r7, #7]
 8019732:	4618      	mov	r0, r3
 8019734:	f7fd fe1e 	bl	8017374 <MAP_makeContourMap_queue>
			if( TRUE == bl_type ){
 8019738:	7abb      	ldrb	r3, [r7, #10]
 801973a:	2b00      	cmp	r3, #0
 801973c:	d00c      	beq.n	8019758 <MAP_searchGoal+0x15c>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 801973e:	4b56      	ldr	r3, [pc, #344]	@ (8019898 <MAP_searchGoal+0x29c>)
 8019740:	edd3 7a00 	vldr	s15, [r3]
 8019744:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8019748:	ee77 7a87 	vadd.f32	s15, s15, s14
 801974c:	eddf 0a50 	vldr	s1, [pc, #320]	@ 8019890 <MAP_searchGoal+0x294>
 8019750:	eeb0 0a67 	vmov.f32	s0, s15
 8019754:	f7f6 f812 	bl	800f77c <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();		// 壁データから迷路データを作成
 8019758:	f7fd fbe4 	bl	8016f24 <MAP_makeMapData>
			
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);				// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 801975c:	f107 030b 	add.w	r3, r7, #11
 8019760:	4619      	mov	r1, r3
 8019762:	2000      	movs	r0, #0
 8019764:	f7fe f9d6 	bl	8017b14 <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 8019768:	4b44      	ldr	r3, [pc, #272]	@ (801987c <MAP_searchGoal+0x280>)
 801976a:	781b      	ldrb	r3, [r3, #0]
 801976c:	79fa      	ldrb	r2, [r7, #7]
 801976e:	429a      	cmp	r2, r3
 8019770:	d107      	bne.n	8019782 <MAP_searchGoal+0x186>
 8019772:	4b43      	ldr	r3, [pc, #268]	@ (8019880 <MAP_searchGoal+0x284>)
 8019774:	781b      	ldrb	r3, [r3, #0]
 8019776:	79ba      	ldrb	r2, [r7, #6]
 8019778:	429a      	cmp	r2, r3
 801977a:	d102      	bne.n	8019782 <MAP_searchGoal+0x186>
				MAP_actGoal();										// ゴール時の動作
 801977c:	f7fe fe94 	bl	80184a8 <MAP_actGoal>
				break;
 8019780:	e06e      	b.n	8019860 <MAP_searchGoal+0x264>
			}
			else{
				MAP_moveNextBlock_Sla(en_head, &bl_type, FALSE );	// 次の区画へ移動						← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 8019782:	7afb      	ldrb	r3, [r7, #11]
 8019784:	f107 010a 	add.w	r1, r7, #10
 8019788:	2200      	movs	r2, #0
 801978a:	4618      	mov	r0, r3
 801978c:	f7fe fbbc 	bl	8017f08 <MAP_moveNextBlock_Sla>
 8019790:	e04b      	b.n	801982a <MAP_searchGoal+0x22e>
//				MAP_moveNextBlock_acc(en_head, &bl_type);
			}
		}
		/* 帰還探索 */
		else if (SEARCH_RETURN == en_search) {
 8019792:	793b      	ldrb	r3, [r7, #4]
 8019794:	2b03      	cmp	r3, #3
 8019796:	d148      	bne.n	801982a <MAP_searchGoal+0x22e>
			
			if( TRUE == bl_type ){
 8019798:	7abb      	ldrb	r3, [r7, #10]
 801979a:	2b00      	cmp	r3, #0
 801979c:	d00c      	beq.n	80197b8 <MAP_searchGoal+0x1bc>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 801979e:	4b3e      	ldr	r3, [pc, #248]	@ (8019898 <MAP_searchGoal+0x29c>)
 80197a0:	edd3 7a00 	vldr	s15, [r3]
 80197a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80197a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80197ac:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8019890 <MAP_searchGoal+0x294>
 80197b0:	eeb0 0a67 	vmov.f32	s0, s15
 80197b4:	f7f5 ffe2 	bl	800f77c <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();		// 壁データから迷路データを作成
 80197b8:	f7fd fbb4 	bl	8016f24 <MAP_makeMapData>
						
			MAP_makeReturnContourMap(uc_staX,uc_staY);
 80197bc:	7b7a      	ldrb	r2, [r7, #13]
 80197be:	7bbb      	ldrb	r3, [r7, #14]
 80197c0:	4611      	mov	r1, r2
 80197c2:	4618      	mov	r0, r3
 80197c4:	f7fe ff00 	bl	80185c8 <MAP_makeReturnContourMap>
			MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 80197c8:	4b2e      	ldr	r3, [pc, #184]	@ (8019884 <MAP_searchGoal+0x288>)
 80197ca:	781a      	ldrb	r2, [r3, #0]
 80197cc:	7bfc      	ldrb	r4, [r7, #15]
 80197ce:	7b79      	ldrb	r1, [r7, #13]
 80197d0:	7bb8      	ldrb	r0, [r7, #14]
 80197d2:	f107 0309 	add.w	r3, r7, #9
 80197d6:	9301      	str	r3, [sp, #4]
 80197d8:	7bfb      	ldrb	r3, [r7, #15]
 80197da:	9300      	str	r3, [sp, #0]
 80197dc:	4623      	mov	r3, r4
 80197de:	f7fc fccd 	bl	801617c <MAP_searchCmdList>
			uc_trgX = Return_X;
 80197e2:	4b29      	ldr	r3, [pc, #164]	@ (8019888 <MAP_searchGoal+0x28c>)
 80197e4:	781b      	ldrb	r3, [r3, #0]
 80197e6:	71fb      	strb	r3, [r7, #7]
			uc_trgY = Return_Y;
 80197e8:	4b28      	ldr	r3, [pc, #160]	@ (801988c <MAP_searchGoal+0x290>)
 80197ea:	781b      	ldrb	r3, [r3, #0]
 80197ec:	71bb      	strb	r3, [r7, #6]
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 80197ee:	797a      	ldrb	r2, [r7, #5]
 80197f0:	79b9      	ldrb	r1, [r7, #6]
 80197f2:	79fb      	ldrb	r3, [r7, #7]
 80197f4:	4618      	mov	r0, r3
 80197f6:	f7fd fdbd 	bl	8017374 <MAP_makeContourMap_queue>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);	
 80197fa:	f107 030b 	add.w	r3, r7, #11
 80197fe:	4619      	mov	r1, r3
 8019800:	2000      	movs	r0, #0
 8019802:	f7fe f987 	bl	8017b14 <MAP_calcMouseDir>
			/* 次の区画へ移動 */
//			if ((us_Cmap[my][mx] == 0)||((g_SysMap[uc_trgY][uc_trgX]&0xf0) == 0xf0)) {
			if ((mx == 0)&&(my == 0)){
 8019806:	4b1d      	ldr	r3, [pc, #116]	@ (801987c <MAP_searchGoal+0x280>)
 8019808:	781b      	ldrb	r3, [r3, #0]
 801980a:	2b00      	cmp	r3, #0
 801980c:	d106      	bne.n	801981c <MAP_searchGoal+0x220>
 801980e:	4b1c      	ldr	r3, [pc, #112]	@ (8019880 <MAP_searchGoal+0x284>)
 8019810:	781b      	ldrb	r3, [r3, #0]
 8019812:	2b00      	cmp	r3, #0
 8019814:	d102      	bne.n	801981c <MAP_searchGoal+0x220>
				MAP_actGoal();
 8019816:	f7fe fe47 	bl	80184a8 <MAP_actGoal>
				break;
 801981a:	e021      	b.n	8019860 <MAP_searchGoal+0x264>
			}
//			}
			else {
				MAP_moveNextBlock_Sla(en_head, &bl_type, FALSE);	// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 801981c:	7afb      	ldrb	r3, [r7, #11]
 801981e:	f107 010a 	add.w	r1, r7, #10
 8019822:	2200      	movs	r2, #0
 8019824:	4618      	mov	r0, r3
 8019826:	f7fe fb6f 	bl	8017f08 <MAP_moveNextBlock_Sla>
//			LED_count(uc_trgY);
		}

		
		/* 途中で制御不能になった */
		if( SYS_isOutOfCtrl() == TRUE ){
 801982a:	f7ef ff59 	bl	80096e0 <SYS_isOutOfCtrl>
 801982e:	4603      	mov	r3, r0
 8019830:	2b00      	cmp	r3, #0
 8019832:	f43f af3d 	beq.w	80196b0 <MAP_searchGoal+0xb4>
			CTRL_stop();
 8019836:	f7ec fdf5 	bl	8006424 <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 801983a:	2000      	movs	r0, #0
 801983c:	f7ef ff82 	bl	8009744 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 8019840:	2001      	movs	r0, #1
 8019842:	f7ef ff7f 	bl	8009744 <DCM_brakeMot>
			
			/* 迷路関連を初期化 */
			en_Head		= NORTH;
 8019846:	4b0f      	ldr	r3, [pc, #60]	@ (8019884 <MAP_searchGoal+0x288>)
 8019848:	2200      	movs	r2, #0
 801984a:	701a      	strb	r2, [r3, #0]
			mx			= 0;
 801984c:	4b0b      	ldr	r3, [pc, #44]	@ (801987c <MAP_searchGoal+0x280>)
 801984e:	2200      	movs	r2, #0
 8019850:	701a      	strb	r2, [r3, #0]
			my			= 0;
 8019852:	4b0b      	ldr	r3, [pc, #44]	@ (8019880 <MAP_searchGoal+0x284>)
 8019854:	2200      	movs	r2, #0
 8019856:	701a      	strb	r2, [r3, #0]
			f_MoveBackDist = 0;
 8019858:	4b0f      	ldr	r3, [pc, #60]	@ (8019898 <MAP_searchGoal+0x29c>)
 801985a:	f04f 0200 	mov.w	r2, #0
 801985e:	601a      	str	r2, [r3, #0]
			
			// DCMCは下位モジュールで既にクリアと緊急停止を行っている。
			break;
		}
	}
	SearchFlag = FALSE;
 8019860:	4b05      	ldr	r3, [pc, #20]	@ (8019878 <MAP_searchGoal+0x27c>)
 8019862:	2200      	movs	r2, #0
 8019864:	701a      	strb	r2, [r3, #0]
	LL_mDelay(1000);
 8019866:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801986a:	f002 f96b 	bl	801bb44 <LL_mDelay>
//	SYS_setEnable( SYS_MODE );				// モード変更有効
}
 801986e:	bf00      	nop
 8019870:	3714      	adds	r7, #20
 8019872:	46bd      	mov	sp, r7
 8019874:	bd90      	pop	{r4, r7, pc}
 8019876:	bf00      	nop
 8019878:	2001bda0 	.word	0x2001bda0
 801987c:	2001ad8c 	.word	0x2001ad8c
 8019880:	2001ad8b 	.word	0x2001ad8b
 8019884:	2001ad8a 	.word	0x2001ad8a
 8019888:	2001ad9c 	.word	0x2001ad9c
 801988c:	2001ad9d 	.word	0x2001ad9d
 8019890:	3e99999a 	.word	0x3e99999a
 8019894:	00000000 	.word	0x00000000
 8019898:	2001ad90 	.word	0x2001ad90
 801989c:	2001ad94 	.word	0x2001ad94
 80198a0:	2001ad95 	.word	0x2001ad95
 80198a4:	2001ad96 	.word	0x2001ad96
 80198a8:	3e5c28f6 	.word	0x3e5c28f6

080198ac <MAP_searchGoalKnown>:
void MAP_searchGoalKnown(
	uint8_t 			uc_trgX, 		///< [in] 目標x座標
	uint8_t 			uc_trgY, 		///< [in] 目標y座標 
	enMAP_ACT_MODE 	en_type, 		///< [in] 探索方法
	enSEARCH_MODE	en_search 		///< [in] 探索方法
){
 80198ac:	b590      	push	{r4, r7, lr}
 80198ae:	b087      	sub	sp, #28
 80198b0:	af02      	add	r7, sp, #8
 80198b2:	4604      	mov	r4, r0
 80198b4:	4608      	mov	r0, r1
 80198b6:	4611      	mov	r1, r2
 80198b8:	461a      	mov	r2, r3
 80198ba:	4623      	mov	r3, r4
 80198bc:	71fb      	strb	r3, [r7, #7]
 80198be:	4603      	mov	r3, r0
 80198c0:	71bb      	strb	r3, [r7, #6]
 80198c2:	460b      	mov	r3, r1
 80198c4:	717b      	strb	r3, [r7, #5]
 80198c6:	4613      	mov	r3, r2
 80198c8:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_head = NORTH;
 80198ca:	2300      	movs	r3, #0
 80198cc:	72fb      	strb	r3, [r7, #11]
	bool		bl_type = TRUE;			// 現在位置、FALSE: １区間前進状態、TURE:半区間前進状態
 80198ce:	2301      	movs	r3, #1
 80198d0:	72bb      	strb	r3, [r7, #10]
	uint8_t uc_goalX;
	uint8_t uc_goalY;
	uint8_t uc_staX;
	uint8_t uc_staY;
	
	SearchFlag = TRUE;
 80198d2:	4b85      	ldr	r3, [pc, #532]	@ (8019ae8 <MAP_searchGoalKnown+0x23c>)
 80198d4:	2201      	movs	r2, #1
 80198d6:	701a      	strb	r2, [r3, #0]

	if (en_search == SEARCH_RETURN){
 80198d8:	793b      	ldrb	r3, [r7, #4]
 80198da:	2b03      	cmp	r3, #3
 80198dc:	d122      	bne.n	8019924 <MAP_searchGoalKnown+0x78>
		uc_goalX = uc_trgX;
 80198de:	79fb      	ldrb	r3, [r7, #7]
 80198e0:	73fb      	strb	r3, [r7, #15]
		uc_goalY = uc_trgY;
 80198e2:	79bb      	ldrb	r3, [r7, #6]
 80198e4:	733b      	strb	r3, [r7, #12]
		uc_staX = mx;
 80198e6:	4b81      	ldr	r3, [pc, #516]	@ (8019aec <MAP_searchGoalKnown+0x240>)
 80198e8:	781b      	ldrb	r3, [r3, #0]
 80198ea:	73bb      	strb	r3, [r7, #14]
		uc_staY = my;
 80198ec:	4b80      	ldr	r3, [pc, #512]	@ (8019af0 <MAP_searchGoalKnown+0x244>)
 80198ee:	781b      	ldrb	r3, [r3, #0]
 80198f0:	737b      	strb	r3, [r7, #13]
//		printf("mx%d,my%d\n", mx, my);
//		MAP_makeContourMap(uc_trgX, uc_trgY, en_type);
		MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 80198f2:	797a      	ldrb	r2, [r7, #5]
 80198f4:	79b9      	ldrb	r1, [r7, #6]
 80198f6:	79fb      	ldrb	r3, [r7, #7]
 80198f8:	4618      	mov	r0, r3
 80198fa:	f7fd fd3b 	bl	8017374 <MAP_makeContourMap_queue>
		MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 80198fe:	4b7d      	ldr	r3, [pc, #500]	@ (8019af4 <MAP_searchGoalKnown+0x248>)
 8019900:	781a      	ldrb	r2, [r3, #0]
 8019902:	7bfc      	ldrb	r4, [r7, #15]
 8019904:	7b79      	ldrb	r1, [r7, #13]
 8019906:	7bb8      	ldrb	r0, [r7, #14]
 8019908:	f107 0309 	add.w	r3, r7, #9
 801990c:	9301      	str	r3, [sp, #4]
 801990e:	7bfb      	ldrb	r3, [r7, #15]
 8019910:	9300      	str	r3, [sp, #0]
 8019912:	4623      	mov	r3, r4
 8019914:	f7fc fc32 	bl	801617c <MAP_searchCmdList>
		uc_trgX = Return_X;
 8019918:	4b77      	ldr	r3, [pc, #476]	@ (8019af8 <MAP_searchGoalKnown+0x24c>)
 801991a:	781b      	ldrb	r3, [r3, #0]
 801991c:	71fb      	strb	r3, [r7, #7]
		uc_trgY = Return_Y;
 801991e:	4b77      	ldr	r3, [pc, #476]	@ (8019afc <MAP_searchGoalKnown+0x250>)
 8019920:	781b      	ldrb	r3, [r3, #0]
 8019922:	71bb      	strb	r3, [r7, #6]
//		MAP_showcountLog();
	}

//	SYS_setDisable( SYS_MODE );				// モード変更禁止

	MOT_setTrgtSpeed(SEARCH_SPEED);		// 目標速度
 8019924:	ed9f 0a76 	vldr	s0, [pc, #472]	@ 8019b00 <MAP_searchGoalKnown+0x254>
 8019928:	f7f7 fc56 	bl	80111d8 <MOT_setTrgtSpeed>
	MOT_setNowSpeed( 0.0f );
 801992c:	ed9f 0a75 	vldr	s0, [pc, #468]	@ 8019b04 <MAP_searchGoalKnown+0x258>
 8019930:	f7f7 fc68 	bl	8011204 <MOT_setNowSpeed>
	f_MoveBackDist = 0;
 8019934:	4b74      	ldr	r3, [pc, #464]	@ (8019b08 <MAP_searchGoalKnown+0x25c>)
 8019936:	f04f 0200 	mov.w	r2, #0
 801993a:	601a      	str	r2, [r3, #0]
	uc_SlaCnt = 0;
 801993c:	4b73      	ldr	r3, [pc, #460]	@ (8019b0c <MAP_searchGoalKnown+0x260>)
 801993e:	2200      	movs	r2, #0
 8019940:	701a      	strb	r2, [r3, #0]
	if(uc_trgX == GOAL_MAP_X && uc_trgY == GOAL_MAP_Y){
 8019942:	4b73      	ldr	r3, [pc, #460]	@ (8019b10 <MAP_searchGoalKnown+0x264>)
 8019944:	781b      	ldrb	r3, [r3, #0]
 8019946:	79fa      	ldrb	r2, [r7, #7]
 8019948:	429a      	cmp	r2, r3
 801994a:	d107      	bne.n	801995c <MAP_searchGoalKnown+0xb0>
 801994c:	4b71      	ldr	r3, [pc, #452]	@ (8019b14 <MAP_searchGoalKnown+0x268>)
 801994e:	781b      	ldrb	r3, [r3, #0]
 8019950:	79ba      	ldrb	r2, [r7, #6]
 8019952:	429a      	cmp	r2, r3
 8019954:	d102      	bne.n	801995c <MAP_searchGoalKnown+0xb0>
		f_MoveBackDist = MOVE_BACK_DIST;
 8019956:	4b6c      	ldr	r3, [pc, #432]	@ (8019b08 <MAP_searchGoalKnown+0x25c>)
 8019958:	4a6f      	ldr	r2, [pc, #444]	@ (8019b18 <MAP_searchGoalKnown+0x26c>)
 801995a:	601a      	str	r2, [r3, #0]
	}
	
	log_flag_on();	//ログ関数スタート（大会時削除）
 801995c:	f7f0 fabe 	bl	8009edc <log_flag_on>
	
	/* 迷路探索 */
	while(1){
		MAP_refMousePos( en_Head );								// 座標更新
 8019960:	4b64      	ldr	r3, [pc, #400]	@ (8019af4 <MAP_searchGoalKnown+0x248>)
 8019962:	781b      	ldrb	r3, [r3, #0]
 8019964:	4618      	mov	r0, r3
 8019966:	f7fe f9e1 	bl	8017d2c <MAP_refMousePos>
//		MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
		
		/* 超信地旋回探索 */
		if( SEARCH_TURN == en_search ){
 801996a:	793b      	ldrb	r3, [r7, #4]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d132      	bne.n	80199d6 <MAP_searchGoalKnown+0x12a>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
//			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
			if( TRUE == bl_type ){
 8019970:	7abb      	ldrb	r3, [r7, #10]
 8019972:	2b00      	cmp	r3, #0
 8019974:	d00c      	beq.n	8019990 <MAP_searchGoalKnown+0xe4>
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 8019976:	4b64      	ldr	r3, [pc, #400]	@ (8019b08 <MAP_searchGoalKnown+0x25c>)
 8019978:	edd3 7a00 	vldr	s15, [r3]
 801997c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8019980:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019984:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 8019b00 <MAP_searchGoalKnown+0x254>
 8019988:	eeb0 0a67 	vmov.f32	s0, s15
 801998c:	f7f5 fef6 	bl	800f77c <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();												// 壁データから迷路データを作成			← ここでデータ作成をミスっている
 8019990:	f7fd fac8 	bl	8016f24 <MAP_makeMapData>
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 8019994:	797a      	ldrb	r2, [r7, #5]
 8019996:	79b9      	ldrb	r1, [r7, #6]
 8019998:	79fb      	ldrb	r3, [r7, #7]
 801999a:	4618      	mov	r0, r3
 801999c:	f7fd fcea 	bl	8017374 <MAP_makeContourMap_queue>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);						// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 80199a0:	f107 030b 	add.w	r3, r7, #11
 80199a4:	4619      	mov	r1, r3
 80199a6:	2000      	movs	r0, #0
 80199a8:	f7fe f8b4 	bl	8017b14 <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 80199ac:	4b4f      	ldr	r3, [pc, #316]	@ (8019aec <MAP_searchGoalKnown+0x240>)
 80199ae:	781b      	ldrb	r3, [r3, #0]
 80199b0:	79fa      	ldrb	r2, [r7, #7]
 80199b2:	429a      	cmp	r2, r3
 80199b4:	d107      	bne.n	80199c6 <MAP_searchGoalKnown+0x11a>
 80199b6:	4b4e      	ldr	r3, [pc, #312]	@ (8019af0 <MAP_searchGoalKnown+0x244>)
 80199b8:	781b      	ldrb	r3, [r3, #0]
 80199ba:	79ba      	ldrb	r2, [r7, #6]
 80199bc:	429a      	cmp	r2, r3
 80199be:	d102      	bne.n	80199c6 <MAP_searchGoalKnown+0x11a>
				MAP_actGoal();										// ゴール時の動作
 80199c0:	f7fe fd72 	bl	80184a8 <MAP_actGoal>
				break;
 80199c4:	e13c      	b.n	8019c40 <MAP_searchGoalKnown+0x394>
			}
			else{
				MAP_moveNextBlock(en_head, &bl_type);				// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 80199c6:	7afb      	ldrb	r3, [r7, #11]
 80199c8:	f107 020a 	add.w	r2, r7, #10
 80199cc:	4611      	mov	r1, r2
 80199ce:	4618      	mov	r0, r3
 80199d0:	f7fe f9e8 	bl	8017da4 <MAP_moveNextBlock>
 80199d4:	e0ab      	b.n	8019b2e <MAP_searchGoalKnown+0x282>
			}
		}
		/* スラローム探索 */
		else if( SEARCH_SLA == en_search ){
 80199d6:	793b      	ldrb	r3, [r7, #4]
 80199d8:	2b01      	cmp	r3, #1
 80199da:	d139      	bne.n	8019a50 <MAP_searchGoalKnown+0x1a4>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
//			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
			if( TRUE == bl_type ){
 80199dc:	7abb      	ldrb	r3, [r7, #10]
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d00c      	beq.n	80199fc <MAP_searchGoalKnown+0x150>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 80199e2:	4b49      	ldr	r3, [pc, #292]	@ (8019b08 <MAP_searchGoalKnown+0x25c>)
 80199e4:	edd3 7a00 	vldr	s15, [r3]
 80199e8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80199ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80199f0:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8019b00 <MAP_searchGoalKnown+0x254>
 80199f4:	eeb0 0a67 	vmov.f32	s0, s15
 80199f8:	f7f5 fec0 	bl	800f77c <MOT_goBlock_FinSpeed>
			}
			if (st_Known.bl_known != TRUE) {
 80199fc:	4b47      	ldr	r3, [pc, #284]	@ (8019b1c <MAP_searchGoalKnown+0x270>)
 80199fe:	785b      	ldrb	r3, [r3, #1]
 8019a00:	f083 0301 	eor.w	r3, r3, #1
 8019a04:	b2db      	uxtb	r3, r3
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d001      	beq.n	8019a0e <MAP_searchGoalKnown+0x162>
				MAP_makeMapData();		// 壁データから迷路データを作成
 8019a0a:	f7fd fa8b 	bl	8016f24 <MAP_makeMapData>
			}
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 8019a0e:	797a      	ldrb	r2, [r7, #5]
 8019a10:	79b9      	ldrb	r1, [r7, #6]
 8019a12:	79fb      	ldrb	r3, [r7, #7]
 8019a14:	4618      	mov	r0, r3
 8019a16:	f7fd fcad 	bl	8017374 <MAP_makeContourMap_queue>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);			// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 8019a1a:	f107 030b 	add.w	r3, r7, #11
 8019a1e:	4619      	mov	r1, r3
 8019a20:	2000      	movs	r0, #0
 8019a22:	f7fe f877 	bl	8017b14 <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 8019a26:	4b31      	ldr	r3, [pc, #196]	@ (8019aec <MAP_searchGoalKnown+0x240>)
 8019a28:	781b      	ldrb	r3, [r3, #0]
 8019a2a:	79fa      	ldrb	r2, [r7, #7]
 8019a2c:	429a      	cmp	r2, r3
 8019a2e:	d107      	bne.n	8019a40 <MAP_searchGoalKnown+0x194>
 8019a30:	4b2f      	ldr	r3, [pc, #188]	@ (8019af0 <MAP_searchGoalKnown+0x244>)
 8019a32:	781b      	ldrb	r3, [r3, #0]
 8019a34:	79ba      	ldrb	r2, [r7, #6]
 8019a36:	429a      	cmp	r2, r3
 8019a38:	d102      	bne.n	8019a40 <MAP_searchGoalKnown+0x194>
				MAP_actGoal();									// ゴール時の動作
 8019a3a:	f7fe fd35 	bl	80184a8 <MAP_actGoal>
				break;
 8019a3e:	e0ff      	b.n	8019c40 <MAP_searchGoalKnown+0x394>
			}
			else{
//				MAP_moveNextBlock_Sla(en_head, &bl_type, FALSE );	// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
				MAP_moveNextBlock_acc(en_head, &bl_type);
 8019a40:	7afb      	ldrb	r3, [r7, #11]
 8019a42:	f107 020a 	add.w	r2, r7, #10
 8019a46:	4611      	mov	r1, r2
 8019a48:	4618      	mov	r0, r3
 8019a4a:	f7fe fff5 	bl	8018a38 <MAP_moveNextBlock_acc>
 8019a4e:	e06e      	b.n	8019b2e <MAP_searchGoalKnown+0x282>
			}
		}
		/* 帰還探索 */
		else if (SEARCH_RETURN == en_search) {
 8019a50:	793b      	ldrb	r3, [r7, #4]
 8019a52:	2b03      	cmp	r3, #3
 8019a54:	d16b      	bne.n	8019b2e <MAP_searchGoalKnown+0x282>
			
			if( TRUE == bl_type ){
 8019a56:	7abb      	ldrb	r3, [r7, #10]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d00c      	beq.n	8019a76 <MAP_searchGoalKnown+0x1ca>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 8019a5c:	4b2a      	ldr	r3, [pc, #168]	@ (8019b08 <MAP_searchGoalKnown+0x25c>)
 8019a5e:	edd3 7a00 	vldr	s15, [r3]
 8019a62:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8019a66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019a6a:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8019b00 <MAP_searchGoalKnown+0x254>
 8019a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8019a72:	f7f5 fe83 	bl	800f77c <MOT_goBlock_FinSpeed>
			}
			if (st_Known.bl_known != TRUE) {
 8019a76:	4b29      	ldr	r3, [pc, #164]	@ (8019b1c <MAP_searchGoalKnown+0x270>)
 8019a78:	785b      	ldrb	r3, [r3, #1]
 8019a7a:	f083 0301 	eor.w	r3, r3, #1
 8019a7e:	b2db      	uxtb	r3, r3
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d001      	beq.n	8019a88 <MAP_searchGoalKnown+0x1dc>
				MAP_makeMapData();		// 壁データから迷路データを作成
 8019a84:	f7fd fa4e 	bl	8016f24 <MAP_makeMapData>
			}			
			MAP_makeReturnContourMap(uc_staX,uc_staY);
 8019a88:	7b7a      	ldrb	r2, [r7, #13]
 8019a8a:	7bbb      	ldrb	r3, [r7, #14]
 8019a8c:	4611      	mov	r1, r2
 8019a8e:	4618      	mov	r0, r3
 8019a90:	f7fe fd9a 	bl	80185c8 <MAP_makeReturnContourMap>
			MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 8019a94:	4b17      	ldr	r3, [pc, #92]	@ (8019af4 <MAP_searchGoalKnown+0x248>)
 8019a96:	781a      	ldrb	r2, [r3, #0]
 8019a98:	7bfc      	ldrb	r4, [r7, #15]
 8019a9a:	7b79      	ldrb	r1, [r7, #13]
 8019a9c:	7bb8      	ldrb	r0, [r7, #14]
 8019a9e:	f107 0309 	add.w	r3, r7, #9
 8019aa2:	9301      	str	r3, [sp, #4]
 8019aa4:	7bfb      	ldrb	r3, [r7, #15]
 8019aa6:	9300      	str	r3, [sp, #0]
 8019aa8:	4623      	mov	r3, r4
 8019aaa:	f7fc fb67 	bl	801617c <MAP_searchCmdList>
			uc_trgX = Return_X;
 8019aae:	4b12      	ldr	r3, [pc, #72]	@ (8019af8 <MAP_searchGoalKnown+0x24c>)
 8019ab0:	781b      	ldrb	r3, [r3, #0]
 8019ab2:	71fb      	strb	r3, [r7, #7]
			uc_trgY = Return_Y;
 8019ab4:	4b11      	ldr	r3, [pc, #68]	@ (8019afc <MAP_searchGoalKnown+0x250>)
 8019ab6:	781b      	ldrb	r3, [r3, #0]
 8019ab8:	71bb      	strb	r3, [r7, #6]
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 8019aba:	797a      	ldrb	r2, [r7, #5]
 8019abc:	79b9      	ldrb	r1, [r7, #6]
 8019abe:	79fb      	ldrb	r3, [r7, #7]
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	f7fd fc57 	bl	8017374 <MAP_makeContourMap_queue>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);	
 8019ac6:	f107 030b 	add.w	r3, r7, #11
 8019aca:	4619      	mov	r1, r3
 8019acc:	2000      	movs	r0, #0
 8019ace:	f7fe f821 	bl	8017b14 <MAP_calcMouseDir>

			/* 次の区画へ移動 */
//			if ((us_Cmap[my][mx] == 0)||((g_SysMap[uc_trgY][uc_trgX]&0xf0) == 0xf0)) {
			if ((mx == 0)&&(my == 0)){
 8019ad2:	4b06      	ldr	r3, [pc, #24]	@ (8019aec <MAP_searchGoalKnown+0x240>)
 8019ad4:	781b      	ldrb	r3, [r3, #0]
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	d122      	bne.n	8019b20 <MAP_searchGoalKnown+0x274>
 8019ada:	4b05      	ldr	r3, [pc, #20]	@ (8019af0 <MAP_searchGoalKnown+0x244>)
 8019adc:	781b      	ldrb	r3, [r3, #0]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d11e      	bne.n	8019b20 <MAP_searchGoalKnown+0x274>
				MAP_actGoal();
 8019ae2:	f7fe fce1 	bl	80184a8 <MAP_actGoal>
				break;
 8019ae6:	e0ab      	b.n	8019c40 <MAP_searchGoalKnown+0x394>
 8019ae8:	2001bda0 	.word	0x2001bda0
 8019aec:	2001ad8c 	.word	0x2001ad8c
 8019af0:	2001ad8b 	.word	0x2001ad8b
 8019af4:	2001ad8a 	.word	0x2001ad8a
 8019af8:	2001ad9c 	.word	0x2001ad9c
 8019afc:	2001ad9d 	.word	0x2001ad9d
 8019b00:	3e99999a 	.word	0x3e99999a
 8019b04:	00000000 	.word	0x00000000
 8019b08:	2001ad90 	.word	0x2001ad90
 8019b0c:	2001ad94 	.word	0x2001ad94
 8019b10:	2001ad95 	.word	0x2001ad95
 8019b14:	2001ad96 	.word	0x2001ad96
 8019b18:	3e5c28f6 	.word	0x3e5c28f6
 8019b1c:	2001ad98 	.word	0x2001ad98
			}
//			}
			else {
				MAP_moveNextBlock_acc(en_head, &bl_type);
 8019b20:	7afb      	ldrb	r3, [r7, #11]
 8019b22:	f107 020a 	add.w	r2, r7, #10
 8019b26:	4611      	mov	r1, r2
 8019b28:	4618      	mov	r0, r3
 8019b2a:	f7fe ff85 	bl	8018a38 <MAP_moveNextBlock_acc>
			}
//			LED_count(uc_trgY);
		}
		if(front_wall_miss == TRUE){
 8019b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8019c58 <MAP_searchGoalKnown+0x3ac>)
 8019b30:	781b      	ldrb	r3, [r3, #0]
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d03c      	beq.n	8019bb0 <MAP_searchGoalKnown+0x304>
			MOT_turn(MOT_R180);
 8019b36:	2002      	movs	r0, #2
 8019b38:	f7f6 f84a 	bl	800fbd0 <MOT_turn>
			en_Head = (enMAP_HEAD_DIR)(((uint8_t)en_Head + 2) & (MAP_HEAD_DIR_MAX - 1));
 8019b3c:	4b47      	ldr	r3, [pc, #284]	@ (8019c5c <MAP_searchGoalKnown+0x3b0>)
 8019b3e:	781b      	ldrb	r3, [r3, #0]
 8019b40:	3302      	adds	r3, #2
 8019b42:	b2db      	uxtb	r3, r3
 8019b44:	f003 0303 	and.w	r3, r3, #3
 8019b48:	b2da      	uxtb	r2, r3
 8019b4a:	4b44      	ldr	r3, [pc, #272]	@ (8019c5c <MAP_searchGoalKnown+0x3b0>)
 8019b4c:	701a      	strb	r2, [r3, #0]
			MOT_goHitBackWall();
 8019b4e:	f7f7 fb69 	bl	8011224 <MOT_goHitBackWall>
			LL_mDelay(100);
 8019b52:	2064      	movs	r0, #100	@ 0x64
 8019b54:	f001 fff6 	bl	801bb44 <LL_mDelay>
			MOT_setTrgtSpeed(SEARCH_SPEED/4.0);		// 目標速度
 8019b58:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8019c60 <MAP_searchGoalKnown+0x3b4>
 8019b5c:	f7f7 fb3c 	bl	80111d8 <MOT_setTrgtSpeed>
			MOT_goBlock_FinSpeed( MOVE_BACK_DIST, 0.0 );//区画中央に戻り おそらく動作バグ
 8019b60:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8019c64 <MAP_searchGoalKnown+0x3b8>
 8019b64:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8019c68 <MAP_searchGoalKnown+0x3bc>
 8019b68:	f7f5 fe08 	bl	800f77c <MOT_goBlock_FinSpeed>
			LL_mDelay(100);
 8019b6c:	2064      	movs	r0, #100	@ 0x64
 8019b6e:	f001 ffe9 	bl	801bb44 <LL_mDelay>
			MOT_setTrgtSpeed(SEARCH_SPEED);		// 目標速度
 8019b72:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 8019c6c <MAP_searchGoalKnown+0x3c0>
 8019b76:	f7f7 fb2f 	bl	80111d8 <MOT_setTrgtSpeed>

			MAP_make_refPos_MapData(en_Head);
 8019b7a:	4b38      	ldr	r3, [pc, #224]	@ (8019c5c <MAP_searchGoalKnown+0x3b0>)
 8019b7c:	781b      	ldrb	r3, [r3, #0]
 8019b7e:	4618      	mov	r0, r3
 8019b80:	f7fd fafc 	bl	801717c <MAP_make_refPos_MapData>

			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 8019b84:	797a      	ldrb	r2, [r7, #5]
 8019b86:	79b9      	ldrb	r1, [r7, #6]
 8019b88:	79fb      	ldrb	r3, [r7, #7]
 8019b8a:	4618      	mov	r0, r3
 8019b8c:	f7fd fbf2 	bl	8017374 <MAP_makeContourMap_queue>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);			// 等高線MAP法で進行方向を算出
 8019b90:	f107 030b 	add.w	r3, r7, #11
 8019b94:	4619      	mov	r1, r3
 8019b96:	2000      	movs	r0, #0
 8019b98:	f7fd ffbc 	bl	8017b14 <MAP_calcMouseDir>
			MAP_moveNextBlock_frontmiss(en_head, &bl_type);
 8019b9c:	7afb      	ldrb	r3, [r7, #11]
 8019b9e:	f107 020a 	add.w	r2, r7, #10
 8019ba2:	4611      	mov	r1, r2
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	f7fe fc29 	bl	80183fc <MAP_moveNextBlock_frontmiss>

			front_wall_miss = FALSE;
 8019baa:	4b2b      	ldr	r3, [pc, #172]	@ (8019c58 <MAP_searchGoalKnown+0x3ac>)
 8019bac:	2200      	movs	r2, #0
 8019bae:	701a      	strb	r2, [r3, #0]
		}

		if(Min_in>6){
 8019bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8019c70 <MAP_searchGoalKnown+0x3c4>)
 8019bb2:	781b      	ldrb	r3, [r3, #0]
 8019bb4:	b2db      	uxtb	r3, r3
 8019bb6:	2b06      	cmp	r3, #6
 8019bb8:	d927      	bls.n	8019c0a <MAP_searchGoalKnown+0x35e>
			MOT_goBlock_FinSpeed(0.5,0.0);
 8019bba:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8019c64 <MAP_searchGoalKnown+0x3b8>
 8019bbe:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8019bc2:	f7f5 fddb 	bl	800f77c <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R180);	
 8019bc6:	2002      	movs	r0, #2
 8019bc8:	f7f6 f802 	bl	800fbd0 <MOT_turn>
			LL_mDelay(200);
 8019bcc:	20c8      	movs	r0, #200	@ 0xc8
 8019bce:	f001 ffb9 	bl	801bb44 <LL_mDelay>
			MOT_turn(MOT_R180);	
 8019bd2:	2002      	movs	r0, #2
 8019bd4:	f7f5 fffc 	bl	800fbd0 <MOT_turn>
			LL_mDelay(200);
 8019bd8:	20c8      	movs	r0, #200	@ 0xc8
 8019bda:	f001 ffb3 	bl	801bb44 <LL_mDelay>
			CTRL_stop();
 8019bde:	f7ec fc21 	bl	8006424 <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 8019be2:	2000      	movs	r0, #0
 8019be4:	f7ef fdae 	bl	8009744 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 8019be8:	2001      	movs	r0, #1
 8019bea:	f7ef fdab 	bl	8009744 <DCM_brakeMot>
			
			/* 迷路関連を初期化 */
			en_Head		= NORTH;
 8019bee:	4b1b      	ldr	r3, [pc, #108]	@ (8019c5c <MAP_searchGoalKnown+0x3b0>)
 8019bf0:	2200      	movs	r2, #0
 8019bf2:	701a      	strb	r2, [r3, #0]
			mx			= 0;
 8019bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8019c74 <MAP_searchGoalKnown+0x3c8>)
 8019bf6:	2200      	movs	r2, #0
 8019bf8:	701a      	strb	r2, [r3, #0]
			my			= 0;
 8019bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8019c78 <MAP_searchGoalKnown+0x3cc>)
 8019bfc:	2200      	movs	r2, #0
 8019bfe:	701a      	strb	r2, [r3, #0]
			f_MoveBackDist = 0;
 8019c00:	4b1e      	ldr	r3, [pc, #120]	@ (8019c7c <MAP_searchGoalKnown+0x3d0>)
 8019c02:	f04f 0200 	mov.w	r2, #0
 8019c06:	601a      	str	r2, [r3, #0]
			break;
 8019c08:	e01a      	b.n	8019c40 <MAP_searchGoalKnown+0x394>
		}
		
		/* 途中で制御不能になった */
		if( SYS_isOutOfCtrl() == TRUE ){
 8019c0a:	f7ef fd69 	bl	80096e0 <SYS_isOutOfCtrl>
 8019c0e:	4603      	mov	r3, r0
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	f43f aea5 	beq.w	8019960 <MAP_searchGoalKnown+0xb4>
			CTRL_stop();
 8019c16:	f7ec fc05 	bl	8006424 <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 8019c1a:	2000      	movs	r0, #0
 8019c1c:	f7ef fd92 	bl	8009744 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 8019c20:	2001      	movs	r0, #1
 8019c22:	f7ef fd8f 	bl	8009744 <DCM_brakeMot>
			
			/* 迷路関連を初期化 */
			en_Head		= NORTH;
 8019c26:	4b0d      	ldr	r3, [pc, #52]	@ (8019c5c <MAP_searchGoalKnown+0x3b0>)
 8019c28:	2200      	movs	r2, #0
 8019c2a:	701a      	strb	r2, [r3, #0]
			mx			= 0;
 8019c2c:	4b11      	ldr	r3, [pc, #68]	@ (8019c74 <MAP_searchGoalKnown+0x3c8>)
 8019c2e:	2200      	movs	r2, #0
 8019c30:	701a      	strb	r2, [r3, #0]
			my			= 0;
 8019c32:	4b11      	ldr	r3, [pc, #68]	@ (8019c78 <MAP_searchGoalKnown+0x3cc>)
 8019c34:	2200      	movs	r2, #0
 8019c36:	701a      	strb	r2, [r3, #0]
			f_MoveBackDist = 0;
 8019c38:	4b10      	ldr	r3, [pc, #64]	@ (8019c7c <MAP_searchGoalKnown+0x3d0>)
 8019c3a:	f04f 0200 	mov.w	r2, #0
 8019c3e:	601a      	str	r2, [r3, #0]
			
			// DCMCは下位モジュールで既にクリアと緊急停止を行っている。
			break;
		}
	}
	SearchFlag = FALSE;
 8019c40:	4b0f      	ldr	r3, [pc, #60]	@ (8019c80 <MAP_searchGoalKnown+0x3d4>)
 8019c42:	2200      	movs	r2, #0
 8019c44:	701a      	strb	r2, [r3, #0]
	LL_mDelay(1000);
 8019c46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8019c4a:	f001 ff7b 	bl	801bb44 <LL_mDelay>
//	SYS_setEnable( SYS_MODE );			// モード変更有効

}
 8019c4e:	bf00      	nop
 8019c50:	3714      	adds	r7, #20
 8019c52:	46bd      	mov	sp, r7
 8019c54:	bd90      	pop	{r4, r7, pc}
 8019c56:	bf00      	nop
 8019c58:	2001ad9b 	.word	0x2001ad9b
 8019c5c:	2001ad8a 	.word	0x2001ad8a
 8019c60:	3d99999a 	.word	0x3d99999a
 8019c64:	00000000 	.word	0x00000000
 8019c68:	3e5c28f6 	.word	0x3e5c28f6
 8019c6c:	3e99999a 	.word	0x3e99999a
 8019c70:	20000217 	.word	0x20000217
 8019c74:	2001ad8c 	.word	0x2001ad8c
 8019c78:	2001ad8b 	.word	0x2001ad8b
 8019c7c:	2001ad90 	.word	0x2001ad90
 8019c80:	2001bda0 	.word	0x2001bda0

08019c84 <MAP_clearMap_direction>:
//	SYS_setEnable( SYS_MODE );			// モード変更有効

}

void MAP_clearMap_direction(void)
{
 8019c84:	b480      	push	{r7}
 8019c86:	b083      	sub	sp, #12
 8019c88:	af00      	add	r7, sp, #0
	uint16_t	x, y;
	uint8_t	uc_data;

	/* すべてのマップデータを未探索状態にする */
	for (y = 0; y < MAP_Y_SIZE; y++) {
 8019c8a:	2300      	movs	r3, #0
 8019c8c:	80bb      	strh	r3, [r7, #4]
 8019c8e:	e015      	b.n	8019cbc <MAP_clearMap_direction+0x38>
		for (x = 0; x < MAP_X_SIZE; x++) {
 8019c90:	2300      	movs	r3, #0
 8019c92:	80fb      	strh	r3, [r7, #6]
 8019c94:	e00c      	b.n	8019cb0 <MAP_clearMap_direction+0x2c>
			uc_data = 0x00;
 8019c96:	2300      	movs	r3, #0
 8019c98:	70fb      	strb	r3, [r7, #3]
			g_MapDirection[y][x] = uc_data;
 8019c9a:	88ba      	ldrh	r2, [r7, #4]
 8019c9c:	88fb      	ldrh	r3, [r7, #6]
 8019c9e:	490c      	ldr	r1, [pc, #48]	@ (8019cd0 <MAP_clearMap_direction+0x4c>)
 8019ca0:	0152      	lsls	r2, r2, #5
 8019ca2:	440a      	add	r2, r1
 8019ca4:	4413      	add	r3, r2
 8019ca6:	78fa      	ldrb	r2, [r7, #3]
 8019ca8:	701a      	strb	r2, [r3, #0]
		for (x = 0; x < MAP_X_SIZE; x++) {
 8019caa:	88fb      	ldrh	r3, [r7, #6]
 8019cac:	3301      	adds	r3, #1
 8019cae:	80fb      	strh	r3, [r7, #6]
 8019cb0:	88fb      	ldrh	r3, [r7, #6]
 8019cb2:	2b1f      	cmp	r3, #31
 8019cb4:	d9ef      	bls.n	8019c96 <MAP_clearMap_direction+0x12>
	for (y = 0; y < MAP_Y_SIZE; y++) {
 8019cb6:	88bb      	ldrh	r3, [r7, #4]
 8019cb8:	3301      	adds	r3, #1
 8019cba:	80bb      	strh	r3, [r7, #4]
 8019cbc:	88bb      	ldrh	r3, [r7, #4]
 8019cbe:	2b1f      	cmp	r3, #31
 8019cc0:	d9e6      	bls.n	8019c90 <MAP_clearMap_direction+0xc>
		}
	}

}
 8019cc2:	bf00      	nop
 8019cc4:	bf00      	nop
 8019cc6:	370c      	adds	r7, #12
 8019cc8:	46bd      	mov	sp, r7
 8019cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cce:	4770      	bx	lr
 8019cd0:	2001b9a0 	.word	0x2001b9a0

08019cd4 <MAP_makeContourMap_dijkstra_modoki>:

void  MAP_makeContourMap_dijkstra_modoki(
	uint8_t uc_goalX, 			///< [in] ゴールX座標
	uint8_t uc_goalY, 			///< [in] ゴールY座標
	enMAP_ACT_MODE	en_type		///< [in] 計算方法（まだ未使用）
) {
 8019cd4:	b580      	push	{r7, lr}
 8019cd6:	b086      	sub	sp, #24
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	4603      	mov	r3, r0
 8019cdc:	71fb      	strb	r3, [r7, #7]
 8019cde:	460b      	mov	r3, r1
 8019ce0:	71bb      	strb	r3, [r7, #6]
 8019ce2:	4613      	mov	r3, r2
 8019ce4:	717b      	strb	r3, [r7, #5]
	uint16_t		uc_level;		// 等高線
	uint8_t		uc_wallData;	// 壁情報

	en_type = en_type;		// コンパイルワーニング回避（いずれ削除）

	MAP_clearMap_direction();
 8019ce6:	f7ff ffcd 	bl	8019c84 <MAP_clearMap_direction>

	/* 等高線マップを初期化する */
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 8019cea:	2300      	movs	r3, #0
 8019cec:	827b      	strh	r3, [r7, #18]
 8019cee:	e010      	b.n	8019d12 <MAP_makeContourMap_dijkstra_modoki+0x3e>
		us_Cmap[i / MAP_Y_SIZE][i & (MAP_X_SIZE - 1)] = MAP_SMAP_MAX_VAL*4 - 1;
 8019cf0:	8a7b      	ldrh	r3, [r7, #18]
 8019cf2:	095b      	lsrs	r3, r3, #5
 8019cf4:	b29b      	uxth	r3, r3
 8019cf6:	461a      	mov	r2, r3
 8019cf8:	8a7b      	ldrh	r3, [r7, #18]
 8019cfa:	f003 031f 	and.w	r3, r3, #31
 8019cfe:	495e      	ldr	r1, [pc, #376]	@ (8019e78 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019d00:	0152      	lsls	r2, r2, #5
 8019d02:	4413      	add	r3, r2
 8019d04:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8019d08:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 8019d0c:	8a7b      	ldrh	r3, [r7, #18]
 8019d0e:	3301      	adds	r3, #1
 8019d10:	827b      	strh	r3, [r7, #18]
 8019d12:	8a7b      	ldrh	r3, [r7, #18]
 8019d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019d18:	d3ea      	bcc.n	8019cf0 <MAP_makeContourMap_dijkstra_modoki+0x1c>
	}
	/* 目標地点の等高線を0に設定 */
	us_Cmap[uc_goalY][uc_goalX] = 0;
 8019d1a:	79ba      	ldrb	r2, [r7, #6]
 8019d1c:	79fb      	ldrb	r3, [r7, #7]
 8019d1e:	4956      	ldr	r1, [pc, #344]	@ (8019e78 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019d20:	0152      	lsls	r2, r2, #5
 8019d22:	4413      	add	r3, r2
 8019d24:	2200      	movs	r2, #0
 8019d26:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	if (GOAL_SIZE == 4) {
 8019d2a:	4b54      	ldr	r3, [pc, #336]	@ (8019e7c <MAP_makeContourMap_dijkstra_modoki+0x1a8>)
 8019d2c:	781b      	ldrb	r3, [r3, #0]
 8019d2e:	2b04      	cmp	r3, #4
 8019d30:	d11c      	bne.n	8019d6c <MAP_makeContourMap_dijkstra_modoki+0x98>
		us_Cmap[uc_goalY + 1][uc_goalX] = 0;
 8019d32:	79bb      	ldrb	r3, [r7, #6]
 8019d34:	1c5a      	adds	r2, r3, #1
 8019d36:	79fb      	ldrb	r3, [r7, #7]
 8019d38:	494f      	ldr	r1, [pc, #316]	@ (8019e78 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019d3a:	0152      	lsls	r2, r2, #5
 8019d3c:	4413      	add	r3, r2
 8019d3e:	2200      	movs	r2, #0
 8019d40:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY][uc_goalX + 1] = 0;
 8019d44:	79ba      	ldrb	r2, [r7, #6]
 8019d46:	79fb      	ldrb	r3, [r7, #7]
 8019d48:	3301      	adds	r3, #1
 8019d4a:	494b      	ldr	r1, [pc, #300]	@ (8019e78 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019d4c:	0152      	lsls	r2, r2, #5
 8019d4e:	4413      	add	r3, r2
 8019d50:	2200      	movs	r2, #0
 8019d52:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY + 1][uc_goalX + 1] = 0;
 8019d56:	79bb      	ldrb	r3, [r7, #6]
 8019d58:	1c5a      	adds	r2, r3, #1
 8019d5a:	79fb      	ldrb	r3, [r7, #7]
 8019d5c:	3301      	adds	r3, #1
 8019d5e:	4946      	ldr	r1, [pc, #280]	@ (8019e78 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019d60:	0152      	lsls	r2, r2, #5
 8019d62:	4413      	add	r3, r2
 8019d64:	2200      	movs	r2, #0
 8019d66:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8019d6a:	e04f      	b.n	8019e0c <MAP_makeContourMap_dijkstra_modoki+0x138>
	}
	else if (GOAL_SIZE == 9){
 8019d6c:	4b43      	ldr	r3, [pc, #268]	@ (8019e7c <MAP_makeContourMap_dijkstra_modoki+0x1a8>)
 8019d6e:	781b      	ldrb	r3, [r3, #0]
 8019d70:	2b09      	cmp	r3, #9
 8019d72:	d14b      	bne.n	8019e0c <MAP_makeContourMap_dijkstra_modoki+0x138>
		us_Cmap[uc_goalY+1][uc_goalX] = 0;
 8019d74:	79bb      	ldrb	r3, [r7, #6]
 8019d76:	1c5a      	adds	r2, r3, #1
 8019d78:	79fb      	ldrb	r3, [r7, #7]
 8019d7a:	493f      	ldr	r1, [pc, #252]	@ (8019e78 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019d7c:	0152      	lsls	r2, r2, #5
 8019d7e:	4413      	add	r3, r2
 8019d80:	2200      	movs	r2, #0
 8019d82:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY][uc_goalX+1] = 0;
 8019d86:	79ba      	ldrb	r2, [r7, #6]
 8019d88:	79fb      	ldrb	r3, [r7, #7]
 8019d8a:	3301      	adds	r3, #1
 8019d8c:	493a      	ldr	r1, [pc, #232]	@ (8019e78 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019d8e:	0152      	lsls	r2, r2, #5
 8019d90:	4413      	add	r3, r2
 8019d92:	2200      	movs	r2, #0
 8019d94:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+1][uc_goalX+1] = 0;
 8019d98:	79bb      	ldrb	r3, [r7, #6]
 8019d9a:	1c5a      	adds	r2, r3, #1
 8019d9c:	79fb      	ldrb	r3, [r7, #7]
 8019d9e:	3301      	adds	r3, #1
 8019da0:	4935      	ldr	r1, [pc, #212]	@ (8019e78 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019da2:	0152      	lsls	r2, r2, #5
 8019da4:	4413      	add	r3, r2
 8019da6:	2200      	movs	r2, #0
 8019da8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+2][uc_goalX] = 0;
 8019dac:	79bb      	ldrb	r3, [r7, #6]
 8019dae:	1c9a      	adds	r2, r3, #2
 8019db0:	79fb      	ldrb	r3, [r7, #7]
 8019db2:	4931      	ldr	r1, [pc, #196]	@ (8019e78 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019db4:	0152      	lsls	r2, r2, #5
 8019db6:	4413      	add	r3, r2
 8019db8:	2200      	movs	r2, #0
 8019dba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+2][uc_goalX+1] = 0;
 8019dbe:	79bb      	ldrb	r3, [r7, #6]
 8019dc0:	1c9a      	adds	r2, r3, #2
 8019dc2:	79fb      	ldrb	r3, [r7, #7]
 8019dc4:	3301      	adds	r3, #1
 8019dc6:	492c      	ldr	r1, [pc, #176]	@ (8019e78 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019dc8:	0152      	lsls	r2, r2, #5
 8019dca:	4413      	add	r3, r2
 8019dcc:	2200      	movs	r2, #0
 8019dce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY][uc_goalX+2] = 0;
 8019dd2:	79ba      	ldrb	r2, [r7, #6]
 8019dd4:	79fb      	ldrb	r3, [r7, #7]
 8019dd6:	3302      	adds	r3, #2
 8019dd8:	4927      	ldr	r1, [pc, #156]	@ (8019e78 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019dda:	0152      	lsls	r2, r2, #5
 8019ddc:	4413      	add	r3, r2
 8019dde:	2200      	movs	r2, #0
 8019de0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+1][uc_goalX+2] = 0;
 8019de4:	79bb      	ldrb	r3, [r7, #6]
 8019de6:	1c5a      	adds	r2, r3, #1
 8019de8:	79fb      	ldrb	r3, [r7, #7]
 8019dea:	3302      	adds	r3, #2
 8019dec:	4922      	ldr	r1, [pc, #136]	@ (8019e78 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019dee:	0152      	lsls	r2, r2, #5
 8019df0:	4413      	add	r3, r2
 8019df2:	2200      	movs	r2, #0
 8019df4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_Cmap[uc_goalY+2][uc_goalX+2] = 0;
 8019df8:	79bb      	ldrb	r3, [r7, #6]
 8019dfa:	1c9a      	adds	r2, r3, #2
 8019dfc:	79fb      	ldrb	r3, [r7, #7]
 8019dfe:	3302      	adds	r3, #2
 8019e00:	491d      	ldr	r1, [pc, #116]	@ (8019e78 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8019e02:	0152      	lsls	r2, r2, #5
 8019e04:	4413      	add	r3, r2
 8019e06:	2200      	movs	r2, #0
 8019e08:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}

	if (mx > uc_max_x)uc_max_x = mx;
 8019e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8019e80 <MAP_makeContourMap_dijkstra_modoki+0x1ac>)
 8019e0e:	781a      	ldrb	r2, [r3, #0]
 8019e10:	4b1c      	ldr	r3, [pc, #112]	@ (8019e84 <MAP_makeContourMap_dijkstra_modoki+0x1b0>)
 8019e12:	781b      	ldrb	r3, [r3, #0]
 8019e14:	429a      	cmp	r2, r3
 8019e16:	d903      	bls.n	8019e20 <MAP_makeContourMap_dijkstra_modoki+0x14c>
 8019e18:	4b19      	ldr	r3, [pc, #100]	@ (8019e80 <MAP_makeContourMap_dijkstra_modoki+0x1ac>)
 8019e1a:	781a      	ldrb	r2, [r3, #0]
 8019e1c:	4b19      	ldr	r3, [pc, #100]	@ (8019e84 <MAP_makeContourMap_dijkstra_modoki+0x1b0>)
 8019e1e:	701a      	strb	r2, [r3, #0]
	if (my > uc_max_y)uc_max_y = my;
 8019e20:	4b19      	ldr	r3, [pc, #100]	@ (8019e88 <MAP_makeContourMap_dijkstra_modoki+0x1b4>)
 8019e22:	781a      	ldrb	r2, [r3, #0]
 8019e24:	4b19      	ldr	r3, [pc, #100]	@ (8019e8c <MAP_makeContourMap_dijkstra_modoki+0x1b8>)
 8019e26:	781b      	ldrb	r3, [r3, #0]
 8019e28:	429a      	cmp	r2, r3
 8019e2a:	d903      	bls.n	8019e34 <MAP_makeContourMap_dijkstra_modoki+0x160>
 8019e2c:	4b16      	ldr	r3, [pc, #88]	@ (8019e88 <MAP_makeContourMap_dijkstra_modoki+0x1b4>)
 8019e2e:	781a      	ldrb	r2, [r3, #0]
 8019e30:	4b16      	ldr	r3, [pc, #88]	@ (8019e8c <MAP_makeContourMap_dijkstra_modoki+0x1b8>)
 8019e32:	701a      	strb	r2, [r3, #0]
	uc_max_x = 32;
 8019e34:	4b13      	ldr	r3, [pc, #76]	@ (8019e84 <MAP_makeContourMap_dijkstra_modoki+0x1b0>)
 8019e36:	2220      	movs	r2, #32
 8019e38:	701a      	strb	r2, [r3, #0]
	uc_max_y = 32;
 8019e3a:	4b14      	ldr	r3, [pc, #80]	@ (8019e8c <MAP_makeContourMap_dijkstra_modoki+0x1b8>)
 8019e3c:	2220      	movs	r2, #32
 8019e3e:	701a      	strb	r2, [r3, #0]

	g_MapDirection[uc_goalY][uc_goalX] = 0xff;
 8019e40:	79ba      	ldrb	r2, [r7, #6]
 8019e42:	79fb      	ldrb	r3, [r7, #7]
 8019e44:	4912      	ldr	r1, [pc, #72]	@ (8019e90 <MAP_makeContourMap_dijkstra_modoki+0x1bc>)
 8019e46:	0152      	lsls	r2, r2, #5
 8019e48:	440a      	add	r2, r1
 8019e4a:	4413      	add	r3, r2
 8019e4c:	22ff      	movs	r2, #255	@ 0xff
 8019e4e:	701a      	strb	r2, [r3, #0]

	/* 等高線マップを作成 */
	uc_dase = 0;
 8019e50:	2300      	movs	r3, #0
 8019e52:	823b      	strh	r3, [r7, #16]
	do {
		uc_level = 0;
 8019e54:	2300      	movs	r3, #0
 8019e56:	81bb      	strh	r3, [r7, #12]
		uc_new = uc_dase + 1;
 8019e58:	8a3b      	ldrh	r3, [r7, #16]
 8019e5a:	3301      	adds	r3, #1
 8019e5c:	81fb      	strh	r3, [r7, #14]
		for (y = 0; y < MAP_Y_SIZE; y++) {
 8019e5e:	2300      	movs	r3, #0
 8019e60:	82bb      	strh	r3, [r7, #20]
 8019e62:	e1ea      	b.n	801a23a <MAP_makeContourMap_dijkstra_modoki+0x566>
			if (uc_max_y+1 < y) break;
 8019e64:	4b09      	ldr	r3, [pc, #36]	@ (8019e8c <MAP_makeContourMap_dijkstra_modoki+0x1b8>)
 8019e66:	781b      	ldrb	r3, [r3, #0]
 8019e68:	1c5a      	adds	r2, r3, #1
 8019e6a:	8abb      	ldrh	r3, [r7, #20]
 8019e6c:	429a      	cmp	r2, r3
 8019e6e:	f2c0 81e9 	blt.w	801a244 <MAP_makeContourMap_dijkstra_modoki+0x570>
			for (x = 0; x < MAP_X_SIZE; x++) {
 8019e72:	2300      	movs	r3, #0
 8019e74:	82fb      	strh	r3, [r7, #22]
 8019e76:	e1d7      	b.n	801a228 <MAP_makeContourMap_dijkstra_modoki+0x554>
 8019e78:	2001ada0 	.word	0x2001ada0
 8019e7c:	2001ad97 	.word	0x2001ad97
 8019e80:	2001ad8c 	.word	0x2001ad8c
 8019e84:	2000001a 	.word	0x2000001a
 8019e88:	2001ad8b 	.word	0x2001ad8b
 8019e8c:	2000001b 	.word	0x2000001b
 8019e90:	2001b9a0 	.word	0x2001b9a0
				if (us_Cmap[y][x] == uc_dase) {
 8019e94:	8aba      	ldrh	r2, [r7, #20]
 8019e96:	8afb      	ldrh	r3, [r7, #22]
 8019e98:	49a0      	ldr	r1, [pc, #640]	@ (801a11c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019e9a:	0152      	lsls	r2, r2, #5
 8019e9c:	4413      	add	r3, r2
 8019e9e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019ea2:	8a3a      	ldrh	r2, [r7, #16]
 8019ea4:	429a      	cmp	r2, r3
 8019ea6:	f040 81b4 	bne.w	801a212 <MAP_makeContourMap_dijkstra_modoki+0x53e>
					uc_wallData = g_SysMap[y][x];
 8019eaa:	8aba      	ldrh	r2, [r7, #20]
 8019eac:	8afb      	ldrh	r3, [r7, #22]
 8019eae:	499c      	ldr	r1, [pc, #624]	@ (801a120 <MAP_makeContourMap_dijkstra_modoki+0x44c>)
 8019eb0:	0152      	lsls	r2, r2, #5
 8019eb2:	440a      	add	r2, r1
 8019eb4:	4413      	add	r3, r2
 8019eb6:	781b      	ldrb	r3, [r3, #0]
 8019eb8:	72fb      	strb	r3, [r7, #11]
					if (uc_max_x+1 < x) break;
 8019eba:	4b9a      	ldr	r3, [pc, #616]	@ (801a124 <MAP_makeContourMap_dijkstra_modoki+0x450>)
 8019ebc:	781b      	ldrb	r3, [r3, #0]
 8019ebe:	1c5a      	adds	r2, r3, #1
 8019ec0:	8afb      	ldrh	r3, [r7, #22]
 8019ec2:	429a      	cmp	r2, r3
 8019ec4:	f2c0 81b5 	blt.w	801a232 <MAP_makeContourMap_dijkstra_modoki+0x55e>
					/* 探索走行 */
					if (SEARCH == en_type) {
 8019ec8:	797b      	ldrb	r3, [r7, #5]
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	f040 8084 	bne.w	8019fd8 <MAP_makeContourMap_dijkstra_modoki+0x304>
						if (((uc_wallData & 0x01) == 0x00) && (y != (MAP_Y_SIZE - 1))) {
 8019ed0:	7afb      	ldrb	r3, [r7, #11]
 8019ed2:	f003 0301 	and.w	r3, r3, #1
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d11a      	bne.n	8019f10 <MAP_makeContourMap_dijkstra_modoki+0x23c>
 8019eda:	8abb      	ldrh	r3, [r7, #20]
 8019edc:	2b1f      	cmp	r3, #31
 8019ede:	d017      	beq.n	8019f10 <MAP_makeContourMap_dijkstra_modoki+0x23c>
							if (us_Cmap[y + 1][x] == MAP_SMAP_MAX_VAL - 1) {
 8019ee0:	8abb      	ldrh	r3, [r7, #20]
 8019ee2:	1c5a      	adds	r2, r3, #1
 8019ee4:	8afb      	ldrh	r3, [r7, #22]
 8019ee6:	498d      	ldr	r1, [pc, #564]	@ (801a11c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019ee8:	0152      	lsls	r2, r2, #5
 8019eea:	4413      	add	r3, r2
 8019eec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019ef0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8019ef4:	4293      	cmp	r3, r2
 8019ef6:	d10b      	bne.n	8019f10 <MAP_makeContourMap_dijkstra_modoki+0x23c>
								us_Cmap[y + 1][x] = uc_new;
 8019ef8:	8abb      	ldrh	r3, [r7, #20]
 8019efa:	1c5a      	adds	r2, r3, #1
 8019efc:	8afb      	ldrh	r3, [r7, #22]
 8019efe:	4987      	ldr	r1, [pc, #540]	@ (801a11c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019f00:	0152      	lsls	r2, r2, #5
 8019f02:	4413      	add	r3, r2
 8019f04:	89fa      	ldrh	r2, [r7, #14]
 8019f06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8019f0a:	89bb      	ldrh	r3, [r7, #12]
 8019f0c:	3301      	adds	r3, #1
 8019f0e:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x02) == 0x00) && (x != (MAP_X_SIZE - 1))) {
 8019f10:	7afb      	ldrb	r3, [r7, #11]
 8019f12:	f003 0302 	and.w	r3, r3, #2
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d11a      	bne.n	8019f50 <MAP_makeContourMap_dijkstra_modoki+0x27c>
 8019f1a:	8afb      	ldrh	r3, [r7, #22]
 8019f1c:	2b1f      	cmp	r3, #31
 8019f1e:	d017      	beq.n	8019f50 <MAP_makeContourMap_dijkstra_modoki+0x27c>
							if (us_Cmap[y][x + 1] == MAP_SMAP_MAX_VAL - 1) {
 8019f20:	8aba      	ldrh	r2, [r7, #20]
 8019f22:	8afb      	ldrh	r3, [r7, #22]
 8019f24:	3301      	adds	r3, #1
 8019f26:	497d      	ldr	r1, [pc, #500]	@ (801a11c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019f28:	0152      	lsls	r2, r2, #5
 8019f2a:	4413      	add	r3, r2
 8019f2c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019f30:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8019f34:	4293      	cmp	r3, r2
 8019f36:	d10b      	bne.n	8019f50 <MAP_makeContourMap_dijkstra_modoki+0x27c>
								us_Cmap[y][x + 1] = uc_new;
 8019f38:	8aba      	ldrh	r2, [r7, #20]
 8019f3a:	8afb      	ldrh	r3, [r7, #22]
 8019f3c:	3301      	adds	r3, #1
 8019f3e:	4977      	ldr	r1, [pc, #476]	@ (801a11c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019f40:	0152      	lsls	r2, r2, #5
 8019f42:	4413      	add	r3, r2
 8019f44:	89fa      	ldrh	r2, [r7, #14]
 8019f46:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8019f4a:	89bb      	ldrh	r3, [r7, #12]
 8019f4c:	3301      	adds	r3, #1
 8019f4e:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x04) == 0x00) && (y != 0)) {
 8019f50:	7afb      	ldrb	r3, [r7, #11]
 8019f52:	f003 0304 	and.w	r3, r3, #4
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	d11a      	bne.n	8019f90 <MAP_makeContourMap_dijkstra_modoki+0x2bc>
 8019f5a:	8abb      	ldrh	r3, [r7, #20]
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d017      	beq.n	8019f90 <MAP_makeContourMap_dijkstra_modoki+0x2bc>
							if (us_Cmap[y - 1][x] == MAP_SMAP_MAX_VAL - 1) {
 8019f60:	8abb      	ldrh	r3, [r7, #20]
 8019f62:	1e5a      	subs	r2, r3, #1
 8019f64:	8afb      	ldrh	r3, [r7, #22]
 8019f66:	496d      	ldr	r1, [pc, #436]	@ (801a11c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019f68:	0152      	lsls	r2, r2, #5
 8019f6a:	4413      	add	r3, r2
 8019f6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019f70:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8019f74:	4293      	cmp	r3, r2
 8019f76:	d10b      	bne.n	8019f90 <MAP_makeContourMap_dijkstra_modoki+0x2bc>
								us_Cmap[y - 1][x] = uc_new;
 8019f78:	8abb      	ldrh	r3, [r7, #20]
 8019f7a:	1e5a      	subs	r2, r3, #1
 8019f7c:	8afb      	ldrh	r3, [r7, #22]
 8019f7e:	4967      	ldr	r1, [pc, #412]	@ (801a11c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019f80:	0152      	lsls	r2, r2, #5
 8019f82:	4413      	add	r3, r2
 8019f84:	89fa      	ldrh	r2, [r7, #14]
 8019f86:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8019f8a:	89bb      	ldrh	r3, [r7, #12]
 8019f8c:	3301      	adds	r3, #1
 8019f8e:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x08) == 0x00) && (x != 0)) {
 8019f90:	7afb      	ldrb	r3, [r7, #11]
 8019f92:	f003 0308 	and.w	r3, r3, #8
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	f040 813b 	bne.w	801a212 <MAP_makeContourMap_dijkstra_modoki+0x53e>
 8019f9c:	8afb      	ldrh	r3, [r7, #22]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	f000 8137 	beq.w	801a212 <MAP_makeContourMap_dijkstra_modoki+0x53e>
							if (us_Cmap[y][x - 1] == MAP_SMAP_MAX_VAL - 1) {
 8019fa4:	8aba      	ldrh	r2, [r7, #20]
 8019fa6:	8afb      	ldrh	r3, [r7, #22]
 8019fa8:	3b01      	subs	r3, #1
 8019faa:	495c      	ldr	r1, [pc, #368]	@ (801a11c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019fac:	0152      	lsls	r2, r2, #5
 8019fae:	4413      	add	r3, r2
 8019fb0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019fb4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8019fb8:	4293      	cmp	r3, r2
 8019fba:	f040 812a 	bne.w	801a212 <MAP_makeContourMap_dijkstra_modoki+0x53e>
								us_Cmap[y][x - 1] = uc_new;
 8019fbe:	8aba      	ldrh	r2, [r7, #20]
 8019fc0:	8afb      	ldrh	r3, [r7, #22]
 8019fc2:	3b01      	subs	r3, #1
 8019fc4:	4955      	ldr	r1, [pc, #340]	@ (801a11c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8019fc6:	0152      	lsls	r2, r2, #5
 8019fc8:	4413      	add	r3, r2
 8019fca:	89fa      	ldrh	r2, [r7, #14]
 8019fcc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8019fd0:	89bb      	ldrh	r3, [r7, #12]
 8019fd2:	3301      	adds	r3, #1
 8019fd4:	81bb      	strh	r3, [r7, #12]
 8019fd6:	e11c      	b.n	801a212 <MAP_makeContourMap_dijkstra_modoki+0x53e>
							}
						}
					}
					/* 最短走行 */
					else {
						if (((uc_wallData & 0x11) == 0x10) && (y != (MAP_Y_SIZE - 1))) {
 8019fd8:	7afb      	ldrb	r3, [r7, #11]
 8019fda:	f003 0311 	and.w	r3, r3, #17
 8019fde:	2b10      	cmp	r3, #16
 8019fe0:	d13f      	bne.n	801a062 <MAP_makeContourMap_dijkstra_modoki+0x38e>
 8019fe2:	8abb      	ldrh	r3, [r7, #20]
 8019fe4:	2b1f      	cmp	r3, #31
 8019fe6:	d03c      	beq.n	801a062 <MAP_makeContourMap_dijkstra_modoki+0x38e>
							if((g_MapDirection[y][x]&0x10) == 0x10){
 8019fe8:	8aba      	ldrh	r2, [r7, #20]
 8019fea:	8afb      	ldrh	r3, [r7, #22]
 8019fec:	494e      	ldr	r1, [pc, #312]	@ (801a128 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 8019fee:	0152      	lsls	r2, r2, #5
 8019ff0:	440a      	add	r2, r1
 8019ff2:	4413      	add	r3, r2
 8019ff4:	781b      	ldrb	r3, [r3, #0]
 8019ff6:	f003 0310 	and.w	r3, r3, #16
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	d003      	beq.n	801a006 <MAP_makeContourMap_dijkstra_modoki+0x332>
								uc_new = uc_dase + 1;
 8019ffe:	8a3b      	ldrh	r3, [r7, #16]
 801a000:	3301      	adds	r3, #1
 801a002:	81fb      	strh	r3, [r7, #14]
 801a004:	e002      	b.n	801a00c <MAP_makeContourMap_dijkstra_modoki+0x338>
							}else{
								uc_new = uc_dase + 2;
 801a006:	8a3b      	ldrh	r3, [r7, #16]
 801a008:	3302      	adds	r3, #2
 801a00a:	81fb      	strh	r3, [r7, #14]
							}
							if (us_Cmap[y + 1][x] > uc_new) {
 801a00c:	8abb      	ldrh	r3, [r7, #20]
 801a00e:	1c5a      	adds	r2, r3, #1
 801a010:	8afb      	ldrh	r3, [r7, #22]
 801a012:	4942      	ldr	r1, [pc, #264]	@ (801a11c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 801a014:	0152      	lsls	r2, r2, #5
 801a016:	4413      	add	r3, r2
 801a018:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801a01c:	89fa      	ldrh	r2, [r7, #14]
 801a01e:	429a      	cmp	r2, r3
 801a020:	d21f      	bcs.n	801a062 <MAP_makeContourMap_dijkstra_modoki+0x38e>
								us_Cmap[y + 1][x] = uc_new;
 801a022:	8abb      	ldrh	r3, [r7, #20]
 801a024:	1c5a      	adds	r2, r3, #1
 801a026:	8afb      	ldrh	r3, [r7, #22]
 801a028:	493c      	ldr	r1, [pc, #240]	@ (801a11c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 801a02a:	0152      	lsls	r2, r2, #5
 801a02c:	4413      	add	r3, r2
 801a02e:	89fa      	ldrh	r2, [r7, #14]
 801a030:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								g_MapDirection[y+1][x] |= 0x10;
 801a034:	8abb      	ldrh	r3, [r7, #20]
 801a036:	1c5a      	adds	r2, r3, #1
 801a038:	8afb      	ldrh	r3, [r7, #22]
 801a03a:	493b      	ldr	r1, [pc, #236]	@ (801a128 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 801a03c:	0152      	lsls	r2, r2, #5
 801a03e:	440a      	add	r2, r1
 801a040:	4413      	add	r3, r2
 801a042:	7819      	ldrb	r1, [r3, #0]
 801a044:	8abb      	ldrh	r3, [r7, #20]
 801a046:	1c5a      	adds	r2, r3, #1
 801a048:	8afb      	ldrh	r3, [r7, #22]
 801a04a:	f041 0110 	orr.w	r1, r1, #16
 801a04e:	b2c8      	uxtb	r0, r1
 801a050:	4935      	ldr	r1, [pc, #212]	@ (801a128 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 801a052:	0152      	lsls	r2, r2, #5
 801a054:	440a      	add	r2, r1
 801a056:	4413      	add	r3, r2
 801a058:	4602      	mov	r2, r0
 801a05a:	701a      	strb	r2, [r3, #0]
								uc_level++;
 801a05c:	89bb      	ldrh	r3, [r7, #12]
 801a05e:	3301      	adds	r3, #1
 801a060:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x22) == 0x20) && (x != (MAP_X_SIZE - 1))) {
 801a062:	7afb      	ldrb	r3, [r7, #11]
 801a064:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 801a068:	2b20      	cmp	r3, #32
 801a06a:	d13f      	bne.n	801a0ec <MAP_makeContourMap_dijkstra_modoki+0x418>
 801a06c:	8afb      	ldrh	r3, [r7, #22]
 801a06e:	2b1f      	cmp	r3, #31
 801a070:	d03c      	beq.n	801a0ec <MAP_makeContourMap_dijkstra_modoki+0x418>
							if((g_MapDirection[y][x]&0x40) == 0x40){
 801a072:	8aba      	ldrh	r2, [r7, #20]
 801a074:	8afb      	ldrh	r3, [r7, #22]
 801a076:	492c      	ldr	r1, [pc, #176]	@ (801a128 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 801a078:	0152      	lsls	r2, r2, #5
 801a07a:	440a      	add	r2, r1
 801a07c:	4413      	add	r3, r2
 801a07e:	781b      	ldrb	r3, [r3, #0]
 801a080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a084:	2b00      	cmp	r3, #0
 801a086:	d003      	beq.n	801a090 <MAP_makeContourMap_dijkstra_modoki+0x3bc>
								uc_new = uc_dase + 1;
 801a088:	8a3b      	ldrh	r3, [r7, #16]
 801a08a:	3301      	adds	r3, #1
 801a08c:	81fb      	strh	r3, [r7, #14]
 801a08e:	e002      	b.n	801a096 <MAP_makeContourMap_dijkstra_modoki+0x3c2>
							}else{
								uc_new = uc_dase + 2;
 801a090:	8a3b      	ldrh	r3, [r7, #16]
 801a092:	3302      	adds	r3, #2
 801a094:	81fb      	strh	r3, [r7, #14]
							}
							if (us_Cmap[y][x + 1] > uc_new) {
 801a096:	8aba      	ldrh	r2, [r7, #20]
 801a098:	8afb      	ldrh	r3, [r7, #22]
 801a09a:	3301      	adds	r3, #1
 801a09c:	491f      	ldr	r1, [pc, #124]	@ (801a11c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 801a09e:	0152      	lsls	r2, r2, #5
 801a0a0:	4413      	add	r3, r2
 801a0a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801a0a6:	89fa      	ldrh	r2, [r7, #14]
 801a0a8:	429a      	cmp	r2, r3
 801a0aa:	d21f      	bcs.n	801a0ec <MAP_makeContourMap_dijkstra_modoki+0x418>
								us_Cmap[y][x + 1] = uc_new;
 801a0ac:	8aba      	ldrh	r2, [r7, #20]
 801a0ae:	8afb      	ldrh	r3, [r7, #22]
 801a0b0:	3301      	adds	r3, #1
 801a0b2:	491a      	ldr	r1, [pc, #104]	@ (801a11c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 801a0b4:	0152      	lsls	r2, r2, #5
 801a0b6:	4413      	add	r3, r2
 801a0b8:	89fa      	ldrh	r2, [r7, #14]
 801a0ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								g_MapDirection[y][x+1] |= 0x40;
 801a0be:	8aba      	ldrh	r2, [r7, #20]
 801a0c0:	8afb      	ldrh	r3, [r7, #22]
 801a0c2:	3301      	adds	r3, #1
 801a0c4:	4918      	ldr	r1, [pc, #96]	@ (801a128 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 801a0c6:	0152      	lsls	r2, r2, #5
 801a0c8:	440a      	add	r2, r1
 801a0ca:	4413      	add	r3, r2
 801a0cc:	7819      	ldrb	r1, [r3, #0]
 801a0ce:	8aba      	ldrh	r2, [r7, #20]
 801a0d0:	8afb      	ldrh	r3, [r7, #22]
 801a0d2:	3301      	adds	r3, #1
 801a0d4:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 801a0d8:	b2c8      	uxtb	r0, r1
 801a0da:	4913      	ldr	r1, [pc, #76]	@ (801a128 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 801a0dc:	0152      	lsls	r2, r2, #5
 801a0de:	440a      	add	r2, r1
 801a0e0:	4413      	add	r3, r2
 801a0e2:	4602      	mov	r2, r0
 801a0e4:	701a      	strb	r2, [r3, #0]
								uc_level++;
 801a0e6:	89bb      	ldrh	r3, [r7, #12]
 801a0e8:	3301      	adds	r3, #1
 801a0ea:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x44) == 0x40) && (y != 0)) {
 801a0ec:	7afb      	ldrb	r3, [r7, #11]
 801a0ee:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801a0f2:	2b40      	cmp	r3, #64	@ 0x40
 801a0f4:	d148      	bne.n	801a188 <MAP_makeContourMap_dijkstra_modoki+0x4b4>
 801a0f6:	8abb      	ldrh	r3, [r7, #20]
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d045      	beq.n	801a188 <MAP_makeContourMap_dijkstra_modoki+0x4b4>
							if((g_MapDirection[y][x]&0x01) == 0x01){
 801a0fc:	8aba      	ldrh	r2, [r7, #20]
 801a0fe:	8afb      	ldrh	r3, [r7, #22]
 801a100:	4909      	ldr	r1, [pc, #36]	@ (801a128 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 801a102:	0152      	lsls	r2, r2, #5
 801a104:	440a      	add	r2, r1
 801a106:	4413      	add	r3, r2
 801a108:	781b      	ldrb	r3, [r3, #0]
 801a10a:	f003 0301 	and.w	r3, r3, #1
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d00c      	beq.n	801a12c <MAP_makeContourMap_dijkstra_modoki+0x458>
								uc_new = uc_dase + 1;
 801a112:	8a3b      	ldrh	r3, [r7, #16]
 801a114:	3301      	adds	r3, #1
 801a116:	81fb      	strh	r3, [r7, #14]
 801a118:	e00b      	b.n	801a132 <MAP_makeContourMap_dijkstra_modoki+0x45e>
 801a11a:	bf00      	nop
 801a11c:	2001ada0 	.word	0x2001ada0
 801a120:	2001b5a0 	.word	0x2001b5a0
 801a124:	2000001a 	.word	0x2000001a
 801a128:	2001b9a0 	.word	0x2001b9a0
							}else{
								uc_new = uc_dase + 2;
 801a12c:	8a3b      	ldrh	r3, [r7, #16]
 801a12e:	3302      	adds	r3, #2
 801a130:	81fb      	strh	r3, [r7, #14]
							}
							if (us_Cmap[y - 1][x] > uc_new) {
 801a132:	8abb      	ldrh	r3, [r7, #20]
 801a134:	1e5a      	subs	r2, r3, #1
 801a136:	8afb      	ldrh	r3, [r7, #22]
 801a138:	4949      	ldr	r1, [pc, #292]	@ (801a260 <MAP_makeContourMap_dijkstra_modoki+0x58c>)
 801a13a:	0152      	lsls	r2, r2, #5
 801a13c:	4413      	add	r3, r2
 801a13e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801a142:	89fa      	ldrh	r2, [r7, #14]
 801a144:	429a      	cmp	r2, r3
 801a146:	d21f      	bcs.n	801a188 <MAP_makeContourMap_dijkstra_modoki+0x4b4>
								us_Cmap[y - 1][x] = uc_new;
 801a148:	8abb      	ldrh	r3, [r7, #20]
 801a14a:	1e5a      	subs	r2, r3, #1
 801a14c:	8afb      	ldrh	r3, [r7, #22]
 801a14e:	4944      	ldr	r1, [pc, #272]	@ (801a260 <MAP_makeContourMap_dijkstra_modoki+0x58c>)
 801a150:	0152      	lsls	r2, r2, #5
 801a152:	4413      	add	r3, r2
 801a154:	89fa      	ldrh	r2, [r7, #14]
 801a156:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								g_MapDirection[y-1][x] |= 0x01;
 801a15a:	8abb      	ldrh	r3, [r7, #20]
 801a15c:	1e5a      	subs	r2, r3, #1
 801a15e:	8afb      	ldrh	r3, [r7, #22]
 801a160:	4940      	ldr	r1, [pc, #256]	@ (801a264 <MAP_makeContourMap_dijkstra_modoki+0x590>)
 801a162:	0152      	lsls	r2, r2, #5
 801a164:	440a      	add	r2, r1
 801a166:	4413      	add	r3, r2
 801a168:	7819      	ldrb	r1, [r3, #0]
 801a16a:	8abb      	ldrh	r3, [r7, #20]
 801a16c:	1e5a      	subs	r2, r3, #1
 801a16e:	8afb      	ldrh	r3, [r7, #22]
 801a170:	f041 0101 	orr.w	r1, r1, #1
 801a174:	b2c8      	uxtb	r0, r1
 801a176:	493b      	ldr	r1, [pc, #236]	@ (801a264 <MAP_makeContourMap_dijkstra_modoki+0x590>)
 801a178:	0152      	lsls	r2, r2, #5
 801a17a:	440a      	add	r2, r1
 801a17c:	4413      	add	r3, r2
 801a17e:	4602      	mov	r2, r0
 801a180:	701a      	strb	r2, [r3, #0]
								uc_level++;
 801a182:	89bb      	ldrh	r3, [r7, #12]
 801a184:	3301      	adds	r3, #1
 801a186:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x88) == 0x80) && (x != 0)) {
 801a188:	7afb      	ldrb	r3, [r7, #11]
 801a18a:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 801a18e:	2b80      	cmp	r3, #128	@ 0x80
 801a190:	d13f      	bne.n	801a212 <MAP_makeContourMap_dijkstra_modoki+0x53e>
 801a192:	8afb      	ldrh	r3, [r7, #22]
 801a194:	2b00      	cmp	r3, #0
 801a196:	d03c      	beq.n	801a212 <MAP_makeContourMap_dijkstra_modoki+0x53e>
							if((g_MapDirection[y][x]&0x04) == 0x04){
 801a198:	8aba      	ldrh	r2, [r7, #20]
 801a19a:	8afb      	ldrh	r3, [r7, #22]
 801a19c:	4931      	ldr	r1, [pc, #196]	@ (801a264 <MAP_makeContourMap_dijkstra_modoki+0x590>)
 801a19e:	0152      	lsls	r2, r2, #5
 801a1a0:	440a      	add	r2, r1
 801a1a2:	4413      	add	r3, r2
 801a1a4:	781b      	ldrb	r3, [r3, #0]
 801a1a6:	f003 0304 	and.w	r3, r3, #4
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d003      	beq.n	801a1b6 <MAP_makeContourMap_dijkstra_modoki+0x4e2>
								uc_new = uc_dase + 1;
 801a1ae:	8a3b      	ldrh	r3, [r7, #16]
 801a1b0:	3301      	adds	r3, #1
 801a1b2:	81fb      	strh	r3, [r7, #14]
 801a1b4:	e002      	b.n	801a1bc <MAP_makeContourMap_dijkstra_modoki+0x4e8>
							}else{
								uc_new = uc_dase + 2;
 801a1b6:	8a3b      	ldrh	r3, [r7, #16]
 801a1b8:	3302      	adds	r3, #2
 801a1ba:	81fb      	strh	r3, [r7, #14]
							}
							if (us_Cmap[y][x - 1] > uc_new) {
 801a1bc:	8aba      	ldrh	r2, [r7, #20]
 801a1be:	8afb      	ldrh	r3, [r7, #22]
 801a1c0:	3b01      	subs	r3, #1
 801a1c2:	4927      	ldr	r1, [pc, #156]	@ (801a260 <MAP_makeContourMap_dijkstra_modoki+0x58c>)
 801a1c4:	0152      	lsls	r2, r2, #5
 801a1c6:	4413      	add	r3, r2
 801a1c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801a1cc:	89fa      	ldrh	r2, [r7, #14]
 801a1ce:	429a      	cmp	r2, r3
 801a1d0:	d21f      	bcs.n	801a212 <MAP_makeContourMap_dijkstra_modoki+0x53e>
								us_Cmap[y][x - 1] = uc_new;
 801a1d2:	8aba      	ldrh	r2, [r7, #20]
 801a1d4:	8afb      	ldrh	r3, [r7, #22]
 801a1d6:	3b01      	subs	r3, #1
 801a1d8:	4921      	ldr	r1, [pc, #132]	@ (801a260 <MAP_makeContourMap_dijkstra_modoki+0x58c>)
 801a1da:	0152      	lsls	r2, r2, #5
 801a1dc:	4413      	add	r3, r2
 801a1de:	89fa      	ldrh	r2, [r7, #14]
 801a1e0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								g_MapDirection[y][x-1] |= 0x04;
 801a1e4:	8aba      	ldrh	r2, [r7, #20]
 801a1e6:	8afb      	ldrh	r3, [r7, #22]
 801a1e8:	3b01      	subs	r3, #1
 801a1ea:	491e      	ldr	r1, [pc, #120]	@ (801a264 <MAP_makeContourMap_dijkstra_modoki+0x590>)
 801a1ec:	0152      	lsls	r2, r2, #5
 801a1ee:	440a      	add	r2, r1
 801a1f0:	4413      	add	r3, r2
 801a1f2:	7819      	ldrb	r1, [r3, #0]
 801a1f4:	8aba      	ldrh	r2, [r7, #20]
 801a1f6:	8afb      	ldrh	r3, [r7, #22]
 801a1f8:	3b01      	subs	r3, #1
 801a1fa:	f041 0104 	orr.w	r1, r1, #4
 801a1fe:	b2c8      	uxtb	r0, r1
 801a200:	4918      	ldr	r1, [pc, #96]	@ (801a264 <MAP_makeContourMap_dijkstra_modoki+0x590>)
 801a202:	0152      	lsls	r2, r2, #5
 801a204:	440a      	add	r2, r1
 801a206:	4413      	add	r3, r2
 801a208:	4602      	mov	r2, r0
 801a20a:	701a      	strb	r2, [r3, #0]
								uc_level++;
 801a20c:	89bb      	ldrh	r3, [r7, #12]
 801a20e:	3301      	adds	r3, #1
 801a210:	81bb      	strh	r3, [r7, #12]
							}
						}
					}
				}
				if(uc_dase != 4095)uc_level++;
 801a212:	8a3b      	ldrh	r3, [r7, #16]
 801a214:	f640 72ff 	movw	r2, #4095	@ 0xfff
 801a218:	4293      	cmp	r3, r2
 801a21a:	d002      	beq.n	801a222 <MAP_makeContourMap_dijkstra_modoki+0x54e>
 801a21c:	89bb      	ldrh	r3, [r7, #12]
 801a21e:	3301      	adds	r3, #1
 801a220:	81bb      	strh	r3, [r7, #12]
			for (x = 0; x < MAP_X_SIZE; x++) {
 801a222:	8afb      	ldrh	r3, [r7, #22]
 801a224:	3301      	adds	r3, #1
 801a226:	82fb      	strh	r3, [r7, #22]
 801a228:	8afb      	ldrh	r3, [r7, #22]
 801a22a:	2b1f      	cmp	r3, #31
 801a22c:	f67f ae32 	bls.w	8019e94 <MAP_makeContourMap_dijkstra_modoki+0x1c0>
 801a230:	e000      	b.n	801a234 <MAP_makeContourMap_dijkstra_modoki+0x560>
					if (uc_max_x+1 < x) break;
 801a232:	bf00      	nop
		for (y = 0; y < MAP_Y_SIZE; y++) {
 801a234:	8abb      	ldrh	r3, [r7, #20]
 801a236:	3301      	adds	r3, #1
 801a238:	82bb      	strh	r3, [r7, #20]
 801a23a:	8abb      	ldrh	r3, [r7, #20]
 801a23c:	2b1f      	cmp	r3, #31
 801a23e:	f67f ae11 	bls.w	8019e64 <MAP_makeContourMap_dijkstra_modoki+0x190>
 801a242:	e000      	b.n	801a246 <MAP_makeContourMap_dijkstra_modoki+0x572>
			if (uc_max_y+1 < y) break;
 801a244:	bf00      	nop
			}
		}
		uc_dase = uc_dase + 1;
 801a246:	8a3b      	ldrh	r3, [r7, #16]
 801a248:	3301      	adds	r3, #1
 801a24a:	823b      	strh	r3, [r7, #16]
	} while (uc_level != 0);
 801a24c:	89bb      	ldrh	r3, [r7, #12]
 801a24e:	2b00      	cmp	r3, #0
 801a250:	f47f ae00 	bne.w	8019e54 <MAP_makeContourMap_dijkstra_modoki+0x180>

}
 801a254:	bf00      	nop
 801a256:	bf00      	nop
 801a258:	3718      	adds	r7, #24
 801a25a:	46bd      	mov	sp, r7
 801a25c:	bd80      	pop	{r7, pc}
 801a25e:	bf00      	nop
 801a260:	2001ada0 	.word	0x2001ada0
 801a264:	2001b9a0 	.word	0x2001b9a0

0801a268 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 801a268:	480d      	ldr	r0, [pc, #52]	@ (801a2a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801a26a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 801a26c:	f7ea fd6e 	bl	8004d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801a270:	480c      	ldr	r0, [pc, #48]	@ (801a2a4 <LoopForever+0x6>)
  ldr r1, =_edata
 801a272:	490d      	ldr	r1, [pc, #52]	@ (801a2a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 801a274:	4a0d      	ldr	r2, [pc, #52]	@ (801a2ac <LoopForever+0xe>)
  movs r3, #0
 801a276:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 801a278:	e002      	b.n	801a280 <LoopCopyDataInit>

0801a27a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801a27a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801a27c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801a27e:	3304      	adds	r3, #4

0801a280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801a280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801a282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801a284:	d3f9      	bcc.n	801a27a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801a286:	4a0a      	ldr	r2, [pc, #40]	@ (801a2b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 801a288:	4c0a      	ldr	r4, [pc, #40]	@ (801a2b4 <LoopForever+0x16>)
  movs r3, #0
 801a28a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801a28c:	e001      	b.n	801a292 <LoopFillZerobss>

0801a28e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801a28e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801a290:	3204      	adds	r2, #4

0801a292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801a292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801a294:	d3fb      	bcc.n	801a28e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801a296:	f003 ffcd 	bl	801e234 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801a29a:	f7e8 f901 	bl	80024a0 <main>

0801a29e <LoopForever>:

LoopForever:
    b LoopForever
 801a29e:	e7fe      	b.n	801a29e <LoopForever>
  ldr   r0, =_estack
 801a2a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 801a2a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801a2a8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 801a2ac:	08022bb8 	.word	0x08022bb8
  ldr r2, =_sbss
 801a2b0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 801a2b4:	2001bef0 	.word	0x2001bef0

0801a2b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801a2b8:	e7fe      	b.n	801a2b8 <ADC1_2_IRQHandler>

0801a2ba <LL_ADC_REG_SetSequencerLength>:
{
 801a2ba:	b480      	push	{r7}
 801a2bc:	b083      	sub	sp, #12
 801a2be:	af00      	add	r7, sp, #0
 801a2c0:	6078      	str	r0, [r7, #4]
 801a2c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a2c8:	f023 020f 	bic.w	r2, r3, #15
 801a2cc:	683b      	ldr	r3, [r7, #0]
 801a2ce:	431a      	orrs	r2, r3
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 801a2d4:	bf00      	nop
 801a2d6:	370c      	adds	r7, #12
 801a2d8:	46bd      	mov	sp, r7
 801a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2de:	4770      	bx	lr

0801a2e0 <LL_ADC_IsEnabled>:
{
 801a2e0:	b480      	push	{r7}
 801a2e2:	b083      	sub	sp, #12
 801a2e4:	af00      	add	r7, sp, #0
 801a2e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	689b      	ldr	r3, [r3, #8]
 801a2ec:	f003 0301 	and.w	r3, r3, #1
 801a2f0:	2b01      	cmp	r3, #1
 801a2f2:	d101      	bne.n	801a2f8 <LL_ADC_IsEnabled+0x18>
 801a2f4:	2301      	movs	r3, #1
 801a2f6:	e000      	b.n	801a2fa <LL_ADC_IsEnabled+0x1a>
 801a2f8:	2300      	movs	r3, #0
}
 801a2fa:	4618      	mov	r0, r3
 801a2fc:	370c      	adds	r7, #12
 801a2fe:	46bd      	mov	sp, r7
 801a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a304:	4770      	bx	lr
	...

0801a308 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, const LL_ADC_CommonInitTypeDef *pADC_CommonInitStruct)
{
 801a308:	b590      	push	{r4, r7, lr}
 801a30a:	b085      	sub	sp, #20
 801a30c:	af00      	add	r7, sp, #0
 801a30e:	6078      	str	r0, [r7, #4]
 801a310:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 801a312:	2300      	movs	r3, #0
 801a314:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	4a27      	ldr	r2, [pc, #156]	@ (801a3b8 <LL_ADC_CommonInit+0xb0>)
 801a31a:	4293      	cmp	r3, r2
 801a31c:	d10f      	bne.n	801a33e <LL_ADC_CommonInit+0x36>
 801a31e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 801a322:	f7ff ffdd 	bl	801a2e0 <LL_ADC_IsEnabled>
 801a326:	4604      	mov	r4, r0
 801a328:	4824      	ldr	r0, [pc, #144]	@ (801a3bc <LL_ADC_CommonInit+0xb4>)
 801a32a:	f7ff ffd9 	bl	801a2e0 <LL_ADC_IsEnabled>
 801a32e:	4603      	mov	r3, r0
 801a330:	4323      	orrs	r3, r4
 801a332:	2b00      	cmp	r3, #0
 801a334:	bf0c      	ite	eq
 801a336:	2301      	moveq	r3, #1
 801a338:	2300      	movne	r3, #0
 801a33a:	b2db      	uxtb	r3, r3
 801a33c:	e012      	b.n	801a364 <LL_ADC_CommonInit+0x5c>
 801a33e:	4820      	ldr	r0, [pc, #128]	@ (801a3c0 <LL_ADC_CommonInit+0xb8>)
 801a340:	f7ff ffce 	bl	801a2e0 <LL_ADC_IsEnabled>
 801a344:	4604      	mov	r4, r0
 801a346:	481f      	ldr	r0, [pc, #124]	@ (801a3c4 <LL_ADC_CommonInit+0xbc>)
 801a348:	f7ff ffca 	bl	801a2e0 <LL_ADC_IsEnabled>
 801a34c:	4603      	mov	r3, r0
 801a34e:	431c      	orrs	r4, r3
 801a350:	481d      	ldr	r0, [pc, #116]	@ (801a3c8 <LL_ADC_CommonInit+0xc0>)
 801a352:	f7ff ffc5 	bl	801a2e0 <LL_ADC_IsEnabled>
 801a356:	4603      	mov	r3, r0
 801a358:	4323      	orrs	r3, r4
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	bf0c      	ite	eq
 801a35e:	2301      	moveq	r3, #1
 801a360:	2300      	movne	r3, #0
 801a362:	b2db      	uxtb	r3, r3
 801a364:	2b00      	cmp	r3, #0
 801a366:	d020      	beq.n	801a3aa <LL_ADC_CommonInit+0xa2>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (pADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 801a368:	683b      	ldr	r3, [r7, #0]
 801a36a:	685b      	ldr	r3, [r3, #4]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d012      	beq.n	801a396 <LL_ADC_CommonInit+0x8e>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	689a      	ldr	r2, [r3, #8]
 801a374:	4b15      	ldr	r3, [pc, #84]	@ (801a3cc <LL_ADC_CommonInit+0xc4>)
 801a376:	4013      	ands	r3, r2
 801a378:	683a      	ldr	r2, [r7, #0]
 801a37a:	6811      	ldr	r1, [r2, #0]
 801a37c:	683a      	ldr	r2, [r7, #0]
 801a37e:	6852      	ldr	r2, [r2, #4]
 801a380:	4311      	orrs	r1, r2
 801a382:	683a      	ldr	r2, [r7, #0]
 801a384:	6892      	ldr	r2, [r2, #8]
 801a386:	4311      	orrs	r1, r2
 801a388:	683a      	ldr	r2, [r7, #0]
 801a38a:	68d2      	ldr	r2, [r2, #12]
 801a38c:	430a      	orrs	r2, r1
 801a38e:	431a      	orrs	r2, r3
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	609a      	str	r2, [r3, #8]
 801a394:	e00b      	b.n	801a3ae <LL_ADC_CommonInit+0xa6>
                 | pADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	689a      	ldr	r2, [r3, #8]
 801a39a:	4b0c      	ldr	r3, [pc, #48]	@ (801a3cc <LL_ADC_CommonInit+0xc4>)
 801a39c:	4013      	ands	r3, r2
 801a39e:	683a      	ldr	r2, [r7, #0]
 801a3a0:	6812      	ldr	r2, [r2, #0]
 801a3a2:	431a      	orrs	r2, r3
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	609a      	str	r2, [r3, #8]
 801a3a8:	e001      	b.n	801a3ae <LL_ADC_CommonInit+0xa6>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 801a3aa:	2301      	movs	r3, #1
 801a3ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801a3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 801a3b0:	4618      	mov	r0, r3
 801a3b2:	3714      	adds	r7, #20
 801a3b4:	46bd      	mov	sp, r7
 801a3b6:	bd90      	pop	{r4, r7, pc}
 801a3b8:	50000300 	.word	0x50000300
 801a3bc:	50000100 	.word	0x50000100
 801a3c0:	50000400 	.word	0x50000400
 801a3c4:	50000500 	.word	0x50000500
 801a3c8:	50000600 	.word	0x50000600
 801a3cc:	ffc030e0 	.word	0xffc030e0

0801a3d0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, const LL_ADC_InitTypeDef *pADC_InitStruct)
{
 801a3d0:	b580      	push	{r7, lr}
 801a3d2:	b084      	sub	sp, #16
 801a3d4:	af00      	add	r7, sp, #0
 801a3d6:	6078      	str	r0, [r7, #4]
 801a3d8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 801a3da:	2300      	movs	r3, #0
 801a3dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(pADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(pADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 801a3de:	6878      	ldr	r0, [r7, #4]
 801a3e0:	f7ff ff7e 	bl	801a2e0 <LL_ADC_IsEnabled>
 801a3e4:	4603      	mov	r3, r0
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d111      	bne.n	801a40e <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	68db      	ldr	r3, [r3, #12]
 801a3ee:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 801a3f2:	f023 0318 	bic.w	r3, r3, #24
 801a3f6:	683a      	ldr	r2, [r7, #0]
 801a3f8:	6811      	ldr	r1, [r2, #0]
 801a3fa:	683a      	ldr	r2, [r7, #0]
 801a3fc:	6852      	ldr	r2, [r2, #4]
 801a3fe:	4311      	orrs	r1, r2
 801a400:	683a      	ldr	r2, [r7, #0]
 801a402:	6892      	ldr	r2, [r2, #8]
 801a404:	430a      	orrs	r2, r1
 801a406:	431a      	orrs	r2, r3
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	60da      	str	r2, [r3, #12]
 801a40c:	e001      	b.n	801a412 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 801a40e:	2301      	movs	r3, #1
 801a410:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801a412:	7bfb      	ldrb	r3, [r7, #15]
}
 801a414:	4618      	mov	r0, r3
 801a416:	3710      	adds	r7, #16
 801a418:	46bd      	mov	sp, r7
 801a41a:	bd80      	pop	{r7, pc}

0801a41c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, const LL_ADC_REG_InitTypeDef *pADC_RegInitStruct)
{
 801a41c:	b580      	push	{r7, lr}
 801a41e:	b084      	sub	sp, #16
 801a420:	af00      	add	r7, sp, #0
 801a422:	6078      	str	r0, [r7, #4]
 801a424:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 801a426:	2300      	movs	r3, #0
 801a428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(pADC_RegInitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(pADC_RegInitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 801a42a:	6878      	ldr	r0, [r7, #4]
 801a42c:	f7ff ff58 	bl	801a2e0 <LL_ADC_IsEnabled>
 801a430:	4603      	mov	r3, r0
 801a432:	2b00      	cmp	r3, #0
 801a434:	d132      	bne.n	801a49c <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (pADC_RegInitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 801a436:	683b      	ldr	r3, [r7, #0]
 801a438:	685b      	ldr	r3, [r3, #4]
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d015      	beq.n	801a46a <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	68da      	ldr	r2, [r3, #12]
 801a442:	4b1a      	ldr	r3, [pc, #104]	@ (801a4ac <LL_ADC_REG_Init+0x90>)
 801a444:	4013      	ands	r3, r2
 801a446:	683a      	ldr	r2, [r7, #0]
 801a448:	6811      	ldr	r1, [r2, #0]
 801a44a:	683a      	ldr	r2, [r7, #0]
 801a44c:	6892      	ldr	r2, [r2, #8]
 801a44e:	4311      	orrs	r1, r2
 801a450:	683a      	ldr	r2, [r7, #0]
 801a452:	68d2      	ldr	r2, [r2, #12]
 801a454:	4311      	orrs	r1, r2
 801a456:	683a      	ldr	r2, [r7, #0]
 801a458:	6912      	ldr	r2, [r2, #16]
 801a45a:	4311      	orrs	r1, r2
 801a45c:	683a      	ldr	r2, [r7, #0]
 801a45e:	6952      	ldr	r2, [r2, #20]
 801a460:	430a      	orrs	r2, r1
 801a462:	431a      	orrs	r2, r3
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	60da      	str	r2, [r3, #12]
 801a468:	e011      	b.n	801a48e <LL_ADC_REG_Init+0x72>
                 | pADC_RegInitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	68da      	ldr	r2, [r3, #12]
 801a46e:	4b0f      	ldr	r3, [pc, #60]	@ (801a4ac <LL_ADC_REG_Init+0x90>)
 801a470:	4013      	ands	r3, r2
 801a472:	683a      	ldr	r2, [r7, #0]
 801a474:	6811      	ldr	r1, [r2, #0]
 801a476:	683a      	ldr	r2, [r7, #0]
 801a478:	68d2      	ldr	r2, [r2, #12]
 801a47a:	4311      	orrs	r1, r2
 801a47c:	683a      	ldr	r2, [r7, #0]
 801a47e:	6912      	ldr	r2, [r2, #16]
 801a480:	4311      	orrs	r1, r2
 801a482:	683a      	ldr	r2, [r7, #0]
 801a484:	6952      	ldr	r2, [r2, #20]
 801a486:	430a      	orrs	r2, r1
 801a488:	431a      	orrs	r2, r3
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	60da      	str	r2, [r3, #12]
                 | pADC_RegInitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, pADC_RegInitStruct->SequencerLength);
 801a48e:	683b      	ldr	r3, [r7, #0]
 801a490:	685b      	ldr	r3, [r3, #4]
 801a492:	4619      	mov	r1, r3
 801a494:	6878      	ldr	r0, [r7, #4]
 801a496:	f7ff ff10 	bl	801a2ba <LL_ADC_REG_SetSequencerLength>
 801a49a:	e001      	b.n	801a4a0 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 801a49c:	2301      	movs	r3, #1
 801a49e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 801a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	3710      	adds	r7, #16
 801a4a6:	46bd      	mov	sp, r7
 801a4a8:	bd80      	pop	{r7, pc}
 801a4aa:	bf00      	nop
 801a4ac:	fff0c01c 	.word	0xfff0c01c

0801a4b0 <LL_GPIO_SetPinMode>:
{
 801a4b0:	b480      	push	{r7}
 801a4b2:	b08b      	sub	sp, #44	@ 0x2c
 801a4b4:	af00      	add	r7, sp, #0
 801a4b6:	60f8      	str	r0, [r7, #12]
 801a4b8:	60b9      	str	r1, [r7, #8]
 801a4ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	681a      	ldr	r2, [r3, #0]
 801a4c0:	68bb      	ldr	r3, [r7, #8]
 801a4c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a4c4:	697b      	ldr	r3, [r7, #20]
 801a4c6:	fa93 f3a3 	rbit	r3, r3
 801a4ca:	613b      	str	r3, [r7, #16]
  return result;
 801a4cc:	693b      	ldr	r3, [r7, #16]
 801a4ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801a4d0:	69bb      	ldr	r3, [r7, #24]
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d101      	bne.n	801a4da <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 801a4d6:	2320      	movs	r3, #32
 801a4d8:	e003      	b.n	801a4e2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801a4da:	69bb      	ldr	r3, [r7, #24]
 801a4dc:	fab3 f383 	clz	r3, r3
 801a4e0:	b2db      	uxtb	r3, r3
 801a4e2:	005b      	lsls	r3, r3, #1
 801a4e4:	2103      	movs	r1, #3
 801a4e6:	fa01 f303 	lsl.w	r3, r1, r3
 801a4ea:	43db      	mvns	r3, r3
 801a4ec:	401a      	ands	r2, r3
 801a4ee:	68bb      	ldr	r3, [r7, #8]
 801a4f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a4f2:	6a3b      	ldr	r3, [r7, #32]
 801a4f4:	fa93 f3a3 	rbit	r3, r3
 801a4f8:	61fb      	str	r3, [r7, #28]
  return result;
 801a4fa:	69fb      	ldr	r3, [r7, #28]
 801a4fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801a4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a500:	2b00      	cmp	r3, #0
 801a502:	d101      	bne.n	801a508 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 801a504:	2320      	movs	r3, #32
 801a506:	e003      	b.n	801a510 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 801a508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a50a:	fab3 f383 	clz	r3, r3
 801a50e:	b2db      	uxtb	r3, r3
 801a510:	005b      	lsls	r3, r3, #1
 801a512:	6879      	ldr	r1, [r7, #4]
 801a514:	fa01 f303 	lsl.w	r3, r1, r3
 801a518:	431a      	orrs	r2, r3
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	601a      	str	r2, [r3, #0]
}
 801a51e:	bf00      	nop
 801a520:	372c      	adds	r7, #44	@ 0x2c
 801a522:	46bd      	mov	sp, r7
 801a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a528:	4770      	bx	lr

0801a52a <LL_GPIO_SetPinOutputType>:
{
 801a52a:	b480      	push	{r7}
 801a52c:	b085      	sub	sp, #20
 801a52e:	af00      	add	r7, sp, #0
 801a530:	60f8      	str	r0, [r7, #12]
 801a532:	60b9      	str	r1, [r7, #8]
 801a534:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801a536:	68fb      	ldr	r3, [r7, #12]
 801a538:	685a      	ldr	r2, [r3, #4]
 801a53a:	68bb      	ldr	r3, [r7, #8]
 801a53c:	43db      	mvns	r3, r3
 801a53e:	401a      	ands	r2, r3
 801a540:	68bb      	ldr	r3, [r7, #8]
 801a542:	6879      	ldr	r1, [r7, #4]
 801a544:	fb01 f303 	mul.w	r3, r1, r3
 801a548:	431a      	orrs	r2, r3
 801a54a:	68fb      	ldr	r3, [r7, #12]
 801a54c:	605a      	str	r2, [r3, #4]
}
 801a54e:	bf00      	nop
 801a550:	3714      	adds	r7, #20
 801a552:	46bd      	mov	sp, r7
 801a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a558:	4770      	bx	lr

0801a55a <LL_GPIO_SetPinSpeed>:
{
 801a55a:	b480      	push	{r7}
 801a55c:	b08b      	sub	sp, #44	@ 0x2c
 801a55e:	af00      	add	r7, sp, #0
 801a560:	60f8      	str	r0, [r7, #12]
 801a562:	60b9      	str	r1, [r7, #8]
 801a564:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	689a      	ldr	r2, [r3, #8]
 801a56a:	68bb      	ldr	r3, [r7, #8]
 801a56c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a56e:	697b      	ldr	r3, [r7, #20]
 801a570:	fa93 f3a3 	rbit	r3, r3
 801a574:	613b      	str	r3, [r7, #16]
  return result;
 801a576:	693b      	ldr	r3, [r7, #16]
 801a578:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801a57a:	69bb      	ldr	r3, [r7, #24]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d101      	bne.n	801a584 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 801a580:	2320      	movs	r3, #32
 801a582:	e003      	b.n	801a58c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 801a584:	69bb      	ldr	r3, [r7, #24]
 801a586:	fab3 f383 	clz	r3, r3
 801a58a:	b2db      	uxtb	r3, r3
 801a58c:	005b      	lsls	r3, r3, #1
 801a58e:	2103      	movs	r1, #3
 801a590:	fa01 f303 	lsl.w	r3, r1, r3
 801a594:	43db      	mvns	r3, r3
 801a596:	401a      	ands	r2, r3
 801a598:	68bb      	ldr	r3, [r7, #8]
 801a59a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a59c:	6a3b      	ldr	r3, [r7, #32]
 801a59e:	fa93 f3a3 	rbit	r3, r3
 801a5a2:	61fb      	str	r3, [r7, #28]
  return result;
 801a5a4:	69fb      	ldr	r3, [r7, #28]
 801a5a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801a5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d101      	bne.n	801a5b2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 801a5ae:	2320      	movs	r3, #32
 801a5b0:	e003      	b.n	801a5ba <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 801a5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5b4:	fab3 f383 	clz	r3, r3
 801a5b8:	b2db      	uxtb	r3, r3
 801a5ba:	005b      	lsls	r3, r3, #1
 801a5bc:	6879      	ldr	r1, [r7, #4]
 801a5be:	fa01 f303 	lsl.w	r3, r1, r3
 801a5c2:	431a      	orrs	r2, r3
 801a5c4:	68fb      	ldr	r3, [r7, #12]
 801a5c6:	609a      	str	r2, [r3, #8]
}
 801a5c8:	bf00      	nop
 801a5ca:	372c      	adds	r7, #44	@ 0x2c
 801a5cc:	46bd      	mov	sp, r7
 801a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5d2:	4770      	bx	lr

0801a5d4 <LL_GPIO_SetPinPull>:
{
 801a5d4:	b480      	push	{r7}
 801a5d6:	b08b      	sub	sp, #44	@ 0x2c
 801a5d8:	af00      	add	r7, sp, #0
 801a5da:	60f8      	str	r0, [r7, #12]
 801a5dc:	60b9      	str	r1, [r7, #8]
 801a5de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 801a5e0:	68fb      	ldr	r3, [r7, #12]
 801a5e2:	68da      	ldr	r2, [r3, #12]
 801a5e4:	68bb      	ldr	r3, [r7, #8]
 801a5e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a5e8:	697b      	ldr	r3, [r7, #20]
 801a5ea:	fa93 f3a3 	rbit	r3, r3
 801a5ee:	613b      	str	r3, [r7, #16]
  return result;
 801a5f0:	693b      	ldr	r3, [r7, #16]
 801a5f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801a5f4:	69bb      	ldr	r3, [r7, #24]
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d101      	bne.n	801a5fe <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 801a5fa:	2320      	movs	r3, #32
 801a5fc:	e003      	b.n	801a606 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801a5fe:	69bb      	ldr	r3, [r7, #24]
 801a600:	fab3 f383 	clz	r3, r3
 801a604:	b2db      	uxtb	r3, r3
 801a606:	005b      	lsls	r3, r3, #1
 801a608:	2103      	movs	r1, #3
 801a60a:	fa01 f303 	lsl.w	r3, r1, r3
 801a60e:	43db      	mvns	r3, r3
 801a610:	401a      	ands	r2, r3
 801a612:	68bb      	ldr	r3, [r7, #8]
 801a614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a616:	6a3b      	ldr	r3, [r7, #32]
 801a618:	fa93 f3a3 	rbit	r3, r3
 801a61c:	61fb      	str	r3, [r7, #28]
  return result;
 801a61e:	69fb      	ldr	r3, [r7, #28]
 801a620:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801a622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a624:	2b00      	cmp	r3, #0
 801a626:	d101      	bne.n	801a62c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 801a628:	2320      	movs	r3, #32
 801a62a:	e003      	b.n	801a634 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801a62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a62e:	fab3 f383 	clz	r3, r3
 801a632:	b2db      	uxtb	r3, r3
 801a634:	005b      	lsls	r3, r3, #1
 801a636:	6879      	ldr	r1, [r7, #4]
 801a638:	fa01 f303 	lsl.w	r3, r1, r3
 801a63c:	431a      	orrs	r2, r3
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	60da      	str	r2, [r3, #12]
}
 801a642:	bf00      	nop
 801a644:	372c      	adds	r7, #44	@ 0x2c
 801a646:	46bd      	mov	sp, r7
 801a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a64c:	4770      	bx	lr

0801a64e <LL_GPIO_SetAFPin_0_7>:
{
 801a64e:	b480      	push	{r7}
 801a650:	b08b      	sub	sp, #44	@ 0x2c
 801a652:	af00      	add	r7, sp, #0
 801a654:	60f8      	str	r0, [r7, #12]
 801a656:	60b9      	str	r1, [r7, #8]
 801a658:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801a65a:	68fb      	ldr	r3, [r7, #12]
 801a65c:	6a1a      	ldr	r2, [r3, #32]
 801a65e:	68bb      	ldr	r3, [r7, #8]
 801a660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a662:	697b      	ldr	r3, [r7, #20]
 801a664:	fa93 f3a3 	rbit	r3, r3
 801a668:	613b      	str	r3, [r7, #16]
  return result;
 801a66a:	693b      	ldr	r3, [r7, #16]
 801a66c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801a66e:	69bb      	ldr	r3, [r7, #24]
 801a670:	2b00      	cmp	r3, #0
 801a672:	d101      	bne.n	801a678 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 801a674:	2320      	movs	r3, #32
 801a676:	e003      	b.n	801a680 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 801a678:	69bb      	ldr	r3, [r7, #24]
 801a67a:	fab3 f383 	clz	r3, r3
 801a67e:	b2db      	uxtb	r3, r3
 801a680:	009b      	lsls	r3, r3, #2
 801a682:	210f      	movs	r1, #15
 801a684:	fa01 f303 	lsl.w	r3, r1, r3
 801a688:	43db      	mvns	r3, r3
 801a68a:	401a      	ands	r2, r3
 801a68c:	68bb      	ldr	r3, [r7, #8]
 801a68e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a690:	6a3b      	ldr	r3, [r7, #32]
 801a692:	fa93 f3a3 	rbit	r3, r3
 801a696:	61fb      	str	r3, [r7, #28]
  return result;
 801a698:	69fb      	ldr	r3, [r7, #28]
 801a69a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801a69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d101      	bne.n	801a6a6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 801a6a2:	2320      	movs	r3, #32
 801a6a4:	e003      	b.n	801a6ae <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 801a6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6a8:	fab3 f383 	clz	r3, r3
 801a6ac:	b2db      	uxtb	r3, r3
 801a6ae:	009b      	lsls	r3, r3, #2
 801a6b0:	6879      	ldr	r1, [r7, #4]
 801a6b2:	fa01 f303 	lsl.w	r3, r1, r3
 801a6b6:	431a      	orrs	r2, r3
 801a6b8:	68fb      	ldr	r3, [r7, #12]
 801a6ba:	621a      	str	r2, [r3, #32]
}
 801a6bc:	bf00      	nop
 801a6be:	372c      	adds	r7, #44	@ 0x2c
 801a6c0:	46bd      	mov	sp, r7
 801a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6c6:	4770      	bx	lr

0801a6c8 <LL_GPIO_SetAFPin_8_15>:
{
 801a6c8:	b480      	push	{r7}
 801a6ca:	b08b      	sub	sp, #44	@ 0x2c
 801a6cc:	af00      	add	r7, sp, #0
 801a6ce:	60f8      	str	r0, [r7, #12]
 801a6d0:	60b9      	str	r1, [r7, #8]
 801a6d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 801a6d4:	68fb      	ldr	r3, [r7, #12]
 801a6d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a6d8:	68bb      	ldr	r3, [r7, #8]
 801a6da:	0a1b      	lsrs	r3, r3, #8
 801a6dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a6de:	697b      	ldr	r3, [r7, #20]
 801a6e0:	fa93 f3a3 	rbit	r3, r3
 801a6e4:	613b      	str	r3, [r7, #16]
  return result;
 801a6e6:	693b      	ldr	r3, [r7, #16]
 801a6e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801a6ea:	69bb      	ldr	r3, [r7, #24]
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d101      	bne.n	801a6f4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 801a6f0:	2320      	movs	r3, #32
 801a6f2:	e003      	b.n	801a6fc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 801a6f4:	69bb      	ldr	r3, [r7, #24]
 801a6f6:	fab3 f383 	clz	r3, r3
 801a6fa:	b2db      	uxtb	r3, r3
 801a6fc:	009b      	lsls	r3, r3, #2
 801a6fe:	210f      	movs	r1, #15
 801a700:	fa01 f303 	lsl.w	r3, r1, r3
 801a704:	43db      	mvns	r3, r3
 801a706:	401a      	ands	r2, r3
 801a708:	68bb      	ldr	r3, [r7, #8]
 801a70a:	0a1b      	lsrs	r3, r3, #8
 801a70c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a70e:	6a3b      	ldr	r3, [r7, #32]
 801a710:	fa93 f3a3 	rbit	r3, r3
 801a714:	61fb      	str	r3, [r7, #28]
  return result;
 801a716:	69fb      	ldr	r3, [r7, #28]
 801a718:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801a71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d101      	bne.n	801a724 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 801a720:	2320      	movs	r3, #32
 801a722:	e003      	b.n	801a72c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 801a724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a726:	fab3 f383 	clz	r3, r3
 801a72a:	b2db      	uxtb	r3, r3
 801a72c:	009b      	lsls	r3, r3, #2
 801a72e:	6879      	ldr	r1, [r7, #4]
 801a730:	fa01 f303 	lsl.w	r3, r1, r3
 801a734:	431a      	orrs	r2, r3
 801a736:	68fb      	ldr	r3, [r7, #12]
 801a738:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801a73a:	bf00      	nop
 801a73c:	372c      	adds	r7, #44	@ 0x2c
 801a73e:	46bd      	mov	sp, r7
 801a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a744:	4770      	bx	lr

0801a746 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801a746:	b580      	push	{r7, lr}
 801a748:	b088      	sub	sp, #32
 801a74a:	af00      	add	r7, sp, #0
 801a74c:	6078      	str	r0, [r7, #4]
 801a74e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 801a750:	683b      	ldr	r3, [r7, #0]
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a756:	693b      	ldr	r3, [r7, #16]
 801a758:	fa93 f3a3 	rbit	r3, r3
 801a75c:	60fb      	str	r3, [r7, #12]
  return result;
 801a75e:	68fb      	ldr	r3, [r7, #12]
 801a760:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 801a762:	697b      	ldr	r3, [r7, #20]
 801a764:	2b00      	cmp	r3, #0
 801a766:	d101      	bne.n	801a76c <LL_GPIO_Init+0x26>
    return 32U;
 801a768:	2320      	movs	r3, #32
 801a76a:	e003      	b.n	801a774 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 801a76c:	697b      	ldr	r3, [r7, #20]
 801a76e:	fab3 f383 	clz	r3, r3
 801a772:	b2db      	uxtb	r3, r3
 801a774:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801a776:	e048      	b.n	801a80a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 801a778:	683b      	ldr	r3, [r7, #0]
 801a77a:	681a      	ldr	r2, [r3, #0]
 801a77c:	2101      	movs	r1, #1
 801a77e:	69fb      	ldr	r3, [r7, #28]
 801a780:	fa01 f303 	lsl.w	r3, r1, r3
 801a784:	4013      	ands	r3, r2
 801a786:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 801a788:	69bb      	ldr	r3, [r7, #24]
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d03a      	beq.n	801a804 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801a78e:	683b      	ldr	r3, [r7, #0]
 801a790:	685b      	ldr	r3, [r3, #4]
 801a792:	2b01      	cmp	r3, #1
 801a794:	d003      	beq.n	801a79e <LL_GPIO_Init+0x58>
 801a796:	683b      	ldr	r3, [r7, #0]
 801a798:	685b      	ldr	r3, [r3, #4]
 801a79a:	2b02      	cmp	r3, #2
 801a79c:	d10e      	bne.n	801a7bc <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 801a79e:	683b      	ldr	r3, [r7, #0]
 801a7a0:	689b      	ldr	r3, [r3, #8]
 801a7a2:	461a      	mov	r2, r3
 801a7a4:	69b9      	ldr	r1, [r7, #24]
 801a7a6:	6878      	ldr	r0, [r7, #4]
 801a7a8:	f7ff fed7 	bl	801a55a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 801a7ac:	683b      	ldr	r3, [r7, #0]
 801a7ae:	6819      	ldr	r1, [r3, #0]
 801a7b0:	683b      	ldr	r3, [r7, #0]
 801a7b2:	68db      	ldr	r3, [r3, #12]
 801a7b4:	461a      	mov	r2, r3
 801a7b6:	6878      	ldr	r0, [r7, #4]
 801a7b8:	f7ff feb7 	bl	801a52a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 801a7bc:	683b      	ldr	r3, [r7, #0]
 801a7be:	691b      	ldr	r3, [r3, #16]
 801a7c0:	461a      	mov	r2, r3
 801a7c2:	69b9      	ldr	r1, [r7, #24]
 801a7c4:	6878      	ldr	r0, [r7, #4]
 801a7c6:	f7ff ff05 	bl	801a5d4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 801a7ca:	683b      	ldr	r3, [r7, #0]
 801a7cc:	685b      	ldr	r3, [r3, #4]
 801a7ce:	2b02      	cmp	r3, #2
 801a7d0:	d111      	bne.n	801a7f6 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 801a7d2:	69bb      	ldr	r3, [r7, #24]
 801a7d4:	2bff      	cmp	r3, #255	@ 0xff
 801a7d6:	d807      	bhi.n	801a7e8 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801a7d8:	683b      	ldr	r3, [r7, #0]
 801a7da:	695b      	ldr	r3, [r3, #20]
 801a7dc:	461a      	mov	r2, r3
 801a7de:	69b9      	ldr	r1, [r7, #24]
 801a7e0:	6878      	ldr	r0, [r7, #4]
 801a7e2:	f7ff ff34 	bl	801a64e <LL_GPIO_SetAFPin_0_7>
 801a7e6:	e006      	b.n	801a7f6 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801a7e8:	683b      	ldr	r3, [r7, #0]
 801a7ea:	695b      	ldr	r3, [r3, #20]
 801a7ec:	461a      	mov	r2, r3
 801a7ee:	69b9      	ldr	r1, [r7, #24]
 801a7f0:	6878      	ldr	r0, [r7, #4]
 801a7f2:	f7ff ff69 	bl	801a6c8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 801a7f6:	683b      	ldr	r3, [r7, #0]
 801a7f8:	685b      	ldr	r3, [r3, #4]
 801a7fa:	461a      	mov	r2, r3
 801a7fc:	69b9      	ldr	r1, [r7, #24]
 801a7fe:	6878      	ldr	r0, [r7, #4]
 801a800:	f7ff fe56 	bl	801a4b0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 801a804:	69fb      	ldr	r3, [r7, #28]
 801a806:	3301      	adds	r3, #1
 801a808:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801a80a:	683b      	ldr	r3, [r7, #0]
 801a80c:	681a      	ldr	r2, [r3, #0]
 801a80e:	69fb      	ldr	r3, [r7, #28]
 801a810:	fa22 f303 	lsr.w	r3, r2, r3
 801a814:	2b00      	cmp	r3, #0
 801a816:	d1af      	bne.n	801a778 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 801a818:	2300      	movs	r3, #0
}
 801a81a:	4618      	mov	r0, r3
 801a81c:	3720      	adds	r7, #32
 801a81e:	46bd      	mov	sp, r7
 801a820:	bd80      	pop	{r7, pc}
	...

0801a824 <LL_RCC_HSI_IsReady>:
{
 801a824:	b480      	push	{r7}
 801a826:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801a828:	4b07      	ldr	r3, [pc, #28]	@ (801a848 <LL_RCC_HSI_IsReady+0x24>)
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801a830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801a834:	d101      	bne.n	801a83a <LL_RCC_HSI_IsReady+0x16>
 801a836:	2301      	movs	r3, #1
 801a838:	e000      	b.n	801a83c <LL_RCC_HSI_IsReady+0x18>
 801a83a:	2300      	movs	r3, #0
}
 801a83c:	4618      	mov	r0, r3
 801a83e:	46bd      	mov	sp, r7
 801a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a844:	4770      	bx	lr
 801a846:	bf00      	nop
 801a848:	40021000 	.word	0x40021000

0801a84c <LL_RCC_LSE_IsReady>:
{
 801a84c:	b480      	push	{r7}
 801a84e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801a850:	4b07      	ldr	r3, [pc, #28]	@ (801a870 <LL_RCC_LSE_IsReady+0x24>)
 801a852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a856:	f003 0302 	and.w	r3, r3, #2
 801a85a:	2b02      	cmp	r3, #2
 801a85c:	d101      	bne.n	801a862 <LL_RCC_LSE_IsReady+0x16>
 801a85e:	2301      	movs	r3, #1
 801a860:	e000      	b.n	801a864 <LL_RCC_LSE_IsReady+0x18>
 801a862:	2300      	movs	r3, #0
}
 801a864:	4618      	mov	r0, r3
 801a866:	46bd      	mov	sp, r7
 801a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a86c:	4770      	bx	lr
 801a86e:	bf00      	nop
 801a870:	40021000 	.word	0x40021000

0801a874 <LL_RCC_GetSysClkSource>:
{
 801a874:	b480      	push	{r7}
 801a876:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801a878:	4b04      	ldr	r3, [pc, #16]	@ (801a88c <LL_RCC_GetSysClkSource+0x18>)
 801a87a:	689b      	ldr	r3, [r3, #8]
 801a87c:	f003 030c 	and.w	r3, r3, #12
}
 801a880:	4618      	mov	r0, r3
 801a882:	46bd      	mov	sp, r7
 801a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a888:	4770      	bx	lr
 801a88a:	bf00      	nop
 801a88c:	40021000 	.word	0x40021000

0801a890 <LL_RCC_GetAHBPrescaler>:
{
 801a890:	b480      	push	{r7}
 801a892:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 801a894:	4b04      	ldr	r3, [pc, #16]	@ (801a8a8 <LL_RCC_GetAHBPrescaler+0x18>)
 801a896:	689b      	ldr	r3, [r3, #8]
 801a898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 801a89c:	4618      	mov	r0, r3
 801a89e:	46bd      	mov	sp, r7
 801a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8a4:	4770      	bx	lr
 801a8a6:	bf00      	nop
 801a8a8:	40021000 	.word	0x40021000

0801a8ac <LL_RCC_GetAPB1Prescaler>:
{
 801a8ac:	b480      	push	{r7}
 801a8ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 801a8b0:	4b04      	ldr	r3, [pc, #16]	@ (801a8c4 <LL_RCC_GetAPB1Prescaler+0x18>)
 801a8b2:	689b      	ldr	r3, [r3, #8]
 801a8b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 801a8b8:	4618      	mov	r0, r3
 801a8ba:	46bd      	mov	sp, r7
 801a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8c0:	4770      	bx	lr
 801a8c2:	bf00      	nop
 801a8c4:	40021000 	.word	0x40021000

0801a8c8 <LL_RCC_GetAPB2Prescaler>:
{
 801a8c8:	b480      	push	{r7}
 801a8ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 801a8cc:	4b04      	ldr	r3, [pc, #16]	@ (801a8e0 <LL_RCC_GetAPB2Prescaler+0x18>)
 801a8ce:	689b      	ldr	r3, [r3, #8]
 801a8d0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 801a8d4:	4618      	mov	r0, r3
 801a8d6:	46bd      	mov	sp, r7
 801a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8dc:	4770      	bx	lr
 801a8de:	bf00      	nop
 801a8e0:	40021000 	.word	0x40021000

0801a8e4 <LL_RCC_GetUSARTClockSource>:
{
 801a8e4:	b480      	push	{r7}
 801a8e6:	b083      	sub	sp, #12
 801a8e8:	af00      	add	r7, sp, #0
 801a8ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 801a8ec:	4b06      	ldr	r3, [pc, #24]	@ (801a908 <LL_RCC_GetUSARTClockSource+0x24>)
 801a8ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	401a      	ands	r2, r3
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	041b      	lsls	r3, r3, #16
 801a8fa:	4313      	orrs	r3, r2
}
 801a8fc:	4618      	mov	r0, r3
 801a8fe:	370c      	adds	r7, #12
 801a900:	46bd      	mov	sp, r7
 801a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a906:	4770      	bx	lr
 801a908:	40021000 	.word	0x40021000

0801a90c <LL_RCC_GetUARTClockSource>:
{
 801a90c:	b480      	push	{r7}
 801a90e:	b083      	sub	sp, #12
 801a910:	af00      	add	r7, sp, #0
 801a912:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 801a914:	4b06      	ldr	r3, [pc, #24]	@ (801a930 <LL_RCC_GetUARTClockSource+0x24>)
 801a916:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	401a      	ands	r2, r3
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	041b      	lsls	r3, r3, #16
 801a922:	4313      	orrs	r3, r2
}
 801a924:	4618      	mov	r0, r3
 801a926:	370c      	adds	r7, #12
 801a928:	46bd      	mov	sp, r7
 801a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a92e:	4770      	bx	lr
 801a930:	40021000 	.word	0x40021000

0801a934 <LL_RCC_PLL_GetMainSource>:
{
 801a934:	b480      	push	{r7}
 801a936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 801a938:	4b04      	ldr	r3, [pc, #16]	@ (801a94c <LL_RCC_PLL_GetMainSource+0x18>)
 801a93a:	68db      	ldr	r3, [r3, #12]
 801a93c:	f003 0303 	and.w	r3, r3, #3
}
 801a940:	4618      	mov	r0, r3
 801a942:	46bd      	mov	sp, r7
 801a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a948:	4770      	bx	lr
 801a94a:	bf00      	nop
 801a94c:	40021000 	.word	0x40021000

0801a950 <LL_RCC_PLL_GetN>:
{
 801a950:	b480      	push	{r7}
 801a952:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 801a954:	4b04      	ldr	r3, [pc, #16]	@ (801a968 <LL_RCC_PLL_GetN+0x18>)
 801a956:	68db      	ldr	r3, [r3, #12]
 801a958:	0a1b      	lsrs	r3, r3, #8
 801a95a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 801a95e:	4618      	mov	r0, r3
 801a960:	46bd      	mov	sp, r7
 801a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a966:	4770      	bx	lr
 801a968:	40021000 	.word	0x40021000

0801a96c <LL_RCC_PLL_GetR>:
{
 801a96c:	b480      	push	{r7}
 801a96e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 801a970:	4b04      	ldr	r3, [pc, #16]	@ (801a984 <LL_RCC_PLL_GetR+0x18>)
 801a972:	68db      	ldr	r3, [r3, #12]
 801a974:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 801a978:	4618      	mov	r0, r3
 801a97a:	46bd      	mov	sp, r7
 801a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a980:	4770      	bx	lr
 801a982:	bf00      	nop
 801a984:	40021000 	.word	0x40021000

0801a988 <LL_RCC_PLL_GetDivider>:
{
 801a988:	b480      	push	{r7}
 801a98a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 801a98c:	4b04      	ldr	r3, [pc, #16]	@ (801a9a0 <LL_RCC_PLL_GetDivider+0x18>)
 801a98e:	68db      	ldr	r3, [r3, #12]
 801a990:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 801a994:	4618      	mov	r0, r3
 801a996:	46bd      	mov	sp, r7
 801a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a99c:	4770      	bx	lr
 801a99e:	bf00      	nop
 801a9a0:	40021000 	.word	0x40021000

0801a9a4 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 801a9a4:	b580      	push	{r7, lr}
 801a9a6:	b084      	sub	sp, #16
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 801a9ac:	2300      	movs	r3, #0
 801a9ae:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	2b03      	cmp	r3, #3
 801a9b4:	d132      	bne.n	801aa1c <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 801a9b6:	6878      	ldr	r0, [r7, #4]
 801a9b8:	f7ff ff94 	bl	801a8e4 <LL_RCC_GetUSARTClockSource>
 801a9bc:	4603      	mov	r3, r0
 801a9be:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 801a9c2:	d016      	beq.n	801a9f2 <LL_RCC_GetUSARTClockFreq+0x4e>
 801a9c4:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 801a9c8:	d81c      	bhi.n	801aa04 <LL_RCC_GetUSARTClockFreq+0x60>
 801a9ca:	4a51      	ldr	r2, [pc, #324]	@ (801ab10 <LL_RCC_GetUSARTClockFreq+0x16c>)
 801a9cc:	4293      	cmp	r3, r2
 801a9ce:	d003      	beq.n	801a9d8 <LL_RCC_GetUSARTClockFreq+0x34>
 801a9d0:	4a50      	ldr	r2, [pc, #320]	@ (801ab14 <LL_RCC_GetUSARTClockFreq+0x170>)
 801a9d2:	4293      	cmp	r3, r2
 801a9d4:	d004      	beq.n	801a9e0 <LL_RCC_GetUSARTClockFreq+0x3c>
 801a9d6:	e015      	b.n	801aa04 <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 801a9d8:	f000 f92e 	bl	801ac38 <RCC_GetSystemClockFreq>
 801a9dc:	60f8      	str	r0, [r7, #12]
        break;
 801a9de:	e092      	b.n	801ab06 <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 801a9e0:	f7ff ff20 	bl	801a824 <LL_RCC_HSI_IsReady>
 801a9e4:	4603      	mov	r3, r0
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	f000 8082 	beq.w	801aaf0 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 801a9ec:	4b4a      	ldr	r3, [pc, #296]	@ (801ab18 <LL_RCC_GetUSARTClockFreq+0x174>)
 801a9ee:	60fb      	str	r3, [r7, #12]
        }
        break;
 801a9f0:	e07e      	b.n	801aaf0 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 801a9f2:	f7ff ff2b 	bl	801a84c <LL_RCC_LSE_IsReady>
 801a9f6:	4603      	mov	r3, r0
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d07b      	beq.n	801aaf4 <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 801a9fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801aa00:	60fb      	str	r3, [r7, #12]
        }
        break;
 801aa02:	e077      	b.n	801aaf4 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 801aa04:	f000 f918 	bl	801ac38 <RCC_GetSystemClockFreq>
 801aa08:	4603      	mov	r3, r0
 801aa0a:	4618      	mov	r0, r3
 801aa0c:	f000 f93a 	bl	801ac84 <RCC_GetHCLKClockFreq>
 801aa10:	4603      	mov	r3, r0
 801aa12:	4618      	mov	r0, r3
 801aa14:	f000 f964 	bl	801ace0 <RCC_GetPCLK2ClockFreq>
 801aa18:	60f8      	str	r0, [r7, #12]
        break;
 801aa1a:	e074      	b.n	801ab06 <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	2b0c      	cmp	r3, #12
 801aa20:	d131      	bne.n	801aa86 <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 801aa22:	6878      	ldr	r0, [r7, #4]
 801aa24:	f7ff ff5e 	bl	801a8e4 <LL_RCC_GetUSARTClockSource>
 801aa28:	4603      	mov	r3, r0
 801aa2a:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 801aa2e:	d015      	beq.n	801aa5c <LL_RCC_GetUSARTClockFreq+0xb8>
 801aa30:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 801aa34:	d81b      	bhi.n	801aa6e <LL_RCC_GetUSARTClockFreq+0xca>
 801aa36:	4a39      	ldr	r2, [pc, #228]	@ (801ab1c <LL_RCC_GetUSARTClockFreq+0x178>)
 801aa38:	4293      	cmp	r3, r2
 801aa3a:	d003      	beq.n	801aa44 <LL_RCC_GetUSARTClockFreq+0xa0>
 801aa3c:	4a38      	ldr	r2, [pc, #224]	@ (801ab20 <LL_RCC_GetUSARTClockFreq+0x17c>)
 801aa3e:	4293      	cmp	r3, r2
 801aa40:	d004      	beq.n	801aa4c <LL_RCC_GetUSARTClockFreq+0xa8>
 801aa42:	e014      	b.n	801aa6e <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 801aa44:	f000 f8f8 	bl	801ac38 <RCC_GetSystemClockFreq>
 801aa48:	60f8      	str	r0, [r7, #12]
        break;
 801aa4a:	e05c      	b.n	801ab06 <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 801aa4c:	f7ff feea 	bl	801a824 <LL_RCC_HSI_IsReady>
 801aa50:	4603      	mov	r3, r0
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d050      	beq.n	801aaf8 <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 801aa56:	4b30      	ldr	r3, [pc, #192]	@ (801ab18 <LL_RCC_GetUSARTClockFreq+0x174>)
 801aa58:	60fb      	str	r3, [r7, #12]
        }
        break;
 801aa5a:	e04d      	b.n	801aaf8 <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 801aa5c:	f7ff fef6 	bl	801a84c <LL_RCC_LSE_IsReady>
 801aa60:	4603      	mov	r3, r0
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d04a      	beq.n	801aafc <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 801aa66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801aa6a:	60fb      	str	r3, [r7, #12]
        }
        break;
 801aa6c:	e046      	b.n	801aafc <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 801aa6e:	f000 f8e3 	bl	801ac38 <RCC_GetSystemClockFreq>
 801aa72:	4603      	mov	r3, r0
 801aa74:	4618      	mov	r0, r3
 801aa76:	f000 f905 	bl	801ac84 <RCC_GetHCLKClockFreq>
 801aa7a:	4603      	mov	r3, r0
 801aa7c:	4618      	mov	r0, r3
 801aa7e:	f000 f919 	bl	801acb4 <RCC_GetPCLK1ClockFreq>
 801aa82:	60f8      	str	r0, [r7, #12]
        break;
 801aa84:	e03f      	b.n	801ab06 <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	2b30      	cmp	r3, #48	@ 0x30
 801aa8a:	d13c      	bne.n	801ab06 <LL_RCC_GetUSARTClockFreq+0x162>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 801aa8c:	6878      	ldr	r0, [r7, #4]
 801aa8e:	f7ff ff29 	bl	801a8e4 <LL_RCC_GetUSARTClockSource>
 801aa92:	4603      	mov	r3, r0
 801aa94:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 801aa98:	d015      	beq.n	801aac6 <LL_RCC_GetUSARTClockFreq+0x122>
 801aa9a:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 801aa9e:	d81b      	bhi.n	801aad8 <LL_RCC_GetUSARTClockFreq+0x134>
 801aaa0:	4a20      	ldr	r2, [pc, #128]	@ (801ab24 <LL_RCC_GetUSARTClockFreq+0x180>)
 801aaa2:	4293      	cmp	r3, r2
 801aaa4:	d003      	beq.n	801aaae <LL_RCC_GetUSARTClockFreq+0x10a>
 801aaa6:	4a20      	ldr	r2, [pc, #128]	@ (801ab28 <LL_RCC_GetUSARTClockFreq+0x184>)
 801aaa8:	4293      	cmp	r3, r2
 801aaaa:	d004      	beq.n	801aab6 <LL_RCC_GetUSARTClockFreq+0x112>
 801aaac:	e014      	b.n	801aad8 <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 801aaae:	f000 f8c3 	bl	801ac38 <RCC_GetSystemClockFreq>
 801aab2:	60f8      	str	r0, [r7, #12]
          break;
 801aab4:	e027      	b.n	801ab06 <LL_RCC_GetUSARTClockFreq+0x162>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 801aab6:	f7ff feb5 	bl	801a824 <LL_RCC_HSI_IsReady>
 801aaba:	4603      	mov	r3, r0
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	d01f      	beq.n	801ab00 <LL_RCC_GetUSARTClockFreq+0x15c>
          {
            usart_frequency = HSI_VALUE;
 801aac0:	4b15      	ldr	r3, [pc, #84]	@ (801ab18 <LL_RCC_GetUSARTClockFreq+0x174>)
 801aac2:	60fb      	str	r3, [r7, #12]
          }
          break;
 801aac4:	e01c      	b.n	801ab00 <LL_RCC_GetUSARTClockFreq+0x15c>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 801aac6:	f7ff fec1 	bl	801a84c <LL_RCC_LSE_IsReady>
 801aaca:	4603      	mov	r3, r0
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d019      	beq.n	801ab04 <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = LSE_VALUE;
 801aad0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801aad4:	60fb      	str	r3, [r7, #12]
          }
          break;
 801aad6:	e015      	b.n	801ab04 <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 801aad8:	f000 f8ae 	bl	801ac38 <RCC_GetSystemClockFreq>
 801aadc:	4603      	mov	r3, r0
 801aade:	4618      	mov	r0, r3
 801aae0:	f000 f8d0 	bl	801ac84 <RCC_GetHCLKClockFreq>
 801aae4:	4603      	mov	r3, r0
 801aae6:	4618      	mov	r0, r3
 801aae8:	f000 f8e4 	bl	801acb4 <RCC_GetPCLK1ClockFreq>
 801aaec:	60f8      	str	r0, [r7, #12]
          break;
 801aaee:	e00a      	b.n	801ab06 <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 801aaf0:	bf00      	nop
 801aaf2:	e008      	b.n	801ab06 <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 801aaf4:	bf00      	nop
 801aaf6:	e006      	b.n	801ab06 <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 801aaf8:	bf00      	nop
 801aafa:	e004      	b.n	801ab06 <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 801aafc:	bf00      	nop
 801aafe:	e002      	b.n	801ab06 <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 801ab00:	bf00      	nop
 801ab02:	e000      	b.n	801ab06 <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 801ab04:	bf00      	nop
      }
    }
  }
  return usart_frequency;
 801ab06:	68fb      	ldr	r3, [r7, #12]
}
 801ab08:	4618      	mov	r0, r3
 801ab0a:	3710      	adds	r7, #16
 801ab0c:	46bd      	mov	sp, r7
 801ab0e:	bd80      	pop	{r7, pc}
 801ab10:	00030001 	.word	0x00030001
 801ab14:	00030002 	.word	0x00030002
 801ab18:	00f42400 	.word	0x00f42400
 801ab1c:	000c0004 	.word	0x000c0004
 801ab20:	000c0008 	.word	0x000c0008
 801ab24:	00300010 	.word	0x00300010
 801ab28:	00300020 	.word	0x00300020

0801ab2c <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 801ab2c:	b580      	push	{r7, lr}
 801ab2e:	b084      	sub	sp, #16
 801ab30:	af00      	add	r7, sp, #0
 801ab32:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 801ab34:	2300      	movs	r3, #0
 801ab36:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	2bc0      	cmp	r3, #192	@ 0xc0
 801ab3c:	d134      	bne.n	801aba8 <LL_RCC_GetUARTClockFreq+0x7c>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 801ab3e:	6878      	ldr	r0, [r7, #4]
 801ab40:	f7ff fee4 	bl	801a90c <LL_RCC_GetUARTClockSource>
 801ab44:	4603      	mov	r3, r0
 801ab46:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 801ab4a:	d015      	beq.n	801ab78 <LL_RCC_GetUARTClockFreq+0x4c>
 801ab4c:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 801ab50:	d81b      	bhi.n	801ab8a <LL_RCC_GetUARTClockFreq+0x5e>
 801ab52:	4a34      	ldr	r2, [pc, #208]	@ (801ac24 <LL_RCC_GetUARTClockFreq+0xf8>)
 801ab54:	4293      	cmp	r3, r2
 801ab56:	d003      	beq.n	801ab60 <LL_RCC_GetUARTClockFreq+0x34>
 801ab58:	4a33      	ldr	r2, [pc, #204]	@ (801ac28 <LL_RCC_GetUARTClockFreq+0xfc>)
 801ab5a:	4293      	cmp	r3, r2
 801ab5c:	d004      	beq.n	801ab68 <LL_RCC_GetUARTClockFreq+0x3c>
 801ab5e:	e014      	b.n	801ab8a <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 801ab60:	f000 f86a 	bl	801ac38 <RCC_GetSystemClockFreq>
 801ab64:	60f8      	str	r0, [r7, #12]
        break;
 801ab66:	e01f      	b.n	801aba8 <LL_RCC_GetUARTClockFreq+0x7c>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 801ab68:	f7ff fe5c 	bl	801a824 <LL_RCC_HSI_IsReady>
 801ab6c:	4603      	mov	r3, r0
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d017      	beq.n	801aba2 <LL_RCC_GetUARTClockFreq+0x76>
        {
          uart_frequency = HSI_VALUE;
 801ab72:	4b2e      	ldr	r3, [pc, #184]	@ (801ac2c <LL_RCC_GetUARTClockFreq+0x100>)
 801ab74:	60fb      	str	r3, [r7, #12]
        }
        break;
 801ab76:	e014      	b.n	801aba2 <LL_RCC_GetUARTClockFreq+0x76>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 801ab78:	f7ff fe68 	bl	801a84c <LL_RCC_LSE_IsReady>
 801ab7c:	4603      	mov	r3, r0
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d011      	beq.n	801aba6 <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = LSE_VALUE;
 801ab82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ab86:	60fb      	str	r3, [r7, #12]
        }
        break;
 801ab88:	e00d      	b.n	801aba6 <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 801ab8a:	f000 f855 	bl	801ac38 <RCC_GetSystemClockFreq>
 801ab8e:	4603      	mov	r3, r0
 801ab90:	4618      	mov	r0, r3
 801ab92:	f000 f877 	bl	801ac84 <RCC_GetHCLKClockFreq>
 801ab96:	4603      	mov	r3, r0
 801ab98:	4618      	mov	r0, r3
 801ab9a:	f000 f88b 	bl	801acb4 <RCC_GetPCLK1ClockFreq>
 801ab9e:	60f8      	str	r0, [r7, #12]
        break;
 801aba0:	e002      	b.n	801aba8 <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 801aba2:	bf00      	nop
 801aba4:	e000      	b.n	801aba8 <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 801aba6:	bf00      	nop
    }
  }

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801abae:	d134      	bne.n	801ac1a <LL_RCC_GetUARTClockFreq+0xee>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 801abb0:	6878      	ldr	r0, [r7, #4]
 801abb2:	f7ff feab 	bl	801a90c <LL_RCC_GetUARTClockSource>
 801abb6:	4603      	mov	r3, r0
 801abb8:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 801abbc:	d015      	beq.n	801abea <LL_RCC_GetUARTClockFreq+0xbe>
 801abbe:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 801abc2:	d81b      	bhi.n	801abfc <LL_RCC_GetUARTClockFreq+0xd0>
 801abc4:	4a1a      	ldr	r2, [pc, #104]	@ (801ac30 <LL_RCC_GetUARTClockFreq+0x104>)
 801abc6:	4293      	cmp	r3, r2
 801abc8:	d003      	beq.n	801abd2 <LL_RCC_GetUARTClockFreq+0xa6>
 801abca:	4a1a      	ldr	r2, [pc, #104]	@ (801ac34 <LL_RCC_GetUARTClockFreq+0x108>)
 801abcc:	4293      	cmp	r3, r2
 801abce:	d004      	beq.n	801abda <LL_RCC_GetUARTClockFreq+0xae>
 801abd0:	e014      	b.n	801abfc <LL_RCC_GetUARTClockFreq+0xd0>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 801abd2:	f000 f831 	bl	801ac38 <RCC_GetSystemClockFreq>
 801abd6:	60f8      	str	r0, [r7, #12]
        break;
 801abd8:	e01f      	b.n	801ac1a <LL_RCC_GetUARTClockFreq+0xee>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 801abda:	f7ff fe23 	bl	801a824 <LL_RCC_HSI_IsReady>
 801abde:	4603      	mov	r3, r0
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d017      	beq.n	801ac14 <LL_RCC_GetUARTClockFreq+0xe8>
        {
          uart_frequency = HSI_VALUE;
 801abe4:	4b11      	ldr	r3, [pc, #68]	@ (801ac2c <LL_RCC_GetUARTClockFreq+0x100>)
 801abe6:	60fb      	str	r3, [r7, #12]
        }
        break;
 801abe8:	e014      	b.n	801ac14 <LL_RCC_GetUARTClockFreq+0xe8>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 801abea:	f7ff fe2f 	bl	801a84c <LL_RCC_LSE_IsReady>
 801abee:	4603      	mov	r3, r0
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d011      	beq.n	801ac18 <LL_RCC_GetUARTClockFreq+0xec>
        {
          uart_frequency = LSE_VALUE;
 801abf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801abf8:	60fb      	str	r3, [r7, #12]
        }
        break;
 801abfa:	e00d      	b.n	801ac18 <LL_RCC_GetUARTClockFreq+0xec>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 801abfc:	f000 f81c 	bl	801ac38 <RCC_GetSystemClockFreq>
 801ac00:	4603      	mov	r3, r0
 801ac02:	4618      	mov	r0, r3
 801ac04:	f000 f83e 	bl	801ac84 <RCC_GetHCLKClockFreq>
 801ac08:	4603      	mov	r3, r0
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	f000 f852 	bl	801acb4 <RCC_GetPCLK1ClockFreq>
 801ac10:	60f8      	str	r0, [r7, #12]
        break;
 801ac12:	e002      	b.n	801ac1a <LL_RCC_GetUARTClockFreq+0xee>
        break;
 801ac14:	bf00      	nop
 801ac16:	e000      	b.n	801ac1a <LL_RCC_GetUARTClockFreq+0xee>
        break;
 801ac18:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 801ac1a:	68fb      	ldr	r3, [r7, #12]
}
 801ac1c:	4618      	mov	r0, r3
 801ac1e:	3710      	adds	r7, #16
 801ac20:	46bd      	mov	sp, r7
 801ac22:	bd80      	pop	{r7, pc}
 801ac24:	00c00040 	.word	0x00c00040
 801ac28:	00c00080 	.word	0x00c00080
 801ac2c:	00f42400 	.word	0x00f42400
 801ac30:	03000100 	.word	0x03000100
 801ac34:	03000200 	.word	0x03000200

0801ac38 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 801ac38:	b580      	push	{r7, lr}
 801ac3a:	b082      	sub	sp, #8
 801ac3c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 801ac3e:	f7ff fe19 	bl	801a874 <LL_RCC_GetSysClkSource>
 801ac42:	4603      	mov	r3, r0
 801ac44:	2b0c      	cmp	r3, #12
 801ac46:	d00c      	beq.n	801ac62 <RCC_GetSystemClockFreq+0x2a>
 801ac48:	2b0c      	cmp	r3, #12
 801ac4a:	d80e      	bhi.n	801ac6a <RCC_GetSystemClockFreq+0x32>
 801ac4c:	2b04      	cmp	r3, #4
 801ac4e:	d002      	beq.n	801ac56 <RCC_GetSystemClockFreq+0x1e>
 801ac50:	2b08      	cmp	r3, #8
 801ac52:	d003      	beq.n	801ac5c <RCC_GetSystemClockFreq+0x24>
 801ac54:	e009      	b.n	801ac6a <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 801ac56:	4b09      	ldr	r3, [pc, #36]	@ (801ac7c <RCC_GetSystemClockFreq+0x44>)
 801ac58:	607b      	str	r3, [r7, #4]
      break;
 801ac5a:	e009      	b.n	801ac70 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 801ac5c:	4b08      	ldr	r3, [pc, #32]	@ (801ac80 <RCC_GetSystemClockFreq+0x48>)
 801ac5e:	607b      	str	r3, [r7, #4]
      break;
 801ac60:	e006      	b.n	801ac70 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 801ac62:	f000 f853 	bl	801ad0c <RCC_PLL_GetFreqDomain_SYS>
 801ac66:	6078      	str	r0, [r7, #4]
      break;
 801ac68:	e002      	b.n	801ac70 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 801ac6a:	4b04      	ldr	r3, [pc, #16]	@ (801ac7c <RCC_GetSystemClockFreq+0x44>)
 801ac6c:	607b      	str	r3, [r7, #4]
      break;
 801ac6e:	bf00      	nop
  }

  return frequency;
 801ac70:	687b      	ldr	r3, [r7, #4]
}
 801ac72:	4618      	mov	r0, r3
 801ac74:	3708      	adds	r7, #8
 801ac76:	46bd      	mov	sp, r7
 801ac78:	bd80      	pop	{r7, pc}
 801ac7a:	bf00      	nop
 801ac7c:	00f42400 	.word	0x00f42400
 801ac80:	007a1200 	.word	0x007a1200

0801ac84 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 801ac84:	b580      	push	{r7, lr}
 801ac86:	b082      	sub	sp, #8
 801ac88:	af00      	add	r7, sp, #0
 801ac8a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 801ac8c:	f7ff fe00 	bl	801a890 <LL_RCC_GetAHBPrescaler>
 801ac90:	4603      	mov	r3, r0
 801ac92:	091b      	lsrs	r3, r3, #4
 801ac94:	f003 030f 	and.w	r3, r3, #15
 801ac98:	4a05      	ldr	r2, [pc, #20]	@ (801acb0 <RCC_GetHCLKClockFreq+0x2c>)
 801ac9a:	5cd3      	ldrb	r3, [r2, r3]
 801ac9c:	f003 031f 	and.w	r3, r3, #31
 801aca0:	687a      	ldr	r2, [r7, #4]
 801aca2:	fa22 f303 	lsr.w	r3, r2, r3
}
 801aca6:	4618      	mov	r0, r3
 801aca8:	3708      	adds	r7, #8
 801acaa:	46bd      	mov	sp, r7
 801acac:	bd80      	pop	{r7, pc}
 801acae:	bf00      	nop
 801acb0:	0802227c 	.word	0x0802227c

0801acb4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 801acb4:	b580      	push	{r7, lr}
 801acb6:	b082      	sub	sp, #8
 801acb8:	af00      	add	r7, sp, #0
 801acba:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 801acbc:	f7ff fdf6 	bl	801a8ac <LL_RCC_GetAPB1Prescaler>
 801acc0:	4603      	mov	r3, r0
 801acc2:	0a1b      	lsrs	r3, r3, #8
 801acc4:	4a05      	ldr	r2, [pc, #20]	@ (801acdc <RCC_GetPCLK1ClockFreq+0x28>)
 801acc6:	5cd3      	ldrb	r3, [r2, r3]
 801acc8:	f003 031f 	and.w	r3, r3, #31
 801accc:	687a      	ldr	r2, [r7, #4]
 801acce:	fa22 f303 	lsr.w	r3, r2, r3
}
 801acd2:	4618      	mov	r0, r3
 801acd4:	3708      	adds	r7, #8
 801acd6:	46bd      	mov	sp, r7
 801acd8:	bd80      	pop	{r7, pc}
 801acda:	bf00      	nop
 801acdc:	0802228c 	.word	0x0802228c

0801ace0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 801ace0:	b580      	push	{r7, lr}
 801ace2:	b082      	sub	sp, #8
 801ace4:	af00      	add	r7, sp, #0
 801ace6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 801ace8:	f7ff fdee 	bl	801a8c8 <LL_RCC_GetAPB2Prescaler>
 801acec:	4603      	mov	r3, r0
 801acee:	0adb      	lsrs	r3, r3, #11
 801acf0:	4a05      	ldr	r2, [pc, #20]	@ (801ad08 <RCC_GetPCLK2ClockFreq+0x28>)
 801acf2:	5cd3      	ldrb	r3, [r2, r3]
 801acf4:	f003 031f 	and.w	r3, r3, #31
 801acf8:	687a      	ldr	r2, [r7, #4]
 801acfa:	fa22 f303 	lsr.w	r3, r2, r3
}
 801acfe:	4618      	mov	r0, r3
 801ad00:	3708      	adds	r7, #8
 801ad02:	46bd      	mov	sp, r7
 801ad04:	bd80      	pop	{r7, pc}
 801ad06:	bf00      	nop
 801ad08:	0802228c 	.word	0x0802228c

0801ad0c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 801ad0c:	b590      	push	{r4, r7, lr}
 801ad0e:	b083      	sub	sp, #12
 801ad10:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 801ad12:	f7ff fe0f 	bl	801a934 <LL_RCC_PLL_GetMainSource>
 801ad16:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 801ad18:	683b      	ldr	r3, [r7, #0]
 801ad1a:	2b02      	cmp	r3, #2
 801ad1c:	d003      	beq.n	801ad26 <RCC_PLL_GetFreqDomain_SYS+0x1a>
 801ad1e:	683b      	ldr	r3, [r7, #0]
 801ad20:	2b03      	cmp	r3, #3
 801ad22:	d003      	beq.n	801ad2c <RCC_PLL_GetFreqDomain_SYS+0x20>
 801ad24:	e005      	b.n	801ad32 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 801ad26:	4b11      	ldr	r3, [pc, #68]	@ (801ad6c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 801ad28:	607b      	str	r3, [r7, #4]
      break;
 801ad2a:	e005      	b.n	801ad38 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 801ad2c:	4b10      	ldr	r3, [pc, #64]	@ (801ad70 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 801ad2e:	607b      	str	r3, [r7, #4]
      break;
 801ad30:	e002      	b.n	801ad38 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 801ad32:	4b0e      	ldr	r3, [pc, #56]	@ (801ad6c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 801ad34:	607b      	str	r3, [r7, #4]
      break;
 801ad36:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 801ad38:	f7ff fe0a 	bl	801a950 <LL_RCC_PLL_GetN>
 801ad3c:	4602      	mov	r2, r0
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	fb03 f402 	mul.w	r4, r3, r2
 801ad44:	f7ff fe20 	bl	801a988 <LL_RCC_PLL_GetDivider>
 801ad48:	4603      	mov	r3, r0
 801ad4a:	091b      	lsrs	r3, r3, #4
 801ad4c:	3301      	adds	r3, #1
 801ad4e:	fbb4 f4f3 	udiv	r4, r4, r3
 801ad52:	f7ff fe0b 	bl	801a96c <LL_RCC_PLL_GetR>
 801ad56:	4603      	mov	r3, r0
 801ad58:	0e5b      	lsrs	r3, r3, #25
 801ad5a:	3301      	adds	r3, #1
 801ad5c:	005b      	lsls	r3, r3, #1
 801ad5e:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 801ad62:	4618      	mov	r0, r3
 801ad64:	370c      	adds	r7, #12
 801ad66:	46bd      	mov	sp, r7
 801ad68:	bd90      	pop	{r4, r7, pc}
 801ad6a:	bf00      	nop
 801ad6c:	00f42400 	.word	0x00f42400
 801ad70:	007a1200 	.word	0x007a1200

0801ad74 <LL_SPI_IsEnabled>:
{
 801ad74:	b480      	push	{r7}
 801ad76:	b083      	sub	sp, #12
 801ad78:	af00      	add	r7, sp, #0
 801ad7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ad84:	2b40      	cmp	r3, #64	@ 0x40
 801ad86:	d101      	bne.n	801ad8c <LL_SPI_IsEnabled+0x18>
 801ad88:	2301      	movs	r3, #1
 801ad8a:	e000      	b.n	801ad8e <LL_SPI_IsEnabled+0x1a>
 801ad8c:	2300      	movs	r3, #0
}
 801ad8e:	4618      	mov	r0, r3
 801ad90:	370c      	adds	r7, #12
 801ad92:	46bd      	mov	sp, r7
 801ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad98:	4770      	bx	lr

0801ad9a <LL_SPI_SetRxFIFOThreshold>:
{
 801ad9a:	b480      	push	{r7}
 801ad9c:	b083      	sub	sp, #12
 801ad9e:	af00      	add	r7, sp, #0
 801ada0:	6078      	str	r0, [r7, #4]
 801ada2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	685b      	ldr	r3, [r3, #4]
 801ada8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801adac:	683b      	ldr	r3, [r7, #0]
 801adae:	431a      	orrs	r2, r3
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	605a      	str	r2, [r3, #4]
}
 801adb4:	bf00      	nop
 801adb6:	370c      	adds	r7, #12
 801adb8:	46bd      	mov	sp, r7
 801adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adbe:	4770      	bx	lr

0801adc0 <LL_SPI_SetCRCPolynomial>:
{
 801adc0:	b480      	push	{r7}
 801adc2:	b083      	sub	sp, #12
 801adc4:	af00      	add	r7, sp, #0
 801adc6:	6078      	str	r0, [r7, #4]
 801adc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 801adca:	683b      	ldr	r3, [r7, #0]
 801adcc:	b29b      	uxth	r3, r3
 801adce:	461a      	mov	r2, r3
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	611a      	str	r2, [r3, #16]
}
 801add4:	bf00      	nop
 801add6:	370c      	adds	r7, #12
 801add8:	46bd      	mov	sp, r7
 801adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adde:	4770      	bx	lr

0801ade0 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 801ade0:	b580      	push	{r7, lr}
 801ade2:	b084      	sub	sp, #16
 801ade4:	af00      	add	r7, sp, #0
 801ade6:	6078      	str	r0, [r7, #4]
 801ade8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 801adea:	2301      	movs	r3, #1
 801adec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 801adee:	6878      	ldr	r0, [r7, #4]
 801adf0:	f7ff ffc0 	bl	801ad74 <LL_SPI_IsEnabled>
 801adf4:	4603      	mov	r3, r0
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d145      	bne.n	801ae86 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801ae02:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 801ae06:	683a      	ldr	r2, [r7, #0]
 801ae08:	6811      	ldr	r1, [r2, #0]
 801ae0a:	683a      	ldr	r2, [r7, #0]
 801ae0c:	6852      	ldr	r2, [r2, #4]
 801ae0e:	4311      	orrs	r1, r2
 801ae10:	683a      	ldr	r2, [r7, #0]
 801ae12:	68d2      	ldr	r2, [r2, #12]
 801ae14:	4311      	orrs	r1, r2
 801ae16:	683a      	ldr	r2, [r7, #0]
 801ae18:	6912      	ldr	r2, [r2, #16]
 801ae1a:	4311      	orrs	r1, r2
 801ae1c:	683a      	ldr	r2, [r7, #0]
 801ae1e:	6952      	ldr	r2, [r2, #20]
 801ae20:	4311      	orrs	r1, r2
 801ae22:	683a      	ldr	r2, [r7, #0]
 801ae24:	6992      	ldr	r2, [r2, #24]
 801ae26:	4311      	orrs	r1, r2
 801ae28:	683a      	ldr	r2, [r7, #0]
 801ae2a:	69d2      	ldr	r2, [r2, #28]
 801ae2c:	4311      	orrs	r1, r2
 801ae2e:	683a      	ldr	r2, [r7, #0]
 801ae30:	6a12      	ldr	r2, [r2, #32]
 801ae32:	430a      	orrs	r2, r1
 801ae34:	431a      	orrs	r2, r3
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	685b      	ldr	r3, [r3, #4]
 801ae3e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801ae42:	f023 0304 	bic.w	r3, r3, #4
 801ae46:	683a      	ldr	r2, [r7, #0]
 801ae48:	6891      	ldr	r1, [r2, #8]
 801ae4a:	683a      	ldr	r2, [r7, #0]
 801ae4c:	6952      	ldr	r2, [r2, #20]
 801ae4e:	0c12      	lsrs	r2, r2, #16
 801ae50:	430a      	orrs	r2, r1
 801ae52:	431a      	orrs	r2, r3
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 801ae58:	683b      	ldr	r3, [r7, #0]
 801ae5a:	689b      	ldr	r3, [r3, #8]
 801ae5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801ae60:	d204      	bcs.n	801ae6c <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 801ae62:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801ae66:	6878      	ldr	r0, [r7, #4]
 801ae68:	f7ff ff97 	bl	801ad9a <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 801ae6c:	683b      	ldr	r3, [r7, #0]
 801ae6e:	6a1b      	ldr	r3, [r3, #32]
 801ae70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ae74:	d105      	bne.n	801ae82 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 801ae76:	683b      	ldr	r3, [r7, #0]
 801ae78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ae7a:	4619      	mov	r1, r3
 801ae7c:	6878      	ldr	r0, [r7, #4]
 801ae7e:	f7ff ff9f 	bl	801adc0 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 801ae82:	2300      	movs	r3, #0
 801ae84:	73fb      	strb	r3, [r7, #15]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	69db      	ldr	r3, [r3, #28]
 801ae8a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 801ae92:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae94:	4618      	mov	r0, r3
 801ae96:	3710      	adds	r7, #16
 801ae98:	46bd      	mov	sp, r7
 801ae9a:	bd80      	pop	{r7, pc}

0801ae9c <LL_TIM_SetPrescaler>:
{
 801ae9c:	b480      	push	{r7}
 801ae9e:	b083      	sub	sp, #12
 801aea0:	af00      	add	r7, sp, #0
 801aea2:	6078      	str	r0, [r7, #4]
 801aea4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	683a      	ldr	r2, [r7, #0]
 801aeaa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801aeac:	bf00      	nop
 801aeae:	370c      	adds	r7, #12
 801aeb0:	46bd      	mov	sp, r7
 801aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeb6:	4770      	bx	lr

0801aeb8 <LL_TIM_SetAutoReload>:
{
 801aeb8:	b480      	push	{r7}
 801aeba:	b083      	sub	sp, #12
 801aebc:	af00      	add	r7, sp, #0
 801aebe:	6078      	str	r0, [r7, #4]
 801aec0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	683a      	ldr	r2, [r7, #0]
 801aec6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 801aec8:	bf00      	nop
 801aeca:	370c      	adds	r7, #12
 801aecc:	46bd      	mov	sp, r7
 801aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aed2:	4770      	bx	lr

0801aed4 <LL_TIM_SetRepetitionCounter>:
{
 801aed4:	b480      	push	{r7}
 801aed6:	b083      	sub	sp, #12
 801aed8:	af00      	add	r7, sp, #0
 801aeda:	6078      	str	r0, [r7, #4]
 801aedc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	683a      	ldr	r2, [r7, #0]
 801aee2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 801aee4:	bf00      	nop
 801aee6:	370c      	adds	r7, #12
 801aee8:	46bd      	mov	sp, r7
 801aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeee:	4770      	bx	lr

0801aef0 <LL_TIM_OC_SetCompareCH1>:
{
 801aef0:	b480      	push	{r7}
 801aef2:	b083      	sub	sp, #12
 801aef4:	af00      	add	r7, sp, #0
 801aef6:	6078      	str	r0, [r7, #4]
 801aef8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	683a      	ldr	r2, [r7, #0]
 801aefe:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801af00:	bf00      	nop
 801af02:	370c      	adds	r7, #12
 801af04:	46bd      	mov	sp, r7
 801af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af0a:	4770      	bx	lr

0801af0c <LL_TIM_OC_SetCompareCH2>:
{
 801af0c:	b480      	push	{r7}
 801af0e:	b083      	sub	sp, #12
 801af10:	af00      	add	r7, sp, #0
 801af12:	6078      	str	r0, [r7, #4]
 801af14:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	683a      	ldr	r2, [r7, #0]
 801af1a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 801af1c:	bf00      	nop
 801af1e:	370c      	adds	r7, #12
 801af20:	46bd      	mov	sp, r7
 801af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af26:	4770      	bx	lr

0801af28 <LL_TIM_OC_SetCompareCH3>:
{
 801af28:	b480      	push	{r7}
 801af2a:	b083      	sub	sp, #12
 801af2c:	af00      	add	r7, sp, #0
 801af2e:	6078      	str	r0, [r7, #4]
 801af30:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	683a      	ldr	r2, [r7, #0]
 801af36:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 801af38:	bf00      	nop
 801af3a:	370c      	adds	r7, #12
 801af3c:	46bd      	mov	sp, r7
 801af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af42:	4770      	bx	lr

0801af44 <LL_TIM_OC_SetCompareCH4>:
{
 801af44:	b480      	push	{r7}
 801af46:	b083      	sub	sp, #12
 801af48:	af00      	add	r7, sp, #0
 801af4a:	6078      	str	r0, [r7, #4]
 801af4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	683a      	ldr	r2, [r7, #0]
 801af52:	641a      	str	r2, [r3, #64]	@ 0x40
}
 801af54:	bf00      	nop
 801af56:	370c      	adds	r7, #12
 801af58:	46bd      	mov	sp, r7
 801af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af5e:	4770      	bx	lr

0801af60 <LL_TIM_OC_SetCompareCH5>:
{
 801af60:	b480      	push	{r7}
 801af62:	b083      	sub	sp, #12
 801af64:	af00      	add	r7, sp, #0
 801af66:	6078      	str	r0, [r7, #4]
 801af68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	683a      	ldr	r2, [r7, #0]
 801af72:	649a      	str	r2, [r3, #72]	@ 0x48
}
 801af74:	bf00      	nop
 801af76:	370c      	adds	r7, #12
 801af78:	46bd      	mov	sp, r7
 801af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af7e:	4770      	bx	lr

0801af80 <LL_TIM_OC_SetCompareCH6>:
{
 801af80:	b480      	push	{r7}
 801af82:	b083      	sub	sp, #12
 801af84:	af00      	add	r7, sp, #0
 801af86:	6078      	str	r0, [r7, #4]
 801af88:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	683a      	ldr	r2, [r7, #0]
 801af8e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 801af90:	bf00      	nop
 801af92:	370c      	adds	r7, #12
 801af94:	46bd      	mov	sp, r7
 801af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af9a:	4770      	bx	lr

0801af9c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 801af9c:	b480      	push	{r7}
 801af9e:	b083      	sub	sp, #12
 801afa0:	af00      	add	r7, sp, #0
 801afa2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	695b      	ldr	r3, [r3, #20]
 801afa8:	f043 0201 	orr.w	r2, r3, #1
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	615a      	str	r2, [r3, #20]
}
 801afb0:	bf00      	nop
 801afb2:	370c      	adds	r7, #12
 801afb4:	46bd      	mov	sp, r7
 801afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afba:	4770      	bx	lr

0801afbc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 801afbc:	b580      	push	{r7, lr}
 801afbe:	b084      	sub	sp, #16
 801afc0:	af00      	add	r7, sp, #0
 801afc2:	6078      	str	r0, [r7, #4]
 801afc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	4a43      	ldr	r2, [pc, #268]	@ (801b0dc <LL_TIM_Init+0x120>)
 801afd0:	4293      	cmp	r3, r2
 801afd2:	d017      	beq.n	801b004 <LL_TIM_Init+0x48>
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801afda:	d013      	beq.n	801b004 <LL_TIM_Init+0x48>
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	4a40      	ldr	r2, [pc, #256]	@ (801b0e0 <LL_TIM_Init+0x124>)
 801afe0:	4293      	cmp	r3, r2
 801afe2:	d00f      	beq.n	801b004 <LL_TIM_Init+0x48>
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	4a3f      	ldr	r2, [pc, #252]	@ (801b0e4 <LL_TIM_Init+0x128>)
 801afe8:	4293      	cmp	r3, r2
 801afea:	d00b      	beq.n	801b004 <LL_TIM_Init+0x48>
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	4a3e      	ldr	r2, [pc, #248]	@ (801b0e8 <LL_TIM_Init+0x12c>)
 801aff0:	4293      	cmp	r3, r2
 801aff2:	d007      	beq.n	801b004 <LL_TIM_Init+0x48>
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	4a3d      	ldr	r2, [pc, #244]	@ (801b0ec <LL_TIM_Init+0x130>)
 801aff8:	4293      	cmp	r3, r2
 801affa:	d003      	beq.n	801b004 <LL_TIM_Init+0x48>
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	4a3c      	ldr	r2, [pc, #240]	@ (801b0f0 <LL_TIM_Init+0x134>)
 801b000:	4293      	cmp	r3, r2
 801b002:	d106      	bne.n	801b012 <LL_TIM_Init+0x56>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 801b004:	68fb      	ldr	r3, [r7, #12]
 801b006:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801b00a:	683b      	ldr	r3, [r7, #0]
 801b00c:	685b      	ldr	r3, [r3, #4]
 801b00e:	4313      	orrs	r3, r2
 801b010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	4a31      	ldr	r2, [pc, #196]	@ (801b0dc <LL_TIM_Init+0x120>)
 801b016:	4293      	cmp	r3, r2
 801b018:	d023      	beq.n	801b062 <LL_TIM_Init+0xa6>
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b020:	d01f      	beq.n	801b062 <LL_TIM_Init+0xa6>
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	4a2e      	ldr	r2, [pc, #184]	@ (801b0e0 <LL_TIM_Init+0x124>)
 801b026:	4293      	cmp	r3, r2
 801b028:	d01b      	beq.n	801b062 <LL_TIM_Init+0xa6>
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	4a2d      	ldr	r2, [pc, #180]	@ (801b0e4 <LL_TIM_Init+0x128>)
 801b02e:	4293      	cmp	r3, r2
 801b030:	d017      	beq.n	801b062 <LL_TIM_Init+0xa6>
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	4a2c      	ldr	r2, [pc, #176]	@ (801b0e8 <LL_TIM_Init+0x12c>)
 801b036:	4293      	cmp	r3, r2
 801b038:	d013      	beq.n	801b062 <LL_TIM_Init+0xa6>
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	4a2b      	ldr	r2, [pc, #172]	@ (801b0ec <LL_TIM_Init+0x130>)
 801b03e:	4293      	cmp	r3, r2
 801b040:	d00f      	beq.n	801b062 <LL_TIM_Init+0xa6>
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	4a2b      	ldr	r2, [pc, #172]	@ (801b0f4 <LL_TIM_Init+0x138>)
 801b046:	4293      	cmp	r3, r2
 801b048:	d00b      	beq.n	801b062 <LL_TIM_Init+0xa6>
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	4a2a      	ldr	r2, [pc, #168]	@ (801b0f8 <LL_TIM_Init+0x13c>)
 801b04e:	4293      	cmp	r3, r2
 801b050:	d007      	beq.n	801b062 <LL_TIM_Init+0xa6>
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	4a29      	ldr	r2, [pc, #164]	@ (801b0fc <LL_TIM_Init+0x140>)
 801b056:	4293      	cmp	r3, r2
 801b058:	d003      	beq.n	801b062 <LL_TIM_Init+0xa6>
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	4a24      	ldr	r2, [pc, #144]	@ (801b0f0 <LL_TIM_Init+0x134>)
 801b05e:	4293      	cmp	r3, r2
 801b060:	d106      	bne.n	801b070 <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 801b062:	68fb      	ldr	r3, [r7, #12]
 801b064:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801b068:	683b      	ldr	r3, [r7, #0]
 801b06a:	68db      	ldr	r3, [r3, #12]
 801b06c:	4313      	orrs	r3, r2
 801b06e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	68fa      	ldr	r2, [r7, #12]
 801b074:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 801b076:	683b      	ldr	r3, [r7, #0]
 801b078:	689b      	ldr	r3, [r3, #8]
 801b07a:	4619      	mov	r1, r3
 801b07c:	6878      	ldr	r0, [r7, #4]
 801b07e:	f7ff ff1b 	bl	801aeb8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 801b082:	683b      	ldr	r3, [r7, #0]
 801b084:	881b      	ldrh	r3, [r3, #0]
 801b086:	4619      	mov	r1, r3
 801b088:	6878      	ldr	r0, [r7, #4]
 801b08a:	f7ff ff07 	bl	801ae9c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	4a12      	ldr	r2, [pc, #72]	@ (801b0dc <LL_TIM_Init+0x120>)
 801b092:	4293      	cmp	r3, r2
 801b094:	d013      	beq.n	801b0be <LL_TIM_Init+0x102>
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	4a14      	ldr	r2, [pc, #80]	@ (801b0ec <LL_TIM_Init+0x130>)
 801b09a:	4293      	cmp	r3, r2
 801b09c:	d00f      	beq.n	801b0be <LL_TIM_Init+0x102>
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	4a14      	ldr	r2, [pc, #80]	@ (801b0f4 <LL_TIM_Init+0x138>)
 801b0a2:	4293      	cmp	r3, r2
 801b0a4:	d00b      	beq.n	801b0be <LL_TIM_Init+0x102>
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	4a13      	ldr	r2, [pc, #76]	@ (801b0f8 <LL_TIM_Init+0x13c>)
 801b0aa:	4293      	cmp	r3, r2
 801b0ac:	d007      	beq.n	801b0be <LL_TIM_Init+0x102>
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	4a12      	ldr	r2, [pc, #72]	@ (801b0fc <LL_TIM_Init+0x140>)
 801b0b2:	4293      	cmp	r3, r2
 801b0b4:	d003      	beq.n	801b0be <LL_TIM_Init+0x102>
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	4a0d      	ldr	r2, [pc, #52]	@ (801b0f0 <LL_TIM_Init+0x134>)
 801b0ba:	4293      	cmp	r3, r2
 801b0bc:	d105      	bne.n	801b0ca <LL_TIM_Init+0x10e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 801b0be:	683b      	ldr	r3, [r7, #0]
 801b0c0:	691b      	ldr	r3, [r3, #16]
 801b0c2:	4619      	mov	r1, r3
 801b0c4:	6878      	ldr	r0, [r7, #4]
 801b0c6:	f7ff ff05 	bl	801aed4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 801b0ca:	6878      	ldr	r0, [r7, #4]
 801b0cc:	f7ff ff66 	bl	801af9c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 801b0d0:	2300      	movs	r3, #0
}
 801b0d2:	4618      	mov	r0, r3
 801b0d4:	3710      	adds	r7, #16
 801b0d6:	46bd      	mov	sp, r7
 801b0d8:	bd80      	pop	{r7, pc}
 801b0da:	bf00      	nop
 801b0dc:	40012c00 	.word	0x40012c00
 801b0e0:	40000400 	.word	0x40000400
 801b0e4:	40000800 	.word	0x40000800
 801b0e8:	40000c00 	.word	0x40000c00
 801b0ec:	40013400 	.word	0x40013400
 801b0f0:	40015000 	.word	0x40015000
 801b0f4:	40014000 	.word	0x40014000
 801b0f8:	40014400 	.word	0x40014400
 801b0fc:	40014800 	.word	0x40014800

0801b100 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 801b100:	b580      	push	{r7, lr}
 801b102:	b086      	sub	sp, #24
 801b104:	af00      	add	r7, sp, #0
 801b106:	60f8      	str	r0, [r7, #12]
 801b108:	60b9      	str	r1, [r7, #8]
 801b10a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 801b10c:	2301      	movs	r3, #1
 801b10e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 801b110:	68bb      	ldr	r3, [r7, #8]
 801b112:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801b116:	d045      	beq.n	801b1a4 <LL_TIM_OC_Init+0xa4>
 801b118:	68bb      	ldr	r3, [r7, #8]
 801b11a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801b11e:	d848      	bhi.n	801b1b2 <LL_TIM_OC_Init+0xb2>
 801b120:	68bb      	ldr	r3, [r7, #8]
 801b122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b126:	d036      	beq.n	801b196 <LL_TIM_OC_Init+0x96>
 801b128:	68bb      	ldr	r3, [r7, #8]
 801b12a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b12e:	d840      	bhi.n	801b1b2 <LL_TIM_OC_Init+0xb2>
 801b130:	68bb      	ldr	r3, [r7, #8]
 801b132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801b136:	d027      	beq.n	801b188 <LL_TIM_OC_Init+0x88>
 801b138:	68bb      	ldr	r3, [r7, #8]
 801b13a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801b13e:	d838      	bhi.n	801b1b2 <LL_TIM_OC_Init+0xb2>
 801b140:	68bb      	ldr	r3, [r7, #8]
 801b142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b146:	d018      	beq.n	801b17a <LL_TIM_OC_Init+0x7a>
 801b148:	68bb      	ldr	r3, [r7, #8]
 801b14a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b14e:	d830      	bhi.n	801b1b2 <LL_TIM_OC_Init+0xb2>
 801b150:	68bb      	ldr	r3, [r7, #8]
 801b152:	2b01      	cmp	r3, #1
 801b154:	d003      	beq.n	801b15e <LL_TIM_OC_Init+0x5e>
 801b156:	68bb      	ldr	r3, [r7, #8]
 801b158:	2b10      	cmp	r3, #16
 801b15a:	d007      	beq.n	801b16c <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 801b15c:	e029      	b.n	801b1b2 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 801b15e:	6879      	ldr	r1, [r7, #4]
 801b160:	68f8      	ldr	r0, [r7, #12]
 801b162:	f000 f8ab 	bl	801b2bc <OC1Config>
 801b166:	4603      	mov	r3, r0
 801b168:	75fb      	strb	r3, [r7, #23]
      break;
 801b16a:	e023      	b.n	801b1b4 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 801b16c:	6879      	ldr	r1, [r7, #4]
 801b16e:	68f8      	ldr	r0, [r7, #12]
 801b170:	f000 f92a 	bl	801b3c8 <OC2Config>
 801b174:	4603      	mov	r3, r0
 801b176:	75fb      	strb	r3, [r7, #23]
      break;
 801b178:	e01c      	b.n	801b1b4 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 801b17a:	6879      	ldr	r1, [r7, #4]
 801b17c:	68f8      	ldr	r0, [r7, #12]
 801b17e:	f000 f9ad 	bl	801b4dc <OC3Config>
 801b182:	4603      	mov	r3, r0
 801b184:	75fb      	strb	r3, [r7, #23]
      break;
 801b186:	e015      	b.n	801b1b4 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 801b188:	6879      	ldr	r1, [r7, #4]
 801b18a:	68f8      	ldr	r0, [r7, #12]
 801b18c:	f000 fa30 	bl	801b5f0 <OC4Config>
 801b190:	4603      	mov	r3, r0
 801b192:	75fb      	strb	r3, [r7, #23]
      break;
 801b194:	e00e      	b.n	801b1b4 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 801b196:	6879      	ldr	r1, [r7, #4]
 801b198:	68f8      	ldr	r0, [r7, #12]
 801b19a:	f000 fab3 	bl	801b704 <OC5Config>
 801b19e:	4603      	mov	r3, r0
 801b1a0:	75fb      	strb	r3, [r7, #23]
      break;
 801b1a2:	e007      	b.n	801b1b4 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 801b1a4:	6879      	ldr	r1, [r7, #4]
 801b1a6:	68f8      	ldr	r0, [r7, #12]
 801b1a8:	f000 fb16 	bl	801b7d8 <OC6Config>
 801b1ac:	4603      	mov	r3, r0
 801b1ae:	75fb      	strb	r3, [r7, #23]
      break;
 801b1b0:	e000      	b.n	801b1b4 <LL_TIM_OC_Init+0xb4>
      break;
 801b1b2:	bf00      	nop
  }

  return result;
 801b1b4:	7dfb      	ldrb	r3, [r7, #23]
}
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	3718      	adds	r7, #24
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	bd80      	pop	{r7, pc}
	...

0801b1c0 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 801b1c0:	b480      	push	{r7}
 801b1c2:	b085      	sub	sp, #20
 801b1c4:	af00      	add	r7, sp, #0
 801b1c6:	6078      	str	r0, [r7, #4]
 801b1c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 801b1ca:	2300      	movs	r3, #0
 801b1cc:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801b1d4:	683a      	ldr	r2, [r7, #0]
 801b1d6:	7b12      	ldrb	r2, [r2, #12]
 801b1d8:	4313      	orrs	r3, r2
 801b1da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 801b1dc:	68fb      	ldr	r3, [r7, #12]
 801b1de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801b1e2:	683b      	ldr	r3, [r7, #0]
 801b1e4:	689b      	ldr	r3, [r3, #8]
 801b1e6:	4313      	orrs	r3, r2
 801b1e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801b1f0:	683b      	ldr	r3, [r7, #0]
 801b1f2:	685b      	ldr	r3, [r3, #4]
 801b1f4:	4313      	orrs	r3, r2
 801b1f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 801b1f8:	68fb      	ldr	r3, [r7, #12]
 801b1fa:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801b1fe:	683b      	ldr	r3, [r7, #0]
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	4313      	orrs	r3, r2
 801b204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 801b206:	68fb      	ldr	r3, [r7, #12]
 801b208:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b20c:	683a      	ldr	r2, [r7, #0]
 801b20e:	89d2      	ldrh	r2, [r2, #14]
 801b210:	4313      	orrs	r3, r2
 801b212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 801b214:	68fb      	ldr	r3, [r7, #12]
 801b216:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801b21a:	683b      	ldr	r3, [r7, #0]
 801b21c:	691b      	ldr	r3, [r3, #16]
 801b21e:	4313      	orrs	r3, r2
 801b220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 801b222:	68fb      	ldr	r3, [r7, #12]
 801b224:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801b228:	683b      	ldr	r3, [r7, #0]
 801b22a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b22c:	4313      	orrs	r3, r2
 801b22e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 801b230:	68fb      	ldr	r3, [r7, #12]
 801b232:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 801b236:	683b      	ldr	r3, [r7, #0]
 801b238:	695b      	ldr	r3, [r3, #20]
 801b23a:	4313      	orrs	r3, r2
 801b23c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 801b23e:	68fb      	ldr	r3, [r7, #12]
 801b240:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 801b244:	683b      	ldr	r3, [r7, #0]
 801b246:	699b      	ldr	r3, [r3, #24]
 801b248:	4313      	orrs	r3, r2
 801b24a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	4a18      	ldr	r2, [pc, #96]	@ (801b2b0 <LL_TIM_BDTR_Init+0xf0>)
 801b250:	4293      	cmp	r3, r2
 801b252:	d007      	beq.n	801b264 <LL_TIM_BDTR_Init+0xa4>
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	4a17      	ldr	r2, [pc, #92]	@ (801b2b4 <LL_TIM_BDTR_Init+0xf4>)
 801b258:	4293      	cmp	r3, r2
 801b25a:	d003      	beq.n	801b264 <LL_TIM_BDTR_Init+0xa4>
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	4a16      	ldr	r2, [pc, #88]	@ (801b2b8 <LL_TIM_BDTR_Init+0xf8>)
 801b260:	4293      	cmp	r3, r2
 801b262:	d11b      	bne.n	801b29c <LL_TIM_BDTR_Init+0xdc>
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 801b264:	68fb      	ldr	r3, [r7, #12]
 801b266:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801b26a:	683b      	ldr	r3, [r7, #0]
 801b26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b26e:	4313      	orrs	r3, r2
 801b270:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 801b272:	68fb      	ldr	r3, [r7, #12]
 801b274:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801b278:	683b      	ldr	r3, [r7, #0]
 801b27a:	69db      	ldr	r3, [r3, #28]
 801b27c:	4313      	orrs	r3, r2
 801b27e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 801b280:	68fb      	ldr	r3, [r7, #12]
 801b282:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801b286:	683b      	ldr	r3, [r7, #0]
 801b288:	6a1b      	ldr	r3, [r3, #32]
 801b28a:	4313      	orrs	r3, r2
 801b28c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 801b294:	683b      	ldr	r3, [r7, #0]
 801b296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b298:	4313      	orrs	r3, r2
 801b29a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	68fa      	ldr	r2, [r7, #12]
 801b2a0:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 801b2a2:	2300      	movs	r3, #0
}
 801b2a4:	4618      	mov	r0, r3
 801b2a6:	3714      	adds	r7, #20
 801b2a8:	46bd      	mov	sp, r7
 801b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ae:	4770      	bx	lr
 801b2b0:	40012c00 	.word	0x40012c00
 801b2b4:	40013400 	.word	0x40013400
 801b2b8:	40015000 	.word	0x40015000

0801b2bc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 801b2bc:	b580      	push	{r7, lr}
 801b2be:	b086      	sub	sp, #24
 801b2c0:	af00      	add	r7, sp, #0
 801b2c2:	6078      	str	r0, [r7, #4]
 801b2c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	6a1b      	ldr	r3, [r3, #32]
 801b2ca:	f023 0201 	bic.w	r2, r3, #1
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	6a1b      	ldr	r3, [r3, #32]
 801b2d6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	685b      	ldr	r3, [r3, #4]
 801b2dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	699b      	ldr	r3, [r3, #24]
 801b2e2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 801b2e4:	68fb      	ldr	r3, [r7, #12]
 801b2e6:	f023 0303 	bic.w	r3, r3, #3
 801b2ea:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801b2f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801b2f6:	683a      	ldr	r2, [r7, #0]
 801b2f8:	6812      	ldr	r2, [r2, #0]
 801b2fa:	4313      	orrs	r3, r2
 801b2fc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 801b2fe:	697b      	ldr	r3, [r7, #20]
 801b300:	f023 0202 	bic.w	r2, r3, #2
 801b304:	683b      	ldr	r3, [r7, #0]
 801b306:	691b      	ldr	r3, [r3, #16]
 801b308:	4313      	orrs	r3, r2
 801b30a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 801b30c:	697b      	ldr	r3, [r7, #20]
 801b30e:	f023 0201 	bic.w	r2, r3, #1
 801b312:	683b      	ldr	r3, [r7, #0]
 801b314:	685b      	ldr	r3, [r3, #4]
 801b316:	4313      	orrs	r3, r2
 801b318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	4a24      	ldr	r2, [pc, #144]	@ (801b3b0 <OC1Config+0xf4>)
 801b31e:	4293      	cmp	r3, r2
 801b320:	d013      	beq.n	801b34a <OC1Config+0x8e>
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	4a23      	ldr	r2, [pc, #140]	@ (801b3b4 <OC1Config+0xf8>)
 801b326:	4293      	cmp	r3, r2
 801b328:	d00f      	beq.n	801b34a <OC1Config+0x8e>
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	4a22      	ldr	r2, [pc, #136]	@ (801b3b8 <OC1Config+0xfc>)
 801b32e:	4293      	cmp	r3, r2
 801b330:	d00b      	beq.n	801b34a <OC1Config+0x8e>
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	4a21      	ldr	r2, [pc, #132]	@ (801b3bc <OC1Config+0x100>)
 801b336:	4293      	cmp	r3, r2
 801b338:	d007      	beq.n	801b34a <OC1Config+0x8e>
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	4a20      	ldr	r2, [pc, #128]	@ (801b3c0 <OC1Config+0x104>)
 801b33e:	4293      	cmp	r3, r2
 801b340:	d003      	beq.n	801b34a <OC1Config+0x8e>
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	4a1f      	ldr	r2, [pc, #124]	@ (801b3c4 <OC1Config+0x108>)
 801b346:	4293      	cmp	r3, r2
 801b348:	d11e      	bne.n	801b388 <OC1Config+0xcc>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 801b34a:	697b      	ldr	r3, [r7, #20]
 801b34c:	f023 0208 	bic.w	r2, r3, #8
 801b350:	683b      	ldr	r3, [r7, #0]
 801b352:	695b      	ldr	r3, [r3, #20]
 801b354:	009b      	lsls	r3, r3, #2
 801b356:	4313      	orrs	r3, r2
 801b358:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 801b35a:	697b      	ldr	r3, [r7, #20]
 801b35c:	f023 0204 	bic.w	r2, r3, #4
 801b360:	683b      	ldr	r3, [r7, #0]
 801b362:	689b      	ldr	r3, [r3, #8]
 801b364:	009b      	lsls	r3, r3, #2
 801b366:	4313      	orrs	r3, r2
 801b368:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 801b36a:	693b      	ldr	r3, [r7, #16]
 801b36c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801b370:	683b      	ldr	r3, [r7, #0]
 801b372:	699b      	ldr	r3, [r3, #24]
 801b374:	4313      	orrs	r3, r2
 801b376:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 801b378:	693b      	ldr	r3, [r7, #16]
 801b37a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801b37e:	683b      	ldr	r3, [r7, #0]
 801b380:	69db      	ldr	r3, [r3, #28]
 801b382:	005b      	lsls	r3, r3, #1
 801b384:	4313      	orrs	r3, r2
 801b386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	693a      	ldr	r2, [r7, #16]
 801b38c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	68fa      	ldr	r2, [r7, #12]
 801b392:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 801b394:	683b      	ldr	r3, [r7, #0]
 801b396:	68db      	ldr	r3, [r3, #12]
 801b398:	4619      	mov	r1, r3
 801b39a:	6878      	ldr	r0, [r7, #4]
 801b39c:	f7ff fda8 	bl	801aef0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	697a      	ldr	r2, [r7, #20]
 801b3a4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 801b3a6:	2300      	movs	r3, #0
}
 801b3a8:	4618      	mov	r0, r3
 801b3aa:	3718      	adds	r7, #24
 801b3ac:	46bd      	mov	sp, r7
 801b3ae:	bd80      	pop	{r7, pc}
 801b3b0:	40012c00 	.word	0x40012c00
 801b3b4:	40013400 	.word	0x40013400
 801b3b8:	40014000 	.word	0x40014000
 801b3bc:	40014400 	.word	0x40014400
 801b3c0:	40014800 	.word	0x40014800
 801b3c4:	40015000 	.word	0x40015000

0801b3c8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 801b3c8:	b580      	push	{r7, lr}
 801b3ca:	b086      	sub	sp, #24
 801b3cc:	af00      	add	r7, sp, #0
 801b3ce:	6078      	str	r0, [r7, #4]
 801b3d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	6a1b      	ldr	r3, [r3, #32]
 801b3d6:	f023 0210 	bic.w	r2, r3, #16
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	6a1b      	ldr	r3, [r3, #32]
 801b3e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	685b      	ldr	r3, [r3, #4]
 801b3e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	699b      	ldr	r3, [r3, #24]
 801b3ee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 801b3f0:	68fb      	ldr	r3, [r7, #12]
 801b3f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801b3f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 801b3f8:	68fb      	ldr	r3, [r7, #12]
 801b3fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801b3fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801b402:	683a      	ldr	r2, [r7, #0]
 801b404:	6812      	ldr	r2, [r2, #0]
 801b406:	0212      	lsls	r2, r2, #8
 801b408:	4313      	orrs	r3, r2
 801b40a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 801b40c:	697b      	ldr	r3, [r7, #20]
 801b40e:	f023 0220 	bic.w	r2, r3, #32
 801b412:	683b      	ldr	r3, [r7, #0]
 801b414:	691b      	ldr	r3, [r3, #16]
 801b416:	011b      	lsls	r3, r3, #4
 801b418:	4313      	orrs	r3, r2
 801b41a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 801b41c:	697b      	ldr	r3, [r7, #20]
 801b41e:	f023 0210 	bic.w	r2, r3, #16
 801b422:	683b      	ldr	r3, [r7, #0]
 801b424:	685b      	ldr	r3, [r3, #4]
 801b426:	011b      	lsls	r3, r3, #4
 801b428:	4313      	orrs	r3, r2
 801b42a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	4a25      	ldr	r2, [pc, #148]	@ (801b4c4 <OC2Config+0xfc>)
 801b430:	4293      	cmp	r3, r2
 801b432:	d013      	beq.n	801b45c <OC2Config+0x94>
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	4a24      	ldr	r2, [pc, #144]	@ (801b4c8 <OC2Config+0x100>)
 801b438:	4293      	cmp	r3, r2
 801b43a:	d00f      	beq.n	801b45c <OC2Config+0x94>
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	4a23      	ldr	r2, [pc, #140]	@ (801b4cc <OC2Config+0x104>)
 801b440:	4293      	cmp	r3, r2
 801b442:	d00b      	beq.n	801b45c <OC2Config+0x94>
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	4a22      	ldr	r2, [pc, #136]	@ (801b4d0 <OC2Config+0x108>)
 801b448:	4293      	cmp	r3, r2
 801b44a:	d007      	beq.n	801b45c <OC2Config+0x94>
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	4a21      	ldr	r2, [pc, #132]	@ (801b4d4 <OC2Config+0x10c>)
 801b450:	4293      	cmp	r3, r2
 801b452:	d003      	beq.n	801b45c <OC2Config+0x94>
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	4a20      	ldr	r2, [pc, #128]	@ (801b4d8 <OC2Config+0x110>)
 801b458:	4293      	cmp	r3, r2
 801b45a:	d11f      	bne.n	801b49c <OC2Config+0xd4>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 801b45c:	697b      	ldr	r3, [r7, #20]
 801b45e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801b462:	683b      	ldr	r3, [r7, #0]
 801b464:	695b      	ldr	r3, [r3, #20]
 801b466:	019b      	lsls	r3, r3, #6
 801b468:	4313      	orrs	r3, r2
 801b46a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 801b46c:	697b      	ldr	r3, [r7, #20]
 801b46e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 801b472:	683b      	ldr	r3, [r7, #0]
 801b474:	689b      	ldr	r3, [r3, #8]
 801b476:	019b      	lsls	r3, r3, #6
 801b478:	4313      	orrs	r3, r2
 801b47a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 801b47c:	693b      	ldr	r3, [r7, #16]
 801b47e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801b482:	683b      	ldr	r3, [r7, #0]
 801b484:	699b      	ldr	r3, [r3, #24]
 801b486:	009b      	lsls	r3, r3, #2
 801b488:	4313      	orrs	r3, r2
 801b48a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 801b48c:	693b      	ldr	r3, [r7, #16]
 801b48e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801b492:	683b      	ldr	r3, [r7, #0]
 801b494:	69db      	ldr	r3, [r3, #28]
 801b496:	00db      	lsls	r3, r3, #3
 801b498:	4313      	orrs	r3, r2
 801b49a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	693a      	ldr	r2, [r7, #16]
 801b4a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	68fa      	ldr	r2, [r7, #12]
 801b4a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 801b4a8:	683b      	ldr	r3, [r7, #0]
 801b4aa:	68db      	ldr	r3, [r3, #12]
 801b4ac:	4619      	mov	r1, r3
 801b4ae:	6878      	ldr	r0, [r7, #4]
 801b4b0:	f7ff fd2c 	bl	801af0c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	697a      	ldr	r2, [r7, #20]
 801b4b8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 801b4ba:	2300      	movs	r3, #0
}
 801b4bc:	4618      	mov	r0, r3
 801b4be:	3718      	adds	r7, #24
 801b4c0:	46bd      	mov	sp, r7
 801b4c2:	bd80      	pop	{r7, pc}
 801b4c4:	40012c00 	.word	0x40012c00
 801b4c8:	40013400 	.word	0x40013400
 801b4cc:	40014000 	.word	0x40014000
 801b4d0:	40014400 	.word	0x40014400
 801b4d4:	40014800 	.word	0x40014800
 801b4d8:	40015000 	.word	0x40015000

0801b4dc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 801b4dc:	b580      	push	{r7, lr}
 801b4de:	b086      	sub	sp, #24
 801b4e0:	af00      	add	r7, sp, #0
 801b4e2:	6078      	str	r0, [r7, #4]
 801b4e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	6a1b      	ldr	r3, [r3, #32]
 801b4ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	6a1b      	ldr	r3, [r3, #32]
 801b4f6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	685b      	ldr	r3, [r3, #4]
 801b4fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	69db      	ldr	r3, [r3, #28]
 801b502:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 801b504:	68fb      	ldr	r3, [r7, #12]
 801b506:	f023 0303 	bic.w	r3, r3, #3
 801b50a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 801b50c:	68fb      	ldr	r3, [r7, #12]
 801b50e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801b512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801b516:	683a      	ldr	r2, [r7, #0]
 801b518:	6812      	ldr	r2, [r2, #0]
 801b51a:	4313      	orrs	r3, r2
 801b51c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 801b51e:	697b      	ldr	r3, [r7, #20]
 801b520:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801b524:	683b      	ldr	r3, [r7, #0]
 801b526:	691b      	ldr	r3, [r3, #16]
 801b528:	021b      	lsls	r3, r3, #8
 801b52a:	4313      	orrs	r3, r2
 801b52c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 801b52e:	697b      	ldr	r3, [r7, #20]
 801b530:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801b534:	683b      	ldr	r3, [r7, #0]
 801b536:	685b      	ldr	r3, [r3, #4]
 801b538:	021b      	lsls	r3, r3, #8
 801b53a:	4313      	orrs	r3, r2
 801b53c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	4a25      	ldr	r2, [pc, #148]	@ (801b5d8 <OC3Config+0xfc>)
 801b542:	4293      	cmp	r3, r2
 801b544:	d013      	beq.n	801b56e <OC3Config+0x92>
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	4a24      	ldr	r2, [pc, #144]	@ (801b5dc <OC3Config+0x100>)
 801b54a:	4293      	cmp	r3, r2
 801b54c:	d00f      	beq.n	801b56e <OC3Config+0x92>
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	4a23      	ldr	r2, [pc, #140]	@ (801b5e0 <OC3Config+0x104>)
 801b552:	4293      	cmp	r3, r2
 801b554:	d00b      	beq.n	801b56e <OC3Config+0x92>
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	4a22      	ldr	r2, [pc, #136]	@ (801b5e4 <OC3Config+0x108>)
 801b55a:	4293      	cmp	r3, r2
 801b55c:	d007      	beq.n	801b56e <OC3Config+0x92>
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	4a21      	ldr	r2, [pc, #132]	@ (801b5e8 <OC3Config+0x10c>)
 801b562:	4293      	cmp	r3, r2
 801b564:	d003      	beq.n	801b56e <OC3Config+0x92>
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	4a20      	ldr	r2, [pc, #128]	@ (801b5ec <OC3Config+0x110>)
 801b56a:	4293      	cmp	r3, r2
 801b56c:	d11f      	bne.n	801b5ae <OC3Config+0xd2>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 801b56e:	697b      	ldr	r3, [r7, #20]
 801b570:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801b574:	683b      	ldr	r3, [r7, #0]
 801b576:	695b      	ldr	r3, [r3, #20]
 801b578:	029b      	lsls	r3, r3, #10
 801b57a:	4313      	orrs	r3, r2
 801b57c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 801b57e:	697b      	ldr	r3, [r7, #20]
 801b580:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801b584:	683b      	ldr	r3, [r7, #0]
 801b586:	689b      	ldr	r3, [r3, #8]
 801b588:	029b      	lsls	r3, r3, #10
 801b58a:	4313      	orrs	r3, r2
 801b58c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 801b58e:	693b      	ldr	r3, [r7, #16]
 801b590:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801b594:	683b      	ldr	r3, [r7, #0]
 801b596:	699b      	ldr	r3, [r3, #24]
 801b598:	011b      	lsls	r3, r3, #4
 801b59a:	4313      	orrs	r3, r2
 801b59c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 801b59e:	693b      	ldr	r3, [r7, #16]
 801b5a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801b5a4:	683b      	ldr	r3, [r7, #0]
 801b5a6:	69db      	ldr	r3, [r3, #28]
 801b5a8:	015b      	lsls	r3, r3, #5
 801b5aa:	4313      	orrs	r3, r2
 801b5ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	693a      	ldr	r2, [r7, #16]
 801b5b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	68fa      	ldr	r2, [r7, #12]
 801b5b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 801b5ba:	683b      	ldr	r3, [r7, #0]
 801b5bc:	68db      	ldr	r3, [r3, #12]
 801b5be:	4619      	mov	r1, r3
 801b5c0:	6878      	ldr	r0, [r7, #4]
 801b5c2:	f7ff fcb1 	bl	801af28 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	697a      	ldr	r2, [r7, #20]
 801b5ca:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 801b5cc:	2300      	movs	r3, #0
}
 801b5ce:	4618      	mov	r0, r3
 801b5d0:	3718      	adds	r7, #24
 801b5d2:	46bd      	mov	sp, r7
 801b5d4:	bd80      	pop	{r7, pc}
 801b5d6:	bf00      	nop
 801b5d8:	40012c00 	.word	0x40012c00
 801b5dc:	40013400 	.word	0x40013400
 801b5e0:	40014000 	.word	0x40014000
 801b5e4:	40014400 	.word	0x40014400
 801b5e8:	40014800 	.word	0x40014800
 801b5ec:	40015000 	.word	0x40015000

0801b5f0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 801b5f0:	b580      	push	{r7, lr}
 801b5f2:	b086      	sub	sp, #24
 801b5f4:	af00      	add	r7, sp, #0
 801b5f6:	6078      	str	r0, [r7, #4]
 801b5f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	6a1b      	ldr	r3, [r3, #32]
 801b5fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	6a1b      	ldr	r3, [r3, #32]
 801b60a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	685b      	ldr	r3, [r3, #4]
 801b610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	69db      	ldr	r3, [r3, #28]
 801b616:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 801b618:	68fb      	ldr	r3, [r7, #12]
 801b61a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801b61e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 801b620:	68fb      	ldr	r3, [r7, #12]
 801b622:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801b626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801b62a:	683a      	ldr	r2, [r7, #0]
 801b62c:	6812      	ldr	r2, [r2, #0]
 801b62e:	0212      	lsls	r2, r2, #8
 801b630:	4313      	orrs	r3, r2
 801b632:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 801b634:	697b      	ldr	r3, [r7, #20]
 801b636:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801b63a:	683b      	ldr	r3, [r7, #0]
 801b63c:	691b      	ldr	r3, [r3, #16]
 801b63e:	031b      	lsls	r3, r3, #12
 801b640:	4313      	orrs	r3, r2
 801b642:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 801b644:	697b      	ldr	r3, [r7, #20]
 801b646:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801b64a:	683b      	ldr	r3, [r7, #0]
 801b64c:	685b      	ldr	r3, [r3, #4]
 801b64e:	031b      	lsls	r3, r3, #12
 801b650:	4313      	orrs	r3, r2
 801b652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	4a25      	ldr	r2, [pc, #148]	@ (801b6ec <OC4Config+0xfc>)
 801b658:	4293      	cmp	r3, r2
 801b65a:	d013      	beq.n	801b684 <OC4Config+0x94>
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	4a24      	ldr	r2, [pc, #144]	@ (801b6f0 <OC4Config+0x100>)
 801b660:	4293      	cmp	r3, r2
 801b662:	d00f      	beq.n	801b684 <OC4Config+0x94>
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	4a23      	ldr	r2, [pc, #140]	@ (801b6f4 <OC4Config+0x104>)
 801b668:	4293      	cmp	r3, r2
 801b66a:	d00b      	beq.n	801b684 <OC4Config+0x94>
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	4a22      	ldr	r2, [pc, #136]	@ (801b6f8 <OC4Config+0x108>)
 801b670:	4293      	cmp	r3, r2
 801b672:	d007      	beq.n	801b684 <OC4Config+0x94>
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	4a21      	ldr	r2, [pc, #132]	@ (801b6fc <OC4Config+0x10c>)
 801b678:	4293      	cmp	r3, r2
 801b67a:	d003      	beq.n	801b684 <OC4Config+0x94>
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	4a20      	ldr	r2, [pc, #128]	@ (801b700 <OC4Config+0x110>)
 801b680:	4293      	cmp	r3, r2
 801b682:	d11f      	bne.n	801b6c4 <OC4Config+0xd4>
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 801b684:	697b      	ldr	r3, [r7, #20]
 801b686:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 801b68a:	683b      	ldr	r3, [r7, #0]
 801b68c:	695b      	ldr	r3, [r3, #20]
 801b68e:	039b      	lsls	r3, r3, #14
 801b690:	4313      	orrs	r3, r2
 801b692:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 801b694:	697b      	ldr	r3, [r7, #20]
 801b696:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801b69a:	683b      	ldr	r3, [r7, #0]
 801b69c:	689b      	ldr	r3, [r3, #8]
 801b69e:	039b      	lsls	r3, r3, #14
 801b6a0:	4313      	orrs	r3, r2
 801b6a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 801b6a4:	693b      	ldr	r3, [r7, #16]
 801b6a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801b6aa:	683b      	ldr	r3, [r7, #0]
 801b6ac:	699b      	ldr	r3, [r3, #24]
 801b6ae:	019b      	lsls	r3, r3, #6
 801b6b0:	4313      	orrs	r3, r2
 801b6b2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 801b6b4:	693b      	ldr	r3, [r7, #16]
 801b6b6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 801b6ba:	683b      	ldr	r3, [r7, #0]
 801b6bc:	69db      	ldr	r3, [r3, #28]
 801b6be:	01db      	lsls	r3, r3, #7
 801b6c0:	4313      	orrs	r3, r2
 801b6c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	693a      	ldr	r2, [r7, #16]
 801b6c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	68fa      	ldr	r2, [r7, #12]
 801b6ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 801b6d0:	683b      	ldr	r3, [r7, #0]
 801b6d2:	68db      	ldr	r3, [r3, #12]
 801b6d4:	4619      	mov	r1, r3
 801b6d6:	6878      	ldr	r0, [r7, #4]
 801b6d8:	f7ff fc34 	bl	801af44 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	697a      	ldr	r2, [r7, #20]
 801b6e0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 801b6e2:	2300      	movs	r3, #0
}
 801b6e4:	4618      	mov	r0, r3
 801b6e6:	3718      	adds	r7, #24
 801b6e8:	46bd      	mov	sp, r7
 801b6ea:	bd80      	pop	{r7, pc}
 801b6ec:	40012c00 	.word	0x40012c00
 801b6f0:	40013400 	.word	0x40013400
 801b6f4:	40014000 	.word	0x40014000
 801b6f8:	40014400 	.word	0x40014400
 801b6fc:	40014800 	.word	0x40014800
 801b700:	40015000 	.word	0x40015000

0801b704 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 801b704:	b580      	push	{r7, lr}
 801b706:	b084      	sub	sp, #16
 801b708:	af00      	add	r7, sp, #0
 801b70a:	6078      	str	r0, [r7, #4]
 801b70c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	6a1b      	ldr	r3, [r3, #32]
 801b712:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	6a1b      	ldr	r3, [r3, #32]
 801b71e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b724:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 801b726:	68bb      	ldr	r3, [r7, #8]
 801b728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801b72c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801b730:	683a      	ldr	r2, [r7, #0]
 801b732:	6812      	ldr	r2, [r2, #0]
 801b734:	4313      	orrs	r3, r2
 801b736:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 801b73e:	683b      	ldr	r3, [r7, #0]
 801b740:	691b      	ldr	r3, [r3, #16]
 801b742:	041b      	lsls	r3, r3, #16
 801b744:	4313      	orrs	r3, r2
 801b746:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 801b748:	68fb      	ldr	r3, [r7, #12]
 801b74a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801b74e:	683b      	ldr	r3, [r7, #0]
 801b750:	685b      	ldr	r3, [r3, #4]
 801b752:	041b      	lsls	r3, r3, #16
 801b754:	4313      	orrs	r3, r2
 801b756:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	4a19      	ldr	r2, [pc, #100]	@ (801b7c0 <OC5Config+0xbc>)
 801b75c:	4293      	cmp	r3, r2
 801b75e:	d013      	beq.n	801b788 <OC5Config+0x84>
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	4a18      	ldr	r2, [pc, #96]	@ (801b7c4 <OC5Config+0xc0>)
 801b764:	4293      	cmp	r3, r2
 801b766:	d00f      	beq.n	801b788 <OC5Config+0x84>
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	4a17      	ldr	r2, [pc, #92]	@ (801b7c8 <OC5Config+0xc4>)
 801b76c:	4293      	cmp	r3, r2
 801b76e:	d00b      	beq.n	801b788 <OC5Config+0x84>
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	4a16      	ldr	r2, [pc, #88]	@ (801b7cc <OC5Config+0xc8>)
 801b774:	4293      	cmp	r3, r2
 801b776:	d007      	beq.n	801b788 <OC5Config+0x84>
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	4a15      	ldr	r2, [pc, #84]	@ (801b7d0 <OC5Config+0xcc>)
 801b77c:	4293      	cmp	r3, r2
 801b77e:	d003      	beq.n	801b788 <OC5Config+0x84>
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	4a14      	ldr	r2, [pc, #80]	@ (801b7d4 <OC5Config+0xd0>)
 801b784:	4293      	cmp	r3, r2
 801b786:	d109      	bne.n	801b79c <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	685b      	ldr	r3, [r3, #4]
 801b78c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801b790:	683b      	ldr	r3, [r7, #0]
 801b792:	699b      	ldr	r3, [r3, #24]
 801b794:	021b      	lsls	r3, r3, #8
 801b796:	431a      	orrs	r2, r3
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	68ba      	ldr	r2, [r7, #8]
 801b7a0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 801b7a2:	683b      	ldr	r3, [r7, #0]
 801b7a4:	68db      	ldr	r3, [r3, #12]
 801b7a6:	4619      	mov	r1, r3
 801b7a8:	6878      	ldr	r0, [r7, #4]
 801b7aa:	f7ff fbd9 	bl	801af60 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	68fa      	ldr	r2, [r7, #12]
 801b7b2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 801b7b4:	2300      	movs	r3, #0
}
 801b7b6:	4618      	mov	r0, r3
 801b7b8:	3710      	adds	r7, #16
 801b7ba:	46bd      	mov	sp, r7
 801b7bc:	bd80      	pop	{r7, pc}
 801b7be:	bf00      	nop
 801b7c0:	40012c00 	.word	0x40012c00
 801b7c4:	40013400 	.word	0x40013400
 801b7c8:	40014000 	.word	0x40014000
 801b7cc:	40014400 	.word	0x40014400
 801b7d0:	40014800 	.word	0x40014800
 801b7d4:	40015000 	.word	0x40015000

0801b7d8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 801b7d8:	b580      	push	{r7, lr}
 801b7da:	b084      	sub	sp, #16
 801b7dc:	af00      	add	r7, sp, #0
 801b7de:	6078      	str	r0, [r7, #4]
 801b7e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	6a1b      	ldr	r3, [r3, #32]
 801b7e6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	6a1b      	ldr	r3, [r3, #32]
 801b7f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b7f8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 801b7fa:	68bb      	ldr	r3, [r7, #8]
 801b7fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801b800:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801b804:	683a      	ldr	r2, [r7, #0]
 801b806:	6812      	ldr	r2, [r2, #0]
 801b808:	0212      	lsls	r2, r2, #8
 801b80a:	4313      	orrs	r3, r2
 801b80c:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 801b80e:	68fb      	ldr	r3, [r7, #12]
 801b810:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801b814:	683b      	ldr	r3, [r7, #0]
 801b816:	691b      	ldr	r3, [r3, #16]
 801b818:	051b      	lsls	r3, r3, #20
 801b81a:	4313      	orrs	r3, r2
 801b81c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 801b81e:	68fb      	ldr	r3, [r7, #12]
 801b820:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801b824:	683b      	ldr	r3, [r7, #0]
 801b826:	685b      	ldr	r3, [r3, #4]
 801b828:	051b      	lsls	r3, r3, #20
 801b82a:	4313      	orrs	r3, r2
 801b82c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	4a18      	ldr	r2, [pc, #96]	@ (801b894 <OC6Config+0xbc>)
 801b832:	4293      	cmp	r3, r2
 801b834:	d013      	beq.n	801b85e <OC6Config+0x86>
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	4a17      	ldr	r2, [pc, #92]	@ (801b898 <OC6Config+0xc0>)
 801b83a:	4293      	cmp	r3, r2
 801b83c:	d00f      	beq.n	801b85e <OC6Config+0x86>
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	4a16      	ldr	r2, [pc, #88]	@ (801b89c <OC6Config+0xc4>)
 801b842:	4293      	cmp	r3, r2
 801b844:	d00b      	beq.n	801b85e <OC6Config+0x86>
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	4a15      	ldr	r2, [pc, #84]	@ (801b8a0 <OC6Config+0xc8>)
 801b84a:	4293      	cmp	r3, r2
 801b84c:	d007      	beq.n	801b85e <OC6Config+0x86>
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	4a14      	ldr	r2, [pc, #80]	@ (801b8a4 <OC6Config+0xcc>)
 801b852:	4293      	cmp	r3, r2
 801b854:	d003      	beq.n	801b85e <OC6Config+0x86>
 801b856:	687b      	ldr	r3, [r7, #4]
 801b858:	4a13      	ldr	r2, [pc, #76]	@ (801b8a8 <OC6Config+0xd0>)
 801b85a:	4293      	cmp	r3, r2
 801b85c:	d109      	bne.n	801b872 <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	685b      	ldr	r3, [r3, #4]
 801b862:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 801b866:	683b      	ldr	r3, [r7, #0]
 801b868:	699b      	ldr	r3, [r3, #24]
 801b86a:	029b      	lsls	r3, r3, #10
 801b86c:	431a      	orrs	r2, r3
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	68ba      	ldr	r2, [r7, #8]
 801b876:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 801b878:	683b      	ldr	r3, [r7, #0]
 801b87a:	68db      	ldr	r3, [r3, #12]
 801b87c:	4619      	mov	r1, r3
 801b87e:	6878      	ldr	r0, [r7, #4]
 801b880:	f7ff fb7e 	bl	801af80 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	68fa      	ldr	r2, [r7, #12]
 801b888:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 801b88a:	2300      	movs	r3, #0
}
 801b88c:	4618      	mov	r0, r3
 801b88e:	3710      	adds	r7, #16
 801b890:	46bd      	mov	sp, r7
 801b892:	bd80      	pop	{r7, pc}
 801b894:	40012c00 	.word	0x40012c00
 801b898:	40013400 	.word	0x40013400
 801b89c:	40014000 	.word	0x40014000
 801b8a0:	40014400 	.word	0x40014400
 801b8a4:	40014800 	.word	0x40014800
 801b8a8:	40015000 	.word	0x40015000

0801b8ac <LL_USART_IsEnabled>:
{
 801b8ac:	b480      	push	{r7}
 801b8ae:	b083      	sub	sp, #12
 801b8b0:	af00      	add	r7, sp, #0
 801b8b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	681b      	ldr	r3, [r3, #0]
 801b8b8:	f003 0301 	and.w	r3, r3, #1
 801b8bc:	2b01      	cmp	r3, #1
 801b8be:	d101      	bne.n	801b8c4 <LL_USART_IsEnabled+0x18>
 801b8c0:	2301      	movs	r3, #1
 801b8c2:	e000      	b.n	801b8c6 <LL_USART_IsEnabled+0x1a>
 801b8c4:	2300      	movs	r3, #0
}
 801b8c6:	4618      	mov	r0, r3
 801b8c8:	370c      	adds	r7, #12
 801b8ca:	46bd      	mov	sp, r7
 801b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8d0:	4770      	bx	lr

0801b8d2 <LL_USART_SetPrescaler>:
{
 801b8d2:	b480      	push	{r7}
 801b8d4:	b083      	sub	sp, #12
 801b8d6:	af00      	add	r7, sp, #0
 801b8d8:	6078      	str	r0, [r7, #4]
 801b8da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b8e0:	f023 030f 	bic.w	r3, r3, #15
 801b8e4:	683a      	ldr	r2, [r7, #0]
 801b8e6:	b292      	uxth	r2, r2
 801b8e8:	431a      	orrs	r2, r3
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 801b8ee:	bf00      	nop
 801b8f0:	370c      	adds	r7, #12
 801b8f2:	46bd      	mov	sp, r7
 801b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8f8:	4770      	bx	lr

0801b8fa <LL_USART_SetStopBitsLength>:
{
 801b8fa:	b480      	push	{r7}
 801b8fc:	b083      	sub	sp, #12
 801b8fe:	af00      	add	r7, sp, #0
 801b900:	6078      	str	r0, [r7, #4]
 801b902:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	685b      	ldr	r3, [r3, #4]
 801b908:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 801b90c:	683b      	ldr	r3, [r7, #0]
 801b90e:	431a      	orrs	r2, r3
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	605a      	str	r2, [r3, #4]
}
 801b914:	bf00      	nop
 801b916:	370c      	adds	r7, #12
 801b918:	46bd      	mov	sp, r7
 801b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b91e:	4770      	bx	lr

0801b920 <LL_USART_SetHWFlowCtrl>:
{
 801b920:	b480      	push	{r7}
 801b922:	b083      	sub	sp, #12
 801b924:	af00      	add	r7, sp, #0
 801b926:	6078      	str	r0, [r7, #4]
 801b928:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	689b      	ldr	r3, [r3, #8]
 801b92e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801b932:	683b      	ldr	r3, [r7, #0]
 801b934:	431a      	orrs	r2, r3
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	609a      	str	r2, [r3, #8]
}
 801b93a:	bf00      	nop
 801b93c:	370c      	adds	r7, #12
 801b93e:	46bd      	mov	sp, r7
 801b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b944:	4770      	bx	lr
	...

0801b948 <LL_USART_SetBaudRate>:
{
 801b948:	b480      	push	{r7}
 801b94a:	b087      	sub	sp, #28
 801b94c:	af00      	add	r7, sp, #0
 801b94e:	60f8      	str	r0, [r7, #12]
 801b950:	60b9      	str	r1, [r7, #8]
 801b952:	607a      	str	r2, [r7, #4]
 801b954:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	2b0b      	cmp	r3, #11
 801b95a:	d83c      	bhi.n	801b9d6 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 801b95c:	6a3b      	ldr	r3, [r7, #32]
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d039      	beq.n	801b9d6 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 801b962:	683b      	ldr	r3, [r7, #0]
 801b964:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801b968:	d122      	bne.n	801b9b0 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	b2db      	uxtb	r3, r3
 801b96e:	461a      	mov	r2, r3
 801b970:	4b1c      	ldr	r3, [pc, #112]	@ (801b9e4 <LL_USART_SetBaudRate+0x9c>)
 801b972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b976:	68ba      	ldr	r2, [r7, #8]
 801b978:	fbb2 f3f3 	udiv	r3, r2, r3
 801b97c:	005a      	lsls	r2, r3, #1
 801b97e:	6a3b      	ldr	r3, [r7, #32]
 801b980:	085b      	lsrs	r3, r3, #1
 801b982:	441a      	add	r2, r3
 801b984:	6a3b      	ldr	r3, [r7, #32]
 801b986:	fbb2 f3f3 	udiv	r3, r2, r3
 801b98a:	b29b      	uxth	r3, r3
 801b98c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 801b98e:	697a      	ldr	r2, [r7, #20]
 801b990:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 801b994:	4013      	ands	r3, r2
 801b996:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801b998:	697b      	ldr	r3, [r7, #20]
 801b99a:	085b      	lsrs	r3, r3, #1
 801b99c:	b29b      	uxth	r3, r3
 801b99e:	f003 0307 	and.w	r3, r3, #7
 801b9a2:	693a      	ldr	r2, [r7, #16]
 801b9a4:	4313      	orrs	r3, r2
 801b9a6:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	693a      	ldr	r2, [r7, #16]
 801b9ac:	60da      	str	r2, [r3, #12]
}
 801b9ae:	e012      	b.n	801b9d6 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	b2db      	uxtb	r3, r3
 801b9b4:	461a      	mov	r2, r3
 801b9b6:	4b0b      	ldr	r3, [pc, #44]	@ (801b9e4 <LL_USART_SetBaudRate+0x9c>)
 801b9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b9bc:	68ba      	ldr	r2, [r7, #8]
 801b9be:	fbb2 f2f3 	udiv	r2, r2, r3
 801b9c2:	6a3b      	ldr	r3, [r7, #32]
 801b9c4:	085b      	lsrs	r3, r3, #1
 801b9c6:	441a      	add	r2, r3
 801b9c8:	6a3b      	ldr	r3, [r7, #32]
 801b9ca:	fbb2 f3f3 	udiv	r3, r2, r3
 801b9ce:	b29b      	uxth	r3, r3
 801b9d0:	461a      	mov	r2, r3
 801b9d2:	68fb      	ldr	r3, [r7, #12]
 801b9d4:	60da      	str	r2, [r3, #12]
}
 801b9d6:	bf00      	nop
 801b9d8:	371c      	adds	r7, #28
 801b9da:	46bd      	mov	sp, r7
 801b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9e0:	4770      	bx	lr
 801b9e2:	bf00      	nop
 801b9e4:	0802256c 	.word	0x0802256c

0801b9e8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 801b9e8:	b580      	push	{r7, lr}
 801b9ea:	b086      	sub	sp, #24
 801b9ec:	af02      	add	r7, sp, #8
 801b9ee:	6078      	str	r0, [r7, #4]
 801b9f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 801b9f2:	2301      	movs	r3, #1
 801b9f4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 801b9f6:	2300      	movs	r3, #0
 801b9f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 801b9fa:	6878      	ldr	r0, [r7, #4]
 801b9fc:	f7ff ff56 	bl	801b8ac <LL_USART_IsEnabled>
 801ba00:	4603      	mov	r3, r0
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d165      	bne.n	801bad2 <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	681a      	ldr	r2, [r3, #0]
 801ba0a:	4b34      	ldr	r3, [pc, #208]	@ (801badc <LL_USART_Init+0xf4>)
 801ba0c:	4013      	ands	r3, r2
 801ba0e:	683a      	ldr	r2, [r7, #0]
 801ba10:	6891      	ldr	r1, [r2, #8]
 801ba12:	683a      	ldr	r2, [r7, #0]
 801ba14:	6912      	ldr	r2, [r2, #16]
 801ba16:	4311      	orrs	r1, r2
 801ba18:	683a      	ldr	r2, [r7, #0]
 801ba1a:	6952      	ldr	r2, [r2, #20]
 801ba1c:	4311      	orrs	r1, r2
 801ba1e:	683a      	ldr	r2, [r7, #0]
 801ba20:	69d2      	ldr	r2, [r2, #28]
 801ba22:	430a      	orrs	r2, r1
 801ba24:	431a      	orrs	r2, r3
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 801ba2a:	683b      	ldr	r3, [r7, #0]
 801ba2c:	68db      	ldr	r3, [r3, #12]
 801ba2e:	4619      	mov	r1, r3
 801ba30:	6878      	ldr	r0, [r7, #4]
 801ba32:	f7ff ff62 	bl	801b8fa <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 801ba36:	683b      	ldr	r3, [r7, #0]
 801ba38:	699b      	ldr	r3, [r3, #24]
 801ba3a:	4619      	mov	r1, r3
 801ba3c:	6878      	ldr	r0, [r7, #4]
 801ba3e:	f7ff ff6f 	bl	801b920 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	4a26      	ldr	r2, [pc, #152]	@ (801bae0 <LL_USART_Init+0xf8>)
 801ba46:	4293      	cmp	r3, r2
 801ba48:	d104      	bne.n	801ba54 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 801ba4a:	2003      	movs	r0, #3
 801ba4c:	f7fe ffaa 	bl	801a9a4 <LL_RCC_GetUSARTClockFreq>
 801ba50:	60b8      	str	r0, [r7, #8]
 801ba52:	e023      	b.n	801ba9c <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	4a23      	ldr	r2, [pc, #140]	@ (801bae4 <LL_USART_Init+0xfc>)
 801ba58:	4293      	cmp	r3, r2
 801ba5a:	d104      	bne.n	801ba66 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 801ba5c:	200c      	movs	r0, #12
 801ba5e:	f7fe ffa1 	bl	801a9a4 <LL_RCC_GetUSARTClockFreq>
 801ba62:	60b8      	str	r0, [r7, #8]
 801ba64:	e01a      	b.n	801ba9c <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART3)
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	4a1f      	ldr	r2, [pc, #124]	@ (801bae8 <LL_USART_Init+0x100>)
 801ba6a:	4293      	cmp	r3, r2
 801ba6c:	d104      	bne.n	801ba78 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 801ba6e:	2030      	movs	r0, #48	@ 0x30
 801ba70:	f7fe ff98 	bl	801a9a4 <LL_RCC_GetUSARTClockFreq>
 801ba74:	60b8      	str	r0, [r7, #8]
 801ba76:	e011      	b.n	801ba9c <LL_USART_Init+0xb4>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	4a1c      	ldr	r2, [pc, #112]	@ (801baec <LL_USART_Init+0x104>)
 801ba7c:	4293      	cmp	r3, r2
 801ba7e:	d104      	bne.n	801ba8a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 801ba80:	20c0      	movs	r0, #192	@ 0xc0
 801ba82:	f7ff f853 	bl	801ab2c <LL_RCC_GetUARTClockFreq>
 801ba86:	60b8      	str	r0, [r7, #8]
 801ba88:	e008      	b.n	801ba9c <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	4a18      	ldr	r2, [pc, #96]	@ (801baf0 <LL_USART_Init+0x108>)
 801ba8e:	4293      	cmp	r3, r2
 801ba90:	d104      	bne.n	801ba9c <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 801ba92:	f44f 7040 	mov.w	r0, #768	@ 0x300
 801ba96:	f7ff f849 	bl	801ab2c <LL_RCC_GetUARTClockFreq>
 801ba9a:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 801ba9c:	68bb      	ldr	r3, [r7, #8]
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d011      	beq.n	801bac6 <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 801baa2:	683b      	ldr	r3, [r7, #0]
 801baa4:	685b      	ldr	r3, [r3, #4]
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d00d      	beq.n	801bac6 <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 801baaa:	2300      	movs	r3, #0
 801baac:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 801baae:	683b      	ldr	r3, [r7, #0]
 801bab0:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 801bab2:	683b      	ldr	r3, [r7, #0]
 801bab4:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 801bab6:	683b      	ldr	r3, [r7, #0]
 801bab8:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 801baba:	9300      	str	r3, [sp, #0]
 801babc:	460b      	mov	r3, r1
 801babe:	68b9      	ldr	r1, [r7, #8]
 801bac0:	6878      	ldr	r0, [r7, #4]
 801bac2:	f7ff ff41 	bl	801b948 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 801bac6:	683b      	ldr	r3, [r7, #0]
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	4619      	mov	r1, r3
 801bacc:	6878      	ldr	r0, [r7, #4]
 801bace:	f7ff ff00 	bl	801b8d2 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 801bad2:	7bfb      	ldrb	r3, [r7, #15]
}
 801bad4:	4618      	mov	r0, r3
 801bad6:	3710      	adds	r7, #16
 801bad8:	46bd      	mov	sp, r7
 801bada:	bd80      	pop	{r7, pc}
 801badc:	efff69f3 	.word	0xefff69f3
 801bae0:	40013800 	.word	0x40013800
 801bae4:	40004400 	.word	0x40004400
 801bae8:	40004800 	.word	0x40004800
 801baec:	40004c00 	.word	0x40004c00
 801baf0:	40005000 	.word	0x40005000

0801baf4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 801baf4:	b480      	push	{r7}
 801baf6:	b083      	sub	sp, #12
 801baf8:	af00      	add	r7, sp, #0
 801bafa:	6078      	str	r0, [r7, #4]
 801bafc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 801bafe:	687a      	ldr	r2, [r7, #4]
 801bb00:	683b      	ldr	r3, [r7, #0]
 801bb02:	fbb2 f3f3 	udiv	r3, r2, r3
 801bb06:	4a07      	ldr	r2, [pc, #28]	@ (801bb24 <LL_InitTick+0x30>)
 801bb08:	3b01      	subs	r3, #1
 801bb0a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 801bb0c:	4b05      	ldr	r3, [pc, #20]	@ (801bb24 <LL_InitTick+0x30>)
 801bb0e:	2200      	movs	r2, #0
 801bb10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801bb12:	4b04      	ldr	r3, [pc, #16]	@ (801bb24 <LL_InitTick+0x30>)
 801bb14:	2205      	movs	r2, #5
 801bb16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 801bb18:	bf00      	nop
 801bb1a:	370c      	adds	r7, #12
 801bb1c:	46bd      	mov	sp, r7
 801bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb22:	4770      	bx	lr
 801bb24:	e000e010 	.word	0xe000e010

0801bb28 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 801bb28:	b580      	push	{r7, lr}
 801bb2a:	b082      	sub	sp, #8
 801bb2c:	af00      	add	r7, sp, #0
 801bb2e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 801bb30:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801bb34:	6878      	ldr	r0, [r7, #4]
 801bb36:	f7ff ffdd 	bl	801baf4 <LL_InitTick>
}
 801bb3a:	bf00      	nop
 801bb3c:	3708      	adds	r7, #8
 801bb3e:	46bd      	mov	sp, r7
 801bb40:	bd80      	pop	{r7, pc}
	...

0801bb44 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 801bb44:	b480      	push	{r7}
 801bb46:	b085      	sub	sp, #20
 801bb48:	af00      	add	r7, sp, #0
 801bb4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 801bb4c:	4b10      	ldr	r3, [pc, #64]	@ (801bb90 <LL_mDelay+0x4c>)
 801bb4e:	681b      	ldr	r3, [r3, #0]
 801bb50:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 801bb52:	68bb      	ldr	r3, [r7, #8]
  tmpDelay = Delay;
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 801bb58:	68fb      	ldr	r3, [r7, #12]
 801bb5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb5e:	d00c      	beq.n	801bb7a <LL_mDelay+0x36>
  {
    tmpDelay++;
 801bb60:	68fb      	ldr	r3, [r7, #12]
 801bb62:	3301      	adds	r3, #1
 801bb64:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 801bb66:	e008      	b.n	801bb7a <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 801bb68:	4b09      	ldr	r3, [pc, #36]	@ (801bb90 <LL_mDelay+0x4c>)
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d002      	beq.n	801bb7a <LL_mDelay+0x36>
    {
      tmpDelay--;
 801bb74:	68fb      	ldr	r3, [r7, #12]
 801bb76:	3b01      	subs	r3, #1
 801bb78:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 801bb7a:	68fb      	ldr	r3, [r7, #12]
 801bb7c:	2b00      	cmp	r3, #0
 801bb7e:	d1f3      	bne.n	801bb68 <LL_mDelay+0x24>
    }
  }
}
 801bb80:	bf00      	nop
 801bb82:	bf00      	nop
 801bb84:	3714      	adds	r7, #20
 801bb86:	46bd      	mov	sp, r7
 801bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb8c:	4770      	bx	lr
 801bb8e:	bf00      	nop
 801bb90:	e000e010 	.word	0xe000e010

0801bb94 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 801bb94:	b480      	push	{r7}
 801bb96:	b083      	sub	sp, #12
 801bb98:	af00      	add	r7, sp, #0
 801bb9a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 801bb9c:	4a04      	ldr	r2, [pc, #16]	@ (801bbb0 <LL_SetSystemCoreClock+0x1c>)
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	6013      	str	r3, [r2, #0]
}
 801bba2:	bf00      	nop
 801bba4:	370c      	adds	r7, #12
 801bba6:	46bd      	mov	sp, r7
 801bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbac:	4770      	bx	lr
 801bbae:	bf00      	nop
 801bbb0:	20000004 	.word	0x20000004

0801bbb4 <sqrt>:
 801bbb4:	b538      	push	{r3, r4, r5, lr}
 801bbb6:	ed2d 8b02 	vpush	{d8}
 801bbba:	ec55 4b10 	vmov	r4, r5, d0
 801bbbe:	f000 f8cf 	bl	801bd60 <__ieee754_sqrt>
 801bbc2:	4622      	mov	r2, r4
 801bbc4:	462b      	mov	r3, r5
 801bbc6:	4620      	mov	r0, r4
 801bbc8:	4629      	mov	r1, r5
 801bbca:	eeb0 8a40 	vmov.f32	s16, s0
 801bbce:	eef0 8a60 	vmov.f32	s17, s1
 801bbd2:	f7e4 ffd3 	bl	8000b7c <__aeabi_dcmpun>
 801bbd6:	b990      	cbnz	r0, 801bbfe <sqrt+0x4a>
 801bbd8:	2200      	movs	r2, #0
 801bbda:	2300      	movs	r3, #0
 801bbdc:	4620      	mov	r0, r4
 801bbde:	4629      	mov	r1, r5
 801bbe0:	f7e4 ffa4 	bl	8000b2c <__aeabi_dcmplt>
 801bbe4:	b158      	cbz	r0, 801bbfe <sqrt+0x4a>
 801bbe6:	f002 fb1f 	bl	801e228 <__errno>
 801bbea:	2321      	movs	r3, #33	@ 0x21
 801bbec:	6003      	str	r3, [r0, #0]
 801bbee:	2200      	movs	r2, #0
 801bbf0:	2300      	movs	r3, #0
 801bbf2:	4610      	mov	r0, r2
 801bbf4:	4619      	mov	r1, r3
 801bbf6:	f7e4 fe51 	bl	800089c <__aeabi_ddiv>
 801bbfa:	ec41 0b18 	vmov	d8, r0, r1
 801bbfe:	eeb0 0a48 	vmov.f32	s0, s16
 801bc02:	eef0 0a68 	vmov.f32	s1, s17
 801bc06:	ecbd 8b02 	vpop	{d8}
 801bc0a:	bd38      	pop	{r3, r4, r5, pc}
 801bc0c:	0000      	movs	r0, r0
	...

0801bc10 <cos>:
 801bc10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bc12:	ec53 2b10 	vmov	r2, r3, d0
 801bc16:	4826      	ldr	r0, [pc, #152]	@ (801bcb0 <cos+0xa0>)
 801bc18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801bc1c:	4281      	cmp	r1, r0
 801bc1e:	d806      	bhi.n	801bc2e <cos+0x1e>
 801bc20:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801bca8 <cos+0x98>
 801bc24:	b005      	add	sp, #20
 801bc26:	f85d eb04 	ldr.w	lr, [sp], #4
 801bc2a:	f000 b975 	b.w	801bf18 <__kernel_cos>
 801bc2e:	4821      	ldr	r0, [pc, #132]	@ (801bcb4 <cos+0xa4>)
 801bc30:	4281      	cmp	r1, r0
 801bc32:	d908      	bls.n	801bc46 <cos+0x36>
 801bc34:	4610      	mov	r0, r2
 801bc36:	4619      	mov	r1, r3
 801bc38:	f7e4 fb4e 	bl	80002d8 <__aeabi_dsub>
 801bc3c:	ec41 0b10 	vmov	d0, r0, r1
 801bc40:	b005      	add	sp, #20
 801bc42:	f85d fb04 	ldr.w	pc, [sp], #4
 801bc46:	4668      	mov	r0, sp
 801bc48:	f000 faea 	bl	801c220 <__ieee754_rem_pio2>
 801bc4c:	f000 0003 	and.w	r0, r0, #3
 801bc50:	2801      	cmp	r0, #1
 801bc52:	d00b      	beq.n	801bc6c <cos+0x5c>
 801bc54:	2802      	cmp	r0, #2
 801bc56:	d015      	beq.n	801bc84 <cos+0x74>
 801bc58:	b9d8      	cbnz	r0, 801bc92 <cos+0x82>
 801bc5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801bc5e:	ed9d 0b00 	vldr	d0, [sp]
 801bc62:	f000 f959 	bl	801bf18 <__kernel_cos>
 801bc66:	ec51 0b10 	vmov	r0, r1, d0
 801bc6a:	e7e7      	b.n	801bc3c <cos+0x2c>
 801bc6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801bc70:	ed9d 0b00 	vldr	d0, [sp]
 801bc74:	f000 fa18 	bl	801c0a8 <__kernel_sin>
 801bc78:	ec53 2b10 	vmov	r2, r3, d0
 801bc7c:	4610      	mov	r0, r2
 801bc7e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801bc82:	e7db      	b.n	801bc3c <cos+0x2c>
 801bc84:	ed9d 1b02 	vldr	d1, [sp, #8]
 801bc88:	ed9d 0b00 	vldr	d0, [sp]
 801bc8c:	f000 f944 	bl	801bf18 <__kernel_cos>
 801bc90:	e7f2      	b.n	801bc78 <cos+0x68>
 801bc92:	ed9d 1b02 	vldr	d1, [sp, #8]
 801bc96:	ed9d 0b00 	vldr	d0, [sp]
 801bc9a:	2001      	movs	r0, #1
 801bc9c:	f000 fa04 	bl	801c0a8 <__kernel_sin>
 801bca0:	e7e1      	b.n	801bc66 <cos+0x56>
 801bca2:	bf00      	nop
 801bca4:	f3af 8000 	nop.w
	...
 801bcb0:	3fe921fb 	.word	0x3fe921fb
 801bcb4:	7fefffff 	.word	0x7fefffff

0801bcb8 <sin>:
 801bcb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bcba:	ec53 2b10 	vmov	r2, r3, d0
 801bcbe:	4826      	ldr	r0, [pc, #152]	@ (801bd58 <sin+0xa0>)
 801bcc0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801bcc4:	4281      	cmp	r1, r0
 801bcc6:	d807      	bhi.n	801bcd8 <sin+0x20>
 801bcc8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801bd50 <sin+0x98>
 801bccc:	2000      	movs	r0, #0
 801bcce:	b005      	add	sp, #20
 801bcd0:	f85d eb04 	ldr.w	lr, [sp], #4
 801bcd4:	f000 b9e8 	b.w	801c0a8 <__kernel_sin>
 801bcd8:	4820      	ldr	r0, [pc, #128]	@ (801bd5c <sin+0xa4>)
 801bcda:	4281      	cmp	r1, r0
 801bcdc:	d908      	bls.n	801bcf0 <sin+0x38>
 801bcde:	4610      	mov	r0, r2
 801bce0:	4619      	mov	r1, r3
 801bce2:	f7e4 faf9 	bl	80002d8 <__aeabi_dsub>
 801bce6:	ec41 0b10 	vmov	d0, r0, r1
 801bcea:	b005      	add	sp, #20
 801bcec:	f85d fb04 	ldr.w	pc, [sp], #4
 801bcf0:	4668      	mov	r0, sp
 801bcf2:	f000 fa95 	bl	801c220 <__ieee754_rem_pio2>
 801bcf6:	f000 0003 	and.w	r0, r0, #3
 801bcfa:	2801      	cmp	r0, #1
 801bcfc:	d00c      	beq.n	801bd18 <sin+0x60>
 801bcfe:	2802      	cmp	r0, #2
 801bd00:	d011      	beq.n	801bd26 <sin+0x6e>
 801bd02:	b9e8      	cbnz	r0, 801bd40 <sin+0x88>
 801bd04:	ed9d 1b02 	vldr	d1, [sp, #8]
 801bd08:	ed9d 0b00 	vldr	d0, [sp]
 801bd0c:	2001      	movs	r0, #1
 801bd0e:	f000 f9cb 	bl	801c0a8 <__kernel_sin>
 801bd12:	ec51 0b10 	vmov	r0, r1, d0
 801bd16:	e7e6      	b.n	801bce6 <sin+0x2e>
 801bd18:	ed9d 1b02 	vldr	d1, [sp, #8]
 801bd1c:	ed9d 0b00 	vldr	d0, [sp]
 801bd20:	f000 f8fa 	bl	801bf18 <__kernel_cos>
 801bd24:	e7f5      	b.n	801bd12 <sin+0x5a>
 801bd26:	ed9d 1b02 	vldr	d1, [sp, #8]
 801bd2a:	ed9d 0b00 	vldr	d0, [sp]
 801bd2e:	2001      	movs	r0, #1
 801bd30:	f000 f9ba 	bl	801c0a8 <__kernel_sin>
 801bd34:	ec53 2b10 	vmov	r2, r3, d0
 801bd38:	4610      	mov	r0, r2
 801bd3a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801bd3e:	e7d2      	b.n	801bce6 <sin+0x2e>
 801bd40:	ed9d 1b02 	vldr	d1, [sp, #8]
 801bd44:	ed9d 0b00 	vldr	d0, [sp]
 801bd48:	f000 f8e6 	bl	801bf18 <__kernel_cos>
 801bd4c:	e7f2      	b.n	801bd34 <sin+0x7c>
 801bd4e:	bf00      	nop
	...
 801bd58:	3fe921fb 	.word	0x3fe921fb
 801bd5c:	7fefffff 	.word	0x7fefffff

0801bd60 <__ieee754_sqrt>:
 801bd60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd64:	4a68      	ldr	r2, [pc, #416]	@ (801bf08 <__ieee754_sqrt+0x1a8>)
 801bd66:	ec55 4b10 	vmov	r4, r5, d0
 801bd6a:	43aa      	bics	r2, r5
 801bd6c:	462b      	mov	r3, r5
 801bd6e:	4621      	mov	r1, r4
 801bd70:	d110      	bne.n	801bd94 <__ieee754_sqrt+0x34>
 801bd72:	4622      	mov	r2, r4
 801bd74:	4620      	mov	r0, r4
 801bd76:	4629      	mov	r1, r5
 801bd78:	f7e4 fc66 	bl	8000648 <__aeabi_dmul>
 801bd7c:	4602      	mov	r2, r0
 801bd7e:	460b      	mov	r3, r1
 801bd80:	4620      	mov	r0, r4
 801bd82:	4629      	mov	r1, r5
 801bd84:	f7e4 faaa 	bl	80002dc <__adddf3>
 801bd88:	4604      	mov	r4, r0
 801bd8a:	460d      	mov	r5, r1
 801bd8c:	ec45 4b10 	vmov	d0, r4, r5
 801bd90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd94:	2d00      	cmp	r5, #0
 801bd96:	dc0e      	bgt.n	801bdb6 <__ieee754_sqrt+0x56>
 801bd98:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801bd9c:	4322      	orrs	r2, r4
 801bd9e:	d0f5      	beq.n	801bd8c <__ieee754_sqrt+0x2c>
 801bda0:	b19d      	cbz	r5, 801bdca <__ieee754_sqrt+0x6a>
 801bda2:	4622      	mov	r2, r4
 801bda4:	4620      	mov	r0, r4
 801bda6:	4629      	mov	r1, r5
 801bda8:	f7e4 fa96 	bl	80002d8 <__aeabi_dsub>
 801bdac:	4602      	mov	r2, r0
 801bdae:	460b      	mov	r3, r1
 801bdb0:	f7e4 fd74 	bl	800089c <__aeabi_ddiv>
 801bdb4:	e7e8      	b.n	801bd88 <__ieee754_sqrt+0x28>
 801bdb6:	152a      	asrs	r2, r5, #20
 801bdb8:	d115      	bne.n	801bde6 <__ieee754_sqrt+0x86>
 801bdba:	2000      	movs	r0, #0
 801bdbc:	e009      	b.n	801bdd2 <__ieee754_sqrt+0x72>
 801bdbe:	0acb      	lsrs	r3, r1, #11
 801bdc0:	3a15      	subs	r2, #21
 801bdc2:	0549      	lsls	r1, r1, #21
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d0fa      	beq.n	801bdbe <__ieee754_sqrt+0x5e>
 801bdc8:	e7f7      	b.n	801bdba <__ieee754_sqrt+0x5a>
 801bdca:	462a      	mov	r2, r5
 801bdcc:	e7fa      	b.n	801bdc4 <__ieee754_sqrt+0x64>
 801bdce:	005b      	lsls	r3, r3, #1
 801bdd0:	3001      	adds	r0, #1
 801bdd2:	02dc      	lsls	r4, r3, #11
 801bdd4:	d5fb      	bpl.n	801bdce <__ieee754_sqrt+0x6e>
 801bdd6:	1e44      	subs	r4, r0, #1
 801bdd8:	1b12      	subs	r2, r2, r4
 801bdda:	f1c0 0420 	rsb	r4, r0, #32
 801bdde:	fa21 f404 	lsr.w	r4, r1, r4
 801bde2:	4323      	orrs	r3, r4
 801bde4:	4081      	lsls	r1, r0
 801bde6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bdea:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801bdee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801bdf2:	07d2      	lsls	r2, r2, #31
 801bdf4:	bf5c      	itt	pl
 801bdf6:	005b      	lslpl	r3, r3, #1
 801bdf8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801bdfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801be00:	bf58      	it	pl
 801be02:	0049      	lslpl	r1, r1, #1
 801be04:	2600      	movs	r6, #0
 801be06:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801be0a:	106d      	asrs	r5, r5, #1
 801be0c:	0049      	lsls	r1, r1, #1
 801be0e:	2016      	movs	r0, #22
 801be10:	4632      	mov	r2, r6
 801be12:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801be16:	1917      	adds	r7, r2, r4
 801be18:	429f      	cmp	r7, r3
 801be1a:	bfde      	ittt	le
 801be1c:	193a      	addle	r2, r7, r4
 801be1e:	1bdb      	suble	r3, r3, r7
 801be20:	1936      	addle	r6, r6, r4
 801be22:	0fcf      	lsrs	r7, r1, #31
 801be24:	3801      	subs	r0, #1
 801be26:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801be2a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801be2e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801be32:	d1f0      	bne.n	801be16 <__ieee754_sqrt+0xb6>
 801be34:	4604      	mov	r4, r0
 801be36:	2720      	movs	r7, #32
 801be38:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801be3c:	429a      	cmp	r2, r3
 801be3e:	eb00 0e0c 	add.w	lr, r0, ip
 801be42:	db02      	blt.n	801be4a <__ieee754_sqrt+0xea>
 801be44:	d113      	bne.n	801be6e <__ieee754_sqrt+0x10e>
 801be46:	458e      	cmp	lr, r1
 801be48:	d811      	bhi.n	801be6e <__ieee754_sqrt+0x10e>
 801be4a:	f1be 0f00 	cmp.w	lr, #0
 801be4e:	eb0e 000c 	add.w	r0, lr, ip
 801be52:	da42      	bge.n	801beda <__ieee754_sqrt+0x17a>
 801be54:	2800      	cmp	r0, #0
 801be56:	db40      	blt.n	801beda <__ieee754_sqrt+0x17a>
 801be58:	f102 0801 	add.w	r8, r2, #1
 801be5c:	1a9b      	subs	r3, r3, r2
 801be5e:	458e      	cmp	lr, r1
 801be60:	bf88      	it	hi
 801be62:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801be66:	eba1 010e 	sub.w	r1, r1, lr
 801be6a:	4464      	add	r4, ip
 801be6c:	4642      	mov	r2, r8
 801be6e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801be72:	3f01      	subs	r7, #1
 801be74:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801be78:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801be7c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801be80:	d1dc      	bne.n	801be3c <__ieee754_sqrt+0xdc>
 801be82:	4319      	orrs	r1, r3
 801be84:	d01b      	beq.n	801bebe <__ieee754_sqrt+0x15e>
 801be86:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801bf0c <__ieee754_sqrt+0x1ac>
 801be8a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801bf10 <__ieee754_sqrt+0x1b0>
 801be8e:	e9da 0100 	ldrd	r0, r1, [sl]
 801be92:	e9db 2300 	ldrd	r2, r3, [fp]
 801be96:	f7e4 fa1f 	bl	80002d8 <__aeabi_dsub>
 801be9a:	e9da 8900 	ldrd	r8, r9, [sl]
 801be9e:	4602      	mov	r2, r0
 801bea0:	460b      	mov	r3, r1
 801bea2:	4640      	mov	r0, r8
 801bea4:	4649      	mov	r1, r9
 801bea6:	f7e4 fe4b 	bl	8000b40 <__aeabi_dcmple>
 801beaa:	b140      	cbz	r0, 801bebe <__ieee754_sqrt+0x15e>
 801beac:	f1b4 3fff 	cmp.w	r4, #4294967295
 801beb0:	e9da 0100 	ldrd	r0, r1, [sl]
 801beb4:	e9db 2300 	ldrd	r2, r3, [fp]
 801beb8:	d111      	bne.n	801bede <__ieee754_sqrt+0x17e>
 801beba:	3601      	adds	r6, #1
 801bebc:	463c      	mov	r4, r7
 801bebe:	1072      	asrs	r2, r6, #1
 801bec0:	0863      	lsrs	r3, r4, #1
 801bec2:	07f1      	lsls	r1, r6, #31
 801bec4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801bec8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801becc:	bf48      	it	mi
 801bece:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801bed2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801bed6:	4618      	mov	r0, r3
 801bed8:	e756      	b.n	801bd88 <__ieee754_sqrt+0x28>
 801beda:	4690      	mov	r8, r2
 801bedc:	e7be      	b.n	801be5c <__ieee754_sqrt+0xfc>
 801bede:	f7e4 f9fd 	bl	80002dc <__adddf3>
 801bee2:	e9da 8900 	ldrd	r8, r9, [sl]
 801bee6:	4602      	mov	r2, r0
 801bee8:	460b      	mov	r3, r1
 801beea:	4640      	mov	r0, r8
 801beec:	4649      	mov	r1, r9
 801beee:	f7e4 fe1d 	bl	8000b2c <__aeabi_dcmplt>
 801bef2:	b120      	cbz	r0, 801befe <__ieee754_sqrt+0x19e>
 801bef4:	1ca0      	adds	r0, r4, #2
 801bef6:	bf08      	it	eq
 801bef8:	3601      	addeq	r6, #1
 801befa:	3402      	adds	r4, #2
 801befc:	e7df      	b.n	801bebe <__ieee754_sqrt+0x15e>
 801befe:	1c63      	adds	r3, r4, #1
 801bf00:	f023 0401 	bic.w	r4, r3, #1
 801bf04:	e7db      	b.n	801bebe <__ieee754_sqrt+0x15e>
 801bf06:	bf00      	nop
 801bf08:	7ff00000 	.word	0x7ff00000
 801bf0c:	20000028 	.word	0x20000028
 801bf10:	20000020 	.word	0x20000020
 801bf14:	00000000 	.word	0x00000000

0801bf18 <__kernel_cos>:
 801bf18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf1c:	ec57 6b10 	vmov	r6, r7, d0
 801bf20:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801bf24:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801bf28:	ed8d 1b00 	vstr	d1, [sp]
 801bf2c:	d206      	bcs.n	801bf3c <__kernel_cos+0x24>
 801bf2e:	4630      	mov	r0, r6
 801bf30:	4639      	mov	r1, r7
 801bf32:	f7e4 fe39 	bl	8000ba8 <__aeabi_d2iz>
 801bf36:	2800      	cmp	r0, #0
 801bf38:	f000 8088 	beq.w	801c04c <__kernel_cos+0x134>
 801bf3c:	4632      	mov	r2, r6
 801bf3e:	463b      	mov	r3, r7
 801bf40:	4630      	mov	r0, r6
 801bf42:	4639      	mov	r1, r7
 801bf44:	f7e4 fb80 	bl	8000648 <__aeabi_dmul>
 801bf48:	4b51      	ldr	r3, [pc, #324]	@ (801c090 <__kernel_cos+0x178>)
 801bf4a:	2200      	movs	r2, #0
 801bf4c:	4604      	mov	r4, r0
 801bf4e:	460d      	mov	r5, r1
 801bf50:	f7e4 fb7a 	bl	8000648 <__aeabi_dmul>
 801bf54:	a340      	add	r3, pc, #256	@ (adr r3, 801c058 <__kernel_cos+0x140>)
 801bf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf5a:	4682      	mov	sl, r0
 801bf5c:	468b      	mov	fp, r1
 801bf5e:	4620      	mov	r0, r4
 801bf60:	4629      	mov	r1, r5
 801bf62:	f7e4 fb71 	bl	8000648 <__aeabi_dmul>
 801bf66:	a33e      	add	r3, pc, #248	@ (adr r3, 801c060 <__kernel_cos+0x148>)
 801bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf6c:	f7e4 f9b6 	bl	80002dc <__adddf3>
 801bf70:	4622      	mov	r2, r4
 801bf72:	462b      	mov	r3, r5
 801bf74:	f7e4 fb68 	bl	8000648 <__aeabi_dmul>
 801bf78:	a33b      	add	r3, pc, #236	@ (adr r3, 801c068 <__kernel_cos+0x150>)
 801bf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf7e:	f7e4 f9ab 	bl	80002d8 <__aeabi_dsub>
 801bf82:	4622      	mov	r2, r4
 801bf84:	462b      	mov	r3, r5
 801bf86:	f7e4 fb5f 	bl	8000648 <__aeabi_dmul>
 801bf8a:	a339      	add	r3, pc, #228	@ (adr r3, 801c070 <__kernel_cos+0x158>)
 801bf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf90:	f7e4 f9a4 	bl	80002dc <__adddf3>
 801bf94:	4622      	mov	r2, r4
 801bf96:	462b      	mov	r3, r5
 801bf98:	f7e4 fb56 	bl	8000648 <__aeabi_dmul>
 801bf9c:	a336      	add	r3, pc, #216	@ (adr r3, 801c078 <__kernel_cos+0x160>)
 801bf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfa2:	f7e4 f999 	bl	80002d8 <__aeabi_dsub>
 801bfa6:	4622      	mov	r2, r4
 801bfa8:	462b      	mov	r3, r5
 801bfaa:	f7e4 fb4d 	bl	8000648 <__aeabi_dmul>
 801bfae:	a334      	add	r3, pc, #208	@ (adr r3, 801c080 <__kernel_cos+0x168>)
 801bfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfb4:	f7e4 f992 	bl	80002dc <__adddf3>
 801bfb8:	4622      	mov	r2, r4
 801bfba:	462b      	mov	r3, r5
 801bfbc:	f7e4 fb44 	bl	8000648 <__aeabi_dmul>
 801bfc0:	4622      	mov	r2, r4
 801bfc2:	462b      	mov	r3, r5
 801bfc4:	f7e4 fb40 	bl	8000648 <__aeabi_dmul>
 801bfc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bfcc:	4604      	mov	r4, r0
 801bfce:	460d      	mov	r5, r1
 801bfd0:	4630      	mov	r0, r6
 801bfd2:	4639      	mov	r1, r7
 801bfd4:	f7e4 fb38 	bl	8000648 <__aeabi_dmul>
 801bfd8:	460b      	mov	r3, r1
 801bfda:	4602      	mov	r2, r0
 801bfdc:	4629      	mov	r1, r5
 801bfde:	4620      	mov	r0, r4
 801bfe0:	f7e4 f97a 	bl	80002d8 <__aeabi_dsub>
 801bfe4:	4b2b      	ldr	r3, [pc, #172]	@ (801c094 <__kernel_cos+0x17c>)
 801bfe6:	4598      	cmp	r8, r3
 801bfe8:	4606      	mov	r6, r0
 801bfea:	460f      	mov	r7, r1
 801bfec:	d810      	bhi.n	801c010 <__kernel_cos+0xf8>
 801bfee:	4602      	mov	r2, r0
 801bff0:	460b      	mov	r3, r1
 801bff2:	4650      	mov	r0, sl
 801bff4:	4659      	mov	r1, fp
 801bff6:	f7e4 f96f 	bl	80002d8 <__aeabi_dsub>
 801bffa:	460b      	mov	r3, r1
 801bffc:	4926      	ldr	r1, [pc, #152]	@ (801c098 <__kernel_cos+0x180>)
 801bffe:	4602      	mov	r2, r0
 801c000:	2000      	movs	r0, #0
 801c002:	f7e4 f969 	bl	80002d8 <__aeabi_dsub>
 801c006:	ec41 0b10 	vmov	d0, r0, r1
 801c00a:	b003      	add	sp, #12
 801c00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c010:	4b22      	ldr	r3, [pc, #136]	@ (801c09c <__kernel_cos+0x184>)
 801c012:	4921      	ldr	r1, [pc, #132]	@ (801c098 <__kernel_cos+0x180>)
 801c014:	4598      	cmp	r8, r3
 801c016:	bf8c      	ite	hi
 801c018:	4d21      	ldrhi	r5, [pc, #132]	@ (801c0a0 <__kernel_cos+0x188>)
 801c01a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801c01e:	2400      	movs	r4, #0
 801c020:	4622      	mov	r2, r4
 801c022:	462b      	mov	r3, r5
 801c024:	2000      	movs	r0, #0
 801c026:	f7e4 f957 	bl	80002d8 <__aeabi_dsub>
 801c02a:	4622      	mov	r2, r4
 801c02c:	4680      	mov	r8, r0
 801c02e:	4689      	mov	r9, r1
 801c030:	462b      	mov	r3, r5
 801c032:	4650      	mov	r0, sl
 801c034:	4659      	mov	r1, fp
 801c036:	f7e4 f94f 	bl	80002d8 <__aeabi_dsub>
 801c03a:	4632      	mov	r2, r6
 801c03c:	463b      	mov	r3, r7
 801c03e:	f7e4 f94b 	bl	80002d8 <__aeabi_dsub>
 801c042:	4602      	mov	r2, r0
 801c044:	460b      	mov	r3, r1
 801c046:	4640      	mov	r0, r8
 801c048:	4649      	mov	r1, r9
 801c04a:	e7da      	b.n	801c002 <__kernel_cos+0xea>
 801c04c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801c088 <__kernel_cos+0x170>
 801c050:	e7db      	b.n	801c00a <__kernel_cos+0xf2>
 801c052:	bf00      	nop
 801c054:	f3af 8000 	nop.w
 801c058:	be8838d4 	.word	0xbe8838d4
 801c05c:	bda8fae9 	.word	0xbda8fae9
 801c060:	bdb4b1c4 	.word	0xbdb4b1c4
 801c064:	3e21ee9e 	.word	0x3e21ee9e
 801c068:	809c52ad 	.word	0x809c52ad
 801c06c:	3e927e4f 	.word	0x3e927e4f
 801c070:	19cb1590 	.word	0x19cb1590
 801c074:	3efa01a0 	.word	0x3efa01a0
 801c078:	16c15177 	.word	0x16c15177
 801c07c:	3f56c16c 	.word	0x3f56c16c
 801c080:	5555554c 	.word	0x5555554c
 801c084:	3fa55555 	.word	0x3fa55555
 801c088:	00000000 	.word	0x00000000
 801c08c:	3ff00000 	.word	0x3ff00000
 801c090:	3fe00000 	.word	0x3fe00000
 801c094:	3fd33332 	.word	0x3fd33332
 801c098:	3ff00000 	.word	0x3ff00000
 801c09c:	3fe90000 	.word	0x3fe90000
 801c0a0:	3fd20000 	.word	0x3fd20000
 801c0a4:	00000000 	.word	0x00000000

0801c0a8 <__kernel_sin>:
 801c0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0ac:	ec55 4b10 	vmov	r4, r5, d0
 801c0b0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801c0b4:	b085      	sub	sp, #20
 801c0b6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801c0ba:	ed8d 1b02 	vstr	d1, [sp, #8]
 801c0be:	4680      	mov	r8, r0
 801c0c0:	d205      	bcs.n	801c0ce <__kernel_sin+0x26>
 801c0c2:	4620      	mov	r0, r4
 801c0c4:	4629      	mov	r1, r5
 801c0c6:	f7e4 fd6f 	bl	8000ba8 <__aeabi_d2iz>
 801c0ca:	2800      	cmp	r0, #0
 801c0cc:	d052      	beq.n	801c174 <__kernel_sin+0xcc>
 801c0ce:	4622      	mov	r2, r4
 801c0d0:	462b      	mov	r3, r5
 801c0d2:	4620      	mov	r0, r4
 801c0d4:	4629      	mov	r1, r5
 801c0d6:	f7e4 fab7 	bl	8000648 <__aeabi_dmul>
 801c0da:	4682      	mov	sl, r0
 801c0dc:	468b      	mov	fp, r1
 801c0de:	4602      	mov	r2, r0
 801c0e0:	460b      	mov	r3, r1
 801c0e2:	4620      	mov	r0, r4
 801c0e4:	4629      	mov	r1, r5
 801c0e6:	f7e4 faaf 	bl	8000648 <__aeabi_dmul>
 801c0ea:	a342      	add	r3, pc, #264	@ (adr r3, 801c1f4 <__kernel_sin+0x14c>)
 801c0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0f0:	e9cd 0100 	strd	r0, r1, [sp]
 801c0f4:	4650      	mov	r0, sl
 801c0f6:	4659      	mov	r1, fp
 801c0f8:	f7e4 faa6 	bl	8000648 <__aeabi_dmul>
 801c0fc:	a33f      	add	r3, pc, #252	@ (adr r3, 801c1fc <__kernel_sin+0x154>)
 801c0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c102:	f7e4 f8e9 	bl	80002d8 <__aeabi_dsub>
 801c106:	4652      	mov	r2, sl
 801c108:	465b      	mov	r3, fp
 801c10a:	f7e4 fa9d 	bl	8000648 <__aeabi_dmul>
 801c10e:	a33d      	add	r3, pc, #244	@ (adr r3, 801c204 <__kernel_sin+0x15c>)
 801c110:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c114:	f7e4 f8e2 	bl	80002dc <__adddf3>
 801c118:	4652      	mov	r2, sl
 801c11a:	465b      	mov	r3, fp
 801c11c:	f7e4 fa94 	bl	8000648 <__aeabi_dmul>
 801c120:	a33a      	add	r3, pc, #232	@ (adr r3, 801c20c <__kernel_sin+0x164>)
 801c122:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c126:	f7e4 f8d7 	bl	80002d8 <__aeabi_dsub>
 801c12a:	4652      	mov	r2, sl
 801c12c:	465b      	mov	r3, fp
 801c12e:	f7e4 fa8b 	bl	8000648 <__aeabi_dmul>
 801c132:	a338      	add	r3, pc, #224	@ (adr r3, 801c214 <__kernel_sin+0x16c>)
 801c134:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c138:	f7e4 f8d0 	bl	80002dc <__adddf3>
 801c13c:	4606      	mov	r6, r0
 801c13e:	460f      	mov	r7, r1
 801c140:	f1b8 0f00 	cmp.w	r8, #0
 801c144:	d11b      	bne.n	801c17e <__kernel_sin+0xd6>
 801c146:	4602      	mov	r2, r0
 801c148:	460b      	mov	r3, r1
 801c14a:	4650      	mov	r0, sl
 801c14c:	4659      	mov	r1, fp
 801c14e:	f7e4 fa7b 	bl	8000648 <__aeabi_dmul>
 801c152:	a325      	add	r3, pc, #148	@ (adr r3, 801c1e8 <__kernel_sin+0x140>)
 801c154:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c158:	f7e4 f8be 	bl	80002d8 <__aeabi_dsub>
 801c15c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c160:	f7e4 fa72 	bl	8000648 <__aeabi_dmul>
 801c164:	4602      	mov	r2, r0
 801c166:	460b      	mov	r3, r1
 801c168:	4620      	mov	r0, r4
 801c16a:	4629      	mov	r1, r5
 801c16c:	f7e4 f8b6 	bl	80002dc <__adddf3>
 801c170:	4604      	mov	r4, r0
 801c172:	460d      	mov	r5, r1
 801c174:	ec45 4b10 	vmov	d0, r4, r5
 801c178:	b005      	add	sp, #20
 801c17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c17e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c182:	4b1b      	ldr	r3, [pc, #108]	@ (801c1f0 <__kernel_sin+0x148>)
 801c184:	2200      	movs	r2, #0
 801c186:	f7e4 fa5f 	bl	8000648 <__aeabi_dmul>
 801c18a:	4632      	mov	r2, r6
 801c18c:	4680      	mov	r8, r0
 801c18e:	4689      	mov	r9, r1
 801c190:	463b      	mov	r3, r7
 801c192:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c196:	f7e4 fa57 	bl	8000648 <__aeabi_dmul>
 801c19a:	4602      	mov	r2, r0
 801c19c:	460b      	mov	r3, r1
 801c19e:	4640      	mov	r0, r8
 801c1a0:	4649      	mov	r1, r9
 801c1a2:	f7e4 f899 	bl	80002d8 <__aeabi_dsub>
 801c1a6:	4652      	mov	r2, sl
 801c1a8:	465b      	mov	r3, fp
 801c1aa:	f7e4 fa4d 	bl	8000648 <__aeabi_dmul>
 801c1ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c1b2:	f7e4 f891 	bl	80002d8 <__aeabi_dsub>
 801c1b6:	a30c      	add	r3, pc, #48	@ (adr r3, 801c1e8 <__kernel_sin+0x140>)
 801c1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1bc:	4606      	mov	r6, r0
 801c1be:	460f      	mov	r7, r1
 801c1c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c1c4:	f7e4 fa40 	bl	8000648 <__aeabi_dmul>
 801c1c8:	4602      	mov	r2, r0
 801c1ca:	460b      	mov	r3, r1
 801c1cc:	4630      	mov	r0, r6
 801c1ce:	4639      	mov	r1, r7
 801c1d0:	f7e4 f884 	bl	80002dc <__adddf3>
 801c1d4:	4602      	mov	r2, r0
 801c1d6:	460b      	mov	r3, r1
 801c1d8:	4620      	mov	r0, r4
 801c1da:	4629      	mov	r1, r5
 801c1dc:	f7e4 f87c 	bl	80002d8 <__aeabi_dsub>
 801c1e0:	e7c6      	b.n	801c170 <__kernel_sin+0xc8>
 801c1e2:	bf00      	nop
 801c1e4:	f3af 8000 	nop.w
 801c1e8:	55555549 	.word	0x55555549
 801c1ec:	3fc55555 	.word	0x3fc55555
 801c1f0:	3fe00000 	.word	0x3fe00000
 801c1f4:	5acfd57c 	.word	0x5acfd57c
 801c1f8:	3de5d93a 	.word	0x3de5d93a
 801c1fc:	8a2b9ceb 	.word	0x8a2b9ceb
 801c200:	3e5ae5e6 	.word	0x3e5ae5e6
 801c204:	57b1fe7d 	.word	0x57b1fe7d
 801c208:	3ec71de3 	.word	0x3ec71de3
 801c20c:	19c161d5 	.word	0x19c161d5
 801c210:	3f2a01a0 	.word	0x3f2a01a0
 801c214:	1110f8a6 	.word	0x1110f8a6
 801c218:	3f811111 	.word	0x3f811111
 801c21c:	00000000 	.word	0x00000000

0801c220 <__ieee754_rem_pio2>:
 801c220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c224:	ec57 6b10 	vmov	r6, r7, d0
 801c228:	4bc5      	ldr	r3, [pc, #788]	@ (801c540 <__ieee754_rem_pio2+0x320>)
 801c22a:	b08d      	sub	sp, #52	@ 0x34
 801c22c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801c230:	4598      	cmp	r8, r3
 801c232:	4604      	mov	r4, r0
 801c234:	9704      	str	r7, [sp, #16]
 801c236:	d807      	bhi.n	801c248 <__ieee754_rem_pio2+0x28>
 801c238:	2200      	movs	r2, #0
 801c23a:	2300      	movs	r3, #0
 801c23c:	ed80 0b00 	vstr	d0, [r0]
 801c240:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801c244:	2500      	movs	r5, #0
 801c246:	e028      	b.n	801c29a <__ieee754_rem_pio2+0x7a>
 801c248:	4bbe      	ldr	r3, [pc, #760]	@ (801c544 <__ieee754_rem_pio2+0x324>)
 801c24a:	4598      	cmp	r8, r3
 801c24c:	d878      	bhi.n	801c340 <__ieee754_rem_pio2+0x120>
 801c24e:	9b04      	ldr	r3, [sp, #16]
 801c250:	4dbd      	ldr	r5, [pc, #756]	@ (801c548 <__ieee754_rem_pio2+0x328>)
 801c252:	2b00      	cmp	r3, #0
 801c254:	4630      	mov	r0, r6
 801c256:	a3ac      	add	r3, pc, #688	@ (adr r3, 801c508 <__ieee754_rem_pio2+0x2e8>)
 801c258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c25c:	4639      	mov	r1, r7
 801c25e:	dd38      	ble.n	801c2d2 <__ieee754_rem_pio2+0xb2>
 801c260:	f7e4 f83a 	bl	80002d8 <__aeabi_dsub>
 801c264:	45a8      	cmp	r8, r5
 801c266:	4606      	mov	r6, r0
 801c268:	460f      	mov	r7, r1
 801c26a:	d01a      	beq.n	801c2a2 <__ieee754_rem_pio2+0x82>
 801c26c:	a3a8      	add	r3, pc, #672	@ (adr r3, 801c510 <__ieee754_rem_pio2+0x2f0>)
 801c26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c272:	f7e4 f831 	bl	80002d8 <__aeabi_dsub>
 801c276:	4602      	mov	r2, r0
 801c278:	460b      	mov	r3, r1
 801c27a:	4680      	mov	r8, r0
 801c27c:	4689      	mov	r9, r1
 801c27e:	4630      	mov	r0, r6
 801c280:	4639      	mov	r1, r7
 801c282:	f7e4 f829 	bl	80002d8 <__aeabi_dsub>
 801c286:	a3a2      	add	r3, pc, #648	@ (adr r3, 801c510 <__ieee754_rem_pio2+0x2f0>)
 801c288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c28c:	f7e4 f824 	bl	80002d8 <__aeabi_dsub>
 801c290:	e9c4 8900 	strd	r8, r9, [r4]
 801c294:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c298:	2501      	movs	r5, #1
 801c29a:	4628      	mov	r0, r5
 801c29c:	b00d      	add	sp, #52	@ 0x34
 801c29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2a2:	a39d      	add	r3, pc, #628	@ (adr r3, 801c518 <__ieee754_rem_pio2+0x2f8>)
 801c2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2a8:	f7e4 f816 	bl	80002d8 <__aeabi_dsub>
 801c2ac:	a39c      	add	r3, pc, #624	@ (adr r3, 801c520 <__ieee754_rem_pio2+0x300>)
 801c2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2b2:	4606      	mov	r6, r0
 801c2b4:	460f      	mov	r7, r1
 801c2b6:	f7e4 f80f 	bl	80002d8 <__aeabi_dsub>
 801c2ba:	4602      	mov	r2, r0
 801c2bc:	460b      	mov	r3, r1
 801c2be:	4680      	mov	r8, r0
 801c2c0:	4689      	mov	r9, r1
 801c2c2:	4630      	mov	r0, r6
 801c2c4:	4639      	mov	r1, r7
 801c2c6:	f7e4 f807 	bl	80002d8 <__aeabi_dsub>
 801c2ca:	a395      	add	r3, pc, #596	@ (adr r3, 801c520 <__ieee754_rem_pio2+0x300>)
 801c2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2d0:	e7dc      	b.n	801c28c <__ieee754_rem_pio2+0x6c>
 801c2d2:	f7e4 f803 	bl	80002dc <__adddf3>
 801c2d6:	45a8      	cmp	r8, r5
 801c2d8:	4606      	mov	r6, r0
 801c2da:	460f      	mov	r7, r1
 801c2dc:	d018      	beq.n	801c310 <__ieee754_rem_pio2+0xf0>
 801c2de:	a38c      	add	r3, pc, #560	@ (adr r3, 801c510 <__ieee754_rem_pio2+0x2f0>)
 801c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2e4:	f7e3 fffa 	bl	80002dc <__adddf3>
 801c2e8:	4602      	mov	r2, r0
 801c2ea:	460b      	mov	r3, r1
 801c2ec:	4680      	mov	r8, r0
 801c2ee:	4689      	mov	r9, r1
 801c2f0:	4630      	mov	r0, r6
 801c2f2:	4639      	mov	r1, r7
 801c2f4:	f7e3 fff0 	bl	80002d8 <__aeabi_dsub>
 801c2f8:	a385      	add	r3, pc, #532	@ (adr r3, 801c510 <__ieee754_rem_pio2+0x2f0>)
 801c2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2fe:	f7e3 ffed 	bl	80002dc <__adddf3>
 801c302:	f04f 35ff 	mov.w	r5, #4294967295
 801c306:	e9c4 8900 	strd	r8, r9, [r4]
 801c30a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c30e:	e7c4      	b.n	801c29a <__ieee754_rem_pio2+0x7a>
 801c310:	a381      	add	r3, pc, #516	@ (adr r3, 801c518 <__ieee754_rem_pio2+0x2f8>)
 801c312:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c316:	f7e3 ffe1 	bl	80002dc <__adddf3>
 801c31a:	a381      	add	r3, pc, #516	@ (adr r3, 801c520 <__ieee754_rem_pio2+0x300>)
 801c31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c320:	4606      	mov	r6, r0
 801c322:	460f      	mov	r7, r1
 801c324:	f7e3 ffda 	bl	80002dc <__adddf3>
 801c328:	4602      	mov	r2, r0
 801c32a:	460b      	mov	r3, r1
 801c32c:	4680      	mov	r8, r0
 801c32e:	4689      	mov	r9, r1
 801c330:	4630      	mov	r0, r6
 801c332:	4639      	mov	r1, r7
 801c334:	f7e3 ffd0 	bl	80002d8 <__aeabi_dsub>
 801c338:	a379      	add	r3, pc, #484	@ (adr r3, 801c520 <__ieee754_rem_pio2+0x300>)
 801c33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c33e:	e7de      	b.n	801c2fe <__ieee754_rem_pio2+0xde>
 801c340:	4b82      	ldr	r3, [pc, #520]	@ (801c54c <__ieee754_rem_pio2+0x32c>)
 801c342:	4598      	cmp	r8, r3
 801c344:	f200 80d1 	bhi.w	801c4ea <__ieee754_rem_pio2+0x2ca>
 801c348:	f000 f966 	bl	801c618 <fabs>
 801c34c:	ec57 6b10 	vmov	r6, r7, d0
 801c350:	a375      	add	r3, pc, #468	@ (adr r3, 801c528 <__ieee754_rem_pio2+0x308>)
 801c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c356:	4630      	mov	r0, r6
 801c358:	4639      	mov	r1, r7
 801c35a:	f7e4 f975 	bl	8000648 <__aeabi_dmul>
 801c35e:	4b7c      	ldr	r3, [pc, #496]	@ (801c550 <__ieee754_rem_pio2+0x330>)
 801c360:	2200      	movs	r2, #0
 801c362:	f7e3 ffbb 	bl	80002dc <__adddf3>
 801c366:	f7e4 fc1f 	bl	8000ba8 <__aeabi_d2iz>
 801c36a:	4605      	mov	r5, r0
 801c36c:	f7e4 f902 	bl	8000574 <__aeabi_i2d>
 801c370:	4602      	mov	r2, r0
 801c372:	460b      	mov	r3, r1
 801c374:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c378:	a363      	add	r3, pc, #396	@ (adr r3, 801c508 <__ieee754_rem_pio2+0x2e8>)
 801c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c37e:	f7e4 f963 	bl	8000648 <__aeabi_dmul>
 801c382:	4602      	mov	r2, r0
 801c384:	460b      	mov	r3, r1
 801c386:	4630      	mov	r0, r6
 801c388:	4639      	mov	r1, r7
 801c38a:	f7e3 ffa5 	bl	80002d8 <__aeabi_dsub>
 801c38e:	a360      	add	r3, pc, #384	@ (adr r3, 801c510 <__ieee754_rem_pio2+0x2f0>)
 801c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c394:	4682      	mov	sl, r0
 801c396:	468b      	mov	fp, r1
 801c398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c39c:	f7e4 f954 	bl	8000648 <__aeabi_dmul>
 801c3a0:	2d1f      	cmp	r5, #31
 801c3a2:	4606      	mov	r6, r0
 801c3a4:	460f      	mov	r7, r1
 801c3a6:	dc0c      	bgt.n	801c3c2 <__ieee754_rem_pio2+0x1a2>
 801c3a8:	4b6a      	ldr	r3, [pc, #424]	@ (801c554 <__ieee754_rem_pio2+0x334>)
 801c3aa:	1e6a      	subs	r2, r5, #1
 801c3ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c3b0:	4543      	cmp	r3, r8
 801c3b2:	d006      	beq.n	801c3c2 <__ieee754_rem_pio2+0x1a2>
 801c3b4:	4632      	mov	r2, r6
 801c3b6:	463b      	mov	r3, r7
 801c3b8:	4650      	mov	r0, sl
 801c3ba:	4659      	mov	r1, fp
 801c3bc:	f7e3 ff8c 	bl	80002d8 <__aeabi_dsub>
 801c3c0:	e00e      	b.n	801c3e0 <__ieee754_rem_pio2+0x1c0>
 801c3c2:	463b      	mov	r3, r7
 801c3c4:	4632      	mov	r2, r6
 801c3c6:	4650      	mov	r0, sl
 801c3c8:	4659      	mov	r1, fp
 801c3ca:	f7e3 ff85 	bl	80002d8 <__aeabi_dsub>
 801c3ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 801c3d2:	9305      	str	r3, [sp, #20]
 801c3d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c3d8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801c3dc:	2b10      	cmp	r3, #16
 801c3de:	dc02      	bgt.n	801c3e6 <__ieee754_rem_pio2+0x1c6>
 801c3e0:	e9c4 0100 	strd	r0, r1, [r4]
 801c3e4:	e039      	b.n	801c45a <__ieee754_rem_pio2+0x23a>
 801c3e6:	a34c      	add	r3, pc, #304	@ (adr r3, 801c518 <__ieee754_rem_pio2+0x2f8>)
 801c3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c3f0:	f7e4 f92a 	bl	8000648 <__aeabi_dmul>
 801c3f4:	4606      	mov	r6, r0
 801c3f6:	460f      	mov	r7, r1
 801c3f8:	4602      	mov	r2, r0
 801c3fa:	460b      	mov	r3, r1
 801c3fc:	4650      	mov	r0, sl
 801c3fe:	4659      	mov	r1, fp
 801c400:	f7e3 ff6a 	bl	80002d8 <__aeabi_dsub>
 801c404:	4602      	mov	r2, r0
 801c406:	460b      	mov	r3, r1
 801c408:	4680      	mov	r8, r0
 801c40a:	4689      	mov	r9, r1
 801c40c:	4650      	mov	r0, sl
 801c40e:	4659      	mov	r1, fp
 801c410:	f7e3 ff62 	bl	80002d8 <__aeabi_dsub>
 801c414:	4632      	mov	r2, r6
 801c416:	463b      	mov	r3, r7
 801c418:	f7e3 ff5e 	bl	80002d8 <__aeabi_dsub>
 801c41c:	a340      	add	r3, pc, #256	@ (adr r3, 801c520 <__ieee754_rem_pio2+0x300>)
 801c41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c422:	4606      	mov	r6, r0
 801c424:	460f      	mov	r7, r1
 801c426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c42a:	f7e4 f90d 	bl	8000648 <__aeabi_dmul>
 801c42e:	4632      	mov	r2, r6
 801c430:	463b      	mov	r3, r7
 801c432:	f7e3 ff51 	bl	80002d8 <__aeabi_dsub>
 801c436:	4602      	mov	r2, r0
 801c438:	460b      	mov	r3, r1
 801c43a:	4606      	mov	r6, r0
 801c43c:	460f      	mov	r7, r1
 801c43e:	4640      	mov	r0, r8
 801c440:	4649      	mov	r1, r9
 801c442:	f7e3 ff49 	bl	80002d8 <__aeabi_dsub>
 801c446:	9a05      	ldr	r2, [sp, #20]
 801c448:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c44c:	1ad3      	subs	r3, r2, r3
 801c44e:	2b31      	cmp	r3, #49	@ 0x31
 801c450:	dc20      	bgt.n	801c494 <__ieee754_rem_pio2+0x274>
 801c452:	e9c4 0100 	strd	r0, r1, [r4]
 801c456:	46c2      	mov	sl, r8
 801c458:	46cb      	mov	fp, r9
 801c45a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801c45e:	4650      	mov	r0, sl
 801c460:	4642      	mov	r2, r8
 801c462:	464b      	mov	r3, r9
 801c464:	4659      	mov	r1, fp
 801c466:	f7e3 ff37 	bl	80002d8 <__aeabi_dsub>
 801c46a:	463b      	mov	r3, r7
 801c46c:	4632      	mov	r2, r6
 801c46e:	f7e3 ff33 	bl	80002d8 <__aeabi_dsub>
 801c472:	9b04      	ldr	r3, [sp, #16]
 801c474:	2b00      	cmp	r3, #0
 801c476:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c47a:	f6bf af0e 	bge.w	801c29a <__ieee754_rem_pio2+0x7a>
 801c47e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801c482:	6063      	str	r3, [r4, #4]
 801c484:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c488:	f8c4 8000 	str.w	r8, [r4]
 801c48c:	60a0      	str	r0, [r4, #8]
 801c48e:	60e3      	str	r3, [r4, #12]
 801c490:	426d      	negs	r5, r5
 801c492:	e702      	b.n	801c29a <__ieee754_rem_pio2+0x7a>
 801c494:	a326      	add	r3, pc, #152	@ (adr r3, 801c530 <__ieee754_rem_pio2+0x310>)
 801c496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c49a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c49e:	f7e4 f8d3 	bl	8000648 <__aeabi_dmul>
 801c4a2:	4606      	mov	r6, r0
 801c4a4:	460f      	mov	r7, r1
 801c4a6:	4602      	mov	r2, r0
 801c4a8:	460b      	mov	r3, r1
 801c4aa:	4640      	mov	r0, r8
 801c4ac:	4649      	mov	r1, r9
 801c4ae:	f7e3 ff13 	bl	80002d8 <__aeabi_dsub>
 801c4b2:	4602      	mov	r2, r0
 801c4b4:	460b      	mov	r3, r1
 801c4b6:	4682      	mov	sl, r0
 801c4b8:	468b      	mov	fp, r1
 801c4ba:	4640      	mov	r0, r8
 801c4bc:	4649      	mov	r1, r9
 801c4be:	f7e3 ff0b 	bl	80002d8 <__aeabi_dsub>
 801c4c2:	4632      	mov	r2, r6
 801c4c4:	463b      	mov	r3, r7
 801c4c6:	f7e3 ff07 	bl	80002d8 <__aeabi_dsub>
 801c4ca:	a31b      	add	r3, pc, #108	@ (adr r3, 801c538 <__ieee754_rem_pio2+0x318>)
 801c4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4d0:	4606      	mov	r6, r0
 801c4d2:	460f      	mov	r7, r1
 801c4d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c4d8:	f7e4 f8b6 	bl	8000648 <__aeabi_dmul>
 801c4dc:	4632      	mov	r2, r6
 801c4de:	463b      	mov	r3, r7
 801c4e0:	f7e3 fefa 	bl	80002d8 <__aeabi_dsub>
 801c4e4:	4606      	mov	r6, r0
 801c4e6:	460f      	mov	r7, r1
 801c4e8:	e764      	b.n	801c3b4 <__ieee754_rem_pio2+0x194>
 801c4ea:	4b1b      	ldr	r3, [pc, #108]	@ (801c558 <__ieee754_rem_pio2+0x338>)
 801c4ec:	4598      	cmp	r8, r3
 801c4ee:	d935      	bls.n	801c55c <__ieee754_rem_pio2+0x33c>
 801c4f0:	4632      	mov	r2, r6
 801c4f2:	463b      	mov	r3, r7
 801c4f4:	4630      	mov	r0, r6
 801c4f6:	4639      	mov	r1, r7
 801c4f8:	f7e3 feee 	bl	80002d8 <__aeabi_dsub>
 801c4fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c500:	e9c4 0100 	strd	r0, r1, [r4]
 801c504:	e69e      	b.n	801c244 <__ieee754_rem_pio2+0x24>
 801c506:	bf00      	nop
 801c508:	54400000 	.word	0x54400000
 801c50c:	3ff921fb 	.word	0x3ff921fb
 801c510:	1a626331 	.word	0x1a626331
 801c514:	3dd0b461 	.word	0x3dd0b461
 801c518:	1a600000 	.word	0x1a600000
 801c51c:	3dd0b461 	.word	0x3dd0b461
 801c520:	2e037073 	.word	0x2e037073
 801c524:	3ba3198a 	.word	0x3ba3198a
 801c528:	6dc9c883 	.word	0x6dc9c883
 801c52c:	3fe45f30 	.word	0x3fe45f30
 801c530:	2e000000 	.word	0x2e000000
 801c534:	3ba3198a 	.word	0x3ba3198a
 801c538:	252049c1 	.word	0x252049c1
 801c53c:	397b839a 	.word	0x397b839a
 801c540:	3fe921fb 	.word	0x3fe921fb
 801c544:	4002d97b 	.word	0x4002d97b
 801c548:	3ff921fb 	.word	0x3ff921fb
 801c54c:	413921fb 	.word	0x413921fb
 801c550:	3fe00000 	.word	0x3fe00000
 801c554:	0802259c 	.word	0x0802259c
 801c558:	7fefffff 	.word	0x7fefffff
 801c55c:	ea4f 5528 	mov.w	r5, r8, asr #20
 801c560:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801c564:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801c568:	4630      	mov	r0, r6
 801c56a:	460f      	mov	r7, r1
 801c56c:	f7e4 fb1c 	bl	8000ba8 <__aeabi_d2iz>
 801c570:	f7e4 f800 	bl	8000574 <__aeabi_i2d>
 801c574:	4602      	mov	r2, r0
 801c576:	460b      	mov	r3, r1
 801c578:	4630      	mov	r0, r6
 801c57a:	4639      	mov	r1, r7
 801c57c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801c580:	f7e3 feaa 	bl	80002d8 <__aeabi_dsub>
 801c584:	4b22      	ldr	r3, [pc, #136]	@ (801c610 <__ieee754_rem_pio2+0x3f0>)
 801c586:	2200      	movs	r2, #0
 801c588:	f7e4 f85e 	bl	8000648 <__aeabi_dmul>
 801c58c:	460f      	mov	r7, r1
 801c58e:	4606      	mov	r6, r0
 801c590:	f7e4 fb0a 	bl	8000ba8 <__aeabi_d2iz>
 801c594:	f7e3 ffee 	bl	8000574 <__aeabi_i2d>
 801c598:	4602      	mov	r2, r0
 801c59a:	460b      	mov	r3, r1
 801c59c:	4630      	mov	r0, r6
 801c59e:	4639      	mov	r1, r7
 801c5a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c5a4:	f7e3 fe98 	bl	80002d8 <__aeabi_dsub>
 801c5a8:	4b19      	ldr	r3, [pc, #100]	@ (801c610 <__ieee754_rem_pio2+0x3f0>)
 801c5aa:	2200      	movs	r2, #0
 801c5ac:	f7e4 f84c 	bl	8000648 <__aeabi_dmul>
 801c5b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801c5b4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801c5b8:	f04f 0803 	mov.w	r8, #3
 801c5bc:	2600      	movs	r6, #0
 801c5be:	2700      	movs	r7, #0
 801c5c0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801c5c4:	4632      	mov	r2, r6
 801c5c6:	463b      	mov	r3, r7
 801c5c8:	46c2      	mov	sl, r8
 801c5ca:	f108 38ff 	add.w	r8, r8, #4294967295
 801c5ce:	f7e4 faa3 	bl	8000b18 <__aeabi_dcmpeq>
 801c5d2:	2800      	cmp	r0, #0
 801c5d4:	d1f4      	bne.n	801c5c0 <__ieee754_rem_pio2+0x3a0>
 801c5d6:	4b0f      	ldr	r3, [pc, #60]	@ (801c614 <__ieee754_rem_pio2+0x3f4>)
 801c5d8:	9301      	str	r3, [sp, #4]
 801c5da:	2302      	movs	r3, #2
 801c5dc:	9300      	str	r3, [sp, #0]
 801c5de:	462a      	mov	r2, r5
 801c5e0:	4653      	mov	r3, sl
 801c5e2:	4621      	mov	r1, r4
 801c5e4:	a806      	add	r0, sp, #24
 801c5e6:	f000 f81f 	bl	801c628 <__kernel_rem_pio2>
 801c5ea:	9b04      	ldr	r3, [sp, #16]
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	4605      	mov	r5, r0
 801c5f0:	f6bf ae53 	bge.w	801c29a <__ieee754_rem_pio2+0x7a>
 801c5f4:	e9d4 2100 	ldrd	r2, r1, [r4]
 801c5f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c5fc:	e9c4 2300 	strd	r2, r3, [r4]
 801c600:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801c604:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c608:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801c60c:	e740      	b.n	801c490 <__ieee754_rem_pio2+0x270>
 801c60e:	bf00      	nop
 801c610:	41700000 	.word	0x41700000
 801c614:	0802261c 	.word	0x0802261c

0801c618 <fabs>:
 801c618:	ec51 0b10 	vmov	r0, r1, d0
 801c61c:	4602      	mov	r2, r0
 801c61e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c622:	ec43 2b10 	vmov	d0, r2, r3
 801c626:	4770      	bx	lr

0801c628 <__kernel_rem_pio2>:
 801c628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c62c:	ed2d 8b02 	vpush	{d8}
 801c630:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801c634:	f112 0f14 	cmn.w	r2, #20
 801c638:	9306      	str	r3, [sp, #24]
 801c63a:	9104      	str	r1, [sp, #16]
 801c63c:	4bbe      	ldr	r3, [pc, #760]	@ (801c938 <__kernel_rem_pio2+0x310>)
 801c63e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801c640:	9008      	str	r0, [sp, #32]
 801c642:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c646:	9300      	str	r3, [sp, #0]
 801c648:	9b06      	ldr	r3, [sp, #24]
 801c64a:	f103 33ff 	add.w	r3, r3, #4294967295
 801c64e:	bfa8      	it	ge
 801c650:	1ed4      	subge	r4, r2, #3
 801c652:	9305      	str	r3, [sp, #20]
 801c654:	bfb2      	itee	lt
 801c656:	2400      	movlt	r4, #0
 801c658:	2318      	movge	r3, #24
 801c65a:	fb94 f4f3 	sdivge	r4, r4, r3
 801c65e:	f06f 0317 	mvn.w	r3, #23
 801c662:	fb04 3303 	mla	r3, r4, r3, r3
 801c666:	eb03 0b02 	add.w	fp, r3, r2
 801c66a:	9b00      	ldr	r3, [sp, #0]
 801c66c:	9a05      	ldr	r2, [sp, #20]
 801c66e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801c928 <__kernel_rem_pio2+0x300>
 801c672:	eb03 0802 	add.w	r8, r3, r2
 801c676:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801c678:	1aa7      	subs	r7, r4, r2
 801c67a:	ae20      	add	r6, sp, #128	@ 0x80
 801c67c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801c680:	2500      	movs	r5, #0
 801c682:	4545      	cmp	r5, r8
 801c684:	dd13      	ble.n	801c6ae <__kernel_rem_pio2+0x86>
 801c686:	9b06      	ldr	r3, [sp, #24]
 801c688:	aa20      	add	r2, sp, #128	@ 0x80
 801c68a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801c68e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801c692:	f04f 0800 	mov.w	r8, #0
 801c696:	9b00      	ldr	r3, [sp, #0]
 801c698:	4598      	cmp	r8, r3
 801c69a:	dc31      	bgt.n	801c700 <__kernel_rem_pio2+0xd8>
 801c69c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801c928 <__kernel_rem_pio2+0x300>
 801c6a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c6a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c6a8:	462f      	mov	r7, r5
 801c6aa:	2600      	movs	r6, #0
 801c6ac:	e01b      	b.n	801c6e6 <__kernel_rem_pio2+0xbe>
 801c6ae:	42ef      	cmn	r7, r5
 801c6b0:	d407      	bmi.n	801c6c2 <__kernel_rem_pio2+0x9a>
 801c6b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801c6b6:	f7e3 ff5d 	bl	8000574 <__aeabi_i2d>
 801c6ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 801c6be:	3501      	adds	r5, #1
 801c6c0:	e7df      	b.n	801c682 <__kernel_rem_pio2+0x5a>
 801c6c2:	ec51 0b18 	vmov	r0, r1, d8
 801c6c6:	e7f8      	b.n	801c6ba <__kernel_rem_pio2+0x92>
 801c6c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c6cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801c6d0:	f7e3 ffba 	bl	8000648 <__aeabi_dmul>
 801c6d4:	4602      	mov	r2, r0
 801c6d6:	460b      	mov	r3, r1
 801c6d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c6dc:	f7e3 fdfe 	bl	80002dc <__adddf3>
 801c6e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c6e4:	3601      	adds	r6, #1
 801c6e6:	9b05      	ldr	r3, [sp, #20]
 801c6e8:	429e      	cmp	r6, r3
 801c6ea:	f1a7 0708 	sub.w	r7, r7, #8
 801c6ee:	ddeb      	ble.n	801c6c8 <__kernel_rem_pio2+0xa0>
 801c6f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c6f4:	f108 0801 	add.w	r8, r8, #1
 801c6f8:	ecaa 7b02 	vstmia	sl!, {d7}
 801c6fc:	3508      	adds	r5, #8
 801c6fe:	e7ca      	b.n	801c696 <__kernel_rem_pio2+0x6e>
 801c700:	9b00      	ldr	r3, [sp, #0]
 801c702:	f8dd 8000 	ldr.w	r8, [sp]
 801c706:	aa0c      	add	r2, sp, #48	@ 0x30
 801c708:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c70c:	930a      	str	r3, [sp, #40]	@ 0x28
 801c70e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801c710:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801c714:	9309      	str	r3, [sp, #36]	@ 0x24
 801c716:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801c71a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c71c:	ab98      	add	r3, sp, #608	@ 0x260
 801c71e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801c722:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801c726:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c72a:	ac0c      	add	r4, sp, #48	@ 0x30
 801c72c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801c72e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801c732:	46a1      	mov	r9, r4
 801c734:	46c2      	mov	sl, r8
 801c736:	f1ba 0f00 	cmp.w	sl, #0
 801c73a:	f1a5 0508 	sub.w	r5, r5, #8
 801c73e:	dc77      	bgt.n	801c830 <__kernel_rem_pio2+0x208>
 801c740:	4658      	mov	r0, fp
 801c742:	ed9d 0b02 	vldr	d0, [sp, #8]
 801c746:	f000 fac7 	bl	801ccd8 <scalbn>
 801c74a:	ec57 6b10 	vmov	r6, r7, d0
 801c74e:	2200      	movs	r2, #0
 801c750:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801c754:	4630      	mov	r0, r6
 801c756:	4639      	mov	r1, r7
 801c758:	f7e3 ff76 	bl	8000648 <__aeabi_dmul>
 801c75c:	ec41 0b10 	vmov	d0, r0, r1
 801c760:	f000 fb3a 	bl	801cdd8 <floor>
 801c764:	4b75      	ldr	r3, [pc, #468]	@ (801c93c <__kernel_rem_pio2+0x314>)
 801c766:	ec51 0b10 	vmov	r0, r1, d0
 801c76a:	2200      	movs	r2, #0
 801c76c:	f7e3 ff6c 	bl	8000648 <__aeabi_dmul>
 801c770:	4602      	mov	r2, r0
 801c772:	460b      	mov	r3, r1
 801c774:	4630      	mov	r0, r6
 801c776:	4639      	mov	r1, r7
 801c778:	f7e3 fdae 	bl	80002d8 <__aeabi_dsub>
 801c77c:	460f      	mov	r7, r1
 801c77e:	4606      	mov	r6, r0
 801c780:	f7e4 fa12 	bl	8000ba8 <__aeabi_d2iz>
 801c784:	9002      	str	r0, [sp, #8]
 801c786:	f7e3 fef5 	bl	8000574 <__aeabi_i2d>
 801c78a:	4602      	mov	r2, r0
 801c78c:	460b      	mov	r3, r1
 801c78e:	4630      	mov	r0, r6
 801c790:	4639      	mov	r1, r7
 801c792:	f7e3 fda1 	bl	80002d8 <__aeabi_dsub>
 801c796:	f1bb 0f00 	cmp.w	fp, #0
 801c79a:	4606      	mov	r6, r0
 801c79c:	460f      	mov	r7, r1
 801c79e:	dd6c      	ble.n	801c87a <__kernel_rem_pio2+0x252>
 801c7a0:	f108 31ff 	add.w	r1, r8, #4294967295
 801c7a4:	ab0c      	add	r3, sp, #48	@ 0x30
 801c7a6:	9d02      	ldr	r5, [sp, #8]
 801c7a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c7ac:	f1cb 0018 	rsb	r0, fp, #24
 801c7b0:	fa43 f200 	asr.w	r2, r3, r0
 801c7b4:	4415      	add	r5, r2
 801c7b6:	4082      	lsls	r2, r0
 801c7b8:	1a9b      	subs	r3, r3, r2
 801c7ba:	aa0c      	add	r2, sp, #48	@ 0x30
 801c7bc:	9502      	str	r5, [sp, #8]
 801c7be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c7c2:	f1cb 0217 	rsb	r2, fp, #23
 801c7c6:	fa43 f902 	asr.w	r9, r3, r2
 801c7ca:	f1b9 0f00 	cmp.w	r9, #0
 801c7ce:	dd64      	ble.n	801c89a <__kernel_rem_pio2+0x272>
 801c7d0:	9b02      	ldr	r3, [sp, #8]
 801c7d2:	2200      	movs	r2, #0
 801c7d4:	3301      	adds	r3, #1
 801c7d6:	9302      	str	r3, [sp, #8]
 801c7d8:	4615      	mov	r5, r2
 801c7da:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801c7de:	4590      	cmp	r8, r2
 801c7e0:	f300 80b8 	bgt.w	801c954 <__kernel_rem_pio2+0x32c>
 801c7e4:	f1bb 0f00 	cmp.w	fp, #0
 801c7e8:	dd07      	ble.n	801c7fa <__kernel_rem_pio2+0x1d2>
 801c7ea:	f1bb 0f01 	cmp.w	fp, #1
 801c7ee:	f000 80bf 	beq.w	801c970 <__kernel_rem_pio2+0x348>
 801c7f2:	f1bb 0f02 	cmp.w	fp, #2
 801c7f6:	f000 80c6 	beq.w	801c986 <__kernel_rem_pio2+0x35e>
 801c7fa:	f1b9 0f02 	cmp.w	r9, #2
 801c7fe:	d14c      	bne.n	801c89a <__kernel_rem_pio2+0x272>
 801c800:	4632      	mov	r2, r6
 801c802:	463b      	mov	r3, r7
 801c804:	494e      	ldr	r1, [pc, #312]	@ (801c940 <__kernel_rem_pio2+0x318>)
 801c806:	2000      	movs	r0, #0
 801c808:	f7e3 fd66 	bl	80002d8 <__aeabi_dsub>
 801c80c:	4606      	mov	r6, r0
 801c80e:	460f      	mov	r7, r1
 801c810:	2d00      	cmp	r5, #0
 801c812:	d042      	beq.n	801c89a <__kernel_rem_pio2+0x272>
 801c814:	4658      	mov	r0, fp
 801c816:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801c930 <__kernel_rem_pio2+0x308>
 801c81a:	f000 fa5d 	bl	801ccd8 <scalbn>
 801c81e:	4630      	mov	r0, r6
 801c820:	4639      	mov	r1, r7
 801c822:	ec53 2b10 	vmov	r2, r3, d0
 801c826:	f7e3 fd57 	bl	80002d8 <__aeabi_dsub>
 801c82a:	4606      	mov	r6, r0
 801c82c:	460f      	mov	r7, r1
 801c82e:	e034      	b.n	801c89a <__kernel_rem_pio2+0x272>
 801c830:	4b44      	ldr	r3, [pc, #272]	@ (801c944 <__kernel_rem_pio2+0x31c>)
 801c832:	2200      	movs	r2, #0
 801c834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c838:	f7e3 ff06 	bl	8000648 <__aeabi_dmul>
 801c83c:	f7e4 f9b4 	bl	8000ba8 <__aeabi_d2iz>
 801c840:	f7e3 fe98 	bl	8000574 <__aeabi_i2d>
 801c844:	4b40      	ldr	r3, [pc, #256]	@ (801c948 <__kernel_rem_pio2+0x320>)
 801c846:	2200      	movs	r2, #0
 801c848:	4606      	mov	r6, r0
 801c84a:	460f      	mov	r7, r1
 801c84c:	f7e3 fefc 	bl	8000648 <__aeabi_dmul>
 801c850:	4602      	mov	r2, r0
 801c852:	460b      	mov	r3, r1
 801c854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c858:	f7e3 fd3e 	bl	80002d8 <__aeabi_dsub>
 801c85c:	f7e4 f9a4 	bl	8000ba8 <__aeabi_d2iz>
 801c860:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c864:	f849 0b04 	str.w	r0, [r9], #4
 801c868:	4639      	mov	r1, r7
 801c86a:	4630      	mov	r0, r6
 801c86c:	f7e3 fd36 	bl	80002dc <__adddf3>
 801c870:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c878:	e75d      	b.n	801c736 <__kernel_rem_pio2+0x10e>
 801c87a:	d107      	bne.n	801c88c <__kernel_rem_pio2+0x264>
 801c87c:	f108 33ff 	add.w	r3, r8, #4294967295
 801c880:	aa0c      	add	r2, sp, #48	@ 0x30
 801c882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c886:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801c88a:	e79e      	b.n	801c7ca <__kernel_rem_pio2+0x1a2>
 801c88c:	4b2f      	ldr	r3, [pc, #188]	@ (801c94c <__kernel_rem_pio2+0x324>)
 801c88e:	2200      	movs	r2, #0
 801c890:	f7e4 f960 	bl	8000b54 <__aeabi_dcmpge>
 801c894:	2800      	cmp	r0, #0
 801c896:	d143      	bne.n	801c920 <__kernel_rem_pio2+0x2f8>
 801c898:	4681      	mov	r9, r0
 801c89a:	2200      	movs	r2, #0
 801c89c:	2300      	movs	r3, #0
 801c89e:	4630      	mov	r0, r6
 801c8a0:	4639      	mov	r1, r7
 801c8a2:	f7e4 f939 	bl	8000b18 <__aeabi_dcmpeq>
 801c8a6:	2800      	cmp	r0, #0
 801c8a8:	f000 80bf 	beq.w	801ca2a <__kernel_rem_pio2+0x402>
 801c8ac:	f108 33ff 	add.w	r3, r8, #4294967295
 801c8b0:	2200      	movs	r2, #0
 801c8b2:	9900      	ldr	r1, [sp, #0]
 801c8b4:	428b      	cmp	r3, r1
 801c8b6:	da6e      	bge.n	801c996 <__kernel_rem_pio2+0x36e>
 801c8b8:	2a00      	cmp	r2, #0
 801c8ba:	f000 8089 	beq.w	801c9d0 <__kernel_rem_pio2+0x3a8>
 801c8be:	f108 38ff 	add.w	r8, r8, #4294967295
 801c8c2:	ab0c      	add	r3, sp, #48	@ 0x30
 801c8c4:	f1ab 0b18 	sub.w	fp, fp, #24
 801c8c8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801c8cc:	2b00      	cmp	r3, #0
 801c8ce:	d0f6      	beq.n	801c8be <__kernel_rem_pio2+0x296>
 801c8d0:	4658      	mov	r0, fp
 801c8d2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801c930 <__kernel_rem_pio2+0x308>
 801c8d6:	f000 f9ff 	bl	801ccd8 <scalbn>
 801c8da:	f108 0301 	add.w	r3, r8, #1
 801c8de:	00da      	lsls	r2, r3, #3
 801c8e0:	9205      	str	r2, [sp, #20]
 801c8e2:	ec55 4b10 	vmov	r4, r5, d0
 801c8e6:	aa70      	add	r2, sp, #448	@ 0x1c0
 801c8e8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801c944 <__kernel_rem_pio2+0x31c>
 801c8ec:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801c8f0:	4646      	mov	r6, r8
 801c8f2:	f04f 0a00 	mov.w	sl, #0
 801c8f6:	2e00      	cmp	r6, #0
 801c8f8:	f280 80cf 	bge.w	801ca9a <__kernel_rem_pio2+0x472>
 801c8fc:	4644      	mov	r4, r8
 801c8fe:	2c00      	cmp	r4, #0
 801c900:	f2c0 80fd 	blt.w	801cafe <__kernel_rem_pio2+0x4d6>
 801c904:	4b12      	ldr	r3, [pc, #72]	@ (801c950 <__kernel_rem_pio2+0x328>)
 801c906:	461f      	mov	r7, r3
 801c908:	ab70      	add	r3, sp, #448	@ 0x1c0
 801c90a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c90e:	9306      	str	r3, [sp, #24]
 801c910:	f04f 0a00 	mov.w	sl, #0
 801c914:	f04f 0b00 	mov.w	fp, #0
 801c918:	2600      	movs	r6, #0
 801c91a:	eba8 0504 	sub.w	r5, r8, r4
 801c91e:	e0e2      	b.n	801cae6 <__kernel_rem_pio2+0x4be>
 801c920:	f04f 0902 	mov.w	r9, #2
 801c924:	e754      	b.n	801c7d0 <__kernel_rem_pio2+0x1a8>
 801c926:	bf00      	nop
	...
 801c934:	3ff00000 	.word	0x3ff00000
 801c938:	08022768 	.word	0x08022768
 801c93c:	40200000 	.word	0x40200000
 801c940:	3ff00000 	.word	0x3ff00000
 801c944:	3e700000 	.word	0x3e700000
 801c948:	41700000 	.word	0x41700000
 801c94c:	3fe00000 	.word	0x3fe00000
 801c950:	08022728 	.word	0x08022728
 801c954:	f854 3b04 	ldr.w	r3, [r4], #4
 801c958:	b945      	cbnz	r5, 801c96c <__kernel_rem_pio2+0x344>
 801c95a:	b123      	cbz	r3, 801c966 <__kernel_rem_pio2+0x33e>
 801c95c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801c960:	f844 3c04 	str.w	r3, [r4, #-4]
 801c964:	2301      	movs	r3, #1
 801c966:	3201      	adds	r2, #1
 801c968:	461d      	mov	r5, r3
 801c96a:	e738      	b.n	801c7de <__kernel_rem_pio2+0x1b6>
 801c96c:	1acb      	subs	r3, r1, r3
 801c96e:	e7f7      	b.n	801c960 <__kernel_rem_pio2+0x338>
 801c970:	f108 32ff 	add.w	r2, r8, #4294967295
 801c974:	ab0c      	add	r3, sp, #48	@ 0x30
 801c976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c97a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801c97e:	a90c      	add	r1, sp, #48	@ 0x30
 801c980:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801c984:	e739      	b.n	801c7fa <__kernel_rem_pio2+0x1d2>
 801c986:	f108 32ff 	add.w	r2, r8, #4294967295
 801c98a:	ab0c      	add	r3, sp, #48	@ 0x30
 801c98c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c990:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c994:	e7f3      	b.n	801c97e <__kernel_rem_pio2+0x356>
 801c996:	a90c      	add	r1, sp, #48	@ 0x30
 801c998:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801c99c:	3b01      	subs	r3, #1
 801c99e:	430a      	orrs	r2, r1
 801c9a0:	e787      	b.n	801c8b2 <__kernel_rem_pio2+0x28a>
 801c9a2:	3401      	adds	r4, #1
 801c9a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801c9a8:	2a00      	cmp	r2, #0
 801c9aa:	d0fa      	beq.n	801c9a2 <__kernel_rem_pio2+0x37a>
 801c9ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c9ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801c9b2:	eb0d 0503 	add.w	r5, sp, r3
 801c9b6:	9b06      	ldr	r3, [sp, #24]
 801c9b8:	aa20      	add	r2, sp, #128	@ 0x80
 801c9ba:	4443      	add	r3, r8
 801c9bc:	f108 0701 	add.w	r7, r8, #1
 801c9c0:	3d98      	subs	r5, #152	@ 0x98
 801c9c2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801c9c6:	4444      	add	r4, r8
 801c9c8:	42bc      	cmp	r4, r7
 801c9ca:	da04      	bge.n	801c9d6 <__kernel_rem_pio2+0x3ae>
 801c9cc:	46a0      	mov	r8, r4
 801c9ce:	e6a2      	b.n	801c716 <__kernel_rem_pio2+0xee>
 801c9d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c9d2:	2401      	movs	r4, #1
 801c9d4:	e7e6      	b.n	801c9a4 <__kernel_rem_pio2+0x37c>
 801c9d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c9d8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801c9dc:	f7e3 fdca 	bl	8000574 <__aeabi_i2d>
 801c9e0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801cca8 <__kernel_rem_pio2+0x680>
 801c9e4:	e8e6 0102 	strd	r0, r1, [r6], #8
 801c9e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c9ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c9f0:	46b2      	mov	sl, r6
 801c9f2:	f04f 0800 	mov.w	r8, #0
 801c9f6:	9b05      	ldr	r3, [sp, #20]
 801c9f8:	4598      	cmp	r8, r3
 801c9fa:	dd05      	ble.n	801ca08 <__kernel_rem_pio2+0x3e0>
 801c9fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ca00:	3701      	adds	r7, #1
 801ca02:	eca5 7b02 	vstmia	r5!, {d7}
 801ca06:	e7df      	b.n	801c9c8 <__kernel_rem_pio2+0x3a0>
 801ca08:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801ca0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801ca10:	f7e3 fe1a 	bl	8000648 <__aeabi_dmul>
 801ca14:	4602      	mov	r2, r0
 801ca16:	460b      	mov	r3, r1
 801ca18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ca1c:	f7e3 fc5e 	bl	80002dc <__adddf3>
 801ca20:	f108 0801 	add.w	r8, r8, #1
 801ca24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ca28:	e7e5      	b.n	801c9f6 <__kernel_rem_pio2+0x3ce>
 801ca2a:	f1cb 0000 	rsb	r0, fp, #0
 801ca2e:	ec47 6b10 	vmov	d0, r6, r7
 801ca32:	f000 f951 	bl	801ccd8 <scalbn>
 801ca36:	ec55 4b10 	vmov	r4, r5, d0
 801ca3a:	4b9d      	ldr	r3, [pc, #628]	@ (801ccb0 <__kernel_rem_pio2+0x688>)
 801ca3c:	2200      	movs	r2, #0
 801ca3e:	4620      	mov	r0, r4
 801ca40:	4629      	mov	r1, r5
 801ca42:	f7e4 f887 	bl	8000b54 <__aeabi_dcmpge>
 801ca46:	b300      	cbz	r0, 801ca8a <__kernel_rem_pio2+0x462>
 801ca48:	4b9a      	ldr	r3, [pc, #616]	@ (801ccb4 <__kernel_rem_pio2+0x68c>)
 801ca4a:	2200      	movs	r2, #0
 801ca4c:	4620      	mov	r0, r4
 801ca4e:	4629      	mov	r1, r5
 801ca50:	f7e3 fdfa 	bl	8000648 <__aeabi_dmul>
 801ca54:	f7e4 f8a8 	bl	8000ba8 <__aeabi_d2iz>
 801ca58:	4606      	mov	r6, r0
 801ca5a:	f7e3 fd8b 	bl	8000574 <__aeabi_i2d>
 801ca5e:	4b94      	ldr	r3, [pc, #592]	@ (801ccb0 <__kernel_rem_pio2+0x688>)
 801ca60:	2200      	movs	r2, #0
 801ca62:	f7e3 fdf1 	bl	8000648 <__aeabi_dmul>
 801ca66:	460b      	mov	r3, r1
 801ca68:	4602      	mov	r2, r0
 801ca6a:	4629      	mov	r1, r5
 801ca6c:	4620      	mov	r0, r4
 801ca6e:	f7e3 fc33 	bl	80002d8 <__aeabi_dsub>
 801ca72:	f7e4 f899 	bl	8000ba8 <__aeabi_d2iz>
 801ca76:	ab0c      	add	r3, sp, #48	@ 0x30
 801ca78:	f10b 0b18 	add.w	fp, fp, #24
 801ca7c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801ca80:	f108 0801 	add.w	r8, r8, #1
 801ca84:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801ca88:	e722      	b.n	801c8d0 <__kernel_rem_pio2+0x2a8>
 801ca8a:	4620      	mov	r0, r4
 801ca8c:	4629      	mov	r1, r5
 801ca8e:	f7e4 f88b 	bl	8000ba8 <__aeabi_d2iz>
 801ca92:	ab0c      	add	r3, sp, #48	@ 0x30
 801ca94:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801ca98:	e71a      	b.n	801c8d0 <__kernel_rem_pio2+0x2a8>
 801ca9a:	ab0c      	add	r3, sp, #48	@ 0x30
 801ca9c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801caa0:	f7e3 fd68 	bl	8000574 <__aeabi_i2d>
 801caa4:	4622      	mov	r2, r4
 801caa6:	462b      	mov	r3, r5
 801caa8:	f7e3 fdce 	bl	8000648 <__aeabi_dmul>
 801caac:	4652      	mov	r2, sl
 801caae:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801cab2:	465b      	mov	r3, fp
 801cab4:	4620      	mov	r0, r4
 801cab6:	4629      	mov	r1, r5
 801cab8:	f7e3 fdc6 	bl	8000648 <__aeabi_dmul>
 801cabc:	3e01      	subs	r6, #1
 801cabe:	4604      	mov	r4, r0
 801cac0:	460d      	mov	r5, r1
 801cac2:	e718      	b.n	801c8f6 <__kernel_rem_pio2+0x2ce>
 801cac4:	9906      	ldr	r1, [sp, #24]
 801cac6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801caca:	9106      	str	r1, [sp, #24]
 801cacc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801cad0:	f7e3 fdba 	bl	8000648 <__aeabi_dmul>
 801cad4:	4602      	mov	r2, r0
 801cad6:	460b      	mov	r3, r1
 801cad8:	4650      	mov	r0, sl
 801cada:	4659      	mov	r1, fp
 801cadc:	f7e3 fbfe 	bl	80002dc <__adddf3>
 801cae0:	3601      	adds	r6, #1
 801cae2:	4682      	mov	sl, r0
 801cae4:	468b      	mov	fp, r1
 801cae6:	9b00      	ldr	r3, [sp, #0]
 801cae8:	429e      	cmp	r6, r3
 801caea:	dc01      	bgt.n	801caf0 <__kernel_rem_pio2+0x4c8>
 801caec:	42b5      	cmp	r5, r6
 801caee:	dae9      	bge.n	801cac4 <__kernel_rem_pio2+0x49c>
 801caf0:	ab48      	add	r3, sp, #288	@ 0x120
 801caf2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801caf6:	e9c5 ab00 	strd	sl, fp, [r5]
 801cafa:	3c01      	subs	r4, #1
 801cafc:	e6ff      	b.n	801c8fe <__kernel_rem_pio2+0x2d6>
 801cafe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801cb00:	2b02      	cmp	r3, #2
 801cb02:	dc0b      	bgt.n	801cb1c <__kernel_rem_pio2+0x4f4>
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	dc39      	bgt.n	801cb7c <__kernel_rem_pio2+0x554>
 801cb08:	d05d      	beq.n	801cbc6 <__kernel_rem_pio2+0x59e>
 801cb0a:	9b02      	ldr	r3, [sp, #8]
 801cb0c:	f003 0007 	and.w	r0, r3, #7
 801cb10:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801cb14:	ecbd 8b02 	vpop	{d8}
 801cb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb1c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801cb1e:	2b03      	cmp	r3, #3
 801cb20:	d1f3      	bne.n	801cb0a <__kernel_rem_pio2+0x4e2>
 801cb22:	9b05      	ldr	r3, [sp, #20]
 801cb24:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801cb28:	eb0d 0403 	add.w	r4, sp, r3
 801cb2c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801cb30:	4625      	mov	r5, r4
 801cb32:	46c2      	mov	sl, r8
 801cb34:	f1ba 0f00 	cmp.w	sl, #0
 801cb38:	f1a5 0508 	sub.w	r5, r5, #8
 801cb3c:	dc6b      	bgt.n	801cc16 <__kernel_rem_pio2+0x5ee>
 801cb3e:	4645      	mov	r5, r8
 801cb40:	2d01      	cmp	r5, #1
 801cb42:	f1a4 0408 	sub.w	r4, r4, #8
 801cb46:	f300 8087 	bgt.w	801cc58 <__kernel_rem_pio2+0x630>
 801cb4a:	9c05      	ldr	r4, [sp, #20]
 801cb4c:	ab48      	add	r3, sp, #288	@ 0x120
 801cb4e:	441c      	add	r4, r3
 801cb50:	2000      	movs	r0, #0
 801cb52:	2100      	movs	r1, #0
 801cb54:	f1b8 0f01 	cmp.w	r8, #1
 801cb58:	f300 809c 	bgt.w	801cc94 <__kernel_rem_pio2+0x66c>
 801cb5c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801cb60:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801cb64:	f1b9 0f00 	cmp.w	r9, #0
 801cb68:	f040 80a6 	bne.w	801ccb8 <__kernel_rem_pio2+0x690>
 801cb6c:	9b04      	ldr	r3, [sp, #16]
 801cb6e:	e9c3 7800 	strd	r7, r8, [r3]
 801cb72:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801cb76:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801cb7a:	e7c6      	b.n	801cb0a <__kernel_rem_pio2+0x4e2>
 801cb7c:	9d05      	ldr	r5, [sp, #20]
 801cb7e:	ab48      	add	r3, sp, #288	@ 0x120
 801cb80:	441d      	add	r5, r3
 801cb82:	4644      	mov	r4, r8
 801cb84:	2000      	movs	r0, #0
 801cb86:	2100      	movs	r1, #0
 801cb88:	2c00      	cmp	r4, #0
 801cb8a:	da35      	bge.n	801cbf8 <__kernel_rem_pio2+0x5d0>
 801cb8c:	f1b9 0f00 	cmp.w	r9, #0
 801cb90:	d038      	beq.n	801cc04 <__kernel_rem_pio2+0x5dc>
 801cb92:	4602      	mov	r2, r0
 801cb94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cb98:	9c04      	ldr	r4, [sp, #16]
 801cb9a:	e9c4 2300 	strd	r2, r3, [r4]
 801cb9e:	4602      	mov	r2, r0
 801cba0:	460b      	mov	r3, r1
 801cba2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801cba6:	f7e3 fb97 	bl	80002d8 <__aeabi_dsub>
 801cbaa:	ad4a      	add	r5, sp, #296	@ 0x128
 801cbac:	2401      	movs	r4, #1
 801cbae:	45a0      	cmp	r8, r4
 801cbb0:	da2b      	bge.n	801cc0a <__kernel_rem_pio2+0x5e2>
 801cbb2:	f1b9 0f00 	cmp.w	r9, #0
 801cbb6:	d002      	beq.n	801cbbe <__kernel_rem_pio2+0x596>
 801cbb8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cbbc:	4619      	mov	r1, r3
 801cbbe:	9b04      	ldr	r3, [sp, #16]
 801cbc0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801cbc4:	e7a1      	b.n	801cb0a <__kernel_rem_pio2+0x4e2>
 801cbc6:	9c05      	ldr	r4, [sp, #20]
 801cbc8:	ab48      	add	r3, sp, #288	@ 0x120
 801cbca:	441c      	add	r4, r3
 801cbcc:	2000      	movs	r0, #0
 801cbce:	2100      	movs	r1, #0
 801cbd0:	f1b8 0f00 	cmp.w	r8, #0
 801cbd4:	da09      	bge.n	801cbea <__kernel_rem_pio2+0x5c2>
 801cbd6:	f1b9 0f00 	cmp.w	r9, #0
 801cbda:	d002      	beq.n	801cbe2 <__kernel_rem_pio2+0x5ba>
 801cbdc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cbe0:	4619      	mov	r1, r3
 801cbe2:	9b04      	ldr	r3, [sp, #16]
 801cbe4:	e9c3 0100 	strd	r0, r1, [r3]
 801cbe8:	e78f      	b.n	801cb0a <__kernel_rem_pio2+0x4e2>
 801cbea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801cbee:	f7e3 fb75 	bl	80002dc <__adddf3>
 801cbf2:	f108 38ff 	add.w	r8, r8, #4294967295
 801cbf6:	e7eb      	b.n	801cbd0 <__kernel_rem_pio2+0x5a8>
 801cbf8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801cbfc:	f7e3 fb6e 	bl	80002dc <__adddf3>
 801cc00:	3c01      	subs	r4, #1
 801cc02:	e7c1      	b.n	801cb88 <__kernel_rem_pio2+0x560>
 801cc04:	4602      	mov	r2, r0
 801cc06:	460b      	mov	r3, r1
 801cc08:	e7c6      	b.n	801cb98 <__kernel_rem_pio2+0x570>
 801cc0a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801cc0e:	f7e3 fb65 	bl	80002dc <__adddf3>
 801cc12:	3401      	adds	r4, #1
 801cc14:	e7cb      	b.n	801cbae <__kernel_rem_pio2+0x586>
 801cc16:	ed95 7b00 	vldr	d7, [r5]
 801cc1a:	ed8d 7b00 	vstr	d7, [sp]
 801cc1e:	ed95 7b02 	vldr	d7, [r5, #8]
 801cc22:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cc26:	ec53 2b17 	vmov	r2, r3, d7
 801cc2a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801cc2e:	f7e3 fb55 	bl	80002dc <__adddf3>
 801cc32:	4602      	mov	r2, r0
 801cc34:	460b      	mov	r3, r1
 801cc36:	4606      	mov	r6, r0
 801cc38:	460f      	mov	r7, r1
 801cc3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cc3e:	f7e3 fb4b 	bl	80002d8 <__aeabi_dsub>
 801cc42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cc46:	f7e3 fb49 	bl	80002dc <__adddf3>
 801cc4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cc4e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801cc52:	e9c5 6700 	strd	r6, r7, [r5]
 801cc56:	e76d      	b.n	801cb34 <__kernel_rem_pio2+0x50c>
 801cc58:	ed94 7b00 	vldr	d7, [r4]
 801cc5c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801cc60:	ec51 0b17 	vmov	r0, r1, d7
 801cc64:	4652      	mov	r2, sl
 801cc66:	465b      	mov	r3, fp
 801cc68:	ed8d 7b00 	vstr	d7, [sp]
 801cc6c:	f7e3 fb36 	bl	80002dc <__adddf3>
 801cc70:	4602      	mov	r2, r0
 801cc72:	460b      	mov	r3, r1
 801cc74:	4606      	mov	r6, r0
 801cc76:	460f      	mov	r7, r1
 801cc78:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cc7c:	f7e3 fb2c 	bl	80002d8 <__aeabi_dsub>
 801cc80:	4652      	mov	r2, sl
 801cc82:	465b      	mov	r3, fp
 801cc84:	f7e3 fb2a 	bl	80002dc <__adddf3>
 801cc88:	3d01      	subs	r5, #1
 801cc8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801cc8e:	e9c4 6700 	strd	r6, r7, [r4]
 801cc92:	e755      	b.n	801cb40 <__kernel_rem_pio2+0x518>
 801cc94:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801cc98:	f7e3 fb20 	bl	80002dc <__adddf3>
 801cc9c:	f108 38ff 	add.w	r8, r8, #4294967295
 801cca0:	e758      	b.n	801cb54 <__kernel_rem_pio2+0x52c>
 801cca2:	bf00      	nop
 801cca4:	f3af 8000 	nop.w
	...
 801ccb0:	41700000 	.word	0x41700000
 801ccb4:	3e700000 	.word	0x3e700000
 801ccb8:	9b04      	ldr	r3, [sp, #16]
 801ccba:	9a04      	ldr	r2, [sp, #16]
 801ccbc:	601f      	str	r7, [r3, #0]
 801ccbe:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801ccc2:	605c      	str	r4, [r3, #4]
 801ccc4:	609d      	str	r5, [r3, #8]
 801ccc6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801ccca:	60d3      	str	r3, [r2, #12]
 801cccc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ccd0:	6110      	str	r0, [r2, #16]
 801ccd2:	6153      	str	r3, [r2, #20]
 801ccd4:	e719      	b.n	801cb0a <__kernel_rem_pio2+0x4e2>
 801ccd6:	bf00      	nop

0801ccd8 <scalbn>:
 801ccd8:	b570      	push	{r4, r5, r6, lr}
 801ccda:	ec55 4b10 	vmov	r4, r5, d0
 801ccde:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801cce2:	4606      	mov	r6, r0
 801cce4:	462b      	mov	r3, r5
 801cce6:	b991      	cbnz	r1, 801cd0e <scalbn+0x36>
 801cce8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801ccec:	4323      	orrs	r3, r4
 801ccee:	d03d      	beq.n	801cd6c <scalbn+0x94>
 801ccf0:	4b35      	ldr	r3, [pc, #212]	@ (801cdc8 <scalbn+0xf0>)
 801ccf2:	4620      	mov	r0, r4
 801ccf4:	4629      	mov	r1, r5
 801ccf6:	2200      	movs	r2, #0
 801ccf8:	f7e3 fca6 	bl	8000648 <__aeabi_dmul>
 801ccfc:	4b33      	ldr	r3, [pc, #204]	@ (801cdcc <scalbn+0xf4>)
 801ccfe:	429e      	cmp	r6, r3
 801cd00:	4604      	mov	r4, r0
 801cd02:	460d      	mov	r5, r1
 801cd04:	da0f      	bge.n	801cd26 <scalbn+0x4e>
 801cd06:	a328      	add	r3, pc, #160	@ (adr r3, 801cda8 <scalbn+0xd0>)
 801cd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd0c:	e01e      	b.n	801cd4c <scalbn+0x74>
 801cd0e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801cd12:	4291      	cmp	r1, r2
 801cd14:	d10b      	bne.n	801cd2e <scalbn+0x56>
 801cd16:	4622      	mov	r2, r4
 801cd18:	4620      	mov	r0, r4
 801cd1a:	4629      	mov	r1, r5
 801cd1c:	f7e3 fade 	bl	80002dc <__adddf3>
 801cd20:	4604      	mov	r4, r0
 801cd22:	460d      	mov	r5, r1
 801cd24:	e022      	b.n	801cd6c <scalbn+0x94>
 801cd26:	460b      	mov	r3, r1
 801cd28:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801cd2c:	3936      	subs	r1, #54	@ 0x36
 801cd2e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801cd32:	4296      	cmp	r6, r2
 801cd34:	dd0d      	ble.n	801cd52 <scalbn+0x7a>
 801cd36:	2d00      	cmp	r5, #0
 801cd38:	a11d      	add	r1, pc, #116	@ (adr r1, 801cdb0 <scalbn+0xd8>)
 801cd3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cd3e:	da02      	bge.n	801cd46 <scalbn+0x6e>
 801cd40:	a11d      	add	r1, pc, #116	@ (adr r1, 801cdb8 <scalbn+0xe0>)
 801cd42:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cd46:	a31a      	add	r3, pc, #104	@ (adr r3, 801cdb0 <scalbn+0xd8>)
 801cd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd4c:	f7e3 fc7c 	bl	8000648 <__aeabi_dmul>
 801cd50:	e7e6      	b.n	801cd20 <scalbn+0x48>
 801cd52:	1872      	adds	r2, r6, r1
 801cd54:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801cd58:	428a      	cmp	r2, r1
 801cd5a:	dcec      	bgt.n	801cd36 <scalbn+0x5e>
 801cd5c:	2a00      	cmp	r2, #0
 801cd5e:	dd08      	ble.n	801cd72 <scalbn+0x9a>
 801cd60:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801cd64:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801cd68:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801cd6c:	ec45 4b10 	vmov	d0, r4, r5
 801cd70:	bd70      	pop	{r4, r5, r6, pc}
 801cd72:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801cd76:	da08      	bge.n	801cd8a <scalbn+0xb2>
 801cd78:	2d00      	cmp	r5, #0
 801cd7a:	a10b      	add	r1, pc, #44	@ (adr r1, 801cda8 <scalbn+0xd0>)
 801cd7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cd80:	dac1      	bge.n	801cd06 <scalbn+0x2e>
 801cd82:	a10f      	add	r1, pc, #60	@ (adr r1, 801cdc0 <scalbn+0xe8>)
 801cd84:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cd88:	e7bd      	b.n	801cd06 <scalbn+0x2e>
 801cd8a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801cd8e:	3236      	adds	r2, #54	@ 0x36
 801cd90:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801cd94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801cd98:	4620      	mov	r0, r4
 801cd9a:	4b0d      	ldr	r3, [pc, #52]	@ (801cdd0 <scalbn+0xf8>)
 801cd9c:	4629      	mov	r1, r5
 801cd9e:	2200      	movs	r2, #0
 801cda0:	e7d4      	b.n	801cd4c <scalbn+0x74>
 801cda2:	bf00      	nop
 801cda4:	f3af 8000 	nop.w
 801cda8:	c2f8f359 	.word	0xc2f8f359
 801cdac:	01a56e1f 	.word	0x01a56e1f
 801cdb0:	8800759c 	.word	0x8800759c
 801cdb4:	7e37e43c 	.word	0x7e37e43c
 801cdb8:	8800759c 	.word	0x8800759c
 801cdbc:	fe37e43c 	.word	0xfe37e43c
 801cdc0:	c2f8f359 	.word	0xc2f8f359
 801cdc4:	81a56e1f 	.word	0x81a56e1f
 801cdc8:	43500000 	.word	0x43500000
 801cdcc:	ffff3cb0 	.word	0xffff3cb0
 801cdd0:	3c900000 	.word	0x3c900000
 801cdd4:	00000000 	.word	0x00000000

0801cdd8 <floor>:
 801cdd8:	ec51 0b10 	vmov	r0, r1, d0
 801cddc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801cde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cde4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801cde8:	2e13      	cmp	r6, #19
 801cdea:	460c      	mov	r4, r1
 801cdec:	4605      	mov	r5, r0
 801cdee:	4680      	mov	r8, r0
 801cdf0:	dc34      	bgt.n	801ce5c <floor+0x84>
 801cdf2:	2e00      	cmp	r6, #0
 801cdf4:	da17      	bge.n	801ce26 <floor+0x4e>
 801cdf6:	a332      	add	r3, pc, #200	@ (adr r3, 801cec0 <floor+0xe8>)
 801cdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdfc:	f7e3 fa6e 	bl	80002dc <__adddf3>
 801ce00:	2200      	movs	r2, #0
 801ce02:	2300      	movs	r3, #0
 801ce04:	f7e3 feb0 	bl	8000b68 <__aeabi_dcmpgt>
 801ce08:	b150      	cbz	r0, 801ce20 <floor+0x48>
 801ce0a:	2c00      	cmp	r4, #0
 801ce0c:	da55      	bge.n	801ceba <floor+0xe2>
 801ce0e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801ce12:	432c      	orrs	r4, r5
 801ce14:	2500      	movs	r5, #0
 801ce16:	42ac      	cmp	r4, r5
 801ce18:	4c2b      	ldr	r4, [pc, #172]	@ (801cec8 <floor+0xf0>)
 801ce1a:	bf08      	it	eq
 801ce1c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801ce20:	4621      	mov	r1, r4
 801ce22:	4628      	mov	r0, r5
 801ce24:	e023      	b.n	801ce6e <floor+0x96>
 801ce26:	4f29      	ldr	r7, [pc, #164]	@ (801cecc <floor+0xf4>)
 801ce28:	4137      	asrs	r7, r6
 801ce2a:	ea01 0307 	and.w	r3, r1, r7
 801ce2e:	4303      	orrs	r3, r0
 801ce30:	d01d      	beq.n	801ce6e <floor+0x96>
 801ce32:	a323      	add	r3, pc, #140	@ (adr r3, 801cec0 <floor+0xe8>)
 801ce34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce38:	f7e3 fa50 	bl	80002dc <__adddf3>
 801ce3c:	2200      	movs	r2, #0
 801ce3e:	2300      	movs	r3, #0
 801ce40:	f7e3 fe92 	bl	8000b68 <__aeabi_dcmpgt>
 801ce44:	2800      	cmp	r0, #0
 801ce46:	d0eb      	beq.n	801ce20 <floor+0x48>
 801ce48:	2c00      	cmp	r4, #0
 801ce4a:	bfbe      	ittt	lt
 801ce4c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801ce50:	4133      	asrlt	r3, r6
 801ce52:	18e4      	addlt	r4, r4, r3
 801ce54:	ea24 0407 	bic.w	r4, r4, r7
 801ce58:	2500      	movs	r5, #0
 801ce5a:	e7e1      	b.n	801ce20 <floor+0x48>
 801ce5c:	2e33      	cmp	r6, #51	@ 0x33
 801ce5e:	dd0a      	ble.n	801ce76 <floor+0x9e>
 801ce60:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801ce64:	d103      	bne.n	801ce6e <floor+0x96>
 801ce66:	4602      	mov	r2, r0
 801ce68:	460b      	mov	r3, r1
 801ce6a:	f7e3 fa37 	bl	80002dc <__adddf3>
 801ce6e:	ec41 0b10 	vmov	d0, r0, r1
 801ce72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce76:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801ce7a:	f04f 37ff 	mov.w	r7, #4294967295
 801ce7e:	40df      	lsrs	r7, r3
 801ce80:	4207      	tst	r7, r0
 801ce82:	d0f4      	beq.n	801ce6e <floor+0x96>
 801ce84:	a30e      	add	r3, pc, #56	@ (adr r3, 801cec0 <floor+0xe8>)
 801ce86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce8a:	f7e3 fa27 	bl	80002dc <__adddf3>
 801ce8e:	2200      	movs	r2, #0
 801ce90:	2300      	movs	r3, #0
 801ce92:	f7e3 fe69 	bl	8000b68 <__aeabi_dcmpgt>
 801ce96:	2800      	cmp	r0, #0
 801ce98:	d0c2      	beq.n	801ce20 <floor+0x48>
 801ce9a:	2c00      	cmp	r4, #0
 801ce9c:	da0a      	bge.n	801ceb4 <floor+0xdc>
 801ce9e:	2e14      	cmp	r6, #20
 801cea0:	d101      	bne.n	801cea6 <floor+0xce>
 801cea2:	3401      	adds	r4, #1
 801cea4:	e006      	b.n	801ceb4 <floor+0xdc>
 801cea6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801ceaa:	2301      	movs	r3, #1
 801ceac:	40b3      	lsls	r3, r6
 801ceae:	441d      	add	r5, r3
 801ceb0:	4545      	cmp	r5, r8
 801ceb2:	d3f6      	bcc.n	801cea2 <floor+0xca>
 801ceb4:	ea25 0507 	bic.w	r5, r5, r7
 801ceb8:	e7b2      	b.n	801ce20 <floor+0x48>
 801ceba:	2500      	movs	r5, #0
 801cebc:	462c      	mov	r4, r5
 801cebe:	e7af      	b.n	801ce20 <floor+0x48>
 801cec0:	8800759c 	.word	0x8800759c
 801cec4:	7e37e43c 	.word	0x7e37e43c
 801cec8:	bff00000 	.word	0xbff00000
 801cecc:	000fffff 	.word	0x000fffff

0801ced0 <__cvt>:
 801ced0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ced4:	ec57 6b10 	vmov	r6, r7, d0
 801ced8:	2f00      	cmp	r7, #0
 801ceda:	460c      	mov	r4, r1
 801cedc:	4619      	mov	r1, r3
 801cede:	463b      	mov	r3, r7
 801cee0:	bfbb      	ittet	lt
 801cee2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801cee6:	461f      	movlt	r7, r3
 801cee8:	2300      	movge	r3, #0
 801ceea:	232d      	movlt	r3, #45	@ 0x2d
 801ceec:	700b      	strb	r3, [r1, #0]
 801ceee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cef0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801cef4:	4691      	mov	r9, r2
 801cef6:	f023 0820 	bic.w	r8, r3, #32
 801cefa:	bfbc      	itt	lt
 801cefc:	4632      	movlt	r2, r6
 801cefe:	4616      	movlt	r6, r2
 801cf00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801cf04:	d005      	beq.n	801cf12 <__cvt+0x42>
 801cf06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801cf0a:	d100      	bne.n	801cf0e <__cvt+0x3e>
 801cf0c:	3401      	adds	r4, #1
 801cf0e:	2102      	movs	r1, #2
 801cf10:	e000      	b.n	801cf14 <__cvt+0x44>
 801cf12:	2103      	movs	r1, #3
 801cf14:	ab03      	add	r3, sp, #12
 801cf16:	9301      	str	r3, [sp, #4]
 801cf18:	ab02      	add	r3, sp, #8
 801cf1a:	9300      	str	r3, [sp, #0]
 801cf1c:	ec47 6b10 	vmov	d0, r6, r7
 801cf20:	4653      	mov	r3, sl
 801cf22:	4622      	mov	r2, r4
 801cf24:	f001 fa4c 	bl	801e3c0 <_dtoa_r>
 801cf28:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801cf2c:	4605      	mov	r5, r0
 801cf2e:	d119      	bne.n	801cf64 <__cvt+0x94>
 801cf30:	f019 0f01 	tst.w	r9, #1
 801cf34:	d00e      	beq.n	801cf54 <__cvt+0x84>
 801cf36:	eb00 0904 	add.w	r9, r0, r4
 801cf3a:	2200      	movs	r2, #0
 801cf3c:	2300      	movs	r3, #0
 801cf3e:	4630      	mov	r0, r6
 801cf40:	4639      	mov	r1, r7
 801cf42:	f7e3 fde9 	bl	8000b18 <__aeabi_dcmpeq>
 801cf46:	b108      	cbz	r0, 801cf4c <__cvt+0x7c>
 801cf48:	f8cd 900c 	str.w	r9, [sp, #12]
 801cf4c:	2230      	movs	r2, #48	@ 0x30
 801cf4e:	9b03      	ldr	r3, [sp, #12]
 801cf50:	454b      	cmp	r3, r9
 801cf52:	d31e      	bcc.n	801cf92 <__cvt+0xc2>
 801cf54:	9b03      	ldr	r3, [sp, #12]
 801cf56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cf58:	1b5b      	subs	r3, r3, r5
 801cf5a:	4628      	mov	r0, r5
 801cf5c:	6013      	str	r3, [r2, #0]
 801cf5e:	b004      	add	sp, #16
 801cf60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801cf68:	eb00 0904 	add.w	r9, r0, r4
 801cf6c:	d1e5      	bne.n	801cf3a <__cvt+0x6a>
 801cf6e:	7803      	ldrb	r3, [r0, #0]
 801cf70:	2b30      	cmp	r3, #48	@ 0x30
 801cf72:	d10a      	bne.n	801cf8a <__cvt+0xba>
 801cf74:	2200      	movs	r2, #0
 801cf76:	2300      	movs	r3, #0
 801cf78:	4630      	mov	r0, r6
 801cf7a:	4639      	mov	r1, r7
 801cf7c:	f7e3 fdcc 	bl	8000b18 <__aeabi_dcmpeq>
 801cf80:	b918      	cbnz	r0, 801cf8a <__cvt+0xba>
 801cf82:	f1c4 0401 	rsb	r4, r4, #1
 801cf86:	f8ca 4000 	str.w	r4, [sl]
 801cf8a:	f8da 3000 	ldr.w	r3, [sl]
 801cf8e:	4499      	add	r9, r3
 801cf90:	e7d3      	b.n	801cf3a <__cvt+0x6a>
 801cf92:	1c59      	adds	r1, r3, #1
 801cf94:	9103      	str	r1, [sp, #12]
 801cf96:	701a      	strb	r2, [r3, #0]
 801cf98:	e7d9      	b.n	801cf4e <__cvt+0x7e>

0801cf9a <__exponent>:
 801cf9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cf9c:	2900      	cmp	r1, #0
 801cf9e:	bfba      	itte	lt
 801cfa0:	4249      	neglt	r1, r1
 801cfa2:	232d      	movlt	r3, #45	@ 0x2d
 801cfa4:	232b      	movge	r3, #43	@ 0x2b
 801cfa6:	2909      	cmp	r1, #9
 801cfa8:	7002      	strb	r2, [r0, #0]
 801cfaa:	7043      	strb	r3, [r0, #1]
 801cfac:	dd29      	ble.n	801d002 <__exponent+0x68>
 801cfae:	f10d 0307 	add.w	r3, sp, #7
 801cfb2:	461d      	mov	r5, r3
 801cfb4:	270a      	movs	r7, #10
 801cfb6:	461a      	mov	r2, r3
 801cfb8:	fbb1 f6f7 	udiv	r6, r1, r7
 801cfbc:	fb07 1416 	mls	r4, r7, r6, r1
 801cfc0:	3430      	adds	r4, #48	@ 0x30
 801cfc2:	f802 4c01 	strb.w	r4, [r2, #-1]
 801cfc6:	460c      	mov	r4, r1
 801cfc8:	2c63      	cmp	r4, #99	@ 0x63
 801cfca:	f103 33ff 	add.w	r3, r3, #4294967295
 801cfce:	4631      	mov	r1, r6
 801cfd0:	dcf1      	bgt.n	801cfb6 <__exponent+0x1c>
 801cfd2:	3130      	adds	r1, #48	@ 0x30
 801cfd4:	1e94      	subs	r4, r2, #2
 801cfd6:	f803 1c01 	strb.w	r1, [r3, #-1]
 801cfda:	1c41      	adds	r1, r0, #1
 801cfdc:	4623      	mov	r3, r4
 801cfde:	42ab      	cmp	r3, r5
 801cfe0:	d30a      	bcc.n	801cff8 <__exponent+0x5e>
 801cfe2:	f10d 0309 	add.w	r3, sp, #9
 801cfe6:	1a9b      	subs	r3, r3, r2
 801cfe8:	42ac      	cmp	r4, r5
 801cfea:	bf88      	it	hi
 801cfec:	2300      	movhi	r3, #0
 801cfee:	3302      	adds	r3, #2
 801cff0:	4403      	add	r3, r0
 801cff2:	1a18      	subs	r0, r3, r0
 801cff4:	b003      	add	sp, #12
 801cff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cff8:	f813 6b01 	ldrb.w	r6, [r3], #1
 801cffc:	f801 6f01 	strb.w	r6, [r1, #1]!
 801d000:	e7ed      	b.n	801cfde <__exponent+0x44>
 801d002:	2330      	movs	r3, #48	@ 0x30
 801d004:	3130      	adds	r1, #48	@ 0x30
 801d006:	7083      	strb	r3, [r0, #2]
 801d008:	70c1      	strb	r1, [r0, #3]
 801d00a:	1d03      	adds	r3, r0, #4
 801d00c:	e7f1      	b.n	801cff2 <__exponent+0x58>
	...

0801d010 <_printf_float>:
 801d010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d014:	b08d      	sub	sp, #52	@ 0x34
 801d016:	460c      	mov	r4, r1
 801d018:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801d01c:	4616      	mov	r6, r2
 801d01e:	461f      	mov	r7, r3
 801d020:	4605      	mov	r5, r0
 801d022:	f001 f8b7 	bl	801e194 <_localeconv_r>
 801d026:	6803      	ldr	r3, [r0, #0]
 801d028:	9304      	str	r3, [sp, #16]
 801d02a:	4618      	mov	r0, r3
 801d02c:	f7e3 f948 	bl	80002c0 <strlen>
 801d030:	2300      	movs	r3, #0
 801d032:	930a      	str	r3, [sp, #40]	@ 0x28
 801d034:	f8d8 3000 	ldr.w	r3, [r8]
 801d038:	9005      	str	r0, [sp, #20]
 801d03a:	3307      	adds	r3, #7
 801d03c:	f023 0307 	bic.w	r3, r3, #7
 801d040:	f103 0208 	add.w	r2, r3, #8
 801d044:	f894 a018 	ldrb.w	sl, [r4, #24]
 801d048:	f8d4 b000 	ldr.w	fp, [r4]
 801d04c:	f8c8 2000 	str.w	r2, [r8]
 801d050:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d054:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801d058:	9307      	str	r3, [sp, #28]
 801d05a:	f8cd 8018 	str.w	r8, [sp, #24]
 801d05e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801d062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d066:	4b9c      	ldr	r3, [pc, #624]	@ (801d2d8 <_printf_float+0x2c8>)
 801d068:	f04f 32ff 	mov.w	r2, #4294967295
 801d06c:	f7e3 fd86 	bl	8000b7c <__aeabi_dcmpun>
 801d070:	bb70      	cbnz	r0, 801d0d0 <_printf_float+0xc0>
 801d072:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d076:	4b98      	ldr	r3, [pc, #608]	@ (801d2d8 <_printf_float+0x2c8>)
 801d078:	f04f 32ff 	mov.w	r2, #4294967295
 801d07c:	f7e3 fd60 	bl	8000b40 <__aeabi_dcmple>
 801d080:	bb30      	cbnz	r0, 801d0d0 <_printf_float+0xc0>
 801d082:	2200      	movs	r2, #0
 801d084:	2300      	movs	r3, #0
 801d086:	4640      	mov	r0, r8
 801d088:	4649      	mov	r1, r9
 801d08a:	f7e3 fd4f 	bl	8000b2c <__aeabi_dcmplt>
 801d08e:	b110      	cbz	r0, 801d096 <_printf_float+0x86>
 801d090:	232d      	movs	r3, #45	@ 0x2d
 801d092:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d096:	4a91      	ldr	r2, [pc, #580]	@ (801d2dc <_printf_float+0x2cc>)
 801d098:	4b91      	ldr	r3, [pc, #580]	@ (801d2e0 <_printf_float+0x2d0>)
 801d09a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801d09e:	bf94      	ite	ls
 801d0a0:	4690      	movls	r8, r2
 801d0a2:	4698      	movhi	r8, r3
 801d0a4:	2303      	movs	r3, #3
 801d0a6:	6123      	str	r3, [r4, #16]
 801d0a8:	f02b 0304 	bic.w	r3, fp, #4
 801d0ac:	6023      	str	r3, [r4, #0]
 801d0ae:	f04f 0900 	mov.w	r9, #0
 801d0b2:	9700      	str	r7, [sp, #0]
 801d0b4:	4633      	mov	r3, r6
 801d0b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 801d0b8:	4621      	mov	r1, r4
 801d0ba:	4628      	mov	r0, r5
 801d0bc:	f000 f9d2 	bl	801d464 <_printf_common>
 801d0c0:	3001      	adds	r0, #1
 801d0c2:	f040 808d 	bne.w	801d1e0 <_printf_float+0x1d0>
 801d0c6:	f04f 30ff 	mov.w	r0, #4294967295
 801d0ca:	b00d      	add	sp, #52	@ 0x34
 801d0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0d0:	4642      	mov	r2, r8
 801d0d2:	464b      	mov	r3, r9
 801d0d4:	4640      	mov	r0, r8
 801d0d6:	4649      	mov	r1, r9
 801d0d8:	f7e3 fd50 	bl	8000b7c <__aeabi_dcmpun>
 801d0dc:	b140      	cbz	r0, 801d0f0 <_printf_float+0xe0>
 801d0de:	464b      	mov	r3, r9
 801d0e0:	2b00      	cmp	r3, #0
 801d0e2:	bfbc      	itt	lt
 801d0e4:	232d      	movlt	r3, #45	@ 0x2d
 801d0e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801d0ea:	4a7e      	ldr	r2, [pc, #504]	@ (801d2e4 <_printf_float+0x2d4>)
 801d0ec:	4b7e      	ldr	r3, [pc, #504]	@ (801d2e8 <_printf_float+0x2d8>)
 801d0ee:	e7d4      	b.n	801d09a <_printf_float+0x8a>
 801d0f0:	6863      	ldr	r3, [r4, #4]
 801d0f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801d0f6:	9206      	str	r2, [sp, #24]
 801d0f8:	1c5a      	adds	r2, r3, #1
 801d0fa:	d13b      	bne.n	801d174 <_printf_float+0x164>
 801d0fc:	2306      	movs	r3, #6
 801d0fe:	6063      	str	r3, [r4, #4]
 801d100:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801d104:	2300      	movs	r3, #0
 801d106:	6022      	str	r2, [r4, #0]
 801d108:	9303      	str	r3, [sp, #12]
 801d10a:	ab0a      	add	r3, sp, #40	@ 0x28
 801d10c:	e9cd a301 	strd	sl, r3, [sp, #4]
 801d110:	ab09      	add	r3, sp, #36	@ 0x24
 801d112:	9300      	str	r3, [sp, #0]
 801d114:	6861      	ldr	r1, [r4, #4]
 801d116:	ec49 8b10 	vmov	d0, r8, r9
 801d11a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801d11e:	4628      	mov	r0, r5
 801d120:	f7ff fed6 	bl	801ced0 <__cvt>
 801d124:	9b06      	ldr	r3, [sp, #24]
 801d126:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d128:	2b47      	cmp	r3, #71	@ 0x47
 801d12a:	4680      	mov	r8, r0
 801d12c:	d129      	bne.n	801d182 <_printf_float+0x172>
 801d12e:	1cc8      	adds	r0, r1, #3
 801d130:	db02      	blt.n	801d138 <_printf_float+0x128>
 801d132:	6863      	ldr	r3, [r4, #4]
 801d134:	4299      	cmp	r1, r3
 801d136:	dd41      	ble.n	801d1bc <_printf_float+0x1ac>
 801d138:	f1aa 0a02 	sub.w	sl, sl, #2
 801d13c:	fa5f fa8a 	uxtb.w	sl, sl
 801d140:	3901      	subs	r1, #1
 801d142:	4652      	mov	r2, sl
 801d144:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801d148:	9109      	str	r1, [sp, #36]	@ 0x24
 801d14a:	f7ff ff26 	bl	801cf9a <__exponent>
 801d14e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d150:	1813      	adds	r3, r2, r0
 801d152:	2a01      	cmp	r2, #1
 801d154:	4681      	mov	r9, r0
 801d156:	6123      	str	r3, [r4, #16]
 801d158:	dc02      	bgt.n	801d160 <_printf_float+0x150>
 801d15a:	6822      	ldr	r2, [r4, #0]
 801d15c:	07d2      	lsls	r2, r2, #31
 801d15e:	d501      	bpl.n	801d164 <_printf_float+0x154>
 801d160:	3301      	adds	r3, #1
 801d162:	6123      	str	r3, [r4, #16]
 801d164:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801d168:	2b00      	cmp	r3, #0
 801d16a:	d0a2      	beq.n	801d0b2 <_printf_float+0xa2>
 801d16c:	232d      	movs	r3, #45	@ 0x2d
 801d16e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d172:	e79e      	b.n	801d0b2 <_printf_float+0xa2>
 801d174:	9a06      	ldr	r2, [sp, #24]
 801d176:	2a47      	cmp	r2, #71	@ 0x47
 801d178:	d1c2      	bne.n	801d100 <_printf_float+0xf0>
 801d17a:	2b00      	cmp	r3, #0
 801d17c:	d1c0      	bne.n	801d100 <_printf_float+0xf0>
 801d17e:	2301      	movs	r3, #1
 801d180:	e7bd      	b.n	801d0fe <_printf_float+0xee>
 801d182:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d186:	d9db      	bls.n	801d140 <_printf_float+0x130>
 801d188:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801d18c:	d118      	bne.n	801d1c0 <_printf_float+0x1b0>
 801d18e:	2900      	cmp	r1, #0
 801d190:	6863      	ldr	r3, [r4, #4]
 801d192:	dd0b      	ble.n	801d1ac <_printf_float+0x19c>
 801d194:	6121      	str	r1, [r4, #16]
 801d196:	b913      	cbnz	r3, 801d19e <_printf_float+0x18e>
 801d198:	6822      	ldr	r2, [r4, #0]
 801d19a:	07d0      	lsls	r0, r2, #31
 801d19c:	d502      	bpl.n	801d1a4 <_printf_float+0x194>
 801d19e:	3301      	adds	r3, #1
 801d1a0:	440b      	add	r3, r1
 801d1a2:	6123      	str	r3, [r4, #16]
 801d1a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 801d1a6:	f04f 0900 	mov.w	r9, #0
 801d1aa:	e7db      	b.n	801d164 <_printf_float+0x154>
 801d1ac:	b913      	cbnz	r3, 801d1b4 <_printf_float+0x1a4>
 801d1ae:	6822      	ldr	r2, [r4, #0]
 801d1b0:	07d2      	lsls	r2, r2, #31
 801d1b2:	d501      	bpl.n	801d1b8 <_printf_float+0x1a8>
 801d1b4:	3302      	adds	r3, #2
 801d1b6:	e7f4      	b.n	801d1a2 <_printf_float+0x192>
 801d1b8:	2301      	movs	r3, #1
 801d1ba:	e7f2      	b.n	801d1a2 <_printf_float+0x192>
 801d1bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801d1c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d1c2:	4299      	cmp	r1, r3
 801d1c4:	db05      	blt.n	801d1d2 <_printf_float+0x1c2>
 801d1c6:	6823      	ldr	r3, [r4, #0]
 801d1c8:	6121      	str	r1, [r4, #16]
 801d1ca:	07d8      	lsls	r0, r3, #31
 801d1cc:	d5ea      	bpl.n	801d1a4 <_printf_float+0x194>
 801d1ce:	1c4b      	adds	r3, r1, #1
 801d1d0:	e7e7      	b.n	801d1a2 <_printf_float+0x192>
 801d1d2:	2900      	cmp	r1, #0
 801d1d4:	bfd4      	ite	le
 801d1d6:	f1c1 0202 	rsble	r2, r1, #2
 801d1da:	2201      	movgt	r2, #1
 801d1dc:	4413      	add	r3, r2
 801d1de:	e7e0      	b.n	801d1a2 <_printf_float+0x192>
 801d1e0:	6823      	ldr	r3, [r4, #0]
 801d1e2:	055a      	lsls	r2, r3, #21
 801d1e4:	d407      	bmi.n	801d1f6 <_printf_float+0x1e6>
 801d1e6:	6923      	ldr	r3, [r4, #16]
 801d1e8:	4642      	mov	r2, r8
 801d1ea:	4631      	mov	r1, r6
 801d1ec:	4628      	mov	r0, r5
 801d1ee:	47b8      	blx	r7
 801d1f0:	3001      	adds	r0, #1
 801d1f2:	d12b      	bne.n	801d24c <_printf_float+0x23c>
 801d1f4:	e767      	b.n	801d0c6 <_printf_float+0xb6>
 801d1f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d1fa:	f240 80dd 	bls.w	801d3b8 <_printf_float+0x3a8>
 801d1fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d202:	2200      	movs	r2, #0
 801d204:	2300      	movs	r3, #0
 801d206:	f7e3 fc87 	bl	8000b18 <__aeabi_dcmpeq>
 801d20a:	2800      	cmp	r0, #0
 801d20c:	d033      	beq.n	801d276 <_printf_float+0x266>
 801d20e:	4a37      	ldr	r2, [pc, #220]	@ (801d2ec <_printf_float+0x2dc>)
 801d210:	2301      	movs	r3, #1
 801d212:	4631      	mov	r1, r6
 801d214:	4628      	mov	r0, r5
 801d216:	47b8      	blx	r7
 801d218:	3001      	adds	r0, #1
 801d21a:	f43f af54 	beq.w	801d0c6 <_printf_float+0xb6>
 801d21e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801d222:	4543      	cmp	r3, r8
 801d224:	db02      	blt.n	801d22c <_printf_float+0x21c>
 801d226:	6823      	ldr	r3, [r4, #0]
 801d228:	07d8      	lsls	r0, r3, #31
 801d22a:	d50f      	bpl.n	801d24c <_printf_float+0x23c>
 801d22c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d230:	4631      	mov	r1, r6
 801d232:	4628      	mov	r0, r5
 801d234:	47b8      	blx	r7
 801d236:	3001      	adds	r0, #1
 801d238:	f43f af45 	beq.w	801d0c6 <_printf_float+0xb6>
 801d23c:	f04f 0900 	mov.w	r9, #0
 801d240:	f108 38ff 	add.w	r8, r8, #4294967295
 801d244:	f104 0a1a 	add.w	sl, r4, #26
 801d248:	45c8      	cmp	r8, r9
 801d24a:	dc09      	bgt.n	801d260 <_printf_float+0x250>
 801d24c:	6823      	ldr	r3, [r4, #0]
 801d24e:	079b      	lsls	r3, r3, #30
 801d250:	f100 8103 	bmi.w	801d45a <_printf_float+0x44a>
 801d254:	68e0      	ldr	r0, [r4, #12]
 801d256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d258:	4298      	cmp	r0, r3
 801d25a:	bfb8      	it	lt
 801d25c:	4618      	movlt	r0, r3
 801d25e:	e734      	b.n	801d0ca <_printf_float+0xba>
 801d260:	2301      	movs	r3, #1
 801d262:	4652      	mov	r2, sl
 801d264:	4631      	mov	r1, r6
 801d266:	4628      	mov	r0, r5
 801d268:	47b8      	blx	r7
 801d26a:	3001      	adds	r0, #1
 801d26c:	f43f af2b 	beq.w	801d0c6 <_printf_float+0xb6>
 801d270:	f109 0901 	add.w	r9, r9, #1
 801d274:	e7e8      	b.n	801d248 <_printf_float+0x238>
 801d276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d278:	2b00      	cmp	r3, #0
 801d27a:	dc39      	bgt.n	801d2f0 <_printf_float+0x2e0>
 801d27c:	4a1b      	ldr	r2, [pc, #108]	@ (801d2ec <_printf_float+0x2dc>)
 801d27e:	2301      	movs	r3, #1
 801d280:	4631      	mov	r1, r6
 801d282:	4628      	mov	r0, r5
 801d284:	47b8      	blx	r7
 801d286:	3001      	adds	r0, #1
 801d288:	f43f af1d 	beq.w	801d0c6 <_printf_float+0xb6>
 801d28c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801d290:	ea59 0303 	orrs.w	r3, r9, r3
 801d294:	d102      	bne.n	801d29c <_printf_float+0x28c>
 801d296:	6823      	ldr	r3, [r4, #0]
 801d298:	07d9      	lsls	r1, r3, #31
 801d29a:	d5d7      	bpl.n	801d24c <_printf_float+0x23c>
 801d29c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d2a0:	4631      	mov	r1, r6
 801d2a2:	4628      	mov	r0, r5
 801d2a4:	47b8      	blx	r7
 801d2a6:	3001      	adds	r0, #1
 801d2a8:	f43f af0d 	beq.w	801d0c6 <_printf_float+0xb6>
 801d2ac:	f04f 0a00 	mov.w	sl, #0
 801d2b0:	f104 0b1a 	add.w	fp, r4, #26
 801d2b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d2b6:	425b      	negs	r3, r3
 801d2b8:	4553      	cmp	r3, sl
 801d2ba:	dc01      	bgt.n	801d2c0 <_printf_float+0x2b0>
 801d2bc:	464b      	mov	r3, r9
 801d2be:	e793      	b.n	801d1e8 <_printf_float+0x1d8>
 801d2c0:	2301      	movs	r3, #1
 801d2c2:	465a      	mov	r2, fp
 801d2c4:	4631      	mov	r1, r6
 801d2c6:	4628      	mov	r0, r5
 801d2c8:	47b8      	blx	r7
 801d2ca:	3001      	adds	r0, #1
 801d2cc:	f43f aefb 	beq.w	801d0c6 <_printf_float+0xb6>
 801d2d0:	f10a 0a01 	add.w	sl, sl, #1
 801d2d4:	e7ee      	b.n	801d2b4 <_printf_float+0x2a4>
 801d2d6:	bf00      	nop
 801d2d8:	7fefffff 	.word	0x7fefffff
 801d2dc:	08022778 	.word	0x08022778
 801d2e0:	0802277c 	.word	0x0802277c
 801d2e4:	08022780 	.word	0x08022780
 801d2e8:	08022784 	.word	0x08022784
 801d2ec:	08022788 	.word	0x08022788
 801d2f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d2f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d2f6:	4553      	cmp	r3, sl
 801d2f8:	bfa8      	it	ge
 801d2fa:	4653      	movge	r3, sl
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	4699      	mov	r9, r3
 801d300:	dc36      	bgt.n	801d370 <_printf_float+0x360>
 801d302:	f04f 0b00 	mov.w	fp, #0
 801d306:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d30a:	f104 021a 	add.w	r2, r4, #26
 801d30e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d310:	9306      	str	r3, [sp, #24]
 801d312:	eba3 0309 	sub.w	r3, r3, r9
 801d316:	455b      	cmp	r3, fp
 801d318:	dc31      	bgt.n	801d37e <_printf_float+0x36e>
 801d31a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d31c:	459a      	cmp	sl, r3
 801d31e:	dc3a      	bgt.n	801d396 <_printf_float+0x386>
 801d320:	6823      	ldr	r3, [r4, #0]
 801d322:	07da      	lsls	r2, r3, #31
 801d324:	d437      	bmi.n	801d396 <_printf_float+0x386>
 801d326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d328:	ebaa 0903 	sub.w	r9, sl, r3
 801d32c:	9b06      	ldr	r3, [sp, #24]
 801d32e:	ebaa 0303 	sub.w	r3, sl, r3
 801d332:	4599      	cmp	r9, r3
 801d334:	bfa8      	it	ge
 801d336:	4699      	movge	r9, r3
 801d338:	f1b9 0f00 	cmp.w	r9, #0
 801d33c:	dc33      	bgt.n	801d3a6 <_printf_float+0x396>
 801d33e:	f04f 0800 	mov.w	r8, #0
 801d342:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d346:	f104 0b1a 	add.w	fp, r4, #26
 801d34a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d34c:	ebaa 0303 	sub.w	r3, sl, r3
 801d350:	eba3 0309 	sub.w	r3, r3, r9
 801d354:	4543      	cmp	r3, r8
 801d356:	f77f af79 	ble.w	801d24c <_printf_float+0x23c>
 801d35a:	2301      	movs	r3, #1
 801d35c:	465a      	mov	r2, fp
 801d35e:	4631      	mov	r1, r6
 801d360:	4628      	mov	r0, r5
 801d362:	47b8      	blx	r7
 801d364:	3001      	adds	r0, #1
 801d366:	f43f aeae 	beq.w	801d0c6 <_printf_float+0xb6>
 801d36a:	f108 0801 	add.w	r8, r8, #1
 801d36e:	e7ec      	b.n	801d34a <_printf_float+0x33a>
 801d370:	4642      	mov	r2, r8
 801d372:	4631      	mov	r1, r6
 801d374:	4628      	mov	r0, r5
 801d376:	47b8      	blx	r7
 801d378:	3001      	adds	r0, #1
 801d37a:	d1c2      	bne.n	801d302 <_printf_float+0x2f2>
 801d37c:	e6a3      	b.n	801d0c6 <_printf_float+0xb6>
 801d37e:	2301      	movs	r3, #1
 801d380:	4631      	mov	r1, r6
 801d382:	4628      	mov	r0, r5
 801d384:	9206      	str	r2, [sp, #24]
 801d386:	47b8      	blx	r7
 801d388:	3001      	adds	r0, #1
 801d38a:	f43f ae9c 	beq.w	801d0c6 <_printf_float+0xb6>
 801d38e:	9a06      	ldr	r2, [sp, #24]
 801d390:	f10b 0b01 	add.w	fp, fp, #1
 801d394:	e7bb      	b.n	801d30e <_printf_float+0x2fe>
 801d396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d39a:	4631      	mov	r1, r6
 801d39c:	4628      	mov	r0, r5
 801d39e:	47b8      	blx	r7
 801d3a0:	3001      	adds	r0, #1
 801d3a2:	d1c0      	bne.n	801d326 <_printf_float+0x316>
 801d3a4:	e68f      	b.n	801d0c6 <_printf_float+0xb6>
 801d3a6:	9a06      	ldr	r2, [sp, #24]
 801d3a8:	464b      	mov	r3, r9
 801d3aa:	4442      	add	r2, r8
 801d3ac:	4631      	mov	r1, r6
 801d3ae:	4628      	mov	r0, r5
 801d3b0:	47b8      	blx	r7
 801d3b2:	3001      	adds	r0, #1
 801d3b4:	d1c3      	bne.n	801d33e <_printf_float+0x32e>
 801d3b6:	e686      	b.n	801d0c6 <_printf_float+0xb6>
 801d3b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d3bc:	f1ba 0f01 	cmp.w	sl, #1
 801d3c0:	dc01      	bgt.n	801d3c6 <_printf_float+0x3b6>
 801d3c2:	07db      	lsls	r3, r3, #31
 801d3c4:	d536      	bpl.n	801d434 <_printf_float+0x424>
 801d3c6:	2301      	movs	r3, #1
 801d3c8:	4642      	mov	r2, r8
 801d3ca:	4631      	mov	r1, r6
 801d3cc:	4628      	mov	r0, r5
 801d3ce:	47b8      	blx	r7
 801d3d0:	3001      	adds	r0, #1
 801d3d2:	f43f ae78 	beq.w	801d0c6 <_printf_float+0xb6>
 801d3d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d3da:	4631      	mov	r1, r6
 801d3dc:	4628      	mov	r0, r5
 801d3de:	47b8      	blx	r7
 801d3e0:	3001      	adds	r0, #1
 801d3e2:	f43f ae70 	beq.w	801d0c6 <_printf_float+0xb6>
 801d3e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d3ea:	2200      	movs	r2, #0
 801d3ec:	2300      	movs	r3, #0
 801d3ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d3f2:	f7e3 fb91 	bl	8000b18 <__aeabi_dcmpeq>
 801d3f6:	b9c0      	cbnz	r0, 801d42a <_printf_float+0x41a>
 801d3f8:	4653      	mov	r3, sl
 801d3fa:	f108 0201 	add.w	r2, r8, #1
 801d3fe:	4631      	mov	r1, r6
 801d400:	4628      	mov	r0, r5
 801d402:	47b8      	blx	r7
 801d404:	3001      	adds	r0, #1
 801d406:	d10c      	bne.n	801d422 <_printf_float+0x412>
 801d408:	e65d      	b.n	801d0c6 <_printf_float+0xb6>
 801d40a:	2301      	movs	r3, #1
 801d40c:	465a      	mov	r2, fp
 801d40e:	4631      	mov	r1, r6
 801d410:	4628      	mov	r0, r5
 801d412:	47b8      	blx	r7
 801d414:	3001      	adds	r0, #1
 801d416:	f43f ae56 	beq.w	801d0c6 <_printf_float+0xb6>
 801d41a:	f108 0801 	add.w	r8, r8, #1
 801d41e:	45d0      	cmp	r8, sl
 801d420:	dbf3      	blt.n	801d40a <_printf_float+0x3fa>
 801d422:	464b      	mov	r3, r9
 801d424:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801d428:	e6df      	b.n	801d1ea <_printf_float+0x1da>
 801d42a:	f04f 0800 	mov.w	r8, #0
 801d42e:	f104 0b1a 	add.w	fp, r4, #26
 801d432:	e7f4      	b.n	801d41e <_printf_float+0x40e>
 801d434:	2301      	movs	r3, #1
 801d436:	4642      	mov	r2, r8
 801d438:	e7e1      	b.n	801d3fe <_printf_float+0x3ee>
 801d43a:	2301      	movs	r3, #1
 801d43c:	464a      	mov	r2, r9
 801d43e:	4631      	mov	r1, r6
 801d440:	4628      	mov	r0, r5
 801d442:	47b8      	blx	r7
 801d444:	3001      	adds	r0, #1
 801d446:	f43f ae3e 	beq.w	801d0c6 <_printf_float+0xb6>
 801d44a:	f108 0801 	add.w	r8, r8, #1
 801d44e:	68e3      	ldr	r3, [r4, #12]
 801d450:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d452:	1a5b      	subs	r3, r3, r1
 801d454:	4543      	cmp	r3, r8
 801d456:	dcf0      	bgt.n	801d43a <_printf_float+0x42a>
 801d458:	e6fc      	b.n	801d254 <_printf_float+0x244>
 801d45a:	f04f 0800 	mov.w	r8, #0
 801d45e:	f104 0919 	add.w	r9, r4, #25
 801d462:	e7f4      	b.n	801d44e <_printf_float+0x43e>

0801d464 <_printf_common>:
 801d464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d468:	4616      	mov	r6, r2
 801d46a:	4698      	mov	r8, r3
 801d46c:	688a      	ldr	r2, [r1, #8]
 801d46e:	690b      	ldr	r3, [r1, #16]
 801d470:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d474:	4293      	cmp	r3, r2
 801d476:	bfb8      	it	lt
 801d478:	4613      	movlt	r3, r2
 801d47a:	6033      	str	r3, [r6, #0]
 801d47c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d480:	4607      	mov	r7, r0
 801d482:	460c      	mov	r4, r1
 801d484:	b10a      	cbz	r2, 801d48a <_printf_common+0x26>
 801d486:	3301      	adds	r3, #1
 801d488:	6033      	str	r3, [r6, #0]
 801d48a:	6823      	ldr	r3, [r4, #0]
 801d48c:	0699      	lsls	r1, r3, #26
 801d48e:	bf42      	ittt	mi
 801d490:	6833      	ldrmi	r3, [r6, #0]
 801d492:	3302      	addmi	r3, #2
 801d494:	6033      	strmi	r3, [r6, #0]
 801d496:	6825      	ldr	r5, [r4, #0]
 801d498:	f015 0506 	ands.w	r5, r5, #6
 801d49c:	d106      	bne.n	801d4ac <_printf_common+0x48>
 801d49e:	f104 0a19 	add.w	sl, r4, #25
 801d4a2:	68e3      	ldr	r3, [r4, #12]
 801d4a4:	6832      	ldr	r2, [r6, #0]
 801d4a6:	1a9b      	subs	r3, r3, r2
 801d4a8:	42ab      	cmp	r3, r5
 801d4aa:	dc26      	bgt.n	801d4fa <_printf_common+0x96>
 801d4ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d4b0:	6822      	ldr	r2, [r4, #0]
 801d4b2:	3b00      	subs	r3, #0
 801d4b4:	bf18      	it	ne
 801d4b6:	2301      	movne	r3, #1
 801d4b8:	0692      	lsls	r2, r2, #26
 801d4ba:	d42b      	bmi.n	801d514 <_printf_common+0xb0>
 801d4bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d4c0:	4641      	mov	r1, r8
 801d4c2:	4638      	mov	r0, r7
 801d4c4:	47c8      	blx	r9
 801d4c6:	3001      	adds	r0, #1
 801d4c8:	d01e      	beq.n	801d508 <_printf_common+0xa4>
 801d4ca:	6823      	ldr	r3, [r4, #0]
 801d4cc:	6922      	ldr	r2, [r4, #16]
 801d4ce:	f003 0306 	and.w	r3, r3, #6
 801d4d2:	2b04      	cmp	r3, #4
 801d4d4:	bf02      	ittt	eq
 801d4d6:	68e5      	ldreq	r5, [r4, #12]
 801d4d8:	6833      	ldreq	r3, [r6, #0]
 801d4da:	1aed      	subeq	r5, r5, r3
 801d4dc:	68a3      	ldr	r3, [r4, #8]
 801d4de:	bf0c      	ite	eq
 801d4e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d4e4:	2500      	movne	r5, #0
 801d4e6:	4293      	cmp	r3, r2
 801d4e8:	bfc4      	itt	gt
 801d4ea:	1a9b      	subgt	r3, r3, r2
 801d4ec:	18ed      	addgt	r5, r5, r3
 801d4ee:	2600      	movs	r6, #0
 801d4f0:	341a      	adds	r4, #26
 801d4f2:	42b5      	cmp	r5, r6
 801d4f4:	d11a      	bne.n	801d52c <_printf_common+0xc8>
 801d4f6:	2000      	movs	r0, #0
 801d4f8:	e008      	b.n	801d50c <_printf_common+0xa8>
 801d4fa:	2301      	movs	r3, #1
 801d4fc:	4652      	mov	r2, sl
 801d4fe:	4641      	mov	r1, r8
 801d500:	4638      	mov	r0, r7
 801d502:	47c8      	blx	r9
 801d504:	3001      	adds	r0, #1
 801d506:	d103      	bne.n	801d510 <_printf_common+0xac>
 801d508:	f04f 30ff 	mov.w	r0, #4294967295
 801d50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d510:	3501      	adds	r5, #1
 801d512:	e7c6      	b.n	801d4a2 <_printf_common+0x3e>
 801d514:	18e1      	adds	r1, r4, r3
 801d516:	1c5a      	adds	r2, r3, #1
 801d518:	2030      	movs	r0, #48	@ 0x30
 801d51a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d51e:	4422      	add	r2, r4
 801d520:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d524:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d528:	3302      	adds	r3, #2
 801d52a:	e7c7      	b.n	801d4bc <_printf_common+0x58>
 801d52c:	2301      	movs	r3, #1
 801d52e:	4622      	mov	r2, r4
 801d530:	4641      	mov	r1, r8
 801d532:	4638      	mov	r0, r7
 801d534:	47c8      	blx	r9
 801d536:	3001      	adds	r0, #1
 801d538:	d0e6      	beq.n	801d508 <_printf_common+0xa4>
 801d53a:	3601      	adds	r6, #1
 801d53c:	e7d9      	b.n	801d4f2 <_printf_common+0x8e>
	...

0801d540 <_printf_i>:
 801d540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d544:	7e0f      	ldrb	r7, [r1, #24]
 801d546:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d548:	2f78      	cmp	r7, #120	@ 0x78
 801d54a:	4691      	mov	r9, r2
 801d54c:	4680      	mov	r8, r0
 801d54e:	460c      	mov	r4, r1
 801d550:	469a      	mov	sl, r3
 801d552:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d556:	d807      	bhi.n	801d568 <_printf_i+0x28>
 801d558:	2f62      	cmp	r7, #98	@ 0x62
 801d55a:	d80a      	bhi.n	801d572 <_printf_i+0x32>
 801d55c:	2f00      	cmp	r7, #0
 801d55e:	f000 80d2 	beq.w	801d706 <_printf_i+0x1c6>
 801d562:	2f58      	cmp	r7, #88	@ 0x58
 801d564:	f000 80b9 	beq.w	801d6da <_printf_i+0x19a>
 801d568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d56c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d570:	e03a      	b.n	801d5e8 <_printf_i+0xa8>
 801d572:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d576:	2b15      	cmp	r3, #21
 801d578:	d8f6      	bhi.n	801d568 <_printf_i+0x28>
 801d57a:	a101      	add	r1, pc, #4	@ (adr r1, 801d580 <_printf_i+0x40>)
 801d57c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d580:	0801d5d9 	.word	0x0801d5d9
 801d584:	0801d5ed 	.word	0x0801d5ed
 801d588:	0801d569 	.word	0x0801d569
 801d58c:	0801d569 	.word	0x0801d569
 801d590:	0801d569 	.word	0x0801d569
 801d594:	0801d569 	.word	0x0801d569
 801d598:	0801d5ed 	.word	0x0801d5ed
 801d59c:	0801d569 	.word	0x0801d569
 801d5a0:	0801d569 	.word	0x0801d569
 801d5a4:	0801d569 	.word	0x0801d569
 801d5a8:	0801d569 	.word	0x0801d569
 801d5ac:	0801d6ed 	.word	0x0801d6ed
 801d5b0:	0801d617 	.word	0x0801d617
 801d5b4:	0801d6a7 	.word	0x0801d6a7
 801d5b8:	0801d569 	.word	0x0801d569
 801d5bc:	0801d569 	.word	0x0801d569
 801d5c0:	0801d70f 	.word	0x0801d70f
 801d5c4:	0801d569 	.word	0x0801d569
 801d5c8:	0801d617 	.word	0x0801d617
 801d5cc:	0801d569 	.word	0x0801d569
 801d5d0:	0801d569 	.word	0x0801d569
 801d5d4:	0801d6af 	.word	0x0801d6af
 801d5d8:	6833      	ldr	r3, [r6, #0]
 801d5da:	1d1a      	adds	r2, r3, #4
 801d5dc:	681b      	ldr	r3, [r3, #0]
 801d5de:	6032      	str	r2, [r6, #0]
 801d5e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d5e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d5e8:	2301      	movs	r3, #1
 801d5ea:	e09d      	b.n	801d728 <_printf_i+0x1e8>
 801d5ec:	6833      	ldr	r3, [r6, #0]
 801d5ee:	6820      	ldr	r0, [r4, #0]
 801d5f0:	1d19      	adds	r1, r3, #4
 801d5f2:	6031      	str	r1, [r6, #0]
 801d5f4:	0606      	lsls	r6, r0, #24
 801d5f6:	d501      	bpl.n	801d5fc <_printf_i+0xbc>
 801d5f8:	681d      	ldr	r5, [r3, #0]
 801d5fa:	e003      	b.n	801d604 <_printf_i+0xc4>
 801d5fc:	0645      	lsls	r5, r0, #25
 801d5fe:	d5fb      	bpl.n	801d5f8 <_printf_i+0xb8>
 801d600:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d604:	2d00      	cmp	r5, #0
 801d606:	da03      	bge.n	801d610 <_printf_i+0xd0>
 801d608:	232d      	movs	r3, #45	@ 0x2d
 801d60a:	426d      	negs	r5, r5
 801d60c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d610:	4859      	ldr	r0, [pc, #356]	@ (801d778 <_printf_i+0x238>)
 801d612:	230a      	movs	r3, #10
 801d614:	e011      	b.n	801d63a <_printf_i+0xfa>
 801d616:	6821      	ldr	r1, [r4, #0]
 801d618:	6833      	ldr	r3, [r6, #0]
 801d61a:	0608      	lsls	r0, r1, #24
 801d61c:	f853 5b04 	ldr.w	r5, [r3], #4
 801d620:	d402      	bmi.n	801d628 <_printf_i+0xe8>
 801d622:	0649      	lsls	r1, r1, #25
 801d624:	bf48      	it	mi
 801d626:	b2ad      	uxthmi	r5, r5
 801d628:	2f6f      	cmp	r7, #111	@ 0x6f
 801d62a:	4853      	ldr	r0, [pc, #332]	@ (801d778 <_printf_i+0x238>)
 801d62c:	6033      	str	r3, [r6, #0]
 801d62e:	bf14      	ite	ne
 801d630:	230a      	movne	r3, #10
 801d632:	2308      	moveq	r3, #8
 801d634:	2100      	movs	r1, #0
 801d636:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d63a:	6866      	ldr	r6, [r4, #4]
 801d63c:	60a6      	str	r6, [r4, #8]
 801d63e:	2e00      	cmp	r6, #0
 801d640:	bfa2      	ittt	ge
 801d642:	6821      	ldrge	r1, [r4, #0]
 801d644:	f021 0104 	bicge.w	r1, r1, #4
 801d648:	6021      	strge	r1, [r4, #0]
 801d64a:	b90d      	cbnz	r5, 801d650 <_printf_i+0x110>
 801d64c:	2e00      	cmp	r6, #0
 801d64e:	d04b      	beq.n	801d6e8 <_printf_i+0x1a8>
 801d650:	4616      	mov	r6, r2
 801d652:	fbb5 f1f3 	udiv	r1, r5, r3
 801d656:	fb03 5711 	mls	r7, r3, r1, r5
 801d65a:	5dc7      	ldrb	r7, [r0, r7]
 801d65c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d660:	462f      	mov	r7, r5
 801d662:	42bb      	cmp	r3, r7
 801d664:	460d      	mov	r5, r1
 801d666:	d9f4      	bls.n	801d652 <_printf_i+0x112>
 801d668:	2b08      	cmp	r3, #8
 801d66a:	d10b      	bne.n	801d684 <_printf_i+0x144>
 801d66c:	6823      	ldr	r3, [r4, #0]
 801d66e:	07df      	lsls	r7, r3, #31
 801d670:	d508      	bpl.n	801d684 <_printf_i+0x144>
 801d672:	6923      	ldr	r3, [r4, #16]
 801d674:	6861      	ldr	r1, [r4, #4]
 801d676:	4299      	cmp	r1, r3
 801d678:	bfde      	ittt	le
 801d67a:	2330      	movle	r3, #48	@ 0x30
 801d67c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d680:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d684:	1b92      	subs	r2, r2, r6
 801d686:	6122      	str	r2, [r4, #16]
 801d688:	f8cd a000 	str.w	sl, [sp]
 801d68c:	464b      	mov	r3, r9
 801d68e:	aa03      	add	r2, sp, #12
 801d690:	4621      	mov	r1, r4
 801d692:	4640      	mov	r0, r8
 801d694:	f7ff fee6 	bl	801d464 <_printf_common>
 801d698:	3001      	adds	r0, #1
 801d69a:	d14a      	bne.n	801d732 <_printf_i+0x1f2>
 801d69c:	f04f 30ff 	mov.w	r0, #4294967295
 801d6a0:	b004      	add	sp, #16
 801d6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d6a6:	6823      	ldr	r3, [r4, #0]
 801d6a8:	f043 0320 	orr.w	r3, r3, #32
 801d6ac:	6023      	str	r3, [r4, #0]
 801d6ae:	4833      	ldr	r0, [pc, #204]	@ (801d77c <_printf_i+0x23c>)
 801d6b0:	2778      	movs	r7, #120	@ 0x78
 801d6b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d6b6:	6823      	ldr	r3, [r4, #0]
 801d6b8:	6831      	ldr	r1, [r6, #0]
 801d6ba:	061f      	lsls	r7, r3, #24
 801d6bc:	f851 5b04 	ldr.w	r5, [r1], #4
 801d6c0:	d402      	bmi.n	801d6c8 <_printf_i+0x188>
 801d6c2:	065f      	lsls	r7, r3, #25
 801d6c4:	bf48      	it	mi
 801d6c6:	b2ad      	uxthmi	r5, r5
 801d6c8:	6031      	str	r1, [r6, #0]
 801d6ca:	07d9      	lsls	r1, r3, #31
 801d6cc:	bf44      	itt	mi
 801d6ce:	f043 0320 	orrmi.w	r3, r3, #32
 801d6d2:	6023      	strmi	r3, [r4, #0]
 801d6d4:	b11d      	cbz	r5, 801d6de <_printf_i+0x19e>
 801d6d6:	2310      	movs	r3, #16
 801d6d8:	e7ac      	b.n	801d634 <_printf_i+0xf4>
 801d6da:	4827      	ldr	r0, [pc, #156]	@ (801d778 <_printf_i+0x238>)
 801d6dc:	e7e9      	b.n	801d6b2 <_printf_i+0x172>
 801d6de:	6823      	ldr	r3, [r4, #0]
 801d6e0:	f023 0320 	bic.w	r3, r3, #32
 801d6e4:	6023      	str	r3, [r4, #0]
 801d6e6:	e7f6      	b.n	801d6d6 <_printf_i+0x196>
 801d6e8:	4616      	mov	r6, r2
 801d6ea:	e7bd      	b.n	801d668 <_printf_i+0x128>
 801d6ec:	6833      	ldr	r3, [r6, #0]
 801d6ee:	6825      	ldr	r5, [r4, #0]
 801d6f0:	6961      	ldr	r1, [r4, #20]
 801d6f2:	1d18      	adds	r0, r3, #4
 801d6f4:	6030      	str	r0, [r6, #0]
 801d6f6:	062e      	lsls	r6, r5, #24
 801d6f8:	681b      	ldr	r3, [r3, #0]
 801d6fa:	d501      	bpl.n	801d700 <_printf_i+0x1c0>
 801d6fc:	6019      	str	r1, [r3, #0]
 801d6fe:	e002      	b.n	801d706 <_printf_i+0x1c6>
 801d700:	0668      	lsls	r0, r5, #25
 801d702:	d5fb      	bpl.n	801d6fc <_printf_i+0x1bc>
 801d704:	8019      	strh	r1, [r3, #0]
 801d706:	2300      	movs	r3, #0
 801d708:	6123      	str	r3, [r4, #16]
 801d70a:	4616      	mov	r6, r2
 801d70c:	e7bc      	b.n	801d688 <_printf_i+0x148>
 801d70e:	6833      	ldr	r3, [r6, #0]
 801d710:	1d1a      	adds	r2, r3, #4
 801d712:	6032      	str	r2, [r6, #0]
 801d714:	681e      	ldr	r6, [r3, #0]
 801d716:	6862      	ldr	r2, [r4, #4]
 801d718:	2100      	movs	r1, #0
 801d71a:	4630      	mov	r0, r6
 801d71c:	f7e2 fd80 	bl	8000220 <memchr>
 801d720:	b108      	cbz	r0, 801d726 <_printf_i+0x1e6>
 801d722:	1b80      	subs	r0, r0, r6
 801d724:	6060      	str	r0, [r4, #4]
 801d726:	6863      	ldr	r3, [r4, #4]
 801d728:	6123      	str	r3, [r4, #16]
 801d72a:	2300      	movs	r3, #0
 801d72c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d730:	e7aa      	b.n	801d688 <_printf_i+0x148>
 801d732:	6923      	ldr	r3, [r4, #16]
 801d734:	4632      	mov	r2, r6
 801d736:	4649      	mov	r1, r9
 801d738:	4640      	mov	r0, r8
 801d73a:	47d0      	blx	sl
 801d73c:	3001      	adds	r0, #1
 801d73e:	d0ad      	beq.n	801d69c <_printf_i+0x15c>
 801d740:	6823      	ldr	r3, [r4, #0]
 801d742:	079b      	lsls	r3, r3, #30
 801d744:	d413      	bmi.n	801d76e <_printf_i+0x22e>
 801d746:	68e0      	ldr	r0, [r4, #12]
 801d748:	9b03      	ldr	r3, [sp, #12]
 801d74a:	4298      	cmp	r0, r3
 801d74c:	bfb8      	it	lt
 801d74e:	4618      	movlt	r0, r3
 801d750:	e7a6      	b.n	801d6a0 <_printf_i+0x160>
 801d752:	2301      	movs	r3, #1
 801d754:	4632      	mov	r2, r6
 801d756:	4649      	mov	r1, r9
 801d758:	4640      	mov	r0, r8
 801d75a:	47d0      	blx	sl
 801d75c:	3001      	adds	r0, #1
 801d75e:	d09d      	beq.n	801d69c <_printf_i+0x15c>
 801d760:	3501      	adds	r5, #1
 801d762:	68e3      	ldr	r3, [r4, #12]
 801d764:	9903      	ldr	r1, [sp, #12]
 801d766:	1a5b      	subs	r3, r3, r1
 801d768:	42ab      	cmp	r3, r5
 801d76a:	dcf2      	bgt.n	801d752 <_printf_i+0x212>
 801d76c:	e7eb      	b.n	801d746 <_printf_i+0x206>
 801d76e:	2500      	movs	r5, #0
 801d770:	f104 0619 	add.w	r6, r4, #25
 801d774:	e7f5      	b.n	801d762 <_printf_i+0x222>
 801d776:	bf00      	nop
 801d778:	0802278a 	.word	0x0802278a
 801d77c:	0802279b 	.word	0x0802279b

0801d780 <_scanf_float>:
 801d780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d784:	b087      	sub	sp, #28
 801d786:	4617      	mov	r7, r2
 801d788:	9303      	str	r3, [sp, #12]
 801d78a:	688b      	ldr	r3, [r1, #8]
 801d78c:	1e5a      	subs	r2, r3, #1
 801d78e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801d792:	bf81      	itttt	hi
 801d794:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801d798:	eb03 0b05 	addhi.w	fp, r3, r5
 801d79c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801d7a0:	608b      	strhi	r3, [r1, #8]
 801d7a2:	680b      	ldr	r3, [r1, #0]
 801d7a4:	460a      	mov	r2, r1
 801d7a6:	f04f 0500 	mov.w	r5, #0
 801d7aa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801d7ae:	f842 3b1c 	str.w	r3, [r2], #28
 801d7b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801d7b6:	4680      	mov	r8, r0
 801d7b8:	460c      	mov	r4, r1
 801d7ba:	bf98      	it	ls
 801d7bc:	f04f 0b00 	movls.w	fp, #0
 801d7c0:	9201      	str	r2, [sp, #4]
 801d7c2:	4616      	mov	r6, r2
 801d7c4:	46aa      	mov	sl, r5
 801d7c6:	46a9      	mov	r9, r5
 801d7c8:	9502      	str	r5, [sp, #8]
 801d7ca:	68a2      	ldr	r2, [r4, #8]
 801d7cc:	b152      	cbz	r2, 801d7e4 <_scanf_float+0x64>
 801d7ce:	683b      	ldr	r3, [r7, #0]
 801d7d0:	781b      	ldrb	r3, [r3, #0]
 801d7d2:	2b4e      	cmp	r3, #78	@ 0x4e
 801d7d4:	d864      	bhi.n	801d8a0 <_scanf_float+0x120>
 801d7d6:	2b40      	cmp	r3, #64	@ 0x40
 801d7d8:	d83c      	bhi.n	801d854 <_scanf_float+0xd4>
 801d7da:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801d7de:	b2c8      	uxtb	r0, r1
 801d7e0:	280e      	cmp	r0, #14
 801d7e2:	d93a      	bls.n	801d85a <_scanf_float+0xda>
 801d7e4:	f1b9 0f00 	cmp.w	r9, #0
 801d7e8:	d003      	beq.n	801d7f2 <_scanf_float+0x72>
 801d7ea:	6823      	ldr	r3, [r4, #0]
 801d7ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801d7f0:	6023      	str	r3, [r4, #0]
 801d7f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d7f6:	f1ba 0f01 	cmp.w	sl, #1
 801d7fa:	f200 8117 	bhi.w	801da2c <_scanf_float+0x2ac>
 801d7fe:	9b01      	ldr	r3, [sp, #4]
 801d800:	429e      	cmp	r6, r3
 801d802:	f200 8108 	bhi.w	801da16 <_scanf_float+0x296>
 801d806:	2001      	movs	r0, #1
 801d808:	b007      	add	sp, #28
 801d80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d80e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801d812:	2a0d      	cmp	r2, #13
 801d814:	d8e6      	bhi.n	801d7e4 <_scanf_float+0x64>
 801d816:	a101      	add	r1, pc, #4	@ (adr r1, 801d81c <_scanf_float+0x9c>)
 801d818:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d81c:	0801d963 	.word	0x0801d963
 801d820:	0801d7e5 	.word	0x0801d7e5
 801d824:	0801d7e5 	.word	0x0801d7e5
 801d828:	0801d7e5 	.word	0x0801d7e5
 801d82c:	0801d9c3 	.word	0x0801d9c3
 801d830:	0801d99b 	.word	0x0801d99b
 801d834:	0801d7e5 	.word	0x0801d7e5
 801d838:	0801d7e5 	.word	0x0801d7e5
 801d83c:	0801d971 	.word	0x0801d971
 801d840:	0801d7e5 	.word	0x0801d7e5
 801d844:	0801d7e5 	.word	0x0801d7e5
 801d848:	0801d7e5 	.word	0x0801d7e5
 801d84c:	0801d7e5 	.word	0x0801d7e5
 801d850:	0801d929 	.word	0x0801d929
 801d854:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801d858:	e7db      	b.n	801d812 <_scanf_float+0x92>
 801d85a:	290e      	cmp	r1, #14
 801d85c:	d8c2      	bhi.n	801d7e4 <_scanf_float+0x64>
 801d85e:	a001      	add	r0, pc, #4	@ (adr r0, 801d864 <_scanf_float+0xe4>)
 801d860:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801d864:	0801d919 	.word	0x0801d919
 801d868:	0801d7e5 	.word	0x0801d7e5
 801d86c:	0801d919 	.word	0x0801d919
 801d870:	0801d9af 	.word	0x0801d9af
 801d874:	0801d7e5 	.word	0x0801d7e5
 801d878:	0801d8c1 	.word	0x0801d8c1
 801d87c:	0801d8ff 	.word	0x0801d8ff
 801d880:	0801d8ff 	.word	0x0801d8ff
 801d884:	0801d8ff 	.word	0x0801d8ff
 801d888:	0801d8ff 	.word	0x0801d8ff
 801d88c:	0801d8ff 	.word	0x0801d8ff
 801d890:	0801d8ff 	.word	0x0801d8ff
 801d894:	0801d8ff 	.word	0x0801d8ff
 801d898:	0801d8ff 	.word	0x0801d8ff
 801d89c:	0801d8ff 	.word	0x0801d8ff
 801d8a0:	2b6e      	cmp	r3, #110	@ 0x6e
 801d8a2:	d809      	bhi.n	801d8b8 <_scanf_float+0x138>
 801d8a4:	2b60      	cmp	r3, #96	@ 0x60
 801d8a6:	d8b2      	bhi.n	801d80e <_scanf_float+0x8e>
 801d8a8:	2b54      	cmp	r3, #84	@ 0x54
 801d8aa:	d07b      	beq.n	801d9a4 <_scanf_float+0x224>
 801d8ac:	2b59      	cmp	r3, #89	@ 0x59
 801d8ae:	d199      	bne.n	801d7e4 <_scanf_float+0x64>
 801d8b0:	2d07      	cmp	r5, #7
 801d8b2:	d197      	bne.n	801d7e4 <_scanf_float+0x64>
 801d8b4:	2508      	movs	r5, #8
 801d8b6:	e02c      	b.n	801d912 <_scanf_float+0x192>
 801d8b8:	2b74      	cmp	r3, #116	@ 0x74
 801d8ba:	d073      	beq.n	801d9a4 <_scanf_float+0x224>
 801d8bc:	2b79      	cmp	r3, #121	@ 0x79
 801d8be:	e7f6      	b.n	801d8ae <_scanf_float+0x12e>
 801d8c0:	6821      	ldr	r1, [r4, #0]
 801d8c2:	05c8      	lsls	r0, r1, #23
 801d8c4:	d51b      	bpl.n	801d8fe <_scanf_float+0x17e>
 801d8c6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801d8ca:	6021      	str	r1, [r4, #0]
 801d8cc:	f109 0901 	add.w	r9, r9, #1
 801d8d0:	f1bb 0f00 	cmp.w	fp, #0
 801d8d4:	d003      	beq.n	801d8de <_scanf_float+0x15e>
 801d8d6:	3201      	adds	r2, #1
 801d8d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d8dc:	60a2      	str	r2, [r4, #8]
 801d8de:	68a3      	ldr	r3, [r4, #8]
 801d8e0:	3b01      	subs	r3, #1
 801d8e2:	60a3      	str	r3, [r4, #8]
 801d8e4:	6923      	ldr	r3, [r4, #16]
 801d8e6:	3301      	adds	r3, #1
 801d8e8:	6123      	str	r3, [r4, #16]
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	3b01      	subs	r3, #1
 801d8ee:	2b00      	cmp	r3, #0
 801d8f0:	607b      	str	r3, [r7, #4]
 801d8f2:	f340 8087 	ble.w	801da04 <_scanf_float+0x284>
 801d8f6:	683b      	ldr	r3, [r7, #0]
 801d8f8:	3301      	adds	r3, #1
 801d8fa:	603b      	str	r3, [r7, #0]
 801d8fc:	e765      	b.n	801d7ca <_scanf_float+0x4a>
 801d8fe:	eb1a 0105 	adds.w	r1, sl, r5
 801d902:	f47f af6f 	bne.w	801d7e4 <_scanf_float+0x64>
 801d906:	6822      	ldr	r2, [r4, #0]
 801d908:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801d90c:	6022      	str	r2, [r4, #0]
 801d90e:	460d      	mov	r5, r1
 801d910:	468a      	mov	sl, r1
 801d912:	f806 3b01 	strb.w	r3, [r6], #1
 801d916:	e7e2      	b.n	801d8de <_scanf_float+0x15e>
 801d918:	6822      	ldr	r2, [r4, #0]
 801d91a:	0610      	lsls	r0, r2, #24
 801d91c:	f57f af62 	bpl.w	801d7e4 <_scanf_float+0x64>
 801d920:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801d924:	6022      	str	r2, [r4, #0]
 801d926:	e7f4      	b.n	801d912 <_scanf_float+0x192>
 801d928:	f1ba 0f00 	cmp.w	sl, #0
 801d92c:	d10e      	bne.n	801d94c <_scanf_float+0x1cc>
 801d92e:	f1b9 0f00 	cmp.w	r9, #0
 801d932:	d10e      	bne.n	801d952 <_scanf_float+0x1d2>
 801d934:	6822      	ldr	r2, [r4, #0]
 801d936:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801d93a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801d93e:	d108      	bne.n	801d952 <_scanf_float+0x1d2>
 801d940:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801d944:	6022      	str	r2, [r4, #0]
 801d946:	f04f 0a01 	mov.w	sl, #1
 801d94a:	e7e2      	b.n	801d912 <_scanf_float+0x192>
 801d94c:	f1ba 0f02 	cmp.w	sl, #2
 801d950:	d055      	beq.n	801d9fe <_scanf_float+0x27e>
 801d952:	2d01      	cmp	r5, #1
 801d954:	d002      	beq.n	801d95c <_scanf_float+0x1dc>
 801d956:	2d04      	cmp	r5, #4
 801d958:	f47f af44 	bne.w	801d7e4 <_scanf_float+0x64>
 801d95c:	3501      	adds	r5, #1
 801d95e:	b2ed      	uxtb	r5, r5
 801d960:	e7d7      	b.n	801d912 <_scanf_float+0x192>
 801d962:	f1ba 0f01 	cmp.w	sl, #1
 801d966:	f47f af3d 	bne.w	801d7e4 <_scanf_float+0x64>
 801d96a:	f04f 0a02 	mov.w	sl, #2
 801d96e:	e7d0      	b.n	801d912 <_scanf_float+0x192>
 801d970:	b97d      	cbnz	r5, 801d992 <_scanf_float+0x212>
 801d972:	f1b9 0f00 	cmp.w	r9, #0
 801d976:	f47f af38 	bne.w	801d7ea <_scanf_float+0x6a>
 801d97a:	6822      	ldr	r2, [r4, #0]
 801d97c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801d980:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801d984:	f040 8108 	bne.w	801db98 <_scanf_float+0x418>
 801d988:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801d98c:	6022      	str	r2, [r4, #0]
 801d98e:	2501      	movs	r5, #1
 801d990:	e7bf      	b.n	801d912 <_scanf_float+0x192>
 801d992:	2d03      	cmp	r5, #3
 801d994:	d0e2      	beq.n	801d95c <_scanf_float+0x1dc>
 801d996:	2d05      	cmp	r5, #5
 801d998:	e7de      	b.n	801d958 <_scanf_float+0x1d8>
 801d99a:	2d02      	cmp	r5, #2
 801d99c:	f47f af22 	bne.w	801d7e4 <_scanf_float+0x64>
 801d9a0:	2503      	movs	r5, #3
 801d9a2:	e7b6      	b.n	801d912 <_scanf_float+0x192>
 801d9a4:	2d06      	cmp	r5, #6
 801d9a6:	f47f af1d 	bne.w	801d7e4 <_scanf_float+0x64>
 801d9aa:	2507      	movs	r5, #7
 801d9ac:	e7b1      	b.n	801d912 <_scanf_float+0x192>
 801d9ae:	6822      	ldr	r2, [r4, #0]
 801d9b0:	0591      	lsls	r1, r2, #22
 801d9b2:	f57f af17 	bpl.w	801d7e4 <_scanf_float+0x64>
 801d9b6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801d9ba:	6022      	str	r2, [r4, #0]
 801d9bc:	f8cd 9008 	str.w	r9, [sp, #8]
 801d9c0:	e7a7      	b.n	801d912 <_scanf_float+0x192>
 801d9c2:	6822      	ldr	r2, [r4, #0]
 801d9c4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801d9c8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801d9cc:	d006      	beq.n	801d9dc <_scanf_float+0x25c>
 801d9ce:	0550      	lsls	r0, r2, #21
 801d9d0:	f57f af08 	bpl.w	801d7e4 <_scanf_float+0x64>
 801d9d4:	f1b9 0f00 	cmp.w	r9, #0
 801d9d8:	f000 80de 	beq.w	801db98 <_scanf_float+0x418>
 801d9dc:	0591      	lsls	r1, r2, #22
 801d9de:	bf58      	it	pl
 801d9e0:	9902      	ldrpl	r1, [sp, #8]
 801d9e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801d9e6:	bf58      	it	pl
 801d9e8:	eba9 0101 	subpl.w	r1, r9, r1
 801d9ec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801d9f0:	bf58      	it	pl
 801d9f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801d9f6:	6022      	str	r2, [r4, #0]
 801d9f8:	f04f 0900 	mov.w	r9, #0
 801d9fc:	e789      	b.n	801d912 <_scanf_float+0x192>
 801d9fe:	f04f 0a03 	mov.w	sl, #3
 801da02:	e786      	b.n	801d912 <_scanf_float+0x192>
 801da04:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801da08:	4639      	mov	r1, r7
 801da0a:	4640      	mov	r0, r8
 801da0c:	4798      	blx	r3
 801da0e:	2800      	cmp	r0, #0
 801da10:	f43f aedb 	beq.w	801d7ca <_scanf_float+0x4a>
 801da14:	e6e6      	b.n	801d7e4 <_scanf_float+0x64>
 801da16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801da1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801da1e:	463a      	mov	r2, r7
 801da20:	4640      	mov	r0, r8
 801da22:	4798      	blx	r3
 801da24:	6923      	ldr	r3, [r4, #16]
 801da26:	3b01      	subs	r3, #1
 801da28:	6123      	str	r3, [r4, #16]
 801da2a:	e6e8      	b.n	801d7fe <_scanf_float+0x7e>
 801da2c:	1e6b      	subs	r3, r5, #1
 801da2e:	2b06      	cmp	r3, #6
 801da30:	d824      	bhi.n	801da7c <_scanf_float+0x2fc>
 801da32:	2d02      	cmp	r5, #2
 801da34:	d836      	bhi.n	801daa4 <_scanf_float+0x324>
 801da36:	9b01      	ldr	r3, [sp, #4]
 801da38:	429e      	cmp	r6, r3
 801da3a:	f67f aee4 	bls.w	801d806 <_scanf_float+0x86>
 801da3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801da42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801da46:	463a      	mov	r2, r7
 801da48:	4640      	mov	r0, r8
 801da4a:	4798      	blx	r3
 801da4c:	6923      	ldr	r3, [r4, #16]
 801da4e:	3b01      	subs	r3, #1
 801da50:	6123      	str	r3, [r4, #16]
 801da52:	e7f0      	b.n	801da36 <_scanf_float+0x2b6>
 801da54:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801da58:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801da5c:	463a      	mov	r2, r7
 801da5e:	4640      	mov	r0, r8
 801da60:	4798      	blx	r3
 801da62:	6923      	ldr	r3, [r4, #16]
 801da64:	3b01      	subs	r3, #1
 801da66:	6123      	str	r3, [r4, #16]
 801da68:	f10a 3aff 	add.w	sl, sl, #4294967295
 801da6c:	fa5f fa8a 	uxtb.w	sl, sl
 801da70:	f1ba 0f02 	cmp.w	sl, #2
 801da74:	d1ee      	bne.n	801da54 <_scanf_float+0x2d4>
 801da76:	3d03      	subs	r5, #3
 801da78:	b2ed      	uxtb	r5, r5
 801da7a:	1b76      	subs	r6, r6, r5
 801da7c:	6823      	ldr	r3, [r4, #0]
 801da7e:	05da      	lsls	r2, r3, #23
 801da80:	d530      	bpl.n	801dae4 <_scanf_float+0x364>
 801da82:	055b      	lsls	r3, r3, #21
 801da84:	d511      	bpl.n	801daaa <_scanf_float+0x32a>
 801da86:	9b01      	ldr	r3, [sp, #4]
 801da88:	429e      	cmp	r6, r3
 801da8a:	f67f aebc 	bls.w	801d806 <_scanf_float+0x86>
 801da8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801da92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801da96:	463a      	mov	r2, r7
 801da98:	4640      	mov	r0, r8
 801da9a:	4798      	blx	r3
 801da9c:	6923      	ldr	r3, [r4, #16]
 801da9e:	3b01      	subs	r3, #1
 801daa0:	6123      	str	r3, [r4, #16]
 801daa2:	e7f0      	b.n	801da86 <_scanf_float+0x306>
 801daa4:	46aa      	mov	sl, r5
 801daa6:	46b3      	mov	fp, r6
 801daa8:	e7de      	b.n	801da68 <_scanf_float+0x2e8>
 801daaa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801daae:	6923      	ldr	r3, [r4, #16]
 801dab0:	2965      	cmp	r1, #101	@ 0x65
 801dab2:	f103 33ff 	add.w	r3, r3, #4294967295
 801dab6:	f106 35ff 	add.w	r5, r6, #4294967295
 801daba:	6123      	str	r3, [r4, #16]
 801dabc:	d00c      	beq.n	801dad8 <_scanf_float+0x358>
 801dabe:	2945      	cmp	r1, #69	@ 0x45
 801dac0:	d00a      	beq.n	801dad8 <_scanf_float+0x358>
 801dac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801dac6:	463a      	mov	r2, r7
 801dac8:	4640      	mov	r0, r8
 801daca:	4798      	blx	r3
 801dacc:	6923      	ldr	r3, [r4, #16]
 801dace:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801dad2:	3b01      	subs	r3, #1
 801dad4:	1eb5      	subs	r5, r6, #2
 801dad6:	6123      	str	r3, [r4, #16]
 801dad8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801dadc:	463a      	mov	r2, r7
 801dade:	4640      	mov	r0, r8
 801dae0:	4798      	blx	r3
 801dae2:	462e      	mov	r6, r5
 801dae4:	6822      	ldr	r2, [r4, #0]
 801dae6:	f012 0210 	ands.w	r2, r2, #16
 801daea:	d001      	beq.n	801daf0 <_scanf_float+0x370>
 801daec:	2000      	movs	r0, #0
 801daee:	e68b      	b.n	801d808 <_scanf_float+0x88>
 801daf0:	7032      	strb	r2, [r6, #0]
 801daf2:	6823      	ldr	r3, [r4, #0]
 801daf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801daf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801dafc:	d11c      	bne.n	801db38 <_scanf_float+0x3b8>
 801dafe:	9b02      	ldr	r3, [sp, #8]
 801db00:	454b      	cmp	r3, r9
 801db02:	eba3 0209 	sub.w	r2, r3, r9
 801db06:	d123      	bne.n	801db50 <_scanf_float+0x3d0>
 801db08:	9901      	ldr	r1, [sp, #4]
 801db0a:	2200      	movs	r2, #0
 801db0c:	4640      	mov	r0, r8
 801db0e:	f002 fdcf 	bl	80206b0 <_strtod_r>
 801db12:	9b03      	ldr	r3, [sp, #12]
 801db14:	6821      	ldr	r1, [r4, #0]
 801db16:	681b      	ldr	r3, [r3, #0]
 801db18:	f011 0f02 	tst.w	r1, #2
 801db1c:	ec57 6b10 	vmov	r6, r7, d0
 801db20:	f103 0204 	add.w	r2, r3, #4
 801db24:	d01f      	beq.n	801db66 <_scanf_float+0x3e6>
 801db26:	9903      	ldr	r1, [sp, #12]
 801db28:	600a      	str	r2, [r1, #0]
 801db2a:	681b      	ldr	r3, [r3, #0]
 801db2c:	e9c3 6700 	strd	r6, r7, [r3]
 801db30:	68e3      	ldr	r3, [r4, #12]
 801db32:	3301      	adds	r3, #1
 801db34:	60e3      	str	r3, [r4, #12]
 801db36:	e7d9      	b.n	801daec <_scanf_float+0x36c>
 801db38:	9b04      	ldr	r3, [sp, #16]
 801db3a:	2b00      	cmp	r3, #0
 801db3c:	d0e4      	beq.n	801db08 <_scanf_float+0x388>
 801db3e:	9905      	ldr	r1, [sp, #20]
 801db40:	230a      	movs	r3, #10
 801db42:	3101      	adds	r1, #1
 801db44:	4640      	mov	r0, r8
 801db46:	f002 fe33 	bl	80207b0 <_strtol_r>
 801db4a:	9b04      	ldr	r3, [sp, #16]
 801db4c:	9e05      	ldr	r6, [sp, #20]
 801db4e:	1ac2      	subs	r2, r0, r3
 801db50:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801db54:	429e      	cmp	r6, r3
 801db56:	bf28      	it	cs
 801db58:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801db5c:	4910      	ldr	r1, [pc, #64]	@ (801dba0 <_scanf_float+0x420>)
 801db5e:	4630      	mov	r0, r6
 801db60:	f000 fa18 	bl	801df94 <siprintf>
 801db64:	e7d0      	b.n	801db08 <_scanf_float+0x388>
 801db66:	f011 0f04 	tst.w	r1, #4
 801db6a:	9903      	ldr	r1, [sp, #12]
 801db6c:	600a      	str	r2, [r1, #0]
 801db6e:	d1dc      	bne.n	801db2a <_scanf_float+0x3aa>
 801db70:	681d      	ldr	r5, [r3, #0]
 801db72:	4632      	mov	r2, r6
 801db74:	463b      	mov	r3, r7
 801db76:	4630      	mov	r0, r6
 801db78:	4639      	mov	r1, r7
 801db7a:	f7e2 ffff 	bl	8000b7c <__aeabi_dcmpun>
 801db7e:	b128      	cbz	r0, 801db8c <_scanf_float+0x40c>
 801db80:	4808      	ldr	r0, [pc, #32]	@ (801dba4 <_scanf_float+0x424>)
 801db82:	f000 fb8d 	bl	801e2a0 <nanf>
 801db86:	ed85 0a00 	vstr	s0, [r5]
 801db8a:	e7d1      	b.n	801db30 <_scanf_float+0x3b0>
 801db8c:	4630      	mov	r0, r6
 801db8e:	4639      	mov	r1, r7
 801db90:	f7e3 f852 	bl	8000c38 <__aeabi_d2f>
 801db94:	6028      	str	r0, [r5, #0]
 801db96:	e7cb      	b.n	801db30 <_scanf_float+0x3b0>
 801db98:	f04f 0900 	mov.w	r9, #0
 801db9c:	e629      	b.n	801d7f2 <_scanf_float+0x72>
 801db9e:	bf00      	nop
 801dba0:	080227ac 	.word	0x080227ac
 801dba4:	08022b45 	.word	0x08022b45

0801dba8 <std>:
 801dba8:	2300      	movs	r3, #0
 801dbaa:	b510      	push	{r4, lr}
 801dbac:	4604      	mov	r4, r0
 801dbae:	e9c0 3300 	strd	r3, r3, [r0]
 801dbb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dbb6:	6083      	str	r3, [r0, #8]
 801dbb8:	8181      	strh	r1, [r0, #12]
 801dbba:	6643      	str	r3, [r0, #100]	@ 0x64
 801dbbc:	81c2      	strh	r2, [r0, #14]
 801dbbe:	6183      	str	r3, [r0, #24]
 801dbc0:	4619      	mov	r1, r3
 801dbc2:	2208      	movs	r2, #8
 801dbc4:	305c      	adds	r0, #92	@ 0x5c
 801dbc6:	f000 fadd 	bl	801e184 <memset>
 801dbca:	4b0d      	ldr	r3, [pc, #52]	@ (801dc00 <std+0x58>)
 801dbcc:	6263      	str	r3, [r4, #36]	@ 0x24
 801dbce:	4b0d      	ldr	r3, [pc, #52]	@ (801dc04 <std+0x5c>)
 801dbd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801dbd2:	4b0d      	ldr	r3, [pc, #52]	@ (801dc08 <std+0x60>)
 801dbd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801dbd6:	4b0d      	ldr	r3, [pc, #52]	@ (801dc0c <std+0x64>)
 801dbd8:	6323      	str	r3, [r4, #48]	@ 0x30
 801dbda:	4b0d      	ldr	r3, [pc, #52]	@ (801dc10 <std+0x68>)
 801dbdc:	6224      	str	r4, [r4, #32]
 801dbde:	429c      	cmp	r4, r3
 801dbe0:	d006      	beq.n	801dbf0 <std+0x48>
 801dbe2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801dbe6:	4294      	cmp	r4, r2
 801dbe8:	d002      	beq.n	801dbf0 <std+0x48>
 801dbea:	33d0      	adds	r3, #208	@ 0xd0
 801dbec:	429c      	cmp	r4, r3
 801dbee:	d105      	bne.n	801dbfc <std+0x54>
 801dbf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801dbf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbf8:	f000 bb40 	b.w	801e27c <__retarget_lock_init_recursive>
 801dbfc:	bd10      	pop	{r4, pc}
 801dbfe:	bf00      	nop
 801dc00:	0801dfd5 	.word	0x0801dfd5
 801dc04:	0801dff7 	.word	0x0801dff7
 801dc08:	0801e02f 	.word	0x0801e02f
 801dc0c:	0801e053 	.word	0x0801e053
 801dc10:	2001bda4 	.word	0x2001bda4

0801dc14 <stdio_exit_handler>:
 801dc14:	4a02      	ldr	r2, [pc, #8]	@ (801dc20 <stdio_exit_handler+0xc>)
 801dc16:	4903      	ldr	r1, [pc, #12]	@ (801dc24 <stdio_exit_handler+0x10>)
 801dc18:	4803      	ldr	r0, [pc, #12]	@ (801dc28 <stdio_exit_handler+0x14>)
 801dc1a:	f000 b869 	b.w	801dcf0 <_fwalk_sglue>
 801dc1e:	bf00      	nop
 801dc20:	20000030 	.word	0x20000030
 801dc24:	08020df1 	.word	0x08020df1
 801dc28:	20000040 	.word	0x20000040

0801dc2c <cleanup_stdio>:
 801dc2c:	6841      	ldr	r1, [r0, #4]
 801dc2e:	4b0c      	ldr	r3, [pc, #48]	@ (801dc60 <cleanup_stdio+0x34>)
 801dc30:	4299      	cmp	r1, r3
 801dc32:	b510      	push	{r4, lr}
 801dc34:	4604      	mov	r4, r0
 801dc36:	d001      	beq.n	801dc3c <cleanup_stdio+0x10>
 801dc38:	f003 f8da 	bl	8020df0 <_fflush_r>
 801dc3c:	68a1      	ldr	r1, [r4, #8]
 801dc3e:	4b09      	ldr	r3, [pc, #36]	@ (801dc64 <cleanup_stdio+0x38>)
 801dc40:	4299      	cmp	r1, r3
 801dc42:	d002      	beq.n	801dc4a <cleanup_stdio+0x1e>
 801dc44:	4620      	mov	r0, r4
 801dc46:	f003 f8d3 	bl	8020df0 <_fflush_r>
 801dc4a:	68e1      	ldr	r1, [r4, #12]
 801dc4c:	4b06      	ldr	r3, [pc, #24]	@ (801dc68 <cleanup_stdio+0x3c>)
 801dc4e:	4299      	cmp	r1, r3
 801dc50:	d004      	beq.n	801dc5c <cleanup_stdio+0x30>
 801dc52:	4620      	mov	r0, r4
 801dc54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc58:	f003 b8ca 	b.w	8020df0 <_fflush_r>
 801dc5c:	bd10      	pop	{r4, pc}
 801dc5e:	bf00      	nop
 801dc60:	2001bda4 	.word	0x2001bda4
 801dc64:	2001be0c 	.word	0x2001be0c
 801dc68:	2001be74 	.word	0x2001be74

0801dc6c <global_stdio_init.part.0>:
 801dc6c:	b510      	push	{r4, lr}
 801dc6e:	4b0b      	ldr	r3, [pc, #44]	@ (801dc9c <global_stdio_init.part.0+0x30>)
 801dc70:	4c0b      	ldr	r4, [pc, #44]	@ (801dca0 <global_stdio_init.part.0+0x34>)
 801dc72:	4a0c      	ldr	r2, [pc, #48]	@ (801dca4 <global_stdio_init.part.0+0x38>)
 801dc74:	601a      	str	r2, [r3, #0]
 801dc76:	4620      	mov	r0, r4
 801dc78:	2200      	movs	r2, #0
 801dc7a:	2104      	movs	r1, #4
 801dc7c:	f7ff ff94 	bl	801dba8 <std>
 801dc80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801dc84:	2201      	movs	r2, #1
 801dc86:	2109      	movs	r1, #9
 801dc88:	f7ff ff8e 	bl	801dba8 <std>
 801dc8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801dc90:	2202      	movs	r2, #2
 801dc92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc96:	2112      	movs	r1, #18
 801dc98:	f7ff bf86 	b.w	801dba8 <std>
 801dc9c:	2001bedc 	.word	0x2001bedc
 801dca0:	2001bda4 	.word	0x2001bda4
 801dca4:	0801dc15 	.word	0x0801dc15

0801dca8 <__sfp_lock_acquire>:
 801dca8:	4801      	ldr	r0, [pc, #4]	@ (801dcb0 <__sfp_lock_acquire+0x8>)
 801dcaa:	f000 bae8 	b.w	801e27e <__retarget_lock_acquire_recursive>
 801dcae:	bf00      	nop
 801dcb0:	2001bee5 	.word	0x2001bee5

0801dcb4 <__sfp_lock_release>:
 801dcb4:	4801      	ldr	r0, [pc, #4]	@ (801dcbc <__sfp_lock_release+0x8>)
 801dcb6:	f000 bae3 	b.w	801e280 <__retarget_lock_release_recursive>
 801dcba:	bf00      	nop
 801dcbc:	2001bee5 	.word	0x2001bee5

0801dcc0 <__sinit>:
 801dcc0:	b510      	push	{r4, lr}
 801dcc2:	4604      	mov	r4, r0
 801dcc4:	f7ff fff0 	bl	801dca8 <__sfp_lock_acquire>
 801dcc8:	6a23      	ldr	r3, [r4, #32]
 801dcca:	b11b      	cbz	r3, 801dcd4 <__sinit+0x14>
 801dccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcd0:	f7ff bff0 	b.w	801dcb4 <__sfp_lock_release>
 801dcd4:	4b04      	ldr	r3, [pc, #16]	@ (801dce8 <__sinit+0x28>)
 801dcd6:	6223      	str	r3, [r4, #32]
 801dcd8:	4b04      	ldr	r3, [pc, #16]	@ (801dcec <__sinit+0x2c>)
 801dcda:	681b      	ldr	r3, [r3, #0]
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	d1f5      	bne.n	801dccc <__sinit+0xc>
 801dce0:	f7ff ffc4 	bl	801dc6c <global_stdio_init.part.0>
 801dce4:	e7f2      	b.n	801dccc <__sinit+0xc>
 801dce6:	bf00      	nop
 801dce8:	0801dc2d 	.word	0x0801dc2d
 801dcec:	2001bedc 	.word	0x2001bedc

0801dcf0 <_fwalk_sglue>:
 801dcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dcf4:	4607      	mov	r7, r0
 801dcf6:	4688      	mov	r8, r1
 801dcf8:	4614      	mov	r4, r2
 801dcfa:	2600      	movs	r6, #0
 801dcfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dd00:	f1b9 0901 	subs.w	r9, r9, #1
 801dd04:	d505      	bpl.n	801dd12 <_fwalk_sglue+0x22>
 801dd06:	6824      	ldr	r4, [r4, #0]
 801dd08:	2c00      	cmp	r4, #0
 801dd0a:	d1f7      	bne.n	801dcfc <_fwalk_sglue+0xc>
 801dd0c:	4630      	mov	r0, r6
 801dd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd12:	89ab      	ldrh	r3, [r5, #12]
 801dd14:	2b01      	cmp	r3, #1
 801dd16:	d907      	bls.n	801dd28 <_fwalk_sglue+0x38>
 801dd18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dd1c:	3301      	adds	r3, #1
 801dd1e:	d003      	beq.n	801dd28 <_fwalk_sglue+0x38>
 801dd20:	4629      	mov	r1, r5
 801dd22:	4638      	mov	r0, r7
 801dd24:	47c0      	blx	r8
 801dd26:	4306      	orrs	r6, r0
 801dd28:	3568      	adds	r5, #104	@ 0x68
 801dd2a:	e7e9      	b.n	801dd00 <_fwalk_sglue+0x10>

0801dd2c <iprintf>:
 801dd2c:	b40f      	push	{r0, r1, r2, r3}
 801dd2e:	b507      	push	{r0, r1, r2, lr}
 801dd30:	4906      	ldr	r1, [pc, #24]	@ (801dd4c <iprintf+0x20>)
 801dd32:	ab04      	add	r3, sp, #16
 801dd34:	6808      	ldr	r0, [r1, #0]
 801dd36:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd3a:	6881      	ldr	r1, [r0, #8]
 801dd3c:	9301      	str	r3, [sp, #4]
 801dd3e:	f002 febb 	bl	8020ab8 <_vfiprintf_r>
 801dd42:	b003      	add	sp, #12
 801dd44:	f85d eb04 	ldr.w	lr, [sp], #4
 801dd48:	b004      	add	sp, #16
 801dd4a:	4770      	bx	lr
 801dd4c:	2000003c 	.word	0x2000003c

0801dd50 <putchar>:
 801dd50:	4b02      	ldr	r3, [pc, #8]	@ (801dd5c <putchar+0xc>)
 801dd52:	4601      	mov	r1, r0
 801dd54:	6818      	ldr	r0, [r3, #0]
 801dd56:	6882      	ldr	r2, [r0, #8]
 801dd58:	f003 b8d4 	b.w	8020f04 <_putc_r>
 801dd5c:	2000003c 	.word	0x2000003c

0801dd60 <_puts_r>:
 801dd60:	6a03      	ldr	r3, [r0, #32]
 801dd62:	b570      	push	{r4, r5, r6, lr}
 801dd64:	6884      	ldr	r4, [r0, #8]
 801dd66:	4605      	mov	r5, r0
 801dd68:	460e      	mov	r6, r1
 801dd6a:	b90b      	cbnz	r3, 801dd70 <_puts_r+0x10>
 801dd6c:	f7ff ffa8 	bl	801dcc0 <__sinit>
 801dd70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dd72:	07db      	lsls	r3, r3, #31
 801dd74:	d405      	bmi.n	801dd82 <_puts_r+0x22>
 801dd76:	89a3      	ldrh	r3, [r4, #12]
 801dd78:	0598      	lsls	r0, r3, #22
 801dd7a:	d402      	bmi.n	801dd82 <_puts_r+0x22>
 801dd7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dd7e:	f000 fa7e 	bl	801e27e <__retarget_lock_acquire_recursive>
 801dd82:	89a3      	ldrh	r3, [r4, #12]
 801dd84:	0719      	lsls	r1, r3, #28
 801dd86:	d502      	bpl.n	801dd8e <_puts_r+0x2e>
 801dd88:	6923      	ldr	r3, [r4, #16]
 801dd8a:	2b00      	cmp	r3, #0
 801dd8c:	d135      	bne.n	801ddfa <_puts_r+0x9a>
 801dd8e:	4621      	mov	r1, r4
 801dd90:	4628      	mov	r0, r5
 801dd92:	f000 f9a1 	bl	801e0d8 <__swsetup_r>
 801dd96:	b380      	cbz	r0, 801ddfa <_puts_r+0x9a>
 801dd98:	f04f 35ff 	mov.w	r5, #4294967295
 801dd9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dd9e:	07da      	lsls	r2, r3, #31
 801dda0:	d405      	bmi.n	801ddae <_puts_r+0x4e>
 801dda2:	89a3      	ldrh	r3, [r4, #12]
 801dda4:	059b      	lsls	r3, r3, #22
 801dda6:	d402      	bmi.n	801ddae <_puts_r+0x4e>
 801dda8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ddaa:	f000 fa69 	bl	801e280 <__retarget_lock_release_recursive>
 801ddae:	4628      	mov	r0, r5
 801ddb0:	bd70      	pop	{r4, r5, r6, pc}
 801ddb2:	2b00      	cmp	r3, #0
 801ddb4:	da04      	bge.n	801ddc0 <_puts_r+0x60>
 801ddb6:	69a2      	ldr	r2, [r4, #24]
 801ddb8:	429a      	cmp	r2, r3
 801ddba:	dc17      	bgt.n	801ddec <_puts_r+0x8c>
 801ddbc:	290a      	cmp	r1, #10
 801ddbe:	d015      	beq.n	801ddec <_puts_r+0x8c>
 801ddc0:	6823      	ldr	r3, [r4, #0]
 801ddc2:	1c5a      	adds	r2, r3, #1
 801ddc4:	6022      	str	r2, [r4, #0]
 801ddc6:	7019      	strb	r1, [r3, #0]
 801ddc8:	68a3      	ldr	r3, [r4, #8]
 801ddca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ddce:	3b01      	subs	r3, #1
 801ddd0:	60a3      	str	r3, [r4, #8]
 801ddd2:	2900      	cmp	r1, #0
 801ddd4:	d1ed      	bne.n	801ddb2 <_puts_r+0x52>
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	da11      	bge.n	801ddfe <_puts_r+0x9e>
 801ddda:	4622      	mov	r2, r4
 801dddc:	210a      	movs	r1, #10
 801ddde:	4628      	mov	r0, r5
 801dde0:	f000 f93b 	bl	801e05a <__swbuf_r>
 801dde4:	3001      	adds	r0, #1
 801dde6:	d0d7      	beq.n	801dd98 <_puts_r+0x38>
 801dde8:	250a      	movs	r5, #10
 801ddea:	e7d7      	b.n	801dd9c <_puts_r+0x3c>
 801ddec:	4622      	mov	r2, r4
 801ddee:	4628      	mov	r0, r5
 801ddf0:	f000 f933 	bl	801e05a <__swbuf_r>
 801ddf4:	3001      	adds	r0, #1
 801ddf6:	d1e7      	bne.n	801ddc8 <_puts_r+0x68>
 801ddf8:	e7ce      	b.n	801dd98 <_puts_r+0x38>
 801ddfa:	3e01      	subs	r6, #1
 801ddfc:	e7e4      	b.n	801ddc8 <_puts_r+0x68>
 801ddfe:	6823      	ldr	r3, [r4, #0]
 801de00:	1c5a      	adds	r2, r3, #1
 801de02:	6022      	str	r2, [r4, #0]
 801de04:	220a      	movs	r2, #10
 801de06:	701a      	strb	r2, [r3, #0]
 801de08:	e7ee      	b.n	801dde8 <_puts_r+0x88>
	...

0801de0c <puts>:
 801de0c:	4b02      	ldr	r3, [pc, #8]	@ (801de18 <puts+0xc>)
 801de0e:	4601      	mov	r1, r0
 801de10:	6818      	ldr	r0, [r3, #0]
 801de12:	f7ff bfa5 	b.w	801dd60 <_puts_r>
 801de16:	bf00      	nop
 801de18:	2000003c 	.word	0x2000003c

0801de1c <setbuf>:
 801de1c:	fab1 f281 	clz	r2, r1
 801de20:	0952      	lsrs	r2, r2, #5
 801de22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801de26:	0052      	lsls	r2, r2, #1
 801de28:	f000 b800 	b.w	801de2c <setvbuf>

0801de2c <setvbuf>:
 801de2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801de30:	461d      	mov	r5, r3
 801de32:	4b57      	ldr	r3, [pc, #348]	@ (801df90 <setvbuf+0x164>)
 801de34:	681f      	ldr	r7, [r3, #0]
 801de36:	4604      	mov	r4, r0
 801de38:	460e      	mov	r6, r1
 801de3a:	4690      	mov	r8, r2
 801de3c:	b127      	cbz	r7, 801de48 <setvbuf+0x1c>
 801de3e:	6a3b      	ldr	r3, [r7, #32]
 801de40:	b913      	cbnz	r3, 801de48 <setvbuf+0x1c>
 801de42:	4638      	mov	r0, r7
 801de44:	f7ff ff3c 	bl	801dcc0 <__sinit>
 801de48:	f1b8 0f02 	cmp.w	r8, #2
 801de4c:	d006      	beq.n	801de5c <setvbuf+0x30>
 801de4e:	f1b8 0f01 	cmp.w	r8, #1
 801de52:	f200 809a 	bhi.w	801df8a <setvbuf+0x15e>
 801de56:	2d00      	cmp	r5, #0
 801de58:	f2c0 8097 	blt.w	801df8a <setvbuf+0x15e>
 801de5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801de5e:	07d9      	lsls	r1, r3, #31
 801de60:	d405      	bmi.n	801de6e <setvbuf+0x42>
 801de62:	89a3      	ldrh	r3, [r4, #12]
 801de64:	059a      	lsls	r2, r3, #22
 801de66:	d402      	bmi.n	801de6e <setvbuf+0x42>
 801de68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801de6a:	f000 fa08 	bl	801e27e <__retarget_lock_acquire_recursive>
 801de6e:	4621      	mov	r1, r4
 801de70:	4638      	mov	r0, r7
 801de72:	f002 ffbd 	bl	8020df0 <_fflush_r>
 801de76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801de78:	b141      	cbz	r1, 801de8c <setvbuf+0x60>
 801de7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801de7e:	4299      	cmp	r1, r3
 801de80:	d002      	beq.n	801de88 <setvbuf+0x5c>
 801de82:	4638      	mov	r0, r7
 801de84:	f001 f860 	bl	801ef48 <_free_r>
 801de88:	2300      	movs	r3, #0
 801de8a:	6363      	str	r3, [r4, #52]	@ 0x34
 801de8c:	2300      	movs	r3, #0
 801de8e:	61a3      	str	r3, [r4, #24]
 801de90:	6063      	str	r3, [r4, #4]
 801de92:	89a3      	ldrh	r3, [r4, #12]
 801de94:	061b      	lsls	r3, r3, #24
 801de96:	d503      	bpl.n	801dea0 <setvbuf+0x74>
 801de98:	6921      	ldr	r1, [r4, #16]
 801de9a:	4638      	mov	r0, r7
 801de9c:	f001 f854 	bl	801ef48 <_free_r>
 801dea0:	89a3      	ldrh	r3, [r4, #12]
 801dea2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 801dea6:	f023 0303 	bic.w	r3, r3, #3
 801deaa:	f1b8 0f02 	cmp.w	r8, #2
 801deae:	81a3      	strh	r3, [r4, #12]
 801deb0:	d061      	beq.n	801df76 <setvbuf+0x14a>
 801deb2:	ab01      	add	r3, sp, #4
 801deb4:	466a      	mov	r2, sp
 801deb6:	4621      	mov	r1, r4
 801deb8:	4638      	mov	r0, r7
 801deba:	f002 ffc1 	bl	8020e40 <__swhatbuf_r>
 801debe:	89a3      	ldrh	r3, [r4, #12]
 801dec0:	4318      	orrs	r0, r3
 801dec2:	81a0      	strh	r0, [r4, #12]
 801dec4:	bb2d      	cbnz	r5, 801df12 <setvbuf+0xe6>
 801dec6:	9d00      	ldr	r5, [sp, #0]
 801dec8:	4628      	mov	r0, r5
 801deca:	f001 f887 	bl	801efdc <malloc>
 801dece:	4606      	mov	r6, r0
 801ded0:	2800      	cmp	r0, #0
 801ded2:	d152      	bne.n	801df7a <setvbuf+0x14e>
 801ded4:	f8dd 9000 	ldr.w	r9, [sp]
 801ded8:	45a9      	cmp	r9, r5
 801deda:	d140      	bne.n	801df5e <setvbuf+0x132>
 801dedc:	f04f 35ff 	mov.w	r5, #4294967295
 801dee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dee4:	f043 0202 	orr.w	r2, r3, #2
 801dee8:	81a2      	strh	r2, [r4, #12]
 801deea:	2200      	movs	r2, #0
 801deec:	60a2      	str	r2, [r4, #8]
 801deee:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 801def2:	6022      	str	r2, [r4, #0]
 801def4:	6122      	str	r2, [r4, #16]
 801def6:	2201      	movs	r2, #1
 801def8:	6162      	str	r2, [r4, #20]
 801defa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801defc:	07d6      	lsls	r6, r2, #31
 801defe:	d404      	bmi.n	801df0a <setvbuf+0xde>
 801df00:	0598      	lsls	r0, r3, #22
 801df02:	d402      	bmi.n	801df0a <setvbuf+0xde>
 801df04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801df06:	f000 f9bb 	bl	801e280 <__retarget_lock_release_recursive>
 801df0a:	4628      	mov	r0, r5
 801df0c:	b003      	add	sp, #12
 801df0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801df12:	2e00      	cmp	r6, #0
 801df14:	d0d8      	beq.n	801dec8 <setvbuf+0x9c>
 801df16:	6a3b      	ldr	r3, [r7, #32]
 801df18:	b913      	cbnz	r3, 801df20 <setvbuf+0xf4>
 801df1a:	4638      	mov	r0, r7
 801df1c:	f7ff fed0 	bl	801dcc0 <__sinit>
 801df20:	f1b8 0f01 	cmp.w	r8, #1
 801df24:	bf08      	it	eq
 801df26:	89a3      	ldrheq	r3, [r4, #12]
 801df28:	6026      	str	r6, [r4, #0]
 801df2a:	bf04      	itt	eq
 801df2c:	f043 0301 	orreq.w	r3, r3, #1
 801df30:	81a3      	strheq	r3, [r4, #12]
 801df32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df36:	f013 0208 	ands.w	r2, r3, #8
 801df3a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801df3e:	d01e      	beq.n	801df7e <setvbuf+0x152>
 801df40:	07d9      	lsls	r1, r3, #31
 801df42:	bf41      	itttt	mi
 801df44:	2200      	movmi	r2, #0
 801df46:	426d      	negmi	r5, r5
 801df48:	60a2      	strmi	r2, [r4, #8]
 801df4a:	61a5      	strmi	r5, [r4, #24]
 801df4c:	bf58      	it	pl
 801df4e:	60a5      	strpl	r5, [r4, #8]
 801df50:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801df52:	07d2      	lsls	r2, r2, #31
 801df54:	d401      	bmi.n	801df5a <setvbuf+0x12e>
 801df56:	059b      	lsls	r3, r3, #22
 801df58:	d513      	bpl.n	801df82 <setvbuf+0x156>
 801df5a:	2500      	movs	r5, #0
 801df5c:	e7d5      	b.n	801df0a <setvbuf+0xde>
 801df5e:	4648      	mov	r0, r9
 801df60:	f001 f83c 	bl	801efdc <malloc>
 801df64:	4606      	mov	r6, r0
 801df66:	2800      	cmp	r0, #0
 801df68:	d0b8      	beq.n	801dedc <setvbuf+0xb0>
 801df6a:	89a3      	ldrh	r3, [r4, #12]
 801df6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801df70:	81a3      	strh	r3, [r4, #12]
 801df72:	464d      	mov	r5, r9
 801df74:	e7cf      	b.n	801df16 <setvbuf+0xea>
 801df76:	2500      	movs	r5, #0
 801df78:	e7b2      	b.n	801dee0 <setvbuf+0xb4>
 801df7a:	46a9      	mov	r9, r5
 801df7c:	e7f5      	b.n	801df6a <setvbuf+0x13e>
 801df7e:	60a2      	str	r2, [r4, #8]
 801df80:	e7e6      	b.n	801df50 <setvbuf+0x124>
 801df82:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801df84:	f000 f97c 	bl	801e280 <__retarget_lock_release_recursive>
 801df88:	e7e7      	b.n	801df5a <setvbuf+0x12e>
 801df8a:	f04f 35ff 	mov.w	r5, #4294967295
 801df8e:	e7bc      	b.n	801df0a <setvbuf+0xde>
 801df90:	2000003c 	.word	0x2000003c

0801df94 <siprintf>:
 801df94:	b40e      	push	{r1, r2, r3}
 801df96:	b500      	push	{lr}
 801df98:	b09c      	sub	sp, #112	@ 0x70
 801df9a:	ab1d      	add	r3, sp, #116	@ 0x74
 801df9c:	9002      	str	r0, [sp, #8]
 801df9e:	9006      	str	r0, [sp, #24]
 801dfa0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801dfa4:	4809      	ldr	r0, [pc, #36]	@ (801dfcc <siprintf+0x38>)
 801dfa6:	9107      	str	r1, [sp, #28]
 801dfa8:	9104      	str	r1, [sp, #16]
 801dfaa:	4909      	ldr	r1, [pc, #36]	@ (801dfd0 <siprintf+0x3c>)
 801dfac:	f853 2b04 	ldr.w	r2, [r3], #4
 801dfb0:	9105      	str	r1, [sp, #20]
 801dfb2:	6800      	ldr	r0, [r0, #0]
 801dfb4:	9301      	str	r3, [sp, #4]
 801dfb6:	a902      	add	r1, sp, #8
 801dfb8:	f002 fc58 	bl	802086c <_svfiprintf_r>
 801dfbc:	9b02      	ldr	r3, [sp, #8]
 801dfbe:	2200      	movs	r2, #0
 801dfc0:	701a      	strb	r2, [r3, #0]
 801dfc2:	b01c      	add	sp, #112	@ 0x70
 801dfc4:	f85d eb04 	ldr.w	lr, [sp], #4
 801dfc8:	b003      	add	sp, #12
 801dfca:	4770      	bx	lr
 801dfcc:	2000003c 	.word	0x2000003c
 801dfd0:	ffff0208 	.word	0xffff0208

0801dfd4 <__sread>:
 801dfd4:	b510      	push	{r4, lr}
 801dfd6:	460c      	mov	r4, r1
 801dfd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dfdc:	f000 f900 	bl	801e1e0 <_read_r>
 801dfe0:	2800      	cmp	r0, #0
 801dfe2:	bfab      	itete	ge
 801dfe4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801dfe6:	89a3      	ldrhlt	r3, [r4, #12]
 801dfe8:	181b      	addge	r3, r3, r0
 801dfea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801dfee:	bfac      	ite	ge
 801dff0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801dff2:	81a3      	strhlt	r3, [r4, #12]
 801dff4:	bd10      	pop	{r4, pc}

0801dff6 <__swrite>:
 801dff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dffa:	461f      	mov	r7, r3
 801dffc:	898b      	ldrh	r3, [r1, #12]
 801dffe:	05db      	lsls	r3, r3, #23
 801e000:	4605      	mov	r5, r0
 801e002:	460c      	mov	r4, r1
 801e004:	4616      	mov	r6, r2
 801e006:	d505      	bpl.n	801e014 <__swrite+0x1e>
 801e008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e00c:	2302      	movs	r3, #2
 801e00e:	2200      	movs	r2, #0
 801e010:	f000 f8d4 	bl	801e1bc <_lseek_r>
 801e014:	89a3      	ldrh	r3, [r4, #12]
 801e016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e01a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e01e:	81a3      	strh	r3, [r4, #12]
 801e020:	4632      	mov	r2, r6
 801e022:	463b      	mov	r3, r7
 801e024:	4628      	mov	r0, r5
 801e026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e02a:	f000 b8eb 	b.w	801e204 <_write_r>

0801e02e <__sseek>:
 801e02e:	b510      	push	{r4, lr}
 801e030:	460c      	mov	r4, r1
 801e032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e036:	f000 f8c1 	bl	801e1bc <_lseek_r>
 801e03a:	1c43      	adds	r3, r0, #1
 801e03c:	89a3      	ldrh	r3, [r4, #12]
 801e03e:	bf15      	itete	ne
 801e040:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e042:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e046:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e04a:	81a3      	strheq	r3, [r4, #12]
 801e04c:	bf18      	it	ne
 801e04e:	81a3      	strhne	r3, [r4, #12]
 801e050:	bd10      	pop	{r4, pc}

0801e052 <__sclose>:
 801e052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e056:	f000 b8a1 	b.w	801e19c <_close_r>

0801e05a <__swbuf_r>:
 801e05a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e05c:	460e      	mov	r6, r1
 801e05e:	4614      	mov	r4, r2
 801e060:	4605      	mov	r5, r0
 801e062:	b118      	cbz	r0, 801e06c <__swbuf_r+0x12>
 801e064:	6a03      	ldr	r3, [r0, #32]
 801e066:	b90b      	cbnz	r3, 801e06c <__swbuf_r+0x12>
 801e068:	f7ff fe2a 	bl	801dcc0 <__sinit>
 801e06c:	69a3      	ldr	r3, [r4, #24]
 801e06e:	60a3      	str	r3, [r4, #8]
 801e070:	89a3      	ldrh	r3, [r4, #12]
 801e072:	071a      	lsls	r2, r3, #28
 801e074:	d501      	bpl.n	801e07a <__swbuf_r+0x20>
 801e076:	6923      	ldr	r3, [r4, #16]
 801e078:	b943      	cbnz	r3, 801e08c <__swbuf_r+0x32>
 801e07a:	4621      	mov	r1, r4
 801e07c:	4628      	mov	r0, r5
 801e07e:	f000 f82b 	bl	801e0d8 <__swsetup_r>
 801e082:	b118      	cbz	r0, 801e08c <__swbuf_r+0x32>
 801e084:	f04f 37ff 	mov.w	r7, #4294967295
 801e088:	4638      	mov	r0, r7
 801e08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e08c:	6823      	ldr	r3, [r4, #0]
 801e08e:	6922      	ldr	r2, [r4, #16]
 801e090:	1a98      	subs	r0, r3, r2
 801e092:	6963      	ldr	r3, [r4, #20]
 801e094:	b2f6      	uxtb	r6, r6
 801e096:	4283      	cmp	r3, r0
 801e098:	4637      	mov	r7, r6
 801e09a:	dc05      	bgt.n	801e0a8 <__swbuf_r+0x4e>
 801e09c:	4621      	mov	r1, r4
 801e09e:	4628      	mov	r0, r5
 801e0a0:	f002 fea6 	bl	8020df0 <_fflush_r>
 801e0a4:	2800      	cmp	r0, #0
 801e0a6:	d1ed      	bne.n	801e084 <__swbuf_r+0x2a>
 801e0a8:	68a3      	ldr	r3, [r4, #8]
 801e0aa:	3b01      	subs	r3, #1
 801e0ac:	60a3      	str	r3, [r4, #8]
 801e0ae:	6823      	ldr	r3, [r4, #0]
 801e0b0:	1c5a      	adds	r2, r3, #1
 801e0b2:	6022      	str	r2, [r4, #0]
 801e0b4:	701e      	strb	r6, [r3, #0]
 801e0b6:	6962      	ldr	r2, [r4, #20]
 801e0b8:	1c43      	adds	r3, r0, #1
 801e0ba:	429a      	cmp	r2, r3
 801e0bc:	d004      	beq.n	801e0c8 <__swbuf_r+0x6e>
 801e0be:	89a3      	ldrh	r3, [r4, #12]
 801e0c0:	07db      	lsls	r3, r3, #31
 801e0c2:	d5e1      	bpl.n	801e088 <__swbuf_r+0x2e>
 801e0c4:	2e0a      	cmp	r6, #10
 801e0c6:	d1df      	bne.n	801e088 <__swbuf_r+0x2e>
 801e0c8:	4621      	mov	r1, r4
 801e0ca:	4628      	mov	r0, r5
 801e0cc:	f002 fe90 	bl	8020df0 <_fflush_r>
 801e0d0:	2800      	cmp	r0, #0
 801e0d2:	d0d9      	beq.n	801e088 <__swbuf_r+0x2e>
 801e0d4:	e7d6      	b.n	801e084 <__swbuf_r+0x2a>
	...

0801e0d8 <__swsetup_r>:
 801e0d8:	b538      	push	{r3, r4, r5, lr}
 801e0da:	4b29      	ldr	r3, [pc, #164]	@ (801e180 <__swsetup_r+0xa8>)
 801e0dc:	4605      	mov	r5, r0
 801e0de:	6818      	ldr	r0, [r3, #0]
 801e0e0:	460c      	mov	r4, r1
 801e0e2:	b118      	cbz	r0, 801e0ec <__swsetup_r+0x14>
 801e0e4:	6a03      	ldr	r3, [r0, #32]
 801e0e6:	b90b      	cbnz	r3, 801e0ec <__swsetup_r+0x14>
 801e0e8:	f7ff fdea 	bl	801dcc0 <__sinit>
 801e0ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0f0:	0719      	lsls	r1, r3, #28
 801e0f2:	d422      	bmi.n	801e13a <__swsetup_r+0x62>
 801e0f4:	06da      	lsls	r2, r3, #27
 801e0f6:	d407      	bmi.n	801e108 <__swsetup_r+0x30>
 801e0f8:	2209      	movs	r2, #9
 801e0fa:	602a      	str	r2, [r5, #0]
 801e0fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e100:	81a3      	strh	r3, [r4, #12]
 801e102:	f04f 30ff 	mov.w	r0, #4294967295
 801e106:	e033      	b.n	801e170 <__swsetup_r+0x98>
 801e108:	0758      	lsls	r0, r3, #29
 801e10a:	d512      	bpl.n	801e132 <__swsetup_r+0x5a>
 801e10c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e10e:	b141      	cbz	r1, 801e122 <__swsetup_r+0x4a>
 801e110:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e114:	4299      	cmp	r1, r3
 801e116:	d002      	beq.n	801e11e <__swsetup_r+0x46>
 801e118:	4628      	mov	r0, r5
 801e11a:	f000 ff15 	bl	801ef48 <_free_r>
 801e11e:	2300      	movs	r3, #0
 801e120:	6363      	str	r3, [r4, #52]	@ 0x34
 801e122:	89a3      	ldrh	r3, [r4, #12]
 801e124:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e128:	81a3      	strh	r3, [r4, #12]
 801e12a:	2300      	movs	r3, #0
 801e12c:	6063      	str	r3, [r4, #4]
 801e12e:	6923      	ldr	r3, [r4, #16]
 801e130:	6023      	str	r3, [r4, #0]
 801e132:	89a3      	ldrh	r3, [r4, #12]
 801e134:	f043 0308 	orr.w	r3, r3, #8
 801e138:	81a3      	strh	r3, [r4, #12]
 801e13a:	6923      	ldr	r3, [r4, #16]
 801e13c:	b94b      	cbnz	r3, 801e152 <__swsetup_r+0x7a>
 801e13e:	89a3      	ldrh	r3, [r4, #12]
 801e140:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e148:	d003      	beq.n	801e152 <__swsetup_r+0x7a>
 801e14a:	4621      	mov	r1, r4
 801e14c:	4628      	mov	r0, r5
 801e14e:	f002 fe9d 	bl	8020e8c <__smakebuf_r>
 801e152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e156:	f013 0201 	ands.w	r2, r3, #1
 801e15a:	d00a      	beq.n	801e172 <__swsetup_r+0x9a>
 801e15c:	2200      	movs	r2, #0
 801e15e:	60a2      	str	r2, [r4, #8]
 801e160:	6962      	ldr	r2, [r4, #20]
 801e162:	4252      	negs	r2, r2
 801e164:	61a2      	str	r2, [r4, #24]
 801e166:	6922      	ldr	r2, [r4, #16]
 801e168:	b942      	cbnz	r2, 801e17c <__swsetup_r+0xa4>
 801e16a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e16e:	d1c5      	bne.n	801e0fc <__swsetup_r+0x24>
 801e170:	bd38      	pop	{r3, r4, r5, pc}
 801e172:	0799      	lsls	r1, r3, #30
 801e174:	bf58      	it	pl
 801e176:	6962      	ldrpl	r2, [r4, #20]
 801e178:	60a2      	str	r2, [r4, #8]
 801e17a:	e7f4      	b.n	801e166 <__swsetup_r+0x8e>
 801e17c:	2000      	movs	r0, #0
 801e17e:	e7f7      	b.n	801e170 <__swsetup_r+0x98>
 801e180:	2000003c 	.word	0x2000003c

0801e184 <memset>:
 801e184:	4402      	add	r2, r0
 801e186:	4603      	mov	r3, r0
 801e188:	4293      	cmp	r3, r2
 801e18a:	d100      	bne.n	801e18e <memset+0xa>
 801e18c:	4770      	bx	lr
 801e18e:	f803 1b01 	strb.w	r1, [r3], #1
 801e192:	e7f9      	b.n	801e188 <memset+0x4>

0801e194 <_localeconv_r>:
 801e194:	4800      	ldr	r0, [pc, #0]	@ (801e198 <_localeconv_r+0x4>)
 801e196:	4770      	bx	lr
 801e198:	2000017c 	.word	0x2000017c

0801e19c <_close_r>:
 801e19c:	b538      	push	{r3, r4, r5, lr}
 801e19e:	4d06      	ldr	r5, [pc, #24]	@ (801e1b8 <_close_r+0x1c>)
 801e1a0:	2300      	movs	r3, #0
 801e1a2:	4604      	mov	r4, r0
 801e1a4:	4608      	mov	r0, r1
 801e1a6:	602b      	str	r3, [r5, #0]
 801e1a8:	f7e6 fd66 	bl	8004c78 <_close>
 801e1ac:	1c43      	adds	r3, r0, #1
 801e1ae:	d102      	bne.n	801e1b6 <_close_r+0x1a>
 801e1b0:	682b      	ldr	r3, [r5, #0]
 801e1b2:	b103      	cbz	r3, 801e1b6 <_close_r+0x1a>
 801e1b4:	6023      	str	r3, [r4, #0]
 801e1b6:	bd38      	pop	{r3, r4, r5, pc}
 801e1b8:	2001bee0 	.word	0x2001bee0

0801e1bc <_lseek_r>:
 801e1bc:	b538      	push	{r3, r4, r5, lr}
 801e1be:	4d07      	ldr	r5, [pc, #28]	@ (801e1dc <_lseek_r+0x20>)
 801e1c0:	4604      	mov	r4, r0
 801e1c2:	4608      	mov	r0, r1
 801e1c4:	4611      	mov	r1, r2
 801e1c6:	2200      	movs	r2, #0
 801e1c8:	602a      	str	r2, [r5, #0]
 801e1ca:	461a      	mov	r2, r3
 801e1cc:	f7e6 fd7b 	bl	8004cc6 <_lseek>
 801e1d0:	1c43      	adds	r3, r0, #1
 801e1d2:	d102      	bne.n	801e1da <_lseek_r+0x1e>
 801e1d4:	682b      	ldr	r3, [r5, #0]
 801e1d6:	b103      	cbz	r3, 801e1da <_lseek_r+0x1e>
 801e1d8:	6023      	str	r3, [r4, #0]
 801e1da:	bd38      	pop	{r3, r4, r5, pc}
 801e1dc:	2001bee0 	.word	0x2001bee0

0801e1e0 <_read_r>:
 801e1e0:	b538      	push	{r3, r4, r5, lr}
 801e1e2:	4d07      	ldr	r5, [pc, #28]	@ (801e200 <_read_r+0x20>)
 801e1e4:	4604      	mov	r4, r0
 801e1e6:	4608      	mov	r0, r1
 801e1e8:	4611      	mov	r1, r2
 801e1ea:	2200      	movs	r2, #0
 801e1ec:	602a      	str	r2, [r5, #0]
 801e1ee:	461a      	mov	r2, r3
 801e1f0:	f7e6 fd09 	bl	8004c06 <_read>
 801e1f4:	1c43      	adds	r3, r0, #1
 801e1f6:	d102      	bne.n	801e1fe <_read_r+0x1e>
 801e1f8:	682b      	ldr	r3, [r5, #0]
 801e1fa:	b103      	cbz	r3, 801e1fe <_read_r+0x1e>
 801e1fc:	6023      	str	r3, [r4, #0]
 801e1fe:	bd38      	pop	{r3, r4, r5, pc}
 801e200:	2001bee0 	.word	0x2001bee0

0801e204 <_write_r>:
 801e204:	b538      	push	{r3, r4, r5, lr}
 801e206:	4d07      	ldr	r5, [pc, #28]	@ (801e224 <_write_r+0x20>)
 801e208:	4604      	mov	r4, r0
 801e20a:	4608      	mov	r0, r1
 801e20c:	4611      	mov	r1, r2
 801e20e:	2200      	movs	r2, #0
 801e210:	602a      	str	r2, [r5, #0]
 801e212:	461a      	mov	r2, r3
 801e214:	f7e6 fd14 	bl	8004c40 <_write>
 801e218:	1c43      	adds	r3, r0, #1
 801e21a:	d102      	bne.n	801e222 <_write_r+0x1e>
 801e21c:	682b      	ldr	r3, [r5, #0]
 801e21e:	b103      	cbz	r3, 801e222 <_write_r+0x1e>
 801e220:	6023      	str	r3, [r4, #0]
 801e222:	bd38      	pop	{r3, r4, r5, pc}
 801e224:	2001bee0 	.word	0x2001bee0

0801e228 <__errno>:
 801e228:	4b01      	ldr	r3, [pc, #4]	@ (801e230 <__errno+0x8>)
 801e22a:	6818      	ldr	r0, [r3, #0]
 801e22c:	4770      	bx	lr
 801e22e:	bf00      	nop
 801e230:	2000003c 	.word	0x2000003c

0801e234 <__libc_init_array>:
 801e234:	b570      	push	{r4, r5, r6, lr}
 801e236:	4d0d      	ldr	r5, [pc, #52]	@ (801e26c <__libc_init_array+0x38>)
 801e238:	4c0d      	ldr	r4, [pc, #52]	@ (801e270 <__libc_init_array+0x3c>)
 801e23a:	1b64      	subs	r4, r4, r5
 801e23c:	10a4      	asrs	r4, r4, #2
 801e23e:	2600      	movs	r6, #0
 801e240:	42a6      	cmp	r6, r4
 801e242:	d109      	bne.n	801e258 <__libc_init_array+0x24>
 801e244:	4d0b      	ldr	r5, [pc, #44]	@ (801e274 <__libc_init_array+0x40>)
 801e246:	4c0c      	ldr	r4, [pc, #48]	@ (801e278 <__libc_init_array+0x44>)
 801e248:	f003 fb14 	bl	8021874 <_init>
 801e24c:	1b64      	subs	r4, r4, r5
 801e24e:	10a4      	asrs	r4, r4, #2
 801e250:	2600      	movs	r6, #0
 801e252:	42a6      	cmp	r6, r4
 801e254:	d105      	bne.n	801e262 <__libc_init_array+0x2e>
 801e256:	bd70      	pop	{r4, r5, r6, pc}
 801e258:	f855 3b04 	ldr.w	r3, [r5], #4
 801e25c:	4798      	blx	r3
 801e25e:	3601      	adds	r6, #1
 801e260:	e7ee      	b.n	801e240 <__libc_init_array+0xc>
 801e262:	f855 3b04 	ldr.w	r3, [r5], #4
 801e266:	4798      	blx	r3
 801e268:	3601      	adds	r6, #1
 801e26a:	e7f2      	b.n	801e252 <__libc_init_array+0x1e>
 801e26c:	08022bb0 	.word	0x08022bb0
 801e270:	08022bb0 	.word	0x08022bb0
 801e274:	08022bb0 	.word	0x08022bb0
 801e278:	08022bb4 	.word	0x08022bb4

0801e27c <__retarget_lock_init_recursive>:
 801e27c:	4770      	bx	lr

0801e27e <__retarget_lock_acquire_recursive>:
 801e27e:	4770      	bx	lr

0801e280 <__retarget_lock_release_recursive>:
 801e280:	4770      	bx	lr

0801e282 <memcpy>:
 801e282:	440a      	add	r2, r1
 801e284:	4291      	cmp	r1, r2
 801e286:	f100 33ff 	add.w	r3, r0, #4294967295
 801e28a:	d100      	bne.n	801e28e <memcpy+0xc>
 801e28c:	4770      	bx	lr
 801e28e:	b510      	push	{r4, lr}
 801e290:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e294:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e298:	4291      	cmp	r1, r2
 801e29a:	d1f9      	bne.n	801e290 <memcpy+0xe>
 801e29c:	bd10      	pop	{r4, pc}
	...

0801e2a0 <nanf>:
 801e2a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801e2a8 <nanf+0x8>
 801e2a4:	4770      	bx	lr
 801e2a6:	bf00      	nop
 801e2a8:	7fc00000 	.word	0x7fc00000

0801e2ac <quorem>:
 801e2ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2b0:	6903      	ldr	r3, [r0, #16]
 801e2b2:	690c      	ldr	r4, [r1, #16]
 801e2b4:	42a3      	cmp	r3, r4
 801e2b6:	4607      	mov	r7, r0
 801e2b8:	db7e      	blt.n	801e3b8 <quorem+0x10c>
 801e2ba:	3c01      	subs	r4, #1
 801e2bc:	f101 0814 	add.w	r8, r1, #20
 801e2c0:	00a3      	lsls	r3, r4, #2
 801e2c2:	f100 0514 	add.w	r5, r0, #20
 801e2c6:	9300      	str	r3, [sp, #0]
 801e2c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e2cc:	9301      	str	r3, [sp, #4]
 801e2ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e2d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e2d6:	3301      	adds	r3, #1
 801e2d8:	429a      	cmp	r2, r3
 801e2da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e2de:	fbb2 f6f3 	udiv	r6, r2, r3
 801e2e2:	d32e      	bcc.n	801e342 <quorem+0x96>
 801e2e4:	f04f 0a00 	mov.w	sl, #0
 801e2e8:	46c4      	mov	ip, r8
 801e2ea:	46ae      	mov	lr, r5
 801e2ec:	46d3      	mov	fp, sl
 801e2ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e2f2:	b298      	uxth	r0, r3
 801e2f4:	fb06 a000 	mla	r0, r6, r0, sl
 801e2f8:	0c02      	lsrs	r2, r0, #16
 801e2fa:	0c1b      	lsrs	r3, r3, #16
 801e2fc:	fb06 2303 	mla	r3, r6, r3, r2
 801e300:	f8de 2000 	ldr.w	r2, [lr]
 801e304:	b280      	uxth	r0, r0
 801e306:	b292      	uxth	r2, r2
 801e308:	1a12      	subs	r2, r2, r0
 801e30a:	445a      	add	r2, fp
 801e30c:	f8de 0000 	ldr.w	r0, [lr]
 801e310:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e314:	b29b      	uxth	r3, r3
 801e316:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801e31a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801e31e:	b292      	uxth	r2, r2
 801e320:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801e324:	45e1      	cmp	r9, ip
 801e326:	f84e 2b04 	str.w	r2, [lr], #4
 801e32a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801e32e:	d2de      	bcs.n	801e2ee <quorem+0x42>
 801e330:	9b00      	ldr	r3, [sp, #0]
 801e332:	58eb      	ldr	r3, [r5, r3]
 801e334:	b92b      	cbnz	r3, 801e342 <quorem+0x96>
 801e336:	9b01      	ldr	r3, [sp, #4]
 801e338:	3b04      	subs	r3, #4
 801e33a:	429d      	cmp	r5, r3
 801e33c:	461a      	mov	r2, r3
 801e33e:	d32f      	bcc.n	801e3a0 <quorem+0xf4>
 801e340:	613c      	str	r4, [r7, #16]
 801e342:	4638      	mov	r0, r7
 801e344:	f001 f9c4 	bl	801f6d0 <__mcmp>
 801e348:	2800      	cmp	r0, #0
 801e34a:	db25      	blt.n	801e398 <quorem+0xec>
 801e34c:	4629      	mov	r1, r5
 801e34e:	2000      	movs	r0, #0
 801e350:	f858 2b04 	ldr.w	r2, [r8], #4
 801e354:	f8d1 c000 	ldr.w	ip, [r1]
 801e358:	fa1f fe82 	uxth.w	lr, r2
 801e35c:	fa1f f38c 	uxth.w	r3, ip
 801e360:	eba3 030e 	sub.w	r3, r3, lr
 801e364:	4403      	add	r3, r0
 801e366:	0c12      	lsrs	r2, r2, #16
 801e368:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801e36c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801e370:	b29b      	uxth	r3, r3
 801e372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e376:	45c1      	cmp	r9, r8
 801e378:	f841 3b04 	str.w	r3, [r1], #4
 801e37c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801e380:	d2e6      	bcs.n	801e350 <quorem+0xa4>
 801e382:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e386:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e38a:	b922      	cbnz	r2, 801e396 <quorem+0xea>
 801e38c:	3b04      	subs	r3, #4
 801e38e:	429d      	cmp	r5, r3
 801e390:	461a      	mov	r2, r3
 801e392:	d30b      	bcc.n	801e3ac <quorem+0x100>
 801e394:	613c      	str	r4, [r7, #16]
 801e396:	3601      	adds	r6, #1
 801e398:	4630      	mov	r0, r6
 801e39a:	b003      	add	sp, #12
 801e39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3a0:	6812      	ldr	r2, [r2, #0]
 801e3a2:	3b04      	subs	r3, #4
 801e3a4:	2a00      	cmp	r2, #0
 801e3a6:	d1cb      	bne.n	801e340 <quorem+0x94>
 801e3a8:	3c01      	subs	r4, #1
 801e3aa:	e7c6      	b.n	801e33a <quorem+0x8e>
 801e3ac:	6812      	ldr	r2, [r2, #0]
 801e3ae:	3b04      	subs	r3, #4
 801e3b0:	2a00      	cmp	r2, #0
 801e3b2:	d1ef      	bne.n	801e394 <quorem+0xe8>
 801e3b4:	3c01      	subs	r4, #1
 801e3b6:	e7ea      	b.n	801e38e <quorem+0xe2>
 801e3b8:	2000      	movs	r0, #0
 801e3ba:	e7ee      	b.n	801e39a <quorem+0xee>
 801e3bc:	0000      	movs	r0, r0
	...

0801e3c0 <_dtoa_r>:
 801e3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3c4:	69c7      	ldr	r7, [r0, #28]
 801e3c6:	b099      	sub	sp, #100	@ 0x64
 801e3c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e3cc:	ec55 4b10 	vmov	r4, r5, d0
 801e3d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801e3d2:	9109      	str	r1, [sp, #36]	@ 0x24
 801e3d4:	4683      	mov	fp, r0
 801e3d6:	920e      	str	r2, [sp, #56]	@ 0x38
 801e3d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e3da:	b97f      	cbnz	r7, 801e3fc <_dtoa_r+0x3c>
 801e3dc:	2010      	movs	r0, #16
 801e3de:	f000 fdfd 	bl	801efdc <malloc>
 801e3e2:	4602      	mov	r2, r0
 801e3e4:	f8cb 001c 	str.w	r0, [fp, #28]
 801e3e8:	b920      	cbnz	r0, 801e3f4 <_dtoa_r+0x34>
 801e3ea:	4ba7      	ldr	r3, [pc, #668]	@ (801e688 <_dtoa_r+0x2c8>)
 801e3ec:	21ef      	movs	r1, #239	@ 0xef
 801e3ee:	48a7      	ldr	r0, [pc, #668]	@ (801e68c <_dtoa_r+0x2cc>)
 801e3f0:	f002 fe22 	bl	8021038 <__assert_func>
 801e3f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801e3f8:	6007      	str	r7, [r0, #0]
 801e3fa:	60c7      	str	r7, [r0, #12]
 801e3fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e400:	6819      	ldr	r1, [r3, #0]
 801e402:	b159      	cbz	r1, 801e41c <_dtoa_r+0x5c>
 801e404:	685a      	ldr	r2, [r3, #4]
 801e406:	604a      	str	r2, [r1, #4]
 801e408:	2301      	movs	r3, #1
 801e40a:	4093      	lsls	r3, r2
 801e40c:	608b      	str	r3, [r1, #8]
 801e40e:	4658      	mov	r0, fp
 801e410:	f000 feda 	bl	801f1c8 <_Bfree>
 801e414:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e418:	2200      	movs	r2, #0
 801e41a:	601a      	str	r2, [r3, #0]
 801e41c:	1e2b      	subs	r3, r5, #0
 801e41e:	bfb9      	ittee	lt
 801e420:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801e424:	9303      	strlt	r3, [sp, #12]
 801e426:	2300      	movge	r3, #0
 801e428:	6033      	strge	r3, [r6, #0]
 801e42a:	9f03      	ldr	r7, [sp, #12]
 801e42c:	4b98      	ldr	r3, [pc, #608]	@ (801e690 <_dtoa_r+0x2d0>)
 801e42e:	bfbc      	itt	lt
 801e430:	2201      	movlt	r2, #1
 801e432:	6032      	strlt	r2, [r6, #0]
 801e434:	43bb      	bics	r3, r7
 801e436:	d112      	bne.n	801e45e <_dtoa_r+0x9e>
 801e438:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e43a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801e43e:	6013      	str	r3, [r2, #0]
 801e440:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e444:	4323      	orrs	r3, r4
 801e446:	f000 854d 	beq.w	801eee4 <_dtoa_r+0xb24>
 801e44a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e44c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801e6a4 <_dtoa_r+0x2e4>
 801e450:	2b00      	cmp	r3, #0
 801e452:	f000 854f 	beq.w	801eef4 <_dtoa_r+0xb34>
 801e456:	f10a 0303 	add.w	r3, sl, #3
 801e45a:	f000 bd49 	b.w	801eef0 <_dtoa_r+0xb30>
 801e45e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e462:	2200      	movs	r2, #0
 801e464:	ec51 0b17 	vmov	r0, r1, d7
 801e468:	2300      	movs	r3, #0
 801e46a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801e46e:	f7e2 fb53 	bl	8000b18 <__aeabi_dcmpeq>
 801e472:	4680      	mov	r8, r0
 801e474:	b158      	cbz	r0, 801e48e <_dtoa_r+0xce>
 801e476:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e478:	2301      	movs	r3, #1
 801e47a:	6013      	str	r3, [r2, #0]
 801e47c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e47e:	b113      	cbz	r3, 801e486 <_dtoa_r+0xc6>
 801e480:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e482:	4b84      	ldr	r3, [pc, #528]	@ (801e694 <_dtoa_r+0x2d4>)
 801e484:	6013      	str	r3, [r2, #0]
 801e486:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801e6a8 <_dtoa_r+0x2e8>
 801e48a:	f000 bd33 	b.w	801eef4 <_dtoa_r+0xb34>
 801e48e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801e492:	aa16      	add	r2, sp, #88	@ 0x58
 801e494:	a917      	add	r1, sp, #92	@ 0x5c
 801e496:	4658      	mov	r0, fp
 801e498:	f001 fa3a 	bl	801f910 <__d2b>
 801e49c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801e4a0:	4681      	mov	r9, r0
 801e4a2:	2e00      	cmp	r6, #0
 801e4a4:	d077      	beq.n	801e596 <_dtoa_r+0x1d6>
 801e4a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e4a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801e4ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e4b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e4b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801e4b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801e4bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801e4c0:	4619      	mov	r1, r3
 801e4c2:	2200      	movs	r2, #0
 801e4c4:	4b74      	ldr	r3, [pc, #464]	@ (801e698 <_dtoa_r+0x2d8>)
 801e4c6:	f7e1 ff07 	bl	80002d8 <__aeabi_dsub>
 801e4ca:	a369      	add	r3, pc, #420	@ (adr r3, 801e670 <_dtoa_r+0x2b0>)
 801e4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4d0:	f7e2 f8ba 	bl	8000648 <__aeabi_dmul>
 801e4d4:	a368      	add	r3, pc, #416	@ (adr r3, 801e678 <_dtoa_r+0x2b8>)
 801e4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4da:	f7e1 feff 	bl	80002dc <__adddf3>
 801e4de:	4604      	mov	r4, r0
 801e4e0:	4630      	mov	r0, r6
 801e4e2:	460d      	mov	r5, r1
 801e4e4:	f7e2 f846 	bl	8000574 <__aeabi_i2d>
 801e4e8:	a365      	add	r3, pc, #404	@ (adr r3, 801e680 <_dtoa_r+0x2c0>)
 801e4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4ee:	f7e2 f8ab 	bl	8000648 <__aeabi_dmul>
 801e4f2:	4602      	mov	r2, r0
 801e4f4:	460b      	mov	r3, r1
 801e4f6:	4620      	mov	r0, r4
 801e4f8:	4629      	mov	r1, r5
 801e4fa:	f7e1 feef 	bl	80002dc <__adddf3>
 801e4fe:	4604      	mov	r4, r0
 801e500:	460d      	mov	r5, r1
 801e502:	f7e2 fb51 	bl	8000ba8 <__aeabi_d2iz>
 801e506:	2200      	movs	r2, #0
 801e508:	4607      	mov	r7, r0
 801e50a:	2300      	movs	r3, #0
 801e50c:	4620      	mov	r0, r4
 801e50e:	4629      	mov	r1, r5
 801e510:	f7e2 fb0c 	bl	8000b2c <__aeabi_dcmplt>
 801e514:	b140      	cbz	r0, 801e528 <_dtoa_r+0x168>
 801e516:	4638      	mov	r0, r7
 801e518:	f7e2 f82c 	bl	8000574 <__aeabi_i2d>
 801e51c:	4622      	mov	r2, r4
 801e51e:	462b      	mov	r3, r5
 801e520:	f7e2 fafa 	bl	8000b18 <__aeabi_dcmpeq>
 801e524:	b900      	cbnz	r0, 801e528 <_dtoa_r+0x168>
 801e526:	3f01      	subs	r7, #1
 801e528:	2f16      	cmp	r7, #22
 801e52a:	d851      	bhi.n	801e5d0 <_dtoa_r+0x210>
 801e52c:	4b5b      	ldr	r3, [pc, #364]	@ (801e69c <_dtoa_r+0x2dc>)
 801e52e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e532:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e536:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e53a:	f7e2 faf7 	bl	8000b2c <__aeabi_dcmplt>
 801e53e:	2800      	cmp	r0, #0
 801e540:	d048      	beq.n	801e5d4 <_dtoa_r+0x214>
 801e542:	3f01      	subs	r7, #1
 801e544:	2300      	movs	r3, #0
 801e546:	9312      	str	r3, [sp, #72]	@ 0x48
 801e548:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e54a:	1b9b      	subs	r3, r3, r6
 801e54c:	1e5a      	subs	r2, r3, #1
 801e54e:	bf44      	itt	mi
 801e550:	f1c3 0801 	rsbmi	r8, r3, #1
 801e554:	2300      	movmi	r3, #0
 801e556:	9208      	str	r2, [sp, #32]
 801e558:	bf54      	ite	pl
 801e55a:	f04f 0800 	movpl.w	r8, #0
 801e55e:	9308      	strmi	r3, [sp, #32]
 801e560:	2f00      	cmp	r7, #0
 801e562:	db39      	blt.n	801e5d8 <_dtoa_r+0x218>
 801e564:	9b08      	ldr	r3, [sp, #32]
 801e566:	970f      	str	r7, [sp, #60]	@ 0x3c
 801e568:	443b      	add	r3, r7
 801e56a:	9308      	str	r3, [sp, #32]
 801e56c:	2300      	movs	r3, #0
 801e56e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e572:	2b09      	cmp	r3, #9
 801e574:	d864      	bhi.n	801e640 <_dtoa_r+0x280>
 801e576:	2b05      	cmp	r3, #5
 801e578:	bfc4      	itt	gt
 801e57a:	3b04      	subgt	r3, #4
 801e57c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801e57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e580:	f1a3 0302 	sub.w	r3, r3, #2
 801e584:	bfcc      	ite	gt
 801e586:	2400      	movgt	r4, #0
 801e588:	2401      	movle	r4, #1
 801e58a:	2b03      	cmp	r3, #3
 801e58c:	d863      	bhi.n	801e656 <_dtoa_r+0x296>
 801e58e:	e8df f003 	tbb	[pc, r3]
 801e592:	372a      	.short	0x372a
 801e594:	5535      	.short	0x5535
 801e596:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801e59a:	441e      	add	r6, r3
 801e59c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801e5a0:	2b20      	cmp	r3, #32
 801e5a2:	bfc1      	itttt	gt
 801e5a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801e5a8:	409f      	lslgt	r7, r3
 801e5aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801e5ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 801e5b2:	bfd6      	itet	le
 801e5b4:	f1c3 0320 	rsble	r3, r3, #32
 801e5b8:	ea47 0003 	orrgt.w	r0, r7, r3
 801e5bc:	fa04 f003 	lslle.w	r0, r4, r3
 801e5c0:	f7e1 ffc8 	bl	8000554 <__aeabi_ui2d>
 801e5c4:	2201      	movs	r2, #1
 801e5c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801e5ca:	3e01      	subs	r6, #1
 801e5cc:	9214      	str	r2, [sp, #80]	@ 0x50
 801e5ce:	e777      	b.n	801e4c0 <_dtoa_r+0x100>
 801e5d0:	2301      	movs	r3, #1
 801e5d2:	e7b8      	b.n	801e546 <_dtoa_r+0x186>
 801e5d4:	9012      	str	r0, [sp, #72]	@ 0x48
 801e5d6:	e7b7      	b.n	801e548 <_dtoa_r+0x188>
 801e5d8:	427b      	negs	r3, r7
 801e5da:	930a      	str	r3, [sp, #40]	@ 0x28
 801e5dc:	2300      	movs	r3, #0
 801e5de:	eba8 0807 	sub.w	r8, r8, r7
 801e5e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e5e4:	e7c4      	b.n	801e570 <_dtoa_r+0x1b0>
 801e5e6:	2300      	movs	r3, #0
 801e5e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e5ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	dc35      	bgt.n	801e65c <_dtoa_r+0x29c>
 801e5f0:	2301      	movs	r3, #1
 801e5f2:	9300      	str	r3, [sp, #0]
 801e5f4:	9307      	str	r3, [sp, #28]
 801e5f6:	461a      	mov	r2, r3
 801e5f8:	920e      	str	r2, [sp, #56]	@ 0x38
 801e5fa:	e00b      	b.n	801e614 <_dtoa_r+0x254>
 801e5fc:	2301      	movs	r3, #1
 801e5fe:	e7f3      	b.n	801e5e8 <_dtoa_r+0x228>
 801e600:	2300      	movs	r3, #0
 801e602:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e604:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e606:	18fb      	adds	r3, r7, r3
 801e608:	9300      	str	r3, [sp, #0]
 801e60a:	3301      	adds	r3, #1
 801e60c:	2b01      	cmp	r3, #1
 801e60e:	9307      	str	r3, [sp, #28]
 801e610:	bfb8      	it	lt
 801e612:	2301      	movlt	r3, #1
 801e614:	f8db 001c 	ldr.w	r0, [fp, #28]
 801e618:	2100      	movs	r1, #0
 801e61a:	2204      	movs	r2, #4
 801e61c:	f102 0514 	add.w	r5, r2, #20
 801e620:	429d      	cmp	r5, r3
 801e622:	d91f      	bls.n	801e664 <_dtoa_r+0x2a4>
 801e624:	6041      	str	r1, [r0, #4]
 801e626:	4658      	mov	r0, fp
 801e628:	f000 fd8e 	bl	801f148 <_Balloc>
 801e62c:	4682      	mov	sl, r0
 801e62e:	2800      	cmp	r0, #0
 801e630:	d13c      	bne.n	801e6ac <_dtoa_r+0x2ec>
 801e632:	4b1b      	ldr	r3, [pc, #108]	@ (801e6a0 <_dtoa_r+0x2e0>)
 801e634:	4602      	mov	r2, r0
 801e636:	f240 11af 	movw	r1, #431	@ 0x1af
 801e63a:	e6d8      	b.n	801e3ee <_dtoa_r+0x2e>
 801e63c:	2301      	movs	r3, #1
 801e63e:	e7e0      	b.n	801e602 <_dtoa_r+0x242>
 801e640:	2401      	movs	r4, #1
 801e642:	2300      	movs	r3, #0
 801e644:	9309      	str	r3, [sp, #36]	@ 0x24
 801e646:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e648:	f04f 33ff 	mov.w	r3, #4294967295
 801e64c:	9300      	str	r3, [sp, #0]
 801e64e:	9307      	str	r3, [sp, #28]
 801e650:	2200      	movs	r2, #0
 801e652:	2312      	movs	r3, #18
 801e654:	e7d0      	b.n	801e5f8 <_dtoa_r+0x238>
 801e656:	2301      	movs	r3, #1
 801e658:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e65a:	e7f5      	b.n	801e648 <_dtoa_r+0x288>
 801e65c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e65e:	9300      	str	r3, [sp, #0]
 801e660:	9307      	str	r3, [sp, #28]
 801e662:	e7d7      	b.n	801e614 <_dtoa_r+0x254>
 801e664:	3101      	adds	r1, #1
 801e666:	0052      	lsls	r2, r2, #1
 801e668:	e7d8      	b.n	801e61c <_dtoa_r+0x25c>
 801e66a:	bf00      	nop
 801e66c:	f3af 8000 	nop.w
 801e670:	636f4361 	.word	0x636f4361
 801e674:	3fd287a7 	.word	0x3fd287a7
 801e678:	8b60c8b3 	.word	0x8b60c8b3
 801e67c:	3fc68a28 	.word	0x3fc68a28
 801e680:	509f79fb 	.word	0x509f79fb
 801e684:	3fd34413 	.word	0x3fd34413
 801e688:	080227be 	.word	0x080227be
 801e68c:	080227d5 	.word	0x080227d5
 801e690:	7ff00000 	.word	0x7ff00000
 801e694:	08022789 	.word	0x08022789
 801e698:	3ff80000 	.word	0x3ff80000
 801e69c:	080228d0 	.word	0x080228d0
 801e6a0:	0802282d 	.word	0x0802282d
 801e6a4:	080227ba 	.word	0x080227ba
 801e6a8:	08022788 	.word	0x08022788
 801e6ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e6b0:	6018      	str	r0, [r3, #0]
 801e6b2:	9b07      	ldr	r3, [sp, #28]
 801e6b4:	2b0e      	cmp	r3, #14
 801e6b6:	f200 80a4 	bhi.w	801e802 <_dtoa_r+0x442>
 801e6ba:	2c00      	cmp	r4, #0
 801e6bc:	f000 80a1 	beq.w	801e802 <_dtoa_r+0x442>
 801e6c0:	2f00      	cmp	r7, #0
 801e6c2:	dd33      	ble.n	801e72c <_dtoa_r+0x36c>
 801e6c4:	4bad      	ldr	r3, [pc, #692]	@ (801e97c <_dtoa_r+0x5bc>)
 801e6c6:	f007 020f 	and.w	r2, r7, #15
 801e6ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e6ce:	ed93 7b00 	vldr	d7, [r3]
 801e6d2:	05f8      	lsls	r0, r7, #23
 801e6d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801e6d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801e6dc:	d516      	bpl.n	801e70c <_dtoa_r+0x34c>
 801e6de:	4ba8      	ldr	r3, [pc, #672]	@ (801e980 <_dtoa_r+0x5c0>)
 801e6e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e6e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e6e8:	f7e2 f8d8 	bl	800089c <__aeabi_ddiv>
 801e6ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e6f0:	f004 040f 	and.w	r4, r4, #15
 801e6f4:	2603      	movs	r6, #3
 801e6f6:	4da2      	ldr	r5, [pc, #648]	@ (801e980 <_dtoa_r+0x5c0>)
 801e6f8:	b954      	cbnz	r4, 801e710 <_dtoa_r+0x350>
 801e6fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e6fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e702:	f7e2 f8cb 	bl	800089c <__aeabi_ddiv>
 801e706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e70a:	e028      	b.n	801e75e <_dtoa_r+0x39e>
 801e70c:	2602      	movs	r6, #2
 801e70e:	e7f2      	b.n	801e6f6 <_dtoa_r+0x336>
 801e710:	07e1      	lsls	r1, r4, #31
 801e712:	d508      	bpl.n	801e726 <_dtoa_r+0x366>
 801e714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e718:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e71c:	f7e1 ff94 	bl	8000648 <__aeabi_dmul>
 801e720:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e724:	3601      	adds	r6, #1
 801e726:	1064      	asrs	r4, r4, #1
 801e728:	3508      	adds	r5, #8
 801e72a:	e7e5      	b.n	801e6f8 <_dtoa_r+0x338>
 801e72c:	f000 80d2 	beq.w	801e8d4 <_dtoa_r+0x514>
 801e730:	427c      	negs	r4, r7
 801e732:	4b92      	ldr	r3, [pc, #584]	@ (801e97c <_dtoa_r+0x5bc>)
 801e734:	4d92      	ldr	r5, [pc, #584]	@ (801e980 <_dtoa_r+0x5c0>)
 801e736:	f004 020f 	and.w	r2, r4, #15
 801e73a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e742:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e746:	f7e1 ff7f 	bl	8000648 <__aeabi_dmul>
 801e74a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e74e:	1124      	asrs	r4, r4, #4
 801e750:	2300      	movs	r3, #0
 801e752:	2602      	movs	r6, #2
 801e754:	2c00      	cmp	r4, #0
 801e756:	f040 80b2 	bne.w	801e8be <_dtoa_r+0x4fe>
 801e75a:	2b00      	cmp	r3, #0
 801e75c:	d1d3      	bne.n	801e706 <_dtoa_r+0x346>
 801e75e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e760:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801e764:	2b00      	cmp	r3, #0
 801e766:	f000 80b7 	beq.w	801e8d8 <_dtoa_r+0x518>
 801e76a:	4b86      	ldr	r3, [pc, #536]	@ (801e984 <_dtoa_r+0x5c4>)
 801e76c:	2200      	movs	r2, #0
 801e76e:	4620      	mov	r0, r4
 801e770:	4629      	mov	r1, r5
 801e772:	f7e2 f9db 	bl	8000b2c <__aeabi_dcmplt>
 801e776:	2800      	cmp	r0, #0
 801e778:	f000 80ae 	beq.w	801e8d8 <_dtoa_r+0x518>
 801e77c:	9b07      	ldr	r3, [sp, #28]
 801e77e:	2b00      	cmp	r3, #0
 801e780:	f000 80aa 	beq.w	801e8d8 <_dtoa_r+0x518>
 801e784:	9b00      	ldr	r3, [sp, #0]
 801e786:	2b00      	cmp	r3, #0
 801e788:	dd37      	ble.n	801e7fa <_dtoa_r+0x43a>
 801e78a:	1e7b      	subs	r3, r7, #1
 801e78c:	9304      	str	r3, [sp, #16]
 801e78e:	4620      	mov	r0, r4
 801e790:	4b7d      	ldr	r3, [pc, #500]	@ (801e988 <_dtoa_r+0x5c8>)
 801e792:	2200      	movs	r2, #0
 801e794:	4629      	mov	r1, r5
 801e796:	f7e1 ff57 	bl	8000648 <__aeabi_dmul>
 801e79a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e79e:	9c00      	ldr	r4, [sp, #0]
 801e7a0:	3601      	adds	r6, #1
 801e7a2:	4630      	mov	r0, r6
 801e7a4:	f7e1 fee6 	bl	8000574 <__aeabi_i2d>
 801e7a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e7ac:	f7e1 ff4c 	bl	8000648 <__aeabi_dmul>
 801e7b0:	4b76      	ldr	r3, [pc, #472]	@ (801e98c <_dtoa_r+0x5cc>)
 801e7b2:	2200      	movs	r2, #0
 801e7b4:	f7e1 fd92 	bl	80002dc <__adddf3>
 801e7b8:	4605      	mov	r5, r0
 801e7ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801e7be:	2c00      	cmp	r4, #0
 801e7c0:	f040 808d 	bne.w	801e8de <_dtoa_r+0x51e>
 801e7c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e7c8:	4b71      	ldr	r3, [pc, #452]	@ (801e990 <_dtoa_r+0x5d0>)
 801e7ca:	2200      	movs	r2, #0
 801e7cc:	f7e1 fd84 	bl	80002d8 <__aeabi_dsub>
 801e7d0:	4602      	mov	r2, r0
 801e7d2:	460b      	mov	r3, r1
 801e7d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e7d8:	462a      	mov	r2, r5
 801e7da:	4633      	mov	r3, r6
 801e7dc:	f7e2 f9c4 	bl	8000b68 <__aeabi_dcmpgt>
 801e7e0:	2800      	cmp	r0, #0
 801e7e2:	f040 828b 	bne.w	801ecfc <_dtoa_r+0x93c>
 801e7e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e7ea:	462a      	mov	r2, r5
 801e7ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801e7f0:	f7e2 f99c 	bl	8000b2c <__aeabi_dcmplt>
 801e7f4:	2800      	cmp	r0, #0
 801e7f6:	f040 8128 	bne.w	801ea4a <_dtoa_r+0x68a>
 801e7fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801e7fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801e802:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e804:	2b00      	cmp	r3, #0
 801e806:	f2c0 815a 	blt.w	801eabe <_dtoa_r+0x6fe>
 801e80a:	2f0e      	cmp	r7, #14
 801e80c:	f300 8157 	bgt.w	801eabe <_dtoa_r+0x6fe>
 801e810:	4b5a      	ldr	r3, [pc, #360]	@ (801e97c <_dtoa_r+0x5bc>)
 801e812:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e816:	ed93 7b00 	vldr	d7, [r3]
 801e81a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e81c:	2b00      	cmp	r3, #0
 801e81e:	ed8d 7b00 	vstr	d7, [sp]
 801e822:	da03      	bge.n	801e82c <_dtoa_r+0x46c>
 801e824:	9b07      	ldr	r3, [sp, #28]
 801e826:	2b00      	cmp	r3, #0
 801e828:	f340 8101 	ble.w	801ea2e <_dtoa_r+0x66e>
 801e82c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801e830:	4656      	mov	r6, sl
 801e832:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e836:	4620      	mov	r0, r4
 801e838:	4629      	mov	r1, r5
 801e83a:	f7e2 f82f 	bl	800089c <__aeabi_ddiv>
 801e83e:	f7e2 f9b3 	bl	8000ba8 <__aeabi_d2iz>
 801e842:	4680      	mov	r8, r0
 801e844:	f7e1 fe96 	bl	8000574 <__aeabi_i2d>
 801e848:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e84c:	f7e1 fefc 	bl	8000648 <__aeabi_dmul>
 801e850:	4602      	mov	r2, r0
 801e852:	460b      	mov	r3, r1
 801e854:	4620      	mov	r0, r4
 801e856:	4629      	mov	r1, r5
 801e858:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801e85c:	f7e1 fd3c 	bl	80002d8 <__aeabi_dsub>
 801e860:	f806 4b01 	strb.w	r4, [r6], #1
 801e864:	9d07      	ldr	r5, [sp, #28]
 801e866:	eba6 040a 	sub.w	r4, r6, sl
 801e86a:	42a5      	cmp	r5, r4
 801e86c:	4602      	mov	r2, r0
 801e86e:	460b      	mov	r3, r1
 801e870:	f040 8117 	bne.w	801eaa2 <_dtoa_r+0x6e2>
 801e874:	f7e1 fd32 	bl	80002dc <__adddf3>
 801e878:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e87c:	4604      	mov	r4, r0
 801e87e:	460d      	mov	r5, r1
 801e880:	f7e2 f972 	bl	8000b68 <__aeabi_dcmpgt>
 801e884:	2800      	cmp	r0, #0
 801e886:	f040 80f9 	bne.w	801ea7c <_dtoa_r+0x6bc>
 801e88a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e88e:	4620      	mov	r0, r4
 801e890:	4629      	mov	r1, r5
 801e892:	f7e2 f941 	bl	8000b18 <__aeabi_dcmpeq>
 801e896:	b118      	cbz	r0, 801e8a0 <_dtoa_r+0x4e0>
 801e898:	f018 0f01 	tst.w	r8, #1
 801e89c:	f040 80ee 	bne.w	801ea7c <_dtoa_r+0x6bc>
 801e8a0:	4649      	mov	r1, r9
 801e8a2:	4658      	mov	r0, fp
 801e8a4:	f000 fc90 	bl	801f1c8 <_Bfree>
 801e8a8:	2300      	movs	r3, #0
 801e8aa:	7033      	strb	r3, [r6, #0]
 801e8ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e8ae:	3701      	adds	r7, #1
 801e8b0:	601f      	str	r7, [r3, #0]
 801e8b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e8b4:	2b00      	cmp	r3, #0
 801e8b6:	f000 831d 	beq.w	801eef4 <_dtoa_r+0xb34>
 801e8ba:	601e      	str	r6, [r3, #0]
 801e8bc:	e31a      	b.n	801eef4 <_dtoa_r+0xb34>
 801e8be:	07e2      	lsls	r2, r4, #31
 801e8c0:	d505      	bpl.n	801e8ce <_dtoa_r+0x50e>
 801e8c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e8c6:	f7e1 febf 	bl	8000648 <__aeabi_dmul>
 801e8ca:	3601      	adds	r6, #1
 801e8cc:	2301      	movs	r3, #1
 801e8ce:	1064      	asrs	r4, r4, #1
 801e8d0:	3508      	adds	r5, #8
 801e8d2:	e73f      	b.n	801e754 <_dtoa_r+0x394>
 801e8d4:	2602      	movs	r6, #2
 801e8d6:	e742      	b.n	801e75e <_dtoa_r+0x39e>
 801e8d8:	9c07      	ldr	r4, [sp, #28]
 801e8da:	9704      	str	r7, [sp, #16]
 801e8dc:	e761      	b.n	801e7a2 <_dtoa_r+0x3e2>
 801e8de:	4b27      	ldr	r3, [pc, #156]	@ (801e97c <_dtoa_r+0x5bc>)
 801e8e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e8e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e8e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e8ea:	4454      	add	r4, sl
 801e8ec:	2900      	cmp	r1, #0
 801e8ee:	d053      	beq.n	801e998 <_dtoa_r+0x5d8>
 801e8f0:	4928      	ldr	r1, [pc, #160]	@ (801e994 <_dtoa_r+0x5d4>)
 801e8f2:	2000      	movs	r0, #0
 801e8f4:	f7e1 ffd2 	bl	800089c <__aeabi_ddiv>
 801e8f8:	4633      	mov	r3, r6
 801e8fa:	462a      	mov	r2, r5
 801e8fc:	f7e1 fcec 	bl	80002d8 <__aeabi_dsub>
 801e900:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e904:	4656      	mov	r6, sl
 801e906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e90a:	f7e2 f94d 	bl	8000ba8 <__aeabi_d2iz>
 801e90e:	4605      	mov	r5, r0
 801e910:	f7e1 fe30 	bl	8000574 <__aeabi_i2d>
 801e914:	4602      	mov	r2, r0
 801e916:	460b      	mov	r3, r1
 801e918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e91c:	f7e1 fcdc 	bl	80002d8 <__aeabi_dsub>
 801e920:	3530      	adds	r5, #48	@ 0x30
 801e922:	4602      	mov	r2, r0
 801e924:	460b      	mov	r3, r1
 801e926:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e92a:	f806 5b01 	strb.w	r5, [r6], #1
 801e92e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e932:	f7e2 f8fb 	bl	8000b2c <__aeabi_dcmplt>
 801e936:	2800      	cmp	r0, #0
 801e938:	d171      	bne.n	801ea1e <_dtoa_r+0x65e>
 801e93a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e93e:	4911      	ldr	r1, [pc, #68]	@ (801e984 <_dtoa_r+0x5c4>)
 801e940:	2000      	movs	r0, #0
 801e942:	f7e1 fcc9 	bl	80002d8 <__aeabi_dsub>
 801e946:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e94a:	f7e2 f8ef 	bl	8000b2c <__aeabi_dcmplt>
 801e94e:	2800      	cmp	r0, #0
 801e950:	f040 8095 	bne.w	801ea7e <_dtoa_r+0x6be>
 801e954:	42a6      	cmp	r6, r4
 801e956:	f43f af50 	beq.w	801e7fa <_dtoa_r+0x43a>
 801e95a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e95e:	4b0a      	ldr	r3, [pc, #40]	@ (801e988 <_dtoa_r+0x5c8>)
 801e960:	2200      	movs	r2, #0
 801e962:	f7e1 fe71 	bl	8000648 <__aeabi_dmul>
 801e966:	4b08      	ldr	r3, [pc, #32]	@ (801e988 <_dtoa_r+0x5c8>)
 801e968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e96c:	2200      	movs	r2, #0
 801e96e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e972:	f7e1 fe69 	bl	8000648 <__aeabi_dmul>
 801e976:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e97a:	e7c4      	b.n	801e906 <_dtoa_r+0x546>
 801e97c:	080228d0 	.word	0x080228d0
 801e980:	080228a8 	.word	0x080228a8
 801e984:	3ff00000 	.word	0x3ff00000
 801e988:	40240000 	.word	0x40240000
 801e98c:	401c0000 	.word	0x401c0000
 801e990:	40140000 	.word	0x40140000
 801e994:	3fe00000 	.word	0x3fe00000
 801e998:	4631      	mov	r1, r6
 801e99a:	4628      	mov	r0, r5
 801e99c:	f7e1 fe54 	bl	8000648 <__aeabi_dmul>
 801e9a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e9a4:	9415      	str	r4, [sp, #84]	@ 0x54
 801e9a6:	4656      	mov	r6, sl
 801e9a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e9ac:	f7e2 f8fc 	bl	8000ba8 <__aeabi_d2iz>
 801e9b0:	4605      	mov	r5, r0
 801e9b2:	f7e1 fddf 	bl	8000574 <__aeabi_i2d>
 801e9b6:	4602      	mov	r2, r0
 801e9b8:	460b      	mov	r3, r1
 801e9ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e9be:	f7e1 fc8b 	bl	80002d8 <__aeabi_dsub>
 801e9c2:	3530      	adds	r5, #48	@ 0x30
 801e9c4:	f806 5b01 	strb.w	r5, [r6], #1
 801e9c8:	4602      	mov	r2, r0
 801e9ca:	460b      	mov	r3, r1
 801e9cc:	42a6      	cmp	r6, r4
 801e9ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e9d2:	f04f 0200 	mov.w	r2, #0
 801e9d6:	d124      	bne.n	801ea22 <_dtoa_r+0x662>
 801e9d8:	4bac      	ldr	r3, [pc, #688]	@ (801ec8c <_dtoa_r+0x8cc>)
 801e9da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e9de:	f7e1 fc7d 	bl	80002dc <__adddf3>
 801e9e2:	4602      	mov	r2, r0
 801e9e4:	460b      	mov	r3, r1
 801e9e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e9ea:	f7e2 f8bd 	bl	8000b68 <__aeabi_dcmpgt>
 801e9ee:	2800      	cmp	r0, #0
 801e9f0:	d145      	bne.n	801ea7e <_dtoa_r+0x6be>
 801e9f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e9f6:	49a5      	ldr	r1, [pc, #660]	@ (801ec8c <_dtoa_r+0x8cc>)
 801e9f8:	2000      	movs	r0, #0
 801e9fa:	f7e1 fc6d 	bl	80002d8 <__aeabi_dsub>
 801e9fe:	4602      	mov	r2, r0
 801ea00:	460b      	mov	r3, r1
 801ea02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ea06:	f7e2 f891 	bl	8000b2c <__aeabi_dcmplt>
 801ea0a:	2800      	cmp	r0, #0
 801ea0c:	f43f aef5 	beq.w	801e7fa <_dtoa_r+0x43a>
 801ea10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801ea12:	1e73      	subs	r3, r6, #1
 801ea14:	9315      	str	r3, [sp, #84]	@ 0x54
 801ea16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ea1a:	2b30      	cmp	r3, #48	@ 0x30
 801ea1c:	d0f8      	beq.n	801ea10 <_dtoa_r+0x650>
 801ea1e:	9f04      	ldr	r7, [sp, #16]
 801ea20:	e73e      	b.n	801e8a0 <_dtoa_r+0x4e0>
 801ea22:	4b9b      	ldr	r3, [pc, #620]	@ (801ec90 <_dtoa_r+0x8d0>)
 801ea24:	f7e1 fe10 	bl	8000648 <__aeabi_dmul>
 801ea28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ea2c:	e7bc      	b.n	801e9a8 <_dtoa_r+0x5e8>
 801ea2e:	d10c      	bne.n	801ea4a <_dtoa_r+0x68a>
 801ea30:	4b98      	ldr	r3, [pc, #608]	@ (801ec94 <_dtoa_r+0x8d4>)
 801ea32:	2200      	movs	r2, #0
 801ea34:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ea38:	f7e1 fe06 	bl	8000648 <__aeabi_dmul>
 801ea3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ea40:	f7e2 f888 	bl	8000b54 <__aeabi_dcmpge>
 801ea44:	2800      	cmp	r0, #0
 801ea46:	f000 8157 	beq.w	801ecf8 <_dtoa_r+0x938>
 801ea4a:	2400      	movs	r4, #0
 801ea4c:	4625      	mov	r5, r4
 801ea4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ea50:	43db      	mvns	r3, r3
 801ea52:	9304      	str	r3, [sp, #16]
 801ea54:	4656      	mov	r6, sl
 801ea56:	2700      	movs	r7, #0
 801ea58:	4621      	mov	r1, r4
 801ea5a:	4658      	mov	r0, fp
 801ea5c:	f000 fbb4 	bl	801f1c8 <_Bfree>
 801ea60:	2d00      	cmp	r5, #0
 801ea62:	d0dc      	beq.n	801ea1e <_dtoa_r+0x65e>
 801ea64:	b12f      	cbz	r7, 801ea72 <_dtoa_r+0x6b2>
 801ea66:	42af      	cmp	r7, r5
 801ea68:	d003      	beq.n	801ea72 <_dtoa_r+0x6b2>
 801ea6a:	4639      	mov	r1, r7
 801ea6c:	4658      	mov	r0, fp
 801ea6e:	f000 fbab 	bl	801f1c8 <_Bfree>
 801ea72:	4629      	mov	r1, r5
 801ea74:	4658      	mov	r0, fp
 801ea76:	f000 fba7 	bl	801f1c8 <_Bfree>
 801ea7a:	e7d0      	b.n	801ea1e <_dtoa_r+0x65e>
 801ea7c:	9704      	str	r7, [sp, #16]
 801ea7e:	4633      	mov	r3, r6
 801ea80:	461e      	mov	r6, r3
 801ea82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ea86:	2a39      	cmp	r2, #57	@ 0x39
 801ea88:	d107      	bne.n	801ea9a <_dtoa_r+0x6da>
 801ea8a:	459a      	cmp	sl, r3
 801ea8c:	d1f8      	bne.n	801ea80 <_dtoa_r+0x6c0>
 801ea8e:	9a04      	ldr	r2, [sp, #16]
 801ea90:	3201      	adds	r2, #1
 801ea92:	9204      	str	r2, [sp, #16]
 801ea94:	2230      	movs	r2, #48	@ 0x30
 801ea96:	f88a 2000 	strb.w	r2, [sl]
 801ea9a:	781a      	ldrb	r2, [r3, #0]
 801ea9c:	3201      	adds	r2, #1
 801ea9e:	701a      	strb	r2, [r3, #0]
 801eaa0:	e7bd      	b.n	801ea1e <_dtoa_r+0x65e>
 801eaa2:	4b7b      	ldr	r3, [pc, #492]	@ (801ec90 <_dtoa_r+0x8d0>)
 801eaa4:	2200      	movs	r2, #0
 801eaa6:	f7e1 fdcf 	bl	8000648 <__aeabi_dmul>
 801eaaa:	2200      	movs	r2, #0
 801eaac:	2300      	movs	r3, #0
 801eaae:	4604      	mov	r4, r0
 801eab0:	460d      	mov	r5, r1
 801eab2:	f7e2 f831 	bl	8000b18 <__aeabi_dcmpeq>
 801eab6:	2800      	cmp	r0, #0
 801eab8:	f43f aebb 	beq.w	801e832 <_dtoa_r+0x472>
 801eabc:	e6f0      	b.n	801e8a0 <_dtoa_r+0x4e0>
 801eabe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801eac0:	2a00      	cmp	r2, #0
 801eac2:	f000 80db 	beq.w	801ec7c <_dtoa_r+0x8bc>
 801eac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eac8:	2a01      	cmp	r2, #1
 801eaca:	f300 80bf 	bgt.w	801ec4c <_dtoa_r+0x88c>
 801eace:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ead0:	2a00      	cmp	r2, #0
 801ead2:	f000 80b7 	beq.w	801ec44 <_dtoa_r+0x884>
 801ead6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801eada:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801eadc:	4646      	mov	r6, r8
 801eade:	9a08      	ldr	r2, [sp, #32]
 801eae0:	2101      	movs	r1, #1
 801eae2:	441a      	add	r2, r3
 801eae4:	4658      	mov	r0, fp
 801eae6:	4498      	add	r8, r3
 801eae8:	9208      	str	r2, [sp, #32]
 801eaea:	f000 fc6b 	bl	801f3c4 <__i2b>
 801eaee:	4605      	mov	r5, r0
 801eaf0:	b15e      	cbz	r6, 801eb0a <_dtoa_r+0x74a>
 801eaf2:	9b08      	ldr	r3, [sp, #32]
 801eaf4:	2b00      	cmp	r3, #0
 801eaf6:	dd08      	ble.n	801eb0a <_dtoa_r+0x74a>
 801eaf8:	42b3      	cmp	r3, r6
 801eafa:	9a08      	ldr	r2, [sp, #32]
 801eafc:	bfa8      	it	ge
 801eafe:	4633      	movge	r3, r6
 801eb00:	eba8 0803 	sub.w	r8, r8, r3
 801eb04:	1af6      	subs	r6, r6, r3
 801eb06:	1ad3      	subs	r3, r2, r3
 801eb08:	9308      	str	r3, [sp, #32]
 801eb0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eb0c:	b1f3      	cbz	r3, 801eb4c <_dtoa_r+0x78c>
 801eb0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	f000 80b7 	beq.w	801ec84 <_dtoa_r+0x8c4>
 801eb16:	b18c      	cbz	r4, 801eb3c <_dtoa_r+0x77c>
 801eb18:	4629      	mov	r1, r5
 801eb1a:	4622      	mov	r2, r4
 801eb1c:	4658      	mov	r0, fp
 801eb1e:	f000 fd11 	bl	801f544 <__pow5mult>
 801eb22:	464a      	mov	r2, r9
 801eb24:	4601      	mov	r1, r0
 801eb26:	4605      	mov	r5, r0
 801eb28:	4658      	mov	r0, fp
 801eb2a:	f000 fc61 	bl	801f3f0 <__multiply>
 801eb2e:	4649      	mov	r1, r9
 801eb30:	9004      	str	r0, [sp, #16]
 801eb32:	4658      	mov	r0, fp
 801eb34:	f000 fb48 	bl	801f1c8 <_Bfree>
 801eb38:	9b04      	ldr	r3, [sp, #16]
 801eb3a:	4699      	mov	r9, r3
 801eb3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eb3e:	1b1a      	subs	r2, r3, r4
 801eb40:	d004      	beq.n	801eb4c <_dtoa_r+0x78c>
 801eb42:	4649      	mov	r1, r9
 801eb44:	4658      	mov	r0, fp
 801eb46:	f000 fcfd 	bl	801f544 <__pow5mult>
 801eb4a:	4681      	mov	r9, r0
 801eb4c:	2101      	movs	r1, #1
 801eb4e:	4658      	mov	r0, fp
 801eb50:	f000 fc38 	bl	801f3c4 <__i2b>
 801eb54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eb56:	4604      	mov	r4, r0
 801eb58:	2b00      	cmp	r3, #0
 801eb5a:	f000 81cf 	beq.w	801eefc <_dtoa_r+0xb3c>
 801eb5e:	461a      	mov	r2, r3
 801eb60:	4601      	mov	r1, r0
 801eb62:	4658      	mov	r0, fp
 801eb64:	f000 fcee 	bl	801f544 <__pow5mult>
 801eb68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb6a:	2b01      	cmp	r3, #1
 801eb6c:	4604      	mov	r4, r0
 801eb6e:	f300 8095 	bgt.w	801ec9c <_dtoa_r+0x8dc>
 801eb72:	9b02      	ldr	r3, [sp, #8]
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	f040 8087 	bne.w	801ec88 <_dtoa_r+0x8c8>
 801eb7a:	9b03      	ldr	r3, [sp, #12]
 801eb7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801eb80:	2b00      	cmp	r3, #0
 801eb82:	f040 8089 	bne.w	801ec98 <_dtoa_r+0x8d8>
 801eb86:	9b03      	ldr	r3, [sp, #12]
 801eb88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801eb8c:	0d1b      	lsrs	r3, r3, #20
 801eb8e:	051b      	lsls	r3, r3, #20
 801eb90:	b12b      	cbz	r3, 801eb9e <_dtoa_r+0x7de>
 801eb92:	9b08      	ldr	r3, [sp, #32]
 801eb94:	3301      	adds	r3, #1
 801eb96:	9308      	str	r3, [sp, #32]
 801eb98:	f108 0801 	add.w	r8, r8, #1
 801eb9c:	2301      	movs	r3, #1
 801eb9e:	930a      	str	r3, [sp, #40]	@ 0x28
 801eba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eba2:	2b00      	cmp	r3, #0
 801eba4:	f000 81b0 	beq.w	801ef08 <_dtoa_r+0xb48>
 801eba8:	6923      	ldr	r3, [r4, #16]
 801ebaa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ebae:	6918      	ldr	r0, [r3, #16]
 801ebb0:	f000 fbbc 	bl	801f32c <__hi0bits>
 801ebb4:	f1c0 0020 	rsb	r0, r0, #32
 801ebb8:	9b08      	ldr	r3, [sp, #32]
 801ebba:	4418      	add	r0, r3
 801ebbc:	f010 001f 	ands.w	r0, r0, #31
 801ebc0:	d077      	beq.n	801ecb2 <_dtoa_r+0x8f2>
 801ebc2:	f1c0 0320 	rsb	r3, r0, #32
 801ebc6:	2b04      	cmp	r3, #4
 801ebc8:	dd6b      	ble.n	801eca2 <_dtoa_r+0x8e2>
 801ebca:	9b08      	ldr	r3, [sp, #32]
 801ebcc:	f1c0 001c 	rsb	r0, r0, #28
 801ebd0:	4403      	add	r3, r0
 801ebd2:	4480      	add	r8, r0
 801ebd4:	4406      	add	r6, r0
 801ebd6:	9308      	str	r3, [sp, #32]
 801ebd8:	f1b8 0f00 	cmp.w	r8, #0
 801ebdc:	dd05      	ble.n	801ebea <_dtoa_r+0x82a>
 801ebde:	4649      	mov	r1, r9
 801ebe0:	4642      	mov	r2, r8
 801ebe2:	4658      	mov	r0, fp
 801ebe4:	f000 fd08 	bl	801f5f8 <__lshift>
 801ebe8:	4681      	mov	r9, r0
 801ebea:	9b08      	ldr	r3, [sp, #32]
 801ebec:	2b00      	cmp	r3, #0
 801ebee:	dd05      	ble.n	801ebfc <_dtoa_r+0x83c>
 801ebf0:	4621      	mov	r1, r4
 801ebf2:	461a      	mov	r2, r3
 801ebf4:	4658      	mov	r0, fp
 801ebf6:	f000 fcff 	bl	801f5f8 <__lshift>
 801ebfa:	4604      	mov	r4, r0
 801ebfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ebfe:	2b00      	cmp	r3, #0
 801ec00:	d059      	beq.n	801ecb6 <_dtoa_r+0x8f6>
 801ec02:	4621      	mov	r1, r4
 801ec04:	4648      	mov	r0, r9
 801ec06:	f000 fd63 	bl	801f6d0 <__mcmp>
 801ec0a:	2800      	cmp	r0, #0
 801ec0c:	da53      	bge.n	801ecb6 <_dtoa_r+0x8f6>
 801ec0e:	1e7b      	subs	r3, r7, #1
 801ec10:	9304      	str	r3, [sp, #16]
 801ec12:	4649      	mov	r1, r9
 801ec14:	2300      	movs	r3, #0
 801ec16:	220a      	movs	r2, #10
 801ec18:	4658      	mov	r0, fp
 801ec1a:	f000 faf7 	bl	801f20c <__multadd>
 801ec1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ec20:	4681      	mov	r9, r0
 801ec22:	2b00      	cmp	r3, #0
 801ec24:	f000 8172 	beq.w	801ef0c <_dtoa_r+0xb4c>
 801ec28:	2300      	movs	r3, #0
 801ec2a:	4629      	mov	r1, r5
 801ec2c:	220a      	movs	r2, #10
 801ec2e:	4658      	mov	r0, fp
 801ec30:	f000 faec 	bl	801f20c <__multadd>
 801ec34:	9b00      	ldr	r3, [sp, #0]
 801ec36:	2b00      	cmp	r3, #0
 801ec38:	4605      	mov	r5, r0
 801ec3a:	dc67      	bgt.n	801ed0c <_dtoa_r+0x94c>
 801ec3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ec3e:	2b02      	cmp	r3, #2
 801ec40:	dc41      	bgt.n	801ecc6 <_dtoa_r+0x906>
 801ec42:	e063      	b.n	801ed0c <_dtoa_r+0x94c>
 801ec44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ec46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801ec4a:	e746      	b.n	801eada <_dtoa_r+0x71a>
 801ec4c:	9b07      	ldr	r3, [sp, #28]
 801ec4e:	1e5c      	subs	r4, r3, #1
 801ec50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ec52:	42a3      	cmp	r3, r4
 801ec54:	bfbf      	itttt	lt
 801ec56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801ec58:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801ec5a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801ec5c:	1ae3      	sublt	r3, r4, r3
 801ec5e:	bfb4      	ite	lt
 801ec60:	18d2      	addlt	r2, r2, r3
 801ec62:	1b1c      	subge	r4, r3, r4
 801ec64:	9b07      	ldr	r3, [sp, #28]
 801ec66:	bfbc      	itt	lt
 801ec68:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801ec6a:	2400      	movlt	r4, #0
 801ec6c:	2b00      	cmp	r3, #0
 801ec6e:	bfb5      	itete	lt
 801ec70:	eba8 0603 	sublt.w	r6, r8, r3
 801ec74:	9b07      	ldrge	r3, [sp, #28]
 801ec76:	2300      	movlt	r3, #0
 801ec78:	4646      	movge	r6, r8
 801ec7a:	e730      	b.n	801eade <_dtoa_r+0x71e>
 801ec7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ec7e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801ec80:	4646      	mov	r6, r8
 801ec82:	e735      	b.n	801eaf0 <_dtoa_r+0x730>
 801ec84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ec86:	e75c      	b.n	801eb42 <_dtoa_r+0x782>
 801ec88:	2300      	movs	r3, #0
 801ec8a:	e788      	b.n	801eb9e <_dtoa_r+0x7de>
 801ec8c:	3fe00000 	.word	0x3fe00000
 801ec90:	40240000 	.word	0x40240000
 801ec94:	40140000 	.word	0x40140000
 801ec98:	9b02      	ldr	r3, [sp, #8]
 801ec9a:	e780      	b.n	801eb9e <_dtoa_r+0x7de>
 801ec9c:	2300      	movs	r3, #0
 801ec9e:	930a      	str	r3, [sp, #40]	@ 0x28
 801eca0:	e782      	b.n	801eba8 <_dtoa_r+0x7e8>
 801eca2:	d099      	beq.n	801ebd8 <_dtoa_r+0x818>
 801eca4:	9a08      	ldr	r2, [sp, #32]
 801eca6:	331c      	adds	r3, #28
 801eca8:	441a      	add	r2, r3
 801ecaa:	4498      	add	r8, r3
 801ecac:	441e      	add	r6, r3
 801ecae:	9208      	str	r2, [sp, #32]
 801ecb0:	e792      	b.n	801ebd8 <_dtoa_r+0x818>
 801ecb2:	4603      	mov	r3, r0
 801ecb4:	e7f6      	b.n	801eca4 <_dtoa_r+0x8e4>
 801ecb6:	9b07      	ldr	r3, [sp, #28]
 801ecb8:	9704      	str	r7, [sp, #16]
 801ecba:	2b00      	cmp	r3, #0
 801ecbc:	dc20      	bgt.n	801ed00 <_dtoa_r+0x940>
 801ecbe:	9300      	str	r3, [sp, #0]
 801ecc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ecc2:	2b02      	cmp	r3, #2
 801ecc4:	dd1e      	ble.n	801ed04 <_dtoa_r+0x944>
 801ecc6:	9b00      	ldr	r3, [sp, #0]
 801ecc8:	2b00      	cmp	r3, #0
 801ecca:	f47f aec0 	bne.w	801ea4e <_dtoa_r+0x68e>
 801ecce:	4621      	mov	r1, r4
 801ecd0:	2205      	movs	r2, #5
 801ecd2:	4658      	mov	r0, fp
 801ecd4:	f000 fa9a 	bl	801f20c <__multadd>
 801ecd8:	4601      	mov	r1, r0
 801ecda:	4604      	mov	r4, r0
 801ecdc:	4648      	mov	r0, r9
 801ecde:	f000 fcf7 	bl	801f6d0 <__mcmp>
 801ece2:	2800      	cmp	r0, #0
 801ece4:	f77f aeb3 	ble.w	801ea4e <_dtoa_r+0x68e>
 801ece8:	4656      	mov	r6, sl
 801ecea:	2331      	movs	r3, #49	@ 0x31
 801ecec:	f806 3b01 	strb.w	r3, [r6], #1
 801ecf0:	9b04      	ldr	r3, [sp, #16]
 801ecf2:	3301      	adds	r3, #1
 801ecf4:	9304      	str	r3, [sp, #16]
 801ecf6:	e6ae      	b.n	801ea56 <_dtoa_r+0x696>
 801ecf8:	9c07      	ldr	r4, [sp, #28]
 801ecfa:	9704      	str	r7, [sp, #16]
 801ecfc:	4625      	mov	r5, r4
 801ecfe:	e7f3      	b.n	801ece8 <_dtoa_r+0x928>
 801ed00:	9b07      	ldr	r3, [sp, #28]
 801ed02:	9300      	str	r3, [sp, #0]
 801ed04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ed06:	2b00      	cmp	r3, #0
 801ed08:	f000 8104 	beq.w	801ef14 <_dtoa_r+0xb54>
 801ed0c:	2e00      	cmp	r6, #0
 801ed0e:	dd05      	ble.n	801ed1c <_dtoa_r+0x95c>
 801ed10:	4629      	mov	r1, r5
 801ed12:	4632      	mov	r2, r6
 801ed14:	4658      	mov	r0, fp
 801ed16:	f000 fc6f 	bl	801f5f8 <__lshift>
 801ed1a:	4605      	mov	r5, r0
 801ed1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	d05a      	beq.n	801edd8 <_dtoa_r+0xa18>
 801ed22:	6869      	ldr	r1, [r5, #4]
 801ed24:	4658      	mov	r0, fp
 801ed26:	f000 fa0f 	bl	801f148 <_Balloc>
 801ed2a:	4606      	mov	r6, r0
 801ed2c:	b928      	cbnz	r0, 801ed3a <_dtoa_r+0x97a>
 801ed2e:	4b84      	ldr	r3, [pc, #528]	@ (801ef40 <_dtoa_r+0xb80>)
 801ed30:	4602      	mov	r2, r0
 801ed32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801ed36:	f7ff bb5a 	b.w	801e3ee <_dtoa_r+0x2e>
 801ed3a:	692a      	ldr	r2, [r5, #16]
 801ed3c:	3202      	adds	r2, #2
 801ed3e:	0092      	lsls	r2, r2, #2
 801ed40:	f105 010c 	add.w	r1, r5, #12
 801ed44:	300c      	adds	r0, #12
 801ed46:	f7ff fa9c 	bl	801e282 <memcpy>
 801ed4a:	2201      	movs	r2, #1
 801ed4c:	4631      	mov	r1, r6
 801ed4e:	4658      	mov	r0, fp
 801ed50:	f000 fc52 	bl	801f5f8 <__lshift>
 801ed54:	f10a 0301 	add.w	r3, sl, #1
 801ed58:	9307      	str	r3, [sp, #28]
 801ed5a:	9b00      	ldr	r3, [sp, #0]
 801ed5c:	4453      	add	r3, sl
 801ed5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ed60:	9b02      	ldr	r3, [sp, #8]
 801ed62:	f003 0301 	and.w	r3, r3, #1
 801ed66:	462f      	mov	r7, r5
 801ed68:	930a      	str	r3, [sp, #40]	@ 0x28
 801ed6a:	4605      	mov	r5, r0
 801ed6c:	9b07      	ldr	r3, [sp, #28]
 801ed6e:	4621      	mov	r1, r4
 801ed70:	3b01      	subs	r3, #1
 801ed72:	4648      	mov	r0, r9
 801ed74:	9300      	str	r3, [sp, #0]
 801ed76:	f7ff fa99 	bl	801e2ac <quorem>
 801ed7a:	4639      	mov	r1, r7
 801ed7c:	9002      	str	r0, [sp, #8]
 801ed7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801ed82:	4648      	mov	r0, r9
 801ed84:	f000 fca4 	bl	801f6d0 <__mcmp>
 801ed88:	462a      	mov	r2, r5
 801ed8a:	9008      	str	r0, [sp, #32]
 801ed8c:	4621      	mov	r1, r4
 801ed8e:	4658      	mov	r0, fp
 801ed90:	f000 fcba 	bl	801f708 <__mdiff>
 801ed94:	68c2      	ldr	r2, [r0, #12]
 801ed96:	4606      	mov	r6, r0
 801ed98:	bb02      	cbnz	r2, 801eddc <_dtoa_r+0xa1c>
 801ed9a:	4601      	mov	r1, r0
 801ed9c:	4648      	mov	r0, r9
 801ed9e:	f000 fc97 	bl	801f6d0 <__mcmp>
 801eda2:	4602      	mov	r2, r0
 801eda4:	4631      	mov	r1, r6
 801eda6:	4658      	mov	r0, fp
 801eda8:	920e      	str	r2, [sp, #56]	@ 0x38
 801edaa:	f000 fa0d 	bl	801f1c8 <_Bfree>
 801edae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801edb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801edb2:	9e07      	ldr	r6, [sp, #28]
 801edb4:	ea43 0102 	orr.w	r1, r3, r2
 801edb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801edba:	4319      	orrs	r1, r3
 801edbc:	d110      	bne.n	801ede0 <_dtoa_r+0xa20>
 801edbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801edc2:	d029      	beq.n	801ee18 <_dtoa_r+0xa58>
 801edc4:	9b08      	ldr	r3, [sp, #32]
 801edc6:	2b00      	cmp	r3, #0
 801edc8:	dd02      	ble.n	801edd0 <_dtoa_r+0xa10>
 801edca:	9b02      	ldr	r3, [sp, #8]
 801edcc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801edd0:	9b00      	ldr	r3, [sp, #0]
 801edd2:	f883 8000 	strb.w	r8, [r3]
 801edd6:	e63f      	b.n	801ea58 <_dtoa_r+0x698>
 801edd8:	4628      	mov	r0, r5
 801edda:	e7bb      	b.n	801ed54 <_dtoa_r+0x994>
 801eddc:	2201      	movs	r2, #1
 801edde:	e7e1      	b.n	801eda4 <_dtoa_r+0x9e4>
 801ede0:	9b08      	ldr	r3, [sp, #32]
 801ede2:	2b00      	cmp	r3, #0
 801ede4:	db04      	blt.n	801edf0 <_dtoa_r+0xa30>
 801ede6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ede8:	430b      	orrs	r3, r1
 801edea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801edec:	430b      	orrs	r3, r1
 801edee:	d120      	bne.n	801ee32 <_dtoa_r+0xa72>
 801edf0:	2a00      	cmp	r2, #0
 801edf2:	dded      	ble.n	801edd0 <_dtoa_r+0xa10>
 801edf4:	4649      	mov	r1, r9
 801edf6:	2201      	movs	r2, #1
 801edf8:	4658      	mov	r0, fp
 801edfa:	f000 fbfd 	bl	801f5f8 <__lshift>
 801edfe:	4621      	mov	r1, r4
 801ee00:	4681      	mov	r9, r0
 801ee02:	f000 fc65 	bl	801f6d0 <__mcmp>
 801ee06:	2800      	cmp	r0, #0
 801ee08:	dc03      	bgt.n	801ee12 <_dtoa_r+0xa52>
 801ee0a:	d1e1      	bne.n	801edd0 <_dtoa_r+0xa10>
 801ee0c:	f018 0f01 	tst.w	r8, #1
 801ee10:	d0de      	beq.n	801edd0 <_dtoa_r+0xa10>
 801ee12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801ee16:	d1d8      	bne.n	801edca <_dtoa_r+0xa0a>
 801ee18:	9a00      	ldr	r2, [sp, #0]
 801ee1a:	2339      	movs	r3, #57	@ 0x39
 801ee1c:	7013      	strb	r3, [r2, #0]
 801ee1e:	4633      	mov	r3, r6
 801ee20:	461e      	mov	r6, r3
 801ee22:	3b01      	subs	r3, #1
 801ee24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801ee28:	2a39      	cmp	r2, #57	@ 0x39
 801ee2a:	d052      	beq.n	801eed2 <_dtoa_r+0xb12>
 801ee2c:	3201      	adds	r2, #1
 801ee2e:	701a      	strb	r2, [r3, #0]
 801ee30:	e612      	b.n	801ea58 <_dtoa_r+0x698>
 801ee32:	2a00      	cmp	r2, #0
 801ee34:	dd07      	ble.n	801ee46 <_dtoa_r+0xa86>
 801ee36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801ee3a:	d0ed      	beq.n	801ee18 <_dtoa_r+0xa58>
 801ee3c:	9a00      	ldr	r2, [sp, #0]
 801ee3e:	f108 0301 	add.w	r3, r8, #1
 801ee42:	7013      	strb	r3, [r2, #0]
 801ee44:	e608      	b.n	801ea58 <_dtoa_r+0x698>
 801ee46:	9b07      	ldr	r3, [sp, #28]
 801ee48:	9a07      	ldr	r2, [sp, #28]
 801ee4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801ee4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ee50:	4293      	cmp	r3, r2
 801ee52:	d028      	beq.n	801eea6 <_dtoa_r+0xae6>
 801ee54:	4649      	mov	r1, r9
 801ee56:	2300      	movs	r3, #0
 801ee58:	220a      	movs	r2, #10
 801ee5a:	4658      	mov	r0, fp
 801ee5c:	f000 f9d6 	bl	801f20c <__multadd>
 801ee60:	42af      	cmp	r7, r5
 801ee62:	4681      	mov	r9, r0
 801ee64:	f04f 0300 	mov.w	r3, #0
 801ee68:	f04f 020a 	mov.w	r2, #10
 801ee6c:	4639      	mov	r1, r7
 801ee6e:	4658      	mov	r0, fp
 801ee70:	d107      	bne.n	801ee82 <_dtoa_r+0xac2>
 801ee72:	f000 f9cb 	bl	801f20c <__multadd>
 801ee76:	4607      	mov	r7, r0
 801ee78:	4605      	mov	r5, r0
 801ee7a:	9b07      	ldr	r3, [sp, #28]
 801ee7c:	3301      	adds	r3, #1
 801ee7e:	9307      	str	r3, [sp, #28]
 801ee80:	e774      	b.n	801ed6c <_dtoa_r+0x9ac>
 801ee82:	f000 f9c3 	bl	801f20c <__multadd>
 801ee86:	4629      	mov	r1, r5
 801ee88:	4607      	mov	r7, r0
 801ee8a:	2300      	movs	r3, #0
 801ee8c:	220a      	movs	r2, #10
 801ee8e:	4658      	mov	r0, fp
 801ee90:	f000 f9bc 	bl	801f20c <__multadd>
 801ee94:	4605      	mov	r5, r0
 801ee96:	e7f0      	b.n	801ee7a <_dtoa_r+0xaba>
 801ee98:	9b00      	ldr	r3, [sp, #0]
 801ee9a:	2b00      	cmp	r3, #0
 801ee9c:	bfcc      	ite	gt
 801ee9e:	461e      	movgt	r6, r3
 801eea0:	2601      	movle	r6, #1
 801eea2:	4456      	add	r6, sl
 801eea4:	2700      	movs	r7, #0
 801eea6:	4649      	mov	r1, r9
 801eea8:	2201      	movs	r2, #1
 801eeaa:	4658      	mov	r0, fp
 801eeac:	f000 fba4 	bl	801f5f8 <__lshift>
 801eeb0:	4621      	mov	r1, r4
 801eeb2:	4681      	mov	r9, r0
 801eeb4:	f000 fc0c 	bl	801f6d0 <__mcmp>
 801eeb8:	2800      	cmp	r0, #0
 801eeba:	dcb0      	bgt.n	801ee1e <_dtoa_r+0xa5e>
 801eebc:	d102      	bne.n	801eec4 <_dtoa_r+0xb04>
 801eebe:	f018 0f01 	tst.w	r8, #1
 801eec2:	d1ac      	bne.n	801ee1e <_dtoa_r+0xa5e>
 801eec4:	4633      	mov	r3, r6
 801eec6:	461e      	mov	r6, r3
 801eec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801eecc:	2a30      	cmp	r2, #48	@ 0x30
 801eece:	d0fa      	beq.n	801eec6 <_dtoa_r+0xb06>
 801eed0:	e5c2      	b.n	801ea58 <_dtoa_r+0x698>
 801eed2:	459a      	cmp	sl, r3
 801eed4:	d1a4      	bne.n	801ee20 <_dtoa_r+0xa60>
 801eed6:	9b04      	ldr	r3, [sp, #16]
 801eed8:	3301      	adds	r3, #1
 801eeda:	9304      	str	r3, [sp, #16]
 801eedc:	2331      	movs	r3, #49	@ 0x31
 801eede:	f88a 3000 	strb.w	r3, [sl]
 801eee2:	e5b9      	b.n	801ea58 <_dtoa_r+0x698>
 801eee4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801eee6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801ef44 <_dtoa_r+0xb84>
 801eeea:	b11b      	cbz	r3, 801eef4 <_dtoa_r+0xb34>
 801eeec:	f10a 0308 	add.w	r3, sl, #8
 801eef0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801eef2:	6013      	str	r3, [r2, #0]
 801eef4:	4650      	mov	r0, sl
 801eef6:	b019      	add	sp, #100	@ 0x64
 801eef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eefc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eefe:	2b01      	cmp	r3, #1
 801ef00:	f77f ae37 	ble.w	801eb72 <_dtoa_r+0x7b2>
 801ef04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ef06:	930a      	str	r3, [sp, #40]	@ 0x28
 801ef08:	2001      	movs	r0, #1
 801ef0a:	e655      	b.n	801ebb8 <_dtoa_r+0x7f8>
 801ef0c:	9b00      	ldr	r3, [sp, #0]
 801ef0e:	2b00      	cmp	r3, #0
 801ef10:	f77f aed6 	ble.w	801ecc0 <_dtoa_r+0x900>
 801ef14:	4656      	mov	r6, sl
 801ef16:	4621      	mov	r1, r4
 801ef18:	4648      	mov	r0, r9
 801ef1a:	f7ff f9c7 	bl	801e2ac <quorem>
 801ef1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801ef22:	f806 8b01 	strb.w	r8, [r6], #1
 801ef26:	9b00      	ldr	r3, [sp, #0]
 801ef28:	eba6 020a 	sub.w	r2, r6, sl
 801ef2c:	4293      	cmp	r3, r2
 801ef2e:	ddb3      	ble.n	801ee98 <_dtoa_r+0xad8>
 801ef30:	4649      	mov	r1, r9
 801ef32:	2300      	movs	r3, #0
 801ef34:	220a      	movs	r2, #10
 801ef36:	4658      	mov	r0, fp
 801ef38:	f000 f968 	bl	801f20c <__multadd>
 801ef3c:	4681      	mov	r9, r0
 801ef3e:	e7ea      	b.n	801ef16 <_dtoa_r+0xb56>
 801ef40:	0802282d 	.word	0x0802282d
 801ef44:	080227b1 	.word	0x080227b1

0801ef48 <_free_r>:
 801ef48:	b538      	push	{r3, r4, r5, lr}
 801ef4a:	4605      	mov	r5, r0
 801ef4c:	2900      	cmp	r1, #0
 801ef4e:	d041      	beq.n	801efd4 <_free_r+0x8c>
 801ef50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ef54:	1f0c      	subs	r4, r1, #4
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	bfb8      	it	lt
 801ef5a:	18e4      	addlt	r4, r4, r3
 801ef5c:	f000 f8e8 	bl	801f130 <__malloc_lock>
 801ef60:	4a1d      	ldr	r2, [pc, #116]	@ (801efd8 <_free_r+0x90>)
 801ef62:	6813      	ldr	r3, [r2, #0]
 801ef64:	b933      	cbnz	r3, 801ef74 <_free_r+0x2c>
 801ef66:	6063      	str	r3, [r4, #4]
 801ef68:	6014      	str	r4, [r2, #0]
 801ef6a:	4628      	mov	r0, r5
 801ef6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ef70:	f000 b8e4 	b.w	801f13c <__malloc_unlock>
 801ef74:	42a3      	cmp	r3, r4
 801ef76:	d908      	bls.n	801ef8a <_free_r+0x42>
 801ef78:	6820      	ldr	r0, [r4, #0]
 801ef7a:	1821      	adds	r1, r4, r0
 801ef7c:	428b      	cmp	r3, r1
 801ef7e:	bf01      	itttt	eq
 801ef80:	6819      	ldreq	r1, [r3, #0]
 801ef82:	685b      	ldreq	r3, [r3, #4]
 801ef84:	1809      	addeq	r1, r1, r0
 801ef86:	6021      	streq	r1, [r4, #0]
 801ef88:	e7ed      	b.n	801ef66 <_free_r+0x1e>
 801ef8a:	461a      	mov	r2, r3
 801ef8c:	685b      	ldr	r3, [r3, #4]
 801ef8e:	b10b      	cbz	r3, 801ef94 <_free_r+0x4c>
 801ef90:	42a3      	cmp	r3, r4
 801ef92:	d9fa      	bls.n	801ef8a <_free_r+0x42>
 801ef94:	6811      	ldr	r1, [r2, #0]
 801ef96:	1850      	adds	r0, r2, r1
 801ef98:	42a0      	cmp	r0, r4
 801ef9a:	d10b      	bne.n	801efb4 <_free_r+0x6c>
 801ef9c:	6820      	ldr	r0, [r4, #0]
 801ef9e:	4401      	add	r1, r0
 801efa0:	1850      	adds	r0, r2, r1
 801efa2:	4283      	cmp	r3, r0
 801efa4:	6011      	str	r1, [r2, #0]
 801efa6:	d1e0      	bne.n	801ef6a <_free_r+0x22>
 801efa8:	6818      	ldr	r0, [r3, #0]
 801efaa:	685b      	ldr	r3, [r3, #4]
 801efac:	6053      	str	r3, [r2, #4]
 801efae:	4408      	add	r0, r1
 801efb0:	6010      	str	r0, [r2, #0]
 801efb2:	e7da      	b.n	801ef6a <_free_r+0x22>
 801efb4:	d902      	bls.n	801efbc <_free_r+0x74>
 801efb6:	230c      	movs	r3, #12
 801efb8:	602b      	str	r3, [r5, #0]
 801efba:	e7d6      	b.n	801ef6a <_free_r+0x22>
 801efbc:	6820      	ldr	r0, [r4, #0]
 801efbe:	1821      	adds	r1, r4, r0
 801efc0:	428b      	cmp	r3, r1
 801efc2:	bf04      	itt	eq
 801efc4:	6819      	ldreq	r1, [r3, #0]
 801efc6:	685b      	ldreq	r3, [r3, #4]
 801efc8:	6063      	str	r3, [r4, #4]
 801efca:	bf04      	itt	eq
 801efcc:	1809      	addeq	r1, r1, r0
 801efce:	6021      	streq	r1, [r4, #0]
 801efd0:	6054      	str	r4, [r2, #4]
 801efd2:	e7ca      	b.n	801ef6a <_free_r+0x22>
 801efd4:	bd38      	pop	{r3, r4, r5, pc}
 801efd6:	bf00      	nop
 801efd8:	2001beec 	.word	0x2001beec

0801efdc <malloc>:
 801efdc:	4b02      	ldr	r3, [pc, #8]	@ (801efe8 <malloc+0xc>)
 801efde:	4601      	mov	r1, r0
 801efe0:	6818      	ldr	r0, [r3, #0]
 801efe2:	f000 b825 	b.w	801f030 <_malloc_r>
 801efe6:	bf00      	nop
 801efe8:	2000003c 	.word	0x2000003c

0801efec <sbrk_aligned>:
 801efec:	b570      	push	{r4, r5, r6, lr}
 801efee:	4e0f      	ldr	r6, [pc, #60]	@ (801f02c <sbrk_aligned+0x40>)
 801eff0:	460c      	mov	r4, r1
 801eff2:	6831      	ldr	r1, [r6, #0]
 801eff4:	4605      	mov	r5, r0
 801eff6:	b911      	cbnz	r1, 801effe <sbrk_aligned+0x12>
 801eff8:	f002 f806 	bl	8021008 <_sbrk_r>
 801effc:	6030      	str	r0, [r6, #0]
 801effe:	4621      	mov	r1, r4
 801f000:	4628      	mov	r0, r5
 801f002:	f002 f801 	bl	8021008 <_sbrk_r>
 801f006:	1c43      	adds	r3, r0, #1
 801f008:	d103      	bne.n	801f012 <sbrk_aligned+0x26>
 801f00a:	f04f 34ff 	mov.w	r4, #4294967295
 801f00e:	4620      	mov	r0, r4
 801f010:	bd70      	pop	{r4, r5, r6, pc}
 801f012:	1cc4      	adds	r4, r0, #3
 801f014:	f024 0403 	bic.w	r4, r4, #3
 801f018:	42a0      	cmp	r0, r4
 801f01a:	d0f8      	beq.n	801f00e <sbrk_aligned+0x22>
 801f01c:	1a21      	subs	r1, r4, r0
 801f01e:	4628      	mov	r0, r5
 801f020:	f001 fff2 	bl	8021008 <_sbrk_r>
 801f024:	3001      	adds	r0, #1
 801f026:	d1f2      	bne.n	801f00e <sbrk_aligned+0x22>
 801f028:	e7ef      	b.n	801f00a <sbrk_aligned+0x1e>
 801f02a:	bf00      	nop
 801f02c:	2001bee8 	.word	0x2001bee8

0801f030 <_malloc_r>:
 801f030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f034:	1ccd      	adds	r5, r1, #3
 801f036:	f025 0503 	bic.w	r5, r5, #3
 801f03a:	3508      	adds	r5, #8
 801f03c:	2d0c      	cmp	r5, #12
 801f03e:	bf38      	it	cc
 801f040:	250c      	movcc	r5, #12
 801f042:	2d00      	cmp	r5, #0
 801f044:	4606      	mov	r6, r0
 801f046:	db01      	blt.n	801f04c <_malloc_r+0x1c>
 801f048:	42a9      	cmp	r1, r5
 801f04a:	d904      	bls.n	801f056 <_malloc_r+0x26>
 801f04c:	230c      	movs	r3, #12
 801f04e:	6033      	str	r3, [r6, #0]
 801f050:	2000      	movs	r0, #0
 801f052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f056:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801f12c <_malloc_r+0xfc>
 801f05a:	f000 f869 	bl	801f130 <__malloc_lock>
 801f05e:	f8d8 3000 	ldr.w	r3, [r8]
 801f062:	461c      	mov	r4, r3
 801f064:	bb44      	cbnz	r4, 801f0b8 <_malloc_r+0x88>
 801f066:	4629      	mov	r1, r5
 801f068:	4630      	mov	r0, r6
 801f06a:	f7ff ffbf 	bl	801efec <sbrk_aligned>
 801f06e:	1c43      	adds	r3, r0, #1
 801f070:	4604      	mov	r4, r0
 801f072:	d158      	bne.n	801f126 <_malloc_r+0xf6>
 801f074:	f8d8 4000 	ldr.w	r4, [r8]
 801f078:	4627      	mov	r7, r4
 801f07a:	2f00      	cmp	r7, #0
 801f07c:	d143      	bne.n	801f106 <_malloc_r+0xd6>
 801f07e:	2c00      	cmp	r4, #0
 801f080:	d04b      	beq.n	801f11a <_malloc_r+0xea>
 801f082:	6823      	ldr	r3, [r4, #0]
 801f084:	4639      	mov	r1, r7
 801f086:	4630      	mov	r0, r6
 801f088:	eb04 0903 	add.w	r9, r4, r3
 801f08c:	f001 ffbc 	bl	8021008 <_sbrk_r>
 801f090:	4581      	cmp	r9, r0
 801f092:	d142      	bne.n	801f11a <_malloc_r+0xea>
 801f094:	6821      	ldr	r1, [r4, #0]
 801f096:	1a6d      	subs	r5, r5, r1
 801f098:	4629      	mov	r1, r5
 801f09a:	4630      	mov	r0, r6
 801f09c:	f7ff ffa6 	bl	801efec <sbrk_aligned>
 801f0a0:	3001      	adds	r0, #1
 801f0a2:	d03a      	beq.n	801f11a <_malloc_r+0xea>
 801f0a4:	6823      	ldr	r3, [r4, #0]
 801f0a6:	442b      	add	r3, r5
 801f0a8:	6023      	str	r3, [r4, #0]
 801f0aa:	f8d8 3000 	ldr.w	r3, [r8]
 801f0ae:	685a      	ldr	r2, [r3, #4]
 801f0b0:	bb62      	cbnz	r2, 801f10c <_malloc_r+0xdc>
 801f0b2:	f8c8 7000 	str.w	r7, [r8]
 801f0b6:	e00f      	b.n	801f0d8 <_malloc_r+0xa8>
 801f0b8:	6822      	ldr	r2, [r4, #0]
 801f0ba:	1b52      	subs	r2, r2, r5
 801f0bc:	d420      	bmi.n	801f100 <_malloc_r+0xd0>
 801f0be:	2a0b      	cmp	r2, #11
 801f0c0:	d917      	bls.n	801f0f2 <_malloc_r+0xc2>
 801f0c2:	1961      	adds	r1, r4, r5
 801f0c4:	42a3      	cmp	r3, r4
 801f0c6:	6025      	str	r5, [r4, #0]
 801f0c8:	bf18      	it	ne
 801f0ca:	6059      	strne	r1, [r3, #4]
 801f0cc:	6863      	ldr	r3, [r4, #4]
 801f0ce:	bf08      	it	eq
 801f0d0:	f8c8 1000 	streq.w	r1, [r8]
 801f0d4:	5162      	str	r2, [r4, r5]
 801f0d6:	604b      	str	r3, [r1, #4]
 801f0d8:	4630      	mov	r0, r6
 801f0da:	f000 f82f 	bl	801f13c <__malloc_unlock>
 801f0de:	f104 000b 	add.w	r0, r4, #11
 801f0e2:	1d23      	adds	r3, r4, #4
 801f0e4:	f020 0007 	bic.w	r0, r0, #7
 801f0e8:	1ac2      	subs	r2, r0, r3
 801f0ea:	bf1c      	itt	ne
 801f0ec:	1a1b      	subne	r3, r3, r0
 801f0ee:	50a3      	strne	r3, [r4, r2]
 801f0f0:	e7af      	b.n	801f052 <_malloc_r+0x22>
 801f0f2:	6862      	ldr	r2, [r4, #4]
 801f0f4:	42a3      	cmp	r3, r4
 801f0f6:	bf0c      	ite	eq
 801f0f8:	f8c8 2000 	streq.w	r2, [r8]
 801f0fc:	605a      	strne	r2, [r3, #4]
 801f0fe:	e7eb      	b.n	801f0d8 <_malloc_r+0xa8>
 801f100:	4623      	mov	r3, r4
 801f102:	6864      	ldr	r4, [r4, #4]
 801f104:	e7ae      	b.n	801f064 <_malloc_r+0x34>
 801f106:	463c      	mov	r4, r7
 801f108:	687f      	ldr	r7, [r7, #4]
 801f10a:	e7b6      	b.n	801f07a <_malloc_r+0x4a>
 801f10c:	461a      	mov	r2, r3
 801f10e:	685b      	ldr	r3, [r3, #4]
 801f110:	42a3      	cmp	r3, r4
 801f112:	d1fb      	bne.n	801f10c <_malloc_r+0xdc>
 801f114:	2300      	movs	r3, #0
 801f116:	6053      	str	r3, [r2, #4]
 801f118:	e7de      	b.n	801f0d8 <_malloc_r+0xa8>
 801f11a:	230c      	movs	r3, #12
 801f11c:	6033      	str	r3, [r6, #0]
 801f11e:	4630      	mov	r0, r6
 801f120:	f000 f80c 	bl	801f13c <__malloc_unlock>
 801f124:	e794      	b.n	801f050 <_malloc_r+0x20>
 801f126:	6005      	str	r5, [r0, #0]
 801f128:	e7d6      	b.n	801f0d8 <_malloc_r+0xa8>
 801f12a:	bf00      	nop
 801f12c:	2001beec 	.word	0x2001beec

0801f130 <__malloc_lock>:
 801f130:	4801      	ldr	r0, [pc, #4]	@ (801f138 <__malloc_lock+0x8>)
 801f132:	f7ff b8a4 	b.w	801e27e <__retarget_lock_acquire_recursive>
 801f136:	bf00      	nop
 801f138:	2001bee4 	.word	0x2001bee4

0801f13c <__malloc_unlock>:
 801f13c:	4801      	ldr	r0, [pc, #4]	@ (801f144 <__malloc_unlock+0x8>)
 801f13e:	f7ff b89f 	b.w	801e280 <__retarget_lock_release_recursive>
 801f142:	bf00      	nop
 801f144:	2001bee4 	.word	0x2001bee4

0801f148 <_Balloc>:
 801f148:	b570      	push	{r4, r5, r6, lr}
 801f14a:	69c6      	ldr	r6, [r0, #28]
 801f14c:	4604      	mov	r4, r0
 801f14e:	460d      	mov	r5, r1
 801f150:	b976      	cbnz	r6, 801f170 <_Balloc+0x28>
 801f152:	2010      	movs	r0, #16
 801f154:	f7ff ff42 	bl	801efdc <malloc>
 801f158:	4602      	mov	r2, r0
 801f15a:	61e0      	str	r0, [r4, #28]
 801f15c:	b920      	cbnz	r0, 801f168 <_Balloc+0x20>
 801f15e:	4b18      	ldr	r3, [pc, #96]	@ (801f1c0 <_Balloc+0x78>)
 801f160:	4818      	ldr	r0, [pc, #96]	@ (801f1c4 <_Balloc+0x7c>)
 801f162:	216b      	movs	r1, #107	@ 0x6b
 801f164:	f001 ff68 	bl	8021038 <__assert_func>
 801f168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f16c:	6006      	str	r6, [r0, #0]
 801f16e:	60c6      	str	r6, [r0, #12]
 801f170:	69e6      	ldr	r6, [r4, #28]
 801f172:	68f3      	ldr	r3, [r6, #12]
 801f174:	b183      	cbz	r3, 801f198 <_Balloc+0x50>
 801f176:	69e3      	ldr	r3, [r4, #28]
 801f178:	68db      	ldr	r3, [r3, #12]
 801f17a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f17e:	b9b8      	cbnz	r0, 801f1b0 <_Balloc+0x68>
 801f180:	2101      	movs	r1, #1
 801f182:	fa01 f605 	lsl.w	r6, r1, r5
 801f186:	1d72      	adds	r2, r6, #5
 801f188:	0092      	lsls	r2, r2, #2
 801f18a:	4620      	mov	r0, r4
 801f18c:	f001 ff72 	bl	8021074 <_calloc_r>
 801f190:	b160      	cbz	r0, 801f1ac <_Balloc+0x64>
 801f192:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f196:	e00e      	b.n	801f1b6 <_Balloc+0x6e>
 801f198:	2221      	movs	r2, #33	@ 0x21
 801f19a:	2104      	movs	r1, #4
 801f19c:	4620      	mov	r0, r4
 801f19e:	f001 ff69 	bl	8021074 <_calloc_r>
 801f1a2:	69e3      	ldr	r3, [r4, #28]
 801f1a4:	60f0      	str	r0, [r6, #12]
 801f1a6:	68db      	ldr	r3, [r3, #12]
 801f1a8:	2b00      	cmp	r3, #0
 801f1aa:	d1e4      	bne.n	801f176 <_Balloc+0x2e>
 801f1ac:	2000      	movs	r0, #0
 801f1ae:	bd70      	pop	{r4, r5, r6, pc}
 801f1b0:	6802      	ldr	r2, [r0, #0]
 801f1b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f1b6:	2300      	movs	r3, #0
 801f1b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f1bc:	e7f7      	b.n	801f1ae <_Balloc+0x66>
 801f1be:	bf00      	nop
 801f1c0:	080227be 	.word	0x080227be
 801f1c4:	0802283e 	.word	0x0802283e

0801f1c8 <_Bfree>:
 801f1c8:	b570      	push	{r4, r5, r6, lr}
 801f1ca:	69c6      	ldr	r6, [r0, #28]
 801f1cc:	4605      	mov	r5, r0
 801f1ce:	460c      	mov	r4, r1
 801f1d0:	b976      	cbnz	r6, 801f1f0 <_Bfree+0x28>
 801f1d2:	2010      	movs	r0, #16
 801f1d4:	f7ff ff02 	bl	801efdc <malloc>
 801f1d8:	4602      	mov	r2, r0
 801f1da:	61e8      	str	r0, [r5, #28]
 801f1dc:	b920      	cbnz	r0, 801f1e8 <_Bfree+0x20>
 801f1de:	4b09      	ldr	r3, [pc, #36]	@ (801f204 <_Bfree+0x3c>)
 801f1e0:	4809      	ldr	r0, [pc, #36]	@ (801f208 <_Bfree+0x40>)
 801f1e2:	218f      	movs	r1, #143	@ 0x8f
 801f1e4:	f001 ff28 	bl	8021038 <__assert_func>
 801f1e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f1ec:	6006      	str	r6, [r0, #0]
 801f1ee:	60c6      	str	r6, [r0, #12]
 801f1f0:	b13c      	cbz	r4, 801f202 <_Bfree+0x3a>
 801f1f2:	69eb      	ldr	r3, [r5, #28]
 801f1f4:	6862      	ldr	r2, [r4, #4]
 801f1f6:	68db      	ldr	r3, [r3, #12]
 801f1f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f1fc:	6021      	str	r1, [r4, #0]
 801f1fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f202:	bd70      	pop	{r4, r5, r6, pc}
 801f204:	080227be 	.word	0x080227be
 801f208:	0802283e 	.word	0x0802283e

0801f20c <__multadd>:
 801f20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f210:	690d      	ldr	r5, [r1, #16]
 801f212:	4607      	mov	r7, r0
 801f214:	460c      	mov	r4, r1
 801f216:	461e      	mov	r6, r3
 801f218:	f101 0c14 	add.w	ip, r1, #20
 801f21c:	2000      	movs	r0, #0
 801f21e:	f8dc 3000 	ldr.w	r3, [ip]
 801f222:	b299      	uxth	r1, r3
 801f224:	fb02 6101 	mla	r1, r2, r1, r6
 801f228:	0c1e      	lsrs	r6, r3, #16
 801f22a:	0c0b      	lsrs	r3, r1, #16
 801f22c:	fb02 3306 	mla	r3, r2, r6, r3
 801f230:	b289      	uxth	r1, r1
 801f232:	3001      	adds	r0, #1
 801f234:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f238:	4285      	cmp	r5, r0
 801f23a:	f84c 1b04 	str.w	r1, [ip], #4
 801f23e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f242:	dcec      	bgt.n	801f21e <__multadd+0x12>
 801f244:	b30e      	cbz	r6, 801f28a <__multadd+0x7e>
 801f246:	68a3      	ldr	r3, [r4, #8]
 801f248:	42ab      	cmp	r3, r5
 801f24a:	dc19      	bgt.n	801f280 <__multadd+0x74>
 801f24c:	6861      	ldr	r1, [r4, #4]
 801f24e:	4638      	mov	r0, r7
 801f250:	3101      	adds	r1, #1
 801f252:	f7ff ff79 	bl	801f148 <_Balloc>
 801f256:	4680      	mov	r8, r0
 801f258:	b928      	cbnz	r0, 801f266 <__multadd+0x5a>
 801f25a:	4602      	mov	r2, r0
 801f25c:	4b0c      	ldr	r3, [pc, #48]	@ (801f290 <__multadd+0x84>)
 801f25e:	480d      	ldr	r0, [pc, #52]	@ (801f294 <__multadd+0x88>)
 801f260:	21ba      	movs	r1, #186	@ 0xba
 801f262:	f001 fee9 	bl	8021038 <__assert_func>
 801f266:	6922      	ldr	r2, [r4, #16]
 801f268:	3202      	adds	r2, #2
 801f26a:	f104 010c 	add.w	r1, r4, #12
 801f26e:	0092      	lsls	r2, r2, #2
 801f270:	300c      	adds	r0, #12
 801f272:	f7ff f806 	bl	801e282 <memcpy>
 801f276:	4621      	mov	r1, r4
 801f278:	4638      	mov	r0, r7
 801f27a:	f7ff ffa5 	bl	801f1c8 <_Bfree>
 801f27e:	4644      	mov	r4, r8
 801f280:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f284:	3501      	adds	r5, #1
 801f286:	615e      	str	r6, [r3, #20]
 801f288:	6125      	str	r5, [r4, #16]
 801f28a:	4620      	mov	r0, r4
 801f28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f290:	0802282d 	.word	0x0802282d
 801f294:	0802283e 	.word	0x0802283e

0801f298 <__s2b>:
 801f298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f29c:	460c      	mov	r4, r1
 801f29e:	4615      	mov	r5, r2
 801f2a0:	461f      	mov	r7, r3
 801f2a2:	2209      	movs	r2, #9
 801f2a4:	3308      	adds	r3, #8
 801f2a6:	4606      	mov	r6, r0
 801f2a8:	fb93 f3f2 	sdiv	r3, r3, r2
 801f2ac:	2100      	movs	r1, #0
 801f2ae:	2201      	movs	r2, #1
 801f2b0:	429a      	cmp	r2, r3
 801f2b2:	db09      	blt.n	801f2c8 <__s2b+0x30>
 801f2b4:	4630      	mov	r0, r6
 801f2b6:	f7ff ff47 	bl	801f148 <_Balloc>
 801f2ba:	b940      	cbnz	r0, 801f2ce <__s2b+0x36>
 801f2bc:	4602      	mov	r2, r0
 801f2be:	4b19      	ldr	r3, [pc, #100]	@ (801f324 <__s2b+0x8c>)
 801f2c0:	4819      	ldr	r0, [pc, #100]	@ (801f328 <__s2b+0x90>)
 801f2c2:	21d3      	movs	r1, #211	@ 0xd3
 801f2c4:	f001 feb8 	bl	8021038 <__assert_func>
 801f2c8:	0052      	lsls	r2, r2, #1
 801f2ca:	3101      	adds	r1, #1
 801f2cc:	e7f0      	b.n	801f2b0 <__s2b+0x18>
 801f2ce:	9b08      	ldr	r3, [sp, #32]
 801f2d0:	6143      	str	r3, [r0, #20]
 801f2d2:	2d09      	cmp	r5, #9
 801f2d4:	f04f 0301 	mov.w	r3, #1
 801f2d8:	6103      	str	r3, [r0, #16]
 801f2da:	dd16      	ble.n	801f30a <__s2b+0x72>
 801f2dc:	f104 0909 	add.w	r9, r4, #9
 801f2e0:	46c8      	mov	r8, r9
 801f2e2:	442c      	add	r4, r5
 801f2e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f2e8:	4601      	mov	r1, r0
 801f2ea:	3b30      	subs	r3, #48	@ 0x30
 801f2ec:	220a      	movs	r2, #10
 801f2ee:	4630      	mov	r0, r6
 801f2f0:	f7ff ff8c 	bl	801f20c <__multadd>
 801f2f4:	45a0      	cmp	r8, r4
 801f2f6:	d1f5      	bne.n	801f2e4 <__s2b+0x4c>
 801f2f8:	f1a5 0408 	sub.w	r4, r5, #8
 801f2fc:	444c      	add	r4, r9
 801f2fe:	1b2d      	subs	r5, r5, r4
 801f300:	1963      	adds	r3, r4, r5
 801f302:	42bb      	cmp	r3, r7
 801f304:	db04      	blt.n	801f310 <__s2b+0x78>
 801f306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f30a:	340a      	adds	r4, #10
 801f30c:	2509      	movs	r5, #9
 801f30e:	e7f6      	b.n	801f2fe <__s2b+0x66>
 801f310:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f314:	4601      	mov	r1, r0
 801f316:	3b30      	subs	r3, #48	@ 0x30
 801f318:	220a      	movs	r2, #10
 801f31a:	4630      	mov	r0, r6
 801f31c:	f7ff ff76 	bl	801f20c <__multadd>
 801f320:	e7ee      	b.n	801f300 <__s2b+0x68>
 801f322:	bf00      	nop
 801f324:	0802282d 	.word	0x0802282d
 801f328:	0802283e 	.word	0x0802283e

0801f32c <__hi0bits>:
 801f32c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801f330:	4603      	mov	r3, r0
 801f332:	bf36      	itet	cc
 801f334:	0403      	lslcc	r3, r0, #16
 801f336:	2000      	movcs	r0, #0
 801f338:	2010      	movcc	r0, #16
 801f33a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801f33e:	bf3c      	itt	cc
 801f340:	021b      	lslcc	r3, r3, #8
 801f342:	3008      	addcc	r0, #8
 801f344:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f348:	bf3c      	itt	cc
 801f34a:	011b      	lslcc	r3, r3, #4
 801f34c:	3004      	addcc	r0, #4
 801f34e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f352:	bf3c      	itt	cc
 801f354:	009b      	lslcc	r3, r3, #2
 801f356:	3002      	addcc	r0, #2
 801f358:	2b00      	cmp	r3, #0
 801f35a:	db05      	blt.n	801f368 <__hi0bits+0x3c>
 801f35c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801f360:	f100 0001 	add.w	r0, r0, #1
 801f364:	bf08      	it	eq
 801f366:	2020      	moveq	r0, #32
 801f368:	4770      	bx	lr

0801f36a <__lo0bits>:
 801f36a:	6803      	ldr	r3, [r0, #0]
 801f36c:	4602      	mov	r2, r0
 801f36e:	f013 0007 	ands.w	r0, r3, #7
 801f372:	d00b      	beq.n	801f38c <__lo0bits+0x22>
 801f374:	07d9      	lsls	r1, r3, #31
 801f376:	d421      	bmi.n	801f3bc <__lo0bits+0x52>
 801f378:	0798      	lsls	r0, r3, #30
 801f37a:	bf49      	itett	mi
 801f37c:	085b      	lsrmi	r3, r3, #1
 801f37e:	089b      	lsrpl	r3, r3, #2
 801f380:	2001      	movmi	r0, #1
 801f382:	6013      	strmi	r3, [r2, #0]
 801f384:	bf5c      	itt	pl
 801f386:	6013      	strpl	r3, [r2, #0]
 801f388:	2002      	movpl	r0, #2
 801f38a:	4770      	bx	lr
 801f38c:	b299      	uxth	r1, r3
 801f38e:	b909      	cbnz	r1, 801f394 <__lo0bits+0x2a>
 801f390:	0c1b      	lsrs	r3, r3, #16
 801f392:	2010      	movs	r0, #16
 801f394:	b2d9      	uxtb	r1, r3
 801f396:	b909      	cbnz	r1, 801f39c <__lo0bits+0x32>
 801f398:	3008      	adds	r0, #8
 801f39a:	0a1b      	lsrs	r3, r3, #8
 801f39c:	0719      	lsls	r1, r3, #28
 801f39e:	bf04      	itt	eq
 801f3a0:	091b      	lsreq	r3, r3, #4
 801f3a2:	3004      	addeq	r0, #4
 801f3a4:	0799      	lsls	r1, r3, #30
 801f3a6:	bf04      	itt	eq
 801f3a8:	089b      	lsreq	r3, r3, #2
 801f3aa:	3002      	addeq	r0, #2
 801f3ac:	07d9      	lsls	r1, r3, #31
 801f3ae:	d403      	bmi.n	801f3b8 <__lo0bits+0x4e>
 801f3b0:	085b      	lsrs	r3, r3, #1
 801f3b2:	f100 0001 	add.w	r0, r0, #1
 801f3b6:	d003      	beq.n	801f3c0 <__lo0bits+0x56>
 801f3b8:	6013      	str	r3, [r2, #0]
 801f3ba:	4770      	bx	lr
 801f3bc:	2000      	movs	r0, #0
 801f3be:	4770      	bx	lr
 801f3c0:	2020      	movs	r0, #32
 801f3c2:	4770      	bx	lr

0801f3c4 <__i2b>:
 801f3c4:	b510      	push	{r4, lr}
 801f3c6:	460c      	mov	r4, r1
 801f3c8:	2101      	movs	r1, #1
 801f3ca:	f7ff febd 	bl	801f148 <_Balloc>
 801f3ce:	4602      	mov	r2, r0
 801f3d0:	b928      	cbnz	r0, 801f3de <__i2b+0x1a>
 801f3d2:	4b05      	ldr	r3, [pc, #20]	@ (801f3e8 <__i2b+0x24>)
 801f3d4:	4805      	ldr	r0, [pc, #20]	@ (801f3ec <__i2b+0x28>)
 801f3d6:	f240 1145 	movw	r1, #325	@ 0x145
 801f3da:	f001 fe2d 	bl	8021038 <__assert_func>
 801f3de:	2301      	movs	r3, #1
 801f3e0:	6144      	str	r4, [r0, #20]
 801f3e2:	6103      	str	r3, [r0, #16]
 801f3e4:	bd10      	pop	{r4, pc}
 801f3e6:	bf00      	nop
 801f3e8:	0802282d 	.word	0x0802282d
 801f3ec:	0802283e 	.word	0x0802283e

0801f3f0 <__multiply>:
 801f3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3f4:	4614      	mov	r4, r2
 801f3f6:	690a      	ldr	r2, [r1, #16]
 801f3f8:	6923      	ldr	r3, [r4, #16]
 801f3fa:	429a      	cmp	r2, r3
 801f3fc:	bfa8      	it	ge
 801f3fe:	4623      	movge	r3, r4
 801f400:	460f      	mov	r7, r1
 801f402:	bfa4      	itt	ge
 801f404:	460c      	movge	r4, r1
 801f406:	461f      	movge	r7, r3
 801f408:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801f40c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801f410:	68a3      	ldr	r3, [r4, #8]
 801f412:	6861      	ldr	r1, [r4, #4]
 801f414:	eb0a 0609 	add.w	r6, sl, r9
 801f418:	42b3      	cmp	r3, r6
 801f41a:	b085      	sub	sp, #20
 801f41c:	bfb8      	it	lt
 801f41e:	3101      	addlt	r1, #1
 801f420:	f7ff fe92 	bl	801f148 <_Balloc>
 801f424:	b930      	cbnz	r0, 801f434 <__multiply+0x44>
 801f426:	4602      	mov	r2, r0
 801f428:	4b44      	ldr	r3, [pc, #272]	@ (801f53c <__multiply+0x14c>)
 801f42a:	4845      	ldr	r0, [pc, #276]	@ (801f540 <__multiply+0x150>)
 801f42c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801f430:	f001 fe02 	bl	8021038 <__assert_func>
 801f434:	f100 0514 	add.w	r5, r0, #20
 801f438:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f43c:	462b      	mov	r3, r5
 801f43e:	2200      	movs	r2, #0
 801f440:	4543      	cmp	r3, r8
 801f442:	d321      	bcc.n	801f488 <__multiply+0x98>
 801f444:	f107 0114 	add.w	r1, r7, #20
 801f448:	f104 0214 	add.w	r2, r4, #20
 801f44c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801f450:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801f454:	9302      	str	r3, [sp, #8]
 801f456:	1b13      	subs	r3, r2, r4
 801f458:	3b15      	subs	r3, #21
 801f45a:	f023 0303 	bic.w	r3, r3, #3
 801f45e:	3304      	adds	r3, #4
 801f460:	f104 0715 	add.w	r7, r4, #21
 801f464:	42ba      	cmp	r2, r7
 801f466:	bf38      	it	cc
 801f468:	2304      	movcc	r3, #4
 801f46a:	9301      	str	r3, [sp, #4]
 801f46c:	9b02      	ldr	r3, [sp, #8]
 801f46e:	9103      	str	r1, [sp, #12]
 801f470:	428b      	cmp	r3, r1
 801f472:	d80c      	bhi.n	801f48e <__multiply+0x9e>
 801f474:	2e00      	cmp	r6, #0
 801f476:	dd03      	ble.n	801f480 <__multiply+0x90>
 801f478:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f47c:	2b00      	cmp	r3, #0
 801f47e:	d05b      	beq.n	801f538 <__multiply+0x148>
 801f480:	6106      	str	r6, [r0, #16]
 801f482:	b005      	add	sp, #20
 801f484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f488:	f843 2b04 	str.w	r2, [r3], #4
 801f48c:	e7d8      	b.n	801f440 <__multiply+0x50>
 801f48e:	f8b1 a000 	ldrh.w	sl, [r1]
 801f492:	f1ba 0f00 	cmp.w	sl, #0
 801f496:	d024      	beq.n	801f4e2 <__multiply+0xf2>
 801f498:	f104 0e14 	add.w	lr, r4, #20
 801f49c:	46a9      	mov	r9, r5
 801f49e:	f04f 0c00 	mov.w	ip, #0
 801f4a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f4a6:	f8d9 3000 	ldr.w	r3, [r9]
 801f4aa:	fa1f fb87 	uxth.w	fp, r7
 801f4ae:	b29b      	uxth	r3, r3
 801f4b0:	fb0a 330b 	mla	r3, sl, fp, r3
 801f4b4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801f4b8:	f8d9 7000 	ldr.w	r7, [r9]
 801f4bc:	4463      	add	r3, ip
 801f4be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f4c2:	fb0a c70b 	mla	r7, sl, fp, ip
 801f4c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801f4ca:	b29b      	uxth	r3, r3
 801f4cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f4d0:	4572      	cmp	r2, lr
 801f4d2:	f849 3b04 	str.w	r3, [r9], #4
 801f4d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f4da:	d8e2      	bhi.n	801f4a2 <__multiply+0xb2>
 801f4dc:	9b01      	ldr	r3, [sp, #4]
 801f4de:	f845 c003 	str.w	ip, [r5, r3]
 801f4e2:	9b03      	ldr	r3, [sp, #12]
 801f4e4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801f4e8:	3104      	adds	r1, #4
 801f4ea:	f1b9 0f00 	cmp.w	r9, #0
 801f4ee:	d021      	beq.n	801f534 <__multiply+0x144>
 801f4f0:	682b      	ldr	r3, [r5, #0]
 801f4f2:	f104 0c14 	add.w	ip, r4, #20
 801f4f6:	46ae      	mov	lr, r5
 801f4f8:	f04f 0a00 	mov.w	sl, #0
 801f4fc:	f8bc b000 	ldrh.w	fp, [ip]
 801f500:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801f504:	fb09 770b 	mla	r7, r9, fp, r7
 801f508:	4457      	add	r7, sl
 801f50a:	b29b      	uxth	r3, r3
 801f50c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f510:	f84e 3b04 	str.w	r3, [lr], #4
 801f514:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f518:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f51c:	f8be 3000 	ldrh.w	r3, [lr]
 801f520:	fb09 330a 	mla	r3, r9, sl, r3
 801f524:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801f528:	4562      	cmp	r2, ip
 801f52a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f52e:	d8e5      	bhi.n	801f4fc <__multiply+0x10c>
 801f530:	9f01      	ldr	r7, [sp, #4]
 801f532:	51eb      	str	r3, [r5, r7]
 801f534:	3504      	adds	r5, #4
 801f536:	e799      	b.n	801f46c <__multiply+0x7c>
 801f538:	3e01      	subs	r6, #1
 801f53a:	e79b      	b.n	801f474 <__multiply+0x84>
 801f53c:	0802282d 	.word	0x0802282d
 801f540:	0802283e 	.word	0x0802283e

0801f544 <__pow5mult>:
 801f544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f548:	4615      	mov	r5, r2
 801f54a:	f012 0203 	ands.w	r2, r2, #3
 801f54e:	4607      	mov	r7, r0
 801f550:	460e      	mov	r6, r1
 801f552:	d007      	beq.n	801f564 <__pow5mult+0x20>
 801f554:	4c25      	ldr	r4, [pc, #148]	@ (801f5ec <__pow5mult+0xa8>)
 801f556:	3a01      	subs	r2, #1
 801f558:	2300      	movs	r3, #0
 801f55a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f55e:	f7ff fe55 	bl	801f20c <__multadd>
 801f562:	4606      	mov	r6, r0
 801f564:	10ad      	asrs	r5, r5, #2
 801f566:	d03d      	beq.n	801f5e4 <__pow5mult+0xa0>
 801f568:	69fc      	ldr	r4, [r7, #28]
 801f56a:	b97c      	cbnz	r4, 801f58c <__pow5mult+0x48>
 801f56c:	2010      	movs	r0, #16
 801f56e:	f7ff fd35 	bl	801efdc <malloc>
 801f572:	4602      	mov	r2, r0
 801f574:	61f8      	str	r0, [r7, #28]
 801f576:	b928      	cbnz	r0, 801f584 <__pow5mult+0x40>
 801f578:	4b1d      	ldr	r3, [pc, #116]	@ (801f5f0 <__pow5mult+0xac>)
 801f57a:	481e      	ldr	r0, [pc, #120]	@ (801f5f4 <__pow5mult+0xb0>)
 801f57c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801f580:	f001 fd5a 	bl	8021038 <__assert_func>
 801f584:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f588:	6004      	str	r4, [r0, #0]
 801f58a:	60c4      	str	r4, [r0, #12]
 801f58c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801f590:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f594:	b94c      	cbnz	r4, 801f5aa <__pow5mult+0x66>
 801f596:	f240 2171 	movw	r1, #625	@ 0x271
 801f59a:	4638      	mov	r0, r7
 801f59c:	f7ff ff12 	bl	801f3c4 <__i2b>
 801f5a0:	2300      	movs	r3, #0
 801f5a2:	f8c8 0008 	str.w	r0, [r8, #8]
 801f5a6:	4604      	mov	r4, r0
 801f5a8:	6003      	str	r3, [r0, #0]
 801f5aa:	f04f 0900 	mov.w	r9, #0
 801f5ae:	07eb      	lsls	r3, r5, #31
 801f5b0:	d50a      	bpl.n	801f5c8 <__pow5mult+0x84>
 801f5b2:	4631      	mov	r1, r6
 801f5b4:	4622      	mov	r2, r4
 801f5b6:	4638      	mov	r0, r7
 801f5b8:	f7ff ff1a 	bl	801f3f0 <__multiply>
 801f5bc:	4631      	mov	r1, r6
 801f5be:	4680      	mov	r8, r0
 801f5c0:	4638      	mov	r0, r7
 801f5c2:	f7ff fe01 	bl	801f1c8 <_Bfree>
 801f5c6:	4646      	mov	r6, r8
 801f5c8:	106d      	asrs	r5, r5, #1
 801f5ca:	d00b      	beq.n	801f5e4 <__pow5mult+0xa0>
 801f5cc:	6820      	ldr	r0, [r4, #0]
 801f5ce:	b938      	cbnz	r0, 801f5e0 <__pow5mult+0x9c>
 801f5d0:	4622      	mov	r2, r4
 801f5d2:	4621      	mov	r1, r4
 801f5d4:	4638      	mov	r0, r7
 801f5d6:	f7ff ff0b 	bl	801f3f0 <__multiply>
 801f5da:	6020      	str	r0, [r4, #0]
 801f5dc:	f8c0 9000 	str.w	r9, [r0]
 801f5e0:	4604      	mov	r4, r0
 801f5e2:	e7e4      	b.n	801f5ae <__pow5mult+0x6a>
 801f5e4:	4630      	mov	r0, r6
 801f5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f5ea:	bf00      	nop
 801f5ec:	08022898 	.word	0x08022898
 801f5f0:	080227be 	.word	0x080227be
 801f5f4:	0802283e 	.word	0x0802283e

0801f5f8 <__lshift>:
 801f5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f5fc:	460c      	mov	r4, r1
 801f5fe:	6849      	ldr	r1, [r1, #4]
 801f600:	6923      	ldr	r3, [r4, #16]
 801f602:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f606:	68a3      	ldr	r3, [r4, #8]
 801f608:	4607      	mov	r7, r0
 801f60a:	4691      	mov	r9, r2
 801f60c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f610:	f108 0601 	add.w	r6, r8, #1
 801f614:	42b3      	cmp	r3, r6
 801f616:	db0b      	blt.n	801f630 <__lshift+0x38>
 801f618:	4638      	mov	r0, r7
 801f61a:	f7ff fd95 	bl	801f148 <_Balloc>
 801f61e:	4605      	mov	r5, r0
 801f620:	b948      	cbnz	r0, 801f636 <__lshift+0x3e>
 801f622:	4602      	mov	r2, r0
 801f624:	4b28      	ldr	r3, [pc, #160]	@ (801f6c8 <__lshift+0xd0>)
 801f626:	4829      	ldr	r0, [pc, #164]	@ (801f6cc <__lshift+0xd4>)
 801f628:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801f62c:	f001 fd04 	bl	8021038 <__assert_func>
 801f630:	3101      	adds	r1, #1
 801f632:	005b      	lsls	r3, r3, #1
 801f634:	e7ee      	b.n	801f614 <__lshift+0x1c>
 801f636:	2300      	movs	r3, #0
 801f638:	f100 0114 	add.w	r1, r0, #20
 801f63c:	f100 0210 	add.w	r2, r0, #16
 801f640:	4618      	mov	r0, r3
 801f642:	4553      	cmp	r3, sl
 801f644:	db33      	blt.n	801f6ae <__lshift+0xb6>
 801f646:	6920      	ldr	r0, [r4, #16]
 801f648:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f64c:	f104 0314 	add.w	r3, r4, #20
 801f650:	f019 091f 	ands.w	r9, r9, #31
 801f654:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f658:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f65c:	d02b      	beq.n	801f6b6 <__lshift+0xbe>
 801f65e:	f1c9 0e20 	rsb	lr, r9, #32
 801f662:	468a      	mov	sl, r1
 801f664:	2200      	movs	r2, #0
 801f666:	6818      	ldr	r0, [r3, #0]
 801f668:	fa00 f009 	lsl.w	r0, r0, r9
 801f66c:	4310      	orrs	r0, r2
 801f66e:	f84a 0b04 	str.w	r0, [sl], #4
 801f672:	f853 2b04 	ldr.w	r2, [r3], #4
 801f676:	459c      	cmp	ip, r3
 801f678:	fa22 f20e 	lsr.w	r2, r2, lr
 801f67c:	d8f3      	bhi.n	801f666 <__lshift+0x6e>
 801f67e:	ebac 0304 	sub.w	r3, ip, r4
 801f682:	3b15      	subs	r3, #21
 801f684:	f023 0303 	bic.w	r3, r3, #3
 801f688:	3304      	adds	r3, #4
 801f68a:	f104 0015 	add.w	r0, r4, #21
 801f68e:	4584      	cmp	ip, r0
 801f690:	bf38      	it	cc
 801f692:	2304      	movcc	r3, #4
 801f694:	50ca      	str	r2, [r1, r3]
 801f696:	b10a      	cbz	r2, 801f69c <__lshift+0xa4>
 801f698:	f108 0602 	add.w	r6, r8, #2
 801f69c:	3e01      	subs	r6, #1
 801f69e:	4638      	mov	r0, r7
 801f6a0:	612e      	str	r6, [r5, #16]
 801f6a2:	4621      	mov	r1, r4
 801f6a4:	f7ff fd90 	bl	801f1c8 <_Bfree>
 801f6a8:	4628      	mov	r0, r5
 801f6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f6ae:	f842 0f04 	str.w	r0, [r2, #4]!
 801f6b2:	3301      	adds	r3, #1
 801f6b4:	e7c5      	b.n	801f642 <__lshift+0x4a>
 801f6b6:	3904      	subs	r1, #4
 801f6b8:	f853 2b04 	ldr.w	r2, [r3], #4
 801f6bc:	f841 2f04 	str.w	r2, [r1, #4]!
 801f6c0:	459c      	cmp	ip, r3
 801f6c2:	d8f9      	bhi.n	801f6b8 <__lshift+0xc0>
 801f6c4:	e7ea      	b.n	801f69c <__lshift+0xa4>
 801f6c6:	bf00      	nop
 801f6c8:	0802282d 	.word	0x0802282d
 801f6cc:	0802283e 	.word	0x0802283e

0801f6d0 <__mcmp>:
 801f6d0:	690a      	ldr	r2, [r1, #16]
 801f6d2:	4603      	mov	r3, r0
 801f6d4:	6900      	ldr	r0, [r0, #16]
 801f6d6:	1a80      	subs	r0, r0, r2
 801f6d8:	b530      	push	{r4, r5, lr}
 801f6da:	d10e      	bne.n	801f6fa <__mcmp+0x2a>
 801f6dc:	3314      	adds	r3, #20
 801f6de:	3114      	adds	r1, #20
 801f6e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801f6e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801f6e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801f6ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801f6f0:	4295      	cmp	r5, r2
 801f6f2:	d003      	beq.n	801f6fc <__mcmp+0x2c>
 801f6f4:	d205      	bcs.n	801f702 <__mcmp+0x32>
 801f6f6:	f04f 30ff 	mov.w	r0, #4294967295
 801f6fa:	bd30      	pop	{r4, r5, pc}
 801f6fc:	42a3      	cmp	r3, r4
 801f6fe:	d3f3      	bcc.n	801f6e8 <__mcmp+0x18>
 801f700:	e7fb      	b.n	801f6fa <__mcmp+0x2a>
 801f702:	2001      	movs	r0, #1
 801f704:	e7f9      	b.n	801f6fa <__mcmp+0x2a>
	...

0801f708 <__mdiff>:
 801f708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f70c:	4689      	mov	r9, r1
 801f70e:	4606      	mov	r6, r0
 801f710:	4611      	mov	r1, r2
 801f712:	4648      	mov	r0, r9
 801f714:	4614      	mov	r4, r2
 801f716:	f7ff ffdb 	bl	801f6d0 <__mcmp>
 801f71a:	1e05      	subs	r5, r0, #0
 801f71c:	d112      	bne.n	801f744 <__mdiff+0x3c>
 801f71e:	4629      	mov	r1, r5
 801f720:	4630      	mov	r0, r6
 801f722:	f7ff fd11 	bl	801f148 <_Balloc>
 801f726:	4602      	mov	r2, r0
 801f728:	b928      	cbnz	r0, 801f736 <__mdiff+0x2e>
 801f72a:	4b3f      	ldr	r3, [pc, #252]	@ (801f828 <__mdiff+0x120>)
 801f72c:	f240 2137 	movw	r1, #567	@ 0x237
 801f730:	483e      	ldr	r0, [pc, #248]	@ (801f82c <__mdiff+0x124>)
 801f732:	f001 fc81 	bl	8021038 <__assert_func>
 801f736:	2301      	movs	r3, #1
 801f738:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f73c:	4610      	mov	r0, r2
 801f73e:	b003      	add	sp, #12
 801f740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f744:	bfbc      	itt	lt
 801f746:	464b      	movlt	r3, r9
 801f748:	46a1      	movlt	r9, r4
 801f74a:	4630      	mov	r0, r6
 801f74c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f750:	bfba      	itte	lt
 801f752:	461c      	movlt	r4, r3
 801f754:	2501      	movlt	r5, #1
 801f756:	2500      	movge	r5, #0
 801f758:	f7ff fcf6 	bl	801f148 <_Balloc>
 801f75c:	4602      	mov	r2, r0
 801f75e:	b918      	cbnz	r0, 801f768 <__mdiff+0x60>
 801f760:	4b31      	ldr	r3, [pc, #196]	@ (801f828 <__mdiff+0x120>)
 801f762:	f240 2145 	movw	r1, #581	@ 0x245
 801f766:	e7e3      	b.n	801f730 <__mdiff+0x28>
 801f768:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801f76c:	6926      	ldr	r6, [r4, #16]
 801f76e:	60c5      	str	r5, [r0, #12]
 801f770:	f109 0310 	add.w	r3, r9, #16
 801f774:	f109 0514 	add.w	r5, r9, #20
 801f778:	f104 0e14 	add.w	lr, r4, #20
 801f77c:	f100 0b14 	add.w	fp, r0, #20
 801f780:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801f784:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801f788:	9301      	str	r3, [sp, #4]
 801f78a:	46d9      	mov	r9, fp
 801f78c:	f04f 0c00 	mov.w	ip, #0
 801f790:	9b01      	ldr	r3, [sp, #4]
 801f792:	f85e 0b04 	ldr.w	r0, [lr], #4
 801f796:	f853 af04 	ldr.w	sl, [r3, #4]!
 801f79a:	9301      	str	r3, [sp, #4]
 801f79c:	fa1f f38a 	uxth.w	r3, sl
 801f7a0:	4619      	mov	r1, r3
 801f7a2:	b283      	uxth	r3, r0
 801f7a4:	1acb      	subs	r3, r1, r3
 801f7a6:	0c00      	lsrs	r0, r0, #16
 801f7a8:	4463      	add	r3, ip
 801f7aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801f7ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801f7b2:	b29b      	uxth	r3, r3
 801f7b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801f7b8:	4576      	cmp	r6, lr
 801f7ba:	f849 3b04 	str.w	r3, [r9], #4
 801f7be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f7c2:	d8e5      	bhi.n	801f790 <__mdiff+0x88>
 801f7c4:	1b33      	subs	r3, r6, r4
 801f7c6:	3b15      	subs	r3, #21
 801f7c8:	f023 0303 	bic.w	r3, r3, #3
 801f7cc:	3415      	adds	r4, #21
 801f7ce:	3304      	adds	r3, #4
 801f7d0:	42a6      	cmp	r6, r4
 801f7d2:	bf38      	it	cc
 801f7d4:	2304      	movcc	r3, #4
 801f7d6:	441d      	add	r5, r3
 801f7d8:	445b      	add	r3, fp
 801f7da:	461e      	mov	r6, r3
 801f7dc:	462c      	mov	r4, r5
 801f7de:	4544      	cmp	r4, r8
 801f7e0:	d30e      	bcc.n	801f800 <__mdiff+0xf8>
 801f7e2:	f108 0103 	add.w	r1, r8, #3
 801f7e6:	1b49      	subs	r1, r1, r5
 801f7e8:	f021 0103 	bic.w	r1, r1, #3
 801f7ec:	3d03      	subs	r5, #3
 801f7ee:	45a8      	cmp	r8, r5
 801f7f0:	bf38      	it	cc
 801f7f2:	2100      	movcc	r1, #0
 801f7f4:	440b      	add	r3, r1
 801f7f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f7fa:	b191      	cbz	r1, 801f822 <__mdiff+0x11a>
 801f7fc:	6117      	str	r7, [r2, #16]
 801f7fe:	e79d      	b.n	801f73c <__mdiff+0x34>
 801f800:	f854 1b04 	ldr.w	r1, [r4], #4
 801f804:	46e6      	mov	lr, ip
 801f806:	0c08      	lsrs	r0, r1, #16
 801f808:	fa1c fc81 	uxtah	ip, ip, r1
 801f80c:	4471      	add	r1, lr
 801f80e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801f812:	b289      	uxth	r1, r1
 801f814:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801f818:	f846 1b04 	str.w	r1, [r6], #4
 801f81c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f820:	e7dd      	b.n	801f7de <__mdiff+0xd6>
 801f822:	3f01      	subs	r7, #1
 801f824:	e7e7      	b.n	801f7f6 <__mdiff+0xee>
 801f826:	bf00      	nop
 801f828:	0802282d 	.word	0x0802282d
 801f82c:	0802283e 	.word	0x0802283e

0801f830 <__ulp>:
 801f830:	b082      	sub	sp, #8
 801f832:	ed8d 0b00 	vstr	d0, [sp]
 801f836:	9a01      	ldr	r2, [sp, #4]
 801f838:	4b0f      	ldr	r3, [pc, #60]	@ (801f878 <__ulp+0x48>)
 801f83a:	4013      	ands	r3, r2
 801f83c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801f840:	2b00      	cmp	r3, #0
 801f842:	dc08      	bgt.n	801f856 <__ulp+0x26>
 801f844:	425b      	negs	r3, r3
 801f846:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801f84a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801f84e:	da04      	bge.n	801f85a <__ulp+0x2a>
 801f850:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801f854:	4113      	asrs	r3, r2
 801f856:	2200      	movs	r2, #0
 801f858:	e008      	b.n	801f86c <__ulp+0x3c>
 801f85a:	f1a2 0314 	sub.w	r3, r2, #20
 801f85e:	2b1e      	cmp	r3, #30
 801f860:	bfda      	itte	le
 801f862:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801f866:	40da      	lsrle	r2, r3
 801f868:	2201      	movgt	r2, #1
 801f86a:	2300      	movs	r3, #0
 801f86c:	4619      	mov	r1, r3
 801f86e:	4610      	mov	r0, r2
 801f870:	ec41 0b10 	vmov	d0, r0, r1
 801f874:	b002      	add	sp, #8
 801f876:	4770      	bx	lr
 801f878:	7ff00000 	.word	0x7ff00000

0801f87c <__b2d>:
 801f87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f880:	6906      	ldr	r6, [r0, #16]
 801f882:	f100 0814 	add.w	r8, r0, #20
 801f886:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801f88a:	1f37      	subs	r7, r6, #4
 801f88c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801f890:	4610      	mov	r0, r2
 801f892:	f7ff fd4b 	bl	801f32c <__hi0bits>
 801f896:	f1c0 0320 	rsb	r3, r0, #32
 801f89a:	280a      	cmp	r0, #10
 801f89c:	600b      	str	r3, [r1, #0]
 801f89e:	491b      	ldr	r1, [pc, #108]	@ (801f90c <__b2d+0x90>)
 801f8a0:	dc15      	bgt.n	801f8ce <__b2d+0x52>
 801f8a2:	f1c0 0c0b 	rsb	ip, r0, #11
 801f8a6:	fa22 f30c 	lsr.w	r3, r2, ip
 801f8aa:	45b8      	cmp	r8, r7
 801f8ac:	ea43 0501 	orr.w	r5, r3, r1
 801f8b0:	bf34      	ite	cc
 801f8b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801f8b6:	2300      	movcs	r3, #0
 801f8b8:	3015      	adds	r0, #21
 801f8ba:	fa02 f000 	lsl.w	r0, r2, r0
 801f8be:	fa23 f30c 	lsr.w	r3, r3, ip
 801f8c2:	4303      	orrs	r3, r0
 801f8c4:	461c      	mov	r4, r3
 801f8c6:	ec45 4b10 	vmov	d0, r4, r5
 801f8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f8ce:	45b8      	cmp	r8, r7
 801f8d0:	bf3a      	itte	cc
 801f8d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801f8d6:	f1a6 0708 	subcc.w	r7, r6, #8
 801f8da:	2300      	movcs	r3, #0
 801f8dc:	380b      	subs	r0, #11
 801f8de:	d012      	beq.n	801f906 <__b2d+0x8a>
 801f8e0:	f1c0 0120 	rsb	r1, r0, #32
 801f8e4:	fa23 f401 	lsr.w	r4, r3, r1
 801f8e8:	4082      	lsls	r2, r0
 801f8ea:	4322      	orrs	r2, r4
 801f8ec:	4547      	cmp	r7, r8
 801f8ee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801f8f2:	bf8c      	ite	hi
 801f8f4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801f8f8:	2200      	movls	r2, #0
 801f8fa:	4083      	lsls	r3, r0
 801f8fc:	40ca      	lsrs	r2, r1
 801f8fe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801f902:	4313      	orrs	r3, r2
 801f904:	e7de      	b.n	801f8c4 <__b2d+0x48>
 801f906:	ea42 0501 	orr.w	r5, r2, r1
 801f90a:	e7db      	b.n	801f8c4 <__b2d+0x48>
 801f90c:	3ff00000 	.word	0x3ff00000

0801f910 <__d2b>:
 801f910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f914:	460f      	mov	r7, r1
 801f916:	2101      	movs	r1, #1
 801f918:	ec59 8b10 	vmov	r8, r9, d0
 801f91c:	4616      	mov	r6, r2
 801f91e:	f7ff fc13 	bl	801f148 <_Balloc>
 801f922:	4604      	mov	r4, r0
 801f924:	b930      	cbnz	r0, 801f934 <__d2b+0x24>
 801f926:	4602      	mov	r2, r0
 801f928:	4b23      	ldr	r3, [pc, #140]	@ (801f9b8 <__d2b+0xa8>)
 801f92a:	4824      	ldr	r0, [pc, #144]	@ (801f9bc <__d2b+0xac>)
 801f92c:	f240 310f 	movw	r1, #783	@ 0x30f
 801f930:	f001 fb82 	bl	8021038 <__assert_func>
 801f934:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f93c:	b10d      	cbz	r5, 801f942 <__d2b+0x32>
 801f93e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f942:	9301      	str	r3, [sp, #4]
 801f944:	f1b8 0300 	subs.w	r3, r8, #0
 801f948:	d023      	beq.n	801f992 <__d2b+0x82>
 801f94a:	4668      	mov	r0, sp
 801f94c:	9300      	str	r3, [sp, #0]
 801f94e:	f7ff fd0c 	bl	801f36a <__lo0bits>
 801f952:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f956:	b1d0      	cbz	r0, 801f98e <__d2b+0x7e>
 801f958:	f1c0 0320 	rsb	r3, r0, #32
 801f95c:	fa02 f303 	lsl.w	r3, r2, r3
 801f960:	430b      	orrs	r3, r1
 801f962:	40c2      	lsrs	r2, r0
 801f964:	6163      	str	r3, [r4, #20]
 801f966:	9201      	str	r2, [sp, #4]
 801f968:	9b01      	ldr	r3, [sp, #4]
 801f96a:	61a3      	str	r3, [r4, #24]
 801f96c:	2b00      	cmp	r3, #0
 801f96e:	bf0c      	ite	eq
 801f970:	2201      	moveq	r2, #1
 801f972:	2202      	movne	r2, #2
 801f974:	6122      	str	r2, [r4, #16]
 801f976:	b1a5      	cbz	r5, 801f9a2 <__d2b+0x92>
 801f978:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801f97c:	4405      	add	r5, r0
 801f97e:	603d      	str	r5, [r7, #0]
 801f980:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801f984:	6030      	str	r0, [r6, #0]
 801f986:	4620      	mov	r0, r4
 801f988:	b003      	add	sp, #12
 801f98a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f98e:	6161      	str	r1, [r4, #20]
 801f990:	e7ea      	b.n	801f968 <__d2b+0x58>
 801f992:	a801      	add	r0, sp, #4
 801f994:	f7ff fce9 	bl	801f36a <__lo0bits>
 801f998:	9b01      	ldr	r3, [sp, #4]
 801f99a:	6163      	str	r3, [r4, #20]
 801f99c:	3020      	adds	r0, #32
 801f99e:	2201      	movs	r2, #1
 801f9a0:	e7e8      	b.n	801f974 <__d2b+0x64>
 801f9a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f9a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801f9aa:	6038      	str	r0, [r7, #0]
 801f9ac:	6918      	ldr	r0, [r3, #16]
 801f9ae:	f7ff fcbd 	bl	801f32c <__hi0bits>
 801f9b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f9b6:	e7e5      	b.n	801f984 <__d2b+0x74>
 801f9b8:	0802282d 	.word	0x0802282d
 801f9bc:	0802283e 	.word	0x0802283e

0801f9c0 <__ratio>:
 801f9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9c4:	b085      	sub	sp, #20
 801f9c6:	e9cd 1000 	strd	r1, r0, [sp]
 801f9ca:	a902      	add	r1, sp, #8
 801f9cc:	f7ff ff56 	bl	801f87c <__b2d>
 801f9d0:	9800      	ldr	r0, [sp, #0]
 801f9d2:	a903      	add	r1, sp, #12
 801f9d4:	ec55 4b10 	vmov	r4, r5, d0
 801f9d8:	f7ff ff50 	bl	801f87c <__b2d>
 801f9dc:	9b01      	ldr	r3, [sp, #4]
 801f9de:	6919      	ldr	r1, [r3, #16]
 801f9e0:	9b00      	ldr	r3, [sp, #0]
 801f9e2:	691b      	ldr	r3, [r3, #16]
 801f9e4:	1ac9      	subs	r1, r1, r3
 801f9e6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801f9ea:	1a9b      	subs	r3, r3, r2
 801f9ec:	ec5b ab10 	vmov	sl, fp, d0
 801f9f0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801f9f4:	2b00      	cmp	r3, #0
 801f9f6:	bfce      	itee	gt
 801f9f8:	462a      	movgt	r2, r5
 801f9fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f9fe:	465a      	movle	r2, fp
 801fa00:	462f      	mov	r7, r5
 801fa02:	46d9      	mov	r9, fp
 801fa04:	bfcc      	ite	gt
 801fa06:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801fa0a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801fa0e:	464b      	mov	r3, r9
 801fa10:	4652      	mov	r2, sl
 801fa12:	4620      	mov	r0, r4
 801fa14:	4639      	mov	r1, r7
 801fa16:	f7e0 ff41 	bl	800089c <__aeabi_ddiv>
 801fa1a:	ec41 0b10 	vmov	d0, r0, r1
 801fa1e:	b005      	add	sp, #20
 801fa20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fa24 <__copybits>:
 801fa24:	3901      	subs	r1, #1
 801fa26:	b570      	push	{r4, r5, r6, lr}
 801fa28:	1149      	asrs	r1, r1, #5
 801fa2a:	6914      	ldr	r4, [r2, #16]
 801fa2c:	3101      	adds	r1, #1
 801fa2e:	f102 0314 	add.w	r3, r2, #20
 801fa32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801fa36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801fa3a:	1f05      	subs	r5, r0, #4
 801fa3c:	42a3      	cmp	r3, r4
 801fa3e:	d30c      	bcc.n	801fa5a <__copybits+0x36>
 801fa40:	1aa3      	subs	r3, r4, r2
 801fa42:	3b11      	subs	r3, #17
 801fa44:	f023 0303 	bic.w	r3, r3, #3
 801fa48:	3211      	adds	r2, #17
 801fa4a:	42a2      	cmp	r2, r4
 801fa4c:	bf88      	it	hi
 801fa4e:	2300      	movhi	r3, #0
 801fa50:	4418      	add	r0, r3
 801fa52:	2300      	movs	r3, #0
 801fa54:	4288      	cmp	r0, r1
 801fa56:	d305      	bcc.n	801fa64 <__copybits+0x40>
 801fa58:	bd70      	pop	{r4, r5, r6, pc}
 801fa5a:	f853 6b04 	ldr.w	r6, [r3], #4
 801fa5e:	f845 6f04 	str.w	r6, [r5, #4]!
 801fa62:	e7eb      	b.n	801fa3c <__copybits+0x18>
 801fa64:	f840 3b04 	str.w	r3, [r0], #4
 801fa68:	e7f4      	b.n	801fa54 <__copybits+0x30>

0801fa6a <__any_on>:
 801fa6a:	f100 0214 	add.w	r2, r0, #20
 801fa6e:	6900      	ldr	r0, [r0, #16]
 801fa70:	114b      	asrs	r3, r1, #5
 801fa72:	4298      	cmp	r0, r3
 801fa74:	b510      	push	{r4, lr}
 801fa76:	db11      	blt.n	801fa9c <__any_on+0x32>
 801fa78:	dd0a      	ble.n	801fa90 <__any_on+0x26>
 801fa7a:	f011 011f 	ands.w	r1, r1, #31
 801fa7e:	d007      	beq.n	801fa90 <__any_on+0x26>
 801fa80:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801fa84:	fa24 f001 	lsr.w	r0, r4, r1
 801fa88:	fa00 f101 	lsl.w	r1, r0, r1
 801fa8c:	428c      	cmp	r4, r1
 801fa8e:	d10b      	bne.n	801faa8 <__any_on+0x3e>
 801fa90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801fa94:	4293      	cmp	r3, r2
 801fa96:	d803      	bhi.n	801faa0 <__any_on+0x36>
 801fa98:	2000      	movs	r0, #0
 801fa9a:	bd10      	pop	{r4, pc}
 801fa9c:	4603      	mov	r3, r0
 801fa9e:	e7f7      	b.n	801fa90 <__any_on+0x26>
 801faa0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801faa4:	2900      	cmp	r1, #0
 801faa6:	d0f5      	beq.n	801fa94 <__any_on+0x2a>
 801faa8:	2001      	movs	r0, #1
 801faaa:	e7f6      	b.n	801fa9a <__any_on+0x30>

0801faac <sulp>:
 801faac:	b570      	push	{r4, r5, r6, lr}
 801faae:	4604      	mov	r4, r0
 801fab0:	460d      	mov	r5, r1
 801fab2:	ec45 4b10 	vmov	d0, r4, r5
 801fab6:	4616      	mov	r6, r2
 801fab8:	f7ff feba 	bl	801f830 <__ulp>
 801fabc:	ec51 0b10 	vmov	r0, r1, d0
 801fac0:	b17e      	cbz	r6, 801fae2 <sulp+0x36>
 801fac2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801fac6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801faca:	2b00      	cmp	r3, #0
 801facc:	dd09      	ble.n	801fae2 <sulp+0x36>
 801face:	051b      	lsls	r3, r3, #20
 801fad0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801fad4:	2400      	movs	r4, #0
 801fad6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801fada:	4622      	mov	r2, r4
 801fadc:	462b      	mov	r3, r5
 801fade:	f7e0 fdb3 	bl	8000648 <__aeabi_dmul>
 801fae2:	ec41 0b10 	vmov	d0, r0, r1
 801fae6:	bd70      	pop	{r4, r5, r6, pc}

0801fae8 <_strtod_l>:
 801fae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801faec:	b09f      	sub	sp, #124	@ 0x7c
 801faee:	460c      	mov	r4, r1
 801faf0:	9217      	str	r2, [sp, #92]	@ 0x5c
 801faf2:	2200      	movs	r2, #0
 801faf4:	921a      	str	r2, [sp, #104]	@ 0x68
 801faf6:	9005      	str	r0, [sp, #20]
 801faf8:	f04f 0a00 	mov.w	sl, #0
 801fafc:	f04f 0b00 	mov.w	fp, #0
 801fb00:	460a      	mov	r2, r1
 801fb02:	9219      	str	r2, [sp, #100]	@ 0x64
 801fb04:	7811      	ldrb	r1, [r2, #0]
 801fb06:	292b      	cmp	r1, #43	@ 0x2b
 801fb08:	d04a      	beq.n	801fba0 <_strtod_l+0xb8>
 801fb0a:	d838      	bhi.n	801fb7e <_strtod_l+0x96>
 801fb0c:	290d      	cmp	r1, #13
 801fb0e:	d832      	bhi.n	801fb76 <_strtod_l+0x8e>
 801fb10:	2908      	cmp	r1, #8
 801fb12:	d832      	bhi.n	801fb7a <_strtod_l+0x92>
 801fb14:	2900      	cmp	r1, #0
 801fb16:	d03b      	beq.n	801fb90 <_strtod_l+0xa8>
 801fb18:	2200      	movs	r2, #0
 801fb1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801fb1c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801fb1e:	782a      	ldrb	r2, [r5, #0]
 801fb20:	2a30      	cmp	r2, #48	@ 0x30
 801fb22:	f040 80b3 	bne.w	801fc8c <_strtod_l+0x1a4>
 801fb26:	786a      	ldrb	r2, [r5, #1]
 801fb28:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801fb2c:	2a58      	cmp	r2, #88	@ 0x58
 801fb2e:	d16e      	bne.n	801fc0e <_strtod_l+0x126>
 801fb30:	9302      	str	r3, [sp, #8]
 801fb32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb34:	9301      	str	r3, [sp, #4]
 801fb36:	ab1a      	add	r3, sp, #104	@ 0x68
 801fb38:	9300      	str	r3, [sp, #0]
 801fb3a:	4a8e      	ldr	r2, [pc, #568]	@ (801fd74 <_strtod_l+0x28c>)
 801fb3c:	9805      	ldr	r0, [sp, #20]
 801fb3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 801fb40:	a919      	add	r1, sp, #100	@ 0x64
 801fb42:	f001 fb13 	bl	802116c <__gethex>
 801fb46:	f010 060f 	ands.w	r6, r0, #15
 801fb4a:	4604      	mov	r4, r0
 801fb4c:	d005      	beq.n	801fb5a <_strtod_l+0x72>
 801fb4e:	2e06      	cmp	r6, #6
 801fb50:	d128      	bne.n	801fba4 <_strtod_l+0xbc>
 801fb52:	3501      	adds	r5, #1
 801fb54:	2300      	movs	r3, #0
 801fb56:	9519      	str	r5, [sp, #100]	@ 0x64
 801fb58:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fb5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fb5c:	2b00      	cmp	r3, #0
 801fb5e:	f040 858e 	bne.w	802067e <_strtod_l+0xb96>
 801fb62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb64:	b1cb      	cbz	r3, 801fb9a <_strtod_l+0xb2>
 801fb66:	4652      	mov	r2, sl
 801fb68:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801fb6c:	ec43 2b10 	vmov	d0, r2, r3
 801fb70:	b01f      	add	sp, #124	@ 0x7c
 801fb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb76:	2920      	cmp	r1, #32
 801fb78:	d1ce      	bne.n	801fb18 <_strtod_l+0x30>
 801fb7a:	3201      	adds	r2, #1
 801fb7c:	e7c1      	b.n	801fb02 <_strtod_l+0x1a>
 801fb7e:	292d      	cmp	r1, #45	@ 0x2d
 801fb80:	d1ca      	bne.n	801fb18 <_strtod_l+0x30>
 801fb82:	2101      	movs	r1, #1
 801fb84:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fb86:	1c51      	adds	r1, r2, #1
 801fb88:	9119      	str	r1, [sp, #100]	@ 0x64
 801fb8a:	7852      	ldrb	r2, [r2, #1]
 801fb8c:	2a00      	cmp	r2, #0
 801fb8e:	d1c5      	bne.n	801fb1c <_strtod_l+0x34>
 801fb90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fb92:	9419      	str	r4, [sp, #100]	@ 0x64
 801fb94:	2b00      	cmp	r3, #0
 801fb96:	f040 8570 	bne.w	802067a <_strtod_l+0xb92>
 801fb9a:	4652      	mov	r2, sl
 801fb9c:	465b      	mov	r3, fp
 801fb9e:	e7e5      	b.n	801fb6c <_strtod_l+0x84>
 801fba0:	2100      	movs	r1, #0
 801fba2:	e7ef      	b.n	801fb84 <_strtod_l+0x9c>
 801fba4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801fba6:	b13a      	cbz	r2, 801fbb8 <_strtod_l+0xd0>
 801fba8:	2135      	movs	r1, #53	@ 0x35
 801fbaa:	a81c      	add	r0, sp, #112	@ 0x70
 801fbac:	f7ff ff3a 	bl	801fa24 <__copybits>
 801fbb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801fbb2:	9805      	ldr	r0, [sp, #20]
 801fbb4:	f7ff fb08 	bl	801f1c8 <_Bfree>
 801fbb8:	3e01      	subs	r6, #1
 801fbba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801fbbc:	2e04      	cmp	r6, #4
 801fbbe:	d806      	bhi.n	801fbce <_strtod_l+0xe6>
 801fbc0:	e8df f006 	tbb	[pc, r6]
 801fbc4:	201d0314 	.word	0x201d0314
 801fbc8:	14          	.byte	0x14
 801fbc9:	00          	.byte	0x00
 801fbca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801fbce:	05e1      	lsls	r1, r4, #23
 801fbd0:	bf48      	it	mi
 801fbd2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801fbd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801fbda:	0d1b      	lsrs	r3, r3, #20
 801fbdc:	051b      	lsls	r3, r3, #20
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	d1bb      	bne.n	801fb5a <_strtod_l+0x72>
 801fbe2:	f7fe fb21 	bl	801e228 <__errno>
 801fbe6:	2322      	movs	r3, #34	@ 0x22
 801fbe8:	6003      	str	r3, [r0, #0]
 801fbea:	e7b6      	b.n	801fb5a <_strtod_l+0x72>
 801fbec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801fbf0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801fbf4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801fbf8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801fbfc:	e7e7      	b.n	801fbce <_strtod_l+0xe6>
 801fbfe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801fd7c <_strtod_l+0x294>
 801fc02:	e7e4      	b.n	801fbce <_strtod_l+0xe6>
 801fc04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801fc08:	f04f 3aff 	mov.w	sl, #4294967295
 801fc0c:	e7df      	b.n	801fbce <_strtod_l+0xe6>
 801fc0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fc10:	1c5a      	adds	r2, r3, #1
 801fc12:	9219      	str	r2, [sp, #100]	@ 0x64
 801fc14:	785b      	ldrb	r3, [r3, #1]
 801fc16:	2b30      	cmp	r3, #48	@ 0x30
 801fc18:	d0f9      	beq.n	801fc0e <_strtod_l+0x126>
 801fc1a:	2b00      	cmp	r3, #0
 801fc1c:	d09d      	beq.n	801fb5a <_strtod_l+0x72>
 801fc1e:	2301      	movs	r3, #1
 801fc20:	9309      	str	r3, [sp, #36]	@ 0x24
 801fc22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fc24:	930c      	str	r3, [sp, #48]	@ 0x30
 801fc26:	2300      	movs	r3, #0
 801fc28:	9308      	str	r3, [sp, #32]
 801fc2a:	930a      	str	r3, [sp, #40]	@ 0x28
 801fc2c:	461f      	mov	r7, r3
 801fc2e:	220a      	movs	r2, #10
 801fc30:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801fc32:	7805      	ldrb	r5, [r0, #0]
 801fc34:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801fc38:	b2d9      	uxtb	r1, r3
 801fc3a:	2909      	cmp	r1, #9
 801fc3c:	d928      	bls.n	801fc90 <_strtod_l+0x1a8>
 801fc3e:	494e      	ldr	r1, [pc, #312]	@ (801fd78 <_strtod_l+0x290>)
 801fc40:	2201      	movs	r2, #1
 801fc42:	f001 f9ad 	bl	8020fa0 <strncmp>
 801fc46:	2800      	cmp	r0, #0
 801fc48:	d032      	beq.n	801fcb0 <_strtod_l+0x1c8>
 801fc4a:	2000      	movs	r0, #0
 801fc4c:	462a      	mov	r2, r5
 801fc4e:	4681      	mov	r9, r0
 801fc50:	463d      	mov	r5, r7
 801fc52:	4603      	mov	r3, r0
 801fc54:	2a65      	cmp	r2, #101	@ 0x65
 801fc56:	d001      	beq.n	801fc5c <_strtod_l+0x174>
 801fc58:	2a45      	cmp	r2, #69	@ 0x45
 801fc5a:	d114      	bne.n	801fc86 <_strtod_l+0x19e>
 801fc5c:	b91d      	cbnz	r5, 801fc66 <_strtod_l+0x17e>
 801fc5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fc60:	4302      	orrs	r2, r0
 801fc62:	d095      	beq.n	801fb90 <_strtod_l+0xa8>
 801fc64:	2500      	movs	r5, #0
 801fc66:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801fc68:	1c62      	adds	r2, r4, #1
 801fc6a:	9219      	str	r2, [sp, #100]	@ 0x64
 801fc6c:	7862      	ldrb	r2, [r4, #1]
 801fc6e:	2a2b      	cmp	r2, #43	@ 0x2b
 801fc70:	d077      	beq.n	801fd62 <_strtod_l+0x27a>
 801fc72:	2a2d      	cmp	r2, #45	@ 0x2d
 801fc74:	d07b      	beq.n	801fd6e <_strtod_l+0x286>
 801fc76:	f04f 0c00 	mov.w	ip, #0
 801fc7a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801fc7e:	2909      	cmp	r1, #9
 801fc80:	f240 8082 	bls.w	801fd88 <_strtod_l+0x2a0>
 801fc84:	9419      	str	r4, [sp, #100]	@ 0x64
 801fc86:	f04f 0800 	mov.w	r8, #0
 801fc8a:	e0a2      	b.n	801fdd2 <_strtod_l+0x2ea>
 801fc8c:	2300      	movs	r3, #0
 801fc8e:	e7c7      	b.n	801fc20 <_strtod_l+0x138>
 801fc90:	2f08      	cmp	r7, #8
 801fc92:	bfd5      	itete	le
 801fc94:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801fc96:	9908      	ldrgt	r1, [sp, #32]
 801fc98:	fb02 3301 	mlale	r3, r2, r1, r3
 801fc9c:	fb02 3301 	mlagt	r3, r2, r1, r3
 801fca0:	f100 0001 	add.w	r0, r0, #1
 801fca4:	bfd4      	ite	le
 801fca6:	930a      	strle	r3, [sp, #40]	@ 0x28
 801fca8:	9308      	strgt	r3, [sp, #32]
 801fcaa:	3701      	adds	r7, #1
 801fcac:	9019      	str	r0, [sp, #100]	@ 0x64
 801fcae:	e7bf      	b.n	801fc30 <_strtod_l+0x148>
 801fcb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fcb2:	1c5a      	adds	r2, r3, #1
 801fcb4:	9219      	str	r2, [sp, #100]	@ 0x64
 801fcb6:	785a      	ldrb	r2, [r3, #1]
 801fcb8:	b37f      	cbz	r7, 801fd1a <_strtod_l+0x232>
 801fcba:	4681      	mov	r9, r0
 801fcbc:	463d      	mov	r5, r7
 801fcbe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801fcc2:	2b09      	cmp	r3, #9
 801fcc4:	d912      	bls.n	801fcec <_strtod_l+0x204>
 801fcc6:	2301      	movs	r3, #1
 801fcc8:	e7c4      	b.n	801fc54 <_strtod_l+0x16c>
 801fcca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fccc:	1c5a      	adds	r2, r3, #1
 801fcce:	9219      	str	r2, [sp, #100]	@ 0x64
 801fcd0:	785a      	ldrb	r2, [r3, #1]
 801fcd2:	3001      	adds	r0, #1
 801fcd4:	2a30      	cmp	r2, #48	@ 0x30
 801fcd6:	d0f8      	beq.n	801fcca <_strtod_l+0x1e2>
 801fcd8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801fcdc:	2b08      	cmp	r3, #8
 801fcde:	f200 84d3 	bhi.w	8020688 <_strtod_l+0xba0>
 801fce2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fce4:	930c      	str	r3, [sp, #48]	@ 0x30
 801fce6:	4681      	mov	r9, r0
 801fce8:	2000      	movs	r0, #0
 801fcea:	4605      	mov	r5, r0
 801fcec:	3a30      	subs	r2, #48	@ 0x30
 801fcee:	f100 0301 	add.w	r3, r0, #1
 801fcf2:	d02a      	beq.n	801fd4a <_strtod_l+0x262>
 801fcf4:	4499      	add	r9, r3
 801fcf6:	eb00 0c05 	add.w	ip, r0, r5
 801fcfa:	462b      	mov	r3, r5
 801fcfc:	210a      	movs	r1, #10
 801fcfe:	4563      	cmp	r3, ip
 801fd00:	d10d      	bne.n	801fd1e <_strtod_l+0x236>
 801fd02:	1c69      	adds	r1, r5, #1
 801fd04:	4401      	add	r1, r0
 801fd06:	4428      	add	r0, r5
 801fd08:	2808      	cmp	r0, #8
 801fd0a:	dc16      	bgt.n	801fd3a <_strtod_l+0x252>
 801fd0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fd0e:	230a      	movs	r3, #10
 801fd10:	fb03 2300 	mla	r3, r3, r0, r2
 801fd14:	930a      	str	r3, [sp, #40]	@ 0x28
 801fd16:	2300      	movs	r3, #0
 801fd18:	e018      	b.n	801fd4c <_strtod_l+0x264>
 801fd1a:	4638      	mov	r0, r7
 801fd1c:	e7da      	b.n	801fcd4 <_strtod_l+0x1ec>
 801fd1e:	2b08      	cmp	r3, #8
 801fd20:	f103 0301 	add.w	r3, r3, #1
 801fd24:	dc03      	bgt.n	801fd2e <_strtod_l+0x246>
 801fd26:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801fd28:	434e      	muls	r6, r1
 801fd2a:	960a      	str	r6, [sp, #40]	@ 0x28
 801fd2c:	e7e7      	b.n	801fcfe <_strtod_l+0x216>
 801fd2e:	2b10      	cmp	r3, #16
 801fd30:	bfde      	ittt	le
 801fd32:	9e08      	ldrle	r6, [sp, #32]
 801fd34:	434e      	mulle	r6, r1
 801fd36:	9608      	strle	r6, [sp, #32]
 801fd38:	e7e1      	b.n	801fcfe <_strtod_l+0x216>
 801fd3a:	280f      	cmp	r0, #15
 801fd3c:	dceb      	bgt.n	801fd16 <_strtod_l+0x22e>
 801fd3e:	9808      	ldr	r0, [sp, #32]
 801fd40:	230a      	movs	r3, #10
 801fd42:	fb03 2300 	mla	r3, r3, r0, r2
 801fd46:	9308      	str	r3, [sp, #32]
 801fd48:	e7e5      	b.n	801fd16 <_strtod_l+0x22e>
 801fd4a:	4629      	mov	r1, r5
 801fd4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801fd4e:	1c50      	adds	r0, r2, #1
 801fd50:	9019      	str	r0, [sp, #100]	@ 0x64
 801fd52:	7852      	ldrb	r2, [r2, #1]
 801fd54:	4618      	mov	r0, r3
 801fd56:	460d      	mov	r5, r1
 801fd58:	e7b1      	b.n	801fcbe <_strtod_l+0x1d6>
 801fd5a:	f04f 0900 	mov.w	r9, #0
 801fd5e:	2301      	movs	r3, #1
 801fd60:	e77d      	b.n	801fc5e <_strtod_l+0x176>
 801fd62:	f04f 0c00 	mov.w	ip, #0
 801fd66:	1ca2      	adds	r2, r4, #2
 801fd68:	9219      	str	r2, [sp, #100]	@ 0x64
 801fd6a:	78a2      	ldrb	r2, [r4, #2]
 801fd6c:	e785      	b.n	801fc7a <_strtod_l+0x192>
 801fd6e:	f04f 0c01 	mov.w	ip, #1
 801fd72:	e7f8      	b.n	801fd66 <_strtod_l+0x27e>
 801fd74:	080229b0 	.word	0x080229b0
 801fd78:	08022998 	.word	0x08022998
 801fd7c:	7ff00000 	.word	0x7ff00000
 801fd80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801fd82:	1c51      	adds	r1, r2, #1
 801fd84:	9119      	str	r1, [sp, #100]	@ 0x64
 801fd86:	7852      	ldrb	r2, [r2, #1]
 801fd88:	2a30      	cmp	r2, #48	@ 0x30
 801fd8a:	d0f9      	beq.n	801fd80 <_strtod_l+0x298>
 801fd8c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801fd90:	2908      	cmp	r1, #8
 801fd92:	f63f af78 	bhi.w	801fc86 <_strtod_l+0x19e>
 801fd96:	3a30      	subs	r2, #48	@ 0x30
 801fd98:	920e      	str	r2, [sp, #56]	@ 0x38
 801fd9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801fd9c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801fd9e:	f04f 080a 	mov.w	r8, #10
 801fda2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801fda4:	1c56      	adds	r6, r2, #1
 801fda6:	9619      	str	r6, [sp, #100]	@ 0x64
 801fda8:	7852      	ldrb	r2, [r2, #1]
 801fdaa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801fdae:	f1be 0f09 	cmp.w	lr, #9
 801fdb2:	d939      	bls.n	801fe28 <_strtod_l+0x340>
 801fdb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801fdb6:	1a76      	subs	r6, r6, r1
 801fdb8:	2e08      	cmp	r6, #8
 801fdba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801fdbe:	dc03      	bgt.n	801fdc8 <_strtod_l+0x2e0>
 801fdc0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801fdc2:	4588      	cmp	r8, r1
 801fdc4:	bfa8      	it	ge
 801fdc6:	4688      	movge	r8, r1
 801fdc8:	f1bc 0f00 	cmp.w	ip, #0
 801fdcc:	d001      	beq.n	801fdd2 <_strtod_l+0x2ea>
 801fdce:	f1c8 0800 	rsb	r8, r8, #0
 801fdd2:	2d00      	cmp	r5, #0
 801fdd4:	d14e      	bne.n	801fe74 <_strtod_l+0x38c>
 801fdd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801fdd8:	4308      	orrs	r0, r1
 801fdda:	f47f aebe 	bne.w	801fb5a <_strtod_l+0x72>
 801fdde:	2b00      	cmp	r3, #0
 801fde0:	f47f aed6 	bne.w	801fb90 <_strtod_l+0xa8>
 801fde4:	2a69      	cmp	r2, #105	@ 0x69
 801fde6:	d028      	beq.n	801fe3a <_strtod_l+0x352>
 801fde8:	dc25      	bgt.n	801fe36 <_strtod_l+0x34e>
 801fdea:	2a49      	cmp	r2, #73	@ 0x49
 801fdec:	d025      	beq.n	801fe3a <_strtod_l+0x352>
 801fdee:	2a4e      	cmp	r2, #78	@ 0x4e
 801fdf0:	f47f aece 	bne.w	801fb90 <_strtod_l+0xa8>
 801fdf4:	499b      	ldr	r1, [pc, #620]	@ (8020064 <_strtod_l+0x57c>)
 801fdf6:	a819      	add	r0, sp, #100	@ 0x64
 801fdf8:	f001 fbda 	bl	80215b0 <__match>
 801fdfc:	2800      	cmp	r0, #0
 801fdfe:	f43f aec7 	beq.w	801fb90 <_strtod_l+0xa8>
 801fe02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fe04:	781b      	ldrb	r3, [r3, #0]
 801fe06:	2b28      	cmp	r3, #40	@ 0x28
 801fe08:	d12e      	bne.n	801fe68 <_strtod_l+0x380>
 801fe0a:	4997      	ldr	r1, [pc, #604]	@ (8020068 <_strtod_l+0x580>)
 801fe0c:	aa1c      	add	r2, sp, #112	@ 0x70
 801fe0e:	a819      	add	r0, sp, #100	@ 0x64
 801fe10:	f001 fbe2 	bl	80215d8 <__hexnan>
 801fe14:	2805      	cmp	r0, #5
 801fe16:	d127      	bne.n	801fe68 <_strtod_l+0x380>
 801fe18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801fe1a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801fe1e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801fe22:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801fe26:	e698      	b.n	801fb5a <_strtod_l+0x72>
 801fe28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801fe2a:	fb08 2101 	mla	r1, r8, r1, r2
 801fe2e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801fe32:	920e      	str	r2, [sp, #56]	@ 0x38
 801fe34:	e7b5      	b.n	801fda2 <_strtod_l+0x2ba>
 801fe36:	2a6e      	cmp	r2, #110	@ 0x6e
 801fe38:	e7da      	b.n	801fdf0 <_strtod_l+0x308>
 801fe3a:	498c      	ldr	r1, [pc, #560]	@ (802006c <_strtod_l+0x584>)
 801fe3c:	a819      	add	r0, sp, #100	@ 0x64
 801fe3e:	f001 fbb7 	bl	80215b0 <__match>
 801fe42:	2800      	cmp	r0, #0
 801fe44:	f43f aea4 	beq.w	801fb90 <_strtod_l+0xa8>
 801fe48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fe4a:	4989      	ldr	r1, [pc, #548]	@ (8020070 <_strtod_l+0x588>)
 801fe4c:	3b01      	subs	r3, #1
 801fe4e:	a819      	add	r0, sp, #100	@ 0x64
 801fe50:	9319      	str	r3, [sp, #100]	@ 0x64
 801fe52:	f001 fbad 	bl	80215b0 <__match>
 801fe56:	b910      	cbnz	r0, 801fe5e <_strtod_l+0x376>
 801fe58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fe5a:	3301      	adds	r3, #1
 801fe5c:	9319      	str	r3, [sp, #100]	@ 0x64
 801fe5e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8020080 <_strtod_l+0x598>
 801fe62:	f04f 0a00 	mov.w	sl, #0
 801fe66:	e678      	b.n	801fb5a <_strtod_l+0x72>
 801fe68:	4882      	ldr	r0, [pc, #520]	@ (8020074 <_strtod_l+0x58c>)
 801fe6a:	f001 f8dd 	bl	8021028 <nan>
 801fe6e:	ec5b ab10 	vmov	sl, fp, d0
 801fe72:	e672      	b.n	801fb5a <_strtod_l+0x72>
 801fe74:	eba8 0309 	sub.w	r3, r8, r9
 801fe78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fe7a:	9309      	str	r3, [sp, #36]	@ 0x24
 801fe7c:	2f00      	cmp	r7, #0
 801fe7e:	bf08      	it	eq
 801fe80:	462f      	moveq	r7, r5
 801fe82:	2d10      	cmp	r5, #16
 801fe84:	462c      	mov	r4, r5
 801fe86:	bfa8      	it	ge
 801fe88:	2410      	movge	r4, #16
 801fe8a:	f7e0 fb63 	bl	8000554 <__aeabi_ui2d>
 801fe8e:	2d09      	cmp	r5, #9
 801fe90:	4682      	mov	sl, r0
 801fe92:	468b      	mov	fp, r1
 801fe94:	dc13      	bgt.n	801febe <_strtod_l+0x3d6>
 801fe96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe98:	2b00      	cmp	r3, #0
 801fe9a:	f43f ae5e 	beq.w	801fb5a <_strtod_l+0x72>
 801fe9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fea0:	dd78      	ble.n	801ff94 <_strtod_l+0x4ac>
 801fea2:	2b16      	cmp	r3, #22
 801fea4:	dc5f      	bgt.n	801ff66 <_strtod_l+0x47e>
 801fea6:	4974      	ldr	r1, [pc, #464]	@ (8020078 <_strtod_l+0x590>)
 801fea8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801feac:	e9d1 0100 	ldrd	r0, r1, [r1]
 801feb0:	4652      	mov	r2, sl
 801feb2:	465b      	mov	r3, fp
 801feb4:	f7e0 fbc8 	bl	8000648 <__aeabi_dmul>
 801feb8:	4682      	mov	sl, r0
 801feba:	468b      	mov	fp, r1
 801febc:	e64d      	b.n	801fb5a <_strtod_l+0x72>
 801febe:	4b6e      	ldr	r3, [pc, #440]	@ (8020078 <_strtod_l+0x590>)
 801fec0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801fec4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801fec8:	f7e0 fbbe 	bl	8000648 <__aeabi_dmul>
 801fecc:	4682      	mov	sl, r0
 801fece:	9808      	ldr	r0, [sp, #32]
 801fed0:	468b      	mov	fp, r1
 801fed2:	f7e0 fb3f 	bl	8000554 <__aeabi_ui2d>
 801fed6:	4602      	mov	r2, r0
 801fed8:	460b      	mov	r3, r1
 801feda:	4650      	mov	r0, sl
 801fedc:	4659      	mov	r1, fp
 801fede:	f7e0 f9fd 	bl	80002dc <__adddf3>
 801fee2:	2d0f      	cmp	r5, #15
 801fee4:	4682      	mov	sl, r0
 801fee6:	468b      	mov	fp, r1
 801fee8:	ddd5      	ble.n	801fe96 <_strtod_l+0x3ae>
 801feea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801feec:	1b2c      	subs	r4, r5, r4
 801feee:	441c      	add	r4, r3
 801fef0:	2c00      	cmp	r4, #0
 801fef2:	f340 8096 	ble.w	8020022 <_strtod_l+0x53a>
 801fef6:	f014 030f 	ands.w	r3, r4, #15
 801fefa:	d00a      	beq.n	801ff12 <_strtod_l+0x42a>
 801fefc:	495e      	ldr	r1, [pc, #376]	@ (8020078 <_strtod_l+0x590>)
 801fefe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ff02:	4652      	mov	r2, sl
 801ff04:	465b      	mov	r3, fp
 801ff06:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ff0a:	f7e0 fb9d 	bl	8000648 <__aeabi_dmul>
 801ff0e:	4682      	mov	sl, r0
 801ff10:	468b      	mov	fp, r1
 801ff12:	f034 040f 	bics.w	r4, r4, #15
 801ff16:	d073      	beq.n	8020000 <_strtod_l+0x518>
 801ff18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801ff1c:	dd48      	ble.n	801ffb0 <_strtod_l+0x4c8>
 801ff1e:	2400      	movs	r4, #0
 801ff20:	46a0      	mov	r8, r4
 801ff22:	940a      	str	r4, [sp, #40]	@ 0x28
 801ff24:	46a1      	mov	r9, r4
 801ff26:	9a05      	ldr	r2, [sp, #20]
 801ff28:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8020080 <_strtod_l+0x598>
 801ff2c:	2322      	movs	r3, #34	@ 0x22
 801ff2e:	6013      	str	r3, [r2, #0]
 801ff30:	f04f 0a00 	mov.w	sl, #0
 801ff34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ff36:	2b00      	cmp	r3, #0
 801ff38:	f43f ae0f 	beq.w	801fb5a <_strtod_l+0x72>
 801ff3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ff3e:	9805      	ldr	r0, [sp, #20]
 801ff40:	f7ff f942 	bl	801f1c8 <_Bfree>
 801ff44:	9805      	ldr	r0, [sp, #20]
 801ff46:	4649      	mov	r1, r9
 801ff48:	f7ff f93e 	bl	801f1c8 <_Bfree>
 801ff4c:	9805      	ldr	r0, [sp, #20]
 801ff4e:	4641      	mov	r1, r8
 801ff50:	f7ff f93a 	bl	801f1c8 <_Bfree>
 801ff54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ff56:	9805      	ldr	r0, [sp, #20]
 801ff58:	f7ff f936 	bl	801f1c8 <_Bfree>
 801ff5c:	9805      	ldr	r0, [sp, #20]
 801ff5e:	4621      	mov	r1, r4
 801ff60:	f7ff f932 	bl	801f1c8 <_Bfree>
 801ff64:	e5f9      	b.n	801fb5a <_strtod_l+0x72>
 801ff66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ff68:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801ff6c:	4293      	cmp	r3, r2
 801ff6e:	dbbc      	blt.n	801feea <_strtod_l+0x402>
 801ff70:	4c41      	ldr	r4, [pc, #260]	@ (8020078 <_strtod_l+0x590>)
 801ff72:	f1c5 050f 	rsb	r5, r5, #15
 801ff76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801ff7a:	4652      	mov	r2, sl
 801ff7c:	465b      	mov	r3, fp
 801ff7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ff82:	f7e0 fb61 	bl	8000648 <__aeabi_dmul>
 801ff86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff88:	1b5d      	subs	r5, r3, r5
 801ff8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801ff8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ff92:	e78f      	b.n	801feb4 <_strtod_l+0x3cc>
 801ff94:	3316      	adds	r3, #22
 801ff96:	dba8      	blt.n	801feea <_strtod_l+0x402>
 801ff98:	4b37      	ldr	r3, [pc, #220]	@ (8020078 <_strtod_l+0x590>)
 801ff9a:	eba9 0808 	sub.w	r8, r9, r8
 801ff9e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801ffa2:	e9d8 2300 	ldrd	r2, r3, [r8]
 801ffa6:	4650      	mov	r0, sl
 801ffa8:	4659      	mov	r1, fp
 801ffaa:	f7e0 fc77 	bl	800089c <__aeabi_ddiv>
 801ffae:	e783      	b.n	801feb8 <_strtod_l+0x3d0>
 801ffb0:	4b32      	ldr	r3, [pc, #200]	@ (802007c <_strtod_l+0x594>)
 801ffb2:	9308      	str	r3, [sp, #32]
 801ffb4:	2300      	movs	r3, #0
 801ffb6:	1124      	asrs	r4, r4, #4
 801ffb8:	4650      	mov	r0, sl
 801ffba:	4659      	mov	r1, fp
 801ffbc:	461e      	mov	r6, r3
 801ffbe:	2c01      	cmp	r4, #1
 801ffc0:	dc21      	bgt.n	8020006 <_strtod_l+0x51e>
 801ffc2:	b10b      	cbz	r3, 801ffc8 <_strtod_l+0x4e0>
 801ffc4:	4682      	mov	sl, r0
 801ffc6:	468b      	mov	fp, r1
 801ffc8:	492c      	ldr	r1, [pc, #176]	@ (802007c <_strtod_l+0x594>)
 801ffca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801ffce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801ffd2:	4652      	mov	r2, sl
 801ffd4:	465b      	mov	r3, fp
 801ffd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ffda:	f7e0 fb35 	bl	8000648 <__aeabi_dmul>
 801ffde:	4b28      	ldr	r3, [pc, #160]	@ (8020080 <_strtod_l+0x598>)
 801ffe0:	460a      	mov	r2, r1
 801ffe2:	400b      	ands	r3, r1
 801ffe4:	4927      	ldr	r1, [pc, #156]	@ (8020084 <_strtod_l+0x59c>)
 801ffe6:	428b      	cmp	r3, r1
 801ffe8:	4682      	mov	sl, r0
 801ffea:	d898      	bhi.n	801ff1e <_strtod_l+0x436>
 801ffec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801fff0:	428b      	cmp	r3, r1
 801fff2:	bf86      	itte	hi
 801fff4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8020088 <_strtod_l+0x5a0>
 801fff8:	f04f 3aff 	movhi.w	sl, #4294967295
 801fffc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8020000:	2300      	movs	r3, #0
 8020002:	9308      	str	r3, [sp, #32]
 8020004:	e07a      	b.n	80200fc <_strtod_l+0x614>
 8020006:	07e2      	lsls	r2, r4, #31
 8020008:	d505      	bpl.n	8020016 <_strtod_l+0x52e>
 802000a:	9b08      	ldr	r3, [sp, #32]
 802000c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020010:	f7e0 fb1a 	bl	8000648 <__aeabi_dmul>
 8020014:	2301      	movs	r3, #1
 8020016:	9a08      	ldr	r2, [sp, #32]
 8020018:	3208      	adds	r2, #8
 802001a:	3601      	adds	r6, #1
 802001c:	1064      	asrs	r4, r4, #1
 802001e:	9208      	str	r2, [sp, #32]
 8020020:	e7cd      	b.n	801ffbe <_strtod_l+0x4d6>
 8020022:	d0ed      	beq.n	8020000 <_strtod_l+0x518>
 8020024:	4264      	negs	r4, r4
 8020026:	f014 020f 	ands.w	r2, r4, #15
 802002a:	d00a      	beq.n	8020042 <_strtod_l+0x55a>
 802002c:	4b12      	ldr	r3, [pc, #72]	@ (8020078 <_strtod_l+0x590>)
 802002e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020032:	4650      	mov	r0, sl
 8020034:	4659      	mov	r1, fp
 8020036:	e9d3 2300 	ldrd	r2, r3, [r3]
 802003a:	f7e0 fc2f 	bl	800089c <__aeabi_ddiv>
 802003e:	4682      	mov	sl, r0
 8020040:	468b      	mov	fp, r1
 8020042:	1124      	asrs	r4, r4, #4
 8020044:	d0dc      	beq.n	8020000 <_strtod_l+0x518>
 8020046:	2c1f      	cmp	r4, #31
 8020048:	dd20      	ble.n	802008c <_strtod_l+0x5a4>
 802004a:	2400      	movs	r4, #0
 802004c:	46a0      	mov	r8, r4
 802004e:	940a      	str	r4, [sp, #40]	@ 0x28
 8020050:	46a1      	mov	r9, r4
 8020052:	9a05      	ldr	r2, [sp, #20]
 8020054:	2322      	movs	r3, #34	@ 0x22
 8020056:	f04f 0a00 	mov.w	sl, #0
 802005a:	f04f 0b00 	mov.w	fp, #0
 802005e:	6013      	str	r3, [r2, #0]
 8020060:	e768      	b.n	801ff34 <_strtod_l+0x44c>
 8020062:	bf00      	nop
 8020064:	08022785 	.word	0x08022785
 8020068:	0802299c 	.word	0x0802299c
 802006c:	0802277d 	.word	0x0802277d
 8020070:	080227b4 	.word	0x080227b4
 8020074:	08022b45 	.word	0x08022b45
 8020078:	080228d0 	.word	0x080228d0
 802007c:	080228a8 	.word	0x080228a8
 8020080:	7ff00000 	.word	0x7ff00000
 8020084:	7ca00000 	.word	0x7ca00000
 8020088:	7fefffff 	.word	0x7fefffff
 802008c:	f014 0310 	ands.w	r3, r4, #16
 8020090:	bf18      	it	ne
 8020092:	236a      	movne	r3, #106	@ 0x6a
 8020094:	4ea9      	ldr	r6, [pc, #676]	@ (802033c <_strtod_l+0x854>)
 8020096:	9308      	str	r3, [sp, #32]
 8020098:	4650      	mov	r0, sl
 802009a:	4659      	mov	r1, fp
 802009c:	2300      	movs	r3, #0
 802009e:	07e2      	lsls	r2, r4, #31
 80200a0:	d504      	bpl.n	80200ac <_strtod_l+0x5c4>
 80200a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80200a6:	f7e0 facf 	bl	8000648 <__aeabi_dmul>
 80200aa:	2301      	movs	r3, #1
 80200ac:	1064      	asrs	r4, r4, #1
 80200ae:	f106 0608 	add.w	r6, r6, #8
 80200b2:	d1f4      	bne.n	802009e <_strtod_l+0x5b6>
 80200b4:	b10b      	cbz	r3, 80200ba <_strtod_l+0x5d2>
 80200b6:	4682      	mov	sl, r0
 80200b8:	468b      	mov	fp, r1
 80200ba:	9b08      	ldr	r3, [sp, #32]
 80200bc:	b1b3      	cbz	r3, 80200ec <_strtod_l+0x604>
 80200be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80200c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80200c6:	2b00      	cmp	r3, #0
 80200c8:	4659      	mov	r1, fp
 80200ca:	dd0f      	ble.n	80200ec <_strtod_l+0x604>
 80200cc:	2b1f      	cmp	r3, #31
 80200ce:	dd55      	ble.n	802017c <_strtod_l+0x694>
 80200d0:	2b34      	cmp	r3, #52	@ 0x34
 80200d2:	bfde      	ittt	le
 80200d4:	f04f 33ff 	movle.w	r3, #4294967295
 80200d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80200dc:	4093      	lslle	r3, r2
 80200de:	f04f 0a00 	mov.w	sl, #0
 80200e2:	bfcc      	ite	gt
 80200e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80200e8:	ea03 0b01 	andle.w	fp, r3, r1
 80200ec:	2200      	movs	r2, #0
 80200ee:	2300      	movs	r3, #0
 80200f0:	4650      	mov	r0, sl
 80200f2:	4659      	mov	r1, fp
 80200f4:	f7e0 fd10 	bl	8000b18 <__aeabi_dcmpeq>
 80200f8:	2800      	cmp	r0, #0
 80200fa:	d1a6      	bne.n	802004a <_strtod_l+0x562>
 80200fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80200fe:	9300      	str	r3, [sp, #0]
 8020100:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020102:	9805      	ldr	r0, [sp, #20]
 8020104:	462b      	mov	r3, r5
 8020106:	463a      	mov	r2, r7
 8020108:	f7ff f8c6 	bl	801f298 <__s2b>
 802010c:	900a      	str	r0, [sp, #40]	@ 0x28
 802010e:	2800      	cmp	r0, #0
 8020110:	f43f af05 	beq.w	801ff1e <_strtod_l+0x436>
 8020114:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020116:	2a00      	cmp	r2, #0
 8020118:	eba9 0308 	sub.w	r3, r9, r8
 802011c:	bfa8      	it	ge
 802011e:	2300      	movge	r3, #0
 8020120:	9312      	str	r3, [sp, #72]	@ 0x48
 8020122:	2400      	movs	r4, #0
 8020124:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8020128:	9316      	str	r3, [sp, #88]	@ 0x58
 802012a:	46a0      	mov	r8, r4
 802012c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802012e:	9805      	ldr	r0, [sp, #20]
 8020130:	6859      	ldr	r1, [r3, #4]
 8020132:	f7ff f809 	bl	801f148 <_Balloc>
 8020136:	4681      	mov	r9, r0
 8020138:	2800      	cmp	r0, #0
 802013a:	f43f aef4 	beq.w	801ff26 <_strtod_l+0x43e>
 802013e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020140:	691a      	ldr	r2, [r3, #16]
 8020142:	3202      	adds	r2, #2
 8020144:	f103 010c 	add.w	r1, r3, #12
 8020148:	0092      	lsls	r2, r2, #2
 802014a:	300c      	adds	r0, #12
 802014c:	f7fe f899 	bl	801e282 <memcpy>
 8020150:	ec4b ab10 	vmov	d0, sl, fp
 8020154:	9805      	ldr	r0, [sp, #20]
 8020156:	aa1c      	add	r2, sp, #112	@ 0x70
 8020158:	a91b      	add	r1, sp, #108	@ 0x6c
 802015a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 802015e:	f7ff fbd7 	bl	801f910 <__d2b>
 8020162:	901a      	str	r0, [sp, #104]	@ 0x68
 8020164:	2800      	cmp	r0, #0
 8020166:	f43f aede 	beq.w	801ff26 <_strtod_l+0x43e>
 802016a:	9805      	ldr	r0, [sp, #20]
 802016c:	2101      	movs	r1, #1
 802016e:	f7ff f929 	bl	801f3c4 <__i2b>
 8020172:	4680      	mov	r8, r0
 8020174:	b948      	cbnz	r0, 802018a <_strtod_l+0x6a2>
 8020176:	f04f 0800 	mov.w	r8, #0
 802017a:	e6d4      	b.n	801ff26 <_strtod_l+0x43e>
 802017c:	f04f 32ff 	mov.w	r2, #4294967295
 8020180:	fa02 f303 	lsl.w	r3, r2, r3
 8020184:	ea03 0a0a 	and.w	sl, r3, sl
 8020188:	e7b0      	b.n	80200ec <_strtod_l+0x604>
 802018a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 802018c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802018e:	2d00      	cmp	r5, #0
 8020190:	bfab      	itete	ge
 8020192:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8020194:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8020196:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8020198:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 802019a:	bfac      	ite	ge
 802019c:	18ef      	addge	r7, r5, r3
 802019e:	1b5e      	sublt	r6, r3, r5
 80201a0:	9b08      	ldr	r3, [sp, #32]
 80201a2:	1aed      	subs	r5, r5, r3
 80201a4:	4415      	add	r5, r2
 80201a6:	4b66      	ldr	r3, [pc, #408]	@ (8020340 <_strtod_l+0x858>)
 80201a8:	3d01      	subs	r5, #1
 80201aa:	429d      	cmp	r5, r3
 80201ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80201b0:	da50      	bge.n	8020254 <_strtod_l+0x76c>
 80201b2:	1b5b      	subs	r3, r3, r5
 80201b4:	2b1f      	cmp	r3, #31
 80201b6:	eba2 0203 	sub.w	r2, r2, r3
 80201ba:	f04f 0101 	mov.w	r1, #1
 80201be:	dc3d      	bgt.n	802023c <_strtod_l+0x754>
 80201c0:	fa01 f303 	lsl.w	r3, r1, r3
 80201c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80201c6:	2300      	movs	r3, #0
 80201c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80201ca:	18bd      	adds	r5, r7, r2
 80201cc:	9b08      	ldr	r3, [sp, #32]
 80201ce:	42af      	cmp	r7, r5
 80201d0:	4416      	add	r6, r2
 80201d2:	441e      	add	r6, r3
 80201d4:	463b      	mov	r3, r7
 80201d6:	bfa8      	it	ge
 80201d8:	462b      	movge	r3, r5
 80201da:	42b3      	cmp	r3, r6
 80201dc:	bfa8      	it	ge
 80201de:	4633      	movge	r3, r6
 80201e0:	2b00      	cmp	r3, #0
 80201e2:	bfc2      	ittt	gt
 80201e4:	1aed      	subgt	r5, r5, r3
 80201e6:	1af6      	subgt	r6, r6, r3
 80201e8:	1aff      	subgt	r7, r7, r3
 80201ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80201ec:	2b00      	cmp	r3, #0
 80201ee:	dd16      	ble.n	802021e <_strtod_l+0x736>
 80201f0:	4641      	mov	r1, r8
 80201f2:	9805      	ldr	r0, [sp, #20]
 80201f4:	461a      	mov	r2, r3
 80201f6:	f7ff f9a5 	bl	801f544 <__pow5mult>
 80201fa:	4680      	mov	r8, r0
 80201fc:	2800      	cmp	r0, #0
 80201fe:	d0ba      	beq.n	8020176 <_strtod_l+0x68e>
 8020200:	4601      	mov	r1, r0
 8020202:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020204:	9805      	ldr	r0, [sp, #20]
 8020206:	f7ff f8f3 	bl	801f3f0 <__multiply>
 802020a:	900e      	str	r0, [sp, #56]	@ 0x38
 802020c:	2800      	cmp	r0, #0
 802020e:	f43f ae8a 	beq.w	801ff26 <_strtod_l+0x43e>
 8020212:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020214:	9805      	ldr	r0, [sp, #20]
 8020216:	f7fe ffd7 	bl	801f1c8 <_Bfree>
 802021a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802021c:	931a      	str	r3, [sp, #104]	@ 0x68
 802021e:	2d00      	cmp	r5, #0
 8020220:	dc1d      	bgt.n	802025e <_strtod_l+0x776>
 8020222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020224:	2b00      	cmp	r3, #0
 8020226:	dd23      	ble.n	8020270 <_strtod_l+0x788>
 8020228:	4649      	mov	r1, r9
 802022a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802022c:	9805      	ldr	r0, [sp, #20]
 802022e:	f7ff f989 	bl	801f544 <__pow5mult>
 8020232:	4681      	mov	r9, r0
 8020234:	b9e0      	cbnz	r0, 8020270 <_strtod_l+0x788>
 8020236:	f04f 0900 	mov.w	r9, #0
 802023a:	e674      	b.n	801ff26 <_strtod_l+0x43e>
 802023c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8020240:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8020244:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8020248:	35e2      	adds	r5, #226	@ 0xe2
 802024a:	fa01 f305 	lsl.w	r3, r1, r5
 802024e:	9310      	str	r3, [sp, #64]	@ 0x40
 8020250:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020252:	e7ba      	b.n	80201ca <_strtod_l+0x6e2>
 8020254:	2300      	movs	r3, #0
 8020256:	9310      	str	r3, [sp, #64]	@ 0x40
 8020258:	2301      	movs	r3, #1
 802025a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802025c:	e7b5      	b.n	80201ca <_strtod_l+0x6e2>
 802025e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020260:	9805      	ldr	r0, [sp, #20]
 8020262:	462a      	mov	r2, r5
 8020264:	f7ff f9c8 	bl	801f5f8 <__lshift>
 8020268:	901a      	str	r0, [sp, #104]	@ 0x68
 802026a:	2800      	cmp	r0, #0
 802026c:	d1d9      	bne.n	8020222 <_strtod_l+0x73a>
 802026e:	e65a      	b.n	801ff26 <_strtod_l+0x43e>
 8020270:	2e00      	cmp	r6, #0
 8020272:	dd07      	ble.n	8020284 <_strtod_l+0x79c>
 8020274:	4649      	mov	r1, r9
 8020276:	9805      	ldr	r0, [sp, #20]
 8020278:	4632      	mov	r2, r6
 802027a:	f7ff f9bd 	bl	801f5f8 <__lshift>
 802027e:	4681      	mov	r9, r0
 8020280:	2800      	cmp	r0, #0
 8020282:	d0d8      	beq.n	8020236 <_strtod_l+0x74e>
 8020284:	2f00      	cmp	r7, #0
 8020286:	dd08      	ble.n	802029a <_strtod_l+0x7b2>
 8020288:	4641      	mov	r1, r8
 802028a:	9805      	ldr	r0, [sp, #20]
 802028c:	463a      	mov	r2, r7
 802028e:	f7ff f9b3 	bl	801f5f8 <__lshift>
 8020292:	4680      	mov	r8, r0
 8020294:	2800      	cmp	r0, #0
 8020296:	f43f ae46 	beq.w	801ff26 <_strtod_l+0x43e>
 802029a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802029c:	9805      	ldr	r0, [sp, #20]
 802029e:	464a      	mov	r2, r9
 80202a0:	f7ff fa32 	bl	801f708 <__mdiff>
 80202a4:	4604      	mov	r4, r0
 80202a6:	2800      	cmp	r0, #0
 80202a8:	f43f ae3d 	beq.w	801ff26 <_strtod_l+0x43e>
 80202ac:	68c3      	ldr	r3, [r0, #12]
 80202ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80202b0:	2300      	movs	r3, #0
 80202b2:	60c3      	str	r3, [r0, #12]
 80202b4:	4641      	mov	r1, r8
 80202b6:	f7ff fa0b 	bl	801f6d0 <__mcmp>
 80202ba:	2800      	cmp	r0, #0
 80202bc:	da46      	bge.n	802034c <_strtod_l+0x864>
 80202be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80202c0:	ea53 030a 	orrs.w	r3, r3, sl
 80202c4:	d16c      	bne.n	80203a0 <_strtod_l+0x8b8>
 80202c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d168      	bne.n	80203a0 <_strtod_l+0x8b8>
 80202ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80202d2:	0d1b      	lsrs	r3, r3, #20
 80202d4:	051b      	lsls	r3, r3, #20
 80202d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80202da:	d961      	bls.n	80203a0 <_strtod_l+0x8b8>
 80202dc:	6963      	ldr	r3, [r4, #20]
 80202de:	b913      	cbnz	r3, 80202e6 <_strtod_l+0x7fe>
 80202e0:	6923      	ldr	r3, [r4, #16]
 80202e2:	2b01      	cmp	r3, #1
 80202e4:	dd5c      	ble.n	80203a0 <_strtod_l+0x8b8>
 80202e6:	4621      	mov	r1, r4
 80202e8:	2201      	movs	r2, #1
 80202ea:	9805      	ldr	r0, [sp, #20]
 80202ec:	f7ff f984 	bl	801f5f8 <__lshift>
 80202f0:	4641      	mov	r1, r8
 80202f2:	4604      	mov	r4, r0
 80202f4:	f7ff f9ec 	bl	801f6d0 <__mcmp>
 80202f8:	2800      	cmp	r0, #0
 80202fa:	dd51      	ble.n	80203a0 <_strtod_l+0x8b8>
 80202fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020300:	9a08      	ldr	r2, [sp, #32]
 8020302:	0d1b      	lsrs	r3, r3, #20
 8020304:	051b      	lsls	r3, r3, #20
 8020306:	2a00      	cmp	r2, #0
 8020308:	d06b      	beq.n	80203e2 <_strtod_l+0x8fa>
 802030a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802030e:	d868      	bhi.n	80203e2 <_strtod_l+0x8fa>
 8020310:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8020314:	f67f ae9d 	bls.w	8020052 <_strtod_l+0x56a>
 8020318:	4b0a      	ldr	r3, [pc, #40]	@ (8020344 <_strtod_l+0x85c>)
 802031a:	4650      	mov	r0, sl
 802031c:	4659      	mov	r1, fp
 802031e:	2200      	movs	r2, #0
 8020320:	f7e0 f992 	bl	8000648 <__aeabi_dmul>
 8020324:	4b08      	ldr	r3, [pc, #32]	@ (8020348 <_strtod_l+0x860>)
 8020326:	400b      	ands	r3, r1
 8020328:	4682      	mov	sl, r0
 802032a:	468b      	mov	fp, r1
 802032c:	2b00      	cmp	r3, #0
 802032e:	f47f ae05 	bne.w	801ff3c <_strtod_l+0x454>
 8020332:	9a05      	ldr	r2, [sp, #20]
 8020334:	2322      	movs	r3, #34	@ 0x22
 8020336:	6013      	str	r3, [r2, #0]
 8020338:	e600      	b.n	801ff3c <_strtod_l+0x454>
 802033a:	bf00      	nop
 802033c:	080229c8 	.word	0x080229c8
 8020340:	fffffc02 	.word	0xfffffc02
 8020344:	39500000 	.word	0x39500000
 8020348:	7ff00000 	.word	0x7ff00000
 802034c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020350:	d165      	bne.n	802041e <_strtod_l+0x936>
 8020352:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020354:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020358:	b35a      	cbz	r2, 80203b2 <_strtod_l+0x8ca>
 802035a:	4a9f      	ldr	r2, [pc, #636]	@ (80205d8 <_strtod_l+0xaf0>)
 802035c:	4293      	cmp	r3, r2
 802035e:	d12b      	bne.n	80203b8 <_strtod_l+0x8d0>
 8020360:	9b08      	ldr	r3, [sp, #32]
 8020362:	4651      	mov	r1, sl
 8020364:	b303      	cbz	r3, 80203a8 <_strtod_l+0x8c0>
 8020366:	4b9d      	ldr	r3, [pc, #628]	@ (80205dc <_strtod_l+0xaf4>)
 8020368:	465a      	mov	r2, fp
 802036a:	4013      	ands	r3, r2
 802036c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8020370:	f04f 32ff 	mov.w	r2, #4294967295
 8020374:	d81b      	bhi.n	80203ae <_strtod_l+0x8c6>
 8020376:	0d1b      	lsrs	r3, r3, #20
 8020378:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802037c:	fa02 f303 	lsl.w	r3, r2, r3
 8020380:	4299      	cmp	r1, r3
 8020382:	d119      	bne.n	80203b8 <_strtod_l+0x8d0>
 8020384:	4b96      	ldr	r3, [pc, #600]	@ (80205e0 <_strtod_l+0xaf8>)
 8020386:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020388:	429a      	cmp	r2, r3
 802038a:	d102      	bne.n	8020392 <_strtod_l+0x8aa>
 802038c:	3101      	adds	r1, #1
 802038e:	f43f adca 	beq.w	801ff26 <_strtod_l+0x43e>
 8020392:	4b92      	ldr	r3, [pc, #584]	@ (80205dc <_strtod_l+0xaf4>)
 8020394:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020396:	401a      	ands	r2, r3
 8020398:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 802039c:	f04f 0a00 	mov.w	sl, #0
 80203a0:	9b08      	ldr	r3, [sp, #32]
 80203a2:	2b00      	cmp	r3, #0
 80203a4:	d1b8      	bne.n	8020318 <_strtod_l+0x830>
 80203a6:	e5c9      	b.n	801ff3c <_strtod_l+0x454>
 80203a8:	f04f 33ff 	mov.w	r3, #4294967295
 80203ac:	e7e8      	b.n	8020380 <_strtod_l+0x898>
 80203ae:	4613      	mov	r3, r2
 80203b0:	e7e6      	b.n	8020380 <_strtod_l+0x898>
 80203b2:	ea53 030a 	orrs.w	r3, r3, sl
 80203b6:	d0a1      	beq.n	80202fc <_strtod_l+0x814>
 80203b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80203ba:	b1db      	cbz	r3, 80203f4 <_strtod_l+0x90c>
 80203bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80203be:	4213      	tst	r3, r2
 80203c0:	d0ee      	beq.n	80203a0 <_strtod_l+0x8b8>
 80203c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80203c4:	9a08      	ldr	r2, [sp, #32]
 80203c6:	4650      	mov	r0, sl
 80203c8:	4659      	mov	r1, fp
 80203ca:	b1bb      	cbz	r3, 80203fc <_strtod_l+0x914>
 80203cc:	f7ff fb6e 	bl	801faac <sulp>
 80203d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80203d4:	ec53 2b10 	vmov	r2, r3, d0
 80203d8:	f7df ff80 	bl	80002dc <__adddf3>
 80203dc:	4682      	mov	sl, r0
 80203de:	468b      	mov	fp, r1
 80203e0:	e7de      	b.n	80203a0 <_strtod_l+0x8b8>
 80203e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80203e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80203ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80203ee:	f04f 3aff 	mov.w	sl, #4294967295
 80203f2:	e7d5      	b.n	80203a0 <_strtod_l+0x8b8>
 80203f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80203f6:	ea13 0f0a 	tst.w	r3, sl
 80203fa:	e7e1      	b.n	80203c0 <_strtod_l+0x8d8>
 80203fc:	f7ff fb56 	bl	801faac <sulp>
 8020400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020404:	ec53 2b10 	vmov	r2, r3, d0
 8020408:	f7df ff66 	bl	80002d8 <__aeabi_dsub>
 802040c:	2200      	movs	r2, #0
 802040e:	2300      	movs	r3, #0
 8020410:	4682      	mov	sl, r0
 8020412:	468b      	mov	fp, r1
 8020414:	f7e0 fb80 	bl	8000b18 <__aeabi_dcmpeq>
 8020418:	2800      	cmp	r0, #0
 802041a:	d0c1      	beq.n	80203a0 <_strtod_l+0x8b8>
 802041c:	e619      	b.n	8020052 <_strtod_l+0x56a>
 802041e:	4641      	mov	r1, r8
 8020420:	4620      	mov	r0, r4
 8020422:	f7ff facd 	bl	801f9c0 <__ratio>
 8020426:	ec57 6b10 	vmov	r6, r7, d0
 802042a:	2200      	movs	r2, #0
 802042c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8020430:	4630      	mov	r0, r6
 8020432:	4639      	mov	r1, r7
 8020434:	f7e0 fb84 	bl	8000b40 <__aeabi_dcmple>
 8020438:	2800      	cmp	r0, #0
 802043a:	d06f      	beq.n	802051c <_strtod_l+0xa34>
 802043c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802043e:	2b00      	cmp	r3, #0
 8020440:	d17a      	bne.n	8020538 <_strtod_l+0xa50>
 8020442:	f1ba 0f00 	cmp.w	sl, #0
 8020446:	d158      	bne.n	80204fa <_strtod_l+0xa12>
 8020448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802044a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802044e:	2b00      	cmp	r3, #0
 8020450:	d15a      	bne.n	8020508 <_strtod_l+0xa20>
 8020452:	4b64      	ldr	r3, [pc, #400]	@ (80205e4 <_strtod_l+0xafc>)
 8020454:	2200      	movs	r2, #0
 8020456:	4630      	mov	r0, r6
 8020458:	4639      	mov	r1, r7
 802045a:	f7e0 fb67 	bl	8000b2c <__aeabi_dcmplt>
 802045e:	2800      	cmp	r0, #0
 8020460:	d159      	bne.n	8020516 <_strtod_l+0xa2e>
 8020462:	4630      	mov	r0, r6
 8020464:	4639      	mov	r1, r7
 8020466:	4b60      	ldr	r3, [pc, #384]	@ (80205e8 <_strtod_l+0xb00>)
 8020468:	2200      	movs	r2, #0
 802046a:	f7e0 f8ed 	bl	8000648 <__aeabi_dmul>
 802046e:	4606      	mov	r6, r0
 8020470:	460f      	mov	r7, r1
 8020472:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8020476:	9606      	str	r6, [sp, #24]
 8020478:	9307      	str	r3, [sp, #28]
 802047a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802047e:	4d57      	ldr	r5, [pc, #348]	@ (80205dc <_strtod_l+0xaf4>)
 8020480:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8020484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020486:	401d      	ands	r5, r3
 8020488:	4b58      	ldr	r3, [pc, #352]	@ (80205ec <_strtod_l+0xb04>)
 802048a:	429d      	cmp	r5, r3
 802048c:	f040 80b2 	bne.w	80205f4 <_strtod_l+0xb0c>
 8020490:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020492:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8020496:	ec4b ab10 	vmov	d0, sl, fp
 802049a:	f7ff f9c9 	bl	801f830 <__ulp>
 802049e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80204a2:	ec51 0b10 	vmov	r0, r1, d0
 80204a6:	f7e0 f8cf 	bl	8000648 <__aeabi_dmul>
 80204aa:	4652      	mov	r2, sl
 80204ac:	465b      	mov	r3, fp
 80204ae:	f7df ff15 	bl	80002dc <__adddf3>
 80204b2:	460b      	mov	r3, r1
 80204b4:	4949      	ldr	r1, [pc, #292]	@ (80205dc <_strtod_l+0xaf4>)
 80204b6:	4a4e      	ldr	r2, [pc, #312]	@ (80205f0 <_strtod_l+0xb08>)
 80204b8:	4019      	ands	r1, r3
 80204ba:	4291      	cmp	r1, r2
 80204bc:	4682      	mov	sl, r0
 80204be:	d942      	bls.n	8020546 <_strtod_l+0xa5e>
 80204c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80204c2:	4b47      	ldr	r3, [pc, #284]	@ (80205e0 <_strtod_l+0xaf8>)
 80204c4:	429a      	cmp	r2, r3
 80204c6:	d103      	bne.n	80204d0 <_strtod_l+0x9e8>
 80204c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80204ca:	3301      	adds	r3, #1
 80204cc:	f43f ad2b 	beq.w	801ff26 <_strtod_l+0x43e>
 80204d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80205e0 <_strtod_l+0xaf8>
 80204d4:	f04f 3aff 	mov.w	sl, #4294967295
 80204d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80204da:	9805      	ldr	r0, [sp, #20]
 80204dc:	f7fe fe74 	bl	801f1c8 <_Bfree>
 80204e0:	9805      	ldr	r0, [sp, #20]
 80204e2:	4649      	mov	r1, r9
 80204e4:	f7fe fe70 	bl	801f1c8 <_Bfree>
 80204e8:	9805      	ldr	r0, [sp, #20]
 80204ea:	4641      	mov	r1, r8
 80204ec:	f7fe fe6c 	bl	801f1c8 <_Bfree>
 80204f0:	9805      	ldr	r0, [sp, #20]
 80204f2:	4621      	mov	r1, r4
 80204f4:	f7fe fe68 	bl	801f1c8 <_Bfree>
 80204f8:	e618      	b.n	802012c <_strtod_l+0x644>
 80204fa:	f1ba 0f01 	cmp.w	sl, #1
 80204fe:	d103      	bne.n	8020508 <_strtod_l+0xa20>
 8020500:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020502:	2b00      	cmp	r3, #0
 8020504:	f43f ada5 	beq.w	8020052 <_strtod_l+0x56a>
 8020508:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80205b8 <_strtod_l+0xad0>
 802050c:	4f35      	ldr	r7, [pc, #212]	@ (80205e4 <_strtod_l+0xafc>)
 802050e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020512:	2600      	movs	r6, #0
 8020514:	e7b1      	b.n	802047a <_strtod_l+0x992>
 8020516:	4f34      	ldr	r7, [pc, #208]	@ (80205e8 <_strtod_l+0xb00>)
 8020518:	2600      	movs	r6, #0
 802051a:	e7aa      	b.n	8020472 <_strtod_l+0x98a>
 802051c:	4b32      	ldr	r3, [pc, #200]	@ (80205e8 <_strtod_l+0xb00>)
 802051e:	4630      	mov	r0, r6
 8020520:	4639      	mov	r1, r7
 8020522:	2200      	movs	r2, #0
 8020524:	f7e0 f890 	bl	8000648 <__aeabi_dmul>
 8020528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802052a:	4606      	mov	r6, r0
 802052c:	460f      	mov	r7, r1
 802052e:	2b00      	cmp	r3, #0
 8020530:	d09f      	beq.n	8020472 <_strtod_l+0x98a>
 8020532:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8020536:	e7a0      	b.n	802047a <_strtod_l+0x992>
 8020538:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80205c0 <_strtod_l+0xad8>
 802053c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020540:	ec57 6b17 	vmov	r6, r7, d7
 8020544:	e799      	b.n	802047a <_strtod_l+0x992>
 8020546:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 802054a:	9b08      	ldr	r3, [sp, #32]
 802054c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020550:	2b00      	cmp	r3, #0
 8020552:	d1c1      	bne.n	80204d8 <_strtod_l+0x9f0>
 8020554:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020558:	0d1b      	lsrs	r3, r3, #20
 802055a:	051b      	lsls	r3, r3, #20
 802055c:	429d      	cmp	r5, r3
 802055e:	d1bb      	bne.n	80204d8 <_strtod_l+0x9f0>
 8020560:	4630      	mov	r0, r6
 8020562:	4639      	mov	r1, r7
 8020564:	f7e0 fbb8 	bl	8000cd8 <__aeabi_d2lz>
 8020568:	f7e0 f840 	bl	80005ec <__aeabi_l2d>
 802056c:	4602      	mov	r2, r0
 802056e:	460b      	mov	r3, r1
 8020570:	4630      	mov	r0, r6
 8020572:	4639      	mov	r1, r7
 8020574:	f7df feb0 	bl	80002d8 <__aeabi_dsub>
 8020578:	460b      	mov	r3, r1
 802057a:	4602      	mov	r2, r0
 802057c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8020580:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8020584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020586:	ea46 060a 	orr.w	r6, r6, sl
 802058a:	431e      	orrs	r6, r3
 802058c:	d06f      	beq.n	802066e <_strtod_l+0xb86>
 802058e:	a30e      	add	r3, pc, #56	@ (adr r3, 80205c8 <_strtod_l+0xae0>)
 8020590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020594:	f7e0 faca 	bl	8000b2c <__aeabi_dcmplt>
 8020598:	2800      	cmp	r0, #0
 802059a:	f47f accf 	bne.w	801ff3c <_strtod_l+0x454>
 802059e:	a30c      	add	r3, pc, #48	@ (adr r3, 80205d0 <_strtod_l+0xae8>)
 80205a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80205a8:	f7e0 fade 	bl	8000b68 <__aeabi_dcmpgt>
 80205ac:	2800      	cmp	r0, #0
 80205ae:	d093      	beq.n	80204d8 <_strtod_l+0x9f0>
 80205b0:	e4c4      	b.n	801ff3c <_strtod_l+0x454>
 80205b2:	bf00      	nop
 80205b4:	f3af 8000 	nop.w
 80205b8:	00000000 	.word	0x00000000
 80205bc:	bff00000 	.word	0xbff00000
 80205c0:	00000000 	.word	0x00000000
 80205c4:	3ff00000 	.word	0x3ff00000
 80205c8:	94a03595 	.word	0x94a03595
 80205cc:	3fdfffff 	.word	0x3fdfffff
 80205d0:	35afe535 	.word	0x35afe535
 80205d4:	3fe00000 	.word	0x3fe00000
 80205d8:	000fffff 	.word	0x000fffff
 80205dc:	7ff00000 	.word	0x7ff00000
 80205e0:	7fefffff 	.word	0x7fefffff
 80205e4:	3ff00000 	.word	0x3ff00000
 80205e8:	3fe00000 	.word	0x3fe00000
 80205ec:	7fe00000 	.word	0x7fe00000
 80205f0:	7c9fffff 	.word	0x7c9fffff
 80205f4:	9b08      	ldr	r3, [sp, #32]
 80205f6:	b323      	cbz	r3, 8020642 <_strtod_l+0xb5a>
 80205f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80205fc:	d821      	bhi.n	8020642 <_strtod_l+0xb5a>
 80205fe:	a328      	add	r3, pc, #160	@ (adr r3, 80206a0 <_strtod_l+0xbb8>)
 8020600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020604:	4630      	mov	r0, r6
 8020606:	4639      	mov	r1, r7
 8020608:	f7e0 fa9a 	bl	8000b40 <__aeabi_dcmple>
 802060c:	b1a0      	cbz	r0, 8020638 <_strtod_l+0xb50>
 802060e:	4639      	mov	r1, r7
 8020610:	4630      	mov	r0, r6
 8020612:	f7e0 faf1 	bl	8000bf8 <__aeabi_d2uiz>
 8020616:	2801      	cmp	r0, #1
 8020618:	bf38      	it	cc
 802061a:	2001      	movcc	r0, #1
 802061c:	f7df ff9a 	bl	8000554 <__aeabi_ui2d>
 8020620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020622:	4606      	mov	r6, r0
 8020624:	460f      	mov	r7, r1
 8020626:	b9fb      	cbnz	r3, 8020668 <_strtod_l+0xb80>
 8020628:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802062c:	9014      	str	r0, [sp, #80]	@ 0x50
 802062e:	9315      	str	r3, [sp, #84]	@ 0x54
 8020630:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8020634:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8020638:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802063a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 802063e:	1b5b      	subs	r3, r3, r5
 8020640:	9311      	str	r3, [sp, #68]	@ 0x44
 8020642:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8020646:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 802064a:	f7ff f8f1 	bl	801f830 <__ulp>
 802064e:	4650      	mov	r0, sl
 8020650:	ec53 2b10 	vmov	r2, r3, d0
 8020654:	4659      	mov	r1, fp
 8020656:	f7df fff7 	bl	8000648 <__aeabi_dmul>
 802065a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 802065e:	f7df fe3d 	bl	80002dc <__adddf3>
 8020662:	4682      	mov	sl, r0
 8020664:	468b      	mov	fp, r1
 8020666:	e770      	b.n	802054a <_strtod_l+0xa62>
 8020668:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 802066c:	e7e0      	b.n	8020630 <_strtod_l+0xb48>
 802066e:	a30e      	add	r3, pc, #56	@ (adr r3, 80206a8 <_strtod_l+0xbc0>)
 8020670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020674:	f7e0 fa5a 	bl	8000b2c <__aeabi_dcmplt>
 8020678:	e798      	b.n	80205ac <_strtod_l+0xac4>
 802067a:	2300      	movs	r3, #0
 802067c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802067e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8020680:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020682:	6013      	str	r3, [r2, #0]
 8020684:	f7ff ba6d 	b.w	801fb62 <_strtod_l+0x7a>
 8020688:	2a65      	cmp	r2, #101	@ 0x65
 802068a:	f43f ab66 	beq.w	801fd5a <_strtod_l+0x272>
 802068e:	2a45      	cmp	r2, #69	@ 0x45
 8020690:	f43f ab63 	beq.w	801fd5a <_strtod_l+0x272>
 8020694:	2301      	movs	r3, #1
 8020696:	f7ff bb9e 	b.w	801fdd6 <_strtod_l+0x2ee>
 802069a:	bf00      	nop
 802069c:	f3af 8000 	nop.w
 80206a0:	ffc00000 	.word	0xffc00000
 80206a4:	41dfffff 	.word	0x41dfffff
 80206a8:	94a03595 	.word	0x94a03595
 80206ac:	3fcfffff 	.word	0x3fcfffff

080206b0 <_strtod_r>:
 80206b0:	4b01      	ldr	r3, [pc, #4]	@ (80206b8 <_strtod_r+0x8>)
 80206b2:	f7ff ba19 	b.w	801fae8 <_strtod_l>
 80206b6:	bf00      	nop
 80206b8:	2000008c 	.word	0x2000008c

080206bc <_strtol_l.constprop.0>:
 80206bc:	2b24      	cmp	r3, #36	@ 0x24
 80206be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80206c2:	4686      	mov	lr, r0
 80206c4:	4690      	mov	r8, r2
 80206c6:	d801      	bhi.n	80206cc <_strtol_l.constprop.0+0x10>
 80206c8:	2b01      	cmp	r3, #1
 80206ca:	d106      	bne.n	80206da <_strtol_l.constprop.0+0x1e>
 80206cc:	f7fd fdac 	bl	801e228 <__errno>
 80206d0:	2316      	movs	r3, #22
 80206d2:	6003      	str	r3, [r0, #0]
 80206d4:	2000      	movs	r0, #0
 80206d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80206da:	4834      	ldr	r0, [pc, #208]	@ (80207ac <_strtol_l.constprop.0+0xf0>)
 80206dc:	460d      	mov	r5, r1
 80206de:	462a      	mov	r2, r5
 80206e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80206e4:	5d06      	ldrb	r6, [r0, r4]
 80206e6:	f016 0608 	ands.w	r6, r6, #8
 80206ea:	d1f8      	bne.n	80206de <_strtol_l.constprop.0+0x22>
 80206ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80206ee:	d12d      	bne.n	802074c <_strtol_l.constprop.0+0x90>
 80206f0:	782c      	ldrb	r4, [r5, #0]
 80206f2:	2601      	movs	r6, #1
 80206f4:	1c95      	adds	r5, r2, #2
 80206f6:	f033 0210 	bics.w	r2, r3, #16
 80206fa:	d109      	bne.n	8020710 <_strtol_l.constprop.0+0x54>
 80206fc:	2c30      	cmp	r4, #48	@ 0x30
 80206fe:	d12a      	bne.n	8020756 <_strtol_l.constprop.0+0x9a>
 8020700:	782a      	ldrb	r2, [r5, #0]
 8020702:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8020706:	2a58      	cmp	r2, #88	@ 0x58
 8020708:	d125      	bne.n	8020756 <_strtol_l.constprop.0+0x9a>
 802070a:	786c      	ldrb	r4, [r5, #1]
 802070c:	2310      	movs	r3, #16
 802070e:	3502      	adds	r5, #2
 8020710:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8020714:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020718:	2200      	movs	r2, #0
 802071a:	fbbc f9f3 	udiv	r9, ip, r3
 802071e:	4610      	mov	r0, r2
 8020720:	fb03 ca19 	mls	sl, r3, r9, ip
 8020724:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8020728:	2f09      	cmp	r7, #9
 802072a:	d81b      	bhi.n	8020764 <_strtol_l.constprop.0+0xa8>
 802072c:	463c      	mov	r4, r7
 802072e:	42a3      	cmp	r3, r4
 8020730:	dd27      	ble.n	8020782 <_strtol_l.constprop.0+0xc6>
 8020732:	1c57      	adds	r7, r2, #1
 8020734:	d007      	beq.n	8020746 <_strtol_l.constprop.0+0x8a>
 8020736:	4581      	cmp	r9, r0
 8020738:	d320      	bcc.n	802077c <_strtol_l.constprop.0+0xc0>
 802073a:	d101      	bne.n	8020740 <_strtol_l.constprop.0+0x84>
 802073c:	45a2      	cmp	sl, r4
 802073e:	db1d      	blt.n	802077c <_strtol_l.constprop.0+0xc0>
 8020740:	fb00 4003 	mla	r0, r0, r3, r4
 8020744:	2201      	movs	r2, #1
 8020746:	f815 4b01 	ldrb.w	r4, [r5], #1
 802074a:	e7eb      	b.n	8020724 <_strtol_l.constprop.0+0x68>
 802074c:	2c2b      	cmp	r4, #43	@ 0x2b
 802074e:	bf04      	itt	eq
 8020750:	782c      	ldrbeq	r4, [r5, #0]
 8020752:	1c95      	addeq	r5, r2, #2
 8020754:	e7cf      	b.n	80206f6 <_strtol_l.constprop.0+0x3a>
 8020756:	2b00      	cmp	r3, #0
 8020758:	d1da      	bne.n	8020710 <_strtol_l.constprop.0+0x54>
 802075a:	2c30      	cmp	r4, #48	@ 0x30
 802075c:	bf0c      	ite	eq
 802075e:	2308      	moveq	r3, #8
 8020760:	230a      	movne	r3, #10
 8020762:	e7d5      	b.n	8020710 <_strtol_l.constprop.0+0x54>
 8020764:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8020768:	2f19      	cmp	r7, #25
 802076a:	d801      	bhi.n	8020770 <_strtol_l.constprop.0+0xb4>
 802076c:	3c37      	subs	r4, #55	@ 0x37
 802076e:	e7de      	b.n	802072e <_strtol_l.constprop.0+0x72>
 8020770:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8020774:	2f19      	cmp	r7, #25
 8020776:	d804      	bhi.n	8020782 <_strtol_l.constprop.0+0xc6>
 8020778:	3c57      	subs	r4, #87	@ 0x57
 802077a:	e7d8      	b.n	802072e <_strtol_l.constprop.0+0x72>
 802077c:	f04f 32ff 	mov.w	r2, #4294967295
 8020780:	e7e1      	b.n	8020746 <_strtol_l.constprop.0+0x8a>
 8020782:	1c53      	adds	r3, r2, #1
 8020784:	d108      	bne.n	8020798 <_strtol_l.constprop.0+0xdc>
 8020786:	2322      	movs	r3, #34	@ 0x22
 8020788:	f8ce 3000 	str.w	r3, [lr]
 802078c:	4660      	mov	r0, ip
 802078e:	f1b8 0f00 	cmp.w	r8, #0
 8020792:	d0a0      	beq.n	80206d6 <_strtol_l.constprop.0+0x1a>
 8020794:	1e69      	subs	r1, r5, #1
 8020796:	e006      	b.n	80207a6 <_strtol_l.constprop.0+0xea>
 8020798:	b106      	cbz	r6, 802079c <_strtol_l.constprop.0+0xe0>
 802079a:	4240      	negs	r0, r0
 802079c:	f1b8 0f00 	cmp.w	r8, #0
 80207a0:	d099      	beq.n	80206d6 <_strtol_l.constprop.0+0x1a>
 80207a2:	2a00      	cmp	r2, #0
 80207a4:	d1f6      	bne.n	8020794 <_strtol_l.constprop.0+0xd8>
 80207a6:	f8c8 1000 	str.w	r1, [r8]
 80207aa:	e794      	b.n	80206d6 <_strtol_l.constprop.0+0x1a>
 80207ac:	080229f1 	.word	0x080229f1

080207b0 <_strtol_r>:
 80207b0:	f7ff bf84 	b.w	80206bc <_strtol_l.constprop.0>

080207b4 <__ssputs_r>:
 80207b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80207b8:	688e      	ldr	r6, [r1, #8]
 80207ba:	461f      	mov	r7, r3
 80207bc:	42be      	cmp	r6, r7
 80207be:	680b      	ldr	r3, [r1, #0]
 80207c0:	4682      	mov	sl, r0
 80207c2:	460c      	mov	r4, r1
 80207c4:	4690      	mov	r8, r2
 80207c6:	d82d      	bhi.n	8020824 <__ssputs_r+0x70>
 80207c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80207cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80207d0:	d026      	beq.n	8020820 <__ssputs_r+0x6c>
 80207d2:	6965      	ldr	r5, [r4, #20]
 80207d4:	6909      	ldr	r1, [r1, #16]
 80207d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80207da:	eba3 0901 	sub.w	r9, r3, r1
 80207de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80207e2:	1c7b      	adds	r3, r7, #1
 80207e4:	444b      	add	r3, r9
 80207e6:	106d      	asrs	r5, r5, #1
 80207e8:	429d      	cmp	r5, r3
 80207ea:	bf38      	it	cc
 80207ec:	461d      	movcc	r5, r3
 80207ee:	0553      	lsls	r3, r2, #21
 80207f0:	d527      	bpl.n	8020842 <__ssputs_r+0x8e>
 80207f2:	4629      	mov	r1, r5
 80207f4:	f7fe fc1c 	bl	801f030 <_malloc_r>
 80207f8:	4606      	mov	r6, r0
 80207fa:	b360      	cbz	r0, 8020856 <__ssputs_r+0xa2>
 80207fc:	6921      	ldr	r1, [r4, #16]
 80207fe:	464a      	mov	r2, r9
 8020800:	f7fd fd3f 	bl	801e282 <memcpy>
 8020804:	89a3      	ldrh	r3, [r4, #12]
 8020806:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802080a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802080e:	81a3      	strh	r3, [r4, #12]
 8020810:	6126      	str	r6, [r4, #16]
 8020812:	6165      	str	r5, [r4, #20]
 8020814:	444e      	add	r6, r9
 8020816:	eba5 0509 	sub.w	r5, r5, r9
 802081a:	6026      	str	r6, [r4, #0]
 802081c:	60a5      	str	r5, [r4, #8]
 802081e:	463e      	mov	r6, r7
 8020820:	42be      	cmp	r6, r7
 8020822:	d900      	bls.n	8020826 <__ssputs_r+0x72>
 8020824:	463e      	mov	r6, r7
 8020826:	6820      	ldr	r0, [r4, #0]
 8020828:	4632      	mov	r2, r6
 802082a:	4641      	mov	r1, r8
 802082c:	f000 fb9e 	bl	8020f6c <memmove>
 8020830:	68a3      	ldr	r3, [r4, #8]
 8020832:	1b9b      	subs	r3, r3, r6
 8020834:	60a3      	str	r3, [r4, #8]
 8020836:	6823      	ldr	r3, [r4, #0]
 8020838:	4433      	add	r3, r6
 802083a:	6023      	str	r3, [r4, #0]
 802083c:	2000      	movs	r0, #0
 802083e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020842:	462a      	mov	r2, r5
 8020844:	f000 ff75 	bl	8021732 <_realloc_r>
 8020848:	4606      	mov	r6, r0
 802084a:	2800      	cmp	r0, #0
 802084c:	d1e0      	bne.n	8020810 <__ssputs_r+0x5c>
 802084e:	6921      	ldr	r1, [r4, #16]
 8020850:	4650      	mov	r0, sl
 8020852:	f7fe fb79 	bl	801ef48 <_free_r>
 8020856:	230c      	movs	r3, #12
 8020858:	f8ca 3000 	str.w	r3, [sl]
 802085c:	89a3      	ldrh	r3, [r4, #12]
 802085e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020862:	81a3      	strh	r3, [r4, #12]
 8020864:	f04f 30ff 	mov.w	r0, #4294967295
 8020868:	e7e9      	b.n	802083e <__ssputs_r+0x8a>
	...

0802086c <_svfiprintf_r>:
 802086c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020870:	4698      	mov	r8, r3
 8020872:	898b      	ldrh	r3, [r1, #12]
 8020874:	061b      	lsls	r3, r3, #24
 8020876:	b09d      	sub	sp, #116	@ 0x74
 8020878:	4607      	mov	r7, r0
 802087a:	460d      	mov	r5, r1
 802087c:	4614      	mov	r4, r2
 802087e:	d510      	bpl.n	80208a2 <_svfiprintf_r+0x36>
 8020880:	690b      	ldr	r3, [r1, #16]
 8020882:	b973      	cbnz	r3, 80208a2 <_svfiprintf_r+0x36>
 8020884:	2140      	movs	r1, #64	@ 0x40
 8020886:	f7fe fbd3 	bl	801f030 <_malloc_r>
 802088a:	6028      	str	r0, [r5, #0]
 802088c:	6128      	str	r0, [r5, #16]
 802088e:	b930      	cbnz	r0, 802089e <_svfiprintf_r+0x32>
 8020890:	230c      	movs	r3, #12
 8020892:	603b      	str	r3, [r7, #0]
 8020894:	f04f 30ff 	mov.w	r0, #4294967295
 8020898:	b01d      	add	sp, #116	@ 0x74
 802089a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802089e:	2340      	movs	r3, #64	@ 0x40
 80208a0:	616b      	str	r3, [r5, #20]
 80208a2:	2300      	movs	r3, #0
 80208a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80208a6:	2320      	movs	r3, #32
 80208a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80208ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80208b0:	2330      	movs	r3, #48	@ 0x30
 80208b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8020a50 <_svfiprintf_r+0x1e4>
 80208b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80208ba:	f04f 0901 	mov.w	r9, #1
 80208be:	4623      	mov	r3, r4
 80208c0:	469a      	mov	sl, r3
 80208c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80208c6:	b10a      	cbz	r2, 80208cc <_svfiprintf_r+0x60>
 80208c8:	2a25      	cmp	r2, #37	@ 0x25
 80208ca:	d1f9      	bne.n	80208c0 <_svfiprintf_r+0x54>
 80208cc:	ebba 0b04 	subs.w	fp, sl, r4
 80208d0:	d00b      	beq.n	80208ea <_svfiprintf_r+0x7e>
 80208d2:	465b      	mov	r3, fp
 80208d4:	4622      	mov	r2, r4
 80208d6:	4629      	mov	r1, r5
 80208d8:	4638      	mov	r0, r7
 80208da:	f7ff ff6b 	bl	80207b4 <__ssputs_r>
 80208de:	3001      	adds	r0, #1
 80208e0:	f000 80a7 	beq.w	8020a32 <_svfiprintf_r+0x1c6>
 80208e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80208e6:	445a      	add	r2, fp
 80208e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80208ea:	f89a 3000 	ldrb.w	r3, [sl]
 80208ee:	2b00      	cmp	r3, #0
 80208f0:	f000 809f 	beq.w	8020a32 <_svfiprintf_r+0x1c6>
 80208f4:	2300      	movs	r3, #0
 80208f6:	f04f 32ff 	mov.w	r2, #4294967295
 80208fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80208fe:	f10a 0a01 	add.w	sl, sl, #1
 8020902:	9304      	str	r3, [sp, #16]
 8020904:	9307      	str	r3, [sp, #28]
 8020906:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802090a:	931a      	str	r3, [sp, #104]	@ 0x68
 802090c:	4654      	mov	r4, sl
 802090e:	2205      	movs	r2, #5
 8020910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020914:	484e      	ldr	r0, [pc, #312]	@ (8020a50 <_svfiprintf_r+0x1e4>)
 8020916:	f7df fc83 	bl	8000220 <memchr>
 802091a:	9a04      	ldr	r2, [sp, #16]
 802091c:	b9d8      	cbnz	r0, 8020956 <_svfiprintf_r+0xea>
 802091e:	06d0      	lsls	r0, r2, #27
 8020920:	bf44      	itt	mi
 8020922:	2320      	movmi	r3, #32
 8020924:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020928:	0711      	lsls	r1, r2, #28
 802092a:	bf44      	itt	mi
 802092c:	232b      	movmi	r3, #43	@ 0x2b
 802092e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020932:	f89a 3000 	ldrb.w	r3, [sl]
 8020936:	2b2a      	cmp	r3, #42	@ 0x2a
 8020938:	d015      	beq.n	8020966 <_svfiprintf_r+0xfa>
 802093a:	9a07      	ldr	r2, [sp, #28]
 802093c:	4654      	mov	r4, sl
 802093e:	2000      	movs	r0, #0
 8020940:	f04f 0c0a 	mov.w	ip, #10
 8020944:	4621      	mov	r1, r4
 8020946:	f811 3b01 	ldrb.w	r3, [r1], #1
 802094a:	3b30      	subs	r3, #48	@ 0x30
 802094c:	2b09      	cmp	r3, #9
 802094e:	d94b      	bls.n	80209e8 <_svfiprintf_r+0x17c>
 8020950:	b1b0      	cbz	r0, 8020980 <_svfiprintf_r+0x114>
 8020952:	9207      	str	r2, [sp, #28]
 8020954:	e014      	b.n	8020980 <_svfiprintf_r+0x114>
 8020956:	eba0 0308 	sub.w	r3, r0, r8
 802095a:	fa09 f303 	lsl.w	r3, r9, r3
 802095e:	4313      	orrs	r3, r2
 8020960:	9304      	str	r3, [sp, #16]
 8020962:	46a2      	mov	sl, r4
 8020964:	e7d2      	b.n	802090c <_svfiprintf_r+0xa0>
 8020966:	9b03      	ldr	r3, [sp, #12]
 8020968:	1d19      	adds	r1, r3, #4
 802096a:	681b      	ldr	r3, [r3, #0]
 802096c:	9103      	str	r1, [sp, #12]
 802096e:	2b00      	cmp	r3, #0
 8020970:	bfbb      	ittet	lt
 8020972:	425b      	neglt	r3, r3
 8020974:	f042 0202 	orrlt.w	r2, r2, #2
 8020978:	9307      	strge	r3, [sp, #28]
 802097a:	9307      	strlt	r3, [sp, #28]
 802097c:	bfb8      	it	lt
 802097e:	9204      	strlt	r2, [sp, #16]
 8020980:	7823      	ldrb	r3, [r4, #0]
 8020982:	2b2e      	cmp	r3, #46	@ 0x2e
 8020984:	d10a      	bne.n	802099c <_svfiprintf_r+0x130>
 8020986:	7863      	ldrb	r3, [r4, #1]
 8020988:	2b2a      	cmp	r3, #42	@ 0x2a
 802098a:	d132      	bne.n	80209f2 <_svfiprintf_r+0x186>
 802098c:	9b03      	ldr	r3, [sp, #12]
 802098e:	1d1a      	adds	r2, r3, #4
 8020990:	681b      	ldr	r3, [r3, #0]
 8020992:	9203      	str	r2, [sp, #12]
 8020994:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020998:	3402      	adds	r4, #2
 802099a:	9305      	str	r3, [sp, #20]
 802099c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8020a60 <_svfiprintf_r+0x1f4>
 80209a0:	7821      	ldrb	r1, [r4, #0]
 80209a2:	2203      	movs	r2, #3
 80209a4:	4650      	mov	r0, sl
 80209a6:	f7df fc3b 	bl	8000220 <memchr>
 80209aa:	b138      	cbz	r0, 80209bc <_svfiprintf_r+0x150>
 80209ac:	9b04      	ldr	r3, [sp, #16]
 80209ae:	eba0 000a 	sub.w	r0, r0, sl
 80209b2:	2240      	movs	r2, #64	@ 0x40
 80209b4:	4082      	lsls	r2, r0
 80209b6:	4313      	orrs	r3, r2
 80209b8:	3401      	adds	r4, #1
 80209ba:	9304      	str	r3, [sp, #16]
 80209bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80209c0:	4824      	ldr	r0, [pc, #144]	@ (8020a54 <_svfiprintf_r+0x1e8>)
 80209c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80209c6:	2206      	movs	r2, #6
 80209c8:	f7df fc2a 	bl	8000220 <memchr>
 80209cc:	2800      	cmp	r0, #0
 80209ce:	d036      	beq.n	8020a3e <_svfiprintf_r+0x1d2>
 80209d0:	4b21      	ldr	r3, [pc, #132]	@ (8020a58 <_svfiprintf_r+0x1ec>)
 80209d2:	bb1b      	cbnz	r3, 8020a1c <_svfiprintf_r+0x1b0>
 80209d4:	9b03      	ldr	r3, [sp, #12]
 80209d6:	3307      	adds	r3, #7
 80209d8:	f023 0307 	bic.w	r3, r3, #7
 80209dc:	3308      	adds	r3, #8
 80209de:	9303      	str	r3, [sp, #12]
 80209e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80209e2:	4433      	add	r3, r6
 80209e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80209e6:	e76a      	b.n	80208be <_svfiprintf_r+0x52>
 80209e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80209ec:	460c      	mov	r4, r1
 80209ee:	2001      	movs	r0, #1
 80209f0:	e7a8      	b.n	8020944 <_svfiprintf_r+0xd8>
 80209f2:	2300      	movs	r3, #0
 80209f4:	3401      	adds	r4, #1
 80209f6:	9305      	str	r3, [sp, #20]
 80209f8:	4619      	mov	r1, r3
 80209fa:	f04f 0c0a 	mov.w	ip, #10
 80209fe:	4620      	mov	r0, r4
 8020a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020a04:	3a30      	subs	r2, #48	@ 0x30
 8020a06:	2a09      	cmp	r2, #9
 8020a08:	d903      	bls.n	8020a12 <_svfiprintf_r+0x1a6>
 8020a0a:	2b00      	cmp	r3, #0
 8020a0c:	d0c6      	beq.n	802099c <_svfiprintf_r+0x130>
 8020a0e:	9105      	str	r1, [sp, #20]
 8020a10:	e7c4      	b.n	802099c <_svfiprintf_r+0x130>
 8020a12:	fb0c 2101 	mla	r1, ip, r1, r2
 8020a16:	4604      	mov	r4, r0
 8020a18:	2301      	movs	r3, #1
 8020a1a:	e7f0      	b.n	80209fe <_svfiprintf_r+0x192>
 8020a1c:	ab03      	add	r3, sp, #12
 8020a1e:	9300      	str	r3, [sp, #0]
 8020a20:	462a      	mov	r2, r5
 8020a22:	4b0e      	ldr	r3, [pc, #56]	@ (8020a5c <_svfiprintf_r+0x1f0>)
 8020a24:	a904      	add	r1, sp, #16
 8020a26:	4638      	mov	r0, r7
 8020a28:	f7fc faf2 	bl	801d010 <_printf_float>
 8020a2c:	1c42      	adds	r2, r0, #1
 8020a2e:	4606      	mov	r6, r0
 8020a30:	d1d6      	bne.n	80209e0 <_svfiprintf_r+0x174>
 8020a32:	89ab      	ldrh	r3, [r5, #12]
 8020a34:	065b      	lsls	r3, r3, #25
 8020a36:	f53f af2d 	bmi.w	8020894 <_svfiprintf_r+0x28>
 8020a3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020a3c:	e72c      	b.n	8020898 <_svfiprintf_r+0x2c>
 8020a3e:	ab03      	add	r3, sp, #12
 8020a40:	9300      	str	r3, [sp, #0]
 8020a42:	462a      	mov	r2, r5
 8020a44:	4b05      	ldr	r3, [pc, #20]	@ (8020a5c <_svfiprintf_r+0x1f0>)
 8020a46:	a904      	add	r1, sp, #16
 8020a48:	4638      	mov	r0, r7
 8020a4a:	f7fc fd79 	bl	801d540 <_printf_i>
 8020a4e:	e7ed      	b.n	8020a2c <_svfiprintf_r+0x1c0>
 8020a50:	08022af1 	.word	0x08022af1
 8020a54:	08022afb 	.word	0x08022afb
 8020a58:	0801d011 	.word	0x0801d011
 8020a5c:	080207b5 	.word	0x080207b5
 8020a60:	08022af7 	.word	0x08022af7

08020a64 <__sfputc_r>:
 8020a64:	6893      	ldr	r3, [r2, #8]
 8020a66:	3b01      	subs	r3, #1
 8020a68:	2b00      	cmp	r3, #0
 8020a6a:	b410      	push	{r4}
 8020a6c:	6093      	str	r3, [r2, #8]
 8020a6e:	da08      	bge.n	8020a82 <__sfputc_r+0x1e>
 8020a70:	6994      	ldr	r4, [r2, #24]
 8020a72:	42a3      	cmp	r3, r4
 8020a74:	db01      	blt.n	8020a7a <__sfputc_r+0x16>
 8020a76:	290a      	cmp	r1, #10
 8020a78:	d103      	bne.n	8020a82 <__sfputc_r+0x1e>
 8020a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020a7e:	f7fd baec 	b.w	801e05a <__swbuf_r>
 8020a82:	6813      	ldr	r3, [r2, #0]
 8020a84:	1c58      	adds	r0, r3, #1
 8020a86:	6010      	str	r0, [r2, #0]
 8020a88:	7019      	strb	r1, [r3, #0]
 8020a8a:	4608      	mov	r0, r1
 8020a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020a90:	4770      	bx	lr

08020a92 <__sfputs_r>:
 8020a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a94:	4606      	mov	r6, r0
 8020a96:	460f      	mov	r7, r1
 8020a98:	4614      	mov	r4, r2
 8020a9a:	18d5      	adds	r5, r2, r3
 8020a9c:	42ac      	cmp	r4, r5
 8020a9e:	d101      	bne.n	8020aa4 <__sfputs_r+0x12>
 8020aa0:	2000      	movs	r0, #0
 8020aa2:	e007      	b.n	8020ab4 <__sfputs_r+0x22>
 8020aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020aa8:	463a      	mov	r2, r7
 8020aaa:	4630      	mov	r0, r6
 8020aac:	f7ff ffda 	bl	8020a64 <__sfputc_r>
 8020ab0:	1c43      	adds	r3, r0, #1
 8020ab2:	d1f3      	bne.n	8020a9c <__sfputs_r+0xa>
 8020ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020ab8 <_vfiprintf_r>:
 8020ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020abc:	460d      	mov	r5, r1
 8020abe:	b09d      	sub	sp, #116	@ 0x74
 8020ac0:	4614      	mov	r4, r2
 8020ac2:	4698      	mov	r8, r3
 8020ac4:	4606      	mov	r6, r0
 8020ac6:	b118      	cbz	r0, 8020ad0 <_vfiprintf_r+0x18>
 8020ac8:	6a03      	ldr	r3, [r0, #32]
 8020aca:	b90b      	cbnz	r3, 8020ad0 <_vfiprintf_r+0x18>
 8020acc:	f7fd f8f8 	bl	801dcc0 <__sinit>
 8020ad0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020ad2:	07d9      	lsls	r1, r3, #31
 8020ad4:	d405      	bmi.n	8020ae2 <_vfiprintf_r+0x2a>
 8020ad6:	89ab      	ldrh	r3, [r5, #12]
 8020ad8:	059a      	lsls	r2, r3, #22
 8020ada:	d402      	bmi.n	8020ae2 <_vfiprintf_r+0x2a>
 8020adc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020ade:	f7fd fbce 	bl	801e27e <__retarget_lock_acquire_recursive>
 8020ae2:	89ab      	ldrh	r3, [r5, #12]
 8020ae4:	071b      	lsls	r3, r3, #28
 8020ae6:	d501      	bpl.n	8020aec <_vfiprintf_r+0x34>
 8020ae8:	692b      	ldr	r3, [r5, #16]
 8020aea:	b99b      	cbnz	r3, 8020b14 <_vfiprintf_r+0x5c>
 8020aec:	4629      	mov	r1, r5
 8020aee:	4630      	mov	r0, r6
 8020af0:	f7fd faf2 	bl	801e0d8 <__swsetup_r>
 8020af4:	b170      	cbz	r0, 8020b14 <_vfiprintf_r+0x5c>
 8020af6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020af8:	07dc      	lsls	r4, r3, #31
 8020afa:	d504      	bpl.n	8020b06 <_vfiprintf_r+0x4e>
 8020afc:	f04f 30ff 	mov.w	r0, #4294967295
 8020b00:	b01d      	add	sp, #116	@ 0x74
 8020b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b06:	89ab      	ldrh	r3, [r5, #12]
 8020b08:	0598      	lsls	r0, r3, #22
 8020b0a:	d4f7      	bmi.n	8020afc <_vfiprintf_r+0x44>
 8020b0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020b0e:	f7fd fbb7 	bl	801e280 <__retarget_lock_release_recursive>
 8020b12:	e7f3      	b.n	8020afc <_vfiprintf_r+0x44>
 8020b14:	2300      	movs	r3, #0
 8020b16:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b18:	2320      	movs	r3, #32
 8020b1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020b1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8020b22:	2330      	movs	r3, #48	@ 0x30
 8020b24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8020cd4 <_vfiprintf_r+0x21c>
 8020b28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020b2c:	f04f 0901 	mov.w	r9, #1
 8020b30:	4623      	mov	r3, r4
 8020b32:	469a      	mov	sl, r3
 8020b34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020b38:	b10a      	cbz	r2, 8020b3e <_vfiprintf_r+0x86>
 8020b3a:	2a25      	cmp	r2, #37	@ 0x25
 8020b3c:	d1f9      	bne.n	8020b32 <_vfiprintf_r+0x7a>
 8020b3e:	ebba 0b04 	subs.w	fp, sl, r4
 8020b42:	d00b      	beq.n	8020b5c <_vfiprintf_r+0xa4>
 8020b44:	465b      	mov	r3, fp
 8020b46:	4622      	mov	r2, r4
 8020b48:	4629      	mov	r1, r5
 8020b4a:	4630      	mov	r0, r6
 8020b4c:	f7ff ffa1 	bl	8020a92 <__sfputs_r>
 8020b50:	3001      	adds	r0, #1
 8020b52:	f000 80a7 	beq.w	8020ca4 <_vfiprintf_r+0x1ec>
 8020b56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020b58:	445a      	add	r2, fp
 8020b5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8020b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8020b60:	2b00      	cmp	r3, #0
 8020b62:	f000 809f 	beq.w	8020ca4 <_vfiprintf_r+0x1ec>
 8020b66:	2300      	movs	r3, #0
 8020b68:	f04f 32ff 	mov.w	r2, #4294967295
 8020b6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020b70:	f10a 0a01 	add.w	sl, sl, #1
 8020b74:	9304      	str	r3, [sp, #16]
 8020b76:	9307      	str	r3, [sp, #28]
 8020b78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020b7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8020b7e:	4654      	mov	r4, sl
 8020b80:	2205      	movs	r2, #5
 8020b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020b86:	4853      	ldr	r0, [pc, #332]	@ (8020cd4 <_vfiprintf_r+0x21c>)
 8020b88:	f7df fb4a 	bl	8000220 <memchr>
 8020b8c:	9a04      	ldr	r2, [sp, #16]
 8020b8e:	b9d8      	cbnz	r0, 8020bc8 <_vfiprintf_r+0x110>
 8020b90:	06d1      	lsls	r1, r2, #27
 8020b92:	bf44      	itt	mi
 8020b94:	2320      	movmi	r3, #32
 8020b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020b9a:	0713      	lsls	r3, r2, #28
 8020b9c:	bf44      	itt	mi
 8020b9e:	232b      	movmi	r3, #43	@ 0x2b
 8020ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8020ba8:	2b2a      	cmp	r3, #42	@ 0x2a
 8020baa:	d015      	beq.n	8020bd8 <_vfiprintf_r+0x120>
 8020bac:	9a07      	ldr	r2, [sp, #28]
 8020bae:	4654      	mov	r4, sl
 8020bb0:	2000      	movs	r0, #0
 8020bb2:	f04f 0c0a 	mov.w	ip, #10
 8020bb6:	4621      	mov	r1, r4
 8020bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020bbc:	3b30      	subs	r3, #48	@ 0x30
 8020bbe:	2b09      	cmp	r3, #9
 8020bc0:	d94b      	bls.n	8020c5a <_vfiprintf_r+0x1a2>
 8020bc2:	b1b0      	cbz	r0, 8020bf2 <_vfiprintf_r+0x13a>
 8020bc4:	9207      	str	r2, [sp, #28]
 8020bc6:	e014      	b.n	8020bf2 <_vfiprintf_r+0x13a>
 8020bc8:	eba0 0308 	sub.w	r3, r0, r8
 8020bcc:	fa09 f303 	lsl.w	r3, r9, r3
 8020bd0:	4313      	orrs	r3, r2
 8020bd2:	9304      	str	r3, [sp, #16]
 8020bd4:	46a2      	mov	sl, r4
 8020bd6:	e7d2      	b.n	8020b7e <_vfiprintf_r+0xc6>
 8020bd8:	9b03      	ldr	r3, [sp, #12]
 8020bda:	1d19      	adds	r1, r3, #4
 8020bdc:	681b      	ldr	r3, [r3, #0]
 8020bde:	9103      	str	r1, [sp, #12]
 8020be0:	2b00      	cmp	r3, #0
 8020be2:	bfbb      	ittet	lt
 8020be4:	425b      	neglt	r3, r3
 8020be6:	f042 0202 	orrlt.w	r2, r2, #2
 8020bea:	9307      	strge	r3, [sp, #28]
 8020bec:	9307      	strlt	r3, [sp, #28]
 8020bee:	bfb8      	it	lt
 8020bf0:	9204      	strlt	r2, [sp, #16]
 8020bf2:	7823      	ldrb	r3, [r4, #0]
 8020bf4:	2b2e      	cmp	r3, #46	@ 0x2e
 8020bf6:	d10a      	bne.n	8020c0e <_vfiprintf_r+0x156>
 8020bf8:	7863      	ldrb	r3, [r4, #1]
 8020bfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8020bfc:	d132      	bne.n	8020c64 <_vfiprintf_r+0x1ac>
 8020bfe:	9b03      	ldr	r3, [sp, #12]
 8020c00:	1d1a      	adds	r2, r3, #4
 8020c02:	681b      	ldr	r3, [r3, #0]
 8020c04:	9203      	str	r2, [sp, #12]
 8020c06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020c0a:	3402      	adds	r4, #2
 8020c0c:	9305      	str	r3, [sp, #20]
 8020c0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8020ce4 <_vfiprintf_r+0x22c>
 8020c12:	7821      	ldrb	r1, [r4, #0]
 8020c14:	2203      	movs	r2, #3
 8020c16:	4650      	mov	r0, sl
 8020c18:	f7df fb02 	bl	8000220 <memchr>
 8020c1c:	b138      	cbz	r0, 8020c2e <_vfiprintf_r+0x176>
 8020c1e:	9b04      	ldr	r3, [sp, #16]
 8020c20:	eba0 000a 	sub.w	r0, r0, sl
 8020c24:	2240      	movs	r2, #64	@ 0x40
 8020c26:	4082      	lsls	r2, r0
 8020c28:	4313      	orrs	r3, r2
 8020c2a:	3401      	adds	r4, #1
 8020c2c:	9304      	str	r3, [sp, #16]
 8020c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020c32:	4829      	ldr	r0, [pc, #164]	@ (8020cd8 <_vfiprintf_r+0x220>)
 8020c34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020c38:	2206      	movs	r2, #6
 8020c3a:	f7df faf1 	bl	8000220 <memchr>
 8020c3e:	2800      	cmp	r0, #0
 8020c40:	d03f      	beq.n	8020cc2 <_vfiprintf_r+0x20a>
 8020c42:	4b26      	ldr	r3, [pc, #152]	@ (8020cdc <_vfiprintf_r+0x224>)
 8020c44:	bb1b      	cbnz	r3, 8020c8e <_vfiprintf_r+0x1d6>
 8020c46:	9b03      	ldr	r3, [sp, #12]
 8020c48:	3307      	adds	r3, #7
 8020c4a:	f023 0307 	bic.w	r3, r3, #7
 8020c4e:	3308      	adds	r3, #8
 8020c50:	9303      	str	r3, [sp, #12]
 8020c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020c54:	443b      	add	r3, r7
 8020c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8020c58:	e76a      	b.n	8020b30 <_vfiprintf_r+0x78>
 8020c5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8020c5e:	460c      	mov	r4, r1
 8020c60:	2001      	movs	r0, #1
 8020c62:	e7a8      	b.n	8020bb6 <_vfiprintf_r+0xfe>
 8020c64:	2300      	movs	r3, #0
 8020c66:	3401      	adds	r4, #1
 8020c68:	9305      	str	r3, [sp, #20]
 8020c6a:	4619      	mov	r1, r3
 8020c6c:	f04f 0c0a 	mov.w	ip, #10
 8020c70:	4620      	mov	r0, r4
 8020c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020c76:	3a30      	subs	r2, #48	@ 0x30
 8020c78:	2a09      	cmp	r2, #9
 8020c7a:	d903      	bls.n	8020c84 <_vfiprintf_r+0x1cc>
 8020c7c:	2b00      	cmp	r3, #0
 8020c7e:	d0c6      	beq.n	8020c0e <_vfiprintf_r+0x156>
 8020c80:	9105      	str	r1, [sp, #20]
 8020c82:	e7c4      	b.n	8020c0e <_vfiprintf_r+0x156>
 8020c84:	fb0c 2101 	mla	r1, ip, r1, r2
 8020c88:	4604      	mov	r4, r0
 8020c8a:	2301      	movs	r3, #1
 8020c8c:	e7f0      	b.n	8020c70 <_vfiprintf_r+0x1b8>
 8020c8e:	ab03      	add	r3, sp, #12
 8020c90:	9300      	str	r3, [sp, #0]
 8020c92:	462a      	mov	r2, r5
 8020c94:	4b12      	ldr	r3, [pc, #72]	@ (8020ce0 <_vfiprintf_r+0x228>)
 8020c96:	a904      	add	r1, sp, #16
 8020c98:	4630      	mov	r0, r6
 8020c9a:	f7fc f9b9 	bl	801d010 <_printf_float>
 8020c9e:	4607      	mov	r7, r0
 8020ca0:	1c78      	adds	r0, r7, #1
 8020ca2:	d1d6      	bne.n	8020c52 <_vfiprintf_r+0x19a>
 8020ca4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020ca6:	07d9      	lsls	r1, r3, #31
 8020ca8:	d405      	bmi.n	8020cb6 <_vfiprintf_r+0x1fe>
 8020caa:	89ab      	ldrh	r3, [r5, #12]
 8020cac:	059a      	lsls	r2, r3, #22
 8020cae:	d402      	bmi.n	8020cb6 <_vfiprintf_r+0x1fe>
 8020cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020cb2:	f7fd fae5 	bl	801e280 <__retarget_lock_release_recursive>
 8020cb6:	89ab      	ldrh	r3, [r5, #12]
 8020cb8:	065b      	lsls	r3, r3, #25
 8020cba:	f53f af1f 	bmi.w	8020afc <_vfiprintf_r+0x44>
 8020cbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020cc0:	e71e      	b.n	8020b00 <_vfiprintf_r+0x48>
 8020cc2:	ab03      	add	r3, sp, #12
 8020cc4:	9300      	str	r3, [sp, #0]
 8020cc6:	462a      	mov	r2, r5
 8020cc8:	4b05      	ldr	r3, [pc, #20]	@ (8020ce0 <_vfiprintf_r+0x228>)
 8020cca:	a904      	add	r1, sp, #16
 8020ccc:	4630      	mov	r0, r6
 8020cce:	f7fc fc37 	bl	801d540 <_printf_i>
 8020cd2:	e7e4      	b.n	8020c9e <_vfiprintf_r+0x1e6>
 8020cd4:	08022af1 	.word	0x08022af1
 8020cd8:	08022afb 	.word	0x08022afb
 8020cdc:	0801d011 	.word	0x0801d011
 8020ce0:	08020a93 	.word	0x08020a93
 8020ce4:	08022af7 	.word	0x08022af7

08020ce8 <__sflush_r>:
 8020ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020cf0:	0716      	lsls	r6, r2, #28
 8020cf2:	4605      	mov	r5, r0
 8020cf4:	460c      	mov	r4, r1
 8020cf6:	d454      	bmi.n	8020da2 <__sflush_r+0xba>
 8020cf8:	684b      	ldr	r3, [r1, #4]
 8020cfa:	2b00      	cmp	r3, #0
 8020cfc:	dc02      	bgt.n	8020d04 <__sflush_r+0x1c>
 8020cfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8020d00:	2b00      	cmp	r3, #0
 8020d02:	dd48      	ble.n	8020d96 <__sflush_r+0xae>
 8020d04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020d06:	2e00      	cmp	r6, #0
 8020d08:	d045      	beq.n	8020d96 <__sflush_r+0xae>
 8020d0a:	2300      	movs	r3, #0
 8020d0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8020d10:	682f      	ldr	r7, [r5, #0]
 8020d12:	6a21      	ldr	r1, [r4, #32]
 8020d14:	602b      	str	r3, [r5, #0]
 8020d16:	d030      	beq.n	8020d7a <__sflush_r+0x92>
 8020d18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020d1a:	89a3      	ldrh	r3, [r4, #12]
 8020d1c:	0759      	lsls	r1, r3, #29
 8020d1e:	d505      	bpl.n	8020d2c <__sflush_r+0x44>
 8020d20:	6863      	ldr	r3, [r4, #4]
 8020d22:	1ad2      	subs	r2, r2, r3
 8020d24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020d26:	b10b      	cbz	r3, 8020d2c <__sflush_r+0x44>
 8020d28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020d2a:	1ad2      	subs	r2, r2, r3
 8020d2c:	2300      	movs	r3, #0
 8020d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020d30:	6a21      	ldr	r1, [r4, #32]
 8020d32:	4628      	mov	r0, r5
 8020d34:	47b0      	blx	r6
 8020d36:	1c43      	adds	r3, r0, #1
 8020d38:	89a3      	ldrh	r3, [r4, #12]
 8020d3a:	d106      	bne.n	8020d4a <__sflush_r+0x62>
 8020d3c:	6829      	ldr	r1, [r5, #0]
 8020d3e:	291d      	cmp	r1, #29
 8020d40:	d82b      	bhi.n	8020d9a <__sflush_r+0xb2>
 8020d42:	4a2a      	ldr	r2, [pc, #168]	@ (8020dec <__sflush_r+0x104>)
 8020d44:	410a      	asrs	r2, r1
 8020d46:	07d6      	lsls	r6, r2, #31
 8020d48:	d427      	bmi.n	8020d9a <__sflush_r+0xb2>
 8020d4a:	2200      	movs	r2, #0
 8020d4c:	6062      	str	r2, [r4, #4]
 8020d4e:	04d9      	lsls	r1, r3, #19
 8020d50:	6922      	ldr	r2, [r4, #16]
 8020d52:	6022      	str	r2, [r4, #0]
 8020d54:	d504      	bpl.n	8020d60 <__sflush_r+0x78>
 8020d56:	1c42      	adds	r2, r0, #1
 8020d58:	d101      	bne.n	8020d5e <__sflush_r+0x76>
 8020d5a:	682b      	ldr	r3, [r5, #0]
 8020d5c:	b903      	cbnz	r3, 8020d60 <__sflush_r+0x78>
 8020d5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8020d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020d62:	602f      	str	r7, [r5, #0]
 8020d64:	b1b9      	cbz	r1, 8020d96 <__sflush_r+0xae>
 8020d66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020d6a:	4299      	cmp	r1, r3
 8020d6c:	d002      	beq.n	8020d74 <__sflush_r+0x8c>
 8020d6e:	4628      	mov	r0, r5
 8020d70:	f7fe f8ea 	bl	801ef48 <_free_r>
 8020d74:	2300      	movs	r3, #0
 8020d76:	6363      	str	r3, [r4, #52]	@ 0x34
 8020d78:	e00d      	b.n	8020d96 <__sflush_r+0xae>
 8020d7a:	2301      	movs	r3, #1
 8020d7c:	4628      	mov	r0, r5
 8020d7e:	47b0      	blx	r6
 8020d80:	4602      	mov	r2, r0
 8020d82:	1c50      	adds	r0, r2, #1
 8020d84:	d1c9      	bne.n	8020d1a <__sflush_r+0x32>
 8020d86:	682b      	ldr	r3, [r5, #0]
 8020d88:	2b00      	cmp	r3, #0
 8020d8a:	d0c6      	beq.n	8020d1a <__sflush_r+0x32>
 8020d8c:	2b1d      	cmp	r3, #29
 8020d8e:	d001      	beq.n	8020d94 <__sflush_r+0xac>
 8020d90:	2b16      	cmp	r3, #22
 8020d92:	d11e      	bne.n	8020dd2 <__sflush_r+0xea>
 8020d94:	602f      	str	r7, [r5, #0]
 8020d96:	2000      	movs	r0, #0
 8020d98:	e022      	b.n	8020de0 <__sflush_r+0xf8>
 8020d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020d9e:	b21b      	sxth	r3, r3
 8020da0:	e01b      	b.n	8020dda <__sflush_r+0xf2>
 8020da2:	690f      	ldr	r7, [r1, #16]
 8020da4:	2f00      	cmp	r7, #0
 8020da6:	d0f6      	beq.n	8020d96 <__sflush_r+0xae>
 8020da8:	0793      	lsls	r3, r2, #30
 8020daa:	680e      	ldr	r6, [r1, #0]
 8020dac:	bf08      	it	eq
 8020dae:	694b      	ldreq	r3, [r1, #20]
 8020db0:	600f      	str	r7, [r1, #0]
 8020db2:	bf18      	it	ne
 8020db4:	2300      	movne	r3, #0
 8020db6:	eba6 0807 	sub.w	r8, r6, r7
 8020dba:	608b      	str	r3, [r1, #8]
 8020dbc:	f1b8 0f00 	cmp.w	r8, #0
 8020dc0:	dde9      	ble.n	8020d96 <__sflush_r+0xae>
 8020dc2:	6a21      	ldr	r1, [r4, #32]
 8020dc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8020dc6:	4643      	mov	r3, r8
 8020dc8:	463a      	mov	r2, r7
 8020dca:	4628      	mov	r0, r5
 8020dcc:	47b0      	blx	r6
 8020dce:	2800      	cmp	r0, #0
 8020dd0:	dc08      	bgt.n	8020de4 <__sflush_r+0xfc>
 8020dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020dda:	81a3      	strh	r3, [r4, #12]
 8020ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8020de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020de4:	4407      	add	r7, r0
 8020de6:	eba8 0800 	sub.w	r8, r8, r0
 8020dea:	e7e7      	b.n	8020dbc <__sflush_r+0xd4>
 8020dec:	dfbffffe 	.word	0xdfbffffe

08020df0 <_fflush_r>:
 8020df0:	b538      	push	{r3, r4, r5, lr}
 8020df2:	690b      	ldr	r3, [r1, #16]
 8020df4:	4605      	mov	r5, r0
 8020df6:	460c      	mov	r4, r1
 8020df8:	b913      	cbnz	r3, 8020e00 <_fflush_r+0x10>
 8020dfa:	2500      	movs	r5, #0
 8020dfc:	4628      	mov	r0, r5
 8020dfe:	bd38      	pop	{r3, r4, r5, pc}
 8020e00:	b118      	cbz	r0, 8020e0a <_fflush_r+0x1a>
 8020e02:	6a03      	ldr	r3, [r0, #32]
 8020e04:	b90b      	cbnz	r3, 8020e0a <_fflush_r+0x1a>
 8020e06:	f7fc ff5b 	bl	801dcc0 <__sinit>
 8020e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020e0e:	2b00      	cmp	r3, #0
 8020e10:	d0f3      	beq.n	8020dfa <_fflush_r+0xa>
 8020e12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8020e14:	07d0      	lsls	r0, r2, #31
 8020e16:	d404      	bmi.n	8020e22 <_fflush_r+0x32>
 8020e18:	0599      	lsls	r1, r3, #22
 8020e1a:	d402      	bmi.n	8020e22 <_fflush_r+0x32>
 8020e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020e1e:	f7fd fa2e 	bl	801e27e <__retarget_lock_acquire_recursive>
 8020e22:	4628      	mov	r0, r5
 8020e24:	4621      	mov	r1, r4
 8020e26:	f7ff ff5f 	bl	8020ce8 <__sflush_r>
 8020e2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020e2c:	07da      	lsls	r2, r3, #31
 8020e2e:	4605      	mov	r5, r0
 8020e30:	d4e4      	bmi.n	8020dfc <_fflush_r+0xc>
 8020e32:	89a3      	ldrh	r3, [r4, #12]
 8020e34:	059b      	lsls	r3, r3, #22
 8020e36:	d4e1      	bmi.n	8020dfc <_fflush_r+0xc>
 8020e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020e3a:	f7fd fa21 	bl	801e280 <__retarget_lock_release_recursive>
 8020e3e:	e7dd      	b.n	8020dfc <_fflush_r+0xc>

08020e40 <__swhatbuf_r>:
 8020e40:	b570      	push	{r4, r5, r6, lr}
 8020e42:	460c      	mov	r4, r1
 8020e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020e48:	2900      	cmp	r1, #0
 8020e4a:	b096      	sub	sp, #88	@ 0x58
 8020e4c:	4615      	mov	r5, r2
 8020e4e:	461e      	mov	r6, r3
 8020e50:	da0d      	bge.n	8020e6e <__swhatbuf_r+0x2e>
 8020e52:	89a3      	ldrh	r3, [r4, #12]
 8020e54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8020e58:	f04f 0100 	mov.w	r1, #0
 8020e5c:	bf14      	ite	ne
 8020e5e:	2340      	movne	r3, #64	@ 0x40
 8020e60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8020e64:	2000      	movs	r0, #0
 8020e66:	6031      	str	r1, [r6, #0]
 8020e68:	602b      	str	r3, [r5, #0]
 8020e6a:	b016      	add	sp, #88	@ 0x58
 8020e6c:	bd70      	pop	{r4, r5, r6, pc}
 8020e6e:	466a      	mov	r2, sp
 8020e70:	f000 f8a8 	bl	8020fc4 <_fstat_r>
 8020e74:	2800      	cmp	r0, #0
 8020e76:	dbec      	blt.n	8020e52 <__swhatbuf_r+0x12>
 8020e78:	9901      	ldr	r1, [sp, #4]
 8020e7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8020e7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8020e82:	4259      	negs	r1, r3
 8020e84:	4159      	adcs	r1, r3
 8020e86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020e8a:	e7eb      	b.n	8020e64 <__swhatbuf_r+0x24>

08020e8c <__smakebuf_r>:
 8020e8c:	898b      	ldrh	r3, [r1, #12]
 8020e8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020e90:	079d      	lsls	r5, r3, #30
 8020e92:	4606      	mov	r6, r0
 8020e94:	460c      	mov	r4, r1
 8020e96:	d507      	bpl.n	8020ea8 <__smakebuf_r+0x1c>
 8020e98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8020e9c:	6023      	str	r3, [r4, #0]
 8020e9e:	6123      	str	r3, [r4, #16]
 8020ea0:	2301      	movs	r3, #1
 8020ea2:	6163      	str	r3, [r4, #20]
 8020ea4:	b003      	add	sp, #12
 8020ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020ea8:	ab01      	add	r3, sp, #4
 8020eaa:	466a      	mov	r2, sp
 8020eac:	f7ff ffc8 	bl	8020e40 <__swhatbuf_r>
 8020eb0:	9f00      	ldr	r7, [sp, #0]
 8020eb2:	4605      	mov	r5, r0
 8020eb4:	4639      	mov	r1, r7
 8020eb6:	4630      	mov	r0, r6
 8020eb8:	f7fe f8ba 	bl	801f030 <_malloc_r>
 8020ebc:	b948      	cbnz	r0, 8020ed2 <__smakebuf_r+0x46>
 8020ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020ec2:	059a      	lsls	r2, r3, #22
 8020ec4:	d4ee      	bmi.n	8020ea4 <__smakebuf_r+0x18>
 8020ec6:	f023 0303 	bic.w	r3, r3, #3
 8020eca:	f043 0302 	orr.w	r3, r3, #2
 8020ece:	81a3      	strh	r3, [r4, #12]
 8020ed0:	e7e2      	b.n	8020e98 <__smakebuf_r+0xc>
 8020ed2:	89a3      	ldrh	r3, [r4, #12]
 8020ed4:	6020      	str	r0, [r4, #0]
 8020ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020eda:	81a3      	strh	r3, [r4, #12]
 8020edc:	9b01      	ldr	r3, [sp, #4]
 8020ede:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8020ee2:	b15b      	cbz	r3, 8020efc <__smakebuf_r+0x70>
 8020ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020ee8:	4630      	mov	r0, r6
 8020eea:	f000 f87d 	bl	8020fe8 <_isatty_r>
 8020eee:	b128      	cbz	r0, 8020efc <__smakebuf_r+0x70>
 8020ef0:	89a3      	ldrh	r3, [r4, #12]
 8020ef2:	f023 0303 	bic.w	r3, r3, #3
 8020ef6:	f043 0301 	orr.w	r3, r3, #1
 8020efa:	81a3      	strh	r3, [r4, #12]
 8020efc:	89a3      	ldrh	r3, [r4, #12]
 8020efe:	431d      	orrs	r5, r3
 8020f00:	81a5      	strh	r5, [r4, #12]
 8020f02:	e7cf      	b.n	8020ea4 <__smakebuf_r+0x18>

08020f04 <_putc_r>:
 8020f04:	b570      	push	{r4, r5, r6, lr}
 8020f06:	460d      	mov	r5, r1
 8020f08:	4614      	mov	r4, r2
 8020f0a:	4606      	mov	r6, r0
 8020f0c:	b118      	cbz	r0, 8020f16 <_putc_r+0x12>
 8020f0e:	6a03      	ldr	r3, [r0, #32]
 8020f10:	b90b      	cbnz	r3, 8020f16 <_putc_r+0x12>
 8020f12:	f7fc fed5 	bl	801dcc0 <__sinit>
 8020f16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020f18:	07d8      	lsls	r0, r3, #31
 8020f1a:	d405      	bmi.n	8020f28 <_putc_r+0x24>
 8020f1c:	89a3      	ldrh	r3, [r4, #12]
 8020f1e:	0599      	lsls	r1, r3, #22
 8020f20:	d402      	bmi.n	8020f28 <_putc_r+0x24>
 8020f22:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020f24:	f7fd f9ab 	bl	801e27e <__retarget_lock_acquire_recursive>
 8020f28:	68a3      	ldr	r3, [r4, #8]
 8020f2a:	3b01      	subs	r3, #1
 8020f2c:	2b00      	cmp	r3, #0
 8020f2e:	60a3      	str	r3, [r4, #8]
 8020f30:	da05      	bge.n	8020f3e <_putc_r+0x3a>
 8020f32:	69a2      	ldr	r2, [r4, #24]
 8020f34:	4293      	cmp	r3, r2
 8020f36:	db12      	blt.n	8020f5e <_putc_r+0x5a>
 8020f38:	b2eb      	uxtb	r3, r5
 8020f3a:	2b0a      	cmp	r3, #10
 8020f3c:	d00f      	beq.n	8020f5e <_putc_r+0x5a>
 8020f3e:	6823      	ldr	r3, [r4, #0]
 8020f40:	1c5a      	adds	r2, r3, #1
 8020f42:	6022      	str	r2, [r4, #0]
 8020f44:	701d      	strb	r5, [r3, #0]
 8020f46:	b2ed      	uxtb	r5, r5
 8020f48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020f4a:	07da      	lsls	r2, r3, #31
 8020f4c:	d405      	bmi.n	8020f5a <_putc_r+0x56>
 8020f4e:	89a3      	ldrh	r3, [r4, #12]
 8020f50:	059b      	lsls	r3, r3, #22
 8020f52:	d402      	bmi.n	8020f5a <_putc_r+0x56>
 8020f54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020f56:	f7fd f993 	bl	801e280 <__retarget_lock_release_recursive>
 8020f5a:	4628      	mov	r0, r5
 8020f5c:	bd70      	pop	{r4, r5, r6, pc}
 8020f5e:	4629      	mov	r1, r5
 8020f60:	4622      	mov	r2, r4
 8020f62:	4630      	mov	r0, r6
 8020f64:	f7fd f879 	bl	801e05a <__swbuf_r>
 8020f68:	4605      	mov	r5, r0
 8020f6a:	e7ed      	b.n	8020f48 <_putc_r+0x44>

08020f6c <memmove>:
 8020f6c:	4288      	cmp	r0, r1
 8020f6e:	b510      	push	{r4, lr}
 8020f70:	eb01 0402 	add.w	r4, r1, r2
 8020f74:	d902      	bls.n	8020f7c <memmove+0x10>
 8020f76:	4284      	cmp	r4, r0
 8020f78:	4623      	mov	r3, r4
 8020f7a:	d807      	bhi.n	8020f8c <memmove+0x20>
 8020f7c:	1e43      	subs	r3, r0, #1
 8020f7e:	42a1      	cmp	r1, r4
 8020f80:	d008      	beq.n	8020f94 <memmove+0x28>
 8020f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020f86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020f8a:	e7f8      	b.n	8020f7e <memmove+0x12>
 8020f8c:	4402      	add	r2, r0
 8020f8e:	4601      	mov	r1, r0
 8020f90:	428a      	cmp	r2, r1
 8020f92:	d100      	bne.n	8020f96 <memmove+0x2a>
 8020f94:	bd10      	pop	{r4, pc}
 8020f96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020f9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020f9e:	e7f7      	b.n	8020f90 <memmove+0x24>

08020fa0 <strncmp>:
 8020fa0:	b510      	push	{r4, lr}
 8020fa2:	b16a      	cbz	r2, 8020fc0 <strncmp+0x20>
 8020fa4:	3901      	subs	r1, #1
 8020fa6:	1884      	adds	r4, r0, r2
 8020fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020fac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8020fb0:	429a      	cmp	r2, r3
 8020fb2:	d103      	bne.n	8020fbc <strncmp+0x1c>
 8020fb4:	42a0      	cmp	r0, r4
 8020fb6:	d001      	beq.n	8020fbc <strncmp+0x1c>
 8020fb8:	2a00      	cmp	r2, #0
 8020fba:	d1f5      	bne.n	8020fa8 <strncmp+0x8>
 8020fbc:	1ad0      	subs	r0, r2, r3
 8020fbe:	bd10      	pop	{r4, pc}
 8020fc0:	4610      	mov	r0, r2
 8020fc2:	e7fc      	b.n	8020fbe <strncmp+0x1e>

08020fc4 <_fstat_r>:
 8020fc4:	b538      	push	{r3, r4, r5, lr}
 8020fc6:	4d07      	ldr	r5, [pc, #28]	@ (8020fe4 <_fstat_r+0x20>)
 8020fc8:	2300      	movs	r3, #0
 8020fca:	4604      	mov	r4, r0
 8020fcc:	4608      	mov	r0, r1
 8020fce:	4611      	mov	r1, r2
 8020fd0:	602b      	str	r3, [r5, #0]
 8020fd2:	f7e3 fe5d 	bl	8004c90 <_fstat>
 8020fd6:	1c43      	adds	r3, r0, #1
 8020fd8:	d102      	bne.n	8020fe0 <_fstat_r+0x1c>
 8020fda:	682b      	ldr	r3, [r5, #0]
 8020fdc:	b103      	cbz	r3, 8020fe0 <_fstat_r+0x1c>
 8020fde:	6023      	str	r3, [r4, #0]
 8020fe0:	bd38      	pop	{r3, r4, r5, pc}
 8020fe2:	bf00      	nop
 8020fe4:	2001bee0 	.word	0x2001bee0

08020fe8 <_isatty_r>:
 8020fe8:	b538      	push	{r3, r4, r5, lr}
 8020fea:	4d06      	ldr	r5, [pc, #24]	@ (8021004 <_isatty_r+0x1c>)
 8020fec:	2300      	movs	r3, #0
 8020fee:	4604      	mov	r4, r0
 8020ff0:	4608      	mov	r0, r1
 8020ff2:	602b      	str	r3, [r5, #0]
 8020ff4:	f7e3 fe5c 	bl	8004cb0 <_isatty>
 8020ff8:	1c43      	adds	r3, r0, #1
 8020ffa:	d102      	bne.n	8021002 <_isatty_r+0x1a>
 8020ffc:	682b      	ldr	r3, [r5, #0]
 8020ffe:	b103      	cbz	r3, 8021002 <_isatty_r+0x1a>
 8021000:	6023      	str	r3, [r4, #0]
 8021002:	bd38      	pop	{r3, r4, r5, pc}
 8021004:	2001bee0 	.word	0x2001bee0

08021008 <_sbrk_r>:
 8021008:	b538      	push	{r3, r4, r5, lr}
 802100a:	4d06      	ldr	r5, [pc, #24]	@ (8021024 <_sbrk_r+0x1c>)
 802100c:	2300      	movs	r3, #0
 802100e:	4604      	mov	r4, r0
 8021010:	4608      	mov	r0, r1
 8021012:	602b      	str	r3, [r5, #0]
 8021014:	f7e3 fe64 	bl	8004ce0 <_sbrk>
 8021018:	1c43      	adds	r3, r0, #1
 802101a:	d102      	bne.n	8021022 <_sbrk_r+0x1a>
 802101c:	682b      	ldr	r3, [r5, #0]
 802101e:	b103      	cbz	r3, 8021022 <_sbrk_r+0x1a>
 8021020:	6023      	str	r3, [r4, #0]
 8021022:	bd38      	pop	{r3, r4, r5, pc}
 8021024:	2001bee0 	.word	0x2001bee0

08021028 <nan>:
 8021028:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8021030 <nan+0x8>
 802102c:	4770      	bx	lr
 802102e:	bf00      	nop
 8021030:	00000000 	.word	0x00000000
 8021034:	7ff80000 	.word	0x7ff80000

08021038 <__assert_func>:
 8021038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802103a:	4614      	mov	r4, r2
 802103c:	461a      	mov	r2, r3
 802103e:	4b09      	ldr	r3, [pc, #36]	@ (8021064 <__assert_func+0x2c>)
 8021040:	681b      	ldr	r3, [r3, #0]
 8021042:	4605      	mov	r5, r0
 8021044:	68d8      	ldr	r0, [r3, #12]
 8021046:	b954      	cbnz	r4, 802105e <__assert_func+0x26>
 8021048:	4b07      	ldr	r3, [pc, #28]	@ (8021068 <__assert_func+0x30>)
 802104a:	461c      	mov	r4, r3
 802104c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021050:	9100      	str	r1, [sp, #0]
 8021052:	462b      	mov	r3, r5
 8021054:	4905      	ldr	r1, [pc, #20]	@ (802106c <__assert_func+0x34>)
 8021056:	f000 fba7 	bl	80217a8 <fiprintf>
 802105a:	f000 fbb7 	bl	80217cc <abort>
 802105e:	4b04      	ldr	r3, [pc, #16]	@ (8021070 <__assert_func+0x38>)
 8021060:	e7f4      	b.n	802104c <__assert_func+0x14>
 8021062:	bf00      	nop
 8021064:	2000003c 	.word	0x2000003c
 8021068:	08022b45 	.word	0x08022b45
 802106c:	08022b17 	.word	0x08022b17
 8021070:	08022b0a 	.word	0x08022b0a

08021074 <_calloc_r>:
 8021074:	b570      	push	{r4, r5, r6, lr}
 8021076:	fba1 5402 	umull	r5, r4, r1, r2
 802107a:	b93c      	cbnz	r4, 802108c <_calloc_r+0x18>
 802107c:	4629      	mov	r1, r5
 802107e:	f7fd ffd7 	bl	801f030 <_malloc_r>
 8021082:	4606      	mov	r6, r0
 8021084:	b928      	cbnz	r0, 8021092 <_calloc_r+0x1e>
 8021086:	2600      	movs	r6, #0
 8021088:	4630      	mov	r0, r6
 802108a:	bd70      	pop	{r4, r5, r6, pc}
 802108c:	220c      	movs	r2, #12
 802108e:	6002      	str	r2, [r0, #0]
 8021090:	e7f9      	b.n	8021086 <_calloc_r+0x12>
 8021092:	462a      	mov	r2, r5
 8021094:	4621      	mov	r1, r4
 8021096:	f7fd f875 	bl	801e184 <memset>
 802109a:	e7f5      	b.n	8021088 <_calloc_r+0x14>

0802109c <rshift>:
 802109c:	6903      	ldr	r3, [r0, #16]
 802109e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80210a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80210a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80210aa:	f100 0414 	add.w	r4, r0, #20
 80210ae:	dd45      	ble.n	802113c <rshift+0xa0>
 80210b0:	f011 011f 	ands.w	r1, r1, #31
 80210b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80210b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80210bc:	d10c      	bne.n	80210d8 <rshift+0x3c>
 80210be:	f100 0710 	add.w	r7, r0, #16
 80210c2:	4629      	mov	r1, r5
 80210c4:	42b1      	cmp	r1, r6
 80210c6:	d334      	bcc.n	8021132 <rshift+0x96>
 80210c8:	1a9b      	subs	r3, r3, r2
 80210ca:	009b      	lsls	r3, r3, #2
 80210cc:	1eea      	subs	r2, r5, #3
 80210ce:	4296      	cmp	r6, r2
 80210d0:	bf38      	it	cc
 80210d2:	2300      	movcc	r3, #0
 80210d4:	4423      	add	r3, r4
 80210d6:	e015      	b.n	8021104 <rshift+0x68>
 80210d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80210dc:	f1c1 0820 	rsb	r8, r1, #32
 80210e0:	40cf      	lsrs	r7, r1
 80210e2:	f105 0e04 	add.w	lr, r5, #4
 80210e6:	46a1      	mov	r9, r4
 80210e8:	4576      	cmp	r6, lr
 80210ea:	46f4      	mov	ip, lr
 80210ec:	d815      	bhi.n	802111a <rshift+0x7e>
 80210ee:	1a9a      	subs	r2, r3, r2
 80210f0:	0092      	lsls	r2, r2, #2
 80210f2:	3a04      	subs	r2, #4
 80210f4:	3501      	adds	r5, #1
 80210f6:	42ae      	cmp	r6, r5
 80210f8:	bf38      	it	cc
 80210fa:	2200      	movcc	r2, #0
 80210fc:	18a3      	adds	r3, r4, r2
 80210fe:	50a7      	str	r7, [r4, r2]
 8021100:	b107      	cbz	r7, 8021104 <rshift+0x68>
 8021102:	3304      	adds	r3, #4
 8021104:	1b1a      	subs	r2, r3, r4
 8021106:	42a3      	cmp	r3, r4
 8021108:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802110c:	bf08      	it	eq
 802110e:	2300      	moveq	r3, #0
 8021110:	6102      	str	r2, [r0, #16]
 8021112:	bf08      	it	eq
 8021114:	6143      	streq	r3, [r0, #20]
 8021116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802111a:	f8dc c000 	ldr.w	ip, [ip]
 802111e:	fa0c fc08 	lsl.w	ip, ip, r8
 8021122:	ea4c 0707 	orr.w	r7, ip, r7
 8021126:	f849 7b04 	str.w	r7, [r9], #4
 802112a:	f85e 7b04 	ldr.w	r7, [lr], #4
 802112e:	40cf      	lsrs	r7, r1
 8021130:	e7da      	b.n	80210e8 <rshift+0x4c>
 8021132:	f851 cb04 	ldr.w	ip, [r1], #4
 8021136:	f847 cf04 	str.w	ip, [r7, #4]!
 802113a:	e7c3      	b.n	80210c4 <rshift+0x28>
 802113c:	4623      	mov	r3, r4
 802113e:	e7e1      	b.n	8021104 <rshift+0x68>

08021140 <__hexdig_fun>:
 8021140:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8021144:	2b09      	cmp	r3, #9
 8021146:	d802      	bhi.n	802114e <__hexdig_fun+0xe>
 8021148:	3820      	subs	r0, #32
 802114a:	b2c0      	uxtb	r0, r0
 802114c:	4770      	bx	lr
 802114e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8021152:	2b05      	cmp	r3, #5
 8021154:	d801      	bhi.n	802115a <__hexdig_fun+0x1a>
 8021156:	3847      	subs	r0, #71	@ 0x47
 8021158:	e7f7      	b.n	802114a <__hexdig_fun+0xa>
 802115a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 802115e:	2b05      	cmp	r3, #5
 8021160:	d801      	bhi.n	8021166 <__hexdig_fun+0x26>
 8021162:	3827      	subs	r0, #39	@ 0x27
 8021164:	e7f1      	b.n	802114a <__hexdig_fun+0xa>
 8021166:	2000      	movs	r0, #0
 8021168:	4770      	bx	lr
	...

0802116c <__gethex>:
 802116c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021170:	b085      	sub	sp, #20
 8021172:	468a      	mov	sl, r1
 8021174:	9302      	str	r3, [sp, #8]
 8021176:	680b      	ldr	r3, [r1, #0]
 8021178:	9001      	str	r0, [sp, #4]
 802117a:	4690      	mov	r8, r2
 802117c:	1c9c      	adds	r4, r3, #2
 802117e:	46a1      	mov	r9, r4
 8021180:	f814 0b01 	ldrb.w	r0, [r4], #1
 8021184:	2830      	cmp	r0, #48	@ 0x30
 8021186:	d0fa      	beq.n	802117e <__gethex+0x12>
 8021188:	eba9 0303 	sub.w	r3, r9, r3
 802118c:	f1a3 0b02 	sub.w	fp, r3, #2
 8021190:	f7ff ffd6 	bl	8021140 <__hexdig_fun>
 8021194:	4605      	mov	r5, r0
 8021196:	2800      	cmp	r0, #0
 8021198:	d168      	bne.n	802126c <__gethex+0x100>
 802119a:	49a0      	ldr	r1, [pc, #640]	@ (802141c <__gethex+0x2b0>)
 802119c:	2201      	movs	r2, #1
 802119e:	4648      	mov	r0, r9
 80211a0:	f7ff fefe 	bl	8020fa0 <strncmp>
 80211a4:	4607      	mov	r7, r0
 80211a6:	2800      	cmp	r0, #0
 80211a8:	d167      	bne.n	802127a <__gethex+0x10e>
 80211aa:	f899 0001 	ldrb.w	r0, [r9, #1]
 80211ae:	4626      	mov	r6, r4
 80211b0:	f7ff ffc6 	bl	8021140 <__hexdig_fun>
 80211b4:	2800      	cmp	r0, #0
 80211b6:	d062      	beq.n	802127e <__gethex+0x112>
 80211b8:	4623      	mov	r3, r4
 80211ba:	7818      	ldrb	r0, [r3, #0]
 80211bc:	2830      	cmp	r0, #48	@ 0x30
 80211be:	4699      	mov	r9, r3
 80211c0:	f103 0301 	add.w	r3, r3, #1
 80211c4:	d0f9      	beq.n	80211ba <__gethex+0x4e>
 80211c6:	f7ff ffbb 	bl	8021140 <__hexdig_fun>
 80211ca:	fab0 f580 	clz	r5, r0
 80211ce:	096d      	lsrs	r5, r5, #5
 80211d0:	f04f 0b01 	mov.w	fp, #1
 80211d4:	464a      	mov	r2, r9
 80211d6:	4616      	mov	r6, r2
 80211d8:	3201      	adds	r2, #1
 80211da:	7830      	ldrb	r0, [r6, #0]
 80211dc:	f7ff ffb0 	bl	8021140 <__hexdig_fun>
 80211e0:	2800      	cmp	r0, #0
 80211e2:	d1f8      	bne.n	80211d6 <__gethex+0x6a>
 80211e4:	498d      	ldr	r1, [pc, #564]	@ (802141c <__gethex+0x2b0>)
 80211e6:	2201      	movs	r2, #1
 80211e8:	4630      	mov	r0, r6
 80211ea:	f7ff fed9 	bl	8020fa0 <strncmp>
 80211ee:	2800      	cmp	r0, #0
 80211f0:	d13f      	bne.n	8021272 <__gethex+0x106>
 80211f2:	b944      	cbnz	r4, 8021206 <__gethex+0x9a>
 80211f4:	1c74      	adds	r4, r6, #1
 80211f6:	4622      	mov	r2, r4
 80211f8:	4616      	mov	r6, r2
 80211fa:	3201      	adds	r2, #1
 80211fc:	7830      	ldrb	r0, [r6, #0]
 80211fe:	f7ff ff9f 	bl	8021140 <__hexdig_fun>
 8021202:	2800      	cmp	r0, #0
 8021204:	d1f8      	bne.n	80211f8 <__gethex+0x8c>
 8021206:	1ba4      	subs	r4, r4, r6
 8021208:	00a7      	lsls	r7, r4, #2
 802120a:	7833      	ldrb	r3, [r6, #0]
 802120c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8021210:	2b50      	cmp	r3, #80	@ 0x50
 8021212:	d13e      	bne.n	8021292 <__gethex+0x126>
 8021214:	7873      	ldrb	r3, [r6, #1]
 8021216:	2b2b      	cmp	r3, #43	@ 0x2b
 8021218:	d033      	beq.n	8021282 <__gethex+0x116>
 802121a:	2b2d      	cmp	r3, #45	@ 0x2d
 802121c:	d034      	beq.n	8021288 <__gethex+0x11c>
 802121e:	1c71      	adds	r1, r6, #1
 8021220:	2400      	movs	r4, #0
 8021222:	7808      	ldrb	r0, [r1, #0]
 8021224:	f7ff ff8c 	bl	8021140 <__hexdig_fun>
 8021228:	1e43      	subs	r3, r0, #1
 802122a:	b2db      	uxtb	r3, r3
 802122c:	2b18      	cmp	r3, #24
 802122e:	d830      	bhi.n	8021292 <__gethex+0x126>
 8021230:	f1a0 0210 	sub.w	r2, r0, #16
 8021234:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021238:	f7ff ff82 	bl	8021140 <__hexdig_fun>
 802123c:	f100 3cff 	add.w	ip, r0, #4294967295
 8021240:	fa5f fc8c 	uxtb.w	ip, ip
 8021244:	f1bc 0f18 	cmp.w	ip, #24
 8021248:	f04f 030a 	mov.w	r3, #10
 802124c:	d91e      	bls.n	802128c <__gethex+0x120>
 802124e:	b104      	cbz	r4, 8021252 <__gethex+0xe6>
 8021250:	4252      	negs	r2, r2
 8021252:	4417      	add	r7, r2
 8021254:	f8ca 1000 	str.w	r1, [sl]
 8021258:	b1ed      	cbz	r5, 8021296 <__gethex+0x12a>
 802125a:	f1bb 0f00 	cmp.w	fp, #0
 802125e:	bf0c      	ite	eq
 8021260:	2506      	moveq	r5, #6
 8021262:	2500      	movne	r5, #0
 8021264:	4628      	mov	r0, r5
 8021266:	b005      	add	sp, #20
 8021268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802126c:	2500      	movs	r5, #0
 802126e:	462c      	mov	r4, r5
 8021270:	e7b0      	b.n	80211d4 <__gethex+0x68>
 8021272:	2c00      	cmp	r4, #0
 8021274:	d1c7      	bne.n	8021206 <__gethex+0x9a>
 8021276:	4627      	mov	r7, r4
 8021278:	e7c7      	b.n	802120a <__gethex+0x9e>
 802127a:	464e      	mov	r6, r9
 802127c:	462f      	mov	r7, r5
 802127e:	2501      	movs	r5, #1
 8021280:	e7c3      	b.n	802120a <__gethex+0x9e>
 8021282:	2400      	movs	r4, #0
 8021284:	1cb1      	adds	r1, r6, #2
 8021286:	e7cc      	b.n	8021222 <__gethex+0xb6>
 8021288:	2401      	movs	r4, #1
 802128a:	e7fb      	b.n	8021284 <__gethex+0x118>
 802128c:	fb03 0002 	mla	r0, r3, r2, r0
 8021290:	e7ce      	b.n	8021230 <__gethex+0xc4>
 8021292:	4631      	mov	r1, r6
 8021294:	e7de      	b.n	8021254 <__gethex+0xe8>
 8021296:	eba6 0309 	sub.w	r3, r6, r9
 802129a:	3b01      	subs	r3, #1
 802129c:	4629      	mov	r1, r5
 802129e:	2b07      	cmp	r3, #7
 80212a0:	dc0a      	bgt.n	80212b8 <__gethex+0x14c>
 80212a2:	9801      	ldr	r0, [sp, #4]
 80212a4:	f7fd ff50 	bl	801f148 <_Balloc>
 80212a8:	4604      	mov	r4, r0
 80212aa:	b940      	cbnz	r0, 80212be <__gethex+0x152>
 80212ac:	4b5c      	ldr	r3, [pc, #368]	@ (8021420 <__gethex+0x2b4>)
 80212ae:	4602      	mov	r2, r0
 80212b0:	21e4      	movs	r1, #228	@ 0xe4
 80212b2:	485c      	ldr	r0, [pc, #368]	@ (8021424 <__gethex+0x2b8>)
 80212b4:	f7ff fec0 	bl	8021038 <__assert_func>
 80212b8:	3101      	adds	r1, #1
 80212ba:	105b      	asrs	r3, r3, #1
 80212bc:	e7ef      	b.n	802129e <__gethex+0x132>
 80212be:	f100 0a14 	add.w	sl, r0, #20
 80212c2:	2300      	movs	r3, #0
 80212c4:	4655      	mov	r5, sl
 80212c6:	469b      	mov	fp, r3
 80212c8:	45b1      	cmp	r9, r6
 80212ca:	d337      	bcc.n	802133c <__gethex+0x1d0>
 80212cc:	f845 bb04 	str.w	fp, [r5], #4
 80212d0:	eba5 050a 	sub.w	r5, r5, sl
 80212d4:	10ad      	asrs	r5, r5, #2
 80212d6:	6125      	str	r5, [r4, #16]
 80212d8:	4658      	mov	r0, fp
 80212da:	f7fe f827 	bl	801f32c <__hi0bits>
 80212de:	016d      	lsls	r5, r5, #5
 80212e0:	f8d8 6000 	ldr.w	r6, [r8]
 80212e4:	1a2d      	subs	r5, r5, r0
 80212e6:	42b5      	cmp	r5, r6
 80212e8:	dd54      	ble.n	8021394 <__gethex+0x228>
 80212ea:	1bad      	subs	r5, r5, r6
 80212ec:	4629      	mov	r1, r5
 80212ee:	4620      	mov	r0, r4
 80212f0:	f7fe fbbb 	bl	801fa6a <__any_on>
 80212f4:	4681      	mov	r9, r0
 80212f6:	b178      	cbz	r0, 8021318 <__gethex+0x1ac>
 80212f8:	1e6b      	subs	r3, r5, #1
 80212fa:	1159      	asrs	r1, r3, #5
 80212fc:	f003 021f 	and.w	r2, r3, #31
 8021300:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8021304:	f04f 0901 	mov.w	r9, #1
 8021308:	fa09 f202 	lsl.w	r2, r9, r2
 802130c:	420a      	tst	r2, r1
 802130e:	d003      	beq.n	8021318 <__gethex+0x1ac>
 8021310:	454b      	cmp	r3, r9
 8021312:	dc36      	bgt.n	8021382 <__gethex+0x216>
 8021314:	f04f 0902 	mov.w	r9, #2
 8021318:	4629      	mov	r1, r5
 802131a:	4620      	mov	r0, r4
 802131c:	f7ff febe 	bl	802109c <rshift>
 8021320:	442f      	add	r7, r5
 8021322:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021326:	42bb      	cmp	r3, r7
 8021328:	da42      	bge.n	80213b0 <__gethex+0x244>
 802132a:	9801      	ldr	r0, [sp, #4]
 802132c:	4621      	mov	r1, r4
 802132e:	f7fd ff4b 	bl	801f1c8 <_Bfree>
 8021332:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021334:	2300      	movs	r3, #0
 8021336:	6013      	str	r3, [r2, #0]
 8021338:	25a3      	movs	r5, #163	@ 0xa3
 802133a:	e793      	b.n	8021264 <__gethex+0xf8>
 802133c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8021340:	2a2e      	cmp	r2, #46	@ 0x2e
 8021342:	d012      	beq.n	802136a <__gethex+0x1fe>
 8021344:	2b20      	cmp	r3, #32
 8021346:	d104      	bne.n	8021352 <__gethex+0x1e6>
 8021348:	f845 bb04 	str.w	fp, [r5], #4
 802134c:	f04f 0b00 	mov.w	fp, #0
 8021350:	465b      	mov	r3, fp
 8021352:	7830      	ldrb	r0, [r6, #0]
 8021354:	9303      	str	r3, [sp, #12]
 8021356:	f7ff fef3 	bl	8021140 <__hexdig_fun>
 802135a:	9b03      	ldr	r3, [sp, #12]
 802135c:	f000 000f 	and.w	r0, r0, #15
 8021360:	4098      	lsls	r0, r3
 8021362:	ea4b 0b00 	orr.w	fp, fp, r0
 8021366:	3304      	adds	r3, #4
 8021368:	e7ae      	b.n	80212c8 <__gethex+0x15c>
 802136a:	45b1      	cmp	r9, r6
 802136c:	d8ea      	bhi.n	8021344 <__gethex+0x1d8>
 802136e:	492b      	ldr	r1, [pc, #172]	@ (802141c <__gethex+0x2b0>)
 8021370:	9303      	str	r3, [sp, #12]
 8021372:	2201      	movs	r2, #1
 8021374:	4630      	mov	r0, r6
 8021376:	f7ff fe13 	bl	8020fa0 <strncmp>
 802137a:	9b03      	ldr	r3, [sp, #12]
 802137c:	2800      	cmp	r0, #0
 802137e:	d1e1      	bne.n	8021344 <__gethex+0x1d8>
 8021380:	e7a2      	b.n	80212c8 <__gethex+0x15c>
 8021382:	1ea9      	subs	r1, r5, #2
 8021384:	4620      	mov	r0, r4
 8021386:	f7fe fb70 	bl	801fa6a <__any_on>
 802138a:	2800      	cmp	r0, #0
 802138c:	d0c2      	beq.n	8021314 <__gethex+0x1a8>
 802138e:	f04f 0903 	mov.w	r9, #3
 8021392:	e7c1      	b.n	8021318 <__gethex+0x1ac>
 8021394:	da09      	bge.n	80213aa <__gethex+0x23e>
 8021396:	1b75      	subs	r5, r6, r5
 8021398:	4621      	mov	r1, r4
 802139a:	9801      	ldr	r0, [sp, #4]
 802139c:	462a      	mov	r2, r5
 802139e:	f7fe f92b 	bl	801f5f8 <__lshift>
 80213a2:	1b7f      	subs	r7, r7, r5
 80213a4:	4604      	mov	r4, r0
 80213a6:	f100 0a14 	add.w	sl, r0, #20
 80213aa:	f04f 0900 	mov.w	r9, #0
 80213ae:	e7b8      	b.n	8021322 <__gethex+0x1b6>
 80213b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80213b4:	42bd      	cmp	r5, r7
 80213b6:	dd6f      	ble.n	8021498 <__gethex+0x32c>
 80213b8:	1bed      	subs	r5, r5, r7
 80213ba:	42ae      	cmp	r6, r5
 80213bc:	dc34      	bgt.n	8021428 <__gethex+0x2bc>
 80213be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80213c2:	2b02      	cmp	r3, #2
 80213c4:	d022      	beq.n	802140c <__gethex+0x2a0>
 80213c6:	2b03      	cmp	r3, #3
 80213c8:	d024      	beq.n	8021414 <__gethex+0x2a8>
 80213ca:	2b01      	cmp	r3, #1
 80213cc:	d115      	bne.n	80213fa <__gethex+0x28e>
 80213ce:	42ae      	cmp	r6, r5
 80213d0:	d113      	bne.n	80213fa <__gethex+0x28e>
 80213d2:	2e01      	cmp	r6, #1
 80213d4:	d10b      	bne.n	80213ee <__gethex+0x282>
 80213d6:	9a02      	ldr	r2, [sp, #8]
 80213d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80213dc:	6013      	str	r3, [r2, #0]
 80213de:	2301      	movs	r3, #1
 80213e0:	6123      	str	r3, [r4, #16]
 80213e2:	f8ca 3000 	str.w	r3, [sl]
 80213e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80213e8:	2562      	movs	r5, #98	@ 0x62
 80213ea:	601c      	str	r4, [r3, #0]
 80213ec:	e73a      	b.n	8021264 <__gethex+0xf8>
 80213ee:	1e71      	subs	r1, r6, #1
 80213f0:	4620      	mov	r0, r4
 80213f2:	f7fe fb3a 	bl	801fa6a <__any_on>
 80213f6:	2800      	cmp	r0, #0
 80213f8:	d1ed      	bne.n	80213d6 <__gethex+0x26a>
 80213fa:	9801      	ldr	r0, [sp, #4]
 80213fc:	4621      	mov	r1, r4
 80213fe:	f7fd fee3 	bl	801f1c8 <_Bfree>
 8021402:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021404:	2300      	movs	r3, #0
 8021406:	6013      	str	r3, [r2, #0]
 8021408:	2550      	movs	r5, #80	@ 0x50
 802140a:	e72b      	b.n	8021264 <__gethex+0xf8>
 802140c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802140e:	2b00      	cmp	r3, #0
 8021410:	d1f3      	bne.n	80213fa <__gethex+0x28e>
 8021412:	e7e0      	b.n	80213d6 <__gethex+0x26a>
 8021414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021416:	2b00      	cmp	r3, #0
 8021418:	d1dd      	bne.n	80213d6 <__gethex+0x26a>
 802141a:	e7ee      	b.n	80213fa <__gethex+0x28e>
 802141c:	08022998 	.word	0x08022998
 8021420:	0802282d 	.word	0x0802282d
 8021424:	08022b46 	.word	0x08022b46
 8021428:	1e6f      	subs	r7, r5, #1
 802142a:	f1b9 0f00 	cmp.w	r9, #0
 802142e:	d130      	bne.n	8021492 <__gethex+0x326>
 8021430:	b127      	cbz	r7, 802143c <__gethex+0x2d0>
 8021432:	4639      	mov	r1, r7
 8021434:	4620      	mov	r0, r4
 8021436:	f7fe fb18 	bl	801fa6a <__any_on>
 802143a:	4681      	mov	r9, r0
 802143c:	117a      	asrs	r2, r7, #5
 802143e:	2301      	movs	r3, #1
 8021440:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8021444:	f007 071f 	and.w	r7, r7, #31
 8021448:	40bb      	lsls	r3, r7
 802144a:	4213      	tst	r3, r2
 802144c:	4629      	mov	r1, r5
 802144e:	4620      	mov	r0, r4
 8021450:	bf18      	it	ne
 8021452:	f049 0902 	orrne.w	r9, r9, #2
 8021456:	f7ff fe21 	bl	802109c <rshift>
 802145a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 802145e:	1b76      	subs	r6, r6, r5
 8021460:	2502      	movs	r5, #2
 8021462:	f1b9 0f00 	cmp.w	r9, #0
 8021466:	d047      	beq.n	80214f8 <__gethex+0x38c>
 8021468:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802146c:	2b02      	cmp	r3, #2
 802146e:	d015      	beq.n	802149c <__gethex+0x330>
 8021470:	2b03      	cmp	r3, #3
 8021472:	d017      	beq.n	80214a4 <__gethex+0x338>
 8021474:	2b01      	cmp	r3, #1
 8021476:	d109      	bne.n	802148c <__gethex+0x320>
 8021478:	f019 0f02 	tst.w	r9, #2
 802147c:	d006      	beq.n	802148c <__gethex+0x320>
 802147e:	f8da 3000 	ldr.w	r3, [sl]
 8021482:	ea49 0903 	orr.w	r9, r9, r3
 8021486:	f019 0f01 	tst.w	r9, #1
 802148a:	d10e      	bne.n	80214aa <__gethex+0x33e>
 802148c:	f045 0510 	orr.w	r5, r5, #16
 8021490:	e032      	b.n	80214f8 <__gethex+0x38c>
 8021492:	f04f 0901 	mov.w	r9, #1
 8021496:	e7d1      	b.n	802143c <__gethex+0x2d0>
 8021498:	2501      	movs	r5, #1
 802149a:	e7e2      	b.n	8021462 <__gethex+0x2f6>
 802149c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802149e:	f1c3 0301 	rsb	r3, r3, #1
 80214a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80214a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80214a6:	2b00      	cmp	r3, #0
 80214a8:	d0f0      	beq.n	802148c <__gethex+0x320>
 80214aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80214ae:	f104 0314 	add.w	r3, r4, #20
 80214b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80214b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80214ba:	f04f 0c00 	mov.w	ip, #0
 80214be:	4618      	mov	r0, r3
 80214c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80214c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80214c8:	d01b      	beq.n	8021502 <__gethex+0x396>
 80214ca:	3201      	adds	r2, #1
 80214cc:	6002      	str	r2, [r0, #0]
 80214ce:	2d02      	cmp	r5, #2
 80214d0:	f104 0314 	add.w	r3, r4, #20
 80214d4:	d13c      	bne.n	8021550 <__gethex+0x3e4>
 80214d6:	f8d8 2000 	ldr.w	r2, [r8]
 80214da:	3a01      	subs	r2, #1
 80214dc:	42b2      	cmp	r2, r6
 80214de:	d109      	bne.n	80214f4 <__gethex+0x388>
 80214e0:	1171      	asrs	r1, r6, #5
 80214e2:	2201      	movs	r2, #1
 80214e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80214e8:	f006 061f 	and.w	r6, r6, #31
 80214ec:	fa02 f606 	lsl.w	r6, r2, r6
 80214f0:	421e      	tst	r6, r3
 80214f2:	d13a      	bne.n	802156a <__gethex+0x3fe>
 80214f4:	f045 0520 	orr.w	r5, r5, #32
 80214f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80214fa:	601c      	str	r4, [r3, #0]
 80214fc:	9b02      	ldr	r3, [sp, #8]
 80214fe:	601f      	str	r7, [r3, #0]
 8021500:	e6b0      	b.n	8021264 <__gethex+0xf8>
 8021502:	4299      	cmp	r1, r3
 8021504:	f843 cc04 	str.w	ip, [r3, #-4]
 8021508:	d8d9      	bhi.n	80214be <__gethex+0x352>
 802150a:	68a3      	ldr	r3, [r4, #8]
 802150c:	459b      	cmp	fp, r3
 802150e:	db17      	blt.n	8021540 <__gethex+0x3d4>
 8021510:	6861      	ldr	r1, [r4, #4]
 8021512:	9801      	ldr	r0, [sp, #4]
 8021514:	3101      	adds	r1, #1
 8021516:	f7fd fe17 	bl	801f148 <_Balloc>
 802151a:	4681      	mov	r9, r0
 802151c:	b918      	cbnz	r0, 8021526 <__gethex+0x3ba>
 802151e:	4b1a      	ldr	r3, [pc, #104]	@ (8021588 <__gethex+0x41c>)
 8021520:	4602      	mov	r2, r0
 8021522:	2184      	movs	r1, #132	@ 0x84
 8021524:	e6c5      	b.n	80212b2 <__gethex+0x146>
 8021526:	6922      	ldr	r2, [r4, #16]
 8021528:	3202      	adds	r2, #2
 802152a:	f104 010c 	add.w	r1, r4, #12
 802152e:	0092      	lsls	r2, r2, #2
 8021530:	300c      	adds	r0, #12
 8021532:	f7fc fea6 	bl	801e282 <memcpy>
 8021536:	4621      	mov	r1, r4
 8021538:	9801      	ldr	r0, [sp, #4]
 802153a:	f7fd fe45 	bl	801f1c8 <_Bfree>
 802153e:	464c      	mov	r4, r9
 8021540:	6923      	ldr	r3, [r4, #16]
 8021542:	1c5a      	adds	r2, r3, #1
 8021544:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021548:	6122      	str	r2, [r4, #16]
 802154a:	2201      	movs	r2, #1
 802154c:	615a      	str	r2, [r3, #20]
 802154e:	e7be      	b.n	80214ce <__gethex+0x362>
 8021550:	6922      	ldr	r2, [r4, #16]
 8021552:	455a      	cmp	r2, fp
 8021554:	dd0b      	ble.n	802156e <__gethex+0x402>
 8021556:	2101      	movs	r1, #1
 8021558:	4620      	mov	r0, r4
 802155a:	f7ff fd9f 	bl	802109c <rshift>
 802155e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021562:	3701      	adds	r7, #1
 8021564:	42bb      	cmp	r3, r7
 8021566:	f6ff aee0 	blt.w	802132a <__gethex+0x1be>
 802156a:	2501      	movs	r5, #1
 802156c:	e7c2      	b.n	80214f4 <__gethex+0x388>
 802156e:	f016 061f 	ands.w	r6, r6, #31
 8021572:	d0fa      	beq.n	802156a <__gethex+0x3fe>
 8021574:	4453      	add	r3, sl
 8021576:	f1c6 0620 	rsb	r6, r6, #32
 802157a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802157e:	f7fd fed5 	bl	801f32c <__hi0bits>
 8021582:	42b0      	cmp	r0, r6
 8021584:	dbe7      	blt.n	8021556 <__gethex+0x3ea>
 8021586:	e7f0      	b.n	802156a <__gethex+0x3fe>
 8021588:	0802282d 	.word	0x0802282d

0802158c <L_shift>:
 802158c:	f1c2 0208 	rsb	r2, r2, #8
 8021590:	0092      	lsls	r2, r2, #2
 8021592:	b570      	push	{r4, r5, r6, lr}
 8021594:	f1c2 0620 	rsb	r6, r2, #32
 8021598:	6843      	ldr	r3, [r0, #4]
 802159a:	6804      	ldr	r4, [r0, #0]
 802159c:	fa03 f506 	lsl.w	r5, r3, r6
 80215a0:	432c      	orrs	r4, r5
 80215a2:	40d3      	lsrs	r3, r2
 80215a4:	6004      	str	r4, [r0, #0]
 80215a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80215aa:	4288      	cmp	r0, r1
 80215ac:	d3f4      	bcc.n	8021598 <L_shift+0xc>
 80215ae:	bd70      	pop	{r4, r5, r6, pc}

080215b0 <__match>:
 80215b0:	b530      	push	{r4, r5, lr}
 80215b2:	6803      	ldr	r3, [r0, #0]
 80215b4:	3301      	adds	r3, #1
 80215b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80215ba:	b914      	cbnz	r4, 80215c2 <__match+0x12>
 80215bc:	6003      	str	r3, [r0, #0]
 80215be:	2001      	movs	r0, #1
 80215c0:	bd30      	pop	{r4, r5, pc}
 80215c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80215c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80215ca:	2d19      	cmp	r5, #25
 80215cc:	bf98      	it	ls
 80215ce:	3220      	addls	r2, #32
 80215d0:	42a2      	cmp	r2, r4
 80215d2:	d0f0      	beq.n	80215b6 <__match+0x6>
 80215d4:	2000      	movs	r0, #0
 80215d6:	e7f3      	b.n	80215c0 <__match+0x10>

080215d8 <__hexnan>:
 80215d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215dc:	680b      	ldr	r3, [r1, #0]
 80215de:	6801      	ldr	r1, [r0, #0]
 80215e0:	115e      	asrs	r6, r3, #5
 80215e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80215e6:	f013 031f 	ands.w	r3, r3, #31
 80215ea:	b087      	sub	sp, #28
 80215ec:	bf18      	it	ne
 80215ee:	3604      	addne	r6, #4
 80215f0:	2500      	movs	r5, #0
 80215f2:	1f37      	subs	r7, r6, #4
 80215f4:	4682      	mov	sl, r0
 80215f6:	4690      	mov	r8, r2
 80215f8:	9301      	str	r3, [sp, #4]
 80215fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80215fe:	46b9      	mov	r9, r7
 8021600:	463c      	mov	r4, r7
 8021602:	9502      	str	r5, [sp, #8]
 8021604:	46ab      	mov	fp, r5
 8021606:	784a      	ldrb	r2, [r1, #1]
 8021608:	1c4b      	adds	r3, r1, #1
 802160a:	9303      	str	r3, [sp, #12]
 802160c:	b342      	cbz	r2, 8021660 <__hexnan+0x88>
 802160e:	4610      	mov	r0, r2
 8021610:	9105      	str	r1, [sp, #20]
 8021612:	9204      	str	r2, [sp, #16]
 8021614:	f7ff fd94 	bl	8021140 <__hexdig_fun>
 8021618:	2800      	cmp	r0, #0
 802161a:	d151      	bne.n	80216c0 <__hexnan+0xe8>
 802161c:	9a04      	ldr	r2, [sp, #16]
 802161e:	9905      	ldr	r1, [sp, #20]
 8021620:	2a20      	cmp	r2, #32
 8021622:	d818      	bhi.n	8021656 <__hexnan+0x7e>
 8021624:	9b02      	ldr	r3, [sp, #8]
 8021626:	459b      	cmp	fp, r3
 8021628:	dd13      	ble.n	8021652 <__hexnan+0x7a>
 802162a:	454c      	cmp	r4, r9
 802162c:	d206      	bcs.n	802163c <__hexnan+0x64>
 802162e:	2d07      	cmp	r5, #7
 8021630:	dc04      	bgt.n	802163c <__hexnan+0x64>
 8021632:	462a      	mov	r2, r5
 8021634:	4649      	mov	r1, r9
 8021636:	4620      	mov	r0, r4
 8021638:	f7ff ffa8 	bl	802158c <L_shift>
 802163c:	4544      	cmp	r4, r8
 802163e:	d952      	bls.n	80216e6 <__hexnan+0x10e>
 8021640:	2300      	movs	r3, #0
 8021642:	f1a4 0904 	sub.w	r9, r4, #4
 8021646:	f844 3c04 	str.w	r3, [r4, #-4]
 802164a:	f8cd b008 	str.w	fp, [sp, #8]
 802164e:	464c      	mov	r4, r9
 8021650:	461d      	mov	r5, r3
 8021652:	9903      	ldr	r1, [sp, #12]
 8021654:	e7d7      	b.n	8021606 <__hexnan+0x2e>
 8021656:	2a29      	cmp	r2, #41	@ 0x29
 8021658:	d157      	bne.n	802170a <__hexnan+0x132>
 802165a:	3102      	adds	r1, #2
 802165c:	f8ca 1000 	str.w	r1, [sl]
 8021660:	f1bb 0f00 	cmp.w	fp, #0
 8021664:	d051      	beq.n	802170a <__hexnan+0x132>
 8021666:	454c      	cmp	r4, r9
 8021668:	d206      	bcs.n	8021678 <__hexnan+0xa0>
 802166a:	2d07      	cmp	r5, #7
 802166c:	dc04      	bgt.n	8021678 <__hexnan+0xa0>
 802166e:	462a      	mov	r2, r5
 8021670:	4649      	mov	r1, r9
 8021672:	4620      	mov	r0, r4
 8021674:	f7ff ff8a 	bl	802158c <L_shift>
 8021678:	4544      	cmp	r4, r8
 802167a:	d936      	bls.n	80216ea <__hexnan+0x112>
 802167c:	f1a8 0204 	sub.w	r2, r8, #4
 8021680:	4623      	mov	r3, r4
 8021682:	f853 1b04 	ldr.w	r1, [r3], #4
 8021686:	f842 1f04 	str.w	r1, [r2, #4]!
 802168a:	429f      	cmp	r7, r3
 802168c:	d2f9      	bcs.n	8021682 <__hexnan+0xaa>
 802168e:	1b3b      	subs	r3, r7, r4
 8021690:	f023 0303 	bic.w	r3, r3, #3
 8021694:	3304      	adds	r3, #4
 8021696:	3401      	adds	r4, #1
 8021698:	3e03      	subs	r6, #3
 802169a:	42b4      	cmp	r4, r6
 802169c:	bf88      	it	hi
 802169e:	2304      	movhi	r3, #4
 80216a0:	4443      	add	r3, r8
 80216a2:	2200      	movs	r2, #0
 80216a4:	f843 2b04 	str.w	r2, [r3], #4
 80216a8:	429f      	cmp	r7, r3
 80216aa:	d2fb      	bcs.n	80216a4 <__hexnan+0xcc>
 80216ac:	683b      	ldr	r3, [r7, #0]
 80216ae:	b91b      	cbnz	r3, 80216b8 <__hexnan+0xe0>
 80216b0:	4547      	cmp	r7, r8
 80216b2:	d128      	bne.n	8021706 <__hexnan+0x12e>
 80216b4:	2301      	movs	r3, #1
 80216b6:	603b      	str	r3, [r7, #0]
 80216b8:	2005      	movs	r0, #5
 80216ba:	b007      	add	sp, #28
 80216bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216c0:	3501      	adds	r5, #1
 80216c2:	2d08      	cmp	r5, #8
 80216c4:	f10b 0b01 	add.w	fp, fp, #1
 80216c8:	dd06      	ble.n	80216d8 <__hexnan+0x100>
 80216ca:	4544      	cmp	r4, r8
 80216cc:	d9c1      	bls.n	8021652 <__hexnan+0x7a>
 80216ce:	2300      	movs	r3, #0
 80216d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80216d4:	2501      	movs	r5, #1
 80216d6:	3c04      	subs	r4, #4
 80216d8:	6822      	ldr	r2, [r4, #0]
 80216da:	f000 000f 	and.w	r0, r0, #15
 80216de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80216e2:	6020      	str	r0, [r4, #0]
 80216e4:	e7b5      	b.n	8021652 <__hexnan+0x7a>
 80216e6:	2508      	movs	r5, #8
 80216e8:	e7b3      	b.n	8021652 <__hexnan+0x7a>
 80216ea:	9b01      	ldr	r3, [sp, #4]
 80216ec:	2b00      	cmp	r3, #0
 80216ee:	d0dd      	beq.n	80216ac <__hexnan+0xd4>
 80216f0:	f1c3 0320 	rsb	r3, r3, #32
 80216f4:	f04f 32ff 	mov.w	r2, #4294967295
 80216f8:	40da      	lsrs	r2, r3
 80216fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80216fe:	4013      	ands	r3, r2
 8021700:	f846 3c04 	str.w	r3, [r6, #-4]
 8021704:	e7d2      	b.n	80216ac <__hexnan+0xd4>
 8021706:	3f04      	subs	r7, #4
 8021708:	e7d0      	b.n	80216ac <__hexnan+0xd4>
 802170a:	2004      	movs	r0, #4
 802170c:	e7d5      	b.n	80216ba <__hexnan+0xe2>

0802170e <__ascii_mbtowc>:
 802170e:	b082      	sub	sp, #8
 8021710:	b901      	cbnz	r1, 8021714 <__ascii_mbtowc+0x6>
 8021712:	a901      	add	r1, sp, #4
 8021714:	b142      	cbz	r2, 8021728 <__ascii_mbtowc+0x1a>
 8021716:	b14b      	cbz	r3, 802172c <__ascii_mbtowc+0x1e>
 8021718:	7813      	ldrb	r3, [r2, #0]
 802171a:	600b      	str	r3, [r1, #0]
 802171c:	7812      	ldrb	r2, [r2, #0]
 802171e:	1e10      	subs	r0, r2, #0
 8021720:	bf18      	it	ne
 8021722:	2001      	movne	r0, #1
 8021724:	b002      	add	sp, #8
 8021726:	4770      	bx	lr
 8021728:	4610      	mov	r0, r2
 802172a:	e7fb      	b.n	8021724 <__ascii_mbtowc+0x16>
 802172c:	f06f 0001 	mvn.w	r0, #1
 8021730:	e7f8      	b.n	8021724 <__ascii_mbtowc+0x16>

08021732 <_realloc_r>:
 8021732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021736:	4680      	mov	r8, r0
 8021738:	4615      	mov	r5, r2
 802173a:	460c      	mov	r4, r1
 802173c:	b921      	cbnz	r1, 8021748 <_realloc_r+0x16>
 802173e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021742:	4611      	mov	r1, r2
 8021744:	f7fd bc74 	b.w	801f030 <_malloc_r>
 8021748:	b92a      	cbnz	r2, 8021756 <_realloc_r+0x24>
 802174a:	f7fd fbfd 	bl	801ef48 <_free_r>
 802174e:	2400      	movs	r4, #0
 8021750:	4620      	mov	r0, r4
 8021752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021756:	f000 f840 	bl	80217da <_malloc_usable_size_r>
 802175a:	4285      	cmp	r5, r0
 802175c:	4606      	mov	r6, r0
 802175e:	d802      	bhi.n	8021766 <_realloc_r+0x34>
 8021760:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8021764:	d8f4      	bhi.n	8021750 <_realloc_r+0x1e>
 8021766:	4629      	mov	r1, r5
 8021768:	4640      	mov	r0, r8
 802176a:	f7fd fc61 	bl	801f030 <_malloc_r>
 802176e:	4607      	mov	r7, r0
 8021770:	2800      	cmp	r0, #0
 8021772:	d0ec      	beq.n	802174e <_realloc_r+0x1c>
 8021774:	42b5      	cmp	r5, r6
 8021776:	462a      	mov	r2, r5
 8021778:	4621      	mov	r1, r4
 802177a:	bf28      	it	cs
 802177c:	4632      	movcs	r2, r6
 802177e:	f7fc fd80 	bl	801e282 <memcpy>
 8021782:	4621      	mov	r1, r4
 8021784:	4640      	mov	r0, r8
 8021786:	f7fd fbdf 	bl	801ef48 <_free_r>
 802178a:	463c      	mov	r4, r7
 802178c:	e7e0      	b.n	8021750 <_realloc_r+0x1e>

0802178e <__ascii_wctomb>:
 802178e:	4603      	mov	r3, r0
 8021790:	4608      	mov	r0, r1
 8021792:	b141      	cbz	r1, 80217a6 <__ascii_wctomb+0x18>
 8021794:	2aff      	cmp	r2, #255	@ 0xff
 8021796:	d904      	bls.n	80217a2 <__ascii_wctomb+0x14>
 8021798:	228a      	movs	r2, #138	@ 0x8a
 802179a:	601a      	str	r2, [r3, #0]
 802179c:	f04f 30ff 	mov.w	r0, #4294967295
 80217a0:	4770      	bx	lr
 80217a2:	700a      	strb	r2, [r1, #0]
 80217a4:	2001      	movs	r0, #1
 80217a6:	4770      	bx	lr

080217a8 <fiprintf>:
 80217a8:	b40e      	push	{r1, r2, r3}
 80217aa:	b503      	push	{r0, r1, lr}
 80217ac:	4601      	mov	r1, r0
 80217ae:	ab03      	add	r3, sp, #12
 80217b0:	4805      	ldr	r0, [pc, #20]	@ (80217c8 <fiprintf+0x20>)
 80217b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80217b6:	6800      	ldr	r0, [r0, #0]
 80217b8:	9301      	str	r3, [sp, #4]
 80217ba:	f7ff f97d 	bl	8020ab8 <_vfiprintf_r>
 80217be:	b002      	add	sp, #8
 80217c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80217c4:	b003      	add	sp, #12
 80217c6:	4770      	bx	lr
 80217c8:	2000003c 	.word	0x2000003c

080217cc <abort>:
 80217cc:	b508      	push	{r3, lr}
 80217ce:	2006      	movs	r0, #6
 80217d0:	f000 f834 	bl	802183c <raise>
 80217d4:	2001      	movs	r0, #1
 80217d6:	f7e3 fa0b 	bl	8004bf0 <_exit>

080217da <_malloc_usable_size_r>:
 80217da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80217de:	1f18      	subs	r0, r3, #4
 80217e0:	2b00      	cmp	r3, #0
 80217e2:	bfbc      	itt	lt
 80217e4:	580b      	ldrlt	r3, [r1, r0]
 80217e6:	18c0      	addlt	r0, r0, r3
 80217e8:	4770      	bx	lr

080217ea <_raise_r>:
 80217ea:	291f      	cmp	r1, #31
 80217ec:	b538      	push	{r3, r4, r5, lr}
 80217ee:	4605      	mov	r5, r0
 80217f0:	460c      	mov	r4, r1
 80217f2:	d904      	bls.n	80217fe <_raise_r+0x14>
 80217f4:	2316      	movs	r3, #22
 80217f6:	6003      	str	r3, [r0, #0]
 80217f8:	f04f 30ff 	mov.w	r0, #4294967295
 80217fc:	bd38      	pop	{r3, r4, r5, pc}
 80217fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8021800:	b112      	cbz	r2, 8021808 <_raise_r+0x1e>
 8021802:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021806:	b94b      	cbnz	r3, 802181c <_raise_r+0x32>
 8021808:	4628      	mov	r0, r5
 802180a:	f000 f831 	bl	8021870 <_getpid_r>
 802180e:	4622      	mov	r2, r4
 8021810:	4601      	mov	r1, r0
 8021812:	4628      	mov	r0, r5
 8021814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021818:	f000 b818 	b.w	802184c <_kill_r>
 802181c:	2b01      	cmp	r3, #1
 802181e:	d00a      	beq.n	8021836 <_raise_r+0x4c>
 8021820:	1c59      	adds	r1, r3, #1
 8021822:	d103      	bne.n	802182c <_raise_r+0x42>
 8021824:	2316      	movs	r3, #22
 8021826:	6003      	str	r3, [r0, #0]
 8021828:	2001      	movs	r0, #1
 802182a:	e7e7      	b.n	80217fc <_raise_r+0x12>
 802182c:	2100      	movs	r1, #0
 802182e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8021832:	4620      	mov	r0, r4
 8021834:	4798      	blx	r3
 8021836:	2000      	movs	r0, #0
 8021838:	e7e0      	b.n	80217fc <_raise_r+0x12>
	...

0802183c <raise>:
 802183c:	4b02      	ldr	r3, [pc, #8]	@ (8021848 <raise+0xc>)
 802183e:	4601      	mov	r1, r0
 8021840:	6818      	ldr	r0, [r3, #0]
 8021842:	f7ff bfd2 	b.w	80217ea <_raise_r>
 8021846:	bf00      	nop
 8021848:	2000003c 	.word	0x2000003c

0802184c <_kill_r>:
 802184c:	b538      	push	{r3, r4, r5, lr}
 802184e:	4d07      	ldr	r5, [pc, #28]	@ (802186c <_kill_r+0x20>)
 8021850:	2300      	movs	r3, #0
 8021852:	4604      	mov	r4, r0
 8021854:	4608      	mov	r0, r1
 8021856:	4611      	mov	r1, r2
 8021858:	602b      	str	r3, [r5, #0]
 802185a:	f7e3 f9b9 	bl	8004bd0 <_kill>
 802185e:	1c43      	adds	r3, r0, #1
 8021860:	d102      	bne.n	8021868 <_kill_r+0x1c>
 8021862:	682b      	ldr	r3, [r5, #0]
 8021864:	b103      	cbz	r3, 8021868 <_kill_r+0x1c>
 8021866:	6023      	str	r3, [r4, #0]
 8021868:	bd38      	pop	{r3, r4, r5, pc}
 802186a:	bf00      	nop
 802186c:	2001bee0 	.word	0x2001bee0

08021870 <_getpid_r>:
 8021870:	f7e3 b9a6 	b.w	8004bc0 <_getpid>

08021874 <_init>:
 8021874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021876:	bf00      	nop
 8021878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802187a:	bc08      	pop	{r3}
 802187c:	469e      	mov	lr, r3
 802187e:	4770      	bx	lr

08021880 <_fini>:
 8021880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021882:	bf00      	nop
 8021884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021886:	bc08      	pop	{r3}
 8021888:	469e      	mov	lr, r3
 802188a:	4770      	bx	lr
